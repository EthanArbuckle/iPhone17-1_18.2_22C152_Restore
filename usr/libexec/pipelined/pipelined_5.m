void sub_100295D54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100295E3C()
{
  if (qword_10047BF08 != -1) {
    goto LABEL_9;
  }
  while (1)
  {
    v0 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_FAULT)) {
      goto LABEL_4;
    }
    *(_DWORD *)buf = 68289539;
    int v4 = 0;
    __int16 v5 = 2082;
    v6 = "";
    __int16 v7 = 2082;
    v8 = "assert";
    __int16 v9 = 2081;
    v10 = "0";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"corrupt database, will now abort\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_10047BF08 != -1)
    {
      dispatch_once(&qword_10047BF08, &stru_100463950);
      v1 = qword_10047BF10;
      if (!os_signpost_enabled((os_log_t)qword_10047BF10)) {
        goto LABEL_6;
      }
    }
    else
    {
LABEL_4:
      v1 = qword_10047BF10;
      if (!os_signpost_enabled((os_log_t)qword_10047BF10)) {
        goto LABEL_6;
      }
    }
    *(_DWORD *)buf = 68289539;
    int v4 = 0;
    __int16 v5 = 2082;
    v6 = "";
    __int16 v7 = 2082;
    v8 = "assert";
    __int16 v9 = 2081;
    v10 = "0";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "corrupt database, will now abort", "{\"msg%{public}.0s\":\"corrupt database, will now abort\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_10047BF08 != -1)
    {
      dispatch_once(&qword_10047BF08, &stru_100463950);
      v2 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
        goto LABEL_8;
      }
LABEL_7:
      *(_DWORD *)buf = 68289539;
      int v4 = 0;
      __int16 v5 = 2082;
      v6 = "";
      __int16 v7 = 2082;
      v8 = "assert";
      __int16 v9 = 2081;
      v10 = "0";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"corrupt database, will now abort\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      goto LABEL_8;
    }
LABEL_6:
    v2 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_INFO)) {
      goto LABEL_7;
    }
LABEL_8:
    abort_report_np();
LABEL_9:
    dispatch_once(&qword_10047BF08, &stru_100463950);
  }
}

void sub_100296084(sqlite3 **a1)
{
  *(void *)pnCkpt = 0;
  int v2 = sqlite3_wal_checkpoint_v2(*a1, 0, 0, &pnCkpt[1], pnCkpt);
  sub_100088644(v2, *a1);
  if (v2)
  {
    int v4 = __error();
    sub_100295674(*v4, &v17);
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v13, " w/ ");
    __int16 v5 = std::string::insert(&v13, 0, "Checkpoint failed.");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      sub_1000559FC(&__dst, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v17;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    __int16 v9 = std::string::append(&v14, (const std::string::value_type *)p_dst, size);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(&v16, &v15);
    v16.__vftable = (std::runtime_error_vtbl *)&off_100460B68;
    sub_10018E868((uint64_t)v11);
    sub_100204FC4(&v16, (uint64_t)"void db::resources::handle::checkpoint()", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_helper.cpp", 290, (uint64_t)v11);
  }
  if (qword_10047BF08 == -1)
  {
    v3 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    goto LABEL_4;
  }
  dispatch_once(&qword_10047BF08, &stru_100463950);
  v3 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
  {
LABEL_4:
    *(_DWORD *)buf = 67109376;
    int v20 = pnCkpt[1];
    __int16 v21 = 1024;
    int v22 = pnCkpt[0];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Checkpoint succeeded w/ %d frames logged and %d frames checkpointed", buf, 0xEu);
  }
}

void sub_100296418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a35 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a35 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a30);
  if ((a28 & 0x80000000) == 0)
  {
LABEL_5:
    sub_100205504((std::runtime_error *)(v62 - 144));
    v64 = a40;
    if (!a40)
    {
LABEL_12:
      std::runtime_error::~runtime_error((std::runtime_error *)(v62 - 192));
      if (*(char *)(v62 - 201) < 0)
      {
        operator delete(*(void **)(v62 - 224));
        if ((a48 & 0x80000000) == 0)
        {
LABEL_14:
          if ((a60 & 0x80000000) == 0) {
            goto LABEL_15;
          }
          goto LABEL_20;
        }
      }
      else if ((a48 & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(a43);
      if ((a60 & 0x80000000) == 0)
      {
LABEL_15:
        if (a54 < 0) {
          goto LABEL_16;
        }
        goto LABEL_21;
      }
LABEL_20:
      operator delete(a55);
      if (a54 < 0)
      {
LABEL_16:
        operator delete(a49);
        if ((v61 & 1) == 0)
        {
LABEL_23:
          if (*(char *)(v62 - 153) < 0)
          {
            operator delete(*(void **)(v62 - 176));
            _Unwind_Resume(a1);
          }
          _Unwind_Resume(a1);
        }
LABEL_22:
        __cxa_free_exception(v60);
        goto LABEL_23;
      }
LABEL_21:
      if (!v61) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_11:
    operator delete(v64);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a23);
  sub_100205504((std::runtime_error *)(v62 - 144));
  v64 = a40;
  if (!a40) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

const char *sub_1002965E4(sqlite3 **a1, const char *a2)
{
  return sqlite3_db_filename(*a1, a2);
}

uint64_t sub_1002965F4(uint64_t a1, long long *a2, sqlite3 **a3, dispatch_object_t object)
{
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = object;
  *(_WORD *)(a1 + 72) = 0;
  if (object)
  {
    dispatch_retain(object);
    long long v6 = *(NSObject **)(a1 + 64);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 0x40000000;
    v10[2] = sub_100296804;
    v10[3] = &unk_1004638D0;
    v10[4] = a1;
    __p[0] = v10;
    sub_1002977E4(v6, (uint64_t)__p);
    return a1;
  }
  std::operator+<char>();
  if (v12 >= 0) {
    __int16 v9 = __p;
  }
  else {
    __int16 v9 = (void **)__p[0];
  }
  sub_10008D100(a3, (const char *)v9, "Failed to create new savepoint");
  if ((v12 & 0x80000000) == 0) {
    return a1;
  }
  operator delete(__p[0]);
  return a1;
}

void sub_100296710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_1001F505C((void *)(v19 + 32));
    if ((*(char *)(v19 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1001F505C((void *)(v19 + 32));
    if ((*(char *)(v19 + 23) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*(void **)v19);
  _Unwind_Resume(a1);
}

uint64_t sub_100296778(uint64_t a1, uint64_t a2, sqlite3 **a3, NSObject *a4)
{
  *(_OWORD *)__p = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_1002965F4(a1, (long long *)__p, a3, a4);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1002967E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100296804(uint64_t a1)
{
  v1 = *(sqlite3 ***)(*(void *)(a1 + 32) + 24);
  std::operator+<char>();
  if (v4 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  sub_10008D100(v1, p_p, "Failed to create new savepoint");
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_100296884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002968A0(uint64_t a1)
{
  v9[0] = 0;
  *(void *)buf = (char *)off_100463BE0 + 1;
  v11[0] = a1;
  sub_10029973C((uint64_t *)buf, v9);
  if (*(void *)buf)
  {
    if ((buf[0] & 1) == 0)
    {
      int v2 = *(void (**)(void *, void *, uint64_t))(*(void *)buf & 0xFFFFFFFFFFFFFFFELL);
      if (v2) {
        v2(v11, v11, 2);
      }
    }
  }
  if (!*(void *)(a1 + 24) || *(unsigned char *)(a1 + 73) || *(unsigned char *)(a1 + 72))
  {
    sub_100297960(v9);
    uint64_t v3 = a1 + 32;
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4 != a1 + 32) {
      goto LABEL_9;
    }
LABEL_21:
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_22:
    operator delete(*(void **)a1);
    return;
  }
  if (qword_10047BF08 == -1)
  {
    long long v5 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  dispatch_once(&qword_10047BF08, &stru_100463950);
  long long v5 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
  {
LABEL_15:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "transaction not completed", buf, 2u);
  }
LABEL_16:
  std::current_exception();
  if (*(void *)buf)
  {
    std::exception_ptr::exception_ptr(&v8, (const std::exception_ptr *)buf);
    v7.__ptr_ = &v8;
    std::rethrow_exception(v7);
    __break(1u);
    return;
  }
  if (qword_10047BF08 == -1)
  {
    long long v6 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  dispatch_once(&qword_10047BF08, &stru_100463950);
  long long v6 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
  {
LABEL_19:
    *(_WORD *)char v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Forgot to commit transaction?", v12, 2u);
  }
LABEL_20:
  sub_100296DA8(a1);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)buf);
  sub_100297960(v9);
  uint64_t v3 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 == a1 + 32) {
    goto LABEL_21;
  }
LABEL_9:
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_22;
  }
}

void sub_100296B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  std::exception_ptr::~exception_ptr(&a10);
  int v20 = __cxa_begin_catch(exception_object);
  if (a2 != 2)
  {
    sub_1003A6900();
    sub_100296DA8(v15);
    __cxa_end_catch();
LABEL_25:
    JUMPOUT(0x100296A60);
  }
  __int16 v21 = (int *)sub_100296F84(v20);
  int v22 = v21;
  if (v21)
  {
    uint64_t v23 = *(void *)(v16 + 3848);
    if (*v21 == 13)
    {
      if (v23 == -1)
      {
        v24 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
          goto LABEL_16;
        }
      }
      else
      {
        dispatch_once(&qword_10047BF08, &stru_100463950);
        v24 = qword_10047BF10;
        if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
          goto LABEL_16;
        }
      }
      *(_WORD *)(v17 - 48) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Ignoring rollback exception because the only reasonable case is low-disk in which case it's because of a higher-level error anyway", (uint8_t *)(v17 - 48), 2u);
LABEL_16:
      __cxa_end_catch();
      goto LABEL_25;
    }
    if (v23 != -1)
    {
      dispatch_once(&qword_10047BF08, &stru_100463950);
      uint64_t v30 = qword_10047BF10;
      if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
    uint64_t v30 = qword_10047BF10;
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      int v31 = *v22;
      *(_DWORD *)(v17 - 48) = 67109120;
      *(_DWORD *)(v17 - 44) = v31;
      v26 = "Rolling back due to sql failure %d";
      v27 = (uint8_t *)(v17 - 48);
      v28 = v30;
      uint32_t v29 = 8;
      goto LABEL_14;
    }
LABEL_15:
    sub_100296DA8(v15);
    goto LABEL_16;
  }
  if (*(void *)(v16 + 3848) == -1)
  {
    uint64_t v25 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_100463950);
    uint64_t v25 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
  }
  *(_WORD *)(v17 - 48) = 0;
  v26 = "Rolling back due to unknown kind of failure";
  v27 = (uint8_t *)(v17 - 48);
  v28 = v25;
  uint32_t v29 = 2;
LABEL_14:
  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, v26, v27, v29);
  goto LABEL_15;
}

void sub_100296D98(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x100296DA0);
  }
  JUMPOUT(0x100296D64);
}

uint64_t sub_100296DA8(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 64);
  if (!v2)
  {
    sub_1002974F4(a1);
    uint64_t result = *(void *)(a1 + 56);
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_1002974EC;
  v5[3] = &unk_100463910;
  v5[4] = a1;
  uint64_t v4 = v5;
  sub_1002977E4(v2, (uint64_t)&v4);
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  return result;
}

void sub_100296EA4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (qword_10047BF08 != -1) {
      sub_1003A698C();
    }
    if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
      sub_10018E4B4((int)&__p);
    }
    if (!v9)
    {
      __cxa_end_catch();
      JUMPOUT(0x100296E74);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void *sub_100296F84(const void *a1)
{
  if (result)
  {
    uint64_t v2 = result[1];
    if (!v2) {
      return 0;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 8))(&v5);
    uint64_t v4 = v5;
    uint64_t v3 = v6;
    if (v6 && atomic_fetch_add(v6 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 16))(v3);
      if (atomic_fetch_add(v3 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 24))(v3);
      }
    }
    if (v4) {
      return (void *)(v4 + 8);
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_1002970D0(uint64_t *a1)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 0x40000000;
    v3[2] = sub_10029716C;
    v3[3] = &unk_1004638F0;
    v3[4] = a1;
    uint64_t v4 = v3;
    sub_1002977E4(v2, (uint64_t)&v4);
  }
  else
  {
    sub_100297174(a1);
  }
}

void sub_10029716C(uint64_t a1)
{
}

void sub_100297174(uint64_t *a1)
{
  if (*((unsigned char *)a1 + 72))
  {
    sub_1000AE4B0(buf, "");
    sub_1002768DC("Cannot commit - already rolled back", &__dst);
    sub_10016A2C4((uint64_t)buf, (uint64_t)&__dst, 1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1000D11E0((uint64_t)__p);
  }
  if (*((unsigned char *)a1 + 73))
  {
    sub_1000AE4B0(buf, "");
    sub_10015F140("Cannot commit - already committed", &__dst);
    sub_10016A2C4((uint64_t)buf, (uint64_t)&__dst, 1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v17 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1000D11E0((uint64_t)__p);
  }
  if (qword_10047BF08 == -1)
  {
    uint64_t v2 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_19;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_100463950);
    uint64_t v2 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_19;
    }
  }
  uint64_t v3 = a1;
  if (*((char *)a1 + 23) < 0) {
    uint64_t v3 = (uint64_t *)*a1;
  }
  uint64_t v4 = sqlite3_db_filename(*(sqlite3 **)a1[3], "main");
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  std::string::size_type v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
    p_dst = &__dst;
    if (!v5) {
      goto LABEL_15;
    }
  }
  memmove(p_dst, v4, v6);
LABEL_15:
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  long long v10 = &__dst;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v10 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)buf = 136315394;
  *(void *)&uint8_t buf[4] = v3;
  __int16 v15 = 2080;
  uint64_t v16 = v10;
  _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Committing transaction %s into %s", buf, 0x16u);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_19:
  v11 = (sqlite3 **)a1[3];
  std::operator+<char>();
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v12 = &__dst;
  }
  else {
    char v12 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  sub_10008D100(v11, (const char *)v12, "Failed to release savepoint without rollback");
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)a1 + 73) = 1;
}

void sub_100297484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002974EC(uint64_t a1)
{
}

void sub_1002974F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 73))
  {
    sub_1000AE4B0(__p, "");
    sub_1002768DC("Cannot rollback - already committed", &buf);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v7);
  }
  if (*(unsigned char *)(a1 + 72))
  {
    sub_1000AE4B0(__p, "");
    sub_1002768DC("Cannot rollback - already cancelled", &buf);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v7);
  }
  if (qword_10047BF08 == -1)
  {
    uint64_t v2 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  dispatch_once(&qword_10047BF08, &stru_100463950);
  uint64_t v2 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEBUG))
  {
LABEL_5:
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Rolling back transaction", (uint8_t *)&buf, 2u);
  }
LABEL_6:
  uint64_t v3 = *(sqlite3 ***)(a1 + 24);
  std::operator+<char>();
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  sub_10008D100(v3, (const char *)p_buf, "Failed to rollback savepoint");
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  size_t v5 = *(sqlite3 ***)(a1 + 24);
  std::operator+<char>();
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = &buf;
  }
  else {
    std::string::size_type v6 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  sub_10008D100(v5, (const char *)v6, "Failed to release savepoint after rollback");
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a1 + 72) = 1;
}

void sub_100297760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
    sub_1000A6954(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002977B4(id a1)
{
  qword_10047BF10 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Database");
}

void sub_1002977E4(NSObject *a1, uint64_t a2)
{
  uint64_t v4 = std::promise<void>::promise(&v7);
  std::promise<void>::get_future(v4);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_1002978C8;
  v5[3] = &unk_100463970;
  v5[4] = a2;
  v5[5] = &v7;
  dispatch_sync(a1, v5);
  std::future<void>::get(&v6);
  std::future<void>::~future(&v6);
  std::promise<void>::~promise(&v7);
}

void sub_100297898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::future<void> a15)
{
  std::future<void>::~future(&a15);
  std::promise<void>::~promise((std::promise<void> *)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_1002978B4(_Unwind_Exception *a1)
{
  std::promise<void>::~promise((std::promise<void> *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1002978C8(uint64_t a1)
{
}

void sub_10029790C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_begin_catch(a1);
  uint64_t v15 = *(std::promise<void> **)(v14 + 40);
  std::current_exception();
  v16.__ptr_ = v17;
  std::promise<void>::set_exception(v15, v16);
  std::exception_ptr::~exception_ptr(v17);
  __cxa_end_catch();
}

void sub_100297944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t *sub_100297960(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1) {
    uint64_t v3 = nullsub_172;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    if (!v2)
    {
      std::runtime_error::runtime_error(&v6, "call to empty boost::function");
      v6.__vftable = (std::runtime_error_vtbl *)&off_100463A78;
      sub_100297A48(&v6);
    }
    (*(void (**)(uint64_t *))((v2 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 1);
    uint64_t v2 = *a1;
  }
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v4 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v4) {
        v4(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void sub_100297A2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
}

void sub_100297A48(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_100297AA8((uint64_t)exception, a1);
}

void sub_100297A90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100297AA8(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &off_100451ED0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &off_100463A00;
  *(void *)(a1 + 8) = off_100463A30;
  *(void *)(a1 + 24) = off_100463A58;
  return a1;
}

uint64_t sub_100297B54(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100451DC0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void sub_100297BD8()
{
}

void sub_100297D24()
{
  std::runtime_error::~runtime_error(v0);
  operator delete();
}

void sub_100297D50(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_100297D84(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_10029811C((uint64_t)exception, a1);
}

void sub_100297DCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100297DE0(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100451DC0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  operator delete();
}

void sub_100297E84(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

void sub_100297F10(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete();
}

void sub_100297FB8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_100298040(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete();
}

void sub_1002980E4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete();
}

uint64_t sub_10029811C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_100451ED0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &off_100463A78;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_100451DC0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &off_100463A00;
  *(void *)(a1 + 8) = off_100463A30;
  *(void *)(a1 + 24) = off_100463A58;
  return a1;
}

void sub_100298244(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_100298258()
{
}

void sub_1002984F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100156F18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100298508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000CD238((uint64_t)va);
  sub_100156F18((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100298524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 16))(a14);
    if (atomic_fetch_add(a14 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 24))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1002985B8()
{
}

void sub_100298610()
{
}

void sub_100298624(std::string *a1@<X8>)
{
  sub_1000CD728((const char *)((unint64_t)"P13tag_sql_rowid" & 0x7FFFFFFFFFFFFFFFLL), &v11);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v2.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v11;
  }
  else {
    v2.__i_ = (std::__wrap_iter<const char *>::iterator_type)v11.__r_.__value_.__r.__words[0];
  }
  std::string::insert(&v11, v2, 91);
  std::string v12 = v11;
  memset(&v11, 0, sizeof(v11));
  uint64_t v3 = std::string::append(&v12, "] = ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_100298868();
  if ((v10 & 0x80u) == 0) {
    long long v5 = __p;
  }
  else {
    long long v5 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v6 = v10;
  }
  else {
    std::string::size_type v6 = (std::string::size_type)__p[1];
  }
  std::promise<void> v7 = std::string::append(&v13, (const std::string::value_type *)v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v14, 10);
  *a1 = v14;
  memset(&v14, 0, sizeof(v14));
  if ((char)v10 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_18:
    operator delete(v11.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
}

void sub_1002987A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100298868()
{
  sub_1000CD96C((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10029899C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000CDB10((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002989B0()
{
}

void sub_100298C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100298CF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100298C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000CD238((uint64_t)va);
  sub_100298CF8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100298C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 16))(a14);
    if (atomic_fetch_add(a14 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 24))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100298CF8(uint64_t a1)
{
  char v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void sub_100298DA0()
{
}

void sub_100298E8C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    sub_1003A3598(v1);
  }
  __cxa_rethrow();
}

void sub_100298EA4(_Unwind_Exception *a1)
{
}

void sub_100298EBC()
{
}

uint64_t sub_100298ED0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_100298F00()
{
  return 0;
}

uint64_t sub_100298F08()
{
  return 0;
}

uint64_t sub_100298F10()
{
  return 0;
}

void sub_100298F1C()
{
}

void sub_100298F78()
{
}

void sub_100298F8C(std::string *a1@<X8>)
{
  sub_1000CD728((const char *)((unint64_t)"P18tag_sql_blob_flags" & 0x7FFFFFFFFFFFFFFFLL), &v11);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v2.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v11;
  }
  else {
    v2.__i_ = (std::__wrap_iter<const char *>::iterator_type)v11.__r_.__value_.__r.__words[0];
  }
  std::string::insert(&v11, v2, 91);
  std::string v12 = v11;
  memset(&v11, 0, sizeof(v11));
  uint64_t v3 = std::string::append(&v12, "] = ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_10020797C();
  if ((v10 & 0x80u) == 0) {
    long long v5 = __p;
  }
  else {
    long long v5 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v6 = v10;
  }
  else {
    std::string::size_type v6 = (std::string::size_type)__p[1];
  }
  std::promise<void> v7 = std::string::append(&v13, (const std::string::value_type *)v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v14, 10);
  *a1 = v14;
  memset(&v14, 0, sizeof(v14));
  if ((char)v10 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v13.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_18:
    operator delete(v11.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
}

void sub_10029910C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1002991D0()
{
}

void sub_10029945C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10029951C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100299470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000CD238((uint64_t)va);
  sub_10029951C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10029948C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 16))(a14);
    if (atomic_fetch_add(a14 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 24))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029951C(uint64_t a1)
{
  std::string::const_iterator v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void sub_1002995C4()
{
}

void sub_1002996B0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    sub_1003A3598(v1);
  }
  __cxa_rethrow();
}

void sub_1002996C8(_Unwind_Exception *a1)
{
}

void sub_1002996E0()
{
}

uint64_t sub_1002996F4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_100299724()
{
  return 0;
}

uint64_t sub_10029972C()
{
  return 0;
}

uint64_t sub_100299734()
{
  return 0;
}

uint64_t *sub_10029973C(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = (uint64_t)result;
    uint64_t v5 = 0;
    sub_1002998A0((uint64_t)&v5, result);
    sub_1002998A0(v3, a2);
    uint64_t result = (uint64_t *)sub_1002998A0((uint64_t)a2, &v5);
    if (v5)
    {
      if ((v5 & 1) == 0)
      {
        uint64_t v4 = *(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v4) {
          return (uint64_t *)v4(v6, v6, 2);
        }
      }
    }
  }
  return result;
}

void sub_1002997C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002997DC(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 <= 1)
  {
    *(void *)a2 = *(void *)result;
    return result;
  }
  if (a3 != 2)
  {
    if (a3 != 3)
    {
LABEL_2:
      a2[4] = 0;
      return result;
    }
    uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (result == ((unint64_t)"ZN2db9resources11transactionD1EvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)
      || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN2db9resources11transactionD1EvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)), !result))
    {
      *(void *)a2 = v4;
    }
    else
    {
      *(void *)a2 = 0;
    }
  }
  return result;
}

void sub_10029988C(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)a1 + 64);
  if (v1) {
    dispatch_release(v1);
  }
}

uint64_t sub_1002998A0(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    std::string::const_iterator v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      std::string::const_iterator v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_10029993C(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_10029994C(_Unwind_Exception *a1)
{
}

uint64_t *sub_100299960(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void sub_1002999B4()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100299A2C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

double sub_100299AA4(uint64_t a1)
{
  *(void *)a1 = 0;
  double result = INFINITY;
  *(_OWORD *)(a1 + 8) = xmmword_1003F9070;
  return result;
}

double sub_100299AB8(uint64_t a1)
{
  if (*(void *)a1) {
    return (*(double *)(a1 + 16) - *(double *)(a1 + 8)) * (double)(*(void *)a1 + 1) / (double)*(uint64_t *)a1;
  }
  else {
    return INFINITY;
  }
}

void sub_100299D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100299D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  while (1)
  {
    if (*((char *)v16 - 1) < 0) {
      operator delete(*(v16 - 3));
    }
    v16 -= 3;
    if (v16 == (void **)&a16) {
      JUMPOUT(0x100299D3CLL);
    }
  }
}

uint64_t sub_100299D8C(uint64_t result, uint64_t a2)
{
  *(void *)result += *(void *)a2;
  double v2 = *(double *)(a2 + 8);
  double v3 = *(double *)(result + 16);
  if (v2 >= *(double *)(result + 8)) {
    double v2 = *(double *)(result + 8);
  }
  *(double *)(result + 8) = v2;
  double v4 = *(double *)(a2 + 16);
  if (v3 >= v4) {
    double v4 = v3;
  }
  *(double *)(result + 16) = v4;
  return result;
}

void sub_100299DC4(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v23 = v21;
  v24 = v22;
  uint64_t v3 = *a1;
  if (*a1 >= 0) {
    uint64_t v4 = *a1;
  }
  else {
    uint64_t v4 = -v3;
  }
  v17[0] = v4;
  v17[1] = v22;
  char v18 = 48;
  int v19 = 48;
  uint64_t v5 = sub_100169AA8((uint64_t)v17);
  uint64_t v6 = (unsigned char *)v5;
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v23 = (unsigned char *)v5;
    v24 = v22;
    unint64_t v7 = (unint64_t)&v22[-v5];
    long long v8 = a2;
    if ((unint64_t)&v22[-v5] < 0x17) {
      goto LABEL_6;
    }
LABEL_14:
    std::string::__grow_by(a2, 0x16uLL, v7 - 22, 0, 0, 0, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if (v6 != v22) {
      goto LABEL_7;
    }
LABEL_18:
    unsigned __int8 v10 = v8;
    goto LABEL_21;
  }
  *(unsigned char *)(v5 - 1) = 45;
  uint64_t v6 = (unsigned char *)(v5 - 1);
  uint64_t v23 = (unsigned char *)(v5 - 1);
  v24 = v22;
  unint64_t v7 = (unint64_t)&v22[-v5 + 1];
  long long v8 = a2;
  if (v7 >= 0x17) {
    goto LABEL_14;
  }
LABEL_6:
  if (v6 == v22) {
    goto LABEL_18;
  }
LABEL_7:
  unint64_t v9 = &v20 - v6 + 41;
  if (v9 < 0x20 || (unint64_t)((char *)v8 - v6) < 0x20)
  {
    unsigned __int8 v10 = v8;
    std::string v11 = v6;
  }
  else
  {
    unsigned __int8 v10 = (std::string *)((char *)v8 + (v9 & 0xFFFFFFFFFFFFFFE0));
    std::string v11 = &v6[v9 & 0xFFFFFFFFFFFFFFE0];
    std::string v12 = (long long *)(v6 + 16);
    std::string v13 = &v8->__r_.__value_.__r.__words[2];
    unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *((_OWORD *)v13 - 1) = *(v12 - 1);
      *(_OWORD *)std::string v13 = v15;
      v12 += 2;
      v13 += 4;
      v14 -= 32;
    }
    while (v14);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_21;
    }
  }
  do
  {
    std::string::value_type v16 = *v11++;
    v10->__r_.__value_.__s.__data_[0] = v16;
    unsigned __int8 v10 = (std::string *)((char *)v10 + 1);
  }
  while (v11 != v22);
LABEL_21:
  v10->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    a2->__r_.__value_.__l.__size_ = v7;
  }
  else {
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = v7 & 0x7F;
  }
}

void sub_100299F84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100299FA0@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100299FD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100299FF0()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10029A068()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

double sub_10029A0E0(uint64_t a1)
{
  double v2 = *(double *)(a1 + 96);
  uint64_t v3 = (void *)(a1 + 8);
  double v4 = v2 - *(double *)sub_1002AA5B0((void *)(a1 + 8), 1);
  uint64_t v5 = (double *)sub_100300DC4(a1 + 32, 1uLL, 1uLL);
  double v6 = sub_10029A194(v4 / sqrt(*v5));
  double v7 = -*(double *)(a1 + 96);
  double v8 = v7 - *(double *)sub_1002AA5B0(v3, 1);
  unint64_t v9 = (double *)sub_100300DC4(a1 + 32, 1uLL, 1uLL);
  return v6 - sub_10029A194(v8 / sqrt(*v9));
}

double sub_10029A194(double a1)
{
  if (a1 >= 0.0) {
    return 1.0 / (exp(a1 * 0.7988 * (a1 * 0.04417 * a1 + 1.0) * -2.0) + 1.0);
  }
  else {
    return 1.0 - sub_10029A194(-a1);
  }
}

std::string *sub_10029A20C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10029A240(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029A25C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    *(void *)(a1 + 8) = off_10045FF70;
    double v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

std::string *sub_10029A2BC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10029A2F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10029A30C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10029A340(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029A35C()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10029A3D4()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

std::string *sub_10029A44C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10029A480(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10029A49C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10029A4D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029A4EC()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10029A564()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_10029A5DC(uint64_t a1)
{
  nullsub_93(a1 + 88);
  double v2 = *(void (****)(void))(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void))(a1 + 64);
    double v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 7;
      double v6 = v3 - 7;
      double v7 = v3 - 7;
      do
      {
        double v8 = *v7;
        v7 -= 7;
        (*v8)(v6);
        v5 -= 7;
        BOOL v9 = v6 == v2;
        double v6 = v7;
      }
      while (!v9);
      double v4 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_10029A680(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_10047BED8 == -1)
  {
    double v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BED8, &stru_100463C20);
  double v6 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    int v31 = 134218496;
    *(void *)v32 = v7;
    *(_WORD *)&v32[8] = 2048;
    uint64_t v33 = v8;
    __int16 v34 = 1024;
    int v35 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received an altitude event at %lld with relative altitude %f m when localizer is at floor level %d", (uint8_t *)&v31, 0x1Cu);
  }
LABEL_4:
  *(void *)(a1 + 104) = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 16);
  unsigned int v10 = *(_DWORD *)(a1 + 100);
  if (v10 >= 2)
  {
    if (v10 == 3)
    {
      *(_DWORD *)(a1 + 96) = a3;
      *(_DWORD *)(a1 + 100) = 2;
    }
    unint64_t v15 = *(void *)(a1 + 64);
    if (v15 >= *(void *)(a1 + 72))
    {
      uint64_t v16 = sub_10029B3FC((void *)(a1 + 56), a2);
    }
    else
    {
      sub_1001A8DF4(*(void *)(a1 + 64), a2);
      uint64_t v16 = v15 + 56;
      *(void *)(a1 + 64) = v15 + 56;
    }
    *(void *)(a1 + 64) = v16;
    sub_10029B1C4((uint64_t *)(a1 + 48), 0x6DB6DB6DB6DB6DB7 * ((v16 - *(void *)(a1 + 56)) >> 3) - 1);
    sub_10029AB90((void *)a1);
    double v18 = v17;
    sub_10029AEB0((void *)a1);
    if (*(_DWORD *)(a1 + 80) != 2 || (double v20 = v18 - v19, fabs(v20) <= *(double *)(a1 + 32)))
    {
      if (*(_DWORD *)(a1 + 96) == a3) {
        return;
      }
      if (qword_10047BED8 == -1)
      {
        int v22 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_33;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100463C20);
        int v22 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_33;
        }
      }
      int v23 = *(_DWORD *)(a1 + 96);
      BOOL v24 = *(_DWORD *)(a1 + 80) == 2;
      int v31 = 67109632;
      *(_DWORD *)v32 = v23;
      *(_WORD *)&v32[4] = 1024;
      *(_DWORD *)&v32[6] = a3;
      LOWORD(v33) = 1024;
      *(_DWORD *)((char *)&v33 + 2) = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "Floor switched from %d to %d, but before we detected any floor in altitude_history; is time window full: %d",
        (uint8_t *)&v31,
        0x14u);
      goto LABEL_33;
    }
    if (qword_10047BED8 == -1)
    {
      __int16 v21 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_17:
        *(_DWORD *)(a1 + 100) = v20 < 0.0;
        return;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100463C20);
      __int16 v21 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_17;
      }
    }
    LOWORD(v31) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Detected floor transition", (uint8_t *)&v31, 2u);
    goto LABEL_17;
  }
  sub_10029AB90((void *)a1);
  double v12 = v11;
  unint64_t v13 = *(void *)(a1 + 64);
  if (v13 >= *(void *)(a1 + 72))
  {
    uint64_t v14 = sub_10029B3FC((void *)(a1 + 56), a2);
  }
  else
  {
    sub_1001A8DF4(*(void *)(a1 + 64), a2);
    uint64_t v14 = v13 + 56;
    *(void *)(a1 + 64) = v13 + 56;
  }
  *(void *)(a1 + 64) = v14;
  sub_10029B1C4((uint64_t *)(a1 + 48), 0x6DB6DB6DB6DB6DB7 * ((v14 - *(void *)(a1 + 56)) >> 3) - 1);
  sub_10029AB90((void *)a1);
  int v26 = *(_DWORD *)(a1 + 96);
  if (vabdd_f64(v12, v25) <= *(double *)(a1 + 40))
  {
    if (v26 == a3)
    {
      if (qword_10047BED8 != -1)
      {
        dispatch_once(&qword_10047BED8, &stru_100463C20);
        uint32_t v29 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_33;
        }
        goto LABEL_32;
      }
      uint32_t v29 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_32:
        int v30 = *(_DWORD *)(a1 + 100);
        int v31 = 67109376;
        *(_DWORD *)v32 = v30;
        *(_WORD *)&v32[4] = 1024;
        *(_DWORD *)&v32[6] = a3;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Detected a transition %d ends! But we haven't switched floor (%d) yet!", (uint8_t *)&v31, 0xEu);
      }
    }
LABEL_33:
    sub_10029AD04(a1, v9, a3);
    return;
  }
  if (v26 != a3)
  {
    if (qword_10047BED8 == -1)
    {
      v27 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_28:
        int v28 = *(_DWORD *)(a1 + 96);
        int v31 = 67109376;
        *(_DWORD *)v32 = v28;
        *(_WORD *)&v32[4] = 1024;
        *(_DWORD *)&v32[6] = a3;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Floor switched from %d to %d during a detected transition", (uint8_t *)&v31, 0xEu);
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100463C20);
      v27 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_28;
      }
    }
  }
}

void sub_10029AB7C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

void sub_10029AB84(_Unwind_Exception *a1)
{
  *(void *)(v1 + 64) = v2;
  _Unwind_Resume(a1);
}

void *sub_10029AB90(void *result)
{
  uint64_t v1 = result[7];
  uint64_t v2 = result[8];
  if (v1 != v2)
  {
    int v3 = 0;
    uint64_t v4 = *(void *)(v2 - 40) - result[1];
    double v5 = 0.0;
    while (*(void *)(v2 - 40) >= v4)
    {
      double v5 = v5 + *(double *)(v2 - 32);
      --v3;
      v2 -= 56;
      if (v2 == v1) {
        return result;
      }
    }
    if (!v3)
    {
      sub_1000AE4B0(v7, "");
      sub_10029B86C("At this point, there must be at least one altitude event in ahead window!", &__p);
      sub_10016A2C4((uint64_t)v7, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v8 < 0) {
        operator delete(v7[0]);
      }
      sub_1000D11E0((uint64_t)&v6);
    }
  }
  return result;
}

void sub_10029ACC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029AD04(uint64_t a1, uint64_t a2, int a3)
{
  sub_10029B020(a1 + 48, a2 - *(void *)(a1 + 8), &__p);
  double v5 = (char *)__p;
  if (__p)
  {
    double v6 = __p;
    if (v13 != __p)
    {
      uint64_t v7 = v13 - 56;
      char v8 = v13 - 56;
      uint64_t v9 = (void (***)(char *))(v13 - 56);
      do
      {
        unsigned int v10 = *v9;
        v9 -= 7;
        (*v10)(v8);
        v7 -= 56;
        BOOL v11 = v8 == v5;
        char v8 = (char *)v9;
      }
      while (!v11);
      double v6 = __p;
    }
    unint64_t v13 = v5;
    operator delete(v6);
  }
  if (*(_DWORD *)(a1 + 80) == 2)
  {
    sub_1000AE4B0(v15, "");
    sub_10029B81C("We should have cleared all the measurements not in the ahead window, time window should not be full!", &v17);
    sub_10016A2C4((uint64_t)v15, (uint64_t)&v17, 1);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    sub_1000D11E0((uint64_t)&v14);
  }
  *(_DWORD *)(a1 + 96) = a3;
  *(_DWORD *)(a1 + 100) = 2;
}

void sub_10029AE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10029AEB0(void *result)
{
  uint64_t v1 = result[7];
  uint64_t v2 = result[8];
  if (v1 != v2)
  {
    int v3 = 0;
    uint64_t v4 = *result + *(void *)(v1 + 16);
    double v5 = 0.0;
    while (v4 >= *(void *)(v1 + 16))
    {
      double v5 = v5 + *(double *)(v1 + 24);
      v1 += 56;
      --v3;
      if (v1 == v2) {
        return result;
      }
    }
    if (!v3)
    {
      sub_1000AE4B0(v7, "");
      sub_10029B86C("At this point, there must be at least one altitude event in ahead window!", &__p);
      sub_10016A2C4((uint64_t)v7, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v8 < 0) {
        operator delete(v7[0]);
      }
      sub_1000D11E0((uint64_t)&v6);
    }
  }
  return result;
}

void sub_10029AFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029B020(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16) - v4;
  if (v5)
  {
    unint64_t v7 = 0;
    unint64_t v8 = v5 / 56;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    uint64_t v9 = (uint64_t *)(v4 + 16);
    while (1)
    {
      uint64_t v10 = *v9;
      v9 += 7;
      if (v10 >= a2) {
        break;
      }
      if (v8 == ++v7)
      {
        unint64_t v7 = v8;
        goto LABEL_9;
      }
    }
    if (!v7) {
      goto LABEL_18;
    }
LABEL_9:
    *(_DWORD *)(a1 + 32) = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v11 = v4 + 56 * v7;
    *a3 = 0;
    sub_10029B658(a3, v4, v11, v7);
    uint64_t v13 = *(void *)(a1 + 16);
    if (v11 != v13)
    {
      uint64_t v14 = 56 * v7;
      do
      {
        __n128 v12 = sub_1001A8E48(v4, v4 + v14);
        v4 += 56;
      }
      while (v4 + v14 != v13);
      uint64_t v11 = *(void *)(a1 + 16);
    }
    if (v11 != v4)
    {
      uint64_t v15 = v11 - 56;
      char v16 = (void (***)(void, __n128))(v11 - 56);
      std::string v17 = (void (***)(void, __n128))(v11 - 56);
      do
      {
        double v18 = *v17;
        v17 -= 7;
        (*v18)(v16, v12);
        v15 -= 56;
        BOOL v19 = v16 == (void (***)(void, __n128))v4;
        char v16 = v17;
      }
      while (!v19);
    }
    *(void *)(a1 + 16) = v4;
  }
  else
  {
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_10029B178(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_1003A69B4((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029B194(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_10029B1C4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2] - v3;
  if (v4 == 56)
  {
    *((_DWORD *)a1 + 8) = 1;
  }
  else
  {
    unint64_t v5 = v4 / 56;
    if (v5 <= a2)
    {
      unint64_t v6 = 0;
    }
    else
    {
      unint64_t v6 = 0;
      do
      {
        if (v6 != a2)
        {
          uint64_t v7 = *(void *)(v3 + 56 * a2 + 16);
          uint64_t v8 = *a1;
          uint64_t v9 = (uint64_t *)(v3 + 16 + 56 * v6);
          while (1)
          {
            uint64_t v10 = *v9;
            v9 += 7;
            if (v8 >= v7 - v10) {
              break;
            }
            ++v6;
            *((_DWORD *)a1 + 8) = 2;
            if (a2 == v6) {
              goto LABEL_6;
            }
          }
        }
        if (v6 == a2)
        {
LABEL_6:
          *((_DWORD *)a1 + 8) = 1;
          unint64_t v6 = a2;
        }
        ++a2;
      }
      while (a2 != v5);
    }
    std::string __p = 0;
    v27 = 0;
    uint64_t v28 = 0;
    sub_10029B658(&__p, v3, v3 + 56 * v6, v6);
    if (v6)
    {
      unint64_t v12 = v3 + 56 * v6;
      uint64_t v13 = a1[2];
      if (v12 != v13)
      {
        uint64_t v14 = 56 * v6;
        do
        {
          __n128 v11 = sub_1001A8E48(v3, v3 + v14);
          v3 += 56;
        }
        while (v3 + v14 != v13);
        unint64_t v12 = a1[2];
      }
      if (v12 != v3)
      {
        unint64_t v15 = v12 - 56;
        char v16 = (void (***)(void, __n128))(v12 - 56);
        std::string v17 = (void (***)(void, __n128))(v12 - 56);
        do
        {
          double v18 = *v17;
          v17 -= 7;
          (*v18)(v16, v11);
          v15 -= 56;
          BOOL v19 = v16 == (void (***)(void, __n128))v3;
          char v16 = v17;
        }
        while (!v19);
      }
      a1[2] = v3;
    }
    double v20 = (char *)__p;
    if (__p)
    {
      __int16 v21 = __p;
      if (v27 != __p)
      {
        int v22 = v27 - 56;
        int v23 = v27 - 56;
        BOOL v24 = (void (***)(char *))(v27 - 56);
        do
        {
          double v25 = *v24;
          v24 -= 7;
          (*v25)(v23);
          v22 -= 56;
          BOOL v19 = v23 == v20;
          int v23 = (char *)v24;
        }
        while (!v19);
        __int16 v21 = __p;
      }
      v27 = v20;
      operator delete(v21);
    }
  }
}

void sub_10029B3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1003A6A44((uint64_t)&a10, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029B3FC(void *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_1000A9108();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      sub_1000A6A10();
    }
    uint64_t v7 = (char *)operator new(56 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[56 * v3];
  *((void *)&v20 + 1) = &v7[56 * v6];
  sub_1001A8DF4(v19, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_1001A8DF4(v8 + v19, v8 + i))
    v8 -= 56;
  unint64_t v12 = (char *)*a1;
  __n128 v11 = (char *)a1[1];
  *a1 = v19 + v8;
  *(void *)&long long v20 = v19 + 56;
  *(_OWORD *)(a1 + 1) = v20;
  if (v11 != v12)
  {
    uint64_t v13 = v11 - 56;
    uint64_t v14 = v11 - 56;
    unint64_t v15 = v11 - 56;
    do
    {
      char v16 = *(void (***)(char *))v15;
      v15 -= 56;
      (*v16)(v14);
      v13 -= 56;
      BOOL v17 = v14 == v12;
      uint64_t v14 = v15;
    }
    while (!v17);
  }
  if (v12) {
    operator delete(v12);
  }
  return v19 + 56;
}

void sub_10029B5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10029B5E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10029B5E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 56);
    *(void *)(a1 + 16) = i - 56;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10029B658(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x492492492492493) {
      sub_1000A9108();
    }
    uint64_t v8 = (char *)operator new(56 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        sub_1001A8DF4((uint64_t)&v8[v9], a2 + v9);
        v9 += 56;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_10029B71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_10029B730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_1003A6B2C((uint64_t)v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_10029B758(&a9);
  _Unwind_Resume(a1);
}

void ***sub_10029B758(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      unint64_t v4 = (char *)v2[1];
      unint64_t v5 = **result;
      if (v4 != v3)
      {
        unint64_t v6 = v4 - 56;
        uint64_t v7 = v4 - 56;
        uint64_t v8 = v4 - 56;
        do
        {
          uint64_t v9 = *(void (***)(char *))v8;
          v8 -= 56;
          (*v9)(v7);
          v6 -= 56;
          BOOL v10 = v7 == v3;
          uint64_t v7 = v8;
        }
        while (!v10);
        unint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

std::string *sub_10029B81C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10029B850(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10029B86C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10029B8A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029B8BC(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_10029B8D4()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10029B94C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void *sub_10029B9C4(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)a1[6];
  a1[6] = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[3];
  while (v5)
  {
    unint64_t v6 = v5;
    unint64_t v5 = (void *)*v5;
    uint64_t v7 = (std::__shared_weak_count *)v6[3];
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    operator delete(v6);
  }
  uint64_t v8 = (void *)a1[1];
  a1[1] = 0;
  if (v8) {
    operator delete(v8);
  }
  return a1;
}

void sub_10029BA9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v3;
  *(void *)(a1 + 112) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_10029BB30(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1002A122C(*(int8x8_t **)(a1 + 104), a2, (uint64_t)__p);
  sub_1002703D4(a3, (uint64_t *)__p);
  unint64_t v4 = v8;
  if (v8)
  {
    do
    {
      unint64_t v5 = (void *)*v4;
      sub_1002426B8(v4 + 2);
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  unint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
}

void sub_10029BBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023BEAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10029BBB8(uint64_t a1@<X0>, double *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>)
{
  if (sub_100070D00((uint64_t)a2))
  {
    sub_1000AE4B0(v30, "");
    sub_10026BE34("This function should not be used on regional locations.", &__p);
    sub_10016A2C4((uint64_t)v30, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    sub_10014B3FC((uint64_t)&v29);
  }
  int v24 = *(_DWORD *)(a1 + 184);
  if (v24 == 1)
  {
    a10 = a2[209];
    a11 = a2[208];
    a12 = a2[218];
    a13 = a2[217];
  }
  int v25 = *(_DWORD *)(a1 + 120);
  sub_1000629E4((uint64_t)v28, a1 + 200);
  sub_1002AECDC((uint64_t)a2, a3, a4, (uint64_t *)(a1 + 104), a5, a6, a7, v25, a9, a10, a11, a12, a13, v24, (uint64_t)v28, a8);
  sub_100062BB4((uint64_t)v28);
}

void sub_10029BD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029BDB0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, int *a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  if (a10)
  {
    *(_OWORD *)&__p[16] = 0uLL;
    *(void *)std::string __p = off_10045D888;
    *(void *)&__p[8] = &__p[16];
    memset(&__p[64], 0, 80);
    long long v270 = 0u;
    char v271 = 0;
    *(void *)&__p[32] = off_10045DAB8;
    memset(&__p[40], 0, 17);
    sub_1001A5350(a10, (uint64_t)__p);
    sub_1001A530C((uint64_t)__p);
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)a2 + 16))(__p);
  v219 = a9;
  sub_10029BB30(a1, (uint64_t *)__p, (uint64_t)v260);
  uint64_t v12 = *(void *)__p;
  if (*(void *)__p)
  {
    uint64_t v13 = *(void *)&__p[8];
    uint64_t v14 = *(void **)__p;
    if (*(void *)&__p[8] != *(void *)__p)
    {
      uint64_t v15 = *(void *)&__p[8] - 168;
      do
      {
        int v17 = *(_DWORD *)(v13 - 176);
        if (v17 == v17 >> 31)
        {
          if (*(unsigned char *)(v13 - 128)) {
            *(unsigned char *)(v13 - 128) = 0;
          }
        }
        else
        {
          uint64_t v16 = *(void *)(v13 - 168);
          if (v17 < 0)
          {
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            }
          }
          else
          {
            (*(void (**)(uint64_t))v16)(v13 - 168);
          }
        }
        v13 -= 208;
        v15 -= 208;
      }
      while (v13 != v12);
      uint64_t v14 = *(void **)__p;
    }
    *(void *)&__p[8] = v12;
    operator delete(v14);
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)a3 + 16))(__p);
  sub_10029BB30(a1, (uint64_t *)__p, (uint64_t)v258);
  uint64_t v18 = *(void *)__p;
  if (*(void *)__p)
  {
    uint64_t v19 = *(void *)&__p[8];
    long long v20 = *(void **)__p;
    if (*(void *)&__p[8] != *(void *)__p)
    {
      uint64_t v21 = *(void *)&__p[8] - 168;
      do
      {
        int v23 = *(_DWORD *)(v19 - 176);
        if (v23 == v23 >> 31)
        {
          if (*(unsigned char *)(v19 - 128)) {
            *(unsigned char *)(v19 - 128) = 0;
          }
        }
        else
        {
          uint64_t v22 = *(void *)(v19 - 168);
          if (v23 < 0)
          {
            if (v22) {
              (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
            }
          }
          else
          {
            (*(void (**)(uint64_t))v22)(v19 - 168);
          }
        }
        v19 -= 208;
        v21 -= 208;
      }
      while (v19 != v18);
      long long v20 = *(void **)__p;
    }
    *(void *)&__p[8] = v18;
    operator delete(v20);
  }
  uint64_t v24 = *(void *)(a1 + 104);
  v267[0] = off_100463CF0;
  v267[1] = v260;
  v267[2] = v258;
  v268 = v267;
  sub_1002A149C(v24, (uint64_t)v267, (uint64_t)&v255);
  if (v268 == v267)
  {
    (*(void (**)(void *))(v267[0] + 32))(v267);
    v252 = 0;
    v253 = 0;
    v254 = 0;
    unint64_t v25 = v257;
    uint64_t v233 = a10;
    if (v257) {
      goto LABEL_33;
    }
  }
  else
  {
    if (v268) {
      (*(void (**)(void))(*v268 + 40))();
    }
    v252 = 0;
    v253 = 0;
    v254 = 0;
    unint64_t v25 = v257;
    uint64_t v233 = a10;
    if (v257)
    {
LABEL_33:
      if (v25 >> 61) {
        sub_1000A9108();
      }
      int v26 = (char *)operator new(8 * v25);
      v27 = &v26[8 * v25];
      v252 = v26;
      v253 = (uint64_t *)v26;
      v254 = v27;
      uint64_t v28 = v256;
      if (v256) {
        goto LABEL_35;
      }
      goto LABEL_70;
    }
  }
  v27 = 0;
  int v26 = 0;
  uint64_t v28 = v256;
  if (v256)
  {
LABEL_35:
    uint32_t v29 = v26;
    while (1)
    {
      while (v26 < v27)
      {
        *(void *)int v26 = v28[4];
        v26 += 8;
        uint64_t v28 = (void *)*v28;
        if (!v28) {
          goto LABEL_67;
        }
      }
      uint64_t v30 = (v26 - v29) >> 3;
      unint64_t v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 61)
      {
        v253 = (uint64_t *)v26;
        v254 = v27;
        v252 = v29;
        sub_1000A9108();
      }
      if ((v27 - v29) >> 2 > v31) {
        unint64_t v31 = (v27 - v29) >> 2;
      }
      if ((unint64_t)(v27 - v29) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v32)
      {
        if (v32 >> 61)
        {
          v254 = v27;
          v252 = v29;
          sub_1000A6A10();
        }
        uint64_t v33 = operator new(8 * v32);
        __int16 v34 = &v33[8 * v30];
        *(void *)__int16 v34 = v28[4];
        uint64_t v35 = (uint64_t)(v34 + 8);
        if (v26 != v29)
        {
LABEL_47:
          unint64_t v36 = v26 - 8 - v29;
          if (v36 < 0x168)
          {
            v37 = v26;
            goto LABEL_49;
          }
          if (&v33[v26 - v29 - 8 - (v36 & 0xFFFFFFFFFFFFFFF8)] > &v33[v26 - v29 - 8])
          {
            v37 = v26;
            goto LABEL_49;
          }
          if (&v26[-(v36 & 0xFFFFFFFFFFFFFFF8) - 8] > v26 - 8)
          {
            v37 = v26;
            goto LABEL_49;
          }
          if ((unint64_t)(v29 - v33) < 0x20)
          {
            v37 = v26;
            goto LABEL_49;
          }
          uint64_t v39 = (v36 >> 3) + 1;
          uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v37 = &v26[-v40];
          v34 -= v40;
          v41 = &v33[8 * v30 - 16];
          v42 = (long long *)(v26 - 16);
          uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v44 = *v42;
            *(v41 - 1) = *(v42 - 1);
            _OWORD *v41 = v44;
            v41 -= 2;
            v42 -= 2;
            v43 -= 4;
          }
          while (v43);
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_49:
              uint64_t v38 = *((void *)v37 - 1);
              v37 -= 8;
              *((void *)v34 - 1) = v38;
              v34 -= 8;
            }
            while (v37 != v29);
          }
          int v26 = v29;
          uint32_t v29 = v34;
          v27 = &v33[8 * v32];
          if (!v26) {
            goto LABEL_55;
          }
LABEL_54:
          operator delete(v26);
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v33 = 0;
        __int16 v34 = (char *)(8 * v30);
        *(void *)(8 * v30) = v28[4];
        uint64_t v35 = 8 * v30 + 8;
        if (v26 != v29) {
          goto LABEL_47;
        }
      }
      uint32_t v29 = v34;
      v27 = &v33[8 * v32];
      if (v26) {
        goto LABEL_54;
      }
LABEL_55:
      int v26 = (char *)v35;
      uint64_t v28 = (void *)*v28;
      if (!v28)
      {
LABEL_67:
        v253 = (uint64_t *)v26;
        v254 = v27;
        v252 = v29;
        goto LABEL_71;
      }
    }
  }
LABEL_70:
  uint32_t v29 = v26;
LABEL_71:
  v249 = 0;
  v250 = 0;
  v251 = 0;
  v246 = 0;
  v247 = 0;
  v248 = 0;
  uint64_t v45 = v26 - v29;
  uint64_t v46 = v233;
  if (v26 != v29)
  {
    if (v45 < 0) {
      sub_1000A9108();
    }
    uint64_t v47 = v45 >> 3;
    v249 = operator new(v26 - v29);
    v250 = (char *)v249;
    v251 = (char *)v249 + 8 * (v45 >> 3);
    if ((unint64_t)v45 >= 0xCCCCCCCCCCCCCC9) {
      sub_1000A9108();
    }
    v246 = operator new(160 * v47);
    v247 = (char *)v246;
    v248 = (char *)v246 + 160 * v47;
  }
  if (v26 == v29)
  {
    *(_OWORD *)v243 = 0u;
    *(_OWORD *)v244 = 0u;
    int v245 = 1065353216;
  }
  else
  {
    double v48 = 0.0;
    double v49 = INFINITY;
    double v50 = INFINITY;
    double v51 = 0.0;
    do
    {
      v52 = *(double **)v29;
      if (!sub_100070D00(*(void *)v29))
      {
        if (v52[209] < v50) {
          double v50 = v52[209];
        }
        if (v48 < v52[208]) {
          double v48 = v52[208];
        }
        if (v52[218] < v49) {
          double v49 = v52[218];
        }
        if (v51 < v52[217]) {
          double v51 = v52[217];
        }
      }
      v29 += 8;
    }
    while (v29 != v26);
    v53 = (uint64_t *)v252;
    *(_OWORD *)v243 = 0u;
    *(_OWORD *)v244 = 0u;
    int v245 = 1065353216;
    v222 = v253;
    if (v252 != v253)
    {
      v54 = (uint64_t **)(v233 + 8);
      v230 = (void *)(v233 + 88);
      do
      {
        v229 = v53;
        uint64_t v231 = *v53;
        (*(void (**)(void **__return_ptr))(*(void *)a2 + 16))(&v241);
        (*(void (**)(void **__return_ptr))(*(void *)a3 + 16))(&v239);
        if (v46)
        {
          *(void *)std::string __p = off_10045D868;
          memset(&__p[8], 0, 136);
          LOWORD(v270) = v270 & 0xF800;
          sub_10029DF9C(v54, (const void **)(v231 + 8), v231 + 8, (uint64_t)__p);
          sub_1001A4FF4((uint64_t)__p);
          *(void *)std::string __p = v231 + 8;
          v56 = sub_1001A66EC(v54, (const void **)(v231 + 8), (uint64_t)&unk_1003FAE80, (long long **)__p);
          v228 = v56 + 7;
          sub_100077140((uint64_t)(v56 + 7), (const std::string *)(v231 + 8));
          v57 = (char *)v241;
          v234 = v242;
          if (v241 == v242) {
            goto LABEL_184;
          }
          v232 = (void **)(v56 + 11);
          while (1)
          {
            uint64_t v59 = a1;
            v60 = sub_100261668(v243, (uint64_t)v57);
            if (v60)
            {
              int v61 = *((_DWORD *)v60 + 12);
              v63 = (char *)v56[12];
              uint64_t v62 = v56[13];
              if (v63 >= (char *)v62)
              {
                v64 = (char *)*v232;
                uint64_t v65 = v63 - (unsigned char *)*v232;
                if (v65 <= -3) {
                  goto LABEL_332;
                }
                uint64_t v66 = v65 >> 1;
                unint64_t v67 = (char *)v62 - v64;
                if (v67 <= (v65 >> 1) + 1) {
                  unint64_t v68 = v66 + 1;
                }
                else {
                  unint64_t v68 = v67;
                }
                if (v67 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v69 = v68;
                }
                if (v69)
                {
                  if (v69 < 0) {
                    goto LABEL_333;
                  }
                  v70 = operator new(2 * v69);
                  v71 = (uint64_t *)&v70[2 * v66];
                  *(_WORD *)v71 = v61;
                  uint64_t v58 = (uint64_t)v71 + 2;
                  if (v63 != v64)
                  {
LABEL_110:
                    unint64_t v72 = v63 - 2 - v64;
                    if (v72 < 0x1E)
                    {
                      a1 = v59;
                      goto LABEL_133;
                    }
                    unint64_t v85 = v63 - v70 - (v65 & 0xFFFFFFFFFFFFFFFELL);
                    a1 = v59;
                    if (v85 < 0x20) {
                      goto LABEL_346;
                    }
                    uint64_t v86 = (v72 >> 1) + 1;
                    unint64_t v87 = 2 * (v86 & 0xFFFFFFFFFFFFFFF0);
                    v88 = &v63[-v87];
                    v71 = (uint64_t *)((char *)v71 - v87);
                    v89 = &v70[2 * v66 - 16];
                    v90 = v63 - 16;
                    unint64_t v91 = v86 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      long long v92 = *(_OWORD *)v90;
                      *(v89 - 1) = *((_OWORD *)v90 - 1);
                      _OWORD *v89 = v92;
                      v89 -= 2;
                      v90 -= 32;
                      v91 -= 16;
                    }
                    while (v91);
                    v63 = v88;
                    if (v86 != (v86 & 0xFFFFFFFFFFFFFFF0))
                    {
LABEL_346:
                      do
                      {
LABEL_133:
                        __int16 v93 = *((_WORD *)v63 - 1);
                        v63 -= 2;
                        *((_WORD *)v71 - 1) = v93;
                        v71 = (uint64_t *)((char *)v71 - 2);
                      }
                      while (v63 != v64);
                    }
LABEL_134:
                    v56[11] = v71;
                    v56[12] = (uint64_t *)v58;
                    v56[13] = (uint64_t *)&v70[2 * v69];
                    if (v64) {
                      operator delete(v64);
                    }
LABEL_97:
                    v54 = (uint64_t **)(v233 + 8);
                    v56[12] = (uint64_t *)v58;
                    v57 += 208;
                    if (v57 == v234) {
                      goto LABEL_182;
                    }
                    continue;
                  }
                }
                else
                {
                  v70 = 0;
                  v71 = (uint64_t *)(2 * v66);
                  *(_WORD *)(2 * v66) = v61;
                  uint64_t v58 = 2 * v66 + 2;
                  if (v63 != v64) {
                    goto LABEL_110;
                  }
                }
                a1 = v59;
                goto LABEL_134;
              }
              *(_WORD *)v63 = v61;
              uint64_t v58 = (uint64_t)(v63 + 2);
              goto LABEL_97;
            }
            *(_DWORD *)std::string buf = -1431655765 * ((*(void *)(v233 + 96) - *(void *)(v233 + 88)) >> 3);
            sub_10029D870((uint64_t)v243, (uint64_t)v57, (int *)v57, buf);
            sub_1001EF930((int *)v57, (uint64_t)__p);
            v74 = *(void **)(v233 + 96);
            unint64_t v73 = *(void *)(v233 + 104);
            if ((unint64_t)v74 >= v73)
            {
              v79 = (void *)*v230;
              unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v74 - *v230) >> 3);
              unint64_t v81 = v80 + 1;
              if (v80 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_1000A9108();
              }
              unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - (void)v79) >> 3);
              if (2 * v82 > v81) {
                unint64_t v81 = 2 * v82;
              }
              if (v82 >= 0x555555555555555) {
                unint64_t v83 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v83 = v81;
              }
              if (v83)
              {
                if (v83 > 0xAAAAAAAAAAAAAAALL) {
                  sub_1000A6A10();
                }
                v84 = (char *)operator new(24 * v83);
              }
              else
              {
                v84 = 0;
              }
              v94 = &v84[24 * v80];
              *(_OWORD *)v94 = *(_OWORD *)__p;
              *((void *)v94 + 2) = *(void *)&__p[16];
              v95 = &v84[24 * v83];
              memset(__p, 0, 24);
              v96 = v94 + 24;
              if (v74 == v79)
              {
                *(void *)(v233 + 88) = v94;
                *(void *)(v233 + 96) = v96;
                *(void *)(v233 + 104) = v95;
              }
              else
              {
                do
                {
                  long long v97 = *(_OWORD *)(v74 - 3);
                  *((void *)v94 - 1) = *(v74 - 1);
                  *(_OWORD *)(v94 - 24) = v97;
                  v94 -= 24;
                  *(v74 - 2) = 0;
                  *(v74 - 1) = 0;
                  *(v74 - 3) = 0;
                  v74 -= 3;
                }
                while (v74 != v79);
                v74 = *(void **)(v233 + 88);
                v98 = *(void **)(v233 + 96);
                *(void *)(v233 + 88) = v94;
                *(void *)(v233 + 96) = v96;
                *(void *)(v233 + 104) = v95;
                while (v98 != v74)
                {
                  if (*((char *)v98 - 1) < 0) {
                    operator delete((void *)*(v98 - 3));
                  }
                  v98 -= 3;
                }
              }
              if (v74) {
                operator delete(v74);
              }
              int v99 = __p[23];
              *(void *)(v233 + 96) = v96;
              if (v99 < 0)
              {
                operator delete(*(void **)__p);
                int v76 = *((_DWORD *)v57 + 8);
                if (v76 != v76 >> 31)
                {
LABEL_114:
                  if (v76 >= 0) {
                    v77 = v57 + 40;
                  }
                  else {
                    v77 = (char *)*((void *)v57 + 5);
                  }
                  double v78 = (double)*((int *)v77 + 23);
                  goto LABEL_150;
                }
              }
              else
              {
                int v76 = *((_DWORD *)v57 + 8);
                if (v76 != v76 >> 31) {
                  goto LABEL_114;
                }
              }
            }
            else
            {
              long long v75 = *(_OWORD *)__p;
              v74[2] = *(void *)&__p[16];
              *(_OWORD *)v74 = v75;
              *(void *)(v233 + 96) = v74 + 3;
              int v76 = *((_DWORD *)v57 + 8);
              if (v76 != v76 >> 31) {
                goto LABEL_114;
              }
            }
            double v78 = *((double *)v57 + 9);
LABEL_150:
            std::string::push_back((std::string *)(v233 + 112), llround(v78));
            int v100 = *((_DWORD *)v57 + 8);
            if (v100 == v100 >> 31)
            {
              int v101 = *((_DWORD *)v57 + 30);
            }
            else
            {
              if (v100 >= 0) {
                v102 = v57 + 40;
              }
              else {
                v102 = (char *)*((void *)v57 + 5);
              }
              int v101 = *((_DWORD *)v102 + 24) + 2402;
            }
            std::string::value_type v103 = sub_10016646C(v101);
            std::string::push_back((std::string *)(v233 + 136), v103);
            __int16 v104 = *(_WORD *)buf;
            v106 = (char *)v56[12];
            v105 = v56[13];
            if (v106 >= (char *)v105)
            {
              v108 = (char *)*v232;
              uint64_t v109 = v106 - (unsigned char *)*v232;
              if (v109 < -2) {
LABEL_332:
              }
                sub_1000A9108();
              uint64_t v110 = v109 >> 1;
              unint64_t v111 = (char *)v105 - v108;
              if (v111 <= (v109 >> 1) + 1) {
                unint64_t v112 = v110 + 1;
              }
              else {
                unint64_t v112 = v111;
              }
              if (v111 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v113 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v113 = v112;
              }
              if (v113)
              {
                if (v113 < 0) {
LABEL_333:
                }
                  sub_1000A6A10();
                v114 = operator new(2 * v113);
                v115 = (uint64_t *)&v114[2 * v110];
                *(_WORD *)v115 = v104;
                uint64_t v107 = (uint64_t)v115 + 2;
                if (v106 != v108)
                {
LABEL_168:
                  unint64_t v116 = v106 - 2 - v108;
                  if (v116 < 0x1E)
                  {
                    a1 = v59;
                    goto LABEL_178;
                  }
                  unint64_t v117 = v106 - &v114[v109 & 0xFFFFFFFFFFFFFFFELL];
                  a1 = v59;
                  if (v117 < 0x20) {
                    goto LABEL_347;
                  }
                  uint64_t v118 = (v116 >> 1) + 1;
                  unint64_t v119 = 2 * (v118 & 0xFFFFFFFFFFFFFFF0);
                  v120 = &v106[-v119];
                  v115 = (uint64_t *)((char *)v115 - v119);
                  v121 = &v114[2 * v110 - 16];
                  v122 = v106 - 16;
                  unint64_t v123 = v118 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    long long v124 = *(_OWORD *)v122;
                    *(v121 - 1) = *((_OWORD *)v122 - 1);
                    _OWORD *v121 = v124;
                    v121 -= 2;
                    v122 -= 32;
                    v123 -= 16;
                  }
                  while (v123);
                  v106 = v120;
                  if (v118 != (v118 & 0xFFFFFFFFFFFFFFF0))
                  {
LABEL_347:
                    do
                    {
LABEL_178:
                      __int16 v125 = *((_WORD *)v106 - 1);
                      v106 -= 2;
                      *((_WORD *)v115 - 1) = v125;
                      v115 = (uint64_t *)((char *)v115 - 2);
                    }
                    while (v106 != v108);
                  }
LABEL_179:
                  v56[11] = v115;
                  v56[12] = (uint64_t *)v107;
                  v56[13] = (uint64_t *)&v114[2 * v113];
                  if (v108) {
                    operator delete(v108);
                  }
                  goto LABEL_181;
                }
              }
              else
              {
                v114 = 0;
                v115 = (uint64_t *)(2 * v110);
                *(_WORD *)(2 * v110) = *(_WORD *)buf;
                uint64_t v107 = 2 * v110 + 2;
                if (v106 != v108) {
                  goto LABEL_168;
                }
              }
              a1 = v59;
              goto LABEL_179;
            }
            *(_WORD *)v106 = *(_WORD *)buf;
            uint64_t v107 = (uint64_t)(v106 + 2);
LABEL_181:
            v56[12] = (uint64_t *)v107;
            v54 = (uint64_t **)(v233 + 8);
            v57 += 208;
            if (v57 == v234)
            {
LABEL_182:
              uint64_t v46 = v233;
              goto LABEL_184;
            }
          }
        }
        v228 = 0;
LABEL_184:
        if (sub_100070D00(v231))
        {
          sub_1002A1888(*(void *)(a1 + 104), v231, (uint64_t)buf);
          sub_1002AFE60(v231, a7, (uint64_t)v228, (uint64_t)__p);
        }
        else
        {
          sub_100233E30(&v237, (uint64_t *)&v241);
          sub_100233E30(&v235, (uint64_t *)&v239);
          sub_10029BBB8(a1, (double *)v231, (uint64_t *)&v237, (uint64_t *)&v235, a4, a5, a6, v228, (uint64_t)__p, v50, v48, v49, v51);
          v126 = (char *)v235;
          if (v235)
          {
            v127 = v236;
            v128 = v235;
            if (v236 != v235)
            {
              v129 = v236 - 168;
              do
              {
                int v131 = *((_DWORD *)v127 - 44);
                if (v131 == v131 >> 31)
                {
                  if (*(v127 - 128)) {
                    *(v127 - 128) = 0;
                  }
                }
                else
                {
                  uint64_t v130 = *((void *)v127 - 21);
                  if (v131 < 0)
                  {
                    if (v130) {
                      (*(void (**)(uint64_t))(*(void *)v130 + 8))(v130);
                    }
                  }
                  else
                  {
                    (*(void (**)(char *))v130)(v127 - 168);
                  }
                }
                v127 -= 208;
                v129 -= 208;
              }
              while (v127 != v126);
              v128 = v235;
            }
            v236 = v126;
            operator delete(v128);
          }
          v132 = (char *)v237;
          if (v237)
          {
            v133 = v238;
            v134 = v237;
            if (v238 != v237)
            {
              v135 = v238 - 168;
              do
              {
                int v137 = *((_DWORD *)v133 - 44);
                if (v137 == v137 >> 31)
                {
                  if (*(v133 - 128)) {
                    *(v133 - 128) = 0;
                  }
                }
                else
                {
                  uint64_t v136 = *((void *)v133 - 21);
                  if (v137 < 0)
                  {
                    if (v136) {
                      (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
                    }
                  }
                  else
                  {
                    (*(void (**)(char *))v136)(v133 - 168);
                  }
                }
                v133 -= 208;
                v135 -= 208;
              }
              while (v133 != v132);
              v134 = v237;
            }
            v238 = v132;
            operator delete(v134);
          }
        }
        if (*(unsigned char *)(a1 + 176))
        {
          BOOL v138 = 1;
          if (*a8 == 1) {
            goto LABEL_217;
          }
        }
        else if (*(unsigned char *)(a1 + 128))
        {
          BOOL v138 = sub_10028D178(v231);
          if (*a8 == 1)
          {
LABEL_217:
            if (!v138) {
              goto LABEL_224;
            }
            if (qword_10047BED8 == -1)
            {
              v139 = qword_10047BEE0;
              if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_220;
              }
            }
            else
            {
              dispatch_once(&qword_10047BED8, &stru_100463CC0);
              v139 = qword_10047BEE0;
              if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
              {
LABEL_220:
                v140 = (void *)(v231 + 8);
                if (*(char *)(v231 + 31) < 0) {
                  v140 = (void *)*v140;
                }
                int v141 = *a8;
                int v142 = *(unsigned __int8 *)(a1 + 176);
                int v143 = *(unsigned __int8 *)(a1 + 128);
                *(_DWORD *)std::string buf = 136381443;
                v263 = v140;
                __int16 v264 = 1026;
                *(_DWORD *)v265 = v141;
                *(_WORD *)&v265[4] = 1026;
                *(_DWORD *)&v265[6] = v142;
                LOWORD(v266) = 1026;
                *(_DWORD *)((char *)&v266 + 2) = v143;
                _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEBUG, "Location %{private}s indoor probability set to 0 due to AR session state: %{public}d, suppressPipelined: %{public}d, suppressIndoor: %{public}d", buf, 0x1Eu);
              }
            }
            *(_OWORD *)std::string __p = xmmword_1003F79C0;
          }
        }
LABEL_224:
        if (*(double *)&__p[8] >= *(double *)(a1 + 192))
        {
          v147 = v250;
          if (v250 < v251)
          {
            *(void *)v250 = v231;
            uint64_t v148 = (uint64_t)(v147 + 8);
LABEL_253:
            v250 = (char *)v148;
            v166 = v247;
            if (v247 >= v248)
            {
              v175 = (char *)v246;
              unint64_t v176 = 0xCCCCCCCCCCCCCCCDLL * ((v247 - (unsigned char *)v246) >> 5);
              unint64_t v177 = v176 + 1;
              if (v176 + 1 > 0x199999999999999) {
                sub_1000A9108();
              }
              if (0x999999999999999ALL * ((v248 - (unsigned char *)v246) >> 5) > v177) {
                unint64_t v177 = 0x999999999999999ALL * ((v248 - (unsigned char *)v246) >> 5);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((v248 - (unsigned char *)v246) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
                unint64_t v178 = 0x199999999999999;
              }
              else {
                unint64_t v178 = v177;
              }
              if (v178)
              {
                if (v178 > 0x199999999999999) {
LABEL_338:
                }
                  sub_1000A6A10();
                v179 = (char *)operator new(160 * v178);
              }
              else
              {
                v179 = 0;
              }
              long long v180 = *(_OWORD *)&__p[112];
              v181 = &v179[160 * v176];
              *((_OWORD *)v181 + 6) = *(_OWORD *)&__p[96];
              *((_OWORD *)v181 + 7) = v180;
              long long v182 = v270;
              *((_OWORD *)v181 + 8) = *(_OWORD *)&__p[128];
              *((_OWORD *)v181 + 9) = v182;
              long long v183 = *(_OWORD *)&__p[48];
              *((_OWORD *)v181 + 2) = *(_OWORD *)&__p[32];
              *((_OWORD *)v181 + 3) = v183;
              long long v184 = *(_OWORD *)&__p[80];
              *((_OWORD *)v181 + 4) = *(_OWORD *)&__p[64];
              *((_OWORD *)v181 + 5) = v184;
              long long v185 = *(_OWORD *)&__p[16];
              *(_OWORD *)v181 = *(_OWORD *)__p;
              *((_OWORD *)v181 + 1) = v185;
              v186 = v181;
              if (v166 != v175)
              {
                do
                {
                  long long v187 = *((_OWORD *)v166 - 9);
                  *((_OWORD *)v186 - 10) = *((_OWORD *)v166 - 10);
                  *((_OWORD *)v186 - 9) = v187;
                  long long v188 = *((_OWORD *)v166 - 8);
                  long long v189 = *((_OWORD *)v166 - 7);
                  long long v190 = *((_OWORD *)v166 - 5);
                  *((_OWORD *)v186 - 6) = *((_OWORD *)v166 - 6);
                  *((_OWORD *)v186 - 5) = v190;
                  *((_OWORD *)v186 - 8) = v188;
                  *((_OWORD *)v186 - 7) = v189;
                  long long v191 = *((_OWORD *)v166 - 4);
                  long long v192 = *((_OWORD *)v166 - 3);
                  long long v193 = *((_OWORD *)v166 - 1);
                  *((_OWORD *)v186 - 2) = *((_OWORD *)v166 - 2);
                  *((_OWORD *)v186 - 1) = v193;
                  *((_OWORD *)v186 - 4) = v191;
                  *((_OWORD *)v186 - 3) = v192;
                  v186 -= 160;
                  v166 -= 160;
                }
                while (v166 != v175);
                v166 = v175;
              }
              v174 = v181 + 160;
              v246 = v186;
              v247 = v181 + 160;
              v248 = &v179[160 * v178];
              if (v166) {
                operator delete(v166);
              }
            }
            else
            {
              long long v167 = *(_OWORD *)&__p[16];
              *(_OWORD *)v247 = *(_OWORD *)__p;
              *((_OWORD *)v166 + 1) = v167;
              long long v168 = *(_OWORD *)&__p[32];
              long long v169 = *(_OWORD *)&__p[48];
              long long v170 = *(_OWORD *)&__p[80];
              *((_OWORD *)v166 + 4) = *(_OWORD *)&__p[64];
              *((_OWORD *)v166 + 5) = v170;
              *((_OWORD *)v166 + 2) = v168;
              *((_OWORD *)v166 + 3) = v169;
              long long v171 = *(_OWORD *)&__p[96];
              long long v172 = *(_OWORD *)&__p[112];
              long long v173 = v270;
              *((_OWORD *)v166 + 8) = *(_OWORD *)&__p[128];
              *((_OWORD *)v166 + 9) = v173;
              *((_OWORD *)v166 + 6) = v171;
              *((_OWORD *)v166 + 7) = v172;
              v174 = v166 + 160;
            }
            v247 = v174;
            goto LABEL_271;
          }
          v149 = v249;
          int64_t v150 = v250 - (unsigned char *)v249;
          uint64_t v151 = (v250 - (unsigned char *)v249) >> 3;
          unint64_t v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 61) {
            sub_1000A9108();
          }
          uint64_t v153 = v251 - (unsigned char *)v249;
          if ((v251 - (unsigned char *)v249) >> 2 > v152) {
            unint64_t v152 = v153 >> 2;
          }
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v154 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v154 = v152;
          }
          if (v154)
          {
            if (v154 >> 61) {
              goto LABEL_338;
            }
            v155 = operator new(8 * v154);
            v156 = (uint64_t *)&v155[8 * v151];
            uint64_t *v156 = v231;
            uint64_t v148 = (uint64_t)(v156 + 1);
            if (v147 != v149) {
              goto LABEL_241;
            }
LABEL_244:
            v249 = v156;
            v250 = (char *)v148;
            v251 = &v155[8 * v154];
            if (!v147) {
              goto LABEL_253;
            }
          }
          else
          {
            v155 = 0;
            v156 = (uint64_t *)(8 * v151);
            *(void *)(8 * v151) = v231;
            uint64_t v148 = 8 * v151 + 8;
            if (v147 == v149) {
              goto LABEL_244;
            }
LABEL_241:
            unint64_t v157 = v147 - 8 - v149;
            if (v157 < 0x58) {
              goto LABEL_348;
            }
            if ((unint64_t)(v147 - &v155[v150]) < 0x20) {
              goto LABEL_348;
            }
            uint64_t v158 = (v157 >> 3) + 1;
            uint64_t v159 = 8 * (v158 & 0x3FFFFFFFFFFFFFFCLL);
            v160 = &v147[-v159];
            v156 = (uint64_t *)((char *)v156 - v159);
            v161 = &v155[8 * v151 - 16];
            v162 = (long long *)(v147 - 16);
            uint64_t v163 = v158 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v164 = *v162;
              *(v161 - 1) = *(v162 - 1);
              _OWORD *v161 = v164;
              v161 -= 2;
              v162 -= 2;
              v163 -= 4;
            }
            while (v163);
            v147 = v160;
            if (v158 != (v158 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_348:
              do
              {
                uint64_t v165 = *((void *)v147 - 1);
                v147 -= 8;
                *--v156 = v165;
              }
              while (v147 != v149);
            }
            v147 = v249;
            v249 = v156;
            v250 = (char *)v148;
            v251 = &v155[8 * v154];
            if (!v147) {
              goto LABEL_253;
            }
          }
          operator delete(v147);
          goto LABEL_253;
        }
        if (qword_10047BED8 == -1)
        {
          v144 = qword_10047BEE0;
          if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_227;
          }
        }
        else
        {
          dispatch_once(&qword_10047BED8, &stru_100463CC0);
          v144 = qword_10047BEE0;
          if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
          {
LABEL_227:
            v145 = (void *)(v231 + 8);
            if (*(char *)(v231 + 31) < 0) {
              v145 = (void *)*v145;
            }
            uint64_t v146 = *(void *)(a1 + 192);
            *(_DWORD *)std::string buf = 136381187;
            v263 = v145;
            __int16 v264 = 2048;
            *(void *)v265 = *(void *)&__p[8];
            *(_WORD *)&v265[8] = 2048;
            uint64_t v266 = v146;
            _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEBUG, "Location %{private}s filtered out due to fPrbIndoor %f < %f", buf, 0x20u);
          }
        }
LABEL_271:
        v194 = (char *)v239;
        if (v239)
        {
          v195 = v240;
          v196 = v239;
          if (v240 != v239)
          {
            v197 = v240 - 168;
            do
            {
              int v199 = *((_DWORD *)v195 - 44);
              if (v199 == v199 >> 31)
              {
                if (*(v195 - 128)) {
                  *(v195 - 128) = 0;
                }
              }
              else
              {
                uint64_t v198 = *((void *)v195 - 21);
                if (v199 < 0)
                {
                  if (v198) {
                    (*(void (**)(uint64_t))(*(void *)v198 + 8))(v198);
                  }
                }
                else
                {
                  (*(void (**)(char *))v198)(v195 - 168);
                }
              }
              v195 -= 208;
              v197 -= 208;
            }
            while (v195 != v194);
            v196 = v239;
          }
          v240 = v194;
          operator delete(v196);
        }
        v200 = (char *)v241;
        if (v241)
        {
          v201 = v242;
          v55 = v241;
          if (v242 != v241)
          {
            v202 = v242 - 168;
            do
            {
              int v204 = *((_DWORD *)v201 - 44);
              if (v204 == v204 >> 31)
              {
                if (*(v201 - 128)) {
                  *(v201 - 128) = 0;
                }
              }
              else
              {
                uint64_t v203 = *((void *)v201 - 21);
                if (v204 < 0)
                {
                  if (v203) {
                    (*(void (**)(uint64_t))(*(void *)v203 + 8))(v203);
                  }
                }
                else
                {
                  (*(void (**)(char *))v203)(v201 - 168);
                }
              }
              v201 -= 208;
              v202 -= 208;
            }
            while (v201 != v200);
            v55 = v241;
          }
          v242 = v200;
          operator delete(v55);
        }
        v53 = v229 + 1;
      }
      while (v229 + 1 != v222);
    }
  }
  if (qword_10047BED8 == -1)
  {
    v205 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_303;
    }
    goto LABEL_302;
  }
  dispatch_once(&qword_10047BED8, &stru_100463CC0);
  v205 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_302:
    *(_DWORD *)std::string __p = 134218240;
    *(void *)&__p[4] = ((char *)v253 - (unsigned char *)v252) >> 3;
    *(_WORD *)&__p[12] = 2048;
    *(void *)&__p[14] = (v250 - (unsigned char *)v249) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_DEBUG, "Candidate locations: %zu; recommended locations: %zu",
      __p,
      0x16u);
  }
LABEL_303:
  sub_100235880(v219, (uint64_t)&v249, (uint64_t)&v246);
  v206 = v244[0];
  if (v244[0])
  {
    do
    {
      v207 = (void *)*v206;
      operator delete(v206);
      v206 = v207;
    }
    while (v207);
  }
  v208 = v243[0];
  v243[0] = 0;
  if (v208) {
    operator delete(v208);
  }
  if (v246)
  {
    v247 = (char *)v246;
    operator delete(v246);
  }
  if (v249)
  {
    v250 = (char *)v249;
    operator delete(v249);
  }
  if (v252)
  {
    v253 = (uint64_t *)v252;
    operator delete(v252);
  }
  v209 = v256;
  if (v256)
  {
    do
    {
      v210 = v209;
      v209 = (void *)*v209;
      v211 = (std::__shared_weak_count *)v210[3];
      if (v211 && !atomic_fetch_add(&v211->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
      }
      operator delete(v210);
    }
    while (v209);
  }
  v212 = v255;
  v255 = 0;
  if (v212) {
    operator delete(v212);
  }
  v213 = v259;
  if (v259)
  {
    do
    {
      v214 = (void *)*v213;
      sub_1002426B8(v213 + 2);
      operator delete(v213);
      v213 = v214;
    }
    while (v214);
  }
  v215 = v258[0];
  v258[0] = 0;
  if (v215) {
    operator delete(v215);
  }
  v216 = v261;
  if (v261)
  {
    do
    {
      v217 = (void *)*v216;
      sub_1002426B8(v216 + 2);
      operator delete(v216);
      v216 = v217;
    }
    while (v217);
  }
  v218 = v260[0];
  v260[0] = 0;
  if (v218) {
    operator delete(v218);
  }
}

void sub_10029D5C0(_Unwind_Exception *a1)
{
}

void sub_10029D5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  sub_100258574((uint64_t)&a49);
  if (a55)
  {
    a56 = (uint64_t)a55;
    operator delete(a55);
    v70 = a58;
    if (!a58)
    {
LABEL_3:
      v71 = __p;
      if (!__p) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    v70 = a58;
    if (!a58) {
      goto LABEL_3;
    }
  }
  a59 = (uint64_t)v70;
  operator delete(v70);
  v71 = __p;
  if (!__p)
  {
LABEL_5:
    sub_1000D8B48((uint64_t)&a64);
    sub_10023BEAC((uint64_t)&a69);
    sub_10023BEAC((uint64_t)&STACK[0x208]);
    _Unwind_Resume(a1);
  }
LABEL_4:
  a62 = (uint64_t)v71;
  operator delete(v71);
  goto LABEL_5;
}

void *sub_10029D774(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10029D808(void *a1)
{
  sub_10029DCE8(a1);

  operator delete();
}

void sub_10029D840(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void *sub_10029D870(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  double v48 = &v47;
  uint64_t v9 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    unint64_t v10 = *(void *)v9;
    unint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      goto LABEL_58;
    }
  }
  else
  {
    unint64_t v10 = sub_100258DC8((uint64_t)&v48, (unsigned __int8 *)(a2 + 8));
    unint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      goto LABEL_58;
    }
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v4 = v10;
    if (v10 >= v11) {
      unint64_t v4 = v10 % v11;
    }
  }
  else
  {
    unint64_t v4 = (v11 - 1) & v10;
  }
  uint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
  if (v13)
  {
    uint64_t v14 = (void *)*v13;
    if (*v13)
    {
      int v15 = *(_DWORD *)a2;
      int v16 = (v15 >> 31) ^ v15;
      BOOL v17 = v15 >> 31 == v15;
      uint64_t v18 = *(void *)(a2 + 8);
      if (v12.u32[0] <= 1uLL)
      {
        unint64_t v19 = v11 - 1;
        if (v17)
        {
          while (1)
          {
            uint64_t v20 = v14[1];
            if (v20 == v10)
            {
              if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18) {
                return v14;
              }
            }
            else if ((v20 & v19) != v4)
            {
              goto LABEL_58;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_58;
            }
          }
        }
        while (1)
        {
          uint64_t v21 = v14[1];
          if (v21 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
            {
              BOOL v22 = v14[3] == *(void *)v9 && v14[4] == *(void *)(v9 + 8);
              if (v22 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16)) {
                return v14;
              }
            }
          }
          else if ((v21 & v19) != v4)
          {
            goto LABEL_58;
          }
          uint64_t v14 = (void *)*v14;
          if (!v14) {
            goto LABEL_58;
          }
        }
      }
      if (v17)
      {
        while (1)
        {
          unint64_t v24 = v14[1];
          if (v24 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18) {
              return v14;
            }
          }
          else
          {
            if (v24 >= v11) {
              v24 %= v11;
            }
            if (v24 != v4) {
              goto LABEL_58;
            }
          }
          uint64_t v14 = (void *)*v14;
          if (!v14) {
            goto LABEL_58;
          }
        }
      }
      do
      {
        unint64_t v25 = v14[1];
        if (v25 == v10)
        {
          if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
          {
            BOOL v26 = v14[3] == *(void *)v9 && v14[4] == *(void *)(v9 + 8);
            if (v26 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16)) {
              return v14;
            }
          }
        }
        else
        {
          if (v25 >= v11) {
            v25 %= v11;
          }
          if (v25 != v4) {
            break;
          }
        }
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
  }
LABEL_58:
  uint64_t v28 = operator new(0x38uLL);
  uint64_t v14 = v28;
  void *v28 = 0;
  v28[1] = v10;
  uint32_t v29 = v28 + 3;
  int v32 = *a3;
  unint64_t v31 = a3 + 2;
  int v30 = v32;
  int v33 = v32 >> 31;
  if (v32 >> 31 == v32)
  {
    *uint32_t v29 = *(void *)v31;
    int v33 = v30;
  }
  else
  {
    *(_OWORD *)uint32_t v29 = *(_OWORD *)v31;
    *((_DWORD *)v28 + 10) = v31[4];
  }
  *((_DWORD *)v28 + 4) = v33 ^ v30;
  *((_DWORD *)v28 + 12) = *a4;
  float v34 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v35 = *(float *)(a1 + 32);
  if (v11 && (float)(v35 * (float)v11) >= v34)
  {
    unint64_t v10 = v4;
  }
  else
  {
    BOOL v36 = 1;
    if (v11 >= 3) {
      BOOL v36 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v11);
    unint64_t v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_74;
    }
    if (prime < v11)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < v11) {
LABEL_74:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        v10 %= v11;
      }
    }
    else
    {
      v10 &= v11 - 1;
    }
  }
  uint64_t v43 = *(void *)a1;
  long long v44 = *(void **)(*(void *)a1 + 8 * v10);
  if (v44)
  {
    *uint64_t v14 = *v44;
LABEL_97:
    *long long v44 = v14;
    goto LABEL_98;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v43 + 8 * v10) = a1 + 16;
  if (*v14)
  {
    unint64_t v45 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v45 >= v11) {
        v45 %= v11;
      }
    }
    else
    {
      v45 &= v11 - 1;
    }
    long long v44 = (void *)(*(void *)a1 + 8 * v45);
    goto LABEL_97;
  }
LABEL_98:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_10029DCD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10029DCE8(void *a1)
{
  *a1 = off_100463C50;
  sub_100062BB4((uint64_t)(a1 + 25));
  uint64_t v2 = (std::__shared_weak_count *)a1[14];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (void *)a1[9];
    if (!v3) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v3 = (void *)a1[9];
    if (!v3) {
      goto LABEL_5;
    }
  }
  do
  {
    unint64_t v4 = (void *)*v3;
    operator delete(v3);
    uint64_t v3 = v4;
  }
  while (v4);
LABEL_5:
  unint64_t v5 = (void *)a1[7];
  a1[7] = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[4];
  while (v6)
  {
    uint64_t v7 = v6;
    unint64_t v6 = (void *)*v6;
    uint64_t v8 = (std::__shared_weak_count *)v7[3];
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    operator delete(v7);
  }
  uint64_t v9 = (void *)a1[2];
  a1[2] = 0;
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

void sub_10029DE38()
{
}

__n128 sub_10029DE4C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100463CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10029DE98(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100463CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_10029DEC8(uint64_t a1, uint64_t ***a2)
{
  if (sub_1002703D8(*(void **)(a1 + 8), a2)) {
    return 1;
  }
  unint64_t v5 = *(void **)(a1 + 16);

  return sub_1002703D8(v5, a2);
}

uint64_t sub_10029DF20(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK30DynamicPossibleLocationTracker26recommendPossibleLocationsERK12RadioHistoryS2_RKN5boost8option"
                     "alI11GPSLocationEERKNSt3__110shared_ptrI24ZaxisWifiLocationTrackerEERKNSA_I31OutdoorEstimatorLogEnt"
                     "ryTrackerEERK17CLLocationTrackerRKN5proto3CLP8LogEntry6Vision14ARSessionStateEP13YieldTraceLogE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK30DynamicPossibleLocationTracker26recommendPossibleLocationsERK12RadioHistoryS2_RKN5b"
                                "oost8optionalI11GPSLocationEERKNSt3__110shared_ptrI24ZaxisWifiLocationTrackerEERKNSA_I31"
                                "OutdoorEstimatorLogEntryTrackerEERK17CLLocationTrackerRKN5proto3CLP8LogEntry6Vision14ARS"
                                "essionStateEP13YieldTraceLogE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK30DynamicPossibleLocationTracker26recommendPossibleLocationsERK12RadioHistoryS2_RKN5boost8optionalI11GPSLocationEERKNSt3__110shared_ptrI24ZaxisWifiLocationTrackerEERKNSA_I31OutdoorEstimatorLogEntryTrackerEERK17CLLocationTrackerRKN5proto3CLP8LogEntry6Vision14ARSessionStateEP13YieldTraceLogE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK30DynamicPossibleLocationTracker26recommendPossibleLocationsERK12RadioHistoryS2_RKN5boost8optionalI11GPSLocationEERKNSt3__110shared_ptrI24ZaxisWifiLocationTrackerEERKNSA_I31OutdoorEstimatorLogEntryTrackerEERK17CLLocationTrackerRKN5proto3CLP8LogEntry6Vision14ARSessionStateEP13YieldTraceLogE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10029DF90()
{
}

uint64_t *sub_10029DF9C(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    int v9 = *((char *)a2 + 23);
    if (v9 >= 0) {
      size_t v10 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v10 = (size_t)a2[1];
    }
    if (v9 >= 0) {
      unint64_t v11 = a2;
    }
    else {
      unint64_t v11 = *a2;
    }
    do
    {
      while (1)
      {
        uint8x8_t v12 = (uint64_t **)v7;
        int v15 = (const void *)v7[4];
        uint64_t v13 = v7 + 4;
        uint64_t v14 = v15;
        int v16 = *((char *)v13 + 23);
        if (v16 >= 0) {
          size_t v17 = *((unsigned __int8 *)v13 + 23);
        }
        else {
          size_t v17 = v13[1];
        }
        if (v16 >= 0) {
          uint64_t v18 = v13;
        }
        else {
          uint64_t v18 = v14;
        }
        if (v17 >= v10) {
          size_t v19 = v10;
        }
        else {
          size_t v19 = v17;
        }
        int v20 = memcmp(v11, v18, v19);
        BOOL v21 = v10 < v17;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        if (!v21) {
          break;
        }
        uint64_t v7 = *v12;
        uint64_t v8 = v12;
        if (!*v12) {
          goto LABEL_26;
        }
      }
      int v22 = memcmp(v18, v11, v19);
      BOOL v23 = v17 < v10;
      if (v22) {
        BOOL v23 = v22 < 0;
      }
      if (!v23) {
        return (uint64_t *)v12;
      }
      uint64_t v7 = v12[1];
    }
    while (v7);
    uint64_t v8 = v12 + 1;
LABEL_26:
    unint64_t v24 = (uint64_t *)operator new(0xD0uLL);
    unint64_t v25 = v24 + 4;
    if (*(char *)(a3 + 23) < 0) {
      goto LABEL_29;
    }
  }
  else
  {
    uint8x8_t v12 = a1 + 1;
    unint64_t v24 = (uint64_t *)operator new(0xD0uLL);
    unint64_t v25 = v24 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_1000559FC(v25, *(void **)a3, *(void *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)unint64_t v25 = *(_OWORD *)a3;
  v25[2] = *(void *)(a3 + 16);
LABEL_30:
  sub_1001A5230((uint64_t)(v24 + 7), a4);
  uint64_t *v24 = 0;
  v24[1] = 0;
  v24[2] = (uint64_t)v12;
  std::__shared_weak_count *v8 = v24;
  BOOL v26 = (uint64_t *)**a1;
  v27 = v24;
  if (v26)
  {
    *a1 = v26;
    v27 = *v8;
  }
  sub_1000619B8(a1[1], v27);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v24;
}

void sub_10029E150(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10029E164(_Unwind_Exception *a1)
{
  if (v1[55] < 0) {
    operator delete(*v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10029E188()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10029E200()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_10029E278(uint64_t a1)
{
  *(void *)a1 = off_100463D80;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = v2 + 8;
      unint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v10 = v4;
      unint64_t v11 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_10036BBF8(v3, &v10);
      unint64_t v6 = v11;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (*(unsigned char *)(a1 + 40))
  {
    sub_1000748BC((void *)(a1 + 48));
    *(unsigned char *)(a1 + 40) = 0;
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_10029E400(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))(*(void *)(a1 + 24));
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), a2, v4, a1 + 48);
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    (*(void (**)(uint64_t, void))(*(void *)result + 24))(result, 0);
    unint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v6();
  }
  return result;
}

uint64_t sub_10029E4F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    sub_1000748BC((void *)(a1 + 48));
    *(unsigned char *)(a1 + 40) = 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, 1);
    (*(void (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), 0);
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v4();
  }
  return result;
}

uint64_t sub_10029E5C8(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    sub_1000AE4B0(__p, "");
    sub_10029F464("localizeOn not called yet.  Localizer not available to add finalizer actions", &v10);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&v10, 1);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v5);
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      int v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      int v9 = (void *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    int v9 = 0;
  }
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 80))(v2, v8);
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

void sub_10029E790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029E7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001F505C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10029E7F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))();
}

void sub_10029E820(uint64_t a1, uint64_t a2)
{
}

void sub_10029E828(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10029E830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 72))();
}

void *sub_10029E858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10009F178(a1 + 40, a3);
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100463E30);
    unint64_t v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEFAULT)) {
      return sub_1001F4D0C(*(void *)(a1 + 24), a2, a3);
    }
    goto LABEL_3;
  }
  unint64_t v6 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEFAULT))
  {
LABEL_3:
    int v8 = 134349056;
    uint64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "changeSelectedLocations at timestamp %{public}lld", (uint8_t *)&v8, 0xCu);
  }
  return sub_1001F4D0C(*(void *)(a1 + 24), a2, a3);
}

void sub_10029E968(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (void *)*v2;
      sub_100074A24(v3 + 4);
      uint64_t v4 = (std::__shared_weak_count *)v3[3];
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

void sub_10029EA04(id a1)
{
  os_log_t v1 = os_log_create("com.apple.locationd.Pipeline", "Generic");
  uint64_t v2 = (void *)qword_10047BEE0;
  qword_10047BEE0 = (uint64_t)v1;
}

void sub_10029EA48(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (uint64_t *)(a1 + 8);
  char v7 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v6 == a2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (v6 != a2)
  {
LABEL_6:
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 12);
    sub_10029EB84((void *)(a1 + 24), (void *)a2[4], 0);
  }
LABEL_7:
  uint64_t v9 = a2[7];
  uint64_t v8 = a2[8];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v10 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v8;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 72);
  }
  else
  {
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 72);
  }
}

void sub_10029EB84(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_14;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      uint64_t v10 = a2[2];
      uint64_t v9 = a2[3];
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v11 = (std::__shared_weak_count *)*((void *)v8 + 3);
      *((void *)v8 + 2) = v10;
      *((void *)v8 + 3) = v9;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      sub_100063610((uint64_t)v8 + 32, (uint64_t)(a2 + 4));
      uint8x8_t v12 = *(void **)v8;
      sub_10029ED38(a1, (const void **)v8);
      a2 = (void *)*a2;
      uint64_t v8 = v12;
      if (!v12) {
        goto LABEL_14;
      }
    }
    do
    {
      uint64_t v13 = v8;
      uint64_t v8 = *(void **)v8;
      sub_100074A24(v13 + 4);
      uint64_t v14 = (std::__shared_weak_count *)v13[3];
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      operator delete(v13);
    }
    while (v8);
  }
  else
  {
LABEL_14:
    while (a2 != a3)
    {
      sub_10029EE78(a1, a2 + 2);
      a2 = (void *)*a2;
    }
  }
}

void sub_10029ED08(void *a1)
{
  __cxa_begin_catch(a1);
  sub_10029E968(v1, v2);
  __cxa_rethrow();
}

void sub_10029ED24(_Unwind_Exception *a1)
{
}

const void **sub_10029ED38(void *a1, const void **a2)
{
  uint64_t v4 = (unsigned __int8 ***)(a2 + 2);
  unint64_t v5 = sub_100077F68((uint64_t)&v12, (uint64_t ***)a2 + 2);
  a2[1] = (const void *)v5;
  uint64_t v6 = sub_10029EED4((uint64_t)a1, v5, v4);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = (unint64_t)a2[1];
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!v6)
  {
    *a2 = (const void *)a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *((void *)*a2 + 1);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *a2 = *v6;
  uint64_t *v6 = a2;
  if (*a2)
  {
    unint64_t v10 = *((void *)*a2 + 1);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

const void **sub_10029EE78(void *a1, void *a2)
{
  sub_10029F38C((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_10029ED38(a1, v4);
}

void sub_10029EEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  unint64_t v11 = __p;
  std::string __p = 0;
  if (v11) {
    sub_1003A6C04((uint64_t)&__p, v11);
  }
  _Unwind_Resume(exception_object);
}

const void ***sub_10029EED4(uint64_t a1, unint64_t a2, unsigned __int8 ***a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v12 = 1;
    if (v6 >= 3) {
      BOOL v12 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v13 = v12 | (2 * v6);
    unint64_t v14 = vcvtps_u32_f32(v7 / v8);
    if (v13 <= v14) {
      size_t prime = v14;
    }
    else {
      size_t prime = v13;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime <= v6)
    {
      if (prime >= v6) {
        goto LABEL_28;
      }
      size_t v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v17.i16[0] = vaddlv_u8(v17), v17.u32[0] > 1uLL))
      {
        size_t v19 = std::__next_prime(v16);
        if (prime <= v19) {
          size_t prime = v19;
        }
        if (prime >= v6)
        {
LABEL_28:
          unint64_t v6 = *(void *)(a1 + 8);
          uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
          v20.i16[0] = vaddlv_u8(v20);
          unint64_t v10 = v20.u32[0];
          if (v20.u32[0] <= 1uLL) {
            goto LABEL_4;
          }
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v18 = 1 << -(char)__clz(v16 - 1);
        if (v16 >= 2) {
          size_t v16 = v18;
        }
        if (prime <= v16) {
          size_t prime = v16;
        }
        if (prime >= v6) {
          goto LABEL_28;
        }
      }
    }
    sub_10029F158(a1, prime);
    goto LABEL_28;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] <= 1uLL)
  {
LABEL_4:
    uint64_t v11 = (v6 - 1) & a2;
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v11 = a2;
  if (v6 <= a2) {
    uint64_t v11 = a2 % v6;
  }
LABEL_31:
  BOOL v21 = *(const void ****)(*(void *)a1 + 8 * v11);
  if (v21)
  {
    int v22 = (const void ***)*v21;
    if (*v21)
    {
      if (v10 >= 2)
      {
        int v27 = 0;
        do
        {
          unint64_t v28 = (unint64_t)v22[1];
          unint64_t v29 = v28;
          if (v28 >= v6) {
            unint64_t v29 = v28 % v6;
          }
          if (v29 != v11) {
            break;
          }
          if (v28 == a2)
          {
            int v30 = sub_1000706F4(v22 + 2, a3);
            if (v27 & (v30 ^ 1)) {
              return v21;
            }
          }
          else
          {
            int v30 = 0;
            if (v27) {
              return v21;
            }
          }
          v27 |= v30;
          BOOL v21 = (const void ***)*v21;
          int v22 = (const void ***)*v21;
        }
        while (*v21);
      }
      else
      {
        int v23 = 0;
        unint64_t v24 = v6 - 1;
        do
        {
          unint64_t v25 = v22[1];
          if (((unint64_t)v25 & v24) != v11) {
            break;
          }
          if (v25 == (const void **)a2)
          {
            int v26 = sub_1000706F4(v22 + 2, a3);
            if (v23 & (v26 ^ 1)) {
              return v21;
            }
          }
          else
          {
            int v26 = 0;
            if (v23) {
              return v21;
            }
          }
          v23 |= v26;
          BOOL v21 = (const void ***)*v21;
          int v22 = (const void ***)*v21;
        }
        while (*v21);
      }
    }
  }
  return v21;
}

void sub_10029F158(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000A6A10();
    }
    uint64_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = a1 + 16;
    float v8 = *(const void ****)(a1 + 16);
    if (v8)
    {
      unint64_t v9 = (unint64_t)v8[1];
      unint64_t v10 = a2 - 1;
      if ((a2 & (a2 - 1)) != 0)
      {
        if (v9 >= a2) {
          v9 %= a2;
        }
        *(void *)(*(void *)a1 + 8 * v9) = v7;
        while (1)
        {
          size_t v19 = (const void ***)*v8;
          if (!*v8) {
            break;
          }
          unint64_t v20 = (unint64_t)v19[1];
          if (v20 >= a2) {
            v20 %= a2;
          }
          if (v20 == v9)
          {
            float v8 = (const void ***)*v8;
          }
          else if (*(void *)(*(void *)a1 + 8 * v20))
          {
            BOOL v21 = *v19;
            if (*v19)
            {
              int v22 = (const void ***)*v8;
              while (1)
              {
                int v23 = sub_1000706F4(v19 + 2, (unsigned __int8 ***)v21 + 2);
                unint64_t v24 = (const void ***)*v22;
                if (!v23) {
                  break;
                }
                BOOL v21 = *v24;
                int v22 = (const void ***)*v22;
                if (!*v24) {
                  goto LABEL_44;
                }
              }
              BOOL v21 = *v22;
              unint64_t v24 = v22;
            }
            else
            {
              unint64_t v24 = (const void ***)*v8;
            }
LABEL_44:
            void *v8 = v21;
            uint64_t *v24 = **(const void ****)(*(void *)a1 + 8 * v20);
            **(void **)(*(void *)a1 + 8 * v20) = v19;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v20) = v8;
            float v8 = v19;
            unint64_t v9 = v20;
          }
        }
      }
      else
      {
        uint64_t v11 = v9 & v10;
        *(void *)(*(void *)a1 + 8 * v11) = v7;
        while (1)
        {
          BOOL v12 = *v8;
          if (!*v8) {
            break;
          }
          uint64_t v13 = (unint64_t)v12[1] & v10;
          if (v13 == v11)
          {
            float v8 = (const void ***)*v8;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            unint64_t v14 = (unsigned __int8 ***)*v12;
            if (*v12)
            {
              int v15 = (const void ***)*v8;
              while (1)
              {
                int v16 = sub_1000706F4((const void ***)v12 + 2, v14 + 2);
                uint8x8_t v17 = (const void ***)*v15;
                if (!v16) {
                  break;
                }
                unint64_t v14 = (unsigned __int8 ***)*v17;
                int v15 = (const void ***)*v15;
                if (!*v17) {
                  goto LABEL_22;
                }
              }
              unint64_t v14 = (unsigned __int8 ***)*v15;
              uint8x8_t v17 = v15;
            }
            else
            {
              uint8x8_t v17 = (const void ***)*v8;
            }
LABEL_22:
            void *v8 = (const void **)v14;
            *uint8x8_t v17 = **(const void ****)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v8;
            float v8 = (const void ***)v12;
            uint64_t v11 = v13;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v18 = *(void **)a1;
    *(void *)a1 = 0;
    if (v18) {
      operator delete(v18);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unint64_t sub_10029F38C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x7A0uLL);
  uint64_t v7 = v6;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v8 = a2[1];
  v6[2] = *a2;
  unint64_t v9 = (uint64_t ***)(v6 + 2);
  void *v6 = 0;
  v6[1] = 0;
  v6[3] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000776C4(v6 + 4, a2 + 2);
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = sub_100077F68((uint64_t)&v11, v9);
  v7[1] = result;
  return result;
}

void sub_10029F420(_Unwind_Exception *a1)
{
  sub_1001F555C(v1);
  _Unwind_Resume(a1);
}

void sub_10029F434(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *a9)
{
  uint64_t v12 = *(void *)(v10 + 24);
  if (v12)
  {
    sub_1003A3BE0(v12, (uint64_t)a1, a2, (uint64_t)&a9);
    a1 = a9;
  }
  sub_1001F555C(v9);
  _Unwind_Resume(a1);
}

std::string *sub_10029F464@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10029F498(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10029F4B4()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10029F52C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_10029F5A4()
{
}

void sub_10029F5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a3 + 8) + 8) - **(void **)(a3 + 8) >= 0x20uLL)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    double v7 = *(double *)(a1 + 32);
    uint64_t v8 = (uint64_t *)(a2 + 56);
    uint64_t v9 = *(void *)(a3 + 24);
    int v10 = *(_DWORD *)(v9 + 8);
    int v11 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(a2 + 56) + 56))(*(void *)(a2 + 56)) + 1616);
    int v12 = *(_DWORD *)(v9 + 12);
    if (v12) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v11 <= v10;
    }
    if ((v13 || (v12 == 1 ? (BOOL v14 = v11 < v10) : (BOOL v14 = 1), !v14))
      && (*(double (**)(uint64_t))(*(void *)v6 + 16))(v6) < v7
      && (v15.n128_u64[0] = *(void *)(a2 + 16),
          sub_1002ADE74(*(void **)(a3 + 8), *(void *)(a1 + 8), *(void *)(a2 + 56), *(void *)(a3 + 24), 0, *(unsigned __int8 *)(a2 + 49), *(void *)(a3 + 16), (uint64_t)&v24, v15, *(double *)(a2 + 24)), (_BYTE)v24))
    {
      double v16 = sub_10029F87C(a2, v8, (uint64_t *)&v25, *(void *)(a3 + 16));
      if ((_BYTE)v24)
      {
        uint8x8_t v17 = v26;
        if (v26)
        {
          if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, double))v17->__on_zero_shared)(v17, v16);
            uint64_t v18 = v17;
LABEL_24:
            std::__shared_weak_count::__release_weak(v18);
          }
        }
      }
    }
    else
    {
      uint64_t v19 = 40;
      if (!*(unsigned char *)(a2 + 49)) {
        uint64_t v19 = 24;
      }
      double v20 = *(double *)(a1 + v19);
      if ((*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) < v20)
      {
        BOOL v21 = sub_1002AE4D0(*(uint64_t **)(a3 + 8), *(void *)(a1 + 8), *(void *)(a2 + 56), 0, *(unsigned __int8 *)(a2 + 49), *(void *)(a3 + 16), *(double *)(a2 + 16), *(double *)(a2 + 24));
        int v22 = (atomic_ullong *)v21[1];
        uint64_t v24 = *v21;
        unint64_t v25 = v22;
        if (v22) {
          atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
        }
        double v23 = sub_10029F87C(a2, v8, &v24, *(void *)(a3 + 16));
        if (v22)
        {
          if (!atomic_fetch_add(v22 + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(atomic_ullong *, double))(*v22 + 16))(v22, v23);
            uint64_t v18 = (std::__shared_weak_count *)v22;
            goto LABEL_24;
          }
        }
      }
    }
  }
}

void sub_10029F850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10029F864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_10029F87C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*a2 != *a3)
  {
    (*(void (**)(uint64_t))(*(void *)*a2 + 56))(*a2);
    sub_1001E4CDC(a4, *a2, *a3, (uint64_t)v17);
    BOOL v14 = off_10045DA98;
    char v16 = 0;
    float64x2_t v15 = vaddq_f64(*(float64x2_t *)(a1 + 16), v18);
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a3 + 16))();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 48))(v8) && *(unsigned char *)(a1 + 49)
      || (uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*a3 + 16))(),
          ((*(uint64_t (**)(uint64_t, float64_t, float64_t))(*(void *)v9 + 16))(v9, v15.f64[0], v15.f64[1]) & 1) != 0))
    {
      *(float64x2_t *)(a1 + 16) = v15;
      uint64_t v10 = a3[1];
      *(void *)&long long v13 = *a3;
      *((void *)&v13 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      sub_10024A158(a1, &v13);
      int v11 = (std::__shared_weak_count *)*((void *)&v13 + 1);
      if (*((void *)&v13 + 1))
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    nullsub_17(&v14);
    *(void *)&double result = nullsub_17(v17).n128_u64[0];
  }
  return result;
}

void sub_10029FA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_10029FA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  nullsub_17((uint64_t *)va);
  nullsub_17(va1);
  _Unwind_Resume(a1);
}

void *sub_10029FAB4(void *result, uint64_t a2, uint64_t a3)
{
  *double result = off_100463E88;
  result[1] = a2;
  result[2] = a3;
  return result;
}

void sub_10029FAD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1002900E4(*(void *)(a1 + 8), *a3, &v12);
  if (sub_1000706F4(&v12, &v14))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 16))(&v10);
    double v6 = sub_10029F87C(a2, (uint64_t *)(a2 + 56), &v10, a3[2]);
    uint64_t v7 = v11;
    if (v11)
    {
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, double))v7->__on_zero_shared)(v7, v6);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  uint64_t v8 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_10029FC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10029FC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10014F8D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10029FC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10014F8D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10029FCA8(void *result)
{
  uint64_t v1 = result;
  *double result = off_100463E60;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_10029FD40(void *a1)
{
  *a1 = off_100463E60;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void sub_10029FDEC()
{
}

void sub_10029FE00()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10029FE78()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_10029FEF0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 25) = 1;
  uint64_t v2 = *(void *)(result + 32);
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)(result + 16) = a2 + 1000000000 * v2;
  return result;
}

void sub_10029FF30(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 32);
    if (qword_10047BED8 == -1)
    {
      double v6 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
LABEL_5:
        *(unsigned char *)(a1 + 24) = 0;
        goto LABEL_6;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100463F00);
      double v6 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_5;
      }
    }
    int v8 = 134217984;
    double v9 = (double)(a2 - v4 + 1000000000 * v5) / 1000000000.0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Got a scan after %f seconds", (uint8_t *)&v8, 0xCu);
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)(a1 + 16) = a2 + 1000000000 * v7;
}

void sub_1002A0078(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_1002A00A8()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A0120()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_1002A0198(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a3 + 56) + 16))(*(void *)(a3 + 56));
  if ((*(uint64_t (**)(uint64_t, double, double))(*(void *)v8 + 16))(v8, *(double *)(a2 + 8), *(double *)(a2 + 16)))
  {
    *(unsigned char *)a4 = 0;
    return;
  }
  uint64_t v43 = 0;
  long long v44 = 0;
  unint64_t v45 = 0;
  double v9 = *a1;
  uint64_t v10 = a1[1];
  if (*a1 == v10)
  {
    uint64_t v22 = 0;
    goto LABEL_26;
  }
  do
  {
    int v12 = (const void ***)(*(uint64_t (**)(void))(*(void *)*v9 + 64))();
    long long v13 = (unsigned __int8 ***)(*(uint64_t (**)(void))(**(void **)(a3 + 56) + 64))(*(void *)(a3 + 56));
    if ((sub_1000706F4(v12, v13) & 1) == 0)
    {
      int v14 = (*(uint64_t (**)(void))(*(void *)*v9 + 72))();
      if (v14 == (*(unsigned int (**)(void))(**(void **)(a3 + 56) + 72))(*(void *)(a3 + 56)))
      {
        if (!(*(uint64_t (**)(void))(**(void **)(a3 + 56) + 56))(*(void *)(a3 + 56))
          || (*(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a3 + 56) + 56))(*(void *)(a3 + 56)) + 1913) & 0x40) == 0
          || !(*(uint64_t (**)(void))(*(void *)*v9 + 56))()
          || (*(unsigned char *)((*(uint64_t (**)(void))(*(void *)*v9 + 56))() + 1913) & 0x40) == 0
          || (int v15 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(a3 + 56) + 56))(*(void *)(a3 + 56))
                              + 1616),
              v15 == *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v9 + 56))() + 1616)))
        {
          sub_1001E4CDC((uint64_t)(a1 + 5), *(void *)(a3 + 56), *v9, (uint64_t)v38);
          sub_1001A9C7C((uint64_t)v41, a2);
          float64x2_t v42 = vaddq_f64(*(float64x2_t *)&v38[8], v42);
          v40[0] = (*(double (**)(void))(*(void *)*v9 + 24))();
          v40[1] = v16;
          v40[2] = v17;
          v40[3] = v18;
          if (sub_1003584B8(v40, (uint64_t)v41))
          {
            uint64_t v19 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
            if ((*(uint64_t (**)(uint64_t, float64_t, float64_t))(*(void *)v19 + 16))(v19, v42.f64[0], v42.f64[1]))
            {
              double v20 = v44;
              if ((unint64_t)v44 >= v45)
              {
                int v11 = sub_1002A0A94((uint64_t *)&v43, v9, (uint64_t)v41);
              }
              else
              {
                *(void *)long long v44 = *v9;
                uint64_t v21 = v9[1];
                *((void *)v20 + 1) = v21;
                if (v21) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
                }
                sub_1001A9C7C((uint64_t)(v20 + 16), (uint64_t)v41);
                int v11 = v20 + 48;
              }
              long long v44 = v11;
            }
          }
          nullsub_17(v41);
          nullsub_17(v38);
        }
      }
    }
    v9 += 2;
  }
  while (v9 != v10);
  uint64_t v23 = (uint64_t)v43;
  uint64_t v22 = (uint64_t)v44;
  if (v43 == v44)
  {
LABEL_26:
    *(unsigned char *)a4 = 0;
    if (!v22) {
      return;
    }
    goto LABEL_44;
  }
  if (v44 - v43 == 48)
  {
    int v24 = 0;
  }
  else
  {
    int v24 = (*(uint64_t (**)(uint64_t *, void))(*a1[3] + 80))(a1[3], -1431655765 * ((unint64_t)(v44 - v43) >> 4));
    uint64_t v23 = (uint64_t)v43;
  }
  int v25 = v24;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v44[-v23] >> 4) <= v24) {
    sub_1001F352C();
  }
  uint64_t v26 = v23 + 48 * v24;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v26 + 24);
  *(void *)&long long v39 = *(void *)v26;
  uint64_t v27 = *(void *)(v26 + 8);
  *((void *)&v39 + 1) = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10024A158(a3, &v39);
  uint64_t v28 = v23 + 48 * v25 + 16;
  unint64_t v29 = (std::__shared_weak_count *)*((void *)&v39 + 1);
  if (*((void *)&v39 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  *(void *)&long long v37 = *(void *)v26;
  uint64_t v30 = *(void *)(v26 + 8);
  *((void *)&v37 + 1) = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1001A9C7C((uint64_t)v36, v28);
  *(_OWORD *)unint64_t v38 = v37;
  long long v37 = 0uLL;
  sub_1001A9C7C((uint64_t)&v38[16], (uint64_t)v36);
  *(unsigned char *)a4 = 0;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)v38;
  *(_OWORD *)unint64_t v38 = 0uLL;
  sub_1001A9C7C(a4 + 24, (uint64_t)&v38[16]);
  *(unsigned char *)a4 = 1;
  nullsub_17(&v38[16]);
  unint64_t v31 = *(std::__shared_weak_count **)&v38[8];
  if (*(void *)&v38[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v38[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  nullsub_17(v36);
  int v32 = (std::__shared_weak_count *)*((void *)&v37 + 1);
  if (*((void *)&v37 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  uint64_t v22 = (uint64_t)v43;
  if (v43)
  {
LABEL_44:
    int v33 = v44;
    float v34 = (void *)v22;
    if (v44 != (char *)v22)
    {
      do
      {
        nullsub_17(v33 - 32);
        float v35 = (std::__shared_weak_count *)*((void *)v33 - 5);
        if (v35)
        {
          if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 48;
      }
      while (v33 != (char *)v22);
      float v34 = v43;
    }
    long long v44 = (char *)v22;
    operator delete(v34);
  }
}

void sub_1002A0838(_Unwind_Exception *a1)
{
  sub_1002A09D8((void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1002A084C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v18 = *(void *)(v15 + 16);
  if (v18) {
    sub_1003A381C(v18);
  }
  sub_1002A0954((uint64_t)&a15);
  nullsub_17(&a9);
  sub_1000BA884((uint64_t)&a13);
  sub_1002A09D8((void **)(v16 - 120));
  _Unwind_Resume(a1);
}

void sub_1002A08B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_1000BA884((uint64_t)va);
  sub_1002A09D8((void **)(v14 - 120));
  _Unwind_Resume(a1);
}

void sub_1002A08CC(_Unwind_Exception *a1)
{
  sub_1002A09D8((void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1002A08E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v31 = *(void *)(v28 + 8);
  if (v31) {
    sub_1003A381C(v31);
  }
  *(void *)(v29 - 112) = v28;
  nullsub_17(&a28);
  nullsub_17(&a15);
  sub_1002A09D8((void **)(v29 - 120));
  _Unwind_Resume(a1);
}

void sub_1002A0940(_Unwind_Exception *a1)
{
  sub_1002A09D8((void **)(v1 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_1002A0954(uint64_t a1)
{
  __n128 v2 = nullsub_17(a1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *, __n128))v3->__on_zero_shared)(v3, v2);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void **sub_1002A09D8(void **a1)
{
  __n128 v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        __n128 v5 = nullsub_17(v3 - 32);
        double v6 = (std::__shared_weak_count *)*((void *)v3 - 5);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
          std::__shared_weak_count::__release_weak(v6);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_1002A0A94(uint64_t *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_1000A9108();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1000A6A10();
    }
    double v9 = (char *)operator new(48 * v8);
  }
  else
  {
    double v9 = 0;
  }
  uint64_t v16 = &v9[48 * v4];
  uint64_t v18 = &v9[48 * v8];
  uint64_t v10 = a2[1];
  *(void *)uint64_t v16 = *a2;
  *((void *)v16 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1001A9C7C((uint64_t)&v9[48 * v4 + 16], a3);
  sub_1002953F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, (uint64_t)v16, (uint64_t)v16);
  int v11 = (char *)*a1;
  int v12 = (char *)a1[1];
  *a1 = v13;
  a1[1] = (uint64_t)(v16 + 48);
  a1[2] = (uint64_t)v18;
  if (v12 != v11)
  {
    do
    {
      double v17 = v12 - 48;
      nullsub_17(v12 - 32);
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v12 - 5);
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      v12 -= 48;
    }
    while (v17 != v11);
  }
  if (v11) {
    operator delete(v11);
  }
  return v16 + 48;
}

void sub_1002A0C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100295348((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A0C84(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15)
{
  uint64_t v17 = *(void *)(v15 + 8);
  if (v17)
  {
    sub_1003A3BE0(v17, (uint64_t)a1, a2, (uint64_t)&a15);
    a1 = a15;
  }
  sub_100295348((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1002A0CB4()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A0D2C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002A0DA4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  double v20 = 0;
  uint64_t v3 = *(int *)(a2 + 8);
  if (!v3)
  {
    uint64_t v7 = 0;
LABEL_15:
    uint64_t v16 = v20;
    *(void *)(a1 + 8) = v18;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v16;
    *(unsigned char *)a1 = 1;
    return a1;
  }
  if ((v3 & 0x80000000) != 0) {
    sub_1000A9108();
  }
  uint64_t v18 = (char *)operator new(32 * v3);
  uint64_t v19 = v18;
  double v20 = &v18[32 * v3];
  unint64_t v5 = *(uint64_t **)a2;
  uint64_t v6 = 8 * v3;
  do
  {
    while (1)
    {
      sub_100063BA4((uint64_t)&v21, *v5);
      unint64_t v8 = (int *)v19;
      if (v19 < v20) {
        break;
      }
      uint64_t v7 = (char *)sub_1001E77C4((void **)&v18, &v21);
      uint64_t v19 = v7;
      ++v5;
      v6 -= 8;
      if (!v6) {
        goto LABEL_10;
      }
    }
    double v9 = v19 + 8;
    int v10 = v21;
    int v11 = v21 >> 31;
    if (v21 >> 31 == v21)
    {
      *double v9 = v22;
      int v11 = v10;
    }
    else
    {
      long long v12 = v22;
      *((_DWORD *)v19 + 6) = v23;
      *(_OWORD *)double v9 = v12;
    }
    int *v8 = v11 ^ v10;
    uint64_t v7 = (char *)(v8 + 8);
    uint64_t v19 = v7;
    ++v5;
    v6 -= 8;
  }
  while (v6);
LABEL_10:
  uint64_t v13 = (void **)(a1 + 8);
  if (!*(unsigned char *)a1) {
    goto LABEL_15;
  }
  uint64_t v14 = *v13;
  if (*v13)
  {
    *(void *)(a1 + 16) = v14;
    operator delete(v14);
    *uint64_t v13 = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v7 = v19;
  }
  uint64_t v15 = v20;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v15;
  return a1;
}

void sub_1002A0F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1002A0F84(v11);
  if (*v10) {
    sub_1003A6C84((uint64_t)v10);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_1002A0F84(unsigned char *a1)
{
  if (*a1) {
    sub_10006353C((uint64_t)a1);
  }
  return a1;
}

uint64_t sub_1002A0FBC(uint64_t a1)
{
  __n128 v2 = *(void (****)(void))(a1 + 64);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void))(a1 + 72);
    unint64_t v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      unint64_t v5 = v3 - 5;
      uint64_t v6 = v3 - 5;
      uint64_t v7 = v3 - 5;
      do
      {
        unint64_t v8 = *v7;
        v7 -= 5;
        (*v8)(v6);
        v5 -= 5;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      unint64_t v4 = *(void **)(a1 + 64);
    }
    *(void *)(a1 + 72) = v2;
    operator delete(v4);
  }
  int v10 = *(void **)(a1 + 40);
  if (v10)
  {
    *(void *)(a1 + 48) = v10;
    operator delete(v10);
  }
  int v11 = *(void **)(a1 + 16);
  if (v11)
  {
    do
    {
      long long v12 = (void *)*v11;
      operator delete(v11);
      int v11 = v12;
    }
    while (v12);
  }
  uint64_t v13 = *(void **)a1;
  *(void *)a1 = 0;
  if (v13) {
    operator delete(v13);
  }
  return a1;
}

uint64_t sub_1002A1090(uint64_t a1)
{
  int v3 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v2 = a1 + 32;
  if (v3) {
    sub_10006353C(v2);
  }
  if (*(unsigned char *)a1)
  {
    unint64_t v4 = *(void **)(a1 + 8);
    if (v4)
    {
      *(void *)(a1 + 16) = v4;
      operator delete(v4);
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void **sub_1002A10E0(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = v3 - 96;
        if (*(v3 - 96)) {
          sub_10006353C((uint64_t)(v3 - 96));
        }
        if (*(v3 - 128))
        {
          uint64_t v6 = (void *)*((void *)v3 - 15);
          if (v6)
          {
            *((void *)v3 - 14) = v6;
            operator delete(v6);
          }
          *(v3 - 128) = 0;
        }
        v3 -= 128;
      }
      while (v5 - 32 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1002A1178(uint64_t a1)
{
  if (*(void *)(a1 + 40)) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(void *)(a1 + 16)) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1002A11C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      sub_1002539C8(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1002A1224(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void sub_1002A122C(int8x8_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = *a2;
  uint64_t v25 = a2[1];
  if (*a2 == v25) {
    return;
  }
  int v24 = a1 + 10;
  sub_100285894(a1 + 10, (_DWORD *)v4, &v26);
  while (2)
  {
    unint64_t v5 = (const void ***)v26;
    uint64_t v6 = v27;
    if (v26 == v27) {
      goto LABEL_24;
    }
    uint64_t v7 = (void *)(v4 + 8);
    unint64_t v8 = (uint64_t *)(v4 + 40);
    BOOL v9 = (void *)(v4 + 48);
    do
    {
      while (1)
      {
        uint64_t v28 = (uint64_t ***)*v5;
        int v10 = (uint64_t *)sub_1002A2330(a3, v28, (uint64_t)&unk_1003FAE80, (const void ***)&v28);
        int v11 = v10;
        unint64_t v12 = v10[5];
        if (v12 < v10[6]) {
          break;
        }
        void v10[5] = sub_100234354(v10 + 4, v4);
        if (++v5 == (const void ***)v6) {
          goto LABEL_23;
        }
      }
      uint64_t v13 = (void *)(v12 + 8);
      if (*(_DWORD *)v4 == *(int *)v4 >> 31)
      {
        *uint64_t v13 = *v7;
        *(_DWORD *)unint64_t v12 = 0;
        unint64_t v14 = v12 + 40;
        int v15 = *(_DWORD *)(v4 + 32);
        if (v15 != v15 >> 31) {
          goto LABEL_11;
        }
      }
      else
      {
        long long v17 = *(_OWORD *)v7;
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(v4 + 24);
        *(_OWORD *)uint64_t v13 = v17;
        *(_DWORD *)unint64_t v12 = *(_DWORD *)v4 ^ (*(int *)v4 >> 31);
        unint64_t v14 = v12 + 40;
        int v15 = *(_DWORD *)(v4 + 32);
        if (v15 != v15 >> 31)
        {
LABEL_11:
          if (v15 >= 0) {
            uint64_t v16 = v4 + 40;
          }
          else {
            uint64_t v16 = *v8;
          }
          sub_1001AC878(v14, v16);
          goto LABEL_22;
        }
      }
      uint64_t v18 = (void *)(v12 + 48);
      int v19 = *(_DWORD *)v8;
      if (v19 == v19 >> 31)
      {
        *uint64_t v18 = *v9;
        int v20 = v19;
      }
      else
      {
        long long v21 = *(_OWORD *)v9;
        *(_DWORD *)(v12 + 64) = *(_DWORD *)(v4 + 64);
        *(_OWORD *)uint64_t v18 = v21;
        int v20 = *(_DWORD *)v8;
        int v19 = *(int *)v8 >> 31;
      }
      *(_DWORD *)(v12 + 40) = v20 ^ v19;
      *(void *)(v12 + 72) = *(void *)(v4 + 72);
      *(unsigned char *)(v12 + 80) = 0;
      if (*(unsigned char *)(v4 + 80))
      {
        *(_DWORD *)(v12 + 84) = *(_DWORD *)(v4 + 84);
        *(unsigned char *)(v12 + 80) = 1;
      }
      long long v22 = *(_OWORD *)(v4 + 88);
      long long v23 = *(_OWORD *)(v4 + 104);
      *(_DWORD *)(v12 + 120) = *(_DWORD *)(v4 + 120);
      *(_OWORD *)(v12 + 104) = v23;
      *(_OWORD *)(v12 + 88) = v22;
LABEL_22:
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v4 + 32) ^ (*(int *)(v4 + 32) >> 31);
      v11[5] = v12 + 208;
      v11[5] = v12 + 208;
      ++v5;
    }
    while (v5 != (const void ***)v6);
LABEL_23:
    unint64_t v5 = (const void ***)v26;
LABEL_24:
    if (v5)
    {
      uint64_t v27 = (char *)v5;
      operator delete(v5);
    }
    v4 += 208;
    if (v4 != v25)
    {
      sub_100285894(v24, (_DWORD *)v4, &v26);
      continue;
    }
    break;
  }
}

void sub_1002A1458(_Unwind_Exception *a1)
{
  sub_10023BEAC(v1);
  _Unwind_Resume(a1);
}

void sub_1002A146C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  *(void *)(v15 + 40) = v14;
  if (__p) {
    operator delete(__p);
  }
  sub_10023BEAC(v13);
  _Unwind_Resume(a1);
}

void sub_1002A149C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  float v6 = (float)*(unint64_t *)(a1 + 24);
  size_t prime = (unint64_t)v6;
  if ((unint64_t)v6 == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C(a3, prime);
    goto LABEL_18;
  }
  if ((prime & ((unint64_t)v6 - 1)) != 0)
  {
    size_t prime = std::__next_prime((unint64_t)v6);
    int8x8_t v8 = *(int8x8_t *)(a3 + 8);
    BOOL v9 = prime >= *(void *)&v8;
    if (prime > *(void *)&v8) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v8 = 0;
    BOOL v9 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v9)
  {
    unint64_t v10 = vcvtps_u32_f32((float)*(unint64_t *)(a3 + 24) / *(float *)(a3 + 32));
    if (*(void *)&v8 < 3uLL || (uint8x8_t v11 = (uint8x8_t)vcnt_s8(v8), v11.i16[0] = vaddlv_u8(v11), v11.u32[0] > 1uLL))
    {
      unint64_t v10 = std::__next_prime(v10);
    }
    else
    {
      uint64_t v12 = 1 << -(char)__clz(v10 - 1);
      if (v10 >= 2) {
        unint64_t v10 = v12;
      }
    }
    if (prime <= v10) {
      size_t prime = v10;
    }
    if (prime < *(void *)&v8) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(uint64_t ****)(a1 + 16); i; uint64_t i = (uint64_t ***)*i)
  {
    uint64_t v15 = i + 4;
    uint64_t v14 = *(void *)(a2 + 24);
    if (!v14) {
      sub_10008F39C();
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t *, const void **))(*(void *)v14 + 48))(v14, (uint64_t *)i + 2, &v15))
    {
      uint64_t v15 = i + 4;
      sub_1002A26DC(a3, i + 2, (const void **)i + 2, &v15);
    }
  }
}

void sub_1002A1628(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

void sub_1002A163C(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

void sub_1002A1650(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

void sub_1002A1664(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

const void ***sub_1002A1678(uint64_t a1, uint64_t a2)
{
  if (sub_100070D00(a2))
  {
    sub_1000AE4B0(v8, "");
    sub_1002768DC("No Coarse Indoor AP data for wifi2.", &__p);
    sub_10016A2C4((uint64_t)v8, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    sub_10014B3FC((uint64_t)v7);
  }
  sub_100085B24(&__p, a2 + 8);
  uint64_t v4 = sub_10006F50C((void *)(a1 + 216), (uint64_t ***)&__p);
  std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_
    && !atomic_fetch_add((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  if (!v4)
  {
    sub_1000AE4B0(v8, "");
    sub_1001747D4("No Coarse Indoor Data for this location.", &__p);
    sub_10016A2C4((uint64_t)v8, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    sub_1000D11E0((uint64_t)v7);
  }
  return v4 + 4;
}

void sub_1002A1828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002A1888(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(a1 + 256);
  sub_100085B24(&v9, a2 + 8);
  unint64_t v5 = sub_10006F50C(v4, &v9);
  float v6 = v5;
  uint64_t v7 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v6) {
      goto LABEL_4;
    }
  }
  else if (v5)
  {
LABEL_4:
    long long v8 = *((_OWORD *)v6 + 3);
    *(_OWORD *)a3 = *((_OWORD *)v6 + 2);
    *(_OWORD *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 32) = 1;
    return;
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 32) = 0;
}

void sub_1002A1958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_1002A196C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = 0;
  if (*(unsigned char *)a3)
  {
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    __n128 result = *(__n128 *)(a3 + 8);
    *(__n128 *)(a2 + 8) = result;
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(unsigned char *)a2 = 1;
  }
  *(unsigned char *)(a2 + 32) = 0;
  if (*(unsigned char *)(a3 + 32))
  {
    uint64_t v4 = *(void *)(a3 + 40);
    *(void *)(a3 + 40) = 0;
    *(void *)(a2 + 40) = v4;
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(void *)(a3 + 48) = 0;
    uint64_t v5 = *(void *)(a3 + 56);
    *(void *)(a2 + 56) = v5;
    uint64_t v6 = *(void *)(a3 + 64);
    *(void *)(a2 + 64) = v6;
    *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
    if (v6)
    {
      unint64_t v7 = *(void *)(v5 + 8);
      unint64_t v8 = *(void *)(a2 + 48);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v7 >= v8) {
          v7 %= v8;
        }
      }
      else
      {
        v7 &= v8 - 1;
      }
      *(void *)(v4 + 8 * v7) = a2 + 56;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
    }
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
    *(void *)(a2 + 96) = *(void *)(a3 + 96);
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    __n128 result = *(__n128 *)(a3 + 104);
    *(__n128 *)(a2 + 104) = result;
    *(void *)(a2 + 120) = *(void *)(a3 + 120);
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
    *(void *)(a3 + 120) = 0;
    *(unsigned char *)(a2 + 32) = 1;
  }
  return result;
}

uint64_t sub_1002A1A68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 7;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 57) {
    sub_1000A9108();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 6 > v4) {
    unint64_t v4 = v6 >> 6;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFF80) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 57) {
      sub_1000A6A10();
    }
    unint64_t v8 = (char *)operator new(v7 << 7);
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v9 = (uint64_t)&v8[128 * v3];
  unint64_t v10 = &v8[128 * v7];
  sub_1002A196C((uint64_t)(a1 + 2), v9, a2);
  uint64_t v11 = v9 + 128;
  uint64_t v13 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = (uint64_t)v10;
    if (!v12) {
      return v11;
    }
    goto LABEL_24;
  }
  do
  {
    v9 -= 128;
    v12 -= 128;
    sub_1002A196C((uint64_t)(a1 + 2), v9, (uint64_t)v12);
  }
  while (v12 != v13);
  uint64_t v14 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = (uint64_t)v10;
  if (v12 != v14)
  {
    do
    {
      uint64_t v15 = v12 - 96;
      if (*(v12 - 96)) {
        sub_10006353C((uint64_t)(v12 - 96));
      }
      if (*(v12 - 128))
      {
        uint64_t v16 = (void *)*((void *)v12 - 15);
        if (v16)
        {
          *((void *)v12 - 14) = v16;
          operator delete(v16);
        }
        *(v12 - 128) = 0;
      }
      v12 -= 128;
    }
    while (v15 - 32 != v14);
    uint64_t v12 = v14;
  }
  if (v12) {
LABEL_24:
  }
    operator delete(v12);
  return v11;
}

const void ***sub_1002A1BD4(void *a1, uint64_t a2, _OWORD *a3)
{
  std::string __p = operator new(0x40uLL);
  *(void *)std::string __p = 0;
  *((void *)__p + 1) = 0;
  sub_100085B24((void *)__p + 2, a2);
  long long v6 = a3[1];
  *((_OWORD *)__p + 2) = *a3;
  *((_OWORD *)__p + 3) = v6;
  *((void *)__p + 1) = sub_100077F68((uint64_t)&v12, (uint64_t ***)__p + 2);
  unint64_t v7 = sub_100061FB0(a1, (uint64_t)__p);
  if ((v8 & 1) == 0 && __p)
  {
    uint64_t v9 = (std::__shared_weak_count *)*((void *)__p + 3);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    operator delete(__p);
  }
  return v7;
}

void sub_1002A1CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002A1CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void **sub_1002A1D0C(uint64_t a1, uint64_t ***a2, uint64_t a3)
{
  unint64_t v7 = sub_100077F68((uint64_t)v34, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v11 = *(const void ****)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      char v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v14 = (unint64_t)v12[1];
            if (v14 == v8)
            {
              if (sub_1000706F4((const void ***)v12 + 2, (unsigned __int8 ***)a2)) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            char v12 = (const void **)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = (unint64_t)v12[1];
          if (v13 == v8)
          {
            if (sub_1000706F4((const void ***)v12 + 2, (unsigned __int8 ***)a2)) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          char v12 = (const void **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  uint64_t v15 = (const void ***)(a1 + 16);
  uint64_t v16 = (const void **)operator new(0x40uLL);
  char v12 = v16;
  v34[0] = v16;
  v34[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = (const void *)v8;
  long long v17 = *(atomic_ullong **)(a3 + 8);
  v16[2] = *(const void **)a3;
  v16[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit(v17 + 1, 1uLL, memory_order_relaxed);
  }
  long long v18 = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v16 + 2) = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v16 + 3) = v18;
  char v35 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v9 && (float)(v20 * (float)v9) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    long long v22 = *(const void ****)(*(void *)a1 + 8 * v3);
    if (v22)
    {
LABEL_28:
      *char v12 = *v22;
LABEL_63:
      *long long v22 = v12;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v27 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v27) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v27)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v27 < 3uLL || (uint8x8_t v29 = (uint8x8_t)vcnt_s8(v27), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < *(void *)&v27) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v31 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v21 = *(void *)a1;
        long long v22 = *(const void ****)(*(void *)a1 + 8 * (v8 % v9));
        if (v22) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v21 = *(void *)a1;
        long long v22 = *(const void ****)(*(void *)a1 + 8 * v8);
        if (v22) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v8;
      uint64_t v21 = *(void *)a1;
      long long v22 = *(const void ****)(*(void *)a1 + 8 * (v31 & v8));
      if (v22) {
        goto LABEL_28;
      }
    }
  }
  *char v12 = *v15;
  *uint64_t v15 = v12;
  *(void *)(v21 + 8 * v3) = v15;
  if (*v12)
  {
    unint64_t v32 = *((void *)*v12 + 1);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v32 >= v9) {
        v32 %= v9;
      }
    }
    else
    {
      v32 &= v9 - 1;
    }
    long long v22 = (const void ***)(*(void *)a1 + 8 * v32);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_1002A2050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10022B004((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1002A2064(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  long long v6 = a1 + 1;
  std::string __p = (char *)operator new(0x48uLL);
  sub_100085B24((void *)__p + 4, a2);
  *((_OWORD *)__p + 3) = *(_OWORD *)a3;
  *((void *)__p + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unint64_t v7 = (uint64_t *)__p;
  unint64_t v8 = *v6;
  if (!*v6)
  {
    uint8x8_t v10 = v6;
LABEL_19:
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    char *v6 = v7;
    uint64_t v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      unint64_t v7 = *v6;
    }
    sub_1000619B8(a1[1], v7);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return __p;
  }
  unint64_t v9 = (const void ***)(__p + 32);
  while (1)
  {
    while (1)
    {
      uint8x8_t v10 = (uint64_t **)v8;
      uint64_t v11 = (const void ***)(v8 + 4);
      if (!sub_10006182C(v9, (const void ***)v8 + 4)) {
        break;
      }
      unint64_t v8 = *v10;
      long long v6 = v10;
      if (!*v10)
      {
        long long v6 = v10;
        unint64_t v7 = (uint64_t *)__p;
        goto LABEL_19;
      }
    }
    if (!sub_10006182C(v11, v9)) {
      break;
    }
    long long v6 = v10 + 1;
    unint64_t v8 = v10[1];
    if (!v8)
    {
      unint64_t v7 = (uint64_t *)__p;
      goto LABEL_19;
    }
  }
  char v12 = *v6;
  unint64_t v7 = (uint64_t *)__p;
  if (!*v6) {
    goto LABEL_19;
  }
  if (__p)
  {
    unint64_t v13 = (void *)*((void *)__p + 6);
    if (v13)
    {
      *((void *)__p + 7) = v13;
      operator delete(v13);
    }
    unint64_t v14 = (std::__shared_weak_count *)*((void *)__p + 5);
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    operator delete(__p);
  }
  return (char *)v12;
}

void sub_1002A2220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002A2248((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A2234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002A2248((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A2248(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[6];
      if (v3)
      {
        v2[7] = v3;
        operator delete(v3);
      }
      unint64_t v4 = (std::__shared_weak_count *)v2[5];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1002A22E8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1002539C8(v2 + 2);
    }
    operator delete(v2);
  }
  return a1;
}

const void **sub_1002A2330(uint64_t a1, uint64_t ***a2, uint64_t a3, const void ***a4)
{
  unint64_t v8 = sub_100077F68((uint64_t)v35, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    char v12 = *(const void ****)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v15 = (unint64_t)v13[1];
            if (v15 == v9)
            {
              if (sub_1000706F4((const void ***)v13 + 2, (unsigned __int8 ***)a2)) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v13 = (const void **)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = (unint64_t)v13[1];
          if (v14 == v9)
          {
            if (sub_1000706F4((const void ***)v13 + 2, (unsigned __int8 ***)a2)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (const void **)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  uint64_t v16 = (const void ***)(a1 + 16);
  long long v17 = (const void **)operator new(0x38uLL);
  unint64_t v13 = v17;
  v35[0] = v17;
  v35[1] = a1 + 16;
  *long long v17 = 0;
  v17[1] = (const void *)v9;
  long long v18 = *a4;
  void v17[2] = **a4;
  float v19 = (atomic_ullong *)v18[1];
  v17[3] = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  v17[4] = 0;
  std::exception_ptr v17[5] = 0;
  v17[6] = 0;
  char v36 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    BOOL v23 = *(const void ****)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_28:
      *unint64_t v13 = *v23;
LABEL_63:
      *BOOL v23 = v13;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v32 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(const void ****)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(const void ****)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v9;
      uint64_t v22 = *(void *)a1;
      BOOL v23 = *(const void ****)(*(void *)a1 + 8 * (v32 & v9));
      if (v23) {
        goto LABEL_28;
      }
    }
  }
  *unint64_t v13 = *v16;
  *uint64_t v16 = v13;
  *(void *)(v22 + 8 * v4) = v16;
  if (*v13)
  {
    unint64_t v33 = *((void *)*v13 + 1);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v33 >= v10) {
        v33 %= v10;
      }
    }
    else
    {
      v33 &= v10 - 1;
    }
    BOOL v23 = (const void ***)(*(void *)a1 + 8 * v33);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1002A2680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002A2694((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A2694(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1002426B8(v2 + 2);
    }
    operator delete(v2);
  }
  return a1;
}

const void **sub_1002A26DC(uint64_t a1, uint64_t ***a2, const void **a3, const void **a4)
{
  unint64_t v9 = sub_100077F68((uint64_t)v35, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(const void ****)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v16 = (unint64_t)v14[1];
            if (v16 == v10)
            {
              if (sub_1000706F4((const void ***)v14 + 2, (unsigned __int8 ***)a2)) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v14 = (const void **)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = (unint64_t)v14[1];
          if (v15 == v10)
          {
            if (sub_1000706F4((const void ***)v14 + 2, (unsigned __int8 ***)a2)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          unint64_t v14 = (const void **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  long long v17 = (const void ***)(a1 + 16);
  long long v18 = (const void **)operator new(0x28uLL);
  unint64_t v14 = v18;
  v35[0] = v18;
  v35[1] = a1 + 16;
  *long long v18 = 0;
  v18[1] = (const void *)v10;
  float v19 = (atomic_ullong *)a3[1];
  v18[2] = *a3;
  v18[3] = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  v18[4] = *a4;
  char v36 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    BOOL v23 = *(const void ****)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_28:
      *unint64_t v14 = *v23;
LABEL_63:
      *BOOL v23 = v14;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v32 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(const void ****)(*(void *)a1 + 8 * (v10 % v11));
        if (v23) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v22 = *(void *)a1;
        BOOL v23 = *(const void ****)(*(void *)a1 + 8 * v10);
        if (v23) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v10;
      uint64_t v22 = *(void *)a1;
      BOOL v23 = *(const void ****)(*(void *)a1 + 8 * (v32 & v10));
      if (v23) {
        goto LABEL_28;
      }
    }
  }
  *unint64_t v14 = *v17;
  *long long v17 = v14;
  *(void *)(v22 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v33 = *((void *)*v14 + 1);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v33 >= v11) {
        v33 %= v11;
      }
    }
    else
    {
      v33 &= v11 - 1;
    }
    BOOL v23 = (const void ***)(*(void *)a1 + 8 * v33);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1002A2A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10022B004((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A2A40()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A2AB8()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

__n128 sub_1002A2B30(__n128 *a1, __n128 *a2, unint64_t a3)
{
  a1->n128_u64[0] = (unint64_t)off_100463F30;
  a1->n128_u64[1] = a3;
  __n128 result = *a2;
  a1[2].n128_u64[0] = a2[1].n128_u64[0];
  a1[1] = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[2].n128_u32[2] = 0;
  return result;
}

BOOL sub_1002A2B6C(uint64_t a1, const void *a2, int a3)
{
  int v5 = sqlite3_blob_write(*(sqlite3_blob **)(a1 + 8), a2, a3, *(_DWORD *)(a1 + 40));
  if (!v5)
  {
    *(_DWORD *)(a1 + 40) += a3;
    return v5 == 0;
  }
  if (qword_10047BF08 != -1)
  {
    dispatch_once(&qword_10047BF08, &stru_100463FC8);
    long long v6 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR)) {
      return v5 == 0;
    }
    goto LABEL_4;
  }
  long long v6 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
  {
LABEL_4:
    int v7 = *(_DWORD *)(a1 + 40);
    v9[0] = 67109632;
    v9[1] = a3;
    __int16 v10 = 1024;
    int v11 = v7;
    __int16 v12 = 1024;
    int v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "failed to write blob of size %d at offset %d: %d", (uint8_t *)v9, 0x14u);
  }
  return v5 == 0;
}

uint64_t sub_1002A2C9C(uint64_t a1, unsigned int a2)
{
  int v2 = *(_DWORD *)(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 20);
  if ((int)(v3 + a2) <= v2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (v2 - v3);
  }
  *(_DWORD *)(a1 + 20) = v4 + v3;
  return v4;
}

void sub_1002A2CC0(void **this)
{
  uint64_t v1 = (wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)this;
  if (*((char *)this + 39) < 0)
  {
    operator delete(this[2]);
    this = (void **)v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  wireless_diagnostics::google::protobuf::io::CopyingOutputStream::~CopyingOutputStream((wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)this);
}

void sub_1002A2D24(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  wireless_diagnostics::google::protobuf::io::CopyingOutputStream::~CopyingOutputStream((wireless_diagnostics::google::protobuf::io::CopyingOutputStream *)this);

  operator delete();
}

void sub_1002A2D80(wireless_diagnostics::google::protobuf::io::CopyingInputStream *a1)
{
  wireless_diagnostics::google::protobuf::io::CopyingInputStream::~CopyingInputStream(a1);

  operator delete();
}

void sub_1002A2DB8(id a1)
{
  qword_10047BF10 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Database");
}

void sub_1002A2DE8()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A2E60()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_1002A2ED8()
{
}

void sub_1002A2FBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
}

void sub_1002A3008(uint64_t a1)
{
  sub_10029E278(a1);

  operator delete();
}

void sub_1002A3040(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1004640A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002A3060(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1004640A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002A30B4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_1002A30DC(uint64_t a1)
{
  *(void *)a1 = off_1004640F8;
  int v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
LABEL_4:
      uint64_t v3 = a1;
      return sub_10029E278(v3);
    }
  }
  else if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 136));
  uint64_t v3 = a1;

  return sub_10029E278(v3);
}

void sub_1002A31AC(uint64_t a1)
{
  *(void *)a1 = off_1004640F8;
  int v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
LABEL_5:
      sub_10029E278(a1);
      operator delete();
    }
  }
  else if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 136));
  goto LABEL_5;
}

uint64_t *sub_1002A3274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v109 = a2;
  sub_1002BF4CC(v108, *a3);
  a1 += 136;
  sub_1000D8CF8(a1, (uint64_t)v108, (uint64_t)&v65);
  sub_1000D8E8C(a1, (uint64_t)&v34);
  long long v7 = v65;
  long long v8 = v66;
  long long v65 = 0u;
  long long v66 = 0u;
  v96[0] = v7;
  v96[1] = v8;
  long long v9 = v67;
  long long v10 = v68;
  long long v67 = 0u;
  long long v68 = 0u;
  v96[2] = v9;
  v96[3] = v10;
  long long v11 = v69;
  long long v12 = v70;
  long long v69 = 0u;
  long long v70 = 0u;
  v96[4] = v11;
  v96[5] = v12;
  long long v13 = v71;
  long long v14 = v72;
  long long v71 = 0u;
  long long v72 = 0u;
  v96[6] = v13;
  v96[7] = v14;
  v96[8] = v73;
  v97[0] = v74;
  long long v73 = 0u;
  long long v74 = 0u;
  v97[1] = v75;
  v97[2] = v76;
  long long v75 = 0u;
  long long v76 = 0u;
  v97[3] = v77;
  v97[4] = v78;
  long long v77 = 0u;
  long long v78 = 0u;
  v97[5] = v79;
  v97[6] = v80;
  long long v79 = 0u;
  long long v80 = 0u;
  v97[7] = v81;
  v97[8] = v82;
  long long v81 = 0u;
  long long v82 = 0u;
  v97[9] = v83;
  v97[10] = v84;
  long long v83 = 0u;
  long long v84 = 0u;
  v97[11] = v85;
  v97[12] = v86;
  long long v85 = 0u;
  long long v86 = 0u;
  v97[13] = v87;
  v97[14] = v88;
  long long v87 = 0u;
  long long v88 = 0u;
  v97[15] = v89;
  v97[16] = v90;
  long long v89 = 0u;
  long long v90 = 0u;
  v97[17] = v91;
  long long v91 = 0u;
  long long v99 = __p;
  uint64_t v98 = v92;
  uint64_t v100 = v94;
  long long __p = 0u;
  uint64_t v94 = 0;
  long long v15 = v34;
  long long v16 = v35;
  long long v34 = 0u;
  long long v35 = 0u;
  v102[0] = v15;
  v102[1] = v16;
  long long v17 = v36;
  long long v18 = v37;
  long long v36 = 0u;
  long long v37 = 0u;
  v102[2] = v17;
  v102[3] = v18;
  long long v19 = v38;
  long long v20 = v39;
  long long v38 = 0u;
  long long v39 = 0u;
  v102[4] = v19;
  v102[5] = v20;
  long long v21 = v40;
  long long v22 = v41;
  long long v40 = 0u;
  long long v41 = 0u;
  v102[6] = v21;
  v102[7] = v22;
  long long v23 = v43;
  v102[8] = v42;
  uint64_t v101 = v95;
  uint64_t v104 = v61;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v24 = v45;
  v103[0] = v23;
  v103[1] = v44;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v25 = v47;
  v103[2] = v24;
  v103[3] = v46;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v26 = v49;
  v103[4] = v25;
  v103[5] = v48;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v27 = v51;
  v103[6] = v26;
  v103[7] = v50;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v28 = v53;
  v103[8] = v27;
  v103[9] = v52;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v29 = v55;
  v103[10] = v28;
  v103[11] = v54;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v30 = v57;
  v103[12] = v29;
  v103[13] = v56;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v31 = v59;
  v103[14] = v30;
  v103[15] = v58;
  long long v58 = 0u;
  long long v59 = 0u;
  v103[16] = v31;
  v103[17] = v60;
  long long v60 = 0u;
  uint64_t v106 = v63;
  *(_OWORD *)v105 = v62;
  long long v62 = 0u;
  uint64_t v63 = 0;
  uint64_t v107 = v64;
  sub_1000E0C3C(&v43);
  sub_1000E1268((uint64_t *)&v34);
  if (SHIBYTE(v94) < 0) {
    operator delete((void *)__p);
  }
  sub_1000E0C3C(&v74);
  sub_1000E1268((uint64_t *)&v65);
  unint64_t v32 = operator new(0x78uLL);
  v32[1] = 0;
  v32[2] = 0;
  *unint64_t v32 = off_1004640A8;
  sub_1002A3698((uint64_t)&v65, (uint64_t)(v32 + 3), (uint64_t *)v96, &v109, (uint64_t)a3);
  *a4 = v32 + 3;
  a4[1] = v32;
  if (SHIBYTE(v106) < 0)
  {
    operator delete(v105[0]);
    sub_1000E0C3C(v103);
    sub_1000E1268((uint64_t *)v102);
    if ((SHIBYTE(v100) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_7:
    operator delete((void *)v99);
    goto LABEL_5;
  }
  sub_1000E0C3C(v103);
  sub_1000E1268((uint64_t *)v102);
  if (SHIBYTE(v100) < 0) {
    goto LABEL_7;
  }
LABEL_5:
  sub_1000E0C3C(v97);
  return sub_1000E1268((uint64_t *)v96);
}

void sub_1002A35C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  sub_1002A360C((uint64_t)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

void sub_1002A35E0(_Unwind_Exception *a1)
{
}

void sub_1002A35F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000DF6C8((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002A360C(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 472);
  if (*(char *)(a1 + 935) < 0)
  {
    operator delete(*(void **)(a1 + 912));
    sub_1000E0C3C((void *)(a1 + 616));
    sub_1000E1268(v2);
    if ((*(char *)(a1 + 463) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1000E0C3C((void *)(a1 + 616));
    sub_1000E1268(v2);
    if ((*(char *)(a1 + 463) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*(void **)(a1 + 440));
LABEL_3:
  sub_1000E0C3C((void *)(a1 + 144));

  return sub_1000E1268((uint64_t *)a1);
}

uint64_t *sub_1002A3698(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5)
{
  sub_100248398((uint64_t)v11, a3);
  __n128 v9 = sub_100248398((uint64_t)v14, a3 + 59);
  sub_1002A9C74(a2, v11, *a4, a5, v9);
  if (v16 < 0) {
    operator delete(v15[37]);
  }
  sub_1000E0C3C(v15);
  sub_1000E1268(v14);
  if (v13 < 0) {
    operator delete(v12[37]);
  }
  sub_1000E0C3C(v12);
  return sub_1000E1268(v11);
}

void sub_1002A3754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002A3768()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A37E0()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_1002A3858()
{
}

void sub_1002A3880(int *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  long long v24 = v22;
  long long v25 = &v23;
  int v3 = *a1;
  if (*a1 >= 0) {
    int v4 = *a1;
  }
  else {
    int v4 = -v3;
  }
  int v17 = v4;
  long long v18 = &v23;
  char v19 = 48;
  int v20 = 48;
  uint64_t v5 = sub_10000D008((uint64_t)&v17);
  long long v6 = (char *)v5;
  if ((v3 & 0x80000000) == 0)
  {
    long long v24 = (unsigned char *)v5;
    long long v25 = &v23;
    unint64_t v7 = (unint64_t)(&v23 - v5);
    long long v8 = a2;
    if ((unint64_t)(&v23 - v5) < 0x17) {
      goto LABEL_6;
    }
LABEL_14:
    std::string::__grow_by(a2, 0x16uLL, v7 - 22, 0, 0, 0, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v8 = a2;
    }
    else {
      long long v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if (v6 != &v23) {
      goto LABEL_7;
    }
LABEL_18:
    long long v10 = v8;
    goto LABEL_21;
  }
  *(unsigned char *)(v5 - 1) = 45;
  long long v6 = (char *)(v5 - 1);
  long long v24 = (unsigned char *)(v5 - 1);
  long long v25 = &v23;
  unint64_t v7 = (unint64_t)(&v23 - v5 + 1);
  long long v8 = a2;
  if (v7 >= 0x17) {
    goto LABEL_14;
  }
LABEL_6:
  if (v6 == &v23) {
    goto LABEL_18;
  }
LABEL_7:
  unint64_t v9 = &v21 - v6 + 23;
  if (v9 < 0x20 || (unint64_t)((char *)v8 - v6) < 0x20)
  {
    long long v10 = v8;
    long long v11 = v6;
  }
  else
  {
    long long v10 = (std::string *)((char *)v8 + (v9 & 0xFFFFFFFFFFFFFFE0));
    long long v11 = &v6[v9 & 0xFFFFFFFFFFFFFFE0];
    long long v12 = (long long *)(v6 + 16);
    char v13 = &v8->__r_.__value_.__r.__words[2];
    unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v15 = *v12;
      *((_OWORD *)v13 - 1) = *(v12 - 1);
      *(_OWORD *)char v13 = v15;
      v12 += 2;
      v13 += 4;
      v14 -= 32;
    }
    while (v14);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_21;
    }
  }
  do
  {
    std::string::value_type v16 = *v11++;
    v10->__r_.__value_.__s.__data_[0] = v16;
    long long v10 = (std::string *)((char *)v10 + 1);
  }
  while (v11 != &v23);
LABEL_21:
  v10->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    a2->__r_.__value_.__l.__size_ = v7;
  }
  else {
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = v7 & 0x7F;
  }
}

void sub_1002A3A44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002A3A60()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A3AD8()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_1002A3B50()
{
}

uint64_t sub_1002A3B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5 = *(float **)(*(void *)(a1 + 8) + 240);
  if (!v5) {
    uint64_t v5 = *(float **)(qword_10047F018 + 240);
  }
  return sub_10002FFE8(a2, a3, (float)(v5[4] + v5[4]), v5[5], v5[6], v5[7]);
}

double sub_1002A3BDC()
{
  return 0.0593040887;
}

uint64_t sub_1002A3BE8(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 193);
}

uint64_t sub_1002A3BF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 208);
  }
  return *(unsigned __int8 *)(v1 + 33);
}

uint64_t sub_1002A3C20(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 232);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 232);
  }
  return *(unsigned __int8 *)(v1 + 24);
}

uint64_t sub_1002A3C4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 232);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 232);
  }
  return *(unsigned __int8 *)(v1 + 25);
}

double sub_1002A3C78(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 232);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 232);
  }
  return *(float *)(v1 + 16);
}

double sub_1002A3CAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 232);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 232);
  }
  return *(float *)(v1 + 32);
}

double sub_1002A3CE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 232);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 232);
  }
  return *(float *)(v1 + 36);
}

float sub_1002A3D14(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 232);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 232);
  }
  return *(float *)(v1 + 20);
}

float sub_1002A3D40(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 232);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 232);
  }
  return *(float *)(v1 + 28);
}

uint64_t sub_1002A3D6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 232);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 232);
  }
  return *(unsigned __int8 *)(v1 + 26);
}

uint64_t sub_1002A3D98(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 232);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 232);
  }
  return *(unsigned __int8 *)(v1 + 27);
}

float sub_1002A3DC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 272);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 272);
  }
  return *(float *)(v1 + 28);
}

uint64_t sub_1002A3DF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 272);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 272);
  }
  return *(unsigned __int8 *)(v1 + 32);
}

float sub_1002A3E1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 208);
  }
  return *(float *)(v1 + 16);
}

float sub_1002A3E48(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 208);
  }
  return *(float *)(v1 + 20);
}

float sub_1002A3E74(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 208);
  }
  return *(float *)(v1 + 36);
}

float sub_1002A3EA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 208);
  }
  return *(float *)(v1 + 52);
}

float sub_1002A3ECC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 208);
  }
  return *(float *)(v1 + 48);
}

float sub_1002A3EF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 208);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 208);
  }
  return *(float *)(v1 + 40);
}

uint64_t sub_1002A3F24(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 80);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 80);
  }
  return *(unsigned __int8 *)(v1 + 36);
}

float sub_1002A3F50(uint64_t a1, double a2)
{
  return *(float *)(*(void *)(a1 + 8) + 228) * a2;
}

float sub_1002A3F68(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 48);
  }
  return *(float *)(v1 + 24);
}

uint64_t sub_1002A3F94(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 48);
  }
  return (uint64_t)(*(float *)(v1 + 16) * 1000000000.0);
}

float sub_1002A3FD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 48);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 48);
  }
  return *(float *)(v1 + 20);
}

uint64_t sub_1002A3FFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 88);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 88);
  }
  return (uint64_t)(*(float *)(v1 + 20) * 1000000000.0);
}

float sub_1002A4038(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 196);
}

float sub_1002A4044(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 120);
}

double sub_1002A4050(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 124);
}

double sub_1002A4060(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 128);
}

double sub_1002A4070(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 132);
}

double sub_1002A4080(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 252);
}

double sub_1002A4090(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 248);
}

double sub_1002A40A0(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 224);
}

uint64_t sub_1002A40B0(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 192);
}

uint64_t sub_1002A40BC(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 256);
  if (!result) {
    return *(void *)(qword_10047F018 + 256);
  }
  return result;
}

uint64_t sub_1002A40E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 264);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 264);
  }
  return *(void *)(v1 + 16);
}

uint64_t sub_1002A410C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 264);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 264);
  }
  return *(void *)(v1 + 24);
}

uint64_t sub_1002A4138(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 264);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 264);
  }
  return *(void *)(v1 + 32);
}

uint64_t sub_1002A4164(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 264);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 264);
  }
  return *(void *)(v1 + 40);
}

uint64_t sub_1002A4190(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 8) + 264);
  if (!v1) {
    uint64_t v1 = *(void *)(qword_10047F018 + 264);
  }
  return *(void *)(v1 + 48);
}

void sub_1002A41BC(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

std::string *sub_1002A41EC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002A4220(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A423C(_DWORD *a1, uint64_t a2)
{
  int v2 = (uint64_t *)(a1 + 2);
  switch(*a1 ^ ((int)*a1 >> 31))
  {
    case 1:
      uint64_t v3 = *(unsigned int *)v2;
      if ((v3 & 0x80000000) != 0)
      {
        exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
        exception->__vftable = 0;
        unint64_t v9 = sub_10015F668(exception);
      }
      goto LABEL_6;
    case 2:
      uint64_t v3 = *v2;
      sub_1002A4538(*v2);
LABEL_6:
      uint64_t result = v3;
      break;
    case 3:
      uint64_t result = sub_1002A45CC(a2, (unsigned __int8 *)v2);
      break;
    case 4:
      double v5 = *(double *)v2;
      sub_1002A46E0(*(double *)v2);
      double v6 = ceil(v5);
      double v7 = floor(v5);
      if (v5 >= 0.0) {
        double v6 = v7;
      }
      uint64_t result = v6;
      break;
    case 5:
      sub_1002A477C();
    case 6:
      sub_1002A48F0();
    default:
      sub_1002A43C4();
  }
  return result;
}

void sub_1002A43C4()
{
  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_1003EE0F0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert empty value to a type");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100453860;
  sub_10018E868((uint64_t)v0);
  sub_1000D1698(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned int>::operator()(boost::none_t) const [T = unsigned int]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 111, (uint64_t)v0);
}

void sub_1002A4498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1002A4500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1002A44F0);
}

void sub_1002A4524(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A4538(uint64_t result)
{
  int v1 = 2 * (result > 0xFFFFFFFFLL);
  if (result < 0) {
    int v1 = 1;
  }
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v3 = sub_10015F6A0(exception);
  }
  if (v1 == 1)
  {
    int v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    double v5 = sub_10015F668(v4);
  }
  return result;
}

uint64_t sub_1002A45CC(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v9 = 0;
  uint64_t v2 = a2[23];
  uint64_t v3 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  else {
    uint64_t v3 = a2;
  }
  if (!v2) {
    goto LABEL_13;
  }
  int v4 = &v3[v2];
  int v5 = *v3;
  if (v5 == 45 || v5 == 43) {
    ++v3;
  }
  LOBYTE(v10.__vftable) = 0;
  HIDWORD(v10.__vftable) = 1;
  long long v11 = &v9;
  long long v12 = v3;
  char v13 = v4;
  int v6 = sub_10015F87C((uint64_t)&v10);
  if (v5 == 45)
  {
    uint64_t v7 = -v9;
    unsigned int v9 = -v9;
    if (v6) {
      return v7;
    }
LABEL_13:
    std::bad_cast::bad_cast(&v10);
    v10.__vftable = (std::bad_cast_vtbl *)&off_100454020;
    sub_1000DB0D4((uint64_t)&v10);
  }
  if (!v6) {
    goto LABEL_13;
  }
  return v9;
}

void sub_1002A46CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::bad_cast a11)
{
}

void sub_1002A46E0(double a1)
{
  int v1 = 2 * (a1 >= 4294967300.0);
  if (a1 <= -1.0) {
    int v1 = 1;
  }
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    uint64_t v3 = sub_10015F6A0(exception);
  }
  if (v1 == 1)
  {
    int v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    int v5 = sub_10015F668(v4);
  }
}

void sub_1002A477C()
{
  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_1003EE100;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100453860;
  sub_10018E868((uint64_t)v0);
  sub_1000D1698(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned int>::operator()(const F &) const [T = unsigned int, F = std::vector<boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_1002A4850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1002A48B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1002A48A8);
}

void sub_1002A48DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002A48F0()
{
  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_1003EE100;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100453860;
  sub_10018E868((uint64_t)v0);
  sub_1000D1698(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned int>::operator()(const F &) const [T = unsigned int, F = std::unordered_map<std::string, boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_1002A49C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1002A4A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1002A4A1CLL);
}

void sub_1002A4A50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002A4A64(int *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  char v21 = v19;
  long long v22 = v20;
  int v14 = *a1;
  long long v15 = v20;
  char v16 = 48;
  int v17 = 48;
  uint64_t v3 = sub_10000D008((uint64_t)&v14);
  char v21 = (unsigned char *)v3;
  long long v22 = v20;
  int v4 = &v20[-v3];
  int v5 = a2;
  if ((unint64_t)&v20[-v3] >= 0x17)
  {
    std::string::__grow_by(a2, 0x16uLL, (std::string::size_type)(v4 - 22), 0, 0, 0, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v5 = a2;
    }
    else {
      int v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
  }
  if ((unsigned char *)v3 == v20)
  {
    uint64_t v7 = v5;
  }
  else
  {
    unint64_t v6 = (unint64_t)&v19[-v3 + 22];
    if (v6 < 0x20 || (unint64_t)v5 - v3 < 0x20)
    {
      uint64_t v7 = v5;
      long long v8 = (char *)v3;
    }
    else
    {
      uint64_t v7 = (std::string *)((char *)v5 + (v6 & 0xFFFFFFFFFFFFFFE0));
      long long v8 = (char *)(v3 + (v6 & 0xFFFFFFFFFFFFFFE0));
      unsigned int v9 = (long long *)(v3 + 16);
      std::bad_cast v10 = &v5->__r_.__value_.__r.__words[2];
      unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v12 = *v9;
        *((_OWORD *)v10 - 1) = *(v9 - 1);
        *(_OWORD *)std::bad_cast v10 = v12;
        v9 += 2;
        v10 += 4;
        v11 -= 32;
      }
      while (v11);
      if (v6 == (v6 & 0xFFFFFFFFFFFFFFE0)) {
        goto LABEL_15;
      }
    }
    do
    {
      std::string::value_type v13 = *v8++;
      v7->__r_.__value_.__s.__data_[0] = v13;
      uint64_t v7 = (std::string *)((char *)v7 + 1);
    }
    while (v8 != v20);
  }
LABEL_15:
  v7->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    a2->__r_.__value_.__l.__size_ = (std::string::size_type)v4;
  }
  else {
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = v4 & 0x7F;
  }
}

void sub_1002A4BF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A4C14(_DWORD *a1, uint64_t a2)
{
  std::runtime_error v2 = (unsigned __int8 *)(a1 + 2);
  switch(*a1 ^ ((int)*a1 >> 31))
  {
    case 1:
      uint64_t result = *(unsigned int *)v2;
      if ((result & 0x80000000) != 0) {
        goto LABEL_11;
      }
      return result;
    case 2:
      uint64_t result = *(void *)v2;
      if ((*(void *)v2 & 0x8000000000000000) == 0) {
        return result;
      }
LABEL_11:
      exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
      exception->__vftable = 0;
      long long v8 = sub_10015F668(exception);
    case 3:
      uint64_t result = sub_1002A4EE8(a2, v2);
      break;
    case 4:
      double v4 = *(double *)v2;
      sub_1002A54F8(*(double *)v2);
      double v5 = ceil(v4);
      double v6 = floor(v4);
      if (v4 >= 0.0) {
        double v5 = v6;
      }
      uint64_t result = (unint64_t)v5;
      break;
    case 5:
      sub_1002A5594();
    case 6:
      sub_1002A5708();
    default:
      sub_1002A4D74();
  }
  return result;
}

void sub_1002A4D74()
{
  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_1003EE0F0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert empty value to a type");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100453860;
  sub_10018E868((uint64_t)v0);
  sub_1000D1698(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned long>::operator()(boost::none_t) const [T = unsigned long]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 111, (uint64_t)v0);
}

void sub_1002A4E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1002A4EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1002A4EA0);
}

void sub_1002A4ED4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A4EE8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v9 = 0;
  uint64_t v2 = a2[23];
  uint64_t v3 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  else {
    uint64_t v3 = a2;
  }
  if (!v2) {
    goto LABEL_13;
  }
  double v4 = &v3[v2];
  int v5 = *v3;
  if (v5 == 45 || v5 == 43) {
    ++v3;
  }
  LOBYTE(v10.__vftable) = 0;
  uint64_t v11 = 1;
  long long v12 = &v9;
  std::string::value_type v13 = v3;
  int v14 = v4;
  int v6 = sub_1002A4FF8((uint64_t)&v10);
  if (v5 == 45)
  {
    uint64_t v7 = -v9;
    uint64_t v9 = -v9;
    if (v6) {
      return v7;
    }
LABEL_13:
    std::bad_cast::bad_cast(&v10);
    v10.__vftable = (std::bad_cast_vtbl *)&off_100454020;
    sub_1000DB0D4((uint64_t)&v10);
  }
  if (!v6) {
    goto LABEL_13;
  }
  return v9;
}

void sub_1002A4FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

uint64_t sub_1002A4FF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v1 - 1;
  uint64_t v2 = *(void **)(a1 + 16);
  void *v2 = 0;
  if (*(void *)(a1 + 24) > (unint64_t)(v1 - 1)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(v1 - 1);
  if ((v3 - 58) < 0xFFFFFFF6) {
    return 0;
  }
  void *v2 = (v3 - 48);
  *(void *)(a1 + 32) = v1 - 2;
  std::locale::locale(&v49);
  int v6 = std::locale::classic();
  if (std::locale::operator==(&v49, v6))
  {
    unint64_t v7 = *(void *)(a1 + 24);
    long long v8 = *(char **)(a1 + 32);
    if ((unint64_t)v8 >= v7)
    {
      char v12 = *(unsigned char *)a1 != 0;
      while (1)
      {
        unint64_t v15 = *(void *)(a1 + 8);
        v12 |= v15 > 0x1999999999999999;
        *(unsigned char *)a1 = v12 & 1;
        unint64_t v16 = 10 * v15;
        *(void *)(a1 + 8) = 10 * v15;
        uint64_t v17 = *v8;
        if ((v17 - 58) < 0xF6u) {
          break;
        }
        unint64_t v18 = v17 - 48;
        uint64_t v19 = v16 * (v17 - 48);
        if (v18)
        {
          if (v12) {
            break;
          }
          if (!is_mul_ok(v18, v16)) {
            break;
          }
          std::string::value_type v13 = *(void **)(a1 + 16);
          uint64_t v14 = *v13;
          if (__CFADD__(v19, *v13)) {
            break;
          }
        }
        else
        {
          std::string::value_type v13 = *(void **)(a1 + 16);
          uint64_t v14 = *v13;
        }
        *std::string::value_type v13 = v14 + v19;
        *(void *)(a1 + 32) = --v8;
        if ((unint64_t)v8 < v7) {
          goto LABEL_6;
        }
      }
      uint64_t v9 = 0;
    }
    else
    {
LABEL_6:
      uint64_t v9 = 1;
    }
    goto LABEL_66;
  }
  std::bad_cast v10 = std::locale::use_facet(&v49, &std::numpunct<char>::id);
  ((void (*)(void **__return_ptr))v10->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v48 < 0)
  {
    uint64_t v11 = v47;
    if (!v47 || *(char *)__p <= 0)
    {
LABEL_27:
      unint64_t v26 = *(void *)(a1 + 24);
      long long v27 = *(char **)(a1 + 32);
      if ((unint64_t)v27 >= v26)
      {
        char v38 = *(unsigned char *)a1 != 0;
        while (1)
        {
          unint64_t v41 = *(void *)(a1 + 8);
          v38 |= v41 > 0x1999999999999999;
          *(unsigned char *)a1 = v38 & 1;
          unint64_t v42 = 10 * v41;
          *(void *)(a1 + 8) = 10 * v41;
          uint64_t v43 = *v27;
          if ((v43 - 58) < 0xF6u) {
            break;
          }
          unint64_t v44 = v43 - 48;
          uint64_t v45 = v42 * (v43 - 48);
          if (v44)
          {
            if (v38) {
              break;
            }
            if (!is_mul_ok(v44, v42)) {
              break;
            }
            long long v39 = *(void **)(a1 + 16);
            uint64_t v40 = *v39;
            if (__CFADD__(v45, *v39)) {
              break;
            }
          }
          else
          {
            long long v39 = *(void **)(a1 + 16);
            uint64_t v40 = *v39;
          }
          *long long v39 = v40 + v45;
          *(void *)(a1 + 32) = --v27;
          if ((unint64_t)v27 < v26) {
            goto LABEL_28;
          }
        }
LABEL_64:
        uint64_t v9 = 0;
        if (((char)v48 & 0x80000000) == 0) {
          goto LABEL_66;
        }
        goto LABEL_65;
      }
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v11 = v48;
    if (!v48 || (char)__p <= 0) {
      goto LABEL_27;
    }
  }
  char v20 = ((uint64_t (*)(const std::locale::facet *))v10->__vftable[1].~facet_0)(v10);
  char v21 = *(char **)(a1 + 24);
  long long v22 = *(char **)(a1 + 32);
  if (v22 >= v21)
  {
    unsigned __int8 v23 = 0;
    p_p = __p;
    if ((v48 & 0x80u) == 0) {
      p_p = &__p;
    }
    char v25 = *p_p - 1;
    while (1)
    {
      while (v25)
      {
        unint64_t v30 = *(void *)(a1 + 8);
        if (*(unsigned char *)a1) {
          BOOL v31 = 1;
        }
        else {
          BOOL v31 = v30 > 0x1999999999999999;
        }
        char v32 = v31;
        *(unsigned char *)a1 = v32;
        unint64_t v33 = 10 * v30;
        *(void *)(a1 + 8) = 10 * v30;
        uint64_t v34 = *v22;
        if ((v34 - 58) < 0xF6u) {
          goto LABEL_64;
        }
        unint64_t v35 = v34 - 48;
        uint64_t v36 = v33 * (v34 - 48);
        if (v35)
        {
          if (v32) {
            goto LABEL_64;
          }
          if (!is_mul_ok(v35, v33)) {
            goto LABEL_64;
          }
          long long v28 = *(void **)(a1 + 16);
          uint64_t v29 = *v28;
          if (__CFADD__(v36, *v28)) {
            goto LABEL_64;
          }
        }
        else
        {
          long long v28 = *(void **)(a1 + 16);
          uint64_t v29 = *v28;
        }
        void *v28 = v29 + v36;
        --v25;
        *(void *)(a1 + 32) = --v22;
        if (v22 < v21) {
          goto LABEL_28;
        }
      }
      if (*v22 != v20) {
        break;
      }
      if (v22 == v21) {
        goto LABEL_64;
      }
      if (v11 - 1 > (unint64_t)v23) {
        ++v23;
      }
      if ((v48 & 0x80u) == 0) {
        long long v37 = &__p;
      }
      else {
        long long v37 = __p;
      }
      char v25 = v37[v23];
      *(void *)(a1 + 32) = --v22;
      if (v22 < v21) {
        goto LABEL_28;
      }
    }
    uint64_t v9 = sub_1002A5440(a1);
    if (((char)v48 & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
LABEL_28:
  uint64_t v9 = 1;
  if ((char)v48 < 0) {
LABEL_65:
  }
    operator delete(__p);
LABEL_66:
  std::locale::~locale(&v49);
  return v9;
}

void sub_1002A5400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::locale::~locale(&a15);
    _Unwind_Resume(a1);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A5440(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(char **)(a1 + 32);
  if ((unint64_t)v2 < v1) {
    return 1;
  }
  char v4 = *(unsigned char *)a1 != 0;
  while (1)
  {
    unint64_t v7 = *(void *)(a1 + 8);
    v4 |= v7 > 0x1999999999999999;
    *(unsigned char *)a1 = v4 & 1;
    unint64_t v8 = 10 * v7;
    *(void *)(a1 + 8) = 10 * v7;
    uint64_t v9 = *v2;
    if ((v9 - 58) < 0xF6u) {
      break;
    }
    unint64_t v10 = v9 - 48;
    uint64_t v11 = v8 * (v9 - 48);
    if (v10)
    {
      if (v4) {
        return 0;
      }
      if (!is_mul_ok(v10, v8)) {
        return 0;
      }
      int v5 = *(void **)(a1 + 16);
      uint64_t v6 = *v5;
      if (__CFADD__(v11, *v5)) {
        return 0;
      }
    }
    else
    {
      int v5 = *(void **)(a1 + 16);
      uint64_t v6 = *v5;
    }
    *int v5 = v6 + v11;
    *(void *)(a1 + 32) = --v2;
    if ((unint64_t)v2 < v1) {
      return 1;
    }
  }
  return 0;
}

void sub_1002A54F8(double a1)
{
  int v1 = 2 * (a1 >= 1.84467441e19);
  if (a1 <= -1.0) {
    int v1 = 1;
  }
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    int v3 = sub_10015F6A0(exception);
  }
  if (v1 == 1)
  {
    char v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    int v5 = sub_10015F668(v4);
  }
}

void sub_1002A5594()
{
  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_1003EE100;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100453860;
  sub_10018E868((uint64_t)v0);
  sub_1000D1698(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned long>::operator()(const F &) const [T = unsigned long, F = std::vector<boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_1002A5668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1002A56D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1002A56C0);
}

void sub_1002A56F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002A5708()
{
  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_1003EE100;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100453860;
  sub_10018E868((uint64_t)v0);
  sub_1000D1698(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<unsigned long>::operator()(const F &) const [T = unsigned long, F = std::unordered_map<std::string, boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_1002A57DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1002A5844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1002A5834);
}

void sub_1002A5868(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *sub_1002A587C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002A58B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002A58CC()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A5944()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

double sub_1002A59BC(double *a1, uint64_t a2, double a3)
{
  double v4 = *a1;
  double v5 = a1[1];
  double v6 = 0.0;
  if (v5 != 0.0)
  {
    double v7 = (*(double (**)(uint64_t))(*(void *)a2 + 16))(a2) + -0.5;
    double v8 = log(fabs(v7) * -2.0 + 1.0);
    if (fabs(v8) != INFINITY) {
      double v6 = v8 * (v5 / -1.41421356 * (double)((v7 > 0.0) - (v7 < 0.0)));
    }
  }
  return v4 * a3 + v6;
}

double sub_1002A5A84(double *a1, double a2)
{
  return *a1 * a2;
}

double sub_1002A5A90(double a1, double a2)
{
  return a1 * a2;
}

double sub_1002A5A98(double a1)
{
  return a1 / 1.4;
}

BOOL sub_1002A5AAC(double *a1)
{
  uint64_t v1 = *(unsigned __int8 *)a1;
  if (!*(unsigned char *)a1) {
    return v1;
  }
  int v2 = (_BYTE)a1[11] & 0x21;
  if (((_BYTE)a1[11] & 0x40) == 0)
  {
    uint64_t v1 = 0;
    if (!*((unsigned char *)a1 + 96) || v2 != 33) {
      return v1;
    }
    if ((~*((unsigned __int8 *)a1 + 184) & 0x21) == 0)
    {
      double v3 = a1[9];
      double v4 = a1[21];
      double v5 = 0.0;
      if (v3 != v4) {
        double v5 = (a1[5] - a1[17]) / (v3 - v4);
      }
      return v5 > 0.0;
    }
    return 0;
  }
  if (v2 == 33 && *((unsigned char *)a1 + 96) != 0 && (~*((unsigned __int8 *)a1 + 184) & 0x21) == 0)
  {
    double v7 = a1[9];
    double v8 = a1[21];
    if (v7 == v8 || (a1[5] - a1[17]) / (v7 - v8) == 0.0) {
      return 0;
    }
  }
  double v5 = 1.0 / a1[10];
  return v5 > 0.0;
}

double sub_1002A5B80(uint64_t a1)
{
  double result = 0.0;
  if (*(unsigned char *)a1)
  {
    if ((*(unsigned char *)(a1 + 88) & 0x40) != 0)
    {
      return 1.0 / *(double *)(a1 + 80);
    }
    else if (*(unsigned char *)(a1 + 96) {
           && (*(unsigned char *)(a1 + 88) & 0x21) == 0x21
    }
           && (~*(unsigned __int8 *)(a1 + 184) & 0x21) == 0)
    {
      double v2 = *(double *)(a1 + 72);
      double v3 = *(double *)(a1 + 168);
      if (v2 != v3) {
        return (*(double *)(a1 + 40) - *(double *)(a1 + 136)) / (v2 - v3);
      }
    }
  }
  return result;
}

void sub_1002A5BF4(unsigned char *a1, uint64_t a2)
{
  if (a1[96])
  {
    if (*a1)
    {
      sub_1001A8530((uint64_t)(a1 + 104), (uint64_t)(a1 + 8));
      uint64_t v4 = (uint64_t)(a1 + 8);
      if (!*a1) {
        goto LABEL_11;
      }
    }
    else
    {
      nullsub_95(a1 + 104);
      a1[96] = 0;
      uint64_t v4 = (uint64_t)(a1 + 8);
      if (!*a1)
      {
LABEL_11:
        sub_1001A84CC(v4, a2);
        *a1 = 1;
        return;
      }
    }
  }
  else
  {
    uint64_t v4 = (uint64_t)(a1 + 8);
    if (!*a1) {
      goto LABEL_11;
    }
    sub_1001A84CC((uint64_t)(a1 + 104), v4);
    a1[96] = 1;
    uint64_t v4 = (uint64_t)(a1 + 8);
    if (!*a1) {
      goto LABEL_11;
    }
  }

  sub_1001A8530(v4, a2);
}

uint64_t sub_1002A5CB8(uint64_t a1, _DWORD *a2, _DWORD *a3, double *a4)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = *a3;
  sub_100357CE4((void *)(a1 + 8), a4);
  if (!*(_DWORD *)(a1 + 12) || !*v5)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v8, "Malformed inner grid cells! What's going on here?");
    std::runtime_error::runtime_error(&v9, &v8);
    v9.__vftable = (std::runtime_error_vtbl *)&off_100464360;
    sub_10018E868((uint64_t)v7);
    sub_1002A5E28(&v9, (uint64_t)"InnerGridCells::IndexOffset::IndexOffset(COLS, ROWS, const ArrayDims &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/math/inner_grid_cells.cpp", 19, (uint64_t)v7);
  }
  return a1;
}

void sub_1002A5DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1002A5E28(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  std::runtime_error::runtime_error(&v12, a1);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_100464318;
  std::string::value_type v13 = off_100464340;
  sub_1002A6760((uint64_t)&v18, (uint64_t)&v12);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  int v21 = a4;
  std::runtime_error v9 = *(const void **)a5;
  size_t v10 = *(void *)(a5 + 8) - *(void *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      sub_1000A9108();
    }
    long long __p = operator new(v10);
    memcpy(__p, v9, v10);
  }
  sub_1002A6404();
}

void sub_1002A6134(void *a1)
{
  std::runtime_error::~runtime_error(v1);
  sub_1000A6954(a1);
}

void sub_1002A6148(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    operator delete(__p);
    sub_1000A6954(a1);
  }
  sub_1000A6954(a1);
}

void sub_1002A6170(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

uint64_t sub_1002A6204(_DWORD *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 20) - a1[1];
  int v5 = *(_DWORD *)(a2 + 16) - *a1;
  int v4 = v2;
  return sub_100357CF0(a1 + 2, &v5, &v4);
}

uint64_t sub_1002A6244(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_100464360;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = off_100464278;
  *(void *)(a1 + 16) = off_1004642B0;
  *(void *)(a1 + 56) = &off_1004642E8;
  return a1;
}

void sub_1002A6364(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002A6378(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

void sub_1002A6404()
{
}

void sub_1002A66A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000CD2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002A66B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000CD238((uint64_t)va);
  sub_1000CD2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002A66D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 16))(a14);
    if (atomic_fetch_add(a14 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 24))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A6760(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_100464360;
  uint64_t v5 = (uint64_t)&v4[1];
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)a1 = off_100464278;
  *(void *)(a1 + 16) = off_1004642B0;
  *(void *)(a1 + 56) = &off_1004642E8;
  sub_1000A6FDC(v5, a2 + 16);
  return a1;
}

void sub_1002A688C(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002A68A0(_Unwind_Exception *a1)
{
  sub_1002A68B4(v1);
  _Unwind_Resume(a1);
}

void sub_1002A68B4(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

void sub_1002A6940(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete();
}

void sub_1002A69E0()
{
}

void sub_1002A6A3C()
{
}

void sub_1002A6A60(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002A6244((uint64_t)exception, a1);
}

void sub_1002A6AA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002A6ABC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1002A6B44(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete();
}

void sub_1002A6BE0()
{
}

void sub_1002A6C50()
{
}

void sub_1002A6C74(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002A6244((uint64_t)exception, v1);
}

void sub_1002A6CD0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002A6CE4(void *a1)
{
  uint64_t v1 = (std::runtime_error *)((char *)a1 + *(void *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    v1[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(v1);
}

void sub_1002A6D84(void *a1)
{
  uint64_t v1 = (std::runtime_error *)((char *)a1 + *(void *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);

  operator delete();
}

void sub_1002A6E38(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete();
}

void sub_1002A6ED8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1002A6F60(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete();
}

void sub_1002A6FFC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete();
}

uint64_t sub_1002A7034(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_100464360;
  uint64_t v5 = (uint64_t)&v4[1];
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)a1 = off_100464278;
  *(void *)(a1 + 16) = off_1004642B0;
  *(void *)(a1 + 56) = &off_1004642E8;
  sub_1000A6FDC(v5, a2 + 16);
  return a1;
}

void sub_1002A7160(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002A7174(_Unwind_Exception *a1)
{
  sub_1002A68B4(v1);
  _Unwind_Resume(a1);
}

void sub_1002A7188()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A7200()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

__n128 sub_1002A7278(uint64_t a1, int a2, __n128 *a3)
{
  *(_DWORD *)a1 = a2;
  __n128 result = *a3;
  *(__n128 *)(a1 + 8) = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

uint64_t sub_1002A728C(uint64_t a1)
{
  return *(void *)(a1 + 8) + 24;
}

void sub_1002A7298()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A7310()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002A7388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_100464388;
  uint64_t v6 = a1 + 8;
  int v24 = sub_1001E0EE0(a2);
  int v23 = sub_10031B5EC(a2);
  int v22 = sub_10031B5F8(a2);
  int v21 = sub_10031B604(a2);
  sub_1000741D0(__p, &v22, &v21);
  sub_1002A6200(v6, &v24, &v23, __p);
  *(double *)(a1 + 24) = sub_100270918(a3, a2);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = sub_1000D7EFC(a2);
  if (*(char *)(v10 + 23) < 0)
  {
    sub_1000559FC((unsigned char *)(a1 + 56), *(void **)v10, *(void *)(v10 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)v10;
    *(void *)(a1 + 72) = *(void *)(v10 + 16);
    *(_OWORD *)(a1 + 56) = v11;
  }
  *(void *)(a1 + 80) = 0;
  std::runtime_error v12 = sub_100065654();
  std::string::value_type v13 = v12;
  unsigned __int8 v14 = atomic_load((unsigned __int8 *)v12 + 20);
  if ((v14 & 1) != 0 || *((unsigned char *)v12 + 16))
  {
    if (*((unsigned char *)v12 + 17)) {
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v15 = sub_100059C20((uint64_t)v12, (unsigned char *)v12 + 9);
    *((unsigned char *)v13 + 17) = v15;
    *((unsigned char *)v13 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v13 + 20);
    if (v15) {
      goto LABEL_12;
    }
  }
  if (*(_DWORD *)(sub_100064294(a2) + 24) == 1)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v25);
  }
LABEL_12:
  uint64_t v16 = sub_1000656E4();
  int v17 = v16;
  unsigned __int8 v18 = atomic_load((unsigned __int8 *)v16 + 20);
  if ((v18 & 1) != 0 || *((unsigned char *)v16 + 16))
  {
    if (*((unsigned char *)v16 + 17)) {
      return a1;
    }
  }
  else
  {
    BOOL v19 = sub_100059C20((uint64_t)v16, (unsigned char *)v16 + 9);
    *((unsigned char *)v17 + 17) = v19;
    *((unsigned char *)v17 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v17 + 20);
    if (v19) {
      return a1;
    }
  }
  if (*(_DWORD *)(sub_100064294(a2) + 24) == 2)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v25);
  }
  return a1;
}

void sub_1002A75F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 + 79) < 0)
  {
    operator delete(*v17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A7678(uint64_t a1)
{
  *(void *)a1 = off_100464388;
  int v2 = *(void **)(a1 + 80);
  if (v2)
  {
    sub_10028C9F0(v2);
    *(void *)(a1 + 80) = 0;
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

void sub_1002A76EC(uint64_t a1)
{
  *(void *)a1 = off_100464388;
  int v2 = *(void **)(a1 + 80);
  if (v2)
  {
    sub_10028C9F0(v2);
    *(void *)(a1 + 80) = 0;
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }

  operator delete();
}

BOOL sub_1002A7770(uint64_t a1)
{
  uint64_t v1 = (int **)(a1 + 80);
  if (*(void *)(a1 + 80)) {
    return 1;
  }
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    int v4 = sub_10028B750((unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 79), v1);
    if (v4) {
      goto LABEL_6;
    }
LABEL_10:
    *(double *)(a1 + 88) = sub_10028C9CC(*(void *)(a1 + 80));
    return 1;
  }
  int v4 = sub_10028B750(*(unsigned __int8 **)(a1 + 56), *(void *)(a1 + 64), v1);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_6:
  int v5 = v4;
  if (qword_10047BED8 == -1)
  {
    uint64_t v6 = qword_10047BEE0;
    BOOL result = os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_8:
      v7[0] = 67109120;
      v7[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Couldn't deserialize rssi data: %d", (uint8_t *)v7, 8u);
      return 0;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_1004643F8);
    uint64_t v6 = qword_10047BEE0;
    BOOL result = os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR);
    if (result) {
      goto LABEL_8;
    }
  }
  return result;
}

BOOL sub_1002A78A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = sub_1002A6204((_DWORD *)(a1 + 8), a2);
  if (v5 == -1) {
    return 0;
  }
  int v6 = v5;
  BOOL result = sub_1002A7770(a1);
  if (result)
  {
    double v8 = sub_10028C970(*(_DWORD **)(a1 + 80), v6 % *(_DWORD *)(a1 + 20), v6 / *(_DWORD *)(a1 + 20));
    BOOL result = v8 != *(double *)(a1 + 88);
    if (a3)
    {
      int32x2_t v9 = vdup_n_s32(result);
      v10.i64[0] = v9.u32[0];
      v10.i64[1] = v9.u32[1];
      __asm { FMOV            V2.2D, #1.0 }
      *(double *)_Q2.i64 = v8;
      *(int8x16_t *)(a3 + 8) = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v10, 0x3FuLL)), _Q2, (int8x16_t)xmmword_1003F9910);
    }
  }
  return result;
}

void sub_1002A794C()
{
  __cxa_allocate_exception(0x40uLL);
  *((unsigned char *)&v1.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v1, "Not ported");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100464360;
  sub_10018E868((uint64_t)v0);
  sub_1002A5E28(&v2, (uint64_t)"virtual BOOL RadiozapNoCertaintyRssiMap::getMapCellBilinear(const HybridCellIndexBilinear &, RssiMapCell *) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/rssi/radiozap_no_certainty_rssi_map.cpp", 108, (uint64_t)v0);
}

void sub_1002A7A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_1002A7A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1002A7A68);
}

float sub_1002A7A9C(uint64_t a1, int a2)
{
  return sub_10028C970(*(_DWORD **)(a1 + 80), a2 % *(_DWORD *)(a1 + 20), a2 / *(_DWORD *)(a1 + 20));
}

float sub_1002A7ADC(uint64_t a1, int a2)
{
  sub_1002A7770(a1);
  BOOL v4 = sub_10028C970(*(_DWORD **)(a1 + 80), a2 % *(_DWORD *)(a1 + 20), a2 / *(_DWORD *)(a1 + 20)) == *(double *)(a1 + 88);
  float result = 1.0;
  if (v4) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1002A7B2C(uint64_t a1)
{
  return a1 + 24;
}

void sub_1002A7B34(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_1002A7B64()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A7BDC()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

double **sub_1002A7C54(double **a1, void *a2, uint64_t *a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v8 = a3[1] - *a3;
  if (v8)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    if (v9 >> 61) {
      sub_1000A9108();
    }
    int64x2_t v10 = (double *)operator new(0x6666666666666668 * (v8 >> 4));
    long long v11 = &v10[v9];
    *a1 = v10;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    long long v11 = 0;
    int64x2_t v10 = 0;
  }
  sub_1002AA4A0(__p, 0);
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  if (v12 != v13)
  {
    unsigned __int8 v14 = v10;
    unint64_t v33 = a2;
    uint64_t v34 = a4;
    do
    {
      while (1)
      {
        sub_100249DFC(v12, a4, (uint64_t)__p);
        double v15 = (*(double (**)(void, void **))(*(void *)*a2 + 24))(*a2, __p);
        double v16 = v15;
        if (v14 >= v11) {
          break;
        }
        *v14++ = v15;
        a1[1] = v14;
        v12 += 80;
        if (v12 == v13) {
          goto LABEL_37;
        }
      }
      uint64_t v17 = v14 - v10;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        sub_1000A9108();
      }
      if (((char *)v11 - (char *)v10) >> 2 > v18) {
        unint64_t v18 = ((char *)v11 - (char *)v10) >> 2;
      }
      if ((unint64_t)((char *)v11 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19)
      {
        if (v19 >> 61) {
          sub_1000A6A10();
        }
        uint64_t v20 = operator new(8 * v19);
        int v21 = (double *)&v20[8 * v17];
        *int v21 = v16;
        uint64_t v22 = (uint64_t)(v21 + 1);
        if (v14 == v10) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v20 = 0;
        int v21 = (double *)(8 * v17);
        *(double *)(8 * v17) = v15;
        uint64_t v22 = 8 * v17 + 8;
        if (v14 == v10) {
          goto LABEL_23;
        }
      }
      unint64_t v23 = (char *)(v14 - 1) - (char *)v10;
      if (v23 >= 0x168)
      {
        if (&v20[(char *)v14 - (char *)v10 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v20[(char *)v14 - (char *)v10 - 8])
        {
          int v24 = v14;
        }
        else if ((double *)((char *)v14 - (v23 & 0xFFFFFFFFFFFFFFF8) - 8) > v14 - 1)
        {
          int v24 = v14;
        }
        else if ((unint64_t)((char *)v10 - v20) >= 0x20)
        {
          uint64_t v26 = (v23 >> 3) + 1;
          uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          int v24 = &v14[v27 / 0xFFFFFFFFFFFFFFF8];
          int v21 = (double *)((char *)v21 - v27);
          long long v28 = &v20[8 * v17 - 16];
          uint64_t v29 = v14 - 2;
          uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v31 = *(_OWORD *)v29;
            *(v28 - 1) = *((_OWORD *)v29 - 1);
            _OWORD *v28 = v31;
            v28 -= 2;
            v29 -= 4;
            v30 -= 4;
          }
          while (v30);
          if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_23;
          }
        }
        else
        {
          int v24 = v14;
        }
      }
      else
      {
        int v24 = v14;
      }
      do
      {
        uint64_t v25 = *((void *)v24-- - 1);
        *((void *)v21-- - 1) = v25;
      }
      while (v24 != v10);
LABEL_23:
      long long v11 = (double *)&v20[8 * v19];
      *a1 = v21;
      a1[1] = (double *)v22;
      a1[2] = v11;
      if (v10) {
        operator delete(v10);
      }
      int64x2_t v10 = v21;
      a2 = v33;
      a4 = v34;
      a1[1] = (double *)v22;
      v12 += 80;
      unsigned __int8 v14 = (double *)v22;
    }
    while (v12 != v13);
  }
LABEL_37:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1002A7F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  double v15 = *(void **)v13;
  if (!*(void *)v13) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v13 + 8) = v15;
  operator delete(v15);
  _Unwind_Resume(exception_object);
}

void sub_1002A7F90()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A8008()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002A8080(unsigned __int8 *a1, unsigned __int8 *a2, int **a3)
{
  int v5 = 0;
  uint64_t v292 = 0;
  memset(v291, 0, sizeof(v291));
  uint64_t result = 1;
  if (!a1 || !a2) {
    goto LABEL_5;
  }
  uint64_t v8 = 0;
  v288 = a1;
  unint64_t v289 = (unint64_t)&a2[(void)a1];
  uint64_t v290 = 0;
  uint64_t result = setjmp((int *)v291 + 1);
  if (result) {
    goto LABEL_4;
  }
  unsigned int v9 = v291[0];
  if (LODWORD(v291[0]))
  {
    uint64_t v10 = 2 * v290;
    v290 *= 2;
    int v11 = --LODWORD(v291[0]);
    if (v9 <= 4)
    {
      uint64_t v12 = v288;
      if ((unint64_t)v288 >= v289) {
        goto LABEL_326;
      }
      ++v288;
      v10 += (unint64_t)*v12 << 56 >> (v9 - 1);
      int v11 = v9 + 7;
    }
    unint64_t v15 = v10;
    int v16 = v11;
  }
  else
  {
    uint64_t v13 = v288;
    if ((unint64_t)v288 >= v289) {
      goto LABEL_326;
    }
    ++v288;
    uint64_t v14 = v290 + ((unint64_t)*v13 << 56);
    if (v14 < 0)
    {
      int v5 = 0;
      uint64_t result = 5;
      goto LABEL_5;
    }
    unint64_t v15 = 2 * v14;
    int v16 = 7;
  }
  unint64_t v17 = v15;
  unint64_t v18 = v15 >> 60;
  int v19 = v18;
  uint64_t v20 = 16 * v17;
  uint64_t v290 = 16 * v17;
  LODWORD(v291[0]) = v16 - 4;
  if (v16 - 4 >= v18)
  {
    unint64_t v24 = 16 * v17;
    int v25 = v16 - 4;
  }
  else
  {
    int v21 = v288;
    if ((unint64_t)v288 >= v289) {
      goto LABEL_326;
    }
    uint64_t v22 = ++v288;
    unint64_t v23 = ((unint64_t)*v21 << 56 >> (v16 - 4)) + v20;
    unint64_t v24 = v23;
    uint64_t v290 = v23;
    int v25 = v16 + 4;
    LODWORD(v291[0]) = v16 + 4;
    if ((unint64_t)(v16 - 4) + 8 < v18)
    {
      if ((unint64_t)v22 >= v289) {
        goto LABEL_326;
      }
      v288 = v21 + 2;
      unint64_t v24 = ((unint64_t)v21[1] << 56 >> (v16 + 4)) + v23;
      int v25 = v16 + 12;
    }
  }
  uint64_t v290 = v24 << v18;
  uint64_t v26 = (v25 - v18);
  LODWORD(v291[0]) = v26;
  if (v26 >= v18)
  {
    unint64_t v30 = v24 << v18;
LABEL_27:
    int v31 = v26;
    goto LABEL_28;
  }
  uint64_t v27 = v288;
  if ((unint64_t)v288 >= v289) {
    goto LABEL_326;
  }
  long long v28 = ++v288;
  unint64_t v29 = ((unint64_t)*v27 << 56 >> (v25 - v18)) + (v24 << v18);
  unint64_t v30 = v29;
  uint64_t v290 = v29;
  int v31 = v26 + 8;
  LODWORD(v291[0]) = v26 + 8;
  if (v26 + 8 < v18)
  {
    if ((unint64_t)v28 >= v289) {
      goto LABEL_326;
    }
    v288 = v27 + 2;
    uint64_t v290 = ((unint64_t)v27[1] << 56 >> (v26 + 8)) + v29;
    LODWORD(v26) = v26 + 16;
    LODWORD(v291[0]) = v26;
    unint64_t v30 = v290;
    goto LABEL_27;
  }
LABEL_28:
  uint64_t v290 = v30 << v18;
  int v32 = v31 - v18;
  LODWORD(v291[0]) = v31 - v18;
  if ((v31 - v18) > 1)
  {
    unint64_t v34 = v30 << v18;
    int v35 = v31 - v18;
  }
  else
  {
    unint64_t v33 = v288;
    if ((unint64_t)v288 >= v289) {
      goto LABEL_326;
    }
    ++v288;
    unint64_t v34 = ((unint64_t)*v33 << 56 >> v32) + (v30 << v18);
    int v35 = v32 + 8;
  }
  uint64_t v290 = 4 * v34;
  LODWORD(v291[0]) = v35 - 2;
  int v36 = v35 - 2;
  if ((v35 - 2) <= 7)
  {
    long long v37 = v288;
    if ((unint64_t)v288 < v289)
    {
      ++v288;
      unint64_t v38 = ((unint64_t)*v37 << 56 >> (v35 - 2)) + 4 * v34;
      int v36 = v35 + 6;
      goto LABEL_36;
    }
LABEL_326:
    longjmp((int *)v291 + 1, 3);
  }
  unint64_t v38 = 4 * v34;
LABEL_36:
  unint64_t v39 = v24 >> -(char)v18;
  uint64_t v290 = v38 << 8;
  LODWORD(v291[0]) = v36 - 8;
  uint64_t result = 9;
  if (v39 < 2)
  {
    int v5 = 0;
    goto LABEL_5;
  }
  unint64_t v40 = v30 >> (64 - v18);
  int v5 = 0;
  if (v40 >= 2)
  {
    int v41 = v39;
    int v42 = v40;
    uint64_t v43 = (v40 * v39);
    if (v43 > 0x100000)
    {
      int v5 = 0;
      uint64_t result = 9;
      goto LABEL_5;
    }
    int v284 = v40;
    unsigned int v285 = v39;
    unint64_t v44 = malloc_type_calloc(4 * (v40 * v39) + 20, 1uLL, 0x3BD89D28uLL);
    if (!v44)
    {
      int v5 = 0;
      uint64_t result = 7;
      goto LABEL_5;
    }
    uint64_t v45 = v44;
    unint64_t v46 = v34 >> 62;
    uint64_t v8 = v44;
    *unint64_t v44 = v41;
    v44[1] = v42;
    v44[3] = v46;
    v44[4] = HIBYTE(v38);
    v44[2] = v19;
    if (!v43) {
      goto LABEL_51;
    }
    if (v43 == 1)
    {
      uint64_t v47 = 0;
    }
    else
    {
      uint64_t v47 = v43 & 0xFFFFFFFE;
      unsigned __int8 v48 = (char *)v44 + 27;
      uint64_t v49 = v47;
      do
      {
        *(v48 - 4) = 1;
        *unsigned __int8 v48 = 1;
        v48 += 8;
        v49 -= 2;
      }
      while (v49);
      if ((v43 & 0xFFFFFFFE) == v43)
      {
LABEL_51:
        unsigned int v52 = v291[0];
        unint64_t v53 = v289;
        uint64_t v54 = v290;
        long long v55 = v288;
LABEL_53:
        if (v52)
        {
          long long v56 = v55;
          uint64_t v57 = 2 * v54;
          uint64_t v290 = 2 * v54;
          unsigned int v58 = v52 - 1;
          LODWORD(v291[0]) = v52 - 1;
          if ((v54 & 0x8000000000000000) == 0)
          {
LABEL_105:
            sub_1002A9898(v8);
            long long v99 = v45 + 5;
            uint64_t v100 = v288;
            uint64_t v101 = v290;
            uint64_t v102 = LODWORD(v291[0]);
            uint64_t v103 = 0;
            while (1)
            {
              uint64_t v104 = &v99[v285 * v103];
              v105 = &v99[v285 * (v103 - 1)];
              unint64_t v106 = v289;
              uint64_t v107 = 0;
              uint64_t v108 = v102;
              uint64_t v109 = v102;
              uint64_t v110 = v101;
              uint64_t v111 = v101;
              unint64_t v112 = v100;
              uint64_t v113 = v100;
              do
              {
                v126 = v112;
                uint64_t v121 = v110;
                uint64_t v119 = v108;
                __int16 v125 = v113;
                v128 = &v104[v107];
                if (*((unsigned char *)v128 + 3))
                {
                  if (v107)
                  {
                    int v129 = LOWORD(v104[v107 - 1]);
                    if (!v103) {
                      goto LABEL_148;
                    }
                  }
                  else
                  {
                    int v129 = 0;
                    if (!v103) {
                      goto LABEL_148;
                    }
                  }
                  int v130 = LOWORD(v105[v107]);
                  if (v129) {
                    int v131 = v129;
                  }
                  else {
                    int v131 = LOWORD(v105[v107]);
                  }
                  if (v129 && LOWORD(v105[v107]))
                  {
                    unsigned int v132 = v131 - v130;
                    if (v131 - v130 < 0) {
                      unsigned int v132 = v130 - v131;
                    }
                    unsigned int v133 = v130 + v131;
                    if (v133 < 2) {
                      goto LABEL_140;
                    }
LABEL_149:
                    if (v132 >= 2)
                    {
                      if (v132 >= 9)
                      {
                        long long v188 = v113;
                        long long v189 = v126;
                        long long v190 = v126;
                        unint64_t v191 = v110;
                        unsigned int v192 = v119;
                        int v193 = 0;
                        do
                        {
                          if (v192)
                          {
                            v194 = v188;
                            v195 = v189;
                            unint64_t v196 = v191;
                            unsigned int v197 = v192;
                          }
                          else
                          {
                            if ((unint64_t)v190 >= v289) {
                              goto LABEL_325;
                            }
                            v288 = v190 + 1;
                            unint64_t v198 = v191 + ((unint64_t)*v190 << 56);
                            v195 = ++v190;
                            v194 = v288;
                            unint64_t v196 = v198;
                            unsigned int v197 = 8;
                          }
                          unint64_t v199 = v196;
                          uint64_t v200 = 2 * v196;
                          unint64_t v201 = 2 * v196;
                          uint64_t v290 = 2 * v196;
                          unsigned int v202 = v197 - 1;
                          LODWORD(v291[0]) = v197 - 1;
                          if ((v199 & 0x8000000000000000) != 0) {
                            break;
                          }
                          ++v193;
                          long long v188 = v194;
                          long long v189 = v195;
                          unint64_t v191 = v201;
                          unsigned int v192 = v197 - 1;
                        }
                        while (v193 != 256);
                        if (v197 <= 2)
                        {
                          if ((unint64_t)v195 >= v106) {
                            goto LABEL_325;
                          }
                          v288 = v195 + 1;
                          unint64_t v201 = ((unint64_t)*v195 << 56 >> v202) + v200;
                          unsigned int v202 = v197 + 7;
                          ++v195;
                          v194 = v288;
                        }
                        uint64_t v203 = v195;
                        uint64_t v290 = 4 * v201;
                        uint64_t v204 = v202 - 2;
                        LODWORD(v291[0]) = v204;
                        int v180 = (4 * v193) | (v201 >> 62);
                        uint64_t v158 = v204;
                        uint64_t v157 = 4 * v201;
                        v122 = v194;
                        v181 = v203;
                        int v205 = v132 & 1;
                        BOOL v183 = v205 == 0;
                        if (!(v180 | v205)) {
                          goto LABEL_177;
                        }
                      }
                      else
                      {
                        uint64_t v163 = v113;
                        long long v164 = v126;
                        uint64_t v165 = v126;
                        uint64_t v166 = v121;
                        int v167 = v119;
                        int v168 = 0;
                        do
                        {
                          uint64_t v169 = v166;
                          if (v167)
                          {
                            int v170 = v167;
                            long long v171 = v163;
                            long long v172 = v164;
                          }
                          else
                          {
                            if ((unint64_t)v165 >= v289) {
                              goto LABEL_325;
                            }
                            v288 = v165 + 1;
                            uint64_t v169 = v166 + ((unint64_t)*v165 << 56);
                            int v170 = 8;
                            long long v172 = ++v165;
                            long long v171 = v288;
                          }
                          uint64_t v173 = v169;
                          v174 = v172;
                          uint64_t v175 = 2 * v173;
                          unint64_t v176 = 2 * v173;
                          uint64_t v290 = 2 * v173;
                          int v177 = v170 - 1;
                          LODWORD(v291[0]) = v177;
                          if (v173 < 0) {
                            break;
                          }
                          ++v168;
                          uint64_t v163 = v171;
                          long long v164 = v174;
                          uint64_t v166 = 2 * v173;
                          int v167 = v177;
                        }
                        while (v168 != 256);
                        if (!v177)
                        {
                          if ((unint64_t)v174 >= v106) {
                            goto LABEL_325;
                          }
                          v288 = v174 + 1;
                          unint64_t v176 = v175 + ((unint64_t)*v174 << 56);
                          int v177 = 8;
                          ++v174;
                          long long v171 = v288;
                        }
                        v122 = v171;
                        uint64_t v290 = 2 * v176;
                        LODWORD(v291[0]) = v177 - 1;
                        int v178 = (2 * v168) | (v176 >> 63);
                        uint64_t v158 = (v177 - 1);
                        uint64_t v157 = v290;
                        v179 = v174;
                        int v180 = v178;
                        v181 = v179;
                        int v182 = v132 & 1;
                        BOOL v183 = v182 == 0;
                        if (!(v180 | v182)) {
                          goto LABEL_177;
                        }
                      }
                    }
                    else
                    {
                      v147 = v126;
                      uint64_t v148 = v126;
                      uint64_t v149 = v121;
                      int v150 = v119;
                      int v151 = 0;
                      while (1)
                      {
                        uint64_t v152 = v149;
                        if (v150)
                        {
                          uint64_t v153 = v113;
                          unint64_t v154 = v147;
                        }
                        else
                        {
                          if ((unint64_t)v148 >= v289) {
                            goto LABEL_325;
                          }
                          v288 = v148 + 1;
                          uint64_t v152 = v149 + ((unint64_t)*v148 << 56);
                          int v150 = 8;
                          unint64_t v154 = ++v148;
                          uint64_t v153 = v288;
                        }
                        uint64_t v155 = v152;
                        v156 = v154;
                        v122 = v153;
                        uint64_t v157 = 2 * v155;
                        uint64_t v290 = 2 * v155;
                        uint64_t v158 = (v150 - 1);
                        LODWORD(v291[0]) = v150 - 1;
                        if (v155 < 0) {
                          break;
                        }
                        ++v151;
                        uint64_t v113 = v122;
                        v147 = v156;
                        uint64_t v149 = 2 * v155;
                        --v150;
                        if (v151 == 256)
                        {
                          BOOL v159 = (v132 & 1) == 0;
                          int v160 = 256;
                          v161 = v156;
                          uint64_t v162 = 2 * v155;
                          if (v158) {
                            goto LABEL_192;
                          }
LABEL_190:
                          if ((unint64_t)v161 < v106)
                          {
                            v288 = v161 + 1;
                            v162 += (unint64_t)*v161 << 56;
                            LODWORD(v158) = 8;
                            ++v161;
                            v122 = v288;
                            goto LABEL_192;
                          }
LABEL_325:
                          longjmp((int *)v291 + 1, 3);
                        }
                      }
                      long long v184 = v156;
                      int v180 = v151;
                      v181 = v184;
                      int v185 = v132 & 1;
                      BOOL v183 = v185 == 0;
                      if (!(v180 | v185))
                      {
LABEL_177:
                        int v186 = 0;
                        uint64_t v187 = v158;
                        v161 = v181;
                        goto LABEL_196;
                      }
                    }
                    v161 = v181;
                    BOOL v159 = v183;
                    int v160 = v180;
                    uint64_t v162 = v157;
                    if (!v158) {
                      goto LABEL_190;
                    }
LABEL_192:
                    uint64_t v206 = 2 * v162;
                    uint64_t v290 = 2 * v162;
                    LODWORD(v291[0]) = v158 - 1;
                    int v207 = v160 + !v159;
                    if (v162 < 0) {
                      int v208 = -v160;
                    }
                    else {
                      int v208 = v207;
                    }
                    uint64_t v187 = (v158 - 1);
                    uint64_t v157 = v206;
                    int v186 = v208;
LABEL_196:
                    int v120 = v186 + (v133 >> 1);
                    if (v120 < 0)
                    {
                      uint64_t v214 = 4;
                      goto LABEL_213;
                    }
                    uint64_t v119 = v187;
                    uint64_t v121 = v157;
                    unint64_t v123 = v161;
LABEL_110:
                    __int16 v124 = v120;
LABEL_111:
                    uint64_t v111 = v121;
                    uint64_t v109 = v119;
                    *(_WORD *)v128 = v124;
                    __int16 v125 = v122;
                    v126 = v123;
                    goto LABEL_112;
                  }
                  if (v107 + 1 >= (unint64_t)v285)
                  {
                    int v134 = 0;
                    if (!v107) {
                      goto LABEL_132;
                    }
                  }
                  else
                  {
                    if (v131)
                    {
                      int v134 = LOWORD(v105[(v107 + 1)]);
                    }
                    else
                    {
                      int v131 = LOWORD(v105[(v107 + 1)]);
                      int v134 = 0;
                    }
                    if (!v107)
                    {
LABEL_132:
                      int v135 = v134;
LABEL_136:
                      int v129 = v131;
                      if (!v135) {
                        goto LABEL_148;
                      }
                      unsigned int v132 = v131 - v135;
                      if (v131 - v135 < 0) {
                        unsigned int v132 = v135 - v131;
                      }
                      unsigned int v133 = v135 + v131;
                      if (v133 >= 2) {
                        goto LABEL_149;
                      }
                      goto LABEL_140;
                    }
                  }
                  int v135 = v134;
                  if (v134) {
                    goto LABEL_136;
                  }
                  int v129 = LOWORD(v105[(v107 - 1)]);
                  int v135 = v129;
                  if (v131) {
                    goto LABEL_136;
                  }
LABEL_148:
                  unsigned int v132 = 0;
                  unsigned int v133 = 2 * v129;
                  if ((2 * v129) >= 2) {
                    goto LABEL_149;
                  }
LABEL_140:
                  uint64_t v136 = v126;
                  int v137 = v126;
                  uint64_t v138 = v121;
                  unsigned int v139 = v119;
                  int v140 = 0;
                  while (1)
                  {
                    uint64_t v141 = v138;
                    if (v139)
                    {
                      unsigned int v142 = v139;
                      unint64_t v117 = v113;
                      int v143 = v136;
                    }
                    else
                    {
                      if ((unint64_t)v137 >= v289) {
                        goto LABEL_325;
                      }
                      v288 = v137 + 1;
                      uint64_t v141 = v138 + ((unint64_t)*v137 << 56);
                      unsigned int v142 = 8;
                      int v143 = ++v137;
                      unint64_t v117 = v288;
                    }
                    uint64_t v144 = v141;
                    unint64_t v116 = v143;
                    uint64_t v145 = 2 * v141;
                    unint64_t v114 = v145;
                    uint64_t v290 = v145;
                    unsigned int v115 = v142 - 1;
                    LODWORD(v291[0]) = v142 - 1;
                    if (v144 < 0) {
                      break;
                    }
                    ++v140;
                    uint64_t v113 = v117;
                    uint64_t v136 = v116;
                    uint64_t v138 = v145;
                    unsigned int v139 = v142 - 1;
                    if (v140 == 256)
                    {
                      __int16 v146 = 256;
                      goto LABEL_160;
                    }
                  }
                  __int16 v146 = v140;
                  if (v140)
                  {
LABEL_160:
                    if (v142 <= 2)
                    {
                      if ((unint64_t)v116 >= v106) {
                        goto LABEL_325;
                      }
                      v288 = v116 + 1;
                      unint64_t v114 = ((unint64_t)*v116 << 56 >> (v142 - 1)) + v145;
                      unsigned int v115 = v142 + 7;
                      ++v116;
                      unint64_t v117 = v288;
                    }
                    uint64_t v118 = v116;
                    uint64_t v290 = 4 * v114;
                    uint64_t v119 = v115 - 2;
                    LODWORD(v291[0]) = v115 - 2;
                    LOWORD(v120) = (4 * v146) | (v114 >> 62);
                    uint64_t v121 = 4 * v114;
                    v122 = v117;
                    unint64_t v123 = v118;
                    goto LABEL_110;
                  }
                  if (v142 == 1)
                  {
                    if ((unint64_t)v116 >= v106) {
                      goto LABEL_325;
                    }
                    v288 = v116 + 1;
                    unint64_t v210 = v145 + ((unint64_t)*v116 << 56);
                    unint64_t v123 = v116 + 1;
                    v122 = v116 + 1;
                    uint64_t v209 = 2 * v210;
                    uint64_t v121 = 2 * v210;
                    uint64_t v290 = 2 * v210;
                    uint64_t v119 = 7;
                    LODWORD(v291[0]) = 7;
                    if ((v210 & 0x8000000000000000) == 0) {
                      goto LABEL_200;
                    }
                  }
                  else
                  {
                    v122 = v117;
                    unint64_t v123 = v116;
                    uint64_t v209 = 2 * v145;
                    uint64_t v121 = 2 * v114;
                    uint64_t v290 = 2 * v114;
                    uint64_t v119 = v115 - 1;
                    LODWORD(v291[0]) = v115 - 1;
                    if ((v114 & 0x8000000000000000) == 0)
                    {
LABEL_200:
                      __int16 v124 = 1;
                      goto LABEL_111;
                    }
                  }
                  if (!v119)
                  {
                    if ((unint64_t)v123 >= v106) {
                      goto LABEL_325;
                    }
                    v288 = v123 + 1;
                    uint64_t v121 = v209 + ((unint64_t)*v123 << 56);
                    LODWORD(v119) = 8;
                    ++v123;
                    v122 = v288;
                  }
                  uint64_t v211 = v121;
                  uint64_t v212 = 2 * v121;
                  uint64_t v121 = v212;
                  uint64_t v290 = v212;
                  uint64_t v119 = (v119 - 1);
                  LODWORD(v291[0]) = v119;
                  if (v211 < 0)
                  {
                    if (!v119)
                    {
                      if ((unint64_t)v123 >= v106) {
                        goto LABEL_325;
                      }
                      v288 = v123 + 1;
                      uint64_t v121 = v212 + ((unint64_t)*v123 << 56);
                      LODWORD(v119) = 8;
                      ++v123;
                      v122 = v288;
                    }
                    uint64_t v290 = 2 * v121;
                    LODWORD(v291[0]) = v119 - 1;
                    unsigned int v213 = ~(v121 >> 63) & 3;
                    uint64_t v119 = (v119 - 1);
                    v121 *= 2;
                    __int16 v124 = v213;
                  }
                  else
                  {
                    __int16 v124 = 2;
                  }
                  goto LABEL_111;
                }
LABEL_112:
                v127 = v126;
                uint64_t v100 = v125;
                ++v107;
                uint64_t v113 = v125;
                uint64_t v108 = v119;
                uint64_t v110 = v121;
                unint64_t v112 = v127;
              }
              while (v107 != v285);
              uint64_t v101 = v111;
              uint64_t v102 = v109;
              if (++v103 == v284)
              {
                int v216 = sub_1002A9808(&v288, 2u);
                if (v216 != 1)
                {
                  if (v216)
                  {
                    uint64_t v214 = 5;
                    goto LABEL_213;
                  }
                  unint64_t v217 = v285 & 0xF;
                  if ((v285 & 0xF) == 0) {
                    unint64_t v217 = 16;
                  }
                  uint64_t v218 = 8;
                  if ((v285 & 7) != 0) {
                    uint64_t v218 = v285 & 7;
                  }
                  uint64_t v219 = v285 - v218;
                  v220 = (char *)v45 + 42;
                  uint64_t v221 = 4 * v285;
                  uint64_t v222 = v218 - v285;
                  v223 = v8;
                  uint64_t v224 = 0;
                  while (2)
                  {
                    if (v285 < 9uLL)
                    {
                      uint64_t v225 = 0;
LABEL_282:
                      uint64_t v239 = v285 - v225;
                      uint64_t v240 = v225;
                      do
                      {
                        if (HIBYTE(v223[v240 + 5])) {
                          BYTE2(v223[v240 + 5]) = 7;
                        }
                        ++v240;
                        --v239;
                      }
                      while (v239);
                      ++v224;
                      v220 += v221;
                      v223 = (int *)((char *)v223 + v221);
                      if (v224 == v284) {
                        goto LABEL_322;
                      }
                      continue;
                    }
                    break;
                  }
                  if (v285 < 0x11uLL)
                  {
                    unint64_t v226 = 0;
                    goto LABEL_262;
                  }
                  v227 = v220;
                  unint64_t v228 = v285 - v217;
                  while (1)
                  {
                    v229 = v227 - 19;
                    unsigned long long v230 = (unsigned __int128)vld4q_s8(v229);
                    int8x16_t v231 = vtstq_s8((int8x16_t)v230, (int8x16_t)v230);
                    if (v231.i8[0])
                    {
                      *(v227 - 20) = 7;
                      if ((v231.i8[1] & 1) == 0) {
                        goto LABEL_230;
                      }
                    }
                    else if ((v231.i8[1] & 1) == 0)
                    {
LABEL_230:
                      if (v231.i8[2]) {
                        goto LABEL_231;
                      }
                      goto LABEL_247;
                    }
                    *(v227 - 16) = 7;
                    if (v231.i8[2])
                    {
LABEL_231:
                      *(v227 - 12) = 7;
                      if ((v231.i8[3] & 1) == 0) {
                        goto LABEL_232;
                      }
                      goto LABEL_248;
                    }
LABEL_247:
                    if ((v231.i8[3] & 1) == 0)
                    {
LABEL_232:
                      if (v231.i8[4]) {
                        goto LABEL_233;
                      }
                      goto LABEL_249;
                    }
LABEL_248:
                    *(v227 - 8) = 7;
                    if (v231.i8[4])
                    {
LABEL_233:
                      *(v227 - 4) = 7;
                      if ((v231.i8[5] & 1) == 0) {
                        goto LABEL_234;
                      }
                      goto LABEL_250;
                    }
LABEL_249:
                    if ((v231.i8[5] & 1) == 0)
                    {
LABEL_234:
                      if (v231.i8[6]) {
                        goto LABEL_235;
                      }
                      goto LABEL_251;
                    }
LABEL_250:
                    unsigned char *v227 = 7;
                    if (v231.i8[6])
                    {
LABEL_235:
                      v227[4] = 7;
                      if ((v231.i8[7] & 1) == 0) {
                        goto LABEL_236;
                      }
                      goto LABEL_252;
                    }
LABEL_251:
                    if ((v231.i8[7] & 1) == 0)
                    {
LABEL_236:
                      if (v231.i8[8]) {
                        goto LABEL_237;
                      }
                      goto LABEL_253;
                    }
LABEL_252:
                    v227[8] = 7;
                    if (v231.i8[8])
                    {
LABEL_237:
                      v227[12] = 7;
                      if ((v231.i8[9] & 1) == 0) {
                        goto LABEL_238;
                      }
                      goto LABEL_254;
                    }
LABEL_253:
                    if ((v231.i8[9] & 1) == 0)
                    {
LABEL_238:
                      if (v231.i8[10]) {
                        goto LABEL_239;
                      }
                      goto LABEL_255;
                    }
LABEL_254:
                    v227[16] = 7;
                    if (v231.i8[10])
                    {
LABEL_239:
                      v227[20] = 7;
                      if ((v231.i8[11] & 1) == 0) {
                        goto LABEL_240;
                      }
                      goto LABEL_256;
                    }
LABEL_255:
                    if ((v231.i8[11] & 1) == 0)
                    {
LABEL_240:
                      if (v231.i8[12]) {
                        goto LABEL_241;
                      }
                      goto LABEL_257;
                    }
LABEL_256:
                    v227[24] = 7;
                    if (v231.i8[12])
                    {
LABEL_241:
                      v227[28] = 7;
                      if ((v231.i8[13] & 1) == 0) {
                        goto LABEL_242;
                      }
                      goto LABEL_258;
                    }
LABEL_257:
                    if ((v231.i8[13] & 1) == 0)
                    {
LABEL_242:
                      if (v231.i8[14]) {
                        goto LABEL_243;
                      }
                      goto LABEL_259;
                    }
LABEL_258:
                    v227[32] = 7;
                    if (v231.i8[14])
                    {
LABEL_243:
                      v227[36] = 7;
                      if (v231.i8[15]) {
                        goto LABEL_260;
                      }
                      goto LABEL_227;
                    }
LABEL_259:
                    if (v231.i8[15]) {
LABEL_260:
                    }
                      v227[40] = 7;
LABEL_227:
                    v227 += 64;
                    v228 -= 16;
                    if (!v228)
                    {
                      unint64_t v226 = v285 - v217;
                      uint64_t v225 = v226;
                      if (v217 < 9) {
                        goto LABEL_282;
                      }
LABEL_262:
                      unint64_t v232 = v226;
                      uint64_t v233 = v226;
                      unint64_t v234 = v222 + v232;
                      v235 = v223;
                      while (2)
                      {
                        v236 = (char *)&v235[v233 + 5] + 3;
                        unint64_t v237 = (unint64_t)vld4_s8(v236);
                        int8x8_t v238 = vtst_s8((int8x8_t)v237, (int8x8_t)v237);
                        if (v238.i8[0])
                        {
                          BYTE2(v235[v233 + 5]) = 7;
                          if ((v238.i8[1] & 1) == 0) {
                            goto LABEL_266;
                          }
LABEL_274:
                          BYTE2(v235[v233 + 6]) = 7;
                          if ((v238.i8[2] & 1) == 0) {
                            goto LABEL_275;
                          }
LABEL_267:
                          BYTE2(v235[v233 + 7]) = 7;
                          if ((v238.i8[3] & 1) == 0) {
                            goto LABEL_268;
                          }
LABEL_276:
                          BYTE2(v235[v233 + 8]) = 7;
                          if ((v238.i8[4] & 1) == 0) {
                            goto LABEL_277;
                          }
LABEL_269:
                          BYTE2(v235[v233 + 9]) = 7;
                          if ((v238.i8[5] & 1) == 0) {
                            goto LABEL_270;
                          }
LABEL_278:
                          BYTE2(v235[v233 + 10]) = 7;
                          if ((v238.i8[6] & 1) == 0) {
                            goto LABEL_279;
                          }
LABEL_271:
                          BYTE2(v235[v233 + 11]) = 7;
                          if (v238.i8[7]) {
                            goto LABEL_280;
                          }
                        }
                        else
                        {
                          if (v238.i8[1]) {
                            goto LABEL_274;
                          }
LABEL_266:
                          if (v238.i8[2]) {
                            goto LABEL_267;
                          }
LABEL_275:
                          if (v238.i8[3]) {
                            goto LABEL_276;
                          }
LABEL_268:
                          if (v238.i8[4]) {
                            goto LABEL_269;
                          }
LABEL_277:
                          if (v238.i8[5]) {
                            goto LABEL_278;
                          }
LABEL_270:
                          if (v238.i8[6]) {
                            goto LABEL_271;
                          }
LABEL_279:
                          if (v238.i8[7]) {
LABEL_280:
                          }
                            BYTE2(v235[v233 + 12]) = 7;
                        }
                        v235 += 8;
                        v234 += 8;
                        if (!v234)
                        {
                          uint64_t v225 = v219;
                          goto LABEL_282;
                        }
                        continue;
                      }
                    }
                  }
                }
                v241 = v288;
                uint64_t v242 = v290;
                uint64_t v243 = LODWORD(v291[0]);
                v244 = (unsigned __int8 *)v45 + 23;
                int v286 = 7;
                int v287 = 2;
                uint64_t v245 = 0;
                v246 = 0;
                while (2)
                {
                  v247 = v246;
                  unint64_t v248 = v289;
                  uint64_t v249 = v285;
                  v250 = v244;
                  uint64_t v251 = v243;
                  uint64_t v252 = v243;
                  uint64_t v253 = v242;
                  uint64_t v254 = v242;
                  v255 = v241;
                  v256 = v241;
LABEL_294:
                  v262 = v255;
                  uint64_t v261 = v251;
                  unint64_t v257 = v247;
                  __int16 v264 = v250;
                  int v266 = *v250;
                  v250 += 4;
                  int v265 = v266;
                  if (v266)
                  {
                    if (v265 == 2) {
                      v267 = &v287;
                    }
                    else {
                      v267 = &v286;
                    }
                    if ((int)v247 > 0) {
                      goto LABEL_292;
                    }
                    if (v261)
                    {
                      uint64_t v268 = 2 * v253;
                      unint64_t v269 = 2 * v253;
                      uint64_t v290 = 2 * v253;
                      int v270 = v261 - 1;
                      LODWORD(v291[0]) = v261 - 1;
                      if ((v253 & 0x8000000000000000) == 0)
                      {
                        if (v261 <= 3)
                        {
                          if ((unint64_t)v255 >= v248) {
                            goto LABEL_325;
                          }
                          v288 = v255 + 1;
                          unint64_t v269 = ((unint64_t)*v255 << 56 >> v270) + v268;
                          int v270 = v261 + 7;
                          v262 = v255 + 1;
                          v256 = v255 + 1;
                        }
                        goto LABEL_306;
                      }
                      if (v261 == 1)
                      {
                        if ((unint64_t)v255 >= v248) {
                          goto LABEL_325;
                        }
                        v288 = v255 + 1;
                        unint64_t v276 = v268 + ((unint64_t)*v255 << 56);
                        int v273 = 8;
                        v274 = v288;
                        v275 = v288;
                      }
                      else
                      {
                        v275 = v256;
                        v274 = v255;
                        unint64_t v276 = v269;
                        int v273 = v270;
                      }
LABEL_311:
                      unint64_t v277 = v276;
                      uint64_t v278 = 2 * v276;
                      unint64_t v279 = v278;
                      uint64_t v290 = v278;
                      unsigned int v280 = v273 - 1;
                      int v281 = v273 - 1;
                      LODWORD(v291[0]) = v273 - 1;
                      if ((v277 & 0x8000000000000000) != 0)
                      {
                        if (v280 <= 5)
                        {
                          if ((unint64_t)v274 >= v248) {
                            goto LABEL_325;
                          }
                          v288 = v274 + 1;
                          unint64_t v283 = ((unint64_t)*v274++ << 56 >> v281) + v278;
                          v275 = v288;
                          unint64_t v279 = v283;
                          int v281 = v273 + 7;
                        }
                        unint64_t v257 = v274;
                        v258 = v275;
                        uint64_t v253 = v279 << 6;
                        uint64_t v290 = v279 << 6;
                        uint64_t v254 = v279 << 6;
                        uint64_t v259 = (v281 - 6);
                        LODWORD(v291[0]) = v259;
                        int v260 = (v279 >> 58) + 5;
                      }
                      else
                      {
                        if (v280 <= 1)
                        {
                          if ((unint64_t)v274 >= v248) {
                            goto LABEL_325;
                          }
                          v288 = v274 + 1;
                          unint64_t v282 = ((unint64_t)*v274++ << 56 >> v281) + v278;
                          v275 = v288;
                          unint64_t v279 = v282;
                          int v281 = v273 + 7;
                        }
                        unint64_t v257 = v274;
                        v258 = v275;
                        uint64_t v253 = 4 * v279;
                        uint64_t v290 = 4 * v279;
                        uint64_t v254 = 4 * v279;
                        uint64_t v259 = (v281 - 2);
                        LODWORD(v291[0]) = v259;
                        int v260 = (v279 >> 62) + 1;
                      }
                      uint64_t v261 = v259;
                      uint64_t v252 = v259;
                      v256 = v258;
                      v262 = v257;
                      LODWORD(v257) = v260;
LABEL_292:
                      unint64_t v257 = (unsigned __int8 *)(v257 - 1);
                      *(v264 - 1) = *v267;
                    }
                    else
                    {
                      if ((unint64_t)v255 >= v248) {
                        goto LABEL_325;
                      }
                      v288 = v255 + 1;
                      BOOL v271 = (uint64_t)(v253 + ((unint64_t)*v255 << 56)) < 0;
                      unint64_t v272 = 2 * (v253 + ((unint64_t)*v255 << 56));
                      int v273 = 7;
                      v274 = v288;
                      v256 = v288;
                      v262 = v288;
                      v275 = v288;
                      unint64_t v269 = v272;
                      unint64_t v276 = v272;
                      int v270 = 7;
                      if (v271) {
                        goto LABEL_311;
                      }
LABEL_306:
                      uint64_t v290 = 8 * v269;
                      LODWORD(v291[0]) = v270 - 3;
                      *(v264 - 1) = v269 >> 61;
                      int *v267 = v269 >> 61;
                      uint64_t v261 = (v270 - 3);
                      uint64_t v252 = v261;
                      uint64_t v253 = 8 * v269;
                      uint64_t v254 = 8 * v269;
                    }
                  }
                  v263 = v257;
                  uint64_t v251 = v261;
                  v255 = v262;
                  v247 = v257;
                  if (!--v249)
                  {
                    v241 = v256;
                    uint64_t v242 = v254;
                    uint64_t v243 = v252;
                    ++v245;
                    v244 += 4 * v285;
                    v246 = v263;
                    if (v245 == v284)
                    {
                      if (v263)
                      {
                        uint64_t v214 = 8;
                        goto LABEL_213;
                      }
LABEL_322:
                      if ((unsigned __int8 *)(v288 - a1) == a2)
                      {
                        uint64_t result = 0;
LABEL_4:
                        int v5 = v8;
                      }
                      else
                      {
                        uint64_t v214 = 2;
LABEL_213:
                        uint64_t v215 = v214;
                        free(v8);
                        int v5 = 0;
                        uint64_t result = v215;
                      }
                      goto LABEL_5;
                    }
                    continue;
                  }
                  goto LABEL_294;
                }
              }
            }
          }
        }
        else
        {
          if ((unint64_t)v55 >= v53) {
            goto LABEL_325;
          }
          v288 = v55 + 1;
          unint64_t v59 = v54 + ((unint64_t)*v55 << 56);
          long long v56 = v55 + 1;
          uint64_t v57 = 2 * v59;
          uint64_t v290 = 2 * v59;
          unsigned int v58 = 7;
          LODWORD(v291[0]) = 7;
          if ((v59 & 0x8000000000000000) == 0) {
            goto LABEL_105;
          }
        }
        unsigned int v60 = v58;
        unsigned int v61 = v8[2];
        if (v58 < v61)
        {
          uint64_t v62 = v57;
          uint64_t v63 = v56;
          unsigned int v64 = v60;
          do
          {
            if ((unint64_t)v63 >= v53) {
              goto LABEL_325;
            }
            v288 = v63 + 1;
            v62 += (unint64_t)*v63 << 56 >> v64;
            uint64_t v290 = v62;
            LODWORD(v291[0]) = v64 + 8;
            uint64_t v57 = v62;
            long long v56 = ++v63;
            unsigned int v60 = v64 + 8;
            v64 += 8;
          }
          while (v64 < v61);
        }
        unsigned int v65 = v60;
        unint64_t v66 = v57;
        char v67 = v61;
        unint64_t v68 = v57 << v61;
        uint64_t v290 = v68;
        unsigned int v69 = v65 - v61;
        LODWORD(v291[0]) = v69;
        unsigned int v70 = v69;
        unsigned int v71 = v8[2];
        if (v69 < v71)
        {
          uint64_t v72 = v68;
          long long v73 = v56;
          do
          {
            if ((unint64_t)v73 >= v53) {
              goto LABEL_325;
            }
            v288 = v73 + 1;
            v72 += (unint64_t)*v73 << 56 >> v69;
            uint64_t v290 = v72;
            LODWORD(v291[0]) = v69 + 8;
            v69 += 8;
            unint64_t v68 = v72;
            long long v56 = ++v73;
            unsigned int v70 = v69;
          }
          while (v69 < v71);
        }
        unsigned int v74 = v71;
        unint64_t v75 = v68 >> -(char)v71;
        uint64_t v76 = v68 << v71;
        uint64_t v290 = v76;
        unsigned int v77 = v70 - v74;
        LODWORD(v291[0]) = v77;
        if ((v75 & 0x80000000) != 0) {
LABEL_286:
        }
          longjmp((int *)v291 + 1, 6);
        long long v78 = v56;
        unint64_t v79 = v66 >> -v67;
        unsigned int v80 = v77;
        char v81 = 0;
        unint64_t v82 = v289;
        uint64_t v83 = v76;
        int v84 = v79;
        while (1)
        {
          unint64_t v85 = v75;
          if ((int)v75 >= v8[1] || v84 < 0 || v84 >= *v8) {
            goto LABEL_286;
          }
          char v86 = v81;
          HIBYTE(v45[v84 + 5 + *v8 * (int)v85]) = 2;
          if (v80 > 1)
          {
            long long v87 = v56;
            unsigned int v88 = v80;
          }
          else
          {
            if ((unint64_t)v78 >= v82) {
              goto LABEL_325;
            }
            v288 = v78 + 1;
            v83 += (unint64_t)*v78++ << 56 >> v80;
            long long v87 = v288;
            unsigned int v88 = v80 + 8;
          }
          unint64_t v89 = v83;
          long long v90 = v78;
          unint64_t v91 = v89 >> 62;
          uint64_t v92 = 4 * v89;
          unint64_t v93 = v92;
          uint64_t v290 = v92;
          unsigned int v94 = v88 - 2;
          LODWORD(v291[0]) = v88 - 2;
          if (v91 == 3) {
            break;
          }
          if (v91 == 1)
          {
            --v86;
            goto LABEL_85;
          }
          if (v91) {
            goto LABEL_85;
          }
          if (v88 - 2 > 1)
          {
            long long v56 = v87;
            v96 = v90;
          }
          else
          {
            if ((unint64_t)v90 >= v82) {
              goto LABEL_325;
            }
            v288 = v90 + 1;
            unint64_t v95 = ((unint64_t)*v90 << 56 >> v94) + v92;
            v96 = v90 + 1;
            long long v56 = v90 + 1;
            unint64_t v93 = v95;
            unsigned int v94 = v88 + 6;
          }
          uint64_t v290 = 4 * v93;
          v94 -= 2;
          LODWORD(v291[0]) = v94;
          uint64_t v83 = 4 * v93;
          switch(v93 >> 62)
          {
            case 1uLL:
              v86 += 2;
              goto LABEL_86;
            case 2uLL:
              v86 -= 2;
              goto LABEL_86;
            case 3uLL:
              long long v55 = v56;
              uint64_t v54 = 4 * v93;
              unsigned int v52 = v94;
              goto LABEL_53;
            default:
              if (v94)
              {
                uint64_t v83 = 8 * v93;
                uint64_t v290 = 8 * v93;
                unsigned int v80 = v94 - 1;
                LODWORD(v291[0]) = v94 - 1;
                if (((4 * v93) & 0x8000000000000000) != 0) {
                  goto LABEL_104;
                }
              }
              else
              {
                if ((unint64_t)v96 >= v82) {
                  goto LABEL_325;
                }
                v288 = v96 + 1;
                unint64_t v97 = 4 * v93 + ((unint64_t)*v96++ << 56);
                long long v56 = v288;
                unint64_t v98 = v97;
                uint64_t v83 = 2 * v97;
                uint64_t v290 = v83;
                unsigned int v80 = 7;
                LODWORD(v291[0]) = 7;
                if ((v98 & 0x8000000000000000) != 0)
                {
LABEL_104:
                  v86 += 3;
                  goto LABEL_87;
                }
              }
              v86 += 4;
LABEL_87:
              long long v78 = v96;
              char v81 = v86 & 7;
              switch(v86 & 7)
              {
                case 1:
                  ++v84;
                  goto LABEL_95;
                case 2:
LABEL_95:
                  unint64_t v85 = (v85 + 1);
                  break;
                case 3:
                  --v84;
                  unint64_t v85 = (v85 + 1);
                  break;
                case 4:
                  --v84;
                  break;
                case 5:
                  --v84;
                  goto LABEL_98;
                case 6:
LABEL_98:
                  unint64_t v85 = (v85 - 1);
                  break;
                case 7:
                  ++v84;
                  unint64_t v85 = (v85 - 1);
                  break;
                default:
                  ++v84;
                  break;
              }
              unint64_t v75 = v85;
              if ((v85 & 0x80000000) != 0) {
                goto LABEL_286;
              }
              break;
          }
        }
        ++v86;
LABEL_85:
        long long v56 = v87;
        v96 = v90;
        uint64_t v83 = v93;
LABEL_86:
        unsigned int v80 = v94;
        goto LABEL_87;
      }
    }
    uint64_t v50 = v43 - v47;
    long long v51 = (char *)&v44[v47 + 5] + 3;
    do
    {
      *long long v51 = 1;
      v51 += 4;
      --v50;
    }
    while (v50);
    goto LABEL_51;
  }
LABEL_5:
  *a3 = v5;
  return result;
}

unint64_t sub_1002A9808(unsigned __int8 **a1, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 6);
  if (v2 >= a2)
  {
    unint64_t v5 = (unint64_t)a1[2];
  }
  else
  {
    BOOL v4 = *a1;
    unint64_t v3 = (unint64_t)a1[1];
    do
    {
      if ((unint64_t)v4 >= v3) {
        longjmp((int *)a1 + 7, 3);
      }
      *a1 = v4 + 1;
      unint64_t v5 = (unint64_t)&a1[2][(unint64_t)*v4 << 56 >> v2];
      a1[2] = (unsigned __int8 *)v5;
      v2 += 8;
      *((_DWORD *)a1 + 6) = v2;
      ++v4;
    }
    while (v2 < a2);
  }
  a1[2] = (unsigned __int8 *)(v5 << a2);
  *((_DWORD *)a1 + 6) = v2 - a2;
  return v5 >> -(char)a2;
}

int *sub_1002A9898(int *result)
{
  uint64_t v1 = *result;
  if ((int)v1 >= 1)
  {
    uint64_t v2 = result[1];
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      uint64_t v5 = *result;
      int v6 = (char *)result + 23;
      uint64_t v7 = 4 * v1;
      while (1)
      {
        if (v3)
        {
          if (v3 == v1 - 1)
          {
            uint64_t v8 = &v6[4 * v3];
            uint64_t v9 = v2;
            uint64_t v10 = v4;
            do
            {
              if (*v8 == 1)
              {
                char *v8 = 0;
                uint64_t v10 = 1;
              }
              v8 += v7;
              --v9;
            }
            while (v9);
          }
          else
          {
            uint64_t v13 = &result[v3];
            int v15 = *((unsigned __int8 *)v13 + 23);
            uint64_t v14 = (char *)v13 + 23;
            if (v15 == 1)
            {
              *uint64_t v14 = 0;
              uint64_t v4 = 1;
            }
            if (v2 == 1)
            {
              uint64_t v10 = v4;
            }
            else
            {
              int v16 = &v6[4 * v3];
              unint64_t v17 = (char *)&result[v1 + 6 + v3] + 3;
              uint64_t v18 = v2 - 1;
              uint64_t v19 = (v2 - 1) - 1;
              uint64_t v10 = v4;
              do
              {
                if (*(v17 - 4) == 1 && (!v19 || !*(v17 - 8) || !*v17 || !*v16 || !v16[8 * v1]))
                {
                  *(v17 - 4) = 0;
                  uint64_t v10 = 1;
                }
                --v19;
                v16 += v7;
                v17 += v7;
                --v18;
              }
              while (v18);
            }
          }
        }
        else
        {
          uint64_t v11 = v2;
          uint64_t v12 = (char *)result + 23;
          uint64_t v10 = v4;
          do
          {
            if (*v12 == 1)
            {
              *uint64_t v12 = 0;
              uint64_t v10 = 1;
            }
            v12 += v7;
            --v11;
          }
          while (v11);
        }
        ++v3;
        uint64_t v4 = v10;
        if (v3 == v5)
        {
          uint64_t v3 = 0;
          uint64_t v4 = 0;
          if (!v10) {
            break;
          }
        }
      }
    }
  }
  return result;
}

double sub_1002A9A00(_DWORD *a1, int a2, int a3)
{
  int v3 = 0;
  if ((a2 & 0x80000000) == 0 && (a3 & 0x80000000) == 0 && *a1 > a2)
  {
    if (a1[1] <= a3) {
      int v3 = 0;
    }
    else {
      int v3 = LOWORD(a1[a2 + 5 + *a1 * a3]);
    }
  }
  return dbl_1003F9948[a1[3]] * (double)(v3 - a1[4]);
}

__n64 sub_1002A9A5C(_DWORD *a1, int a2, int a3)
{
  result.n64_f64[0] = 0.0;
  if ((a2 & 0x80000000) == 0 && (a3 & 0x80000000) == 0 && *a1 > a2 && a1[1] > a3)
  {
    result.n64_u8[0] = BYTE2(a1[a2 + 5 + *a1 * a3]);
    result.n64_f64[0] = (double)result.n64_u64[0] * 0.142857143;
  }
  return result;
}

double sub_1002A9AA0(uint64_t a1)
{
  return dbl_1003F9948[*(int *)(a1 + 12)] * (double)-*(_DWORD *)(a1 + 16);
}

void sub_1002A9AC4(void *a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002A9BA8(_Unwind_Exception *a1)
{
  sub_1002A9C04(v2);
  sub_1001F4BB0(v1);
  _Unwind_Resume(a1);
}

void sub_1002A9BC4()
{
}

void sub_1002A9BF0(_Unwind_Exception *a1)
{
  sub_1001F4BB0(v1);
  _Unwind_Resume(a1);
}

std::thread **sub_1002A9C04(std::thread **result)
{
  uint64_t v1 = *result;
  *__n64 result = 0;
  if (v1)
  {
    if (v1[2].__t_) {
      std::thread::join(v1 + 2);
    }
    std::thread::~thread(v1 + 2);
    operator delete();
  }
  return result;
}

uint64_t sub_1002A9C78(uint64_t a1)
{
  *(void *)a1 = off_100464428;
  *(void *)(a1 + 8) = off_1004644C0;
  sub_1001F4EB4(a1);
  sub_100248390(*(uint64_t **)(a1 + 80));
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2) {
    sub_1002A9EDC(a1 + 88, v2);
  }
  int v3 = *(std::thread **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v3)
  {
    if (v3[2].__t_) {
      std::thread::join(v3 + 2);
    }
    std::thread::~thread(v3 + 2);
    operator delete();
  }

  return sub_1001F4BB0(a1);
}

uint64_t sub_1002A9D5C(uint64_t a1)
{
  return sub_1002A9C78(a1 - 8);
}

void sub_1002A9D64(uint64_t a1)
{
  sub_1002A9C78(a1);

  operator delete();
}

void sub_1002A9D9C(uint64_t a1)
{
  sub_1002A9C78(a1 - 8);

  operator delete();
}

void sub_1002A9DD8(uint64_t a1)
{
  sub_100248388(*(uint64_t **)(a1 + 80));
  uint64_t v2 = *(uint64_t **)(a1 + 80);

  sub_100248390(v2);
}

void *sub_1002A9E14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    int v3 = (_DWORD **)sub_100308F74(v2);
    return sub_100017318(*v3);
  }
  else
  {
    return sub_1001F50EC(a1);
  }
}

void sub_1002A9E6C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 88))
  {
    int v3 = (void *)sub_100308F74(*(void *)(a1 + 88));
    uint64_t v4 = v3[1];
    *(void *)(a2 + 8) = *v3;
    *(void *)(a2 + 16) = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)a2 = 1;
  }
  else
  {
    sub_1001F51C4(a1, a2);
  }
}

void sub_1002A9EDC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    int v3 = (uint64_t *)(a2 + 472);
    if (*(char *)(a2 + 935) < 0)
    {
      operator delete(*(void **)(a2 + 912));
      sub_1000E0C3C((void *)(a2 + 616));
      sub_1000E1268(v3);
      if ((*(char *)(a2 + 463) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_1000E0C3C((void *)(a2 + 616));
      sub_1000E1268(v3);
      if ((*(char *)(a2 + 463) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    operator delete(*(void **)(a2 + 440));
LABEL_4:
    sub_1000E0C3C((void *)(a2 + 144));
    sub_1000E1268((uint64_t *)a2);
    operator delete();
  }
}

void sub_1002A9F84()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002A9FFC()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_1002AA074()
{
}

uint64_t sub_1002AA09C(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(a2 + 16);
    if (v3)
    {
      if ((*(unsigned char *)(v3 + 60) & 1) == 0) {
        return result;
      }
    }
    else
    {
      uint64_t v3 = *(void *)(qword_10047E998 + 16);
      if ((*(unsigned char *)(v3 + 60) & 1) == 0) {
        return result;
      }
    }
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      if ((*(unsigned char *)(v4 + 44) & 2) == 0) {
        return result;
      }
    }
    else if ((*(unsigned char *)(*(void *)(qword_10047E9A8 + 16) + 44) & 2) == 0)
    {
      return result;
    }
    uint64_t v5 = result + 72;
    if (*(unsigned char *)(v2 + 64))
    {
      return sub_100101EF8(v5, a2);
    }
    else
    {
      __n64 result = sub_1000FE5B4(v5, a2);
      *(unsigned char *)(v2 + 64) = 1;
    }
  }
  return result;
}

void sub_1002AA158(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 64)) {
    return;
  }
  uint64_t v3 = *(void *)(a1 + 88);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v4 = *(void *)(*(void *)(qword_10047E998 + 16) + 16);
  if (!v4) {
LABEL_4:
  }
    uint64_t v4 = *(void *)(qword_10047E9A8 + 16);
LABEL_5:
  if (sub_100045E94(*(double *)(v4 + 24) + *(double *)(a1 + 40)) < *a2)
  {
    if (*(unsigned char *)(a1 + 64))
    {
      sub_1000FE82C((void *)(a1 + 72));
      *(unsigned char *)(a1 + 64) = 0;
    }
  }
}

void sub_1002AA1F0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (!v3) {
      uint64_t v3 = *(void *)(qword_10047E998 + 16);
    }
    uint64_t v4 = (void *)sub_100102934((uint64_t)&v6, v3);
    double v5 = 1.0 - v7;
    *(double *)a2 = v7;
    *(double *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = 1;
    sub_1001029D4(v4);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

void sub_1002AA2B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(double *)(a2 + 8) >= 0.5 && *(unsigned char *)(a1 + 49) || !*(unsigned char *)(a1 + 64)) {
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10047E998 + 16);
  }
  uint64_t v6 = (void *)sub_100102934((uint64_t)v10, v5);
  double v7 = *(double *)&v10[6];
  sub_1001029D4(v6);
  if (*(unsigned char *)(a1 + 48))
  {
    double v8 = *(double *)(a1 + 32);
    if (v8 >= v7) {
      double v8 = v7;
    }
    if (v8 < *(double *)(a1 + 24)) {
      double v8 = *(double *)(a1 + 24);
    }
    *(double *)a3 = v8;
    *(double *)(a3 + 8) = 1.0 - v8;
    char v9 = 1;
  }
  else
  {
LABEL_12:
    char v9 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v9;
}

void sub_1002AA3B0()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002AA428()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void *sub_1002AA4A0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000A9108();
    }
    uint64_t v4 = 8 * a2;
    uint64_t v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * a2];
    bzero(v5, 8 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_1002AA51C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1002AA538(void **a1, uint64_t a2)
{
  if (a1 == (void **)a2) {
    return a1;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *(unsigned char **)a2;
  uint64_t v5 = *(char **)(a2 + 8);
  size_t v7 = (v5 - v4) >> 3;
  if (v7 == ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3)
  {
    memcpy(v3, v4, v5 - v4);
    return a1;
  }
  sub_10007C388(a1, v4, v5, v7);
  return a1;
}

uint64_t sub_1002AA5A0(void *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 3;
}

uint64_t sub_1002AA5B0(void *a1, uint64_t a2)
{
  return *a1 + 8 * a2;
}

double sub_1002AA5BC(uint64_t a1)
{
  double __C = 0.0;
  vDSP_svesqD(*(const double **)a1, 1, &__C, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  return __C;
}

void sub_1002AA5FC(__CLPK_doublereal **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long __p = *(void **)a2;
  long long v7 = *(_OWORD *)(a2 + 8);
  uint64_t v4 = ((void)v7 - (void)__p) >> 3;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_1002AA6AC(a1, v4, (uint64_t)&__p, 1, (uint64_t)&v8);
  *(_OWORD *)a3 = v8;
  *(void *)(a3 + 16) = v9;
  uint64_t v5 = __p;
  if (__p)
  {
    operator delete(v5);
  }
}

void sub_1002AA694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1002AA6AC@<Q0>(__CLPK_doublereal **a1@<X0>, __CLPK_integer a2@<W1>, uint64_t a3@<X2>, __CLPK_integer a4@<W3>, uint64_t a5@<X8>)
{
  __CLPK_integer __nrhs = a4;
  __CLPK_integer __ldb = a2;
  __CLPK_integer __info = 0;
  dtptrs_("L", "N", "N", &__ldb, &__nrhs, *a1, *(__CLPK_doublereal **)a3, &__ldb, &__info);
  if (__info)
  {
    sub_1000AE4B0(v12, "");
    sub_1002AAB0C("Invalid value passed to LAPACK during DTPTRS step. info = ", &v14);
    sub_1002A3880(&__info, &v15);
    sub_10016A2C4((uint64_t)v12, (uint64_t)&v14, 2);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v15.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_5:
        if ((v13 & 0x80000000) == 0) {
          goto LABEL_6;
        }
LABEL_9:
        operator delete(v12[0]);
LABEL_6:
        sub_1000D11E0((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  __n128 result = *(__n128 *)a3;
  *(_OWORD *)a5 = *(_OWORD *)a3;
  *(void *)(a5 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  return result;
}

void sub_1002AA80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002AA868(double **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1[1];
  v3[0] = *a1;
  v3[1] = (double *)&std::to_string;
  v3[2] = v2;
  v3[3] = (double *)&std::to_string;
  sub_1002AA8AC(",", v3, a2);
}

void sub_1002AA8AC(char *__s@<X1>, double **a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  long long v7 = a2[2];
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v5 != v7)
  {
    ((void (*)(void **__return_ptr, double))v6)(&__p, *v5);
    if ((v24 & 0x80u) == 0) {
      p_p = (std::string::value_type *)&__p;
    }
    else {
      p_p = (std::string::value_type *)__p;
    }
    if ((v24 & 0x80u) == 0) {
      std::string::size_type v9 = v24;
    }
    else {
      std::string::size_type v9 = v23;
    }
    sub_10006B648((std::string *)a3, a3, (unint64_t)p_p, &p_p[v9], v9);
    if ((char)v24 < 0) {
      operator delete(__p);
    }
    ++v5;
  }
  for (; v5 != v7; ++v5)
  {
    uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *(void *)a3;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a3 + 8);
    }
    uint64_t v12 = v11 + v10;
    size_t v13 = strlen(__s);
    std::string v14 = sub_10006BAEC((std::string *)a3, v12, (unint64_t)__s, &__s[v13], v13);
    uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
    uint64_t v16 = *(void *)a3;
    uint64_t v17 = *(void *)(a3 + 8);
    ((void (*)(void **__return_ptr, char *, double))v6)(&__p, v14, *v5);
    if ((v15 & 0x80u) == 0) {
      uint64_t v18 = a3;
    }
    else {
      uint64_t v18 = v16;
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = v17;
    }
    if ((v24 & 0x80u) == 0) {
      uint64_t v20 = (std::string::value_type *)&__p;
    }
    else {
      uint64_t v20 = (std::string::value_type *)__p;
    }
    if ((v24 & 0x80u) == 0) {
      std::string::size_type v21 = v24;
    }
    else {
      std::string::size_type v21 = v23;
    }
    sub_10006B648((std::string *)a3, v18 + v19, (unint64_t)v20, &v20[v21], v21);
    if ((char)v24 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1002AAA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void *sub_1002AAA6C(void *a1, uint64_t *a2)
{
  sub_100243E0C(a2);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  __n128 result = sub_10002986C(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_1002AAAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1002AAB0C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002AAB40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002AAB5C()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002AABD4()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

double sub_1002AAC4C(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0.0;
  }
  double v3 = 0.0;
  double v4 = 0.0;
  double v5 = 0.0;
  do
  {
    double v6 = v1[3];
    if (v6 <= 0.0)
    {
      sub_1000AE4B0(__p, "");
      sub_10016A2C4((uint64_t)__p, 0, 0);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      sub_1000D11E0((uint64_t)&v9);
    }
    double v7 = v1[2] - *v1;
    double v4 = v4 + __exp10(v7 / -10.0) * v6;
    double v3 = v3 + v7 * v6;
    double v5 = v5 + v6;
    v1 += 5;
  }
  while (v1 != v2);
  return v3;
}

void sub_1002AAD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1002AAD74(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a4[1] - *a4) >> 4) != (v8 - *a3) >> 4)
  {
    sub_1000AE4B0(__p, "");
    sub_100282374("Number of scans must match number of AP RSSI maps", &v33);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&v33, 1);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v30);
  }
  uint64_t v27 = 0;
  long long v28 = 0;
  unint64_t v29 = 0;
  *(_OWORD *)&v33.__r_.__value_.__r.__words[1] = 0uLL;
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)off_10045DC88;
  char v34 = 0;
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t v13 = *(void *)(v7 + v10);
      if (!v13
        || !(*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(void *)v13 + 16))(v13, a2, &v33))
      {
        goto LABEL_6;
      }
      if (*(double *)&v33.__r_.__value_.__r.__words[2] <= 0.0)
      {
        sub_1000AE4B0(__p, "");
        sub_10016A2C4((uint64_t)__p, 0, 0);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
        sub_1000D11E0((uint64_t)v30);
      }
      uint64_t v14 = *a4 + v9;
      int v15 = *(_DWORD *)(v14 + 32);
      if (v15 == v15 >> 31)
      {
        double v16 = *(double *)(v14 + 72);
        __p[0] = *(void **)&v16;
        uint64_t v17 = v28;
        if ((unint64_t)v28 < v29) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v20 = *(void *)(v14 + 40);
        uint64_t v18 = v14 + 40;
        uint64_t v19 = v20;
        if (v15 < 0) {
          uint64_t v18 = v19;
        }
        double v16 = (double)*(int *)(v18 + 92);
        *(double *)long long __p = v16;
        uint64_t v17 = v28;
        if ((unint64_t)v28 < v29)
        {
LABEL_16:
          *uint64_t v17 = v16;
          sub_1001B0778((uint64_t)(v17 + 1), (uint64_t)&v33);
          uint64_t v12 = (char *)(v17 + 5);
          goto LABEL_5;
        }
      }
      uint64_t v12 = sub_1002AC7E0(&v27, __p, (uint64_t)&v33);
LABEL_5:
      long long v28 = (double *)v12;
LABEL_6:
      ++v11;
      uint64_t v7 = *a3;
      v10 += 16;
      v9 += 208;
    }
    while (v11 < (a3[1] - *a3) >> 4);
  }
  double v21 = sub_1002AAC4C((double **)&v27);
  nullsub_98(&v33);
  uint64_t v22 = (double *)v27;
  if (v27)
  {
    std::string::size_type v23 = v28;
    unsigned __int8 v24 = v27;
    if (v28 != v27)
    {
      do
      {
        int v25 = v23 - 5;
        nullsub_98(v23 - 4);
        std::string::size_type v23 = v25;
      }
      while (v25 != v22);
      unsigned __int8 v24 = v27;
    }
    long long v28 = v22;
    operator delete(v24);
  }
  return v21;
}

void sub_1002AB088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002AB0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a17 < 0)
  {
    operator delete(__p);
    nullsub_98(&a21);
    sub_1002AB13C((void **)&a9);
    _Unwind_Resume(a1);
  }
  nullsub_98(&a21);
  sub_1002AB13C((void **)&a9);
  _Unwind_Resume(a1);
}

void **sub_1002AB13C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    double v3 = (char *)a1[1];
    double v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        double v5 = v3 - 40;
        nullsub_98(v3 - 32);
        double v3 = v5;
      }
      while (v5 != v2);
      double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1002AB1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64x2_t *a5)
{
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      if ((a3 || *(double *)(a2 + 8) > 0.0) && a3) {
        goto LABEL_5;
      }
      return;
    case 1:
      double v18 = *(double *)(a2 + 8);
      double v19 = *(double *)(a2 + 16);
      double v26 = v19;
      double v27 = v18;
      if (!a3) {
        return;
      }
      if (v18 <= 0.0) {
        goto LABEL_5;
      }
      double v20 = v18 / v19;
      __exp10(v18 / v19 / 10.0);
      double v25 = NAN;
      if (!*(void *)(a1 + 32)) {
        goto LABEL_83;
      }
      uint64_t v21 = 0;
      while (2)
      {
        double v25 = (*(double (**)(uint64_t, double, double))(*(void *)a3 + 24))(a3, *(double *)(a1 + 8), *(double *)(a1 + 8) + *(double *)(a1 + 16) - *(double *)(a1 + 8));
        double v24 = __exp10(v25 / 10.0);
        double v22 = v27 * (log(v24 / v20) + 1.0) - v24 * v26;
        if (v22 > 0.00000011920929)
        {
          char v30 = 0;
          LOBYTE(v29[0]) = 0;
          memset(&v34, 0, sizeof(v34));
          std::string::assign(&v34, "We set our sampling area too low! But since it's the mode that should be impossible. w=");
          memset(&v35, 0, sizeof(v35));
          if ((sub_1001645DC(&v27, &v35) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v31);
            v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
            sub_1000DB0D4((uint64_t)&v31);
          }
          memset(&v36, 0, sizeof(v36));
          std::string::assign(&v36, " s=");
          memset(&v37, 0, sizeof(v37));
          if ((sub_1001645DC(&v26, &v37) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v31);
            v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
            sub_1000DB0D4((uint64_t)&v31);
          }
          memset(&v38, 0, sizeof(v38));
          std::string::assign(&v38, " r_dB=");
          memset(&v39, 0, sizeof(v39));
          if ((sub_1001645DC(&v25, &v39) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v31);
            v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
            sub_1000DB0D4((uint64_t)&v31);
          }
          memset(&v40, 0, sizeof(v40));
          std::string::assign(&v40, " r_rat=");
          memset(&v41, 0, sizeof(v41));
          if ((sub_1001645DC(&v24, &v41) & 1) == 0)
          {
            std::bad_cast::bad_cast(&v31);
            v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
            sub_1000DB0D4((uint64_t)&v31);
          }
          sub_10016A2C4((uint64_t)v29, (uint64_t)&v34, 8);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v41.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_60:
              if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_61;
              }
              goto LABEL_70;
            }
          }
          else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_60;
          }
          operator delete(v40.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_61:
            if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_62;
            }
            goto LABEL_71;
          }
LABEL_70:
          operator delete(v39.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_62:
            if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_63;
            }
            goto LABEL_72;
          }
LABEL_71:
          operator delete(v38.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_63:
            if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_64;
            }
            goto LABEL_73;
          }
LABEL_72:
          operator delete(v37.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_64:
            if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_65;
            }
            goto LABEL_74;
          }
LABEL_73:
          operator delete(v36.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_65:
            if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_66;
            }
            goto LABEL_75;
          }
LABEL_74:
          operator delete(v35.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_66:
            if ((v30 & 0x80000000) == 0) {
              goto LABEL_67;
            }
LABEL_76:
            operator delete(v29[0]);
LABEL_67:
            sub_1000D11E0((uint64_t)__p);
          }
LABEL_75:
          operator delete(v34.__r_.__value_.__l.__data_);
          if ((v30 & 0x80000000) == 0) {
            goto LABEL_67;
          }
          goto LABEL_76;
        }
        if (v22 < 0.0)
        {
          long double v23 = (*(double (**)(uint64_t))(*(void *)a4 + 16))(a4);
          if (log(v23) >= v22)
          {
            if ((unint64_t)++v21 >= *(void *)(a1 + 32)) {
              goto LABEL_83;
            }
            continue;
          }
        }
        break;
      }
      sub_100314EDC((uint64_t)a5);
      return;
    case 2:
      double v10 = *(double *)(a2 + 8);
      double v9 = *(double *)(a2 + 16);
      double v26 = v9;
      double v27 = v10;
      if (!a3 && v10 <= 0.0) {
        return;
      }
      double v11 = 0.0;
      if (v10 > 0.0) {
        double v11 = log10(v10 / v9) * 10.0;
      }
      double v25 = v11;
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        if (a3) {
          (*(void (**)(uint64_t, double, double))(*(void *)a3 + 24))(a3, *(double *)(a1 + 8), *(double *)(a1 + 8) + *(double *)(a1 + 16) - *(double *)(a1 + 8));
        }
        return;
      }
      char v30 = 0;
      LOBYTE(v29[0]) = 0;
      memset(&v34, 0, sizeof(v34));
      std::string::assign(&v34, "Finite modeGain only w=");
      memset(&v35, 0, sizeof(v35));
      if ((sub_1001645DC(&v27, &v35) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
        sub_1000DB0D4((uint64_t)&v31);
      }
      memset(&v36, 0, sizeof(v36));
      std::string::assign(&v36, " s=");
      memset(&v37, 0, sizeof(v37));
      if ((sub_1001645DC(&v26, &v37) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
        sub_1000DB0D4((uint64_t)&v31);
      }
      memset(&v38, 0, sizeof(v38));
      std::string::assign(&v38, " but ");
      memset(&v39, 0, sizeof(v39));
      if ((sub_1001645DC(&v25, &v39) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
        sub_1000DB0D4((uint64_t)&v31);
      }
      sub_10016A2C4((uint64_t)v29, (uint64_t)&v34, 6);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v39.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_93:
          if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_94;
          }
          goto LABEL_101;
        }
      }
      else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_93;
      }
      operator delete(v38.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_94:
        if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_95;
        }
        goto LABEL_102;
      }
LABEL_101:
      operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_95:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_96;
        }
        goto LABEL_103;
      }
LABEL_102:
      operator delete(v36.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_96:
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_97;
        }
        goto LABEL_104;
      }
LABEL_103:
      operator delete(v35.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_97:
        if ((v30 & 0x80000000) == 0) {
          goto LABEL_98;
        }
LABEL_105:
        operator delete(v29[0]);
LABEL_98:
        sub_1000D11E0((uint64_t)__p);
      }
LABEL_104:
      operator delete(v34.__r_.__value_.__l.__data_);
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_98;
      }
      goto LABEL_105;
    case 3:
      double v12 = *(double *)(a2 + 8);
      double v13 = *(double *)(a2 + 16);
      double v26 = v13;
      double v27 = v12;
      if (!a3)
      {
        if (v12 > 0.0) {
          log10(v13 / v12);
        }
        return;
      }
      if (v12 <= 0.0)
      {
LABEL_5:
        (*(void (**)(uint64_t, double, double))(*(void *)a3 + 24))(a3, *(double *)(a1 + 8), *(double *)(a1 + 8) + *(double *)(a1 + 16) - *(double *)(a1 + 8));
        return;
      }
      double v25 = NAN;
      if (!*(void *)(a1 + 32))
      {
LABEL_83:
        sub_100314EEC(a5);
        return;
      }
      uint64_t v14 = 0;
      double v15 = v12 / v13;
      while (1)
      {
        double v25 = (*(double (**)(uint64_t, double, double))(*(void *)a3 + 24))(a3, *(double *)(a1 + 8), *(double *)(a1 + 8) + *(double *)(a1 + 16) - *(double *)(a1 + 8));
        double v24 = __exp10(v25 / 10.0);
        double v16 = v27 * (log(v24 / v15) + 1.0) - v24 * v26;
        if (v16 > 0.00000011920929) {
          break;
        }
        if (v16 >= 0.0 || (long double v17 = (*(double (**)(uint64_t))(*(void *)a4 + 16))(a4), log(v17) < v16))
        {
          sub_100314EDC((uint64_t)a5);
          return;
        }
        if ((unint64_t)++v14 >= *(void *)(a1 + 32)) {
          goto LABEL_83;
        }
      }
      char v30 = 0;
      LOBYTE(v29[0]) = 0;
      memset(&v34, 0, sizeof(v34));
      std::string::assign(&v34, "We set our sampling area too low! But since it's the mode that should be impossible. w=");
      memset(&v35, 0, sizeof(v35));
      if ((sub_1001645DC(&v27, &v35) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
        sub_1000DB0D4((uint64_t)&v31);
      }
      memset(&v36, 0, sizeof(v36));
      std::string::assign(&v36, " s=");
      memset(&v37, 0, sizeof(v37));
      if ((sub_1001645DC(&v26, &v37) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
        sub_1000DB0D4((uint64_t)&v31);
      }
      memset(&v38, 0, sizeof(v38));
      std::string::assign(&v38, " r_dB=");
      memset(&v39, 0, sizeof(v39));
      if ((sub_1001645DC(&v25, &v39) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
        sub_1000DB0D4((uint64_t)&v31);
      }
      memset(&v40, 0, sizeof(v40));
      std::string::assign(&v40, " r_rat=");
      memset(&v41, 0, sizeof(v41));
      if ((sub_1001645DC(&v24, &v41) & 1) == 0)
      {
        std::bad_cast::bad_cast(&v31);
        v31.__vftable = (std::bad_cast_vtbl *)&off_100454020;
        sub_1000DB0D4((uint64_t)&v31);
      }
      sub_10016A2C4((uint64_t)v29, (uint64_t)&v34, 8);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v41.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_28:
          if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_29;
          }
          goto LABEL_38;
        }
      }
      else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_28;
      }
      operator delete(v40.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_29:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_30;
        }
        goto LABEL_39;
      }
LABEL_38:
      operator delete(v39.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_30:
        if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_31;
        }
        goto LABEL_40;
      }
LABEL_39:
      operator delete(v38.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_31:
        if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_32;
        }
        goto LABEL_41;
      }
LABEL_40:
      operator delete(v37.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_32:
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_33;
        }
        goto LABEL_42;
      }
LABEL_41:
      operator delete(v36.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_33:
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_34;
        }
        goto LABEL_43;
      }
LABEL_42:
      operator delete(v35.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_34:
        if ((v30 & 0x80000000) == 0) {
          goto LABEL_35;
        }
LABEL_44:
        operator delete(v29[0]);
LABEL_35:
        sub_1000D11E0((uint64_t)__p);
      }
LABEL_43:
      operator delete(v34.__r_.__value_.__l.__data_);
      if ((v30 & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_44;
    default:
      return;
  }
}

void sub_1002AC300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002AC76C(uint64_t a1, uint64_t a2)
{
}

char *sub_1002AC7E0(void *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_1000A6A10();
    }
    double v9 = (char *)operator new(40 * v8);
  }
  else
  {
    double v9 = 0;
  }
  double v19 = &v9[40 * v4];
  *((void *)&v20 + 1) = &v9[40 * v8];
  *(void *)double v19 = *a2;
  sub_1001B0778((uint64_t)(v19 + 8), a3);
  double v11 = (char *)*a1;
  uint64_t v10 = a1[1];
  for (uint64_t i = 48; ; i -= 40)
  {
    uint64_t v13 = v10 + i;
    if ((char *)(v10 + i - 48) == v11) {
      break;
    }
    *(void *)&v19[i - 88] = *(void *)(v13 - 88);
    uint64_t v14 = (uint64_t)&v19[i - 80];
    sub_1001B0778(v14, v13 - 80);
  }
  double v16 = (char *)*a1;
  double v15 = (char *)a1[1];
  *a1 = &v19[i - 48];
  *(void *)&long long v20 = v19 + 40;
  *(_OWORD *)(a1 + 1) = v20;
  if (v15 != v16)
  {
    do
    {
      long double v17 = v15 - 40;
      nullsub_98(v15 - 32);
      double v15 = v17;
    }
    while (v17 != v16);
  }
  if (v16) {
    operator delete(v16);
  }
  return v19 + 40;
}

void sub_1002AC968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002AC9A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AC9A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    nullsub_98(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1002AC9F8()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002ACA70()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002ACAE8(uint64_t a1, uint64_t **a2, void *a3)
{
  double v6 = a2[1];
  unint64_t v7 = 126 - 2 * __clz(((char *)v6 - (char *)*a2) >> 4);
  uint64_t v13 = *a2;
  unint64_t v5 = v13;
  uint64_t v14 = v6;
  unint64_t v8 = a2[2];
  double v15 = v8;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v6 == v5) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v7;
  }
  sub_1002B0BFC(v5, v6, v9, 1);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v8;
  sub_1002ACC80((double **)&__p, (uint64_t **)a1, a3, 0);
  sub_1002B4394(a1 + 24, &__p);
  if (__p)
  {
    double v12 = __p;
    operator delete(__p);
  }
  sub_1002ACC80((double **)&__p, (uint64_t **)a1, a3, 1);
  sub_1002B4394(a1 + 120, &__p);
  if (__p)
  {
    double v12 = __p;
    operator delete(__p);
  }
  sub_1002ACF40((uint64_t *)(a1 + 216), (uint64_t *)a1);
  return a1;
}

void sub_1002ACBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v13 = v12;
  sub_1002AD0A4(v13);
  sub_1002AD0A4(v11);
  sub_1000D8DD8(v10);
  _Unwind_Resume(a1);
}

void sub_1002ACC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (__p)
  {
    operator delete(__p);
    sub_1000D8DD8(v12);
    _Unwind_Resume(a1);
  }
  sub_1000D8DD8(v12);
  _Unwind_Resume(a1);
}

void sub_1002ACC80(double **a1, uint64_t **a2, void *a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v6 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    if (v6 < 0) {
      sub_1000A9108();
    }
    uint64_t v10 = (double *)operator new((unint64_t)v6 >> 1);
    *a1 = v10;
    a1[1] = v10;
    a1[2] = &v10[v6 >> 4];
    std::string v38 = v4;
    while (1)
    {
      while (1)
      {
        uint64_t v11 = *v5;
        double v12 = 1.0;
        if (a4)
        {
          double v12 = (*(double (**)(uint64_t))(*(void *)v11 + 32))(v11);
          uint64_t v11 = *v5;
        }
        uint64_t v13 = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(v11);
        uint64_t v14 = sub_10006F50C(a3, v13);
        if (!v14) {
          sub_10018E334("unordered_map::at: key not found");
        }
        double v15 = v12 * *((double *)v14 + 5);
        long double v17 = a1[1];
        unint64_t v16 = (unint64_t)a1[2];
        if ((unint64_t)v17 >= v16) {
          break;
        }
        *long double v17 = v15;
        a1[1] = v17 + 1;
        v5 += 2;
        if (v5 == v4) {
          return;
        }
      }
      double v18 = a3;
      uint64_t v19 = a4;
      long long v20 = *a1;
      uint64_t v21 = (char *)v17 - (char *)*a1;
      uint64_t v22 = v21 >> 3;
      unint64_t v23 = (v21 >> 3) + 1;
      if (v23 >> 61) {
        sub_1000A9108();
      }
      uint64_t v24 = v16 - (void)v20;
      if (v24 >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      unint64_t v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v23;
      if (v25) {
        break;
      }
      double v26 = 0;
      double v27 = (double *)(8 * v22);
      *(double *)(8 * v22) = v15;
      uint64_t v28 = 8 * v22 + 8;
      if (v17 != v20) {
        goto LABEL_20;
      }
LABEL_26:
      *a1 = v27;
      a1[1] = (double *)v28;
      a1[2] = (double *)&v26[8 * v25];
      if (v20) {
        operator delete(v20);
      }
      a4 = v19;
      a3 = v18;
      unint64_t v4 = v38;
      a1[1] = (double *)v28;
      v5 += 2;
      if (v5 == v38) {
        return;
      }
    }
    if (v25 >> 61) {
      sub_1000A6A10();
    }
    double v26 = operator new(8 * v25);
    double v27 = (double *)&v26[8 * v22];
    double *v27 = v15;
    uint64_t v28 = (uint64_t)(v27 + 1);
    if (v17 == v20) {
      goto LABEL_26;
    }
LABEL_20:
    unint64_t v29 = (char *)(v17 - 1) - (char *)v20;
    if (v29 < 0x58) {
      goto LABEL_36;
    }
    if ((unint64_t)((char *)v17 - &v26[v21]) < 0x20) {
      goto LABEL_36;
    }
    uint64_t v30 = (v29 >> 3) + 1;
    uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
    char v32 = &v17[v31 / 0xFFFFFFFFFFFFFFF8];
    double v27 = (double *)((char *)v27 - v31);
    std::string v33 = &v26[8 * v22 - 16];
    std::string v34 = v17 - 2;
    uint64_t v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v36 = *(_OWORD *)v34;
      *(v33 - 1) = *((_OWORD *)v34 - 1);
      *std::string v33 = v36;
      v33 -= 2;
      v34 -= 4;
      v35 -= 4;
    }
    while (v35);
    long double v17 = v32;
    if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_36:
      do
      {
        uint64_t v37 = *((void *)v17-- - 1);
        *((void *)v27-- - 1) = v37;
      }
      while (v17 != v20);
    }
    goto LABEL_26;
  }
}

void sub_1002ACF10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1002ACF40(uint64_t *result, uint64_t *a2)
{
  result[1] = 0;
  uint64_t v3 = result + 1;
  result[2] = 0;
  *__n128 result = (uint64_t)(result + 1);
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = result;
    unint64_t v7 = 0;
    int v8 = 0;
    do
    {
      __n128 result = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(v4 + 16 * v7) + 56))(*(void *)(v4 + 16 * v7));
      int v9 = *((_DWORD *)result + 404);
      if (!v8 || v9 != v2)
      {
        uint64_t v10 = *v3;
        uint64_t v11 = v3;
        double v12 = v3;
        if (*v3)
        {
          while (1)
          {
            while (1)
            {
              double v12 = (void *)v10;
              int v13 = *(_DWORD *)(v10 + 32);
              if (v9 >= v13) {
                break;
              }
              uint64_t v10 = *v12;
              uint64_t v11 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }
            if (v13 >= v9) {
              break;
            }
            uint64_t v10 = v12[1];
            if (!v10)
            {
              uint64_t v11 = v12 + 1;
              goto LABEL_15;
            }
          }
        }
        else
        {
LABEL_15:
          uint64_t v14 = operator new(0x30uLL);
          v14[8] = v9;
          *((void *)v14 + 5) = v7;
          *(void *)uint64_t v14 = 0;
          *((void *)v14 + 1) = 0;
          *((void *)v14 + 2) = v12;
          *uint64_t v11 = v14;
          uint64_t v15 = *(void *)*v6;
          if (v15)
          {
            uint64_t *v6 = v15;
            uint64_t v14 = (_DWORD *)*v11;
          }
          __n128 result = sub_1000619B8((uint64_t *)v6[1], (uint64_t *)v14);
          ++v6[2];
        }
        int v8 = 1;
        int v2 = v9;
      }
      ++v7;
      uint64_t v4 = *a2;
    }
    while (v7 < (a2[1] - *a2) >> 4);
  }
  return result;
}

void sub_1002AD08C(_Unwind_Exception *a1)
{
  sub_10006A9DC(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1002AD0A4(uint64_t a1)
{
  int v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  sub_10006A9DC(a1 + 24, *(void **)(a1 + 32));
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_1002AD108(uint64_t *a1, uint64_t **a2, uint64_t **a3, double **a4)
{
  int v8 = a2[1];
  unint64_t v9 = 126 - 2 * __clz(((char *)v8 - (char *)*a2) >> 4);
  unsigned int v88 = *a2;
  unint64_t v7 = v88;
  unint64_t v89 = v8;
  uint64_t v10 = (uint64_t)a2[2];
  uint64_t v90 = v10;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v8 == v7) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v9;
  }
  sub_1002B0BFC(v7, v8, v11, 1);
  *a1 = (uint64_t)v7;
  a1[1] = (uint64_t)v8;
  a1[2] = v10;
  unint64_t v89 = 0;
  uint64_t v90 = 0;
  unsigned int v88 = 0;
  double v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v83 = *a4;
  int v84 = v12;
  int v13 = a1;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1002ADA0C(a1, (uint64_t)v82);
  uint64_t v14 = *a1;
  uint64_t v15 = v13[1];
  char v86 = 0;
  long long v87 = 0;
  unint64_t v85 = 0;
  unsigned int v80 = v13;
  if (v14 != v15)
  {
    while (1)
    {
      long double v17 = (void *)(*(uint64_t (**)(void))(**(void **)v14 + 40))();
      (*(void (**)(char **__return_ptr))(*(void *)*v17 + 48))(&v97);
      uint64_t v18 = *v17;
      long long __p = COERCE_VOID_((*(double (**)(void))(**(void **)v14 + 24))());
      uint64_t v92 = v19;
      unint64_t v93 = v20;
      uint64_t v94 = v21;
      (*(void (**)(double **__return_ptr, uint64_t, void **, void))(*(void *)v18 + 152))(&v95, v18, &__p, 0);
      uint64_t v22 = v95;
      unint64_t v23 = v96;
      double v24 = 0.0;
      if (v95 == v96)
      {
        double v27 = v95;
      }
      else
      {
        unint64_t v25 = v83;
        do
        {
          sub_10026E22C((uint64_t)v82, a3, &__p);
          double v26 = sub_10026D1AC(v25, v17, v22, &__p, (double *)a3, (uint64_t)&v97, 0.0);
          if (__p)
          {
            uint64_t v92 = __p;
            operator delete(__p);
          }
          double v24 = v24 + exp(v26);
          v22 += 7;
        }
        while (v22 != v23);
        uint64_t v22 = v95;
        double v27 = v96;
      }
      double v28 = v24 / (double)(unint64_t)(0x6DB6DB6DB6DB6DB7 * (v27 - v22));
      unint64_t v29 = v86;
      if (v86 >= v87) {
        break;
      }
      *char v86 = v28;
      char v86 = v29 + 1;
      long long __p = &v95;
      sub_1002B2B08((void ***)&__p);
      uint64_t v30 = v97;
      if (v97) {
        goto LABEL_41;
      }
LABEL_10:
      v14 += 16;
      int v13 = v80;
      if (v14 == v15) {
        goto LABEL_47;
      }
    }
    uint64_t v31 = (double *)v85;
    int64_t v32 = (char *)v86 - (unsigned char *)v85;
    uint64_t v33 = ((char *)v86 - (unsigned char *)v85) >> 3;
    unint64_t v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61) {
      sub_1000A9108();
    }
    uint64_t v35 = (char *)v87 - (unsigned char *)v85;
    if (((char *)v87 - (unsigned char *)v85) >> 2 > v34) {
      unint64_t v34 = v35 >> 2;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v34;
    }
    if (v36)
    {
      if (v36 >> 61) {
        sub_1000A6A10();
      }
      uint64_t v37 = (char *)operator new(8 * v36);
      std::string v38 = (double *)&v37[8 * v33];
      *std::string v38 = v28;
      uint64_t v39 = (uint64_t)(v38 + 1);
      if (v29 == v31)
      {
LABEL_38:
        unint64_t v85 = v38;
        long long v87 = (double *)&v37[8 * v36];
        if (v31) {
          operator delete(v31);
        }
        char v86 = (double *)v39;
        long long __p = &v95;
        sub_1002B2B08((void ***)&__p);
        uint64_t v30 = v97;
        if (!v97) {
          goto LABEL_10;
        }
LABEL_41:
        uint64_t v49 = v98;
        unint64_t v16 = v30;
        if (v98 != v30)
        {
          do
          {
            uint64_t v50 = (std::__shared_weak_count *)*((void *)v49 - 1);
            if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
            v49 -= 16;
          }
          while (v49 != v30);
          unint64_t v16 = v97;
        }
        unint64_t v98 = v30;
        operator delete(v16);
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v37 = 0;
      std::string v38 = (double *)(8 * v33);
      *(double *)(8 * v33) = v28;
      uint64_t v39 = 8 * v33 + 8;
      if (v29 == v31) {
        goto LABEL_38;
      }
    }
    unint64_t v40 = (char *)(v29 - 1) - (char *)v31;
    if (v40 < 0x58) {
      goto LABEL_100;
    }
    if ((unint64_t)((char *)v29 - &v37[v32]) < 0x20) {
      goto LABEL_100;
    }
    uint64_t v41 = (v40 >> 3) + 1;
    uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v43 = &v29[v42 / 0xFFFFFFFFFFFFFFF8];
    std::string v38 = (double *)((char *)v38 - v42);
    unint64_t v44 = &v37[8 * v33 - 16];
    uint64_t v45 = v29 - 2;
    uint64_t v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v47 = *(_OWORD *)v45;
      *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
      *(_OWORD *)unint64_t v44 = v47;
      v44 -= 32;
      v45 -= 4;
      v46 -= 4;
    }
    while (v46);
    unint64_t v29 = v43;
    if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        uint64_t v48 = *((void *)v29-- - 1);
        *((void *)v38-- - 1) = v48;
      }
      while (v29 != v31);
    }
    goto LABEL_38;
  }
LABEL_47:
  sub_1002B4394(v13 + 3, &v85);
  if (v85)
  {
    char v86 = (double *)v85;
    operator delete(v85);
  }
  long long v51 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
  uint64_t v52 = nullsub_22(v13 + 3);
  char v81 = 0;
  uint64_t v54 = *(const void **)v52;
  uint64_t v53 = *(void *)(v52 + 8);
  size_t v55 = v53 - *(void *)v52;
  if (v53 != *(void *)v52)
  {
    if ((v55 & 0x8000000000000000) != 0) {
      sub_1000A9108();
    }
    char v81 = operator new(v53 - *(void *)v52);
    memcpy(v81, v54, v55);
    int v13 = v80;
  }
  long long __p = 0;
  uint64_t v92 = 0;
  unint64_t v93 = 0;
  uint64_t v56 = *v13;
  if (v13[1] != *v13)
  {
    uint64_t v57 = 0;
    unsigned int v58 = 0;
    unint64_t v59 = 0;
    unsigned int v60 = 0;
    unint64_t v61 = 0;
    unint64_t v62 = 0;
    while (1)
    {
      while (1)
      {
        double v63 = *((double *)v81 + v62);
        double v64 = v63
            * (*(double (**)(void))(**(void **)(v56 + 16 * v62) + 32))(*(void *)(v56 + 16 * v62));
        if ((unint64_t)v58 >= v61) {
          break;
        }
        *v58++ = v64;
        ++v62;
        uint64_t v56 = *v13;
        if (v62 >= (v13[1] - *v13) >> 4) {
          goto LABEL_87;
        }
      }
      uint64_t v65 = v58 - v60;
      unint64_t v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 61)
      {
        long long __p = v59;
        uint64_t v92 = v58;
        unint64_t v93 = v57;
        sub_1000A9108();
      }
      if ((uint64_t)(v61 - (void)v60) >> 2 > v66) {
        unint64_t v66 = (uint64_t)(v61 - (void)v60) >> 2;
      }
      if (v61 - (unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v66;
      }
      if (v67)
      {
        if (v67 >> 61)
        {
          long long __p = v59;
          uint64_t v92 = v58;
          unint64_t v93 = v57;
          sub_1000A6A10();
        }
        unint64_t v68 = operator new(8 * v67);
        unint64_t v59 = (double *)&v68[8 * v65];
        *unint64_t v59 = v64;
        uint64_t v69 = (uint64_t)(v59 + 1);
        if (v58 == v60) {
          goto LABEL_73;
        }
      }
      else
      {
        unint64_t v68 = 0;
        unint64_t v59 = (double *)(8 * v65);
        *(double *)(8 * v65) = v64;
        uint64_t v69 = 8 * v65 + 8;
        if (v58 == v60) {
          goto LABEL_73;
        }
      }
      unint64_t v70 = (char *)(v58 - 1) - (char *)v60;
      if (v70 >= 0x168)
      {
        if (&v68[(char *)v58 - (char *)v60 - 8 - (v70 & 0xFFFFFFFFFFFFFFF8)] > &v68[(char *)v58 - (char *)v60 - 8])
        {
          unsigned int v71 = v58;
        }
        else if ((double *)((char *)v58 - (v70 & 0xFFFFFFFFFFFFFFF8) - 8) > v58 - 1)
        {
          unsigned int v71 = v58;
        }
        else if ((unint64_t)((char *)v60 - v68) >= 0x20)
        {
          uint64_t v73 = (v70 >> 3) + 1;
          uint64_t v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v71 = &v58[v74 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v59 = (double *)((char *)v59 - v74);
          unint64_t v75 = &v68[8 * v65 - 16];
          uint64_t v76 = v58 - 2;
          uint64_t v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v78 = *(_OWORD *)v76;
            *(v75 - 1) = *((_OWORD *)v76 - 1);
            *unint64_t v75 = v78;
            v75 -= 2;
            v76 -= 4;
            v77 -= 4;
          }
          while (v77);
          if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_73;
          }
        }
        else
        {
          unsigned int v71 = v58;
        }
      }
      else
      {
        unsigned int v71 = v58;
      }
      do
      {
        uint64_t v72 = *((void *)v71-- - 1);
        *((void *)v59-- - 1) = v72;
      }
      while (v71 != v60);
LABEL_73:
      uint64_t v57 = &v68[8 * v67];
      if (v60) {
        operator delete(v60);
      }
      unsigned int v60 = v59;
      unint64_t v61 = (unint64_t)v57;
      unsigned int v58 = (double *)v69;
      ++v62;
      uint64_t v56 = *v13;
      if (v62 >= (v13[1] - *v13) >> 4)
      {
LABEL_87:
        long long __p = v59;
        uint64_t v92 = v58;
        unint64_t v93 = v57;
        break;
      }
    }
  }
  sub_1002B4394(v13 + 15, &__p);
  if (__p)
  {
    uint64_t v92 = __p;
    operator delete(__p);
  }
  if (v81) {
    operator delete(v81);
  }
  sub_1002ACF40(v13 + 27, v13);
  return v13;
}

void sub_1002AD88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28)
{
  sub_1002AD0A4(v29);
  sub_1002AD0A4(v28);
  sub_1000D8DD8(a11);
  _Unwind_Resume(a1);
}

void sub_1002AD9A8()
{
}

void sub_1002AD9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  long long __p = (void *)(v28 - 152);
  sub_1002B2B08((void ***)&__p);
  sub_1000D8DD8((void **)(v28 - 128));
  if (a20)
  {
    a21 = a20;
    operator delete(a20);
  }
  sub_1000BA884((uint64_t)&a18);
  sub_1000D8DD8(v27);
  _Unwind_Resume(a1);
}

void sub_1002ADA0C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  long long __p = 0;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v6 = (long long *)(*(uint64_t (**)(void))(**(void **)v3 + 40))();
      if (*(void *)v6 && ((*(uint64_t (**)(void))(**(void **)v6 + 40))(*(void *)v6) & 1) == 0)
      {
        unint64_t v7 = v14;
        if ((unint64_t)v14 >= v15)
        {
          unint64_t v5 = sub_1001F4898((uint64_t)&__p, v6);
        }
        else
        {
          *uint64_t v14 = *(void *)v6;
          uint64_t v8 = *((void *)v6 + 1);
          v7[1] = v8;
          if (v8) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v5 = v7 + 2;
        }
        uint64_t v14 = v5;
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  sub_10026F40C((uint64_t **)&__p, a2);
  unint64_t v9 = __p;
  if (__p)
  {
    uint64_t v10 = v14;
    uint64_t v11 = __p;
    if (v14 != __p)
    {
      do
      {
        double v12 = (std::__shared_weak_count *)*(v10 - 1);
        if (v12)
        {
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 2;
      }
      while (v10 != v9);
      uint64_t v11 = __p;
    }
    uint64_t v14 = v9;
    operator delete(v11);
  }
}

void sub_1002ADB94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000D8DD8((void **)va);
  _Unwind_Resume(a1);
}

void sub_1002ADBA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000D8DD8((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_1002ADBC0(void *a1)
{
  return *a1 == a1[1];
}

uint64_t sub_1002ADBD0(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v4 = 3;
  if (a3) {
    uint64_t v4 = 15;
  }
  uint64_t v5 = (uint64_t)&a1[v4];
  float v6 = (*(float (**)(uint64_t))(*(void *)a2 + 32))(a2);
  unint64_t v7 = sub_1002B4398(v5, v6);
  std::string::size_type v13 = v7;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (*a1 == v9)
  {
    sub_1000AE4B0(v15, "");
    sub_1002B3BA4("Empty location choices for injection; something must be wrong! choice: ", &buf);
    sub_1001F3080(&v13, &v18);
    sub_10016A2C4((uint64_t)v15, (uint64_t)&buf, 2);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_8:
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_9;
        }
LABEL_19:
        operator delete(v15[0]);
LABEL_9:
        sub_1000D11E0((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  if (v7 < (v9 - v8) >> 4) {
    return v8 + 16 * v7;
  }
  if (qword_10047BED8 == -1)
  {
    uint64_t v11 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  dispatch_once(&qword_10047BED8, &stru_1004645A0);
  uint64_t v11 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT))
  {
LABEL_12:
    uint64_t v12 = (a1[1] - *a1) >> 4;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v12;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
    *(double *)&v18.__r_.__value_.__l.__data_ = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "OOB index error; choice: %{public}zu, size of choices: %{public}zu, rand float: %{public}f",
      (uint8_t *)&buf,
      0x20u);
  }
LABEL_13:
  uint64_t result = *a1;
  if (a1[1] == *a1) {
    sub_1001F352C();
  }
  return result;
}

void sub_1002ADE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002ADE74(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>, __n128 a9@<Q0>, double a10@<D1>)
{
  double v13 = a9.n128_f64[0];
  unsigned int v18 = *(_DWORD *)(a4 + 12);
  if (v18 >= 2)
  {
    sub_1000AE4B0(v53, "");
    sub_1001F10BC("You should only call this function if a floor transition happened!", &__p);
    sub_10016A2C4((uint64_t)v53, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v54 < 0) {
      operator delete(v53[0]);
    }
    sub_1000D11E0((uint64_t)&v52);
  }
  *(unsigned char *)a8 = 0;
  int v19 = *(_DWORD *)(a4 + 8);
  if (!v18)
  {
    uint64_t v30 = a1[28];
    if (v30)
    {
      uint64_t v31 = a1 + 28;
      uint64_t v32 = a1[28];
      do
      {
        int v33 = *(_DWORD *)(v32 + 32);
        BOOL v34 = v19 < v33;
        if (v19 >= v33) {
          uint64_t v35 = (uint64_t *)(v32 + 8);
        }
        else {
          uint64_t v35 = (uint64_t *)v32;
        }
        if (v34) {
          uint64_t v31 = (void *)v32;
        }
        uint64_t v32 = *v35;
      }
      while (*v35);
      if (v31 != a1 + 28)
      {
        uint64_t v36 = v31[5];
        do
        {
          uint64_t v37 = v30;
          uint64_t v30 = *(void *)(v30 + 8);
        }
        while (v30);
        uint64_t v28 = *(void *)(v37 + 40);
        goto LABEL_43;
      }
    }
    if (qword_10047BED8 == -1)
    {
      uint64_t v38 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_1004645A0);
      uint64_t v38 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return;
      }
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v19;
    uint64_t v39 = "Failed to find a floor with floor number > %d";
LABEL_34:
    unint64_t v40 = v38;
    uint32_t v41 = 8;
LABEL_55:
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, v39, (uint8_t *)&__p, v41);
    return;
  }
  long long v20 = a1 + 28;
  uint64_t v21 = (void *)a1[28];
  if (!v21)
  {
    do
    {
      uint64_t v29 = (void *)v20[2];
      BOOL v42 = *v29 == (void)v20;
      long long v20 = v29;
    }
    while (v42);
    goto LABEL_41;
  }
  uint64_t v22 = a1 + 28;
  uint64_t v23 = a1[28];
  do
  {
    int v24 = *(_DWORD *)(v23 + 32);
    BOOL v25 = v24 < v19;
    if (v24 >= v19) {
      double v26 = (uint64_t *)v23;
    }
    else {
      double v26 = (uint64_t *)(v23 + 8);
    }
    if (!v25) {
      uint64_t v22 = (void *)v23;
    }
    uint64_t v23 = *v26;
  }
  while (*v26);
  if (v22 == v20)
  {
    do
    {
      uint64_t v29 = v21;
      uint64_t v21 = (void *)v21[1];
    }
    while (v21);
LABEL_41:
    uint64_t v28 = v29[5];
    goto LABEL_42;
  }
  uint64_t v27 = v22[5];
  if (!v27)
  {
    if (qword_10047BED8 == -1)
    {
      uint64_t v38 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_1004645A0);
      uint64_t v38 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return;
      }
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v19;
    uint64_t v39 = "Failed to find a floor with floor number < %d";
    goto LABEL_34;
  }
  uint64_t v28 = v27 - 1;
LABEL_42:
  uint64_t v36 = *(void *)(a1[27] + 40);
LABEL_43:
  uint64_t v43 = 3;
  if (a5) {
    uint64_t v43 = 15;
  }
  unint64_t v44 = sub_1002B43C8((uint64_t)&a1[v43], v36, v28, a2, a9);
  if (v44 >= (uint64_t)(a1[1] - *a1) >> 4) {
    sub_1001F352C();
  }
  uint64_t v45 = (uint64_t *)(*a1 + 16 * v44);
  int v46 = sub_1002AE39C(v13, a10, v44, a3, *v45, a7, a6);
  if (v46)
  {
    long long v47 = *(_OWORD *)v45;
    *(_OWORD *)(a8 + 8) = *(_OWORD *)v45;
    if (*((void *)&v47 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)a8 = 1;
  }
  if (qword_10047BED8 == -1)
  {
    uint64_t v48 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    goto LABEL_52;
  }
  dispatch_once(&qword_10047BED8, &stru_1004645A0);
  uint64_t v48 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_52:
    uint64_t v49 = (*(uint64_t (**)(void))(*(void *)*v45 + 56))();
    uint64_t v50 = (void *)(v49 + 8);
    if (*(char *)(v49 + 31) < 0) {
      uint64_t v50 = (void *)*v50;
    }
    int v51 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v45 + 56))() + 1616);
    LODWORD(__p.__r_.__value_.__l.__data_) = 67109891;
    HIDWORD(__p.__r_.__value_.__r.__words[0]) = v19;
    LOWORD(__p.__r_.__value_.__r.__words[1]) = 2081;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v50;
    WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = v51;
    __int16 v56 = 1024;
    int v57 = v46;
    uint64_t v39 = "Transitioning from %d, find a floor %{private}s with %d with walkability = %d";
    unint64_t v40 = v48;
    uint32_t v41 = 30;
    goto LABEL_55;
  }
}

void sub_1002AE308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002AE34C(_Unwind_Exception *a1)
{
  sub_1001FAD1C(v1);
  _Unwind_Resume(a1);
}

void sub_1002AE360(_Unwind_Exception *a1)
{
  sub_1001FAD1C(v1);
  _Unwind_Resume(a1);
}

void sub_1002AE374(_Unwind_Exception *a1)
{
  sub_1001FAD1C(v1);
  _Unwind_Resume(a1);
}

void sub_1002AE388(_Unwind_Exception *a1)
{
  sub_1001FAD1C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AE39C(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  sub_1001E4CDC(a6, a4, a5, (uint64_t)v15);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 48))(v11) & a7)
  {
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, double, double))(*(void *)v13 + 16))(v13, v15[1] + a1, v15[2] + a2) & 1;
  }
  nullsub_17(v15);
  return v12;
}

void sub_1002AE4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002AE4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_1002AE4D0(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, double a7, double a8)
{
  uint64_t v15 = 3;
  if (a4) {
    uint64_t v15 = 15;
  }
  uint64_t v16 = (uint64_t)&a1[v15];
  float v17 = (*(float (**)(uint64_t))(*(void *)a2 + 32))(a2);
  unint64_t v18 = sub_1002B4398(v16, v17);
  if (v18 >= (a1[1] - *a1) >> 4) {
    sub_1001F352C();
  }
  int v19 = (uint64_t *)(*a1 + 16 * v18);
  int v20 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*v19 + 56))() + 1616);
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 56))(a3);
  int v22 = *(_DWORD *)(v21 + 1616);
  if (v20 == v22)
  {
    uint64_t v23 = (const void ***)(*(uint64_t (**)(void))(*(void *)*v19 + 64))();
    int v24 = (unsigned __int8 ***)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 64))(a3);
    uint64_t v25 = sub_1001982CC(v23, v24);
    if v25 && (sub_1002AE39C(a7, a8, v25, a3, *v19, a6, a5)) {
      return v19;
    }
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, 2);
    BOOL v26 = v21 != 0;
    uint64_t v27 = a1 + 28;
    uint64_t v28 = a1[28];
    if (!v28) {
      return v19;
    }
  }
  else
  {
    BOOL v26 = v20 > v22;
    uint64_t v27 = a1 + 28;
    uint64_t v28 = a1[28];
    if (!v28) {
      return v19;
    }
  }
  uint64_t v29 = v27;
  do
  {
    int v30 = *(_DWORD *)(v28 + 32);
    BOOL v31 = v30 < v22;
    if (v30 >= v22) {
      uint64_t v32 = (uint64_t *)v28;
    }
    else {
      uint64_t v32 = (uint64_t *)(v28 + 8);
    }
    if (!v31) {
      uint64_t v29 = (void *)v28;
    }
    uint64_t v28 = *v32;
  }
  while (*v32);
  if (v29 != v27 && v22 >= *((_DWORD *)v29 + 8))
  {
    if (v26)
    {
      int v33 = (void *)v29[1];
      if (v33)
      {
        do
        {
          BOOL v34 = v33;
          int v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          BOOL v34 = (void *)v29[2];
          BOOL v35 = *v34 == (void)v29;
          uint64_t v29 = v34;
        }
        while (!v35);
      }
    }
    else
    {
      BOOL v34 = v29;
    }
    if (v34 != v27)
    {
      unint64_t v36 = v34[5] - !v26;
      if (v26) {
        int v37 = 1;
      }
      else {
        int v37 = -1;
      }
      while (1)
      {
        uint64_t v38 = *a1;
        if (v36 >= (a1[1] - *a1) >> 4) {
          break;
        }
        unint64_t v39 = v36;
        uint64_t v21 = sub_1002AE39C(a7, a8, v21, a3, *(void *)(v38 + 16 * v36), a6, a5);
        unint64_t v36 = (int)v39 + v37;
        if (v21) {
          return (uint64_t *)(v38 + 16 * v39);
        }
      }
    }
  }
  return v19;
}

void sub_1002AE794(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  std::runtime_error::runtime_error(&v12, a1);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_100464678;
  uint64_t v13 = off_1004646A0;
  sub_1002B317C((uint64_t)&v18, (uint64_t)&v12);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  int v21 = a4;
  uint64_t v9 = *(const void **)a5;
  size_t v10 = *(void *)(a5 + 8) - *(void *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      sub_1000A9108();
    }
    std::string __p = operator new(v10);
    memcpy(__p, v9, v10);
  }
  sub_1002B2E20();
}

void sub_1002AEAA0(void *a1)
{
  std::runtime_error::~runtime_error(v1);
  sub_1000A6954(a1);
}

void sub_1002AEAB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    operator delete(__p);
    sub_1000A6954(a1);
  }
  sub_1000A6954(a1);
}

void sub_1002AEADC(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

uint64_t sub_1002AEB6C(void *a1)
{
  sub_1002AEBBC(a1);
  double v2 = sub_1002A5A98(v1 * 0.5) * 1000000000.0;
  uint64_t v3 = (uint64_t)v2;
  if (v2 > (double)(uint64_t)v2) {
    ++v3;
  }
  if (v3 <= 1) {
    return 1;
  }
  else {
    return v3;
  }
}

void sub_1002AEBBC(void *a1)
{
  double v2 = (uint64_t *)sub_1002B4464((uint64_t)(a1 + 15));
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  double v5 = 0.0;
  double v6 = 0.0;
  while (v3 != v4)
  {
    if (*(void *)v3 >= (unint64_t)((uint64_t)(a1[1] - *a1) >> 4)) {
      sub_1001F352C();
    }
    double v7 = *(double *)(v3 + 8);
    uint64_t v8 = (void *)(*(uint64_t (**)(void))(**(void **)(*a1 + 16 * *(void *)v3) + 40))(*(void *)(*a1 + 16 * *(void *)v3));
    if (*v8)
    {
      if (((*(uint64_t (**)(void))(*(void *)*v8 + 40))(*v8) & 1) == 0)
      {
        double v6 = v6 + (*(double (**)(void))(*(void *)*v8 + 120))() * v7;
        double v5 = v5 + v7;
      }
    }
    v3 += 16;
  }
}

void sub_1002AECDC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, int a14, uint64_t a15, void *a16)
{
  uint64_t v23 = sub_100065654();
  int v24 = v23;
  unsigned __int8 v25 = atomic_load((unsigned __int8 *)v23 + 20);
  if ((v25 & 1) == 0 && !*((unsigned char *)v23 + 16))
  {
    *((unsigned char *)v23 + 17) = sub_100059C20((uint64_t)v23, (unsigned char *)v23 + 9);
    *((unsigned char *)v24 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v24 + 20);
    uint64_t v27 = a15;
    BOOL v26 = a16;
    int v28 = a14;
    if (*((unsigned char *)v24 + 17)) {
      goto LABEL_4;
    }
LABEL_6:
    double v83 = 0.5;
    double v31 = 0.5;
    goto LABEL_7;
  }
  uint64_t v27 = a15;
  BOOL v26 = a16;
  int v28 = a14;
  if (!*((unsigned char *)v23 + 17)) {
    goto LABEL_6;
  }
LABEL_4:
  sub_1000629E4((uint64_t)v96, v27);
  double v29 = sub_1002AF578(a1, a2, a4, a8, v28, (uint64_t)v96, v26, a10, a11);
  double v83 = v30;
  double v31 = v29;
  sub_100062BB4((uint64_t)v96);
LABEL_7:
  uint64_t v32 = sub_1000656E4();
  int v33 = v32;
  unsigned __int8 v34 = atomic_load((unsigned __int8 *)v32 + 20);
  if ((v34 & 1) == 0 && !*((unsigned char *)v32 + 16))
  {
    BOOL v38 = sub_100059C20((uint64_t)v32, (unsigned char *)v32 + 9);
    *((unsigned char *)v33 + 17) = v38;
    *((unsigned char *)v33 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v33 + 20);
    if (v38) {
      goto LABEL_10;
    }
LABEL_12:
    double v81 = 0.5;
    double v37 = 0.5;
    goto LABEL_13;
  }
  if (!*((unsigned char *)v32 + 17)) {
    goto LABEL_12;
  }
LABEL_10:
  sub_1000629E4((uint64_t)v95, v27);
  double v35 = sub_1002AF578(a1, a3, a4, a8, v28, (uint64_t)v95, v26, a12, a13);
  double v81 = v36;
  double v37 = v35;
  sub_100062BB4((uint64_t)v95);
LABEL_13:
  int64x2_t v94 = vdupq_n_s64(0x7FF4000000000000uLL);
  if (a8 == 2 || !*(unsigned char *)a5)
  {
    __asm { FMOV            V0.2D, #0.5 }
    int64x2_t v94 = _Q0;
    goto LABEL_30;
  }
  sub_1000776C4(v91, a1);
  sub_100148A04((uint64_t)v91, buf);
  sub_1001AA12C((uint64_t)v90, a5 + 40);
  sub_1001486EC((uint64_t)buf, (uint64_t)v90, (uint64_t)&v92);
  sub_100148878((uint64_t)&v92, (uint64_t)v86);
  nullsub_15(v90);
  unint64_t v39 = *(std::__shared_weak_count **)&v106[2];
  if (*(void *)&v106[2]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v106[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
  unint64_t v40 = *(std::__shared_weak_count **)&v104[6];
  if (*(void *)&v104[6]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v104[6] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  nullsub_15(buf);
  sub_100074A24(v91);
  sub_1001A9C7C((uint64_t)v89, (uint64_t)v86);
  double v41 = sub_10036F658(a1, (uint64_t)v89, 1, 1);
  nullsub_17(v89);
  double v42 = *(double *)(a5 + 104);
  if (qword_10047BED8 == -1)
  {
    uint64_t v43 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_23:
      uint64_t v44 = *(void *)(a5 + 48);
      double v45 = *(double *)(a5 + 56);
      uint64_t v46 = a1 + 8;
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v46 = *(void *)(a1 + 8);
      }
      *(_DWORD *)std::string buf = 134284803;
      uint64_t v98 = v44;
      __int16 v99 = 2049;
      double v100 = v45;
      __int16 v101 = 2048;
      double v102 = v87;
      __int16 v103 = 2048;
      *(void *)uint64_t v104 = v88;
      *(_WORD *)&v104[8] = 2048;
      *(double *)&v104[10] = v41;
      __int16 v105 = 2081;
      *(void *)unint64_t v106 = v46;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "lat,lng %{private}.8f,%{private}.8f is x,y %f,%f is %f m outside of %{private}s", buf, 0x3Eu);
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_1004645A0);
    uint64_t v43 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_23;
    }
  }
  double v47 = sub_1000D790C(v41, v42);
  if (v26) {
    sub_1001A5114((uint64_t)v26, v41);
  }
  *(double *)v94.i64 = 1.0 - v47;
  *(double *)&v94.i64[1] = v47;
  nullsub_17(v86);
LABEL_30:
  sub_1002A1888(*a4, a1, (uint64_t)v86);
  sub_1002B5F30(*a6, (uint64_t)v86, (uint64_t)&v92);
  sub_1002AA2B8(*a7, (uint64_t)&v94, (uint64_t)&v84);
  double v53 = a12;
  double v54 = v31;
  double v55 = v31 * v37 * *(double *)&v94.i64[1];
  double v56 = v83 * v81 * *(double *)v94.i64;
  double v57 = v55 / (v55 + v56);
  double v58 = v56 / (v55 + v56);
  double v59 = v58;
  double v60 = v57;
  if (v93)
  {
    double v61 = *(double *)(*a6 + 16);
    double v62 = *(double *)(*a6 + 24);
    if (v58 > v61) {
      double v61 = v58;
    }
    double v63 = 1.0 / v61 + -1.0;
    if (*(double *)&v92 > v62) {
      double v62 = *(double *)&v92;
    }
    *(double *)&long long v92 = v62;
    *((double *)&v92 + 1) = 1.0 - v62;
    double v59 = 1.0 / (v63 * (1.0 - v62) / v62 + 1.0);
    double v60 = 1.0 - v59;
  }
  if (v85)
  {
    double v64 = *(double *)(*a7 + 16);
    double v65 = *(double *)(*a7 + 24);
    if (v59 > v64) {
      double v64 = v59;
    }
    double v66 = 1.0 / v64 + -1.0;
    if (*(double *)&v84 > v65) {
      double v65 = *(double *)&v84;
    }
    *(double *)&long long v84 = v65;
    *((double *)&v84 + 1) = 1.0 - v65;
    double v59 = 1.0 / (v66 * (1.0 - v65) / v65 + 1.0);
    double v60 = 1.0 - v59;
  }
  if (qword_10047BED8 == -1)
  {
    unint64_t v67 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_51;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_1004645A0);
    unint64_t v67 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_51;
    }
  }
  uint64_t v70 = *(void *)(a1 + 8);
  uint64_t v69 = a1 + 8;
  uint64_t v68 = v70;
  if (*(char *)(v69 + 23) >= 0) {
    uint64_t v68 = v69;
  }
  uint64_t v71 = *((void *)&v92 + 1);
  uint64_t v72 = 0x7FF4000000000000;
  if (!v93) {
    uint64_t v71 = 0x7FF4000000000000;
  }
  if (v85) {
    uint64_t v72 = *((void *)&v84 + 1);
  }
  *(_DWORD *)std::string buf = 136384259;
  uint64_t v98 = v68;
  __int16 v99 = 2049;
  double v100 = v60;
  __int16 v101 = 2049;
  double v102 = v59;
  __int16 v103 = 2048;
  *(double *)uint64_t v104 = a10;
  *(_WORD *)&v104[8] = 2048;
  *(double *)&v104[10] = a11;
  __int16 v105 = 2048;
  *(double *)unint64_t v106 = v53;
  *(_WORD *)&v106[8] = 2048;
  double v107 = a13;
  __int16 v108 = 2048;
  double v109 = v54;
  __int16 v110 = 2048;
  double v111 = v83;
  __int16 v112 = 2048;
  double v113 = v37;
  __int16 v114 = 2048;
  double v115 = v81;
  __int16 v116 = 2049;
  uint64_t v117 = v94.i64[1];
  __int16 v118 = 2049;
  uint64_t v119 = v94.i64[0];
  __int16 v120 = 2050;
  uint64_t v121 = v71;
  __int16 v122 = 2050;
  uint64_t v123 = v72;
  _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "id %{private}s p('xIn')= %{private}f p('xOut')=%{private}f indoorSurveyMinWiFi=%f indoorSurveyMeanWiFi=%f indoorSurveyMinBeacon=%f indoorSurveyMeanBeacon=%f p(z_w|'xIn')=%f p(z_w|'xOut')=%f p(z_b|'xIn')=%f p(z_b|'xOut')=%f p('xIn'|z_g)=%{private}f p('xOut'|z_g)=%{private}f p('xIn'|z_z)=%{public}f p('xIn'|z_oe)=%{public}f", buf, 0x98u);
LABEL_51:
  double v73 = v54;
  double v74 = v83 + v54;
  double v75 = v73 / v74;
  if (v26)
  {
    sub_10019FAB4((uint64_t)v26, v73 / v74);
    sub_1001A5128((uint64_t)v26, *(double *)&v94.i64[1]);
    sub_1001A510C((uint64_t)v26, a10);
    sub_10019FAAC((uint64_t)v26, a11);
  }
  *(double *)a9 = v59;
  *(double *)(a9 + 8) = v60;
  *(int64x2_t *)(a9 + 16) = v94;
  *(double *)(a9 + 32) = v83 / v74;
  *(double *)(a9 + 40) = v75;
  *(double *)(a9 + 48) = v81 / (v81 + v37);
  *(double *)(a9 + 56) = v37 / (v81 + v37);
  *(_OWORD *)(a9 + 64) = v92;
  *(unsigned char *)(a9 + 80) = v93;
  *(_OWORD *)(a9 + 88) = v84;
  *(unsigned char *)(a9 + 104) = v85;
  sub_1002AA1F0(*a7, a9 + 112);
  *(double *)(a9 + 136) = v58;
  *(double *)(a9 + 144) = v57;
  *(unsigned char *)(a9 + 152) = 1;
}

void sub_1002AF464(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1002AEE7CLL);
  }
  _Unwind_Resume(a1);
}

double sub_1002AF578(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5, uint64_t a6, void *a7, double a8, double a9)
{
  double v46 = a9;
  double v47 = a8;
  int v17 = sub_1002A1678(*a3, a1);
  std::runtime_error v18 = (void *)sub_10009C404(*a3);
  double v45 = sub_10031AA38(v17, a2, v18, a6, 0, a7);
  if ((*(void *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    sub_1000AE4B0(v49, "");
    sub_1002B3BA4("Invalid cumulative coarse indoor weight: %f; this value must be finite!", &buf);
    sub_10016452C(&v45, (std::string *)&v52);
    sub_10016A2C4((uint64_t)v49, (uint64_t)&buf, 2);
    if ((v56[3] & 0x80000000) != 0)
    {
      operator delete(v52);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_38:
        if ((v50 & 0x80000000) == 0) {
          goto LABEL_39;
        }
LABEL_42:
        operator delete(v49[0]);
LABEL_39:
        sub_1000D11E0((uint64_t)__p);
      }
    }
    else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_38;
    }
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_42;
  }
  if (a5 == 1)
  {
    double v27 = exp(v45 - v47);
    if (v27 == INFINITY) {
      double v9 = 1.0;
    }
    else {
      double v9 = v27;
    }
    if (v27 == INFINITY) {
      double v28 = 0.0;
    }
    else {
      double v28 = 1.0;
    }
    if (qword_10047BED8 == -1)
    {
      uint64_t v29 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return v9;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_1004645A0);
      uint64_t v29 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return v9;
      }
    }
    std::string::size_type v32 = *(void *)(a1 + 8);
    std::string::size_type v31 = a1 + 8;
    std::string::size_type v30 = v32;
    if (*(char *)(v31 + 23) >= 0) {
      std::string::size_type v30 = v31;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316419;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v30;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
    *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v45;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    uint64_t v52 = *(void **)&v47;
    __int16 v53 = 2048;
    double v54 = v9;
    __int16 v55 = 2048;
    *(double *)double v56 = v28;
    *(_WORD *)&v56[8] = 2048;
    *(double *)&v56[10] = v9 / (v9 + v28);
    int v33 = "id %s: scanCount=%{private}f 50%%indoorProbWeight=%f indoorOutdoorOdds=%f:%f indoorProbThroughLogistic=%f";
    unsigned __int8 v34 = v29;
    uint32_t v35 = 62;
    goto LABEL_34;
  }
  if (!a5)
  {
    double v9 = 0.5 / v46;
    double v44 = v46 * (0.5 / v46);
    if (fabs(v44 + -0.5) < 0.000001)
    {
      double v19 = v9 * v47;
      double v20 = v46 - v47;
      double v21 = v9 * (v46 - v47);
      double v42 = v21;
      double v43 = v9 * v47;
      if (fabs(v9 * v47 + v21 + -0.5) < 0.000001)
      {
        double v22 = v19 + v21 * 0.5;
        if (fabs(v22 + 1.0 - v22 + -1.0) >= 0.000001)
        {
          sub_1000AE4B0(v49, "");
          sub_10026F5B8("The outdoor PDF area should be 1! (First)", &buf);
          sub_10016A2C4((uint64_t)v49, (uint64_t)&buf, 1);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (v50 < 0) {
            operator delete(v49[0]);
          }
          sub_1000D11E0((uint64_t)__p);
        }
        double v23 = v9 + (1.0 - v22 + 1.0 - v22) / v47;
        double v24 = -(v23 - v9) / v47;
        double v25 = -v9 / v20;
        if (fabs(v19+ v20 * (v25 * v47 - v25 * v46 - (v25 * v46 - v25 * v46)) * 0.5+ v47 * (v23 + v24 * 0.0 - (v23 + v24 * v47)) * 0.5+ -1.0) >= 0.00001)
        {
          sub_1000AE4B0(v49, "");
          sub_10024F040("The outdoor PDF area should be 1! (Second)", &buf);
          sub_10016A2C4((uint64_t)v49, (uint64_t)&buf, 1);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (v50 < 0) {
            operator delete(v49[0]);
          }
          sub_1000D11E0((uint64_t)__p);
        }
        double v26 = 0.5;
        if (a4 == 1)
        {
          double v9 = 0.5;
        }
        else if (v45 >= v47)
        {
          if (v45 > v46 || v47 > v45) {
            double v26 = 0.0;
          }
          else {
            double v26 = v25 * v45 - v25 * v46;
          }
        }
        else
        {
          double v26 = v23 + v24 * v45;
        }
        if (qword_10047BED8 != -1)
        {
          dispatch_once(&qword_10047BED8, &stru_1004645A0);
          uint64_t v37 = qword_10047BEE0;
          if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
            return v9;
          }
          goto LABEL_31;
        }
        uint64_t v37 = qword_10047BEE0;
        if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
        {
LABEL_31:
          std::string::size_type v40 = *(void *)(a1 + 8);
          std::string::size_type v39 = a1 + 8;
          std::string::size_type v38 = v40;
          if (*(char *)(v39 + 23) >= 0) {
            std::string::size_type v38 = v39;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136383235;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v38;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
          *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v45;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          uint64_t v52 = *(void **)&v47;
          __int16 v53 = 2048;
          double v54 = v46;
          __int16 v55 = 2048;
          *(double *)double v56 = v9;
          *(_WORD *)&v56[8] = 2048;
          *(double *)&v56[10] = v26;
          __int16 v57 = 2048;
          double v58 = v44;
          *(_WORD *)double v59 = 2048;
          *(double *)&v59[2] = v24;
          __int16 v60 = 2048;
          double v61 = v23;
          __int16 v62 = 2048;
          *(double *)double v63 = v25;
          *(_WORD *)&v63[8] = 2048;
          double v64 = -(v25 * v46);
          int v33 = "id %{private}s: scanCount= %{private}f indoorSurveyMin= %f indoorSurveyMean= %f p(z_w|'xIn')= %f p(z_w|'"
                "xOut')= %f indoorUniformPDFValueBelowMean= %f outdoorPDFSlopeBelowMin= %f outdoorPDFYInterceptBelowMin=%"
                "f outdoorPDFSlopeBetweenMinAndMean=%f outdoorPDFYIntereceptBetweenMinAndMean=%f";
          unsigned __int8 v34 = v37;
          uint32_t v35 = 112;
LABEL_34:
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, v33, (uint8_t *)&buf, v35);
          return v9;
        }
        return v9;
      }
      sub_1000AE4B0(v49, "");
      sub_1002B3C44("The indoor PDF area below the mean should be 0.5! (1) indoorOnTileMean: %f, indoorOnTileMin: %f, indoorUinformPDFAreaBelowMin: %f, indoorUniformPDFAreaAboveMin: %f", &buf);
      sub_10016452C(&v46, (std::string *)&v52);
      sub_10016452C(&v47, (std::string *)&v56[4]);
      sub_10016452C(&v43, (std::string *)v59);
      sub_10016452C(&v42, (std::string *)&v63[2]);
      sub_10016A2C4((uint64_t)v49, (uint64_t)&buf, 5);
      if (v65 < 0)
      {
        operator delete(*(void **)&v63[2]);
        if ((v63[1] & 0x80000000) == 0)
        {
LABEL_53:
          if ((SHIBYTE(v58) & 0x80000000) == 0) {
            goto LABEL_54;
          }
          goto LABEL_77;
        }
      }
      else if ((v63[1] & 0x80000000) == 0)
      {
        goto LABEL_53;
      }
      operator delete(*(void **)v59);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
      {
LABEL_54:
        if ((v56[3] & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_78;
      }
LABEL_77:
      operator delete(*(void **)&v56[4]);
      if ((v56[3] & 0x80000000) == 0)
      {
LABEL_55:
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_56;
        }
        goto LABEL_79;
      }
LABEL_78:
      operator delete(v52);
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_56:
        if ((v50 & 0x80000000) == 0) {
          goto LABEL_57;
        }
LABEL_80:
        operator delete(v49[0]);
LABEL_57:
        sub_1000D11E0((uint64_t)__p);
      }
LABEL_79:
      operator delete(buf.__r_.__value_.__l.__data_);
      if ((v50 & 0x80000000) == 0) {
        goto LABEL_57;
      }
      goto LABEL_80;
    }
    sub_1000AE4B0(v49, "");
    sub_1002B3BF4("The indoor PDF area below the mean should be 0.5! (0) indoorOnTileMean: %f, indoorOnTileMin: %f, indoorUniformPDFAreaBelowMean: %f", &buf);
    sub_10016452C(&v46, (std::string *)&v52);
    sub_10016452C(&v47, (std::string *)&v56[4]);
    sub_10016452C(&v44, (std::string *)v59);
    sub_10016A2C4((uint64_t)v49, (uint64_t)&buf, 4);
    if ((v63[1] & 0x80000000) != 0)
    {
      operator delete(*(void **)v59);
      if ((SHIBYTE(v58) & 0x80000000) == 0)
      {
LABEL_45:
        if ((v56[3] & 0x80000000) == 0) {
          goto LABEL_46;
        }
        goto LABEL_72;
      }
    }
    else if ((SHIBYTE(v58) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(*(void **)&v56[4]);
    if ((v56[3] & 0x80000000) == 0)
    {
LABEL_46:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_47;
      }
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v52);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_47:
      if ((v50 & 0x80000000) == 0) {
        goto LABEL_48;
      }
LABEL_74:
      operator delete(v49[0]);
LABEL_48:
      sub_1000D11E0((uint64_t)__p);
    }
LABEL_73:
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_74;
  }
  return v9;
}

void sub_1002AFD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002AFE60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10036E050();
  double v9 = v8;
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)v8 + 20);
  if ((v10 & 1) != 0 || *((unsigned char *)v8 + 16))
  {
    uint64_t v11 = a2;
    if (!(*((unsigned __int8 *)v9 + 17) | *(unsigned __int8 *)(a1 + 1860))) {
      goto LABEL_4;
    }
LABEL_21:
    uint64_t v12 = sub_100235FBC(v11);
    if (*(unsigned char *)v12) {
      goto LABEL_5;
    }
LABEL_22:
    double v21 = 0.0;
    double v22 = 1.0;
    if (!a3) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  BOOL v23 = sub_100059C20((uint64_t)v8, (unsigned char *)v8 + 9);
  *((unsigned char *)v9 + 17) = v23;
  *((unsigned char *)v9 + 16) = 1;
  atomic_store(1u, (unsigned __int8 *)v9 + 20);
  uint64_t v11 = a2;
  if (v23 | *(unsigned __int8 *)(a1 + 1860)) {
    goto LABEL_21;
  }
LABEL_4:
  uint64_t v12 = (uint64_t)sub_100235F44(v11);
  if (!*(unsigned char *)v12) {
    goto LABEL_22;
  }
LABEL_5:
  sub_1000776C4(v30, a1);
  sub_100148A04((uint64_t)v30, buf);
  sub_1001AA12C((uint64_t)v29, v12 + 40);
  sub_1001486EC((uint64_t)buf, (uint64_t)v29, (uint64_t)v31);
  sub_100148878((uint64_t)v31, (uint64_t)v32);
  nullsub_15(v29);
  uint64_t v13 = *(std::__shared_weak_count **)&v44[2];
  if (*(void *)&v44[2]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v44[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)&v42[6];
  if (*(void *)&v42[6]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v42[6] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  nullsub_15(buf);
  sub_100074A24(v30);
  sub_1001A9C7C((uint64_t)v28, (uint64_t)v32);
  double v15 = sub_100370590((void *)a1, (uint64_t)v28, 1, 1, 1, 0.0);
  nullsub_17(v28);
  double v16 = *(double *)(v12 + 104);
  if (qword_10047BED8 == -1)
  {
    int v17 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_16;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_1004645A0);
    int v17 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_16;
    }
  }
  uint64_t v18 = *(void *)(v12 + 48);
  double v19 = *(double *)(v12 + 56);
  uint64_t v20 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v20 = *(void *)(a1 + 8);
  }
  *(_DWORD *)std::string buf = 134284803;
  uint64_t v36 = v18;
  __int16 v37 = 2049;
  double v38 = v19;
  __int16 v39 = 2048;
  double v40 = v33;
  __int16 v41 = 2048;
  *(void *)double v42 = v34;
  *(_WORD *)&v42[8] = 2048;
  *(double *)&v42[10] = v15;
  __int16 v43 = 2081;
  *(void *)double v44 = v20;
  _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "lat,lng (%{private}f, %{private}f) is x,y (%f,%f) is %f m outside of %{private}s", buf, 0x3Eu);
LABEL_16:
  double v21 = sub_1000D790C(v15, v16);
  if (a3) {
    sub_1001A5114(a3, v15);
  }
  double v22 = 1.0 - v21;
  nullsub_17(v32);
  if (a3) {
LABEL_23:
  }
    sub_1001A5128(a3, v21);
LABEL_24:
  if (qword_10047BED8 == -1)
  {
    double v24 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_29;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_1004645A0);
    double v24 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_29;
    }
  }
  uint64_t v27 = *(void *)(a1 + 8);
  uint64_t v26 = a1 + 8;
  uint64_t v25 = v27;
  if (*(char *)(v26 + 23) >= 0) {
    uint64_t v25 = v26;
  }
  *(_DWORD *)std::string buf = 136382211;
  uint64_t v36 = v25;
  __int16 v37 = 2049;
  double v38 = v21;
  __int16 v39 = 2049;
  double v40 = v22;
  __int16 v41 = 2049;
  *(double *)double v42 = v21;
  *(_WORD *)&v42[8] = 2049;
  *(double *)&v42[10] = v22;
  __int16 v43 = 2050;
  *(void *)double v44 = 0x7FF4000000000000;
  *(_WORD *)&v44[8] = 2050;
  uint64_t v45 = 0x7FF4000000000000;
  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "id %{private}s p('xIn')= %{private}f p('xOut')=%{private}f p('xIn'|z_g)=%{private}f p('xOut'|z_g)=%{private}f p('xIn'|z_z)=%{public}f p('xIn'|z_oe)=%{public}f", buf, 0x48u);
LABEL_29:
  *(double *)a4 = v22;
  *(double *)(a4 + 8) = v21;
  *(double *)(a4 + 16) = v22;
  *(double *)(a4 + 24) = v21;
  *(_OWORD *)(a4 + 32) = xmmword_1003F9A78;
  *(_OWORD *)(a4 + 48) = xmmword_1003F9A78;
  *(void *)(a4 + 64) = 0;
  *(unsigned char *)(a4 + 80) = 0;
  *(void *)(a4 + 88) = 0;
  *(unsigned char *)(a4 + 104) = 0;
  *(unsigned char *)(a4 + 112) = 0;
  *(unsigned char *)(a4 + 128) = 0;
  *(double *)(a4 + 136) = v22;
  *(double *)(a4 + 144) = v21;
  *(unsigned char *)(a4 + 152) = 1;
}

void sub_1002B02D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1002B0104);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B0378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  nullsub_15((uint64_t *)va);
  sub_100148DD8(v6 - 176);
  sub_100074A24(va1);
  _Unwind_Resume(a1);
}

BOOL sub_1002B039C(uint64_t a1, int a2, int a3)
{
  if (a3 == 1)
  {
    uint64_t v11 = *(void *)(a1 + 224);
    uint64_t v3 = a1 + 224;
    uint64_t v10 = v11;
    if (v11)
    {
      uint64_t v6 = v3;
      do
      {
        int v12 = *(_DWORD *)(v10 + 32);
        BOOL v13 = v12 < a2;
        if (v12 >= a2) {
          uint64_t v14 = (uint64_t *)v10;
        }
        else {
          uint64_t v14 = (uint64_t *)(v10 + 8);
        }
        if (!v13) {
          uint64_t v6 = v10;
        }
        uint64_t v10 = *v14;
      }
      while (*v14);
      return v6 != v3;
    }
  }
  else
  {
    if (a3) {
      return 0;
    }
    uint64_t v5 = *(void *)(a1 + 224);
    uint64_t v3 = a1 + 224;
    uint64_t v4 = v5;
    if (v5)
    {
      uint64_t v6 = v3;
      do
      {
        int v7 = *(_DWORD *)(v4 + 32);
        BOOL v8 = v7 <= a2;
        if (v7 <= a2) {
          double v9 = (uint64_t *)(v4 + 8);
        }
        else {
          double v9 = (uint64_t *)v4;
        }
        if (!v8) {
          uint64_t v6 = v4;
        }
        uint64_t v4 = *v9;
      }
      while (*v9);
      return v6 != v3;
    }
  }
  return 0;
}

uint64_t sub_1002B041C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unsigned char *a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = *a4;
  uint64_t v7 = a4[1];
  *(void *)(a1 + 32) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 40) = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 48) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)a5;
  *(void *)(a1 + 56) = a3;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  if (*a6)
  {
    sub_1001AB5F8(a1 + 88, a6 + 8);
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + 288) = 0;
  double v9 = (_OWORD *)(a1 + 352);
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10)
  {
    sub_10025F7D8(v10, a1 + 352);
  }
  else
  {
    *double v9 = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_DWORD *)(a1 + 384) = 1065353216;
  }
  sub_100258820((uint64_t)__p, a1 + 352);
  if (*(void *)(a1 + 376))
  {
    uint64_t v11 = *(void **)(a1 + 368);
    if (v11)
    {
      do
      {
        int v12 = (void *)*v11;
        operator delete(v11);
        uint64_t v11 = v12;
      }
      while (v12);
    }
    *(void *)(a1 + 368) = 0;
    uint64_t v13 = *(void *)(a1 + 360);
    if (v13)
    {
      for (uint64_t i = 0; i != v13; ++i)
        *(void *)(*(void *)v9 + 8 * i) = 0;
    }
    *(void *)(a1 + 376) = 0;
  }
  double v15 = __p[0];
  __p[0] = 0;
  double v16 = *(void **)v9;
  *(void *)double v9 = v15;
  if (v16) {
    operator delete(v16);
  }
  unint64_t v18 = (unint64_t)__p[1];
  int v17 = v43;
  __p[1] = 0;
  double v19 = v44[0];
  *(void *)(a1 + 368) = v43;
  *(void *)(a1 + 376) = v19;
  *(_DWORD *)(a1 + 384) = v44[1];
  *(void *)(a1 + 360) = v18;
  if (v19)
  {
    unint64_t v20 = v17[1];
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v20 >= v18) {
        v20 %= v18;
      }
    }
    else
    {
      v20 &= v18 - 1;
    }
    *(void *)(*(void *)v9 + 8 * v20) = a1 + 368;
    __int16 v43 = 0;
    v44[0] = 0;
  }
  else if (v17)
  {
    do
    {
      double v21 = (void *)*v17;
      operator delete(v17);
      int v17 = v21;
    }
    while (v21);
  }
  double v22 = __p[0];
  __p[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  *(void *)(a1 + 16) = 0;
  if (*(void *)(a1 + 64)) {
    return a1;
  }
  __int16 v39 = 0;
  double v40 = 0;
  uint64_t v41 = 0;
  uint64_t v36 = 0;
  __int16 v37 = 0;
  uint64_t v38 = 0;
  sub_100232A94((uint64_t *)__p, (uint64_t)&v39, (uint64_t *)&v36, *(void *)(a1 + 56));
  if (*(unsigned char *)(a1 + 288))
  {
    __n128 v23 = sub_1002B3C94((__n128 *)(a1 + 288), (uint64_t)__p);
    if (v44[0])
    {
      v44[1] = v44[0];
      operator delete(v44[0]);
    }
    double v24 = (char *)__p[0];
    if (!__p[0])
    {
LABEL_35:
      uint64_t v25 = (char *)v36;
      if (!v36) {
        goto LABEL_36;
      }
LABEL_52:
      for (j = v37; j != v25; j -= 88)
      {
        if (*(j - 48)) {
          *(j - 48) = 0;
        }
      }
      __int16 v37 = v25;
      operator delete(v25);
      uint64_t v26 = v39;
      if (v39) {
        goto LABEL_37;
      }
      return a1;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 296) = *(_OWORD *)__p;
    *(void *)(a1 + 312) = v43;
    __p[0] = 0;
    __p[1] = 0;
    __n128 v23 = *(__n128 *)v44;
    *(_OWORD *)(a1 + 320) = *(_OWORD *)v44;
    __int16 v43 = 0;
    v44[0] = 0;
    uint64_t v28 = v45;
    uint64_t v29 = v46;
    v44[1] = 0;
    uint64_t v45 = 0;
    *(void *)(a1 + 336) = v28;
    *(void *)(a1 + 344) = v29;
    *(unsigned char *)(a1 + 288) = 1;
    double v24 = (char *)__p[0];
    if (!__p[0]) {
      goto LABEL_35;
    }
  }
  std::string::size_type v30 = (char *)__p[1];
  std::string::size_type v31 = v24;
  if (__p[1] != v24)
  {
    std::string::size_type v32 = (char *)__p[1] - 168;
    do
    {
      int v34 = *((_DWORD *)v30 - 44);
      if (v34 == v34 >> 31)
      {
        if (*(v30 - 128)) {
          *(v30 - 128) = 0;
        }
      }
      else
      {
        uint64_t v33 = *((void *)v30 - 21);
        if (v34 < 0)
        {
          if (v33) {
            (*(void (**)(uint64_t, __n128))(*(void *)v33 + 8))(v33, v23);
          }
        }
        else
        {
          (*(void (**)(char *))v33)(v30 - 168);
        }
      }
      v30 -= 208;
      v32 -= 208;
    }
    while (v30 != v24);
    std::string::size_type v31 = (char *)__p[0];
  }
  __p[1] = v24;
  operator delete(v31);
  uint64_t v25 = (char *)v36;
  if (v36) {
    goto LABEL_52;
  }
LABEL_36:
  uint64_t v26 = v39;
  if (v39)
  {
LABEL_37:
    double v40 = v26;
    operator delete(v26);
  }
  return a1;
}

void sub_1002B07A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15)
{
  sub_10023357C(&a15);
  sub_1002B083C((char **)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100258574(v20);
  sub_1002585C0(v19);
  if (*(unsigned char *)(v15 + 80))
  {
    sub_1000A45A0(v15 + 88);
    *(unsigned char *)(v15 + 80) = 0;
  }
  sub_1000BA884(v18);
  sub_1000BA884(v17);
  sub_1000BA884(v16);
  sub_1000BA884(v15);
  _Unwind_Resume(a1);
}

char **sub_1002B083C(char **a1)
{
  double v2 = *a1;
  if (v2)
  {
    for (uint64_t i = a1[1]; i != v2; i -= 88)
    {
      if (*(i - 48)) {
        *(i - 48) = 0;
      }
    }
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002B0898(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 288))
  {
    sub_10023BDF4(a2, (uint64_t *)(a1 + 296));
  }
  else
  {
    (*(void (**)(char **__return_ptr))(**(void **)(a1 + 64) + 16))(&v26);
    double v24 = 0;
    uint64_t v25 = 0;
    __n128 v23 = 0;
    int64_t v4 = v27 - v26;
    if (v27 != v26)
    {
      uint64_t v5 = v4 / 208;
      if ((unint64_t)(v4 / 208) >> 61) {
        sub_1000A9108();
      }
      __n128 v23 = operator new(8 * v5);
      uint64_t v25 = (char *)v23 + 8 * v5;
      memset_pattern16(v23, &unk_1003F7A00, 8 * v5);
      double v24 = v25;
    }
    sub_100232C1C(&v18, &v23, &v26, *(void *)(a1 + 56));
    if (*(unsigned char *)(a1 + 288))
    {
      if ((void **)(a1 + 296) != &v18)
      {
        sub_1002618D8((uint64_t *)(a1 + 296), (uint64_t)v18, (uint64_t)v19, 0x4EC4EC4EC4EC4EC5 * ((v19 - (unsigned char *)v18) >> 4));
        sub_10007C388((void *)(a1 + 320), (char *)__p, v21, (v21 - (unsigned char *)__p) >> 3);
      }
      *(void *)(a1 + 344) = v22;
    }
    else
    {
      sub_10023BDF4((void *)(a1 + 296), (uint64_t *)&v18);
      *(unsigned char *)(a1 + 288) = 1;
    }
    sub_10023BDF4(a2, (uint64_t *)(a1 + 296));
    if (__p)
    {
      double v21 = (char *)__p;
      operator delete(__p);
    }
    uint64_t v6 = (char *)v18;
    if (v18)
    {
      uint64_t v7 = v19;
      uint64_t v8 = v18;
      if (v19 != v18)
      {
        double v9 = v19 - 168;
        do
        {
          int v11 = *((_DWORD *)v7 - 44);
          if (v11 == v11 >> 31)
          {
            if (*(v7 - 128)) {
              *(v7 - 128) = 0;
            }
          }
          else
          {
            uint64_t v10 = *((void *)v7 - 21);
            if (v11 < 0)
            {
              if (v10) {
                (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
              }
            }
            else
            {
              (*(void (**)(char *))v10)(v7 - 168);
            }
          }
          v7 -= 208;
          v9 -= 208;
        }
        while (v7 != v6);
        uint64_t v8 = v18;
      }
      uint64_t v19 = v6;
      operator delete(v8);
    }
    if (v23)
    {
      double v24 = v23;
      operator delete(v23);
    }
    int v12 = v26;
    if (v26)
    {
      uint64_t v13 = v27;
      uint64_t v14 = v26;
      if (v27 != v26)
      {
        uint64_t v15 = v27 - 168;
        do
        {
          int v17 = *((_DWORD *)v13 - 44);
          if (v17 == v17 >> 31)
          {
            if (*(v13 - 128)) {
              *(v13 - 128) = 0;
            }
          }
          else
          {
            uint64_t v16 = *((void *)v13 - 21);
            if (v17 < 0)
            {
              if (v16) {
                (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
              }
            }
            else
            {
              (*(void (**)(char *))v16)(v13 - 168);
            }
          }
          v13 -= 208;
          v15 -= 208;
        }
        while (v13 != v12);
        uint64_t v14 = v26;
      }
      uint64_t v27 = v12;
      operator delete(v14);
    }
  }
}

void sub_1002B0BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1002329B0((void **)(v18 - 56));
  _Unwind_Resume(a1);
}

void sub_1002B0BFC(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
void sub_1002B1FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12)
{
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B20CC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1002B2948(a1, a2, a3, a4);
  int v10 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a5 + 56))() + 1616);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a4 + 56))();
  if (v10 < *(_DWORD *)(result + 1616))
  {
    uint64_t v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    uint64_t v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    int v14 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a4 + 56))() + 1616);
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 56))();
    if (v14 < *(_DWORD *)(result + 1616))
    {
      uint64_t v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      uint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      int v17 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a3 + 56))() + 1616);
      uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 56))();
      if (v17 < *(_DWORD *)(result + 1616))
      {
        uint64_t v18 = *a2;
        *a2 = *a3;
        *a3 = v18;
        uint64_t v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        int v20 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 56))() + 1616);
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 56))();
        if (v20 < *(_DWORD *)(result + 1616))
        {
          uint64_t v21 = *a1;
          *a1 = *a2;
          *a2 = v21;
          uint64_t v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1002B2310(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 56))() + 1616);
  int v7 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a1 + 56))() + 1616);
  int v8 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a3 + 56))() + 1616);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 56))();
  int v10 = *(_DWORD *)(result + 1616);
  if (v6 < v7)
  {
    uint64_t v11 = *a1;
    if (v8 >= v10)
    {
      *a1 = *a2;
      *a2 = v11;
      uint64_t v19 = a1[1];
      a1[1] = a2[1];
      a2[1] = v19;
      int v20 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a3 + 56))() + 1616);
      uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 56))();
      if (v20 >= *(_DWORD *)(result + 1616)) {
        return result;
      }
      uint64_t v21 = *a2;
      *a2 = *a3;
      *a3 = v21;
      uint64_t v12 = a3 + 1;
      uint64_t v13 = a2 + 1;
    }
    else
    {
      *a1 = *a3;
      *a3 = v11;
      uint64_t v12 = a3 + 1;
      uint64_t v13 = a1 + 1;
    }
    uint64_t v16 = v12;
    goto LABEL_10;
  }
  if (v8 < v10)
  {
    uint64_t v14 = *a2;
    *a2 = *a3;
    *a3 = v14;
    uint64_t v16 = a2 + 1;
    uint64_t v15 = a2[1];
    a2[1] = a3[1];
    a3[1] = v15;
    int v17 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 56))() + 1616);
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 56))();
    if (v17 < *(_DWORD *)(result + 1616))
    {
      uint64_t v18 = *a1;
      *a1 = *a2;
      uint64_t v13 = a1 + 1;
      *a2 = v18;
LABEL_10:
      uint64_t v22 = *v13;
      *uint64_t v13 = *v16;
      *uint64_t v16 = v22;
    }
  }
  return result;
}

BOOL sub_1002B256C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*(a2 - 2) + 56))(*(a2 - 2)) + 1616);
      if (v6 >= *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a1 + 56))() + 1616)) {
        return 1;
      }
      uint64_t v7 = *a1;
      *a1 = *(a2 - 2);
      *(a2 - 2) = v7;
      uint64_t v8 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v8;
      return 1;
    case 3:
      sub_1002B2310(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1002B2948(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1002B20CC(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      double v9 = a1 + 4;
      sub_1002B2310(a1, a1 + 2, a1 + 4);
      int v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    int v13 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)*v10 + 56))(*v10) + 1616);
    if (v13 < *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)*v9 + 56))(*v9) + 1616))
    {
      long long v25 = *(_OWORD *)v10;
      uint64_t *v10 = 0;
      v10[1] = 0;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        long long v16 = *(_OWORD *)((char *)a1 + v14 + 32);
        *((void *)v15 + 4) = 0;
        *((void *)v15 + 5) = 0;
        int v17 = *(std::__shared_weak_count **)((char *)a1 + v14 + 56);
        *((_OWORD *)v15 + 3) = v16;
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        uint64_t v18 = v25;
        if (v14 == -32) {
          break;
        }
        int v19 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)v25 + 56))(v25) + 1616);
        uint64_t v20 = (*(uint64_t (**)(void))(**(void **)((char *)a1 + v14 + 16) + 56))(*(uint64_t *)((char *)a1 + v14 + 16));
        v14 -= 16;
        if (v19 >= *(_DWORD *)(v20 + 1616))
        {
          uint64_t v21 = (uint64_t *)((char *)a1 + v14 + 48);
          uint64_t v22 = *((void *)&v25 + 1);
          long long v26 = 0uLL;
          uint64_t v23 = *(std::__shared_weak_count **)((char *)a1 + v14 + 56);
          *uint64_t v21 = v18;
          v21[1] = v22;
          if (!v23) {
            goto LABEL_20;
          }
          goto LABEL_18;
        }
      }
      uint64_t v24 = *((void *)&v25 + 1);
      long long v26 = 0uLL;
      uint64_t v23 = (std::__shared_weak_count *)a1[1];
      *a1 = v18;
      a1[1] = v24;
      if (!v23) {
        goto LABEL_20;
      }
LABEL_18:
      if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
LABEL_20:
      if (*((void *)&v26 + 1))
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void))(**((void **)&v26 + 1) + 16))(*((void *)&v26 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
        }
      }
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    double v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

void sub_1002B291C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002B2948(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  sub_1002B2310(a1, a2, a3);
  int v8 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a4 + 56))() + 1616);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 56))();
  if (v8 < *(_DWORD *)(result + 1616))
  {
    uint64_t v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    uint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    int v12 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a3 + 56))() + 1616);
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 56))();
    if (v12 < *(_DWORD *)(result + 1616))
    {
      uint64_t v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      int v15 = *(_DWORD *)((*(uint64_t (**)(void))(*(void *)*a2 + 56))() + 1616);
      uint64_t result = (*(uint64_t (**)(void))(*(void *)*a1 + 56))();
      if (v15 < *(_DWORD *)(result + 1616))
      {
        uint64_t v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
        uint64_t v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

void sub_1002B2B08(void ***a1)
{
  double v1 = *a1;
  double v2 = (char *)**a1;
  if (!v2) {
    return;
  }
  uint64_t v4 = (char *)v1[1];
  BOOL v5 = **a1;
  if (v4 == v2) {
    goto LABEL_14;
  }
  do
  {
    int v6 = (std::__shared_weak_count *)*((void *)v4 - 3);
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 6);
      if (!v7) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 6);
      if (!v7) {
        goto LABEL_4;
      }
    }
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
LABEL_4:
    v4 -= 56;
  }
  while (v4 != v2);
  BOOL v5 = **a1;
LABEL_14:
  v1[1] = v2;

  operator delete(v5);
}

void sub_1002B2C30(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_1002B2C60(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_1004646C0;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = off_1004645D8;
  *(void *)(a1 + 16) = off_100464610;
  *(void *)(a1 + 56) = &off_100464648;
  return a1;
}

void sub_1002B2D80(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002B2D94(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

void sub_1002B2E20()
{
}

void sub_1002B30BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000CD2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B30D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000CD238((uint64_t)va);
  sub_1000CD2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002B30EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 16))(a14);
    if (atomic_fetch_add(a14 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 24))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B317C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_1004646C0;
  uint64_t v5 = (uint64_t)&v4[1];
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)a1 = off_1004645D8;
  *(void *)(a1 + 16) = off_100464610;
  *(void *)(a1 + 56) = &off_100464648;
  sub_1000A6FDC(v5, a2 + 16);
  return a1;
}

void sub_1002B32A8(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002B32BC(_Unwind_Exception *a1)
{
  sub_1002B32D0(v1);
  _Unwind_Resume(a1);
}

void sub_1002B32D0(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

void sub_1002B335C(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete();
}

void sub_1002B33FC()
{
}

void sub_1002B3458()
{
}

void sub_1002B347C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002B2C60((uint64_t)exception, a1);
}

void sub_1002B34C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002B34D8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1002B3560(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete();
}

void sub_1002B35FC()
{
}

void sub_1002B366C()
{
}

void sub_1002B3690(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002B2C60((uint64_t)exception, v1);
}

void sub_1002B36EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002B3700(void *a1)
{
  uint64_t v1 = (std::runtime_error *)((char *)a1 + *(void *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    v1[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(v1);
}

void sub_1002B37A0(void *a1)
{
  uint64_t v1 = (std::runtime_error *)((char *)a1 + *(void *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);

  operator delete();
}

void sub_1002B3854(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete();
}

void sub_1002B38F4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1002B397C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete();
}

void sub_1002B3A18(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete();
}

uint64_t sub_1002B3A50(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_1004646C0;
  uint64_t v5 = (uint64_t)&v4[1];
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)a1 = off_1004645D8;
  *(void *)(a1 + 16) = off_100464610;
  *(void *)(a1 + 56) = &off_100464648;
  sub_1000A6FDC(v5, a2 + 16);
  return a1;
}

void sub_1002B3B7C(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002B3B90(_Unwind_Exception *a1)
{
  sub_1002B32D0(v1);
  _Unwind_Resume(a1);
}

std::string *sub_1002B3BA4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002B3BD8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1002B3BF4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002B3C28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1002B3C44@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002B3C78(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1002B3C94(__n128 *a1, uint64_t a2)
{
  uint64_t v4 = (void **)&a1->n128_u64[1];
  uint64_t v5 = a1->n128_i64[1];
  if (v5)
  {
    uint64_t v6 = a1[1].n128_i64[0];
    long long v7 = (void *)a1->n128_u64[1];
    if (v6 != v5)
    {
      uint64_t v8 = v6 - 168;
      do
      {
        int v10 = *(_DWORD *)(v6 - 176);
        if (v10 == v10 >> 31)
        {
          if (*(unsigned char *)(v6 - 128)) {
            *(unsigned char *)(v6 - 128) = 0;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(v6 - 168);
          if (v10 < 0)
          {
            if (v9) {
              (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
            }
          }
          else
          {
            (*(void (**)(uint64_t))v9)(v6 - 168);
          }
        }
        v6 -= 208;
        v8 -= 208;
      }
      while (v6 != v5);
      long long v7 = *v4;
    }
    a1[1].n128_u64[0] = v5;
    operator delete(v7);
    *uint64_t v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(__n128 *)((char *)a1 + 8) = *(__n128 *)a2;
  a1[1].n128_u64[1] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v11 = (void *)a1[2].n128_u64[0];
  if (v11)
  {
    a1[2].n128_u64[1] = (unint64_t)v11;
    operator delete(v11);
    a1[2].n128_u64[0] = 0;
    a1[2].n128_u64[1] = 0;
    a1[3].n128_u64[0] = 0;
  }
  __n128 result = *(__n128 *)(a2 + 24);
  a1[2] = result;
  unint64_t v13 = *(void *)(a2 + 48);
  a1[3].n128_u64[0] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[3].n128_u64[1] = v13;
  return result;
}

void sub_1002B3DDC()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002B3E54()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002B3ECC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_1000A9108();
    }
    long long v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  *(void *)(a1 + 32) = 0;
  uint64_t v9 = (double **)(a1 + 32);
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v60 = (void **)(a1 + 48);
  uint64_t v61 = (void **)(a1 + 24);
  int v59 = (void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  double v63 = 0;
  BOOL v64 = 0;
  uint64_t v65 = 0;
  int v10 = *(const void **)a2;
  int64_t v11 = *(void *)(a2 + 8) - *(void *)a2;
  if (v11)
  {
    if (v11 < 0) {
      sub_1000A9108();
    }
    int v12 = (double *)operator new(v11);
    unint64_t v13 = &v12[v11 >> 3];
    double v63 = v12;
    uint64_t v65 = v13;
    memcpy(v12, v10, v11);
    BOOL v64 = v13;
  }
  sub_100357EA4(&v63);
  uint64_t v14 = v63;
  __int16 v62 = v64;
  if (v63 != v64)
  {
    uint64_t v15 = 0;
    double v16 = 0.0;
    while (1)
    {
      double v18 = *v14;
      double v16 = v16 + *v14;
      int v19 = *v9;
      uint64_t v20 = (double **)(a1 + 32);
      uint64_t v21 = (double **)(a1 + 32);
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v21 = (double **)v19;
            double v22 = v19[4];
            if (v16 >= v22) {
              break;
            }
            int v19 = *(double **)v19;
            uint64_t v20 = v21;
            if (!*v21) {
              goto LABEL_18;
            }
          }
          if (v22 >= v16) {
            break;
          }
          int v19 = (double *)*((void *)v19 + 1);
          if (!v19)
          {
            uint64_t v20 = v21 + 1;
            goto LABEL_18;
          }
        }
      }
      else
      {
LABEL_18:
        uint64_t v23 = (double *)operator new(0x30uLL);
        v23[4] = v16;
        *((void *)v23 + 5) = v15;
        *uint64_t v23 = 0.0;
        v23[1] = 0.0;
        *((void *)v23 + 2) = v21;
        *uint64_t v20 = v23;
        uint64_t v24 = (void *)**v61;
        if (v24)
        {
          *uint64_t v61 = v24;
          uint64_t v23 = *v20;
        }
        sub_1000619B8(*(uint64_t **)(a1 + 32), (uint64_t *)v23);
        ++*(void *)(a1 + 40);
      }
      long long v26 = *(double **)(a1 + 56);
      unint64_t v25 = *(void *)(a1 + 64);
      if ((unint64_t)v26 < v25)
      {
        *(void *)long long v26 = v15;
        v26[1] = v18;
        uint64_t v27 = v26 + 2;
        goto LABEL_35;
      }
      uint64_t v28 = (double *)*v60;
      uint64_t v29 = ((char *)v26 - (unsigned char *)*v60) >> 4;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60) {
        sub_1000A9108();
      }
      uint64_t v31 = v25 - (void)v28;
      if (v31 >> 3 > v30) {
        unint64_t v30 = v31 >> 3;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32 >> 60) {
LABEL_61:
      }
        sub_1000A6A10();
      uint64_t v33 = (char *)operator new(16 * v32);
      long long v34 = (double *)&v33[16 * v29];
      *(void *)long long v34 = v15;
      v34[1] = v18;
      if (v26 == v28)
      {
        __int16 v57 = &v33[16 * v32];
        uint64_t v27 = v34 + 2;
        *(void *)(a1 + 48) = v34;
        *(void *)(a1 + 56) = v34 + 2;
        *(void *)(a1 + 64) = v57;
        if (v28) {
          goto LABEL_34;
        }
      }
      else
      {
        uint32_t v35 = &v33[16 * v29];
        do
        {
          uint64_t v36 = v35 - 16;
          *((_OWORD *)v35 - 1) = *((_OWORD *)v26 - 1);
          v26 -= 2;
          v35 -= 16;
        }
        while (v26 != v28);
        BOOL v37 = &v33[16 * v32];
        uint64_t v27 = v34 + 2;
        *(void *)(a1 + 48) = v36;
        *(void *)(a1 + 56) = v34 + 2;
        *(void *)(a1 + 64) = v37;
        if (v28) {
LABEL_34:
        }
          operator delete(v28);
      }
LABEL_35:
      *(void *)(a1 + 56) = v27;
      uint64_t v39 = *(double **)(a1 + 80);
      unint64_t v38 = *(void *)(a1 + 88);
      if ((unint64_t)v39 >= v38)
      {
        int v40 = (double *)*v59;
        uint64_t v41 = (char *)v39 - (unsigned char *)*v59;
        uint64_t v42 = v41 >> 3;
        unint64_t v43 = (v41 >> 3) + 1;
        if (v43 >> 61) {
          sub_1000A9108();
        }
        uint64_t v44 = v38 - (void)v40;
        if (v44 >> 2 > v43) {
          unint64_t v43 = v44 >> 2;
        }
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v43;
        }
        if (v45)
        {
          if (v45 >> 61) {
            goto LABEL_61;
          }
          uint64_t v46 = operator new(8 * v45);
          int v47 = (double *)&v46[8 * v42];
          *int v47 = v16;
          uint64_t v17 = (uint64_t)(v47 + 1);
          if (v39 == v40) {
            goto LABEL_53;
          }
LABEL_47:
          unint64_t v48 = (char *)(v39 - 1) - (char *)v40;
          if (v48 < 0x58) {
            goto LABEL_68;
          }
          if ((unint64_t)((char *)v39 - &v46[v41]) < 0x20) {
            goto LABEL_68;
          }
          uint64_t v49 = (v48 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          int v51 = &v39[v50 / 0xFFFFFFFFFFFFFFF8];
          int v47 = (double *)((char *)v47 - v50);
          uint64_t v52 = &v46[8 * v42 - 16];
          int v53 = v39 - 2;
          uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v55 = *(_OWORD *)v53;
            *(v52 - 1) = *((_OWORD *)v53 - 1);
            _OWORD *v52 = v55;
            v52 -= 2;
            v53 -= 4;
            v54 -= 4;
          }
          while (v54);
          uint64_t v39 = v51;
          if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_68:
            do
            {
              uint64_t v56 = *((void *)v39-- - 1);
              *((void *)v47-- - 1) = v56;
            }
            while (v39 != v40);
          }
        }
        else
        {
          uint64_t v46 = 0;
          int v47 = (double *)(8 * v42);
          *(double *)(8 * v42) = v16;
          uint64_t v17 = 8 * v42 + 8;
          if (v39 != v40) {
            goto LABEL_47;
          }
        }
LABEL_53:
        *(void *)(a1 + 72) = v47;
        *(void *)(a1 + 80) = v17;
        *(void *)(a1 + 88) = &v46[8 * v45];
        if (v40) {
          operator delete(v40);
        }
        goto LABEL_10;
      }
      *uint64_t v39 = v16;
      uint64_t v17 = (uint64_t)(v39 + 1);
LABEL_10:
      *(void *)(a1 + 80) = v17;
      ++v15;
      if (++v14 == v62)
      {
        uint64_t v14 = v63;
        break;
      }
    }
  }
  if (v14)
  {
    BOOL v64 = v14;
    operator delete(v14);
  }
  return a1;
}

void sub_1002B4304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v17 = *a10;
    if (!*a10)
    {
LABEL_3:
      double v18 = *a11;
      if (!*a11) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v17 = *a10;
    if (!*a10) {
      goto LABEL_3;
    }
  }
  *(void *)(v15 + 80) = v17;
  operator delete(v17);
  double v18 = *a11;
  if (!*a11)
  {
LABEL_5:
    sub_10006A9DC(a12, *(void **)(v15 + 32));
    int v19 = *(void **)v15;
    if (*(void *)v15)
    {
      *(void *)(v15 + 8) = v19;
      operator delete(v19);
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(void *)(v15 + 56) = v18;
  operator delete(v18);
  goto LABEL_5;
}

uint64_t sub_1002B4398(uint64_t a1, float a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v2 = a1 + 32;
  uint64_t v3 = v4;
  if (v4)
  {
    double v5 = a2;
    do
    {
      int64_t v6 = (uint64_t *)(v3 + 8);
      if (*(double *)(v3 + 32) >= v5)
      {
        int64_t v6 = (uint64_t *)v3;
        uint64_t v2 = v3;
      }
      uint64_t v3 = *v6;
    }
    while (*v6);
  }
  return *(void *)(v2 + 40);
}

uint64_t sub_1002B43C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t v6 = *(void *)(a1 + 72);
  if (a2)
  {
    a5.n128_u64[0] = *(void *)(v6 + 8 * a2 - 8);
    a5.n128_f32[0] = a5.n128_f64[0];
  }
  else
  {
    a5.n128_u64[0] = 0;
  }
  float v7 = *(double *)(v6 + 8 * a3);
  (*(void (**)(uint64_t, __n128, float))(*(void *)a4 + 40))(a4, a5, v7);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = a1 + 32;
  uint64_t v9 = v11;
  if (v11)
  {
    double v12 = v8;
    do
    {
      unint64_t v13 = (uint64_t *)(v9 + 8);
      if (*(double *)(v9 + 32) >= v12)
      {
        unint64_t v13 = (uint64_t *)v9;
        uint64_t v10 = v9;
      }
      uint64_t v9 = *v13;
    }
    while (*v13);
  }
  return *(void *)(v10 + 40);
}

uint64_t sub_1002B4464(uint64_t a1)
{
  return a1 + 48;
}

void sub_1002B446C()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002B44E4()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void **sub_1002B455C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v3 - 3);
        v3 -= 24;
        double v5 = v6;
        if (v6) {
          operator delete(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1002B45C8(uint64_t a1)
{
  return a1;
}

double sub_1002B45F4(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 64) + 64);
}

int32x2_t sub_1002B4600@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)(a1 + 64))
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v7);
  }
  uint64_t v4 = *(void *)(a1 + 120);
  *(void *)a3 = *(void *)(a1 + 112);
  *(void *)(a3 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a3 + 16) = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 144);
  *(void *)(a3 + 24) = *(void *)(a1 + 136);
  *(void *)(a3 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 152);
  return sub_1001E288C(a3, a2);
}

void sub_1002B46DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B46F8(_Unwind_Exception *a1)
{
  sub_1001E28D0(v1);
  _Unwind_Resume(a1);
}

double sub_1002B470C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)(a1 + 64))
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v6);
  }
  uint64_t v4 = (unsigned int *)sub_1001E2DAC(a3, (uint64_t *)(a1 + 64));
  return sub_1001E3230(v4, a2);
}

void sub_1002B47B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B47CC(_Unwind_Exception *a1)
{
  sub_1001E31A4(v1);
  _Unwind_Resume(a1);
}

void sub_1002B47E0(uint64_t a1@<X0>, int **a2@<X1>, void *a3@<X8>)
{
  std::string __p = 0;
  double v16 = 0;
  uint64_t i = 0;
  uint64_t v6 = *a2;
  float v7 = a2[1];
  if (v7 != *a2)
  {
    unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * (((char *)v7 - (char *)*a2) >> 4);
    if (v8 >> 59) {
      sub_1000A9108();
    }
    char v9 = operator new(0xD89D89D89D89D8A0 * (((char *)v7 - (char *)*a2) >> 4));
    std::string __p = v9;
    double v16 = v9;
    for (uint64_t i = &v9[8 * v8]; v6 != v7; v6 += 52)
    {
      while (v9 >= i)
      {
        char v9 = sub_1001E77C4(&__p, v6);
        double v16 = v9;
        v6 += 52;
        if (v6 == v7) {
          goto LABEL_12;
        }
      }
      uint64_t v10 = v9 + 2;
      double v12 = v6 + 2;
      int v11 = *v6;
      if (v11 == v11 >> 31)
      {
        void *v10 = *v12;
        int v13 = v11;
      }
      else
      {
        long long v14 = *(_OWORD *)v12;
        v9[6] = v6[6];
        *(_OWORD *)uint64_t v10 = v14;
        int v13 = *v6;
        int v11 = *v6 >> 31;
      }
      *char v9 = v13 ^ v11;
      v9 += 8;
      double v16 = v9;
    }
  }
LABEL_12:
  (*(void (**)(void, void **))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &__p);
  if (0x4EC4EC4EC4EC4EC5 * (((char *)a2[1] - (char *)*a2) >> 4) != (uint64_t)(a3[1] - *a3) >> 4)
  {
    sub_1000AE4B0(v19, "");
    sub_1002AAB0C("Number of results returned does not match number of inputs", &v21);
    sub_10016A2C4((uint64_t)v19, (uint64_t)&v21, 1);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    sub_1000D11E0((uint64_t)&v18);
  }
  if (__p)
  {
    double v16 = __p;
    operator delete(__p);
  }
}

void sub_1002B4A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1000D8DD8(v24);
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_1002B4A78(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  sub_1002B5478(&__p, *(void **)(a2 + 16), 0);
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 16))(v5, &__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(void *)(a2 + 24) != (uint64_t)(a3[1] - *a3) >> 4)
  {
    sub_1000AE4B0(v7, "");
    sub_1002AAB0C("Number of results returned does not match number of inputs", &__p);
    sub_10016A2C4((uint64_t)v7, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    sub_1000D11E0((uint64_t)&v6);
  }
}

void sub_1002B4BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1000D8DD8(v20);
    _Unwind_Resume(a1);
  }
  sub_1000D8DD8(v20);
  _Unwind_Resume(a1);
}

void sub_1002B4C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B4C34(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 24))(v2, v5);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_1002B4D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002822E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002B4DB0(uint64_t a1@<X0>, double *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = (double **)a1;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  BOOL v8 = sub_100358A2C(a2, (double *)(a1 + 80));
  char v9 = v6[8];
  v6 += 8;
  int v10 = sub_10014FD64(v9);
  int v11 = sub_10014FC2C(*v6);
  LODWORD(v31[0]) = v10;
  int v39 = v11;
  sub_1000741D0(v38, v31, &v39);
  int v13 = v38[0];
  int v12 = v38[1];
  sub_100073188(&v32, v6);
  unint64_t v34 = 0;
  if (a3)
  {
    if (a3 != 1) {
      goto LABEL_32;
    }
    int v14 = 0;
    if (!v13) {
      goto LABEL_32;
    }
  }
  else
  {
    int v14 = v13 - 1;
    int v13 = -1;
    a3 = -1;
    if (v14 == -1) {
      goto LABEL_32;
    }
  }
  if (v12 >= 1)
  {
    if (v8)
    {
      unint64_t v15 = a4[1];
      do
      {
        for (int i = 0; i != v12; ++i)
        {
          while (1)
          {
            unint64_t v34 = __PAIR64__(v14, i);
            *(double *)&long long v37 = (double)i;
            *((double *)&v37 + 1) = (double)v14;
            if (v15 < a4[2]) {
              break;
            }
            unint64_t v15 = sub_1002B55A0(a4, (uint64_t)&v32);
            a4[1] = v15;
            if (v12 == ++i) {
              goto LABEL_9;
            }
          }
          *(void *)unint64_t v15 = v32;
          uint64_t v17 = v33;
          *(void *)(v15 + 8) = v33;
          int v18 = v14;
          int v19 = i;
          if (v17)
          {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            int v19 = v34;
            int v18 = HIDWORD(v34);
          }
          *(_DWORD *)(v15 + 16) = v19;
          *(_DWORD *)(v15 + 20) = v18;
          *(void *)(v15 + 24) = v35;
          char v20 = v36;
          *(void *)(v15 + 32) = v36;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(_OWORD *)(v15 + 40) = v37;
          v15 += 56;
          a4[1] = v15;
        }
LABEL_9:
        v14 += a3;
      }
      while (v14 != v13);
    }
    else
    {
      do
      {
        for (int j = 0; j != v12; ++j)
        {
          unint64_t v34 = __PAIR64__(v14, j);
          *(double *)&long long v37 = (double)j;
          *((double *)&v37 + 1) = (double)v14;
          v31[0] = sub_10014BB64(&v32);
          v31[1] = v23;
          v31[2] = v24;
          v31[3] = v25;
          if (sub_100358348(v31, a2))
          {
            unint64_t v26 = a4[1];
            if (v26 >= a4[2])
            {
              uint64_t v22 = sub_1002B55A0(a4, (uint64_t)&v32);
            }
            else
            {
              *(void *)unint64_t v26 = v32;
              uint64_t v27 = v33;
              *(void *)(v26 + 8) = v33;
              if (v27) {
                atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(void *)(v26 + 16) = v34;
              *(void *)(v26 + 24) = v35;
              uint64_t v28 = v36;
              *(void *)(v26 + 32) = v36;
              if (v28) {
                atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(_OWORD *)(v26 + 40) = v37;
              uint64_t v22 = v26 + 56;
            }
            a4[1] = v22;
          }
        }
        v14 += a3;
      }
      while (v14 != v13);
    }
  }
LABEL_32:
  uint64_t v29 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  unint64_t v30 = v33;
  if (v33)
  {
    if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1002B50BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1002B2B08((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1002B50D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1002B2B08((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1002B50EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1002B2B08((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1002B5104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001E28D0((uint64_t)va);
  sub_1002B2B08((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1002B5130(uint64_t a1)
{
  sub_1002B51C4(a1);

  operator delete();
}

__n128 sub_1002B5168@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 24);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 40);
  return result;
}

uint64_t sub_1002B517C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

double sub_1002B5184(uint64_t a1)
{
  return *(double *)(a1 + 176);
}

double sub_1002B518C(uint64_t a1)
{
  return *(double *)(a1 + 184);
}

uint64_t sub_1002B5194(uint64_t a1)
{
  return a1 + 192;
}

uint64_t sub_1002B519C(uint64_t a1)
{
  return a1 + 248;
}

uint64_t sub_1002B51A4(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_1002B51AC(uint64_t a1)
{
  return *(void *)(a1 + 352);
}

uint64_t sub_1002B51B8(uint64_t a1)
{
  return *(void *)(a1 + 368);
}

uint64_t sub_1002B51C4(uint64_t a1)
{
  *(void *)a1 = off_1004646E8;
  sub_10006A9DC(a1 + 328, *(void **)(a1 + 336));
  uint64_t v2 = *(void **)(a1 + 304);
  if (v2) {
    operator delete(v2);
  }
  sub_100320B04(a1 + 248);
  sub_100320B04(a1 + 192);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 144);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 120);
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 120);
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v6) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v6) {
      goto LABEL_15;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_15:
  float v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

int *sub_1002B53BC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
LABEL_4:
  }
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
LABEL_5:

  return sub_100052AEC((int *)a1);
}

void *sub_1002B5478(void *a1, void *a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    size_t v6 = 0;
    unint64_t v7 = -1;
    BOOL v8 = a2;
    do
    {
      BOOL v8 = (void *)*v8;
      ++v7;
      v6 += 32;
    }
    while (v8 != a3);
    if (v7 >= 0x7FFFFFFFFFFFFFFLL) {
      sub_1000A9108();
    }
    char v9 = (char *)operator new(v6);
    uint64_t v10 = 0;
    *a1 = v9;
    a1[1] = v9;
    a1[2] = &v9[v6];
    do
    {
      while (1)
      {
        int v12 = (int *)&v9[v10];
        int v13 = &v9[v10 + 8];
        int v14 = (long long *)(v5 + 3);
        if (*((_DWORD *)v5 + 4) == *((int *)v5 + 4) >> 31) {
          break;
        }
        long long v11 = *v14;
        *(_DWORD *)&v9[v10 + 24] = *((_DWORD *)v5 + 10);
        *(_OWORD *)int v13 = v11;
        *int v12 = *((_DWORD *)v5 + 4) ^ (*((int *)v5 + 4) >> 31);
        uint64_t v5 = (void *)*v5;
        v10 += 32;
        if (v5 == a3) {
          goto LABEL_9;
        }
      }
      *(void *)int v13 = *(void *)v14;
      *int v12 = 0;
      uint64_t v5 = (void *)*v5;
      v10 += 32;
    }
    while (v5 != a3);
LABEL_9:
    a1[1] = &v9[v10];
  }
  return a1;
}

void sub_1002B5584(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B55A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_1000A9108();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      sub_1000A6A10();
    }
    unint64_t v7 = (char *)operator new(56 * v6);
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = (uint64_t)&v7[56 * v3];
    *(void *)uint64_t v9 = *(void *)a2;
    *(void *)(v9 + 8) = v8;
    if (v8) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = 56 * v3;
    *(void *)uint64_t v9 = *(void *)a2;
    *(void *)(v9 + 8) = v8;
    if (v8) {
LABEL_10:
    }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v9 + 16) = *(void *)(a2 + 16);
  uint64_t v10 = &v7[56 * v3];
  uint64_t v11 = *(void *)(a2 + 32);
  *((void *)v10 + 3) = *(void *)(a2 + 24);
  *((void *)v10 + 4) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  int v12 = &v7[56 * v6];
  *(_OWORD *)&v7[56 * v3 + 40] = *(_OWORD *)(a2 + 40);
  uint64_t v13 = v9 + 56;
  int v14 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
    if (!v15) {
      return v13;
    }
    goto LABEL_28;
  }
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = v9 + v16;
    int v18 = &v15[v16];
    *(_OWORD *)(v17 - 56) = *(_OWORD *)&v15[v16 - 56];
    *((void *)v18 - 7) = 0;
    *((void *)v18 - 6) = 0;
    *(void *)(v17 - 40) = *(void *)&v15[v16 - 40];
    *(_OWORD *)(v17 - 32) = *(_OWORD *)&v15[v16 - 32];
    *((void *)v18 - 4) = 0;
    *((void *)v18 - 3) = 0;
    *(_OWORD *)(v17 - 16) = *(_OWORD *)&v15[v16 - 16];
    v16 -= 56;
  }
  while (&v15[v16] != v14);
  int v19 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  *a1 = v9 + v16;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  if (v15 != v19)
  {
    while (1)
    {
      char v20 = (std::__shared_weak_count *)*((void *)v15 - 3);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        std::string v21 = (std::__shared_weak_count *)*((void *)v15 - 6);
        if (v21)
        {
LABEL_22:
          if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        std::string v21 = (std::__shared_weak_count *)*((void *)v15 - 6);
        if (v21) {
          goto LABEL_22;
        }
      }
      v15 -= 56;
      if (v15 == v19)
      {
        unint64_t v15 = v19;
        break;
      }
    }
  }
  if (v15) {
LABEL_28:
  }
    operator delete(v15);
  return v13;
}

void sub_1002B581C()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002B5894()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002B590C()
{
  qword_10047E0B8 = 0;
  unk_10047E0C0 = 0;
  qword_10047E0C8 = 0;
  __cxa_atexit((void (*)(void *))sub_1002B455C, &qword_10047E0B8, (void *)&_mh_execute_header);
  qword_10047E0D8 = 0;
  qword_10047E0D0 = (uint64_t)&qword_10047E0D8;
  qword_10047E0E0 = 0;

  return __cxa_atexit((void (*)(void *))sub_1002B45C8, &qword_10047E0D0, (void *)&_mh_execute_header);
}

void sub_1002B5994(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 48) != 4)
  {
    if (qword_10047BED8 == -1)
    {
      uint64_t v10 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT)) {
        return;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_1004647D0);
      uint64_t v10 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT)) {
        return;
      }
    }
    int v11 = *(_DWORD *)(a2 + 48);
    int v14 = 67240192;
    LODWORD(v15) = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Unsupported location type %{public}d passed in", (uint8_t *)&v14, 8u);
    return;
  }
  int v4 = *(_DWORD *)(a2 + 156);
  if ((v4 & 0x80) != 0)
  {
    double v5 = *(double *)(a2 + 64);
    if (v5 > 0.0 && v5 <= 8.0)
    {
      if (*(unsigned char *)(a1 + 56))
      {
        sub_100042F7C((void *)(a1 + 64));
        *(unsigned char *)(a1 + 56) = 0;
      }
      sub_1002B6300((uint64_t *)(a1 + 224), 0, 0, 0);
      uint64_t v12 = a1 + 64;
      if (*(unsigned char *)(a1 + 56))
      {
        sub_1001482E0(v12, a2);
      }
      else
      {
        sub_10001D800(v12, a2);
        *(unsigned char *)(a1 + 56) = 1;
      }
      return;
    }
  }
  if (!*(unsigned char *)(a1 + 56)) {
    return;
  }
  if ((v4 & 0x20) == 0)
  {
    if (qword_10047BED8 == -1)
    {
      unint64_t v7 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT))
      {
LABEL_12:
        uint64_t v8 = *(void *)(a2 + 16);
        if (!v8) {
          uint64_t v8 = *(void *)(qword_10047EB60 + 16);
        }
        uint64_t v9 = *(void *)(v8 + 16);
        int v14 = 134349056;
        uint64_t v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Missing altitude field for WiFi fix at %{public}f; this should never happen.",
          (uint8_t *)&v14,
          0xCu);
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_1004647D0);
      unint64_t v7 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT)) {
        goto LABEL_12;
      }
    }
    if (*(unsigned char *)(a1 + 56))
    {
      sub_100042F7C((void *)(a1 + 64));
      *(unsigned char *)(a1 + 56) = 0;
    }
    sub_1002B6300((uint64_t *)(a1 + 224), 0, 0, 0);
    return;
  }
  unint64_t v13 = *(void *)(a1 + 232);
  if (v13 >= *(void *)(a1 + 240))
  {
    *(void *)(a1 + 232) = sub_1002B60BC((void *)(a1 + 224), a2);
    if (!sub_1002B5CD4(a1)) {
      return;
    }
  }
  else
  {
    sub_10001D800(*(void *)(a1 + 232), a2);
    *(void *)(a1 + 232) = v13 + 160;
    *(void *)(a1 + 232) = v13 + 160;
    if (!sub_1002B5CD4(a1)) {
      return;
    }
  }
  if (*(unsigned char *)(a1 + 56))
  {
    sub_100042F7C((void *)(a1 + 64));
    *(unsigned char *)(a1 + 56) = 0;
  }

  sub_1002B6300((uint64_t *)(a1 + 224), 0, 0, 0);
}

void sub_1002B5CC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 232) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_1002B5CD4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 56)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v3 = *(void *)(a1 + 232);
  if (v2 == v3) {
    return 0;
  }
  double v4 = 0.0;
  do
  {
    sub_10001D800((uint64_t)&v15, v2);
    double v4 = v4 + v24;
    sub_100042F7C(&v15);
    v2 += 160;
  }
  while (v2 != v3);
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 232) - *(void *)(a1 + 224)) >> 5);
  double v6 = (double)v5;
  double v7 = sqrt(*(double *)(a1 + 128) * *(double *)(a1 + 128) / (double)v5);
  BOOL v8 = 1;
  if (v7 > 0.0)
  {
    double v9 = v4 / v6;
    double v10 = sub_10029A194(-vabdd_f64(v4 / v6, *(double *)(a1 + 120)) / v7);
    double v11 = *(double *)(a1 + 32) * 0.5;
    BOOL v8 = v10 < v11;
    if (qword_10047BED8 != -1)
    {
      dispatch_once(&qword_10047BED8, &stru_1004647D0);
      uint64_t v12 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return v8;
      }
      goto LABEL_8;
    }
    uint64_t v12 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_8:
      uint64_t v13 = *(void *)(a1 + 120);
      LODWORD(v15) = 67241216;
      HIDWORD(v15) = v10 < v11;
      __int16 v16 = 2050;
      unint64_t v17 = v5;
      __int16 v18 = 2050;
      double v19 = v9;
      __int16 v20 = 2050;
      double v21 = v7;
      __int16 v22 = 2050;
      uint64_t v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "reject null hypothesis, %{public}d, # of samples, %{public}lu, sample mean, %{public}f, sample std, %{public}f, last qualified altitude, %{public}f", (uint8_t *)&v15, 0x30u);
    }
  }
  return v8;
}

uint64_t *sub_1002B5EC4(uint64_t *result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 12) <= 1u)
  {
    uint64_t v2 = result;
    if (*((unsigned char *)result + 56))
    {
      sub_100042F7C(result + 8);
      *((unsigned char *)v2 + 56) = 0;
      return sub_1002B6300(v2 + 28, 0, 0, 0);
    }
  }
  return result;
}

void sub_1002B5F30(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a1 + 40)) {
    BOOL v4 = *(unsigned char *)(a2 + 32) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || !*(unsigned char *)(a1 + 56))
  {
    char v9 = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    double v5 = *(double *)(a1 + 128);
    if (v5 >= 0.0)
    {
      double v10 = *(double *)(a2 + 8);
      double v11 = *(double *)(a1 + 120);
      double v12 = *(double *)a2 + v10 * -0.5;
      double v13 = *(double *)a2 + v10 * 0.5;
      double v14 = -1.0;
      if (v11 <= *(double *)a2) {
        double v13 = v12;
      }
      else {
        double v14 = 1.0;
      }
      double v8 = sub_10029A194(-(v14 * (v11 - v13)) / v5);
      double v7 = 1.0 - v8;
    }
    else
    {
      if (qword_10047BED8 != -1) {
        dispatch_once(&qword_10047BED8, &stru_1004647D0);
      }
      double v6 = qword_10047BEE0;
      double v7 = 0.5;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_FAULT))
      {
        int v15 = 134349056;
        double v16 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Altitude estimate uncertainty is less than zero: %{public}f. Use uniform prior to continue", (uint8_t *)&v15, 0xCu);
      }
      double v8 = 0.5;
    }
    *(double *)a3 = v7;
    *(double *)(a3 + 8) = v8;
    char v9 = 1;
  }
  *(unsigned char *)(a3 + 16) = v9;
}

void sub_1002B608C(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_1002B60BC(void *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_1000A6A10();
    }
    double v7 = (char *)operator new(160 * v6);
  }
  else
  {
    double v7 = 0;
  }
  uint64_t v19 = (uint64_t)&v7[160 * v3];
  *((void *)&v20 + 1) = &v7[160 * v6];
  sub_10001D800(v19, a2);
  uint64_t v8 = 0;
  double v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_10001D800(v8 + v19, v8 + i))
    v8 -= 160;
  double v12 = (char *)*a1;
  double v11 = (char *)a1[1];
  *a1 = v19 + v8;
  *(void *)&long long v20 = v19 + 160;
  *(_OWORD *)(a1 + 1) = v20;
  if (v11 != v12)
  {
    double v13 = v11 - 160;
    double v14 = v11 - 160;
    int v15 = v11 - 160;
    do
    {
      double v16 = *(void (***)(char *))v15;
      v15 -= 160;
      (*v16)(v14);
      v13 -= 160;
      BOOL v17 = v14 == v12;
      double v14 = v15;
    }
    while (!v17);
  }
  if (v12) {
    operator delete(v12);
  }
  return v19 + 160;
}

void sub_1002B6250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002B6290((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B6290(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 160);
    *(void *)(a1 + 16) = i - 160;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_1002B6300(uint64_t *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = result[2];
  uint64_t v9 = *result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 5) < __sz)
  {
    if (v9)
    {
      uint64_t v10 = result[1];
      double v11 = (void *)*result;
      if (v10 != v9)
      {
        uint64_t v12 = v10 - 160;
        double v13 = (void (***)(void))(v10 - 160);
        double v14 = (void (***)(void))(v10 - 160);
        do
        {
          int v15 = *v14;
          v14 -= 20;
          (*v15)(v13);
          v12 -= 160;
          BOOL v16 = v13 == (void (***)(void))v9;
          double v13 = v14;
        }
        while (!v16);
        double v11 = *(void **)v7;
      }
      *(void *)(v7 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    if (__sz > 0x199999999999999) {
      goto LABEL_41;
    }
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    uint64_t v18 = 2 * v17;
    if (2 * v17 <= __sz) {
      uint64_t v18 = __sz;
    }
    unint64_t v19 = v17 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v18;
    if (v19 > 0x199999999999999) {
LABEL_41:
    }
      sub_1000A9108();
    uint64_t v20 = 20 * v19;
    __n128 result = (uint64_t *)operator new(160 * v19);
    double v21 = result;
    *(void *)uint64_t v7 = result;
    *(void *)(v7 + 8) = result;
    *(void *)(v7 + 16) = &result[v20];
    if (v6 != a3)
    {
      unint64_t v22 = 0;
      do
      {
        __n128 result = (uint64_t *)sub_10001D800((uint64_t)&v21[v22 / 8], v6 + v22);
        v22 += 160;
      }
      while (v6 + v22 != a3);
      double v21 = (uint64_t *)((char *)v21 + v22);
    }
    *(void *)(v7 + 8) = v21;
    return result;
  }
  uint64_t v23 = result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v23 - v9) >> 5) >= __sz)
  {
    if (a2 == a3)
    {
      uint64_t v28 = *result;
      if (v23 == v9)
      {
LABEL_40:
        *(void *)(v7 + 8) = v28;
        return result;
      }
    }
    else
    {
      uint64_t v28 = *result;
      do
      {
        __n128 result = (uint64_t *)sub_1001482E0(v9, v6);
        v6 += 160;
        v9 += 160;
        v28 += 160;
      }
      while (v6 != a3);
      uint64_t v23 = *(void *)(v7 + 8);
      if (v23 == v28) {
        goto LABEL_40;
      }
    }
    uint64_t v29 = v23 - 160;
    unint64_t v30 = (uint64_t (***)(void))(v23 - 160);
    uint64_t v31 = (uint64_t (***)(void))(v23 - 160);
    do
    {
      uint64_t v32 = *v31;
      v31 -= 20;
      __n128 result = (uint64_t *)(*v32)(v30);
      v29 -= 160;
      BOOL v16 = v30 == (uint64_t (***)(void))v28;
      unint64_t v30 = v31;
    }
    while (!v16);
    goto LABEL_40;
  }
  uint64_t v24 = a2 + 32 * ((v23 - v9) >> 5);
  if (v23 != v9)
  {
    uint64_t v25 = 32 * ((v23 - v9) >> 5);
    do
    {
      __n128 result = (uint64_t *)sub_1001482E0(v9, v6);
      v6 += 160;
      v9 += 160;
      v25 -= 160;
    }
    while (v25);
    uint64_t v9 = *(void *)(v7 + 8);
  }
  uint64_t v26 = v9;
  if (v24 != a3)
  {
    uint64_t v27 = 0;
    do
    {
      __n128 result = (uint64_t *)sub_10001D800(v9 + v27, v24 + v27);
      v27 += 160;
    }
    while (v24 + v27 != a3);
    uint64_t v26 = v9 + v27;
  }
  *(void *)(v7 + 8) = v26;
  return result;
}

void sub_1002B65C0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_1003A6D1C();
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_1002B6614()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002B668C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t *sub_1002B6704(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1001F74B8();
    operator delete();
  }
  return a1;
}

uint64_t sub_1002B674C(uint64_t a1)
{
  *(void *)a1 = off_100464800;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      if (v2) {
        goto LABEL_4;
      }
      return a1;
    }
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4)
  {
LABEL_4:
    sub_1001F74B8();
    operator delete();
  }
  return a1;
}

void sub_1002B67E8(uint64_t a1)
{
  *(void *)a1 = off_100464800;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      if (v2) {
        goto LABEL_4;
      }
      goto LABEL_5;
    }
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3)
  {
LABEL_4:
    sub_1001F74B8();
    operator delete();
  }
LABEL_5:

  operator delete();
}

void sub_1002B68A4(uint64_t a1, uint64_t a2)
{
}

void sub_1002B68AC(uint64_t a1)
{
}

void sub_1002B6910(uint64_t a1)
{
}

void sub_1002B6918(uint64_t a1)
{
}

void sub_1002B6920(uint64_t a1)
{
}

void sub_1002B6928(uint64_t a1)
{
}

void sub_1002B6930(uint64_t a1)
{
}

void sub_1002B6EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char *a29)
{
  if (__p) {
    operator delete(__p);
  }
  a29 = &a24;
  sub_10021CB64((void ***)&a29);
  _Unwind_Resume(a1);
}

void sub_1002B6F44(uint64_t a1, uint64_t a2)
{
  if (qword_10047BF08 == -1)
  {
    uint64_t v4 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BF08, &stru_1004649A0);
  uint64_t v4 = qword_10047BF10;
  if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT))
  {
LABEL_3:
    uint64_t v5 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
    *(_DWORD *)std::string buf = 134349056;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@TileEvict, exec, floors, %{public}zu", buf, 0xCu);
  }
LABEL_4:
  if (*(void *)a2 != *(void *)(a2 + 8)) {
    sub_1001F7A7C(*(void *)(a1 + 8), **(void **)a2);
  }
}

void sub_1002B70CC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1002B70D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = operator new(0x28uLL);
  void *v8 = off_1004649F8;
  v8[1] = a1;
  v8[2] = a2;
  void v8[3] = a3;
  v8[4] = a4;
  double v11 = v8;
  sub_100073A9C(a1, a2, (uint64_t)v10);
  uint64_t result = (uint64_t)v11;
  if (v11 == v10) {
    return (*(uint64_t (**)(void *))(v10[0] + 32))(v10);
  }
  if (v11) {
    return (*(uint64_t (**)(void))(*v11 + 40))();
  }
  return result;
}

void sub_1002B71F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F505C((uint64_t *)va);
  sub_1000D8DD8(v2);
  _Unwind_Resume(a1);
}

void sub_1002B720C(_Unwind_Exception *a1)
{
  sub_1000D8DD8(v1);
  _Unwind_Resume(a1);
}

void sub_1002B7220(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1002B7228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_100464B08;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  uint64_t v9 = v6;
  sub_100073A9C(a1, a2, (uint64_t)v8);
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

void sub_1002B7330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F505C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002B7344(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1002B743C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128)) {
    *(unsigned char *)(a1 + 128) = 0;
  }
  if (*(unsigned char *)(a1 + 112)) {
    *(unsigned char *)(a1 + 112) = 0;
  }
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
  if (*(unsigned char *)(a1 + 64)) {
    *(unsigned char *)(a1 + 64) = 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_1002B7500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a2;
  uint64_t v7 = nullsub_22(a3);
  if (*(char *)(v7 + 23) < 0)
  {
    sub_1000559FC(__p, *(void **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    uint64_t v12 = *(void *)(v7 + 16);
    *(_OWORD *)std::string __p = v8;
  }
  sub_1001F74F4("cfg_prefetch_import", *(void *)(a1 + 8), (uint64_t)v17);
  char v16 = 0;
  int v15 = 0;
  uint64_t v9 = operator new(0x28uLL);
  *uint64_t v9 = off_100464B88;
  v9[1] = a3;
  _DWORD v9[2] = a4;
  v9[3] = &v16;
  uint64_t v9[4] = &v13;
  int v15 = v9;
  sub_1002B7764(a1, v10, (const void **)__p, (uint64_t)v14);
}

void sub_1002B7720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002B7764(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  sub_1003734B0(a1 + 16, a3, (uint64_t)v7);
  uint64_t v6 = *(void *)(a4 + 24);
  if (v6)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v6 + 48))(__p);
    sub_10007CBC0(*(void *)(a1 + 8), (uint64_t)__p);
  }
  sub_10008F39C();
}

void sub_1002B79E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_1002B743C((uint64_t)va1);
  sub_100373950((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B7A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100373950((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1002B7A1C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_1002B7AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a4;
  uint64_t v15 = a2;
  uint64_t v8 = nullsub_22(a3);
  if (*(char *)(v8 + 23) < 0)
  {
    sub_1000559FC(__p, *(void **)v8, *(void *)(v8 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    uint64_t v13 = *(void *)(v8 + 16);
    *(_OWORD *)std::string __p = v9;
  }
  sub_1001F74F4("tile_prefetch_import", *(void *)(a1 + 8), (uint64_t)v20);
  char v19 = 0;
  char v18 = 0;
  unint64_t v17 = 0;
  uint64_t v10 = operator new(0x40uLL);
  void *v10 = off_100465010;
  v10[1] = a3;
  v10[2] = a5;
  void v10[3] = a1;
  v10[4] = &v14;
  void v10[5] = &v19;
  v10[6] = &v18;
  v10[7] = &v15;
  unint64_t v17 = v10;
  sub_1002B7764(a1, v11, (const void **)__p, (uint64_t)v16);
}

void sub_1002B7E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_1002B53BC((uint64_t)&a10);
  sub_1002B7E88((uint64_t)&a28);
  sub_1001FAD1C(v28 - 160);
  sub_1002970CC(v28 - 136);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002B7E88(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    sub_100052AEC((int *)(a1 + 8));
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1002B7F38(uint64_t a1)
{
}

void sub_1002B8190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  if (__p) {
    operator delete(__p);
  }
  a19 = &a16;
  sub_10021CB64((void ***)&a19);
  _Unwind_Resume(a1);
}

void sub_1002B81FC()
{
  __cxa_allocate_exception(0x40uLL);
  sub_10018E868((uint64_t)v0);
  sub_100266EAC(&v1, (uint64_t)"virtual RssiMutualInformation SqliteTileDb::readExperimentalMutualInformation(const LocationId &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/db/sqlite_tile_db.cpp", 539, (uint64_t)v0);
}

void sub_1002B827C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a13);
  _Unwind_Resume(a1);
}

void sub_1002B82A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  std::runtime_error::~runtime_error(&a13);
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void sub_1002B82BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B82D0(uint64_t *a1, uint64_t a2)
{
  sub_1001F74F4("remove_corrupt_tile", a1[1], (uint64_t)v5);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2);
  sub_1002970D0(v5);
  return sub_1002970CC(v5);
}

void sub_1002B837C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002970CC(va);
  _Unwind_Resume(a1);
}

void sub_1002B8390(uint64_t a1, uint64_t a2)
{
}

void sub_1002B8594(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B85B4(uint64_t a1, uint64_t a2)
{
  if (qword_10047BF08 == -1)
  {
    uint64_t v4 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_10047BF08, &stru_1004649A0);
    uint64_t v4 = qword_10047BF10;
    if (!os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_DEFAULT)) {
LABEL_4:
    }
      sub_1002B8390(a1, a2);
  }
  *(_WORD *)std::string buf = 0;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@TileEvict, prefetchFinishedAllDownloads, evictPrefetchBeyondLimit", buf, 2u);
  goto LABEL_4;
}

void sub_1002B8688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100319894(a2, (uint64_t)&v15);
  if ((sub_10031A8E4((uint64_t)&v15) & 1) == 0) {
    sub_10031A8F4(&v15, a3);
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__dst, "metadata");
  if (*(char *)(a4 + 23) < 0) {
    sub_1000559FC(&__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  sub_1000512AC(&__p, (uint64_t)&__dst);
  sub_10031A4BC((uint64_t)&v15, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_8:
  sub_10031B948(&__p, a2, 1);
  char v11 = 4;
  strcpy((char *)v10, "tile");
  if (*(char *)(a4 + 23) < 0) {
    sub_1000559FC(&__dst, *(void **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __dst = *(std::string *)a4;
  }
  sub_1000512AC(&__dst, (uint64_t)v10);
  sub_10031B988((uint64_t)&__p, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_15:
      uint64_t v7 = v13;
      if (!v13) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v10[0]);
  uint64_t v7 = v13;
  if (!v13) {
    goto LABEL_21;
  }
LABEL_19:
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_21:
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  __p.__r_.__value_.__l.__size_ = 0;
  if (size) {
    (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
  }
  sub_100052AEC((int *)&__p);
  long long v9 = v16;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1002B88E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1002B53BC((uint64_t)&a16);
  sub_1000BA884(v27 - 48);
  _Unwind_Resume(a1);
}

void sub_1002B8940(_Unwind_Exception *a1)
{
  sub_1000BA884(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1002B8954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      sub_1000BA884(v27 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  sub_1000BA884(v27 - 48);
  _Unwind_Resume(a1);
}

void sub_1002B89A4(_Unwind_Exception *a1)
{
  sub_1000BA884(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1002B89BC(id a1)
{
  qword_10047BF00 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Daemon");
}

void sub_1002B89EC(id a1)
{
  qword_10047BF10 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Database");
}

void sub_1002B8A1C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete();
}

void sub_1002B8A58()
{
}

__n128 sub_1002B8A6C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1004649F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1002B8AC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1004649F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1002B8AF8(void *a1)
{
}

uint64_t sub_1002B8BE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12SqliteTileDb18getRssiMapsForMacsERK10LocationIdRKNSt3__16vectorI10MacAddressNS3_9allocatorIS5_EEEEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN12SqliteTileDb18getRssiMapsForMacsERK10LocationIdRKNSt3__16vectorI10MacAddressNS3_9all"
                                "ocatorIS5_EEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12SqliteTileDb18getRssiMapsForMacsERK10LocationIdRKNSt3__16vectorI10MacAddressNS3_9allocatorIS5_EEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12SqliteTileDb18getRssiMapsForMacsERK10LocationIdRKNSt3__16vectorI10MacAddressNS3_9allocatorIS5_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_1002B8C50()
{
}

void sub_1002B8C60()
{
}

__n128 sub_1002B8C74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100464A88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1002B8CC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100464A88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1002B8CEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12SqliteTileDb14buildOffsetMapERK10LocationIdE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN12SqliteTileDb14buildOffsetMapERK10LocationIdE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12SqliteTileDb14buildOffsetMapERK10LocationIdE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12SqliteTileDb14buildOffsetMapERK10LocationIdE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_1002B8D5C()
{
}

void sub_1002B8D6C()
{
}

__n128 sub_1002B8D80(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100464B08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1002B8DD4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100464B08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1002B8E0C(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = *(void *)(a1[1] + 8);
  unint64_t v3 = (void *)a1[3];
  uint64_t v4 = (void *)v3[3];
  if (v4)
  {
    if (v4 == v3)
    {
      uint64_t v7 = v6;
      (*(void (**)(void *, void *))(*v3 + 24))(v3, v6);
    }
    else
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(void))(*v4 + 16))(v3[3]);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_1002042B4(v2, v1, (uint64_t)v6);
  uint64_t result = (uint64_t)v7;
  if (v7 == v6) {
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  if (v7) {
    return (*(uint64_t (**)(void))(*v7 + 40))();
  }
  return result;
}

void sub_1002B8F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13 == v13) {
    sub_1003A6D7C();
  }
  else {
    sub_1003A6DB0(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002B8F90(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12SqliteTileDb14foreachRssiMapERK10LocationIdNSt3__18functionIFbRK10MacAddressRKN10purpleslam9ApRssiMapEEEEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN12SqliteTileDb14foreachRssiMapERK10LocationIdNSt3__18functionIFbRK10MacAddressRKN10pur"
                                "pleslam9ApRssiMapEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12SqliteTileDb14foreachRssiMapERK10LocationIdNSt3__18functionIFbRK10MacAddressRKN10purpleslam9ApRssiMapEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12SqliteTileDb14foreachRssiMapERK10LocationIdNSt3__18functionIFbRK10MacAddressRKN10purpleslam9ApRssiMapEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_1002B9000()
{
}

void sub_1002B9010()
{
}

__n128 sub_1002B9024(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_100464B88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1002B9078(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100464B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1002B90B0(uint64_t a1)
{
  uint64_t v1 = nullsub_22(*(void *)(a1 + 8));
  sub_100085B24(&__dst, v1);
  if (__dst.__r_.__value_.__l.__size_)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    std::string::size_type size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  strcpy((char *)operator new(0x19uLL), "cannot extract metadata");
  sub_1003648B8();
}

void sub_1002B9954(void *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, uint64_t a8, std::string *a9, std::runtime_error a10, std::runtime_error a11, long long __p, int a13, __int16 a14, char a15, char a16, std::runtime_error a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t __pa,int __p_8,__int16 __p_12,char __p_14,char __p_15,uint64_t a28,uint64_t buf,int a30,__int16 a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t bufa,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
}

void sub_1002BA79C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::runtime_error a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void (__cdecl **a36)(std::stringbuf *__hidden this),uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a20);
  if (a19 < 0) {
    operator delete(a14);
  }
  *(uint64_t *)((char *)&a33
  a35 = v50;
  if (a49 < 0) {
    operator delete(a44);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if (*(char *)(v49 - 105) < 0) {
    operator delete(*(void **)(v49 - 128));
  }
  if (*(char *)(v49 - 73) < 0) {
    operator delete(*(void **)(v49 - 96));
  }
  __cxa_end_catch();
  JUMPOUT(0x1002BA950);
}

uint64_t sub_1002BA9D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durat"
                     "ionIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clock"
                                "ENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4p"
                                "athERK17TileStorageLimitsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_1002BAA48()
{
}

void sub_1002BAA54(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  std::runtime_error::runtime_error(&v12, a1);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_100464DE0;
  uint64_t v13 = off_100464E08;
  sub_1002BB454((uint64_t)&v18, (uint64_t)&v12);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  int v21 = a4;
  long long v9 = *(const void **)a5;
  size_t v10 = *(void *)(a5 + 8) - *(void *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      sub_1000A9108();
    }
    std::string __p = operator new(v10);
    memcpy(__p, v9, v10);
  }
  sub_1002BB0F8();
}

void sub_1002BAD60(void *a1)
{
  std::runtime_error::~runtime_error(v1);
  sub_1000A6954(a1);
}

void sub_1002BAD74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    operator delete(__p);
    sub_1000A6954(a1);
  }
  sub_1000A6954(a1);
}

void sub_1002BAD9C(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

void sub_1002BAE30()
{
}

void *sub_1002BAE44()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_100464CA8;
  return result;
}

void sub_1002BAE7C(uint64_t a1, void *a2)
{
  *a2 = off_100464CA8;
}

void sub_1002BAEA4(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 6776419;
}

uint64_t sub_1002BAEBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8dur"
                     "ationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageL"
                     "imitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clo"
                                "ckENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem"
                                "4pathERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN12SqliteTileDb24metadataPrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierRKN5boost10filesystem4pathERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_1002BAF2C()
{
}

uint64_t sub_1002BAF38(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_100464E28;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = off_100464D40;
  *(void *)(a1 + 16) = off_100464D78;
  *(void *)(a1 + 56) = &off_100464DB0;
  return a1;
}

void sub_1002BB058(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002BB06C(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

void sub_1002BB0F8()
{
}

void sub_1002BB394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000CD2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002BB3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000CD238((uint64_t)va);
  sub_1000CD2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002BB3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 16))(a14);
    if (atomic_fetch_add(a14 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 24))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BB454(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_100464E28;
  uint64_t v5 = (uint64_t)&v4[1];
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)a1 = off_100464D40;
  *(void *)(a1 + 16) = off_100464D78;
  *(void *)(a1 + 56) = &off_100464DB0;
  sub_1000A6FDC(v5, a2 + 16);
  return a1;
}

void sub_1002BB580(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002BB594(_Unwind_Exception *a1)
{
  sub_1002BB5A8(v1);
  _Unwind_Resume(a1);
}

void sub_1002BB5A8(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

void sub_1002BB634(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete();
}

void sub_1002BB6D4()
{
}

void sub_1002BB730()
{
}

void sub_1002BB754(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002BAF38((uint64_t)exception, a1);
}

void sub_1002BB79C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002BB7B0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1002BB838(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete();
}

void sub_1002BB8D4()
{
}

void sub_1002BB944()
{
}

void sub_1002BB968(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002BAF38((uint64_t)exception, v1);
}

void sub_1002BB9C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002BB9D8(void *a1)
{
  uint64_t v1 = (std::runtime_error *)((char *)a1 + *(void *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    v1[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(v1);
}

void sub_1002BBA78(void *a1)
{
  uint64_t v1 = (std::runtime_error *)((char *)a1 + *(void *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);

  operator delete();
}

void sub_1002BBB2C(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete();
}

void sub_1002BBBCC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1002BBC54(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete();
}

void sub_1002BBCF0(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete();
}

uint64_t sub_1002BBD28(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_100464E28;
  uint64_t v5 = (uint64_t)&v4[1];
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)a1 = off_100464D40;
  *(void *)(a1 + 16) = off_100464D78;
  *(void *)(a1 + 56) = &off_100464DB0;
  sub_1000A6FDC(v5, a2 + 16);
  return a1;
}

void sub_1002BBE54(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002BBE68(_Unwind_Exception *a1)
{
  sub_1002BB5A8(v1);
  _Unwind_Resume(a1);
}

void sub_1002BBE7C(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  std::runtime_error::runtime_error(&v12, a1);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_100464F80;
  uint64_t v13 = off_100464FA8;
  sub_1002BC770((uint64_t)&v18, (uint64_t)&v12);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  int v21 = a4;
  long long v9 = *(const void **)a5;
  size_t v10 = *(void *)(a5 + 8) - *(void *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      sub_1000A9108();
    }
    std::string __p = operator new(v10);
    memcpy(__p, v9, v10);
  }
  sub_1002BC414();
}

void sub_1002BC188(void *a1)
{
  std::runtime_error::~runtime_error(v1);
  sub_1000A6954(a1);
}

void sub_1002BC19C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    operator delete(__p);
    sub_1000A6954(a1);
  }
  sub_1000A6954(a1);
}

void sub_1002BC1C4(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

uint64_t sub_1002BC254(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&off_100464FC8;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = off_100464EE0;
  *(void *)(a1 + 16) = off_100464F18;
  *(void *)(a1 + 56) = &off_100464F50;
  return a1;
}

void sub_1002BC374(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002BC388(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

void sub_1002BC414()
{
}

void sub_1002BC6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000CD2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002BC6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000CD238((uint64_t)va);
  sub_1000CD2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002BC6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 16))(a14);
    if (atomic_fetch_add(a14 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 24))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BC770(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_100464FC8;
  uint64_t v5 = (uint64_t)&v4[1];
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)a1 = off_100464EE0;
  *(void *)(a1 + 16) = off_100464F18;
  *(void *)(a1 + 56) = &off_100464F50;
  sub_1000A6FDC(v5, a2 + 16);
  return a1;
}

void sub_1002BC89C(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002BC8B0(_Unwind_Exception *a1)
{
  sub_1002BC8C4(v1);
  _Unwind_Resume(a1);
}

void sub_1002BC8C4(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(this);
}

void sub_1002BC950(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete();
}

void sub_1002BC9F0()
{
}

void sub_1002BCA4C()
{
}

void sub_1002BCA70(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002BC254((uint64_t)exception, a1);
}

void sub_1002BCAB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002BCACC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1002BCB54(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete();
}

void sub_1002BCBF0()
{
}

void sub_1002BCC60()
{
}

void sub_1002BCC84(void *a1)
{
  uint64_t v1 = (uint64_t)a1 + *(void *)(*a1 - 32);
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002BC254((uint64_t)exception, v1);
}

void sub_1002BCCE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002BCCF4(void *a1)
{
  uint64_t v1 = (std::runtime_error *)((char *)a1 + *(void *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    v1[1].__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(v1);
}

void sub_1002BCD94(void *a1)
{
  uint64_t v1 = (std::runtime_error *)((char *)a1 + *(void *)(*a1 - 40));
  v1[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = v1[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    v1[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(v1);

  operator delete();
}

void sub_1002BCE48(std::runtime_error *this)
{
  this[1].__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(this);

  operator delete();
}

void sub_1002BCEE8(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::runtime_error::~runtime_error(a1 - 1);
}

void sub_1002BCF70(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::runtime_error::~runtime_error(a1 - 1);

  operator delete();
}

void sub_1002BD00C(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  operator delete();
}

uint64_t sub_1002BD044(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &off_100451ED0;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&off_100464FC8;
  uint64_t v5 = (uint64_t)&v4[1];
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v6;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)a1 = off_100464EE0;
  *(void *)(a1 + 16) = off_100464F18;
  *(void *)(a1 + 56) = &off_100464F50;
  sub_1000A6FDC(v5, a2 + 16);
  return a1;
}

void sub_1002BD170(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_1002BD184(_Unwind_Exception *a1)
{
  sub_1002BC8C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BD198(uint64_t **a1, std::string *a2)
{
  long long v26 = 0u;
  long long v27 = 0u;
  memset(v25, 0, sizeof(v25));
  std::streambuf::basic_streambuf();
  *(_OWORD *)std::string __p = 0u;
  long long v29 = 0u;
  uint64_t v30 = 24;
  *(void *)&long long v26 = 0;
  *(void *)&v25[0] = off_100453E60;
  std::ios_base::init(&v32, v25);
  uint64_t v33 = 0;
  int v34 = -1;
  uint64_t v36 = &v35;
  long long v37 = (char *)&v35 + 2;
  uint64_t v4 = (std::ios_base *)((char *)&v31 + (void)*(v31 - 3));
  v4->__exceptions_ = 1;
  std::ios_base::clear(v4, v4->__rdstate_);
  uint64_t v5 = sub_100029C00(&v31, a1);
  int v6 = *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 32);
  uint64_t v7 = *(void *)((char *)&v32.__rdstate_ + (void)*(v31 - 3));
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v36 = (uint64_t *)v8;
  long long v9 = *(char **)(v7 + 48);
  long long v37 = v9;
  if ((v6 & 5) == 0)
  {
    unint64_t v11 = (unint64_t)&v9[-v8];
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v15 = a2->__r_.__value_.__r.__words[2];
      std::string::size_type v14 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v14 >= v11)
      {
        unint64_t v16 = HIBYTE(v15);
LABEL_10:
        if ((v16 & 0x80u) == 0) {
          std::runtime_error v12 = a2;
        }
        else {
          std::runtime_error v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
LABEL_13:
        if ((char *)v8 == v9)
        {
          int v17 = v12;
          goto LABEL_23;
        }
        if (v11 < 0x20 || (unint64_t)v12 - v8 < 0x20)
        {
          int v17 = v12;
          std::runtime_error v18 = (char *)v8;
        }
        else
        {
          int v17 = (std::string *)((char *)v12 + (v11 & 0xFFFFFFFFFFFFFFE0));
          std::runtime_error v18 = (char *)(v8 + (v11 & 0xFFFFFFFFFFFFFFE0));
          uint64_t v19 = (long long *)(v8 + 16);
          uint64_t v20 = &v12->__r_.__value_.__r.__words[2];
          unint64_t v21 = v11 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v22 = *v19;
            *((_OWORD *)v20 - 1) = *(v19 - 1);
            *(_OWORD *)uint64_t v20 = v22;
            v19 += 2;
            v20 += 4;
            v21 -= 32;
          }
          while (v21);
          if (v11 == (v11 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_23:
            v17->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
              a2->__r_.__value_.__l.__size_ = v11;
            }
            else {
              *((unsigned char *)&a2->__r_.__value_.__s + 23) = v11 & 0x7F;
            }
            uint64_t v10 = 1;
            goto LABEL_27;
          }
        }
        do
        {
          std::string::value_type v23 = *v18++;
          v17->__r_.__value_.__s.__data_[0] = v23;
          int v17 = (std::string *)((char *)v17 + 1);
        }
        while (v18 != v9);
        goto LABEL_23;
      }
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      std::runtime_error v12 = a2;
      if (v11 <= 0x16) {
        goto LABEL_13;
      }
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      std::string::size_type v14 = 22;
    }
    std::string::__grow_by(a2, v14, v11 - v14, size, 0, size, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v16) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
    goto LABEL_10;
  }
  uint64_t v10 = 0;
LABEL_27:
  std::ostream::~ostream();
  if (SBYTE7(v29) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  return v10;
}

void sub_1002BD470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002BD4A4(void *a1)
{
}

void sub_1002BD4C0()
{
}

__n128 sub_1002BD4D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = off_100465010;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 sub_1002BD538(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100465010;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1002BD580(uint64_t a1)
{
  uint64_t v1 = nullsub_22(*(void *)(a1 + 8));
  sub_100085B24(&__dst, v1);
  if (__dst.__r_.__value_.__l.__size_)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    std::string::size_type size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  strcpy((char *)operator new(0x20uLL), "cannot extract tile data");
  sub_1003648B8();
}

void sub_1002BDF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, std::string *a19, std::runtime_error a20,std::string *__dst,uint64_t a22,std::runtime_error __dsta,int __dst_16,__int16 __dst_20,char __dst_22,char __dst_23,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t buf,int a35,__int16 a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t bufa,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__pa,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a2)
  {
    while (1)
    {
      if (*((char *)v57 - 1) < 0) {
        operator delete((void *)*(v57 - 3));
      }
      v57 -= 3;
      if (v57 == &bufa)
      {
        if (*(char *)(v58 - 105) < 0) {
          operator delete(*(void **)(v58 - 128));
        }
        __cxa_begin_catch(exception_object);
        sub_10015F2D0();
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BEEEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationI"
                     "xNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1"
                                "_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4path"
                                "ERK17TileStorageLimitsE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimitsE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_1002BEF5C()
{
}

void sub_1002BEF6C()
{
}

void *sub_1002BEF80()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_100465080;
  return result;
}

void sub_1002BEFB8(uint64_t a1, void *a2)
{
  *a2 = off_100465080;
}

void sub_1002BEFE0(char *a1@<X8>)
{
  a1[23] = 5;
  strcpy(a1, "tilep");
}

uint64_t sub_1002BF000(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8duratio"
                     "nIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimi"
                     "tsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockEN"
                                "S1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pa"
                                "thERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN12SqliteTileDb20tilePrefetchFinishedENSt3__16chrono10time_pointINS1_12system_clockENS1_8durationIxNS0_5ratioILl1ELl1000000EEEEEEERK14TileIdentifierxRKN5boost10filesystem4pathERK17TileStorageLimitsENK3$_0clESG_ENKUlvE_clEvEUlSG_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_1002BF070()
{
}

void sub_1002BF07C(unsigned __int8 *a1, uint64_t a2)
{
  int v5 = *a1;
  long long v4 = (int *)(a1 + 8);
  if (v5)
  {
    sub_100170C84(v4, (int *)a2);
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v7 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v6;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 16);
    long long v8 = *(_OWORD *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    long long v9 = (std::__shared_weak_count *)*((void *)a1 + 5);
    *((_OWORD *)a1 + 2) = v8;
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    sub_100052B28(v4, (_DWORD *)a2);
    uint64_t v10 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *((void *)a1 + 2) = v10;
    *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 16);
    *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *a1 = 1;
  }
}

char *sub_1002BF198(int a1, long long *a2, long long *a3, char *__dst)
{
  long long v4 = __dst;
  unint64_t v11 = __dst;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1000559FC(v4, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)long long v4 = v7;
      }
      *((void *)v4 + 3) = *((void *)v6 + 3);
      uint64_t v8 = *((void *)v6 + 4);
      *((void *)v4 + 4) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      long long v9 = *(long long *)((char *)v6 + 40);
      *((_DWORD *)v4 + 14) = *((_DWORD *)v6 + 14);
      *(_OWORD *)(v4 + 40) = v9;
      v4[64] = 0;
      if (*((unsigned char *)v6 + 64))
      {
        *(_OWORD *)(v4 + 72) = *(long long *)((char *)v6 + 72);
        v4[64] = 1;
      }
      v4[88] = 0;
      if (*((unsigned char *)v6 + 88))
      {
        *((_OWORD *)v4 + 6) = v6[6];
        v4[88] = 1;
      }
      v4[112] = 0;
      if (*((unsigned char *)v6 + 112))
      {
        *((void *)v4 + 15) = *((void *)v6 + 15);
        v4[112] = 1;
      }
      v4[128] = 0;
      if (*((unsigned char *)v6 + 128))
      {
        *((void *)v4 + 17) = *((void *)v6 + 17);
        v4[128] = 1;
      }
      v6 += 9;
      long long v4 = v11 + 144;
      v11 += 144;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_1002BF2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002BF2E0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    long long v4 = *(uint64_t **)(a1 + 8);
    unint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v5 = *v3;
    for (uint64_t i = *v4; v5 != i; v5 -= 144)
    {
      while (1)
      {
        if (*(unsigned char *)(v5 - 16)) {
          *(unsigned char *)(v5 - 16) = 0;
        }
        if (*(unsigned char *)(v5 - 32)) {
          *(unsigned char *)(v5 - 32) = 0;
        }
        if (*(unsigned char *)(v5 - 56)) {
          *(unsigned char *)(v5 - 56) = 0;
        }
        if (*(unsigned char *)(v5 - 80)) {
          *(unsigned char *)(v5 - 80) = 0;
        }
        long long v7 = *(std::__shared_weak_count **)(v5 - 112);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        if (*(char *)(v5 - 121) < 0) {
          break;
        }
        v5 -= 144;
        if (v5 == i) {
          return a1;
        }
      }
      operator delete(*(void **)(v5 - 144));
    }
  }
  return a1;
}

void sub_1002BF3DC()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002BF454()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void *sub_1002BF4CC(void *a1, uint64_t a2)
{
  *a1 = off_100465110;
  a1[1] = sub_1002A3FFC(a2);
  return a1;
}

void sub_1002BF51C()
{
}

void sub_1002BF530()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002BF5A8()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void **sub_1002BF620(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 40;
        nullsub_94(v3 - 32);
        unint64_t v3 = v5;
      }
      while (v5 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1002BF688(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (*(double *)a1 <= a3) {
    double v6 = *(double *)a1;
  }
  else {
    double v6 = a3;
  }
  double v7 = v6;
  std::string __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_1002C053C(&__p, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  sub_1002FEB9C(a2);
  if (__p != v24 && v7 > 0.0)
  {
    sub_1002BF8B4(a1, (uint64_t **)&__p, v7);
    sub_1002FEBB4((uint64_t **)&__p, (uint64_t)v20, v7 * v8);
    long long v9 = *(char **)a2;
    if (*(void *)a2)
    {
      uint64_t v10 = *(char **)(a2 + 8);
      unint64_t v11 = *(char **)a2;
      if (v10 != v9)
      {
        do
        {
          std::runtime_error v12 = v10 - 40;
          nullsub_94(v10 - 32);
          uint64_t v10 = v12;
        }
        while (v12 != v9);
        unint64_t v11 = *(char **)a2;
      }
      *(void *)(a2 + 8) = v9;
      operator delete(v11);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)v20;
    *(void *)(a2 + 16) = v21;
    *(_OWORD *)(a2 + 24) = v22;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13 != v14)
  {
    do
    {
      uint64_t v15 = v13 - 40;
      nullsub_94(v13 - 32);
      uint64_t v13 = v15;
    }
    while (v15 != v14);
  }
  *(void *)(a1 + 16) = v14;
  *(double *)a1 = a3;
  unint64_t v16 = (char *)__p;
  if (__p)
  {
    int v17 = v24;
    std::runtime_error v18 = __p;
    if (v24 != __p)
    {
      do
      {
        uint64_t v19 = v17 - 40;
        nullsub_94(v17 - 32);
        int v17 = v19;
      }
      while (v19 != v16);
      std::runtime_error v18 = __p;
    }
    uint64_t v24 = v16;
    operator delete(v18);
  }
}

void sub_1002BF864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_1002BF620(v23);
  sub_1002BF620(&a15);
  _Unwind_Resume(a1);
}

void sub_1002BF8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1002BF620((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BF8B4(uint64_t result, uint64_t **a2, double a3)
{
  if (a3 != 0.0)
  {
    long long v4 = *a2;
    uint64_t v5 = a2[1];
    if (*a2 != v5)
    {
      uint64_t v6 = result;
      double v7 = (void *)(result + 32);
      do
      {
        uint64_t v19 = *v4;
        sub_1001A763C((uint64_t)v20, (uint64_t)(v4 + 1));
        *(void *)&long long v18 = sub_100275EC4(&v19);
        *((double *)&v18 + 1) = a3;
        sub_1002BF9F8(v7, &v18);
        __n128 result = nullsub_94(v20);
        v4 += 5;
      }
      while (v4 != v5);
      uint64_t v9 = *(void *)(v6 + 40);
      uint64_t v8 = *(void *)(v6 + 48);
      if (v9 != v8)
      {
        unint64_t v10 = v8 - v9 - 16;
        if (v10 < 0x10)
        {
          double v11 = 0.0;
          uint64_t v12 = *(void *)(v6 + 40);
          do
          {
LABEL_12:
            double v11 = v11 + *(double *)(v12 + 8);
            v12 += 16;
          }
          while (v12 != v8);
          return result;
        }
        uint64_t v13 = (v10 >> 4) + 1;
        uint64_t v12 = v9 + 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
        uint64_t v14 = (double *)(v9 + 24);
        double v11 = 0.0;
        uint64_t v15 = v13 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          double v16 = *(v14 - 2);
          double v17 = *v14;
          v14 += 4;
          double v11 = v11 + v16 + v17;
          v15 -= 2;
        }
        while (v15);
        if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL)) {
          goto LABEL_12;
        }
      }
    }
  }
  return result;
}

void sub_1002BF9E4(_Unwind_Exception *a1)
{
  nullsub_94(v1);
  _Unwind_Resume(a1);
}

void *sub_1002BF9F8(void *a1, _OWORD *a2)
{
  uint64_t v5 = (_OWORD *)a1[2];
  unint64_t v4 = a1[3];
  if ((unint64_t)v5 >= v4)
  {
    double v7 = (_OWORD **)(a1 + 1);
    uint64_t v8 = (_OWORD *)a1[1];
    uint64_t v9 = v5 - v8;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_1000A9108();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 60) {
        sub_1000A6A10();
      }
      uint64_t v13 = (char *)operator new(16 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v9];
    *(_OWORD *)uint64_t v14 = *a2;
    uint64_t v6 = v14 + 16;
    if (v5 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *(v5 - 1);
        v14 -= 16;
        --v5;
      }
      while (v5 != v8);
      uint64_t v5 = *v7;
    }
    a1[1] = v14;
    a1[2] = v6;
    a1[3] = &v13[16 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  a1[2] = v6;
  unint64_t v15 = (((uint64_t)v6 - a1[1]) >> 4) - 1;

  return sub_1002C06D4(a1, v15);
}

void sub_1002BFB2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 32);
  (*(void (**)(uint64_t))(*(void *)a3 + 96))(a3);
  sub_100280FA0(a3, &v12);
  sub_1002581E8(a4);
  uint64_t v14 = v8;
  unint64_t v9 = a1[17];
  if (v9 >= a1[18])
  {
    unint64_t v10 = sub_1002C0328(a1 + 16, &v14, v12);
  }
  else
  {
    sub_100275D08((void *)a1[17], v8, v12);
    unint64_t v10 = (char *)(v9 + 40);
    a1[17] = v9 + 40;
  }
  a1[17] = v10;
  a1[14] = *(void *)(a2 + 32);
  uint64_t v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1002BFC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v2 + 136) = v3;
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002BFC70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BFC84(uint64_t a1, uint64_t a2, uint64_t a3, void (***a4)(void, uint64_t, uint64_t *, uint64_t, uint64_t), unsigned char *a5, int a6, void *a7, uint64_t a8)
{
  (*(void (**)(uint64_t))(*(void *)a3 + 104))(a3);
  sub_10035D9CC(&v28, a2);
  double v16 = sub_100280FA8(a3, &v28);
  sub_1002BF688(a1 + 120, (uint64_t)&__p, v16);
  if (a6) {
    uint64_t v27 = 0x3FF0000000000000;
  }
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = a7[3];
  if (!v18) {
    goto LABEL_6;
  }
  if ((void *)v18 != a7)
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
LABEL_6:
    uint64_t v30 = (void *)v18;
    goto LABEL_8;
  }
  uint64_t v30 = v29;
  (*(void (**)(void *, void *))(*a7 + 24))(a7, v29);
LABEL_8:
  uint64_t v19 = sub_1002BFEF4(a1, v17, (uint64_t)&__p, a3, a4, a5, v29, a8);
  if (v30 == v29)
  {
    (*(void (**)(void *))(v29[0] + 32))(v29);
    *(void *)(a1 + 112) = *(void *)(a2 + 32);
    uint64_t v20 = (char *)__p;
    if (!__p) {
      return v19;
    }
    goto LABEL_14;
  }
  if (v30) {
    (*(void (**)(void))(*v30 + 40))();
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 32);
  uint64_t v20 = (char *)__p;
  if (__p)
  {
LABEL_14:
    uint64_t v21 = v26;
    long long v22 = v20;
    if (v26 != v20)
    {
      do
      {
        std::string::value_type v23 = v21 - 40;
        nullsub_94(v21 - 32);
        uint64_t v21 = v23;
      }
      while (v23 != v20);
      long long v22 = __p;
    }
    long long v26 = v20;
    operator delete(v22);
  }
  return v19;
}

void sub_1002BFEC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002BF620((void **)va);
  _Unwind_Resume(a1);
}

void sub_1002BFED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_100237458((uint64_t *)va1);
  sub_1002BF620((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BFEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (***a5)(void, uint64_t, uint64_t *, uint64_t, uint64_t), unsigned char *a6, void *a7, uint64_t a8)
{
  if (*(double *)(a3 + 32) == 0.0 || !sub_100256E6C((uint64_t)a5)) {
    return 0;
  }
  sub_100280F54(a4, a3);
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    sub_1000AE4B0(v20, "");
    sub_10016A2C4((uint64_t)v20, 0, 0);
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    sub_1000D11E0((uint64_t)&v27);
  }
  sub_1002814D0(a4, a2, (uint64_t)v20);
  if (!sub_1002ADBC0(v20))
  {
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v16 = a7[3];
    if (v16)
    {
      if ((void *)v16 == a7)
      {
        long long v26 = v25;
        (*(void (**)(void *, void *))(*a7 + 24))(a7, v25);
LABEL_12:
        sub_100285670(a6, a2, (uint64_t)&v27, (uint64_t)v25, a5, a8);
        if (v26 == v25)
        {
          (*(void (**)(void *))(v25[0] + 32))(v25);
        }
        else if (v26)
        {
          (*(void (**)(void))(*v26 + 40))();
        }
        std::string::size_type size = (std::__shared_weak_count *)v27.__r_.__value_.__l.__size_;
        if (v27.__r_.__value_.__l.__size_
          && !atomic_fetch_add((atomic_ullong *volatile)(v27.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
        char v24 = 0;
        LOBYTE(__p) = 0;
        memset(&v27, 0, sizeof(v27));
        std::string::assign(&v27, "Need the following code here: pfilter->updateHeadingNonuniformTimestep(headingMotion, currentUpdateWalkingState);");
        sub_10016A2C4((uint64_t)&__p, (uint64_t)&v27, 1);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        if (v24 < 0) {
          operator delete(__p);
        }
        sub_1000D11E0((uint64_t)&v22);
      }
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
    }
    long long v26 = (void *)v16;
    goto LABEL_12;
  }
  uint64_t v17 = sub_100258238(a5, a3);
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(double *)(a3 + 32) > *(double *)(a1 + 104))
    {
      if (a1 + 72 != a3) {
        sub_1002C0800(a1 + 72, *(uint64_t **)a3, *(uint64_t **)(a3 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
      }
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 24);
    }
  }
  else
  {
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    sub_1002C053C((void *)(a1 + 72), *(void *)a3, *(void *)(a3 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 24);
    *(unsigned char *)(a1 + 64) = 1;
  }
  return v17;
}

void sub_1002C0264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (*(char *)(v22 - 73) < 0)
  {
    operator delete(*(void **)(v22 - 96));
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C02DC(uint64_t result)
{
  *(void *)(result + 48) = *(void *)(result + 40);
  return result;
}

double sub_1002C02E8(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 40);
  uint64_t v2 = *(double **)(a1 + 48);
  uint64_t v3 = v1 + 1;
  if (v1 != v2 && v3 != v2)
  {
    double v5 = *v1;
    uint64_t v6 = v1 + 1;
    do
    {
      double v7 = *v6++;
      double v8 = v7;
      if (v5 < v7)
      {
        double v5 = v8;
        uint64_t v1 = v3;
      }
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
  return *v1;
}

char *sub_1002C0328(void *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v8 = 0x666666666666666;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x666666666666666) {
      sub_1000A6A10();
    }
    uint64_t v9 = (char *)operator new(40 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v19 = &v9[40 * v4];
  *((void *)&v20 + 1) = &v9[40 * v8];
  sub_100275D08(v19, *a2, a3);
  uint64_t v11 = (char *)*a1;
  uint64_t v10 = a1[1];
  for (uint64_t i = 48; ; i -= 40)
  {
    uint64_t v13 = v10 + i;
    if ((char *)(v10 + i - 48) == v11) {
      break;
    }
    *(void *)&v19[i - 88] = *(void *)(v13 - 88);
    uint64_t v14 = (uint64_t)&v19[i - 80];
    sub_1001A763C(v14, v13 - 80);
  }
  uint64_t v16 = (char *)*a1;
  unint64_t v15 = (char *)a1[1];
  *a1 = &v19[i - 48];
  *(void *)&long long v20 = v19 + 40;
  *(_OWORD *)(a1 + 1) = v20;
  if (v15 != v16)
  {
    do
    {
      uint64_t v17 = v15 - 40;
      nullsub_94(v15 - 32);
      unint64_t v15 = v17;
    }
    while (v17 != v16);
  }
  if (v16) {
    operator delete(v16);
  }
  return v19 + 40;
}

void sub_1002C04AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002C04E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C04E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    nullsub_94(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1002C053C(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x666666666666667) {
      sub_1000A9108();
    }
    unint64_t v8 = (char *)operator new(40 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[40 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        *(void *)&v8[v9] = *(void *)(a2 + v9);
        sub_1001A763C((uint64_t)&v8[v9 + 8], a2 + v9 + 8);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1002C0604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1002C0618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 40)
    nullsub_94(v10 - 32 + v11);
  *(void *)(v9 + 8) = v10;
  sub_1002C0648(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1002C0648(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      unint64_t v4 = (char *)v2[1];
      unint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          uint64_t v6 = v4 - 40;
          nullsub_94(v4 - 32);
          unint64_t v4 = v6;
        }
        while (v6 != v3);
        unint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_1002C06D4(void *result, unint64_t a2)
{
  uint64_t v2 = result;
  unint64_t v4 = (void *)result[1];
  uint64_t v3 = (unsigned char *)result[2];
  uint64_t v5 = v3 - (unsigned char *)v4;
  if (v3 - (unsigned char *)v4 == 16)
  {
    *((_DWORD *)result + 8) = 1;
  }
  else
  {
    uint64_t v6 = v5 >> 4;
    if (v5 >> 4 > a2)
    {
      unint64_t v7 = 0;
      do
      {
        if (v7 != a2)
        {
          uint64_t v8 = v4[2 * a2];
          uint64_t v9 = *result;
          uint64_t v10 = &v4[2 * v7];
          while (1)
          {
            uint64_t v11 = *v10;
            v10 += 2;
            if (v9 >= v8 - v11) {
              break;
            }
            ++v7;
            *((_DWORD *)result + 8) = 2;
            if (a2 == v7) {
              goto LABEL_6;
            }
          }
        }
        if (v7 == a2)
        {
LABEL_6:
          *((_DWORD *)result + 8) = 1;
          unint64_t v7 = a2;
        }
        ++a2;
      }
      while (a2 != v6);
      if (v7)
      {
        if ((v7 & 0x8000000000000000) != 0) {
          sub_1000A9108();
        }
        uint64_t v12 = (char *)&v4[2 * v7];
        uint64_t v13 = v3 - v12;
        if (v3 != v12) {
          __n128 result = memmove(v4, v12, v3 - v12);
        }
        v2[2] = (char *)v4 + v13;
      }
    }
  }
  return result;
}

void sub_1002C07E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C0800(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v9)
    {
      uint64_t v10 = *(void **)(a1 + 8);
      uint64_t v11 = *(void **)a1;
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = v10 - 5;
          nullsub_94(v10 - 4);
          uint64_t v10 = v12;
        }
        while (v12 != v9);
        uint64_t v11 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x666666666666666) {
      goto LABEL_35;
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0x333333333333333 ? 0x666666666666666 : v14;
    if (v15 > 0x666666666666666) {
LABEL_35:
    }
      sub_1000A9108();
    uint64_t v16 = 5 * v15;
    uint64_t v17 = operator new(40 * v15);
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = &v17[v16];
    if (v6 != a3)
    {
      uint64_t v18 = 0;
      do
      {
        v17[v18] = v6[v18];
        sub_1001A763C((uint64_t)&v17[v18 + 1], (uint64_t)&v6[v18 + 1]);
        v18 += 5;
      }
      while (&v6[v18] != a3);
      *(void *)(a1 + 8) = &v17[v18];
      return;
    }
LABEL_32:
    *(void *)(a1 + 8) = v17;
    return;
  }
  uint64_t v19 = *(void **)(a1 + 8);
  if (0xCCCCCCCCCCCCCCCDLL * (v19 - v9) >= a4)
  {
    if (a2 == a3)
    {
      uint64_t v17 = *(void **)a1;
      if (v19 == v9) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v17 = *(void **)a1;
      do
      {
        uint64_t v26 = (uint64_t)(v6 + 1);
        uint64_t v27 = *v6;
        v6 += 5;
        uint64_t v28 = (uint64_t)(v9 + 1);
        *uint64_t v9 = v27;
        v9 += 5;
        sub_10007B704(v28, v26);
        v17 += 5;
      }
      while (v6 != a3);
      uint64_t v19 = *(void **)(a1 + 8);
      if (v19 == v17) {
        goto LABEL_32;
      }
    }
    do
    {
      long long v29 = v19 - 5;
      nullsub_94(v19 - 4);
      uint64_t v19 = v29;
    }
    while (v29 != v17);
    goto LABEL_32;
  }
  long long v20 = &a2[v19 - v9];
  if (v19 != v9)
  {
    do
    {
      uint64_t v21 = (uint64_t)(v6 + 1);
      uint64_t v22 = *v6;
      v6 += 5;
      uint64_t v23 = (uint64_t)(v9 + 1);
      *uint64_t v9 = v22;
      v9 += 5;
      sub_10007B704(v23, v21);
    }
    while (v6 != v20);
    uint64_t v9 = *(void **)(a1 + 8);
  }
  char v24 = v9;
  if (v20 != a3)
  {
    uint64_t v25 = 0;
    do
    {
      v9[v25] = v20[v25];
      sub_1001A763C((uint64_t)&v9[v25 + 1], (uint64_t)&v20[v25 + 1]);
      v25 += 5;
    }
    while (&v20[v25] != a3);
    char v24 = &v9[v25];
  }
  *(void *)(a1 + 8) = v24;
}

void sub_1002C0A88(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 40)
    nullsub_94(v2 - 32 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_1002C0AB0()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002C0B28()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002C0BA0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1002C0BA8(uint64_t result, uint64_t a2, uint64_t *a3, void *a4, int a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  uint64_t v10 = *a3;
  *(void *)long long v20 = a3[1];
  *(void *)&v20[7] = *(uint64_t *)((char *)a3 + 15);
  char v11 = *((unsigned char *)a3 + 23);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  int v12 = *a6;
  if (*a6) {
    long long v19 = *(_OWORD *)(a6 + 8);
  }
  unint64_t v13 = a9;
  int v14 = *a7;
  if (*a7) {
    long long v18 = *(_OWORD *)(a7 + 8);
  }
  int v15 = *a8;
  if (*a8)
  {
    uint64_t v9 = *((void *)a8 + 1);
    int v16 = *a9;
    if (!*a9) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  int v16 = *a9;
  if (*a9) {
LABEL_7:
  }
    unint64_t v13 = (unsigned __int8 *)*((void *)a9 + 1);
LABEL_9:
  *(void *)__n128 result = v10;
  *(void *)(result + 8) = *(void *)v20;
  *(void *)(result + 15) = *(void *)&v20[7];
  *(unsigned char *)(result + 23) = v11;
  uint64_t v17 = a4[1];
  *(void *)(result + 24) = *a4;
  *(void *)(result + 32) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 40) = 1;
  *(void *)(result + 48) = a2;
  *(_DWORD *)(result + 56) = a5;
  *(unsigned char *)(result + 64) = 0;
  if (v12)
  {
    *(_OWORD *)(result + 72) = v19;
    *(unsigned char *)(result + 64) = 1;
  }
  *(unsigned char *)(result + 88) = 0;
  if (v14)
  {
    *(_OWORD *)(result + 96) = v18;
    *(unsigned char *)(result + 88) = 1;
  }
  *(unsigned char *)(result + 112) = 0;
  if (v15)
  {
    *(void *)(result + 120) = v9;
    *(unsigned char *)(result + 112) = 1;
  }
  *(unsigned char *)(result + 128) = 0;
  if (v16)
  {
    *(void *)(result + 136) = v13;
    *(unsigned char *)(result + 128) = 1;
  }
  return result;
}

void sub_1002C0CE0()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002C0D58()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002C0DD0(uint64_t result, int a2)
{
  *(void *)__n128 result = off_100465140;
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void sub_1002C0E34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1004651A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002C0E54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1004651A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002C0EA8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1002C0ED4()
{
}

uint64_t sub_1002C0EE8()
{
  return 2;
}

uint64_t sub_1002C0EF0()
{
  return 2;
}

uint64_t sub_1002C0EF8()
{
  return 0;
}

uint64_t sub_1002C0F00()
{
  return 0;
}

uint64_t sub_1002C0F08()
{
  return 0;
}

uint64_t sub_1002C0F10()
{
  return 0;
}

uint64_t sub_1002C0F18()
{
  return 0;
}

void sub_1002C0F20()
{
}

void sub_1002C0FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002C1004()
{
}

void sub_1002C10E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1003A381C(a10);
  }
  operator delete();
}

void *sub_1002C1114(void *a1)
{
  *a1 = off_100458C30;
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_10002FCB0((uint64_t)(a1 + 1));
    return a1;
  }
  else
  {
    sub_10002FCB0((uint64_t)(a1 + 1));
    return a1;
  }
}

void sub_1002C11BC(void *a1)
{
  *a1 = off_100458C30;
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_10002FCB0((uint64_t)(a1 + 1));

  operator delete();
}

uint64_t sub_1002C126C()
{
  return 0;
}

void sub_1002C1278(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1004652C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002C1298(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1004652C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002C12EC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1002C1314(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100465310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002C1334(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100465310;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1002C1388()
{
}

uint64_t sub_1002C139C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) | 0x100;
}

uint64_t sub_1002C13D8()
{
  return 0;
}

uint64_t sub_1002C13E0()
{
  return 1;
}

void sub_1002C13E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1004653E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002C1408(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1004653E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002C145C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1002C1488()
{
}

uint64_t sub_1002C149C()
{
  return 5;
}

uint64_t sub_1002C14A4()
{
  return 2;
}

uint64_t sub_1002C14AC(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) | 0x100;
}

uint64_t sub_1002C14E8()
{
  return 0;
}

uint64_t sub_1002C14F0()
{
  return 0;
}

uint64_t sub_1002C14F8()
{
  return 0;
}

uint64_t sub_1002C1500()
{
  return 1;
}

void sub_1002C1508()
{
}

void sub_1002C1558()
{
}

void sub_1002C1638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_1003A381C(a10);
  }
  operator delete();
}

void sub_1002C1668()
{
}

void sub_1002C18F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001E3FEC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002C1908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000CD238((uint64_t)va);
  sub_1001E3FEC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002C1924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 16))(a14);
    if (atomic_fetch_add(a14 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 24))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C19B4()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002C1A2C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002C1AA4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = off_10045D688;
  *(_OWORD *)(a4 + 8) = 0u;
  uint64_t v49 = (void **)(a4 + 8);
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(unsigned char *)(a4 + 64) &= 0xF8u;
  *(void *)(a4 + 56) = a3[7];
  uint64_t v5 = a3[1];
  if (a3[2] != v5)
  {
    unint64_t v7 = 0;
    uint64_t v50 = result + 72;
    unint64_t v48 = (void **)(a4 + 32);
    while (1)
    {
      __int16 v57 = off_10045DA98;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      v60 &= 0xFCu;
      uint64_t v58 = *(void *)(v5 + 8 * v7);
      uint64_t v59 = *(void *)(a3[4] + 8 * v7);
      sub_1001A9C7C((uint64_t)v52, (uint64_t)&v57);
      sub_1001485B8(a2, (uint64_t)v52, (uint64_t)v53);
      sub_1001AA12C((uint64_t)v61, (uint64_t)v53);
      sub_1001486EC(v50, (uint64_t)v61, (uint64_t)v62);
      sub_100148878((uint64_t)v62, (uint64_t)v54);
      nullsub_15(v61);
      nullsub_15(v53);
      nullsub_17(v52);
      uint64_t v10 = *(char **)(a4 + 16);
      unint64_t v9 = *(void *)(a4 + 24);
      if ((unint64_t)v10 < v9)
      {
        *(void *)uint64_t v10 = v55;
        uint64_t v11 = (uint64_t)(v10 + 8);
        goto LABEL_26;
      }
      int v12 = (char *)*v49;
      uint64_t v13 = v10 - (unsigned char *)*v49;
      uint64_t v14 = v13 >> 3;
      unint64_t v15 = (v13 >> 3) + 1;
      if (v15 >> 61) {
        goto LABEL_48;
      }
      uint64_t v16 = v9 - (void)v12;
      if (v16 >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      unint64_t v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v15;
      if (v17) {
        break;
      }
      long long v18 = 0;
      long long v19 = (void *)(8 * v14);
      *(void *)(8 * v14) = v55;
      uint64_t v11 = 8 * v14 + 8;
      if (v10 != v12) {
        goto LABEL_18;
      }
LABEL_24:
      *(void *)(a4 + 8) = v19;
      *(void *)(a4 + 16) = v11;
      *(void *)(a4 + 24) = &v18[8 * v17];
      if (v12) {
        operator delete(v12);
      }
LABEL_26:
      *(void *)(a4 + 16) = v11;
      uint64_t v30 = *(char **)(a4 + 40);
      unint64_t v29 = *(void *)(a4 + 48);
      if ((unint64_t)v30 >= v29)
      {
        uint64_t v31 = (char *)*v48;
        uint64_t v32 = v30 - (unsigned char *)*v48;
        uint64_t v33 = v32 >> 3;
        unint64_t v34 = (v32 >> 3) + 1;
        if (v34 >> 61) {
LABEL_48:
        }
          sub_1000A9108();
        uint64_t v35 = v29 - (void)v31;
        if (v35 >> 2 > v34) {
          unint64_t v34 = v35 >> 2;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          if (v36 >> 61) {
LABEL_47:
          }
            sub_1000A6A10();
          long long v37 = operator new(8 * v36);
          unint64_t v38 = &v37[8 * v33];
          *unint64_t v38 = v56;
          uint64_t v8 = (uint64_t)(v38 + 1);
          if (v30 == v31) {
            goto LABEL_44;
          }
LABEL_38:
          unint64_t v39 = v30 - 8 - v31;
          if (v39 < 0x58) {
            goto LABEL_51;
          }
          if ((unint64_t)(v30 - &v37[v32]) < 0x20) {
            goto LABEL_51;
          }
          uint64_t v40 = (v39 >> 3) + 1;
          uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v42 = &v30[-v41];
          unint64_t v38 = (void *)((char *)v38 - v41);
          unint64_t v43 = &v37[8 * v33 - 16];
          uint64_t v44 = v30 - 16;
          uint64_t v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v46 = *(_OWORD *)v44;
            *(v43 - 1) = *((_OWORD *)v44 - 1);
            *unint64_t v43 = v46;
            v43 -= 2;
            v44 -= 32;
            v45 -= 4;
          }
          while (v45);
          uint64_t v30 = v42;
          if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_51:
            do
            {
              uint64_t v47 = *((void *)v30 - 1);
              v30 -= 8;
              *--unint64_t v38 = v47;
            }
            while (v30 != v31);
          }
        }
        else
        {
          long long v37 = 0;
          unint64_t v38 = (void *)(8 * v33);
          *(void *)(8 * v33) = v56;
          uint64_t v8 = 8 * v33 + 8;
          if (v30 != v31) {
            goto LABEL_38;
          }
        }
LABEL_44:
        *(void *)(a4 + 32) = v38;
        *(void *)(a4 + 40) = v8;
        *(void *)(a4 + 48) = &v37[8 * v36];
        if (v31) {
          operator delete(v31);
        }
        goto LABEL_4;
      }
      *(void *)uint64_t v30 = v56;
      uint64_t v8 = (uint64_t)(v30 + 8);
LABEL_4:
      *(void *)(a4 + 40) = v8;
      nullsub_17(v54);
      __n128 result = nullsub_17(&v57);
      ++v7;
      uint64_t v5 = a3[1];
      if (v7 >= (a3[2] - v5) >> 3) {
        return result;
      }
    }
    if (v17 >> 61) {
      goto LABEL_47;
    }
    long long v18 = operator new(8 * v17);
    long long v19 = &v18[8 * v14];
    *long long v19 = v55;
    uint64_t v11 = (uint64_t)(v19 + 1);
    if (v10 == v12) {
      goto LABEL_24;
    }
LABEL_18:
    unint64_t v20 = v10 - 8 - v12;
    if (v20 < 0x58) {
      goto LABEL_52;
    }
    if ((unint64_t)(v10 - &v18[v13]) < 0x20) {
      goto LABEL_52;
    }
    uint64_t v21 = (v20 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v23 = &v10[-v22];
    long long v19 = (void *)((char *)v19 - v22);
    char v24 = &v18[8 * v14 - 16];
    uint64_t v25 = v10 - 16;
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      _OWORD *v24 = v27;
      v24 -= 2;
      v25 -= 32;
      v26 -= 4;
    }
    while (v26);
    uint64_t v10 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        uint64_t v28 = *((void *)v10 - 1);
        v10 -= 8;
        *--long long v19 = v28;
      }
      while (v10 != v12);
    }
    goto LABEL_24;
  }
  return result;
}

void sub_1002C1EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  nullsub_17(&a23);
  nullsub_17(&a27);
  sub_100075C7C(v27);
  _Unwind_Resume(a1);
}

double sub_1002C1F38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 72;
  sub_1001AA12C((uint64_t)&__p, a2);
  sub_1001486EC(v3, (uint64_t)&__p, (uint64_t)v69);
  sub_100148878((uint64_t)v69, (uint64_t)v65);
  nullsub_15(&__p);
  long long v64 = v66;
  for (uint64_t i = *(void **)(a1 + 40); ; i += 6)
  {
    if (i == *(void **)(a1 + 48))
    {
      v69[0] = &off_10045FE58;
      __p.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.ap"
                            "p/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/us"
                            "r/local/include/boost/geometry/algorithms/detail/throw_on_empty_input.hpp";
      __p.i64[1] = (uint64_t)"void boost::geometry::detail::throw_on_empty_input(const Geometry &) [Geometry = boost::geom"
                            "etry::model::multi_polygon<boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double>>>]";
      uint64_t v68 = 54;
      sub_1001DEE14((uint64_t)v69, &__p);
    }
    if (*i != i[1]) {
      break;
    }
    uint64_t v5 = (void *)i[3];
    uint64_t v6 = (void *)i[4];
    if (v5 != v6)
    {
      while (*v5 == v5[1])
      {
        v5 += 3;
        if (v5 == v6) {
          goto LABEL_2;
        }
      }
      break;
    }
LABEL_2:
    ;
  }
  if ((sub_1002C3108((double *)&v64, (uint64_t *)(a1 + 40)) & 0x80000000) != 0)
  {
    double v7 = sub_1002C2D30((double *)&v64, (uint64_t **)(a1 + 40));
    double v8 = 0.0;
    if (v7 > 0.0) {
      goto LABEL_76;
    }
  }
  else
  {
    double v7 = 0.0;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v9 != v10)
  {
    double v8 = v7;
    while (1)
    {
      uint64_t v11 = *(double **)v9;
      int v12 = *(double **)(v9 + 8);
      if ((unint64_t)v12 - *(void *)v9 >= 0x40)
      {
        __p.i32[0] = 0;
        __p.i8[4] = 0;
        if (v11 + 2 != v12)
        {
          do
          {
            BOOL v13 = sub_10004D030((double *)&v64, v11, v11 + 2, (uint64_t)&__p);
            BOOL v14 = v11 + 4 != v12 && v13;
            v11 += 2;
          }
          while (v14);
          if (!__p.i8[4] && __p.i32[0]) {
            break;
          }
        }
      }
LABEL_14:
      v9 += 48;
      if (v9 == v10) {
        goto LABEL_76;
      }
    }
    uint64_t v16 = *(double ***)(v9 + 24);
    unint64_t v15 = *(double ***)(v9 + 32);
    while (v16 != v15)
    {
      unint64_t v17 = *v16;
      long long v18 = v16[1];
      if ((unint64_t)((char *)v18 - (char *)*v16) >= 0x40)
      {
        __p.i32[0] = 0;
        __p.i8[4] = 0;
        if (v17 + 2 != v18)
        {
          do
          {
            BOOL v19 = sub_10004D030((double *)&v64, v17, v17 + 2, (uint64_t)&__p);
            BOOL v20 = v17 + 4 != v18 && v19;
            v17 += 2;
          }
          while (v20);
          if (__p.i8[4] || __p.i32[0]) {
            goto LABEL_14;
          }
          unint64_t v15 = *(double ***)(v9 + 32);
        }
      }
      v16 += 3;
    }
    uint64_t v22 = *(double **)v9;
    uint64_t v21 = *(double **)(v9 + 8);
    int8x16_t __p = 0uLL;
    uint64_t v68 = 0;
    int64_t v23 = (char *)v21 - (char *)v22;
    if (v21 != v22)
    {
      if (v23 < 0) {
        sub_1000A9108();
      }
      __p.i64[0] = (uint64_t)operator new((char *)v21 - (char *)v22);
      __p.i64[1] = __p.i64[0];
      uint64_t v24 = __p.i64[0] + 16 * (v23 >> 4);
      uint64_t v68 = v24;
      memmove((void *)__p.i64[0], v22, v23);
      __p.i64[1] = v24;
    }
    double v8 = sub_1002C3AF4((double *)&v64, (double **)&__p);
    if (__p.i64[0])
    {
      __p.i64[1] = __p.i64[0];
      operator delete((void *)__p.i64[0]);
    }
    uint64_t v25 = *(void *)(v9 + 24);
    uint64_t v26 = *(void *)(v9 + 32);
    while (1)
    {
      if (v25 == v26) {
        goto LABEL_14;
      }
      uint64_t v30 = *(unsigned char **)v25;
      unint64_t v29 = *(unsigned char **)(v25 + 8);
      memset(v69, 0, sizeof(v69));
      int64_t v31 = v29 - v30;
      if (v29 == v30)
      {
        uint64_t v70 = &off_10045FE58;
        __p.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode."
                              "app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sd"
                              "k/usr/local/include/boost/geometry/algorithms/detail/throw_on_empty_input.hpp";
        __p.i64[1] = (uint64_t)"void boost::geometry::detail::throw_on_empty_input(const Geometry &) [Geometry = boost::ge"
                              "ometry::model::linestring<boost::geometry::model::d2::point_xy<double>>]";
        uint64_t v68 = 54;
        sub_1001DEE14((uint64_t)&v70, &__p);
      }
      if (v31 < 0) {
        sub_1000A9108();
      }
      uint64_t v32 = (double *)operator new(v29 - v30);
      memmove(v32, v30, v31);
      uint64_t v33 = v32;
      unint64_t v34 = v32;
      if (v31 != 16) {
        break;
      }
LABEL_70:
      double v54 = v33[1];
      double v55 = v34[1];
      double v56 = *v33 - *v34;
      double v57 = v54 - v55;
      double v58 = *(double *)&v64 - *v34;
      double v59 = (*((double *)&v64 + 1) - v55) * (v54 - v55) + v58 * v56;
      if (v59 <= 0.0)
      {
        double v27 = v58 * v58 + 0.0 + (*((double *)&v64 + 1) - v55) * (*((double *)&v64 + 1) - v55);
      }
      else
      {
        double v60 = v57 * v57 + v56 * v56;
        if (v60 <= v59)
        {
          double v61 = *((double *)&v64 + 1) - v54;
          double v62 = *(double *)&v64 - *v33;
        }
        else
        {
          double v61 = *((double *)&v64 + 1) - (v55 + v57 * (v59 / v60));
          double v62 = *(double *)&v64 - (*v34 + v56 * (v59 / v60));
        }
        double v27 = v62 * v62 + 0.0 + v61 * v61;
      }
      double v28 = sqrt(v27);
      if (v28 < v8) {
        double v8 = v28;
      }
      operator delete(v32);
      v25 += 24;
    }
    double v35 = v32[2];
    double v36 = v32[3];
    double v37 = v32[1];
    double v38 = v35 - *v32;
    double v39 = v36 - v37;
    double v40 = *(double *)&v64 - *v32;
    double v41 = (*((double *)&v64 + 1) - v37) * (v36 - v37) + v40 * v38;
    if (v41 <= 0.0)
    {
      double v43 = v40 * v40 + 0.0 + (*((double *)&v64 + 1) - v37) * (*((double *)&v64 + 1) - v37);
      unint64_t v34 = v32;
      if (v31 == 32) {
        goto LABEL_68;
      }
    }
    else
    {
      double v42 = v39 * v39 + v38 * v38;
      if (v42 <= v41)
      {
        double v43 = (*(double *)&v64 - v35) * (*(double *)&v64 - v35)
            + 0.0
            + (*((double *)&v64 + 1) - v36) * (*((double *)&v64 + 1) - v36);
        unint64_t v34 = v32;
        if (v31 == 32)
        {
LABEL_68:
          uint64_t v33 = v34 + 2;
          goto LABEL_70;
        }
      }
      else
      {
        double v43 = (*(double *)&v64 - (*v32 + v38 * (v41 / v42))) * (*(double *)&v64 - (*v32 + v38 * (v41 / v42)))
            + 0.0
            + (*((double *)&v64 + 1) - (v37 + v39 * (v41 / v42))) * (*((double *)&v64 + 1) - (v37 + v39 * (v41 / v42)));
        unint64_t v34 = v32;
        if (v31 == 32) {
          goto LABEL_68;
        }
      }
    }
    uint64_t v44 = v32 + 5;
    uint64_t v45 = 16 * (v31 >> 4) - 32;
    unint64_t v34 = v32;
    while (1)
    {
      double v46 = *(v44 - 3);
      double v47 = *(v44 - 1);
      double v48 = *(v44 - 2);
      double v49 = v47 - v46;
      double v50 = *v44 - v48;
      double v51 = (*((double *)&v64 + 1) - v48) * v50 + (*(double *)&v64 - v46) * (v47 - v46);
      if (v51 <= 0.0)
      {
        double v53 = (*(double *)&v64 - v46) * (*(double *)&v64 - v46)
            + 0.0
            + (*((double *)&v64 + 1) - v48) * (*((double *)&v64 + 1) - v48);
        if (v53 == 0.0) {
          goto LABEL_69;
        }
      }
      else
      {
        double v52 = v50 * v50 + v49 * v49;
        if (v52 <= v51)
        {
          double v53 = (*(double *)&v64 - v47) * (*(double *)&v64 - v47)
              + 0.0
              + (*((double *)&v64 + 1) - *v44) * (*((double *)&v64 + 1) - *v44);
          if (v53 == 0.0)
          {
LABEL_69:
            unint64_t v34 = v44 - 3;
            uint64_t v33 = v44 - 1;
            goto LABEL_70;
          }
        }
        else
        {
          double v53 = (*(double *)&v64 - (v46 + v49 * (v51 / v52))) * (*(double *)&v64 - (v46 + v49 * (v51 / v52)))
              + 0.0
              + (*((double *)&v64 + 1) - (v48 + v50 * (v51 / v52)))
              * (*((double *)&v64 + 1) - (v48 + v50 * (v51 / v52)));
          if (v53 == 0.0) {
            goto LABEL_69;
          }
        }
      }
      if (v53 < v43)
      {
        double v43 = v53;
        unint64_t v34 = v44 - 3;
      }
      v44 += 2;
      v45 -= 16;
      if (!v45) {
        goto LABEL_68;
      }
    }
  }
  double v8 = v7;
LABEL_76:
  nullsub_17(v65);
  return v8;
}

void sub_1002C24C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, std::exception a19, uint64_t a20)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
    nullsub_17(&a11);
    _Unwind_Resume(a1);
  }
  nullsub_17(&a11);
  _Unwind_Resume(a1);
}

BOOL sub_1002C25AC(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 1;
  }
  uint64_t v3 = (uint64_t ***)(a1 + 16);
  while (1)
  {
    uint64_t v3 = (uint64_t ***)*v3;
    BOOL result = v3 != 0;
    if (!v3) {
      break;
    }
    uint64_t v5 = sub_10006F50C(a2, v3 + 2);
    if (!v5 || (sub_1000706F4((const void ***)v3 + 2, (unsigned __int8 ***)v5 + 2) & 1) == 0) {
      return 1;
    }
  }
  return result;
}

void sub_1002C2620(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    while (v4)
    {
      uint64_t v5 = v4;
      uint64_t v4 = (void *)*v4;
      uint64_t v6 = (std::__shared_weak_count *)v5[3];
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      operator delete(v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10 != v9)
  {
    do
    {
      uint64_t v15 = *(void *)(v10 - 24);
      if (v15)
      {
        uint64_t v16 = *(void *)(v10 - 16);
        unint64_t v17 = *(void **)(v10 - 24);
        if (v16 != v15)
        {
          uint64_t v18 = *(void *)(v10 - 16);
          do
          {
            BOOL v20 = *(void **)(v18 - 24);
            v18 -= 24;
            BOOL v19 = v20;
            if (v20)
            {
              *(void *)(v16 - 16) = v19;
              operator delete(v19);
            }
            uint64_t v16 = v18;
          }
          while (v18 != v15);
          unint64_t v17 = *(void **)(v10 - 24);
        }
        *(void *)(v10 - 16) = v15;
        operator delete(v17);
      }
      uint64_t v21 = v10 - 48;
      uint64_t v22 = *(void **)(v10 - 48);
      if (v22)
      {
        *(void *)(v10 - 40) = v22;
        operator delete(v22);
      }
      v10 -= 48;
    }
    while (v21 != v9);
  }
  *(void *)(a1 + 48) = v9;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 == v12) {
    return;
  }
  do
  {
    sub_1002C47BC((void *)a1, v11 + 8);
    v11 += 1920;
  }
  while (v11 != v12);
  sub_1000776C4(v63, *a2);
  sub_100148A04((uint64_t)v63, v54);
  if (*(unsigned char *)(a1 + 64))
  {
    __n128 v13 = sub_1001E50BC(a1 + 64, (uint64_t)v54);
    BOOL v14 = (std::__shared_weak_count *)*((void *)&v56 + 1);
    if (*((void *)&v56 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v56 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v14->__on_zero_shared)(v14, v13);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    sub_1001AA12C(a1 + 72, (uint64_t)v54);
    __n128 v13 = v55;
    long long v23 = v56;
    *(__n128 *)(a1 + 104) = v55;
    __n128 v55 = 0uLL;
    *(_OWORD *)(a1 + 120) = v23;
    long long v56 = 0uLL;
    *(unsigned char *)(a1 + 64) = 1;
  }
  uint64_t v24 = (std::__shared_weak_count *)v55.n128_u64[1];
  if (v55.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v55.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v24->__on_zero_shared)(v24, v13);
    std::__shared_weak_count::__release_weak(v24);
  }
  nullsub_15(v54);
  sub_100074A24(v63);
  uint64_t v25 = *a2;
  uint64_t v49 = a2[1];
  if (*a2 == v49) {
    return;
  }
  while (2)
  {
    uint64_t v26 = *(void **)(v25 + 1800);
    double v27 = *(void **)(v25 + 1808);
    while (v26 != v27)
    {
      double v61 = 0;
      int8x16_t __p = 0;
      uint64_t v62 = 0;
      sub_1000776C4(v50, v25);
      sub_100148A04((uint64_t)v50, v51);
      sub_1002C1AA4(a1, (uint64_t)v51, v26, (uint64_t)v54);
      sub_1000737C4(v54, (uint64_t)v57);
      sub_100075C7C(v54);
      unint64_t v29 = v53;
      if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        uint64_t v30 = v52;
        if (!v52) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v30 = v52;
        if (!v52) {
          goto LABEL_48;
        }
      }
      if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
LABEL_48:
      nullsub_15(v51);
      sub_100074A24(v50);
      sub_1002C48E0((uint64_t)v57, a1 + 40, (uint64_t)v54, v31, v32);
      sub_1002C50C8((uint64_t)v57, (uint64_t *)(a1 + 40), v54, (uint64_t)&__p, &v64, v51);
      if ((void **)(a1 + 40) != &__p) {
        sub_1002C3C50((char **)(a1 + 40), (uint64_t *)__p, v61, 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (unsigned char *)__p) >> 4));
      }
      uint64_t v33 = (char *)v58;
      if (v58)
      {
        unint64_t v34 = v59;
        double v35 = v58;
        if (v59 != v58)
        {
          double v36 = v59;
          do
          {
            double v38 = (void *)*((void *)v36 - 3);
            v36 -= 24;
            double v37 = v38;
            if (v38)
            {
              *((void *)v34 - 2) = v37;
              operator delete(v37);
            }
            unint64_t v34 = v36;
          }
          while (v36 != v33);
          double v35 = v58;
        }
        double v59 = v33;
        operator delete(v35);
      }
      if (v57[0])
      {
        v57[1] = v57[0];
        operator delete(v57[0]);
      }
      double v39 = (uint64_t *)__p;
      if (__p)
      {
        double v40 = v61;
        double v28 = __p;
        if (v61 != __p)
        {
          do
          {
            uint64_t v41 = *(v40 - 3);
            if (v41)
            {
              uint64_t v42 = *(v40 - 2);
              double v43 = (void *)*(v40 - 3);
              if (v42 != v41)
              {
                uint64_t v44 = *(v40 - 2);
                do
                {
                  double v46 = *(void **)(v44 - 24);
                  v44 -= 24;
                  uint64_t v45 = v46;
                  if (v46)
                  {
                    *(void *)(v42 - 16) = v45;
                    operator delete(v45);
                  }
                  uint64_t v42 = v44;
                }
                while (v44 != v41);
                double v43 = (void *)*(v40 - 3);
              }
              *(v40 - 2) = v41;
              operator delete(v43);
            }
            double v47 = v40 - 6;
            double v48 = (void *)*(v40 - 6);
            if (v48)
            {
              *(v40 - 5) = (uint64_t)v48;
              operator delete(v48);
            }
            v40 -= 6;
          }
          while (v47 != v39);
          double v28 = __p;
        }
        double v61 = v39;
        operator delete(v28);
      }
      v26 += 9;
    }
    v25 += 1920;
    if (v25 != v49) {
      continue;
    }
    break;
  }
}

void sub_1002C2B40(_Unwind_Exception *a1)
{
}

void sub_1002C2B5C(_Unwind_Exception *a1)
{
}

void sub_1002C2B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100075C7C(&STACK[0x7D0]);
  sub_100148DD8((uint64_t)&STACK[0x790]);
  sub_100074A24(va);
  sub_1002C2C64((void **)&STACK[0x848]);
  _Unwind_Resume(a1);
}

void sub_1002C2BAC(_Unwind_Exception *a1)
{
}

void sub_1002C2BC0(_Unwind_Exception *a1)
{
}

uint64_t sub_1002C2BDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  double v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void **sub_1002C2C64(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 3);
        if (v5)
        {
          uint64_t v6 = *((void *)v3 - 2);
          uint64_t v7 = (void *)*((void *)v3 - 3);
          if (v6 != v5)
          {
            uint64_t v8 = *((void *)v3 - 2);
            do
            {
              uint64_t v10 = *(void **)(v8 - 24);
              v8 -= 24;
              uint64_t v9 = v10;
              if (v10)
              {
                *(void *)(v6 - 16) = v9;
                operator delete(v9);
              }
              uint64_t v6 = v8;
            }
            while (v8 != v5);
            uint64_t v7 = (void *)*((void *)v3 - 3);
          }
          *((void *)v3 - 2) = v5;
          operator delete(v7);
        }
        uint64_t v11 = v3 - 48;
        uint64_t v12 = (void *)*((void *)v3 - 6);
        if (v12)
        {
          *((void *)v3 - 5) = v12;
          operator delete(v12);
        }
        v3 -= 48;
      }
      while (v11 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double sub_1002C2D30(double *a1, uint64_t **a2)
{
  uint64_t v50 = 0;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3)
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    BOOL v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    BOOL v12 = 0;
    BOOL v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    goto LABEL_56;
  }
  while (1)
  {
    uint64_t v15 = *v4;
    uint64_t v18 = v4[1];
    uint64_t v10 = (void *)v4[3];
    uint64_t v7 = (void *)v4[4];
    if (v10 != v7) {
      break;
    }
    unint64_t v16 = v18 - v15;
    if ((unint64_t)(v18 - v15) <= 0x1F) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = -1;
    }
    if (v15 != v18 + 16 * v17)
    {
      BOOL v28 = 0;
      uint64_t v25 = 0;
      BOOL v29 = 0;
      uint64_t v30 = 0;
      uint64_t v7 = (void *)v4[3];
      uint64_t v6 = v7;
      goto LABEL_40;
    }
LABEL_7:
    v4 += 6;
    if (v4 == v3)
    {
      BOOL v5 = 0;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      BOOL v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      BOOL v12 = 0;
      BOOL v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v4 = v3;
      goto LABEL_56;
    }
  }
  BOOL v19 = (void *)v4[3];
  while (1)
  {
    uint64_t v20 = v19[1];
    uint64_t v21 = (unint64_t)(v20 - *v19) <= 0x1F ? 0 : -1;
    if (*v19 != v20 + 16 * v21) {
      break;
    }
    v19 += 3;
    if (v19 == v7)
    {
      BOOL v19 = (void *)v4[4];
      break;
    }
  }
  unint64_t v16 = v18 - v15;
  if ((unint64_t)(v18 - v15) <= 0x1F) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = -1;
  }
  if (v15 == v18 + 16 * v22 && v19 == v7) {
    goto LABEL_7;
  }
  uint64_t v6 = (void *)v4[3];
  while (1)
  {
    uint64_t v25 = *v6;
    uint64_t v24 = v6[1];
    unint64_t v26 = v24 - *v6;
    uint64_t v27 = v26 <= 0x1F ? 0 : -1;
    if (v25 != v24 + 16 * v27) {
      break;
    }
    v6 += 3;
    if (v6 == v7)
    {
      uint64_t v25 = 0;
      BOOL v28 = 0;
      uint64_t v6 = (void *)v4[4];
      goto LABEL_33;
    }
  }
  BOOL v28 = v26 < 0x20;
LABEL_33:
  while (1)
  {
    uint64_t v30 = *v10;
    uint64_t v31 = v10[1];
    unint64_t v32 = v31 - *v10;
    uint64_t v33 = v32 <= 0x1F ? 0 : -1;
    if (v30 != v31 + 16 * v33) {
      break;
    }
    v10 += 3;
    if (v10 == v7)
    {
      BOOL v29 = 0;
      uint64_t v30 = 0;
      uint64_t v10 = (void *)v4[4];
      goto LABEL_40;
    }
  }
  BOOL v29 = v32 < 0x20;
LABEL_40:
  BOOL v5 = v16 < 0x20;
  if (v16 <= 0x1F) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = -1;
  }
  uint64_t v14 = v18 + 16 * v34;
  if (v6 == v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v25;
  }
  BOOL v9 = v6 != v7 && v28;
  if (v10 == v7) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v30;
  }
  BOOL v12 = v10 != v7 && v29;
  BOOL v13 = v5;
LABEL_56:
  HIBYTE(v71[0]) = 0;
  long long v55 = v71[0];
  char v60 = 0;
  long long v56 = 0u;
  long long v57 = *(_OWORD *)v59;
  long long v58 = *(unint64_t *)&v59[16];
  uint64_t v61 = 0;
  char v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  char v66 = 0;
  uint64_t v65 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  char v70 = 0;
  uint64_t v69 = 0;
  memset(v59, 0, sizeof(v59));
  v71[0] = v4;
  v71[1] = v3;
  v71[2] = v15;
  v71[3] = v5;
  v71[4] = v14;
  BOOL v72 = v13;
  double v73 = v6;
  long long v74 = v7;
  uint64_t v75 = v8;
  BOOL v76 = v9;
  uint64_t v77 = v10;
  long long v78 = v7;
  uint64_t v79 = v11;
  BOOL v80 = v12;
  v51[0] = v3;
  v51[1] = v3;
  v51[2] = 0;
  char v52 = 0;
  uint64_t v53 = 0;
  char v54 = 0;
  sub_1002C328C(a1, (uint64_t)v71, v51, (uint64_t)&v49, (uint64_t)v59, (double *)&v50);
  double v35 = *(double **)&v59[16];
  if (*(void *)&v59[16] == v61)
  {
    double v35 = v69;
    if (v70) {
      double v36 = v69;
    }
    else {
      double v36 = v69 + 2;
    }
  }
  else
  {
    double v36 = (double *)(*(void *)&v59[16] + 16 * (v59[24] == 0));
  }
  double v37 = v35[1];
  double v38 = v36[1];
  double v39 = *a1;
  double v40 = a1[1];
  double v41 = *v36 - *v35;
  double v42 = v38 - v37;
  double v43 = *a1 - *v35;
  double v44 = (v38 - v37) * (v40 - v37) + v43 * v41;
  if (v44 <= 0.0)
  {
    double v47 = v43 * v43 + 0.0 + (v40 - v37) * (v40 - v37);
  }
  else
  {
    double v45 = v42 * v42 + v41 * v41;
    if (v45 <= v44)
    {
      double v47 = (v39 - *v36) * (v39 - *v36) + 0.0 + (v40 - v38) * (v40 - v38);
    }
    else
    {
      double v46 = v39 - (*v35 + v41 * (v44 / v45));
      double v47 = v46 * v46 + 0.0 + (v40 - (v37 + v42 * (v44 / v45))) * (v40 - (v37 + v42 * (v44 / v45)));
    }
  }
  return sqrt(v47);
}

uint64_t sub_1002C3108(double *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 == a2[1]) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v6 = *(double **)v2;
    uint64_t v7 = *(double **)(v2 + 8);
    if ((unint64_t)v7 - *(void *)v2 >= 0x40)
    {
      int v15 = 0;
      char v16 = 0;
      if (v6 + 2 == v7)
      {
        uint64_t v5 = 0xFFFFFFFFLL;
        goto LABEL_4;
      }
      do
      {
        if (!sub_10004D030(a1, v6, v6 + 2, (uint64_t)&v15)) {
          break;
        }
        uint64_t v8 = v6 + 4;
        v6 += 2;
      }
      while (v8 != v7);
      if (v15) {
        uint64_t v5 = 1;
      }
      else {
        uint64_t v5 = 0xFFFFFFFFLL;
      }
      if (v16)
      {
        uint64_t v5 = 0;
LABEL_4:
        if ((v5 & 0x80000000) == 0) {
          return v5;
        }
        goto LABEL_5;
      }
      if (v15) {
        break;
      }
    }
LABEL_5:
    v2 += 48;
    if (v2 == a2[1]) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v10 = *(double ***)(v2 + 24);
  BOOL v9 = *(double ***)(v2 + 32);
  if (v10 != v9)
  {
    while (1)
    {
      uint64_t v11 = *v10;
      BOOL v12 = v10[1];
      if ((unint64_t)((char *)v12 - (char *)*v10) >= 0x40)
      {
        int v15 = 0;
        char v16 = 0;
        if (v11 + 2 != v12)
        {
          do
          {
            if (!sub_10004D030(a1, v11, v11 + 2, (uint64_t)&v15)) {
              break;
            }
            BOOL v13 = v11 + 4;
            v11 += 2;
          }
          while (v13 != v12);
          if (v16) {
            return 0;
          }
          if (v15) {
            goto LABEL_5;
          }
          BOOL v9 = *(double ***)(v2 + 32);
        }
      }
      v10 += 3;
      if (v10 == v9) {
        goto LABEL_4;
      }
    }
  }
  return 1;
}

double *sub_1002C328C(double *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, double *a6)
{
  *(void *)a5 = *(void *)a2;
  *(void *)(a5 + 8) = *(void *)(a2 + 8);
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a5 + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a5 + 16) = v11;
    *(void *)(a5 + 48) = *(void *)(a2 + 48);
    *(void *)(a5 + 56) = *(void *)(a2 + 56);
    if (*(void *)(a2 + 48) != *(void *)(a2 + 56))
    {
      uint64_t v12 = *(void *)(a2 + 64);
      *(unsigned char *)(a5 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a5 + 64) = v12;
    }
    *(void *)(a5 + 80) = *(void *)(a2 + 80);
    *(void *)(a5 + 88) = *(void *)(a2 + 88);
    if (*(void *)(a2 + 80) != *(void *)(a2 + 88))
    {
      uint64_t v13 = *(void *)(a2 + 96);
      *(unsigned char *)(a5 + 104) = *(unsigned char *)(a2 + 104);
      *(void *)(a5 + 96) = v13;
    }
  }
  uint64_t v14 = *(double **)(a5 + 16);
  if (v14 == *(double **)(a5 + 32))
  {
    uint64_t v14 = *(double **)(a5 + 96);
    if (*(unsigned char *)(a5 + 104)) {
      int v15 = *(double **)(a5 + 96);
    }
    else {
      int v15 = v14 + 2;
    }
  }
  else
  {
    int v15 = &v14[2 * (*(unsigned char *)(a5 + 24) == 0)];
  }
  double v16 = v14[1];
  double v17 = v15[1];
  double v18 = *a1;
  double v19 = a1[1];
  double v20 = *v15 - *v14;
  double v21 = v17 - v16;
  double v22 = *a1 - *v14;
  double v23 = (v17 - v16) * (v19 - v16) + v22 * v20;
  if (v23 <= 0.0)
  {
    *a6 = v22 * v22 + 0.0 + (v19 - v16) * (v19 - v16);
    BOOL result = *(double **)(a2 + 16);
    unint64_t v26 = *(double **)(a2 + 32);
    if (result == v26) {
      goto LABEL_18;
    }
  }
  else
  {
    double v24 = v21 * v21 + v20 * v20;
    if (v24 <= v23)
    {
      *a6 = (v18 - *v15) * (v18 - *v15) + 0.0 + (v19 - v17) * (v19 - v17);
      BOOL result = *(double **)(a2 + 16);
      unint64_t v26 = *(double **)(a2 + 32);
      if (result == v26) {
        goto LABEL_18;
      }
    }
    else
    {
      *a6 = (v18 - (*v14 + v20 * (v23 / v24))) * (v18 - (*v14 + v20 * (v23 / v24)))
          + 0.0
          + (v19 - (v16 + v21 * (v23 / v24))) * (v19 - (v16 + v21 * (v23 / v24)));
      BOOL result = *(double **)(a2 + 16);
      unint64_t v26 = *(double **)(a2 + 32);
      if (result == v26)
      {
LABEL_18:
        uint64_t v28 = *(void *)(a2 + 96) + 16;
        *(void *)(a2 + 96) = v28;
        uint64_t v27 = *(double ***)(a2 + 80);
        BOOL v29 = v27[1];
        if ((unint64_t)((char *)v29 - (char *)*v27) <= 0x1F) {
          uint64_t v30 = 0;
        }
        else {
          uint64_t v30 = -1;
        }
        if ((double *)v28 == &v29[2 * v30])
        {
          v27 += 3;
          *(void *)(a2 + 80) = v27;
          int v93 = *(double ***)(a2 + 88);
          if (v27 != v93)
          {
            while (1)
            {
              int v94 = *v27;
              unint64_t v95 = v27[1];
              unint64_t v96 = (char *)v95 - (char *)*v27;
              uint64_t v97 = v96 <= 0x1F ? 0 : -1;
              if (v94 != &v95[2 * v97]) {
                break;
              }
              v27 += 3;
              *(void *)(a2 + 80) = v27;
              if (v27 == v93)
              {
                uint64_t v27 = v93;
                goto LABEL_22;
              }
            }
            *(void *)(a2 + 96) = v94;
            *(unsigned char *)(a2 + 104) = v96 < 0x20;
          }
        }
        goto LABEL_22;
      }
    }
  }
  result += 2;
  *(void *)(a2 + 16) = result;
  uint64_t v27 = *(double ***)(a2 + 80);
LABEL_22:
  uint64_t v31 = *(void **)a2;
  uint64_t v32 = *(void *)(*(void *)a2 + 8);
  if ((unint64_t)(v32 - **(void **)a2) <= 0x1F) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = -1;
  }
  BOOL v34 = result == (double *)(v32 + 16 * v33) && v27 == *(double ***)(*(void *)a2 + 32);
  if (v34 && (v27 == *(double ***)(a2 + 88) || !*(void *)(a2 + 96)))
  {
    *(void *)a2 = v31 + 6;
    sub_1002C3974(a2);
    uint64_t v31 = *(void **)a2;
    BOOL result = *(double **)(a2 + 16);
    unint64_t v26 = *(double **)(a2 + 32);
    uint64_t v27 = *(double ***)(a2 + 80);
  }
  double v35 = *(void **)(a2 + 8);
  unint64_t v36 = *(void *)(a2 + 24);
  unint64_t v37 = v36 >> 8;
  char v38 = *(unsigned char *)(a2 + 40);
  double v40 = *(uint64_t **)(a2 + 48);
  double v39 = *(uint64_t **)(a2 + 56);
  uint64_t v41 = *(void *)(a2 + 64);
  char v42 = *(unsigned char *)(a2 + 72);
  double v43 = *(double ***)(a2 + 88);
  double v44 = *(double **)(a2 + 96);
  char v45 = *(unsigned char *)(a2 + 104);
LABEL_35:
  while (v31 != (void *)*a3
       || v31 != v35 && (result != (double *)a3[2] || v27 != (double **)a3[10] || v27 != v43 && v44 != (double *)a3[12]))
  {
    double v46 = v44 + 2;
    if (v45) {
      double v47 = v44;
    }
    else {
      double v47 = v44 + 2;
    }
    if ((_BYTE)v36) {
      double v48 = result;
    }
    else {
      double v48 = result + 2;
    }
    if (result == v26) {
      char v49 = v44;
    }
    else {
      char v49 = result;
    }
    if (result != v26) {
      double v47 = v48;
    }
    double v50 = v49[1];
    double v51 = v47[1];
    double v52 = *a1;
    double v53 = a1[1];
    double v54 = *v47 - *v49;
    double v55 = v51 - v50;
    double v56 = *a1 - *v49;
    double v57 = (v51 - v50) * (v53 - v50) + v56 * v54;
    if (v57 <= 0.0)
    {
      double v59 = v56 * v56 + 0.0 + (v53 - v50) * (v53 - v50);
      if (v59 == 0.0) {
        goto LABEL_140;
      }
    }
    else
    {
      double v58 = v55 * v55 + v54 * v54;
      if (v58 <= v57)
      {
        double v59 = (v52 - *v47) * (v52 - *v47) + 0.0 + (v53 - v51) * (v53 - v51);
        if (v59 == 0.0) {
          goto LABEL_140;
        }
      }
      else
      {
        double v59 = (v52 - (*v49 + v54 * (v57 / v58))) * (v52 - (*v49 + v54 * (v57 / v58)))
            + 0.0
            + (v53 - (v50 + v55 * (v57 / v58))) * (v53 - (v50 + v55 * (v57 / v58)));
        if (v59 == 0.0) {
          goto LABEL_140;
        }
      }
    }
    if (*(void *)&v59 >> 52 <= 0x7FEuLL)
    {
      double v60 = fabs(v59);
      double v61 = 2.22044605e-16;
      if (v60 >= 1.0) {
        double v61 = v60 * 2.22044605e-16;
      }
      if (v60 <= v61)
      {
LABEL_140:
        *a6 = v59;
        *(void *)a5 = v31;
        *(void *)(a5 + 8) = v35;
        if (v31 != v35)
        {
          *(void *)(a5 + 16) = result;
          *(void *)(a5 + 24) = v36 | (v37 << 8);
          *(void *)(a5 + 32) = v26;
          *(unsigned char *)(a5 + 40) = v38;
          *(void *)(a5 + 48) = v40;
          *(void *)(a5 + 56) = v39;
          if (v40 != v39)
          {
            *(void *)(a5 + 64) = v41;
            *(unsigned char *)(a5 + 72) = v42;
          }
          *(void *)(a5 + 80) = v27;
          *(void *)(a5 + 88) = v43;
          if (v27 != v43)
          {
            *(void *)(a5 + 96) = v44;
            *(unsigned char *)(a5 + 104) = v45;
          }
        }
        return result;
      }
    }
    if (v59 < *a6)
    {
      *a6 = v59;
      *(void *)a5 = v31;
      *(void *)(a5 + 8) = v35;
      if (v31 != v35)
      {
        *(void *)(a5 + 16) = result;
        *(void *)(a5 + 24) = v36 | (v37 << 8);
        *(void *)(a5 + 32) = v26;
        *(unsigned char *)(a5 + 40) = v38;
        *(void *)(a5 + 48) = v40;
        *(void *)(a5 + 56) = v39;
        if (v40 != v39)
        {
          *(void *)(a5 + 64) = v41;
          *(unsigned char *)(a5 + 72) = v42;
        }
        *(void *)(a5 + 80) = v27;
        *(void *)(a5 + 88) = v43;
        if (v27 != v43)
        {
          *(void *)(a5 + 96) = v44;
          *(unsigned char *)(a5 + 104) = v45;
        }
      }
    }
    if (result == v26)
    {
      char v62 = v27[1];
      if ((unint64_t)((char *)v62 - (char *)*v27) <= 0x1F) {
        uint64_t v63 = 0;
      }
      else {
        uint64_t v63 = -1;
      }
      if (v46 == &v62[2 * v63])
      {
        while (1)
        {
          v27 += 3;
          if (v27 == v43) {
            break;
          }
          double v44 = *v27;
          uint64_t v64 = v27[1];
          unint64_t v65 = (char *)v64 - (char *)*v27;
          if (v65 <= 0x1F) {
            uint64_t v66 = 0;
          }
          else {
            uint64_t v66 = -1;
          }
          if (v44 != &v64[2 * v66])
          {
            char v45 = v65 < 0x20;
            goto LABEL_83;
          }
        }
        double v44 = v46;
        uint64_t v27 = v43;
      }
      else
      {
        double v44 = v46;
      }
LABEL_83:
      BOOL result = v26;
    }
    else
    {
      result += 2;
    }
    uint64_t v67 = v31[1];
    if ((unint64_t)(v67 - *v31) <= 0x1F) {
      uint64_t v68 = 0;
    }
    else {
      uint64_t v68 = -1;
    }
    BOOL v69 = result == (double *)(v67 + 16 * v68) && v27 == (double **)v31[4];
    if (!v69 || v27 != v43 && v44) {
      continue;
    }
    char v70 = v31 + 6;
    uint64_t v31 = v35;
    if (v70 == v35) {
      continue;
    }
    uint64_t v31 = v70;
    while (1)
    {
      double v73 = (double *)*v31;
      uint64_t v74 = v31[1];
      uint64_t v75 = (double **)v31[3];
      BOOL v76 = (double **)v31[4];
      if (v75 != v76) {
        break;
      }
      unint64_t v71 = v74 - (void)v73;
      if ((unint64_t)(v74 - (void)v73) <= 0x1F) {
        uint64_t v72 = 0;
      }
      else {
        uint64_t v72 = -1;
      }
      if (v73 != (double *)(v74 + 16 * v72))
      {
        BOOL v86 = 0;
        uint64_t v83 = 0;
        BOOL v87 = 0;
        uint64_t v88 = 0;
        BOOL v76 = (double **)v31[3];
        double v40 = (uint64_t *)v76;
        goto LABEL_132;
      }
LABEL_100:
      v31 += 6;
      if (v31 == v35)
      {
        uint64_t v31 = v35;
        goto LABEL_35;
      }
    }
    uint64_t v77 = (double **)v31[3];
    while (1)
    {
      long long v78 = v77[1];
      uint64_t v79 = (unint64_t)((char *)v78 - (char *)*v77) <= 0x1F ? 0 : -1;
      if (*v77 != &v78[2 * v79]) {
        break;
      }
      v77 += 3;
      if (v77 == v76)
      {
        uint64_t v77 = (double **)v31[4];
        break;
      }
    }
    unint64_t v71 = v74 - (void)v73;
    if ((unint64_t)(v74 - (void)v73) <= 0x1F) {
      uint64_t v80 = 0;
    }
    else {
      uint64_t v80 = -1;
    }
    if (v73 == (double *)(v74 + 16 * v80) && v77 == v76) {
      goto LABEL_100;
    }
    double v40 = (uint64_t *)v31[3];
    while (1)
    {
      uint64_t v83 = *v40;
      uint64_t v82 = v40[1];
      unint64_t v84 = v82 - *v40;
      uint64_t v85 = v84 <= 0x1F ? 0 : -1;
      if (v83 != v82 + 16 * v85) {
        break;
      }
      v40 += 3;
      if (v40 == (uint64_t *)v76)
      {
        uint64_t v83 = 0;
        BOOL v86 = 0;
        double v40 = (uint64_t *)v31[4];
        goto LABEL_125;
      }
    }
    BOOL v86 = v84 < 0x20;
LABEL_125:
    while (1)
    {
      uint64_t v88 = *v75;
      unint64_t v89 = v75[1];
      unint64_t v90 = (char *)v89 - (char *)*v75;
      uint64_t v91 = v90 <= 0x1F ? 0 : -1;
      if (v88 != &v89[2 * v91]) {
        break;
      }
      v75 += 3;
      if (v75 == v76)
      {
        BOOL v87 = 0;
        uint64_t v88 = 0;
        uint64_t v75 = (double **)v31[4];
        goto LABEL_132;
      }
    }
    BOOL v87 = v90 < 0x20;
LABEL_132:
    unint64_t v37 = 0;
    char v38 = v71 < 0x20;
    if (v71 <= 0x1F) {
      uint64_t v92 = 0;
    }
    else {
      uint64_t v92 = -1;
    }
    unint64_t v26 = (double *)(v74 + 16 * v92);
    if (v40 != (uint64_t *)v76)
    {
      char v42 = v86;
      uint64_t v41 = v83;
    }
    if (v75 != v76)
    {
      double v44 = v88;
      char v45 = v87;
    }
    double v43 = v76;
    uint64_t v27 = v75;
    double v39 = (uint64_t *)v76;
    BOOL result = (double *)*v31;
    LOBYTE(v36) = v71 < 0x20;
  }
  return result;
}

uint64_t sub_1002C3974(uint64_t result)
{
  uint64_t v2 = *(uint64_t **)result;
  uint64_t v1 = *(uint64_t **)(result + 8);
  while (v2 != v1)
  {
    uint64_t v5 = *v2;
    uint64_t v4 = v2[1];
    uint64_t v7 = (uint64_t *)v2[3];
    uint64_t v6 = (uint64_t *)v2[4];
    if (v7 == v6)
    {
      if ((unint64_t)(v4 - v5) <= 0x1F) {
        uint64_t v3 = 0;
      }
      else {
        uint64_t v3 = -1;
      }
      if (v5 != v4 + 16 * v3) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v8 = (uint64_t *)v2[3];
      while (1)
      {
        uint64_t v9 = v8[1];
        uint64_t v10 = (unint64_t)(v9 - *v8) <= 0x1F ? 0 : -1;
        if (*v8 != v9 + 16 * v10) {
          break;
        }
        v8 += 3;
        if (v8 == v6)
        {
          uint64_t v8 = (uint64_t *)v2[4];
          break;
        }
      }
      if ((unint64_t)(v4 - v5) <= 0x1F) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = -1;
      }
      if (v5 != v4 + 16 * v11 || v8 != v6)
      {
        if (v7 == v6)
        {
LABEL_31:
          BOOL v18 = 0;
          uint64_t v14 = 0;
          BOOL v19 = 0;
          uint64_t v20 = 0;
          uint64_t v13 = v7;
        }
        else
        {
          uint64_t v13 = (uint64_t *)v2[3];
          while (1)
          {
            uint64_t v14 = *v13;
            uint64_t v15 = v13[1];
            unint64_t v16 = v15 - *v13;
            uint64_t v17 = v16 <= 0x1F ? 0 : -1;
            if (v14 != v15 + 16 * v17) {
              break;
            }
            v13 += 3;
            if (v13 == v6)
            {
              uint64_t v14 = 0;
              BOOL v18 = 0;
              uint64_t v13 = v6;
              goto LABEL_33;
            }
          }
          BOOL v18 = v16 < 0x20;
LABEL_33:
          while (1)
          {
            uint64_t v20 = *v7;
            uint64_t v21 = v7[1];
            unint64_t v22 = v21 - *v7;
            uint64_t v23 = v22 <= 0x1F ? 0 : -1;
            if (v20 != v21 + 16 * v23) {
              break;
            }
            v7 += 3;
            if (v7 == v6)
            {
              BOOL v19 = 0;
              uint64_t v20 = 0;
              uint64_t v7 = v6;
              goto LABEL_40;
            }
          }
          BOOL v19 = v22 < 0x20;
        }
LABEL_40:
        BOOL v24 = (unint64_t)(v4 - v5) < 0x20;
        if ((unint64_t)(v4 - v5) <= 0x1F) {
          uint64_t v25 = 0;
        }
        else {
          uint64_t v25 = -1;
        }
        *(void *)(result + 16) = v5;
        *(void *)(result + 24) = v24;
        *(void *)(result + 32) = v4 + 16 * v25;
        *(unsigned char *)(result + 40) = v24;
        *(void *)(result + 48) = v13;
        *(void *)(result + 56) = v6;
        if (v13 != v6)
        {
          *(void *)(result + 64) = v14;
          *(unsigned char *)(result + 72) = v18;
        }
        *(void *)(result + 80) = v7;
        *(void *)(result + 88) = v6;
        if (v7 != v6)
        {
          *(void *)(result + 96) = v20;
          *(unsigned char *)(result + 104) = v19;
        }
        return result;
      }
    }
    v2 += 6;
    *(void *)BOOL result = v2;
  }
  return result;
}

double sub_1002C3AF4(double *a1, double **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v3 == v4)
  {
    unint64_t v22 = &off_10045FE58;
    v18.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/"
                          "Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/lo"
                          "cal/include/boost/geometry/algorithms/detail/throw_on_empty_input.hpp";
    v18.i64[1] = (uint64_t)"void boost::geometry::detail::throw_on_empty_input(const Geometry &) [Geometry = boost::geomet"
                          "ry::model::linestring<boost::geometry::model::d2::point_xy<double>>]";
    uint64_t v19 = 54;
    sub_1001DEE14((uint64_t)&v22, &v18);
  }
  uint64_t v21 = 0;
  v18.i64[0] = 0;
  unint64_t v22 = 0;
  sub_10004D3F0(a1, v3, v4, (uint64_t)&v20, (double **)&v18, (double **)&v22, (double *)&v21);
  double v6 = *((double *)v22 + 1);
  double v7 = *a1;
  double v8 = a1[1];
  double v9 = *(double *)(v18.i64[0] + 8);
  double v10 = *(double *)v22 - *(double *)v18.i64[0];
  double v11 = v6 - v9;
  double v12 = *a1 - *(double *)v18.i64[0];
  double v13 = (v8 - v9) * (v6 - v9) + v12 * v10;
  if (v13 <= 0.0) {
    return sqrt(v12 * v12 + 0.0 + (v8 - v9) * (v8 - v9));
  }
  double v14 = v11 * v11 + v10 * v10;
  if (v14 <= v13)
  {
    double v15 = v8 - v6;
    double v16 = v7 - *(double *)v22;
  }
  else
  {
    double v15 = v8 - (v9 + v11 * (v13 / v14));
    double v16 = v7 - (*(double *)v18.i64[0] + v10 * (v13 / v14));
  }
  return sqrt(v16 * v16 + 0.0 + v15 * v15);
}

void sub_1002C3C3C(_Unwind_Exception *a1)
{
  std::exception::~exception((std::exception *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1002C3C50(char **a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  double v6 = a2;
  uint64_t v8 = (uint64_t)(a1 + 2);
  double v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) < a4)
  {
    sub_1002C3F10((void **)a1);
    if (a4 > 0x555555555555555) {
      goto LABEL_39;
    }
    unint64_t v10 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v10;
    if (v11 > 0x555555555555555) {
LABEL_39:
    }
      sub_1000A9108();
    uint64_t v12 = 48 * v11;
    double v13 = (char *)operator new(48 * v11);
    *a1 = v13;
    a1[1] = v13;
    a1[2] = &v13[v12];
    double v14 = (char *)sub_1002C3FE0(v8, v6, a3, v13);
LABEL_23:
    a1[1] = v14;
    return;
  }
  double v15 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 4) < a4)
  {
    double v16 = &a2[2 * ((v15 - v9) >> 4)];
    if (v15 != v9)
    {
      uint64_t v17 = 16 * ((v15 - v9) >> 4);
      do
      {
        if (v6 != (uint64_t *)v9)
        {
          sub_1002C43FC(v9, (char *)*v6, (char *)v6[1], (v6[1] - *v6) >> 4);
          sub_1002C4544((uint64_t)(v9 + 24), (char **)v6[3], v6[4], 0xAAAAAAAAAAAAAAABLL * ((v6[4] - v6[3]) >> 3));
        }
        v6 += 6;
        v9 += 48;
        v17 -= 48;
      }
      while (v17);
      double v9 = a1[1];
    }
    double v14 = (char *)sub_1002C3FE0(v8, v16, a3, v9);
    goto LABEL_23;
  }
  if (a2 != a3)
  {
    int8x16_t v18 = *a1;
    do
    {
      if (v6 != (uint64_t *)v9)
      {
        sub_1002C43FC(v9, (char *)*v6, (char *)v6[1], (v6[1] - *v6) >> 4);
        sub_1002C4544((uint64_t)(v9 + 24), (char **)v6[3], v6[4], 0xAAAAAAAAAAAAAAABLL * ((v6[4] - v6[3]) >> 3));
      }
      v6 += 6;
      v9 += 48;
      v18 += 48;
    }
    while (v6 != a3);
    double v15 = a1[1];
    if (v15 == v18) {
      goto LABEL_27;
    }
    goto LABEL_29;
  }
  int8x16_t v18 = *a1;
  if (v15 != v9)
  {
    do
    {
LABEL_29:
      uint64_t v19 = *((void *)v15 - 3);
      if (v19)
      {
        uint64_t v20 = *((void *)v15 - 2);
        uint64_t v21 = (void *)*((void *)v15 - 3);
        if (v20 != v19)
        {
          uint64_t v22 = *((void *)v15 - 2);
          do
          {
            BOOL v24 = *(void **)(v22 - 24);
            v22 -= 24;
            uint64_t v23 = v24;
            if (v24)
            {
              *(void *)(v20 - 16) = v23;
              operator delete(v23);
            }
            uint64_t v20 = v22;
          }
          while (v22 != v19);
          uint64_t v21 = (void *)*((void *)v15 - 3);
        }
        *((void *)v15 - 2) = v19;
        operator delete(v21);
      }
      uint64_t v25 = v15 - 48;
      unint64_t v26 = (void *)*((void *)v15 - 6);
      if (v26)
      {
        *((void *)v15 - 5) = v26;
        operator delete(v26);
      }
      v15 -= 48;
    }
    while (v25 != v18);
  }
LABEL_27:
  a1[1] = v18;
}

void sub_1002C3F00(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1002C3F08(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1002C3F10(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 3);
        if (v5)
        {
          uint64_t v6 = *((void *)v3 - 2);
          double v7 = (void *)*((void *)v3 - 3);
          if (v6 != v5)
          {
            uint64_t v8 = *((void *)v3 - 2);
            do
            {
              unint64_t v10 = *(void **)(v8 - 24);
              v8 -= 24;
              double v9 = v10;
              if (v10)
              {
                *(void *)(v6 - 16) = v9;
                operator delete(v9);
              }
              uint64_t v6 = v8;
            }
            while (v8 != v5);
            double v7 = (void *)*((void *)v3 - 3);
          }
          *((void *)v3 - 2) = v5;
          operator delete(v7);
        }
        unint64_t v11 = v3 - 48;
        uint64_t v12 = (void *)*((void *)v3 - 6);
        if (v12)
        {
          *((void *)v3 - 5) = v12;
          operator delete(v12);
        }
        v3 -= 48;
      }
      while (v11 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_1002C3FE0(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = a4;
  double v14 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 3;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      uint64_t v8 = (unsigned char *)*(v6 - 3);
      double v7 = (unsigned char *)*(v6 - 2);
      double v9 = v6 - 3;
      int64_t v10 = v7 - v8;
      if (v7 != v8)
      {
        if (v10 < 0) {
          sub_1000A9108();
        }
        unint64_t v11 = (char *)operator new(v7 - v8);
        *uint64_t v4 = v11;
        v4[1] = v11;
        uint64_t v12 = &v11[16 * (v10 >> 4)];
        v4[2] = v12;
        memcpy(v11, v8, v10);
        v4[1] = v12;
      }
      sub_1002C41B0(v4 + 3, v6);
      uint64_t v4 = v14 + 6;
      v14 += 6;
      v6 += 6;
    }
    while (v9 + 6 != a3);
  }
  return v4;
}

void sub_1002C40C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1002C40F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C40F0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      do
      {
        uint64_t v7 = *(void *)(v4 - 24);
        if (v7)
        {
          uint64_t v8 = *(void *)(v4 - 16);
          uint64_t v9 = *(void **)(v4 - 24);
          if (v8 != v7)
          {
            uint64_t v10 = *(void *)(v4 - 16);
            do
            {
              uint64_t v12 = *(void **)(v10 - 24);
              v10 -= 24;
              unint64_t v11 = v12;
              if (v12)
              {
                *(void *)(v8 - 16) = v11;
                operator delete(v11);
              }
              uint64_t v8 = v10;
            }
            while (v10 != v7);
            uint64_t v9 = *(void **)(v4 - 24);
          }
          *(void *)(v4 - 16) = v7;
          operator delete(v9);
        }
        uint64_t v13 = v4 - 48;
        double v14 = *(void **)(v4 - 48);
        if (v14)
        {
          *(void *)(v4 - 40) = v14;
          operator delete(v14);
        }
        v4 -= 48;
      }
      while (v13 != v5);
    }
  }
  return a1;
}

void *sub_1002C41B0(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1000A9108();
    }
    uint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = sub_1002C4288(v3, v4, v5, v8);
  }
  return a1;
}

void sub_1002C425C(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_1003A6E84((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002C4288(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          sub_1000A9108();
        }
        unint64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[16 * (v10 >> 4)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1002C4354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002C4368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1002C438C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C438C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void *sub_1002C43FC(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (__sz >> 60) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
LABEL_22:
    }
      sub_1000A9108();
    uint64_t v13 = 2 * v12;
    BOOL result = operator new(16 * v12);
    uint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    _DWORD v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      BOOL result = memcpy(result, v6, v14);
    }
    double v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  double v15 = (void **)(result + 1);
  double v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    BOOL result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  int8x16_t v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    BOOL result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *double v15 = &v9[v14];
  return result;
}

void sub_1002C4544(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      BOOL v11 = *(char ***)(a1 + 8);
      unint64_t v12 = *(char ***)a1;
      if (v11 != v10)
      {
        uint64_t v13 = *(char ***)(a1 + 8);
        do
        {
          double v15 = *(v13 - 3);
          v13 -= 3;
          size_t v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          BOOL v11 = v13;
        }
        while (v13 != v10);
        unint64_t v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_1000A9108();
    uint64_t v23 = 3 * v22;
    BOOL v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    uint64_t v25 = sub_1002C4288(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  double v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_1002C43FC(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      uint64_t v10 = *(char ***)(a1 + 8);
    }
    uint64_t v25 = sub_1002C4288(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    uint64_t v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_1002C43FC(v10, *v6, v6[1], (v6[1] - *v6) >> 4);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    double v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  uint64_t v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    unint64_t v26 = v16;
    do
    {
      uint64_t v28 = *(v26 - 3);
      v26 -= 3;
      uint64_t v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      double v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_1002C47AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1002C47B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

const void ***sub_1002C47BC(void *a1, uint64_t a2)
{
  int8x16_t __p = (uint64_t ***)operator new(0x20uLL);
  void *__p = 0;
  __p[1] = 0;
  sub_100085B24(__p + 2, a2);
  __p[1] = (uint64_t **)sub_100077F68((uint64_t)&v9, __p + 2);
  uint64_t v4 = sub_100061FB0(a1, (uint64_t)__p);
  if ((v5 & 1) == 0 && __p)
  {
    uint64_t v6 = (std::__shared_weak_count *)__p[3];
    if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    operator delete(__p);
  }
  return v4;
}

void sub_1002C48B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002C48CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

int64x2_t sub_1002C48E0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  char v9 = *(double **)a1;
  uint64_t v8 = *(double **)(a1 + 8);
  if (*(double **)a1 != v8)
  {
    BOOL v10 = 0;
    BOOL v11 = *(void **)a2;
    unint64_t v12 = *(void **)(a2 + 8);
    if (*(void **)a2 == v12) {
      goto LABEL_34;
    }
LABEL_11:
    uint64_t v18 = v11;
    while (*v18 == v18[1])
    {
      uint64_t v19 = (void *)v18[3];
      unint64_t v20 = (void *)v18[4];
      if (v19 != v20)
      {
        while (*v19 == v19[1])
        {
          v19 += 3;
          if (v19 == v20) {
            goto LABEL_12;
          }
        }
        break;
      }
LABEL_12:
      v18 += 6;
      if (v18 == v12) {
        goto LABEL_34;
      }
    }
    if (v10)
    {
      sub_1002C4CF4(v11, v12, v49.f64);
      goto LABEL_68;
    }
    if (v9 == v8)
    {
      sub_1002C4EE0((void *)(a1 + 24), &v49);
      BOOL v11 = *(void **)a2;
      unint64_t v12 = *(void **)(a2 + 8);
    }
    else
    {
      double v21 = *v9;
      double v22 = v9[1];
      v49.f64[0] = v21;
      v49.f64[1] = v22;
      double v50 = v21;
      double v51 = v22;
      uint64_t v23 = v9 + 2;
      if (v9 + 2 != v8)
      {
        double v24 = v21;
        double v25 = v22;
        do
        {
          double v26 = *v23;
          if (*v23 < v21)
          {
            v49.f64[0] = *v23;
            double v21 = v26;
            if (v26 <= v24)
            {
LABEL_26:
              double v27 = v23[1];
              if (v27 >= v22) {
                goto LABEL_27;
              }
              goto LABEL_31;
            }
          }
          else if (v26 <= v24)
          {
            goto LABEL_26;
          }
          double v50 = v26;
          double v24 = v26;
          double v27 = v23[1];
          if (v27 >= v22)
          {
LABEL_27:
            if (v27 > v25) {
              goto LABEL_32;
            }
            goto LABEL_23;
          }
LABEL_31:
          v49.f64[1] = v27;
          double v22 = v27;
          if (v27 > v25)
          {
LABEL_32:
            double v51 = v27;
            double v25 = v27;
          }
LABEL_23:
          v23 += 2;
        }
        while (v23 != v8);
      }
    }
    sub_1002C4CF4(v11, v12, &v52);
    double v36 = v49.f64[0];
    if (v52 < v49.f64[0])
    {
      v49.f64[0] = v52;
      double v36 = v52;
      double v37 = v53;
      double v38 = v50;
      if (v52 <= v50)
      {
LABEL_52:
        double v39 = v49.f64[1];
        if (v37 >= v49.f64[1]) {
          goto LABEL_53;
        }
        goto LABEL_61;
      }
    }
    else
    {
      double v37 = v53;
      double v38 = v50;
      if (v52 <= v50) {
        goto LABEL_52;
      }
    }
    double v50 = v52;
    double v38 = v52;
    double v39 = v49.f64[1];
    if (v37 >= v49.f64[1])
    {
LABEL_53:
      double v40 = v54;
      double v41 = v51;
      if (v37 <= v51) {
        goto LABEL_54;
      }
      goto LABEL_62;
    }
LABEL_61:
    v49.f64[1] = v37;
    double v39 = v37;
    double v40 = v54;
    double v41 = v51;
    if (v37 <= v51)
    {
LABEL_54:
      if (v40 >= v36) {
        goto LABEL_55;
      }
      goto LABEL_63;
    }
LABEL_62:
    double v51 = v37;
    double v41 = v37;
    if (v40 >= v36)
    {
LABEL_55:
      double v42 = v55;
      if (v40 <= v38) {
        goto LABEL_56;
      }
      goto LABEL_64;
    }
LABEL_63:
    v49.f64[0] = v40;
    double v42 = v55;
    if (v40 <= v38)
    {
LABEL_56:
      if (v42 >= v39) {
        goto LABEL_57;
      }
      goto LABEL_65;
    }
LABEL_64:
    double v50 = v40;
    if (v42 >= v39)
    {
LABEL_57:
      if (v42 <= v41) {
        goto LABEL_68;
      }
      goto LABEL_66;
    }
LABEL_65:
    v49.f64[1] = v42;
    if (v42 <= v41) {
      goto LABEL_68;
    }
LABEL_66:
    double v51 = v42;
    goto LABEL_68;
  }
  uint64_t v13 = *(uint64_t **)(a1 + 24);
  size_t v14 = *(uint64_t **)(a1 + 32);
  if (v13 == v14)
  {
    BOOL v10 = 1;
    BOOL v11 = *(void **)a2;
    unint64_t v12 = *(void **)(a2 + 8);
    if (*(void **)a2 == v12) {
      goto LABEL_34;
    }
    goto LABEL_11;
  }
  do
  {
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    v13 += 3;
    BOOL v17 = v15 == v16;
    BOOL v10 = v15 == v16;
    BOOL v17 = !v17 || v13 == v14;
  }
  while (!v17);
  BOOL v11 = *(void **)a2;
  unint64_t v12 = *(void **)(a2 + 8);
  if (*(void **)a2 != v12) {
    goto LABEL_11;
  }
LABEL_34:
  if (v10)
  {
    double v28 = 0.0;
    goto LABEL_80;
  }
  if (v9 == v8)
  {
    sub_1002C4EE0((void *)(a1 + 24), &v49);
  }
  else
  {
    double v29 = *v9;
    double v30 = v9[1];
    v49.f64[0] = v29;
    v49.f64[1] = v30;
    double v50 = v29;
    double v51 = v30;
    uint64_t v31 = v9 + 2;
    if (v9 + 2 != v8)
    {
      double v32 = v29;
      double v33 = v30;
      do
      {
        double v34 = *v31;
        if (*v31 < v29)
        {
          v49.f64[0] = *v31;
          double v29 = v34;
          if (v34 <= v32)
          {
LABEL_42:
            double v35 = v31[1];
            if (v35 >= v30) {
              goto LABEL_43;
            }
            goto LABEL_47;
          }
        }
        else if (v34 <= v32)
        {
          goto LABEL_42;
        }
        double v50 = v34;
        double v32 = v34;
        double v35 = v31[1];
        if (v35 >= v30)
        {
LABEL_43:
          if (v35 > v33) {
            goto LABEL_48;
          }
          goto LABEL_39;
        }
LABEL_47:
        v49.f64[1] = v35;
        double v30 = v35;
        if (v35 > v33)
        {
LABEL_48:
          double v51 = v35;
          double v33 = v35;
        }
LABEL_39:
        v31 += 2;
      }
      while (v31 != v8);
    }
  }
LABEL_68:
  a5 = v49.f64[1];
  a4 = v49.f64[0];
  double v43 = vabdd_f64(v51, v49.f64[1]);
  double v44 = vabdd_f64(v50, v49.f64[0]);
  if (v43 >= v44) {
    double v44 = v43;
  }
  double v28 = 1.0;
  if (v44 != 0.0)
  {
    double v45 = 2.22044605e-16;
    if (v44 >= 1.0) {
      double v45 = v44 * 2.22044605e-16;
    }
    BOOL v46 = v44 <= v45 && *(void *)&v44 >> 52 < 0x7FFuLL;
    if (v44 < 10000000.0 && !v46 && *(void *)&v44 >> 52 < 0x7FFuLL)
    {
      double v47 = 10000000.0 / v44 + 0.5;
      sub_1002C5028(v47);
      double v28 = (double)(uint64_t)floor(v47);
      a5 = v49.f64[1];
      a4 = v49.f64[0];
    }
  }
LABEL_80:
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  int64x2_t result = vdupq_n_s64(0xFFFFFFFFFFB3B4C0);
  *(int64x2_t *)(a3 + 16) = result;
  *(double *)(a3 + 32) = v28;
  return result;
}

void *sub_1002C4CF4(void *result, void *a2, double *a3)
{
  if (result == a2) {
    goto LABEL_50;
  }
  char v9 = result;
  int v10 = 0;
  int64x2_t v11 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v12 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  int64x2_t v28 = v12;
  int64x2_t v29 = v11;
  do
  {
    uint64_t v19 = (double *)*v9;
    uint64_t v18 = (double *)v9[1];
    if ((double *)*v9 != v18)
    {
      float64x2_t v30 = (float64x2_t)v11;
      int64x2_t v31 = v12;
      double v20 = *v19;
      double v21 = v19[1];
      v30.f64[0] = *v19;
      v30.f64[1] = v21;
      double v22 = *v19;
      v31.i64[0] = *(uint64_t *)v19;
      double v23 = v19[1];
      *(double *)&v31.i64[1] = v23;
      while (1)
      {
        v19 += 2;
        if (v19 == v18) {
          goto LABEL_4;
        }
        double v24 = *v19;
        if (*v19 < v20)
        {
          v30.f64[0] = *v19;
          double v20 = v24;
          if (v24 > v22) {
            goto LABEL_40;
          }
LABEL_36:
          double v25 = v19[1];
          if (v25 < v21) {
            goto LABEL_41;
          }
LABEL_37:
          if (v25 > v23)
          {
LABEL_42:
            *(double *)&v31.i64[1] = v25;
            double v23 = v25;
          }
        }
        else
        {
          if (v24 <= v22) {
            goto LABEL_36;
          }
LABEL_40:
          *(double *)v31.i64 = v24;
          double v22 = v24;
          double v25 = v19[1];
          if (v25 >= v21) {
            goto LABEL_37;
          }
LABEL_41:
          v30.f64[1] = v25;
          double v21 = v25;
          if (v25 > v23) {
            goto LABEL_42;
          }
        }
      }
    }
    double v26 = (void *)v9[3];
    double v27 = (void *)v9[4];
    int64x2_t result = v9 + 3;
    if (v26 != v27)
    {
      while (*v26 == v26[1])
      {
        v26 += 3;
        if (v26 == v27)
        {
          int64x2_t v12 = v28;
          int64x2_t v11 = v29;
          goto LABEL_30;
        }
      }
      int64x2_t result = sub_1002C4EE0(result, &v30);
      int64x2_t v12 = v28;
      int64x2_t v11 = v29;
LABEL_4:
      double v13 = v30.f64[0];
      if (v10)
      {
        if (v30.f64[0] >= v6) {
          double v14 = v6;
        }
        else {
          double v14 = v30.f64[0];
        }
        if (v30.f64[0] <= v4) {
          double v15 = v4;
        }
        else {
          double v15 = v30.f64[0];
        }
        if (v30.f64[1] >= v3) {
          double v16 = v3;
        }
        else {
          double v16 = v30.f64[1];
        }
        if (v30.f64[1] <= v5) {
          double v17 = v5;
        }
        else {
          double v17 = v30.f64[1];
        }
        if (*(double *)v31.i64 >= v14) {
          double v13 = v14;
        }
        else {
          double v13 = *(double *)v31.i64;
        }
        if (*(double *)v31.i64 <= v15) {
          double v4 = v15;
        }
        else {
          double v4 = *(double *)v31.i64;
        }
        if (*(double *)&v31.i64[1] >= v16) {
          double v3 = v16;
        }
        else {
          double v3 = *(double *)&v31.i64[1];
        }
        if (*(double *)&v31.i64[1] > v17) {
          double v5 = *(double *)&v31.i64[1];
        }
        else {
          double v5 = v17;
        }
      }
      else
      {
        double v3 = v30.f64[1];
        double v4 = *(double *)v31.i64;
        int v10 = 1;
        double v5 = *(double *)&v31.i64[1];
      }
      double v6 = v13;
    }
LABEL_30:
    v9 += 6;
  }
  while (v9 != a2);
  if (v10)
  {
    *a3 = v6;
    a3[1] = v3;
    a3[2] = v4;
    a3[3] = v5;
    return result;
  }
LABEL_50:
  *(int64x2_t *)a3 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *((int64x2_t *)a3 + 1) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  return result;
}

void *sub_1002C4EE0(void *result, float64x2_t *a2)
{
  uint64_t v2 = (float64x2_t **)result[1];
  if ((float64x2_t **)*result == v2)
  {
LABEL_5:
    float64x2_t v7 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    float64x2_t v8 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  }
  else
  {
    double v3 = (float64x2_t **)(*result + 24);
    while (1)
    {
      double v4 = *(v3 - 3);
      double v5 = *(v3 - 2);
      double v6 = v3 - 3;
      if (v4 != v5) {
        break;
      }
      v3 += 3;
      if (v6 + 3 == v2) {
        goto LABEL_5;
      }
    }
    float64x2_t v10 = *v4;
    char v9 = v4 + 1;
    float64x2_t v11 = v10;
    float64x2_t v7 = v10;
    if (v9 == v5)
    {
      float64x2_t v8 = v11;
    }
    else
    {
      float64x2_t v12 = v11;
      float64x2_t v8 = v11;
      do
      {
        float64x2_t v13 = *v9++;
        int8x16_t v14 = (int8x16_t)vcgtq_f64(v11, v13);
        float64x2_t v7 = (float64x2_t)vbslq_s8(v14, (int8x16_t)v13, (int8x16_t)v7);
        float64x2_t v11 = (float64x2_t)vbslq_s8(v14, (int8x16_t)v13, (int8x16_t)v11);
        int8x16_t v15 = (int8x16_t)vcgtq_f64(v13, v12);
        float64x2_t v8 = (float64x2_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)v8);
        float64x2_t v12 = (float64x2_t)vbslq_s8(v15, (int8x16_t)v13, (int8x16_t)v12);
      }
      while (v9 != v5);
    }
    while (v3 != v2)
    {
      double v23 = *v3;
      double v24 = v3[1];
      if (*v3 != v24)
      {
        float64x2_t v26 = *v23;
        double v25 = v23 + 1;
        float64x2_t v27 = v26;
        float64x2_t v28 = v26;
        if (v25 == v24)
        {
          float64x2_t v16 = v27;
        }
        else
        {
          float64x2_t v29 = v27;
          float64x2_t v16 = v27;
          do
          {
            float64x2_t v30 = *v25++;
            int8x16_t v31 = (int8x16_t)vcgtq_f64(v29, v30);
            int8x16_t v32 = (int8x16_t)vcgtq_f64(v30, v27);
            float64x2_t v16 = (float64x2_t)vbslq_s8(v31, (int8x16_t)v30, (int8x16_t)v16);
            float64x2_t v29 = (float64x2_t)vbslq_s8(v31, (int8x16_t)v30, (int8x16_t)v29);
            float64x2_t v28 = (float64x2_t)vbslq_s8(v32, (int8x16_t)v30, (int8x16_t)v28);
            float64x2_t v27 = (float64x2_t)vbslq_s8(v32, (int8x16_t)v30, (int8x16_t)v27);
          }
          while (v25 != v24);
        }
        if (vmovn_s64(vcgtq_f64(v16, v8)).u8[0]) {
          double v17 = v16.f64[0];
        }
        else {
          double v17 = v8.f64[0];
        }
        v18.f64[0] = v28.f64[0];
        v18.f64[1] = v16.f64[1];
        v8.f64[0] = v17;
        float64x2_t v19 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v18, v8), (int8x16_t)v18, (int8x16_t)v8);
        float64x2_t v20 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v7, v16), (int8x16_t)v16, (int8x16_t)v7);
        v21.i64[0] = *(void *)&v19.f64[0];
        v21.i64[1] = *(void *)&v28.f64[1];
        float64x2_t v7 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v20, v28), (int8x16_t)v28, (int8x16_t)v20);
        if (vmovn_s64(vcgtq_f64(v28, v19)).i32[1]) {
          unint64_t v22 = -1;
        }
        else {
          unint64_t v22 = 0;
        }
        float64x2_t v8 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v22), v21, (int8x16_t)v19);
      }
      v3 += 3;
    }
  }
  *a2 = v7;
  a2[1] = v8;
  return result;
}

void sub_1002C5028(double a1)
{
  int v1 = 2 * (a1 >= 9.22337204e18);
  if (a1 <= -9.22337204e18) {
    int v1 = 1;
  }
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    double v3 = sub_10015F6A0(exception);
  }
  if (v1 == 1)
  {
    double v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    double v5 = sub_10015F668(v4);
  }
}

uint64_t sub_1002C50C8(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, _OWORD *a5, void *a6)
{
  uint64_t v8 = a4;
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    float64x2_t v13 = *(uint64_t **)(a1 + 24);
    int8x16_t v14 = *(uint64_t **)(a1 + 32);
    if (v13 == v14)
    {
      BOOL v12 = 1;
    }
    else
    {
      do
      {
        uint64_t v15 = *v13;
        uint64_t v16 = v13[1];
        v13 += 3;
        BOOL v17 = v15 == v16;
        BOOL v12 = v15 == v16;
        BOOL v17 = !v17 || v13 == v14;
      }
      while (!v17);
    }
  }
  else
  {
    BOOL v12 = 0;
  }
  for (uint64_t i = (void *)*a2; ; i += 6)
  {
    if (i == (void *)a2[1])
    {
      if (v12) {
        return v8;
      }
      goto LABEL_33;
    }
    if (*i != i[1]) {
      goto LABEL_19;
    }
    float64x2_t v19 = (void *)i[3];
    float64x2_t v20 = (void *)i[4];
    if (v19 != v20) {
      break;
    }
LABEL_12:
    ;
  }
  while (*v19 == v19[1])
  {
    v19 += 3;
    if (v19 == v20) {
      goto LABEL_12;
    }
  }
LABEL_19:
  if (v12)
  {
LABEL_33:
    return sub_1002C59C0((double **)a1, (uint64_t)a2, a4, a5);
  }
  long long v88 = 0u;
  long long v89 = 0u;
  long long __p = 0u;
  sub_1002C83A0(0, a1, 1, a2, (uint64_t)a5, (uint64_t)a3, (uint64_t)&__p, (uint64_t)&v86);
  if (*((void *)&v89 + 1))
  {
    if (*(void *)(a1 + 32) != *(void *)(a1 + 24)) {
      sub_1002D195C(a1, (uint64_t)a5, (uint64_t)a3, (uint64_t)&__p, (uint64_t)&v86, 0, 0);
    }
    uint64_t v21 = a2[1] - *a2;
    if (0xAAAAAAAAAAAAAAABLL * (v21 >> 4) > 1 || v21 == 48 && *(void *)(*a2 + 32) != *(void *)(*a2 + 24)) {
      sub_1002D51A4(a2, (uint64_t)a5, (uint64_t)a3, (uint64_t)&__p, (uint64_t)&v86, 1, 0);
    }
  }
  v85[0] = 0;
  v85[1] = 0;
  v83[1] = 0;
  unint64_t v84 = v85;
  uint64_t v82 = v83;
  v83[0] = 0;
  sub_1002C5B78(&__p, &v84, (uint64_t *)a1, a2, (uint64_t)a3);
  long long v80 = 0u;
  long long v81 = 0u;
  long long v79 = 0u;
  sub_1002C6120(a1, (uint64_t)a2, (uint64_t)a5, a3, &__p, &v79, (uint64_t)&v82, (uint64_t)&v84, a6);
  sub_1002C62C0((char *)&v82, &__p, (uint64_t)&v84);
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  BOOL v76 = &v77;
  v92[0] = 0;
  v92[1] = 0;
  v90[0] = 0;
  v90[1] = -1;
  v90[2] = -1;
  uint64_t v91 = (uint64_t *)v92;
  sub_1002F5F40(a1, (uint64_t)a2, (uint64_t)v90, &v91);
  uint64_t v22 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v23 = 0;
    do
    {
      *(void *)&v93[0] = 1;
      *((void *)&v93[0] + 1) = v23;
      *(void *)&v93[1] = -1;
      sub_1002F6608(v22, a1, (uint64_t)v93, &v91);
      ++v23;
      v22 += 48;
    }
    while (v22 != a2[1]);
  }
  sub_1002F62D4((double **)a1, (double ***)a2, (uint64_t)&v82, &v91, (uint64_t)&v76, (uint64_t)a5);
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  sub_1002F7080((uint64_t)&v91, v92[0]);
  uint64_t v24 = *((void *)&v79 + 1);
  uint64_t v25 = v80;
  float64x2_t v26 = (void *)(*((void *)&v79 + 1) + 8 * ((unint64_t)v81 / 0xAA));
  if ((void)v80 == *((void *)&v79 + 1)) {
    float64x2_t v27 = 0;
  }
  else {
    float64x2_t v27 = (double **)(*v26 + 24 * ((unint64_t)v81 % 0xAA));
  }
  float64x2_t v29 = 0;
  while (v25 != v24)
  {
    if (v27 == (double **)(*(void *)(v24 + 8 * ((*((void *)&v81 + 1) + (void)v81) / 0xAAuLL))
                          + 24 * ((*((void *)&v81 + 1) + (void)v81) % 0xAAuLL)))
      goto LABEL_94;
LABEL_43:
    memset((char *)v93 + 6, 255, 24);
    float64x2_t v30 = *v27;
    int8x16_t v31 = v27[1];
    unint64_t v32 = (char *)v31 - (char *)*v27;
    double v33 = *v27 + 2;
    double v34 = 0.0;
    if (v32 >= 0x40 && v33 != v31)
    {
      unint64_t v36 = v32 - 32;
      if (v36 < 0x30)
      {
        double v37 = 0.0;
        double v38 = *v27;
        goto LABEL_52;
      }
      uint64_t v39 = (v36 >> 4) + 1;
      uint64_t v40 = 2 * (v39 & 0x1FFFFFFFFFFFFFFCLL);
      double v33 = (double *)((char *)v33 + v40 * 8);
      double v38 = &v30[v40];
      double v41 = v30 + 4;
      double v37 = 0.0;
      uint64_t v42 = v39 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        double v43 = v41 - 4;
        float64x2x2_t v95 = vld2q_f64(v43);
        float64x2x2_t v96 = vld2q_f64(v41);
        double v44 = v41 - 2;
        double v45 = v41 + 2;
        float64x2x2_t v97 = vld2q_f64(v44);
        float64x2x2_t v98 = vld2q_f64(v45);
        v95.val[0] = vmulq_f64(vaddq_f64(v95.val[0], v97.val[0]), vsubq_f64(v95.val[1], v97.val[1]));
        v95.val[1] = vmulq_f64(vaddq_f64(v96.val[0], v98.val[0]), vsubq_f64(v96.val[1], v98.val[1]));
        double v37 = v37 + v95.val[0].f64[0] + v95.val[0].f64[1] + v95.val[1].f64[0] + v95.val[1].f64[1];
        v41 += 8;
        v42 -= 4;
      }
      while (v42);
      if (v39 != (v39 & 0x1FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_52:
          double v46 = *v33;
          v33 += 2;
          double v37 = v37 + (*v38 + v46) * (v38[1] - v38[3]);
          v38 += 2;
        }
        while (v33 != v31);
      }
      double v34 = v37 * 0.5;
    }
    if (v30 != v31) {
      long long v75 = *(_OWORD *)v30;
    }
    BOOL v47 = v30 != v31;
    double v48 = v77;
    float64x2_t v49 = &v77;
    double v50 = &v77;
    if (v77)
    {
      while (1)
      {
        double v50 = (uint64_t **)v48;
        uint64_t v52 = v48[4];
        if (v52 != 2) {
          break;
        }
        double v53 = v50[5];
        if (v29 == v53)
        {
          double v51 = v50[6];
          if (((unint64_t)v51 & 0x8000000000000000) == 0) {
            goto LABEL_59;
          }
          if (v51 == (uint64_t *)-1)
          {
            double v54 = (char *)v50;
            goto LABEL_72;
          }
LABEL_67:
          double v48 = v50[1];
          if (!v48)
          {
            float64x2_t v49 = v50 + 1;
            goto LABEL_69;
          }
        }
        else
        {
          if ((uint64_t)v29 >= (uint64_t)v53) {
            goto LABEL_67;
          }
LABEL_59:
          double v48 = *v50;
          float64x2_t v49 = v50;
          if (!*v50) {
            goto LABEL_69;
          }
        }
      }
      if (v52 <= 2) {
        goto LABEL_67;
      }
      goto LABEL_59;
    }
LABEL_69:
    double v54 = (char *)operator new(0x98uLL);
    *((void *)v54 + 4) = 2;
    *((void *)v54 + 5) = v29;
    *((void *)v54 + 6) = -1;
    v54[56] = 0;
    *((void *)v54 + 10) = 0;
    *((_WORD *)v54 + 44) = 0;
    *((void *)v54 + 12) = -1;
    *((void *)v54 + 13) = -1;
    *((void *)v54 + 14) = -1;
    *((void *)v54 + 15) = 0xBFF0000000000000;
    *((void *)v54 + 17) = 0;
    *((void *)v54 + 18) = 0;
    *((void *)v54 + 16) = 0;
    *(void *)double v54 = 0;
    *((void *)v54 + 1) = 0;
    *((void *)v54 + 2) = v50;
    *float64x2_t v49 = (uint64_t *)v54;
    double v55 = (uint64_t *)v54;
    if (*v76)
    {
      BOOL v76 = (uint64_t **)*v76;
      double v55 = *v49;
    }
    sub_1000619B8(v77, v55);
    ++v78;
LABEL_72:
    double v57 = v54 + 128;
    double v56 = (void *)*((void *)v54 + 16);
    v54[56] = v47;
    *((_OWORD *)v54 + 4) = v75;
    *((double *)v54 + 10) = v34;
    *((_WORD *)v54 + 44) = 0;
    *(_OWORD *)(v54 + 90) = v93[0];
    *(_OWORD *)(v54 + 104) = *(_OWORD *)((char *)v93 + 14);
    *((void *)v54 + 15) = 0xBFF0000000000000;
    if (v56)
    {
      *((void *)v54 + 17) = v56;
      operator delete(v56);
      void *v57 = 0;
      *((void *)v54 + 17) = 0;
      *((void *)v54 + 18) = 0;
    }
    void *v57 = 0;
    *((void *)v54 + 17) = 0;
    *((void *)v54 + 18) = 0;
    double v58 = &v77;
    double v59 = &v77;
    double v60 = v77;
    if (v77)
    {
      while (1)
      {
        double v59 = (uint64_t **)v60;
        uint64_t v62 = v60[4];
        if (v62 != 2) {
          break;
        }
        uint64_t v63 = v59[5];
        if (v29 == v63)
        {
          double v61 = v59[6];
          if (((unint64_t)v61 & 0x8000000000000000) == 0) {
            goto LABEL_77;
          }
          if (v61 == (uint64_t *)-1)
          {
            *((unsigned char *)v59 + 88) = 0;
            v27 += 3;
            if ((double **)((char *)v27 - *v26) == (double **)4080) {
              goto LABEL_90;
            }
            goto LABEL_38;
          }
LABEL_85:
          double v60 = v59[1];
          if (!v60)
          {
            double v58 = v59 + 1;
            goto LABEL_87;
          }
        }
        else
        {
          if ((uint64_t)v29 >= (uint64_t)v63) {
            goto LABEL_85;
          }
LABEL_77:
          double v60 = *v59;
          double v58 = v59;
          if (!*v59) {
            goto LABEL_87;
          }
        }
      }
      if (v62 <= 2) {
        goto LABEL_85;
      }
      goto LABEL_77;
    }
LABEL_87:
    uint64_t v64 = operator new(0x98uLL);
    v64[4] = 2;
    v64[5] = v29;
    v64[6] = -1;
    *((unsigned char *)v64 + 56) = 0;
    v64[10] = 0;
    *((_WORD *)v64 + 44) = 0;
    v64[12] = -1;
    v64[13] = -1;
    v64[14] = -1;
    v64[15] = 0xBFF0000000000000;
    v64[17] = 0;
    v64[18] = 0;
    v64[16] = 0;
    void *v64 = 0;
    v64[1] = 0;
    v64[2] = v59;
    *double v58 = v64;
    unint64_t v65 = v64;
    if (*v76)
    {
      BOOL v76 = (uint64_t **)*v76;
      unint64_t v65 = *v58;
    }
    sub_1000619B8(v77, v65);
    ++v78;
    *((unsigned char *)v64 + 88) = 0;
    v27 += 3;
    if ((double **)((char *)v27 - *v26) == (double **)4080)
    {
LABEL_90:
      uint64_t v66 = (double **)v26[1];
      ++v26;
      float64x2_t v27 = v66;
    }
LABEL_38:
    float64x2_t v29 = (uint64_t *)((char *)v29 + 1);
    uint64_t v24 = *((void *)&v79 + 1);
    uint64_t v25 = v80;
  }
  if (v27) {
    goto LABEL_43;
  }
LABEL_94:
  sub_1002C7048(v73, v74, &v79, (uint64_t)&v76, a5);
  uint64_t v8 = sub_1002C79E0(&v76, v73, v74, &v79, v8, (uint64_t)a5, 0);
  sub_1002F7080((uint64_t)&v76, v77);
  sub_1002FB26C((uint64_t)&v79);
  sub_10006A9DC((uint64_t)&v82, v83[0]);
  sub_1002FB3FC((uint64_t)&v84, v85[0]);
  uint64_t v67 = (void **)*((void *)&__p + 1);
  uint64_t v68 = (void **)v88;
  *((void *)&v89 + 1) = 0;
  unint64_t v69 = v88 - *((void *)&__p + 1);
  if ((void)v88 - *((void *)&__p + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v67);
      uint64_t v68 = (void **)v88;
      uint64_t v67 = (void **)(*((void *)&__p + 1) + 8);
      *((void *)&__p + 1) = v67;
      unint64_t v69 = v88 - (void)v67;
    }
    while ((void)v88 - (void)v67 > 0x10uLL);
  }
  unint64_t v70 = v69 >> 3;
  if (v70 == 1)
  {
    uint64_t v71 = 8;
LABEL_100:
    *(void *)&long long v89 = v71;
  }
  else if (v70 == 2)
  {
    uint64_t v71 = 16;
    goto LABEL_100;
  }
  if (v67 != v68)
  {
    do
    {
      uint64_t v72 = *v67++;
      operator delete(v72);
    }
    while (v67 != v68);
    if ((void)v88 != *((void *)&__p + 1)) {
      *(void *)&long long v88 = v88 + ((*((void *)&__p + 1) - v88 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if ((void)__p) {
    operator delete((void *)__p);
  }
  return v8;
}

void sub_1002C593C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30,char a31,void *a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_1002C59C0(double **a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  v18[0] = 0;
  v18[1] = 0;
  v16[1] = 0;
  BOOL v17 = v18;
  uint64_t v15 = v16;
  v16[0] = 0;
  v21[0] = 0;
  v21[1] = 0;
  float64x2_t v20 = (uint64_t *)v21;
  v19[0] = 0;
  v19[1] = -1;
  v19[2] = -1;
  sub_1002F5F40((uint64_t)a1, a2, (uint64_t)v19, &v20);
  uint64_t v8 = *(double ***)a2;
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    uint64_t v9 = 0;
    do
    {
      *(void *)&long long v12 = 1;
      *((void *)&v12 + 1) = v9;
      *(void *)&long long v13 = -1;
      sub_1002F6608((uint64_t)v8, (uint64_t)a1, (uint64_t)&v12, &v20);
      ++v9;
      v8 += 6;
    }
    while (v8 != *(double ***)(a2 + 8));
  }
  sub_1002F62D4(a1, (double ***)a2, (uint64_t)&v17, &v20, (uint64_t)&v15, (uint64_t)a4);
  sub_1002F7080((uint64_t)&v20, v21[0]);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  sub_1002C7048((uint64_t)a1, (void *)a2, &v12, (uint64_t)&v15, a4);
  uint64_t v10 = sub_1002C79E0(&v15, (uint64_t)a1, (void *)a2, &v12, a3, (uint64_t)a4, 0);
  sub_1002FB26C((uint64_t)&v12);
  sub_1002F7080((uint64_t)&v15, v16[0]);
  sub_10006A9DC((uint64_t)&v17, v18[0]);
  return v10;
}

void sub_1002C5B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, char a18, void *a19)
{
}

void sub_1002C5B78(void *a1, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  sub_1002D8A1C(a1, a3, a4);
  BOOL v11 = sub_1002D920C(a1, (uint64_t)a2, a5, v10);
  unint64_t v12 = a1[4];
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = (void *)(v13 + 8 * (v12 >> 4));
  BOOL v53 = v11;
  if (v14 == v13) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *v15 + 376 * (a1[4] & 0xFLL);
  }
  char v17 = 0;
  float64x2_t v18 = (void *)(v13 + 8 * (v12 >> 4));
LABEL_5:
  uint64_t v19 = v16 - 6016;
  while (v14 != v13)
  {
    if (v16 == *(void *)(v13 + (((a1[5] + v12) >> 1) & 0x7FFFFFFFFFFFFFF8))
              + 376 * ((*((_DWORD *)a1 + 10) + v12) & 0xF))
    {
      uint64_t v23 = *v15 + 376 * (v12 & 0xF);
      goto LABEL_34;
    }
LABEL_12:
    int v20 = *(_DWORD *)(v16 + 40);
    if (v20 == 3)
    {
      if (*(_DWORD *)(v16 + 208) == 3) {
        goto LABEL_6;
      }
    }
    else if (v20 == 2)
    {
      if (*(_DWORD *)(v16 + 208) == 2) {
        goto LABEL_6;
      }
    }
    else if (!v20 && !*(_DWORD *)(v16 + 208))
    {
LABEL_6:
      *(unsigned char *)(v16 + 32) = 1;
      *(void *)(v16 + 24) = -1;
      goto LABEL_7;
    }
    if (*(void *)(v16 + 48) == *(void *)(v16 + 216) && *(uint64_t *)(v16 + 24) <= 0)
    {
      if (v20 != 1 || *(_DWORD *)(v16 + 208) != 1) {
        goto LABEL_6;
      }
      char v21 = *(unsigned char *)(v16 + 32);
      if (!v21) {
        goto LABEL_30;
      }
    }
    else if (!*(unsigned char *)(v16 + 32))
    {
      char v21 = v20 == 4 && *(_DWORD *)(v16 + 208) == 4;
LABEL_30:
      v17 |= v21;
    }
LABEL_7:
    v16 += 376;
    v19 += 376;
    if (*v18 == v19)
    {
      uint64_t v22 = v18[1];
      ++v18;
      uint64_t v16 = v22;
      goto LABEL_5;
    }
  }
  if (v16) {
    goto LABEL_12;
  }
  uint64_t v23 = 0;
LABEL_34:
  while (v14 != v13)
  {
    unint64_t v24 = a1[5] + a1[4];
    if (v23 == *(void *)(v13 + ((v24 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v24 & 0xF)) {
      goto LABEL_44;
    }
LABEL_38:
    if (!*(unsigned char *)(v23 + 32) && *(void *)(v23 + 48) == *(void *)(v23 + 216) && sub_1002DD814(v23, (uint64_t)a3, a4)) {
      *(unsigned char *)(v23 + 32) = 1;
    }
    v23 += 376;
    if (v23 - *v15 == 6016)
    {
      uint64_t v25 = v15[1];
      ++v15;
      uint64_t v23 = v25;
    }
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
  }
  if (v23) {
    goto LABEL_38;
  }
LABEL_44:
  v56[0] = 0;
  v56[1] = 0;
  double v55 = (uint64_t *)v56;
  sub_1002D94C0(a1, &v55);
  float64x2_t v26 = v55;
  if (v55 != (uint64_t *)v56)
  {
    do
    {
      uint64_t v27 = v26[7];
      float64x2_t v28 = (long long *)v26[8];
      unint64_t v29 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v28 - v27) >> 3));
      v57[0] = a1;
      v57[1] = a3;
      v57[2] = a4;
      v57[3] = a5;
      v57[4] = &v54;
      if (v28 == (long long *)v27) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v29;
      }
      sub_1002DD980(v27, v28, (uint64_t)v57, v30, 1);
      int8x16_t v31 = (uint64_t *)v26[1];
      if (v31)
      {
        do
        {
          unint64_t v32 = v31;
          int8x16_t v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          unint64_t v32 = (uint64_t *)v26[2];
          BOOL v33 = *v32 == (void)v26;
          float64x2_t v26 = v32;
        }
        while (!v33);
      }
      float64x2_t v26 = v32;
    }
    while (v32 != (uint64_t *)v56);
  }
  if (v53)
  {
    sub_1002D99E4(a2, (uint64_t)a1, 1, a3, a4);
    sub_1002D9F40((uint64_t)a1, (uint64_t)a2);
  }
  double v34 = v55;
  if (v55 != (uint64_t *)v56)
  {
    do
    {
      sub_1002DA1A4(v34 + 7, (uint64_t)a1, 1);
      uint64_t v40 = (uint64_t *)v34[1];
      if (v40)
      {
        do
        {
          double v41 = v40;
          uint64_t v40 = (uint64_t *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          double v41 = (uint64_t *)v34[2];
          BOOL v33 = *v41 == (void)v34;
          double v34 = v41;
        }
        while (!v33);
      }
      double v34 = v41;
    }
    while (v41 != (uint64_t *)v56);
  }
  if (v17)
  {
    unint64_t v35 = a1[4];
    uint64_t v36 = a1[1];
    uint64_t v37 = a1[2];
    double v38 = (void *)(v36 + 8 * (v35 >> 4));
    if (v37 == v36) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = *v38 + 376 * (a1[4] & 0xFLL);
    }
    unint64_t v42 = a1[5] + v35;
    unint64_t v43 = v42 >> 4;
    unsigned int v44 = v42 & 0xF;
    while (2)
    {
      uint64_t v45 = v39 - 6016;
LABEL_73:
      if (v37 == v36)
      {
        if (!v39) {
          break;
        }
      }
      else if (v39 == *(void *)(v36 + 8 * v43) + 376 * v44)
      {
        break;
      }
      if (*(double *)(v39 + 112) == 0.0 && *(double *)(v39 + 280) == 0.0)
      {
        uint64_t v46 = *(void *)(v39 + 136);
        if (v46 == -1)
        {
          uint64_t v46 = *(void *)(v39 + 128);
          uint64_t v47 = *(void *)(v39 + 304);
          if (v47 == -1) {
            goto LABEL_84;
          }
LABEL_81:
          if ((v46 & 0x8000000000000000) == 0)
          {
LABEL_85:
            if ((v47 & 0x8000000000000000) == 0 && v46 != v47)
            {
              double v48 = (double *)(*(void *)(v36 + (((v46 + v35) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 376 * ((v46 + v35) & 0xF));
              double v49 = *(double *)v39;
              double v50 = *(double *)(v39 + 8);
              *(double *)(v39 + 112) = (v50 - v48[1]) * (v50 - v48[1])
                                     + (*(double *)v39 - *v48) * (*(double *)v39 - *v48);
              double v51 = (double *)(*(void *)(v36 + (((v47 + v35) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 376 * ((v47 + v35) & 0xF));
              *(double *)(v39 + 280) = (v50 - v51[1]) * (v50 - v51[1]) + (v49 - *v51) * (v49 - *v51);
            }
          }
        }
        else
        {
          uint64_t v47 = *(void *)(v39 + 304);
          if (v47 != -1) {
            goto LABEL_81;
          }
LABEL_84:
          uint64_t v47 = *(void *)(v39 + 296);
          if ((v46 & 0x8000000000000000) == 0) {
            goto LABEL_85;
          }
        }
      }
      v39 += 376;
      v45 += 376;
      if (*v38 == v45)
      {
        uint64_t v52 = v38[1];
        ++v38;
        uint64_t v39 = v52;
        continue;
      }
      goto LABEL_73;
    }
  }
  sub_1002E2A60((uint64_t)&v55, v56[0]);
}

void sub_1002C60A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void sub_1002C60C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void sub_1002C60D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void sub_1002C60F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void sub_1002C6108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void sub_1002C6120(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  v27[0] = a1;
  v27[1] = a2;
  v27[2] = (uint64_t)a5;
  v27[3] = a8;
  float64x2_t v28 = v29;
  v29[0] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v29[1] = 0;
  uint64_t v30 = v31;
  v31[2] = a4;
  v31[3] = a9;
  sub_1002E2AC4(v27);
  uint64_t v17 = a5[1];
  if (a5[2] != v17)
  {
    unint64_t v18 = a5[4];
    uint64_t v19 = (uint64_t *)(v17 + 8 * (v18 >> 4));
    uint64_t v20 = *v19;
    uint64_t v21 = *v19 + 376 * (v18 & 0xF);
    uint64_t v22 = *(void *)(v17 + (((a5[5] + v18) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 376 * ((*((_DWORD *)a5 + 10) + v18) & 0xF);
    while (v21 != v22)
    {
      *(_DWORD *)(v21 + 200) = 0;
      *(_WORD *)(v21 + 204) = 0;
      *(_DWORD *)(v21 + 368) = 0;
      *(_WORD *)(v21 + 372) = 0;
      v21 += 376;
      if (v21 - v20 == 6016)
      {
        uint64_t v23 = v19[1];
        ++v19;
        uint64_t v20 = v23;
        uint64_t v21 = v23;
      }
    }
  }
  v26[0] = a1;
  v26[1] = a2;
  v26[2] = a5;
  v26[3] = a8;
  v26[4] = a4;
  v26[6] = a9;
  v26[7] = a1;
  v26[8] = a2;
  v26[9] = a5;
  v26[10] = a7;
  v26[11] = a8;
  v26[12] = a3;
  v26[13] = a4;
  v26[14] = a9;
  unint64_t v25 = a6[5];
  __int16 v24 = 257;
  sub_1002E3138((uint64_t)v26, a6, &v25, &v24);
  sub_1002E4480((uint64_t)&v30, v31[0]);
  sub_1002E4420((uint64_t)&v28, v29[0]);
}

void sub_1002C6298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1002C62AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

char *sub_1002C62C0(char *result, void *a2, uint64_t a3)
{
  double v3 = (uint64_t **)result;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  double v6 = (void *)(v4 + 8 * (a2[4] >> 4));
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 376 * (a2[4] & 0xFLL);
  }
  uint64_t v8 = (uint64_t **)(result + 8);
  __int16 v114 = (void *)(a3 + 8);
  while (1)
  {
    unint64_t v113 = v6;
    if (v5 != v4)
    {
      unint64_t v9 = a2[5] + a2[4];
      if (v7 == *(void *)(v4 + ((v9 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v9 & 0xF)) {
        return result;
      }
      goto LABEL_10;
    }
    if (!v7) {
      return result;
    }
LABEL_10:
    BOOL v10 = *(void *)(v7 + 48) != *(void *)(v7 + 216) || *(unsigned char *)(v7 + 32) == 0;
    if (!v10) {
      goto LABEL_259;
    }
    char v11 = 0;
    int v12 = 0;
    uint64_t v13 = v7 + 40;
    int v115 = (_DWORD *)(v7 + 40);
    while (2)
    {
      uint64_t v15 = *(void *)(v13 + 8);
      uint64_t v14 = *(void *)(v13 + 16);
      uint64_t v16 = *(void *)(v13 + 24);
      *(void *)&long long v116 = v15;
      *((void *)&v116 + 1) = v14;
      uint64_t v117 = v16;
      if (*(void *)(v7 + 48) != *(void *)(v7 + 216) && *(void *)(v13 + 112))
      {
        uint64_t v17 = *v8;
        unint64_t v18 = v3 + 1;
        int64x2_t result = (char *)(v3 + 1);
        if (!*v8)
        {
LABEL_37:
          uint64_t v22 = result;
          int64x2_t result = (char *)operator new(0x40uLL);
          *((_OWORD *)result + 2) = v116;
          *((void *)result + 6) = v117;
          *((_WORD *)result + 28) = 0;
          result[58] = 0;
          *(void *)int64x2_t result = 0;
          *((void *)result + 1) = 0;
          *((void *)result + 2) = v22;
          *unint64_t v18 = (uint64_t *)result;
          uint64_t v23 = (uint64_t *)**v3;
          __int16 v24 = (uint64_t *)result;
          if (v23)
          {
            std::bad_cast *v3 = v23;
            __int16 v24 = *v18;
          }
          unint64_t v25 = *v8;
          BOOL v10 = v24 == *v8;
          *((unsigned char *)v24 + 24) = v10;
          if (!v10)
          {
            do
            {
              uint64_t v26 = v24[2];
              if (*(unsigned char *)(v26 + 24)) {
                break;
              }
              uint64_t v27 = *(uint64_t **)(v26 + 16);
              uint64_t v28 = *v27;
              if (*v27 == v26)
              {
                uint64_t v31 = v27[1];
                if (!v31 || (v32 = *(unsigned __int8 *)(v31 + 24), unint64_t v29 = (unsigned char *)(v31 + 24), v32))
                {
                  if (*(uint64_t **)v26 == v24)
                  {
                    *(unsigned char *)(v26 + 24) = 1;
                    *((unsigned char *)v27 + 24) = 0;
                    uint64_t v35 = *(void *)(v26 + 8);
                    uint64_t *v27 = v35;
                    if (v35) {
                      goto LABEL_54;
                    }
                  }
                  else
                  {
                    BOOL v33 = *(uint64_t **)(v26 + 8);
                    uint64_t v34 = *v33;
                    *(void *)(v26 + 8) = *v33;
                    if (v34)
                    {
                      *(void *)(v34 + 16) = v26;
                      uint64_t v27 = *(uint64_t **)(v26 + 16);
                    }
                    v33[2] = (uint64_t)v27;
                    *(void *)(*(void *)(v26 + 16) + 8 * (**(void **)(v26 + 16) != v26)) = v33;
                    *BOOL v33 = v26;
                    *(void *)(v26 + 16) = v33;
                    uint64_t v27 = (uint64_t *)v33[2];
                    uint64_t v26 = *v27;
                    *((unsigned char *)v33 + 24) = 1;
                    *((unsigned char *)v27 + 24) = 0;
                    uint64_t v35 = *(void *)(v26 + 8);
                    uint64_t *v27 = v35;
                    if (v35) {
LABEL_54:
                    }
                      *(void *)(v35 + 16) = v27;
                  }
                  *(void *)(v26 + 16) = v27[2];
                  *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v26;
                  *(void *)(v26 + 8) = v27;
LABEL_228:
                  v27[2] = v26;
                  break;
                }
              }
              else if (!v28 || (v30 = *(unsigned __int8 *)(v28 + 24), unint64_t v29 = (unsigned char *)(v28 + 24), v30))
              {
                if (*(uint64_t **)v26 == v24)
                {
                  uint64_t v111 = v24[1];
                  *(void *)uint64_t v26 = v111;
                  if (v111)
                  {
                    *(void *)(v111 + 16) = v26;
                    uint64_t v27 = *(uint64_t **)(v26 + 16);
                  }
                  v24[2] = (uint64_t)v27;
                  *(void *)(*(void *)(v26 + 16) + 8 * (**(void **)(v26 + 16) != v26)) = v24;
                  v24[1] = v26;
                  *(void *)(v26 + 16) = v24;
                  uint64_t v27 = (uint64_t *)v24[2];
                  *((unsigned char *)v24 + 24) = 1;
                  *((unsigned char *)v27 + 24) = 0;
                  uint64_t v26 = v27[1];
                  int v106 = *(char **)v26;
                  v27[1] = *(void *)v26;
                  if (v106) {
LABEL_226:
                  }
                    *((void *)v106 + 2) = v27;
                }
                else
                {
                  *(unsigned char *)(v26 + 24) = 1;
                  *((unsigned char *)v27 + 24) = 0;
                  uint64_t v26 = v27[1];
                  int v106 = *(char **)v26;
                  v27[1] = *(void *)v26;
                  if (v106) {
                    goto LABEL_226;
                  }
                }
                *(void *)(v26 + 16) = v27[2];
                *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v26;
                *(void *)uint64_t v26 = v27;
                goto LABEL_228;
              }
              *(unsigned char *)(v26 + 24) = 1;
              __int16 v24 = v27;
              *((unsigned char *)v27 + 24) = v27 == v25;
              *unint64_t v29 = 1;
            }
            while (v27 != v25);
          }
          v3[2] = (uint64_t *)((char *)v3[2] + 1);
          goto LABEL_18;
        }
        while (1)
        {
          int64x2_t result = (char *)v17;
          uint64_t v19 = v17[4];
          if (v15 == v19)
          {
            uint64_t v20 = *((void *)result + 5);
            if (v14 == v20)
            {
              uint64_t v21 = *((void *)result + 6);
              if (v16 < v21) {
                goto LABEL_24;
              }
              if (v21 >= v16) {
                goto LABEL_18;
              }
            }
            else
            {
              if (v14 < v20)
              {
LABEL_24:
                uint64_t v17 = *(uint64_t **)result;
                unint64_t v18 = (uint64_t **)result;
                if (!*(void *)result) {
                  goto LABEL_37;
                }
                continue;
              }
              if (v20 >= v14) {
                goto LABEL_18;
              }
            }
          }
          else
          {
            if (v15 < v19) {
              goto LABEL_24;
            }
            if (v19 >= v15) {
              goto LABEL_18;
            }
          }
          uint64_t v17 = (uint64_t *)*((void *)result + 1);
          if (!v17)
          {
            unint64_t v18 = (uint64_t **)(result + 8);
            goto LABEL_37;
          }
        }
      }
      if (*v115 != 3 && *(_DWORD *)(v7 + 208) != 3) {
        goto LABEL_99;
      }
      uint64_t v36 = *v8;
      uint64_t v37 = v3 + 1;
      int64x2_t result = (char *)(v3 + 1);
      if (!*v8) {
        goto LABEL_73;
      }
      do
      {
        while (1)
        {
          int64x2_t result = (char *)v36;
          uint64_t v38 = v36[4];
          if (v15 != v38) {
            break;
          }
          uint64_t v39 = *((void *)result + 5);
          if (v14 != v39)
          {
            if (v14 < v39) {
              goto LABEL_60;
            }
            if (v39 >= v14) {
              goto LABEL_98;
            }
            goto LABEL_71;
          }
          uint64_t v40 = *((void *)result + 6);
          if (v16 >= v40)
          {
            if (v40 >= v16) {
              goto LABEL_98;
            }
            goto LABEL_71;
          }
LABEL_60:
          uint64_t v36 = *(uint64_t **)result;
          uint64_t v37 = (uint64_t **)result;
          if (!*(void *)result) {
            goto LABEL_73;
          }
        }
        if (v15 < v38) {
          goto LABEL_60;
        }
        if (v38 >= v15) {
          goto LABEL_98;
        }
LABEL_71:
        uint64_t v36 = (uint64_t *)*((void *)result + 1);
      }
      while (v36);
      uint64_t v37 = (uint64_t **)(result + 8);
LABEL_73:
      double v41 = result;
      int64x2_t result = (char *)operator new(0x40uLL);
      *((_OWORD *)result + 2) = v116;
      *((void *)result + 6) = v117;
      *((_WORD *)result + 28) = 0;
      result[58] = 0;
      *(void *)int64x2_t result = 0;
      *((void *)result + 1) = 0;
      *((void *)result + 2) = v41;
      void *v37 = (uint64_t *)result;
      unint64_t v42 = (uint64_t *)**v3;
      unint64_t v43 = (uint64_t *)result;
      if (v42)
      {
        std::bad_cast *v3 = v42;
        unint64_t v43 = *v37;
      }
      unsigned int v44 = *v8;
      BOOL v10 = v43 == *v8;
      *((unsigned char *)v43 + 24) = v10;
      if (!v10)
      {
        do
        {
          uint64_t v45 = v43[2];
          if (*(unsigned char *)(v45 + 24)) {
            break;
          }
          uint64_t v46 = *(uint64_t **)(v45 + 16);
          uint64_t v47 = *v46;
          if (*v46 == v45)
          {
            uint64_t v50 = v46[1];
            if (!v50 || (v51 = *(unsigned __int8 *)(v50 + 24), double v48 = (unsigned char *)(v50 + 24), v51))
            {
              if (*(uint64_t **)v45 == v43)
              {
                *(unsigned char *)(v45 + 24) = 1;
                *((unsigned char *)v46 + 24) = 0;
                uint64_t v54 = *(void *)(v45 + 8);
                *uint64_t v46 = v54;
                if (v54) {
                  goto LABEL_90;
                }
              }
              else
              {
                uint64_t v52 = *(uint64_t **)(v45 + 8);
                uint64_t v53 = *v52;
                *(void *)(v45 + 8) = *v52;
                if (v53)
                {
                  *(void *)(v53 + 16) = v45;
                  uint64_t v46 = *(uint64_t **)(v45 + 16);
                }
                v52[2] = (uint64_t)v46;
                *(void *)(*(void *)(v45 + 16) + 8 * (**(void **)(v45 + 16) != v45)) = v52;
                uint64_t *v52 = v45;
                *(void *)(v45 + 16) = v52;
                uint64_t v46 = (uint64_t *)v52[2];
                uint64_t v45 = *v46;
                *((unsigned char *)v52 + 24) = 1;
                *((unsigned char *)v46 + 24) = 0;
                uint64_t v54 = *(void *)(v45 + 8);
                *uint64_t v46 = v54;
                if (v54) {
LABEL_90:
                }
                  *(void *)(v54 + 16) = v46;
              }
              *(void *)(v45 + 16) = v46[2];
              *(void *)(v46[2] + 8 * (*(void *)v46[2] != (void)v46)) = v45;
              *(void *)(v45 + 8) = v46;
LABEL_96:
              v46[2] = v45;
              break;
            }
          }
          else if (!v47 || (v49 = *(unsigned __int8 *)(v47 + 24), double v48 = (unsigned char *)(v47 + 24), v49))
          {
            if (*(uint64_t **)v45 == v43)
            {
              uint64_t v110 = v43[1];
              *(void *)uint64_t v45 = v110;
              if (v110)
              {
                *(void *)(v110 + 16) = v45;
                uint64_t v46 = *(uint64_t **)(v45 + 16);
              }
              v43[2] = (uint64_t)v46;
              *(void *)(*(void *)(v45 + 16) + 8 * (**(void **)(v45 + 16) != v45)) = v43;
              v43[1] = v45;
              *(void *)(v45 + 16) = v43;
              uint64_t v46 = (uint64_t *)v43[2];
              *((unsigned char *)v43 + 24) = 1;
              *((unsigned char *)v46 + 24) = 0;
              uint64_t v45 = v46[1];
              double v55 = *(char **)v45;
              v46[1] = *(void *)v45;
              if (v55) {
LABEL_94:
              }
                *((void *)v55 + 2) = v46;
            }
            else
            {
              *(unsigned char *)(v45 + 24) = 1;
              *((unsigned char *)v46 + 24) = 0;
              uint64_t v45 = v46[1];
              double v55 = *(char **)v45;
              v46[1] = *(void *)v45;
              if (v55) {
                goto LABEL_94;
              }
            }
            *(void *)(v45 + 16) = v46[2];
            *(void *)(v46[2] + 8 * (*(void *)v46[2] != (void)v46)) = v45;
            *(void *)uint64_t v45 = v46;
            goto LABEL_96;
          }
          *(unsigned char *)(v45 + 24) = 1;
          unint64_t v43 = v46;
          *((unsigned char *)v46 + 24) = v46 == v44;
          *double v48 = 1;
        }
        while (v46 != v44);
      }
      v3[2] = (uint64_t *)((char *)v3[2] + 1);
LABEL_98:
      result[57] = 1;
LABEL_99:
      double v56 = *v8;
      double v57 = v3 + 1;
      double v58 = v3 + 1;
      if (!*v8) {
        goto LABEL_114;
      }
      while (2)
      {
        while (2)
        {
          double v58 = (uint64_t **)v56;
          uint64_t v59 = v56[4];
          if (v15 == v59)
          {
            uint64_t v60 = (uint64_t)v58[5];
            if (*((void *)&v116 + 1) == v60)
            {
              double v61 = v58[6];
              if (v117 >= (uint64_t)v61)
              {
                if ((uint64_t)v61 >= v117) {
                  goto LABEL_133;
                }
                goto LABEL_112;
              }
            }
            else if (*((uint64_t *)&v116 + 1) >= v60)
            {
              if (v60 < *((uint64_t *)&v116 + 1)) {
                goto LABEL_112;
              }
LABEL_133:
              if (*((unsigned char *)v58 + 56)) {
                goto LABEL_19;
              }
              uint64_t v74 = *v8;
              long long v75 = v3 + 1;
              BOOL v76 = v3 + 1;
              if (*v8) {
                goto LABEL_144;
              }
LABEL_156:
              int64x2_t result = (char *)operator new(0x40uLL);
              *((_OWORD *)result + 2) = v116;
              *((void *)result + 6) = v117;
              *((_WORD *)result + 28) = 0;
              result[58] = 0;
              *(void *)int64x2_t result = 0;
              *((void *)result + 1) = 0;
              *((void *)result + 2) = v76;
              *long long v75 = (uint64_t *)result;
              long long v81 = (uint64_t *)**v3;
              if (v81)
              {
                std::bad_cast *v3 = v81;
                int64x2_t result = (char *)*v75;
              }
              uint64_t v82 = *v8;
              BOOL v10 = result == (char *)*v8;
              result[24] = v10;
              if (!v10)
              {
                do
                {
                  uint64_t v83 = *((void *)result + 2);
                  if (*(unsigned char *)(v83 + 24)) {
                    break;
                  }
                  unint64_t v84 = *(uint64_t **)(v83 + 16);
                  uint64_t v85 = *v84;
                  if (*v84 == v83)
                  {
                    uint64_t v88 = v84[1];
                    if (!v88 || (v89 = *(unsigned __int8 *)(v88 + 24), char v86 = (unsigned char *)(v88 + 24), v89))
                    {
                      if (*(char **)v83 == result)
                      {
                        *(unsigned char *)(v83 + 24) = 1;
                        *((unsigned char *)v84 + 24) = 0;
                        uint64_t v92 = *(void *)(v83 + 8);
                        uint64_t *v84 = v92;
                        if (v92) {
                          goto LABEL_173;
                        }
                      }
                      else
                      {
                        unint64_t v90 = *(uint64_t **)(v83 + 8);
                        uint64_t v91 = *v90;
                        *(void *)(v83 + 8) = *v90;
                        if (v91)
                        {
                          *(void *)(v91 + 16) = v83;
                          unint64_t v84 = *(uint64_t **)(v83 + 16);
                        }
                        v90[2] = (uint64_t)v84;
                        *(void *)(*(void *)(v83 + 16) + 8 * (**(void **)(v83 + 16) != v83)) = v90;
                        uint64_t *v90 = v83;
                        *(void *)(v83 + 16) = v90;
                        unint64_t v84 = (uint64_t *)v90[2];
                        uint64_t v83 = *v84;
                        *((unsigned char *)v90 + 24) = 1;
                        *((unsigned char *)v84 + 24) = 0;
                        uint64_t v92 = *(void *)(v83 + 8);
                        uint64_t *v84 = v92;
                        if (v92) {
LABEL_173:
                        }
                          *(void *)(v92 + 16) = v84;
                      }
                      *(void *)(v83 + 16) = v84[2];
                      *(void *)(v84[2] + 8 * (*(void *)v84[2] != (void)v84)) = v83;
                      *(void *)(v83 + 8) = v84;
LABEL_182:
                      v84[2] = v83;
                      break;
                    }
                  }
                  else if (!v85 || (v87 = *(unsigned __int8 *)(v85 + 24), char v86 = (unsigned char *)(v85 + 24), v87))
                  {
                    if (*(char **)v83 == result)
                    {
                      uint64_t v109 = *((void *)result + 1);
                      *(void *)uint64_t v83 = v109;
                      if (v109)
                      {
                        *(void *)(v109 + 16) = v83;
                        unint64_t v84 = *(uint64_t **)(v83 + 16);
                      }
                      *((void *)result + 2) = v84;
                      *(void *)(*(void *)(v83 + 16) + 8 * (**(void **)(v83 + 16) != v83)) = result;
                      *((void *)result + 1) = v83;
                      *(void *)(v83 + 16) = result;
                      unint64_t v84 = (uint64_t *)*((void *)result + 2);
                      result[24] = 1;
                      *((unsigned char *)v84 + 24) = 0;
                      uint64_t v83 = v84[1];
                      int v93 = *(char **)v83;
                      v84[1] = *(void *)v83;
                      if (v93) {
LABEL_180:
                      }
                        *((void *)v93 + 2) = v84;
                    }
                    else
                    {
                      int64x2_t result = (char *)*((void *)result + 2);
                      *(unsigned char *)(v83 + 24) = 1;
                      *((unsigned char *)v84 + 24) = 0;
                      uint64_t v83 = v84[1];
                      int v93 = *(char **)v83;
                      v84[1] = *(void *)v83;
                      if (v93) {
                        goto LABEL_180;
                      }
                    }
                    *(void *)(v83 + 16) = v84[2];
                    *(void *)(v84[2] + 8 * (*(void *)v84[2] != (void)v84)) = v83;
                    *(void *)uint64_t v83 = v84;
                    goto LABEL_182;
                  }
                  *(unsigned char *)(v83 + 24) = 1;
                  int64x2_t result = (char *)v84;
                  *((unsigned char *)v84 + 24) = v84 == v82;
                  *char v86 = 1;
                }
                while (v84 != v82);
              }
              v3[2] = (uint64_t *)((char *)v3[2] + 1);
              if (v11) {
                goto LABEL_184;
              }
LABEL_190:
              uint64_t v95 = *(void *)(v7 + 24);
              if (v95 >= 1)
              {
                float64x2x2_t v96 = (void *)*v114;
                if (*v114)
                {
                  float64x2x2_t v97 = v114;
                  do
                  {
                    uint64_t v98 = v96[4];
                    BOOL v99 = v98 < v95;
                    if (v98 >= v95) {
                      uint64_t v100 = v96;
                    }
                    else {
                      uint64_t v100 = v96 + 1;
                    }
                    if (!v99) {
                      float64x2x2_t v97 = v96;
                    }
                    float64x2x2_t v96 = (void *)*v100;
                  }
                  while (*v100);
                  if (v97 != v114)
                  {
                    if (v97[4] <= v95)
                    {
                      __int16 v101 = (void *)v97[5];
                      if (v101 != v97 + 6)
                      {
                        int v12 = 0;
                        do
                        {
                          uint64_t v102 = *(void *)(a2[1] + (((v101[4] + a2[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
                               + 376 * ((*((_DWORD *)v101 + 8) + a2[4]) & 0xF);
                          if (*(_DWORD *)(v102 + 40) == 3 || *(_DWORD *)(v102 + 208) == 3) {
                            int v12 = 1;
                          }
                          __int16 v103 = (void *)v101[1];
                          if (v103)
                          {
                            do
                            {
                              uint64_t v104 = v103;
                              __int16 v103 = (void *)*v103;
                            }
                            while (v103);
                          }
                          else
                          {
                            do
                            {
                              uint64_t v104 = (void *)v101[2];
                              BOOL v10 = *v104 == (void)v101;
                              __int16 v101 = v104;
                            }
                            while (!v10);
                          }
                          __int16 v101 = v104;
                        }
                        while (v104 != v97 + 6);
                        goto LABEL_184;
                      }
                    }
                    goto LABEL_213;
                  }
                  char v11 = 1;
                  if (*(_DWORD *)v13 == 2 && *(unsigned char *)(v7 + 33) == 0) {
                    goto LABEL_218;
                  }
                }
                else
                {
LABEL_213:
                  char v11 = 1;
                  if (*(_DWORD *)v13 == 2 && *(unsigned char *)(v7 + 33) == 0) {
                    goto LABEL_218;
                  }
                }
LABEL_189:
                int v12 = 0;
                goto LABEL_19;
              }
              char v11 = 0;
              if (!v12) {
                goto LABEL_185;
              }
              goto LABEL_17;
            }
            goto LABEL_101;
          }
          if (v15 < v59)
          {
LABEL_101:
            double v56 = *v58;
            double v57 = v58;
            if (!*v58) {
              goto LABEL_114;
            }
            continue;
          }
          break;
        }
        if (v59 >= v15) {
          goto LABEL_133;
        }
LABEL_112:
        double v56 = v58[1];
        if (v56) {
          continue;
        }
        break;
      }
      double v57 = v58 + 1;
LABEL_114:
      int64x2_t result = (char *)operator new(0x40uLL);
      *((_OWORD *)result + 2) = v116;
      *((void *)result + 6) = v117;
      *((_WORD *)result + 28) = 0;
      result[58] = 0;
      *(void *)int64x2_t result = 0;
      *((void *)result + 1) = 0;
      *((void *)result + 2) = v58;
      void *v57 = (uint64_t *)result;
      uint64_t v62 = (uint64_t *)**v3;
      if (v62)
      {
        std::bad_cast *v3 = v62;
        int64x2_t result = (char *)*v57;
      }
      uint64_t v63 = *v8;
      BOOL v10 = result == (char *)*v8;
      result[24] = v10;
      if (!v10)
      {
        do
        {
          uint64_t v64 = *((void *)result + 2);
          if (*(unsigned char *)(v64 + 24)) {
            break;
          }
          unint64_t v65 = *(uint64_t **)(v64 + 16);
          uint64_t v66 = *v65;
          if (*v65 == v64)
          {
            uint64_t v69 = v65[1];
            if (!v69 || (v70 = *(unsigned __int8 *)(v69 + 24), uint64_t v67 = (unsigned char *)(v69 + 24), v70))
            {
              if (*(char **)v64 == result)
              {
                *(unsigned char *)(v64 + 24) = 1;
                *((unsigned char *)v65 + 24) = 0;
                uint64_t v73 = *(void *)(v64 + 8);
                *unint64_t v65 = v73;
                if (v73) {
                  goto LABEL_131;
                }
              }
              else
              {
                uint64_t v71 = *(uint64_t **)(v64 + 8);
                uint64_t v72 = *v71;
                *(void *)(v64 + 8) = *v71;
                if (v72)
                {
                  *(void *)(v72 + 16) = v64;
                  unint64_t v65 = *(uint64_t **)(v64 + 16);
                }
                v71[2] = (uint64_t)v65;
                *(void *)(*(void *)(v64 + 16) + 8 * (**(void **)(v64 + 16) != v64)) = v71;
                uint64_t *v71 = v64;
                *(void *)(v64 + 16) = v71;
                unint64_t v65 = (uint64_t *)v71[2];
                uint64_t v64 = *v65;
                *((unsigned char *)v71 + 24) = 1;
                *((unsigned char *)v65 + 24) = 0;
                uint64_t v73 = *(void *)(v64 + 8);
                *unint64_t v65 = v73;
                if (v73) {
LABEL_131:
                }
                  *(void *)(v73 + 16) = v65;
              }
              *(void *)(v64 + 16) = v65[2];
              *(void *)(v65[2] + 8 * (*(void *)v65[2] != (void)v65)) = v64;
              *(void *)(v64 + 8) = v65;
LABEL_140:
              v65[2] = v64;
              break;
            }
          }
          else if (!v66 || (v68 = *(unsigned __int8 *)(v66 + 24), uint64_t v67 = (unsigned char *)(v66 + 24), v68))
          {
            if (*(char **)v64 == result)
            {
              uint64_t v107 = *((void *)result + 1);
              *(void *)uint64_t v64 = v107;
              if (v107)
              {
                *(void *)(v107 + 16) = v64;
                unint64_t v65 = *(uint64_t **)(v64 + 16);
              }
              *((void *)result + 2) = v65;
              *(void *)(*(void *)(v64 + 16) + 8 * (**(void **)(v64 + 16) != v64)) = result;
              *((void *)result + 1) = v64;
              *(void *)(v64 + 16) = result;
              unint64_t v65 = (uint64_t *)*((void *)result + 2);
              result[24] = 1;
              *((unsigned char *)v65 + 24) = 0;
              uint64_t v64 = v65[1];
              uint64_t v77 = *(char **)v64;
              v65[1] = *(void *)v64;
              if (v77) {
LABEL_138:
              }
                *((void *)v77 + 2) = v65;
            }
            else
            {
              int64x2_t result = (char *)*((void *)result + 2);
              *(unsigned char *)(v64 + 24) = 1;
              *((unsigned char *)v65 + 24) = 0;
              uint64_t v64 = v65[1];
              uint64_t v77 = *(char **)v64;
              v65[1] = *(void *)v64;
              if (v77) {
                goto LABEL_138;
              }
            }
            *(void *)(v64 + 16) = v65[2];
            *(void *)(v65[2] + 8 * (*(void *)v65[2] != (void)v65)) = v64;
            *(void *)uint64_t v64 = v65;
            goto LABEL_140;
          }
          *(unsigned char *)(v64 + 24) = 1;
          int64x2_t result = (char *)v65;
          *((unsigned char *)v65 + 24) = v65 == v63;
          *uint64_t v67 = 1;
        }
        while (v65 != v63);
      }
      v3[2] = (uint64_t *)((char *)v3[2] + 1);
      uint64_t v74 = *v8;
      long long v75 = v3 + 1;
      BOOL v76 = v3 + 1;
      if (!*v8) {
        goto LABEL_156;
      }
LABEL_144:
      while (2)
      {
        while (2)
        {
          BOOL v76 = (uint64_t **)v74;
          uint64_t v78 = v74[4];
          if (v15 != v78)
          {
            if (v15 < v78) {
              goto LABEL_143;
            }
            if (v78 >= v15) {
              goto LABEL_175;
            }
            goto LABEL_154;
          }
          uint64_t v79 = (uint64_t)v76[5];
          if (*((void *)&v116 + 1) == v79)
          {
            long long v80 = v76[6];
            if (v117 < (uint64_t)v80) {
              goto LABEL_143;
            }
            if ((uint64_t)v80 >= v117) {
              goto LABEL_175;
            }
LABEL_154:
            uint64_t v74 = v76[1];
            if (!v74)
            {
              long long v75 = v76 + 1;
              goto LABEL_156;
            }
            continue;
          }
          break;
        }
        if (*((uint64_t *)&v116 + 1) < v79)
        {
LABEL_143:
          uint64_t v74 = *v76;
          long long v75 = v76;
          if (!*v76) {
            goto LABEL_156;
          }
          continue;
        }
        break;
      }
      if (v79 < *((uint64_t *)&v116 + 1)) {
        goto LABEL_154;
      }
LABEL_175:
      if (*((unsigned char *)v76 + 57)) {
        goto LABEL_19;
      }
      if ((v11 & 1) == 0) {
        goto LABEL_190;
      }
LABEL_184:
      char v11 = 1;
      if (v12) {
        goto LABEL_17;
      }
LABEL_185:
      if (*(_DWORD *)v13 != 2 || *(unsigned char *)(v7 + 33) != 0) {
        goto LABEL_189;
      }
LABEL_218:
      if (*v115 != 2 || *(_DWORD *)(v7 + 208) != 2)
      {
        int v12 = 0;
        goto LABEL_17;
      }
      int v12 = 0;
      if (*(void *)(v7 + 48) != *(void *)(v7 + 216))
      {
LABEL_17:
        __int16 v118 = &v116;
        int64x2_t result = (char *)sub_1002EAFA4(v3, (uint64_t *)&v116, (uint64_t)&unk_1003FAE80, &v118);
LABEL_18:
        result[57] = 1;
      }
LABEL_19:
      v13 += 168;
      if (v13 != v7 + 376) {
        continue;
      }
      break;
    }
LABEL_259:
    v7 += 376;
    double v6 = v113;
    if (v7 - *v113 == 6016)
    {
      double v6 = v113 + 1;
      uint64_t v7 = v113[1];
    }
    uint64_t v4 = a2[1];
    uint64_t v5 = a2[2];
  }
}

void sub_1002C7048(uint64_t a1, void *a2, void *a3, uint64_t a4, _OWORD *a5)
{
  double v6 = (uint64_t **)a4;
  unint64_t v10 = *(void *)(a4 + 16);
  long long __p = 0;
  v128 = 0;
  long long v129 = 0;
  if (v10)
  {
    if (v10 >= 0x38E38E38E38E38FLL) {
      sub_1000A9108();
    }
    char v11 = (char *)operator new(72 * v10);
    long long __p = v11;
    long long v129 = &v11[72 * v10];
    int v12 = v11;
    do
    {
      *(void *)int v12 = -1;
      *((void *)v12 + 1) = -1;
      *((void *)v12 + 2) = -1;
      *((void *)v12 + 3) = 0;
      *((void *)v12 + 4) = 0;
      v12 += 72;
    }
    while (v12 != &v11[72 * v10]);
    v128 = &v11[72 * v10];
    uint64_t v14 = v6 + 1;
    uint64_t v13 = *v6;
    if (*v6 == (uint64_t *)(v6 + 1)) {
      goto LABEL_112;
    }
  }
  else
  {
    char v11 = 0;
    uint64_t v14 = (uint64_t **)(a4 + 8);
    uint64_t v13 = *(uint64_t **)a4;
    if (*(void *)a4 == a4 + 8)
    {
      char v74 = 1;
      goto LABEL_116;
    }
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  do
  {
    double v18 = *((double *)v13 + 10);
    double v19 = -v18;
    if (!*((unsigned char *)v13 + 88)) {
      double v19 = *((double *)v13 + 10);
    }
    uint64_t v20 = &v11[72 * v17];
    long long v21 = *((_OWORD *)v13 + 2);
    *((void *)v20 + 2) = v13[6];
    *(_OWORD *)uint64_t v20 = v21;
    *((double *)v20 + 3) = v19;
    *((double *)v20 + 4) = fabs(v18);
    long long v22 = v123;
    *(_OWORD *)(v20 + 56) = v124;
    *(_OWORD *)(v20 + 40) = v22;
    char v11 = (char *)__p;
    uint64_t v23 = v13[4];
    if (!v23)
    {
      uint64_t v42 = v13[6];
      if (v42 >= 0) {
        uint64_t v43 = *(void *)(a1 + 24) + 24 * v42;
      }
      else {
        uint64_t v43 = a1;
      }
      unsigned int v44 = (char *)__p + 72 * v17;
      *(int64x2_t *)(v44 + 56) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      uint64_t v45 = (double *)(v44 + 56);
      *((int64x2_t *)v45 - 1) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      uint64_t v46 = v45 - 2;
      double v48 = *(double **)v43;
      uint64_t v47 = *(double **)(v43 + 8);
      if (v48 == v47) {
        goto LABEL_65;
      }
      double v36 = *v48;
      *uint64_t v46 = *v48;
      double v37 = v48[1];
      *(v45 - 1) = v37;
      double v38 = *v48;
      *uint64_t v45 = *v48;
      double v39 = v48[1];
      v45[1] = v39;
      while (1)
      {
        v48 += 2;
        if (v48 == v47) {
          goto LABEL_66;
        }
        double v49 = *v48;
        if (*v48 < v36)
        {
          *uint64_t v46 = v49;
          double v36 = v49;
          if (v49 > v38) {
            goto LABEL_45;
          }
LABEL_41:
          double v50 = v48[1];
          if (v50 < v37) {
            goto LABEL_46;
          }
LABEL_42:
          if (v50 > v39)
          {
LABEL_47:
            v45[1] = v50;
            double v39 = v50;
          }
        }
        else
        {
          if (v49 <= v38) {
            goto LABEL_41;
          }
LABEL_45:
          *uint64_t v45 = v49;
          double v38 = v49;
          double v50 = v48[1];
          if (v50 >= v37) {
            goto LABEL_42;
          }
LABEL_46:
          *(v45 - 1) = v50;
          double v37 = v50;
          if (v50 > v39) {
            goto LABEL_47;
          }
        }
      }
    }
    if (v23 != 1)
    {
      if (v23 != 2)
      {
        int v51 = (double *)((char *)__p + 72 * v17);
        double v36 = v51[5];
        double v37 = v51[6];
        double v38 = v51[7];
        double v39 = v51[8];
        goto LABEL_66;
      }
      unint64_t v24 = a3[4];
      uint64_t v25 = a3[1];
      uint64_t v26 = (void *)(v25 + 8 * (v24 / 0xAA));
      if (a3[2] == v25)
      {
        unint64_t v27 = 0;
        uint64_t v28 = v13[5];
        if (!v28) {
          goto LABEL_53;
        }
      }
      else
      {
        unint64_t v27 = *v26 + 24 * (v24 % 0xAA);
        uint64_t v28 = v13[5];
        if (!v28) {
          goto LABEL_53;
        }
      }
      uint64_t v52 = v28 - 0x5555555555555555 * ((uint64_t)(v27 - *v26) >> 3);
      if (v52 < 1) {
        unint64_t v27 = v26[-((169 - v52) / 0xAAuLL)] + 24 * (170 * ((169 - v52) / 0xAAuLL) - (169 - v52)) + 4056;
      }
      else {
        unint64_t v27 = v26[v52 / 0xAAuLL] + 24 * (v52 % 0xAAuLL);
      }
LABEL_53:
      uint64_t v53 = (char *)__p + 72 * v17;
      *(int64x2_t *)(v53 + 56) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      uint64_t v54 = (double *)(v53 + 56);
      *((int64x2_t *)v54 - 1) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      double v55 = v54 - 2;
      double v57 = *(double **)v27;
      double v56 = *(double **)(v27 + 8);
      if (v57 != v56)
      {
        double v36 = *v57;
        double *v55 = *v57;
        double v37 = v57[1];
        *(v54 - 1) = v37;
        double v38 = *v57;
        *uint64_t v54 = *v57;
        double v39 = v57[1];
        v54[1] = v39;
        while (1)
        {
          v57 += 2;
          if (v57 == v56) {
            goto LABEL_66;
          }
          double v58 = *v57;
          if (*v57 < v36)
          {
            double *v55 = v58;
            double v36 = v58;
            if (v58 > v38) {
              goto LABEL_62;
            }
LABEL_58:
            double v59 = v57[1];
            if (v59 < v37) {
              goto LABEL_63;
            }
LABEL_59:
            if (v59 > v39)
            {
LABEL_64:
              v54[1] = v59;
              double v39 = v59;
            }
          }
          else
          {
            if (v58 <= v38) {
              goto LABEL_58;
            }
LABEL_62:
            *uint64_t v54 = v58;
            double v38 = v58;
            double v59 = v57[1];
            if (v59 >= v37) {
              goto LABEL_59;
            }
LABEL_63:
            *(v54 - 1) = v59;
            double v37 = v59;
            if (v59 > v39) {
              goto LABEL_64;
            }
          }
        }
      }
      goto LABEL_65;
    }
    uint64_t v29 = v13[6];
    if (v29 >= 0) {
      uint64_t v30 = *(void *)(*a2 + 48 * v13[5] + 24) + 24 * v29;
    }
    else {
      uint64_t v30 = *a2 + 48 * v13[5];
    }
    uint64_t v31 = (char *)__p + 72 * v17;
    *(int64x2_t *)(v31 + 56) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int v32 = (double *)(v31 + 56);
    *((int64x2_t *)v32 - 1) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    BOOL v33 = v32 - 2;
    uint64_t v35 = *(double **)v30;
    uint64_t v34 = *(double **)(v30 + 8);
    if (v35 != v34)
    {
      double v36 = *v35;
      *BOOL v33 = *v35;
      double v37 = v35[1];
      *(v32 - 1) = v37;
      double v38 = *v35;
      *int v32 = *v35;
      double v39 = v35[1];
      v32[1] = v39;
      while (1)
      {
        v35 += 2;
        if (v35 == v34) {
          goto LABEL_66;
        }
        double v40 = *v35;
        if (*v35 < v36)
        {
          *BOOL v33 = v40;
          double v36 = v40;
          if (v40 > v38) {
            goto LABEL_30;
          }
LABEL_26:
          double v41 = v35[1];
          if (v41 < v37) {
            goto LABEL_31;
          }
LABEL_27:
          if (v41 > v39)
          {
LABEL_32:
            v32[1] = v41;
            double v39 = v41;
          }
        }
        else
        {
          if (v40 <= v38) {
            goto LABEL_26;
          }
LABEL_30:
          *int v32 = v40;
          double v38 = v40;
          double v41 = v35[1];
          if (v41 >= v37) {
            goto LABEL_27;
          }
LABEL_31:
          *(v32 - 1) = v41;
          double v37 = v41;
          if (v41 > v39) {
            goto LABEL_32;
          }
        }
      }
    }
LABEL_65:
    double v37 = 1.79769313e308;
    double v39 = -1.79769313e308;
    double v38 = -1.79769313e308;
    double v36 = 1.79769313e308;
LABEL_66:
    uint64_t v60 = (double *)&v11[72 * v17];
    double v61 = fabs(v36);
    if (v61 >= 1.0) {
      double v62 = v61 * 2.22044605e-16;
    }
    else {
      double v62 = 2.22044605e-16;
    }
    double v63 = v36 - v62;
    double v64 = fabs(v37);
    if (v64 >= 1.0) {
      double v65 = v64 * 2.22044605e-16;
    }
    else {
      double v65 = 2.22044605e-16;
    }
    v60[5] = v63;
    v60[6] = v37 - v65;
    double v66 = fabs(v38);
    if (v66 >= 1.0) {
      double v67 = v66 * 2.22044605e-16;
    }
    else {
      double v67 = 2.22044605e-16;
    }
    double v68 = v38 + v67;
    double v69 = fabs(v39);
    if (v69 >= 1.0) {
      double v70 = v69 * 2.22044605e-16;
    }
    else {
      double v70 = 2.22044605e-16;
    }
    v60[7] = v68;
    v60[8] = v39 + v70;
    if (v60[3] > 0.0)
    {
      uint64_t v16 = v17;
      ++v15;
    }
    uint64_t v71 = (uint64_t *)v13[1];
    if (v71)
    {
      do
      {
        uint64_t v72 = v71;
        uint64_t v71 = (uint64_t *)*v71;
      }
      while (v71);
    }
    else
    {
      do
      {
        uint64_t v72 = (uint64_t *)v13[2];
        BOOL v73 = *v72 == (void)v13;
        uint64_t v13 = v72;
      }
      while (!v73);
    }
    ++v17;
    uint64_t v13 = v72;
  }
  while (v72 != (uint64_t *)v14);
  if (v15 == v10)
  {
    char v74 = 1;
    long long v75 = (char *)__p;
    if (!__p) {
      goto LABEL_116;
    }
LABEL_115:
    v128 = v75;
    operator delete(v75);
    goto LABEL_116;
  }
  if (v15 == 1)
  {
    BOOL v76 = &v11[72 * v16];
    long long v77 = *(_OWORD *)v76;
    *(void *)&long long v124 = *((void *)v76 + 2);
    long long v123 = v77;
    int v130 = (char *)&v123;
    uint64_t v78 = sub_1002F7260(v6, (uint64_t *)&v123, (uint64_t)&unk_1003FAE80, (_OWORD **)&v130);
    long long v80 = (char *)__p;
    uint64_t v79 = v128;
    if (__p != v128)
    {
      long long v81 = v78;
      uint64_t v82 = 0;
      uint64_t v83 = (void **)(v78 + 16);
      do
      {
        if (v82 != v16)
        {
          int v130 = v80;
          char v86 = sub_1002F7260((uint64_t **)a4, (uint64_t *)v80, (uint64_t)&unk_1003FAE80, (_OWORD **)&v130);
          *((_OWORD *)v86 + 6) = v123;
          v86[14] = (uint64_t *)v124;
          uint64_t v88 = v81[17];
          unint64_t v87 = (unint64_t)v81[18];
          if ((unint64_t)v88 < v87)
          {
            long long v84 = *(_OWORD *)v80;
            v88[2] = *((void *)v80 + 2);
            *(_OWORD *)uint64_t v88 = v84;
            uint64_t v85 = v88 + 3;
          }
          else
          {
            int v89 = (uint64_t *)*v83;
            unint64_t v90 = 0xAAAAAAAAAAAAAAABLL * (((char *)v88 - (unsigned char *)*v83) >> 3);
            unint64_t v91 = v90 + 1;
            if (v90 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_1000A9108();
            }
            unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v87 - (void)v89) >> 3);
            if (2 * v92 > v91) {
              unint64_t v91 = 2 * v92;
            }
            if (v92 >= 0x555555555555555) {
              unint64_t v93 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v93 = v91;
            }
            if (v93)
            {
              if (v93 > 0xAAAAAAAAAAAAAAALL) {
                sub_1000A6A10();
              }
              int v94 = (char *)operator new(24 * v93);
            }
            else
            {
              int v94 = 0;
            }
            long long v95 = *(_OWORD *)v80;
            float64x2x2_t v96 = &v94[24 * v90];
            *((void *)v96 + 2) = *((void *)v80 + 2);
            *(_OWORD *)float64x2x2_t v96 = v95;
            float64x2x2_t v97 = (uint64_t *)v96;
            if (v88 != v89)
            {
              do
              {
                long long v98 = *(_OWORD *)(v88 - 3);
                *(v97 - 1) = *(v88 - 1);
                *(_OWORD *)(v97 - 3) = v98;
                v97 -= 3;
                v88 -= 3;
              }
              while (v88 != v89);
              uint64_t v88 = (uint64_t *)*v83;
            }
            BOOL v99 = (uint64_t *)&v94[24 * v93];
            uint64_t v85 = (uint64_t *)(v96 + 24);
            v81[16] = v97;
            v81[17] = (uint64_t *)(v96 + 24);
            v81[18] = v99;
            if (v88) {
              operator delete(v88);
            }
          }
          v81[17] = v85;
          uint64_t v79 = v128;
        }
        v80 += 72;
        ++v82;
      }
      while (v80 != v79);
    }
    char v74 = 1;
    double v6 = (uint64_t **)a4;
    long long v75 = (char *)__p;
    if (__p) {
      goto LABEL_115;
    }
    goto LABEL_116;
  }
LABEL_112:
  *(void *)&long long v123 = a1;
  *((void *)&v123 + 1) = a2;
  *(void *)&long long v124 = a3;
  *((void *)&v124 + 1) = v6;
  int v125 = a5;
  char v126 = 0;
  int v130 = (char *)a5;
  __int16 v122 = a5;
  sub_1002F73C0((double **)&__p, (uint64_t)&v123, (uint64_t)&v130, (uint64_t)&v122, 0x10uLL);
  char v74 = 0;
  long long v75 = (char *)__p;
  if (__p) {
    goto LABEL_115;
  }
LABEL_116:
  uint64_t v100 = *v6;
  if (*v6 == (uint64_t *)v14) {
    char v101 = 1;
  }
  else {
    char v101 = v74;
  }
  if ((v101 & 1) == 0)
  {
    do
    {
      if ((v100[12] & 0x8000000000000000) == 0)
      {
        uint64_t v102 = (long long *)(v100 + 4);
        *(void *)&long long v123 = v100 + 12;
        __int16 v103 = sub_1002F7260(v6, v100 + 12, (uint64_t)&unk_1003FAE80, (_OWORD **)&v123);
        uint64_t v104 = v103;
        int v106 = v103[17];
        uint64_t v105 = v103[18];
        if (v106 >= v105)
        {
          uint64_t v109 = v103 + 16;
          uint64_t v110 = v103[16];
          unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * (v106 - v110) + 1;
          if (v111 > 0xAAAAAAAAAAAAAAALL) {
            sub_1000A9108();
          }
          unint64_t v112 = 0xAAAAAAAAAAAAAAABLL * (v105 - v110);
          if (2 * v112 > v111) {
            unint64_t v111 = 2 * v112;
          }
          if (v112 >= 0x555555555555555) {
            unint64_t v113 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v113 = v111;
          }
          if (v113)
          {
            if (v113 > 0xAAAAAAAAAAAAAAALL) {
              sub_1000A6A10();
            }
            __int16 v114 = (char *)operator new(24 * v113);
          }
          else
          {
            __int16 v114 = 0;
          }
          long long v115 = *v102;
          long long v116 = &v114[8 * (v106 - v110)];
          *((void *)v116 + 2) = v100[6];
          *(_OWORD *)long long v116 = v115;
          uint64_t v117 = (uint64_t *)v116;
          if (v106 != v110)
          {
            do
            {
              long long v118 = *(_OWORD *)(v106 - 3);
              *(v117 - 1) = *(v106 - 1);
              *(_OWORD *)(v117 - 3) = v118;
              v117 -= 3;
              v106 -= 3;
            }
            while (v106 != v110);
            int v106 = *v109;
          }
          __int16 v108 = (uint64_t *)(v116 + 24);
          v104[16] = v117;
          v104[17] = (uint64_t *)(v116 + 24);
          unsigned char v104[18] = (uint64_t *)&v114[24 * v113];
          double v6 = (uint64_t **)a4;
          if (v106) {
            operator delete(v106);
          }
        }
        else
        {
          long long v107 = *v102;
          v106[2] = v100[6];
          *(_OWORD *)int v106 = v107;
          __int16 v108 = v106 + 3;
        }
        v104[17] = v108;
      }
      long long v119 = (uint64_t *)v100[1];
      if (v119)
      {
        do
        {
          __int16 v120 = v119;
          long long v119 = (uint64_t *)*v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          __int16 v120 = (uint64_t *)v100[2];
          BOOL v73 = *v120 == (void)v100;
          uint64_t v100 = v120;
        }
        while (!v73);
      }
      uint64_t v100 = v120;
    }
    while (v120 != (uint64_t *)v14);
  }
}

void sub_1002C79B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C79E0(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = a1 + 1;
  unint64_t v9 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    while (*((unsigned char *)v9 + 89) || v9[12] != -1)
    {
LABEL_143:
      uint64_t v117 = (void *)v9[1];
      if (v117)
      {
        do
        {
          long long v118 = v117;
          uint64_t v117 = (void *)*v117;
        }
        while (v117);
      }
      else
      {
        do
        {
          long long v118 = (void *)v9[2];
          BOOL v28 = *v118 == (void)v9;
          unint64_t v9 = v118;
        }
        while (!v28);
      }
      unint64_t v9 = v118;
      if (v118 == v8) {
        return a5;
      }
    }
    *(_OWORD *)long long __p = 0u;
    long long v130 = 0u;
    *(_OWORD *)v128 = 0u;
    uint64_t v14 = v9[4];
    uint64_t v13 = v9[5];
    int v15 = *((unsigned __int8 *)v9 + 88);
    if (v14 != 2)
    {
      uint64_t v16 = v9[6];
      if (v14 == 1)
      {
        uint64_t v18 = *a3 + 48 * v13;
        if (v16 >= 0) {
          uint64_t v17 = *(void *)(v18 + 24) + 24 * v16;
        }
        else {
          uint64_t v17 = v18;
        }
        if (v128 == (void **)v17) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v14) {
          goto LABEL_29;
        }
        if (v16 >= 0) {
          uint64_t v17 = *(void *)(a2 + 24) + 24 * v16;
        }
        else {
          uint64_t v17 = a2;
        }
        if (v128 == (void **)v17)
        {
LABEL_23:
          if (v15)
          {
            if (v128[0] != v128[1])
            {
              long long v22 = (char *)v128[1] - 16;
              if ((char *)v128[1] - 16 > v128[0])
              {
                uint64_t v23 = (char *)v128[0] + 16;
                do
                {
                  long long v24 = *((_OWORD *)v23 - 1);
                  *((_OWORD *)v23 - 1) = *(_OWORD *)v22;
                  *(_OWORD *)long long v22 = v24;
                  v22 -= 16;
                  BOOL v25 = v23 >= v22;
                  v23 += 16;
                }
                while (!v25);
              }
            }
          }
LABEL_29:
          uint64_t v26 = (uint64_t *)v9[16];
          unint64_t v27 = (void *)*v8;
          BOOL v28 = v26 == (uint64_t *)v9[17] || v27 == 0;
          if (!v28)
          {
            while (1)
            {
              if (v27)
              {
                uint64_t v50 = *v26;
                uint64_t v49 = v26[1];
                int v51 = v8;
                uint64_t v52 = v26[2];
                do
                {
                  uint64_t v56 = v27[4];
                  BOOL v57 = v56 < v50;
                  if (v56 == v50)
                  {
                    uint64_t v58 = v27[5];
                    BOOL v57 = v58 < v49;
                    if (v58 == v49) {
                      BOOL v57 = v27[6] < v52;
                    }
                  }
                  int v53 = v57;
                  BOOL v54 = v53 == 0;
                  if (v53) {
                    double v55 = v27 + 1;
                  }
                  else {
                    double v55 = v27;
                  }
                  if (v54) {
                    int v51 = v27;
                  }
                  unint64_t v27 = (void *)*v55;
                }
                while (*v55);
                if (v51 != v8)
                {
                  uint64_t v59 = v51[4];
                  BOOL v60 = v50 < v59;
                  if (v50 == v59)
                  {
                    uint64_t v61 = v51[5];
                    BOOL v60 = v49 < v61;
                    if (v49 == v61) {
                      BOOL v60 = v52 < v51[6];
                    }
                  }
                  if (!v60 && !*((unsigned char *)v51 + 89)) {
                    break;
                  }
                }
              }
LABEL_68:
              v26 += 3;
              if (v26 == (uint64_t *)v9[17]) {
                goto LABEL_34;
              }
              unint64_t v27 = (void *)*v8;
            }
            int v62 = *((unsigned __int8 *)v51 + 88);
            if (v50 != 2)
            {
              if (v50 == 1)
              {
                uint64_t v64 = *a3 + 48 * v49;
                if (v52 >= 0) {
                  double v63 = (char **)(*(void *)(v64 + 24) + 24 * v52);
                }
                else {
                  double v63 = (char **)v64;
                }
                if ((unint64_t)(v63[1] - *v63) < 0x31) {
                  goto LABEL_68;
                }
              }
              else
              {
                if (v50) {
                  goto LABEL_68;
                }
                double v63 = (char **)(v52 >= 0 ? *(void *)(a2 + 24) + 24 * v52 : a2);
                if ((unint64_t)(v63[1] - *v63) < 0x31) {
                  goto LABEL_68;
                }
              }
LABEL_86:
              double v69 = (char *)__p[1];
              double v68 = (char *)v130;
              if ((void)v130 - (unint64_t)__p[1] == -24)
              {
                int v123 = *((unsigned __int8 *)v51 + 88);
                double v70 = a4;
                uint64_t v71 = a3;
                uint64_t v72 = a7;
                uint64_t v73 = a5;
                if ((void *)v130 != __p[1])
                {
                  char v74 = (char *)v130;
                  do
                  {
                    BOOL v76 = (void *)*((void *)v74 - 3);
                    v74 -= 24;
                    long long v75 = v76;
                    if (v76)
                    {
                      *((void *)v68 - 2) = v75;
                      operator delete(v75);
                    }
                    double v68 = v74;
                  }
                  while (v74 != v69);
                }
                *(void *)&long long v130 = v69;
                a5 = v73;
                a7 = v72;
                a3 = v71;
                a4 = v70;
                int v62 = v123;
                long long v77 = v69 - 24;
                if (v69 - 24 != (char *)v63) {
LABEL_95:
                }
                  sub_1002C43FC(v77, *v63, v63[1], (v63[1] - *v63) >> 4);
              }
              else
              {
                sub_1002FA594((uint64_t)&__p[1], 1uLL);
                long long v77 = (char *)(v130 - 24);
                if ((char **)(v130 - 24) != v63) {
                  goto LABEL_95;
                }
              }
              if (v62)
              {
                unint64_t v78 = *(void *)(v130 - 24);
                uint64_t v79 = *(void *)(v130 - 16);
                long long v80 = (_OWORD *)(v79 - 16);
                if (v78 != v79 && (unint64_t)v80 > v78)
                {
                  unint64_t v82 = v78 + 16;
                  do
                  {
                    long long v83 = *(_OWORD *)(v82 - 16);
                    *(_OWORD *)(v82 - 16) = *v80;
                    *v80-- = v83;
                    BOOL v25 = v82 >= (unint64_t)v80;
                    v82 += 16;
                  }
                  while (!v25);
                }
              }
              goto LABEL_68;
            }
            unint64_t v65 = a4[4];
            uint64_t v66 = a4[1];
            double v67 = (void *)(v66 + 8 * (v65 / 0xAA));
            if (a4[2] == v66)
            {
              double v63 = 0;
              if (!v49)
              {
LABEL_85:
                if ((unint64_t)(v63[1] - *v63) < 0x31) {
                  goto LABEL_68;
                }
                goto LABEL_86;
              }
            }
            else
            {
              double v63 = (char **)(*v67 + 24 * (v65 % 0xAA));
              if (!v49) {
                goto LABEL_85;
              }
            }
            uint64_t v84 = v49 - 0x5555555555555555 * (((uint64_t)v63 - *v67) >> 3);
            if (v84 < 1)
            {
              unint64_t v85 = 169 - v84;
              double v63 = (char **)(v67[-(v85 / 0xAA)] + 24 * (170 * (v85 / 0xAA) - v85) + 4056);
              if (*(void *)(v67[-(v85 / 0xAA)] + 24 * (170 * (v85 / 0xAA) - v85) + 4064) - (void)*v63 < 0x31uLL) {
                goto LABEL_68;
              }
            }
            else
            {
              double v63 = (char **)(v67[v84 / 0xAAuLL] + 24 * (v84 % 0xAAuLL));
              if ((unint64_t)(v63[1] - *v63) < 0x31) {
                goto LABEL_68;
              }
            }
            goto LABEL_86;
          }
LABEL_34:
          unint64_t v29 = (char *)v128[1] - (char *)v128[0];
          unint64_t v30 = ((char *)v128[1] - (char *)v128[0]) >> 4;
          uint64_t v31 = (char *)__p[1];
          if (__p[1] != (void *)v130)
          {
            unint64_t v32 = v130 - (unint64_t)__p[1] - 24;
            BOOL v33 = (uint64_t *)__p[1];
            if (v32 >= 0x60)
            {
              unint64_t v34 = v32 / 0x18 + 1;
              uint64_t v35 = v34 & 3;
              if ((v34 & 3) == 0) {
                uint64_t v35 = 4;
              }
              unint64_t v36 = v34 - v35;
              BOOL v33 = (uint64_t *)((char *)__p[1] + 24 * v36);
              int64x2_t v37 = 0uLL;
              int64x2_t v38 = (int64x2_t)(unint64_t)(((char *)v128[1] - (char *)v128[0]) >> 4);
              double v39 = (const double *)__p[1];
              do
              {
                double v40 = v39 + 12;
                float64x2x3_t v139 = vld3q_f64(v39);
                double v41 = v39 + 6;
                int64x2_t v38 = vsraq_n_s64(v38, vsubq_s64((int64x2_t)v139.val[1], (int64x2_t)v139.val[0]), 4uLL);
                float64x2x3_t v140 = vld3q_f64(v41);
                int64x2_t v37 = vsraq_n_s64(v37, vsubq_s64((int64x2_t)v140.val[1], (int64x2_t)v140.val[0]), 4uLL);
                double v39 = v40;
                v36 -= 4;
              }
              while (v36);
              unint64_t v30 = vaddvq_s64(vaddq_s64(v37, v38));
            }
            do
            {
              uint64_t v42 = *v33;
              uint64_t v43 = v33[1];
              v33 += 3;
              v30 += (v43 - v42) >> 4;
            }
            while (v33 != (uint64_t *)v130);
          }
          if (v30 < 4)
          {
LABEL_133:
            if (v31)
            {
              unint64_t v112 = (char *)v130;
              unint64_t v113 = v31;
              if ((char *)v130 != v31)
              {
                __int16 v114 = (char *)v130;
                do
                {
                  long long v116 = (void *)*((void *)v114 - 3);
                  v114 -= 24;
                  long long v115 = v116;
                  if (v116)
                  {
                    *((void *)v112 - 2) = v115;
                    operator delete(v115);
                  }
                  unint64_t v112 = v114;
                }
                while (v114 != v31);
                unint64_t v113 = (char *)__p[1];
              }
              *(void *)&long long v130 = v31;
              operator delete(v113);
            }
            if (v128[0])
            {
              v128[1] = v128[0];
              operator delete(v128[0]);
            }
            goto LABEL_143;
          }
          double v44 = 0.0;
          double v45 = 0.0;
          if (v29 < 0x40 || (uint64_t v46 = (double *)((char *)v128[0] + 16), (char *)v128[0] + 16 == v128[1]))
          {
LABEL_117:
            if (__p[1] != (void *)v130)
            {
              double v44 = 0.0;
              int v94 = (double **)__p[1];
              while (2)
              {
                float64x2x2_t v97 = *v94;
                float64x2x2_t v96 = v94[1];
                unint64_t v98 = (char *)v96 - (char *)*v94;
                BOOL v99 = *v94 + 2;
                BOOL v100 = v98 < 0x40 || v99 == v96;
                double v95 = 0.0;
                if (v100) {
                  goto LABEL_120;
                }
                unint64_t v101 = v98 - 32;
                if (v101 < 0x30)
                {
                  uint64_t v102 = *v94;
                  goto LABEL_130;
                }
                uint64_t v103 = (v101 >> 4) + 1;
                uint64_t v104 = 2 * (v103 & 0x1FFFFFFFFFFFFFFCLL);
                BOOL v99 = (double *)((char *)v99 + v104 * 8);
                uint64_t v102 = &v97[v104];
                uint64_t v105 = v97 + 4;
                uint64_t v106 = v103 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v107 = v105 - 4;
                  float64x2x2_t v132 = vld2q_f64(v107);
                  float64x2x2_t v134 = vld2q_f64(v105);
                  __int16 v108 = v105 - 2;
                  uint64_t v109 = v105 + 2;
                  float64x2x2_t v137 = vld2q_f64(v108);
                  float64x2x2_t v138 = vld2q_f64(v109);
                  v132.val[0] = vmulq_f64(vaddq_f64(v132.val[0], v137.val[0]), vsubq_f64(v132.val[1], v137.val[1]));
                  v132.val[1] = vmulq_f64(vaddq_f64(v134.val[0], v138.val[0]), vsubq_f64(v134.val[1], v138.val[1]));
                  double v95 = v95 + v132.val[0].f64[0] + v132.val[0].f64[1] + v132.val[1].f64[0] + v132.val[1].f64[1];
                  v105 += 8;
                  v106 -= 4;
                }
                while (v106);
                if (v103 != (v103 & 0x1FFFFFFFFFFFFFFCLL))
                {
                  do
                  {
LABEL_130:
                    double v110 = *v99;
                    v99 += 2;
                    double v95 = v95 + (*v102 + v110) * (v102[1] - v102[3]);
                    v102 += 2;
                  }
                  while (v99 != v96);
                }
                double v95 = v95 * 0.5;
LABEL_120:
                double v44 = v44 + v95;
                v94 += 3;
                if (v94 == (double **)v130) {
                  break;
                }
                continue;
              }
            }
            double v111 = v45 + v44;
            if (v111 != 0.0)
            {
              if ((*(void *)&v111 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                goto LABEL_154;
              }
              double v119 = fabs(v111);
              double v120 = 2.22044605e-16;
              if (v119 >= 1.0) {
                double v120 = v119 * 2.22044605e-16;
              }
              if (v119 > v120)
              {
LABEL_154:
                if (a7 == 1 || v111 > 0.0)
                {
                  v125.i64[0] = a5;
                  sub_1002FA440((void ***)&v125, v128);
                  uint64_t v31 = (char *)__p[1];
                }
                else if (a7 == 2)
                {
                  v127 = &off_100465788;
                  v125.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applicat"
                                         "ions/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iP"
                                         "honeOS18.2.Internal.sdk/usr/local/include/boost/geometry/algorithms/detail/over"
                                         "lay/add_rings.hpp";
                  v125.i64[1] = (uint64_t)"OutputIterator boost::geometry::detail::overlay::add_rings(const SelectionMap &"
                                         ", const Geometry1 &, const Geometry2 &, const RingCollection &, OutputIterator,"
                                         " const Strategy &, add_rings_error_handling) [GeometryOut = boost::geometry::mo"
                                         "del::polygon<boost::geometry::model::d2::point_xy<double>>, SelectionMap = std:"
                                         ":map<boost::geometry::ring_identifier, boost::geometry::detail::overlay::ring_p"
                                         "roperties<boost::geometry::model::d2::point_xy<double>, double>>, Geometry1 = b"
                                         "oost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double>>, G"
                                         "eometry2 = boost::geometry::model::multi_polygon<boost::geometry::model::polygo"
                                         "n<boost::geometry::model::d2::point_xy<double>>>, RingCollection = std::deque<b"
                                         "oost::geometry::model::ring<boost::geometry::model::d2::point_xy<double>>>, Out"
                                         "putIterator = boost::geometry::range::back_insert_iterator<boost::geometry::mod"
                                         "el::multi_polygon<boost::geometry::model::polygon<boost::geometry::model::d2::p"
                                         "oint_xy<double>>>>, Strategy = boost::geometry::strategies::relate::cartesian<>]";
                  uint64_t v126 = 157;
                  sub_1002FA528((uint64_t)&v127, &v125);
                }
              }
            }
            goto LABEL_133;
          }
          unint64_t v47 = v29 - 32;
          if (v47 >= 0x30)
          {
            uint64_t v86 = (v47 >> 4) + 1;
            uint64_t v87 = 16 * (v86 & 0x1FFFFFFFFFFFFFFCLL);
            uint64_t v46 = (double *)((char *)v46 + v87);
            double v48 = (double *)((char *)v128[0] + v87);
            uint64_t v88 = (const double *)((char *)v128[0] + 32);
            uint64_t v89 = v86 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              unint64_t v90 = v88 - 4;
              float64x2x2_t v131 = vld2q_f64(v90);
              float64x2x2_t v133 = vld2q_f64(v88);
              unint64_t v91 = v88 - 2;
              unint64_t v92 = v88 + 2;
              float64x2x2_t v135 = vld2q_f64(v91);
              float64x2x2_t v136 = vld2q_f64(v92);
              v131.val[0] = vmulq_f64(vaddq_f64(v131.val[0], v135.val[0]), vsubq_f64(v131.val[1], v135.val[1]));
              v131.val[1] = vmulq_f64(vaddq_f64(v133.val[0], v136.val[0]), vsubq_f64(v133.val[1], v136.val[1]));
              double v45 = v45 + v131.val[0].f64[0] + v131.val[0].f64[1] + v131.val[1].f64[0] + v131.val[1].f64[1];
              v88 += 8;
              v89 -= 4;
            }
            while (v89);
            if (v86 == (v86 & 0x1FFFFFFFFFFFFFFCLL)) {
              goto LABEL_116;
            }
          }
          else
          {
            double v48 = (double *)v128[0];
          }
          do
          {
            double v93 = *v46;
            v46 += 2;
            double v45 = v45 + (*v48 + v93) * (v48[1] - v48[3]);
            v48 += 2;
          }
          while (v46 != v128[1]);
LABEL_116:
          double v45 = v45 * 0.5;
          goto LABEL_117;
        }
      }
LABEL_22:
      sub_1002C43FC(v128, *(char **)v17, *(char **)(v17 + 8), (uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 4);
      goto LABEL_23;
    }
    unint64_t v19 = a4[4];
    uint64_t v20 = a4[1];
    long long v21 = (void *)(v20 + 8 * (v19 / 0xAA));
    if (a4[2] == v20)
    {
      uint64_t v17 = 0;
      if (!v13)
      {
LABEL_21:
        if (v128 == (void **)v17) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v17 = *v21 + 24 * (v19 % 0xAA);
      if (!v13) {
        goto LABEL_21;
      }
    }
    uint64_t v121 = v13 - 0x5555555555555555 * ((v17 - *v21) >> 3);
    if (v121 < 1)
    {
      uint64_t v17 = v21[-((169 - v121) / 0xAAuLL)] + 24 * (170 * ((169 - v121) / 0xAAuLL) - (169 - v121)) + 4056;
      if (v128 == (void **)v17) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v17 = v21[v121 / 0xAAuLL] + 24 * (v121 % 0xAAuLL);
      if (v128 == (void **)v17) {
        goto LABEL_23;
      }
    }
    goto LABEL_22;
  }
  return a5;
}

void sub_1002C8348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1002C2BDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002C835C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::exception a16, char a17)
{
}

void sub_1002C8378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1002C2BDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002C838C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1002C2BDC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002C83A0(int a1, uint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  long long __p = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v16 = *(double **)a2;
  uint64_t v17 = *(double **)(a2 + 8);
  if ((unint64_t)((char *)v17 - (char *)v16) >= 0x20)
  {
    *(void *)&long long v38 = 0;
    *((void *)&v38 + 1) = -1;
    uint64_t v39 = -1;
    sub_1002C8640(&v48, v16, v17, a6, a5, &v38, 0xAuLL);
  }
  int v33 = a1;
  int v34 = a3;
  unint64_t v19 = *(double ***)(a2 + 24);
  uint64_t v18 = *(double ***)(a2 + 32);
  if (v19 != v18)
  {
    uint64_t v20 = 0;
    do
    {
      long long v21 = *v19;
      long long v22 = v19[1];
      if ((unint64_t)((char *)v22 - (char *)*v19) >= 0x20)
      {
        long long v38 = xmmword_1003E6BE0;
        uint64_t v39 = v20;
        sub_1002C8640(&v48, v21, v22, a6, a5, &v38, 0xAuLL);
        uint64_t v18 = *(double ***)(a2 + 32);
      }
      ++v20;
      v19 += 3;
    }
    while (v19 != v18);
  }
  uint64_t v32 = a7;
  uint64_t v35 = a8;
  uint64_t v46 = 0;
  uint64_t v23 = *a4;
  if (*a4 != a4[1])
  {
    uint64_t v24 = 0;
    do
    {
      BOOL v25 = *(double **)v23;
      uint64_t v26 = *(double **)(v23 + 8);
      if ((unint64_t)v26 - *(void *)v23 >= 0x20)
      {
        *(void *)&long long v38 = 1;
        *((void *)&v38 + 1) = v24;
        uint64_t v39 = -1;
        sub_1002C8640(&__p, v25, v26, a6, a5, &v38, 0xAuLL);
      }
      BOOL v28 = *(double ***)(v23 + 24);
      unint64_t v27 = *(double ***)(v23 + 32);
      if (v28 != v27)
      {
        uint64_t v29 = 0;
        do
        {
          unint64_t v30 = *v28;
          uint64_t v31 = v28[1];
          if ((unint64_t)((char *)v31 - (char *)*v28) >= 0x20)
          {
            *(void *)&long long v38 = 1;
            *((void *)&v38 + 1) = v24;
            uint64_t v39 = v29;
            sub_1002C8640(&__p, v30, v31, a6, a5, &v38, 0xAuLL);
            unint64_t v27 = *(double ***)(v23 + 32);
          }
          ++v29;
          v28 += 3;
        }
        while (v28 != v27);
      }
      v23 += 48;
      ++v24;
    }
    while (v23 != a4[1]);
  }
  LODWORD(v38) = v33;
  *((void *)&v38 + 1) = a2;
  LODWORD(v39) = v34;
  double v40 = a4;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v43 = v32;
  uint64_t v44 = v35;
  uint64_t v36 = a5;
  uint64_t v37 = a5;
  sub_1002C8E78((uint64_t *)&v48, (uint64_t *)&__p, (uint64_t)&v38, (uint64_t)&v37, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v36, 0x10uLL);
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
  if (v48)
  {
    uint64_t v49 = v48;
    operator delete(v48);
  }
}

void sub_1002C85F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v27 = *(void **)(v25 - 112);
    if (!v27) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v27 = *(void **)(v25 - 112);
    if (!v27) {
      goto LABEL_3;
    }
  }
  *(void *)(v25 - 104) = v27;
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

void sub_1002C8640(void **a1, double *a2, double *a3, uint64_t a4, uint64_t a5, long long *a6, unint64_t a7)
{
  uint64_t v7 = (char *)a3 - (char *)a2;
  if (a3 == a2) {
    return;
  }
  unint64_t v9 = a1;
  *((void *)&v125 + 1) = -1;
  uint64_t v126 = -1;
  *(void *)&long long v125 = -1;
  unint64_t v12 = 0xEEEEEEEEEEEEEEEFLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  double v13 = (double)*(uint64_t *)(a4 + 24) + (a2[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v13 >= 0.0) {
    double v14 = 0.5;
  }
  else {
    double v14 = -0.5;
  }
  double v15 = v13 + v14;
  sub_1002C5028(v13 + v14);
  uint64_t v105 = a4;
  double v16 = (double)*(uint64_t *)(a4 + 16) + (*a2 - *(double *)a4) * *(double *)(a4 + 32);
  if (v16 >= 0.0) {
    double v17 = 0.5;
  }
  else {
    double v17 = -0.5;
  }
  double v18 = v16 + v17;
  sub_1002C5028(v16 + v17);
  unint64_t v19 = a2 + 2;
  if (a2 + 2 == a3)
  {
    long long v81 = v9[1];
    goto LABEL_124;
  }
  uint64_t v20 = a2;
  unint64_t v98 = v12;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unsigned int v24 = 0;
  unint64_t v25 = 0;
  uint64_t v112 = 0;
  char v122 = 0;
  uint64_t v107 = v7 >> 4;
  double v26 = ceil(v18);
  double v27 = floor(v18);
  if (v18 >= 0.0) {
    double v26 = v27;
  }
  uint64_t v28 = (uint64_t)v26;
  double v29 = ceil(v15);
  double v30 = floor(v15);
  if (v15 >= 0.0) {
    double v29 = v30;
  }
  uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  uint64_t v109 = a3;
  uint64_t v110 = -1;
  char v116 = 1;
  int v117 = 0;
  uint64_t v32 = (uint64_t)v29;
  uint64_t v33 = -1;
  uint64_t v111 = -1;
  uint64_t v114 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v34 = 0x8000000000000000;
  uint64_t v35 = v105;
  BOOL v99 = v9;
  do
  {
    uint64_t v113 = v33;
    uint64_t v118 = v23;
    unsigned int v120 = v24;
    uint64_t v123 = v21;
    double v40 = v19;
    double v41 = (double)*(uint64_t *)(v35 + 24) + (v20[3] - *(double *)(v35 + 8)) * *(double *)(v35 + 32);
    if (v41 >= 0.0) {
      double v42 = 0.5;
    }
    else {
      double v42 = -0.5;
    }
    double v43 = v41 + v42;
    sub_1002C5028(v41 + v42);
    double v44 = ceil(v43);
    double v45 = floor(v43);
    if (v43 >= 0.0) {
      double v44 = v45;
    }
    uint64_t v46 = (uint64_t)v44;
    long long v124 = v40;
    double v47 = (double)*(uint64_t *)(v35 + 16) + (*v40 - *(double *)v35) * *(double *)(v35 + 32);
    if (v47 >= 0.0) {
      double v48 = 0.5;
    }
    else {
      double v48 = -0.5;
    }
    double v49 = v47 + v48;
    sub_1002C5028(v47 + v48);
    double v50 = ceil(v49);
    double v51 = floor(v49);
    if (v49 >= 0.0) {
      double v50 = v51;
    }
    uint64_t v52 = (uint64_t)v50;
    if (v28 <= (uint64_t)v50) {
      int v53 = 0;
    }
    else {
      int v53 = -1;
    }
    if (v28 < (uint64_t)v50) {
      int v53 = 1;
    }
    if (v32 <= v46) {
      unsigned int v54 = 0;
    }
    else {
      unsigned int v54 = -1;
    }
    if (v32 < v46) {
      unsigned int v54 = 1;
    }
    BOOL v55 = v28 == v52 && v32 == v46;
    if (v55) {
      unsigned int v56 = -99;
    }
    else {
      unsigned int v56 = v54;
    }
    if (v55) {
      int v57 = -99;
    }
    else {
      int v57 = 0;
    }
    int v58 = v55;
    if (v53) {
      uint64_t v59 = v54;
    }
    else {
      uint64_t v59 = v56;
    }
    if (v53) {
      int v60 = v53;
    }
    else {
      int v60 = v57;
    }
    if (v53) {
      int v61 = 0;
    }
    else {
      int v61 = v58;
    }
    if (v25)
    {
      unsigned int v24 = v120;
      uint64_t v23 = v118;
      if (v60 == v120 && v59 == v118 && v25 <= a7)
      {
        uint64_t v32 = v114;
        uint64_t v28 = v115;
        uint64_t v20 = v124;
        uint64_t v37 = v123;
        goto LABEL_18;
      }
      uint64_t v64 = (char *)v9[1];
      if (v122)
      {
        unint64_t v65 = (unint64_t)v9[2];
        if ((unint64_t)v64 < v65)
        {
LABEL_81:
          *(void *)uint64_t v64 = v120 | (unint64_t)(v118 << 32);
          *(_OWORD *)(v64 + 8) = v125;
          *((void *)v64 + 3) = v126;
          *((void *)v64 + 4) = v115;
          *((void *)v64 + 5) = v114;
          *((void *)v64 + 6) = v34;
          *((void *)v64 + 7) = v31;
          *((void *)v64 + 8) = v110;
          *((void *)v64 + 9) = v113;
          *((void *)v64 + 10) = v25;
          *((void *)v64 + 11) = v112;
          v64[96] = v122;
          *((void *)v64 + 13) = v111;
          v64[112] = v117;
          uint64_t v66 = v64 + 120;
          v64[113] = 0;
LABEL_100:
          int v36 = 0;
          v9[1] = v66;
          uint64_t v35 = v105;
          goto LABEL_15;
        }
      }
      else
      {
        unint64_t v98 = 0xEEEEEEEEEEEEEEEFLL * ((v64 - (unsigned char *)*v9) >> 3);
        unint64_t v65 = (unint64_t)v9[2];
        if ((unint64_t)v64 < v65) {
          goto LABEL_81;
        }
      }
      uint64_t v104 = v22;
      double v67 = (char *)*v9;
      unint64_t v68 = 0xEEEEEEEEEEEEEEEFLL * ((v64 - (unsigned char *)*v9) >> 3);
      unint64_t v69 = v68 + 1;
      if (v68 + 1 > 0x222222222222222) {
        sub_1000A9108();
      }
      unint64_t v70 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v65 - (void)v67) >> 3);
      if (2 * v70 > v69) {
        unint64_t v69 = 2 * v70;
      }
      if (v70 >= 0x111111111111111) {
        unint64_t v69 = 0x222222222222222;
      }
      unsigned int v102 = v59;
      int v103 = v61;
      int v101 = v60;
      unint64_t v100 = v69;
      if (v69)
      {
        if (v69 > 0x222222222222222) {
          goto LABEL_129;
        }
        uint64_t v71 = (char *)operator new(120 * v69);
        unsigned int v24 = v120;
        uint64_t v23 = v118;
      }
      else
      {
        uint64_t v71 = 0;
      }
      uint64_t v72 = &v71[120 * v68];
      *(void *)uint64_t v72 = v24 | (unint64_t)(v23 << 32);
      *(_OWORD *)(v72 + 8) = v125;
      *((void *)v72 + 3) = v126;
      *((void *)v72 + 4) = v115;
      *((void *)v72 + 5) = v114;
      *((void *)v72 + 6) = v34;
      *((void *)v72 + 7) = v31;
      *((void *)v72 + 8) = v110;
      *((void *)v72 + 9) = v113;
      *((void *)v72 + 10) = v25;
      *((void *)v72 + 11) = v112;
      v72[96] = v122;
      *((void *)v72 + 13) = v111;
      v72[112] = v117;
      v72[113] = 0;
      uint64_t v73 = v72;
      if (v64 == v67)
      {
        unint64_t v9 = v99;
      }
      else
      {
        unint64_t v9 = v99;
        do
        {
          long long v74 = *(_OWORD *)(v64 - 120);
          long long v75 = *(_OWORD *)(v64 - 104);
          long long v76 = *(_OWORD *)(v64 - 88);
          *(_OWORD *)(v73 - 72) = *(_OWORD *)(v64 - 72);
          *(_OWORD *)(v73 - 88) = v76;
          *(_OWORD *)(v73 - 104) = v75;
          *(_OWORD *)(v73 - 120) = v74;
          long long v77 = *(_OWORD *)(v64 - 56);
          long long v78 = *(_OWORD *)(v64 - 40);
          long long v79 = *(_OWORD *)(v64 - 24);
          *((_WORD *)v73 - 4) = *((_WORD *)v64 - 4);
          *(_OWORD *)(v73 - 24) = v79;
          *(_OWORD *)(v73 - 40) = v78;
          *(_OWORD *)(v73 - 56) = v77;
          v73 -= 120;
          v64 -= 120;
        }
        while (v64 != v67);
        uint64_t v64 = (char *)*v99;
      }
      uint64_t v66 = v72 + 120;
      *unint64_t v9 = v73;
      v9[1] = v72 + 120;
      _DWORD v9[2] = &v71[120 * v100];
      uint64_t v22 = v104;
      if (v64) {
        operator delete(v64);
      }
      uint64_t v59 = v102;
      int v61 = v103;
      int v60 = v101;
      goto LABEL_100;
    }
    int v36 = v117;
LABEL_15:
    unint64_t v25 = 0;
    long long v125 = *a6;
    if (!(v61 & 1 | ((v116 & 1) == 0))) {
      int v36 = 1;
    }
    v116 &= v61;
    int v117 = v36;
    int64_t v34 = v28;
    int64_t v31 = v32;
    uint64_t v37 = v123;
    uint64_t v126 = *((void *)a6 + 2);
    char v122 = v61;
    uint64_t v111 = v123;
    uint64_t v112 = v107;
    uint64_t v110 = v22;
    unsigned int v24 = v60;
    uint64_t v23 = v59;
    uint64_t v20 = v124;
LABEL_18:
    if (v28 >= v52) {
      uint64_t v38 = v52;
    }
    else {
      uint64_t v38 = v28;
    }
    if (v34 <= v52) {
      int64_t v34 = v52;
    }
    if (v32 >= v46) {
      uint64_t v39 = v46;
    }
    else {
      uint64_t v39 = v32;
    }
    uint64_t v114 = v39;
    uint64_t v115 = v38;
    if (v31 <= v46) {
      int64_t v31 = v46;
    }
    ++v22;
    ++v25;
    uint64_t v21 = v37 + (v61 ^ 1u);
    unint64_t v19 = v20 + 2;
    uint64_t v33 = v22;
    uint64_t v32 = v46;
    uint64_t v28 = v52;
  }
  while (v20 + 2 != v109);
  uint64_t v80 = v22;
  long long v81 = v9[1];
  if (v25)
  {
    unint64_t v12 = v98;
    if (v122)
    {
      unint64_t v82 = (unint64_t)v9[2];
      if ((unint64_t)v81 < v82) {
        goto LABEL_104;
      }
LABEL_108:
      uint64_t v84 = *v9;
      unint64_t v85 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v81 - (unsigned char *)*v9) >> 3);
      unint64_t v86 = v85 + 1;
      if (v85 + 1 > 0x222222222222222) {
        sub_1000A9108();
      }
      unint64_t v87 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v82 - (void)v84) >> 3);
      if (2 * v87 > v86) {
        unint64_t v86 = 2 * v87;
      }
      if (v87 >= 0x111111111111111) {
        unint64_t v88 = 0x222222222222222;
      }
      else {
        unint64_t v88 = v86;
      }
      if (v88)
      {
        uint64_t v119 = v23;
        unsigned int v121 = v24;
        if (v88 > 0x222222222222222) {
LABEL_129:
        }
          sub_1000A6A10();
        uint64_t v89 = (char *)operator new(120 * v88);
        unsigned int v24 = v121;
        uint64_t v23 = v119;
      }
      else
      {
        uint64_t v89 = 0;
      }
      unint64_t v90 = &v89[120 * v85];
      *(void *)unint64_t v90 = v24 | (unint64_t)(v23 << 32);
      *(_OWORD *)(v90 + 8) = v125;
      *((void *)v90 + 3) = v126;
      *((void *)v90 + 4) = v115;
      *((void *)v90 + 5) = v114;
      *((void *)v90 + 6) = v34;
      *((void *)v90 + 7) = v31;
      *((void *)v90 + 8) = v110;
      *((void *)v90 + 9) = v80;
      *((void *)v90 + 10) = v25;
      *((void *)v90 + 11) = v112;
      v90[96] = v122;
      *((void *)v90 + 13) = v111;
      v90[112] = v117;
      long long v83 = v90 + 120;
      v90[113] = 0;
      if (v81 != v84)
      {
        do
        {
          long long v91 = *(_OWORD *)(v81 - 15);
          long long v92 = *(_OWORD *)(v81 - 13);
          long long v93 = *(_OWORD *)(v81 - 11);
          *(_OWORD *)(v90 - 72) = *(_OWORD *)(v81 - 9);
          *(_OWORD *)(v90 - 88) = v93;
          *(_OWORD *)(v90 - 104) = v92;
          *(_OWORD *)(v90 - 120) = v91;
          long long v94 = *(_OWORD *)(v81 - 7);
          long long v95 = *(_OWORD *)(v81 - 5);
          long long v96 = *(_OWORD *)(v81 - 3);
          *((_WORD *)v90 - 4) = *((_WORD *)v81 - 4);
          *(_OWORD *)(v90 - 24) = v96;
          *(_OWORD *)(v90 - 40) = v95;
          *(_OWORD *)(v90 - 56) = v94;
          v90 -= 120;
          v81 -= 15;
        }
        while (v81 != v84);
        long long v81 = *v9;
      }
      *unint64_t v9 = v90;
      v9[1] = v83;
      _DWORD v9[2] = &v89[120 * v88];
      if (v81) {
        operator delete(v81);
      }
    }
    else
    {
      unint64_t v12 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v81 - (unsigned char *)*v9) >> 3);
      unint64_t v82 = (unint64_t)v9[2];
      if ((unint64_t)v81 >= v82) {
        goto LABEL_108;
      }
LABEL_104:
      *long long v81 = v24 | (unint64_t)(v23 << 32);
      *(_OWORD *)(v81 + 1) = v125;
      v81[3] = v126;
      v81[4] = v38;
      v81[5] = v114;
      v81[6] = v34;
      v81[7] = v31;
      v81[8] = v110;
      v81[9] = v80;
      v81[10] = v25;
      v81[11] = v112;
      *((unsigned char *)v81 + 96) = v122;
      v81[13] = v111;
      *((unsigned char *)v81 + 112) = v117;
      long long v83 = v81 + 15;
      *((unsigned char *)v81 + 113) = 0;
    }
    v9[1] = v83;
    long long v81 = v83;
  }
  else
  {
    unint64_t v12 = v98;
  }
LABEL_124:
  float64x2x2_t v97 = *v9;
  if (v12 < 0xEEEEEEEEEEEEEEEFLL * (((char *)v81 - (unsigned char *)*v9) >> 3) && !v97[120 * v12 + 96]) {
    v97[120 * v12 + 113] = 1;
  }
}

uint64_t sub_1002C8E78(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((v11 - *a1) >> 3) <= a8 || 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3) <= a8)
  {
    if (v12 != v11)
    {
      uint64_t v19 = a2[1];
      if (*a2 != v19)
      {
        do
        {
          uint64_t v20 = *a2;
          if (*a2 != v19)
          {
            while (1)
            {
              if (*(void *)(v12 + 48) >= *(void *)(v20 + 32)
                && *(void *)(v12 + 32) <= *(void *)(v20 + 48)
                && *(void *)(v12 + 56) >= *(void *)(v20 + 40)
                && *(void *)(v12 + 40) <= *(void *)(v20 + 56))
              {
                if (!sub_1002CB520(*(_DWORD *)a3, *(double ***)(a3 + 8), (int *)v12, *(_DWORD *)(a3 + 16), *(void **)(a3 + 24), (int *)v20, 0, 0, *(void *)(a3 + 32), *(void *)(a3 + 40), *(void **)(a3 + 48)))return 0; {
                uint64_t v19 = a2[1];
                }
              }
              v20 += 120;
              if (v20 == v19)
              {
                uint64_t v11 = a1[1];
                break;
              }
            }
          }
          v12 += 120;
        }
        while (v12 != v11);
      }
    }
    return 1;
  }
  else
  {
    double v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    long long __p = 0;
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    v23[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v23[1] = vdupq_n_s64(0x8000000000000000);
    sub_1002C90BC(a1, (uint64_t *)v23, (char **)&v27);
    sub_1002C90BC(a2, (uint64_t *)v23, (char **)&__p);
    uint64_t v18 = sub_1002C9354(v23, &v27, &__p, 0, a8, a3, a4, a5, a6, a7, (uint64_t)&v30);
    if (__p)
    {
      unint64_t v25 = __p;
      operator delete(__p);
    }
    if (v27)
    {
      uint64_t v28 = v27;
      operator delete(v27);
    }
  }
  return v18;
}

void sub_1002C9080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v23 = a21;
    if (!a21) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v23 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_1002C90BC(void *a1, uint64_t *a2, char **a3)
{
  for (uint64_t i = (void *)*a1; i != (void *)a1[1]; i += 15)
  {
    uint64_t v8 = i[4];
    uint64_t v9 = *a2;
    if (v8 < *a2)
    {
      *a2 = v8;
      uint64_t v9 = v8;
      uint64_t v10 = a2[2];
      if (v8 <= v10)
      {
LABEL_7:
        uint64_t v11 = i[5];
        uint64_t v12 = a2[1];
        if (v11 >= v12) {
          goto LABEL_8;
        }
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v10 = a2[2];
      if (v8 <= v10) {
        goto LABEL_7;
      }
    }
    a2[2] = v8;
    uint64_t v10 = v8;
    uint64_t v11 = i[5];
    uint64_t v12 = a2[1];
    if (v11 >= v12)
    {
LABEL_8:
      uint64_t v13 = a2[3];
      if (v11 <= v13) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
LABEL_17:
    a2[1] = v11;
    uint64_t v12 = v11;
    uint64_t v13 = a2[3];
    if (v11 <= v13)
    {
LABEL_9:
      uint64_t v14 = i[6];
      if (v14 >= v9) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
LABEL_18:
    a2[3] = v11;
    uint64_t v13 = v11;
    uint64_t v14 = i[6];
    if (v14 >= v9)
    {
LABEL_10:
      if (v14 <= v10) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }
LABEL_19:
    *a2 = v14;
    if (v14 <= v10)
    {
LABEL_11:
      uint64_t v15 = i[7];
      if (v15 >= v12) {
        goto LABEL_12;
      }
      goto LABEL_21;
    }
LABEL_20:
    a2[2] = v14;
    uint64_t v15 = i[7];
    if (v15 >= v12)
    {
LABEL_12:
      if (v15 <= v13) {
        goto LABEL_13;
      }
      goto LABEL_22;
    }
LABEL_21:
    a2[1] = v15;
    if (v15 <= v13)
    {
LABEL_13:
      double v17 = a3[1];
      unint64_t v16 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v16) {
        goto LABEL_23;
      }
      goto LABEL_3;
    }
LABEL_22:
    a2[3] = v15;
    double v17 = a3[1];
    unint64_t v16 = (unint64_t)a3[2];
    if ((unint64_t)v17 >= v16)
    {
LABEL_23:
      uint64_t v18 = *a3;
      uint64_t v19 = v17 - *a3;
      uint64_t v20 = v19 >> 3;
      unint64_t v21 = (v19 >> 3) + 1;
      if (v21 >> 61) {
        sub_1000A9108();
      }
      uint64_t v22 = v16 - (void)v18;
      if (v22 >> 2 > v21) {
        unint64_t v21 = v22 >> 2;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 61) {
          sub_1000A6A10();
        }
        unsigned int v24 = operator new(8 * v23);
        unint64_t v25 = &v24[8 * v20];
        *(void *)unint64_t v25 = i;
        uint64_t v7 = (uint64_t)(v25 + 8);
        if (v17 == v18) {
          goto LABEL_41;
        }
LABEL_34:
        unint64_t v26 = v17 - 8 - v18;
        if (v26 < 0x58) {
          goto LABEL_48;
        }
        if ((unint64_t)(v17 - &v24[v19]) < 0x20) {
          goto LABEL_48;
        }
        uint64_t v27 = (v26 >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v29 = &v17[-v28];
        v25 -= v28;
        char v30 = &v24[8 * v20 - 16];
        int64_t v31 = v17 - 16;
        uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *char v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        double v17 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            uint64_t v34 = *((void *)v17 - 1);
            v17 -= 8;
            *((void *)v25 - 1) = v34;
            v25 -= 8;
          }
          while (v17 != v18);
        }
        double v17 = *a3;
      }
      else
      {
        unsigned int v24 = 0;
        unint64_t v25 = (char *)(8 * v20);
        *(void *)(8 * v20) = i;
        uint64_t v7 = 8 * v20 + 8;
        if (v17 != v18) {
          goto LABEL_34;
        }
      }
LABEL_41:
      *a3 = v25;
      a3[1] = (char *)v7;
      a3[2] = &v24[8 * v23];
      if (v17) {
        operator delete(v17);
      }
      goto LABEL_4;
    }
LABEL_3:
    *(void *)double v17 = i;
    uint64_t v7 = (uint64_t)(v17 + 8);
LABEL_4:
    a3[1] = (char *)v7;
  }
}

uint64_t sub_1002C9354(void *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = *a1;
  uint64_t v18 = a1[2];
  if ((uint64_t)*a1 >= 0) {
    uint64_t v19 = *a1;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  uint64_t v20 = v19 >> 1;
  long long v22 = *(_OWORD *)a1;
  long long v21 = *((_OWORD *)a1 + 1);
  long long v131 = *(_OWORD *)a1;
  long long v132 = v21;
  if (v18 >= 0) {
    uint64_t v23 = v18;
  }
  else {
    uint64_t v23 = v18 + 1;
  }
  uint64_t v24 = v23 >> 1;
  *((void *)&v130[0] + 1) = *((void *)&v22 + 1);
  v130[1] = v21;
  int v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(void *)&long long v132 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  *(void *)&v130[0] = v132;
  v127 = 0;
  v128 = 0;
  uint64_t v129 = 0;
  long long v124 = 0;
  long long v125 = 0;
  uint64_t v126 = 0;
  unsigned int v121 = 0;
  char v122 = 0;
  uint64_t v123 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v115 = 0;
  char v116 = 0;
  uint64_t v117 = 0;
  long long __p = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  sub_1002CA168(&v131, v130, a2, &v127, (char **)&v124, (char **)&v121);
  sub_1002CA168(&v131, v130, a3, &v118, (char **)&v115, (char **)&__p);
  uint64_t v27 = (char *)v121;
  unint64_t v26 = v122;
  if (v121 == v122) {
    goto LABEL_129;
  }
  uint64_t v29 = (char *)__p;
  uint64_t v28 = v113;
  if (a5 > (v122 - (unsigned char *)v121) >> 3 || a4 > 0x63 || (v113 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v113)
    {
      do
      {
        double v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            uint64_t v45 = *(void *)v27;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v27 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48)
              && *(void *)(v45 + 56) >= *(void *)(v46 + 40)
              && *(void *)(v45 + 40) <= *(void *)(v46 + 56))
            {
              if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v45, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v46, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
              uint64_t v28 = v113;
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          unint64_t v26 = v122;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_66;
  }
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  int64x2_t v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v111 = vdupq_n_s64(0x8000000000000000);
  int64_t v32 = 0x8000000000000000;
  uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v34 = *(void **)v27;
    int64_t v35 = *(void *)(*(void *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        uint64_t v36 = v34[5];
        if (v36 < v30) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v110.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v33 = v35;
      if (v35 <= v32) {
        goto LABEL_15;
      }
    }
    v111.i64[0] = v35;
    int64_t v32 = v35;
    uint64_t v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v110.i64[1] = v36;
      uint64_t v30 = v36;
      if (v36 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      uint64_t v37 = v34[6];
      if (v37 < v33) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
LABEL_25:
    v111.i64[1] = v36;
    int64_t v31 = v36;
    uint64_t v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v110.i64[0] = v37;
      uint64_t v33 = v37;
      if (v37 <= v32) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      uint64_t v38 = v34[7];
      if (v38 >= v30) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_27:
    v111.i64[0] = v37;
    int64_t v32 = v37;
    uint64_t v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
LABEL_20:
    v110.i64[1] = v38;
    uint64_t v30 = v38;
    if (v38 <= v31) {
      goto LABEL_12;
    }
LABEL_29:
    v111.i64[1] = v38;
    int64_t v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v122);
  while (v29 != v113)
  {
    uint64_t v39 = *(void **)v29;
    int64_t v40 = *(void *)(*(void *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        uint64_t v41 = v39[5];
        if (v41 < v30) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v110.i64[0] = *(void *)(*(void *)v29 + 32);
      uint64_t v33 = v40;
      if (v40 <= v32) {
        goto LABEL_34;
      }
    }
    v111.i64[0] = v40;
    int64_t v32 = v40;
    uint64_t v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v110.i64[1] = v41;
      uint64_t v30 = v41;
      if (v41 <= v31) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      uint64_t v42 = v39[6];
      if (v42 < v33) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    v111.i64[1] = v41;
    int64_t v31 = v41;
    uint64_t v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v110.i64[0] = v42;
      uint64_t v33 = v42;
      if (v42 <= v32) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      uint64_t v43 = v39[7];
      if (v43 >= v30) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
LABEL_46:
    v111.i64[0] = v42;
    int64_t v32 = v42;
    uint64_t v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_39:
    v110.i64[1] = v43;
    uint64_t v30 = v43;
    if (v43 <= v31) {
      goto LABEL_30;
    }
LABEL_48:
    v111.i64[1] = v43;
    int64_t v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002CA70C((long long *)v110.i8, &v121, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
    goto LABEL_236;
  }
LABEL_66:
  double v48 = v119;
  if (a5 > (v119 - (unsigned char *)v118) >> 3)
  {
    double v50 = (char *)v121;
    double v49 = v122;
    goto LABEL_69;
  }
  double v50 = (char *)v121;
  double v49 = v122;
  if (a5 <= (v116 - (unsigned char *)v115) >> 3 && a4 <= 0x63 && (v122 - (unsigned char *)v121) >> 3 >= a5)
  {
    int64x2_t v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    int64x2_t v111 = vdupq_n_s64(0x8000000000000000);
    if (v121 != v122)
    {
      uint64_t v60 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v61 = 0x8000000000000000;
      int64_t v62 = 0x8000000000000000;
      uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v64 = *(void **)v50;
        int64_t v65 = *(void *)(*(void *)v50 + 32);
        if (v65 >= v63)
        {
          if (v65 <= v62)
          {
LABEL_110:
            uint64_t v66 = v64[5];
            if (v66 < v60) {
              goto LABEL_111;
            }
            goto LABEL_119;
          }
        }
        else
        {
          v110.i64[0] = *(void *)(*(void *)v50 + 32);
          uint64_t v63 = v65;
          if (v65 <= v62) {
            goto LABEL_110;
          }
        }
        v111.i64[0] = v65;
        int64_t v62 = v65;
        uint64_t v66 = v64[5];
        if (v66 < v60)
        {
LABEL_111:
          v110.i64[1] = v66;
          uint64_t v60 = v66;
          if (v66 <= v61) {
            goto LABEL_112;
          }
          goto LABEL_120;
        }
LABEL_119:
        if (v66 <= v61)
        {
LABEL_112:
          uint64_t v67 = v64[6];
          if (v67 < v63) {
            goto LABEL_113;
          }
          goto LABEL_121;
        }
LABEL_120:
        v111.i64[1] = v66;
        int64_t v61 = v66;
        uint64_t v67 = v64[6];
        if (v67 < v63)
        {
LABEL_113:
          v110.i64[0] = v67;
          uint64_t v63 = v67;
          if (v67 <= v62) {
            goto LABEL_114;
          }
          goto LABEL_122;
        }
LABEL_121:
        if (v67 <= v62)
        {
LABEL_114:
          uint64_t v68 = v64[7];
          if (v68 < v60) {
            goto LABEL_115;
          }
          goto LABEL_123;
        }
LABEL_122:
        v111.i64[0] = v67;
        int64_t v62 = v67;
        uint64_t v68 = v64[7];
        if (v68 < v60)
        {
LABEL_115:
          v110.i64[1] = v68;
          uint64_t v60 = v68;
          if (v68 > v61) {
            goto LABEL_124;
          }
          goto LABEL_107;
        }
LABEL_123:
        if (v68 > v61)
        {
LABEL_124:
          v111.i64[1] = v68;
          int64_t v61 = v68;
        }
LABEL_107:
        v50 += 8;
      }
      while (v50 != v122);
    }
    if (sub_1002CA70C((long long *)v110.i8, &v121, &v118, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002CA70C((long long *)v110.i8, &v121, &v115, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_129;
    }
LABEL_236:
    uint64_t v103 = 0;
    uint64_t v104 = (char *)__p;
    if (!__p) {
      goto LABEL_238;
    }
LABEL_237:
    uint64_t v113 = v104;
    operator delete(v104);
    goto LABEL_238;
  }
LABEL_69:
  if (v118 == v119 || v50 == v49)
  {
    if (v50 == v49) {
      goto LABEL_129;
    }
  }
  else
  {
    do
    {
      uint64_t v52 = (char *)v118;
      if (v118 != v48)
      {
        do
        {
          uint64_t v53 = *(void *)v50;
          uint64_t v54 = *(void *)v52;
          if (*(void *)(*(void *)v50 + 48) >= *(void *)(*(void *)v52 + 32)
            && *(void *)(v53 + 32) <= *(void *)(v54 + 48)
            && *(void *)(v53 + 56) >= *(void *)(v54 + 40)
            && *(void *)(v53 + 40) <= *(void *)(v54 + 56))
          {
            if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v53, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v54, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
            double v48 = v119;
            }
          }
          v52 += 8;
        }
        while (v52 != v48);
        double v49 = v122;
      }
      v50 += 8;
    }
    while (v50 != v49);
    double v50 = (char *)v121;
    if (v121 == v49) {
      goto LABEL_129;
    }
  }
  double v51 = v116;
  if (v115 != v116)
  {
    do
    {
      unsigned int v56 = (char *)v115;
      if (v115 != v51)
      {
        do
        {
          uint64_t v57 = *(void *)v50;
          uint64_t v58 = *(void *)v56;
          if (*(void *)(*(void *)v50 + 48) >= *(void *)(*(void *)v56 + 32)
            && *(void *)(v57 + 32) <= *(void *)(v58 + 48)
            && *(void *)(v57 + 56) >= *(void *)(v58 + 40)
            && *(void *)(v57 + 40) <= *(void *)(v58 + 56))
          {
            if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v57, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v58, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
            double v51 = v116;
            }
          }
          v56 += 8;
        }
        while (v56 != v51);
        double v49 = v122;
      }
      v50 += 8;
    }
    while (v50 != v49);
  }
LABEL_129:
  unint64_t v70 = (char *)__p;
  unint64_t v69 = v113;
  if (__p == v113) {
    goto LABEL_174;
  }
  uint64_t v72 = (char *)v127;
  uint64_t v71 = v128;
  if (a5 > (v128 - (unsigned char *)v127) >> 3
    || a5 > (v125 - (unsigned char *)v124) >> 3
    || a4 > 0x63
    || (v113 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v72 != v71)
    {
      unint64_t v82 = (char *)__p;
      if (__p != v69)
      {
        do
        {
          uint64_t v83 = *(void *)v72;
          uint64_t v84 = *(void *)v82;
          if (*(void *)(*(void *)v72 + 48) >= *(void *)(*(void *)v82 + 32)
            && *(void *)(v83 + 32) <= *(void *)(v84 + 48)
            && *(void *)(v83 + 56) >= *(void *)(v84 + 40)
            && *(void *)(v83 + 40) <= *(void *)(v84 + 56))
          {
            if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v83, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v84, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
            unint64_t v69 = v113;
            }
          }
          v82 += 8;
        }
        while (v82 != v69);
        uint64_t v71 = v128;
      }
      v72 += 8;
    }
    unint64_t v87 = (char *)v124;
    unint64_t v86 = v125;
    if (v124 != v125 && __p != v69)
    {
      do
      {
        long long v91 = (char *)__p;
        if (__p != v69)
        {
          do
          {
            uint64_t v92 = *(void *)v87;
            uint64_t v93 = *(void *)v91;
            if (*(void *)(*(void *)v87 + 48) >= *(void *)(*(void *)v91 + 32)
              && *(void *)(v92 + 32) <= *(void *)(v93 + 48)
              && *(void *)(v92 + 56) >= *(void *)(v93 + 40)
              && *(void *)(v92 + 40) <= *(void *)(v93 + 56))
            {
              if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v92, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v93, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
              unint64_t v69 = v113;
              }
            }
            v91 += 8;
          }
          while (v91 != v69);
          unint64_t v86 = v125;
        }
        v87 += 8;
      }
      while (v87 != v86);
    }
    goto LABEL_174;
  }
  uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v74 = 0x8000000000000000;
  int64x2_t v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v111 = vdupq_n_s64(0x8000000000000000);
  int64_t v75 = 0x8000000000000000;
  uint64_t v76 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    long long v77 = *(void **)v70;
    int64_t v78 = *(void *)(*(void *)v70 + 32);
    if (v78 >= v76)
    {
      if (v78 > v75) {
        goto LABEL_146;
      }
LABEL_138:
      uint64_t v79 = v77[5];
      if (v79 < v73) {
        goto LABEL_139;
      }
LABEL_147:
      if (v79 > v74) {
        goto LABEL_148;
      }
LABEL_140:
      uint64_t v80 = v77[6];
      if (v80 < v76) {
        goto LABEL_141;
      }
LABEL_149:
      if (v80 > v75) {
        goto LABEL_150;
      }
LABEL_142:
      int64_t v81 = v77[7];
      if (v81 < v73) {
        goto LABEL_143;
      }
LABEL_151:
      if (v81 > v74)
      {
LABEL_152:
        v111.i64[1] = v81;
        int64_t v74 = v81;
      }
    }
    else
    {
      v110.i64[0] = *(void *)(*(void *)v70 + 32);
      uint64_t v76 = v78;
      if (v78 <= v75) {
        goto LABEL_138;
      }
LABEL_146:
      v111.i64[0] = v78;
      int64_t v75 = v78;
      uint64_t v79 = v77[5];
      if (v79 >= v73) {
        goto LABEL_147;
      }
LABEL_139:
      v110.i64[1] = v79;
      uint64_t v73 = v79;
      if (v79 <= v74) {
        goto LABEL_140;
      }
LABEL_148:
      v111.i64[1] = v79;
      int64_t v74 = v79;
      uint64_t v80 = v77[6];
      if (v80 >= v76) {
        goto LABEL_149;
      }
LABEL_141:
      v110.i64[0] = v80;
      uint64_t v76 = v80;
      if (v80 <= v75) {
        goto LABEL_142;
      }
LABEL_150:
      v111.i64[0] = v80;
      int64_t v75 = v80;
      int64_t v81 = v77[7];
      if (v81 >= v73) {
        goto LABEL_151;
      }
LABEL_143:
      v110.i64[1] = v81;
      uint64_t v73 = v81;
      if (v81 > v74) {
        goto LABEL_152;
      }
    }
    v70 += 8;
    if (v70 != v113) {
      continue;
    }
    break;
  }
  if (!sub_1002CA70C((long long *)v110.i8, &v127, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002CA70C((long long *)v110.i8, &v124, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
LABEL_174:
  unint64_t v90 = (char *)v127;
  uint64_t v89 = v128;
  if (a5 > (v128 - (unsigned char *)v127) >> 3 || a4 > 0x63 || (v119 - (unsigned char *)v118) >> 3 < a5)
  {
    if (v127 != v128)
    {
      long long v95 = v119;
      if (v118 != v119)
      {
        do
        {
          unint64_t v98 = (char *)v118;
          if (v118 != v95)
          {
            do
            {
              uint64_t v99 = *(void *)v90;
              uint64_t v100 = *(void *)v98;
              if (*(void *)(*(void *)v90 + 48) >= *(void *)(*(void *)v98 + 32)
                && *(void *)(v99 + 32) <= *(void *)(v100 + 48)
                && *(void *)(v99 + 56) >= *(void *)(v100 + 40)
                && *(void *)(v99 + 40) <= *(void *)(v100 + 56))
              {
                if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v99, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v100, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
                long long v95 = v119;
                }
              }
              v98 += 8;
            }
            while (v98 != v95);
            uint64_t v89 = v128;
          }
          v90 += 8;
        }
        while (v90 != v89);
      }
    }
  }
  else if ((sub_1002CA70C(&v131, &v127, &v118, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
  float64x2x2_t v97 = (char *)v124;
  long long v96 = v125;
  if (a5 > (v125 - (unsigned char *)v124) >> 3 || a4 > 0x63 || (v116 - (unsigned char *)v115) >> 3 < a5)
  {
    if (v124 != v125)
    {
      unsigned int v102 = v116;
      if (v115 != v116)
      {
        do
        {
          uint64_t v105 = (char *)v115;
          if (v115 != v102)
          {
            do
            {
              uint64_t v106 = *(void *)v97;
              uint64_t v107 = *(void *)v105;
              if (*(void *)(*(void *)v97 + 48) >= *(void *)(*(void *)v105 + 32)
                && *(void *)(v106 + 32) <= *(void *)(v107 + 48)
                && *(void *)(v106 + 56) >= *(void *)(v107 + 40)
                && *(void *)(v106 + 40) <= *(void *)(v107 + 56))
              {
                if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v106, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v107, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
                unsigned int v102 = v116;
                }
              }
              v105 += 8;
            }
            while (v105 != v102);
            long long v96 = v125;
          }
          v97 += 8;
        }
        while (v97 != v96);
      }
    }
  }
  else if ((sub_1002CA70C(v130, &v124, &v115, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
  uint64_t v103 = 1;
  uint64_t v104 = (char *)__p;
  if (__p) {
    goto LABEL_237;
  }
LABEL_238:
  if (v115)
  {
    char v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118)
  {
    uint64_t v119 = (char *)v118;
    operator delete(v118);
  }
  if (v121)
  {
    char v122 = (char *)v121;
    operator delete(v121);
  }
  if (v124)
  {
    long long v125 = (char *)v124;
    operator delete(v124);
  }
  if (v127)
  {
    v128 = (char *)v127;
    operator delete(v127);
  }
  return v103;
}

void sub_1002CA0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v34 = a20;
    if (!a20)
    {
LABEL_3:
      int64_t v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  int64_t v35 = a23;
  if (!a23)
  {
LABEL_4:
    uint64_t v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  uint64_t v36 = a26;
  if (!a26)
  {
LABEL_5:
    uint64_t v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  uint64_t v37 = a29;
  if (!a29)
  {
LABEL_6:
    uint64_t v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  uint64_t v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

void *sub_1002CA168(void *result, void *a2, void *a3, void *a4, char **a5, char **a6)
{
  uint64_t v6 = *a3;
  if (*a3 != a3[1])
  {
    uint64_t v8 = a4;
    uint64_t v9 = a3;
    uint64_t v83 = result;
    do
    {
      uint64_t v11 = *(void **)v6;
      uint64_t v12 = *(void *)(*(void *)v6 + 32);
      if (result[2] >= v12 && *result <= v11[6])
      {
        BOOL v13 = result[3] >= v11[5] && result[1] <= v11[7];
        if (a2[2] < v12)
        {
LABEL_17:
          if (!v13) {
            goto LABEL_4;
          }
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v13 = 0;
        if (a2[2] < v12) {
          goto LABEL_17;
        }
      }
      if (*a2 > v11[6]) {
        goto LABEL_17;
      }
      BOOL v30 = a2[3] < v11[5] || a2[1] > v11[7];
      if (v13 && !v30)
      {
        int64_t v32 = a6[1];
        unint64_t v31 = (unint64_t)a6[2];
        if ((unint64_t)v32 >= v31)
        {
          uint64_t v46 = *a6;
          uint64_t v47 = v32 - *a6;
          uint64_t v48 = v47 >> 3;
          unint64_t v49 = (v47 >> 3) + 1;
          if (v49 >> 61) {
            sub_1000A9108();
          }
          uint64_t v50 = v31 - (void)v46;
          if (v50 >> 2 > v49) {
            unint64_t v49 = v50 >> 2;
          }
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v86 = v49;
          if (v49)
          {
            if (v49 >> 61) {
              goto LABEL_99;
            }
            double v51 = operator new(8 * v49);
            uint64_t v52 = &v51[8 * v48];
            *(void *)uint64_t v52 = v11;
            uint64_t v53 = (uint64_t)(v52 + 8);
            if (v32 != v46)
            {
LABEL_62:
              unint64_t v54 = v32 - 8 - v46;
              if (v54 < 0x58)
              {
                uint64_t v8 = a4;
                goto LABEL_71;
              }
              unint64_t v55 = v32 - &v51[v47];
              uint64_t v8 = a4;
              if (v55 < 0x20) {
                goto LABEL_104;
              }
              uint64_t v56 = (v54 >> 3) + 1;
              uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v58 = &v32[-v57];
              v52 -= v57;
              uint64_t v59 = &v51[8 * v48 - 16];
              uint64_t v60 = v32 - 16;
              uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v62 = *(_OWORD *)v60;
                *(v59 - 1) = *((_OWORD *)v60 - 1);
                *uint64_t v59 = v62;
                v59 -= 2;
                v60 -= 32;
                v61 -= 4;
              }
              while (v61);
              int64_t v32 = v58;
              if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_104:
                do
                {
LABEL_71:
                  uint64_t v63 = *((void *)v32 - 1);
                  v32 -= 8;
                  *((void *)v52 - 1) = v63;
                  v52 -= 8;
                }
                while (v32 != v46);
              }
              int64_t v32 = *a6;
              *a6 = v52;
              a6[1] = (char *)v53;
              a6[2] = &v51[8 * v86];
              if (v32) {
LABEL_73:
              }
                operator delete(v32);
LABEL_74:
              int64x2_t result = v83;
              a6[1] = (char *)v53;
              goto LABEL_4;
            }
          }
          else
          {
            double v51 = 0;
            uint64_t v52 = (char *)(8 * v48);
            *(void *)(8 * v48) = v11;
            uint64_t v53 = 8 * v48 + 8;
            if (v32 != v46) {
              goto LABEL_62;
            }
          }
          uint64_t v8 = a4;
          *a6 = v52;
          a6[1] = (char *)v53;
          a6[2] = &v51[8 * v86];
          if (v32) {
            goto LABEL_73;
          }
          goto LABEL_74;
        }
        *(void *)int64_t v32 = v11;
        a6[1] = v32 + 8;
        goto LABEL_4;
      }
      if (!v13)
      {
        if (!v30)
        {
          uint64_t v33 = a5;
          int64_t v35 = a5[1];
          unint64_t v34 = (unint64_t)a5[2];
          if ((unint64_t)v35 < v34)
          {
            *(void *)int64_t v35 = v11;
            uint64_t v36 = (uint64_t)(v35 + 8);
LABEL_96:
            v33[1] = (char *)v36;
            goto LABEL_4;
          }
          uint64_t v64 = *a5;
          uint64_t v65 = v35 - *a5;
          uint64_t v66 = v65 >> 3;
          unint64_t v67 = (v65 >> 3) + 1;
          if (v67 >> 61) {
            sub_1000A9108();
          }
          uint64_t v68 = v34 - (void)v64;
          if (v68 >> 2 > v67) {
            unint64_t v67 = v68 >> 2;
          }
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
          }
          unint64_t v87 = v67;
          if (v67)
          {
            if (v67 >> 61) {
LABEL_99:
            }
              sub_1000A6A10();
            unint64_t v69 = operator new(8 * v67);
            unint64_t v70 = &v69[8 * v66];
            *(void *)unint64_t v70 = v11;
            uint64_t v36 = (uint64_t)(v70 + 8);
            if (v35 != v64)
            {
LABEL_83:
              unint64_t v71 = v35 - 8 - v64;
              if (v71 < 0x58)
              {
                uint64_t v8 = a4;
                goto LABEL_92;
              }
              unint64_t v73 = v35 - &v69[v65];
              uint64_t v8 = a4;
              if (v73 < 0x20) {
                goto LABEL_105;
              }
              uint64_t v74 = (v71 >> 3) + 1;
              uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v76 = &v35[-v75];
              v70 -= v75;
              long long v77 = &v69[8 * v66 - 16];
              int64_t v78 = v35 - 16;
              uint64_t v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *(_OWORD *)v78;
                *(v77 - 1) = *((_OWORD *)v78 - 1);
                _OWORD *v77 = v80;
                v77 -= 2;
                v78 -= 32;
                v79 -= 4;
              }
              while (v79);
              int64_t v35 = v76;
              if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_105:
                do
                {
LABEL_92:
                  uint64_t v81 = *((void *)v35 - 1);
                  v35 -= 8;
                  *((void *)v70 - 1) = v81;
                  v70 -= 8;
                }
                while (v35 != v64);
              }
              uint64_t v72 = a5;
              int64_t v35 = *a5;
              *a5 = v70;
              a5[1] = (char *)v36;
              a5[2] = &v69[8 * v87];
              if (v35)
              {
LABEL_94:
                operator delete(v35);
                uint64_t v33 = a5;
                goto LABEL_95;
              }
LABEL_87:
              uint64_t v33 = v72;
LABEL_95:
              int64x2_t result = v83;
              goto LABEL_96;
            }
          }
          else
          {
            unint64_t v69 = 0;
            unint64_t v70 = (char *)(8 * v66);
            *(void *)(8 * v66) = v11;
            uint64_t v36 = 8 * v66 + 8;
            if (v35 != v64) {
              goto LABEL_83;
            }
          }
          uint64_t v72 = a5;
          uint64_t v8 = a4;
          *a5 = v70;
          a5[1] = (char *)v36;
          a5[2] = &v69[8 * v87];
          if (v35) {
            goto LABEL_94;
          }
          goto LABEL_87;
        }
        goto LABEL_4;
      }
LABEL_18:
      unint64_t v16 = (char *)v8[1];
      unint64_t v15 = v8[2];
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v17 = a2;
        uint64_t v18 = v9;
        uint64_t v19 = a6;
        uint64_t v20 = (char *)*v8;
        uint64_t v21 = (uint64_t)&v16[-*v8];
        uint64_t v22 = v21 >> 3;
        unint64_t v23 = (v21 >> 3) + 1;
        if (v23 >> 61) {
          sub_1000A9108();
        }
        uint64_t v24 = v15 - (void)v20;
        if (v24 >> 2 > v23) {
          unint64_t v23 = v24 >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v85 = v23;
        if (v23)
        {
          if (v23 >> 61) {
            goto LABEL_99;
          }
          int v25 = operator new(8 * v23);
          unint64_t v26 = &v25[8 * v22];
          void *v26 = v11;
          uint64_t v27 = (uint64_t)(v26 + 1);
          if (v16 != v20)
          {
LABEL_27:
            unint64_t v28 = v16 - 8 - v20;
            if (v28 < 0x58)
            {
              a6 = v19;
              uint64_t v9 = v18;
              a2 = v17;
              goto LABEL_50;
            }
            unint64_t v37 = v16 - &v25[v21];
            a6 = v19;
            uint64_t v9 = v18;
            a2 = v17;
            if (v37 < 0x20) {
              goto LABEL_106;
            }
            uint64_t v38 = (v28 >> 3) + 1;
            uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
            int64_t v40 = &v16[-v39];
            unint64_t v26 = (void *)((char *)v26 - v39);
            uint64_t v41 = &v25[8 * v22 - 16];
            uint64_t v42 = v16 - 16;
            uint64_t v43 = v38 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v44 = *(_OWORD *)v42;
              *(v41 - 1) = *((_OWORD *)v42 - 1);
              _OWORD *v41 = v44;
              v41 -= 2;
              v42 -= 32;
              v43 -= 4;
            }
            while (v43);
            unint64_t v16 = v40;
            if (v38 != (v38 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_106:
              do
              {
LABEL_50:
                uint64_t v45 = *((void *)v16 - 1);
                v16 -= 8;
                *--unint64_t v26 = v45;
              }
              while (v16 != v20);
            }
            uint64_t v8 = a4;
            unint64_t v16 = (char *)*a4;
            *a4 = v26;
            a4[1] = v27;
            a4[2] = &v25[8 * v85];
            if (v16) {
LABEL_52:
            }
              operator delete(v16);
LABEL_53:
            int64x2_t result = v83;
            v8[1] = v27;
            goto LABEL_4;
          }
        }
        else
        {
          int v25 = 0;
          unint64_t v26 = (void *)(8 * v22);
          *(void *)(8 * v22) = v11;
          uint64_t v27 = 8 * v22 + 8;
          if (v16 != v20) {
            goto LABEL_27;
          }
        }
        a6 = v19;
        uint64_t v9 = v18;
        uint64_t v8 = a4;
        a2 = v17;
        *a4 = v26;
        a4[1] = v27;
        a4[2] = &v25[8 * v85];
        if (v16) {
          goto LABEL_52;
        }
        goto LABEL_53;
      }
      *(void *)unint64_t v16 = v11;
      v8[1] = v16 + 8;
LABEL_4:
      v6 += 8;
    }
    while (v6 != v9[1]);
  }
  return result;
}

uint64_t sub_1002CA70C(long long *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = *((void *)a1 + 2);
  uint64_t v17 = *((void *)a1 + 3);
  uint64_t v19 = *((void *)a1 + 1);
  if (v19 >= 0) {
    uint64_t v20 = *((void *)a1 + 1);
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  uint64_t v21 = v20 >> 1;
  long long v22 = *a1;
  long long v131 = a1[1];
  long long v132 = v22;
  if (v17 >= 0) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v17 + 1;
  }
  uint64_t v24 = v23 >> 1;
  v130[0] = v22;
  int v25 = v17 - 2 * v24 + v19 - 2 * v21;
  uint64_t v133 = v18;
  uint64_t v134 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v130[1] = v134;
  v127 = 0;
  v128 = 0;
  uint64_t v129 = 0;
  long long v124 = 0;
  long long v125 = 0;
  uint64_t v126 = 0;
  unsigned int v121 = 0;
  char v122 = 0;
  uint64_t v123 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v115 = 0;
  char v116 = 0;
  uint64_t v117 = 0;
  long long __p = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  sub_1002CA168(&v132, v130, a2, &v127, (char **)&v124, (char **)&v121);
  sub_1002CA168(&v132, v130, a3, &v118, (char **)&v115, (char **)&__p);
  uint64_t v27 = (char *)v121;
  unint64_t v26 = v122;
  if (v121 == v122) {
    goto LABEL_129;
  }
  uint64_t v29 = (char *)__p;
  unint64_t v28 = v113;
  if (a5 > (v122 - (unsigned char *)v121) >> 3 || a4 > 0x63 || (v113 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v113)
    {
      do
      {
        long long v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            uint64_t v45 = *(void *)v27;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v27 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48)
              && *(void *)(v45 + 56) >= *(void *)(v46 + 40)
              && *(void *)(v45 + 40) <= *(void *)(v46 + 56))
            {
              if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v45, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v46, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
              unint64_t v28 = v113;
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          unint64_t v26 = v122;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_66;
  }
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  int64x2_t v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v111 = vdupq_n_s64(0x8000000000000000);
  int64_t v32 = 0x8000000000000000;
  uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    unint64_t v34 = *(void **)v27;
    int64_t v35 = *(void *)(*(void *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        uint64_t v36 = v34[5];
        if (v36 < v30) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v110.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v33 = v35;
      if (v35 <= v32) {
        goto LABEL_15;
      }
    }
    v111.i64[0] = v35;
    int64_t v32 = v35;
    uint64_t v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v110.i64[1] = v36;
      uint64_t v30 = v36;
      if (v36 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      uint64_t v37 = v34[6];
      if (v37 < v33) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
LABEL_25:
    v111.i64[1] = v36;
    int64_t v31 = v36;
    uint64_t v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v110.i64[0] = v37;
      uint64_t v33 = v37;
      if (v37 <= v32) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      uint64_t v38 = v34[7];
      if (v38 >= v30) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_27:
    v111.i64[0] = v37;
    int64_t v32 = v37;
    uint64_t v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
LABEL_20:
    v110.i64[1] = v38;
    uint64_t v30 = v38;
    if (v38 <= v31) {
      goto LABEL_12;
    }
LABEL_29:
    v111.i64[1] = v38;
    int64_t v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v122);
  while (v29 != v113)
  {
    uint64_t v39 = *(void **)v29;
    int64_t v40 = *(void *)(*(void *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        uint64_t v41 = v39[5];
        if (v41 < v30) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v110.i64[0] = *(void *)(*(void *)v29 + 32);
      uint64_t v33 = v40;
      if (v40 <= v32) {
        goto LABEL_34;
      }
    }
    v111.i64[0] = v40;
    int64_t v32 = v40;
    uint64_t v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v110.i64[1] = v41;
      uint64_t v30 = v41;
      if (v41 <= v31) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      uint64_t v42 = v39[6];
      if (v42 < v33) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    v111.i64[1] = v41;
    int64_t v31 = v41;
    uint64_t v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v110.i64[0] = v42;
      uint64_t v33 = v42;
      if (v42 <= v32) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      uint64_t v43 = v39[7];
      if (v43 >= v30) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
LABEL_46:
    v111.i64[0] = v42;
    int64_t v32 = v42;
    uint64_t v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_39:
    v110.i64[1] = v43;
    uint64_t v30 = v43;
    if (v43 <= v31) {
      goto LABEL_30;
    }
LABEL_48:
    v111.i64[1] = v43;
    int64_t v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002C9354(&v110, &v121, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
    goto LABEL_236;
  }
LABEL_66:
  uint64_t v48 = v119;
  if (a5 > (v119 - (unsigned char *)v118) >> 3)
  {
    uint64_t v50 = (char *)v121;
    unint64_t v49 = v122;
    goto LABEL_69;
  }
  uint64_t v50 = (char *)v121;
  unint64_t v49 = v122;
  if (a5 <= (v116 - (unsigned char *)v115) >> 3 && a4 <= 0x63 && (v122 - (unsigned char *)v121) >> 3 >= a5)
  {
    int64x2_t v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    int64x2_t v111 = vdupq_n_s64(0x8000000000000000);
    if (v121 != v122)
    {
      uint64_t v60 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v61 = 0x8000000000000000;
      int64_t v62 = 0x8000000000000000;
      uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v64 = *(void **)v50;
        int64_t v65 = *(void *)(*(void *)v50 + 32);
        if (v65 >= v63)
        {
          if (v65 <= v62)
          {
LABEL_110:
            uint64_t v66 = v64[5];
            if (v66 < v60) {
              goto LABEL_111;
            }
            goto LABEL_119;
          }
        }
        else
        {
          v110.i64[0] = *(void *)(*(void *)v50 + 32);
          uint64_t v63 = v65;
          if (v65 <= v62) {
            goto LABEL_110;
          }
        }
        v111.i64[0] = v65;
        int64_t v62 = v65;
        uint64_t v66 = v64[5];
        if (v66 < v60)
        {
LABEL_111:
          v110.i64[1] = v66;
          uint64_t v60 = v66;
          if (v66 <= v61) {
            goto LABEL_112;
          }
          goto LABEL_120;
        }
LABEL_119:
        if (v66 <= v61)
        {
LABEL_112:
          uint64_t v67 = v64[6];
          if (v67 < v63) {
            goto LABEL_113;
          }
          goto LABEL_121;
        }
LABEL_120:
        v111.i64[1] = v66;
        int64_t v61 = v66;
        uint64_t v67 = v64[6];
        if (v67 < v63)
        {
LABEL_113:
          v110.i64[0] = v67;
          uint64_t v63 = v67;
          if (v67 <= v62) {
            goto LABEL_114;
          }
          goto LABEL_122;
        }
LABEL_121:
        if (v67 <= v62)
        {
LABEL_114:
          uint64_t v68 = v64[7];
          if (v68 < v60) {
            goto LABEL_115;
          }
          goto LABEL_123;
        }
LABEL_122:
        v111.i64[0] = v67;
        int64_t v62 = v67;
        uint64_t v68 = v64[7];
        if (v68 < v60)
        {
LABEL_115:
          v110.i64[1] = v68;
          uint64_t v60 = v68;
          if (v68 > v61) {
            goto LABEL_124;
          }
          goto LABEL_107;
        }
LABEL_123:
        if (v68 > v61)
        {
LABEL_124:
          v111.i64[1] = v68;
          int64_t v61 = v68;
        }
LABEL_107:
        v50 += 8;
      }
      while (v50 != v122);
    }
    if (sub_1002C9354(&v110, &v121, &v118, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002C9354(&v110, &v121, &v115, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_129;
    }
LABEL_236:
    uint64_t v103 = 0;
    uint64_t v104 = (char *)__p;
    if (!__p) {
      goto LABEL_238;
    }
LABEL_237:
    uint64_t v113 = v104;
    operator delete(v104);
    goto LABEL_238;
  }
LABEL_69:
  if (v118 == v119 || v50 == v49)
  {
    if (v50 == v49) {
      goto LABEL_129;
    }
  }
  else
  {
    do
    {
      uint64_t v52 = (char *)v118;
      if (v118 != v48)
      {
        do
        {
          uint64_t v53 = *(void *)v50;
          uint64_t v54 = *(void *)v52;
          if (*(void *)(*(void *)v50 + 48) >= *(void *)(*(void *)v52 + 32)
            && *(void *)(v53 + 32) <= *(void *)(v54 + 48)
            && *(void *)(v53 + 56) >= *(void *)(v54 + 40)
            && *(void *)(v53 + 40) <= *(void *)(v54 + 56))
          {
            if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v53, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v54, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
            uint64_t v48 = v119;
            }
          }
          v52 += 8;
        }
        while (v52 != v48);
        unint64_t v49 = v122;
      }
      v50 += 8;
    }
    while (v50 != v49);
    uint64_t v50 = (char *)v121;
    if (v121 == v49) {
      goto LABEL_129;
    }
  }
  double v51 = v116;
  if (v115 != v116)
  {
    do
    {
      uint64_t v56 = (char *)v115;
      if (v115 != v51)
      {
        do
        {
          uint64_t v57 = *(void *)v50;
          uint64_t v58 = *(void *)v56;
          if (*(void *)(*(void *)v50 + 48) >= *(void *)(*(void *)v56 + 32)
            && *(void *)(v57 + 32) <= *(void *)(v58 + 48)
            && *(void *)(v57 + 56) >= *(void *)(v58 + 40)
            && *(void *)(v57 + 40) <= *(void *)(v58 + 56))
          {
            if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v57, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v58, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
            double v51 = v116;
            }
          }
          v56 += 8;
        }
        while (v56 != v51);
        unint64_t v49 = v122;
      }
      v50 += 8;
    }
    while (v50 != v49);
  }
LABEL_129:
  unint64_t v70 = (char *)__p;
  unint64_t v69 = v113;
  if (__p == v113) {
    goto LABEL_174;
  }
  uint64_t v72 = (char *)v127;
  unint64_t v71 = v128;
  if (a5 > (v128 - (unsigned char *)v127) >> 3
    || a5 > (v125 - (unsigned char *)v124) >> 3
    || a4 > 0x63
    || (v113 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v72 != v71)
    {
      unint64_t v82 = (char *)__p;
      if (__p != v69)
      {
        do
        {
          uint64_t v83 = *(void *)v72;
          uint64_t v84 = *(void *)v82;
          if (*(void *)(*(void *)v72 + 48) >= *(void *)(*(void *)v82 + 32)
            && *(void *)(v83 + 32) <= *(void *)(v84 + 48)
            && *(void *)(v83 + 56) >= *(void *)(v84 + 40)
            && *(void *)(v83 + 40) <= *(void *)(v84 + 56))
          {
            if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v83, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v84, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
            unint64_t v69 = v113;
            }
          }
          v82 += 8;
        }
        while (v82 != v69);
        unint64_t v71 = v128;
      }
      v72 += 8;
    }
    unint64_t v87 = (char *)v124;
    unint64_t v86 = v125;
    if (v124 != v125 && __p != v69)
    {
      do
      {
        long long v91 = (char *)__p;
        if (__p != v69)
        {
          do
          {
            uint64_t v92 = *(void *)v87;
            uint64_t v93 = *(void *)v91;
            if (*(void *)(*(void *)v87 + 48) >= *(void *)(*(void *)v91 + 32)
              && *(void *)(v92 + 32) <= *(void *)(v93 + 48)
              && *(void *)(v92 + 56) >= *(void *)(v93 + 40)
              && *(void *)(v92 + 40) <= *(void *)(v93 + 56))
            {
              if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v92, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v93, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
              unint64_t v69 = v113;
              }
            }
            v91 += 8;
          }
          while (v91 != v69);
          unint64_t v86 = v125;
        }
        v87 += 8;
      }
      while (v87 != v86);
    }
    goto LABEL_174;
  }
  uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v74 = 0x8000000000000000;
  int64x2_t v110 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v111 = vdupq_n_s64(0x8000000000000000);
  int64_t v75 = 0x8000000000000000;
  uint64_t v76 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    long long v77 = *(void **)v70;
    int64_t v78 = *(void *)(*(void *)v70 + 32);
    if (v78 >= v76)
    {
      if (v78 > v75) {
        goto LABEL_146;
      }
LABEL_138:
      uint64_t v79 = v77[5];
      if (v79 < v73) {
        goto LABEL_139;
      }
LABEL_147:
      if (v79 > v74) {
        goto LABEL_148;
      }
LABEL_140:
      uint64_t v80 = v77[6];
      if (v80 < v76) {
        goto LABEL_141;
      }
LABEL_149:
      if (v80 > v75) {
        goto LABEL_150;
      }
LABEL_142:
      int64_t v81 = v77[7];
      if (v81 < v73) {
        goto LABEL_143;
      }
LABEL_151:
      if (v81 > v74)
      {
LABEL_152:
        v111.i64[1] = v81;
        int64_t v74 = v81;
      }
    }
    else
    {
      v110.i64[0] = *(void *)(*(void *)v70 + 32);
      uint64_t v76 = v78;
      if (v78 <= v75) {
        goto LABEL_138;
      }
LABEL_146:
      v111.i64[0] = v78;
      int64_t v75 = v78;
      uint64_t v79 = v77[5];
      if (v79 >= v73) {
        goto LABEL_147;
      }
LABEL_139:
      v110.i64[1] = v79;
      uint64_t v73 = v79;
      if (v79 <= v74) {
        goto LABEL_140;
      }
LABEL_148:
      v111.i64[1] = v79;
      int64_t v74 = v79;
      uint64_t v80 = v77[6];
      if (v80 >= v76) {
        goto LABEL_149;
      }
LABEL_141:
      v110.i64[0] = v80;
      uint64_t v76 = v80;
      if (v80 <= v75) {
        goto LABEL_142;
      }
LABEL_150:
      v111.i64[0] = v80;
      int64_t v75 = v80;
      int64_t v81 = v77[7];
      if (v81 >= v73) {
        goto LABEL_151;
      }
LABEL_143:
      v110.i64[1] = v81;
      uint64_t v73 = v81;
      if (v81 > v74) {
        goto LABEL_152;
      }
    }
    v70 += 8;
    if (v70 != v113) {
      continue;
    }
    break;
  }
  if (!sub_1002C9354(&v110, &v127, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002C9354(&v110, &v124, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
LABEL_174:
  unint64_t v90 = (char *)v127;
  uint64_t v89 = v128;
  if (a5 > (v128 - (unsigned char *)v127) >> 3 || a4 > 0x63 || (v119 - (unsigned char *)v118) >> 3 < a5)
  {
    if (v127 != v128)
    {
      long long v95 = v119;
      if (v118 != v119)
      {
        do
        {
          unint64_t v98 = (char *)v118;
          if (v118 != v95)
          {
            do
            {
              uint64_t v99 = *(void *)v90;
              uint64_t v100 = *(void *)v98;
              if (*(void *)(*(void *)v90 + 48) >= *(void *)(*(void *)v98 + 32)
                && *(void *)(v99 + 32) <= *(void *)(v100 + 48)
                && *(void *)(v99 + 56) >= *(void *)(v100 + 40)
                && *(void *)(v99 + 40) <= *(void *)(v100 + 56))
              {
                if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v99, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v100, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
                long long v95 = v119;
                }
              }
              v98 += 8;
            }
            while (v98 != v95);
            uint64_t v89 = v128;
          }
          v90 += 8;
        }
        while (v90 != v89);
      }
    }
  }
  else if ((sub_1002C9354(&v132, &v127, &v118, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
  float64x2x2_t v97 = (char *)v124;
  long long v96 = v125;
  if (a5 > (v125 - (unsigned char *)v124) >> 3 || a4 > 0x63 || (v116 - (unsigned char *)v115) >> 3 < a5)
  {
    if (v124 != v125)
    {
      unsigned int v102 = v116;
      if (v115 != v116)
      {
        do
        {
          uint64_t v105 = (char *)v115;
          if (v115 != v102)
          {
            do
            {
              uint64_t v106 = *(void *)v97;
              uint64_t v107 = *(void *)v105;
              if (*(void *)(*(void *)v97 + 48) >= *(void *)(*(void *)v105 + 32)
                && *(void *)(v106 + 32) <= *(void *)(v107 + 48)
                && *(void *)(v106 + 56) >= *(void *)(v107 + 40)
                && *(void *)(v106 + 40) <= *(void *)(v107 + 56))
              {
                if (!sub_1002CB520(*(_DWORD *)a6, *(double ***)(a6 + 8), (int *)v106, *(_DWORD *)(a6 + 16), *(void **)(a6 + 24), (int *)v107, 0, 0, *(void *)(a6 + 32), *(void *)(a6 + 40), *(void **)(a6 + 48)))goto LABEL_236; {
                unsigned int v102 = v116;
                }
              }
              v105 += 8;
            }
            while (v105 != v102);
            long long v96 = v125;
          }
          v97 += 8;
        }
        while (v97 != v96);
      }
    }
  }
  else if ((sub_1002C9354(v130, &v124, &v115, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_236;
  }
  uint64_t v103 = 1;
  uint64_t v104 = (char *)__p;
  if (__p) {
    goto LABEL_237;
  }
LABEL_238:
  if (v115)
  {
    char v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118)
  {
    uint64_t v119 = (char *)v118;
    operator delete(v118);
  }
  if (v121)
  {
    char v122 = (char *)v121;
    operator delete(v121);
  }
  if (v124)
  {
    long long v125 = (char *)v124;
    operator delete(v124);
  }
  if (v127)
  {
    v128 = (char *)v127;
    operator delete(v127);
  }
  return v103;
}

void sub_1002CB45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v34 = a20;
    if (!a20)
    {
LABEL_3:
      int64_t v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  int64_t v35 = a23;
  if (!a23)
  {
LABEL_4:
    uint64_t v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  uint64_t v36 = a26;
  if (!a26)
  {
LABEL_5:
    uint64_t v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  uint64_t v37 = a29;
  if (!a29)
  {
LABEL_6:
    uint64_t v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  uint64_t v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002CB520(int a1, double **a2, int *a3, int a4, void *a5, int *a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if ((!*((unsigned char *)a3 + 96) || (unint64_t)(*((void *)a3 + 10) + 1) >= *((void *)a3 + 11))
    && (!*((unsigned char *)a6 + 96) || (unint64_t)(*((void *)a6 + 10) + 1) >= *((void *)a6 + 11)))
  {
    uint64_t v11 = *((void *)a3 + 3);
    if (v11 >= 0) {
      uint64_t v12 = (double **)&a2[3][3 * v11];
    }
    else {
      uint64_t v12 = a2;
    }
    BOOL v13 = *v12;
    uint64_t v114 = v12[1];
    uint64_t v115 = *v12;
    uint64_t v14 = *((void *)a6 + 3);
    unint64_t v15 = (double **)(*a5 + 48 * *((void *)a6 + 2));
    if (v14 >= 0) {
      unint64_t v15 = (double **)&v15[3][3 * v14];
    }
    char v122 = *v15;
    uint64_t v118 = v15[1];
    int v16 = *a3;
    int v109 = *a6;
    uint64_t v17 = *((void *)a3 + 13);
    uint64_t v18 = *((void *)a3 + 8);
    uint64_t v19 = *((void *)a3 + 9);
    uint64_t v20 = &v13[2 * v18];
    uint64_t v113 = v17;
    if (v18 != v19)
    {
      uint64_t v88 = 0;
      uint64_t v89 = 16 * v19 - 16 * v18;
      v127 = &v13[2 * v18];
      unint64_t v90 = v127;
      uint64_t v91 = *((void *)a3 + 8);
      uint64_t v92 = v127;
      while (1)
      {
        uint64_t v93 = v18;
        uint64_t v20 = v90;
        double v94 = (double)*(uint64_t *)(a10 + 24) + (v90[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v94 >= 0.0) {
          double v95 = 0.5;
        }
        else {
          double v95 = -0.5;
        }
        sub_1002C5028(v94 + v95);
        double v96 = v92[2];
        v92 += 2;
        double v97 = (double)*(uint64_t *)(a10 + 16) + (v96 - *(double *)a10) * *(double *)(a10 + 32);
        if (v97 >= 0.0) {
          double v98 = 0.5;
        }
        else {
          double v98 = -0.5;
        }
        double v99 = v97 + v98;
        sub_1002C5028(v97 + v98);
        double v100 = ceil(v99);
        double v101 = floor(v99);
        if (v99 >= 0.0) {
          double v100 = v101;
        }
        uint64_t v102 = (uint64_t)v100;
        if (v16 == 1)
        {
          uint64_t v18 = v93;
          if (*((void *)a6 + 4) <= v102)
          {
            uint64_t v113 = v17;
            uint64_t v18 = v91;
            break;
          }
        }
        else
        {
          if (v16 != -1)
          {
            uint64_t v20 = v127;
            uint64_t v18 = v93;
            break;
          }
          uint64_t v18 = v93;
          if (*((void *)a6 + 6) >= v102)
          {
            v113 += v88;
            uint64_t v18 = v93 + v88;
            break;
          }
        }
        ++v91;
        ++v17;
        ++v88;
        unint64_t v90 = v92;
        v89 -= 16;
        if (!v89) {
          return 1;
        }
      }
    }
    uint64_t v21 = &v115[2 * v19];
    if (v20 != v21)
    {
      long long v22 = v20 + 2;
      uint64_t v23 = &v115[2 * (v20 != v115)];
      if (v20 + 2 != v114) {
        uint64_t v23 = v20 + 2;
      }
      uint64_t v24 = v23 + 2;
      int v25 = &v115[2 * (v23 != v115)];
      if (v24 != v114) {
        int v25 = v24;
      }
      uint64_t v117 = v25;
      int v26 = -v16;
      int v119 = -v109;
      __int16 v108 = v21;
      while (1)
      {
        uint64_t v126 = v18;
        double v29 = (double)*(uint64_t *)(a10 + 24) + (v20[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v29 >= 0.0) {
          double v30 = 0.5;
        }
        else {
          double v30 = -0.5;
        }
        sub_1002C5028(v29 + v30);
        char v116 = v20;
        double v31 = (double)*(uint64_t *)(a10 + 16) + (*v20 - *(double *)a10) * *(double *)(a10 + 32);
        if (v31 >= 0.0) {
          double v32 = 0.5;
        }
        else {
          double v32 = -0.5;
        }
        double v33 = v31 + v32;
        sub_1002C5028(v31 + v32);
        double v34 = ceil(v33);
        double v35 = floor(v33);
        if (v33 >= 0.0) {
          double v34 = v35;
        }
        uint64_t v36 = (uint64_t)v34;
        if (v26 == 1)
        {
          uint64_t v37 = a6;
          uint64_t v38 = v126;
          uint64_t v39 = v122;
          int64_t v40 = v20;
          if (*((void *)a6 + 4) > v36) {
            return 1;
          }
        }
        else
        {
          uint64_t v37 = a6;
          uint64_t v38 = v126;
          uint64_t v39 = v122;
          int64_t v40 = v20;
          if (v26 == -1 && *((void *)a6 + 6) < v36) {
            return 1;
          }
        }
        uint64_t v41 = a3;
        v181[0] = a3;
        v181[1] = v38;
        v181[2] = v40;
        v181[3] = v22;
        v181[4] = v117;
        v181[5] = v115;
        v181[6] = v114;
        char v182 = 1;
        char v183 = 0;
        long long v42 = *(_OWORD *)(a10 + 16);
        long long v184 = *(_OWORD *)a10;
        long long v185 = v42;
        uint64_t v186 = *(void *)(a10 + 32);
        uint64_t v44 = v37[8];
        uint64_t v43 = v37[9];
        uint64_t v45 = v37[13];
        if (v44 == v43)
        {
LABEL_35:
          uint64_t v46 = &v39[2 * v44];
          goto LABEL_36;
        }
        uint64_t v71 = 0;
        double v72 = *(double *)(a10 + 32);
        uint64_t v73 = 16 * v43 - 16 * v44;
        uint64_t v46 = &v39[2 * v44];
        uint64_t v74 = v37[13];
        uint64_t v75 = v37[8];
        while (1)
        {
          double v76 = (double)*(uint64_t *)(a10 + 24) + (v46[3] - *(double *)(a10 + 8)) * v72;
          if (v76 >= 0.0) {
            double v77 = 0.5;
          }
          else {
            double v77 = -0.5;
          }
          double v78 = v76 + v77;
          int v79 = 2 * (v78 >= 9.22337204e18);
          if (v78 <= -9.22337204e18) {
            int v79 = 1;
          }
          if (v79 == 2) {
            goto LABEL_131;
          }
          if (v79 == 1) {
            goto LABEL_132;
          }
          double v80 = (double)*(uint64_t *)(a10 + 16) + (v46[2] - *(double *)a10) * v72;
          if (v80 >= 0.0) {
            double v81 = 0.5;
          }
          else {
            double v81 = -0.5;
          }
          double v82 = v80 + v81;
          int v83 = 2 * (v82 >= 9.22337204e18);
          if (v82 <= -9.22337204e18) {
            int v83 = 1;
          }
          if (v83 == 2)
          {
LABEL_131:
            exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            exception->__vftable = 0;
            uint64_t v105 = sub_10015F6A0(exception);
          }
          if (v83 == 1)
          {
LABEL_132:
            uint64_t v106 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v106->__vftable = 0;
            uint64_t v107 = sub_10015F668(v106);
          }
          double v84 = ceil(v82);
          double v85 = floor(v82);
          double v86 = v82 >= 0.0 ? v85 : v84;
          uint64_t v87 = (uint64_t)v86;
          if (v109 == 1) {
            break;
          }
          if (v109 != -1) {
            goto LABEL_35;
          }
          if (*((void *)a3 + 6) >= v87)
          {
            v45 += v71;
            v44 += v71;
            goto LABEL_36;
          }
LABEL_89:
          v46 += 2;
          ++v75;
          ++v74;
          ++v71;
          v73 -= 16;
          if (!v73) {
            goto LABEL_111;
          }
        }
        if (*((void *)a3 + 4) > v87) {
          goto LABEL_89;
        }
        uint64_t v45 = v74;
        uint64_t v44 = v75;
LABEL_36:
        uint64_t v123 = &v39[2 * v43];
        if (v46 != v123) {
          break;
        }
LABEL_111:
        ++v113;
LABEL_18:
        uint64_t v20 = v116 + 2;
        uint64_t v18 = v38 + 1;
        uint64_t v27 = v117 + 2;
        if (v117 + 2 == v114) {
          uint64_t v27 = &v115[2 * (v117 != v115)];
        }
        uint64_t v117 = v27;
        BOOL v28 = v22 == v21;
        v22 += 2;
        int v26 = -v16;
        if (v28) {
          return 1;
        }
      }
      int64x2_t v110 = v22;
      uint64_t v47 = v46 + 2;
      uint64_t v48 = v118;
      if (v46 + 2 == v118) {
        uint64_t v47 = &v39[2 * (v46 != v39)];
      }
      unint64_t v49 = v47 + 2;
      uint64_t v50 = &v39[2 * (v47 != v39)];
      if (v49 == v118) {
        double v51 = v50;
      }
      else {
        double v51 = v49;
      }
      uint64_t v52 = ++v113 - v45;
      while (1)
      {
        double v53 = *(double *)(a10 + 32);
        double v54 = (double)*(uint64_t *)(a10 + 24) + (v46[1] - *(double *)(a10 + 8)) * v53;
        if (v54 >= 0.0) {
          double v55 = 0.5;
        }
        else {
          double v55 = -0.5;
        }
        double v56 = v54 + v55;
        int v57 = 2 * (v56 >= 9.22337204e18);
        if (v56 <= -9.22337204e18) {
          int v57 = 1;
        }
        if (v57 == 2) {
          goto LABEL_131;
        }
        if (v57 == 1) {
          goto LABEL_132;
        }
        double v58 = (double)*(uint64_t *)(a10 + 16) + (*v46 - *(double *)a10) * v53;
        if (v58 >= 0.0) {
          double v59 = 0.5;
        }
        else {
          double v59 = -0.5;
        }
        double v60 = v58 + v59;
        int v61 = 2 * (v60 >= 9.22337204e18);
        if (v60 <= -9.22337204e18) {
          int v61 = 1;
        }
        if (v61 == 2) {
          goto LABEL_131;
        }
        if (v61 == 1) {
          goto LABEL_132;
        }
        double v62 = ceil(v60);
        double v63 = floor(v60);
        if (v60 >= 0.0) {
          double v64 = v63;
        }
        else {
          double v64 = v62;
        }
        uint64_t v65 = (uint64_t)v64;
        if (v119 == 1)
        {
          if (v41[4] > v65) {
            goto LABEL_17;
          }
        }
        else if (v119 == -1 && v41[6] < v65)
        {
          goto LABEL_17;
        }
        uint64_t v66 = v41[2];
        if (a1 == a4)
        {
          uint64_t v67 = v41[3];
          uint64_t v69 = v37[2];
          uint64_t v68 = v37[3];
          if (v66 == v69)
          {
            if (v67 == v68)
            {
              if (a7)
              {
                if (v38 >= v44 || (a8 & 1) == 0)
                {
                  uint64_t v68 = v41[3];
                  uint64_t v69 = v41[2];
                  if (v38 >= v44) {
                    goto LABEL_75;
                  }
                  goto LABEL_74;
                }
LABEL_82:
                if (!v52) {
                  goto LABEL_75;
                }
                if (!v38)
                {
                  uint64_t v68 = v41[3];
                  uint64_t v69 = v41[2];
                  if (v41[11] - 2 <= v44) {
                    goto LABEL_75;
                  }
                  goto LABEL_74;
                }
              }
              else if (a8)
              {
                goto LABEL_82;
              }
              uint64_t v68 = v41[3];
              uint64_t v69 = v41[2];
              goto LABEL_74;
            }
            uint64_t v69 = v41[2];
          }
        }
        else
        {
          uint64_t v67 = v41[3];
          uint64_t v69 = v37[2];
          uint64_t v68 = v37[3];
        }
LABEL_74:
        v175[0] = v37;
        v175[1] = v44;
        v175[2] = v46;
        v175[3] = v46 + 2;
        v175[4] = v51;
        v175[5] = v39;
        v175[6] = v48;
        char v176 = 0;
        char v177 = 0;
        long long v70 = *(_OWORD *)(a10 + 16);
        long long v178 = *(_OWORD *)a10;
        long long v179 = v70;
        uint64_t v180 = *(void *)(a10 + 32);
        int v129 = 0;
        char v130 = 0;
        uint64_t v131 = -1;
        __int16 v132 = 0;
        int v133 = 0;
        uint64_t v139 = 1;
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        uint64_t v142 = -1;
        uint64_t v143 = -1;
        uint64_t v144 = -1;
        __int16 v145 = 257;
        uint64_t v146 = 0;
        uint64_t v147 = 0;
        uint64_t v148 = -1;
        uint64_t v149 = -1;
        uint64_t v150 = -1;
        char v151 = 0;
        int v152 = 0;
        __int16 v153 = 0;
        int v154 = 0;
        uint64_t v160 = 1;
        uint64_t v161 = 0;
        uint64_t v162 = 0;
        uint64_t v163 = -1;
        uint64_t v164 = -1;
        uint64_t v165 = -1;
        __int16 v166 = 257;
        uint64_t v167 = 0;
        uint64_t v168 = 0;
        uint64_t v169 = -1;
        uint64_t v170 = -1;
        uint64_t v171 = -1;
        char v172 = 0;
        int v173 = 0;
        __int16 v174 = 0;
        uint64_t v134 = a1;
        uint64_t v135 = v66;
        uint64_t v136 = v67;
        uint64_t v137 = v38;
        long long v138 = xmmword_1003FAAE0;
        uint64_t v155 = a4;
        uint64_t v156 = v69;
        uint64_t v157 = v68;
        uint64_t v158 = v44;
        long long v159 = xmmword_1003FAAE0;
        sub_1002CBE54((uint64_t)v181, (uint64_t)v175, v128, a9, a10, a11);
        uint64_t v37 = a6;
        uint64_t v38 = v126;
        uint64_t v48 = v118;
        uint64_t v39 = v122;
        uint64_t v41 = a3;
LABEL_75:
        v46 += 2;
        ++v44;
        if (v51 + 2 == v48) {
          double v51 = &v39[2 * (v51 != v39)];
        }
        else {
          v51 += 2;
        }
        --v52;
        if (v46 == v123)
        {
LABEL_17:
          uint64_t v21 = v108;
          long long v22 = v110;
          goto LABEL_18;
        }
      }
    }
  }
  return 1;
}

void *sub_1002CBE54(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v47 = a6;
  v25[0] = a1;
  v25[1] = a2;
  uint64_t v11 = sub_1002CD678((uint64_t)&v26, a1, a2, a5);
  v30[0] = a1;
  v30[1] = a5;
  v30[2] = v11;
  v30[3] = &v27;
  char v31 = 0;
  v32[0] = a2;
  v32[1] = a5;
  v32[2] = &v28;
  v32[3] = &v29;
  char v33 = 0;
  v34[1] = v30;
  void v34[2] = v32;
  v35[1] = v32;
  void v35[2] = v30;
  uint64_t v12 = *(void *)(a1 + 24);
  BOOL v13 = *(double **)(a2 + 16);
  uint64_t v14 = *(double **)(a2 + 24);
  v49[0] = *(long long **)(a1 + 16);
  v49[1] = (long long *)v12;
  v48[0] = v13;
  v48[1] = v14;
  *(_OWORD *)&v24[32] = xmmword_1003FAAF0;
  *(void *)&v24[48] = 0;
  *(void *)&v24[56] = 0;
  *(void *)&v24[64] = 1;
  *(void *)&v24[72] = 0;
  *(double *)uint64_t v24 = *(double *)v12 - *(double *)v49[0];
  *(double *)&v24[16] = *v14 - *v13;
  *(double *)&v24[8] = *(double *)(v12 + 8) - *((double *)v49[0] + 1);
  *(double *)&v24[24] = v14[1] - v13[1];
  sub_1002CDB78((uint64_t)v24, v49, v48, (uint64_t)v30, (uint64_t)v32, (uint64_t)v36);
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  if (LOBYTE(v41[0]) != 100)
  {
    memcpy(v24, a3, sizeof(v24));
    switch(LOBYTE(v41[0]))
    {
      case 'c':
        if (!BYTE1(v41[0]))
        {
          if (v43)
          {
            sub_1002CD170(a1, a2, (uint64_t)v24, (uint64_t)v36, (uint64_t)v41, (uint64_t)v34);
          }
          else
          {
            sub_1002CD414(a1, a2, (uint64_t)v24, (uint64_t)v36, (uint64_t)v41, (uint64_t)v34);
            *(_DWORD *)&v24[16] = 5;
          }
          goto LABEL_19;
        }
        sub_1002D167C(a1, a2, v24, (uint64_t *)&v47, (uint64_t)v25, (uint64_t)v34, (void (*)(unsigned char *))nullsub_195);
        return v47;
      case 'i':
        *(_OWORD *)uint64_t v24 = *(_OWORD *)&v36[8];
        *(void *)&v24[104] = v38;
        *(_OWORD *)&v24[88] = v37;
        *(void *)&v24[272] = v40;
        *(_OWORD *)&v24[256] = v39;
        unint64_t v15 = v47;
        uint64_t v16 = v47[2];
        uint64_t v17 = v47[1];
        uint64_t v18 = 2 * (v16 - v17) - 1;
        *(_DWORD *)&v24[16] = 2;
        if (v16 == v17) {
          uint64_t v18 = 0;
        }
        BOOL v19 = v42 == 1;
        *(_DWORD *)&v24[168 * (v42 != 1) + 40] = 1;
        *(_DWORD *)&v24[168 * v19 + 40] = 2;
        unint64_t v20 = v15[5] + v15[4];
        if (v18 == v20) {
          goto LABEL_22;
        }
        goto LABEL_23;
      case 'm':
        if (v44 == 1) {
          sub_1002CC28C(a1, a2, (uint64_t)v24, (uint64_t)v36, v41, (uint64_t)v34);
        }
        else {
          sub_1002CC6AC(a2, a1, (uint64_t)v24, (uint64_t)v36, v41, (uint64_t)v35);
        }
        goto LABEL_19;
      case 't':
        sub_1002CCAD0(a1, a2, (uint64_t)v24, (uint64_t)v36, v41, (uint64_t)v34);
        goto LABEL_19;
      default:
        if (LOBYTE(v41[0]) != 101 || BYTE1(v41[0])) {
          return v47;
        }
        sub_1002CD414(a1, a2, (uint64_t)v24, (uint64_t)v36, (uint64_t)v41, (uint64_t)v34);
LABEL_19:
        unint64_t v15 = v47;
        uint64_t v21 = v47[2];
        uint64_t v17 = v47[1];
        uint64_t v22 = 2 * (v21 - v17) - 1;
        if (v21 == v17) {
          uint64_t v22 = 0;
        }
        unint64_t v20 = v47[5] + v47[4];
        if (v22 == v20)
        {
LABEL_22:
          sub_1002D0EB8((uint64_t)v15);
          uint64_t v17 = v15[1];
          unint64_t v20 = v15[5] + v15[4];
        }
LABEL_23:
        memcpy((void *)(*(void *)(v17 + ((v20 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v20 & 0xF)), v24, 0x178uLL);
        ++v15[5];
        break;
    }
  }
  return v47;
}

void sub_1002CC28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  int v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_1003FAAF0;
    *(void *)(a3 + 104) = 0;
    int v9 = a5[10];
    if (v9 == 1) {
      goto LABEL_4;
    }
  }
  else if (v8 == 1)
  {
    *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
    *(void *)(a3 + 104) = 0x412E848000000000;
    int v9 = a5[10];
    if (v9 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 256) = vdupq_n_s64(1uLL);
      *(void *)(a3 + 272) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    long long v10 = *(_OWORD *)(a4 + 40);
    *(void *)(a3 + 104) = *(void *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v10;
    int v9 = a5[10];
    if (v9 == 1) {
      goto LABEL_4;
    }
  }
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 256) = xmmword_1003FAAF0;
    *(void *)(a3 + 272) = 0;
  }
  else
  {
    long long v11 = *(_OWORD *)(a4 + 64);
    *(void *)(a3 + 272) = *(void *)(a4 + 80);
    *(_OWORD *)(a3 + 256) = v11;
  }
LABEL_11:
  int v12 = a5[7];
  uint64_t v13 = *(void *)(a6 + 8);
  uint64_t v14 = *(uint64_t **)(v13 + 16);
  unint64_t v15 = *(uint64_t **)(v13 + 24);
  uint64_t v16 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 16));
  double v41 = 1.0;
  double v17 = sub_1002CEBF4(v14, v15, v16, &v41);
  if (v17 == 0.0) {
    goto LABEL_12;
  }
  if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
    if (!(v12 + v18)) {
      goto LABEL_21;
    }
  }
  else
  {
    double v25 = fabs(v17);
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
    if (v25 <= v41 * 2.22044605e-16)
    {
LABEL_12:
      int v18 = 0;
      if (v12) {
        goto LABEL_13;
      }
LABEL_21:
      uint64_t v26 = a3 + 40;
      *(_DWORD *)(v26 + 168 * (v18 != -1)) = 1;
      *(_DWORD *)(v26 + 168 * (v18 == -1)) = 2;
      return;
    }
    if (!(v12 + v18)) {
      goto LABEL_21;
    }
  }
LABEL_13:
  uint64_t v19 = *(void *)(a6 + 16);
  unint64_t v20 = *(uint64_t **)(v19 + 16);
  uint64_t v21 = *(uint64_t **)(v19 + 24);
  uint64_t v22 = (uint64_t *)sub_1002CEAE0(v19);
  double v41 = 1.0;
  double v23 = sub_1002CEBF4(v20, v21, v22, &v41);
  if (v23 == 0.0)
  {
LABEL_14:
    int v24 = 0;
    goto LABEL_36;
  }
  if ((*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v23 > 0.0) {
      int v24 = 1;
    }
    else {
      int v24 = -1;
    }
  }
  else
  {
    double v27 = fabs(v23);
    if (v23 > 0.0) {
      int v24 = 1;
    }
    else {
      int v24 = -1;
    }
    if (v27 <= v41 * 2.22044605e-16) {
      goto LABEL_14;
    }
  }
LABEL_36:
  uint64_t v28 = *(void *)(a6 + 16);
  uint64_t v29 = *(uint64_t **)(v28 + 24);
  double v30 = (uint64_t *)sub_1002CEAE0(v28);
  char v31 = *(uint64_t **)(*(void *)(a6 + 8) + 24);
  double v41 = 1.0;
  double v32 = sub_1002CEBF4(v29, v30, v31, &v41);
  if (v32 == 0.0)
  {
LABEL_37:
    int v33 = 0;
    goto LABEL_47;
  }
  if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
  }
  else
  {
    double v34 = fabs(v32);
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
    if (v34 <= v41 * 2.22044605e-16) {
      goto LABEL_37;
    }
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v24 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 208) = 2;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v12 == 1 && v18 == 1 && v24 == -1)
  {
    *(_DWORD *)(a3 + 40) = 1;
    if (v33 == -1) {
      int v35 = 1;
    }
    else {
      int v35 = 3;
    }
    *(_DWORD *)(a3 + 208) = v35;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v12 == v18 && v12 == v24)
  {
    unsigned int v36 = (v24 == 1) ^ (v33 == 0);
    if (v33 * v12 == -1)
    {
      int v37 = sub_1002D1488(a6);
      if (sub_1002D1524(a6) * v37 == 1 && sub_1002D15E0(a6) * v33 == -1) {
        v36 ^= 1u;
      }
    }
    uint64_t v38 = a3 + 40;
    *(_DWORD *)(v38 + 168 * v36) = 1;
    *(_DWORD *)(v38 + 168 * (v36 ^ 1)) = 2;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v18)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }
  else
  {
    if (v12 == v24)
    {
      int v39 = 4;
      *(_DWORD *)(a3 + 40) = 4;
    }
    else
    {
      if (v24 == 1) {
        int v40 = 2;
      }
      else {
        int v40 = 1;
      }
      *(_DWORD *)(a3 + 40) = v40;
      int v39 = 3;
    }
    *(_DWORD *)(a3 + 208) = v39;
  }
}

void sub_1002CC6AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  int v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_1003FAAF0;
    *(void *)(a3 + 104) = 0;
    int v9 = a5[10];
    if (v9 != 1) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  if (v8 != 1)
  {
    long long v10 = *(_OWORD *)(a4 + 40);
    *(void *)(a3 + 104) = *(void *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v10;
    int v9 = a5[10];
    if (v9 != 1) {
      goto LABEL_6;
    }
LABEL_9:
    *(int64x2_t *)(a3 + 256) = vdupq_n_s64(1uLL);
    *(void *)(a3 + 272) = 0x412E848000000000;
    goto LABEL_11;
  }
  *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
  *(void *)(a3 + 104) = 0x412E848000000000;
  int v9 = a5[10];
  if (v9 == 1) {
    goto LABEL_9;
  }
LABEL_6:
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 256) = xmmword_1003FAAF0;
    *(void *)(a3 + 272) = 0;
  }
  else
  {
    long long v11 = *(_OWORD *)(a4 + 64);
    *(void *)(a3 + 272) = *(void *)(a4 + 80);
    *(_OWORD *)(a3 + 256) = v11;
  }
LABEL_11:
  int v12 = a5[5];
  uint64_t v13 = *(void *)(a6 + 8);
  uint64_t v14 = *(uint64_t **)(v13 + 16);
  unint64_t v15 = *(uint64_t **)(v13 + 24);
  uint64_t v16 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 16));
  double v40 = 1.0;
  double v17 = sub_1002CEBF4(v14, v15, v16, &v40);
  if (v17 == 0.0) {
    goto LABEL_12;
  }
  if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    double v19 = fabs(v17);
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
    if (v19 > v40 * 2.22044605e-16)
    {
      if (v12 + v18) {
        goto LABEL_25;
      }
      goto LABEL_20;
    }
LABEL_12:
    int v18 = 0;
    if (v12) {
      goto LABEL_25;
    }
LABEL_20:
    uint64_t v20 = a3 + 40;
    *(_DWORD *)(v20 + 168 * (v18 == -1)) = 1;
    *(_DWORD *)(v20 + 168 * (v18 != -1)) = 2;
    return;
  }
  if (v17 > 0.0) {
    int v18 = 1;
  }
  else {
    int v18 = -1;
  }
  if (!(v12 + v18)) {
    goto LABEL_20;
  }
LABEL_25:
  uint64_t v21 = *(void *)(a6 + 16);
  uint64_t v22 = *(uint64_t **)(v21 + 16);
  double v23 = *(uint64_t **)(v21 + 24);
  int v24 = (uint64_t *)sub_1002CEAE0(v21);
  double v40 = 1.0;
  double v25 = sub_1002CEBF4(v22, v23, v24, &v40);
  if (v25 == 0.0)
  {
LABEL_26:
    int v26 = 0;
    goto LABEL_36;
  }
  if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0) {
      int v26 = 1;
    }
    else {
      int v26 = -1;
    }
  }
  else
  {
    double v27 = fabs(v25);
    if (v25 > 0.0) {
      int v26 = 1;
    }
    else {
      int v26 = -1;
    }
    if (v27 <= v40 * 2.22044605e-16) {
      goto LABEL_26;
    }
  }
LABEL_36:
  uint64_t v28 = *(void *)(a6 + 16);
  uint64_t v29 = *(uint64_t **)(v28 + 24);
  double v30 = (uint64_t *)sub_1002CEAE0(v28);
  char v31 = *(uint64_t **)(*(void *)(a6 + 8) + 24);
  double v40 = 1.0;
  double v32 = sub_1002CEBF4(v29, v30, v31, &v40);
  if (v32 == 0.0)
  {
LABEL_37:
    int v33 = 0;
    goto LABEL_47;
  }
  if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
  }
  else
  {
    double v34 = fabs(v32);
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
    if (v34 <= v40 * 2.22044605e-16) {
      goto LABEL_37;
    }
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v26 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 208) = 2;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v12 == 1 && v18 == 1 && v26 == -1)
  {
    if (v33 == -1) {
      int v35 = 1;
    }
    else {
      int v35 = 3;
    }
    *(_DWORD *)(a3 + 40) = v35;
    *(_DWORD *)(a3 + 208) = 1;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v12 == v18 && v12 == v26)
  {
    unsigned int v36 = (v26 == 1) ^ (v33 != 0);
    if (v33 * v12 == -1)
    {
      int v37 = sub_1002D1488(a6);
      if (sub_1002D1524(a6) * v37 == 1 && sub_1002D15E0(a6) * v33 == -1) {
        v36 ^= 1u;
      }
    }
    uint64_t v38 = a3 + 40;
    *(_DWORD *)(v38 + 168 * v36) = 1;
    *(_DWORD *)(v38 + 168 * (v36 ^ 1)) = 2;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v18)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }
  else if (v12 == v26)
  {
    *(_DWORD *)(a3 + 40) = 4;
    *(_DWORD *)(a3 + 208) = 4;
  }
  else
  {
    if (v26 == 1) {
      int v39 = 2;
    }
    else {
      int v39 = 1;
    }
    *(_DWORD *)(a3 + 208) = v39;
    *(_DWORD *)(a3 + 40) = 3;
  }
}

void sub_1002CCAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  *(_DWORD *)(a3 + 16) = 3;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  int v9 = a5[9];
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_1003FAAF0;
    *(void *)(a3 + 104) = 0;
    int v10 = a5[10];
    if (v10 == 1) {
      goto LABEL_4;
    }
  }
  else if (v9 == 1)
  {
    *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
    *(void *)(a3 + 104) = 0x412E848000000000;
    int v10 = a5[10];
    if (v10 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 256) = vdupq_n_s64(1uLL);
      *(void *)(a3 + 272) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    long long v11 = *(_OWORD *)(a4 + 40);
    *(void *)(a3 + 104) = *(void *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v11;
    int v10 = a5[10];
    if (v10 == 1) {
      goto LABEL_4;
    }
  }
  if (v10 == -1)
  {
    *(_OWORD *)(a3 + 256) = xmmword_1003FAAF0;
    *(void *)(a3 + 272) = 0;
  }
  else
  {
    long long v12 = *(_OWORD *)(a4 + 64);
    *(void *)(a3 + 272) = *(void *)(a4 + 80);
    *(_OWORD *)(a3 + 256) = v12;
  }
LABEL_11:
  uint64_t v13 = *(void *)(a6 + 16);
  uint64_t v14 = *(uint64_t **)(v13 + 16);
  unint64_t v15 = *(uint64_t **)(v13 + 24);
  uint64_t v16 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 8));
  double v80 = 1.0;
  double v17 = sub_1002CEBF4(v14, v15, v16, &v80);
  if (v17 == 0.0)
  {
LABEL_12:
    int v18 = 0;
    goto LABEL_22;
  }
  if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
  }
  else
  {
    double v19 = fabs(v17);
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
    if (v19 <= v80 * 2.22044605e-16) {
      goto LABEL_12;
    }
  }
LABEL_22:
  int v20 = a5[7];
  uint64_t v21 = *(void *)(a6 + 8);
  uint64_t v22 = *(uint64_t **)(v21 + 16);
  double v23 = *(uint64_t **)(v21 + 24);
  int v24 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 16));
  double v80 = 1.0;
  double v25 = sub_1002CEBF4(v22, v23, v24, &v80);
  if (v25 == 0.0)
  {
LABEL_23:
    int v26 = 0;
    goto LABEL_33;
  }
  if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0) {
      int v26 = 1;
    }
    else {
      int v26 = -1;
    }
    if (v26 * v20 != -1) {
      goto LABEL_33;
    }
LABEL_24:
    uint64_t v27 = *(void *)(a6 + 8);
    uint64_t v28 = *(uint64_t **)(v27 + 16);
    uint64_t v29 = *(uint64_t **)(v27 + 24);
    double v30 = (uint64_t *)sub_1002CEAE0(v27);
    double v80 = 1.0;
    double v31 = sub_1002CEBF4(v28, v29, v30, &v80);
    if (v31 != 0.0)
    {
      if ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v31 > 0.0) {
          int v32 = 1;
        }
        else {
          int v32 = -1;
        }
        if (v32 != v20) {
          goto LABEL_139;
        }
LABEL_52:
        if (!v18)
        {
          *(_DWORD *)(a3 + 40) = 3;
          BOOL v74 = v26 == 1;
          goto LABEL_170;
        }
        if (v18 == v26)
        {
          if (v26 == 1) {
            int v42 = 1;
          }
          else {
            int v42 = 2;
          }
          *(_DWORD *)(a3 + 40) = v42;
          goto LABEL_165;
        }
LABEL_139:
        if (v32 == v26)
        {
          uint64_t v69 = *(void *)(a6 + 16);
          long long v70 = *(uint64_t **)(v69 + 24);
          uint64_t v71 = (uint64_t *)sub_1002CEAE0(v69);
          double v72 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 8));
          double v80 = 1.0;
          double v73 = sub_1002CEBF4(v70, v71, v72, &v80);
          if (v73 == 0.0) {
            goto LABEL_141;
          }
          if ((*(void *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v73 > 0.0) {
              int v76 = 1;
            }
            else {
              int v76 = -1;
            }
          }
          else
          {
            double v75 = fabs(v73);
            if (v73 > 0.0) {
              int v76 = 1;
            }
            else {
              int v76 = -1;
            }
            if (v75 <= v80 * 2.22044605e-16) {
              goto LABEL_141;
            }
          }
          if (v76 == v26)
          {
            if (v26 == 1) {
              int v78 = 1;
            }
            else {
              int v78 = 2;
            }
            *(_DWORD *)(a3 + 40) = v78;
            if (v26 == 1) {
              int v42 = 2;
            }
            else {
              int v42 = 1;
            }
            goto LABEL_165;
          }
        }
        BOOL v74 = v26 == 1;
        if (v26 == 1) {
          int v79 = 2;
        }
        else {
          int v79 = 1;
        }
        *(_DWORD *)(a3 + 40) = v79;
LABEL_170:
        if (v74) {
          int v62 = 1;
        }
        else {
          int v62 = 2;
        }
        goto LABEL_173;
      }
      double v41 = fabs(v31);
      if (v31 > 0.0) {
        int v32 = 1;
      }
      else {
        int v32 = -1;
      }
      if (v41 > v80 * 2.22044605e-16)
      {
        if (v32 != v20) {
          goto LABEL_139;
        }
        goto LABEL_52;
      }
    }
    int v32 = 0;
    if (v20) {
      goto LABEL_139;
    }
    goto LABEL_52;
  }
  double v33 = fabs(v25);
  if (v25 > 0.0) {
    int v26 = 1;
  }
  else {
    int v26 = -1;
  }
  if (v33 <= v80 * 2.22044605e-16) {
    goto LABEL_23;
  }
  if (v26 * v20 == -1) {
    goto LABEL_24;
  }
LABEL_33:
  uint64_t v34 = *(void *)(a6 + 16);
  int v35 = *(uint64_t **)(v34 + 24);
  unsigned int v36 = (uint64_t *)sub_1002CEAE0(v34);
  int v37 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 8));
  double v80 = 1.0;
  double v38 = sub_1002CEBF4(v35, v36, v37, &v80);
  if (v38 == 0.0)
  {
LABEL_34:
    int v39 = 0;
    goto LABEL_61;
  }
  if ((*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v38 > 0.0) {
      int v39 = 1;
    }
    else {
      int v39 = -1;
    }
  }
  else
  {
    double v40 = fabs(v38);
    if (v38 > 0.0) {
      int v39 = 1;
    }
    else {
      int v39 = -1;
    }
    if (v40 <= v80 * 2.22044605e-16) {
      goto LABEL_34;
    }
  }
LABEL_61:
  uint64_t v43 = *(void *)(a6 + 8);
  int v44 = *(uint64_t **)(v43 + 16);
  uint64_t v45 = *(uint64_t **)(v43 + 24);
  uint64_t v46 = (uint64_t *)sub_1002CEAE0(v43);
  double v80 = 1.0;
  double v47 = sub_1002CEBF4(v44, v45, v46, &v80);
  if (v47 != 0.0)
  {
    if ((*(void *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v47 > 0.0) {
        int v48 = 1;
      }
      else {
        int v48 = -1;
      }
      goto LABEL_72;
    }
    double v49 = fabs(v47);
    if (v47 > 0.0) {
      int v48 = 1;
    }
    else {
      int v48 = -1;
    }
    if (v49 > v80 * 2.22044605e-16) {
      goto LABEL_72;
    }
  }
  int v48 = 0;
LABEL_72:
  uint64_t v50 = *(void *)(a6 + 16);
  double v51 = *(uint64_t **)(v50 + 16);
  uint64_t v52 = *(uint64_t **)(v50 + 24);
  double v53 = (uint64_t *)sub_1002CEAE0(v50);
  double v80 = 1.0;
  double v54 = sub_1002CEBF4(v51, v52, v53, &v80);
  if (v54 == 0.0) {
    goto LABEL_73;
  }
  if ((*(void *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v54 > 0.0) {
      int v55 = 1;
    }
    else {
      int v55 = -1;
    }
    goto LABEL_83;
  }
  double v56 = fabs(v54);
  int v55 = v54 > 0.0 ? 1 : -1;
  if (v56 <= v80 * 2.22044605e-16) {
LABEL_73:
  }
    int v55 = 0;
LABEL_83:
  if (v26) {
    BOOL v57 = 1;
  }
  else {
    BOOL v57 = v55 * v20 == 1;
  }
  int v58 = !v57;
  if (v48 == v20 || v48 == v26 || !(v26 | v20) && v48 != -1)
  {
    if (v39) {
      char v59 = 1;
    }
    else {
      char v59 = v58;
    }
    if (v59)
    {
      if (!v18)
      {
        *(_DWORD *)(a3 + 40) = 3;
        if (v55 == 1) {
          int v66 = 2;
        }
        else {
          int v66 = 1;
        }
        if (v58) {
          int v62 = 3;
        }
        else {
          int v62 = v66;
        }
        goto LABEL_173;
      }
      if (v18 == v39 && v55 * v18 != -1)
      {
        if (v55 == 1) {
          int v60 = 1;
        }
        else {
          int v60 = 2;
        }
        *(_DWORD *)(a3 + 40) = v60;
        if (v55 == 1) {
          int v61 = 2;
        }
        else {
          int v61 = 1;
        }
        if (v58) {
          int v62 = 3;
        }
        else {
          int v62 = v61;
        }
        goto LABEL_173;
      }
      if (!(v39 + v55))
      {
        BOOL v67 = v55 == 1;
        if (v55 == 1) {
          int v68 = 2;
        }
        else {
          int v68 = 1;
        }
        *(_DWORD *)(a3 + 40) = v68;
        if (v67) {
          int v42 = 1;
        }
        else {
          int v42 = 2;
        }
LABEL_165:
        *(_DWORD *)(a3 + 208) = v42;
        *(unsigned char *)(a3 + 20) = 1;
        return;
      }
      if (v18 != -v55) {
        return;
      }
      if (v55 == 1) {
        int v77 = 2;
      }
      else {
        int v77 = 1;
      }
      *(_DWORD *)(a3 + 40) = v77;
      *(_DWORD *)(a3 + 208) = v77;
      if (v58)
      {
        int v62 = 3;
        goto LABEL_173;
      }
LABEL_121:
      *(unsigned char *)(a3 + 20) = 1;
      return;
    }
LABEL_141:
    int v62 = 4;
    *(_DWORD *)(a3 + 40) = 4;
LABEL_173:
    *(_DWORD *)(a3 + 208) = v62;
    return;
  }
  if (v55 == 1) {
    int v63 = 2;
  }
  else {
    int v63 = 1;
  }
  *(_DWORD *)(a3 + 40) = v63;
  if (v26 == 1 || v20 == 1) {
    int v65 = 1;
  }
  else {
    int v65 = 2;
  }
  if (v58) {
    int v65 = 3;
  }
  *(_DWORD *)(a3 + 208) = v65;
  if ((v58 & 1) == 0) {
    goto LABEL_121;
  }
}

double sub_1002CD170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v12 = sub_1002CFCC4((double *)(a4 + 64), (double *)(a4 + 120));
  uint64_t v13 = a4 + 56 * v12;
  *(_DWORD *)(a3 + 16) = 5;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v12 + 8);
  uint64_t v14 = *(void *)(v13 + 56);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(v13 + 40);
  *(void *)(a3 + 104) = v14;
  uint64_t v15 = *(void *)(v13 + 80);
  *(_OWORD *)(a3 + 256) = *(_OWORD *)(v13 + 64);
  *(void *)(a3 + 272) = v15;
  int v16 = *(_DWORD *)(a5 + 36);
  uint64_t v17 = *(void *)(a6 + 8);
  int v18 = *(uint64_t **)(v17 + 16);
  double v19 = *(uint64_t **)(v17 + 24);
  int v20 = (uint64_t *)sub_1002CEAE0(v17);
  double v42 = 1.0;
  double v21 = sub_1002CEBF4(v18, v19, v20, &v42);
  if (v21 != 0.0)
  {
    if ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v21 > 0.0) {
        int v22 = 1;
      }
      else {
        int v22 = -1;
      }
      goto LABEL_3;
    }
    double v39 = fabs(v21);
    if (v21 > 0.0) {
      int v22 = 1;
    }
    else {
      int v22 = -1;
    }
    if (v39 > v42 * 2.22044605e-16) {
      goto LABEL_3;
    }
  }
  int v22 = 0;
LABEL_3:
  uint64_t v23 = *(void *)(a6 + 16);
  int v24 = *(uint64_t **)(v23 + 16);
  double v25 = *(uint64_t **)(v23 + 24);
  int v26 = (uint64_t *)sub_1002CEAE0(v23);
  double v42 = 1.0;
  double v27 = sub_1002CEBF4(v24, v25, v26, &v42);
  if (v27 == 0.0) {
    goto LABEL_4;
  }
  if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v27 > 0.0) {
      int v28 = 1;
    }
    else {
      int v28 = -1;
    }
    goto LABEL_5;
  }
  double v40 = fabs(v27);
  int v28 = v27 > 0.0 ? 1 : -1;
  if (v40 <= v42 * 2.22044605e-16) {
LABEL_4:
  }
    int v28 = 0;
LABEL_5:
  if (v16 == 1) {
    int v29 = v22;
  }
  else {
    int v29 = v28;
  }
  int v30 = v29 * v16;
  if (v30 == 1) {
    int v31 = 1;
  }
  else {
    int v31 = 2;
  }
  if (v30 == 1) {
    int v32 = 2;
  }
  else {
    int v32 = 1;
  }
  if (v30)
  {
    int v33 = v32;
  }
  else
  {
    int v31 = 4;
    int v33 = 4;
  }
  *(_DWORD *)(a3 + 40) = v31;
  *(_DWORD *)(a3 + 208) = v33;
  if (v22)
  {
    double v34 = *(double *)a3;
    double v35 = *(double *)(a3 + 8);
    *(double *)(a3 + 112) = (v35 - *(double *)(*(void *)(a1 + 24) + 8))
                          * (v35 - *(double *)(*(void *)(a1 + 24) + 8))
                          + (*(double *)a3 - **(double **)(a1 + 24)) * (*(double *)a3 - **(double **)(a1 + 24));
    if (v28)
    {
LABEL_19:
      unsigned int v36 = *(double **)(a2 + 24);
      double v37 = *v36;
      double v38 = v36[1];
      goto LABEL_38;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 80))
    {
      sub_1002CD91C(a1, *(double **)(a1 + 24), a1 + 32);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)*(void *)(a1 + 32);
      *(unsigned char *)(a1 + 80) = 1;
    }
    double v34 = *(double *)a3;
    double v35 = *(double *)(a3 + 8);
    *(double *)(a3 + 112) = (v35 - *(double *)(a1 + 72)) * (v35 - *(double *)(a1 + 72))
                          + (*(double *)a3 - *(double *)(a1 + 64)) * (*(double *)a3 - *(double *)(a1 + 64));
    if (v28) {
      goto LABEL_19;
    }
  }
  if (!*(unsigned char *)(a2 + 80))
  {
    sub_1002CD91C(a2, *(double **)(a2 + 24), a2 + 32);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)*(void *)(a2 + 32);
    *(unsigned char *)(a2 + 80) = 1;
    double v34 = *(double *)a3;
    double v35 = *(double *)(a3 + 8);
  }
  double v37 = *(double *)(a2 + 64);
  double v38 = *(double *)(a2 + 72);
LABEL_38:
  double result = (v35 - v38) * (v35 - v38) + (v34 - v37) * (v34 - v37);
  *(double *)(a3 + 280) = result;
  return result;
}

void sub_1002CD414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v9 = sub_1002CFCC4((double *)(a4 + 64), (double *)(a4 + 120));
  uint64_t v10 = a4 + 56 * v9;
  *(_DWORD *)(a3 + 16) = 6;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v9 + 8);
  uint64_t v11 = *(void *)(v10 + 56);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(v10 + 40);
  *(void *)(a3 + 104) = v11;
  uint64_t v12 = *(void *)(v10 + 80);
  *(_OWORD *)(a3 + 256) = *(_OWORD *)(v10 + 64);
  *(void *)(a3 + 272) = v12;
  uint64_t v13 = *(void *)(a6 + 16);
  uint64_t v14 = *(uint64_t **)(v13 + 24);
  uint64_t v15 = (uint64_t *)sub_1002CEAE0(v13);
  int v16 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 8));
  double v38 = 1.0;
  double v17 = sub_1002CEBF4(v14, v15, v16, &v38);
  if (v17 == 0.0)
  {
LABEL_2:
    int v18 = 0;
    goto LABEL_12;
  }
  if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
  }
  else
  {
    double v19 = fabs(v17);
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
    if (v19 <= v38 * 2.22044605e-16) {
      goto LABEL_2;
    }
  }
LABEL_12:
  uint64_t v20 = *(void *)(a6 + 8);
  double v21 = *(uint64_t **)(v20 + 16);
  int v22 = *(uint64_t **)(v20 + 24);
  uint64_t v23 = (uint64_t *)sub_1002CEAE0(v20);
  double v38 = 1.0;
  double v24 = sub_1002CEBF4(v21, v22, v23, &v38);
  if (v24 == 0.0)
  {
LABEL_13:
    int v25 = 0;
    goto LABEL_23;
  }
  if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v24 > 0.0) {
      int v25 = 1;
    }
    else {
      int v25 = -1;
    }
  }
  else
  {
    double v26 = fabs(v24);
    if (v24 > 0.0) {
      int v25 = 1;
    }
    else {
      int v25 = -1;
    }
    if (v26 <= v38 * 2.22044605e-16) {
      goto LABEL_13;
    }
  }
LABEL_23:
  uint64_t v28 = *(void *)(a6 + 8);
  uint64_t v27 = *(void *)(a6 + 16);
  int v29 = *(uint64_t **)(v28 + 16);
  int v30 = *(uint64_t **)(v28 + 24);
  int v31 = (uint64_t *)sub_1002CEAE0(v27);
  double v38 = 1.0;
  double v32 = sub_1002CEBF4(v29, v30, v31, &v38);
  if (v32 == 0.0)
  {
LABEL_24:
    int v33 = 0;
    goto LABEL_34;
  }
  if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    double v34 = fabs(v32);
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
    if (v34 > v38 * 2.22044605e-16) {
      goto LABEL_34;
    }
    goto LABEL_24;
  }
  if (v32 > 0.0) {
    int v33 = 1;
  }
  else {
    int v33 = -1;
  }
LABEL_34:
  if (v18 || v25 != v33)
  {
    if (v33 * v25 == -1) {
      BOOL v36 = v25 == -1;
    }
    else {
      BOOL v36 = v18 == -1;
    }
    if (v36) {
      int v37 = 2;
    }
    else {
      int v37 = 1;
    }
    *(_DWORD *)(a3 + 40) = v37;
    if (v36) {
      int v35 = 1;
    }
    else {
      int v35 = 2;
    }
  }
  else
  {
    int v35 = 4;
    *(_DWORD *)(a3 + 40) = 4;
  }
  *(_DWORD *)(a3 + 208) = v35;
}

uint64_t sub_1002CD678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 64) = a4;
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 80) = a3;
  *(_WORD *)(a1 + 120) = 0;
  int v8 = *(double **)(a2 + 16);
  double v9 = (double)*(uint64_t *)(a4 + 24) + (v8[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v9 >= 0.0) {
    double v10 = 0.5;
  }
  else {
    double v10 = -0.5;
  }
  double v11 = v9 + v10;
  sub_1002C5028(v9 + v10);
  double v12 = ceil(v11);
  double v13 = floor(v11);
  if (v11 >= 0.0) {
    double v12 = v13;
  }
  *(void *)(a1 + 8) = (uint64_t)v12;
  double v14 = (double)*(uint64_t *)(a4 + 16) + (*v8 - *(double *)a4) * *(double *)(a4 + 32);
  if (v14 >= 0.0) {
    double v15 = 0.5;
  }
  else {
    double v15 = -0.5;
  }
  double v16 = v14 + v15;
  sub_1002C5028(v14 + v15);
  double v17 = ceil(v16);
  double v18 = floor(v16);
  if (v16 >= 0.0) {
    double v17 = v18;
  }
  *(void *)a1 = (uint64_t)v17;
  double v19 = *(double **)(a2 + 24);
  double v20 = (double)*(uint64_t *)(a4 + 24) + (v19[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v20 >= 0.0) {
    double v21 = 0.5;
  }
  else {
    double v21 = -0.5;
  }
  double v22 = v20 + v21;
  sub_1002C5028(v20 + v21);
  double v23 = ceil(v22);
  double v24 = floor(v22);
  if (v22 >= 0.0) {
    double v23 = v24;
  }
  *(void *)(a1 + 24) = (uint64_t)v23;
  double v25 = (double)*(uint64_t *)(a4 + 16) + (*v19 - *(double *)a4) * *(double *)(a4 + 32);
  if (v25 >= 0.0) {
    double v26 = 0.5;
  }
  else {
    double v26 = -0.5;
  }
  double v27 = v25 + v26;
  sub_1002C5028(v25 + v26);
  double v28 = ceil(v27);
  double v29 = floor(v27);
  if (v27 >= 0.0) {
    double v28 = v29;
  }
  *(void *)(a1 + 16) = (uint64_t)v28;
  int v30 = *(double **)(a3 + 16);
  double v31 = (double)*(uint64_t *)(a4 + 24) + (v30[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v31 >= 0.0) {
    double v32 = 0.5;
  }
  else {
    double v32 = -0.5;
  }
  double v33 = v31 + v32;
  sub_1002C5028(v31 + v32);
  double v34 = ceil(v33);
  double v35 = floor(v33);
  if (v33 >= 0.0) {
    double v34 = v35;
  }
  *(void *)(a1 + 40) = (uint64_t)v34;
  double v36 = (double)*(uint64_t *)(a4 + 16) + (*v30 - *(double *)a4) * *(double *)(a4 + 32);
  if (v36 >= 0.0) {
    double v37 = 0.5;
  }
  else {
    double v37 = -0.5;
  }
  double v38 = v36 + v37;
  sub_1002C5028(v36 + v37);
  double v39 = ceil(v38);
  double v40 = floor(v38);
  if (v38 >= 0.0) {
    double v39 = v40;
  }
  *(void *)(a1 + 32) = (uint64_t)v39;
  double v41 = *(double **)(a3 + 24);
  double v42 = (double)*(uint64_t *)(a4 + 24) + (v41[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v42 >= 0.0) {
    double v43 = 0.5;
  }
  else {
    double v43 = -0.5;
  }
  double v44 = v42 + v43;
  sub_1002C5028(v42 + v43);
  double v45 = ceil(v44);
  double v46 = floor(v44);
  if (v44 >= 0.0) {
    double v45 = v46;
  }
  *(void *)(a1 + 56) = (uint64_t)v45;
  double v47 = (double)*(uint64_t *)(a4 + 16) + (*v41 - *(double *)a4) * *(double *)(a4 + 32);
  if (v47 >= 0.0) {
    double v48 = 0.5;
  }
  else {
    double v48 = -0.5;
  }
  double v49 = v47 + v48;
  sub_1002C5028(v47 + v48);
  double v50 = ceil(v49);
  double v51 = floor(v49);
  if (v49 >= 0.0) {
    double v50 = v51;
  }
  *(void *)(a1 + 48) = (uint64_t)v50;
  return a1;
}

void sub_1002CD91C(uint64_t a1, double *a2, uint64_t a3)
{
  double v6 = (double)*(uint64_t *)(a1 + 112) + (a2[1] - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
  if (v6 >= 0.0) {
    double v7 = 0.5;
  }
  else {
    double v7 = -0.5;
  }
  double v8 = v6 + v7;
  sub_1002C5028(v6 + v7);
  double v9 = ceil(v8);
  double v10 = floor(v8);
  if (v8 >= 0.0) {
    double v9 = v10;
  }
  uint64_t v11 = (uint64_t)v9;
  double v12 = (double)*(uint64_t *)(a1 + 104) + (*a2 - *(double *)(a1 + 88)) * *(double *)(a1 + 120);
  if (v12 >= 0.0) {
    double v13 = 0.5;
  }
  else {
    double v13 = -0.5;
  }
  double v14 = v12 + v13;
  sub_1002C5028(v12 + v13);
  double v15 = ceil(v14);
  double v16 = floor(v14);
  if (v14 >= 0.0) {
    double v15 = v16;
  }
  uint64_t v17 = (uint64_t)v15;
  double v18 = *(double **)a3;
  double v19 = (double)*(uint64_t *)(a1 + 112)
      + (*(double *)(*(void *)a3 + 8) - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
  if (v19 >= 0.0) {
    double v20 = 0.5;
  }
  else {
    double v20 = -0.5;
  }
  double v21 = v19 + v20;
  sub_1002C5028(v19 + v20);
  double v22 = ceil(v21);
  double v23 = floor(v21);
  if (v21 >= 0.0) {
    double v24 = v23;
  }
  else {
    double v24 = v22;
  }
  double v25 = (double)*(uint64_t *)(a1 + 104) + (*v18 - *(double *)(a1 + 88)) * *(double *)(a1 + 120);
  if (v25 >= 0.0) {
    double v26 = 0.5;
  }
  else {
    double v26 = -0.5;
  }
  double v27 = v25 + v26;
  sub_1002C5028(v25 + v26);
  double v28 = ceil(v27);
  double v29 = floor(v27);
  if (v27 >= 0.0) {
    double v28 = v29;
  }
  if (v17 == (uint64_t)v28 && v11 == (uint64_t)v24)
  {
    uint64_t v31 = -1;
    do
    {
      if ((unint64_t)++v31 >= *(void *)(*(void *)a1 + 88)) {
        break;
      }
      double v45 = *(double **)a3;
      double v32 = (double *)(*(void *)a3 + 16);
      *(void *)a3 = v32;
      if (v32 == *(double **)(a3 + 16))
      {
        double v46 = *(double **)(a3 + 8);
        *(void *)a3 = v46;
        if (*(unsigned char *)(a3 + 24))
        {
          double v32 = v46 + 2;
          *(void *)a3 = v46 + 2;
          if (v45 == v46)
          {
            *(void *)a3 = v46;
            double v32 = v45;
          }
        }
        else
        {
          double v32 = v46;
        }
      }
      double v33 = (double)*(uint64_t *)(a1 + 112) + (v32[1] - *(double *)(a1 + 96)) * *(double *)(a1 + 120);
      if (v33 >= 0.0) {
        double v34 = 0.5;
      }
      else {
        double v34 = -0.5;
      }
      double v35 = v33 + v34;
      sub_1002C5028(v33 + v34);
      double v36 = ceil(v35);
      double v37 = floor(v35);
      if (v35 >= 0.0) {
        double v38 = v37;
      }
      else {
        double v38 = v36;
      }
      double v39 = (double)*(uint64_t *)(a1 + 104) + (*v32 - *(double *)(a1 + 88)) * *(double *)(a1 + 120);
      if (v39 >= 0.0) {
        double v40 = 0.5;
      }
      else {
        double v40 = -0.5;
      }
      double v41 = v39 + v40;
      sub_1002C5028(v39 + v40);
      double v42 = ceil(v41);
      double v43 = floor(v41);
      if (v41 >= 0.0) {
        double v42 = v43;
      }
    }
    while (v17 == (uint64_t)v42 && v11 == (uint64_t)v38);
  }
}

double sub_1002CDB78@<D0>(uint64_t a1@<X0>, long long **a2@<X1>, double **a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  double v9 = *(uint64_t **)(a4 + 16);
  double v8 = *(uint64_t **)(a4 + 24);
  uint64_t v11 = *(uint64_t **)(a5 + 16);
  double v10 = *(uint64_t **)(a5 + 24);
  uint64_t v13 = *v9;
  uint64_t v12 = v9[1];
  uint64_t v15 = *v8;
  uint64_t v14 = v8[1];
  BOOL v17 = *v9 == *v8 && v12 == v14;
  uint64_t v19 = *v11;
  uint64_t v18 = v11[1];
  uint64_t v21 = *v10;
  uint64_t v20 = v10[1];
  BOOL v23 = *v11 == *v10 && v18 == v20;
  if (v17 && v23)
  {
    double v34 = (void *)(a6 + 56);
    double v35 = (void *)(a6 + 112);
    if (v13 == v19 && v12 == v18)
    {
      *double v34 = 0;
      *(void *)(a6 + 64) = 0;
      *double v35 = 0;
      *(void *)(a6 + 120) = 0;
      double v38 = *a2;
      memset(&v94[2], 0, 40);
      *(void *)a6 = 1;
      *(_OWORD *)(a6 + 8) = *v38;
      *(_OWORD *)(a6 + 40) = xmmword_1003FAAF0;
      *(_OWORD *)(a6 + 96) = xmmword_1003FAAF0;
      *(_OWORD *)(a6 + 180) = *(_OWORD *)&v94[26];
      double result = *(double *)&v94[16];
      long long v40 = *(_OWORD *)v94;
      *(_OWORD *)(a6 + 170) = *(_OWORD *)&v94[16];
      *(void *)(a6 + 72) = 1;
      *(void *)(a6 + 80) = 0;
      *(unsigned char *)(a6 + 88) = 0;
      *(void *)(a6 + 128) = 1;
      *(void *)(a6 + 136) = 0;
      *(unsigned char *)(a6 + 144) = 0;
      *(_WORD *)(a6 + 152) = 48;
      *(_OWORD *)(a6 + 154) = v40;
      return result;
    }
    memset(&v94[2], 0, 32);
    *(_OWORD *)(a6 + 40) = xmmword_1003FAAF0;
    *(_OWORD *)(a6 + 96) = xmmword_1003FAAF0;
    long long v37 = *(_OWORD *)&v94[16];
    *(_OWORD *)(a6 + 154) = *(_OWORD *)v94;
    *double v34 = 0;
    *(void *)(a6 + 64) = 0;
    *double v35 = 0;
    *(void *)(a6 + 120) = 0;
    goto LABEL_100;
  }
  if (v13 >= v15) {
    uint64_t v25 = *v8;
  }
  else {
    uint64_t v25 = *v9;
  }
  if (v13 <= v15) {
    uint64_t v13 = *v8;
  }
  if (v19 >= v21) {
    uint64_t v26 = *v10;
  }
  else {
    uint64_t v26 = *v11;
  }
  if (v19 <= v21) {
    uint64_t v19 = *v10;
  }
  if (v13 < v26 || v19 < v25) {
    goto LABEL_99;
  }
  if (v12 >= v14) {
    uint64_t v28 = v8[1];
  }
  else {
    uint64_t v28 = v9[1];
  }
  if (v12 > v14) {
    uint64_t v14 = v9[1];
  }
  if (v18 >= v20) {
    uint64_t v29 = v10[1];
  }
  else {
    uint64_t v29 = v11[1];
  }
  if (v18 > v20) {
    uint64_t v20 = v11[1];
  }
  if (v14 < v29 || v20 < v28)
  {
LABEL_99:
    memset(&v94[2], 0, 32);
    *(_OWORD *)(a6 + 40) = xmmword_1003FAAF0;
    *(_OWORD *)(a6 + 96) = xmmword_1003FAAF0;
    long long v37 = *(_OWORD *)&v94[16];
    *(_OWORD *)(a6 + 154) = *(_OWORD *)v94;
    *(void *)(a6 + 56) = 0;
    *(void *)(a6 + 64) = 0;
    *(void *)(a6 + 112) = 0;
    *(void *)(a6 + 120) = 0;
LABEL_100:
    *(void *)&v94[34] = 0;
    *(void *)a6 = 0;
    *(void *)(a6 + 72) = 1;
    *(void *)(a6 + 80) = 0;
    *(unsigned char *)(a6 + 88) = 0;
    *(void *)(a6 + 128) = 1;
    *(void *)(a6 + 136) = 0;
    *(unsigned char *)(a6 + 144) = 0;
    *(_WORD *)(a6 + 152) = 100;
    *(_OWORD *)(a6 + 170) = v37;
    double result = *(double *)&v94[26];
    *(_OWORD *)(a6 + 180) = *(_OWORD *)&v94[26];
    return result;
  }
  *(void *)double v94 = 0x3FF0000000000000;
  double v32 = sub_1002CEBF4(v11, v10, v9, (double *)v94);
  if (v32 == 0.0) {
    goto LABEL_47;
  }
  if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
  }
  else
  {
    double v41 = fabs(v32);
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
    if (v41 <= *(double *)v94 * 2.22044605e-16) {
LABEL_47:
    }
      int v33 = 0;
  }
  *(void *)double v94 = 0x3FF0000000000000;
  double v42 = sub_1002CEBF4(v11, v10, v8, (double *)v94);
  if (v42 == 0.0)
  {
LABEL_64:
    int v43 = 0;
    goto LABEL_74;
  }
  if ((*(void *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v42 > 0.0) {
      int v43 = 1;
    }
    else {
      int v43 = -1;
    }
  }
  else
  {
    double v44 = fabs(v42);
    if (v42 > 0.0) {
      int v43 = 1;
    }
    else {
      int v43 = -1;
    }
    if (v44 <= *(double *)v94 * 2.22044605e-16) {
      goto LABEL_64;
    }
  }
LABEL_74:
  if (v43 * v33 == 1) {
    goto LABEL_99;
  }
  int v92 = v43;
  *(void *)double v94 = 0x3FF0000000000000;
  double v45 = sub_1002CEBF4(v9, v8, v11, (double *)v94);
  if (v45 == 0.0)
  {
LABEL_76:
    int v91 = 0;
    goto LABEL_87;
  }
  if ((*(void *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v45 > 0.0) {
      int v47 = 1;
    }
    else {
      int v47 = -1;
    }
  }
  else
  {
    double v46 = fabs(v45);
    if (v45 > 0.0) {
      int v47 = 1;
    }
    else {
      int v47 = -1;
    }
    if (v46 <= *(double *)v94 * 2.22044605e-16) {
      goto LABEL_76;
    }
  }
  int v91 = v47;
LABEL_87:
  *(void *)double v94 = 0x3FF0000000000000;
  double v48 = sub_1002CEBF4(v9, v8, v10, (double *)v94);
  if (v48 == 0.0)
  {
LABEL_88:
    int v49 = 0;
    goto LABEL_98;
  }
  if ((*(void *)&v48 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v48 > 0.0) {
      int v49 = 1;
    }
    else {
      int v49 = -1;
    }
  }
  else
  {
    double v50 = fabs(v48);
    if (v48 > 0.0) {
      int v49 = 1;
    }
    else {
      int v49 = -1;
    }
    if (v50 <= *(double *)v94 * 2.22044605e-16) {
      goto LABEL_88;
    }
  }
LABEL_98:
  if (v49 * v91 == 1) {
    goto LABEL_99;
  }
  uint64_t v52 = *v9;
  uint64_t v51 = v9[1];
  uint64_t v53 = *v8 - *v9;
  uint64_t v54 = v10[1];
  uint64_t v55 = *v11;
  uint64_t v56 = v11[1];
  uint64_t v57 = *v10 - *v11;
  uint64_t v58 = v8[1] - v51;
  uint64_t v59 = v54 - v56;
  if (v92 | v33 | v91 | v49)
  {
    int v60 = 0;
    int v61 = 0;
    int v62 = 0;
    int v63 = 0;
    uint64_t v64 = v59 * v53 - v58 * v57;
    if (v64)
    {
      uint64_t v65 = v58 * v57 - v59 * v53;
      if (v65)
      {
        uint64_t v66 = (v51 - v56) * v57 + v59 * (v55 - v52);
        uint64_t v67 = v58 * (v52 - v55) + (v56 - v51) * v53;
        *(void *)(a1 + 32) = v66;
        *(void *)(a1 + 40) = v64;
        if (v64 < 0)
        {
          uint64_t v66 = -v66;
          uint64_t v64 = -v64;
          *(void *)(a1 + 32) = v66;
          *(void *)(a1 + 40) = v64;
        }
        *(double *)(a1 + 48) = (double)v66 * 1000000.0 / (double)v64;
        *(void *)(a1 + 56) = v67;
        *(void *)(a1 + 64) = v65;
        if (v65 < 0)
        {
          uint64_t v67 = -v67;
          uint64_t v65 = -v65;
          *(void *)(a1 + 56) = v67;
          *(void *)(a1 + 64) = v65;
        }
        *(double *)(a1 + 72) = (double)v67 * 1000000.0 / (double)v65;
        int v63 = v49;
        int v62 = v91;
        int v61 = v92;
        int v60 = v33;
LABEL_137:
        int v74 = v63;
        int v75 = v61;
        *(_OWORD *)&v94[40] = xmmword_1003FAAF0;
        *(void *)&v94[56] = 0;
        *(void *)&long long v95 = 0;
        *((void *)&v95 + 1) = 1;
        *(void *)&long long v96 = 0;
        BYTE8(v96) = 0;
        long long v97 = xmmword_1003FAAF0;
        long long v98 = 0uLL;
        long long v99 = 1uLL;
        LOBYTE(v100) = 0;
        *(void *)double v94 = 1;
        int v76 = v60;
        int v77 = (double **)a2;
        int v78 = v62;
        sub_1002D09C8(a1, (double *)&v94[8], v77, a3);
        BYTE8(v96) = 1;
        *(_OWORD *)&v94[40] = *(_OWORD *)(a1 + 32);
        *(void *)&v94[56] = *(void *)(a1 + 48);
        long long v95 = *(_OWORD *)(a1 + 56);
        *(void *)&long long v96 = *(void *)(a1 + 72);
        if (!(v76 | v78))
        {
          int v80 = v74;
          int v81 = -1;
          if (v74 == 1) {
            int v82 = -1;
          }
          else {
            int v82 = 1;
          }
          if (v74 == 1) {
            int v83 = 1;
          }
          else {
            int v83 = -1;
          }
          char v84 = 102;
          int v85 = -1;
          int v79 = v75;
          goto LABEL_189;
        }
        int v79 = v75;
        int v80 = v74;
        if (!(v75 | v74))
        {
          if (v78 == 1) {
            int v82 = -1;
          }
          else {
            int v82 = 1;
          }
          if (v78 == 1) {
            int v83 = 1;
          }
          else {
            int v83 = -1;
          }
          int v81 = 1;
          char v84 = 116;
          int v85 = 1;
          goto LABEL_189;
        }
        if (v75 | v78)
        {
          if (v76 | v74)
          {
            if (v78)
            {
              if (v76)
              {
                if (v74)
                {
                  if (v75)
                  {
                    int v81 = -1;
                    if (v74 == 1) {
                      int v82 = -1;
                    }
                    else {
                      int v82 = 1;
                    }
                    if (v74 == 1) {
                      int v83 = 1;
                    }
                    else {
                      int v83 = -1;
                    }
                    char v84 = 105;
                    int v85 = -1;
                    goto LABEL_189;
                  }
                  int v85 = 0;
                  if (v74 == 1) {
                    int v82 = 1;
                  }
                  else {
                    int v82 = -1;
                  }
                  int v81 = 1;
                }
                else
                {
                  int v81 = 0;
                  if (v75 == 1) {
                    int v82 = 1;
                  }
                  else {
                    int v82 = -1;
                  }
                  int v85 = 1;
                }
                char v84 = 109;
LABEL_178:
                int v83 = v82;
LABEL_189:
                long long v87 = v98;
                *(_OWORD *)(a6 + 96) = v97;
                *(_OWORD *)(a6 + 112) = v87;
                *(_OWORD *)(a6 + 128) = v99;
                *(void *)(a6 + 144) = v100;
                long long v88 = *(_OWORD *)&v94[48];
                *(_OWORD *)(a6 + 32) = *(_OWORD *)&v94[32];
                *(_OWORD *)(a6 + 48) = v88;
                long long v89 = v96;
                *(_OWORD *)(a6 + 64) = v95;
                *(_OWORD *)(a6 + 80) = v89;
                double result = *(double *)v94;
                long long v90 = *(_OWORD *)&v94[16];
                *(_OWORD *)a6 = *(_OWORD *)v94;
                *(_OWORD *)(a6 + 16) = v90;
                *(unsigned char *)(a6 + 152) = v84;
                *(unsigned char *)(a6 + 153) = 0;
                *(_DWORD *)(a6 + 156) = v81;
                *(_DWORD *)(a6 + 160) = v85;
                *(_DWORD *)(a6 + 164) = v82;
                *(_DWORD *)(a6 + 168) = v83;
                *(_DWORD *)(a6 + 172) = v76;
                *(_DWORD *)(a6 + 176) = v79;
                *(_DWORD *)(a6 + 180) = v78;
                *(_DWORD *)(a6 + 184) = v80;
                *(_DWORD *)(a6 + 188) = v81;
                *(_DWORD *)(a6 + 192) = v85;
                return result;
              }
              int v85 = 0;
              BOOL v86 = v74 == 1;
              int v81 = -1;
              if (v74 == 1) {
                int v82 = -1;
              }
              else {
                int v82 = 1;
              }
            }
            else
            {
              int v81 = 0;
              BOOL v86 = v74 == 1;
              int v85 = -1;
              if (v74 == 1) {
                int v82 = -1;
              }
              else {
                int v82 = 1;
              }
            }
            if (v86) {
              int v83 = v74;
            }
            else {
              int v83 = -1;
            }
            char v84 = 115;
            goto LABEL_189;
          }
          if (v78 == 1) {
            int v82 = 1;
          }
          else {
            int v82 = -1;
          }
          int v85 = 1;
          int v81 = -1;
        }
        else
        {
          if (v74 == 1) {
            int v82 = 1;
          }
          else {
            int v82 = -1;
          }
          int v85 = -1;
          int v81 = 1;
        }
        char v84 = 97;
        goto LABEL_178;
      }
    }
  }
  else
  {
    int v60 = v33;
    int v61 = v92;
    int v62 = v91;
    int v63 = v49;
  }
  if (v53 >= 0) {
    unint64_t v68 = *v8 - *v9;
  }
  else {
    unint64_t v68 = *v9 - *v8;
  }
  if (v58 >= 0) {
    unint64_t v69 = v8[1] - v51;
  }
  else {
    unint64_t v69 = v51 - v8[1];
  }
  if (v57 >= 0) {
    uint64_t v70 = *v10 - *v11;
  }
  else {
    uint64_t v70 = *v11 - *v10;
  }
  if (v59 >= 0) {
    uint64_t v71 = v54 - v56;
  }
  else {
    uint64_t v71 = v56 - v54;
  }
  if (v17)
  {
    __int16 v72 = v70 >= (unint64_t)v71;
LABEL_135:
    __int16 v73 = v72 | 0x100;
    goto LABEL_136;
  }
  if (v23)
  {
    __int16 v72 = v68 >= v69;
    goto LABEL_135;
  }
  if (v70 < (uint64_t)v68) {
    unint64_t v68 = v70;
  }
  if (v71 < (uint64_t)v69) {
    unint64_t v69 = v71;
  }
  if (v68 != v69)
  {
    __int16 v72 = v68 > v69;
    goto LABEL_135;
  }
  if (v68) {
    __int16 v73 = 257;
  }
  else {
    __int16 v73 = 1;
  }
LABEL_136:
  if ((v73 & 0x100) == 0) {
    goto LABEL_137;
  }
  if (v73) {
    *(void *)&double result = sub_1002CE378(a2, (long long **)a3, v9, v8, v11, v10, v17, v23, a6).n128_u64[0];
  }
  else {
    *(void *)&double result = sub_1002CE72C(a2, (long long **)a3, (uint64_t)v9, (uint64_t)v8, (uint64_t)v11, (uint64_t)v10, v17, v23, a6).n128_u64[0];
  }
  return result;
}

__n128 sub_1002CE378@<Q0>(long long **a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  if (a7)
  {
    uint64_t v9 = *a3 - *a5;
    uint64_t v10 = *a6 - *a5;
    if (v10 < 0)
    {
      uint64_t v9 = *a5 - *a3;
      uint64_t v10 = *a5 - *a6;
    }
    else if (!v10)
    {
      double v11 = 0.0;
      if (v9 < 0) {
        goto LABEL_25;
      }
LABEL_16:
      if (v9 <= v10)
      {
        long long v40 = 0uLL;
        long long v20 = **a1;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047CC00, memory_order_acquire) & 1) == 0)
        {
          uint64_t v33 = v10;
          uint64_t v35 = a9;
          uint64_t v29 = v9;
          double v31 = v11;
          long long v27 = v20;
          int v25 = __cxa_guard_acquire(&qword_10047CC00);
          long long v20 = v27;
          double v11 = v31;
          uint64_t v10 = v33;
          a9 = v35;
          uint64_t v9 = v29;
          if (v25)
          {
            xmmword_10047CBE8 = xmmword_1003FAAF0;
            qword_10047CBF8 = 0;
            __cxa_guard_release(&qword_10047CC00);
            long long v20 = v27;
            double v11 = v31;
            uint64_t v10 = v33;
            a9 = v35;
            uint64_t v9 = v29;
          }
        }
        uint64_t v21 = qword_10047CBF8;
        memset(&v39[2], 0, 40);
        *(void *)a9 = 1;
        *(_OWORD *)(a9 + 8) = v20;
        *(_OWORD *)(a9 + 24) = v41;
        *(_OWORD *)(a9 + 40) = xmmword_10047CBE8;
        *(void *)(a9 + 56) = v21;
        *(void *)(a9 + 64) = v9;
        *(void *)(a9 + 72) = v10;
        *(double *)(a9 + 80) = v11;
        *(unsigned char *)(a9 + 88) = 1;
        *(_DWORD *)(a9 + 89) = *(_DWORD *)v38;
        *(_DWORD *)(a9 + 92) = *(_DWORD *)&v38[3];
        *(_OWORD *)(a9 + 96) = xmmword_1003FAAF0;
        *(_OWORD *)(a9 + 112) = v40;
        *(void *)(a9 + 128) = 1;
LABEL_24:
        *(void *)(a9 + 136) = 0;
        *(unsigned char *)(a9 + 144) = 0;
        *(_DWORD *)(a9 + 145) = *(_DWORD *)v37;
        *(_DWORD *)(a9 + 148) = *(_DWORD *)&v37[3];
        *(_WORD *)(a9 + 152) = 48;
        long long v24 = *(_OWORD *)&v39[16];
        *(_OWORD *)(a9 + 154) = *(_OWORD *)v39;
LABEL_26:
        *(_OWORD *)(a9 + 170) = v24;
        __n128 result = *(__n128 *)&v39[26];
        *(_OWORD *)(a9 + 180) = *(_OWORD *)&v39[26];
        return result;
      }
      goto LABEL_25;
    }
    double v11 = (double)v9 * 1000000.0 / (double)v10;
    if (v9 < 0) {
      goto LABEL_25;
    }
    goto LABEL_16;
  }
  if (a8)
  {
    uint64_t v12 = *a5 - *a3;
    uint64_t v13 = *a4 - *a3;
    if (v13 < 0)
    {
      uint64_t v12 = *a3 - *a5;
      uint64_t v13 = *a3 - *a4;
    }
    else if (!v13)
    {
      double v14 = 0.0;
      if (v12 < 0) {
        goto LABEL_25;
      }
LABEL_21:
      if (v12 <= v13)
      {
        long long v40 = 0uLL;
        long long v22 = **a2;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047CC00, memory_order_acquire) & 1) == 0)
        {
          uint64_t v34 = v13;
          uint64_t v36 = a9;
          uint64_t v30 = v12;
          double v32 = v14;
          long long v28 = v22;
          int v26 = __cxa_guard_acquire(&qword_10047CC00);
          long long v22 = v28;
          double v14 = v32;
          uint64_t v13 = v34;
          a9 = v36;
          uint64_t v12 = v30;
          if (v26)
          {
            xmmword_10047CBE8 = xmmword_1003FAAF0;
            qword_10047CBF8 = 0;
            __cxa_guard_release(&qword_10047CC00);
            long long v22 = v28;
            double v14 = v32;
            uint64_t v13 = v34;
            a9 = v36;
            uint64_t v12 = v30;
          }
        }
        uint64_t v23 = qword_10047CBF8;
        memset(&v39[2], 0, 40);
        *(void *)a9 = 1;
        *(_OWORD *)(a9 + 8) = v22;
        *(_OWORD *)(a9 + 24) = v41;
        *(void *)(a9 + 40) = v12;
        *(void *)(a9 + 48) = v13;
        *(double *)(a9 + 56) = v14;
        *(_OWORD *)(a9 + 64) = xmmword_10047CBE8;
        *(void *)(a9 + 80) = v23;
        *(unsigned char *)(a9 + 88) = 1;
        *(_DWORD *)(a9 + 89) = *(_DWORD *)v38;
        *(_DWORD *)(a9 + 92) = *(_DWORD *)&v38[3];
        *(_OWORD *)(a9 + 96) = xmmword_1003FAAF0;
        *(_OWORD *)(a9 + 112) = v40;
        *(void *)(a9 + 128) = 1;
        goto LABEL_24;
      }
LABEL_25:
      memset(&v39[2], 0, 32);
      *(_OWORD *)(a9 + 40) = xmmword_1003FAAF0;
      *(_OWORD *)(a9 + 96) = xmmword_1003FAAF0;
      long long v24 = *(_OWORD *)&v39[16];
      *(_OWORD *)(a9 + 154) = *(_OWORD *)v39;
      *(void *)(a9 + 56) = 0;
      *(void *)(a9 + 64) = 0;
      *(void *)(a9 + 112) = 0;
      *(void *)(a9 + 120) = 0;
      *(void *)&v39[34] = 0;
      *(void *)a9 = 0;
      *(void *)(a9 + 72) = 1;
      *(void *)(a9 + 80) = 0;
      *(unsigned char *)(a9 + 88) = 0;
      *(void *)(a9 + 128) = 1;
      *(void *)(a9 + 136) = 0;
      *(unsigned char *)(a9 + 144) = 0;
      *(_WORD *)(a9 + 152) = 100;
      goto LABEL_26;
    }
    double v14 = (double)v12 * 1000000.0 / (double)v13;
    if (v12 < 0) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  uint64_t v17 = *a5;
  uint64_t v18 = *a6;

  result.n128_f64[0] = sub_1002CED30((uint64_t)a1, (uint64_t)a2, v15, v16, v17, v18, a9);
  return result;
}

__n128 sub_1002CE72C@<Q0>(long long **a1@<X0>, long long **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>)
{
  if (a7)
  {
    uint64_t v9 = *(void *)(a5 + 8);
    uint64_t v10 = *(void *)(a3 + 8) - v9;
    uint64_t v11 = *(void *)(a6 + 8) - v9;
    if (v11 < 0)
    {
      uint64_t v10 = -v10;
      uint64_t v11 = -v11;
    }
    else if (!v11)
    {
      double v12 = 0.0;
      if (v10 < 0) {
        goto LABEL_25;
      }
LABEL_16:
      if (v10 <= v11)
      {
        long long v42 = 0uLL;
        long long v22 = **a1;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047CC00, memory_order_acquire) & 1) == 0)
        {
          uint64_t v35 = v11;
          uint64_t v37 = a9;
          uint64_t v31 = v10;
          double v33 = v12;
          long long v29 = v22;
          int v27 = __cxa_guard_acquire(&qword_10047CC00);
          long long v22 = v29;
          double v12 = v33;
          uint64_t v11 = v35;
          a9 = v37;
          uint64_t v10 = v31;
          if (v27)
          {
            xmmword_10047CBE8 = xmmword_1003FAAF0;
            qword_10047CBF8 = 0;
            __cxa_guard_release(&qword_10047CC00);
            long long v22 = v29;
            double v12 = v33;
            uint64_t v11 = v35;
            a9 = v37;
            uint64_t v10 = v31;
          }
        }
        uint64_t v23 = qword_10047CBF8;
        memset(&v41[2], 0, 40);
        *(void *)a9 = 1;
        *(_OWORD *)(a9 + 8) = v22;
        *(_OWORD *)(a9 + 24) = v43;
        *(_OWORD *)(a9 + 40) = xmmword_10047CBE8;
        *(void *)(a9 + 56) = v23;
        *(void *)(a9 + 64) = v10;
        *(void *)(a9 + 72) = v11;
        *(double *)(a9 + 80) = v12;
        *(unsigned char *)(a9 + 88) = 1;
        *(_DWORD *)(a9 + 89) = *(_DWORD *)v40;
        *(_DWORD *)(a9 + 92) = *(_DWORD *)&v40[3];
        *(_OWORD *)(a9 + 96) = xmmword_1003FAAF0;
        *(_OWORD *)(a9 + 112) = v42;
        *(void *)(a9 + 128) = 1;
LABEL_24:
        *(void *)(a9 + 136) = 0;
        *(unsigned char *)(a9 + 144) = 0;
        *(_DWORD *)(a9 + 145) = *(_DWORD *)v39;
        *(_DWORD *)(a9 + 148) = *(_DWORD *)&v39[3];
        *(_WORD *)(a9 + 152) = 48;
        long long v26 = *(_OWORD *)&v41[16];
        *(_OWORD *)(a9 + 154) = *(_OWORD *)v41;
LABEL_26:
        *(_OWORD *)(a9 + 170) = v26;
        __n128 result = *(__n128 *)&v41[26];
        *(_OWORD *)(a9 + 180) = *(_OWORD *)&v41[26];
        return result;
      }
      goto LABEL_25;
    }
    double v12 = (double)v10 * 1000000.0 / (double)v11;
    if (v10 < 0) {
      goto LABEL_25;
    }
    goto LABEL_16;
  }
  if (a8)
  {
    uint64_t v13 = *(void *)(a3 + 8);
    uint64_t v14 = *(void *)(a5 + 8) - v13;
    uint64_t v15 = *(void *)(a4 + 8) - v13;
    if (v15 < 0)
    {
      uint64_t v14 = -v14;
      uint64_t v15 = -v15;
    }
    else if (!v15)
    {
      double v16 = 0.0;
      if (v14 < 0) {
        goto LABEL_25;
      }
LABEL_21:
      if (v14 <= v15)
      {
        long long v42 = 0uLL;
        long long v24 = **a2;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047CC00, memory_order_acquire) & 1) == 0)
        {
          uint64_t v36 = v15;
          uint64_t v38 = a9;
          uint64_t v32 = v14;
          double v34 = v16;
          long long v30 = v24;
          int v28 = __cxa_guard_acquire(&qword_10047CC00);
          long long v24 = v30;
          double v16 = v34;
          uint64_t v15 = v36;
          a9 = v38;
          uint64_t v14 = v32;
          if (v28)
          {
            xmmword_10047CBE8 = xmmword_1003FAAF0;
            qword_10047CBF8 = 0;
            __cxa_guard_release(&qword_10047CC00);
            long long v24 = v30;
            double v16 = v34;
            uint64_t v15 = v36;
            a9 = v38;
            uint64_t v14 = v32;
          }
        }
        uint64_t v25 = qword_10047CBF8;
        memset(&v41[2], 0, 40);
        *(void *)a9 = 1;
        *(_OWORD *)(a9 + 8) = v24;
        *(_OWORD *)(a9 + 24) = v43;
        *(void *)(a9 + 40) = v14;
        *(void *)(a9 + 48) = v15;
        *(double *)(a9 + 56) = v16;
        *(_OWORD *)(a9 + 64) = xmmword_10047CBE8;
        *(void *)(a9 + 80) = v25;
        *(unsigned char *)(a9 + 88) = 1;
        *(_DWORD *)(a9 + 89) = *(_DWORD *)v40;
        *(_DWORD *)(a9 + 92) = *(_DWORD *)&v40[3];
        *(_OWORD *)(a9 + 96) = xmmword_1003FAAF0;
        *(_OWORD *)(a9 + 112) = v42;
        *(void *)(a9 + 128) = 1;
        goto LABEL_24;
      }
LABEL_25:
      memset(&v41[2], 0, 32);
      *(_OWORD *)(a9 + 40) = xmmword_1003FAAF0;
      *(_OWORD *)(a9 + 96) = xmmword_1003FAAF0;
      long long v26 = *(_OWORD *)&v41[16];
      *(_OWORD *)(a9 + 154) = *(_OWORD *)v41;
      *(void *)(a9 + 56) = 0;
      *(void *)(a9 + 64) = 0;
      *(void *)(a9 + 112) = 0;
      *(void *)(a9 + 120) = 0;
      *(void *)&v41[34] = 0;
      *(void *)a9 = 0;
      *(void *)(a9 + 72) = 1;
      *(void *)(a9 + 80) = 0;
      *(unsigned char *)(a9 + 88) = 0;
      *(void *)(a9 + 128) = 1;
      *(void *)(a9 + 136) = 0;
      *(unsigned char *)(a9 + 144) = 0;
      *(_WORD *)(a9 + 152) = 100;
      goto LABEL_26;
    }
    double v16 = (double)v14 * 1000000.0 / (double)v15;
    if (v14 < 0) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  uint64_t v17 = *(void *)(a3 + 8);
  uint64_t v18 = *(void *)(a4 + 8);
  uint64_t v19 = *(void *)(a5 + 8);
  uint64_t v20 = *(void *)(a6 + 8);

  result.n128_f64[0] = sub_1002CED30((uint64_t)a1, (uint64_t)a2, v17, v18, v19, v20, a9);
  return result;
}

uint64_t sub_1002CEAE0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void *)a1;
    if (!*(unsigned char *)(*(void *)a1 + 80))
    {
      sub_1002CD91C(*(void *)a1, *(double **)(v2 + 24), v2 + 32);
      *(_OWORD *)(v2 + 64) = *(_OWORD *)*(void *)(v2 + 32);
      *(unsigned char *)(v2 + 80) = 1;
    }
    uint64_t v3 = *(void *)(a1 + 8);
    double v4 = (double)*(uint64_t *)(v3 + 24) + (*(double *)(v2 + 72) - *(double *)(v3 + 8)) * *(double *)(v3 + 32);
    if (v4 >= 0.0) {
      double v5 = 0.5;
    }
    else {
      double v5 = -0.5;
    }
    double v6 = v4 + v5;
    sub_1002C5028(v4 + v5);
    double v7 = ceil(v6);
    double v8 = floor(v6);
    if (v6 >= 0.0) {
      double v7 = v8;
    }
    *(void *)(a1 + 40) = (uint64_t)v7;
    double v9 = (double)*(uint64_t *)(v3 + 16) + (*(double *)(v2 + 64) - *(double *)v3) * *(double *)(v3 + 32);
    if (v9 >= 0.0) {
      double v10 = 0.5;
    }
    else {
      double v10 = -0.5;
    }
    double v11 = v9 + v10;
    sub_1002C5028(v9 + v10);
    double v12 = ceil(v11);
    double v13 = floor(v11);
    if (v11 >= 0.0) {
      double v12 = v13;
    }
    *(void *)(a1 + 32) = (uint64_t)v12;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1 + 32;
}

double sub_1002CEBF4(uint64_t *a1, uint64_t *a2, uint64_t *a3, double *a4)
{
  double v4 = (double)a1[1];
  v21[0] = (double)*a1;
  v21[1] = v4;
  double v5 = (double)*a2;
  double v6 = (double)a2[1];
  v20[0] = v5;
  v20[1] = v6;
  double v7 = (double)a3[1];
  v19[0] = (double)*a3;
  v19[1] = v7;
  double v8 = v21[0] - v19[0];
  v28[0] = v21[0] - v19[0];
  double v9 = v6 - v7;
  v27[0] = v6 - v7;
  double v10 = v4 - v7;
  v26[0] = v4 - v7;
  double v11 = v5 - v19[0];
  v25[0] = v5 - v19[0];
  double v12 = vabdd_f64(v21[0], v19[0]);
  double v13 = vabdd_f64(v6, v7);
  double v14 = vabdd_f64(v4, v7);
  double v15 = vabdd_f64(v5, v19[0]);
  if (v12 < v13) {
    double v12 = v13;
  }
  if (v12 < v14) {
    double v12 = v14;
  }
  if (v12 < v15) {
    double v12 = v15;
  }
  if (v12 < 1.0) {
    double v12 = 1.0;
  }
  *a4 = v12;
  double v16 = v8 * v9;
  v24[0] = v8 * v9;
  double v17 = v11 * v10;
  double result = v8 * v9 - v11 * v10;
  double v22 = fabs(v8 * v9) + fabs(v11 * v10);
  v23[0] = v11 * v10;
  if (vabdd_f64(v8 * v9, v11 * v10) < v22 * 3.33066907e-16 && (v16 <= 0.0 || v17 > 0.0) && (v16 >= 0.0 || v17 < 0.0)) {
    return sub_1001DF5F4(v21, v20, v19, v28, v27, v26, v25, v24, v23, &v22);
  }
  return result;
}

double sub_1002CED30@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7 = a4 - a3;
  uint64_t v8 = a4 - a3;
  uint64_t v9 = a6 - a5;
  uint64_t v10 = a6 - a5;
  uint64_t v11 = a3 - a5;
  v38.i64[0] = a3 - a5;
  v38.i64[1] = a6 - a5;
  if (a6 - a5 < 0)
  {
    uint64_t v11 = a5 - a3;
    uint64_t v12 = a5 - a6;
    v38.i64[0] = a5 - a3;
    v38.i64[1] = a5 - a6;
LABEL_6:
    double v39 = (double)v11 * 1000000.0 / (double)v12;
    uint64_t v15 = a4 - a5;
    uint64_t v35 = a4 - a5;
    uint64_t v36 = a6 - a5;
    if (v10 < 0)
    {
      uint64_t v15 = a5 - a4;
      uint64_t v10 = a5 - a6;
      uint64_t v35 = a5 - a4;
      uint64_t v36 = a5 - a6;
    }
    double v37 = (double)v15 * 1000000.0 / (double)v10;
    uint64_t v13 = a5 - a3;
    *(void *)&long long v33 = a5 - a3;
    *((void *)&v33 + 1) = a4 - a3;
    if (v8 < 0) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  uint64_t v12 = a6 - a5;
  if (v10) {
    goto LABEL_6;
  }
  double v39 = 0.0;
  uint64_t v35 = a4 - a5;
  uint64_t v36 = 0;
  double v37 = 0.0;
  uint64_t v13 = a5 - a3;
  *(void *)&long long v33 = a5 - a3;
  *((void *)&v33 + 1) = a4 - a3;
  if (v8 < 0)
  {
LABEL_4:
    uint64_t v13 = -v13;
    uint64_t v14 = a3 - a4;
    *(void *)&long long v33 = v13;
    *((void *)&v33 + 1) = a3 - a4;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v14 = a4 - a3;
  if (!v8)
  {
    double v16 = &v34;
    double v34 = 0.0;
    long long v31 = (unint64_t)(a6 - a3);
    double v32 = 0.0;
    if (a3 == a5) {
      goto LABEL_13;
    }
LABEL_19:
    if (a6 == a3)
    {
      unsigned int v18 = 3;
      if (a4 != a5) {
        goto LABEL_62;
      }
      goto LABEL_21;
    }
    if (a6 <= a5)
    {
      if (a3 <= a5)
      {
        if (a6 <= a3) {
          unsigned int v18 = 2;
        }
        else {
          unsigned int v18 = 4;
        }
        if (a4 != a5) {
          goto LABEL_62;
        }
LABEL_21:
        int v20 = 3;
        unsigned int v19 = 1;
        uint64_t v21 = (char *)&v33 + 8;
        if (a6 != a3) {
          goto LABEL_22;
        }
        goto LABEL_15;
      }
    }
    else if (a3 >= a5)
    {
      if (a6 >= a3) {
        unsigned int v18 = 2;
      }
      else {
        unsigned int v18 = 4;
      }
      if (a4 != a5) {
        goto LABEL_62;
      }
      goto LABEL_21;
    }
    unsigned int v18 = 0;
    if (a4 != a5) {
      goto LABEL_62;
    }
    goto LABEL_21;
  }
LABEL_10:
  double v16 = &v34;
  double v34 = (double)v13 * 1000000.0 / (double)v14;
  uint64_t v17 = a6 - a3;
  *(void *)&long long v31 = a6 - a3;
  *((void *)&v31 + 1) = a4 - a3;
  if (v8 < 0)
  {
    uint64_t v17 = a3 - a6;
    uint64_t v8 = a3 - a4;
    *(void *)&long long v31 = a3 - a6;
    *((void *)&v31 + 1) = a3 - a4;
  }
  double v32 = (double)v17 * 1000000.0 / (double)v8;
  if (a3 != a5) {
    goto LABEL_19;
  }
LABEL_13:
  unsigned int v18 = 1;
  unsigned int v19 = 1;
  int v20 = 1;
  if (a4 == a3)
  {
    uint64_t v21 = (char *)&v33 + 8;
    if (a6 == a3) {
      goto LABEL_15;
    }
LABEL_22:
    if (a6 == a4)
    {
      int v22 = 3;
      if (v18 != 3) {
        goto LABEL_16;
      }
    }
    else
    {
      if (a4 <= a3)
      {
        if (a6 <= a3)
        {
          if (a6 >= a4) {
            int v22 = 2;
          }
          else {
            int v22 = 4;
          }
          if (v18 != 3) {
            goto LABEL_16;
          }
          goto LABEL_24;
        }
      }
      else if (a6 >= a3)
      {
        if (a6 <= a4) {
          int v22 = 2;
        }
        else {
          int v22 = 4;
        }
        if (v18 != 3) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
      int v22 = 0;
      if (v18 != 3) {
        goto LABEL_16;
      }
    }
LABEL_24:
    int64x2_t v38 = vdupq_n_s64(1uLL);
    double v39 = 1000000.0;
    *(void *)&long long v31 = 0;
    uint64_t v23 = (char *)&v31 + 8;
    long long v24 = &v32;
    goto LABEL_25;
  }
LABEL_62:
  if (a4 != a6)
  {
    if (a6 <= a5)
    {
      if (a4 <= a5)
      {
        if (a4 >= a6) {
          unsigned int v19 = 2;
        }
        else {
          unsigned int v19 = 4;
        }
        if (a3 != a5) {
          goto LABEL_78;
        }
LABEL_64:
        int v20 = 1;
        uint64_t v21 = (char *)&v33 + 8;
        if (a6 != a3) {
          goto LABEL_22;
        }
        goto LABEL_15;
      }
    }
    else if (a4 >= a5)
    {
      if (a4 <= a6) {
        unsigned int v19 = 2;
      }
      else {
        unsigned int v19 = 4;
      }
      if (a3 != a5) {
        goto LABEL_78;
      }
      goto LABEL_64;
    }
    unsigned int v19 = 0;
    if (a3 != a5) {
      goto LABEL_78;
    }
    goto LABEL_64;
  }
  unsigned int v19 = 3;
  if (a3 == a5) {
    goto LABEL_64;
  }
LABEL_78:
  if (a4 > a3)
  {
    if (a5 >= a3)
    {
      if (a4 >= a5) {
        int v20 = 2;
      }
      else {
        int v20 = 4;
      }
      uint64_t v21 = (char *)&v33 + 8;
      if (a6 != a3) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }
LABEL_86:
    int v20 = 0;
    uint64_t v21 = (char *)&v33 + 8;
    if (a6 != a3) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  if (a5 > a3) {
    goto LABEL_86;
  }
  if (a4 <= a5) {
    int v20 = 2;
  }
  else {
    int v20 = 4;
  }
  uint64_t v21 = (char *)&v33 + 8;
  if (a6 != a3) {
    goto LABEL_22;
  }
LABEL_15:
  int v22 = 1;
  if (v18 == 3) {
    goto LABEL_24;
  }
LABEL_16:
  if (v18 != 1) {
    goto LABEL_26;
  }
  int64x2_t v38 = (int64x2_t)xmmword_1003FAAF0;
  double v39 = 0.0;
  *(void *)&long long v33 = 0;
  uint64_t v23 = (char *)&v33 + 8;
  long long v24 = &v34;
LABEL_25:
  *(void *)uint64_t v23 = 1;
  double *v24 = 0.0;
LABEL_26:
  if (v19 == 3)
  {
    uint64_t v35 = 1;
    uint64_t v36 = 1;
    double v37 = 1000000.0;
    *(void *)&long long v31 = 1;
    uint64_t v21 = (char *)&v31 + 8;
    double v16 = &v32;
    goto LABEL_30;
  }
  if (v19 == 1)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 1;
    double v37 = 0.0;
    *(void *)&long long v33 = 1;
LABEL_30:
    *(void *)uint64_t v21 = 1;
    *double v16 = 1000000.0;
    goto LABEL_31;
  }
  if (!(v19 | v18) || v18 >= 4 && v19 >= 4)
  {
    memset(&v40[2], 0, 40);
    *(_OWORD *)(a7 + 40) = xmmword_1003FAAF0;
    *(_OWORD *)(a7 + 96) = xmmword_1003FAAF0;
    long long v30 = *(_OWORD *)&v40[16];
    *(_OWORD *)(a7 + 154) = *(_OWORD *)v40;
    *(void *)(a7 + 56) = 0;
    *(void *)(a7 + 64) = 0;
    *(void *)(a7 + 112) = 0;
    *(void *)(a7 + 120) = 0;
    *(void *)a7 = 0;
    *(void *)(a7 + 72) = 1;
    *(void *)(a7 + 80) = 0;
    *(unsigned char *)(a7 + 88) = 0;
    *(void *)(a7 + 128) = 1;
    *(void *)(a7 + 136) = 0;
    *(unsigned char *)(a7 + 144) = 0;
    *(_WORD *)(a7 + 152) = 100;
    *(_OWORD *)(a7 + 170) = v30;
    double result = *(double *)&v40[26];
    *(_OWORD *)(a7 + 180) = *(_OWORD *)&v40[26];
    return result;
  }
LABEL_31:
  BOOL v25 = v7 <= 0;
  if (v7) {
    int v26 = -1;
  }
  else {
    int v26 = 0;
  }
  if (!v25) {
    int v26 = 1;
  }
  BOOL v27 = v9 <= 0;
  if (v9) {
    int v28 = -1;
  }
  else {
    int v28 = 0;
  }
  if (!v27) {
    int v28 = 1;
  }
  sub_1002CF2A4(a1, a2, v26 != v28, v18, v19, v20, v22, (uint64_t)&v38, a7, (uint64_t)&v35, &v33, &v31);
  return result;
}

void sub_1002CF2A4(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long *a11, long long *a12)
{
  if ((a5 & 0xFFFFFFFD) == 1) {
    int v16 = 0;
  }
  else {
    int v16 = -1;
  }
  BOOL v17 = (a4 - 4) < 0xFFFFFFFD;
  BOOL v18 = (a4 & 0xFFFFFFFD) != 1;
  BOOL v19 = (a4 & 0xFFFFFFFD) != 1 || (a4 - 4) < 0xFFFFFFFD;
  if ((a4 - 4) <= 0xFFFFFFFC) {
    BOOL v18 = 0;
  }
  if (a5 == 2) {
    int v20 = 1;
  }
  else {
    int v20 = v16;
  }
  if (a5 == 2) {
    BOOL v21 = v18;
  }
  else {
    BOOL v21 = (a4 - 4) < 0xFFFFFFFD;
  }
  unsigned int v22 = a5 - 1;
  if ((a5 & 0xFFFFFFFD) == 1) {
    int v23 = !v19;
  }
  else {
    int v23 = v21;
  }
  if ((a5 & 0xFFFFFFFD) != 1 || v22 >= 3) {
    int v25 = !v19;
  }
  else {
    int v25 = v23 + 1;
  }
  sub_1002CF4B8(a1, a2, a4, a5, a6, a7, a8, (uint64_t)v43, a10, a11, a12);
  memset(&v45[2], 0, 32);
  unsigned int v26 = a7 & 0xFFFFFFFD;
  BOOL v27 = (a6 - 4) < 0xFFFFFFFD;
  BOOL v28 = (a6 & 0xFFFFFFFD) != 1;
  BOOL v29 = (a6 & 0xFFFFFFFD) != 1 || (a6 - 4) < 0xFFFFFFFD;
  if ((a6 - 4) <= 0xFFFFFFFC) {
    BOOL v28 = 0;
  }
  int v30 = !v29;
  if (a7 != 2) {
    BOOL v28 = (a6 - 4) < 0xFFFFFFFD;
  }
  unsigned int v31 = a7 - 1;
  if (v26 == 1) {
    int v32 = v30;
  }
  else {
    int v32 = v28;
  }
  if (v26 == 1 && v31 < 3) {
    int v30 = v32 + 1;
  }
  BOOL v34 = v23 == 0;
  if (v22 < 3) {
    BOOL v34 = v17;
  }
  BOOL v35 = v32 == 0;
  if (v31 >= 3) {
    BOOL v27 = v35;
  }
  if (v25 == 1 && v30 == 1 && v34 && v27)
  {
    if (a3)
    {
      if (v20) {
        char v36 = 102;
      }
      else {
        char v36 = 116;
      }
    }
    else
    {
      char v36 = 97;
    }
  }
  else
  {
    char v36 = 99;
    if (v25 == 2 && v30 == 2) {
      char v36 = 101;
    }
  }
  long long v37 = v43[7];
  *(_OWORD *)(a9 + 96) = v43[6];
  *(_OWORD *)(a9 + 112) = v37;
  *(_OWORD *)(a9 + 128) = v43[8];
  long long v38 = v43[3];
  *(_OWORD *)(a9 + 32) = v43[2];
  *(_OWORD *)(a9 + 48) = v38;
  long long v39 = v43[5];
  *(_OWORD *)(a9 + 64) = v43[4];
  *(_OWORD *)(a9 + 80) = v39;
  long long v40 = v43[1];
  *(_OWORD *)a9 = v43[0];
  *(_OWORD *)(a9 + 16) = v40;
  long long v41 = *(_OWORD *)&v45[16];
  *(_OWORD *)(a9 + 154) = *(_OWORD *)v45;
  if (v26 == 1) {
    int v42 = 0;
  }
  else {
    int v42 = -1;
  }
  if (a7 == 2) {
    int v42 = 1;
  }
  *(void *)(a9 + 144) = v44;
  *(unsigned char *)(a9 + 152) = v36;
  *(unsigned char *)(a9 + 153) = a3;
  *(_OWORD *)(a9 + 170) = v41;
  *(_WORD *)(a9 + 186) = *(_WORD *)&v45[32];
  *(_DWORD *)(a9 + 188) = v20;
  *(_DWORD *)(a9 + 192) = v42;
}

void sub_1002CF4B8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, int a4@<W4>, int a5@<W5>, int a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, long long *a10, long long *a11)
{
  unsigned int v12 = 0;
  *(void *)a8 = 0;
  long long v13 = xmmword_1003FAAF0;
  *(_OWORD *)(a8 + 40) = xmmword_1003FAAF0;
  uint64_t v14 = (long long *)(a8 + 40);
  *(void *)(a8 + 56) = 0;
  *(void *)(a8 + 64) = 0;
  *(void *)(a8 + 72) = 1;
  *(void *)(a8 + 80) = 0;
  *(unsigned char *)(a8 + 88) = 0;
  *(_OWORD *)(a8 + 96) = xmmword_1003FAAF0;
  uint64_t v15 = (long long *)(a8 + 96);
  *(void *)(a8 + 112) = 0;
  *(void *)(a8 + 120) = 0;
  *(void *)(a8 + 128) = 1;
  *(void *)(a8 + 136) = 0;
  *(unsigned char *)(a8 + 144) = 0;
  long long v96 = xmmword_1003FAAF0;
  double v97 = 0.0;
  *(void *)&long long v98 = 0;
  *((void *)&v98 + 1) = 1;
  double v99 = 0.0;
  if ((a3 - 1) <= 2)
  {
    *(_OWORD *)(a8 + 8) = *(_OWORD *)*(void *)a1;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047CC00, memory_order_acquire) & 1) == 0)
    {
      uint64_t v85 = a1;
      uint64_t v89 = a2;
      int v63 = a6;
      int v82 = a4;
      int v78 = a5;
      uint64_t v79 = a7;
      int v64 = __cxa_guard_acquire(&qword_10047CC00);
      long long v13 = xmmword_1003FAAF0;
      a7 = v79;
      a5 = v78;
      a4 = v82;
      a6 = v63;
      int v65 = v64;
      a1 = v85;
      a2 = v89;
      if (v65)
      {
        xmmword_10047CBE8 = xmmword_1003FAAF0;
        qword_10047CBF8 = 0;
        __cxa_guard_release(&qword_10047CC00);
        long long v13 = xmmword_1003FAAF0;
        a7 = v79;
        a5 = v78;
        a4 = v82;
        a1 = v85;
        a2 = v89;
        a6 = v63;
      }
    }
    *uint64_t v14 = xmmword_10047CBE8;
    *((void *)v14 + 2) = qword_10047CBF8;
    *(unsigned char *)(a8 + 88) = 1;
    *(_OWORD *)(a8 + 64) = *(_OWORD *)a7;
    *(void *)(a8 + 80) = *(void *)(a7 + 16);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047CC00, memory_order_acquire) & 1) == 0)
    {
      uint64_t v86 = a1;
      uint64_t v90 = a2;
      int v66 = a6;
      int v83 = a4;
      int v67 = a5;
      long long v80 = v13;
      int v68 = __cxa_guard_acquire(&qword_10047CC00);
      long long v13 = v80;
      a5 = v67;
      a4 = v83;
      a6 = v66;
      int v69 = v68;
      a1 = v86;
      a2 = v90;
      if (v69)
      {
        xmmword_10047CBE8 = v80;
        qword_10047CBF8 = 0;
        __cxa_guard_release(&qword_10047CC00);
        long long v13 = v80;
        a5 = v67;
        a4 = v83;
        a1 = v86;
        a2 = v90;
        a6 = v66;
      }
    }
    long long v96 = xmmword_10047CBE8;
    double v97 = *(double *)&qword_10047CBF8;
    unsigned int v12 = 1;
    if (a5 != 2)
    {
LABEL_3:
      if ((a4 - 1) > 2) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }
  }
  else if (a5 != 2)
  {
    goto LABEL_3;
  }
  int v16 = a10;
  unsigned int v17 = v12;
  *(_OWORD *)(a8 + 16 * v12 + 8) = *(_OWORD *)*(void *)a2;
  uint64_t v18 = a8 + 56 * v12 + 40;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047CC00, memory_order_acquire) & 1) == 0)
  {
    uint64_t v87 = a1;
    uint64_t v91 = a2;
    int v70 = a6;
    int v84 = a4;
    long long v81 = v13;
    int v71 = __cxa_guard_acquire(&qword_10047CC00);
    uint64_t v18 = a8 + 56 * v12 + 40;
    int v16 = a10;
    unsigned int v17 = v12;
    a4 = v84;
    a6 = v70;
    int v72 = v71;
    a1 = v87;
    a2 = v91;
    if (v72)
    {
      xmmword_10047CBE8 = v81;
      qword_10047CBF8 = 0;
      __cxa_guard_release(&qword_10047CC00);
      uint64_t v18 = a8 + 56 * v12 + 40;
      int v16 = a10;
      unsigned int v17 = v12;
      a4 = v84;
      a1 = v87;
      a2 = v91;
      a6 = v70;
    }
  }
  uint64_t v19 = a8 + 56 * v17;
  *(unsigned char *)(v19 + 88) = 1;
  long long v20 = *v16;
  *(_OWORD *)uint64_t v18 = *v16;
  uint64_t v21 = *((void *)v16 + 2);
  *(void *)(v18 + 16) = v21;
  *(_OWORD *)(v19 + 64) = xmmword_10047CBE8;
  *(void *)(v19 + 80) = qword_10047CBF8;
  unsigned int v22 = (char *)&v96 + 24 * v17;
  *(_OWORD *)unsigned int v22 = v20;
  *((void *)v22 + 2) = v21;
  ++v12;
  if ((a4 - 1) <= 2)
  {
LABEL_10:
    if (v12 <= 1)
    {
      uint64_t v23 = a9;
      unsigned int v24 = v12;
      *(_OWORD *)(a8 + 16 * v12 + 8) = *(_OWORD *)*(void *)(a1 + 8);
      uint64_t v25 = a8 + 56 * v12 + 40;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047CC20, memory_order_acquire) & 1) == 0)
      {
        uint64_t v92 = a2;
        int v73 = a6;
        int v74 = __cxa_guard_acquire(&qword_10047CC20);
        uint64_t v25 = a8 + 56 * v12 + 40;
        unsigned int v24 = v12;
        uint64_t v23 = a9;
        a6 = v73;
        a2 = v92;
        if (v74)
        {
          xmmword_10047CC08 = (__int128)vdupq_n_s64(1uLL);
          qword_10047CC18 = 0x412E848000000000;
          __cxa_guard_release(&qword_10047CC20);
          uint64_t v25 = a8 + 56 * v12 + 40;
          unsigned int v24 = v12;
          uint64_t v23 = a9;
          a6 = v73;
          a2 = v92;
        }
      }
      uint64_t v26 = a8 + 56 * v24;
      *(unsigned char *)(v26 + 88) = 1;
      *(_OWORD *)uint64_t v25 = xmmword_10047CC08;
      *(void *)(v25 + 16) = qword_10047CC18;
      *(_OWORD *)(v26 + 64) = *(_OWORD *)v23;
      *(void *)(v26 + 80) = *(void *)(v23 + 16);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047CC20, memory_order_acquire) & 1) == 0)
      {
        unsigned int v88 = v24;
        uint64_t v93 = a2;
        int v75 = a6;
        int v76 = __cxa_guard_acquire(&qword_10047CC20);
        unsigned int v24 = v88;
        a2 = v93;
        a6 = v75;
        if (v76)
        {
          xmmword_10047CC08 = (__int128)vdupq_n_s64(1uLL);
          qword_10047CC18 = 0x412E848000000000;
          __cxa_guard_release(&qword_10047CC20);
          unsigned int v24 = v88;
          a2 = v93;
          a6 = v75;
        }
      }
      BOOL v27 = (char *)&v96 + 24 * v24;
      *(_OWORD *)BOOL v27 = xmmword_10047CC08;
      *((void *)v27 + 2) = qword_10047CC18;
      ++v12;
    }
  }
LABEL_14:
  if (a6 == 2 && v12 <= 1)
  {
    BOOL v28 = a11;
    unsigned int v29 = v12;
    *(_OWORD *)(a8 + 16 * v12 + 8) = *(_OWORD *)*(void *)(a2 + 8);
    uint64_t v30 = a8 + 56 * v12 + 40;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10047CC20, memory_order_acquire) & 1) == 0)
    {
      int v77 = __cxa_guard_acquire(&qword_10047CC20);
      unsigned int v29 = v12;
      uint64_t v30 = a8 + 56 * v12 + 40;
      BOOL v28 = a11;
      if (v77)
      {
        xmmword_10047CC08 = (__int128)vdupq_n_s64(1uLL);
        qword_10047CC18 = 0x412E848000000000;
        __cxa_guard_release(&qword_10047CC20);
        unsigned int v29 = v12;
        uint64_t v30 = a8 + 56 * v12 + 40;
        BOOL v28 = a11;
      }
    }
    uint64_t v31 = a8 + 56 * v29;
    *(unsigned char *)(v31 + 88) = 1;
    long long v32 = *v28;
    *(_OWORD *)uint64_t v30 = *v28;
    uint64_t v33 = *((void *)v28 + 2);
    *(void *)(v30 + 16) = v33;
    *(_OWORD *)(v31 + 64) = xmmword_10047CC08;
    *(void *)(v31 + 80) = qword_10047CC18;
    BOOL v34 = (char *)&v96 + 24 * v29;
    *(_OWORD *)BOOL v34 = v32;
    *((void *)v34 + 2) = v33;
    ++v12;
  }
  if (v12 != 2) {
    goto LABEL_45;
  }
  if (vabdd_f64(v99, v97) >= 50.0)
  {
    if (v99 >= v97) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  long long v95 = v98;
  sub_1002CFEF8((int64_t)&v95);
  long long v94 = v96;
  sub_1002CFEF8((int64_t)&v94);
  uint64_t v35 = *((void *)&v95 + 1);
  uint64_t v36 = (uint64_t)v95 / *((void *)&v95 + 1);
  uint64_t v37 = (uint64_t)v95 % *((void *)&v95 + 1);
  uint64_t v38 = *((void *)&v94 + 1);
  uint64_t v39 = (uint64_t)v94 / *((void *)&v94 + 1);
  uint64_t v40 = (uint64_t)v94 % *((void *)&v94 + 1);
  if ((uint64_t)v95 % *((void *)&v95 + 1) < 0)
  {
    unint64_t v41 = ((unint64_t)(*((void *)&v95 + 1) + v37) >> 63)
        + (((*((void *)&v95 + 1) + v37) & ~((*((void *)&v95 + 1) + v37) >> 63))
         - (((unint64_t)(*((void *)&v95 + 1) + v37) >> 63)
          + *((void *)&v95 + 1)
          + v37))
        / *((void *)&v95 + 1)
        + 1;
    if (v41 < 4) {
      goto LABEL_63;
    }
    v37 += (v41 & 0xFFFFFFFFFFFFFFFCLL) * *((void *)&v95 + 1);
    int64x2_t v42 = 0uLL;
    v43.i64[0] = 0;
    v43.i64[1] = (uint64_t)v95 / *((void *)&v95 + 1);
    v44.i64[0] = -1;
    v44.i64[1] = -1;
    unint64_t v45 = v41 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v43 = vaddq_s64(v43, v44);
      int64x2_t v42 = vaddq_s64(v42, v44);
      v45 -= 4;
    }
    while (v45);
    uint64_t v36 = vaddvq_s64(vaddq_s64(vzip1q_s64(v43, v42), vzip2q_s64(v43, v42)));
    if (v41 != (v41 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_63:
      do
      {
        v37 += *((void *)&v95 + 1);
        --v36;
      }
      while (v37 < 0);
    }
  }
  if (v40 < 0)
  {
    unint64_t v46 = ((unint64_t)(*((void *)&v94 + 1) + v40) >> 63)
        + (((*((void *)&v94 + 1) + v40) & ~((*((void *)&v94 + 1) + v40) >> 63))
         - (((unint64_t)(*((void *)&v94 + 1) + v40) >> 63)
          + *((void *)&v94 + 1)
          + v40))
        / *((void *)&v94 + 1)
        + 1;
    if (v46 < 4) {
      goto LABEL_64;
    }
    v40 += (v46 & 0xFFFFFFFFFFFFFFFCLL) * *((void *)&v94 + 1);
    int64x2_t v47 = 0uLL;
    int64x2_t v48 = (int64x2_t)(unint64_t)((uint64_t)v94 / *((void *)&v94 + 1));
    v49.i64[0] = -1;
    v49.i64[1] = -1;
    unint64_t v50 = v46 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v48 = vaddq_s64(v48, v49);
      int64x2_t v47 = vaddq_s64(v47, v49);
      v50 -= 4;
    }
    while (v50);
    uint64_t v39 = vaddvq_s64(vaddq_s64(vzip2q_s64(v48, v47), vzip1q_s64(v48, v47)));
    if (v46 != (v46 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_64:
      do
      {
        v40 += *((void *)&v94 + 1);
        --v39;
      }
      while (v40 < 0);
    }
  }
  BOOL v51 = v36 < v39;
  if (v36 != v39)
  {
LABEL_42:
    if (!v51) {
      goto LABEL_45;
    }
LABEL_44:
    uint64_t v57 = *((void *)v14 + 6);
    long long v59 = v14[1];
    long long v58 = v14[2];
    long long v60 = *v14;
    long long v61 = *(_OWORD *)(a8 + 112);
    *uint64_t v14 = *v15;
    v14[1] = v61;
    v14[2] = *(_OWORD *)(a8 + 128);
    *((unsigned char *)v14 + 48) = *(unsigned char *)(a8 + 144);
    *uint64_t v15 = v60;
    *(_OWORD *)(a8 + 112) = v59;
    *(_OWORD *)(a8 + 128) = v58;
    *(unsigned char *)(a8 + 144) = v57;
    long long v62 = *(_OWORD *)(a8 + 8);
    *(_OWORD *)(a8 + 8) = *(_OWORD *)(a8 + 24);
    *(_OWORD *)(a8 + 24) = v62;
    goto LABEL_45;
  }
  int v52 = 0;
  do
  {
    uint64_t v53 = v37;
    uint64_t v54 = v40;
    v52 ^= 1u;
    if (!v37 || !v40)
    {
      if (v37 != v40 && (v52 != 0) != (v37 != 0)) {
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    uint64_t v55 = v35 / v37;
    uint64_t v37 = v35 % v37;
    uint64_t v56 = v38 / v40;
    uint64_t v40 = v38 % v40;
    uint64_t v38 = v54;
    uint64_t v35 = v53;
  }
  while (v55 == v56);
  BOOL v51 = v55 < v56;
  if (!v52) {
    goto LABEL_42;
  }
  if (v55 > v56) {
    goto LABEL_44;
  }
LABEL_45:
  *(void *)a8 = v12;
}

BOOL sub_1002CFCC4(double *a1, double *a2)
{
  double v2 = a1[2];
  double v3 = a2[2];
  if (vabdd_f64(v2, v3) >= 50.0) {
    return v2 < v3;
  }
  long long v28 = *(_OWORD *)a1;
  sub_1002CFEF8((int64_t)&v28);
  long long v27 = *(_OWORD *)a2;
  sub_1002CFEF8((int64_t)&v27);
  uint64_t v5 = *((void *)&v28 + 1);
  uint64_t v6 = (uint64_t)v28 / *((void *)&v28 + 1);
  uint64_t v7 = (uint64_t)v28 % *((void *)&v28 + 1);
  uint64_t v8 = *((void *)&v27 + 1);
  uint64_t v9 = (uint64_t)v27 / *((void *)&v27 + 1);
  uint64_t v10 = (uint64_t)v27 % *((void *)&v27 + 1);
  if ((uint64_t)v28 % *((void *)&v28 + 1) < 0)
  {
    unint64_t v11 = ((unint64_t)(*((void *)&v28 + 1) + v7) >> 63)
        + (((*((void *)&v28 + 1) + v7) & ~((*((void *)&v28 + 1) + v7) >> 63))
         - (((unint64_t)(*((void *)&v28 + 1) + v7) >> 63)
          + *((void *)&v28 + 1)
          + v7))
        / *((void *)&v28 + 1)
        + 1;
    if (v11 < 4) {
      goto LABEL_29;
    }
    v7 += (v11 & 0xFFFFFFFFFFFFFFFCLL) * *((void *)&v28 + 1);
    int64x2_t v12 = 0uLL;
    v13.i64[0] = 0;
    v13.i64[1] = (uint64_t)v28 / *((void *)&v28 + 1);
    v14.i64[0] = -1;
    v14.i64[1] = -1;
    unint64_t v15 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v13 = vaddq_s64(v13, v14);
      int64x2_t v12 = vaddq_s64(v12, v14);
      v15 -= 4;
    }
    while (v15);
    uint64_t v6 = vaddvq_s64(vaddq_s64(vzip1q_s64(v13, v12), vzip2q_s64(v13, v12)));
    if (v11 != (v11 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      do
      {
        v7 += *((void *)&v28 + 1);
        --v6;
      }
      while (v7 < 0);
    }
  }
  if (v10 < 0)
  {
    unint64_t v16 = ((unint64_t)(*((void *)&v27 + 1) + v10) >> 63)
        + (((*((void *)&v27 + 1) + v10) & ~((*((void *)&v27 + 1) + v10) >> 63))
         - (((unint64_t)(*((void *)&v27 + 1) + v10) >> 63)
          + *((void *)&v27 + 1)
          + v10))
        / *((void *)&v27 + 1)
        + 1;
    if (v16 < 4) {
      goto LABEL_30;
    }
    v10 += (v16 & 0xFFFFFFFFFFFFFFFCLL) * *((void *)&v27 + 1);
    int64x2_t v17 = 0uLL;
    int64x2_t v18 = (int64x2_t)(unint64_t)((uint64_t)v27 / *((void *)&v27 + 1));
    v19.i64[0] = -1;
    v19.i64[1] = -1;
    unint64_t v20 = v16 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v18 = vaddq_s64(v18, v19);
      int64x2_t v17 = vaddq_s64(v17, v19);
      v20 -= 4;
    }
    while (v20);
    uint64_t v9 = vaddvq_s64(vaddq_s64(vzip2q_s64(v18, v17), vzip1q_s64(v18, v17)));
    if (v16 != (v16 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v10 += *((void *)&v27 + 1);
        --v9;
      }
      while (v10 < 0);
    }
  }
  if (v6 != v9) {
    return v6 < v9;
  }
  int v21 = 0;
  while (1)
  {
    uint64_t v22 = v7;
    uint64_t v23 = v10;
    v21 ^= 1u;
    if (!v7 || !v10) {
      break;
    }
    uint64_t v24 = v5 / v7;
    uint64_t v7 = v5 % v7;
    uint64_t v25 = v8 / v10;
    uint64_t v10 = v8 % v10;
    uint64_t v8 = v23;
    uint64_t v5 = v22;
    if (v24 != v25)
    {
      BOOL result = v24 > v25;
      if (!v21) {
        return v24 < v25;
      }
      return result;
    }
  }
  if (v7 == v10) {
    return 0;
  }
  else {
    return (v21 != 0) ^ (v7 != 0);
  }
}

int64_t sub_1002CFEF8(int64_t result)
{
  int v1 = (void *)(result + 8);
  if (!*(void *)(result + 8))
  {
    std::logic_error::logic_error(&v7, "bad rational: zero denominator");
    v7.__vftable = (std::logic_error_vtbl *)&off_100465588;
    v5.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/C"
                         "ontents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/loca"
                         "l/include/boost/rational.hpp";
    v5.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
    uint64_t v6 = 892;
    sub_1002D0080(&v7, &v5);
  }
  double v2 = (uint64_t *)result;
  if (*(void *)result)
  {
    BOOL result = sub_1002D00EC((int64_t *)result, (uint64_t *)(result + 8));
    uint64_t v3 = *v2 / result;
    uint64_t v4 = v2[1] / result;
    uint64_t *v2 = v3;
    v2[1] = v4;
    if (v4 == 0x8000000000000000)
    {
      std::logic_error::logic_error(&v7, "bad rational: non-zero singular denominator");
      v7.__vftable = (std::logic_error_vtbl *)&off_100465588;
      v5.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app"
                           "/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/"
                           "local/include/boost/rational.hpp";
      v5.i64[1] = (uint64_t)"void boost::rational<long long>::normalize() [T = long long]";
      uint64_t v6 = 906;
      sub_1002D0080(&v7, &v5);
    }
    if (v4 < 0)
    {
      uint64_t *v2 = -v3;
      void *v1 = -v4;
    }
  }
  else
  {
    void *v1 = 1;
  }
  return result;
}

void sub_1002D0058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::domain_error a13)
{
}

void sub_1002D006C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::domain_error a13)
{
}

void sub_1002D0080(const std::logic_error *a1, int8x16_t *a2)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002D020C((uint64_t)exception, a1, a2);
}

void sub_1002D00D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1002D00EC(int64_t *a1, uint64_t *a2)
{
  int64_t v2 = *a1;
  if (*a1 == 0x8000000000000000)
  {
    uint64_t v12 = (uint64_t)0x8000000000000000 % *a2;
    return sub_1002D00EC(&v12);
  }
  else
  {
    uint64_t v4 = *a2;
    if (*a2 == 0x8000000000000000)
    {
      uint64_t v12 = (uint64_t)0x8000000000000000 % v2;
      return ((uint64_t (*)(void))sub_1002D00EC)();
    }
    else
    {
      if (v2 < 0) {
        int64_t v2 = -v2;
      }
      if (v4 >= 0) {
        int64_t v5 = *a2;
      }
      else {
        int64_t v5 = -v4;
      }
      if (v2 >= v5) {
        unint64_t result = v5;
      }
      else {
        unint64_t result = v2;
      }
      if (v2 <= v5) {
        int64_t v2 = v5;
      }
      if (v2)
      {
        if (result)
        {
          unsigned int v6 = __clz(__rbit64(v2));
          int64_t v7 = (unint64_t)v2 >> v6;
          unsigned int v8 = __clz(__rbit64(result));
          uint64_t v9 = result >> v8;
          if (v6 < v8) {
            LOBYTE(v8) = v6;
          }
          if ((unint64_t)v9 < 2)
          {
LABEL_28:
            if (v9 == 1) {
              int64_t v7 = 1;
            }
          }
          else
          {
            while (1)
            {
              unint64_t v10 = v7 % v9;
              int64_t v7 = v9 - v7 % v9;
              if (!v10) {
                break;
              }
              int64_t v11 = v10 >> __clz(__rbit64(v10));
              v7 >>= __clz(__rbit64(v7));
              if (v11 >= v7) {
                uint64_t v9 = v7;
              }
              else {
                uint64_t v9 = v11;
              }
              if (v11 > v7) {
                int64_t v7 = v11;
              }
              if (v9 <= 1) {
                goto LABEL_28;
              }
            }
          }
          return v7 << v8;
        }
        else
        {
          return v2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1002D020C(uint64_t a1, const std::logic_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &off_100451ED0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &off_100465510;
  *(void *)(a1 + 8) = off_100465540;
  *(void *)(a1 + 24) = off_100465568;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

uint64_t sub_1002D02C4(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100451DC0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::domain_error::~domain_error((std::domain_error *)(a1 + 8));
  return a1;
}

void sub_1002D0348()
{
}

void sub_1002D0494()
{
  std::domain_error::~domain_error(v0);
  operator delete();
}

void sub_1002D04C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1002D04F4(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_1002D088C((uint64_t)exception, a1);
}

void sub_1002D053C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002D0550(uint64_t a1)
{
  *(void *)(a1 + 24) = &off_100451DC0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *(void *)(a1 + 32) = 0;
  }
  std::domain_error::~domain_error((std::domain_error *)(a1 + 8));

  operator delete();
}

void sub_1002D05F4(std::domain_error *this)
{
  this[1].__vftable = (std::domain_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }

  std::domain_error::~domain_error(this);
}

void sub_1002D0680(std::domain_error *this)
{
  this[1].__vftable = (std::domain_error_vtbl *)&off_100451DC0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    this[1].__imp_.__imp_ = 0;
  }
  std::domain_error::~domain_error(this);

  operator delete();
}

void sub_1002D0728(std::domain_error *a1)
{
  a1->__vftable = (std::domain_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }

  std::domain_error::~domain_error(a1 - 1);
}

void sub_1002D07B0(std::domain_error *a1)
{
  a1->__vftable = (std::domain_error_vtbl *)&off_100451DC0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(void *)imp + 32))(imp)) {
    a1->__imp_.__imp_ = 0;
  }
  std::domain_error::~domain_error(a1 - 1);

  operator delete();
}

void sub_1002D0854(std::domain_error *a1)
{
  std::domain_error::~domain_error(a1);

  operator delete();
}

uint64_t sub_1002D088C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_100451ED0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = &off_100465588;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &off_100451DC0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &off_100465510;
  *(void *)(a1 + 8) = off_100465540;
  *(void *)(a1 + 24) = off_100465568;
  return a1;
}

void sub_1002D09B4(_Unwind_Exception *a1)
{
  std::domain_error::~domain_error(v1);
  _Unwind_Resume(a1);
}

double sub_1002D09C8(uint64_t a1, double *a2, double **a3, double **a4)
{
  uint64_t v4 = a4;
  long long v5 = a3;
  double v8 = *(double *)a1;
  double v7 = *(double *)(a1 + 8);
  double v9 = v7 * v7 + v8 * v8;
  double v11 = *(double *)(a1 + 16);
  double v10 = *(double *)(a1 + 24);
  double v12 = v10 * v10 + v11 * v11;
  if (v9 >= v12) {
    double v13 = v7 * v7 + v8 * v8;
  }
  else {
    double v13 = v10 * v10 + v11 * v11;
  }
  if (v13 <= 0.0) {
    goto LABEL_10;
  }
  double v14 = vabdd_f64(0.5, *(double *)(a1 + 72) / 1000000.0);
  double v15 = v14 + v14;
  if (v15 > 1.0) {
    double v15 = 1.0;
  }
  double v16 = vabdd_f64(0.5, *(double *)(a1 + 48) / 1000000.0);
  double v17 = v16 + v16;
  if (v17 > 1.0) {
    double v17 = 1.0;
  }
  if (1.0 - v9 / v13 + v17 * 5.0 <= 1.0 - v12 / v13 + v15 * 5.0)
  {
    double v22 = (double)*(uint64_t *)(a1 + 56);
    double v23 = (double)*(uint64_t *)(a1 + 64);
    uint64_t v24 = *a4;
    *a2 = v11 * v22 / v23 + **a4;
    double result = v10 * v22 / v23 + v24[1];
    a2[1] = result;
    if (*(void *)(a1 + 40)) {
      return result;
    }
  }
  else
  {
LABEL_10:
    uint64_t v18 = *(void *)(a1 + 40);
    double v19 = (double)*(uint64_t *)(a1 + 32);
    unint64_t v20 = *a3;
    *a2 = v8 * v19 / (double)v18 + **a3;
    double result = v7 * v19 / (double)v18 + v20[1];
    a2[1] = result;
    if (v18) {
      return result;
    }
  }
  if (!*(void *)(a1 + 64))
  {
    if (!sub_1002D0B90(a2, a3))
    {
      if (!sub_1002D0D24(a2, v5))
      {
LABEL_18:
        if (sub_1002D0B90(a2, v4))
        {
LABEL_21:
          uint64_t v26 = *v4;
          *a2 = **v4;
          double result = v26[1];
          a2[1] = result;
          return result;
        }
        if (sub_1002D0D24(a2, v4))
        {
          ++v4;
          goto LABEL_21;
        }
        return result;
      }
      ++v5;
    }
    uint64_t v25 = *v5;
    *a2 = **v5;
    a2[1] = v25[1];
    goto LABEL_18;
  }
  return result;
}

BOOL sub_1002D0B90(double *a1, double **a2)
{
  double v2 = *a1;
  uint64_t v3 = a2[1];
  double v4 = **a2;
  if (v4 < *v3)
  {
    if (v2 >= v4) {
      goto LABEL_12;
    }
    if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v5 = vabdd_f64(v4, v2);
      double v6 = fabs(v4);
      double v7 = fabs(v2);
      if (v6 >= v7) {
        double v7 = v6;
      }
      goto LABEL_24;
    }
    return 1;
  }
  if (v4 <= *v3 || v4 >= v2) {
    goto LABEL_12;
  }
  if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 1;
  }
  double v5 = vabdd_f64(v2, v4);
  double v7 = fabs(v2);
  double v14 = fabs(v4);
  if (v7 < v14) {
    double v7 = v14;
  }
LABEL_24:
  if (v7 >= 1.0) {
    double v15 = v7 * 2.22044605e-16;
  }
  else {
    double v15 = 2.22044605e-16;
  }
  if (v5 > v15) {
    return 1;
  }
LABEL_12:
  double v9 = a1[1];
  double v10 = (*a2)[1];
  double v11 = v3[1];
  if (v10 >= v11)
  {
    if (v10 <= v11 || v10 >= v9) {
      return 0;
    }
    if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 1;
    }
    double v16 = vabdd_f64(v9, v10);
    double v18 = fabs(v9);
    double v19 = fabs(v10);
    if (v18 < v19) {
      double v18 = v19;
    }
  }
  else
  {
    if (v9 >= v10) {
      return 0;
    }
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 1;
    }
    double v16 = vabdd_f64(v10, v9);
    double v17 = fabs(v10);
    double v18 = fabs(v9);
    if (v17 >= v18) {
      double v18 = v17;
    }
  }
  if (v18 >= 1.0) {
    double v20 = v18 * 2.22044605e-16;
  }
  else {
    double v20 = 2.22044605e-16;
  }
  return v16 > v20;
}

BOOL sub_1002D0D24(double *a1, double **a2)
{
  double v2 = *a1;
  uint64_t v3 = a2[1];
  double v4 = *v3;
  double v5 = **a2;
  if (*v3 < v5)
  {
    if (v2 >= v4) {
      goto LABEL_12;
    }
    if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v6 = vabdd_f64(v4, v2);
      double v7 = fabs(v4);
      double v8 = fabs(v2);
      if (v7 >= v8) {
        double v8 = v7;
      }
      goto LABEL_24;
    }
    return 1;
  }
  if (*v3 <= v5 || v4 >= v2) {
    goto LABEL_12;
  }
  if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 1;
  }
  double v6 = vabdd_f64(v2, v4);
  double v8 = fabs(v2);
  double v15 = fabs(v4);
  if (v8 < v15) {
    double v8 = v15;
  }
LABEL_24:
  if (v8 >= 1.0) {
    double v16 = v8 * 2.22044605e-16;
  }
  else {
    double v16 = 2.22044605e-16;
  }
  if (v6 > v16) {
    return 1;
  }
LABEL_12:
  double v10 = a1[1];
  double v11 = v3[1];
  double v12 = (*a2)[1];
  if (v11 >= v12)
  {
    if (v11 <= v12 || v11 >= v10) {
      return 0;
    }
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 1;
    }
    double v17 = vabdd_f64(v10, v11);
    double v19 = fabs(v10);
    double v20 = fabs(v11);
    if (v19 < v20) {
      double v19 = v20;
    }
  }
  else
  {
    if (v10 >= v11) {
      return 0;
    }
    if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 1;
    }
    double v17 = vabdd_f64(v11, v10);
    double v18 = fabs(v11);
    double v19 = fabs(v10);
    if (v18 >= v19) {
      double v19 = v18;
    }
  }
  if (v19 >= 1.0) {
    double v21 = v19 * 2.22044605e-16;
  }
  else {
    double v21 = 2.22044605e-16;
  }
  return v17 > v21;
}

void sub_1002D0EB8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x10;
  unint64_t v4 = v2 - 16;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    double v6 = *(void **)(a1 + 8);
    double v5 = *(char **)(a1 + 16);
    double v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)double v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    double v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        BOOL v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        double v5 = v35;
        if (!v37)
        {
          double v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            int v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              int v77 = (long long *)(v6 + 3);
              int v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *int v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_1000A6A10();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    double v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      double v7 = *(char **)(a1 + 8);
    }
    double v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0x1780uLL);
      sub_100192E00((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0x1780uLL);
    sub_100192F90((void **)a1, &v91);
    unint64_t v41 = *(void **)(a1 + 8);
    double v5 = *(char **)(a1 + 16);
    double v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    double v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        BOOL v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        double v5 = v35;
        if (!v37)
        {
          double v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            int v82 = &v34[8 * v43];
            int64x2_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              int64x2_t v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              uint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *uint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            int64x2_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)int64x2_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          double v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0x1780uLL);
  long long v27 = &v25[8 * v21];
  long long v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_1000A6A10();
      }
      int64x2_t v49 = (char *)operator new(8 * v48);
      long long v27 = &v49[8 * (v48 >> 2)];
      long long v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)long long v27 = v90;
      unsigned int v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)long long v27 = v26;
      unsigned int v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_1000A6A10();
          }
          long long v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          unsigned int v29 = v53;
          if (!v37)
          {
            unsigned int v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            int v64 = &v60[8 * v61];
            int v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            int v64 = &v60[8 * v61];
            int v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            int v64 = &v53[v68];
            int v65 = &v27[v68];
            int v69 = (long long *)(v27 + 16);
            int v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)int v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)int v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          long long v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          uint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          unsigned int v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      BOOL v51 = v53 - 8;
      long long v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)long long v27 = v26;
  unsigned int v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  BOOL v51 = v27;
LABEL_46:
  int v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_1002D1428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1002D1444(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002D1458(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002D1470(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D1488(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  BOOL v3 = *(uint64_t **)(v1 + 16);
  unint64_t v4 = *(uint64_t **)(v1 + 24);
  double v5 = *(uint64_t **)(v2 + 24);
  double v9 = 1.0;
  double v6 = sub_1002CEBF4(v3, v4, v5, &v9);
  if (v6 == 0.0) {
    return 0;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    double v8 = fabs(v6);
    if (v6 > 0.0) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = 0xFFFFFFFFLL;
    }
    if (v8 <= v9 * 2.22044605e-16) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002D1524(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = *(uint64_t **)(v2 + 24);
  unint64_t v4 = (uint64_t *)sub_1002CEAE0(v2);
  double v5 = *(uint64_t **)(*(void *)(a1 + 16) + 24);
  double v9 = 1.0;
  double v6 = sub_1002CEBF4(v3, v4, v5, &v9);
  if (v6 == 0.0) {
    return 0;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    double v8 = fabs(v6);
    if (v6 > 0.0) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = 0xFFFFFFFFLL;
    }
    if (v8 <= v9 * 2.22044605e-16) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002D15E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  BOOL v3 = *(uint64_t **)(v1 + 16);
  unint64_t v4 = *(uint64_t **)(v1 + 24);
  double v5 = *(uint64_t **)(v2 + 24);
  double v9 = 1.0;
  double v6 = sub_1002CEBF4(v3, v4, v5, &v9);
  if (v6 == 0.0) {
    return 0;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v6 > 0.0) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    double v8 = fabs(v6);
    if (v6 > 0.0) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = 0xFFFFFFFFLL;
    }
    if (v8 <= v9 * 2.22044605e-16) {
      return 0;
    }
  }
  return result;
}

void sub_1002D167C(int a1, int a2, void *__src, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(unsigned char *))
{
  memcpy(v38, __src, sizeof(v38));
  int v11 = *(_DWORD *)(a5 + 496);
  if (*(_DWORD *)(a5 + 492) == 1)
  {
    uint64_t v12 = *(void *)(a6 + 8);
    uint64_t v13 = *(uint64_t **)(v12 + 16);
    uint64_t v14 = *(uint64_t **)(v12 + 24);
    double v15 = (uint64_t *)sub_1002CEAE0(v12);
    double v39 = 1.0;
    double v16 = sub_1002CEBF4(v13, v14, v15, &v39);
    if (v16 != 0.0
      && ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || fabs(v16) > v39 * 2.22044605e-16))
    {
      if (v16 <= 0.0) {
        int v17 = 1;
      }
      else {
        int v17 = 2;
      }
      *(_DWORD *)&v38[208] = 3;
      *(_DWORD *)&v38[40] = v17;
      *(_DWORD *)&v38[16] = 5;
      *(_OWORD *)int64_t v38 = *(_OWORD *)(a5 + 328);
      uint64_t v18 = *(void *)(a5 + 416);
      *(_OWORD *)&v38[88] = *(_OWORD *)(a5 + 400);
      *(void *)&v38[104] = v18;
      long long v19 = *(_OWORD *)(a5 + 424);
      *(void *)&v38[272] = *(void *)(a5 + 440);
      *(_OWORD *)&v38[256] = v19;
      a7(v38);
      uint64_t v20 = (void *)*a4;
      uint64_t v21 = *(void *)(*a4 + 16);
      uint64_t v22 = *(void *)(*a4 + 8);
      uint64_t v23 = 2 * (v21 - v22) - 1;
      if (v21 == v22) {
        uint64_t v23 = 0;
      }
      unint64_t v24 = v20[5] + v20[4];
      if (v23 == v24)
      {
        sub_1002D0EB8(*a4);
        uint64_t v22 = v20[1];
        unint64_t v24 = v20[5] + v20[4];
      }
      memcpy((void *)(*(void *)(v22 + ((v24 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v24 & 0xF)), v38, 0x178uLL);
      ++v20[5];
    }
  }
  if (v11 == 1)
  {
    uint64_t v25 = *(void *)(a6 + 16);
    uint64_t v26 = *(uint64_t **)(v25 + 16);
    long long v27 = *(uint64_t **)(v25 + 24);
    long long v28 = (uint64_t *)sub_1002CEAE0(v25);
    double v39 = 1.0;
    double v29 = sub_1002CEBF4(v26, v27, v28, &v39);
    if (v29 != 0.0
      && ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || fabs(v29) > v39 * 2.22044605e-16))
    {
      if (v29 <= 0.0) {
        int v30 = 1;
      }
      else {
        int v30 = 2;
      }
      *(_DWORD *)&v38[208] = v30;
      *(_DWORD *)&v38[40] = 3;
      *(_DWORD *)&v38[16] = 5;
      *(_OWORD *)int64_t v38 = *(_OWORD *)(a5 + 312);
      uint64_t v31 = *(void *)(a5 + 360);
      *(_OWORD *)&v38[88] = *(_OWORD *)(a5 + 344);
      *(void *)&v38[104] = v31;
      uint64_t v32 = *(void *)(a5 + 384);
      *(_OWORD *)&v38[256] = *(_OWORD *)(a5 + 368);
      *(void *)&v38[272] = v32;
      a7(v38);
      uint64_t v33 = (void *)*a4;
      uint64_t v34 = *(void *)(*a4 + 16);
      uint64_t v35 = *(void *)(*a4 + 8);
      uint64_t v36 = 2 * (v34 - v35) - 1;
      if (v34 == v35) {
        uint64_t v36 = 0;
      }
      unint64_t v37 = v33[5] + v33[4];
      if (v36 == v37)
      {
        sub_1002D0EB8(*a4);
        uint64_t v35 = v33[1];
        unint64_t v37 = v33[5] + v33[4];
      }
      memcpy((void *)(*(void *)(v35 + ((v37 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v37 & 0xF)), v38, 0x178uLL);
      ++v33[5];
    }
  }
}

uint64_t sub_1002D195C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  long long __p = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v14 = *(double **)a1;
  double v15 = *(double **)(a1 + 8);
  if ((unint64_t)v15 - *(void *)a1 >= 0x20)
  {
    *(void *)&long long v24 = 0;
    *((void *)&v24 + 1) = -1;
    uint64_t v25 = -1;
    sub_1002C8640(&__p, v14, v15, a3, a2, &v24, 0xAuLL);
  }
  int v17 = *(double ***)(a1 + 24);
  double v16 = *(double ***)(a1 + 32);
  if (v17 != v16)
  {
    uint64_t v18 = 0;
    do
    {
      long long v19 = *v17;
      uint64_t v20 = v17[1];
      if ((unint64_t)((char *)v20 - (char *)*v17) >= 0x20)
      {
        long long v24 = xmmword_1003E6BE0;
        uint64_t v25 = v18;
        sub_1002C8640(&__p, v19, v20, a3, a2, &v24, 0xAuLL);
        double v16 = *(double ***)(a1 + 32);
      }
      ++v18;
      v17 += 3;
    }
    while (v17 != v16);
  }
  *(void *)&long long v24 = a1;
  *((void *)&v24 + 1) = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  int v28 = a6;
  char v29 = a7;
  uint64_t v22 = a2;
  uint64_t v23 = a2;
  sub_1002D1ACC((uint64_t *)&__p, (uint64_t)&v24, (uint64_t)&v23, (uint64_t)&v22, 0x10uLL);
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_1002D1AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D1ACC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = *a1;
  double v7 = (unsigned char *)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v7[-*a1] >> 3) <= a5)
  {
    if ((unsigned char *)v8 != v7)
    {
      uint64_t v13 = (unsigned char *)(v8 + 216);
      do
      {
        uint64_t v14 = (unsigned char *)(v8 + 120);
        if ((unsigned char *)(v8 + 120) != v7)
        {
          for (uint64_t i = v13; i - 96 != v7; i += 120)
          {
            if (*(void *)(v8 + 48) >= *((void *)i - 8) && *(void *)(v8 + 32) <= *((void *)i - 6))
            {
              BOOL v16 = *(void *)(v8 + 56) >= *((void *)i - 7) && *(void *)(v8 + 40) <= *((void *)i - 5);
              BOOL v17 = v16 && *(unsigned char *)(v8 + 96) == 0;
              if (v17 && *i == 0)
              {
                if (!sub_1002D487C(*(_DWORD *)(a2 + 40), *(double ***)a2, (int *)v8, *(_DWORD *)(a2 + 40), *(double ***)a2, (int *)i - 24, 0, *(unsigned __int8 *)(a2 + 44), *(void *)(a2 + 8), *(void *)(a2 + 16), *(void **)(a2 + 24)))return 0; {
                double v7 = (unsigned char *)a1[1];
                }
              }
            }
          }
        }
        v13 += 120;
        v8 += 120;
      }
      while (v14 != v7);
    }
    return 1;
  }
  long long __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  v20[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v20[1] = vdupq_n_s64(0x8000000000000000);
  sub_1002C90BC(a1, (uint64_t *)v20, (char **)&__p);
  uint64_t v12 = sub_1002D1C98(v20, &__p, 0, a5, a2, a3, a4, (uint64_t)&v24);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1002D1C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D1C98(void *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *a1;
  uint64_t v15 = a1[2];
  if ((uint64_t)*a1 >= 0) {
    uint64_t v16 = *a1;
  }
  else {
    uint64_t v16 = v14 + 1;
  }
  uint64_t v17 = v16 >> 1;
  if (v15 >= 0) {
    uint64_t v18 = a1[2];
  }
  else {
    uint64_t v18 = v15 + 1;
  }
  uint64_t v19 = v18 >> 1;
  long long v20 = *((_OWORD *)a1 + 1);
  int v21 = v15 - 2 * v19 + v14 - 2 * v17;
  long long v73 = *(_OWORD *)a1;
  uint64_t v75 = *((void *)&v20 + 1);
  *((void *)&v72[0] + 1) = *((void *)&v73 + 1);
  v72[1] = v20;
  uint64_t v74 = v19 + v17 + ((v21 + ((v21 & 0x80) >> 7)) << 24 >> 25);
  uint64_t v71 = 0;
  *(void *)&v72[0] = v74;
  int v69 = 0;
  int v70 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  long long __p = 0;
  int v64 = 0;
  uint64_t v65 = 0;
  sub_1002CA168(&v73, v72, a2, &v69, (char **)&v66, (char **)&__p);
  uint64_t v23 = (char *)__p;
  uint64_t v22 = v64;
  if (__p == v64) {
    goto LABEL_32;
  }
  uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v25 = 0x8000000000000000;
  int64x2_t v61 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v62 = vdupq_n_s64(0x8000000000000000);
  int64_t v26 = 0x8000000000000000;
  uint64_t v27 = (char *)__p;
  uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    char v29 = *(void **)v27;
    int64_t v30 = *(void *)(*(void *)v27 + 32);
    if (v30 < v28)
    {
      v61.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v28 = v30;
      if (v30 <= v26)
      {
LABEL_12:
        uint64_t v31 = v29[5];
        if (v31 >= v24) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
    }
    else if (v30 <= v26)
    {
      goto LABEL_12;
    }
    v62.i64[0] = v30;
    int64_t v26 = v30;
    uint64_t v31 = v29[5];
    if (v31 >= v24)
    {
LABEL_13:
      if (v31 <= v25) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
LABEL_21:
    v61.i64[1] = v31;
    uint64_t v24 = v31;
    if (v31 <= v25)
    {
LABEL_14:
      uint64_t v32 = v29[6];
      if (v32 >= v28) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
LABEL_22:
    v62.i64[1] = v31;
    int64_t v25 = v31;
    uint64_t v32 = v29[6];
    if (v32 >= v28)
    {
LABEL_15:
      if (v32 <= v26) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
LABEL_23:
    v61.i64[0] = v32;
    uint64_t v28 = v32;
    if (v32 <= v26)
    {
LABEL_16:
      uint64_t v33 = v29[7];
      if (v33 < v24) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
LABEL_24:
    v62.i64[0] = v32;
    int64_t v26 = v32;
    uint64_t v33 = v29[7];
    if (v33 < v24)
    {
LABEL_25:
      v61.i64[1] = v33;
      uint64_t v24 = v33;
      if (v33 <= v25) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
LABEL_17:
    if (v33 <= v25) {
      goto LABEL_9;
    }
LABEL_26:
    v62.i64[1] = v33;
    int64_t v25 = v33;
LABEL_9:
    v27 += 8;
  }
  while (v27 != v64);
  if (a3 <= 0x63 && (v64 - (unsigned char *)__p) >> 3 >= a4)
  {
    if (sub_1002D2404((long long *)v61.i8, &__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_30;
    }
    goto LABEL_98;
  }
  do
  {
    uint64_t v36 = v23 + 8;
    if (v23 + 8 != v22)
    {
      for (uint64_t i = v23 + 8; i != v22; i += 8)
      {
        uint64_t v38 = *(void *)v23;
        uint64_t v39 = *(void *)i;
        if (*(void *)(*(void *)v23 + 48) >= *(void *)(*(void *)i + 32)
          && *(void *)(v38 + 32) <= *(void *)(v39 + 48))
        {
          BOOL v40 = *(void *)(v38 + 56) >= *(void *)(v39 + 40) && *(void *)(v38 + 40) <= *(void *)(v39 + 56);
          BOOL v41 = v40 && *(unsigned char *)(v38 + 96) == 0;
          if (v41 && *(unsigned char *)(v39 + 96) == 0)
          {
            if (!sub_1002D487C(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v38, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v39, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24)))goto LABEL_98; {
            uint64_t v22 = v64;
            }
          }
        }
      }
    }
    v23 += 8;
  }
  while (v36 != v22);
LABEL_30:
  if (sub_1002D2290((long long *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v69, a3, a4, a5, a6, a7, a8)
    && (sub_1002D2290((long long *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v66, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    uint64_t v35 = (char *)v69;
    uint64_t v34 = v70;
    if (a3 > 0x63 || (v70 - (unsigned char *)v69) >> 3 < a4)
    {
LABEL_73:
      while (v35 != v34)
      {
        unint64_t v43 = v35;
        v35 += 8;
        if (v35 != v34)
        {
          uint64_t v44 = v35;
          while (1)
          {
            uint64_t v45 = *(void *)v43;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v43 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002D487C(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v45, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v46, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24)))goto LABEL_98; {
                uint64_t v34 = v70;
                }
              }
            }
            v44 += 8;
            if (v44 == v34) {
              goto LABEL_73;
            }
          }
        }
      }
    }
    else if (!sub_1002D2404(&v73, &v69, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    BOOL v51 = (char *)v66;
    uint64_t v50 = v67;
    if (a3 > 0x63 || (v67 - (unsigned char *)v66) >> 3 < a4)
    {
      if (v66 == v67)
      {
        uint64_t v52 = 1;
      }
      else
      {
        do
        {
          uint64_t v53 = v51;
          v51 += 8;
          if (v51 != v50)
          {
            for (int j = v51; j != v50; j += 8)
            {
              uint64_t v55 = *(void *)v53;
              uint64_t v56 = *(void *)j;
              if (*(void *)(*(void *)v53 + 48) >= *(void *)(*(void *)j + 32)
                && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
              {
                BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
                BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
                if (v58 && *(unsigned char *)(v56 + 96) == 0)
                {
                  if (!sub_1002D487C(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v55, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v56, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24)))goto LABEL_98; {
                  uint64_t v50 = v67;
                  }
                }
              }
            }
          }
          uint64_t v52 = 1;
        }
        while (v51 != v50);
      }
    }
    else
    {
      uint64_t v52 = sub_1002D2404(v72, &v66, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    uint64_t v52 = 0;
  }
  if (__p)
  {
    int v64 = (char *)__p;
    operator delete(__p);
  }
  if (v66)
  {
    uint64_t v67 = (char *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    int v70 = (char *)v69;
    operator delete(v69);
  }
  return v52;
}

void sub_1002D222C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    int64_t v26 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v27 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v26 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  uint64_t v27 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D2290(long long *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_1002D39F8(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 != v12)
  {
    uint64_t v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        uint64_t v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            uint64_t v17 = *v13;
            uint64_t v18 = *v16;
            if (*(void *)(*v13 + 48) >= *(void *)(*v16 + 32) && *(void *)(v17 + 32) <= *(void *)(v18 + 48))
            {
              BOOL v19 = *(void *)(v17 + 56) >= *(void *)(v18 + 40) && *(void *)(v17 + 40) <= *(void *)(v18 + 56);
              BOOL v20 = v19 && *(unsigned char *)(v17 + 96) == 0;
              if (v20 && *(unsigned char *)(v18 + 96) == 0)
              {
                uint64_t result = sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v17, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v18, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24));
                if (!result) {
                  return result;
                }
                uint64_t v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          uint64_t v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_1002D2404(long long *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *((void *)a1 + 2);
  uint64_t v14 = *((void *)a1 + 3);
  uint64_t v16 = *((void *)a1 + 1);
  if (v16 >= 0) {
    uint64_t v17 = *((void *)a1 + 1);
  }
  else {
    uint64_t v17 = v16 + 1;
  }
  uint64_t v18 = v17 >> 1;
  if (v14 >= 0) {
    uint64_t v19 = *((void *)a1 + 3);
  }
  else {
    uint64_t v19 = v14 + 1;
  }
  long long v20 = a1[1];
  long long v73 = *a1;
  v71[0] = v73;
  long long v72 = v20;
  uint64_t v74 = v15;
  uint64_t v75 = (v19 >> 1)
      + v18
      + ((int)((v14
              - 2 * (v19 >> 1)
              + v16
              - 2 * v18
              + (((v14 - 2 * (v19 >> 1) + v16 - 2 * v18) & 0x80) >> 7)) << 24) >> 25);
  v71[1] = v75;
  uint64_t v68 = 0;
  int v69 = 0;
  uint64_t v70 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  long long __p = 0;
  unint64_t v63 = 0;
  uint64_t v64 = 0;
  sub_1002CA168(&v73, v71, a2, &v68, (char **)&v65, (char **)&__p);
  uint64_t v22 = (char *)__p;
  int v21 = v63;
  if (__p == v63) {
    goto LABEL_32;
  }
  uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v24 = 0x8000000000000000;
  int64x2_t v60 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v61 = vdupq_n_s64(0x8000000000000000);
  int64_t v25 = 0x8000000000000000;
  int64_t v26 = (char *)__p;
  uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v28 = *(void **)v26;
    int64_t v29 = *(void *)(*(void *)v26 + 32);
    if (v29 < v27)
    {
      v60.i64[0] = *(void *)(*(void *)v26 + 32);
      uint64_t v27 = v29;
      if (v29 <= v25)
      {
LABEL_12:
        uint64_t v30 = v28[5];
        if (v30 >= v23) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
    }
    else if (v29 <= v25)
    {
      goto LABEL_12;
    }
    v61.i64[0] = v29;
    int64_t v25 = v29;
    uint64_t v30 = v28[5];
    if (v30 >= v23)
    {
LABEL_13:
      if (v30 <= v24) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
LABEL_21:
    v60.i64[1] = v30;
    uint64_t v23 = v30;
    if (v30 <= v24)
    {
LABEL_14:
      uint64_t v31 = v28[6];
      if (v31 >= v27) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
LABEL_22:
    v61.i64[1] = v30;
    int64_t v24 = v30;
    uint64_t v31 = v28[6];
    if (v31 >= v27)
    {
LABEL_15:
      if (v31 <= v25) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
LABEL_23:
    v60.i64[0] = v31;
    uint64_t v27 = v31;
    if (v31 <= v25)
    {
LABEL_16:
      uint64_t v32 = v28[7];
      if (v32 < v23) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
LABEL_24:
    v61.i64[0] = v31;
    int64_t v25 = v31;
    uint64_t v32 = v28[7];
    if (v32 < v23)
    {
LABEL_25:
      v60.i64[1] = v32;
      uint64_t v23 = v32;
      if (v32 <= v24) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
LABEL_17:
    if (v32 <= v24) {
      goto LABEL_9;
    }
LABEL_26:
    v61.i64[1] = v32;
    int64_t v24 = v32;
LABEL_9:
    v26 += 8;
  }
  while (v26 != v63);
  if (a3 <= 0x63 && (v63 - (unsigned char *)__p) >> 3 >= a4)
  {
    if (sub_1002D1C98(&v60, &__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_30;
    }
    goto LABEL_98;
  }
  do
  {
    uint64_t v35 = v22 + 8;
    if (v22 + 8 != v21)
    {
      for (uint64_t i = v22 + 8; i != v21; i += 8)
      {
        uint64_t v37 = *(void *)v22;
        uint64_t v38 = *(void *)i;
        if (*(void *)(*(void *)v22 + 48) >= *(void *)(*(void *)i + 32)
          && *(void *)(v37 + 32) <= *(void *)(v38 + 48))
        {
          BOOL v39 = *(void *)(v37 + 56) >= *(void *)(v38 + 40) && *(void *)(v37 + 40) <= *(void *)(v38 + 56);
          BOOL v40 = v39 && *(unsigned char *)(v37 + 96) == 0;
          if (v40 && *(unsigned char *)(v38 + 96) == 0)
          {
            if (!sub_1002D487C(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v37, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v38, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24)))goto LABEL_98; {
            int v21 = v63;
            }
          }
        }
      }
    }
    v22 += 8;
  }
  while (v35 != v21);
LABEL_30:
  if (sub_1002D2A00(v60.i64, (uint64_t **)&__p, (uint64_t **)&v68, a3, a4, a5, a6, a7, a8)
    && (sub_1002D2A00(v60.i64, (uint64_t **)&__p, (uint64_t **)&v65, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    uint64_t v34 = (char *)v68;
    uint64_t v33 = v69;
    if (a3 > 0x63 || (v69 - (unsigned char *)v68) >> 3 < a4)
    {
LABEL_73:
      while (v34 != v33)
      {
        unint64_t v42 = v34;
        v34 += 8;
        if (v34 != v33)
        {
          unint64_t v43 = v34;
          while (1)
          {
            uint64_t v44 = *(void *)v42;
            uint64_t v45 = *(void *)v43;
            if (*(void *)(*(void *)v42 + 48) >= *(void *)(*(void *)v43 + 32)
              && *(void *)(v44 + 32) <= *(void *)(v45 + 48))
            {
              BOOL v46 = *(void *)(v44 + 56) >= *(void *)(v45 + 40) && *(void *)(v44 + 40) <= *(void *)(v45 + 56);
              BOOL v47 = v46 && *(unsigned char *)(v44 + 96) == 0;
              if (v47 && *(unsigned char *)(v45 + 96) == 0)
              {
                if (!sub_1002D487C(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v44, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v45, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24)))goto LABEL_98; {
                uint64_t v33 = v69;
                }
              }
            }
            v43 += 8;
            if (v43 == v33) {
              goto LABEL_73;
            }
          }
        }
      }
    }
    else if (!sub_1002D1C98(&v73, &v68, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    uint64_t v50 = (char *)v65;
    int64x2_t v49 = v66;
    if (a3 > 0x63 || (v66 - (unsigned char *)v65) >> 3 < a4)
    {
      if (v65 == v66)
      {
        uint64_t v51 = 1;
      }
      else
      {
        do
        {
          uint64_t v52 = v50;
          v50 += 8;
          if (v50 != v49)
          {
            for (int j = v50; j != v49; j += 8)
            {
              uint64_t v54 = *(void *)v52;
              uint64_t v55 = *(void *)j;
              if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)j + 32)
                && *(void *)(v54 + 32) <= *(void *)(v55 + 48))
              {
                BOOL v56 = *(void *)(v54 + 56) >= *(void *)(v55 + 40) && *(void *)(v54 + 40) <= *(void *)(v55 + 56);
                BOOL v57 = v56 && *(unsigned char *)(v54 + 96) == 0;
                if (v57 && *(unsigned char *)(v55 + 96) == 0)
                {
                  if (!sub_1002D487C(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v54, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v55, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24)))goto LABEL_98; {
                  int64x2_t v49 = v66;
                  }
                }
              }
            }
          }
          uint64_t v51 = 1;
        }
        while (v50 != v49);
      }
    }
    else
    {
      uint64_t v51 = sub_1002D1C98(v71, &v65, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    uint64_t v51 = 0;
  }
  if (__p)
  {
    unint64_t v63 = (char *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    uint64_t v66 = (char *)v65;
    operator delete(v65);
  }
  if (v68)
  {
    int v69 = (char *)v68;
    operator delete(v68);
  }
  return v51;
}

void sub_1002D299C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    int64_t v26 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v27 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v26 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  uint64_t v27 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D2A00(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_1002D2B74(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 != v12)
  {
    uint64_t v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        uint64_t v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            uint64_t v17 = *v13;
            uint64_t v18 = *v16;
            if (*(void *)(*v13 + 48) >= *(void *)(*v16 + 32) && *(void *)(v17 + 32) <= *(void *)(v18 + 48))
            {
              BOOL v19 = *(void *)(v17 + 56) >= *(void *)(v18 + 40) && *(void *)(v17 + 40) <= *(void *)(v18 + 56);
              BOOL v20 = v19 && *(unsigned char *)(v17 + 96) == 0;
              if (v20 && *(unsigned char *)(v18 + 96) == 0)
              {
                uint64_t result = sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v17, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v18, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24));
                if (!result) {
                  return result;
                }
                uint64_t v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          uint64_t v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_1002D2B74(uint64_t *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = *a1;
  uint64_t v18 = a1[2];
  if (*a1 >= 0) {
    uint64_t v19 = *a1;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  uint64_t v20 = v19 >> 1;
  long long v22 = *(_OWORD *)a1;
  long long v21 = *((_OWORD *)a1 + 1);
  long long v146 = *(_OWORD *)a1;
  long long v147 = v21;
  if (v18 >= 0) {
    uint64_t v23 = v18;
  }
  else {
    uint64_t v23 = v18 + 1;
  }
  uint64_t v24 = v23 >> 1;
  v144[1] = *((void *)&v22 + 1);
  long long v145 = v21;
  int v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(void *)&long long v147 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[0] = v147;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  long long v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  __int16 v132 = 0;
  int v133 = 0;
  uint64_t v134 = 0;
  int v129 = 0;
  char v130 = 0;
  uint64_t v131 = 0;
  long long __p = 0;
  v127 = 0;
  uint64_t v128 = 0;
  sub_1002CA168(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_1002CA168(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  uint64_t v27 = (char *)v135;
  int64_t v26 = v136;
  if (v135 == v136) {
    goto LABEL_147;
  }
  int64_t v29 = (char *)__p;
  uint64_t v28 = v127;
  if (a5 > (v136 - (unsigned char *)v135) >> 3 || a4 > 0x63 || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        uint64_t v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            uint64_t v45 = *(void *)v27;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v27 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v45, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v46, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
                uint64_t v28 = v127;
                }
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          int64_t v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v32 = 0x8000000000000000;
  uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v34 = *(void **)v27;
    int64_t v35 = *(void *)(*(void *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        uint64_t v36 = v34[5];
        if (v36 < v30) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v33 = v35;
      if (v35 <= v32) {
        goto LABEL_15;
      }
    }
    v125.i64[0] = v35;
    int64_t v32 = v35;
    uint64_t v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      uint64_t v30 = v36;
      if (v36 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      uint64_t v37 = v34[6];
      if (v37 < v33) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    int64_t v31 = v36;
    uint64_t v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      uint64_t v33 = v37;
      if (v37 <= v32) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      uint64_t v38 = v34[7];
      if (v38 >= v30) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    int64_t v32 = v37;
    uint64_t v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    uint64_t v30 = v38;
    if (v38 <= v31) {
      goto LABEL_12;
    }
LABEL_29:
    v125.i64[1] = v38;
    int64_t v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    BOOL v39 = *(void **)v29;
    int64_t v40 = *(void *)(*(void *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        uint64_t v41 = v39[5];
        if (v41 < v30) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v29 + 32);
      uint64_t v33 = v40;
      if (v40 <= v32) {
        goto LABEL_34;
      }
    }
    v125.i64[0] = v40;
    int64_t v32 = v40;
    uint64_t v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      uint64_t v30 = v41;
      if (v41 <= v31) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      uint64_t v42 = v39[6];
      if (v42 < v33) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    int64_t v31 = v41;
    uint64_t v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      uint64_t v33 = v42;
      if (v42 <= v32) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      uint64_t v43 = v39[7];
      if (v43 >= v30) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    int64_t v32 = v42;
    uint64_t v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    uint64_t v30 = v43;
    if (v43 <= v31) {
      goto LABEL_30;
    }
LABEL_48:
    v125.i64[1] = v43;
    int64_t v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002D39F8(&v124, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
    goto LABEL_278;
  }
LABEL_72:
  uint64_t v50 = v133;
  if (a5 > (v133 - (unsigned char *)v132) >> 3)
  {
    uint64_t v52 = (char *)v135;
    uint64_t v51 = v136;
    goto LABEL_75;
  }
  uint64_t v52 = (char *)v135;
  uint64_t v51 = v136;
  if (a5 <= (v130 - (unsigned char *)v129) >> 3 && a4 <= 0x63 && (v136 - (unsigned char *)v135) >> 3 >= a5)
  {
    int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v67 = 0x8000000000000000;
      int64_t v68 = 0x8000000000000000;
      uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v70 = *(void **)v52;
        int64_t v71 = *(void *)(*(void *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            uint64_t v72 = v70[5];
            if (v72 < v66) {
              goto LABEL_129;
            }
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(void *)(*(void *)v52 + 32);
          uint64_t v69 = v71;
          if (v71 <= v68) {
            goto LABEL_128;
          }
        }
        v125.i64[0] = v71;
        int64_t v68 = v71;
        uint64_t v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          uint64_t v66 = v72;
          if (v72 <= v67) {
            goto LABEL_130;
          }
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          uint64_t v73 = v70[6];
          if (v73 < v69) {
            goto LABEL_131;
          }
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        int64_t v67 = v72;
        uint64_t v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          uint64_t v69 = v73;
          if (v73 <= v68) {
            goto LABEL_132;
          }
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          uint64_t v74 = v70[7];
          if (v74 < v66) {
            goto LABEL_133;
          }
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        int64_t v68 = v73;
        uint64_t v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          uint64_t v66 = v74;
          if (v74 > v67) {
            goto LABEL_142;
          }
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          int64_t v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002D39F8(&v124, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002D39F8(&v124, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    uint64_t v115 = 0;
    char v116 = (char *)__p;
    if (!__p) {
      goto LABEL_280;
    }
LABEL_279:
    v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51) {
      goto LABEL_147;
    }
  }
  else
  {
    do
    {
      uint64_t v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          uint64_t v55 = *(void *)v52;
          uint64_t v56 = *(void *)v54;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v54 + 32)
            && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
          {
            BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
            BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
            if (v58 && *(unsigned char *)(v56 + 96) == 0)
            {
              if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v55, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v56, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
              uint64_t v50 = v133;
              }
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    uint64_t v52 = (char *)v135;
    if (v135 == v51) {
      goto LABEL_147;
    }
  }
  uint64_t v53 = v130;
  if (v129 != v130)
  {
    do
    {
      int64x2_t v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          uint64_t v61 = *(void *)v52;
          uint64_t v62 = *(void *)v60;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v60 + 32)
            && *(void *)(v61 + 32) <= *(void *)(v62 + 48))
          {
            BOOL v63 = *(void *)(v61 + 56) >= *(void *)(v62 + 40) && *(void *)(v61 + 40) <= *(void *)(v62 + 56);
            BOOL v64 = v63 && *(unsigned char *)(v61 + 96) == 0;
            if (v64 && *(unsigned char *)(v62 + 96) == 0)
            {
              if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v61, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v62, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
              uint64_t v53 = v130;
              }
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  uint64_t v76 = (char *)__p;
  uint64_t v75 = v127;
  if (__p == v127) {
    goto LABEL_198;
  }
  int v78 = (char *)v141;
  int v77 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3
    || a5 > (v139 - (unsigned char *)v138) >> 3
    || a4 > 0x63
    || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      long long v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          uint64_t v89 = *(void *)v78;
          uint64_t v90 = *(void *)v88;
          if (*(void *)(*(void *)v78 + 48) >= *(void *)(*(void *)v88 + 32)
            && *(void *)(v89 + 32) <= *(void *)(v90 + 48))
          {
            BOOL v91 = *(void *)(v89 + 56) >= *(void *)(v90 + 40) && *(void *)(v89 + 40) <= *(void *)(v90 + 56);
            BOOL v92 = v91 && *(unsigned char *)(v89 + 96) == 0;
            if (v92 && *(unsigned char *)(v90 + 96) == 0)
            {
              if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v89, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v90, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
              uint64_t v75 = v127;
              }
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        int v77 = v142;
      }
      v78 += 8;
    }
    long long v95 = (char *)v138;
    long long v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        double v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            uint64_t v100 = *(void *)v95;
            uint64_t v101 = *(void *)v99;
            if (*(void *)(*(void *)v95 + 48) >= *(void *)(*(void *)v99 + 32)
              && *(void *)(v100 + 32) <= *(void *)(v101 + 48))
            {
              BOOL v102 = *(void *)(v100 + 56) >= *(void *)(v101 + 40)
                  && *(void *)(v100 + 40) <= *(void *)(v101 + 56);
              BOOL v103 = v102 && *(unsigned char *)(v100 + 96) == 0;
              if (v103 && *(unsigned char *)(v101 + 96) == 0)
              {
                if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v100, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v101, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
                uint64_t v75 = v127;
                }
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          long long v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  uint64_t v79 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v80 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v81 = 0x8000000000000000;
  uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    uint64_t v83 = *(void **)v76;
    int64_t v84 = *(void *)(*(void *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81) {
        goto LABEL_164;
      }
LABEL_156:
      uint64_t v85 = v83[5];
      if (v85 < v79) {
        goto LABEL_157;
      }
LABEL_165:
      if (v85 > v80) {
        goto LABEL_166;
      }
LABEL_158:
      uint64_t v86 = v83[6];
      if (v86 < v82) {
        goto LABEL_159;
      }
LABEL_167:
      if (v86 > v81) {
        goto LABEL_168;
      }
LABEL_160:
      int64_t v87 = v83[7];
      if (v87 < v79) {
        goto LABEL_161;
      }
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        int64_t v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v76 + 32);
      uint64_t v82 = v84;
      if (v84 <= v81) {
        goto LABEL_156;
      }
LABEL_164:
      v125.i64[0] = v84;
      int64_t v81 = v84;
      uint64_t v85 = v83[5];
      if (v85 >= v79) {
        goto LABEL_165;
      }
LABEL_157:
      v124.i64[1] = v85;
      uint64_t v79 = v85;
      if (v85 <= v80) {
        goto LABEL_158;
      }
LABEL_166:
      v125.i64[1] = v85;
      int64_t v80 = v85;
      uint64_t v86 = v83[6];
      if (v86 >= v82) {
        goto LABEL_167;
      }
LABEL_159:
      v124.i64[0] = v86;
      uint64_t v82 = v86;
      if (v86 <= v81) {
        goto LABEL_160;
      }
LABEL_168:
      v125.i64[0] = v86;
      int64_t v81 = v86;
      int64_t v87 = v83[7];
      if (v87 >= v79) {
        goto LABEL_169;
      }
LABEL_161:
      v124.i64[1] = v87;
      uint64_t v79 = v87;
      if (v87 > v80) {
        goto LABEL_170;
      }
    }
    v76 += 8;
    if (v76 != v127) {
      continue;
    }
    break;
  }
  if (!sub_1002D39F8(&v124, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002D39F8(&v124, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  long long v98 = (char *)v141;
  double v97 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3 || a4 > 0x63 || (v133 - (unsigned char *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      uint64_t v105 = v133;
      if (v132 != v133)
      {
        do
        {
          __int16 v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              uint64_t v109 = *(void *)v98;
              uint64_t v110 = *(void *)v108;
              if (*(void *)(*(void *)v98 + 48) >= *(void *)(*(void *)v108 + 32)
                && *(void *)(v109 + 32) <= *(void *)(v110 + 48))
              {
                BOOL v111 = *(void *)(v109 + 56) >= *(void *)(v110 + 40)
                    && *(void *)(v109 + 40) <= *(void *)(v110 + 56);
                BOOL v112 = v111 && *(unsigned char *)(v109 + 96) == 0;
                if (v112 && *(unsigned char *)(v110 + 96) == 0)
                {
                  if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v109, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v110, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
                  uint64_t v105 = v133;
                  }
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            double v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002D39F8(&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v107 = (char *)v138;
  uint64_t v106 = v139;
  if (a5 > (v139 - (unsigned char *)v138) >> 3 || a4 > 0x63 || (v130 - (unsigned char *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      uint64_t v114 = v130;
      if (v129 != v130)
      {
        do
        {
          uint64_t v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              uint64_t v118 = *(void *)v107;
              uint64_t v119 = *(void *)v117;
              if (*(void *)(*(void *)v107 + 48) >= *(void *)(*(void *)v117 + 32)
                && *(void *)(v118 + 32) <= *(void *)(v119 + 48))
              {
                BOOL v120 = *(void *)(v118 + 56) >= *(void *)(v119 + 40)
                    && *(void *)(v118 + 40) <= *(void *)(v119 + 56);
                BOOL v121 = v120 && *(unsigned char *)(v118 + 96) == 0;
                if (v121 && *(unsigned char *)(v119 + 96) == 0)
                {
                  if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v118, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v119, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
                  uint64_t v114 = v130;
                  }
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            uint64_t v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002D39F8(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v115 = 1;
  char v116 = (char *)__p;
  if (__p) {
    goto LABEL_279;
  }
LABEL_280:
  if (v129)
  {
    char v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    int v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    uint64_t v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    uint64_t v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    uint64_t v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002D3934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v34 = a20;
    if (!a20)
    {
LABEL_3:
      int64_t v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  int64_t v35 = a23;
  if (!a23)
  {
LABEL_4:
    uint64_t v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  uint64_t v36 = a26;
  if (!a26)
  {
LABEL_5:
    uint64_t v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  uint64_t v37 = a29;
  if (!a29)
  {
LABEL_6:
    uint64_t v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  uint64_t v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D39F8(long long *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = *((void *)a1 + 2);
  uint64_t v17 = *((void *)a1 + 3);
  uint64_t v19 = *((void *)a1 + 1);
  if (v19 >= 0) {
    uint64_t v20 = *((void *)a1 + 1);
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  uint64_t v21 = v20 >> 1;
  long long v22 = *a1;
  long long v145 = a1[1];
  long long v146 = v22;
  if (v17 >= 0) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v17 + 1;
  }
  uint64_t v24 = v23 >> 1;
  v144[0] = v22;
  int v25 = v17 - 2 * v24 + v19 - 2 * v21;
  uint64_t v147 = v18;
  uint64_t v148 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[1] = v148;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  long long v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  __int16 v132 = 0;
  int v133 = 0;
  uint64_t v134 = 0;
  int v129 = 0;
  char v130 = 0;
  uint64_t v131 = 0;
  long long __p = 0;
  v127 = 0;
  uint64_t v128 = 0;
  sub_1002CA168(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_1002CA168(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  uint64_t v27 = (char *)v135;
  int64_t v26 = v136;
  if (v135 == v136) {
    goto LABEL_147;
  }
  int64_t v29 = (char *)__p;
  uint64_t v28 = v127;
  if (a5 > (v136 - (unsigned char *)v135) >> 3 || a4 > 0x63 || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        uint64_t v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            uint64_t v45 = *(void *)v27;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v27 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v45, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v46, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
                uint64_t v28 = v127;
                }
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          int64_t v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v32 = 0x8000000000000000;
  uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v34 = *(void **)v27;
    int64_t v35 = *(void *)(*(void *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        uint64_t v36 = v34[5];
        if (v36 < v30) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v33 = v35;
      if (v35 <= v32) {
        goto LABEL_15;
      }
    }
    v125.i64[0] = v35;
    int64_t v32 = v35;
    uint64_t v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      uint64_t v30 = v36;
      if (v36 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      uint64_t v37 = v34[6];
      if (v37 < v33) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    int64_t v31 = v36;
    uint64_t v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      uint64_t v33 = v37;
      if (v37 <= v32) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      uint64_t v38 = v34[7];
      if (v38 >= v30) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    int64_t v32 = v37;
    uint64_t v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    uint64_t v30 = v38;
    if (v38 <= v31) {
      goto LABEL_12;
    }
LABEL_29:
    v125.i64[1] = v38;
    int64_t v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    BOOL v39 = *(void **)v29;
    int64_t v40 = *(void *)(*(void *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        uint64_t v41 = v39[5];
        if (v41 < v30) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v29 + 32);
      uint64_t v33 = v40;
      if (v40 <= v32) {
        goto LABEL_34;
      }
    }
    v125.i64[0] = v40;
    int64_t v32 = v40;
    uint64_t v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      uint64_t v30 = v41;
      if (v41 <= v31) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      uint64_t v42 = v39[6];
      if (v42 < v33) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    int64_t v31 = v41;
    uint64_t v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      uint64_t v33 = v42;
      if (v42 <= v32) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      uint64_t v43 = v39[7];
      if (v43 >= v30) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    int64_t v32 = v42;
    uint64_t v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    uint64_t v30 = v43;
    if (v43 <= v31) {
      goto LABEL_30;
    }
LABEL_48:
    v125.i64[1] = v43;
    int64_t v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002D2B74(v124.i64, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
    goto LABEL_278;
  }
LABEL_72:
  uint64_t v50 = v133;
  if (a5 > (v133 - (unsigned char *)v132) >> 3)
  {
    uint64_t v52 = (char *)v135;
    uint64_t v51 = v136;
    goto LABEL_75;
  }
  uint64_t v52 = (char *)v135;
  uint64_t v51 = v136;
  if (a5 <= (v130 - (unsigned char *)v129) >> 3 && a4 <= 0x63 && (v136 - (unsigned char *)v135) >> 3 >= a5)
  {
    int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v67 = 0x8000000000000000;
      int64_t v68 = 0x8000000000000000;
      uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v70 = *(void **)v52;
        int64_t v71 = *(void *)(*(void *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            uint64_t v72 = v70[5];
            if (v72 < v66) {
              goto LABEL_129;
            }
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(void *)(*(void *)v52 + 32);
          uint64_t v69 = v71;
          if (v71 <= v68) {
            goto LABEL_128;
          }
        }
        v125.i64[0] = v71;
        int64_t v68 = v71;
        uint64_t v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          uint64_t v66 = v72;
          if (v72 <= v67) {
            goto LABEL_130;
          }
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          uint64_t v73 = v70[6];
          if (v73 < v69) {
            goto LABEL_131;
          }
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        int64_t v67 = v72;
        uint64_t v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          uint64_t v69 = v73;
          if (v73 <= v68) {
            goto LABEL_132;
          }
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          uint64_t v74 = v70[7];
          if (v74 < v66) {
            goto LABEL_133;
          }
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        int64_t v68 = v73;
        uint64_t v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          uint64_t v66 = v74;
          if (v74 > v67) {
            goto LABEL_142;
          }
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          int64_t v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002D2B74(v124.i64, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002D2B74(v124.i64, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    uint64_t v115 = 0;
    char v116 = (char *)__p;
    if (!__p) {
      goto LABEL_280;
    }
LABEL_279:
    v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51) {
      goto LABEL_147;
    }
  }
  else
  {
    do
    {
      uint64_t v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          uint64_t v55 = *(void *)v52;
          uint64_t v56 = *(void *)v54;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v54 + 32)
            && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
          {
            BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
            BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
            if (v58 && *(unsigned char *)(v56 + 96) == 0)
            {
              if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v55, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v56, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
              uint64_t v50 = v133;
              }
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    uint64_t v52 = (char *)v135;
    if (v135 == v51) {
      goto LABEL_147;
    }
  }
  uint64_t v53 = v130;
  if (v129 != v130)
  {
    do
    {
      int64x2_t v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          uint64_t v61 = *(void *)v52;
          uint64_t v62 = *(void *)v60;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v60 + 32)
            && *(void *)(v61 + 32) <= *(void *)(v62 + 48))
          {
            BOOL v63 = *(void *)(v61 + 56) >= *(void *)(v62 + 40) && *(void *)(v61 + 40) <= *(void *)(v62 + 56);
            BOOL v64 = v63 && *(unsigned char *)(v61 + 96) == 0;
            if (v64 && *(unsigned char *)(v62 + 96) == 0)
            {
              if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v61, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v62, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
              uint64_t v53 = v130;
              }
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  uint64_t v76 = (char *)__p;
  uint64_t v75 = v127;
  if (__p == v127) {
    goto LABEL_198;
  }
  int v78 = (char *)v141;
  int v77 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3
    || a5 > (v139 - (unsigned char *)v138) >> 3
    || a4 > 0x63
    || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      long long v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          uint64_t v89 = *(void *)v78;
          uint64_t v90 = *(void *)v88;
          if (*(void *)(*(void *)v78 + 48) >= *(void *)(*(void *)v88 + 32)
            && *(void *)(v89 + 32) <= *(void *)(v90 + 48))
          {
            BOOL v91 = *(void *)(v89 + 56) >= *(void *)(v90 + 40) && *(void *)(v89 + 40) <= *(void *)(v90 + 56);
            BOOL v92 = v91 && *(unsigned char *)(v89 + 96) == 0;
            if (v92 && *(unsigned char *)(v90 + 96) == 0)
            {
              if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v89, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v90, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
              uint64_t v75 = v127;
              }
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        int v77 = v142;
      }
      v78 += 8;
    }
    long long v95 = (char *)v138;
    long long v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        double v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            uint64_t v100 = *(void *)v95;
            uint64_t v101 = *(void *)v99;
            if (*(void *)(*(void *)v95 + 48) >= *(void *)(*(void *)v99 + 32)
              && *(void *)(v100 + 32) <= *(void *)(v101 + 48))
            {
              BOOL v102 = *(void *)(v100 + 56) >= *(void *)(v101 + 40)
                  && *(void *)(v100 + 40) <= *(void *)(v101 + 56);
              BOOL v103 = v102 && *(unsigned char *)(v100 + 96) == 0;
              if (v103 && *(unsigned char *)(v101 + 96) == 0)
              {
                if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v100, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v101, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
                uint64_t v75 = v127;
                }
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          long long v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  uint64_t v79 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v80 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v81 = 0x8000000000000000;
  uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    uint64_t v83 = *(void **)v76;
    int64_t v84 = *(void *)(*(void *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81) {
        goto LABEL_164;
      }
LABEL_156:
      uint64_t v85 = v83[5];
      if (v85 < v79) {
        goto LABEL_157;
      }
LABEL_165:
      if (v85 > v80) {
        goto LABEL_166;
      }
LABEL_158:
      uint64_t v86 = v83[6];
      if (v86 < v82) {
        goto LABEL_159;
      }
LABEL_167:
      if (v86 > v81) {
        goto LABEL_168;
      }
LABEL_160:
      int64_t v87 = v83[7];
      if (v87 < v79) {
        goto LABEL_161;
      }
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        int64_t v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v76 + 32);
      uint64_t v82 = v84;
      if (v84 <= v81) {
        goto LABEL_156;
      }
LABEL_164:
      v125.i64[0] = v84;
      int64_t v81 = v84;
      uint64_t v85 = v83[5];
      if (v85 >= v79) {
        goto LABEL_165;
      }
LABEL_157:
      v124.i64[1] = v85;
      uint64_t v79 = v85;
      if (v85 <= v80) {
        goto LABEL_158;
      }
LABEL_166:
      v125.i64[1] = v85;
      int64_t v80 = v85;
      uint64_t v86 = v83[6];
      if (v86 >= v82) {
        goto LABEL_167;
      }
LABEL_159:
      v124.i64[0] = v86;
      uint64_t v82 = v86;
      if (v86 <= v81) {
        goto LABEL_160;
      }
LABEL_168:
      v125.i64[0] = v86;
      int64_t v81 = v86;
      int64_t v87 = v83[7];
      if (v87 >= v79) {
        goto LABEL_169;
      }
LABEL_161:
      v124.i64[1] = v87;
      uint64_t v79 = v87;
      if (v87 > v80) {
        goto LABEL_170;
      }
    }
    v76 += 8;
    if (v76 != v127) {
      continue;
    }
    break;
  }
  if (!sub_1002D2B74(v124.i64, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002D2B74(v124.i64, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  long long v98 = (char *)v141;
  double v97 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3 || a4 > 0x63 || (v133 - (unsigned char *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      uint64_t v105 = v133;
      if (v132 != v133)
      {
        do
        {
          __int16 v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              uint64_t v109 = *(void *)v98;
              uint64_t v110 = *(void *)v108;
              if (*(void *)(*(void *)v98 + 48) >= *(void *)(*(void *)v108 + 32)
                && *(void *)(v109 + 32) <= *(void *)(v110 + 48))
              {
                BOOL v111 = *(void *)(v109 + 56) >= *(void *)(v110 + 40)
                    && *(void *)(v109 + 40) <= *(void *)(v110 + 56);
                BOOL v112 = v111 && *(unsigned char *)(v109 + 96) == 0;
                if (v112 && *(unsigned char *)(v110 + 96) == 0)
                {
                  if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v109, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v110, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
                  uint64_t v105 = v133;
                  }
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            double v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002D2B74((uint64_t *)&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v107 = (char *)v138;
  uint64_t v106 = v139;
  if (a5 > (v139 - (unsigned char *)v138) >> 3 || a4 > 0x63 || (v130 - (unsigned char *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      uint64_t v114 = v130;
      if (v129 != v130)
      {
        do
        {
          uint64_t v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              uint64_t v118 = *(void *)v107;
              uint64_t v119 = *(void *)v117;
              if (*(void *)(*(void *)v107 + 48) >= *(void *)(*(void *)v117 + 32)
                && *(void *)(v118 + 32) <= *(void *)(v119 + 48))
              {
                BOOL v120 = *(void *)(v118 + 56) >= *(void *)(v119 + 40)
                    && *(void *)(v118 + 40) <= *(void *)(v119 + 56);
                BOOL v121 = v120 && *(unsigned char *)(v118 + 96) == 0;
                if (v121 && *(unsigned char *)(v119 + 96) == 0)
                {
                  if (!sub_1002D487C(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v118, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v119, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24)))goto LABEL_278; {
                  uint64_t v114 = v130;
                  }
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            uint64_t v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002D2B74(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v115 = 1;
  char v116 = (char *)__p;
  if (__p) {
    goto LABEL_279;
  }
LABEL_280:
  if (v129)
  {
    char v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    int v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    uint64_t v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    uint64_t v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    uint64_t v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002D47B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v34 = a20;
    if (!a20)
    {
LABEL_3:
      int64_t v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  int64_t v35 = a23;
  if (!a23)
  {
LABEL_4:
    uint64_t v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  uint64_t v36 = a26;
  if (!a26)
  {
LABEL_5:
    uint64_t v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  uint64_t v37 = a29;
  if (!a29)
  {
LABEL_6:
    uint64_t v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  uint64_t v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D487C(int a1, double **a2, int *a3, int a4, double **a5, int *a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if ((!*((unsigned char *)a3 + 96) || (unint64_t)(*((void *)a3 + 10) + 1) >= *((void *)a3 + 11))
    && (!*((unsigned char *)a6 + 96) || (unint64_t)(*((void *)a6 + 10) + 1) >= *((void *)a6 + 11)))
  {
    uint64_t v11 = *((void *)a3 + 3);
    if (v11 >= 0) {
      uint64_t v12 = (double **)&a2[3][3 * v11];
    }
    else {
      uint64_t v12 = a2;
    }
    uint64_t v13 = *v12;
    uint64_t v114 = v12[1];
    uint64_t v115 = *v12;
    uint64_t v14 = *((void *)a6 + 3);
    if (v14 >= 0) {
      uint64_t v15 = (double **)&a5[3][3 * v14];
    }
    else {
      uint64_t v15 = a5;
    }
    char v122 = *v15;
    uint64_t v118 = v15[1];
    int v16 = *a3;
    int v109 = *a6;
    uint64_t v17 = *((void *)a3 + 13);
    uint64_t v18 = *((void *)a3 + 8);
    uint64_t v19 = *((void *)a3 + 9);
    uint64_t v20 = &v13[2 * v18];
    uint64_t v113 = v17;
    if (v18 != v19)
    {
      uint64_t v88 = 0;
      uint64_t v89 = 16 * v19 - 16 * v18;
      v127 = &v13[2 * v18];
      uint64_t v90 = v127;
      uint64_t v91 = *((void *)a3 + 8);
      BOOL v92 = v127;
      while (1)
      {
        uint64_t v93 = v18;
        uint64_t v20 = v90;
        double v94 = (double)*(uint64_t *)(a10 + 24) + (v90[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v94 >= 0.0) {
          double v95 = 0.5;
        }
        else {
          double v95 = -0.5;
        }
        sub_1002C5028(v94 + v95);
        double v96 = v92[2];
        v92 += 2;
        double v97 = (double)*(uint64_t *)(a10 + 16) + (v96 - *(double *)a10) * *(double *)(a10 + 32);
        if (v97 >= 0.0) {
          double v98 = 0.5;
        }
        else {
          double v98 = -0.5;
        }
        double v99 = v97 + v98;
        sub_1002C5028(v97 + v98);
        double v100 = ceil(v99);
        double v101 = floor(v99);
        if (v99 >= 0.0) {
          double v100 = v101;
        }
        uint64_t v102 = (uint64_t)v100;
        if (v16 == 1)
        {
          uint64_t v18 = v93;
          if (*((void *)a6 + 4) <= v102)
          {
            uint64_t v113 = v17;
            uint64_t v18 = v91;
            break;
          }
        }
        else
        {
          if (v16 != -1)
          {
            uint64_t v20 = v127;
            uint64_t v18 = v93;
            break;
          }
          uint64_t v18 = v93;
          if (*((void *)a6 + 6) >= v102)
          {
            v113 += v88;
            uint64_t v18 = v93 + v88;
            break;
          }
        }
        ++v91;
        ++v17;
        ++v88;
        uint64_t v90 = v92;
        v89 -= 16;
        if (!v89) {
          return 1;
        }
      }
    }
    uint64_t v21 = &v115[2 * v19];
    if (v20 != v21)
    {
      long long v22 = v20 + 2;
      uint64_t v23 = &v115[2 * (v20 != v115)];
      if (v20 + 2 != v114) {
        uint64_t v23 = v20 + 2;
      }
      uint64_t v24 = v23 + 2;
      int v25 = &v115[2 * (v23 != v115)];
      if (v24 != v114) {
        int v25 = v24;
      }
      uint64_t v117 = v25;
      int v26 = -v16;
      int v119 = -v109;
      __int16 v108 = v21;
      while (1)
      {
        uint64_t v126 = v18;
        double v29 = (double)*(uint64_t *)(a10 + 24) + (v20[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v29 >= 0.0) {
          double v30 = 0.5;
        }
        else {
          double v30 = -0.5;
        }
        sub_1002C5028(v29 + v30);
        char v116 = v20;
        double v31 = (double)*(uint64_t *)(a10 + 16) + (*v20 - *(double *)a10) * *(double *)(a10 + 32);
        if (v31 >= 0.0) {
          double v32 = 0.5;
        }
        else {
          double v32 = -0.5;
        }
        double v33 = v31 + v32;
        sub_1002C5028(v31 + v32);
        double v34 = ceil(v33);
        double v35 = floor(v33);
        if (v33 >= 0.0) {
          double v34 = v35;
        }
        uint64_t v36 = (uint64_t)v34;
        if (v26 == 1)
        {
          uint64_t v37 = a6;
          uint64_t v38 = v126;
          BOOL v39 = v122;
          int64_t v40 = v20;
          if (*((void *)a6 + 4) > v36) {
            return 1;
          }
        }
        else
        {
          uint64_t v37 = a6;
          uint64_t v38 = v126;
          BOOL v39 = v122;
          int64_t v40 = v20;
          if (v26 == -1 && *((void *)a6 + 6) < v36) {
            return 1;
          }
        }
        uint64_t v41 = a3;
        v181[0] = a3;
        v181[1] = v38;
        v181[2] = v40;
        v181[3] = v22;
        v181[4] = v117;
        v181[5] = v115;
        v181[6] = v114;
        char v182 = 1;
        char v183 = 0;
        long long v42 = *(_OWORD *)(a10 + 16);
        long long v184 = *(_OWORD *)a10;
        long long v185 = v42;
        uint64_t v186 = *(void *)(a10 + 32);
        uint64_t v44 = v37[8];
        uint64_t v43 = v37[9];
        uint64_t v45 = v37[13];
        if (v44 == v43)
        {
LABEL_36:
          uint64_t v46 = &v39[2 * v44];
          goto LABEL_37;
        }
        uint64_t v71 = 0;
        double v72 = *(double *)(a10 + 32);
        uint64_t v73 = 16 * v43 - 16 * v44;
        uint64_t v46 = &v39[2 * v44];
        uint64_t v74 = v37[13];
        uint64_t v75 = v37[8];
        while (1)
        {
          double v76 = (double)*(uint64_t *)(a10 + 24) + (v46[3] - *(double *)(a10 + 8)) * v72;
          if (v76 >= 0.0) {
            double v77 = 0.5;
          }
          else {
            double v77 = -0.5;
          }
          double v78 = v76 + v77;
          int v79 = 2 * (v78 >= 9.22337204e18);
          if (v78 <= -9.22337204e18) {
            int v79 = 1;
          }
          if (v79 == 2) {
            goto LABEL_132;
          }
          if (v79 == 1) {
            goto LABEL_133;
          }
          double v80 = (double)*(uint64_t *)(a10 + 16) + (v46[2] - *(double *)a10) * v72;
          if (v80 >= 0.0) {
            double v81 = 0.5;
          }
          else {
            double v81 = -0.5;
          }
          double v82 = v80 + v81;
          int v83 = 2 * (v82 >= 9.22337204e18);
          if (v82 <= -9.22337204e18) {
            int v83 = 1;
          }
          if (v83 == 2)
          {
LABEL_132:
            exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            exception->__vftable = 0;
            uint64_t v105 = sub_10015F6A0(exception);
          }
          if (v83 == 1)
          {
LABEL_133:
            uint64_t v106 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v106->__vftable = 0;
            uint64_t v107 = sub_10015F668(v106);
          }
          double v84 = ceil(v82);
          double v85 = floor(v82);
          double v86 = v82 >= 0.0 ? v85 : v84;
          uint64_t v87 = (uint64_t)v86;
          if (v109 == 1) {
            break;
          }
          if (v109 != -1) {
            goto LABEL_36;
          }
          if (*((void *)a3 + 6) >= v87)
          {
            v45 += v71;
            v44 += v71;
            goto LABEL_37;
          }
LABEL_90:
          v46 += 2;
          ++v75;
          ++v74;
          ++v71;
          v73 -= 16;
          if (!v73) {
            goto LABEL_112;
          }
        }
        if (*((void *)a3 + 4) > v87) {
          goto LABEL_90;
        }
        uint64_t v45 = v74;
        uint64_t v44 = v75;
LABEL_37:
        uint64_t v123 = &v39[2 * v43];
        if (v46 != v123) {
          break;
        }
LABEL_112:
        ++v113;
LABEL_19:
        uint64_t v20 = v116 + 2;
        uint64_t v18 = v38 + 1;
        uint64_t v27 = v117 + 2;
        if (v117 + 2 == v114) {
          uint64_t v27 = &v115[2 * (v117 != v115)];
        }
        uint64_t v117 = v27;
        BOOL v28 = v22 == v21;
        v22 += 2;
        int v26 = -v16;
        if (v28) {
          return 1;
        }
      }
      uint64_t v110 = v22;
      BOOL v47 = v46 + 2;
      BOOL v48 = v118;
      if (v46 + 2 == v118) {
        BOOL v47 = &v39[2 * (v46 != v39)];
      }
      int64x2_t v49 = v47 + 2;
      uint64_t v50 = &v39[2 * (v47 != v39)];
      if (v49 == v118) {
        uint64_t v51 = v50;
      }
      else {
        uint64_t v51 = v49;
      }
      uint64_t v52 = ++v113 - v45;
      while (1)
      {
        double v53 = *(double *)(a10 + 32);
        double v54 = (double)*(uint64_t *)(a10 + 24) + (v46[1] - *(double *)(a10 + 8)) * v53;
        if (v54 >= 0.0) {
          double v55 = 0.5;
        }
        else {
          double v55 = -0.5;
        }
        double v56 = v54 + v55;
        int v57 = 2 * (v56 >= 9.22337204e18);
        if (v56 <= -9.22337204e18) {
          int v57 = 1;
        }
        if (v57 == 2) {
          goto LABEL_132;
        }
        if (v57 == 1) {
          goto LABEL_133;
        }
        double v58 = (double)*(uint64_t *)(a10 + 16) + (*v46 - *(double *)a10) * v53;
        if (v58 >= 0.0) {
          double v59 = 0.5;
        }
        else {
          double v59 = -0.5;
        }
        double v60 = v58 + v59;
        int v61 = 2 * (v60 >= 9.22337204e18);
        if (v60 <= -9.22337204e18) {
          int v61 = 1;
        }
        if (v61 == 2) {
          goto LABEL_132;
        }
        if (v61 == 1) {
          goto LABEL_133;
        }
        double v62 = ceil(v60);
        double v63 = floor(v60);
        if (v60 >= 0.0) {
          double v64 = v63;
        }
        else {
          double v64 = v62;
        }
        uint64_t v65 = (uint64_t)v64;
        if (v119 == 1)
        {
          if (v41[4] > v65) {
            goto LABEL_18;
          }
        }
        else if (v119 == -1 && v41[6] < v65)
        {
          goto LABEL_18;
        }
        uint64_t v66 = v41[2];
        if (a1 == a4)
        {
          uint64_t v67 = v41[3];
          uint64_t v69 = v37[2];
          uint64_t v68 = v37[3];
          if (v66 == v69)
          {
            if (v67 == v68)
            {
              if (a7)
              {
                if (v38 >= v44 || (a8 & 1) == 0)
                {
                  uint64_t v68 = v41[3];
                  uint64_t v69 = v41[2];
                  if (v38 >= v44) {
                    goto LABEL_76;
                  }
                  goto LABEL_75;
                }
LABEL_83:
                if (!v52) {
                  goto LABEL_76;
                }
                if (!v38)
                {
                  uint64_t v68 = v41[3];
                  uint64_t v69 = v41[2];
                  if (v41[11] - 2 <= v44) {
                    goto LABEL_76;
                  }
                  goto LABEL_75;
                }
              }
              else if (a8)
              {
                goto LABEL_83;
              }
              uint64_t v68 = v41[3];
              uint64_t v69 = v41[2];
              goto LABEL_75;
            }
            uint64_t v69 = v41[2];
          }
        }
        else
        {
          uint64_t v67 = v41[3];
          uint64_t v69 = v37[2];
          uint64_t v68 = v37[3];
        }
LABEL_75:
        v175[0] = v37;
        v175[1] = v44;
        v175[2] = v46;
        v175[3] = v46 + 2;
        v175[4] = v51;
        v175[5] = v39;
        v175[6] = v48;
        char v176 = 0;
        char v177 = 0;
        long long v70 = *(_OWORD *)(a10 + 16);
        long long v178 = *(_OWORD *)a10;
        long long v179 = v70;
        uint64_t v180 = *(void *)(a10 + 32);
        int v129 = 0;
        char v130 = 0;
        uint64_t v131 = -1;
        __int16 v132 = 0;
        int v133 = 0;
        uint64_t v139 = 1;
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        uint64_t v142 = -1;
        uint64_t v143 = -1;
        uint64_t v144 = -1;
        __int16 v145 = 257;
        uint64_t v146 = 0;
        uint64_t v147 = 0;
        uint64_t v148 = -1;
        uint64_t v149 = -1;
        uint64_t v150 = -1;
        char v151 = 0;
        int v152 = 0;
        __int16 v153 = 0;
        int v154 = 0;
        uint64_t v160 = 1;
        uint64_t v161 = 0;
        uint64_t v162 = 0;
        uint64_t v163 = -1;
        uint64_t v164 = -1;
        uint64_t v165 = -1;
        __int16 v166 = 257;
        uint64_t v167 = 0;
        uint64_t v168 = 0;
        uint64_t v169 = -1;
        uint64_t v170 = -1;
        uint64_t v171 = -1;
        char v172 = 0;
        int v173 = 0;
        __int16 v174 = 0;
        uint64_t v134 = a1;
        uint64_t v135 = v66;
        uint64_t v136 = v67;
        uint64_t v137 = v38;
        long long v138 = xmmword_1003FAAE0;
        uint64_t v155 = a4;
        uint64_t v156 = v69;
        uint64_t v157 = v68;
        uint64_t v158 = v44;
        long long v159 = xmmword_1003FAAE0;
        sub_1002CBE54((uint64_t)v181, (uint64_t)v175, v128, a9, a10, a11);
        uint64_t v37 = a6;
        uint64_t v38 = v126;
        BOOL v48 = v118;
        BOOL v39 = v122;
        uint64_t v41 = a3;
LABEL_76:
        v46 += 2;
        ++v44;
        if (v51 + 2 == v48) {
          uint64_t v51 = &v39[2 * (v51 != v39)];
        }
        else {
          v51 += 2;
        }
        --v52;
        if (v46 == v123)
        {
LABEL_18:
          uint64_t v21 = v108;
          long long v22 = v110;
          goto LABEL_19;
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1002D51A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  long long __p = 0;
  double v33 = 0;
  uint64_t v34 = 0;
  uint64_t v12 = *a1;
  if (*a1 != a1[1])
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(double **)v12;
      uint64_t v15 = *(double **)(v12 + 8);
      if ((unint64_t)v15 - *(void *)v12 >= 0x20)
      {
        *(void *)&long long v26 = 0;
        *((void *)&v26 + 1) = v13;
        uint64_t v27 = -1;
        sub_1002C8640(&__p, v14, v15, a3, a2, &v26, 0xAuLL);
      }
      uint64_t v17 = *(double ***)(v12 + 24);
      int v16 = *(double ***)(v12 + 32);
      if (v17 != v16)
      {
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = *v17;
          uint64_t v20 = v17[1];
          if ((unint64_t)((char *)v20 - (char *)*v17) >= 0x20)
          {
            *(void *)&long long v26 = 0;
            *((void *)&v26 + 1) = v13;
            uint64_t v27 = v18;
            sub_1002C8640(&__p, v19, v20, a3, a2, &v26, 0xAuLL);
            int v16 = *(double ***)(v12 + 32);
          }
          ++v18;
          v17 += 3;
        }
        while (v17 != v16);
      }
      v12 += 48;
      ++v13;
    }
    while (v12 != a1[1]);
  }
  *(void *)&long long v26 = a1;
  *((void *)&v26 + 1) = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  int v30 = a6;
  char v31 = a7;
  uint64_t v24 = a2;
  uint64_t v25 = a2;
  sub_1002D5330((uint64_t *)&__p, (void **)&v26, (uint64_t)&v25, (uint64_t)&v24, 0x10uLL);
  if (__p)
  {
    double v33 = __p;
    operator delete(__p);
  }
  return 1;
}

void sub_1002D530C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D5330(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = *a1;
  double v7 = (unsigned char *)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v7[-*a1] >> 3) <= a5)
  {
    if ((unsigned char *)v8 != v7)
    {
      uint64_t v13 = (unsigned char *)(v8 + 216);
      do
      {
        uint64_t v14 = (unsigned char *)(v8 + 120);
        if ((unsigned char *)(v8 + 120) != v7)
        {
          for (uint64_t i = v13; i - 96 != v7; i += 120)
          {
            if (*(void *)(v8 + 48) >= *((void *)i - 8) && *(void *)(v8 + 32) <= *((void *)i - 6))
            {
              BOOL v16 = *(void *)(v8 + 56) >= *((void *)i - 7) && *(void *)(v8 + 40) <= *((void *)i - 5);
              BOOL v17 = v16 && *(unsigned char *)(v8 + 96) == 0;
              if (v17 && *i == 0)
              {
                if (!sub_1002D80E0(*((_DWORD *)a2 + 10), *a2, (int *)v8, *((_DWORD *)a2 + 10), *a2, (int *)i - 24, 0, *((unsigned __int8 *)a2 + 44), (uint64_t)a2[1], (uint64_t)a2[2], a2[3]))return 0; {
                double v7 = (unsigned char *)a1[1];
                }
              }
            }
          }
        }
        v13 += 120;
        v8 += 120;
      }
      while (v14 != v7);
    }
    return 1;
  }
  long long __p = 0;
  long long v22 = 0;
  uint64_t v23 = 0;
  v20[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v20[1] = vdupq_n_s64(0x8000000000000000);
  sub_1002C90BC(a1, (uint64_t *)v20, (char **)&__p);
  uint64_t v12 = sub_1002D54FC(v20, &__p, 0, a5, a2, a3, a4, (uint64_t)&v24);
  if (__p)
  {
    long long v22 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1002D54E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D54FC(void *a1, void *a2, unint64_t a3, unint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *a1;
  uint64_t v15 = a1[2];
  if ((uint64_t)*a1 >= 0) {
    uint64_t v16 = *a1;
  }
  else {
    uint64_t v16 = v14 + 1;
  }
  uint64_t v17 = v16 >> 1;
  if (v15 >= 0) {
    uint64_t v18 = a1[2];
  }
  else {
    uint64_t v18 = v15 + 1;
  }
  uint64_t v19 = v18 >> 1;
  long long v20 = *((_OWORD *)a1 + 1);
  int v21 = v15 - 2 * v19 + v14 - 2 * v17;
  long long v73 = *(_OWORD *)a1;
  uint64_t v75 = *((void *)&v20 + 1);
  *((void *)&v72[0] + 1) = *((void *)&v73 + 1);
  v72[1] = v20;
  uint64_t v74 = v19 + v17 + ((v21 + ((v21 & 0x80) >> 7)) << 24 >> 25);
  uint64_t v71 = 0;
  *(void *)&v72[0] = v74;
  uint64_t v69 = 0;
  long long v70 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  long long __p = 0;
  double v64 = 0;
  uint64_t v65 = 0;
  sub_1002CA168(&v73, v72, a2, &v69, (char **)&v66, (char **)&__p);
  uint64_t v23 = (char *)__p;
  long long v22 = v64;
  if (__p == v64) {
    goto LABEL_32;
  }
  uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v25 = 0x8000000000000000;
  int64x2_t v61 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v62 = vdupq_n_s64(0x8000000000000000);
  int64_t v26 = 0x8000000000000000;
  uint64_t v27 = (char *)__p;
  uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v29 = *(void **)v27;
    int64_t v30 = *(void *)(*(void *)v27 + 32);
    if (v30 < v28)
    {
      v61.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v28 = v30;
      if (v30 <= v26)
      {
LABEL_12:
        uint64_t v31 = v29[5];
        if (v31 >= v24) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
    }
    else if (v30 <= v26)
    {
      goto LABEL_12;
    }
    v62.i64[0] = v30;
    int64_t v26 = v30;
    uint64_t v31 = v29[5];
    if (v31 >= v24)
    {
LABEL_13:
      if (v31 <= v25) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
LABEL_21:
    v61.i64[1] = v31;
    uint64_t v24 = v31;
    if (v31 <= v25)
    {
LABEL_14:
      uint64_t v32 = v29[6];
      if (v32 >= v28) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
LABEL_22:
    v62.i64[1] = v31;
    int64_t v25 = v31;
    uint64_t v32 = v29[6];
    if (v32 >= v28)
    {
LABEL_15:
      if (v32 <= v26) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
LABEL_23:
    v61.i64[0] = v32;
    uint64_t v28 = v32;
    if (v32 <= v26)
    {
LABEL_16:
      uint64_t v33 = v29[7];
      if (v33 < v24) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
LABEL_24:
    v62.i64[0] = v32;
    int64_t v26 = v32;
    uint64_t v33 = v29[7];
    if (v33 < v24)
    {
LABEL_25:
      v61.i64[1] = v33;
      uint64_t v24 = v33;
      if (v33 <= v25) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
LABEL_17:
    if (v33 <= v25) {
      goto LABEL_9;
    }
LABEL_26:
    v62.i64[1] = v33;
    int64_t v25 = v33;
LABEL_9:
    v27 += 8;
  }
  while (v27 != v64);
  if (a3 <= 0x63 && (v64 - (unsigned char *)__p) >> 3 >= a4)
  {
    if (sub_1002D5C68((long long *)v61.i8, &__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_30;
    }
    goto LABEL_98;
  }
  do
  {
    uint64_t v36 = v23 + 8;
    if (v23 + 8 != v22)
    {
      for (uint64_t i = v23 + 8; i != v22; i += 8)
      {
        uint64_t v38 = *(void *)v23;
        uint64_t v39 = *(void *)i;
        if (*(void *)(*(void *)v23 + 48) >= *(void *)(*(void *)i + 32)
          && *(void *)(v38 + 32) <= *(void *)(v39 + 48))
        {
          BOOL v40 = *(void *)(v38 + 56) >= *(void *)(v39 + 40) && *(void *)(v38 + 40) <= *(void *)(v39 + 56);
          BOOL v41 = v40 && *(unsigned char *)(v38 + 96) == 0;
          if (v41 && *(unsigned char *)(v39 + 96) == 0)
          {
            if (!sub_1002D80E0(*((_DWORD *)a5 + 10), *a5, (int *)v38, *((_DWORD *)a5 + 10), *a5, (int *)v39, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98; {
            long long v22 = v64;
            }
          }
        }
      }
    }
    v23 += 8;
  }
  while (v36 != v22);
LABEL_30:
  if (sub_1002D5AF4((long long *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v69, a3, a4, a5, a6, a7, a8)
    && (sub_1002D5AF4((long long *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v66, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    double v35 = (char *)v69;
    uint64_t v34 = v70;
    if (a3 > 0x63 || (v70 - (unsigned char *)v69) >> 3 < a4)
    {
LABEL_73:
      while (v35 != v34)
      {
        uint64_t v43 = v35;
        v35 += 8;
        if (v35 != v34)
        {
          uint64_t v44 = v35;
          while (1)
          {
            uint64_t v45 = *(void *)v43;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v43 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002D80E0(*((_DWORD *)a5 + 10), *a5, (int *)v45, *((_DWORD *)a5 + 10), *a5, (int *)v46, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98; {
                uint64_t v34 = v70;
                }
              }
            }
            v44 += 8;
            if (v44 == v34) {
              goto LABEL_73;
            }
          }
        }
      }
    }
    else if (!sub_1002D5C68(&v73, &v69, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    uint64_t v51 = (char *)v66;
    uint64_t v50 = v67;
    if (a3 > 0x63 || (v67 - (unsigned char *)v66) >> 3 < a4)
    {
      if (v66 == v67)
      {
        uint64_t v52 = 1;
      }
      else
      {
        do
        {
          double v53 = v51;
          v51 += 8;
          if (v51 != v50)
          {
            for (int j = v51; j != v50; j += 8)
            {
              uint64_t v55 = *(void *)v53;
              uint64_t v56 = *(void *)j;
              if (*(void *)(*(void *)v53 + 48) >= *(void *)(*(void *)j + 32)
                && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
              {
                BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
                BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
                if (v58 && *(unsigned char *)(v56 + 96) == 0)
                {
                  if (!sub_1002D80E0(*((_DWORD *)a5 + 10), *a5, (int *)v55, *((_DWORD *)a5 + 10), *a5, (int *)v56, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98; {
                  uint64_t v50 = v67;
                  }
                }
              }
            }
          }
          uint64_t v52 = 1;
        }
        while (v51 != v50);
      }
    }
    else
    {
      uint64_t v52 = sub_1002D5C68(v72, &v66, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    uint64_t v52 = 0;
  }
  if (__p)
  {
    double v64 = (char *)__p;
    operator delete(__p);
  }
  if (v66)
  {
    uint64_t v67 = (char *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    long long v70 = (char *)v69;
    operator delete(v69);
  }
  return v52;
}

void sub_1002D5A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    int64_t v26 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v27 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v26 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  uint64_t v27 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D5AF4(long long *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_1002D725C(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 != v12)
  {
    uint64_t v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        uint64_t v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            uint64_t v17 = *v13;
            uint64_t v18 = *v16;
            if (*(void *)(*v13 + 48) >= *(void *)(*v16 + 32) && *(void *)(v17 + 32) <= *(void *)(v18 + 48))
            {
              BOOL v19 = *(void *)(v17 + 56) >= *(void *)(v18 + 40) && *(void *)(v17 + 40) <= *(void *)(v18 + 56);
              BOOL v20 = v19 && *(unsigned char *)(v17 + 96) == 0;
              if (v20 && *(unsigned char *)(v18 + 96) == 0)
              {
                uint64_t result = sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v17, *((_DWORD *)a6 + 10), *a6, (int *)v18, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]);
                if (!result) {
                  return result;
                }
                uint64_t v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          uint64_t v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_1002D5C68(long long *a1, void *a2, unint64_t a3, unint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *((void *)a1 + 2);
  uint64_t v14 = *((void *)a1 + 3);
  uint64_t v16 = *((void *)a1 + 1);
  if (v16 >= 0) {
    uint64_t v17 = *((void *)a1 + 1);
  }
  else {
    uint64_t v17 = v16 + 1;
  }
  uint64_t v18 = v17 >> 1;
  if (v14 >= 0) {
    uint64_t v19 = *((void *)a1 + 3);
  }
  else {
    uint64_t v19 = v14 + 1;
  }
  long long v20 = a1[1];
  long long v73 = *a1;
  v71[0] = v73;
  long long v72 = v20;
  uint64_t v74 = v15;
  uint64_t v75 = (v19 >> 1)
      + v18
      + ((int)((v14
              - 2 * (v19 >> 1)
              + v16
              - 2 * v18
              + (((v14 - 2 * (v19 >> 1) + v16 - 2 * v18) & 0x80) >> 7)) << 24) >> 25);
  v71[1] = v75;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  long long __p = 0;
  double v63 = 0;
  uint64_t v64 = 0;
  sub_1002CA168(&v73, v71, a2, &v68, (char **)&v65, (char **)&__p);
  long long v22 = (char *)__p;
  int v21 = v63;
  if (__p == v63) {
    goto LABEL_32;
  }
  uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v24 = 0x8000000000000000;
  int64x2_t v60 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v61 = vdupq_n_s64(0x8000000000000000);
  int64_t v25 = 0x8000000000000000;
  int64_t v26 = (char *)__p;
  uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v28 = *(void **)v26;
    int64_t v29 = *(void *)(*(void *)v26 + 32);
    if (v29 < v27)
    {
      v60.i64[0] = *(void *)(*(void *)v26 + 32);
      uint64_t v27 = v29;
      if (v29 <= v25)
      {
LABEL_12:
        uint64_t v30 = v28[5];
        if (v30 >= v23) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
    }
    else if (v29 <= v25)
    {
      goto LABEL_12;
    }
    v61.i64[0] = v29;
    int64_t v25 = v29;
    uint64_t v30 = v28[5];
    if (v30 >= v23)
    {
LABEL_13:
      if (v30 <= v24) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
LABEL_21:
    v60.i64[1] = v30;
    uint64_t v23 = v30;
    if (v30 <= v24)
    {
LABEL_14:
      uint64_t v31 = v28[6];
      if (v31 >= v27) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
LABEL_22:
    v61.i64[1] = v30;
    int64_t v24 = v30;
    uint64_t v31 = v28[6];
    if (v31 >= v27)
    {
LABEL_15:
      if (v31 <= v25) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
LABEL_23:
    v60.i64[0] = v31;
    uint64_t v27 = v31;
    if (v31 <= v25)
    {
LABEL_16:
      uint64_t v32 = v28[7];
      if (v32 < v23) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
LABEL_24:
    v61.i64[0] = v31;
    int64_t v25 = v31;
    uint64_t v32 = v28[7];
    if (v32 < v23)
    {
LABEL_25:
      v60.i64[1] = v32;
      uint64_t v23 = v32;
      if (v32 <= v24) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
LABEL_17:
    if (v32 <= v24) {
      goto LABEL_9;
    }
LABEL_26:
    v61.i64[1] = v32;
    int64_t v24 = v32;
LABEL_9:
    v26 += 8;
  }
  while (v26 != v63);
  if (a3 <= 0x63 && (v63 - (unsigned char *)__p) >> 3 >= a4)
  {
    if (sub_1002D54FC(&v60, &__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_30;
    }
    goto LABEL_98;
  }
  do
  {
    double v35 = v22 + 8;
    if (v22 + 8 != v21)
    {
      for (uint64_t i = v22 + 8; i != v21; i += 8)
      {
        uint64_t v37 = *(void *)v22;
        uint64_t v38 = *(void *)i;
        if (*(void *)(*(void *)v22 + 48) >= *(void *)(*(void *)i + 32)
          && *(void *)(v37 + 32) <= *(void *)(v38 + 48))
        {
          BOOL v39 = *(void *)(v37 + 56) >= *(void *)(v38 + 40) && *(void *)(v37 + 40) <= *(void *)(v38 + 56);
          BOOL v40 = v39 && *(unsigned char *)(v37 + 96) == 0;
          if (v40 && *(unsigned char *)(v38 + 96) == 0)
          {
            if (!sub_1002D80E0(*((_DWORD *)a5 + 10), *a5, (int *)v37, *((_DWORD *)a5 + 10), *a5, (int *)v38, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98; {
            int v21 = v63;
            }
          }
        }
      }
    }
    v22 += 8;
  }
  while (v35 != v21);
LABEL_30:
  if (sub_1002D6264(v60.i64, (uint64_t **)&__p, (uint64_t **)&v68, a3, a4, a5, a6, a7, a8)
    && (sub_1002D6264(v60.i64, (uint64_t **)&__p, (uint64_t **)&v65, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    uint64_t v34 = (char *)v68;
    uint64_t v33 = v69;
    if (a3 > 0x63 || (v69 - (unsigned char *)v68) >> 3 < a4)
    {
LABEL_73:
      while (v34 != v33)
      {
        long long v42 = v34;
        v34 += 8;
        if (v34 != v33)
        {
          uint64_t v43 = v34;
          while (1)
          {
            uint64_t v44 = *(void *)v42;
            uint64_t v45 = *(void *)v43;
            if (*(void *)(*(void *)v42 + 48) >= *(void *)(*(void *)v43 + 32)
              && *(void *)(v44 + 32) <= *(void *)(v45 + 48))
            {
              BOOL v46 = *(void *)(v44 + 56) >= *(void *)(v45 + 40) && *(void *)(v44 + 40) <= *(void *)(v45 + 56);
              BOOL v47 = v46 && *(unsigned char *)(v44 + 96) == 0;
              if (v47 && *(unsigned char *)(v45 + 96) == 0)
              {
                if (!sub_1002D80E0(*((_DWORD *)a5 + 10), *a5, (int *)v44, *((_DWORD *)a5 + 10), *a5, (int *)v45, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98; {
                uint64_t v33 = v69;
                }
              }
            }
            v43 += 8;
            if (v43 == v33) {
              goto LABEL_73;
            }
          }
        }
      }
    }
    else if (!sub_1002D54FC(&v73, &v68, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    uint64_t v50 = (char *)v65;
    int64x2_t v49 = v66;
    if (a3 > 0x63 || (v66 - (unsigned char *)v65) >> 3 < a4)
    {
      if (v65 == v66)
      {
        uint64_t v51 = 1;
      }
      else
      {
        do
        {
          uint64_t v52 = v50;
          v50 += 8;
          if (v50 != v49)
          {
            for (int j = v50; j != v49; j += 8)
            {
              uint64_t v54 = *(void *)v52;
              uint64_t v55 = *(void *)j;
              if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)j + 32)
                && *(void *)(v54 + 32) <= *(void *)(v55 + 48))
              {
                BOOL v56 = *(void *)(v54 + 56) >= *(void *)(v55 + 40) && *(void *)(v54 + 40) <= *(void *)(v55 + 56);
                BOOL v57 = v56 && *(unsigned char *)(v54 + 96) == 0;
                if (v57 && *(unsigned char *)(v55 + 96) == 0)
                {
                  if (!sub_1002D80E0(*((_DWORD *)a5 + 10), *a5, (int *)v54, *((_DWORD *)a5 + 10), *a5, (int *)v55, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3]))goto LABEL_98; {
                  int64x2_t v49 = v66;
                  }
                }
              }
            }
          }
          uint64_t v51 = 1;
        }
        while (v50 != v49);
      }
    }
    else
    {
      uint64_t v51 = sub_1002D54FC(v71, &v65, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    uint64_t v51 = 0;
  }
  if (__p)
  {
    double v63 = (char *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    uint64_t v66 = (char *)v65;
    operator delete(v65);
  }
  if (v68)
  {
    uint64_t v69 = (char *)v68;
    operator delete(v68);
  }
  return v51;
}

void sub_1002D6200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    int64_t v26 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v27 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v26 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  uint64_t v27 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D6264(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_1002D63D8(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 != v12)
  {
    uint64_t v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        uint64_t v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            uint64_t v17 = *v13;
            uint64_t v18 = *v16;
            if (*(void *)(*v13 + 48) >= *(void *)(*v16 + 32) && *(void *)(v17 + 32) <= *(void *)(v18 + 48))
            {
              BOOL v19 = *(void *)(v17 + 56) >= *(void *)(v18 + 40) && *(void *)(v17 + 40) <= *(void *)(v18 + 56);
              BOOL v20 = v19 && *(unsigned char *)(v17 + 96) == 0;
              if (v20 && *(unsigned char *)(v18 + 96) == 0)
              {
                uint64_t result = sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v17, *((_DWORD *)a6 + 10), *a6, (int *)v18, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]);
                if (!result) {
                  return result;
                }
                uint64_t v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          uint64_t v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_1002D63D8(uint64_t *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = *a1;
  uint64_t v18 = a1[2];
  if (*a1 >= 0) {
    uint64_t v19 = *a1;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  uint64_t v20 = v19 >> 1;
  long long v22 = *(_OWORD *)a1;
  long long v21 = *((_OWORD *)a1 + 1);
  long long v146 = *(_OWORD *)a1;
  long long v147 = v21;
  if (v18 >= 0) {
    uint64_t v23 = v18;
  }
  else {
    uint64_t v23 = v18 + 1;
  }
  uint64_t v24 = v23 >> 1;
  v144[1] = *((void *)&v22 + 1);
  long long v145 = v21;
  int v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(void *)&long long v147 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[0] = v147;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  long long v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  __int16 v132 = 0;
  int v133 = 0;
  uint64_t v134 = 0;
  int v129 = 0;
  char v130 = 0;
  uint64_t v131 = 0;
  long long __p = 0;
  v127 = 0;
  uint64_t v128 = 0;
  sub_1002CA168(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_1002CA168(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  uint64_t v27 = (char *)v135;
  int64_t v26 = v136;
  if (v135 == v136) {
    goto LABEL_147;
  }
  int64_t v29 = (char *)__p;
  uint64_t v28 = v127;
  if (a5 > (v136 - (unsigned char *)v135) >> 3 || a4 > 0x63 || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        uint64_t v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            uint64_t v45 = *(void *)v27;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v27 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v45, *((_DWORD *)a6 + 10), *a6, (int *)v46, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
                uint64_t v28 = v127;
                }
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          int64_t v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v32 = 0x8000000000000000;
  uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v34 = *(void **)v27;
    int64_t v35 = *(void *)(*(void *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        uint64_t v36 = v34[5];
        if (v36 < v30) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v33 = v35;
      if (v35 <= v32) {
        goto LABEL_15;
      }
    }
    v125.i64[0] = v35;
    int64_t v32 = v35;
    uint64_t v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      uint64_t v30 = v36;
      if (v36 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      uint64_t v37 = v34[6];
      if (v37 < v33) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    int64_t v31 = v36;
    uint64_t v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      uint64_t v33 = v37;
      if (v37 <= v32) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      uint64_t v38 = v34[7];
      if (v38 >= v30) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    int64_t v32 = v37;
    uint64_t v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    uint64_t v30 = v38;
    if (v38 <= v31) {
      goto LABEL_12;
    }
LABEL_29:
    v125.i64[1] = v38;
    int64_t v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    BOOL v39 = *(void **)v29;
    int64_t v40 = *(void *)(*(void *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        uint64_t v41 = v39[5];
        if (v41 < v30) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v29 + 32);
      uint64_t v33 = v40;
      if (v40 <= v32) {
        goto LABEL_34;
      }
    }
    v125.i64[0] = v40;
    int64_t v32 = v40;
    uint64_t v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      uint64_t v30 = v41;
      if (v41 <= v31) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      uint64_t v42 = v39[6];
      if (v42 < v33) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    int64_t v31 = v41;
    uint64_t v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      uint64_t v33 = v42;
      if (v42 <= v32) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      uint64_t v43 = v39[7];
      if (v43 >= v30) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    int64_t v32 = v42;
    uint64_t v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    uint64_t v30 = v43;
    if (v43 <= v31) {
      goto LABEL_30;
    }
LABEL_48:
    v125.i64[1] = v43;
    int64_t v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002D725C(&v124, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
    goto LABEL_278;
  }
LABEL_72:
  uint64_t v50 = v133;
  if (a5 > (v133 - (unsigned char *)v132) >> 3)
  {
    uint64_t v52 = (char *)v135;
    uint64_t v51 = v136;
    goto LABEL_75;
  }
  uint64_t v52 = (char *)v135;
  uint64_t v51 = v136;
  if (a5 <= (v130 - (unsigned char *)v129) >> 3 && a4 <= 0x63 && (v136 - (unsigned char *)v135) >> 3 >= a5)
  {
    int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v67 = 0x8000000000000000;
      int64_t v68 = 0x8000000000000000;
      uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v70 = *(void **)v52;
        int64_t v71 = *(void *)(*(void *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            uint64_t v72 = v70[5];
            if (v72 < v66) {
              goto LABEL_129;
            }
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(void *)(*(void *)v52 + 32);
          uint64_t v69 = v71;
          if (v71 <= v68) {
            goto LABEL_128;
          }
        }
        v125.i64[0] = v71;
        int64_t v68 = v71;
        uint64_t v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          uint64_t v66 = v72;
          if (v72 <= v67) {
            goto LABEL_130;
          }
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          uint64_t v73 = v70[6];
          if (v73 < v69) {
            goto LABEL_131;
          }
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        int64_t v67 = v72;
        uint64_t v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          uint64_t v69 = v73;
          if (v73 <= v68) {
            goto LABEL_132;
          }
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          uint64_t v74 = v70[7];
          if (v74 < v66) {
            goto LABEL_133;
          }
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        int64_t v68 = v73;
        uint64_t v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          uint64_t v66 = v74;
          if (v74 > v67) {
            goto LABEL_142;
          }
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          int64_t v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002D725C(&v124, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002D725C(&v124, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    uint64_t v115 = 0;
    char v116 = (char *)__p;
    if (!__p) {
      goto LABEL_280;
    }
LABEL_279:
    v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51) {
      goto LABEL_147;
    }
  }
  else
  {
    do
    {
      uint64_t v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          uint64_t v55 = *(void *)v52;
          uint64_t v56 = *(void *)v54;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v54 + 32)
            && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
          {
            BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
            BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
            if (v58 && *(unsigned char *)(v56 + 96) == 0)
            {
              if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v55, *((_DWORD *)a6 + 10), *a6, (int *)v56, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
              uint64_t v50 = v133;
              }
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    uint64_t v52 = (char *)v135;
    if (v135 == v51) {
      goto LABEL_147;
    }
  }
  double v53 = v130;
  if (v129 != v130)
  {
    do
    {
      int64x2_t v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          uint64_t v61 = *(void *)v52;
          uint64_t v62 = *(void *)v60;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v60 + 32)
            && *(void *)(v61 + 32) <= *(void *)(v62 + 48))
          {
            BOOL v63 = *(void *)(v61 + 56) >= *(void *)(v62 + 40) && *(void *)(v61 + 40) <= *(void *)(v62 + 56);
            BOOL v64 = v63 && *(unsigned char *)(v61 + 96) == 0;
            if (v64 && *(unsigned char *)(v62 + 96) == 0)
            {
              if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v61, *((_DWORD *)a6 + 10), *a6, (int *)v62, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
              double v53 = v130;
              }
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  double v76 = (char *)__p;
  uint64_t v75 = v127;
  if (__p == v127) {
    goto LABEL_198;
  }
  double v78 = (char *)v141;
  double v77 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3
    || a5 > (v139 - (unsigned char *)v138) >> 3
    || a4 > 0x63
    || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      uint64_t v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          uint64_t v89 = *(void *)v78;
          uint64_t v90 = *(void *)v88;
          if (*(void *)(*(void *)v78 + 48) >= *(void *)(*(void *)v88 + 32)
            && *(void *)(v89 + 32) <= *(void *)(v90 + 48))
          {
            BOOL v91 = *(void *)(v89 + 56) >= *(void *)(v90 + 40) && *(void *)(v89 + 40) <= *(void *)(v90 + 56);
            BOOL v92 = v91 && *(unsigned char *)(v89 + 96) == 0;
            if (v92 && *(unsigned char *)(v90 + 96) == 0)
            {
              if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v89, *((_DWORD *)a6 + 10), *a6, (int *)v90, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
              uint64_t v75 = v127;
              }
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        double v77 = v142;
      }
      v78 += 8;
    }
    double v95 = (char *)v138;
    double v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        double v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            uint64_t v100 = *(void *)v95;
            uint64_t v101 = *(void *)v99;
            if (*(void *)(*(void *)v95 + 48) >= *(void *)(*(void *)v99 + 32)
              && *(void *)(v100 + 32) <= *(void *)(v101 + 48))
            {
              BOOL v102 = *(void *)(v100 + 56) >= *(void *)(v101 + 40)
                  && *(void *)(v100 + 40) <= *(void *)(v101 + 56);
              BOOL v103 = v102 && *(unsigned char *)(v100 + 96) == 0;
              if (v103 && *(unsigned char *)(v101 + 96) == 0)
              {
                if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v100, *((_DWORD *)a6 + 10), *a6, (int *)v101, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
                uint64_t v75 = v127;
                }
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          double v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  uint64_t v79 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v80 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v81 = 0x8000000000000000;
  uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    int v83 = *(void **)v76;
    int64_t v84 = *(void *)(*(void *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81) {
        goto LABEL_164;
      }
LABEL_156:
      uint64_t v85 = v83[5];
      if (v85 < v79) {
        goto LABEL_157;
      }
LABEL_165:
      if (v85 > v80) {
        goto LABEL_166;
      }
LABEL_158:
      uint64_t v86 = v83[6];
      if (v86 < v82) {
        goto LABEL_159;
      }
LABEL_167:
      if (v86 > v81) {
        goto LABEL_168;
      }
LABEL_160:
      int64_t v87 = v83[7];
      if (v87 < v79) {
        goto LABEL_161;
      }
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        int64_t v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v76 + 32);
      uint64_t v82 = v84;
      if (v84 <= v81) {
        goto LABEL_156;
      }
LABEL_164:
      v125.i64[0] = v84;
      int64_t v81 = v84;
      uint64_t v85 = v83[5];
      if (v85 >= v79) {
        goto LABEL_165;
      }
LABEL_157:
      v124.i64[1] = v85;
      uint64_t v79 = v85;
      if (v85 <= v80) {
        goto LABEL_158;
      }
LABEL_166:
      v125.i64[1] = v85;
      int64_t v80 = v85;
      uint64_t v86 = v83[6];
      if (v86 >= v82) {
        goto LABEL_167;
      }
LABEL_159:
      v124.i64[0] = v86;
      uint64_t v82 = v86;
      if (v86 <= v81) {
        goto LABEL_160;
      }
LABEL_168:
      v125.i64[0] = v86;
      int64_t v81 = v86;
      int64_t v87 = v83[7];
      if (v87 >= v79) {
        goto LABEL_169;
      }
LABEL_161:
      v124.i64[1] = v87;
      uint64_t v79 = v87;
      if (v87 > v80) {
        goto LABEL_170;
      }
    }
    v76 += 8;
    if (v76 != v127) {
      continue;
    }
    break;
  }
  if (!sub_1002D725C(&v124, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002D725C(&v124, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  double v98 = (char *)v141;
  double v97 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3 || a4 > 0x63 || (v133 - (unsigned char *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      uint64_t v105 = v133;
      if (v132 != v133)
      {
        do
        {
          __int16 v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              uint64_t v109 = *(void *)v98;
              uint64_t v110 = *(void *)v108;
              if (*(void *)(*(void *)v98 + 48) >= *(void *)(*(void *)v108 + 32)
                && *(void *)(v109 + 32) <= *(void *)(v110 + 48))
              {
                BOOL v111 = *(void *)(v109 + 56) >= *(void *)(v110 + 40)
                    && *(void *)(v109 + 40) <= *(void *)(v110 + 56);
                BOOL v112 = v111 && *(unsigned char *)(v109 + 96) == 0;
                if (v112 && *(unsigned char *)(v110 + 96) == 0)
                {
                  if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v109, *((_DWORD *)a6 + 10), *a6, (int *)v110, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
                  uint64_t v105 = v133;
                  }
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            double v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002D725C(&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v107 = (char *)v138;
  uint64_t v106 = v139;
  if (a5 > (v139 - (unsigned char *)v138) >> 3 || a4 > 0x63 || (v130 - (unsigned char *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      uint64_t v114 = v130;
      if (v129 != v130)
      {
        do
        {
          uint64_t v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              uint64_t v118 = *(void *)v107;
              uint64_t v119 = *(void *)v117;
              if (*(void *)(*(void *)v107 + 48) >= *(void *)(*(void *)v117 + 32)
                && *(void *)(v118 + 32) <= *(void *)(v119 + 48))
              {
                BOOL v120 = *(void *)(v118 + 56) >= *(void *)(v119 + 40)
                    && *(void *)(v118 + 40) <= *(void *)(v119 + 56);
                BOOL v121 = v120 && *(unsigned char *)(v118 + 96) == 0;
                if (v121 && *(unsigned char *)(v119 + 96) == 0)
                {
                  if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v118, *((_DWORD *)a6 + 10), *a6, (int *)v119, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
                  uint64_t v114 = v130;
                  }
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            uint64_t v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002D725C(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v115 = 1;
  char v116 = (char *)__p;
  if (__p) {
    goto LABEL_279;
  }
LABEL_280:
  if (v129)
  {
    char v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    int v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    uint64_t v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    uint64_t v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    uint64_t v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002D7198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v34 = a20;
    if (!a20)
    {
LABEL_3:
      int64_t v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  int64_t v35 = a23;
  if (!a23)
  {
LABEL_4:
    uint64_t v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  uint64_t v36 = a26;
  if (!a26)
  {
LABEL_5:
    uint64_t v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  uint64_t v37 = a29;
  if (!a29)
  {
LABEL_6:
    uint64_t v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  uint64_t v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D725C(long long *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = *((void *)a1 + 2);
  uint64_t v17 = *((void *)a1 + 3);
  uint64_t v19 = *((void *)a1 + 1);
  if (v19 >= 0) {
    uint64_t v20 = *((void *)a1 + 1);
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  uint64_t v21 = v20 >> 1;
  long long v22 = *a1;
  long long v145 = a1[1];
  long long v146 = v22;
  if (v17 >= 0) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v17 + 1;
  }
  uint64_t v24 = v23 >> 1;
  v144[0] = v22;
  int v25 = v17 - 2 * v24 + v19 - 2 * v21;
  uint64_t v147 = v18;
  uint64_t v148 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[1] = v148;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  long long v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  __int16 v132 = 0;
  int v133 = 0;
  uint64_t v134 = 0;
  int v129 = 0;
  char v130 = 0;
  uint64_t v131 = 0;
  long long __p = 0;
  v127 = 0;
  uint64_t v128 = 0;
  sub_1002CA168(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_1002CA168(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  uint64_t v27 = (char *)v135;
  int64_t v26 = v136;
  if (v135 == v136) {
    goto LABEL_147;
  }
  int64_t v29 = (char *)__p;
  uint64_t v28 = v127;
  if (a5 > (v136 - (unsigned char *)v135) >> 3 || a4 > 0x63 || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        uint64_t v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            uint64_t v45 = *(void *)v27;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v27 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v45, *((_DWORD *)a6 + 10), *a6, (int *)v46, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
                uint64_t v28 = v127;
                }
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          int64_t v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v32 = 0x8000000000000000;
  uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v34 = *(void **)v27;
    int64_t v35 = *(void *)(*(void *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        uint64_t v36 = v34[5];
        if (v36 < v30) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v33 = v35;
      if (v35 <= v32) {
        goto LABEL_15;
      }
    }
    v125.i64[0] = v35;
    int64_t v32 = v35;
    uint64_t v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      uint64_t v30 = v36;
      if (v36 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      uint64_t v37 = v34[6];
      if (v37 < v33) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    int64_t v31 = v36;
    uint64_t v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      uint64_t v33 = v37;
      if (v37 <= v32) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      uint64_t v38 = v34[7];
      if (v38 >= v30) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    int64_t v32 = v37;
    uint64_t v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    uint64_t v30 = v38;
    if (v38 <= v31) {
      goto LABEL_12;
    }
LABEL_29:
    v125.i64[1] = v38;
    int64_t v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    BOOL v39 = *(void **)v29;
    int64_t v40 = *(void *)(*(void *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        uint64_t v41 = v39[5];
        if (v41 < v30) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v29 + 32);
      uint64_t v33 = v40;
      if (v40 <= v32) {
        goto LABEL_34;
      }
    }
    v125.i64[0] = v40;
    int64_t v32 = v40;
    uint64_t v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      uint64_t v30 = v41;
      if (v41 <= v31) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      uint64_t v42 = v39[6];
      if (v42 < v33) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    int64_t v31 = v41;
    uint64_t v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      uint64_t v33 = v42;
      if (v42 <= v32) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      uint64_t v43 = v39[7];
      if (v43 >= v30) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    int64_t v32 = v42;
    uint64_t v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    uint64_t v30 = v43;
    if (v43 <= v31) {
      goto LABEL_30;
    }
LABEL_48:
    v125.i64[1] = v43;
    int64_t v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002D63D8(v124.i64, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
    goto LABEL_278;
  }
LABEL_72:
  uint64_t v50 = v133;
  if (a5 > (v133 - (unsigned char *)v132) >> 3)
  {
    uint64_t v52 = (char *)v135;
    uint64_t v51 = v136;
    goto LABEL_75;
  }
  uint64_t v52 = (char *)v135;
  uint64_t v51 = v136;
  if (a5 <= (v130 - (unsigned char *)v129) >> 3 && a4 <= 0x63 && (v136 - (unsigned char *)v135) >> 3 >= a5)
  {
    int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v67 = 0x8000000000000000;
      int64_t v68 = 0x8000000000000000;
      uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v70 = *(void **)v52;
        int64_t v71 = *(void *)(*(void *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            uint64_t v72 = v70[5];
            if (v72 < v66) {
              goto LABEL_129;
            }
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(void *)(*(void *)v52 + 32);
          uint64_t v69 = v71;
          if (v71 <= v68) {
            goto LABEL_128;
          }
        }
        v125.i64[0] = v71;
        int64_t v68 = v71;
        uint64_t v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          uint64_t v66 = v72;
          if (v72 <= v67) {
            goto LABEL_130;
          }
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          uint64_t v73 = v70[6];
          if (v73 < v69) {
            goto LABEL_131;
          }
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        int64_t v67 = v72;
        uint64_t v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          uint64_t v69 = v73;
          if (v73 <= v68) {
            goto LABEL_132;
          }
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          uint64_t v74 = v70[7];
          if (v74 < v66) {
            goto LABEL_133;
          }
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        int64_t v68 = v73;
        uint64_t v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          uint64_t v66 = v74;
          if (v74 > v67) {
            goto LABEL_142;
          }
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          int64_t v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002D63D8(v124.i64, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002D63D8(v124.i64, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    uint64_t v115 = 0;
    char v116 = (char *)__p;
    if (!__p) {
      goto LABEL_280;
    }
LABEL_279:
    v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51) {
      goto LABEL_147;
    }
  }
  else
  {
    do
    {
      uint64_t v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          uint64_t v55 = *(void *)v52;
          uint64_t v56 = *(void *)v54;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v54 + 32)
            && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
          {
            BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
            BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
            if (v58 && *(unsigned char *)(v56 + 96) == 0)
            {
              if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v55, *((_DWORD *)a6 + 10), *a6, (int *)v56, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
              uint64_t v50 = v133;
              }
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    uint64_t v52 = (char *)v135;
    if (v135 == v51) {
      goto LABEL_147;
    }
  }
  double v53 = v130;
  if (v129 != v130)
  {
    do
    {
      int64x2_t v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          uint64_t v61 = *(void *)v52;
          uint64_t v62 = *(void *)v60;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v60 + 32)
            && *(void *)(v61 + 32) <= *(void *)(v62 + 48))
          {
            BOOL v63 = *(void *)(v61 + 56) >= *(void *)(v62 + 40) && *(void *)(v61 + 40) <= *(void *)(v62 + 56);
            BOOL v64 = v63 && *(unsigned char *)(v61 + 96) == 0;
            if (v64 && *(unsigned char *)(v62 + 96) == 0)
            {
              if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v61, *((_DWORD *)a6 + 10), *a6, (int *)v62, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
              double v53 = v130;
              }
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  double v76 = (char *)__p;
  uint64_t v75 = v127;
  if (__p == v127) {
    goto LABEL_198;
  }
  double v78 = (char *)v141;
  double v77 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3
    || a5 > (v139 - (unsigned char *)v138) >> 3
    || a4 > 0x63
    || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      uint64_t v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          uint64_t v89 = *(void *)v78;
          uint64_t v90 = *(void *)v88;
          if (*(void *)(*(void *)v78 + 48) >= *(void *)(*(void *)v88 + 32)
            && *(void *)(v89 + 32) <= *(void *)(v90 + 48))
          {
            BOOL v91 = *(void *)(v89 + 56) >= *(void *)(v90 + 40) && *(void *)(v89 + 40) <= *(void *)(v90 + 56);
            BOOL v92 = v91 && *(unsigned char *)(v89 + 96) == 0;
            if (v92 && *(unsigned char *)(v90 + 96) == 0)
            {
              if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v89, *((_DWORD *)a6 + 10), *a6, (int *)v90, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
              uint64_t v75 = v127;
              }
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        double v77 = v142;
      }
      v78 += 8;
    }
    double v95 = (char *)v138;
    double v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        double v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            uint64_t v100 = *(void *)v95;
            uint64_t v101 = *(void *)v99;
            if (*(void *)(*(void *)v95 + 48) >= *(void *)(*(void *)v99 + 32)
              && *(void *)(v100 + 32) <= *(void *)(v101 + 48))
            {
              BOOL v102 = *(void *)(v100 + 56) >= *(void *)(v101 + 40)
                  && *(void *)(v100 + 40) <= *(void *)(v101 + 56);
              BOOL v103 = v102 && *(unsigned char *)(v100 + 96) == 0;
              if (v103 && *(unsigned char *)(v101 + 96) == 0)
              {
                if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v100, *((_DWORD *)a6 + 10), *a6, (int *)v101, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
                uint64_t v75 = v127;
                }
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          double v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  uint64_t v79 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v80 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v81 = 0x8000000000000000;
  uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    int v83 = *(void **)v76;
    int64_t v84 = *(void *)(*(void *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81) {
        goto LABEL_164;
      }
LABEL_156:
      uint64_t v85 = v83[5];
      if (v85 < v79) {
        goto LABEL_157;
      }
LABEL_165:
      if (v85 > v80) {
        goto LABEL_166;
      }
LABEL_158:
      uint64_t v86 = v83[6];
      if (v86 < v82) {
        goto LABEL_159;
      }
LABEL_167:
      if (v86 > v81) {
        goto LABEL_168;
      }
LABEL_160:
      int64_t v87 = v83[7];
      if (v87 < v79) {
        goto LABEL_161;
      }
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        int64_t v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v76 + 32);
      uint64_t v82 = v84;
      if (v84 <= v81) {
        goto LABEL_156;
      }
LABEL_164:
      v125.i64[0] = v84;
      int64_t v81 = v84;
      uint64_t v85 = v83[5];
      if (v85 >= v79) {
        goto LABEL_165;
      }
LABEL_157:
      v124.i64[1] = v85;
      uint64_t v79 = v85;
      if (v85 <= v80) {
        goto LABEL_158;
      }
LABEL_166:
      v125.i64[1] = v85;
      int64_t v80 = v85;
      uint64_t v86 = v83[6];
      if (v86 >= v82) {
        goto LABEL_167;
      }
LABEL_159:
      v124.i64[0] = v86;
      uint64_t v82 = v86;
      if (v86 <= v81) {
        goto LABEL_160;
      }
LABEL_168:
      v125.i64[0] = v86;
      int64_t v81 = v86;
      int64_t v87 = v83[7];
      if (v87 >= v79) {
        goto LABEL_169;
      }
LABEL_161:
      v124.i64[1] = v87;
      uint64_t v79 = v87;
      if (v87 > v80) {
        goto LABEL_170;
      }
    }
    v76 += 8;
    if (v76 != v127) {
      continue;
    }
    break;
  }
  if (!sub_1002D63D8(v124.i64, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002D63D8(v124.i64, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  double v98 = (char *)v141;
  double v97 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3 || a4 > 0x63 || (v133 - (unsigned char *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      uint64_t v105 = v133;
      if (v132 != v133)
      {
        do
        {
          __int16 v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              uint64_t v109 = *(void *)v98;
              uint64_t v110 = *(void *)v108;
              if (*(void *)(*(void *)v98 + 48) >= *(void *)(*(void *)v108 + 32)
                && *(void *)(v109 + 32) <= *(void *)(v110 + 48))
              {
                BOOL v111 = *(void *)(v109 + 56) >= *(void *)(v110 + 40)
                    && *(void *)(v109 + 40) <= *(void *)(v110 + 56);
                BOOL v112 = v111 && *(unsigned char *)(v109 + 96) == 0;
                if (v112 && *(unsigned char *)(v110 + 96) == 0)
                {
                  if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v109, *((_DWORD *)a6 + 10), *a6, (int *)v110, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
                  uint64_t v105 = v133;
                  }
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            double v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002D63D8((uint64_t *)&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v107 = (char *)v138;
  uint64_t v106 = v139;
  if (a5 > (v139 - (unsigned char *)v138) >> 3 || a4 > 0x63 || (v130 - (unsigned char *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      uint64_t v114 = v130;
      if (v129 != v130)
      {
        do
        {
          uint64_t v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              uint64_t v118 = *(void *)v107;
              uint64_t v119 = *(void *)v117;
              if (*(void *)(*(void *)v107 + 48) >= *(void *)(*(void *)v117 + 32)
                && *(void *)(v118 + 32) <= *(void *)(v119 + 48))
              {
                BOOL v120 = *(void *)(v118 + 56) >= *(void *)(v119 + 40)
                    && *(void *)(v118 + 40) <= *(void *)(v119 + 56);
                BOOL v121 = v120 && *(unsigned char *)(v118 + 96) == 0;
                if (v121 && *(unsigned char *)(v119 + 96) == 0)
                {
                  if (!sub_1002D80E0(*((_DWORD *)a6 + 10), *a6, (int *)v118, *((_DWORD *)a6 + 10), *a6, (int *)v119, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3]))goto LABEL_278; {
                  uint64_t v114 = v130;
                  }
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            uint64_t v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002D63D8(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v115 = 1;
  char v116 = (char *)__p;
  if (__p) {
    goto LABEL_279;
  }
LABEL_280:
  if (v129)
  {
    char v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    int v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    uint64_t v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    uint64_t v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    uint64_t v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002D801C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v34 = a20;
    if (!a20)
    {
LABEL_3:
      int64_t v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  int64_t v35 = a23;
  if (!a23)
  {
LABEL_4:
    uint64_t v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  uint64_t v36 = a26;
  if (!a26)
  {
LABEL_5:
    uint64_t v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  uint64_t v37 = a29;
  if (!a29)
  {
LABEL_6:
    uint64_t v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  uint64_t v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D80E0(int a1, void *a2, int *a3, int a4, void *a5, int *a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  if ((!*((unsigned char *)a3 + 96) || (unint64_t)(*((void *)a3 + 10) + 1) >= *((void *)a3 + 11))
    && (!*((unsigned char *)a6 + 96) || (unint64_t)(*((void *)a6 + 10) + 1) >= *((void *)a6 + 11)))
  {
    uint64_t v11 = *((void *)a3 + 3);
    uint64_t v12 = (double **)(*a2 + 48 * *((void *)a3 + 2));
    if (v11 >= 0) {
      uint64_t v12 = (double **)&v12[3][3 * v11];
    }
    uint64_t v13 = *v12;
    uint64_t v114 = v12[1];
    uint64_t v115 = *v12;
    uint64_t v14 = *((void *)a6 + 3);
    uint64_t v15 = (double **)(*a5 + 48 * *((void *)a6 + 2));
    if (v14 >= 0) {
      uint64_t v15 = (double **)&v15[3][3 * v14];
    }
    char v122 = *v15;
    uint64_t v118 = v15[1];
    int v16 = *a3;
    int v109 = *a6;
    uint64_t v17 = *((void *)a3 + 13);
    uint64_t v18 = *((void *)a3 + 8);
    uint64_t v19 = *((void *)a3 + 9);
    uint64_t v20 = &v13[2 * v18];
    uint64_t v113 = v17;
    if (v18 != v19)
    {
      uint64_t v88 = 0;
      uint64_t v89 = 16 * v19 - 16 * v18;
      v127 = &v13[2 * v18];
      uint64_t v90 = v127;
      uint64_t v91 = *((void *)a3 + 8);
      BOOL v92 = v127;
      while (1)
      {
        uint64_t v93 = v18;
        uint64_t v20 = v90;
        double v94 = (double)*(uint64_t *)(a10 + 24) + (v90[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v94 >= 0.0) {
          double v95 = 0.5;
        }
        else {
          double v95 = -0.5;
        }
        sub_1002C5028(v94 + v95);
        double v96 = v92[2];
        v92 += 2;
        double v97 = (double)*(uint64_t *)(a10 + 16) + (v96 - *(double *)a10) * *(double *)(a10 + 32);
        if (v97 >= 0.0) {
          double v98 = 0.5;
        }
        else {
          double v98 = -0.5;
        }
        double v99 = v97 + v98;
        sub_1002C5028(v97 + v98);
        double v100 = ceil(v99);
        double v101 = floor(v99);
        if (v99 >= 0.0) {
          double v100 = v101;
        }
        uint64_t v102 = (uint64_t)v100;
        if (v16 == 1)
        {
          uint64_t v18 = v93;
          if (*((void *)a6 + 4) <= v102)
          {
            uint64_t v113 = v17;
            uint64_t v18 = v91;
            break;
          }
        }
        else
        {
          if (v16 != -1)
          {
            uint64_t v20 = v127;
            uint64_t v18 = v93;
            break;
          }
          uint64_t v18 = v93;
          if (*((void *)a6 + 6) >= v102)
          {
            v113 += v88;
            uint64_t v18 = v93 + v88;
            break;
          }
        }
        ++v91;
        ++v17;
        ++v88;
        uint64_t v90 = v92;
        v89 -= 16;
        if (!v89) {
          return 1;
        }
      }
    }
    uint64_t v21 = &v115[2 * v19];
    if (v20 != v21)
    {
      long long v22 = v20 + 2;
      uint64_t v23 = &v115[2 * (v20 != v115)];
      if (v20 + 2 != v114) {
        uint64_t v23 = v20 + 2;
      }
      uint64_t v24 = v23 + 2;
      int v25 = &v115[2 * (v23 != v115)];
      if (v24 != v114) {
        int v25 = v24;
      }
      uint64_t v117 = v25;
      int v26 = -v16;
      int v119 = -v109;
      __int16 v108 = v21;
      while (1)
      {
        uint64_t v126 = v18;
        double v29 = (double)*(uint64_t *)(a10 + 24) + (v20[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v29 >= 0.0) {
          double v30 = 0.5;
        }
        else {
          double v30 = -0.5;
        }
        sub_1002C5028(v29 + v30);
        char v116 = v20;
        double v31 = (double)*(uint64_t *)(a10 + 16) + (*v20 - *(double *)a10) * *(double *)(a10 + 32);
        if (v31 >= 0.0) {
          double v32 = 0.5;
        }
        else {
          double v32 = -0.5;
        }
        double v33 = v31 + v32;
        sub_1002C5028(v31 + v32);
        double v34 = ceil(v33);
        double v35 = floor(v33);
        if (v33 >= 0.0) {
          double v34 = v35;
        }
        uint64_t v36 = (uint64_t)v34;
        if (v26 == 1)
        {
          uint64_t v37 = a6;
          uint64_t v38 = v126;
          BOOL v39 = v122;
          int64_t v40 = v20;
          if (*((void *)a6 + 4) > v36) {
            return 1;
          }
        }
        else
        {
          uint64_t v37 = a6;
          uint64_t v38 = v126;
          BOOL v39 = v122;
          int64_t v40 = v20;
          if (v26 == -1 && *((void *)a6 + 6) < v36) {
            return 1;
          }
        }
        uint64_t v41 = a3;
        v181[0] = a3;
        v181[1] = v38;
        v181[2] = v40;
        v181[3] = v22;
        v181[4] = v117;
        v181[5] = v115;
        v181[6] = v114;
        char v182 = 1;
        char v183 = 0;
        long long v42 = *(_OWORD *)(a10 + 16);
        long long v184 = *(_OWORD *)a10;
        long long v185 = v42;
        uint64_t v186 = *(void *)(a10 + 32);
        uint64_t v44 = v37[8];
        uint64_t v43 = v37[9];
        uint64_t v45 = v37[13];
        if (v44 == v43)
        {
LABEL_34:
          uint64_t v46 = &v39[2 * v44];
          goto LABEL_35;
        }
        uint64_t v71 = 0;
        double v72 = *(double *)(a10 + 32);
        uint64_t v73 = 16 * v43 - 16 * v44;
        uint64_t v46 = &v39[2 * v44];
        uint64_t v74 = v37[13];
        uint64_t v75 = v37[8];
        while (1)
        {
          double v76 = (double)*(uint64_t *)(a10 + 24) + (v46[3] - *(double *)(a10 + 8)) * v72;
          if (v76 >= 0.0) {
            double v77 = 0.5;
          }
          else {
            double v77 = -0.5;
          }
          double v78 = v76 + v77;
          int v79 = 2 * (v78 >= 9.22337204e18);
          if (v78 <= -9.22337204e18) {
            int v79 = 1;
          }
          if (v79 == 2) {
            goto LABEL_130;
          }
          if (v79 == 1) {
            goto LABEL_131;
          }
          double v80 = (double)*(uint64_t *)(a10 + 16) + (v46[2] - *(double *)a10) * v72;
          if (v80 >= 0.0) {
            double v81 = 0.5;
          }
          else {
            double v81 = -0.5;
          }
          double v82 = v80 + v81;
          int v83 = 2 * (v82 >= 9.22337204e18);
          if (v82 <= -9.22337204e18) {
            int v83 = 1;
          }
          if (v83 == 2)
          {
LABEL_130:
            exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            exception->__vftable = 0;
            uint64_t v105 = sub_10015F6A0(exception);
          }
          if (v83 == 1)
          {
LABEL_131:
            uint64_t v106 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
            v106->__vftable = 0;
            uint64_t v107 = sub_10015F668(v106);
          }
          double v84 = ceil(v82);
          double v85 = floor(v82);
          double v86 = v82 >= 0.0 ? v85 : v84;
          uint64_t v87 = (uint64_t)v86;
          if (v109 == 1) {
            break;
          }
          if (v109 != -1) {
            goto LABEL_34;
          }
          if (*((void *)a3 + 6) >= v87)
          {
            v45 += v71;
            v44 += v71;
            goto LABEL_35;
          }
LABEL_88:
          v46 += 2;
          ++v75;
          ++v74;
          ++v71;
          v73 -= 16;
          if (!v73) {
            goto LABEL_110;
          }
        }
        if (*((void *)a3 + 4) > v87) {
          goto LABEL_88;
        }
        uint64_t v45 = v74;
        uint64_t v44 = v75;
LABEL_35:
        uint64_t v123 = &v39[2 * v43];
        if (v46 != v123) {
          break;
        }
LABEL_110:
        ++v113;
LABEL_17:
        uint64_t v20 = v116 + 2;
        uint64_t v18 = v38 + 1;
        uint64_t v27 = v117 + 2;
        if (v117 + 2 == v114) {
          uint64_t v27 = &v115[2 * (v117 != v115)];
        }
        uint64_t v117 = v27;
        BOOL v28 = v22 == v21;
        v22 += 2;
        int v26 = -v16;
        if (v28) {
          return 1;
        }
      }
      uint64_t v110 = v22;
      BOOL v47 = v46 + 2;
      BOOL v48 = v118;
      if (v46 + 2 == v118) {
        BOOL v47 = &v39[2 * (v46 != v39)];
      }
      int64x2_t v49 = v47 + 2;
      uint64_t v50 = &v39[2 * (v47 != v39)];
      if (v49 == v118) {
        uint64_t v51 = v50;
      }
      else {
        uint64_t v51 = v49;
      }
      uint64_t v52 = ++v113 - v45;
      while (1)
      {
        double v53 = *(double *)(a10 + 32);
        double v54 = (double)*(uint64_t *)(a10 + 24) + (v46[1] - *(double *)(a10 + 8)) * v53;
        if (v54 >= 0.0) {
          double v55 = 0.5;
        }
        else {
          double v55 = -0.5;
        }
        double v56 = v54 + v55;
        int v57 = 2 * (v56 >= 9.22337204e18);
        if (v56 <= -9.22337204e18) {
          int v57 = 1;
        }
        if (v57 == 2) {
          goto LABEL_130;
        }
        if (v57 == 1) {
          goto LABEL_131;
        }
        double v58 = (double)*(uint64_t *)(a10 + 16) + (*v46 - *(double *)a10) * v53;
        if (v58 >= 0.0) {
          double v59 = 0.5;
        }
        else {
          double v59 = -0.5;
        }
        double v60 = v58 + v59;
        int v61 = 2 * (v60 >= 9.22337204e18);
        if (v60 <= -9.22337204e18) {
          int v61 = 1;
        }
        if (v61 == 2) {
          goto LABEL_130;
        }
        if (v61 == 1) {
          goto LABEL_131;
        }
        double v62 = ceil(v60);
        double v63 = floor(v60);
        if (v60 >= 0.0) {
          double v64 = v63;
        }
        else {
          double v64 = v62;
        }
        uint64_t v65 = (uint64_t)v64;
        if (v119 == 1)
        {
          if (v41[4] > v65) {
            goto LABEL_16;
          }
        }
        else if (v119 == -1 && v41[6] < v65)
        {
          goto LABEL_16;
        }
        uint64_t v66 = v41[2];
        if (a1 == a4)
        {
          uint64_t v67 = v41[3];
          uint64_t v69 = v37[2];
          uint64_t v68 = v37[3];
          if (v66 == v69)
          {
            if (v67 == v68)
            {
              if (a7)
              {
                if (v38 >= v44 || (a8 & 1) == 0)
                {
                  uint64_t v68 = v41[3];
                  uint64_t v69 = v41[2];
                  if (v38 >= v44) {
                    goto LABEL_74;
                  }
                  goto LABEL_73;
                }
LABEL_81:
                if (!v52) {
                  goto LABEL_74;
                }
                if (!v38)
                {
                  uint64_t v68 = v41[3];
                  uint64_t v69 = v41[2];
                  if (v41[11] - 2 <= v44) {
                    goto LABEL_74;
                  }
                  goto LABEL_73;
                }
              }
              else if (a8)
              {
                goto LABEL_81;
              }
              uint64_t v68 = v41[3];
              uint64_t v69 = v41[2];
              goto LABEL_73;
            }
            uint64_t v69 = v41[2];
          }
        }
        else
        {
          uint64_t v67 = v41[3];
          uint64_t v69 = v37[2];
          uint64_t v68 = v37[3];
        }
LABEL_73:
        v175[0] = v37;
        v175[1] = v44;
        v175[2] = v46;
        v175[3] = v46 + 2;
        v175[4] = v51;
        v175[5] = v39;
        v175[6] = v48;
        char v176 = 0;
        char v177 = 0;
        long long v70 = *(_OWORD *)(a10 + 16);
        long long v178 = *(_OWORD *)a10;
        long long v179 = v70;
        uint64_t v180 = *(void *)(a10 + 32);
        int v129 = 0;
        char v130 = 0;
        uint64_t v131 = -1;
        __int16 v132 = 0;
        int v133 = 0;
        uint64_t v139 = 1;
        uint64_t v140 = 0;
        uint64_t v141 = 0;
        uint64_t v142 = -1;
        uint64_t v143 = -1;
        uint64_t v144 = -1;
        __int16 v145 = 257;
        uint64_t v146 = 0;
        uint64_t v147 = 0;
        uint64_t v148 = -1;
        uint64_t v149 = -1;
        uint64_t v150 = -1;
        char v151 = 0;
        int v152 = 0;
        __int16 v153 = 0;
        int v154 = 0;
        uint64_t v160 = 1;
        uint64_t v161 = 0;
        uint64_t v162 = 0;
        uint64_t v163 = -1;
        uint64_t v164 = -1;
        uint64_t v165 = -1;
        __int16 v166 = 257;
        uint64_t v167 = 0;
        uint64_t v168 = 0;
        uint64_t v169 = -1;
        uint64_t v170 = -1;
        uint64_t v171 = -1;
        char v172 = 0;
        int v173 = 0;
        __int16 v174 = 0;
        uint64_t v134 = a1;
        uint64_t v135 = v66;
        uint64_t v136 = v67;
        uint64_t v137 = v38;
        long long v138 = xmmword_1003FAAE0;
        uint64_t v155 = a4;
        uint64_t v156 = v69;
        uint64_t v157 = v68;
        uint64_t v158 = v44;
        long long v159 = xmmword_1003FAAE0;
        sub_1002CBE54((uint64_t)v181, (uint64_t)v175, v128, a9, a10, a11);
        uint64_t v37 = a6;
        uint64_t v38 = v126;
        BOOL v48 = v118;
        BOOL v39 = v122;
        uint64_t v41 = a3;
LABEL_74:
        v46 += 2;
        ++v44;
        if (v51 + 2 == v48) {
          uint64_t v51 = &v39[2 * (v51 != v39)];
        }
        else {
          v51 += 2;
        }
        --v52;
        if (v46 == v123)
        {
LABEL_16:
          uint64_t v21 = v108;
          long long v22 = v110;
          goto LABEL_17;
        }
      }
    }
  }
  return 1;
}

void sub_1002D8A1C(void *a1, void *a2, uint64_t *a3)
{
  BOOL v3 = a1;
  double v86 = 0;
  uint64_t v87 = 0;
  double v85 = &v86;
  unint64_t v4 = a1[4];
  unint64_t v5 = v4 >> 4;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  if (v7 == v6) {
    goto LABEL_125;
  }
  uint64_t v8 = (void *)(v6 + 8 * v5);
  uint64_t v9 = *v8 + 376 * (a1[4] & 0xFLL);
  uint64_t v10 = a1 + 5;
  uint64_t v79 = *(void *)(v6 + (((a1[5] + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 376 * ((*((_DWORD *)a1 + 10) + v4) & 0xF);
  if (v9 == v79) {
    goto LABEL_73;
  }
  double v77 = a1 + 5;
  uint64_t v11 = 0;
  do
  {
    double v82 = v8;
    uint64_t v83 = v9;
    if (*(_DWORD *)(v9 + 16) == 7)
    {
      uint64_t v12 = v9 + 40;
      uint64_t v84 = v9 + 376;
      while (1)
      {
        uint64_t v14 = *(void *)(v12 + 16);
        uint64_t v15 = *(void *)(v12 + 24);
        int v16 = &v86;
        uint64_t v17 = &v86;
        uint64_t v18 = v86;
        if (v86) {
          break;
        }
LABEL_18:
        uint64_t v21 = operator new(0x48uLL);
        long long v22 = v21;
        v21[4] = v14;
        v21[5] = v15;
        v21[7] = 0;
        v21[8] = 0;
        unsigned char v21[6] = 0;
        *uint64_t v21 = 0;
        v21[1] = 0;
        double v21[2] = v16;
        *uint64_t v17 = v21;
        uint64_t v23 = v21;
        if (*v85)
        {
          double v85 = (void *)*v85;
          uint64_t v23 = (void *)*v17;
        }
        uint64_t v24 = v86;
        BOOL v59 = v23 == v86;
        *((unsigned char *)v23 + 24) = v23 == v86;
        if (!v59)
        {
          do
          {
            uint64_t v25 = v23[2];
            if (*(unsigned char *)(v25 + 24)) {
              break;
            }
            int v26 = *(void **)(v25 + 16);
            uint64_t v27 = *v26;
            if (*v26 == v25)
            {
              uint64_t v30 = v26[1];
              if (!v30 || (int v31 = *(unsigned __int8 *)(v30 + 24), v28 = (unsigned char *)(v30 + 24), v31))
              {
                if (*(void **)v25 == v23)
                {
                  *(unsigned char *)(v25 + 24) = 1;
                  *((unsigned char *)v26 + 24) = 0;
                  uint64_t v34 = *(void *)(v25 + 8);
                  void *v26 = v34;
                  if (v34) {
                    goto LABEL_35;
                  }
                }
                else
                {
                  double v32 = *(uint64_t **)(v25 + 8);
                  uint64_t v33 = *v32;
                  *(void *)(v25 + 8) = *v32;
                  if (v33)
                  {
                    *(void *)(v33 + 16) = v25;
                    int v26 = *(void **)(v25 + 16);
                  }
                  v32[2] = (uint64_t)v26;
                  *(void *)(*(void *)(v25 + 16) + 8 * (**(void **)(v25 + 16) != v25)) = v32;
                  *double v32 = v25;
                  *(void *)(v25 + 16) = v32;
                  int v26 = (void *)v32[2];
                  uint64_t v25 = *v26;
                  *((unsigned char *)v32 + 24) = 1;
                  *((unsigned char *)v26 + 24) = 0;
                  uint64_t v34 = *(void *)(v25 + 8);
                  void *v26 = v34;
                  if (v34) {
LABEL_35:
                  }
                    *(void *)(v34 + 16) = v26;
                }
                *(void *)(v25 + 16) = v26[2];
                *(void *)(v26[2] + 8 * (*(void *)v26[2] != (void)v26)) = v25;
                *(void *)(v25 + 8) = v26;
LABEL_41:
                double v26[2] = v25;
                break;
              }
            }
            else if (!v27 || (int v29 = *(unsigned __int8 *)(v27 + 24), v28 = (unsigned char *)(v27 + 24), v29))
            {
              if (*(void **)v25 == v23)
              {
                uint64_t v54 = v23[1];
                *(void *)uint64_t v25 = v54;
                if (v54)
                {
                  *(void *)(v54 + 16) = v25;
                  int v26 = *(void **)(v25 + 16);
                }
                double v23[2] = v26;
                *(void *)(*(void *)(v25 + 16) + 8 * (**(void **)(v25 + 16) != v25)) = v23;
                v23[1] = v25;
                *(void *)(v25 + 16) = v23;
                int v26 = (void *)v23[2];
                *((unsigned char *)v23 + 24) = 1;
                *((unsigned char *)v26 + 24) = 0;
                uint64_t v25 = v26[1];
                double v35 = *(void **)v25;
                v26[1] = *(void *)v25;
                if (v35) {
LABEL_39:
                }
                  void v35[2] = v26;
              }
              else
              {
                *(unsigned char *)(v25 + 24) = 1;
                *((unsigned char *)v26 + 24) = 0;
                uint64_t v25 = v26[1];
                double v35 = *(void **)v25;
                v26[1] = *(void *)v25;
                if (v35) {
                  goto LABEL_39;
                }
              }
              *(void *)(v25 + 16) = v26[2];
              *(void *)(v26[2] + 8 * (*(void *)v26[2] != (void)v26)) = v25;
              *(void *)uint64_t v25 = v26;
              goto LABEL_41;
            }
            *(unsigned char *)(v25 + 24) = 1;
            uint64_t v23 = v26;
            *((unsigned char *)v26 + 24) = v26 == v24;
            unsigned char *v28 = 1;
          }
          while (v26 != v24);
        }
        ++v87;
        uint64_t v37 = (char *)v21[7];
        uint64_t v36 = (char *)v21[8];
        if (v37 >= v36) {
          goto LABEL_43;
        }
LABEL_7:
        *(void *)uint64_t v37 = v11;
        uint64_t v13 = (uint64_t)(v37 + 8);
LABEL_8:
        unsigned char v22[7] = v13;
        v12 += 168;
        if (v12 == v84) {
          goto LABEL_70;
        }
      }
      while (1)
      {
        int v16 = (void **)v18;
        uint64_t v19 = v18[4];
        if (v14 < v19) {
          goto LABEL_11;
        }
        if (v19 < v14) {
          goto LABEL_16;
        }
        uint64_t v20 = v16[5];
        if (v15 < (uint64_t)v20)
        {
LABEL_11:
          uint64_t v18 = *v16;
          uint64_t v17 = v16;
          if (!*v16) {
            goto LABEL_18;
          }
        }
        else
        {
          if ((uint64_t)v20 >= v15)
          {
            long long v22 = v16;
            uint64_t v37 = (char *)v16[7];
            uint64_t v36 = (char *)v16[8];
            if (v37 < v36) {
              goto LABEL_7;
            }
LABEL_43:
            uint64_t v38 = (char *)v22[6];
            uint64_t v39 = (v37 - v38) >> 3;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61) {
              sub_1000A9108();
            }
            uint64_t v41 = v36 - v38;
            if (v41 >> 2 > v40) {
              unint64_t v40 = v41 >> 2;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42)
            {
              if (v42 >> 61) {
                sub_1000A6A10();
              }
              uint64_t v43 = operator new(8 * v42);
              uint64_t v44 = &v43[8 * v39];
              *uint64_t v44 = v11;
              uint64_t v13 = (uint64_t)(v44 + 1);
              if (v37 == v38)
              {
LABEL_60:
                unsigned char v22[6] = v44;
                unsigned char v22[7] = v13;
                v22[8] = &v43[8 * v42];
                if (v38) {
                  operator delete(v38);
                }
                goto LABEL_8;
              }
            }
            else
            {
              uint64_t v43 = 0;
              uint64_t v44 = (void *)(8 * v39);
              *(void *)(8 * v39) = v11;
              uint64_t v13 = 8 * v39 + 8;
              if (v37 == v38) {
                goto LABEL_60;
              }
            }
            unint64_t v45 = v37 - 8 - v38;
            if (v45 < 0x58) {
              goto LABEL_130;
            }
            if ((unint64_t)(v38 - v43) < 0x20) {
              goto LABEL_130;
            }
            uint64_t v46 = (v45 >> 3) + 1;
            uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
            BOOL v48 = &v37[-v47];
            uint64_t v44 = (void *)((char *)v44 - v47);
            int64x2_t v49 = &v43[8 * v39 - 16];
            uint64_t v50 = v37 - 16;
            uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v52 = *(_OWORD *)v50;
              *(v49 - 1) = *((_OWORD *)v50 - 1);
              *int64x2_t v49 = v52;
              v49 -= 2;
              v50 -= 32;
              v51 -= 4;
            }
            while (v51);
            uint64_t v37 = v48;
            if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_130:
              do
              {
                uint64_t v53 = *((void *)v37 - 1);
                v37 -= 8;
                *--uint64_t v44 = v53;
              }
              while (v37 != v38);
            }
            goto LABEL_60;
          }
LABEL_16:
          uint64_t v18 = v16[1];
          if (!v18)
          {
            uint64_t v17 = v16 + 1;
            goto LABEL_18;
          }
        }
      }
    }
LABEL_70:
    uint64_t v8 = v82;
    uint64_t v9 = v83 + 376;
    if (v83 + 376 - *v82 == 6016)
    {
      uint64_t v8 = v82 + 1;
      uint64_t v9 = v82[1];
    }
    BOOL v3 = a1;
    ++v11;
  }
  while (v9 != v79);
  unint64_t v4 = a1[4];
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  unint64_t v5 = v4 >> 4;
  uint64_t v10 = v77;
LABEL_73:
  if (v7 != v6)
  {
    double v55 = (void *)(v6 + 8 * v5);
    uint64_t v56 = *v55 + 376 * (v4 & 0xF);
    uint64_t v57 = *(void *)(v6 + (((*v10 + v4) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * ((*(_DWORD *)v10 + v4) & 0xF);
    while (v56 != v57)
    {
      int v58 = *(_DWORD *)(v56 + 16);
      BOOL v59 = v58 == 2 || v58 == 7;
      if (!v59)
      {
        int v61 = v86;
        if (v86)
        {
          uint64_t v63 = *(void *)(v56 + 56);
          uint64_t v62 = *(void *)(v56 + 64);
          double v64 = &v86;
          uint64_t v65 = v86;
          do
          {
            uint64_t v66 = v65[4];
            if (v66 < v63)
            {
              ++v65;
            }
            else if (v63 >= v66)
            {
              if (v65[5] < v62) {
                ++v65;
              }
              else {
                double v64 = (void **)v65;
              }
            }
            else
            {
              double v64 = (void **)v65;
            }
            uint64_t v65 = (void *)*v65;
          }
          while (v65);
          if (v64 != &v86)
          {
            uint64_t v67 = v64[4];
            if (v63 >= (uint64_t)v67 && ((uint64_t)v67 < v63 || v62 >= (uint64_t)v64[5]))
            {
              uint64_t v68 = v64[6];
              uint64_t v69 = v64[7];
              if (v68 != v69)
              {
                do
                {
                  if (sub_1002DA590((void *)v56, (void *)(*(void *)(v3[1] + (((v3[4] + *v68) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 376 * ((*((_DWORD *)v3 + 8) + *(_DWORD *)v68) & 0xF)), a2, a3))
                  {
                    *(unsigned char *)(*(void *)(v3[1] + (((v3[4] + *v68) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 376 * ((*((_DWORD *)v3 + 8) + *(_DWORD *)v68) & 0xF)
                             + 32) = 1;
                  }
                  ++v68;
                }
                while (v68 != v69);
                int v61 = v86;
              }
            }
          }
          if (v61)
          {
            uint64_t v71 = *(void *)(v56 + 224);
            uint64_t v70 = *(void *)(v56 + 232);
            double v72 = &v86;
            do
            {
              uint64_t v73 = v61[4];
              if (v73 < v71)
              {
                ++v61;
              }
              else if (v71 >= v73)
              {
                if (v61[5] < v70) {
                  ++v61;
                }
                else {
                  double v72 = (void **)v61;
                }
              }
              else
              {
                double v72 = (void **)v61;
              }
              int v61 = (void *)*v61;
            }
            while (v61);
            if (v72 != &v86)
            {
              uint64_t v74 = v72[4];
              if (v71 >= (uint64_t)v74 && ((uint64_t)v74 < v71 || v70 >= (uint64_t)v72[5]))
              {
                uint64_t v75 = v72[6];
                double v76 = v72[7];
                while (v75 != v76)
                {
                  if (sub_1002DA590((void *)v56, (void *)(*(void *)(v3[1] + (((v3[4] + *v75) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 376 * ((*((_DWORD *)v3 + 8) + *(_DWORD *)v75) & 0xF)), a2, a3))
                  {
                    *(unsigned char *)(*(void *)(v3[1] + (((v3[4] + *v75) >> 1) & 0x7FFFFFFFFFFFFFF8))
                             + 376 * ((*((_DWORD *)v3 + 8) + *(_DWORD *)v75) & 0xF)
                             + 32) = 1;
                  }
                  ++v75;
                }
              }
            }
          }
        }
      }
      v56 += 376;
      if (v56 - *v55 == 6016)
      {
        uint64_t v60 = v55[1];
        ++v55;
        uint64_t v56 = v60;
      }
    }
  }
LABEL_125:
  sub_1002DA99C((uint64_t)&v85, v86);
}

void sub_1002D91AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_1002D91C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_1002D91DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

void sub_1002D91F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
}

BOOL sub_1002D920C(void *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  sub_1002DAA00(a1, (uint64_t **)a2, a3, a4);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    unint64_t v7 = a1[4];
    uint64_t v8 = a1[1];
    if (a1[2] != v8)
    {
      uint64_t v9 = (uint64_t *)(v8 + 8 * (v7 >> 4));
      uint64_t v10 = *v9;
      uint64_t v11 = *v9 + 376 * (a1[4] & 0xFLL);
      uint64_t v12 = *(void *)(v8 + (((a1[5] + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((*((_DWORD *)a1 + 10) + v7) & 0xF);
      while (v11 != v12)
      {
        *(void *)(v11 + 24) = -1;
        v11 += 376;
        if (v11 - v10 == 6016)
        {
          uint64_t v13 = v9[1];
          ++v9;
          uint64_t v10 = v13;
          uint64_t v11 = v13;
        }
      }
    }
    int v16 = *(uint64_t **)a2;
    uint64_t v15 = (uint64_t *)(a2 + 8);
    uint64_t v14 = v16;
    if (v16 != v15)
    {
      uint64_t v17 = v14;
      do
      {
        uint64_t v18 = (uint64_t *)v17[5];
        if (v18 != v17 + 6)
        {
          uint64_t v19 = v17[4];
          do
          {
            *(void *)(*(void *)(v8 + (((v18[4] + v7) >> 1) & 0x7FFFFFFFFFFFFFF8))
                      + 376 * ((*((_DWORD *)v18 + 8) + v7) & 0xF)
                      + 24) = v19;
            uint64_t v20 = (uint64_t *)v18[1];
            if (v20)
            {
              do
              {
                uint64_t v21 = v20;
                uint64_t v20 = (uint64_t *)*v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                uint64_t v21 = (uint64_t *)v18[2];
                BOOL v22 = *v21 == (void)v18;
                uint64_t v18 = v21;
              }
              while (!v22);
            }
            uint64_t v18 = v21;
          }
          while (v21 != v17 + 6);
        }
        uint64_t v23 = (uint64_t *)v17[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            uint64_t v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (uint64_t *)v17[2];
            BOOL v22 = *v24 == (void)v17;
            uint64_t v17 = v24;
          }
          while (!v22);
        }
        uint64_t v17 = v24;
      }
      while (v24 != v15);
      uint64_t v25 = a1[4];
      uint64_t v26 = a1[1];
      do
      {
        uint64_t v27 = (uint64_t *)v14[5];
        BOOL v28 = v14 + 6;
        if (v27 != v14 + 6)
        {
          int v29 = (uint64_t *)v14[5];
          while (1)
          {
            uint64_t v30 = *(void *)(v26 + (((unint64_t)(v29[4] + v25) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 376 * ((*((_DWORD *)v29 + 8) + v25) & 0xF);
            if (*(_DWORD *)(v30 + 40) == 1 && *(_DWORD *)(v30 + 208) == 1) {
              break;
            }
            int v31 = (uint64_t *)v29[1];
            if (v31)
            {
              do
              {
                double v32 = v31;
                int v31 = (uint64_t *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                double v32 = (uint64_t *)v29[2];
                BOOL v22 = *v32 == (void)v29;
                int v29 = v32;
              }
              while (!v22);
            }
            int v29 = v32;
            if (v32 == v28) {
              goto LABEL_46;
            }
          }
          do
          {
            *(unsigned char *)(*(void *)(v26 + (((unint64_t)(v27[4] + v25) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 376 * ((*((_DWORD *)v27 + 8) + v25) & 0xF)
                     + 33) = 1;
            uint64_t v33 = (uint64_t *)v27[1];
            if (v33)
            {
              do
              {
                uint64_t v34 = v33;
                uint64_t v33 = (uint64_t *)*v33;
              }
              while (v33);
            }
            else
            {
              do
              {
                uint64_t v34 = (uint64_t *)v27[2];
                BOOL v22 = *v34 == (void)v27;
                uint64_t v27 = v34;
              }
              while (!v22);
            }
            uint64_t v27 = v34;
          }
          while (v34 != v28);
        }
LABEL_46:
        double v35 = (uint64_t *)v14[1];
        if (v35)
        {
          do
          {
            uint64_t v36 = v35;
            double v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            uint64_t v36 = (uint64_t *)v14[2];
            BOOL v22 = *v36 == (void)v14;
            uint64_t v14 = v36;
          }
          while (!v22);
        }
        uint64_t v14 = v36;
      }
      while (v36 != v15);
    }
  }
  return v6 != 0;
}

void sub_1002D94C0(void *a1, uint64_t **a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v5 = (void *)(v3 + 8 * (a1[4] >> 4));
  if (v4 == v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v5 + 376 * (a1[4] & 0xFLL);
  }
  uint64_t v55 = 0;
  unint64_t v7 = a2 + 1;
  while (v4 != v3)
  {
    unint64_t v8 = a1[5] + a1[4];
    if (v6 == *(void *)(v3 + ((v8 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v8 & 0xF)) {
      return;
    }
LABEL_10:
    uint64_t v51 = v5;
    uint64_t v52 = v6;
    if (!*(unsigned char *)(v6 + 32))
    {
      uint64_t v9 = 0;
      uint64_t v10 = (void *)(v6 + 40);
      uint64_t v53 = (void *)(v6 + 376);
      uint64_t v54 = v6 + 40;
      do
      {
        uint64_t v12 = (uint64_t *)v10[1];
        uint64_t v13 = (uint64_t *)v10[2];
        uint64_t v14 = (uint64_t *)v10[3];
        uint64_t v15 = v7;
        int v16 = v7;
        uint64_t v17 = *v7;
        uint64_t v56 = v9;
        if (!*v7) {
          goto LABEL_31;
        }
        do
        {
          while (1)
          {
            int v16 = (uint64_t **)v17;
            uint64_t v18 = (uint64_t *)v17[4];
            if (v12 != v18) {
              break;
            }
            uint64_t v19 = v16[5];
            if (v13 != v19)
            {
              if ((uint64_t)v13 < (uint64_t)v19) {
                goto LABEL_18;
              }
              if ((uint64_t)v19 >= (uint64_t)v13) {
                goto LABEL_56;
              }
              goto LABEL_29;
            }
            uint64_t v20 = v16[6];
            if ((uint64_t)v14 >= (uint64_t)v20)
            {
              if ((uint64_t)v20 >= (uint64_t)v14) {
                goto LABEL_56;
              }
              goto LABEL_29;
            }
LABEL_18:
            uint64_t v17 = *v16;
            uint64_t v15 = v16;
            if (!*v16) {
              goto LABEL_31;
            }
          }
          if ((uint64_t)v12 < (uint64_t)v18) {
            goto LABEL_18;
          }
          if ((uint64_t)v18 >= (uint64_t)v12) {
            goto LABEL_56;
          }
LABEL_29:
          uint64_t v17 = v16[1];
        }
        while (v17);
        uint64_t v15 = v16 + 1;
LABEL_31:
        uint64_t v21 = (uint64_t *)v16;
        int v16 = (uint64_t **)operator new(0x50uLL);
        v16[4] = v12;
        v16[5] = v13;
        v16[6] = v14;
        v16[7] = 0;
        v16[8] = 0;
        v16[9] = 0;
        *int v16 = 0;
        v16[1] = 0;
        v16[2] = v21;
        *uint64_t v15 = (uint64_t *)v16;
        BOOL v22 = (uint64_t *)**a2;
        uint64_t v23 = (uint64_t *)v16;
        if (v22)
        {
          *a2 = v22;
          uint64_t v23 = *v15;
        }
        uint64_t v24 = *v7;
        BOOL v25 = v23 == *v7;
        *((unsigned char *)v23 + 24) = v25;
        if (!v25)
        {
          do
          {
            uint64_t v26 = v23[2];
            if (*(unsigned char *)(v26 + 24)) {
              break;
            }
            uint64_t v27 = *(uint64_t **)(v26 + 16);
            uint64_t v28 = *v27;
            if (*v27 == v26)
            {
              uint64_t v31 = v27[1];
              if (!v31 || (v32 = *(unsigned __int8 *)(v31 + 24), int v29 = (unsigned char *)(v31 + 24), v32))
              {
                if (*(uint64_t **)v26 == v23)
                {
                  *(unsigned char *)(v26 + 24) = 1;
                  *((unsigned char *)v27 + 24) = 0;
                  uint64_t v35 = *(void *)(v26 + 8);
                  uint64_t *v27 = v35;
                  if (v35) {
                    goto LABEL_48;
                  }
                }
                else
                {
                  uint64_t v33 = *(uint64_t **)(v26 + 8);
                  uint64_t v34 = *v33;
                  *(void *)(v26 + 8) = *v33;
                  if (v34)
                  {
                    *(void *)(v34 + 16) = v26;
                    uint64_t v27 = *(uint64_t **)(v26 + 16);
                  }
                  v33[2] = (uint64_t)v27;
                  *(void *)(*(void *)(v26 + 16) + 8 * (**(void **)(v26 + 16) != v26)) = v33;
                  *uint64_t v33 = v26;
                  *(void *)(v26 + 16) = v33;
                  uint64_t v27 = (uint64_t *)v33[2];
                  uint64_t v26 = *v27;
                  *((unsigned char *)v33 + 24) = 1;
                  *((unsigned char *)v27 + 24) = 0;
                  uint64_t v35 = *(void *)(v26 + 8);
                  uint64_t *v27 = v35;
                  if (v35) {
LABEL_48:
                  }
                    *(void *)(v35 + 16) = v27;
                }
                *(void *)(v26 + 16) = v27[2];
                *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v26;
                *(void *)(v26 + 8) = v27;
LABEL_54:
                double v27[2] = v26;
                break;
              }
            }
            else if (!v28 || (v30 = *(unsigned __int8 *)(v28 + 24), int v29 = (unsigned char *)(v28 + 24), v30))
            {
              if (*(uint64_t **)v26 == v23)
              {
                uint64_t v49 = v23[1];
                *(void *)uint64_t v26 = v49;
                if (v49)
                {
                  *(void *)(v49 + 16) = v26;
                  uint64_t v27 = *(uint64_t **)(v26 + 16);
                }
                double v23[2] = (uint64_t)v27;
                *(void *)(*(void *)(v26 + 16) + 8 * (**(void **)(v26 + 16) != v26)) = v23;
                v23[1] = v26;
                *(void *)(v26 + 16) = v23;
                uint64_t v27 = (uint64_t *)v23[2];
                *((unsigned char *)v23 + 24) = 1;
                *((unsigned char *)v27 + 24) = 0;
                uint64_t v26 = v27[1];
                uint64_t v36 = *(uint64_t **)v26;
                v27[1] = *(void *)v26;
                if (v36) {
LABEL_52:
                }
                  v36[2] = (uint64_t)v27;
              }
              else
              {
                *(unsigned char *)(v26 + 24) = 1;
                *((unsigned char *)v27 + 24) = 0;
                uint64_t v26 = v27[1];
                uint64_t v36 = *(uint64_t **)v26;
                v27[1] = *(void *)v26;
                if (v36) {
                  goto LABEL_52;
                }
              }
              *(void *)(v26 + 16) = v27[2];
              *(void *)(v27[2] + 8 * (*(void *)v27[2] != (void)v27)) = v26;
              *(void *)uint64_t v26 = v27;
              goto LABEL_54;
            }
            *(unsigned char *)(v26 + 24) = 1;
            uint64_t v23 = v27;
            *((unsigned char *)v27 + 24) = v27 == v24;
            *int v29 = 1;
          }
          while (v27 != v24);
        }
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        uint64_t v9 = v56;
LABEL_56:
        uint64_t v37 = v54 - 168 * v9 + 176;
        uint64_t v39 = (char *)v16[8];
        unint64_t v38 = (unint64_t)v16[9];
        if ((unint64_t)v39 < v38)
        {
          *(void *)uint64_t v39 = v55;
          *((void *)v39 + 1) = v9;
          v39[16] = 0;
          uint64_t v11 = v39 + 40;
          *((void *)v39 + 3) = v37;
          *((void *)v39 + 4) = v10;
        }
        else
        {
          unint64_t v40 = v16[7];
          unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((v39 - (char *)v40) >> 3) + 1;
          if (v41 > 0x666666666666666) {
            sub_1000A9108();
          }
          unint64_t v42 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - (void)v40) >> 3);
          if (2 * v42 > v41) {
            unint64_t v41 = 2 * v42;
          }
          if (v42 >= 0x333333333333333) {
            unint64_t v43 = 0x666666666666666;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            if (v43 > 0x666666666666666) {
              sub_1000A6A10();
            }
            uint64_t v44 = (char *)operator new(40 * v43);
            uint64_t v9 = v56;
          }
          else
          {
            uint64_t v44 = 0;
          }
          unint64_t v45 = &v44[8 * ((v39 - (char *)v40) >> 3)];
          *(void *)unint64_t v45 = v55;
          *((void *)v45 + 1) = v9;
          v45[16] = 0;
          *((void *)v45 + 3) = v37;
          *((void *)v45 + 4) = v10;
          uint64_t v46 = v45;
          if (v39 != (char *)v40)
          {
            do
            {
              long long v47 = *(_OWORD *)(v39 - 40);
              long long v48 = *(_OWORD *)(v39 - 24);
              *((void *)v46 - 1) = *((void *)v39 - 1);
              *(_OWORD *)(v46 - 24) = v48;
              *(_OWORD *)(v46 - 40) = v47;
              v46 -= 40;
              v39 -= 40;
            }
            while (v39 != (char *)v40);
            uint64_t v39 = (char *)v16[7];
          }
          uint64_t v11 = v45 + 40;
          v16[7] = (uint64_t *)v46;
          v16[8] = (uint64_t *)(v45 + 40);
          v16[9] = (uint64_t *)&v44[40 * v43];
          if (v39)
          {
            operator delete(v39);
            uint64_t v9 = v56;
          }
        }
        v16[8] = (uint64_t *)v11;
        v10 += 21;
        ++v9;
      }
      while (v10 != v53);
    }
    unint64_t v5 = v51;
    uint64_t v6 = v52 + 376;
    if (v52 + 376 - *v51 == 6016)
    {
      unint64_t v5 = v51 + 1;
      uint64_t v6 = v51[1];
    }
    ++v55;
    uint64_t v3 = a1[1];
    uint64_t v4 = a1[2];
  }
  if (v6) {
    goto LABEL_10;
  }
}

void sub_1002D99E4(void *a1, uint64_t a2, int a3, uint64_t *a4, void *a5)
{
  unint64_t v5 = (void *)*a1;
  int v58 = a1 + 1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      uint64_t v60 = 0;
      int v61 = 0;
      uint64_t v62 = 0;
      v63[2] = 0;
      v63[3] = 0;
      if (v5[7])
      {
        uint64_t v9 = (void *)v5[5];
        if (v9 == v5 + 6)
        {
          uint64_t v19 = 0;
          uint64_t v18 = 0;
        }
        else
        {
          char v10 = 1;
          do
          {
            uint64_t v11 = v9[4];
            unint64_t v12 = *(void *)(a2 + 32) + v11;
            uint64_t v13 = *(void *)(*(void *)(a2 + 8) + ((v12 >> 1) & 0x7FFFFFFFFFFFFFF8));
            unsigned int v14 = v12 & 0xF;
            uint64_t v15 = (double *)(v13 + 376 * v14);
            if (v10) {
              long long v59 = *(_OWORD *)v15;
            }
            sub_1002DF6D8(&v60, (double *)(v13 + 376 * v14), (uint64_t)(v15 + 5), v11, 0, a4, a5, v10 & 1);
            sub_1002DF6D8(&v60, v15, (uint64_t)(v15 + 26), v11, 1, a4, a5, 0);
            int v16 = (void *)v9[1];
            if (v16)
            {
              do
              {
                uint64_t v17 = v16;
                int v16 = (void *)*v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                uint64_t v17 = (void *)v9[2];
                BOOL v39 = *v17 == (void)v9;
                uint64_t v9 = v17;
              }
              while (!v39);
            }
            char v10 = 0;
            uint64_t v9 = v17;
          }
          while (v17 != v5 + 6);
          uint64_t v18 = (long long *)v60;
          uint64_t v19 = (__n128 *)v61;
        }
        v66[0] = (double *)v63;
        v66[1] = (double *)&v59;
        unint64_t v20 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v19 - (char *)v18) >> 4));
        v66[2] = (double *)&v64;
        v65[0] = (double *)v63;
        v65[1] = (double *)&v59;
        v65[2] = (double *)&v64;
        if (v19 == (__n128 *)v18) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = v20;
        }
        sub_1002E05E8(v18, v19, v65, v21, 1);
        BOOL v22 = v60;
        uint64_t v23 = v61;
        uint64_t v24 = v61 - v60;
        if (v61 != v60)
        {
          *((void *)v60 + 2) = 0;
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v24 >> 4)) >= 2)
          {
            uint64_t v25 = 0;
            uint64_t v26 = 128;
            unint64_t v27 = 1;
            do
            {
              unsigned int v28 = sub_1002E0048(v66, (double *)&v22[v26 - 128], (double *)&v22[v26 - 16]);
              BOOL v22 = v60;
              uint64_t v23 = v61;
              v25 += v28;
              *(void *)&v60[v26] = v25;
              ++v27;
              v26 += 112;
            }
            while (v27 < 0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 4));
          }
          LOWORD(v66[0]) = 0;
          if (v23 != v22)
          {
            uint64_t v29 = 0;
            unint64_t v30 = 0;
            do
            {
              uint64_t v31 = &v22[v29];
              if (!*(_DWORD *)&v22[v29 + 44])
              {
                unint64_t v32 = *((void *)v31 + 9);
                if (v32 <= 1 && !*((unsigned char *)v66 + v32))
                {
                  sub_1002E260C(&v60, v32, v30);
                  *((unsigned char *)v66 + *((void *)v31 + 9)) = 1;
                  BOOL v22 = v60;
                  uint64_t v23 = v61;
                }
              }
              ++v30;
              v29 += 112;
            }
            while (v30 < 0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 4));
          }
        }
        if (a3 == 1)
        {
          sub_1002E2808((uint64_t *)&v60);
          uint64_t v33 = v60;
          uint64_t v34 = v61;
          if (v61 != v60)
          {
            uint64_t v35 = 0;
            uint64_t v36 = 0;
            unint64_t v37 = (v61 - v60) / 112;
            if (v37 <= 1) {
              unint64_t v37 = 1;
            }
            unint64_t v38 = v60 + 44;
            do
            {
              BOOL v39 = *(void *)(v38 - 28) > v36 && *(_DWORD *)v38 == 1;
              if (v39)
              {
                if (*(void *)(v38 + 4) == 0 && *(void *)(v38 + 12) != 0) {
                  uint64_t v36 = *(void *)(v38 - 28);
                }
                v35 += (*(void *)(v38 + 4) == 0) & (*(void *)(v38 + 12) != 0);
              }
              v38 += 112;
              --v37;
            }
            while (v37);
LABEL_59:
            void v5[8] = v35;
            int64_t v44 = v34 - v33;
            if (v44)
            {
              unint64_t v45 = v44 / 112;
              uint64_t v46 = *(void *)(a2 + 32);
              uint64_t v47 = *(void *)(a2 + 8);
              BOOL v49 = a3 == 1 && v35 == 0;
              if (v45 <= 1) {
                unint64_t v45 = 1;
              }
              uint64_t v50 = v33 + 56;
              do
              {
                uint64_t v51 = *(void *)(v47 + (((unint64_t)(v46 + *(v50 - 3)) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 376 * ((v46 + *((_DWORD *)v50 - 6)) & 0xF);
                uint64_t v52 = v51 + 40;
                int v53 = *((_DWORD *)v50 - 4);
                if (v49) {
                  *(unsigned char *)(v52 + 168 * v53 + 104) = 0;
                }
                if (*((_DWORD *)v50 - 3) == 1)
                {
                  uint64_t v54 = v52 + 168 * v53;
                  *(_OWORD *)(v54 + 112) = *(_OWORD *)(v50 - 1);
                  *(_OWORD *)(v54 + 128) = *(_OWORD *)(v50 - 5);
                  if (*(void *)(v51 + 48) != *(void *)(v51 + 216)
                    && (a3 == 1 && *(v50 - 1) || a3 == 2 && *v50 != 2))
                  {
                    *(unsigned char *)(v52 + 168 * v53 + 104) = 0;
                  }
                }
                v50 += 14;
                --v45;
              }
              while (v45);
            }
LABEL_81:
            int v61 = v33;
            operator delete(v33);
            goto LABEL_82;
          }
        }
        else
        {
          sub_1002E2934((uint64_t *)&v60);
          uint64_t v33 = v60;
          uint64_t v34 = v61;
          if (v61 != v60)
          {
            uint64_t v35 = 0;
            uint64_t v40 = 0;
            unint64_t v41 = (v61 - v60) / 112;
            if (v41 <= 1) {
              unint64_t v41 = 1;
            }
            unint64_t v42 = v60 + 44;
            do
            {
              if (*(void *)(v42 - 28) > v40 && *(_DWORD *)v42 == 1)
              {
                if (*(void *)(v42 + 4) < 2uLL && *(void *)(v42 + 12) > 1uLL) {
                  uint64_t v40 = *(void *)(v42 - 28);
                }
                v35 += (*(void *)(v42 + 4) < 2uLL) & (*(void *)(v42 + 12) > 1uLL);
              }
              v42 += 112;
              --v41;
            }
            while (v41);
            goto LABEL_59;
          }
        }
        void v5[8] = 0;
        uint64_t v33 = v34;
        if (v34) {
          goto LABEL_81;
        }
      }
LABEL_82:
      uint64_t v55 = (void *)v5[1];
      if (v55)
      {
        do
        {
          uint64_t v56 = v55;
          uint64_t v55 = (void *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          uint64_t v56 = (void *)v5[2];
          BOOL v39 = *v56 == (void)v5;
          unint64_t v5 = v56;
        }
        while (!v39);
      }
      unint64_t v5 = v56;
    }
    while (v56 != v58);
  }
}

void sub_1002D9F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D9F40(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (uint64_t *)(a2 + 8);
  uint64_t v4 = *(uint64_t **)a2;
  if (*(void *)a2 != a2 + 8)
  {
    do
    {
      uint64_t v6 = (uint64_t *)v4[5];
      if (v6 != v4 + 6)
      {
        do
        {
          char v10 = (uint64_t *)v6[1];
          uint64_t v11 = v10;
          unint64_t v12 = v6;
          if (v10)
          {
            do
            {
              uint64_t v13 = v11;
              uint64_t v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v13 = (uint64_t *)v12[2];
              BOOL v14 = *v13 == (void)v12;
              unint64_t v12 = v13;
            }
            while (!v14);
          }
          unint64_t v15 = *(void *)(a1 + 32) + v6[4];
          if (*(unsigned char *)(*(void *)(*(void *)(a1 + 8) + ((v15 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v15 & 0xF) + 32))
          {
            int v16 = v6;
            if (v10)
            {
              do
              {
                uint64_t v17 = v10;
                char v10 = (uint64_t *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                uint64_t v17 = (uint64_t *)v16[2];
                BOOL v14 = *v17 == (void)v16;
                int v16 = v17;
              }
              while (!v14);
            }
            if ((uint64_t *)v4[5] == v6) {
              v4[5] = (uint64_t)v17;
            }
            uint64_t v9 = (uint64_t *)v4[6];
            --v4[7];
            sub_1002845F8(v9, v6);
            operator delete(v6);
          }
          uint64_t v6 = v13;
        }
        while (v13 != v4 + 6);
      }
      unint64_t v7 = (uint64_t *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          unint64_t v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (uint64_t *)v4[2];
          BOOL v14 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v14);
      }
      uint64_t v4 = v8;
    }
    while (v8 != v5);
    uint64_t v4 = *(uint64_t **)a2;
  }
  if (v4 != v5)
  {
    do
    {
      uint64_t v19 = (uint64_t *)v4[1];
      unint64_t v20 = v19;
      uint64_t v21 = v4;
      if (v19)
      {
        do
        {
          BOOL v22 = v20;
          unint64_t v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          BOOL v22 = (uint64_t *)v21[2];
          BOOL v14 = *v22 == (void)v21;
          uint64_t v21 = v22;
        }
        while (!v14);
      }
      if (v4[7] == 1)
      {
        unint64_t v23 = *(void *)(a1 + 32) + *(void *)(v4[5] + 32);
        *(void *)(*(void *)(*(void *)(a1 + 8) + ((v23 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v23 & 0xF) + 24) = -1;
        uint64_t v24 = v4;
        if (v19)
        {
          do
          {
            uint64_t v25 = v19;
            uint64_t v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v25 = (uint64_t *)v24[2];
            BOOL v14 = *v25 == (void)v24;
            uint64_t v24 = v25;
          }
          while (!v14);
        }
        if (*(uint64_t **)a2 == v4) {
          *(void *)a2 = v25;
        }
        uint64_t v18 = *(uint64_t **)(a2 + 8);
        --*(void *)(a2 + 16);
        sub_1002845F8(v18, v4);
        sub_10006A9DC((uint64_t)(v4 + 5), (void *)v4[6]);
        operator delete(v4);
      }
      uint64_t v4 = v22;
    }
    while (v22 != v5);
  }
}

void *sub_1002DA1A4(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)*result;
  uint64_t v4 = result[1] - *result;
  if (v4)
  {
    unint64_t v5 = result;
    uint64_t v6 = v4 / 40;
    if (v4 <= 40) {
      uint64_t v7 = 1 % v6;
    }
    else {
      uint64_t v7 = 1;
    }
    unint64_t v8 = &v3[5 * v7];
    uint64_t v9 = ~v6;
    uint64_t v10 = v6 + 1;
    uint64_t v11 = (void *)*result;
    uint64_t v49 = a2;
    do
    {
      uint64_t v12 = *v11;
      if (a3 && v12 == *v8)
      {
        uint64_t v13 = v7 + 1;
        if (v7 <= -2)
        {
          uint64_t v45 = ((v10 + v7) & ~((v10 + v7) >> 63)) + v9 - v7;
          if (v45) {
            uint64_t v46 = 2;
          }
          else {
            uint64_t v46 = 1;
          }
          unint64_t v47 = v46 + (v45 - (unint64_t)(v45 != 0)) / v6;
          if (v47 < 2) {
            goto LABEL_67;
          }
          v13 += (v47 & 0xFFFFFFFFFFFFFFFELL) * v6;
          unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFFELL;
          do
            v48 -= 2;
          while (v48);
          if (v47 != (v47 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_67:
            do
              v13 += v6;
            while (v13 < 0);
          }
        }
        else if (v13 < v6)
        {
          v8 += 5;
          goto LABEL_14;
        }
        v13 %= v6;
        unint64_t v8 = &v3[5 * v13];
      }
      else
      {
        uint64_t v13 = v7;
      }
LABEL_14:
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = *(void *)(a2 + 8);
      uint64_t v16 = *(void *)(v15 + (((unint64_t)(v14 + v12) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((v14 + v12) & 0xF);
      uint64_t v17 = v16 + 40;
      uint64_t v18 = v11[1];
      uint64_t v19 = v16 + 40 + 168 * v18;
      uint64_t v20 = *(void *)(v16 + 24);
      uint64_t v21 = *v8;
      if (v20 >= 1 && v12 != v21)
      {
        while (1)
        {
          uint64_t v33 = *(void *)(v15 + (((unint64_t)(v21 + v14) >> 1) & 0x7FFFFFFFFFFFFFF8))
              + 376 * ((v21 + v14) & 0xF);
          if (v20 != *(void *)(v33 + 24)) {
            goto LABEL_19;
          }
          uint64_t v34 = v33 + 40;
          uint64_t v35 = v8[1];
          uint64_t result = *(void **)(v19 + 8);
          if (result != *(void **)(v34 + 168 * v35 + 8)) {
            goto LABEL_19;
          }
          uint64_t result = *(void **)(v34 + 168 * v35 + 32);
          if (*(void **)(v19 + 32) != result) {
            goto LABEL_19;
          }
          uint64_t result = *(void **)(v34 + 168 * v35 + 24);
          if (*(void **)(v19 + 24) != result) {
            goto LABEL_19;
          }
          uint64_t result = *(void **)(v34 + 168 * v35 + 40);
          if (*(void **)(v19 + 40) != result || *(void *)(v19 + 16) != *(void *)(v34 + 168 * v35 + 16)) {
            goto LABEL_19;
          }
          uint64_t v23 = v13 + 1;
          if (v13 <= -2) {
            break;
          }
          if (v23 >= v6)
          {
LABEL_27:
            v23 %= v6;
            unint64_t v8 = &v3[5 * v23];
            uint64_t v21 = *v8;
            uint64_t v13 = v23;
            if (v12 == *v8) {
              goto LABEL_20;
            }
          }
          else
          {
            uint64_t v36 = v8[5];
            v8 += 5;
            uint64_t v21 = v36;
            ++v13;
            if (v12 == v36) {
              goto LABEL_20;
            }
          }
        }
        uint64_t v37 = ((v10 + v13) & ~((v10 + v13) >> 63)) + v9 - v13;
        if (v37) {
          uint64_t v38 = 2;
        }
        else {
          uint64_t v38 = 1;
        }
        unint64_t v39 = v38 + (v37 - (unint64_t)(v37 != 0)) / v6;
        if (v39 < 2) {
          goto LABEL_68;
        }
        v23 += (v39 & 0xFFFFFFFFFFFFFFFELL) * v6;
        unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFFELL;
        do
          v40 -= 2;
        while (v40);
        if (v39 != (v39 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_68:
          do
            v23 += v6;
          while (v23 < 0);
        }
        goto LABEL_27;
      }
LABEL_19:
      uint64_t v23 = v13;
LABEL_20:
      uint64_t v24 = *(void *)(v15 + (((unint64_t)(v21 + v14) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((v21 + v14) & 0xF)
          + 168 * v8[1];
      uint64_t v25 = v17 + 168 * v18;
      *(void *)(v25 + 80) = *(void *)(v8[4] + 32);
      *(void *)(v25 + 88) = v21;
      if (*(void *)(v19 + 32) == *(void *)(v24 + 72))
      {
        uint64_t v26 = a3;
        uint64_t v50 = v18;
        unint64_t v27 = v5;
        unsigned int v28 = v3;
        uint64_t v29 = v11;
        uint64_t v30 = v17;
        uint64_t v31 = v9;
        uint64_t result = (void *)sub_1002CFCC4((double *)(v19 + 48), (double *)(v24 + 88));
        uint64_t v9 = v31;
        uint64_t v32 = v30;
        uint64_t v11 = v29;
        uint64_t v3 = v28;
        unint64_t v5 = v27;
        a2 = v49;
        a3 = v26;
        if (result) {
          *(void *)(v32 + 168 * v50 + 96) = *v8;
        }
      }
      if (a3)
      {
        uint64_t v7 = v23;
      }
      else
      {
        uint64_t v7 = v23 + 1;
        if (v23 <= -2)
        {
          uint64_t v41 = ((v10 + v23) & ~((v10 + v23) >> 63)) + v9 - v23;
          if (v41) {
            uint64_t v42 = 2;
          }
          else {
            uint64_t v42 = 1;
          }
          unint64_t v43 = v42 + (v41 - (unint64_t)(v41 != 0)) / v6;
          if (v43 < 2) {
            goto LABEL_69;
          }
          v7 += (v43 & 0xFFFFFFFFFFFFFFFELL) * v6;
          unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
          do
            v44 -= 2;
          while (v44);
          if (v43 != (v43 & 0xFFFFFFFFFFFFFFFELL))
          {
LABEL_69:
            do
              v7 += v6;
            while (v7 < 0);
          }
LABEL_55:
          v7 %= v6;
          unint64_t v8 = &v3[5 * v7];
          goto LABEL_7;
        }
        if (v7 >= v6) {
          goto LABEL_55;
        }
        v8 += 5;
      }
LABEL_7:
      v11 += 5;
    }
    while (v11 != (void *)v5[1]);
  }
  return result;
}

BOOL sub_1002DA590(void *a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  uint64_t v5 = a3[3];
  uint64_t v7 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v8 = *a4 + 48 * v7;
  uint64_t v9 = (void *)(v8 + 24);
  uint64_t v10 = (void *)(v5 + 24 * v6);
  if (v6 < 0) {
    uint64_t v10 = a3;
  }
  uint64_t v11 = a2[7];
  uint64_t v12 = a2[8];
  if (v6 != v12 || v7 != v11) {
    goto LABEL_28;
  }
  uint64_t v14 = a1[6];
  if (v14 != a2[6]) {
    goto LABEL_28;
  }
  uint64_t v15 = a2[9];
  uint64_t v16 = a1[9];
  BOOL v17 = __OFSUB__(v15, v16);
  uint64_t v18 = v15 - v16;
  if (v14)
  {
    if (v18 < 0 == v17) {
      goto LABEL_18;
    }
    uint64_t v19 = (void *)(*v9 + 24 * v6);
    if (v6 < 0) {
      uint64_t v19 = (void *)v8;
    }
  }
  else
  {
    uint64_t v19 = v10;
    if (v18 < 0 == v17) {
      goto LABEL_18;
    }
  }
  uint64_t v18 = v18 + ((uint64_t)(v19[1] - *v19) >> 4) - 1;
LABEL_18:
  if (v18 <= 1)
  {
    uint64_t v20 = a1[27];
    if (v20 == a2[27])
    {
      uint64_t v21 = a1[29];
      if (v21 == a2[29])
      {
        uint64_t v22 = a1[28];
        if (v22 == a2[28])
        {
          uint64_t v23 = a2[30];
          uint64_t v24 = a1[30];
          BOOL v25 = __OFSUB__(v23, v24);
          uint64_t v26 = v23 - v24;
          if (v20)
          {
            if (v26 < 0 == v25) {
              goto LABEL_123;
            }
            if (v21 >= 0) {
              unint64_t v27 = (void *)(*(void *)(v4 + 48 * v22 + 24) + 24 * v21);
            }
            else {
              unint64_t v27 = (void *)(v4 + 48 * v22);
            }
          }
          else
          {
            if (v26 < 0 == v25)
            {
LABEL_123:
              uint64_t v28 = v26 < 2;
              uint64_t v30 = a2[28];
              uint64_t v29 = a2[29];
              if (v6 != v29 || v7 != v30) {
                goto LABEL_60;
              }
              goto LABEL_33;
            }
            if (v21 >= 0) {
              unint64_t v27 = (void *)(v5 + 24 * v21);
            }
            else {
              unint64_t v27 = a3;
            }
          }
          uint64_t v26 = v26 + ((uint64_t)(v27[1] - *v27) >> 4) - 1;
          goto LABEL_123;
        }
      }
    }
  }
LABEL_28:
  uint64_t v28 = 0;
  uint64_t v30 = a2[28];
  uint64_t v29 = a2[29];
  if (v6 != v29 || v7 != v30) {
    goto LABEL_60;
  }
LABEL_33:
  uint64_t v32 = a1[6];
  if (v32 != a2[27]) {
    goto LABEL_60;
  }
  uint64_t v33 = a2[30];
  uint64_t v34 = a1[9];
  BOOL v35 = __OFSUB__(v33, v34);
  uint64_t v36 = v33 - v34;
  if (v32)
  {
    if (v36 < 0 == v35) {
      goto LABEL_43;
    }
    uint64_t v37 = (void *)(*v9 + 24 * v6);
    if (v6 < 0) {
      uint64_t v37 = (void *)v8;
    }
  }
  else
  {
    uint64_t v37 = v10;
    if (v36 < 0 == v35) {
      goto LABEL_43;
    }
  }
  uint64_t v36 = v36 + ((uint64_t)(v37[1] - *v37) >> 4) - 1;
LABEL_43:
  if (v36 > 1) {
    goto LABEL_60;
  }
  uint64_t v38 = a1[27];
  if (v38 != a2[6] || a1[29] != v12 || a1[28] != v11) {
    goto LABEL_60;
  }
  uint64_t v39 = a2[9];
  uint64_t v40 = a1[30];
  BOOL v41 = __OFSUB__(v39, v40);
  uint64_t v42 = v39 - v40;
  if (v38)
  {
    if (v42 < 0 == v41) {
      goto LABEL_58;
    }
    unint64_t v43 = (void *)(v4 + 48 * v11);
    if (v12 >= 0) {
      unint64_t v43 = (void *)(v43[3] + 24 * v12);
    }
LABEL_57:
    uint64_t v42 = v42 + ((uint64_t)(v43[1] - *v43) >> 4) - 1;
    goto LABEL_58;
  }
  if (v42 < 0 != v41)
  {
    unint64_t v43 = (void *)(v5 + 24 * v12);
    if (v12 < 0) {
      unint64_t v43 = a3;
    }
    goto LABEL_57;
  }
LABEL_58:
  if (v42 < 2) {
    ++v28;
  }
LABEL_60:
  uint64_t v45 = a1[28];
  uint64_t v44 = a1[29];
  uint64_t v46 = (void *)(v4 + 48 * v45);
  unint64_t v47 = v46 + 3;
  unint64_t v48 = (void *)(v5 + 24 * v44);
  if (v44 < 0) {
    unint64_t v48 = a3;
  }
  if (v44 == v12 && v45 == v11)
  {
    uint64_t v49 = a1[27];
    if (v49 == a2[6])
    {
      uint64_t v50 = a2[9];
      uint64_t v51 = a1[30];
      BOOL v52 = __OFSUB__(v50, v51);
      uint64_t v53 = v50 - v51;
      if (v49)
      {
        if (v53 < 0 == v52) {
          goto LABEL_74;
        }
        uint64_t v54 = (void *)(*v47 + 24 * v12);
        if (v44 < 0) {
          uint64_t v54 = v46;
        }
      }
      else
      {
        uint64_t v54 = v48;
        if (v53 < 0 == v52) {
          goto LABEL_74;
        }
      }
      uint64_t v53 = v53 + ((uint64_t)(v54[1] - *v54) >> 4) - 1;
LABEL_74:
      if (v53 > 1) {
        goto LABEL_89;
      }
      uint64_t v55 = a1[6];
      if (v55 != a2[27] || v6 != v29 || v7 != v30) {
        goto LABEL_89;
      }
      uint64_t v56 = a2[30];
      uint64_t v57 = a1[9];
      BOOL v58 = __OFSUB__(v56, v57);
      uint64_t v59 = v56 - v57;
      if (v55)
      {
        if (v59 < 0 == v58) {
          goto LABEL_87;
        }
        uint64_t v60 = (void *)(*v9 + 24 * v6);
        if (v6 < 0) {
          uint64_t v60 = (void *)v8;
        }
      }
      else
      {
        uint64_t v60 = v10;
        if (v59 < 0 == v58)
        {
LABEL_87:
          if (v59 < 2) {
            ++v28;
          }
          goto LABEL_89;
        }
      }
      uint64_t v59 = v59 + ((uint64_t)(v60[1] - *v60) >> 4) - 1;
      goto LABEL_87;
    }
  }
LABEL_89:
  if (v44 != v29) {
    return v28 == 2;
  }
  if (v45 != v30) {
    return v28 == 2;
  }
  uint64_t v61 = a1[27];
  if (v61 != a2[27]) {
    return v28 == 2;
  }
  uint64_t v62 = a2[30];
  uint64_t v63 = a1[30];
  BOOL v64 = __OFSUB__(v62, v63);
  uint64_t v65 = v62 - v63;
  if (v61)
  {
    if (v65 < 0 == v64) {
      goto LABEL_101;
    }
    unint64_t v48 = (void *)(*v47 + 24 * v29);
    if (v44 < 0) {
      unint64_t v48 = v46;
    }
  }
  else if (v65 < 0 == v64)
  {
    goto LABEL_101;
  }
  uint64_t v65 = v65 + ((uint64_t)(v48[1] - *v48) >> 4) - 1;
LABEL_101:
  if (v65 > 1) {
    return v28 == 2;
  }
  uint64_t v66 = a1[6];
  if (v66 != a2[6] || v6 != v12 || v7 != v11) {
    return v28 == 2;
  }
  uint64_t v67 = a2[9];
  uint64_t v68 = a1[9];
  BOOL v69 = __OFSUB__(v67, v68);
  uint64_t v70 = v67 - v68;
  if (v66)
  {
    if (v70 < 0 == v69) {
      goto LABEL_114;
    }
    uint64_t v10 = (void *)(*v9 + 24 * v6);
    if (v6 < 0) {
      uint64_t v10 = (void *)v8;
    }
LABEL_113:
    uint64_t v70 = v70 + ((uint64_t)(v10[1] - *v10) >> 4) - 1;
    goto LABEL_114;
  }
  if (v70 < 0 != v69) {
    goto LABEL_113;
  }
LABEL_114:
  if (v70 < 2) {
    ++v28;
  }
  return v28 == 2;
}

void sub_1002DA99C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002DA99C(a1, *a2);
    sub_1002DA99C(a1, a2[1]);
    uint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void sub_1002DAA00(void *a1, uint64_t **a2, uint64_t a3, __n128 a4)
{
  int64x2_t v124 = 0;
  int64x2_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v4 = a1[1];
  if (a1[2] != v4)
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = (void *)(v4 + 8 * (v5 >> 4));
    uint64_t v7 = *v6 + 376 * (v5 & 0xF);
    uint64_t v8 = *(void *)(v4 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 376 * ((*((_DWORD *)a1 + 10) + v5) & 0xF);
    if (v7 != v8)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v113 = *(void *)(v4 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
           + 376 * ((*((_DWORD *)a1 + 10) + v5) & 0xF);
      while (1)
      {
        if (*(unsigned char *)(v7 + 32))
        {
          v7 += 376;
          if (v7 - *v6 == 6016) {
            goto LABEL_36;
          }
          goto LABEL_4;
        }
        double v13 = (double)*(uint64_t *)(a3 + 24) + (*(double *)(v7 + 8) - *(double *)(a3 + 8)) * *(double *)(a3 + 32);
        if (v13 >= 0.0) {
          double v14 = 0.5;
        }
        else {
          double v14 = -0.5;
        }
        double v15 = v13 + v14;
        sub_1002C5028(v13 + v14);
        double v16 = ceil(v15);
        double v17 = floor(v15);
        if (v15 >= 0.0) {
          double v18 = v17;
        }
        else {
          double v18 = v16;
        }
        double v19 = (double)*(uint64_t *)(a3 + 16) + (*(double *)v7 - *(double *)a3) * *(double *)(a3 + 32);
        if (v19 >= 0.0) {
          double v20 = 0.5;
        }
        else {
          double v20 = -0.5;
        }
        double v21 = v19 + v20;
        sub_1002C5028(v19 + v20);
        uint64_t v22 = (uint64_t)v18;
        a4.n128_f64[0] = ceil(v21);
        double v23 = floor(v21);
        if (v21 >= 0.0) {
          a4.n128_f64[0] = v23;
        }
        uint64_t v24 = (uint64_t)a4.n128_f64[0];
        if (v11 < v126)
        {
          *(void *)uint64_t v11 = v12;
          *((void *)v11 + 1) = v24;
          *((void *)v11 + 2) = v22;
          v11 += 24;
          goto LABEL_35;
        }
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 3) + 1;
        if (v25 > 0xAAAAAAAAAAAAAAALL) {
          sub_1000A9108();
        }
        if (0x5555555555555556 * ((v126 - v10) >> 3) > v25) {
          unint64_t v25 = 0x5555555555555556 * ((v126 - v10) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v126 - v10) >> 3) >= 0x555555555555555) {
          unint64_t v26 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26)
        {
          if (v26 > 0xAAAAAAAAAAAAAAALL) {
            sub_1000A6A10();
          }
          unint64_t v27 = (char *)operator new(24 * v26);
          uint64_t v28 = &v27[8 * ((v11 - v10) >> 3)];
          *(void *)uint64_t v28 = v12;
          *((void *)v28 + 1) = v24;
          *((void *)v28 + 2) = v22;
          if (v11 == v10)
          {
LABEL_38:
            uint64_t v30 = v28;
            uint64_t v11 = v28 + 24;
            int64x2_t v124 = v28;
            uint64_t v126 = &v27[24 * v26];
            if (!v10) {
              goto LABEL_34;
            }
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v27 = 0;
          uint64_t v28 = (char *)(8 * ((v11 - v10) >> 3));
          *(void *)uint64_t v28 = v12;
          *((void *)v28 + 1) = v24;
          *((void *)v28 + 2) = v22;
          if (v11 == v10) {
            goto LABEL_38;
          }
        }
        uint64_t v29 = v28;
        do
        {
          a4 = *(__n128 *)(v11 - 24);
          uint64_t v30 = v29 - 24;
          *((void *)v29 - 1) = *((void *)v11 - 1);
          *(__n128 *)(v29 - 24) = a4;
          v11 -= 24;
          v29 -= 24;
        }
        while (v11 != v10);
        uint64_t v11 = v28 + 24;
        int64x2_t v124 = v30;
        uint64_t v126 = &v27[24 * v26];
        if (!v10) {
          goto LABEL_34;
        }
LABEL_33:
        operator delete(v10);
LABEL_34:
        uint64_t v10 = v30;
        uint64_t v8 = v113;
LABEL_35:
        int64x2_t v125 = v11;
        v7 += 376;
        if (v7 - *v6 == 6016)
        {
LABEL_36:
          uint64_t v31 = v6[1];
          ++v6;
          uint64_t v7 = v31;
        }
LABEL_4:
        ++v12;
        if (v7 == v8) {
          goto LABEL_41;
        }
      }
    }
  }
  uint64_t v11 = 0;
  uint64_t v10 = 0;
LABEL_41:
  unint64_t v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 3));
  if (v11 == v10) {
    uint64_t v33 = 0;
  }
  else {
    uint64_t v33 = v32;
  }
  sub_1002DB5D8((unint64_t)v10, (long long *)v11, (uint64_t)&v114, v33, 1, a4);
  long long __p = 0;
  char v122 = 0;
  unint64_t v123 = 0;
  BOOL v35 = v124;
  uint64_t v34 = v125;
  if (v124 == v125) {
    goto LABEL_181;
  }
  do
  {
    uint64_t v36 = (uint64_t *)v35;
    v35 += 24;
    if (v35 != v34)
    {
      uint64_t v37 = v36[2];
      uint64_t v38 = v37 - v36[5];
      if (v38 <= 1)
      {
        uint64_t v39 = v36 + 1;
        BOOL v112 = v35;
        while (1)
        {
          uint64_t v40 = *v39 - *((void *)v35 + 1);
          if (v40 < 0) {
            uint64_t v40 = *((void *)v35 + 1) - *v39;
          }
          if (v38 < 0) {
            uint64_t v38 = -v38;
          }
          if ((unint64_t)v40 <= 1 && (unint64_t)v38 <= 1)
          {
            unint64_t v43 = (char *)__p;
            uint64_t v42 = v122;
            if (__p == v122)
            {
LABEL_69:
              memset(v120, 0, sizeof(v120));
              int v119 = v120;
              uint64_t v115 = 0;
              uint64_t v116 = 0;
              uint64_t v114 = &v115;
              uint64_t v117 = 0;
              long long v118 = *(_OWORD *)v39;
              if ((unint64_t)v122 >= v123)
              {
                uint64_t v51 = sub_1002DD030((char **)&__p, (uint64_t)&v114);
              }
              else
              {
                *(void *)char v122 = &v115;
                unint64_t v48 = v115;
                *((void *)v42 + 1) = v115;
                uint64_t v49 = v42 + 8;
                uint64_t v50 = v116;
                *((void *)v42 + 2) = v116;
                if (v50)
                {
                  v48[2] = v49;
                  uint64_t v114 = &v115;
                  uint64_t v115 = 0;
                  uint64_t v116 = 0;
                }
                else
                {
                  *(void *)uint64_t v42 = v49;
                }
                *((void *)v42 + 3) = v117;
                *((_OWORD *)v42 + 2) = v118;
                uint64_t v51 = v42 + 48;
              }
              unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((v42 - v43) >> 4);
              char v122 = v51;
              sub_10006A9DC((uint64_t)&v114, v115);
              sub_10006A9DC((uint64_t)&v119, v120[0]);
              unint64_t v43 = (char *)__p;
            }
            else
            {
              unint64_t v44 = 0;
              uint64_t v45 = (char *)__p;
              while (1)
              {
                uint64_t v46 = *((void *)v45 + 4) - *v39;
                if (v46 < 0) {
                  uint64_t v46 = *v39 - *((void *)v45 + 4);
                }
                if ((unint64_t)v46 <= 1)
                {
                  uint64_t v47 = *((void *)v45 + 5) - v37;
                  if (v47 < 0) {
                    uint64_t v47 = v37 - *((void *)v45 + 5);
                  }
                  if ((unint64_t)v47 < 2) {
                    break;
                  }
                }
                ++v44;
                v45 += 48;
                if (v45 == v122) {
                  goto LABEL_69;
                }
              }
            }
            BOOL v52 = &v43[48 * v44];
            uint64_t v53 = *v36;
            uint64_t v55 = (void **)(v52 + 8);
            uint64_t v54 = (void *)*((void *)v52 + 1);
            uint64_t v56 = v52 + 8;
            uint64_t v57 = v52 + 8;
            if (v54)
            {
              BOOL v58 = (void *)*((void *)v52 + 1);
              while (1)
              {
                while (1)
                {
                  uint64_t v57 = v58;
                  uint64_t v59 = v58[4];
                  if (v53 >= v59) {
                    break;
                  }
                  BOOL v58 = (void *)*v57;
                  uint64_t v56 = v57;
                  if (!*v57) {
                    goto LABEL_83;
                  }
                }
                if (v59 >= v53) {
                  break;
                }
                BOOL v58 = (void *)v57[1];
                if (!v58)
                {
                  uint64_t v56 = v57 + 1;
                  goto LABEL_83;
                }
              }
            }
            else
            {
LABEL_83:
              uint64_t v60 = operator new(0x28uLL);
              v60[4] = v53;
              void *v60 = 0;
              v60[1] = 0;
              v60[2] = v57;
              *uint64_t v56 = v60;
              uint64_t v61 = **(void **)v52;
              if (v61)
              {
                *(void *)BOOL v52 = v61;
                uint64_t v60 = (void *)*v56;
              }
              uint64_t v62 = *v55;
              BOOL v63 = v60 == *v55;
              *((unsigned char *)v60 + 24) = v63;
              if (!v63)
              {
                do
                {
                  uint64_t v64 = v60[2];
                  if (*(unsigned char *)(v64 + 24)) {
                    break;
                  }
                  uint64_t v65 = *(unsigned char **)(v64 + 16);
                  uint64_t v66 = *(void *)v65;
                  if (*(void *)v65 == v64)
                  {
                    uint64_t v69 = *((void *)v65 + 1);
                    if (!v69 || (v70 = *(unsigned __int8 *)(v69 + 24), uint64_t v67 = (unsigned char *)(v69 + 24), v70))
                    {
                      if (*(void **)v64 == v60)
                      {
                        *(unsigned char *)(v64 + 24) = 1;
                        v65[24] = 0;
                        uint64_t v73 = *(void *)(v64 + 8);
                        *(void *)uint64_t v65 = v73;
                        if (v73) {
                          goto LABEL_100;
                        }
                      }
                      else
                      {
                        uint64_t v71 = *(uint64_t **)(v64 + 8);
                        uint64_t v72 = *v71;
                        *(void *)(v64 + 8) = *v71;
                        if (v72)
                        {
                          *(void *)(v72 + 16) = v64;
                          uint64_t v65 = *(unsigned char **)(v64 + 16);
                        }
                        void v71[2] = (uint64_t)v65;
                        *(void *)(*(void *)(v64 + 16) + 8 * (**(void **)(v64 + 16) != v64)) = v71;
                        uint64_t *v71 = v64;
                        *(void *)(v64 + 16) = v71;
                        uint64_t v65 = (unsigned char *)v71[2];
                        uint64_t v64 = *(void *)v65;
                        *((unsigned char *)v71 + 24) = 1;
                        v65[24] = 0;
                        uint64_t v73 = *(void *)(v64 + 8);
                        *(void *)uint64_t v65 = v73;
                        if (v73) {
LABEL_100:
                        }
                          *(void *)(v73 + 16) = v65;
                      }
                      *(void *)(v64 + 16) = *((void *)v65 + 2);
                      *(void *)(*((void *)v65 + 2) + 8 * (**((void **)v65 + 2) != (void)v65)) = v64;
                      *(void *)(v64 + 8) = v65;
LABEL_107:
                      *((void *)v65 + 2) = v64;
                      break;
                    }
                  }
                  else if (!v66 || (v68 = *(unsigned __int8 *)(v66 + 24), uint64_t v67 = (unsigned char *)(v66 + 24), v68))
                  {
                    if (*(void **)v64 == v60)
                    {
                      uint64_t v95 = v60[1];
                      *(void *)uint64_t v64 = v95;
                      if (v95)
                      {
                        *(void *)(v95 + 16) = v64;
                        uint64_t v65 = *(unsigned char **)(v64 + 16);
                      }
                      v60[2] = v65;
                      *(void *)(*(void *)(v64 + 16) + 8 * (**(void **)(v64 + 16) != v64)) = v60;
                      v60[1] = v64;
                      *(void *)(v64 + 16) = v60;
                      uint64_t v65 = (unsigned char *)v60[2];
                      *((unsigned char *)v60 + 24) = 1;
                      v65[24] = 0;
                      uint64_t v64 = *((void *)v65 + 1);
                      uint64_t v74 = *(void **)v64;
                      *((void *)v65 + 1) = *(void *)v64;
                      if (v74) {
LABEL_105:
                      }
                        v74[2] = v65;
                    }
                    else
                    {
                      *(unsigned char *)(v64 + 24) = 1;
                      v65[24] = 0;
                      uint64_t v64 = *((void *)v65 + 1);
                      uint64_t v74 = *(void **)v64;
                      *((void *)v65 + 1) = *(void *)v64;
                      if (v74) {
                        goto LABEL_105;
                      }
                    }
                    *(void *)(v64 + 16) = *((void *)v65 + 2);
                    *(void *)(*((void *)v65 + 2) + 8 * (**((void **)v65 + 2) != (void)v65)) = v64;
                    *(void *)uint64_t v64 = v65;
                    goto LABEL_107;
                  }
                  *(unsigned char *)(v64 + 24) = 1;
                  uint64_t v60 = v65;
                  v65[24] = v65 == (unsigned char *)v62;
                  *uint64_t v67 = 1;
                }
                while (v65 != (unsigned char *)v62);
              }
              ++*((void *)v52 + 2);
              unint64_t v43 = (char *)__p;
              uint64_t v54 = (void *)*((void *)__p + 6 * v44 + 1);
            }
            uint64_t v75 = &v43[48 * v44];
            uint64_t v76 = *(void *)v35;
            double v77 = (void **)(v75 + 8);
            double v78 = v75 + 8;
            uint64_t v79 = v75 + 8;
            uint64_t v39 = v36 + 1;
            if (v54)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v79 = v54;
                  uint64_t v80 = v54[4];
                  if (v76 >= v80) {
                    break;
                  }
                  uint64_t v54 = (void *)*v79;
                  double v78 = v79;
                  if (!*v79) {
                    goto LABEL_116;
                  }
                }
                if (v80 >= v76) {
                  break;
                }
                uint64_t v54 = (void *)v79[1];
                if (!v54)
                {
                  double v78 = v79 + 1;
                  goto LABEL_116;
                }
              }
            }
            else
            {
LABEL_116:
              double v81 = operator new(0x28uLL);
              v81[4] = v76;
              *double v81 = 0;
              v81[1] = 0;
              v81[2] = v79;
              *double v78 = v81;
              uint64_t v82 = **(void **)v75;
              if (v82)
              {
                *(void *)uint64_t v75 = v82;
                double v81 = (void *)*v78;
              }
              uint64_t v83 = *v77;
              BOOL v63 = v81 == *v77;
              *((unsigned char *)v81 + 24) = v63;
              if (!v63)
              {
                do
                {
                  uint64_t v84 = v81[2];
                  if (*(unsigned char *)(v84 + 24)) {
                    break;
                  }
                  double v85 = *(unsigned char **)(v84 + 16);
                  uint64_t v86 = *(void *)v85;
                  if (*(void *)v85 == v84)
                  {
                    uint64_t v89 = *((void *)v85 + 1);
                    if (!v89 || (v90 = *(unsigned __int8 *)(v89 + 24), uint64_t v87 = (unsigned char *)(v89 + 24), v90))
                    {
                      if (*(void **)v84 == v81)
                      {
                        *(unsigned char *)(v84 + 24) = 1;
                        v85[24] = 0;
                        uint64_t v93 = *(void *)(v84 + 8);
                        *(void *)double v85 = v93;
                        if (v93) {
                          goto LABEL_133;
                        }
                      }
                      else
                      {
                        uint64_t v91 = *(uint64_t **)(v84 + 8);
                        uint64_t v92 = *v91;
                        *(void *)(v84 + 8) = *v91;
                        if (v92)
                        {
                          *(void *)(v92 + 16) = v84;
                          double v85 = *(unsigned char **)(v84 + 16);
                        }
                        v91[2] = (uint64_t)v85;
                        *(void *)(*(void *)(v84 + 16) + 8 * (**(void **)(v84 + 16) != v84)) = v91;
                        *uint64_t v91 = v84;
                        *(void *)(v84 + 16) = v91;
                        double v85 = (unsigned char *)v91[2];
                        uint64_t v84 = *(void *)v85;
                        *((unsigned char *)v91 + 24) = 1;
                        v85[24] = 0;
                        uint64_t v93 = *(void *)(v84 + 8);
                        *(void *)double v85 = v93;
                        if (v93) {
LABEL_133:
                        }
                          *(void *)(v93 + 16) = v85;
                      }
                      *(void *)(v84 + 16) = *((void *)v85 + 2);
                      *(void *)(*((void *)v85 + 2) + 8 * (**((void **)v85 + 2) != (void)v85)) = v84;
                      *(void *)(v84 + 8) = v85;
LABEL_139:
                      *((void *)v85 + 2) = v84;
                      break;
                    }
                  }
                  else if (!v86 || (v88 = *(unsigned __int8 *)(v86 + 24), uint64_t v87 = (unsigned char *)(v86 + 24), v88))
                  {
                    if (*(void **)v84 == v81)
                    {
                      uint64_t v96 = v81[1];
                      *(void *)uint64_t v84 = v96;
                      if (v96)
                      {
                        *(void *)(v96 + 16) = v84;
                        double v85 = *(unsigned char **)(v84 + 16);
                      }
                      v81[2] = v85;
                      *(void *)(*(void *)(v84 + 16) + 8 * (**(void **)(v84 + 16) != v84)) = v81;
                      v81[1] = v84;
                      *(void *)(v84 + 16) = v81;
                      double v85 = (unsigned char *)v81[2];
                      *((unsigned char *)v81 + 24) = 1;
                      v85[24] = 0;
                      uint64_t v84 = *((void *)v85 + 1);
                      double v94 = *(void **)v84;
                      *((void *)v85 + 1) = *(void *)v84;
                      if (v94) {
LABEL_137:
                      }
                        v94[2] = v85;
                    }
                    else
                    {
                      *(unsigned char *)(v84 + 24) = 1;
                      v85[24] = 0;
                      uint64_t v84 = *((void *)v85 + 1);
                      double v94 = *(void **)v84;
                      *((void *)v85 + 1) = *(void *)v84;
                      if (v94) {
                        goto LABEL_137;
                      }
                    }
                    *(void *)(v84 + 16) = *((void *)v85 + 2);
                    *(void *)(*((void *)v85 + 2) + 8 * (**((void **)v85 + 2) != (void)v85)) = v84;
                    *(void *)uint64_t v84 = v85;
                    goto LABEL_139;
                  }
                  *(unsigned char *)(v84 + 24) = 1;
                  double v81 = v85;
                  v85[24] = v85 == (unsigned char *)v83;
                  *uint64_t v87 = 1;
                }
                while (v85 != (unsigned char *)v83);
              }
              ++*((void *)v75 + 2);
            }
          }
          uint64_t v34 = v35 + 24;
          if (v35 + 24 == v125) {
            break;
          }
          uint64_t v37 = v36[2];
          uint64_t v38 = v37 - *((void *)v35 + 5);
          v35 += 24;
          if (v38 > 1)
          {
            uint64_t v34 = v125;
            break;
          }
        }
        BOOL v35 = v112;
      }
    }
  }
  while (v35 != v34);
  double v97 = (uint64_t **)__p;
  double v98 = v122;
  if (__p == v122) {
    goto LABEL_173;
  }
  double v99 = a2 + 1;
  uint64_t v100 = 1;
  do
  {
    BOOL v103 = *v99;
    uint64_t v104 = a2 + 1;
    uint64_t v105 = a2 + 1;
    if (*v99)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v105 = (uint64_t **)v103;
          uint64_t v106 = v103[4];
          if (v100 >= v106) {
            break;
          }
          BOOL v103 = *v105;
          uint64_t v104 = v105;
          if (!*v105) {
            goto LABEL_168;
          }
        }
        if (v106 >= v100) {
          break;
        }
        BOOL v103 = v105[1];
        if (!v103)
        {
          uint64_t v104 = v105 + 1;
          goto LABEL_168;
        }
      }
      double v101 = v105;
      uint64_t v102 = v105 + 5;
      if (v105 + 5 == v97) {
        goto LABEL_160;
      }
LABEL_159:
      sub_1002DD4E8(v102, *v97, v97 + 1);
      goto LABEL_160;
    }
LABEL_168:
    double v101 = operator new(0x48uLL);
    v101[7] = 0;
    v101[8] = 0;
    v101[6] = 0;
    v101[4] = v100;
    v101[5] = v101 + 6;
    *double v101 = 0;
    v101[1] = 0;
    v101[2] = v105;
    *uint64_t v104 = v101;
    uint64_t v107 = (uint64_t *)**a2;
    __int16 v108 = v101;
    if (v107)
    {
      *a2 = v107;
      __int16 v108 = *v104;
    }
    sub_1000619B8(a2[1], v108);
    a2[2] = (uint64_t *)((char *)a2[2] + 1);
    uint64_t v102 = (uint64_t **)(v101 + 5);
    if (v101 + 5 != v97) {
      goto LABEL_159;
    }
LABEL_160:
    ++v100;
    v101[8] = v97[3];
    v97 += 6;
  }
  while (v97 != v98);
  double v98 = __p;
LABEL_173:
  if (v98)
  {
    int v109 = v98;
    if (v122 != (char *)v98)
    {
      uint64_t v110 = (uint64_t)(v122 - 48);
      do
      {
        sub_10006A9DC(v110, *(void **)(v110 + 8));
        BOOL v63 = v110 == (void)v98;
        v110 -= 48;
      }
      while (!v63);
      int v109 = __p;
    }
    char v122 = (char *)v98;
    operator delete(v109);
  }
  BOOL v35 = v124;
LABEL_181:
  if (v35) {
    operator delete(v35);
  }
}

void sub_1002DB4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v28 = *(void **)(v26 - 144);
  if (v28)
  {
    *(void *)(v26 - 136) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1002DB568(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (uint64_t)v3 - 48;
      do
      {
        sub_10006A9DC(v5, *(void **)(v5 + 8));
        BOOL v6 = v5 == (void)v2;
        v5 -= 48;
      }
      while (!v6);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 sub_1002DB5D8(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5, __n128 result)
{
  while (2)
  {
    double v13 = (__n128 *)((char *)a2 - 24);
    uint64_t v135 = (__n128 *)((char *)a2 - 72);
    uint64_t v136 = a2 - 3;
    unint64_t v14 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v14;
          uint64_t v15 = (uint64_t)a2 - v14;
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v14) >> 3);
          if (v7 || !v6)
          {
            switch(v16)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*((void *)a2 - 1) > *(void *)(v14 + 16))
                {
                  uint64_t v186 = *(void *)(v14 + 16);
                  __n128 v158 = *(__n128 *)v14;
                  long long v104 = *(long long *)((char *)a2 - 24);
                  *(void *)(v14 + 16) = *((void *)a2 - 1);
                  *(_OWORD *)unint64_t v14 = v104;
                  uint64_t result = v158;
                  *((void *)a2 - 1) = v186;
                  *(long long *)((char *)a2 - 24) = (__int128)v158;
                }
                return result;
              case 3uLL:
                unint64_t v105 = v14 + 24;
                uint64_t v106 = *(void *)(v14 + 40);
                uint64_t v107 = *((void *)a2 - 1);
                if (v106 > *(void *)(v14 + 16))
                {
                  if (v107 <= v106)
                  {
                    uint64_t v190 = *(void *)(v14 + 16);
                    __n128 v164 = *(__n128 *)v14;
                    *(_OWORD *)unint64_t v14 = *(_OWORD *)v105;
                    *(void *)(v14 + 16) = *(void *)(v14 + 40);
                    uint64_t result = v164;
                    *(__n128 *)unint64_t v105 = v164;
                    *(void *)(v14 + 40) = v190;
                    if (*((void *)a2 - 1) > *(void *)(v14 + 40))
                    {
                      uint64_t result = *(__n128 *)v105;
                      uint64_t v130 = *(void *)(v14 + 40);
                      uint64_t v131 = *((void *)a2 - 1);
                      *(__n128 *)unint64_t v105 = *v13;
                      *(void *)(v14 + 40) = v131;
                      *((void *)a2 - 1) = v130;
                      *double v13 = result;
                    }
                  }
                  else
                  {
                    uint64_t v187 = *(void *)(v14 + 16);
                    __n128 v159 = *(__n128 *)v14;
                    __n128 v108 = *v13;
                    *(void *)(v14 + 16) = *((void *)a2 - 1);
                    *(__n128 *)unint64_t v14 = v108;
                    uint64_t result = v159;
                    *((void *)a2 - 1) = v187;
                    *double v13 = v159;
                  }
                  return result;
                }
                if (v107 <= v106) {
                  return result;
                }
                uint64_t result = *(__n128 *)v105;
                uint64_t v123 = *(void *)(v14 + 40);
                uint64_t v124 = *((void *)a2 - 1);
                *(__n128 *)unint64_t v105 = *v13;
                *(void *)(v14 + 40) = v124;
                *((void *)a2 - 1) = v123;
                *double v13 = result;
                goto LABEL_149;
              case 4uLL:
                unint64_t v105 = v14 + 24;
                int v109 = (__n128 *)(v14 + 48);
                uint64_t v110 = *(void *)(v14 + 40);
                uint64_t v111 = *(void *)(v14 + 64);
                if (v110 <= *(void *)(v14 + 16))
                {
                  if (v111 > v110)
                  {
                    uint64_t v125 = *(void *)(v14 + 40);
                    uint64_t result = *(__n128 *)v105;
                    *(__n128 *)unint64_t v105 = *v109;
                    *(void *)(v14 + 40) = *(void *)(v14 + 64);
                    *int v109 = result;
                    *(void *)(v14 + 64) = v125;
                    if (*(void *)(v14 + 40) > *(void *)(v14 + 16))
                    {
                      uint64_t v189 = *(void *)(v14 + 16);
                      __n128 v162 = *(__n128 *)v14;
                      *(_OWORD *)unint64_t v14 = *(_OWORD *)v105;
                      *(void *)(v14 + 16) = *(void *)(v14 + 40);
                      uint64_t result = v162;
                      *(__n128 *)unint64_t v105 = v162;
                      *(void *)(v14 + 40) = v189;
                    }
                  }
                }
                else
                {
                  if (v111 <= v110)
                  {
                    uint64_t v191 = *(void *)(v14 + 16);
                    __n128 v165 = *(__n128 *)v14;
                    *(_OWORD *)unint64_t v14 = *(_OWORD *)v105;
                    *(void *)(v14 + 16) = *(void *)(v14 + 40);
                    uint64_t result = v165;
                    *(__n128 *)unint64_t v105 = v165;
                    *(void *)(v14 + 40) = v191;
                    if (v111 <= *(void *)(v14 + 40)) {
                      goto LABEL_146;
                    }
                    uint64_t v112 = *(void *)(v14 + 40);
                    uint64_t result = *(__n128 *)v105;
                    *(__n128 *)unint64_t v105 = *v109;
                    *(void *)(v14 + 40) = *(void *)(v14 + 64);
                    *int v109 = result;
                  }
                  else
                  {
                    uint64_t v188 = *(void *)(v14 + 16);
                    __n128 v160 = *(__n128 *)v14;
                    *(__n128 *)unint64_t v14 = *v109;
                    *(void *)(v14 + 16) = *(void *)(v14 + 64);
                    uint64_t result = v160;
                    *int v109 = v160;
                    uint64_t v112 = v188;
                  }
                  *(void *)(v14 + 64) = v112;
                }
LABEL_146:
                if (*((void *)a2 - 1) > *(void *)(v14 + 64))
                {
                  uint64_t result = *v109;
                  uint64_t v132 = *(void *)(v14 + 64);
                  uint64_t v133 = *((void *)a2 - 1);
                  *int v109 = *v13;
                  *(void *)(v14 + 64) = v133;
                  *((void *)a2 - 1) = v132;
                  *double v13 = result;
                  if (*(void *)(v14 + 64) > *(void *)(v14 + 40))
                  {
                    uint64_t v134 = *(void *)(v14 + 40);
                    uint64_t result = *(__n128 *)v105;
                    *(__n128 *)unint64_t v105 = *v109;
                    *(void *)(v14 + 40) = *(void *)(v14 + 64);
                    *int v109 = result;
                    *(void *)(v14 + 64) = v134;
LABEL_149:
                    if (*(void *)(v14 + 40) > *(void *)(v14 + 16))
                    {
                      uint64_t v192 = *(void *)(v14 + 16);
                      __n128 v166 = *(__n128 *)v14;
                      *(_OWORD *)unint64_t v14 = *(_OWORD *)v105;
                      *(void *)(v14 + 16) = *(void *)(v105 + 16);
                      uint64_t result = v166;
                      *(__n128 *)unint64_t v105 = v166;
                      *(void *)(v105 + 16) = v192;
                    }
                  }
                }
                break;
              case 5uLL:
                result.n128_u64[0] = sub_1002DC970((__n128 *)v14, (__n128 *)(v14 + 24), (__n128 *)(v14 + 48), (__n128 *)(v14 + 72), (__n128 *)((char *)a2 - 24), result).n128_u64[0];
                return result;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v15 <= 575)
          {
            uint64_t v113 = (long long *)(v14 + 24);
            BOOL v115 = (long long *)v14 == a2 || v113 == a2;
            if (a5)
            {
              if (!v115)
              {
                uint64_t v116 = 0;
                uint64_t v117 = (long long *)v14;
                do
                {
                  uint64_t v119 = *((void *)v117 + 5);
                  uint64_t v120 = *((void *)v117 + 2);
                  uint64_t v117 = v113;
                  if (v119 > v120)
                  {
                    __n128 v161 = (__n128)*v113;
                    uint64_t v121 = v116;
                    do
                    {
                      uint64_t v122 = v14 + v121;
                      *(_OWORD *)(v122 + 24) = *(_OWORD *)(v14 + v121);
                      *(void *)(v122 + 40) = *(void *)(v14 + v121 + 16);
                      if (!v121)
                      {
                        uint64_t v118 = v14;
                        goto LABEL_118;
                      }
                      v121 -= 24;
                    }
                    while (v119 > *(void *)(v122 - 8));
                    uint64_t v118 = v14 + v121 + 24;
LABEL_118:
                    uint64_t result = v161;
                    *(__n128 *)uint64_t v118 = v161;
                    *(void *)(v118 + 16) = v119;
                  }
                  uint64_t v113 = (long long *)((char *)v117 + 24);
                  v116 += 24;
                }
                while ((long long *)((char *)v117 + 24) != a2);
              }
            }
            else if (!v115)
            {
              do
              {
                uint64_t v126 = *(void *)(a1 + 40);
                uint64_t v127 = *(void *)(a1 + 16);
                a1 = (unint64_t)v113;
                if (v126 > v127)
                {
                  __n128 v163 = (__n128)*v113;
                  uint64_t v128 = v113;
                  do
                  {
                    long long *v128 = *(long long *)((char *)v128 - 24);
                    *((void *)v128 + 2) = *((void *)v128 - 1);
                    uint64_t v129 = *((void *)v128 - 4);
                    uint64_t v128 = (long long *)((char *)v128 - 24);
                  }
                  while (v126 > v129);
                  uint64_t result = v163;
                  long long *v128 = (__int128)v163;
                  *((void *)v128 + 2) = v126;
                }
                uint64_t v113 = (long long *)(a1 + 24);
              }
              while ((long long *)(a1 + 24) != a2);
            }
            return result;
          }
          if (!a4)
          {
            if ((long long *)v14 != a2)
            {
              sub_1002DCBB8(v14, a2, a2);
            }
            return result;
          }
          unint64_t v17 = v16 >> 1;
          double v18 = (__n128 *)(v14 + 24 * (v16 >> 1));
          uint64_t v19 = *((void *)a2 - 1);
          if ((unint64_t)v15 >= 0xC01) {
            break;
          }
          uint64_t v23 = *(void *)(v14 + 16);
          unint64_t v24 = v14 + 24 * v17;
          uint64_t v26 = *(void *)(v24 + 16);
          unint64_t v25 = (void *)(v24 + 16);
          if (v23 > v26)
          {
            if (v19 <= v23)
            {
              unint64_t v175 = v18[1].n128_u64[0];
              __n128 v147 = *v18;
              __n128 v48 = *(__n128 *)v14;
              v18[1].n128_u64[0] = *(void *)(v14 + 16);
              *double v18 = v48;
              *(void *)(v14 + 16) = v175;
              *(__n128 *)unint64_t v14 = v147;
              if (*((void *)a2 - 1) <= *(void *)(v14 + 16)) {
                goto LABEL_32;
              }
              unint64_t v168 = *(void *)(v14 + 16);
              __n128 v140 = *(__n128 *)v14;
              __n128 v49 = *v13;
              *(void *)(v14 + 16) = *((void *)a2 - 1);
              *(__n128 *)unint64_t v14 = v49;
            }
            else
            {
              unint64_t v168 = v18[1].n128_u64[0];
              __n128 v140 = *v18;
              __n128 v27 = *v13;
              v18[1].n128_u64[0] = *((void *)a2 - 1);
              *double v18 = v27;
            }
            *((void *)a2 - 1) = v168;
            *double v13 = v140;
LABEL_32:
            --a4;
            if ((a5 & 1) == 0) {
              goto LABEL_54;
            }
            goto LABEL_33;
          }
          if (v19 <= v23) {
            goto LABEL_32;
          }
          uint64_t v171 = *(void *)(v14 + 16);
          __n128 v143 = *(__n128 *)v14;
          __n128 v30 = *v13;
          *(void *)(v14 + 16) = *((void *)a2 - 1);
          *(__n128 *)unint64_t v14 = v30;
          *((void *)a2 - 1) = v171;
          *double v13 = v143;
          if (*(void *)(v14 + 16) <= *v25) {
            goto LABEL_32;
          }
          unint64_t v172 = v18[1].n128_u64[0];
          __n128 v144 = *v18;
          __n128 v31 = *(__n128 *)v14;
          v18[1].n128_u64[0] = *(void *)(v14 + 16);
          *double v18 = v31;
          *(void *)(v14 + 16) = v172;
          *(__n128 *)unint64_t v14 = v144;
          --a4;
          if (a5) {
            goto LABEL_33;
          }
LABEL_54:
          uint64_t v50 = *(void *)(v14 + 16);
          if (*(void *)(v14 - 8) > v50) {
            goto LABEL_55;
          }
          __n128 v138 = *(__n128 *)v14;
          if (v50 > *((void *)a2 - 1))
          {
            unint64_t v92 = v14;
            do
            {
              unint64_t v14 = v92 + 24;
              uint64_t v93 = *(void *)(v92 + 40);
              v92 += 24;
            }
            while (v50 <= v93);
          }
          else
          {
            unint64_t v94 = v14 + 24;
            do
            {
              unint64_t v14 = v94;
              if (v94 >= (unint64_t)a2) {
                break;
              }
              uint64_t v95 = *(void *)(v94 + 16);
              v94 += 24;
            }
            while (v50 <= v95);
          }
          uint64_t v96 = a2;
          if (v14 < (unint64_t)a2)
          {
            double v97 = a2;
            do
            {
              uint64_t v96 = (long long *)((char *)v97 - 24);
              uint64_t v98 = *((void *)v97 - 1);
              double v97 = (long long *)((char *)v97 - 24);
            }
            while (v50 > v98);
          }
          while (v14 < (unint64_t)v96)
          {
            uint64_t v185 = *(void *)(v14 + 16);
            __n128 v157 = *(__n128 *)v14;
            __n128 v99 = (__n128)*v96;
            *(void *)(v14 + 16) = *((void *)v96 + 2);
            *(__n128 *)unint64_t v14 = v99;
            *((void *)v96 + 2) = v185;
            long long *v96 = (__int128)v157;
            do
            {
              uint64_t v100 = *(void *)(v14 + 40);
              v14 += 24;
            }
            while (v50 <= v100);
            do
            {
              uint64_t v101 = *((void *)v96 - 1);
              uint64_t v96 = (long long *)((char *)v96 - 24);
            }
            while (v50 > v101);
          }
          uint64_t v102 = (__n128 *)(v14 - 24);
          BOOL v6 = v14 - 24 >= a1;
          BOOL v7 = v14 - 24 == a1;
          if (v14 - 24 != a1)
          {
            __n128 v103 = *v102;
            *(void *)(a1 + 16) = *(void *)(v14 - 8);
            *(__n128 *)a1 = v103;
          }
          a5 = 0;
          uint64_t result = v138;
          __n128 *v102 = v138;
          *(void *)(v14 - 8) = v50;
        }
        double v20 = (uint64_t *)(v14 + 16 + 24 * v17);
        uint64_t v21 = *v20;
        if (*v20 <= *(void *)(v14 + 16))
        {
          if (v19 > v21)
          {
            unint64_t v169 = v18[1].n128_u64[0];
            __n128 v141 = *v18;
            __n128 v28 = *v13;
            v18[1].n128_u64[0] = *((void *)a2 - 1);
            *double v18 = v28;
            *((void *)a2 - 1) = v169;
            *double v13 = v141;
            if (*v20 > *(void *)(v14 + 16))
            {
              unint64_t v170 = *(void *)(v14 + 16);
              __n128 v142 = *(__n128 *)v14;
              __n128 v29 = *v18;
              *(void *)(v14 + 16) = v18[1].n128_u64[0];
              *(__n128 *)unint64_t v14 = v29;
              v18[1].n128_u64[0] = v170;
              *double v18 = v142;
            }
          }
        }
        else
        {
          if (v19 <= v21)
          {
            unint64_t v173 = *(void *)(v14 + 16);
            __n128 v145 = *(__n128 *)v14;
            __n128 v32 = *v18;
            *(void *)(v14 + 16) = v18[1].n128_u64[0];
            *(__n128 *)unint64_t v14 = v32;
            v18[1].n128_u64[0] = v173;
            *double v18 = v145;
            if (*((void *)a2 - 1) <= *v20) {
              goto LABEL_23;
            }
            unint64_t v167 = v18[1].n128_u64[0];
            __n128 v139 = *v18;
            __n128 v33 = *v13;
            v18[1].n128_u64[0] = *((void *)a2 - 1);
            *double v18 = v33;
          }
          else
          {
            unint64_t v167 = *(void *)(v14 + 16);
            __n128 v139 = *(__n128 *)v14;
            __n128 v22 = *v13;
            *(void *)(v14 + 16) = *((void *)a2 - 1);
            *(__n128 *)unint64_t v14 = v22;
          }
          *((void *)a2 - 1) = v167;
          *double v13 = v139;
        }
LABEL_23:
        uint64_t v34 = (long long *)(v14 + 24);
        unint64_t v35 = v14 + 24 * v17;
        uint64_t v38 = *(void *)(v35 - 8);
        uint64_t v36 = (unint64_t *)(v35 - 8);
        uint64_t v37 = v38;
        uint64_t v39 = (__n128 *)(v36 - 2);
        uint64_t v40 = *((void *)a2 - 4);
        if (v38 <= *(void *)(v14 + 40))
        {
          if (v40 > v37)
          {
            unint64_t v174 = *v36;
            long long v146 = (__int128)*v39;
            long long v44 = *v136;
            *uint64_t v36 = *((void *)a2 - 4);
            *uint64_t v39 = (__n128)v44;
            *((void *)a2 - 4) = v174;
            *uint64_t v136 = v146;
            if ((int64_t)*v36 > *(void *)(v14 + 40))
            {
              long long v45 = *v34;
              unint64_t v46 = *(void *)(v14 + 40);
              unint64_t v47 = *v36;
              *uint64_t v34 = (__int128)*v39;
              *(void *)(v14 + 40) = v47;
              *uint64_t v36 = v46;
              *uint64_t v39 = (__n128)v45;
            }
          }
        }
        else if (v40 <= v37)
        {
          long long v51 = *v34;
          unint64_t v52 = *(void *)(v14 + 40);
          unint64_t v53 = *v36;
          *uint64_t v34 = (__int128)*v39;
          *(void *)(v14 + 40) = v53;
          *uint64_t v36 = v52;
          *uint64_t v39 = (__n128)v51;
          if (*((void *)a2 - 4) > (int64_t)*v36)
          {
            unint64_t v176 = *v36;
            long long v148 = (__int128)*v39;
            long long v54 = *v136;
            *uint64_t v36 = *((void *)a2 - 4);
            *uint64_t v39 = (__n128)v54;
            *((void *)a2 - 4) = v176;
            *uint64_t v136 = v148;
          }
        }
        else
        {
          long long v41 = *v34;
          uint64_t v42 = *(void *)(v14 + 40);
          uint64_t v43 = *((void *)a2 - 4);
          *uint64_t v34 = *v136;
          *(void *)(v14 + 40) = v43;
          *((void *)a2 - 4) = v42;
          *uint64_t v136 = v41;
        }
        uint64_t v55 = (__n128 *)(v14 + 48);
        unint64_t v56 = v14 + 24 * v17;
        uint64_t v59 = *(void *)(v56 + 40);
        uint64_t v57 = (unint64_t *)(v56 + 40);
        uint64_t v58 = v59;
        uint64_t v60 = (__n128 *)(v57 - 2);
        uint64_t v61 = *((void *)a2 - 7);
        if (v59 <= *(void *)(v14 + 64))
        {
          if (v61 > v58)
          {
            unint64_t v177 = *v57;
            __n128 v149 = *v60;
            __n128 v65 = *v135;
            unint64_t *v57 = *((void *)a2 - 7);
            __n128 *v60 = v65;
            *((void *)a2 - 7) = v177;
            __n128 *v135 = v149;
            if ((int64_t)*v57 > *(void *)(v14 + 64))
            {
              __n128 v66 = *v55;
              unint64_t v67 = *(void *)(v14 + 64);
              unint64_t v68 = *v57;
              __n128 *v55 = *v60;
              *(void *)(v14 + 64) = v68;
              unint64_t *v57 = v67;
              __n128 *v60 = v66;
            }
          }
        }
        else if (v61 <= v58)
        {
          __n128 v69 = *v55;
          unint64_t v70 = *(void *)(v14 + 64);
          unint64_t v71 = *v57;
          __n128 *v55 = *v60;
          *(void *)(v14 + 64) = v71;
          unint64_t *v57 = v70;
          __n128 *v60 = v69;
          if (*((void *)a2 - 7) > (int64_t)*v57)
          {
            unint64_t v178 = *v57;
            __n128 v150 = *v60;
            __n128 v72 = *v135;
            unint64_t *v57 = *((void *)a2 - 7);
            __n128 *v60 = v72;
            *((void *)a2 - 7) = v178;
            __n128 *v135 = v150;
          }
        }
        else
        {
          __n128 v62 = *v55;
          uint64_t v63 = *(void *)(v14 + 64);
          uint64_t v64 = *((void *)a2 - 7);
          __n128 *v55 = *v135;
          *(void *)(v14 + 64) = v64;
          *((void *)a2 - 7) = v63;
          __n128 *v135 = v62;
        }
        uint64_t v73 = *v20;
        uint64_t v74 = *v57;
        if (*v20 <= (uint64_t)*v36)
        {
          if (v74 > v73)
          {
            unint64_t v180 = v18[1].n128_u64[0];
            __n128 v152 = *v18;
            *double v18 = *v60;
            v18[1].n128_u64[0] = *v57;
            unint64_t *v57 = v180;
            __n128 *v60 = v152;
            if (*v20 > (uint64_t)*v36)
            {
              unint64_t v181 = *v36;
              __n128 v153 = *v39;
              *uint64_t v39 = *v18;
              *uint64_t v36 = v18[1].n128_u64[0];
              v18[1].n128_u64[0] = v181;
              *double v18 = v153;
            }
          }
        }
        else
        {
          if (v74 <= v73)
          {
            unint64_t v182 = *v36;
            __n128 v154 = *v39;
            *uint64_t v39 = *v18;
            *uint64_t v36 = v18[1].n128_u64[0];
            v18[1].n128_u64[0] = v182;
            *double v18 = v154;
            if ((uint64_t)*v57 <= *v20) {
              goto LABEL_53;
            }
            unint64_t v179 = v18[1].n128_u64[0];
            __n128 v151 = *v18;
            *double v18 = *v60;
            v18[1].n128_u64[0] = *v57;
          }
          else
          {
            unint64_t v179 = *v36;
            __n128 v151 = *v39;
            *uint64_t v39 = *v60;
            *uint64_t v36 = *v57;
          }
          unint64_t *v57 = v179;
          __n128 *v60 = v151;
        }
LABEL_53:
        unint64_t v183 = *(void *)(v14 + 16);
        __n128 v155 = *(__n128 *)v14;
        __n128 v75 = *v18;
        *(void *)(v14 + 16) = v18[1].n128_u64[0];
        *(__n128 *)unint64_t v14 = v75;
        v18[1].n128_u64[0] = v183;
        *double v18 = v155;
        --a4;
        if ((a5 & 1) == 0) {
          goto LABEL_54;
        }
LABEL_33:
        uint64_t v50 = *(void *)(v14 + 16);
LABEL_55:
        uint64_t v76 = 0;
        __n128 v137 = *(__n128 *)v14;
        do
        {
          uint64_t v77 = *(void *)(v14 + v76 + 40);
          v76 += 24;
        }
        while (v77 > v50);
        unint64_t v78 = v14 + v76;
        uint64_t v79 = a2;
        if (v76 == 24)
        {
          uint64_t v82 = a2;
          while (v78 < (unint64_t)v82)
          {
            uint64_t v80 = (long long *)((char *)v82 - 24);
            uint64_t v83 = *((void *)v82 - 1);
            uint64_t v82 = (long long *)((char *)v82 - 24);
            if (v83 > v50) {
              goto LABEL_63;
            }
          }
          uint64_t v80 = v82;
          unint64_t v14 = v78;
        }
        else
        {
          do
          {
            uint64_t v80 = (long long *)((char *)v79 - 24);
            uint64_t v81 = *((void *)v79 - 1);
            uint64_t v79 = (long long *)((char *)v79 - 24);
          }
          while (v81 <= v50);
LABEL_63:
          unint64_t v14 = v78;
          if (v78 < (unint64_t)v80)
          {
            unint64_t v84 = (unint64_t)v80;
            do
            {
              uint64_t v184 = *(void *)(v14 + 16);
              __n128 v156 = *(__n128 *)v14;
              __n128 v85 = *(__n128 *)v84;
              *(void *)(v14 + 16) = *(void *)(v84 + 16);
              *(__n128 *)unint64_t v14 = v85;
              *(void *)(v84 + 16) = v184;
              *(__n128 *)unint64_t v84 = v156;
              do
              {
                uint64_t v86 = *(void *)(v14 + 40);
                v14 += 24;
              }
              while (v86 > v50);
              do
              {
                uint64_t v87 = *(void *)(v84 - 8);
                v84 -= 24;
              }
              while (v87 <= v50);
            }
            while (v14 < v84);
          }
        }
        int v88 = (__n128 *)(v14 - 24);
        if (v14 - 24 != a1)
        {
          __n128 v89 = *v88;
          *(void *)(a1 + 16) = *(void *)(v14 - 8);
          *(__n128 *)a1 = v89;
        }
        __n128 *v88 = v137;
        *(void *)(v14 - 8) = v50;
        if (v78 >= (unint64_t)v80) {
          break;
        }
LABEL_74:
        sub_1002DB5D8(a1, v14 - 24, a3, a4, a5 & 1);
        a5 = 0;
      }
      BOOL v90 = sub_1002DC470(a1, (__n128 *)(v14 - 24), v137);
      if (sub_1002DC470(v14, (__n128 *)a2, v91)) {
        break;
      }
      if (!v90) {
        goto LABEL_74;
      }
    }
    a2 = (long long *)(v14 - 24);
    if (!v90) {
      continue;
    }
    return result;
  }
}

BOOL sub_1002DC470(uint64_t a1, __n128 *a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if ((int64_t)a2[-1].n128_u64[1] > *(void *)(a1 + 16))
      {
        unint64_t v4 = *(void *)(a1 + 16);
        __n128 v5 = *(__n128 *)a1;
        uint64_t v6 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *(__n128 *)((char *)a2 - 24);
        *(void *)(a1 + 16) = v6;
        *(__n128 *)((char *)a2 - 24) = v5;
        a2[-1].n128_u64[1] = v4;
      }
      return 1;
    case 3uLL:
      unint64_t v14 = (__n128 *)(a1 + 24);
      uint64_t v15 = (__n128 *)((char *)a2 - 24);
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = a2[-1].n128_i64[1];
      if (v16 > *(void *)(a1 + 16))
      {
        if (v17 <= v16)
        {
          uint64_t v48 = *(void *)(a1 + 16);
          __n128 v49 = *(__n128 *)a1;
          *(__n128 *)a1 = *v14;
          *(void *)(a1 + 16) = *(void *)(a1 + 40);
          *unint64_t v14 = v49;
          *(void *)(a1 + 40) = v48;
          if ((int64_t)a2[-1].n128_u64[1] > *(void *)(a1 + 40))
          {
            unint64_t v50 = *(void *)(a1 + 40);
            __n128 v51 = *v14;
            uint64_t v52 = a2[-1].n128_i64[1];
            *unint64_t v14 = *v15;
            *(void *)(a1 + 40) = v52;
            *uint64_t v15 = v51;
            a2[-1].n128_u64[1] = v50;
          }
        }
        else
        {
          unint64_t v18 = *(void *)(a1 + 16);
          __n128 v19 = *(__n128 *)a1;
          uint64_t v20 = a2[-1].n128_i64[1];
          *(__n128 *)a1 = *v15;
          *(void *)(a1 + 16) = v20;
          *uint64_t v15 = v19;
          a2[-1].n128_u64[1] = v18;
        }
        return 1;
      }
      if (v17 <= v16) {
        return 1;
      }
      unint64_t v30 = *(void *)(a1 + 40);
      __n128 v31 = *v14;
      unint64_t v32 = a2[-1].n128_u64[1];
      *unint64_t v14 = *v15;
      goto LABEL_43;
    case 4uLL:
      unint64_t v14 = (__n128 *)(a1 + 24);
      uint64_t v15 = (__n128 *)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 40);
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 64);
      if (v21 <= v22)
      {
        if (v23 > v21)
        {
          uint64_t v33 = *(void *)(a1 + 40);
          __n128 v34 = *v14;
          *unint64_t v14 = *v15;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *uint64_t v15 = v34;
          *(void *)(a1 + 64) = v33;
          if (*(void *)(a1 + 40) > v22)
          {
            uint64_t v35 = *(void *)(a1 + 16);
            __n128 v36 = *(__n128 *)a1;
            *(__n128 *)a1 = *v14;
            *(void *)(a1 + 16) = *(void *)(a1 + 40);
            *unint64_t v14 = v36;
            *(void *)(a1 + 40) = v35;
          }
        }
      }
      else
      {
        if (v23 <= v21)
        {
          uint64_t v53 = *(void *)(a1 + 16);
          __n128 v54 = *(__n128 *)a1;
          *(__n128 *)a1 = *v14;
          *(void *)(a1 + 16) = *(void *)(a1 + 40);
          *unint64_t v14 = v54;
          *(void *)(a1 + 40) = v53;
          if (v23 <= *(void *)(a1 + 40)) {
            goto LABEL_40;
          }
          uint64_t v24 = *(void *)(a1 + 40);
          __n128 v25 = *v14;
          *unint64_t v14 = *v15;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
        }
        else
        {
          uint64_t v24 = *(void *)(a1 + 16);
          __n128 v25 = *(__n128 *)a1;
          *(__n128 *)a1 = *v15;
          *(void *)(a1 + 16) = *(void *)(a1 + 64);
        }
        *uint64_t v15 = v25;
        *(void *)(a1 + 64) = v24;
      }
LABEL_40:
      if ((int64_t)a2[-1].n128_u64[1] > *(void *)(a1 + 64))
      {
        uint64_t v55 = (__n128 *)((char *)a2 - 24);
        unint64_t v56 = *(void *)(a1 + 64);
        __n128 v57 = *v15;
        uint64_t v58 = a2[-1].n128_i64[1];
        *uint64_t v15 = *(__n128 *)((char *)a2 - 24);
        *(void *)(a1 + 64) = v58;
        __n128 *v55 = v57;
        v55[1].n128_u64[0] = v56;
        if (*(void *)(a1 + 64) > *(void *)(a1 + 40))
        {
          unint64_t v30 = *(void *)(a1 + 40);
          __n128 v31 = *v14;
          *unint64_t v14 = *v15;
          unint64_t v32 = *(void *)(a1 + 64);
LABEL_43:
          v14[1].n128_u64[0] = v32;
          *uint64_t v15 = v31;
          v15[1].n128_u64[0] = v30;
          if (*(void *)(a1 + 40) > *(void *)(a1 + 16))
          {
            unint64_t v59 = *(void *)(a1 + 16);
            __n128 v60 = *(__n128 *)a1;
            *(__n128 *)a1 = *v14;
            *(void *)(a1 + 16) = v14[1].n128_u64[0];
            *unint64_t v14 = v60;
            v14[1].n128_u64[0] = v59;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_1002DC970((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)((char *)a2 - 24), a3);
      return 1;
    default:
      BOOL v7 = (__n128 *)(a1 + 48);
      uint64_t v8 = (__n128 *)(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 64);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          uint64_t v26 = *(void *)(a1 + 40);
          __n128 v27 = *v8;
          __n128 *v8 = *v7;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *BOOL v7 = v27;
          *(void *)(a1 + 64) = v26;
          if (*(void *)(a1 + 40) > v10)
          {
            uint64_t v28 = *(void *)(a1 + 16);
            __n128 v29 = *(__n128 *)a1;
            *(__n128 *)a1 = *v8;
            *(void *)(a1 + 16) = *(void *)(a1 + 40);
            __n128 *v8 = v29;
            *(void *)(a1 + 40) = v28;
          }
        }
      }
      else if (v11 <= v9)
      {
        uint64_t v37 = *(void *)(a1 + 16);
        __n128 v38 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(void *)(a1 + 16) = *(void *)(a1 + 40);
        __n128 *v8 = v38;
        *(void *)(a1 + 40) = v37;
        if (v11 > *(void *)(a1 + 40))
        {
          uint64_t v39 = *(void *)(a1 + 40);
          __n128 v40 = *v8;
          __n128 *v8 = *v7;
          *(void *)(a1 + 40) = *(void *)(a1 + 64);
          *BOOL v7 = v40;
          *(void *)(a1 + 64) = v39;
        }
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 16);
        __n128 v13 = *(__n128 *)a1;
        *(__n128 *)a1 = *v7;
        *(void *)(a1 + 16) = *(void *)(a1 + 64);
        *BOOL v7 = v13;
        *(void *)(a1 + 64) = v12;
      }
      long long v41 = (__n128 *)(a1 + 72);
      if ((__n128 *)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v42 = 0;
      int v43 = 0;
      break;
  }
  while (1)
  {
    int64_t v44 = v41[1].n128_i64[0];
    if (v44 > (int64_t)v7[1].n128_u64[0]) {
      break;
    }
LABEL_33:
    BOOL v7 = v41;
    v42 += 24;
    long long v41 = (__n128 *)((char *)v41 + 24);
    if (v41 == a2) {
      return 1;
    }
  }
  __n128 v62 = *v41;
  uint64_t v45 = v42;
  do
  {
    uint64_t v46 = a1 + v45;
    *(_OWORD *)(v46 + 72) = *(_OWORD *)(a1 + v45 + 48);
    *(void *)(v46 + 88) = *(void *)(a1 + v45 + 64);
    if (v45 == -48)
    {
      *(__n128 *)a1 = v62;
      *(void *)(a1 + 16) = v44;
      if (++v43 != 8) {
        goto LABEL_33;
      }
      return &v41[1].n128_i8[8] == (__int8 *)a2;
    }
    v45 -= 24;
  }
  while (v44 > *(void *)(v46 + 40));
  uint64_t v47 = a1 + v45;
  *(__n128 *)(v47 + 72) = v62;
  *(void *)(v47 + 88) = v44;
  if (++v43 != 8) {
    goto LABEL_33;
  }
  return &v41[1].n128_i8[8] == (__int8 *)a2;
}

__n128 sub_1002DC970(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  int64_t v6 = a2[1].n128_i64[0];
  int64_t v7 = a3[1].n128_i64[0];
  if (v6 <= (int64_t)a1[1].n128_u64[0])
  {
    if (v7 > v6)
    {
      unint64_t v10 = a2[1].n128_u64[0];
      uint64_t result = *a2;
      unint64_t v11 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v11;
      *a3 = result;
      a3[1].n128_u64[0] = v10;
      if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
      {
        unint64_t v12 = a1[1].n128_u64[0];
        uint64_t result = *a1;
        unint64_t v13 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v13;
        *a2 = result;
        a2[1].n128_u64[0] = v12;
      }
    }
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t v8 = a1[1].n128_u64[0];
      uint64_t result = *a1;
      unint64_t v9 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v9;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v8;
      goto LABEL_10;
    }
    unint64_t v14 = a1[1].n128_u64[0];
    uint64_t result = *a1;
    unint64_t v15 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v15;
    *a2 = result;
    a2[1].n128_u64[0] = v14;
    if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
    {
      unint64_t v8 = a2[1].n128_u64[0];
      uint64_t result = *a2;
      unint64_t v16 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if ((int64_t)a4[1].n128_u64[0] > (int64_t)a3[1].n128_u64[0])
  {
    unint64_t v17 = a3[1].n128_u64[0];
    uint64_t result = *a3;
    unint64_t v18 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v18;
    *a4 = result;
    a4[1].n128_u64[0] = v17;
    if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
    {
      unint64_t v19 = a2[1].n128_u64[0];
      uint64_t result = *a2;
      unint64_t v20 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v20;
      *a3 = result;
      a3[1].n128_u64[0] = v19;
      if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
      {
        unint64_t v21 = a1[1].n128_u64[0];
        uint64_t result = *a1;
        unint64_t v22 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v22;
        *a2 = result;
        a2[1].n128_u64[0] = v21;
      }
    }
  }
  if ((int64_t)a5[1].n128_u64[0] > (int64_t)a4[1].n128_u64[0])
  {
    uint64_t v23 = a4[1].n128_i64[0];
    uint64_t result = *a4;
    unint64_t v24 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v24;
    *a5 = result;
    a5[1].n128_u64[0] = v23;
    if ((int64_t)a4[1].n128_u64[0] > (int64_t)a3[1].n128_u64[0])
    {
      unint64_t v25 = a3[1].n128_u64[0];
      uint64_t result = *a3;
      unint64_t v26 = a4[1].n128_u64[0];
      *a3 = *a4;
      a3[1].n128_u64[0] = v26;
      *a4 = result;
      a4[1].n128_u64[0] = v25;
      if ((int64_t)a3[1].n128_u64[0] > (int64_t)a2[1].n128_u64[0])
      {
        unint64_t v27 = a2[1].n128_u64[0];
        uint64_t result = *a2;
        unint64_t v28 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v28;
        *a3 = result;
        a3[1].n128_u64[0] = v27;
        if ((int64_t)a2[1].n128_u64[0] > (int64_t)a1[1].n128_u64[0])
        {
          unint64_t v29 = a1[1].n128_u64[0];
          uint64_t result = *a1;
          unint64_t v30 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v30;
          *a2 = result;
          a2[1].n128_u64[0] = v29;
        }
      }
    }
  }
  return result;
}

long long *sub_1002DCBB8(uint64_t a1, long long *a2, long long *a3)
{
  if ((long long *)a1 == a2) {
    return a3;
  }
  uint64_t v3 = (uint64_t)a2 - a1;
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  if ((uint64_t)a2 - a1 >= 25 && (unint64_t)v3 >= 0x30)
  {
    int64_t v44 = (unint64_t)(v4 - 2) >> 1;
    int64_t v45 = v44;
    do
    {
      if (v44 >= v45)
      {
        uint64_t v46 = (2 * v45) | 1;
        uint64_t v47 = (long long *)(a1 + 24 * v46);
        if (2 * v45 + 2 < v4)
        {
          uint64_t v48 = *(void *)(a1 + 24 * v46 + 16);
          uint64_t v49 = *((void *)v47 + 5);
          uint64_t v47 = (long long *)((char *)v47 + 24 * (v48 > v49));
          if (v48 > v49) {
            uint64_t v46 = 2 * v45 + 2;
          }
        }
        uint64_t v50 = *(void *)(a1 + 24 * v45 + 16);
        if (*((void *)v47 + 2) <= v50)
        {
          __n128 v51 = (long long *)(a1 + 24 * v45);
          long long v60 = *v51;
          do
          {
            uint64_t v52 = v51;
            __n128 v51 = v47;
            long long v53 = *v47;
            *((void *)v52 + 2) = *((void *)v47 + 2);
            long long *v52 = v53;
            if (v44 < v46) {
              break;
            }
            uint64_t v54 = (2 * v46) | 1;
            uint64_t v47 = (long long *)(a1 + 24 * v54);
            uint64_t v55 = 2 * v46 + 2;
            if (v55 < v4)
            {
              uint64_t v56 = *(void *)(a1 + 24 * v54 + 16);
              uint64_t v57 = *((void *)v47 + 5);
              uint64_t v47 = (long long *)((char *)v47 + 24 * (v56 > v57));
              if (v56 > v57) {
                uint64_t v54 = v55;
              }
            }
            uint64_t v46 = v54;
          }
          while (*((void *)v47 + 2) <= v50);
          *__n128 v51 = v60;
          *((void *)v51 + 2) = v50;
        }
      }
      BOOL v16 = v45-- <= 0;
    }
    while (!v16);
  }
  __n128 v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 48)
    {
      int64_t v6 = a2;
      do
      {
        if (*((void *)v6 + 2) > *(void *)(a1 + 16))
        {
          uint64_t v7 = *((void *)v6 + 2);
          long long v8 = *v6;
          uint64_t v9 = *(void *)(a1 + 16);
          long long *v6 = *(_OWORD *)a1;
          *((void *)v6 + 2) = v9;
          *(_OWORD *)a1 = v8;
          *(void *)(a1 + 16) = v7;
        }
        int64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
LABEL_28:
      __n128 v5 = a3;
      goto LABEL_29;
    }
    unint64_t v10 = a2;
    while (1)
    {
      if (*((void *)v10 + 2) > *(void *)(a1 + 16))
      {
        uint64_t v11 = *((void *)v10 + 2);
        long long v12 = *v10;
        uint64_t v13 = *(void *)(a1 + 16);
        long long *v10 = *(_OWORD *)a1;
        *((void *)v10 + 2) = v13;
        *(_OWORD *)a1 = v12;
        *(void *)(a1 + 16) = v11;
        if ((unint64_t)v4 < 3)
        {
          uint64_t v17 = a1 + 24;
          int64_t v18 = 1;
          uint64_t v19 = *(void *)(a1 + 16);
          if (*(void *)(a1 + 40) <= v19) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v14 = *(void *)(a1 + 40);
          uint64_t v15 = *(void *)(a1 + 64);
          BOOL v16 = v14 <= v15;
          uint64_t v17 = a1 + 24 + 24 * (v14 > v15);
          if (v16) {
            int64_t v18 = 1;
          }
          else {
            int64_t v18 = 2;
          }
          uint64_t v19 = *(void *)(a1 + 16);
          if (*(void *)(v17 + 16) <= v19)
          {
LABEL_21:
            long long v58 = *(_OWORD *)a1;
            uint64_t v20 = a1;
            do
            {
              uint64_t v21 = v20;
              uint64_t v20 = v17;
              long long v22 = *(_OWORD *)v17;
              *(void *)(v21 + 16) = *(void *)(v17 + 16);
              *(_OWORD *)uint64_t v21 = v22;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v18) {
                break;
              }
              uint64_t v23 = (2 * v18) | 1;
              uint64_t v17 = a1 + 24 * v23;
              uint64_t v24 = 2 * v18 + 2;
              if (v24 < v4)
              {
                uint64_t v25 = *(void *)(a1 + 24 * v23 + 16);
                uint64_t v26 = *(void *)(v17 + 40);
                v17 += 24 * (v25 > v26);
                if (v25 > v26) {
                  uint64_t v23 = v24;
                }
              }
              int64_t v18 = v23;
            }
            while (*(void *)(v17 + 16) <= v19);
            *(_OWORD *)uint64_t v20 = v58;
            *(void *)(v20 + 16) = v19;
          }
        }
      }
      unint64_t v10 = (long long *)((char *)v10 + 24);
      if (v10 == a3) {
        goto LABEL_28;
      }
    }
  }
LABEL_29:
  if (v3 >= 25)
  {
    int64_t v27 = v3 / 0x18uLL;
    do
    {
      uint64_t v28 = 0;
      long long v59 = *(_OWORD *)a1;
      uint64_t v61 = *(void *)(a1 + 16);
      unint64_t v29 = (long long *)a1;
      do
      {
        uint64_t v31 = v28 + 1;
        unint64_t v32 = (long long *)((char *)v29 + 24 * v28 + 24);
        uint64_t v33 = (2 * v28) | 1;
        uint64_t v34 = 2 * v28 + 2;
        if (v34 < v27)
        {
          uint64_t v35 = *((void *)v29 + 3 * v31 + 2);
          uint64_t v36 = *((void *)v32 + 5);
          unint64_t v32 = (long long *)((char *)v32 + 24 * (v35 > v36));
          if (v35 > v36) {
            uint64_t v33 = v34;
          }
        }
        long long v30 = *v32;
        *((void *)v29 + 2) = *((void *)v32 + 2);
        *unint64_t v29 = v30;
        unint64_t v29 = v32;
        uint64_t v28 = v33;
      }
      while (v33 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      a2 = (long long *)((char *)a2 - 24);
      if (v32 == a2)
      {
        *((void *)v32 + 2) = v61;
        *unint64_t v32 = v59;
      }
      else
      {
        long long v37 = *a2;
        *((void *)v32 + 2) = *((void *)a2 + 2);
        *unint64_t v32 = v37;
        *a2 = v59;
        *((void *)a2 + 2) = v61;
        uint64_t v38 = (uint64_t)v32 - a1 + 24;
        if (v38 >= 25)
        {
          unint64_t v39 = (v38 / 0x18uLL - 2) >> 1;
          uint64_t v40 = *((void *)v32 + 2);
          if (*(void *)(a1 + 24 * v39 + 16) > v40)
          {
            long long v62 = *v32;
            do
            {
              long long v41 = v32;
              unint64_t v32 = (long long *)(a1 + 24 * v39);
              long long v42 = *v32;
              *((void *)v41 + 2) = *((void *)v32 + 2);
              long long *v41 = v42;
              if (!v39) {
                break;
              }
              unint64_t v39 = (v39 - 1) >> 1;
            }
            while (*(void *)(a1 + 24 * v39 + 16) > v40);
            *unint64_t v32 = v62;
            *((void *)v32 + 2) = v40;
          }
        }
      }
      BOOL v16 = v27-- <= 2;
    }
    while (!v16);
  }
  return v5;
}

char *sub_1002DD030(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x555555555555555) {
    sub_1000A9108();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 4) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1000A6A10();
    }
    uint64_t v9 = operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[3 * v5];
  uint64_t v11 = (void *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 8);
  void *v10 = *(void *)a2;
  v10[1] = v12;
  uint64_t v13 = v10 + 1;
  uint64_t v14 = *(void *)(a2 + 16);
  v10[2] = v14;
  if (v14)
  {
    *(void *)(v12 + 16) = v13;
    *(void *)a2 = v11;
    *uint64_t v11 = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
  }
  else
  {
    void *v10 = v13;
  }
  uint64_t v15 = (char *)&v9[3 * v8];
  void v10[3] = *(void *)(a2 + 24);
  v9[3 * v5 + 2] = *(_OWORD *)(a2 + 32);
  BOOL v16 = (char *)(v10 + 6);
  if (v4 == v3)
  {
    *a1 = (char *)v10;
    a1[1] = v16;
    a1[2] = v15;
  }
  else
  {
    unint64_t v17 = 0;
    do
    {
      uint64_t v19 = &v10[v17 / 8];
      *(v19 - 6) = *(void *)&v4[v17 - 48];
      uint64_t v20 = &v4[v17 - 40];
      uint64_t v21 = *(void *)v20;
      v10[v17 / 8 - 5] = *(void *)v20;
      uint64_t v22 = (uint64_t)&v10[v17 / 8 - 5];
      uint64_t v23 = *(void *)&v4[v17 - 32];
      *(v19 - 4) = v23;
      if (v23)
      {
        *(void *)(v21 + 16) = v22;
        *(void *)&v4[v17 - 48] = v20;
        *(void *)uint64_t v20 = 0;
        *(void *)&v4[v17 - 32] = 0;
      }
      else
      {
        *(v19 - 6) = v22;
      }
      int64_t v18 = &v10[v17 / 8];
      *(v18 - 3) = *(void *)&v4[v17 - 24];
      *((_OWORD *)v18 - 1) = *(_OWORD *)&v4[v17 - 16];
      v17 -= 48;
    }
    while (&v4[v17] != v3);
    uint64_t v3 = *a1;
    uint64_t v24 = a1[1];
    *a1 = (char *)&v10[v17 / 8];
    a1[1] = v16;
    a1[2] = v15;
    if (v24 == v3)
    {
      uint64_t v3 = v24;
      if (!v24) {
        return v16;
      }
      goto LABEL_27;
    }
    uint64_t v25 = (uint64_t)(v24 - 48);
    do
    {
      sub_10006A9DC(v25, *(void **)(v25 + 8));
      BOOL v26 = v25 == (void)v3;
      v25 -= 48;
    }
    while (!v26);
  }
  if (v3) {
LABEL_27:
  }
    operator delete(v3);
  return v16;
}

void *sub_1002DD224(void *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    unint64_t v6 = a2;
    uint64_t v7 = (void **)result;
    unint64_t v8 = result + 1;
    do
    {
      uint64_t result = sub_1002DD338(v7, v8, v18, &v17, v6 + 4);
      if (*result)
      {
        uint64_t v9 = (void *)v6[1];
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v10 = (uint64_t **)result;
        uint64_t v11 = (uint64_t *)operator new(0x28uLL);
        v11[4] = v6[4];
        uint64_t v12 = v18[0];
        *uint64_t v11 = 0;
        v11[1] = 0;
        v11[2] = v12;
        void *v10 = v11;
        uint64_t v13 = (void *)**v7;
        if (v13)
        {
          *uint64_t v7 = v13;
          uint64_t v14 = *v10;
        }
        else
        {
          uint64_t v14 = v11;
        }
        uint64_t result = sub_1000619B8(v7[1], v14);
        _DWORD v7[2] = (void *)((char *)v7[2] + 1);
        uint64_t v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
LABEL_11:
            uint64_t v15 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v15 = (void *)v6[2];
        BOOL v16 = *v15 == (void)v6;
        unint64_t v6 = v15;
      }
      while (!v16);
LABEL_3:
      unint64_t v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

void *sub_1002DD338(void *a1, void *a2, void *a3, void *a4, uint64_t *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, uint64_t v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      unint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        unint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v14 = a2;
      do
      {
        unint64_t v10 = (void *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        uint64_t v14 = v10;
      }
      while (v15);
    }
    uint64_t v16 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    int64_t v18 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v19 = v18;
          uint64_t v20 = v18[4];
          if (v16 >= v20) {
            break;
          }
          int64_t v18 = (void *)*v19;
          unint64_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        unint64_t v5 = v19 + 1;
        int64_t v18 = (void *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint64_t v12 = (void *)a2[1];
      do
      {
        uint64_t v13 = v12;
        uint64_t v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v21 = a2;
      do
      {
        uint64_t v13 = (void *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        uint64_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = (void *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            uint64_t v23 = v22;
            uint64_t v24 = v22[4];
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = (void *)*v23;
            unint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          unint64_t v5 = v23 + 1;
          uint64_t v22 = (void *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void sub_1002DD4E8(uint64_t **a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = (uint64_t)a1;
  if (a1[2])
  {
    uint64_t v6 = *a1;
    uint64_t v8 = a1 + 1;
    uint64_t v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    _DWORD v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    if (!v9)
    {
      uint64_t v24 = 0;
LABEL_47:
      sub_10006A9DC((uint64_t)a1, v24);
      goto LABEL_48;
    }
    unint64_t v10 = (uint64_t *)v9[2];
    if (v10)
    {
      uint64_t v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        uint64_t *v10 = 0;
        while (1)
        {
          uint64_t v35 = (uint64_t *)v10[1];
          if (!v35) {
            break;
          }
          do
          {
            unint64_t v10 = v35;
            uint64_t v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
      }
      else
      {
        for (v10[1] = 0; v11; uint64_t v11 = (uint64_t *)v10[1])
        {
          do
          {
            unint64_t v10 = v11;
            uint64_t v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      uint64_t v12 = v9;
      uint64_t v13 = v4;
      while (1)
      {
        uint64_t v9 = v10;
        uint64_t v14 = v13[4];
        v12[4] = v14;
        BOOL v15 = *v8;
        uint64_t v16 = (uint64_t **)(v5 + 8);
        uint64_t v17 = (uint64_t **)(v5 + 8);
        if (*v8) {
          break;
        }
LABEL_14:
        *uint64_t v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v16;
        *uint64_t v17 = v12;
        uint64_t v18 = **(void **)v5;
        if (v18) {
          goto LABEL_15;
        }
LABEL_16:
        sub_1000619B8(*(uint64_t **)(v5 + 8), v12);
        ++*(void *)(v5 + 16);
        if (v10)
        {
          unint64_t v10 = (uint64_t *)v10[2];
          if (v10)
          {
            uint64_t v21 = (uint64_t *)*v10;
            if ((uint64_t *)*v10 == v9)
            {
              uint64_t *v10 = 0;
              while (1)
              {
                uint64_t v22 = (uint64_t *)v10[1];
                if (!v22) {
                  break;
                }
                do
                {
                  unint64_t v10 = v22;
                  uint64_t v22 = (uint64_t *)*v22;
                }
                while (v22);
              }
            }
            else
            {
              for (v10[1] = 0; v21; uint64_t v21 = (uint64_t *)v10[1])
              {
                do
                {
                  unint64_t v10 = v21;
                  uint64_t v21 = (uint64_t *)*v21;
                }
                while (v21);
              }
            }
          }
        }
        else
        {
          unint64_t v10 = 0;
        }
        uint64_t v19 = (void *)v13[1];
        if (v19)
        {
          do
          {
            uint64_t v4 = v19;
            uint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v4 = (void *)v13[2];
            BOOL v20 = *v4 == (void)v13;
            uint64_t v13 = v4;
          }
          while (!v20);
        }
        if (v9)
        {
          uint64_t v12 = v9;
          uint64_t v13 = v4;
          if (v4 != a3) {
            continue;
          }
        }
        goto LABEL_42;
      }
      do
      {
        while (1)
        {
          uint64_t v16 = (uint64_t **)v15;
          if (v14 >= v15[4]) {
            break;
          }
          BOOL v15 = (uint64_t *)*v15;
          uint64_t v17 = v16;
          if (!*v16) {
            goto LABEL_14;
          }
        }
        BOOL v15 = (uint64_t *)v15[1];
      }
      while (v15);
      uint64_t v17 = v16 + 1;
      *uint64_t v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v16;
      v16[1] = v12;
      uint64_t v18 = **(void **)v5;
      if (!v18) {
        goto LABEL_16;
      }
LABEL_15:
      *(void *)uint64_t v5 = v18;
      uint64_t v12 = *v17;
      goto LABEL_16;
    }
LABEL_42:
    sub_10006A9DC(v5, v9);
    if (v10)
    {
      for (uint64_t i = (uint64_t *)v10[2]; i; uint64_t i = (uint64_t *)i[2])
        unint64_t v10 = i;
      a1 = (uint64_t **)v5;
      uint64_t v24 = v10;
      goto LABEL_47;
    }
  }
LABEL_48:
  if (v4 != a3)
  {
    uint64_t v25 = (uint64_t **)(v5 + 8);
    while (1)
    {
      BOOL v26 = (uint64_t *)operator new(0x28uLL);
      int64_t v27 = v26;
      uint64_t v28 = v4[4];
      v26[4] = v28;
      unint64_t v29 = *v25;
      long long v30 = (uint64_t **)(v5 + 8);
      uint64_t v31 = (uint64_t **)(v5 + 8);
      if (*v25) {
        break;
      }
LABEL_52:
      uint64_t *v26 = 0;
      v26[1] = 0;
      double v26[2] = (uint64_t)v30;
      *uint64_t v31 = v26;
      uint64_t v32 = **(void **)v5;
      if (v32) {
        goto LABEL_53;
      }
LABEL_54:
      sub_1000619B8(*(uint64_t **)(v5 + 8), v27);
      ++*(void *)(v5 + 16);
      uint64_t v33 = (void *)v4[1];
      if (v33)
      {
        do
        {
          uint64_t v34 = v33;
          uint64_t v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          uint64_t v34 = (void *)v4[2];
          BOOL v20 = *v34 == (void)v4;
          uint64_t v4 = v34;
        }
        while (!v20);
      }
      uint64_t v4 = v34;
      if (v34 == a3) {
        return;
      }
    }
    do
    {
      while (1)
      {
        long long v30 = (uint64_t **)v29;
        if (v28 >= v29[4]) {
          break;
        }
        unint64_t v29 = (uint64_t *)*v29;
        uint64_t v31 = v30;
        if (!*v30) {
          goto LABEL_52;
        }
      }
      unint64_t v29 = (uint64_t *)v29[1];
    }
    while (v29);
    uint64_t v31 = v30 + 1;
    uint64_t *v26 = 0;
    v26[1] = 0;
    double v26[2] = (uint64_t)v30;
    v30[1] = v26;
    uint64_t v32 = **(void **)v5;
    if (!v32) {
      goto LABEL_54;
    }
LABEL_53:
    *(void *)uint64_t v5 = v32;
    int64_t v27 = *v31;
    goto LABEL_54;
  }
}

BOOL sub_1002DD814(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(void *)(a1 + 48))
  {
    int v8 = sub_1002C3108((double *)a1, a3);
    return v8 > 0;
  }
  uint64_t v5 = *(double **)a2;
  uint64_t v6 = *(double **)(a2 + 8);
  if ((unint64_t)v6 - *(void *)a2 < 0x40) {
    goto LABEL_23;
  }
  int v15 = 0;
  char v16 = 0;
  if (v5 + 2 == v6) {
    goto LABEL_23;
  }
  do
  {
    if (!sub_10004D030((double *)a1, v5, v5 + 2, (uint64_t)&v15)) {
      break;
    }
    uint64_t v7 = v5 + 4;
    v5 += 2;
  }
  while (v7 != v6);
  if (v15) {
    int v8 = 1;
  }
  else {
    int v8 = -1;
  }
  if (v16)
  {
LABEL_10:
    int v8 = 0;
    return v8 > 0;
  }
  if (!v15)
  {
LABEL_23:
    int v8 = -1;
    return v8 > 0;
  }
  unint64_t v10 = *(double ***)(a2 + 24);
  uint64_t v9 = *(double ***)(a2 + 32);
  if (v10 != v9)
  {
    while (1)
    {
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      if ((unint64_t)((char *)v12 - (char *)*v10) >= 0x40)
      {
        int v15 = 0;
        char v16 = 0;
        if (v11 + 2 != v12)
        {
          do
          {
            if (!sub_10004D030((double *)a1, v11, v11 + 2, (uint64_t)&v15)) {
              break;
            }
            uint64_t v13 = v11 + 4;
            v11 += 2;
          }
          while (v13 != v12);
          if (v16) {
            goto LABEL_10;
          }
          if (v15) {
            goto LABEL_23;
          }
          uint64_t v9 = *(double ***)(a2 + 32);
        }
      }
      v10 += 3;
      if (v10 == v9) {
        return v8 > 0;
      }
    }
  }
  int v8 = 1;
  return v8 > 0;
}

void sub_1002DD980(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_1002DDF0C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a2[4];
  uint64_t v4 = a3[4];
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v4 + 8);
  BOOL v7 = v5 < v6;
  if (v5 != v6) {
    return v7;
  }
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = *(void *)(v4 + 32);
  if (v8 != v9
    || *(void *)(v3 + 24) != *(void *)(v4 + 24)
    || *(void *)(v3 + 40) != *(void *)(v4 + 40)
    || *(void *)(v3 + 16) != *(void *)(v4 + 16))
  {
    uint64_t v20 = *(void *)(v3 + 16);
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v7 = v20 < v21;
    if (v20 == v21)
    {
      uint64_t v22 = *(void *)(v3 + 24);
      uint64_t v23 = *(void *)(v4 + 24);
      BOOL v7 = v22 < v23;
      if (v22 == v23)
      {
        uint64_t v24 = *(void *)(v3 + 40);
        uint64_t v25 = *(void *)(v4 + 40);
        BOOL v26 = v8 < v9;
        BOOL v17 = v24 == v25;
        BOOL v27 = v24 < v25;
        if (v17) {
          return v26;
        }
        else {
          return v27;
        }
      }
    }
    return v7;
  }
  if (vabdd_f64(*(double *)(v3 + 64), *(double *)(v4 + 64)) >= 50.0) {
    return sub_1002CFCC4((double *)(v3 + 48), (double *)(v4 + 48));
  }
  long long v35 = *(_OWORD *)(v3 + 48);
  sub_1002CFEF8((int64_t)&v35);
  long long v34 = *(_OWORD *)(v4 + 48);
  sub_1002CFEF8((int64_t)&v34);
  if (v35 != v34)
  {
    uint64_t v3 = a2[4];
    uint64_t v4 = a3[4];
    return sub_1002CFCC4((double *)(v3 + 48), (double *)(v4 + 48));
  }
  uint64_t v13 = *(void *)(*(void *)a1 + 32);
  uint64_t v14 = *(void *)(*(void *)a1 + 8);
  uint64_t v15 = (_DWORD *)(*(void *)(v14 + (((unint64_t)(v13 + *a2) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 376 * ((v13 + *(_DWORD *)a2) & 0xF));
  unint64_t v16 = (_DWORD *)(*(void *)(v14 + (((unint64_t)(*a3 + v13) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 376 * ((*(_DWORD *)a3 + v13) & 0xF));
  BOOL v17 = v15[4] == 2 && v16[4] == 2;
  if (v17) {
    return sub_1002DE8DC(a1, a2, a3);
  }
  int v18 = v15[10];
  BOOL v19 = v18 == 3 && v15[52] == 3;
  int v29 = v16[10];
  BOOL v30 = v29 == 3 && v16[52] == 3;
  if (v19 && !v30) {
    return 1;
  }
  if (!v19 && v30) {
    return 0;
  }
  BOOL v31 = v18 == 1 && v15[52] == 1;
  BOOL v32 = v29 == 1 && v16[52] == 1;
  if (v31 && !v32) {
    return 1;
  }
  unsigned int v33 = v31 || !v32;
  if (*a2 < *a3) {
    return v33;
  }
  else {
    return 0;
  }
}

uint64_t sub_1002DE1E0(long long *a1, long long *a2, long long *a3, uint64_t a4)
{
  char v8 = sub_1002DDF0C(a4, a2, a1);
  uint64_t result = sub_1002DDF0C(a4, a3, a2);
  if (v8)
  {
    if (result)
    {
      long long v10 = *a1;
      long long v11 = a1[1];
      uint64_t v12 = *((void *)a1 + 4);
      uint64_t v13 = *((void *)a3 + 4);
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((void *)a1 + 4) = v13;
      *((void *)a3 + 4) = v12;
      uint64_t result = 1;
LABEL_10:
      *a3 = v10;
      a3[1] = v11;
      return result;
    }
    long long v25 = *a1;
    long long v26 = a1[1];
    uint64_t v27 = *((void *)a1 + 4);
    uint64_t v28 = *((void *)a2 + 4);
    long long v29 = a2[1];
    *a1 = *a2;
    a1[1] = v29;
    *((void *)a1 + 4) = v28;
    *((void *)a2 + 4) = v27;
    *a2 = v25;
    a2[1] = v26;
    if (sub_1002DDF0C(a4, a3, a2))
    {
      long long v10 = *a2;
      long long v11 = a2[1];
      uint64_t v30 = *((void *)a2 + 4);
      uint64_t v31 = *((void *)a3 + 4);
      long long v32 = a3[1];
      *a2 = *a3;
      a2[1] = v32;
      *((void *)a2 + 4) = v31;
      *((void *)a3 + 4) = v30;
      uint64_t result = 2;
      goto LABEL_10;
    }
    return 1;
  }
  if (result)
  {
    long long v15 = *a2;
    long long v16 = a2[1];
    uint64_t v17 = *((void *)a2 + 4);
    uint64_t v18 = *((void *)a3 + 4);
    long long v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((void *)a2 + 4) = v18;
    *((void *)a3 + 4) = v17;
    *a3 = v15;
    a3[1] = v16;
    if (!sub_1002DDF0C(a4, a2, a1)) {
      return 1;
    }
    long long v20 = *a1;
    long long v21 = a1[1];
    uint64_t v22 = *((void *)a1 + 4);
    uint64_t v23 = *((void *)a2 + 4);
    long long v24 = a2[1];
    *a1 = *a2;
    a1[1] = v24;
    *((void *)a1 + 4) = v23;
    *((void *)a2 + 4) = v22;
    uint64_t result = 2;
    *a2 = v20;
    a2[1] = v21;
  }
  return result;
}

void *sub_1002DE358(long long *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v6 = a1[1];
  long long v22 = *a1;
  long long v23 = v6;
  uint64_t v24 = *((void *)a1 + 4);
  if (sub_1002DDF0C(a3, &v22, (void *)(a2 - 40)))
  {
    BOOL v7 = a1;
    do
      v7 += 5;
    while ((sub_1002DDF0C(a3, &v22, v7) & 1) == 0);
  }
  else
  {
    char v8 = (void *)a1 + 5;
    do
    {
      BOOL v7 = v8;
      if ((unint64_t)v8 >= v4) {
        break;
      }
      int v9 = sub_1002DDF0C(a3, &v22, v8);
      char v8 = v7 + 5;
    }
    while (!v9);
  }
  if ((unint64_t)v7 < v4)
  {
    do
      v4 -= 40;
    while ((sub_1002DDF0C(a3, &v22, (void *)v4) & 1) != 0);
  }
  while ((unint64_t)v7 < v4)
  {
    long long v10 = *(_OWORD *)v7;
    long long v11 = *((_OWORD *)v7 + 1);
    uint64_t v27 = v7[4];
    long long v25 = v10;
    long long v26 = v11;
    long long v12 = *(_OWORD *)v4;
    long long v13 = *(_OWORD *)(v4 + 16);
    v7[4] = *(void *)(v4 + 32);
    *(_OWORD *)BOOL v7 = v12;
    *((_OWORD *)v7 + 1) = v13;
    long long v14 = v25;
    long long v15 = v26;
    *(void *)(v4 + 32) = v27;
    *(_OWORD *)unint64_t v4 = v14;
    *(_OWORD *)(v4 + 16) = v15;
    do
      v7 += 5;
    while (!sub_1002DDF0C(a3, &v22, v7));
    do
      v4 -= 40;
    while ((sub_1002DDF0C(a3, &v22, (void *)v4) & 1) != 0);
  }
  long long v16 = (long long *)(v7 - 5);
  if (v7 - 5 != (void *)a1)
  {
    long long v17 = *v16;
    long long v18 = *(_OWORD *)(v7 - 3);
    *((void *)a1 + 4) = *(v7 - 1);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *(v7 - 1) = v24;
  *long long v16 = v19;
  *(_OWORD *)(v7 - 3) = v20;
  return v7;
}

uint64_t sub_1002DE4B8(long long *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v7 = a1[1];
  long long v22 = *a1;
  long long v23 = v7;
  uint64_t v24 = *((void *)a1 + 4);
  do
    v6 += 40;
  while ((sub_1002DDF0C(a3, (long long *)((char *)a1 + v6), &v22) & 1) != 0);
  unint64_t v8 = (unint64_t)a1 + v6;
  uint64_t v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      a2 -= 5;
    }
    while ((sub_1002DDF0C(a3, a2, &v22) & 1) == 0);
  }
  else
  {
    do
      a2 -= 5;
    while (!sub_1002DDF0C(a3, a2, &v22));
  }
  if (v8 < (unint64_t)a2)
  {
    unint64_t v10 = (unint64_t)a1 + v6;
    long long v11 = a2;
    do
    {
      long long v13 = *(_OWORD *)(v10 + 16);
      long long v25 = *(_OWORD *)v10;
      long long v12 = v25;
      long long v26 = v13;
      uint64_t v27 = *(void *)(v10 + 32);
      uint64_t v14 = v27;
      long long v16 = *(_OWORD *)v11;
      long long v15 = *((_OWORD *)v11 + 1);
      *(void *)(v10 + 32) = v11[4];
      *(_OWORD *)unint64_t v10 = v16;
      *(_OWORD *)(v10 + 16) = v15;
      v11[4] = v14;
      *(_OWORD *)long long v11 = v12;
      *((_OWORD *)v11 + 1) = v13;
      do
        v10 += 40;
      while ((sub_1002DDF0C(a3, (void *)v10, &v22) & 1) != 0);
      do
        v11 -= 5;
      while (!sub_1002DDF0C(a3, v11, &v22));
    }
    while (v10 < (unint64_t)v11);
    uint64_t v9 = v10 - 40;
  }
  if ((long long *)v9 != a1)
  {
    long long v17 = *(_OWORD *)v9;
    long long v18 = *(_OWORD *)(v9 + 16);
    *((void *)a1 + 4) = *(void *)(v9 + 32);
    *a1 = v17;
    a1[1] = v18;
  }
  long long v19 = v22;
  long long v20 = v23;
  *(void *)(v9 + 32) = v24;
  *(_OWORD *)uint64_t v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  return v9;
}

BOOL sub_1002DE618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 40;
      if (!sub_1002DDF0C(a3, (void *)(a2 - 40), (void *)a1)) {
        return 1;
      }
      long long v9 = *(_OWORD *)a1;
      long long v10 = *(_OWORD *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(v8 + 32);
      long long v13 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(void *)(a1 + 32) = v12;
      *(void *)(v8 + 32) = v11;
      BOOL result = 1;
      *(_OWORD *)uint64_t v8 = v9;
      *(_OWORD *)(v8 + 16) = v10;
      return result;
    case 3uLL:
      sub_1002DE1E0((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      uint64_t v24 = (long long *)(a1 + 40);
      long long v25 = (long long *)(a1 + 80);
      uint64_t v26 = a2 - 40;
      sub_1002DE1E0((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), a3);
      if (!sub_1002DDF0C(a3, (void *)v26, (void *)(a1 + 80))) {
        return 1;
      }
      long long v27 = *v25;
      long long v28 = *(_OWORD *)(a1 + 96);
      uint64_t v29 = *(void *)(a1 + 112);
      uint64_t v30 = *(void *)(v26 + 32);
      long long v31 = *(_OWORD *)(v26 + 16);
      *long long v25 = *(_OWORD *)v26;
      *(_OWORD *)(a1 + 96) = v31;
      *(void *)(a1 + 112) = v30;
      *(void *)(v26 + 32) = v29;
      *(_OWORD *)uint64_t v26 = v27;
      *(_OWORD *)(v26 + 16) = v28;
      if (!sub_1002DDF0C(a3, (void *)(a1 + 80), (void *)(a1 + 40))) {
        return 1;
      }
      uint64_t v32 = *(void *)(a1 + 72);
      long long v34 = *v24;
      long long v33 = *(_OWORD *)(a1 + 56);
      long long v35 = *(_OWORD *)(a1 + 96);
      long long *v24 = *v25;
      *(_OWORD *)(a1 + 56) = v35;
      *(void *)(a1 + 72) = *(void *)(a1 + 112);
      *long long v25 = v34;
      *(_OWORD *)(a1 + 96) = v33;
      *(void *)(a1 + 112) = v32;
      if (!sub_1002DDF0C(a3, (void *)(a1 + 40), (void *)a1)) {
        return 1;
      }
      uint64_t v36 = *(void *)(a1 + 32);
      long long v38 = *(_OWORD *)a1;
      long long v37 = *(_OWORD *)(a1 + 16);
      long long v39 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v24;
      *(_OWORD *)(a1 + 16) = v39;
      *(void *)(a1 + 32) = *(void *)(a1 + 72);
      long long *v24 = v38;
      *(_OWORD *)(a1 + 56) = v37;
      BOOL result = 1;
      *(void *)(a1 + 72) = v36;
      return result;
    case 5uLL:
      sub_1002DF0CC(a1, a1 + 40, a1 + 80, (long long *)(a1 + 120), (long long *)(a2 - 40), a3);
      return 1;
    default:
      uint64_t v14 = (void *)(a1 + 80);
      sub_1002DE1E0((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80), a3);
      uint64_t v15 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while (1)
  {
    if (sub_1002DDF0C(a3, (void *)v15, v14))
    {
      long long v20 = *(_OWORD *)(v15 + 16);
      long long v40 = *(_OWORD *)v15;
      long long v41 = v20;
      uint64_t v42 = *(void *)(v15 + 32);
      uint64_t v21 = v16;
      do
      {
        uint64_t v22 = a1 + v21;
        long long v23 = *(_OWORD *)(a1 + v21 + 96);
        *(_OWORD *)(v22 + 120) = *(_OWORD *)(a1 + v21 + 80);
        *(_OWORD *)(v22 + 136) = v23;
        *(void *)(v22 + 152) = *(void *)(a1 + v21 + 112);
        if (v21 == -80)
        {
          uint64_t v18 = a1;
          goto LABEL_7;
        }
        v21 -= 40;
      }
      while ((sub_1002DDF0C(a3, &v40, (void *)(v22 + 40)) & 1) != 0);
      uint64_t v18 = a1 + v21 + 120;
LABEL_7:
      long long v19 = v41;
      *(_OWORD *)uint64_t v18 = v40;
      *(_OWORD *)(v18 + 16) = v19;
      *(void *)(v18 + 32) = v42;
      if (++v17 == 8) {
        return v15 + 40 == a2;
      }
    }
    uint64_t v14 = (void *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2) {
      return 1;
    }
  }
}

BOOL sub_1002DE8DC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = *(void **)(a1 + 16);
  int v17 = (void *)a2[4];
  uint64_t v18 = v17[1];
  if (v18 == 1)
  {
    uint64_t v24 = v17[3];
    long long v25 = (uint64_t *)(*(void *)(*v16 + 48 * v17[2] + 24) + 24 * v24);
    if (v24 < 0) {
      long long v25 = (uint64_t *)(*v16 + 48 * v17[2]);
    }
    uint64_t v22 = *v25;
    uint64_t v23 = ((v25[1] - *v25) >> 4) - 1;
    uint64_t v19 = v17[4];
  }
  else
  {
    if (v18) {
      goto LABEL_11;
    }
    uint64_t v20 = v17[3];
    uint64_t v19 = v17[4];
    if (v20 >= 0) {
      uint64_t v21 = (uint64_t *)(*(void *)(v15 + 24) + 24 * v20);
    }
    else {
      uint64_t v21 = *(uint64_t **)(a1 + 8);
    }
    uint64_t v22 = *v21;
    uint64_t v23 = ((v21[1] - *v21) >> 4) - 1;
  }
  uint64_t v26 = (double *)(v22 + 16 * ((v23 & ((v19 % v23) >> 63)) + v19 % v23));
  double v6 = *v26;
  double v5 = v26[1];
  long long v27 = (double *)(v22 + 16 * ((v23 & (((v19 + 1) % v23) >> 63)) + (v19 + 1) % v23));
  double v9 = *v27;
  double v10 = v27[1];
LABEL_11:
  long long v28 = (void *)a2[3];
  if (*v28 == 1)
  {
    uint64_t v34 = v28[2];
    long long v35 = (uint64_t *)(*(void *)(*v16 + 48 * v28[1] + 24) + 24 * v34);
    if (v34 < 0) {
      long long v35 = (uint64_t *)(*v16 + 48 * v28[1]);
    }
    uint64_t v32 = *v35;
    uint64_t v33 = ((v35[1] - *v35) >> 4) - 1;
    uint64_t v29 = v28[3];
  }
  else
  {
    if (*v28) {
      goto LABEL_21;
    }
    uint64_t v30 = v28[2];
    uint64_t v29 = v28[3];
    if (v30 >= 0) {
      long long v31 = (uint64_t *)(*(void *)(v15 + 24) + 24 * v30);
    }
    else {
      long long v31 = *(uint64_t **)(a1 + 8);
    }
    uint64_t v32 = *v31;
    uint64_t v33 = ((v31[1] - *v31) >> 4) - 1;
  }
  uint64_t v36 = (double *)(v32 + 16 * ((v33 & ((v29 % v33) >> 63)) + v29 % v33));
  double v12 = *v36;
  double v11 = v36[1];
  long long v37 = (double *)(v32 + 16 * ((v33 & (((v29 + 1) % v33) >> 63)) + (v29 + 1) % v33));
  double v3 = *v37;
  double v4 = v37[1];
LABEL_21:
  long long v38 = (void *)a3[3];
  if (*v38 == 1)
  {
    uint64_t v44 = v38[2];
    uint64_t v45 = *v16 + 48 * v38[1];
    long long v46 = (uint64_t *)(*(void *)(v45 + 24) + 24 * v44);
    if (v44 < 0) {
      long long v46 = (uint64_t *)v45;
    }
    uint64_t v42 = *v46;
    uint64_t v43 = ((v46[1] - *v46) >> 4) - 1;
    uint64_t v39 = v38[3];
  }
  else
  {
    if (*v38) {
      goto LABEL_30;
    }
    uint64_t v40 = v38[2];
    uint64_t v39 = v38[3];
    long long v41 = (uint64_t *)(*(void *)(v15 + 24) + 24 * v40);
    if (v40 < 0) {
      long long v41 = *(uint64_t **)(a1 + 8);
    }
    uint64_t v42 = *v41;
    uint64_t v43 = ((v41[1] - *v41) >> 4) - 1;
  }
  long long v47 = (double *)(v42 + 16 * ((v43 & ((v39 % v43) >> 63)) + v39 % v43));
  double v111 = *v47;
  double v112 = v47[1];
  long long v48 = (double *)(v42 + 16 * ((v43 & (((v39 + 1) % v43) >> 63)) + (v39 + 1) % v43));
  double v7 = *v48;
  double v8 = v48[1];
LABEL_30:
  double v117 = v6;
  double v118 = v5;
  double v115 = v9;
  double v116 = v10;
  double v113 = v3;
  double v114 = v4;
  v125[0] = v6 - v3;
  v124[0] = v10 - v4;
  double v49 = v5 - v4;
  v123[0] = v5 - v4;
  double v50 = v9 - v3;
  v122[0] = v9 - v3;
  double v51 = vabdd_f64(v6, v3);
  double v52 = vabdd_f64(v10, v4);
  double v53 = vabdd_f64(v5, v4);
  double v54 = vabdd_f64(v9, v3);
  if (v51 < v52) {
    double v51 = v52;
  }
  if (v51 < v53) {
    double v51 = v53;
  }
  if (v51 >= v54) {
    double v55 = v51;
  }
  else {
    double v55 = v54;
  }
  double v56 = (v10 - v4) * (v6 - v3);
  v121[0] = v56;
  double v57 = v49 * v50;
  double v58 = v56 - v49 * v50;
  double v119 = fabs(v56) + fabs(v49 * v50);
  v120[0] = v49 * v50;
  if (vabdd_f64(v56, v49 * v50) < v119 * 3.33066907e-16 && (v56 <= 0.0 || v57 > 0.0) && (v56 >= 0.0 || v57 < 0.0))
  {
    double v109 = v12;
    double v110 = v11;
    double v108 = v55;
    double v58 = sub_1001DF5F4(&v117, &v115, &v113, v125, v124, v123, v122, v121, v120, &v119);
    double v55 = v108;
    double v12 = v109;
    double v11 = v110;
    if (v58 == 0.0) {
      goto LABEL_43;
    }
  }
  else if (v58 == 0.0)
  {
LABEL_43:
    int v59 = 0;
    goto LABEL_56;
  }
  if ((*(void *)&v58 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v58 > 0.0) {
      int v59 = 1;
    }
    else {
      int v59 = -1;
    }
  }
  else
  {
    double v60 = v55 * 2.22044605e-16;
    double v61 = fabs(v58);
    if (v55 < 1.0) {
      double v60 = 2.22044605e-16;
    }
    if (v58 > 0.0) {
      int v59 = 1;
    }
    else {
      int v59 = -1;
    }
    if (v61 <= v60) {
      goto LABEL_43;
    }
  }
LABEL_56:
  double v117 = v6;
  double v118 = v5;
  double v115 = v9;
  double v116 = v10;
  double v113 = v7;
  double v114 = v8;
  v125[0] = v6 - v7;
  v124[0] = v10 - v8;
  double v62 = v5 - v8;
  v123[0] = v5 - v8;
  double v63 = v9 - v7;
  v122[0] = v9 - v7;
  double v64 = vabdd_f64(v6, v7);
  double v65 = vabdd_f64(v10, v8);
  double v66 = vabdd_f64(v5, v8);
  double v67 = vabdd_f64(v9, v7);
  if (v64 < v65) {
    double v64 = v65;
  }
  if (v64 < v66) {
    double v64 = v66;
  }
  if (v64 >= v67) {
    double v68 = v64;
  }
  else {
    double v68 = v67;
  }
  double v69 = (v10 - v8) * (v6 - v7);
  v121[0] = v69;
  double v70 = v62 * v63;
  double v71 = v69 - v62 * v63;
  double v119 = fabs(v69) + fabs(v62 * v63);
  v120[0] = v62 * v63;
  if (vabdd_f64(v69, v62 * v63) < v119 * 3.33066907e-16 && (v69 <= 0.0 || v70 > 0.0) && (v69 >= 0.0 || v70 < 0.0))
  {
    double v73 = v11;
    double v74 = v12;
    double v71 = sub_1001DF5F4(&v117, &v115, &v113, v125, v124, v123, v122, v121, v120, &v119);
    double v12 = v74;
    double v11 = v73;
    if (v71 == 0.0) {
      goto LABEL_69;
    }
  }
  else if (v71 == 0.0)
  {
    goto LABEL_69;
  }
  if ((*(void *)&v71 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v71 > 0.0) {
      int v103 = 1;
    }
    else {
      int v103 = -1;
    }
    BOOL v72 = v59 < v103;
    if (v59 != v103) {
      return v72;
    }
    goto LABEL_80;
  }
  double v75 = v68 * 2.22044605e-16;
  double v76 = fabs(v71);
  if (v68 < 1.0) {
    double v75 = 2.22044605e-16;
  }
  if (v71 > 0.0) {
    int v77 = 1;
  }
  else {
    int v77 = -1;
  }
  if (v76 > v75)
  {
    BOOL v72 = v59 < v77;
    if (v59 != v77) {
      return v72;
    }
    goto LABEL_80;
  }
LABEL_69:
  BOOL v72 = v59 < 0;
  if (v59) {
    return v72;
  }
LABEL_80:
  double v117 = v12;
  double v118 = v11;
  double v115 = v3;
  double v116 = v4;
  double v113 = v7;
  double v114 = v8;
  v125[0] = v12 - v7;
  v124[0] = v4 - v8;
  double v78 = v11 - v8;
  v123[0] = v11 - v8;
  double v79 = v3 - v7;
  v122[0] = v3 - v7;
  double v80 = vabdd_f64(v12, v7);
  double v81 = vabdd_f64(v4, v8);
  double v82 = vabdd_f64(v11, v8);
  double v83 = vabdd_f64(v3, v7);
  if (v80 < v81) {
    double v80 = v81;
  }
  if (v80 < v82) {
    double v80 = v82;
  }
  if (v80 >= v83) {
    double v84 = v80;
  }
  else {
    double v84 = v83;
  }
  double v85 = (v4 - v8) * (v12 - v7);
  v121[0] = v85;
  double v86 = v78 * v79;
  double v87 = v85 - v78 * v79;
  double v119 = fabs(v85) + fabs(v78 * v79);
  v120[0] = v78 * v79;
  if (vabdd_f64(v85, v78 * v79) >= v119 * 3.33066907e-16 || v85 > 0.0 && v86 <= 0.0) {
    goto LABEL_93;
  }
  double v88 = v112;
  if (v85 >= 0.0 || v86 < 0.0)
  {
    double v87 = sub_1001DF5F4(&v117, &v115, &v113, v125, v124, v123, v122, v121, v120, &v119);
LABEL_93:
    double v88 = v112;
  }
  if (v87 == 0.0)
  {
LABEL_95:
    int v89 = 0;
    goto LABEL_96;
  }
  if ((*(void *)&v87 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v87 > 0.0) {
      int v89 = 1;
    }
    else {
      int v89 = -1;
    }
  }
  else
  {
    double v104 = v84 * 2.22044605e-16;
    double v105 = fabs(v87);
    if (v84 < 1.0) {
      double v104 = 2.22044605e-16;
    }
    if (v87 > 0.0) {
      int v89 = 1;
    }
    else {
      int v89 = -1;
    }
    if (v105 <= v104) {
      goto LABEL_95;
    }
  }
LABEL_96:
  double v117 = v111;
  double v118 = v88;
  double v115 = v7;
  double v116 = v8;
  double v113 = v3;
  double v114 = v4;
  double v90 = v111 - v3;
  v125[0] = v111 - v3;
  v124[0] = v8 - v4;
  double v91 = v88 - v4;
  v123[0] = v88 - v4;
  double v92 = v7 - v3;
  v122[0] = v7 - v3;
  double v93 = vabdd_f64(v111, v3);
  double v94 = vabdd_f64(v8, v4);
  double v95 = vabdd_f64(v88, v4);
  double v96 = vabdd_f64(v7, v3);
  if (v93 < v94) {
    double v93 = v94;
  }
  if (v93 < v95) {
    double v93 = v95;
  }
  if (v93 >= v96) {
    double v97 = v93;
  }
  else {
    double v97 = v96;
  }
  double v98 = v90 * (v8 - v4);
  v121[0] = v98;
  double v99 = v91 * v92;
  double v100 = v98 - v91 * v92;
  double v119 = fabs(v98) + fabs(v91 * v92);
  v120[0] = v91 * v92;
  if (vabdd_f64(v98, v91 * v92) < v119 * 3.33066907e-16 && (v98 <= 0.0 || v99 > 0.0) && (v98 >= 0.0 || v99 < 0.0)) {
    double v100 = sub_1001DF5F4(&v117, &v115, &v113, v125, v124, v123, v122, v121, v120, &v119);
  }
  if (v100 == 0.0) {
    goto LABEL_110;
  }
  if ((*(void *)&v100 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v100 > 0.0) {
      int v101 = 1;
    }
    else {
      int v101 = -1;
    }
  }
  else
  {
    double v106 = v97 * 2.22044605e-16;
    double v107 = fabs(v100);
    if (v97 < 1.0) {
      double v106 = 2.22044605e-16;
    }
    if (v100 > 0.0) {
      int v101 = 1;
    }
    else {
      int v101 = -1;
    }
    if (v107 <= v106) {
LABEL_110:
    }
      int v101 = 0;
  }
  BOOL v72 = v101 < v89;
  if (v101 == v89) {
    return *a2 < *a3;
  }
  return v72;
}

__n128 sub_1002DF0CC(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5, uint64_t a6)
{
  sub_1002DE1E0((long long *)a1, (long long *)a2, (long long *)a3, a6);
  if (sub_1002DDF0C(a6, a4, (void *)a3))
  {
    long long v12 = *(_OWORD *)a3;
    long long v13 = *(_OWORD *)(a3 + 16);
    uint64_t v14 = *(void *)(a3 + 32);
    uint64_t v15 = *((void *)a4 + 4);
    long long v16 = a4[1];
    *(_OWORD *)a3 = *a4;
    *(_OWORD *)(a3 + 16) = v16;
    *(void *)(a3 + 32) = v15;
    *((void *)a4 + 4) = v14;
    *a4 = v12;
    a4[1] = v13;
    if (sub_1002DDF0C(a6, (void *)a3, (void *)a2))
    {
      long long v17 = *(_OWORD *)a2;
      long long v18 = *(_OWORD *)(a2 + 16);
      uint64_t v19 = *(void *)(a2 + 32);
      uint64_t v20 = *(void *)(a3 + 32);
      long long v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      *(void *)(a2 + 32) = v20;
      *(void *)(a3 + 32) = v19;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v18;
      if (sub_1002DDF0C(a6, (void *)a2, (void *)a1))
      {
        long long v22 = *(_OWORD *)a1;
        long long v23 = *(_OWORD *)(a1 + 16);
        uint64_t v24 = *(void *)(a1 + 32);
        uint64_t v25 = *(void *)(a2 + 32);
        long long v26 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v26;
        *(void *)(a1 + 32) = v25;
        *(void *)(a2 + 32) = v24;
        *(_OWORD *)a2 = v22;
        *(_OWORD *)(a2 + 16) = v23;
      }
    }
  }
  if (sub_1002DDF0C(a6, a5, a4))
  {
    long long v28 = *a4;
    long long v29 = a4[1];
    uint64_t v30 = *((void *)a4 + 4);
    uint64_t v31 = *((void *)a5 + 4);
    long long v32 = a5[1];
    *a4 = *a5;
    a4[1] = v32;
    *((void *)a4 + 4) = v31;
    *((void *)a5 + 4) = v30;
    *a5 = v28;
    a5[1] = v29;
    if (sub_1002DDF0C(a6, a4, (void *)a3))
    {
      long long v33 = *(_OWORD *)a3;
      long long v34 = *(_OWORD *)(a3 + 16);
      uint64_t v35 = *(void *)(a3 + 32);
      uint64_t v36 = *((void *)a4 + 4);
      long long v37 = a4[1];
      *(_OWORD *)a3 = *a4;
      *(_OWORD *)(a3 + 16) = v37;
      *(void *)(a3 + 32) = v36;
      *((void *)a4 + 4) = v35;
      *a4 = v33;
      a4[1] = v34;
      if (sub_1002DDF0C(a6, (void *)a3, (void *)a2))
      {
        long long v38 = *(_OWORD *)a2;
        long long v39 = *(_OWORD *)(a2 + 16);
        uint64_t v40 = *(void *)(a2 + 32);
        uint64_t v41 = *(void *)(a3 + 32);
        long long v42 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v42;
        *(void *)(a2 + 32) = v41;
        *(void *)(a3 + 32) = v40;
        *(_OWORD *)a3 = v38;
        *(_OWORD *)(a3 + 16) = v39;
        if (sub_1002DDF0C(a6, (void *)a2, (void *)a1))
        {
          __n128 result = *(__n128 *)a1;
          long long v43 = *(_OWORD *)(a1 + 16);
          uint64_t v44 = *(void *)(a1 + 32);
          uint64_t v45 = *(void *)(a2 + 32);
          long long v46 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v46;
          *(void *)(a1 + 32) = v45;
          *(void *)(a2 + 32) = v44;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v43;
        }
      }
    }
  }
  return result;
}

long long *sub_1002DF294(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 40 * v10);
      do
      {
        sub_1002DF564(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (sub_1002DDF0C(a4, v14, (void *)a1))
        {
          long long v15 = *v14;
          long long v16 = v14[1];
          uint64_t v17 = *((void *)v14 + 4);
          uint64_t v18 = *(void *)(a1 + 32);
          long long v19 = *(_OWORD *)(a1 + 16);
          *uint64_t v14 = *(_OWORD *)a1;
          v14[1] = v19;
          *((void *)v14 + 4) = v18;
          *(void *)(a1 + 32) = v17;
          *(_OWORD *)a1 = v15;
          *(_OWORD *)(a1 + 16) = v16;
          sub_1002DF564(a1, a4, v9, (__n128 *)a1);
        }
        uint64_t v14 = (long long *)((char *)v14 + 40);
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 < 41)
    {
      return v13;
    }
    else
    {
      long long v43 = v13;
      uint64_t v44 = a2;
      int64_t v20 = v8 / 0x28uLL;
      do
      {
        uint64_t v22 = 0;
        __n128 v45 = *(__n128 *)a1;
        long long v46 = *(_OWORD *)(a1 + 16);
        uint64_t v47 = *(void *)(a1 + 32);
        uint64_t v23 = a1;
        do
        {
          uint64_t v26 = v23 + 40 * v22 + 40;
          uint64_t v27 = (2 * v22) | 1;
          uint64_t v28 = 2 * v22 + 2;
          if (v28 < v20
            && sub_1002DDF0C(a4, (void *)(v23 + 40 * v22 + 40), (void *)(v23 + 40 * v22 + 80)))
          {
            v26 += 40;
            uint64_t v27 = v28;
          }
          long long v24 = *(_OWORD *)v26;
          long long v25 = *(_OWORD *)(v26 + 16);
          *(void *)(v23 + 32) = *(void *)(v26 + 32);
          *(_OWORD *)uint64_t v23 = v24;
          *(_OWORD *)(v23 + 16) = v25;
          uint64_t v23 = v26;
          uint64_t v22 = v27;
        }
        while (v27 <= (uint64_t)((unint64_t)(v20 - 2) >> 1));
        uint64_t v29 = (uint64_t)v44 - 40;
        BOOL v30 = v26 == (void)v44 - 40;
        uint64_t v44 = (long long *)((char *)v44 - 40);
        if (v30)
        {
          *(void *)(v26 + 32) = v47;
          *(__n128 *)uint64_t v26 = v45;
          *(_OWORD *)(v26 + 16) = v46;
        }
        else
        {
          __n128 v31 = *(__n128 *)v29;
          long long v32 = *(_OWORD *)(v29 + 16);
          *(void *)(v26 + 32) = *(void *)(v29 + 32);
          *(__n128 *)uint64_t v26 = v31;
          *(_OWORD *)(v26 + 16) = v32;
          *(__n128 *)uint64_t v29 = v45;
          *(_OWORD *)(v29 + 16) = v46;
          *(void *)(v29 + 32) = v47;
          uint64_t v33 = v26 - a1 + 40;
          if (v33 >= 41)
          {
            unint64_t v34 = (v33 / 0x28uLL - 2) >> 1;
            unint64_t v35 = a1 + 40 * v34;
            if (sub_1002DDF0C(a4, (void *)v35, (void *)v26))
            {
              long long v36 = *(_OWORD *)v26;
              long long v37 = *(_OWORD *)(v26 + 16);
              uint64_t v50 = *(void *)(v26 + 32);
              long long v48 = v36;
              long long v49 = v37;
              do
              {
                uint64_t v38 = v35;
                long long v39 = *(_OWORD *)v35;
                long long v40 = *(_OWORD *)(v35 + 16);
                *(void *)(v26 + 32) = *(void *)(v35 + 32);
                *(_OWORD *)uint64_t v26 = v39;
                *(_OWORD *)(v26 + 16) = v40;
                if (!v34) {
                  break;
                }
                unint64_t v34 = (v34 - 1) >> 1;
                unint64_t v35 = a1 + 40 * v34;
                uint64_t v26 = v38;
              }
              while ((sub_1002DDF0C(a4, (void *)v35, &v48) & 1) != 0);
              long long v41 = v49;
              *(_OWORD *)uint64_t v38 = v48;
              *(_OWORD *)(v38 + 16) = v41;
              *(void *)(v38 + 32) = v50;
            }
          }
        }
      }
      while (v20-- > 2);
      return v43;
    }
  }
  return a3;
}

__n128 sub_1002DF564(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v26 = v4;
    uint64_t v27 = v5;
    double v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      long long v13 = (long long *)(a1 + 40 * v12);
      int64_t v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_1002DDF0C(a2, (void *)(a1 + 40 * v12), (void *)v13 + 5))
      {
        long long v13 = (long long *)((char *)v13 + 40);
        int64_t v12 = v14;
      }
      if ((sub_1002DDF0C(a2, v13, v7) & 1) == 0)
      {
        __n128 v16 = v7[1];
        __n128 v23 = *v7;
        __n128 v24 = v16;
        uint64_t v25 = v7[2].n128_i64[0];
        do
        {
          uint64_t v17 = (__n128 *)v13;
          __n128 v18 = (__n128)*v13;
          long long v19 = v13[1];
          v7[2].n128_u64[0] = *((void *)v13 + 4);
          *double v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12) {
            break;
          }
          uint64_t v20 = (2 * v12) | 1;
          long long v13 = (long long *)(a1 + 40 * v20);
          uint64_t v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if (sub_1002DDF0C(a2, (void *)(a1 + 40 * v20), (void *)v13 + 5))
            {
              long long v13 = (long long *)((char *)v13 + 40);
              uint64_t v20 = v21;
            }
          }
          double v7 = v17;
          int64_t v12 = v20;
        }
        while (!sub_1002DDF0C(a2, v13, &v23));
        __n128 result = v23;
        __n128 v22 = v24;
        v17[2].n128_u64[0] = v25;
        *uint64_t v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

double sub_1002DF6D8(char **a1, double *a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6, void *a7, int a8)
{
  sub_1002DFA58(a6, a7, (void *)(a3 + 8), &v58, &v57, &v56);
  uint64_t v16 = 0;
  if (*(void *)(a3 + 48) == *(void *)(a3 + 56)) {
    uint64_t v17 = &v56;
  }
  else {
    uint64_t v17 = &v57;
  }
  long long v55 = *v17;
  double v18 = *a2;
  double v19 = a2[1];
  double v20 = fabs(*a2);
  double v21 = fabs(v19);
  BOOL v22 = (*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v23 = *(void *)(a3 + 8);
  uint64_t v24 = *a7 + 48 * *(void *)(a3 + 16);
  uint64_t v25 = (void *)(v24 + 24);
  uint64_t v27 = *(void *)(a3 + 24);
  uint64_t v26 = *(void *)(a3 + 32);
  uint64_t v28 = a6[3] + 24 * v27;
  if (v27 < 0) {
    uint64_t v28 = (uint64_t)a6;
  }
  double v29 = *((double *)&v58 + 1);
  double v30 = *(double *)&v58;
  while (1)
  {
    double v34 = fabs(v30);
    double v35 = fabs(v29);
    if (v34 < v20) {
      double v34 = v20;
    }
    if (v34 < v35) {
      double v34 = v35;
    }
    if (v34 < v21) {
      double v34 = v21;
    }
    double v36 = v34 >= 1.0 ? v34 * 1000000000.0 : 1000000000.0;
    if (v30 != v18)
    {
      char v37 = (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v22;
      if (v37) {
        break;
      }
      double v30 = vabdd_f64(v30, v18);
      if (v30 > v36 * 2.22044605e-16) {
        break;
      }
    }
    if (v29 == v19)
    {
      BOOL v38 = 1;
      if (v16 < -9) {
        break;
      }
    }
    else
    {
      if ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        break;
      }
      double v29 = vabdd_f64(v29, v19);
      double v30 = v36 * 2.22044605e-16;
      BOOL v38 = v29 <= v36 * 2.22044605e-16;
      if (v16 < -9) {
        break;
      }
    }
    if (!v38) {
      break;
    }
    long long v40 = (uint64_t *)v28;
    if (!v23) {
      goto LABEL_7;
    }
    if (v23 == 1)
    {
      long long v40 = (uint64_t *)(*v25 + 24 * v27);
      if (v27 < 0) {
        long long v40 = (uint64_t *)v24;
      }
LABEL_7:
      uint64_t v31 = *v40;
      uint64_t v32 = ((v40[1] - *v40) >> 4) - 1;
      uint64_t v33 = (double *)(v31 + 16 * ((v32 & (((v26 - 1 + v16) % v32) >> 63)) + (v26 - 1 + v16) % v32));
      double v30 = *v33;
      double v29 = v33[1];
    }
    *(double *)&long long v58 = v30;
    *((double *)&v58 + 1) = v29;
    --v16;
  }
  unint64_t v41 = 0;
  double v42 = *((double *)&v55 + 1);
  double v43 = *(double *)&v55;
  while (1)
  {
    double v47 = fabs(v43);
    double v48 = fabs(v42);
    if (v47 < v20) {
      double v47 = v20;
    }
    if (v47 < v48) {
      double v47 = v48;
    }
    if (v47 < v21) {
      double v47 = v21;
    }
    double v49 = v47 >= 1.0 ? v47 * 1000000000.0 : 1000000000.0;
    if (v43 != v18)
    {
      char v50 = (*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v22;
      if (v50) {
        break;
      }
      double v43 = vabdd_f64(v43, v18);
      if (v43 > v49 * 2.22044605e-16) {
        break;
      }
    }
    if (v42 == v19)
    {
      BOOL v51 = 1;
      if (v41 > 9) {
        break;
      }
    }
    else
    {
      if ((*(void *)&v42 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        break;
      }
      double v42 = vabdd_f64(v42, v19);
      double v43 = v49 * 2.22044605e-16;
      BOOL v51 = v42 <= v49 * 2.22044605e-16;
      if (v41 > 9) {
        break;
      }
    }
    if (!v51) {
      break;
    }
    double v53 = (uint64_t *)v28;
    if (!v23) {
      goto LABEL_39;
    }
    if (v23 == 1)
    {
      double v53 = (uint64_t *)(*v25 + 24 * v27);
      if (v27 < 0) {
        double v53 = (uint64_t *)v24;
      }
LABEL_39:
      uint64_t v44 = *v53;
      uint64_t v45 = ((v53[1] - *v53) >> 4) - 1;
      long long v46 = (double *)(v44 + 16 * ((v45 & (((uint64_t)(v26 + 1 + v41) % v45) >> 63)) + (uint64_t)(v26 + 1 + v41) % v45));
      double v43 = *v46;
      double v42 = v46[1];
    }
    *(double *)&long long v55 = v43;
    *((double *)&v55 + 1) = v42;
    ++v41;
  }
  sub_1002DFBE4((uint64_t)a1, a4, a5, &v58, (int *)a3, a8);
  sub_1002DFE24(a1, a4, a5, &v55, (int *)a3);
  return *(double *)&v58;
}

uint64_t sub_1002DFA58(uint64_t *a1, void *a2, void *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6)
{
  if (*a3 == 1)
  {
    uint64_t v8 = a3[2];
    double v7 = (uint64_t *)(*a2 + 48 * a3[1]);
    if (v8 >= 0) {
      double v7 = (uint64_t *)(v7[3] + 24 * v8);
    }
  }
  else
  {
    if (*a3) {
      return 0;
    }
    uint64_t v6 = a3[2];
    if (v6 >= 0) {
      double v7 = (uint64_t *)(a1[3] + 24 * v6);
    }
    else {
      double v7 = a1;
    }
  }
  uint64_t v9 = *v7;
  uint64_t v10 = ((v7[1] - *v7) >> 4) - 1;
  *a4 = *(_OWORD *)(v9 + 16 * ((v10 & ((a3[3] % v10) >> 63)) + a3[3] % v10));
  if (*a3 == 1)
  {
    uint64_t v13 = a3[2];
    int64_t v12 = (uint64_t *)(*a2 + 48 * a3[1]);
    if (v13 >= 0) {
      int64_t v12 = (uint64_t *)(v12[3] + 24 * v13);
    }
  }
  else
  {
    if (*a3) {
      return 0;
    }
    uint64_t v11 = a3[2];
    if (v11 >= 0) {
      int64_t v12 = (uint64_t *)(a1[3] + 24 * v11);
    }
    else {
      int64_t v12 = a1;
    }
  }
  uint64_t v14 = *v12;
  uint64_t v15 = ((v12[1] - *v12) >> 4) - 1;
  *a5 = *(_OWORD *)(v14 + 16 * ((v15 & (((a3[3] + 1) % v15) >> 63)) + (a3[3] + 1) % v15));
  if (*a3 == 1)
  {
    uint64_t v19 = a3[2];
    uint64_t v17 = (uint64_t *)(*a2 + 48 * a3[1]);
    if (v19 >= 0) {
      uint64_t v17 = (uint64_t *)(v17[3] + 24 * v19);
    }
    goto LABEL_23;
  }
  if (*a3) {
    return 0;
  }
  uint64_t v16 = a3[2];
  if (v16 >= 0) {
    uint64_t v17 = (uint64_t *)(a1[3] + 24 * v16);
  }
  else {
    uint64_t v17 = a1;
  }
LABEL_23:
  uint64_t v20 = *v17;
  uint64_t v21 = ((v17[1] - *v17) >> 4) - 1;
  *a6 = *(_OWORD *)(v20 + 16 * ((v21 & (((a3[3] + 2) % v21) >> 63)) + (a3[3] + 2) % v21));
  return 1;
}

void sub_1002DFBE4(uint64_t a1, uint64_t a2, int a3, _OWORD *a4, int *a5, int a6)
{
  int v11 = *a5;
  *(_OWORD *)&uint64_t v27[4] = *(_OWORD *)(a5 + 2);
  *(_OWORD *)&v27[20] = *(_OWORD *)(a5 + 6);
  *(void *)&v27[36] = *((void *)a5 + 5);
  uint64_t v13 = *(_OWORD **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 >= v12)
  {
    uint64_t v15 = *(_OWORD **)a1;
    uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v13 - *(void *)a1) >> 4);
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) > 0x249249249249249) {
      sub_1000A9108();
    }
    unint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - (void)v15) >> 4);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x124924924924924) {
      unint64_t v19 = 0x249249249249249;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 > 0x249249249249249) {
        sub_1000A6A10();
      }
      uint64_t v20 = (char *)operator new(112 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v20[112 * v16];
    *(_OWORD *)uint64_t v21 = *a4;
    *((_OWORD *)v21 + 1) = xmmword_1003E6BE0;
    *(_OWORD *)(v21 + 68) = *(_OWORD *)v27;
    *((void *)v21 + 4) = a2;
    *((_DWORD *)v21 + 10) = a3;
    *(void *)(v21 + 52) = 0;
    *(void *)(v21 + 44) = 0;
    *((_DWORD *)v21 + 15) = 0;
    *((_DWORD *)v21 + 16) = v11;
    *(_OWORD *)(v21 + 84) = *(_OWORD *)&v27[16];
    uint64_t v14 = v21 + 112;
    *((_OWORD *)v21 + 6) = *(_OWORD *)&v27[28];
    if (v13 != v15)
    {
      do
      {
        long long v22 = *(v13 - 7);
        long long v23 = *(v13 - 5);
        *((_OWORD *)v21 - 6) = *(v13 - 6);
        *((_OWORD *)v21 - 5) = v23;
        *((_OWORD *)v21 - 7) = v22;
        long long v24 = *(v13 - 4);
        long long v25 = *(v13 - 3);
        long long v26 = *(v13 - 1);
        *((_OWORD *)v21 - 2) = *(v13 - 2);
        *((_OWORD *)v21 - 1) = v26;
        *((_OWORD *)v21 - 4) = v24;
        *((_OWORD *)v21 - 3) = v25;
        v21 -= 112;
        v13 -= 7;
      }
      while (v13 != v15);
      uint64_t v13 = *(_OWORD **)a1;
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = &v20[112 * v19];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    *uint64_t v13 = *a4;
    v13[1] = xmmword_1003E6BE0;
    *(_OWORD *)((char *)v13 + 68) = *(_OWORD *)v27;
    *((void *)v13 + 4) = a2;
    *((_DWORD *)v13 + 10) = a3;
    *(void *)((char *)v13 + 52) = 0;
    *(void *)((char *)v13 + 44) = 0;
    *((_DWORD *)v13 + 15) = 0;
    *((_DWORD *)v13 + 16) = v11;
    *(_OWORD *)((char *)v13 + 84) = *(_OWORD *)&v27[16];
    uint64_t v14 = v13 + 7;
    v13[6] = *(_OWORD *)&v27[28];
  }
  *(void *)(a1 + 8) = v14;
  if (a6)
  {
    *(_OWORD *)(a1 + 24) = *a4;
    ++*(void *)(a1 + 40);
  }
}

void sub_1002DFE24(char **a1, uint64_t a2, int a3, _OWORD *a4, int *a5)
{
  int v9 = *a5;
  *(_OWORD *)&v25[4] = *(_OWORD *)(a5 + 2);
  *(_OWORD *)&v25[20] = *(_OWORD *)(a5 + 6);
  *(void *)&v25[36] = *((void *)a5 + 5);
  int v11 = a1[1];
  unint64_t v10 = (unint64_t)a1[2];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = *a1;
    uint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v11 - *a1) >> 4);
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x249249249249249) {
      sub_1000A9108();
    }
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - (void)v13) >> 4);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x124924924924924) {
      unint64_t v17 = 0x249249249249249;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 > 0x249249249249249) {
        sub_1000A6A10();
      }
      unint64_t v18 = (char *)operator new(112 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    unint64_t v19 = &v18[112 * v14];
    *(_OWORD *)unint64_t v19 = *a4;
    *((_OWORD *)v19 + 1) = xmmword_1003E6BE0;
    *(_OWORD *)(v19 + 68) = *(_OWORD *)v25;
    *((void *)v19 + 4) = a2;
    *((_DWORD *)v19 + 10) = a3;
    *((_DWORD *)v19 + 11) = 1;
    *((void *)v19 + 6) = 0;
    *((void *)v19 + 7) = 0;
    *((_DWORD *)v19 + 16) = v9;
    *(_OWORD *)(v19 + 84) = *(_OWORD *)&v25[16];
    unint64_t v12 = v19 + 112;
    *((_OWORD *)v19 + 6) = *(_OWORD *)&v25[28];
    if (v11 != v13)
    {
      do
      {
        long long v20 = *((_OWORD *)v11 - 7);
        long long v21 = *((_OWORD *)v11 - 5);
        *((_OWORD *)v19 - 6) = *((_OWORD *)v11 - 6);
        *((_OWORD *)v19 - 5) = v21;
        *((_OWORD *)v19 - 7) = v20;
        long long v22 = *((_OWORD *)v11 - 4);
        long long v23 = *((_OWORD *)v11 - 3);
        long long v24 = *((_OWORD *)v11 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v11 - 2);
        *((_OWORD *)v19 - 1) = v24;
        *((_OWORD *)v19 - 4) = v22;
        *((_OWORD *)v19 - 3) = v23;
        v19 -= 112;
        v11 -= 112;
      }
      while (v11 != v13);
      int v11 = *a1;
    }
    *a1 = v19;
    a1[1] = v12;
    a1[2] = &v18[112 * v17];
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(_OWORD *)int v11 = *a4;
    *((_OWORD *)v11 + 1) = xmmword_1003E6BE0;
    *(_OWORD *)(v11 + 68) = *(_OWORD *)v25;
    *((void *)v11 + 4) = a2;
    *((_DWORD *)v11 + 10) = a3;
    *((_DWORD *)v11 + 11) = 1;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((_DWORD *)v11 + 16) = v9;
    *(_OWORD *)(v11 + 84) = *(_OWORD *)&v25[16];
    unint64_t v12 = v11 + 112;
    *((_OWORD *)v11 + 6) = *(_OWORD *)&v25[28];
  }
  a1[1] = v12;
}

uint64_t sub_1002E0048(double **a1, double *a2, double *a3)
{
  uint64_t v6 = *a1;
  double v7 = a1[1];
  double v58 = 1.0;
  double v8 = sub_10004D628(v6, v7, a2, &v58);
  if (v8 == 0.0)
  {
LABEL_2:
    int v9 = 0;
    goto LABEL_12;
  }
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0) {
      int v9 = 1;
    }
    else {
      int v9 = -1;
    }
  }
  else
  {
    double v10 = fabs(v8);
    if (v8 > 0.0) {
      int v9 = 1;
    }
    else {
      int v9 = -1;
    }
    if (v10 <= v58 * 2.22044605e-16) {
      goto LABEL_2;
    }
  }
LABEL_12:
  int v11 = *a1;
  unint64_t v12 = a1[1];
  double v58 = 1.0;
  double v13 = sub_10004D628(v11, v12, a3, &v58);
  if (v13 == 0.0) {
    goto LABEL_13;
  }
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v13 > 0.0) {
      int v20 = 1;
    }
    else {
      int v20 = -1;
    }
    if (v9) {
      goto LABEL_87;
    }
    goto LABEL_32;
  }
  double v21 = fabs(v13);
  if (v13 > 0.0) {
    int v20 = 1;
  }
  else {
    int v20 = -1;
  }
  if (v21 > v58 * 2.22044605e-16)
  {
    if (v9) {
      goto LABEL_87;
    }
LABEL_32:
    long long v23 = a1[1];
    double v24 = v23[1];
    double v25 = (*a1)[1] - v24;
    double v26 = *v23 - **a1;
    double v27 = -v25;
    if (v26 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v23 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_85;
      }
      double v47 = fabs(v26);
      double v48 = 2.22044605e-16;
      if (v47 >= 1.0) {
        double v48 = v47 * 2.22044605e-16;
      }
      if (v47 > v48) {
        goto LABEL_85;
      }
    }
    if (v25 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs((*a1)[1] - v24)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_85;
      }
      double v28 = fabs(v27);
      double v29 = 2.22044605e-16;
      if (v28 >= 1.0) {
        double v29 = v28 * 2.22044605e-16;
      }
      if (v28 > v29)
      {
LABEL_85:
        if (v24 * v25 - v26 * *v23 + a2[1] * v27 + v26 * *a2 < 0.0) {
          return 1;
        }
      }
    }
    goto LABEL_87;
  }
LABEL_13:
  uint64_t v14 = a1[1];
  double v15 = v14[1];
  double v16 = (*a1)[1] - v15;
  double v17 = *v14 - **a1;
  double v18 = -v16;
  double v19 = v15 * v16 - v17 * *v14;
  if (v9)
  {
    if (v17 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_48;
      }
      double v30 = fabs(v17);
      double v31 = 2.22044605e-16;
      if (v30 >= 1.0) {
        double v31 = v30 * 2.22044605e-16;
      }
      if (v30 > v31) {
        goto LABEL_48;
      }
    }
    if (v16 == 0.0) {
      goto LABEL_16;
    }
    if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_48;
    }
    double v32 = fabs(v18);
    double v33 = 2.22044605e-16;
    if (v32 >= 1.0) {
      double v33 = v32 * 2.22044605e-16;
    }
    if (v32 <= v33)
    {
LABEL_16:
      int v20 = 0;
    }
    else
    {
LABEL_48:
      int v20 = 0;
      uint64_t result = 0;
      if (v19 + a3[1] * v18 + v17 * *a3 < 0.0) {
        return result;
      }
    }
LABEL_87:
    BOOL v42 = v9 < v20;
    if (v9 == v20)
    {
      double v49 = a1[1];
      double v58 = 1.0;
      double v50 = sub_10004D628(v49, a2, a3, &v58);
      if (v50 == 0.0) {
        return 0;
      }
      if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v50 > 0.0) {
          int v52 = 1;
        }
        else {
          int v52 = -1;
        }
      }
      else
      {
        double v51 = fabs(v50);
        if (v50 > 0.0) {
          int v52 = 1;
        }
        else {
          int v52 = -1;
        }
        if (v51 <= v58 * 2.22044605e-16) {
          return 0;
        }
      }
      double v53 = a1[1];
      double v58 = 1.0;
      double v54 = sub_10004D628(v53, a3, a2, &v58);
      if (v54 != 0.0)
      {
        if ((*(void *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v54 > 0.0) {
            int v55 = 1;
          }
          else {
            int v55 = -1;
          }
          return !(v52 + v55) && v55 < v52;
        }
        double v56 = fabs(v54);
        if (v54 > 0.0) {
          int v55 = 1;
        }
        else {
          int v55 = -1;
        }
        if (v56 > v58 * 2.22044605e-16) {
          return !(v52 + v55) && v55 < v52;
        }
      }
      int v55 = 0;
      return !(v52 + v55) && v55 < v52;
    }
    return v42;
  }
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_59;
    }
    double v35 = fabs(v17);
    double v36 = 2.22044605e-16;
    if (v35 >= 1.0) {
      double v36 = v35 * 2.22044605e-16;
    }
    if (v35 > v36) {
      goto LABEL_59;
    }
  }
  if (v16 == 0.0) {
    goto LABEL_26;
  }
  if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_59;
  }
  double v37 = fabs(v18);
  double v38 = 2.22044605e-16;
  if (v37 >= 1.0) {
    double v38 = v37 * 2.22044605e-16;
  }
  if (v37 <= v38)
  {
LABEL_26:
    int v22 = 0;
    if (v17 != 0.0) {
      goto LABEL_65;
    }
  }
  else
  {
LABEL_59:
    double v39 = v19 + a2[1] * v18 + v17 * *a2;
    if (v39 > 0.0) {
      int v22 = 1;
    }
    else {
      int v22 = -1;
    }
    if (v39 == 0.0) {
      int v22 = 0;
    }
    if (v17 != 0.0)
    {
LABEL_65:
      if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_75;
      }
      double v40 = fabs(v17);
      double v41 = 2.22044605e-16;
      if (v40 >= 1.0) {
        double v41 = v40 * 2.22044605e-16;
      }
      if (v40 > v41) {
        goto LABEL_75;
      }
    }
  }
  if (v16 == 0.0) {
    return v22 < 0;
  }
  if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v43 = fabs(v18);
    double v44 = 2.22044605e-16;
    if (v43 >= 1.0) {
      double v44 = v43 * 2.22044605e-16;
    }
    if (v43 <= v44) {
      return v22 < 0;
    }
  }
LABEL_75:
  double v45 = v19 + a3[1] * v18 + v17 * *a3;
  if (v45 > 0.0) {
    int v46 = 1;
  }
  else {
    int v46 = -1;
  }
  if (v45 == 0.0) {
    int v46 = 0;
  }
  return v22 < v46;
}

void sub_1002E05E8(long long *a1, __n128 *a2, double **a3, uint64_t a4, char a5)
{
uint64_t sub_1002E0D14(double **a1, uint64_t a2, uint64_t a3)
{
  char v6 = *a1;
  double v7 = a1[1];
  double v69 = 1.0;
  double v8 = sub_10004D628(v6, v7, (double *)a2, &v69);
  if (v8 == 0.0)
  {
LABEL_2:
    int v9 = 0;
    goto LABEL_12;
  }
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0) {
      int v9 = 1;
    }
    else {
      int v9 = -1;
    }
  }
  else
  {
    double v10 = fabs(v8);
    if (v8 > 0.0) {
      int v9 = 1;
    }
    else {
      int v9 = -1;
    }
    if (v10 <= v69 * 2.22044605e-16) {
      goto LABEL_2;
    }
  }
LABEL_12:
  int v11 = *a1;
  unint64_t v12 = a1[1];
  double v69 = 1.0;
  double v13 = sub_10004D628(v11, v12, (double *)a3, &v69);
  if (v13 == 0.0) {
    goto LABEL_13;
  }
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v13 > 0.0) {
      int v20 = 1;
    }
    else {
      int v20 = -1;
    }
    if (v9) {
      goto LABEL_89;
    }
    goto LABEL_32;
  }
  double v21 = fabs(v13);
  if (v13 > 0.0) {
    int v20 = 1;
  }
  else {
    int v20 = -1;
  }
  if (v21 > v69 * 2.22044605e-16)
  {
    if (v9) {
      goto LABEL_89;
    }
LABEL_32:
    long long v23 = a1[1];
    double v24 = v23[1];
    double v25 = (*a1)[1] - v24;
    double v26 = *v23 - **a1;
    double v27 = -v25;
    if (v26 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v23 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_87;
      }
      double v47 = fabs(v26);
      double v48 = 2.22044605e-16;
      if (v47 >= 1.0) {
        double v48 = v47 * 2.22044605e-16;
      }
      if (v47 > v48) {
        goto LABEL_87;
      }
    }
    if (v25 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs((*a1)[1] - v24)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_87;
      }
      double v28 = fabs(v27);
      double v29 = 2.22044605e-16;
      if (v28 >= 1.0) {
        double v29 = v28 * 2.22044605e-16;
      }
      if (v28 > v29)
      {
LABEL_87:
        if (v24 * v25 - v26 * *v23 + *(double *)(a2 + 8) * v27 + v26 * *(double *)a2 < 0.0) {
          return 1;
        }
      }
    }
    goto LABEL_89;
  }
LABEL_13:
  uint64_t v14 = a1[1];
  double v15 = v14[1];
  double v16 = (*a1)[1] - v15;
  double v17 = *v14 - **a1;
  double v18 = -v16;
  double v19 = v15 * v16 - v17 * *v14;
  if (!v9)
  {
    if (v17 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_59;
      }
      double v35 = fabs(v17);
      double v36 = 2.22044605e-16;
      if (v35 >= 1.0) {
        double v36 = v35 * 2.22044605e-16;
      }
      if (v35 > v36) {
        goto LABEL_59;
      }
    }
    if (v16 == 0.0) {
      goto LABEL_26;
    }
    if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_59;
    }
    double v37 = fabs(v18);
    double v38 = 2.22044605e-16;
    if (v37 >= 1.0) {
      double v38 = v37 * 2.22044605e-16;
    }
    if (v37 <= v38)
    {
LABEL_26:
      int v22 = 0;
      if (v17 == 0.0) {
        goto LABEL_69;
      }
    }
    else
    {
LABEL_59:
      double v39 = v19 + *(double *)(a2 + 8) * v18 + v17 * *(double *)a2;
      if (v39 > 0.0) {
        int v22 = 1;
      }
      else {
        int v22 = -1;
      }
      if (v39 == 0.0) {
        int v22 = 0;
      }
      if (v17 == 0.0) {
        goto LABEL_69;
      }
    }
    if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_76;
    }
    double v40 = fabs(v17);
    double v41 = 2.22044605e-16;
    if (v40 >= 1.0) {
      double v41 = v40 * 2.22044605e-16;
    }
    if (v40 > v41)
    {
LABEL_76:
      double v45 = v19 + *(double *)(a3 + 8) * v18 + v17 * *(double *)a3;
      if (v45 > 0.0) {
        int v46 = 1;
      }
      else {
        int v46 = -1;
      }
      if (v45 == 0.0) {
        int v46 = 0;
      }
      BOOL v42 = v22 < v46;
      if (v22 == v46)
      {
LABEL_91:
        int v51 = *(_DWORD *)(a2 + 44);
        int v52 = *(_DWORD *)(a3 + 44);
        BOOL v42 = v51 < v52;
        if (v51 == v52)
        {
          uint64_t v53 = *(void *)(a2 + 32);
          uint64_t v54 = *(void *)(a3 + 32);
          BOOL v42 = v53 < v54;
          if (v53 == v54)
          {
            uint64_t v55 = *(void *)(a2 + 72);
            uint64_t v56 = *(void *)(a3 + 72);
            BOOL v42 = v55 < v56;
            if (v55 == v56)
            {
              uint64_t v57 = *(void *)(a2 + 80);
              uint64_t v58 = *(void *)(a3 + 80);
              BOOL v42 = v57 < v58;
              if (v57 == v58)
              {
                uint64_t v59 = *(void *)(a2 + 88);
                uint64_t v60 = *(void *)(a3 + 88);
                BOOL v42 = v59 < v60;
                if (v59 == v60)
                {
                  uint64_t v61 = *(void *)(a2 + 104);
                  uint64_t v62 = *(void *)(a3 + 104);
                  BOOL v42 = v61 < v62;
                  if (v61 == v62) {
                    return *(void *)(a2 + 96) < *(void *)(a3 + 96);
                  }
                }
              }
            }
          }
        }
        return v42;
      }
      return v42;
    }
LABEL_69:
    if (v16 == 0.0) {
      goto LABEL_70;
    }
    if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v43 = fabs(v18);
      double v44 = 2.22044605e-16;
      if (v43 >= 1.0) {
        double v44 = v43 * 2.22044605e-16;
      }
      if (v43 <= v44)
      {
LABEL_70:
        BOOL v42 = v22 < 0;
        if (!v22) {
          goto LABEL_91;
        }
        return v42;
      }
    }
    goto LABEL_76;
  }
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_48;
    }
    double v30 = fabs(v17);
    double v31 = 2.22044605e-16;
    if (v30 >= 1.0) {
      double v31 = v30 * 2.22044605e-16;
    }
    if (v30 > v31) {
      goto LABEL_48;
    }
  }
  if (v16 == 0.0) {
    goto LABEL_16;
  }
  if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_48;
  }
  double v32 = fabs(v18);
  double v33 = 2.22044605e-16;
  if (v32 >= 1.0) {
    double v33 = v32 * 2.22044605e-16;
  }
  if (v32 <= v33)
  {
LABEL_16:
    int v20 = 0;
  }
  else
  {
LABEL_48:
    int v20 = 0;
    uint64_t result = 0;
    if (v19 + *(double *)(a3 + 8) * v18 + v17 * *(double *)a3 < 0.0) {
      return result;
    }
  }
LABEL_89:
  BOOL v42 = v9 < v20;
  if (v9 == v20)
  {
    long long v49 = a1[1];
    double v69 = 1.0;
    double v50 = sub_10004D628(v49, (double *)a2, (double *)a3, &v69);
    if (v50 == 0.0) {
      goto LABEL_91;
    }
    if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v50 > 0.0) {
        int v64 = 1;
      }
      else {
        int v64 = -1;
      }
    }
    else
    {
      double v63 = fabs(v50);
      if (v50 > 0.0) {
        int v64 = 1;
      }
      else {
        int v64 = -1;
      }
      if (v63 <= v69 * 2.22044605e-16) {
        goto LABEL_91;
      }
    }
    long long v65 = a1[1];
    double v69 = 1.0;
    double v66 = sub_10004D628(v65, (double *)a3, (double *)a2, &v69);
    if (v66 == 0.0) {
      goto LABEL_111;
    }
    if ((*(void *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v66 > 0.0) {
        int v67 = 1;
      }
      else {
        int v67 = -1;
      }
    }
    else
    {
      double v68 = fabs(v66);
      if (v66 > 0.0) {
        int v67 = 1;
      }
      else {
        int v67 = -1;
      }
      if (v68 <= v69 * 2.22044605e-16) {
LABEL_111:
      }
        int v67 = 0;
    }
    if (!(v64 + v67)) {
      return v67 < v64;
    }
    goto LABEL_91;
  }
  return v42;
}

uint64_t sub_1002E12F8(long long *a1, long long *a2, long long *a3, double **a4)
{
  char v8 = sub_1002E0D14(a4, (uint64_t)a2, (uint64_t)a1);
  uint64_t result = sub_1002E0D14(a4, (uint64_t)a3, (uint64_t)a2);
  if (v8)
  {
    if (result)
    {
      long long v57 = a1[4];
      long long v62 = a1[5];
      long long v67 = a1[6];
      long long v37 = *a1;
      long long v42 = a1[1];
      long long v47 = a1[2];
      long long v52 = a1[3];
      long long v11 = a3[1];
      long long v10 = a3[2];
      *a1 = *a3;
      a1[1] = v11;
      a1[2] = v10;
      long long v12 = a3[6];
      long long v14 = a3[3];
      long long v13 = a3[4];
      a1[5] = a3[5];
      a1[6] = v12;
      a1[3] = v14;
      a1[4] = v13;
      *a3 = v37;
      a3[1] = v42;
      a3[5] = v62;
      a3[6] = v67;
      a3[4] = v57;
      long long v15 = v47;
      long long v16 = v52;
      uint64_t result = 1;
LABEL_10:
      a3[2] = v15;
      a3[3] = v16;
      return result;
    }
    long long v60 = a1[4];
    long long v65 = a1[5];
    long long v70 = a1[6];
    long long v40 = *a1;
    long long v45 = a1[1];
    long long v50 = a1[2];
    long long v55 = a1[3];
    long long v28 = a2[1];
    long long v27 = a2[2];
    *a1 = *a2;
    a1[1] = v28;
    a1[2] = v27;
    long long v29 = a2[6];
    long long v31 = a2[3];
    long long v30 = a2[4];
    a1[5] = a2[5];
    a1[6] = v29;
    a1[3] = v31;
    a1[4] = v30;
    *a2 = v40;
    a2[1] = v45;
    a2[5] = v65;
    a2[6] = v70;
    a2[2] = v50;
    a2[3] = v55;
    a2[4] = v60;
    if (sub_1002E0D14(a4, (uint64_t)a3, (uint64_t)a2))
    {
      long long v61 = a2[4];
      long long v66 = a2[5];
      long long v71 = a2[6];
      long long v41 = *a2;
      long long v46 = a2[1];
      long long v51 = a2[2];
      long long v56 = a2[3];
      long long v33 = a3[1];
      long long v32 = a3[2];
      *a2 = *a3;
      a2[1] = v33;
      a2[2] = v32;
      long long v34 = a3[6];
      long long v36 = a3[3];
      long long v35 = a3[4];
      a2[5] = a3[5];
      a2[6] = v34;
      a2[3] = v36;
      a2[4] = v35;
      *a3 = v41;
      a3[1] = v46;
      a3[5] = v66;
      a3[6] = v71;
      a3[4] = v61;
      long long v15 = v51;
      long long v16 = v56;
      uint64_t result = 2;
      goto LABEL_10;
    }
    return 1;
  }
  if (result)
  {
    long long v58 = a2[4];
    long long v63 = a2[5];
    long long v68 = a2[6];
    long long v38 = *a2;
    long long v43 = a2[1];
    long long v48 = a2[2];
    long long v53 = a2[3];
    long long v18 = a3[1];
    long long v17 = a3[2];
    *a2 = *a3;
    a2[1] = v18;
    a2[2] = v17;
    long long v19 = a3[6];
    long long v21 = a3[3];
    long long v20 = a3[4];
    a2[5] = a3[5];
    a2[6] = v19;
    a2[3] = v21;
    a2[4] = v20;
    *a3 = v38;
    a3[1] = v43;
    a3[5] = v63;
    a3[6] = v68;
    a3[2] = v48;
    a3[3] = v53;
    a3[4] = v58;
    if (!sub_1002E0D14(a4, (uint64_t)a2, (uint64_t)a1)) {
      return 1;
    }
    long long v59 = a1[4];
    long long v64 = a1[5];
    long long v69 = a1[6];
    long long v39 = *a1;
    long long v44 = a1[1];
    long long v49 = a1[2];
    long long v54 = a1[3];
    long long v23 = a2[1];
    long long v22 = a2[2];
    *a1 = *a2;
    a1[1] = v23;
    a1[2] = v22;
    long long v24 = a2[6];
    long long v26 = a2[3];
    long long v25 = a2[4];
    a1[5] = a2[5];
    a1[6] = v24;
    a1[3] = v26;
    a1[4] = v25;
    *a2 = v39;
    a2[1] = v44;
    a2[5] = v64;
    a2[6] = v69;
    uint64_t result = 2;
    a2[2] = v49;
    a2[3] = v54;
    a2[4] = v59;
  }
  return result;
}

long long *sub_1002E15B0(long long *a1, long long *a2, double **a3)
{
  uint64_t v4 = a2;
  long long v6 = a1[5];
  long long v43 = a1[4];
  long long v44 = v6;
  long long v45 = a1[6];
  long long v7 = a1[1];
  long long v39 = *a1;
  long long v40 = v7;
  long long v8 = a1[3];
  long long v41 = a1[2];
  long long v42 = v8;
  if (sub_1002E0D14(a3, (uint64_t)&v39, (uint64_t)(a2 - 7)))
  {
    int v9 = a1;
    do
      v9 += 7;
    while ((sub_1002E0D14(a3, (uint64_t)&v39, (uint64_t)v9) & 1) == 0);
  }
  else
  {
    unint64_t v10 = (unint64_t)(a1 + 7);
    do
    {
      int v9 = (long long *)v10;
      if (v10 >= (unint64_t)v4) {
        break;
      }
      int v11 = sub_1002E0D14(a3, (uint64_t)&v39, v10);
      unint64_t v10 = (unint64_t)(v9 + 7);
    }
    while (!v11);
  }
  if (v9 < v4)
  {
    do
      v4 -= 7;
    while ((sub_1002E0D14(a3, (uint64_t)&v39, (uint64_t)v4) & 1) != 0);
  }
  while (v9 < v4)
  {
    long long v12 = *v9;
    long long v13 = v9[2];
    long long v47 = v9[1];
    long long v48 = v13;
    long long v46 = v12;
    long long v14 = v9[3];
    long long v15 = v9[4];
    long long v16 = v9[6];
    long long v51 = v9[5];
    long long v52 = v16;
    long long v49 = v14;
    long long v50 = v15;
    long long v17 = v4[6];
    long long v19 = v4[3];
    long long v18 = v4[4];
    v9[5] = v4[5];
    v9[6] = v17;
    v9[3] = v19;
    uint64_t v9[4] = v18;
    long long v20 = *v4;
    long long v21 = v4[2];
    v9[1] = v4[1];
    _DWORD v9[2] = v21;
    *int v9 = v20;
    long long v22 = v46;
    long long v23 = v48;
    v4[1] = v47;
    v4[2] = v23;
    *uint64_t v4 = v22;
    long long v24 = v49;
    long long v25 = v50;
    long long v26 = v52;
    v4[5] = v51;
    v4[6] = v26;
    v4[3] = v24;
    v4[4] = v25;
    do
      v9 += 7;
    while (!sub_1002E0D14(a3, (uint64_t)&v39, (uint64_t)v9));
    do
      v4 -= 7;
    while ((sub_1002E0D14(a3, (uint64_t)&v39, (uint64_t)v4) & 1) != 0);
  }
  long long v27 = v9 - 7;
  if (v9 - 7 != a1)
  {
    long long v28 = *v27;
    long long v29 = *(v9 - 5);
    a1[1] = *(v9 - 6);
    a1[2] = v29;
    *a1 = v28;
    long long v30 = *(v9 - 4);
    long long v31 = *(v9 - 3);
    long long v32 = *(v9 - 1);
    a1[5] = *(v9 - 2);
    a1[6] = v32;
    a1[3] = v30;
    a1[4] = v31;
  }
  long long v33 = v39;
  long long v34 = v41;
  *(v9 - 6) = v40;
  *(v9 - 5) = v34;
  long long *v27 = v33;
  long long v35 = v42;
  long long v36 = v43;
  long long v37 = v45;
  *(v9 - 2) = v44;
  *(v9 - 1) = v37;
  *(v9 - 4) = v35;
  *(v9 - 3) = v36;
  return v9;
}

long long *sub_1002E1778(long long *a1, unint64_t a2, double **a3)
{
  uint64_t v6 = 0;
  long long v7 = a1[5];
  long long v42 = a1[4];
  long long v43 = v7;
  long long v44 = a1[6];
  long long v8 = a1[1];
  long long v38 = *a1;
  long long v39 = v8;
  long long v9 = a1[3];
  long long v40 = a1[2];
  long long v41 = v9;
  do
    v6 += 7;
  while ((sub_1002E0D14(a3, (uint64_t)&a1[v6], (uint64_t)&v38) & 1) != 0);
  unint64_t v10 = &a1[v6];
  int v11 = &a1[v6 - 7];
  if (v6 == 7)
  {
    do
    {
      if ((unint64_t)v10 >= a2) {
        break;
      }
      a2 -= 112;
    }
    while ((sub_1002E0D14(a3, a2, (uint64_t)&v38) & 1) == 0);
  }
  else
  {
    do
      a2 -= 112;
    while (!sub_1002E0D14(a3, a2, (uint64_t)&v38));
  }
  if ((unint64_t)v10 < a2)
  {
    long long v12 = &a1[v6];
    long long v13 = (long long *)a2;
    do
    {
      long long v14 = v12[5];
      long long v49 = v12[4];
      long long v50 = v14;
      long long v51 = v12[6];
      long long v15 = v12[1];
      long long v45 = *v12;
      long long v46 = v15;
      long long v16 = v12[3];
      long long v47 = v12[2];
      long long v48 = v16;
      long long v18 = v13[3];
      long long v17 = v13[4];
      long long v19 = v13[6];
      v12[5] = v13[5];
      v12[6] = v19;
      v12[3] = v18;
      v12[4] = v17;
      long long v21 = v13[1];
      long long v20 = v13[2];
      *long long v12 = *v13;
      v12[1] = v21;
      v12[2] = v20;
      long long v22 = v45;
      long long v23 = v47;
      v13[1] = v46;
      v13[2] = v23;
      *long long v13 = v22;
      long long v24 = v48;
      long long v25 = v49;
      long long v26 = v51;
      v13[5] = v50;
      v13[6] = v26;
      v13[3] = v24;
      v13[4] = v25;
      do
        v12 += 7;
      while ((sub_1002E0D14(a3, (uint64_t)v12, (uint64_t)&v38) & 1) != 0);
      do
        v13 -= 7;
      while (!sub_1002E0D14(a3, (uint64_t)v13, (uint64_t)&v38));
    }
    while (v12 < v13);
    int v11 = v12 - 7;
  }
  if (v11 != a1)
  {
    long long v27 = *v11;
    long long v28 = v11[2];
    a1[1] = v11[1];
    a1[2] = v28;
    *a1 = v27;
    long long v29 = v11[3];
    long long v30 = v11[4];
    long long v31 = v11[6];
    a1[5] = v11[5];
    a1[6] = v31;
    a1[3] = v29;
    a1[4] = v30;
  }
  long long v32 = v38;
  long long v33 = v40;
  v11[1] = v39;
  v11[2] = v33;
  *int v11 = v32;
  long long v34 = v41;
  long long v35 = v42;
  long long v36 = v44;
  v11[5] = v43;
  v11[6] = v36;
  void v11[3] = v34;
  v11[4] = v35;
  return v11;
}

BOOL sub_1002E1948(long long *a1, long long *a2, double **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v8 = a2 - 7;
      if (!sub_1002E0D14(a3, (uint64_t)(a2 - 7), (uint64_t)a1)) {
        return 1;
      }
      long long v9 = a1[5];
      long long v77 = a1[4];
      long long v78 = v9;
      long long v79 = a1[6];
      long long v10 = a1[1];
      long long v73 = *a1;
      long long v74 = v10;
      long long v11 = a1[3];
      long long v75 = a1[2];
      long long v76 = v11;
      long long v13 = *(a2 - 6);
      long long v12 = *(a2 - 5);
      *a1 = *v8;
      a1[1] = v13;
      a1[2] = v12;
      long long v14 = *(a2 - 1);
      long long v16 = *(a2 - 4);
      long long v15 = *(a2 - 3);
      a1[5] = *(a2 - 2);
      a1[6] = v14;
      a1[3] = v16;
      a1[4] = v15;
      long long v17 = v74;
      long long *v8 = v73;
      *(a2 - 6) = v17;
      long long v18 = v79;
      long long v19 = v77;
      *(a2 - 2) = v78;
      *(a2 - 1) = v18;
      *(a2 - 3) = v19;
      long long v20 = v75;
      long long v21 = v76;
      goto LABEL_20;
    case 3:
      sub_1002E12F8(a1, a1 + 7, a2 - 7, a3);
      return 1;
    case 4:
      long long v8 = a1 + 7;
      long long v38 = a1 + 14;
      long long v39 = a2 - 7;
      sub_1002E12F8(a1, a1 + 7, a1 + 14, a3);
      if (!sub_1002E0D14(a3, (uint64_t)v39, (uint64_t)(a1 + 14))) {
        return 1;
      }
      long long v40 = a1[19];
      long long v77 = a1[18];
      long long v78 = v40;
      long long v79 = a1[20];
      long long v41 = a1[15];
      long long v73 = *v38;
      long long v74 = v41;
      long long v42 = a1[17];
      long long v75 = a1[16];
      long long v76 = v42;
      long long v44 = v39[1];
      long long v43 = v39[2];
      *long long v38 = *v39;
      a1[15] = v44;
      a1[16] = v43;
      long long v45 = v39[6];
      long long v47 = v39[3];
      long long v46 = v39[4];
      a1[19] = v39[5];
      a1[20] = v45;
      a1[17] = v47;
      a1[18] = v46;
      long long v48 = v74;
      *long long v39 = v73;
      v39[1] = v48;
      long long v49 = v79;
      long long v50 = v77;
      v39[5] = v78;
      v39[6] = v49;
      long long v51 = v76;
      v39[2] = v75;
      v39[3] = v51;
      v39[4] = v50;
      if (!sub_1002E0D14(a3, (uint64_t)(a1 + 14), (uint64_t)(a1 + 7))) {
        return 1;
      }
      long long v52 = a1[12];
      long long v77 = a1[11];
      long long v78 = v52;
      long long v79 = a1[13];
      long long v53 = a1[8];
      long long v73 = *v8;
      long long v74 = v53;
      long long v54 = a1[10];
      long long v75 = a1[9];
      long long v76 = v54;
      long long v55 = a1[15];
      long long *v8 = *v38;
      a1[8] = v55;
      long long v56 = a1[20];
      long long v57 = a1[18];
      a1[12] = a1[19];
      a1[13] = v56;
      long long v58 = a1[17];
      a1[9] = a1[16];
      a1[10] = v58;
      a1[11] = v57;
      long long v59 = v74;
      *long long v38 = v73;
      a1[15] = v59;
      long long v60 = v75;
      long long v61 = v76;
      long long v62 = v79;
      a1[19] = v78;
      a1[20] = v62;
      long long v63 = v77;
      a1[17] = v61;
      a1[18] = v63;
      a1[16] = v60;
      if (!sub_1002E0D14(a3, (uint64_t)(a1 + 7), (uint64_t)a1)) {
        return 1;
      }
      long long v64 = a1[5];
      long long v77 = a1[4];
      long long v78 = v64;
      long long v79 = a1[6];
      long long v65 = a1[1];
      long long v73 = *a1;
      long long v74 = v65;
      long long v66 = a1[3];
      long long v75 = a1[2];
      long long v76 = v66;
      long long v67 = a1[8];
      *a1 = *v8;
      a1[1] = v67;
      long long v68 = a1[13];
      long long v69 = a1[11];
      a1[5] = a1[12];
      a1[6] = v68;
      long long v70 = a1[10];
      a1[2] = a1[9];
      a1[3] = v70;
      a1[4] = v69;
      long long v71 = v74;
      long long *v8 = v73;
      a1[8] = v71;
      long long v20 = v75;
      long long v21 = v76;
      long long v72 = v79;
      a1[12] = v78;
      a1[13] = v72;
      a1[11] = v77;
LABEL_20:
      BOOL result = 1;
      v8[2] = v20;
      void v8[3] = v21;
      return result;
    case 5:
      sub_1002E1D38(a1, a1 + 7, a1 + 14, a1 + 21, a2 - 7, a3);
      return 1;
    default:
      uint64_t v22 = (uint64_t)(a1 + 14);
      sub_1002E12F8(a1, a1 + 7, a1 + 14, a3);
      long long v23 = a1 + 21;
      if (a1 + 21 == a2) {
        return 1;
      }
      uint64_t v24 = 0;
      int v25 = 0;
      break;
  }
  while (1)
  {
    if (sub_1002E0D14(a3, (uint64_t)v23, v22))
    {
      long long v30 = v23[5];
      long long v77 = v23[4];
      long long v78 = v30;
      long long v79 = v23[6];
      long long v31 = v23[1];
      long long v73 = *v23;
      long long v74 = v31;
      long long v32 = v23[3];
      uint64_t v33 = v24;
      long long v75 = v23[2];
      long long v76 = v32;
      do
      {
        long long v34 = (long long *)((char *)a1 + v33);
        long long v35 = *(long long *)((char *)a1 + v33 + 304);
        v34[25] = *(long long *)((char *)a1 + v33 + 288);
        v34[26] = v35;
        v34[27] = *(long long *)((char *)a1 + v33 + 320);
        long long v36 = *(long long *)((char *)a1 + v33 + 240);
        v34[21] = *(long long *)((char *)a1 + v33 + 224);
        v34[22] = v36;
        long long v37 = *(long long *)((char *)a1 + v33 + 272);
        v34[23] = *(long long *)((char *)a1 + v33 + 256);
        v34[24] = v37;
        if (v33 == -224)
        {
          long long v26 = a1;
          goto LABEL_7;
        }
        v33 -= 112;
      }
      while ((sub_1002E0D14(a3, (uint64_t)&v73, (uint64_t)(v34 + 7)) & 1) != 0);
      long long v26 = (long long *)((char *)a1 + v33 + 336);
LABEL_7:
      long long v27 = v78;
      v26[4] = v77;
      v26[5] = v27;
      v26[6] = v79;
      long long v28 = v74;
      long long *v26 = v73;
      v26[1] = v28;
      long long v29 = v76;
      ++v25;
      double v26[2] = v75;
      v26[3] = v29;
      if (v25 == 8) {
        return v23 + 7 == a2;
      }
    }
    uint64_t v22 = (uint64_t)v23;
    v24 += 112;
    v23 += 7;
    if (v23 == a2) {
      return 1;
    }
  }
}

__n128 sub_1002E1D38(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, double **a6)
{
  sub_1002E12F8(a1, a2, a3, a6);
  if (sub_1002E0D14(a6, (uint64_t)a4, (uint64_t)a3))
  {
    long long v76 = a3[4];
    long long v83 = a3[5];
    long long v90 = a3[6];
    long long v48 = *a3;
    long long v55 = a3[1];
    long long v62 = a3[2];
    long long v69 = a3[3];
    long long v13 = a4[1];
    long long v12 = a4[2];
    *a3 = *a4;
    a3[1] = v13;
    a3[2] = v12;
    long long v14 = a4[6];
    long long v16 = a4[3];
    long long v15 = a4[4];
    a3[5] = a4[5];
    a3[6] = v14;
    a3[3] = v16;
    a3[4] = v15;
    *a4 = v48;
    a4[1] = v55;
    a4[5] = v83;
    a4[6] = v90;
    a4[2] = v62;
    a4[3] = v69;
    a4[4] = v76;
    if (sub_1002E0D14(a6, (uint64_t)a3, (uint64_t)a2))
    {
      long long v77 = a2[4];
      long long v84 = a2[5];
      long long v91 = a2[6];
      long long v49 = *a2;
      long long v56 = a2[1];
      long long v63 = a2[2];
      long long v70 = a2[3];
      long long v18 = a3[1];
      long long v17 = a3[2];
      *a2 = *a3;
      a2[1] = v18;
      a2[2] = v17;
      long long v19 = a3[6];
      long long v21 = a3[3];
      long long v20 = a3[4];
      a2[5] = a3[5];
      a2[6] = v19;
      a2[3] = v21;
      a2[4] = v20;
      *a3 = v49;
      a3[1] = v56;
      a3[5] = v84;
      a3[6] = v91;
      a3[2] = v63;
      a3[3] = v70;
      a3[4] = v77;
      if (sub_1002E0D14(a6, (uint64_t)a2, (uint64_t)a1))
      {
        long long v78 = a1[4];
        long long v85 = a1[5];
        long long v92 = a1[6];
        long long v50 = *a1;
        long long v57 = a1[1];
        long long v64 = a1[2];
        long long v71 = a1[3];
        long long v23 = a2[1];
        long long v22 = a2[2];
        *a1 = *a2;
        a1[1] = v23;
        a1[2] = v22;
        long long v24 = a2[6];
        long long v26 = a2[3];
        long long v25 = a2[4];
        a1[5] = a2[5];
        a1[6] = v24;
        a1[3] = v26;
        a1[4] = v25;
        *a2 = v50;
        a2[1] = v57;
        a2[5] = v85;
        a2[6] = v92;
        a2[2] = v64;
        a2[3] = v71;
        a2[4] = v78;
      }
    }
  }
  if (sub_1002E0D14(a6, (uint64_t)a5, (uint64_t)a4))
  {
    long long v79 = a4[4];
    long long v86 = a4[5];
    long long v93 = a4[6];
    long long v51 = *a4;
    long long v58 = a4[1];
    long long v65 = a4[2];
    long long v72 = a4[3];
    long long v29 = a5[1];
    long long v28 = a5[2];
    *a4 = *a5;
    a4[1] = v29;
    a4[2] = v28;
    long long v30 = a5[6];
    long long v32 = a5[3];
    long long v31 = a5[4];
    a4[5] = a5[5];
    a4[6] = v30;
    a4[3] = v32;
    a4[4] = v31;
    *a5 = v51;
    a5[1] = v58;
    a5[5] = v86;
    a5[6] = v93;
    a5[2] = v65;
    a5[3] = v72;
    a5[4] = v79;
    if (sub_1002E0D14(a6, (uint64_t)a4, (uint64_t)a3))
    {
      long long v80 = a3[4];
      long long v87 = a3[5];
      long long v94 = a3[6];
      long long v52 = *a3;
      long long v59 = a3[1];
      long long v66 = a3[2];
      long long v73 = a3[3];
      long long v34 = a4[1];
      long long v33 = a4[2];
      *a3 = *a4;
      a3[1] = v34;
      a3[2] = v33;
      long long v35 = a4[6];
      long long v37 = a4[3];
      long long v36 = a4[4];
      a3[5] = a4[5];
      a3[6] = v35;
      a3[3] = v37;
      a3[4] = v36;
      *a4 = v52;
      a4[1] = v59;
      a4[5] = v87;
      a4[6] = v94;
      a4[2] = v66;
      a4[3] = v73;
      a4[4] = v80;
      if (sub_1002E0D14(a6, (uint64_t)a3, (uint64_t)a2))
      {
        long long v81 = a2[4];
        long long v88 = a2[5];
        long long v95 = a2[6];
        long long v53 = *a2;
        long long v60 = a2[1];
        long long v67 = a2[2];
        long long v74 = a2[3];
        long long v39 = a3[1];
        long long v38 = a3[2];
        *a2 = *a3;
        a2[1] = v39;
        a2[2] = v38;
        long long v40 = a3[6];
        long long v42 = a3[3];
        long long v41 = a3[4];
        a2[5] = a3[5];
        a2[6] = v40;
        a2[3] = v42;
        a2[4] = v41;
        *a3 = v53;
        a3[1] = v60;
        a3[5] = v88;
        a3[6] = v95;
        a3[2] = v67;
        a3[3] = v74;
        a3[4] = v81;
        if (sub_1002E0D14(a6, (uint64_t)a2, (uint64_t)a1))
        {
          long long v82 = a1[4];
          long long v89 = a1[5];
          long long v96 = a1[6];
          long long v54 = *a1;
          long long v61 = a1[1];
          __n128 v68 = (__n128)a1[2];
          long long v75 = a1[3];
          long long v44 = a2[1];
          long long v43 = a2[2];
          *a1 = *a2;
          a1[1] = v44;
          a1[2] = v43;
          long long v45 = a2[6];
          long long v47 = a2[3];
          long long v46 = a2[4];
          a1[5] = a2[5];
          a1[6] = v45;
          a1[3] = v47;
          a1[4] = v46;
          *a2 = v54;
          a2[1] = v61;
          a2[5] = v89;
          a2[6] = v96;
          __n128 result = v68;
          a2[2] = (__int128)v68;
          a2[3] = v75;
          a2[4] = v82;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1002E20B8(uint64_t a1, __n128 *a2, __n128 *a3, double **a4)
{
  if ((__n128 *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 112;
    if ((uint64_t)a2 - a1 >= 113)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 112 * v10);
      do
      {
        sub_1002E2460(a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (sub_1002E0D14(a4, (uint64_t)v14, a1))
        {
          __n128 v15 = v14[5];
          __n128 v77 = v14[4];
          __n128 v78 = v15;
          __n128 v79 = v14[6];
          __n128 v16 = v14[1];
          __n128 v73 = *v14;
          __n128 v74 = v16;
          __n128 v17 = v14[3];
          __n128 v75 = v14[2];
          __n128 v76 = v17;
          __n128 v19 = *(__n128 *)(a1 + 16);
          __n128 v18 = *(__n128 *)(a1 + 32);
          *long long v14 = *(__n128 *)a1;
          v14[1] = v19;
          v14[2] = v18;
          __n128 v20 = *(__n128 *)(a1 + 96);
          __n128 v22 = *(__n128 *)(a1 + 48);
          __n128 v21 = *(__n128 *)(a1 + 64);
          v14[5] = *(__n128 *)(a1 + 80);
          v14[6] = v20;
          void v14[3] = v22;
          v14[4] = v21;
          __n128 v23 = v74;
          *(__n128 *)a1 = v73;
          *(__n128 *)(a1 + 16) = v23;
          __n128 v24 = v79;
          __n128 v25 = v77;
          *(__n128 *)(a1 + 80) = v78;
          *(__n128 *)(a1 + 96) = v24;
          __n128 v26 = v76;
          *(__n128 *)(a1 + 32) = v75;
          *(__n128 *)(a1 + 48) = v26;
          *(__n128 *)(a1 + 64) = v25;
          sub_1002E2460(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 7;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 < 113)
    {
      return v13;
    }
    else
    {
      long long v64 = v13;
      long long v65 = a2;
      uint64_t v27 = (((unint64_t)v8 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64;
      do
      {
        uint64_t v29 = 0;
        __n128 v70 = *(__n128 *)(a1 + 64);
        __n128 v71 = *(__n128 *)(a1 + 80);
        __n128 v72 = *(__n128 *)(a1 + 96);
        __n128 v66 = *(__n128 *)a1;
        __n128 v67 = *(__n128 *)(a1 + 16);
        long long v30 = (_OWORD *)a1;
        __n128 v68 = *(__n128 *)(a1 + 32);
        __n128 v69 = *(__n128 *)(a1 + 48);
        do
        {
          long long v36 = (__n128 *)&v30[7 * v29 + 7];
          uint64_t v37 = (2 * v29) | 1;
          uint64_t v38 = 2 * v29 + 2;
          if (v38 < v27 && sub_1002E0D14(a4, (uint64_t)&v30[7 * v29 + 7], (uint64_t)&v30[7 * v29 + 14]))
          {
            v36 += 7;
            uint64_t v37 = v38;
          }
          __n128 v31 = *v36;
          __n128 v32 = v36[2];
          v30[1] = v36[1];
          v30[2] = v32;
          *long long v30 = v31;
          __n128 v33 = v36[3];
          __n128 v34 = v36[4];
          __n128 v35 = v36[6];
          v30[5] = v36[5];
          void v30[6] = v35;
          v30[3] = v33;
          v30[4] = v34;
          long long v30 = v36;
          uint64_t v29 = v37;
        }
        while (v37 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
        long long v39 = v65 - 7;
        BOOL v40 = v36 == &v65[-7];
        v65 -= 7;
        if (v40)
        {
          v36[1] = v67;
          v36[2] = v68;
          *long long v36 = v66;
          v36[5] = v71;
          v36[6] = v72;
          v36[3] = v69;
          v36[4] = v70;
        }
        else
        {
          __n128 v41 = *v39;
          __n128 v42 = v39[2];
          v36[1] = v39[1];
          v36[2] = v42;
          *long long v36 = v41;
          __n128 v43 = v39[3];
          __n128 v44 = v39[4];
          __n128 v45 = v39[6];
          v36[5] = v39[5];
          v36[6] = v45;
          v36[3] = v43;
          v36[4] = v44;
          v39[4] = v70;
          v39[5] = v71;
          v39[6] = v72;
          *long long v39 = v66;
          v39[1] = v67;
          v39[2] = v68;
          v39[3] = v69;
          uint64_t v46 = (uint64_t)&v36[7] - a1;
          if (v46 >= 113)
          {
            unint64_t v47 = (unint64_t)(((((unint64_t)v46 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                   - 2) >> 1;
            long long v48 = (__n128 *)(a1 + 112 * v47);
            if (sub_1002E0D14(a4, (uint64_t)v48, (uint64_t)v36))
            {
              __n128 v49 = *v36;
              __n128 v50 = v36[2];
              __n128 v74 = v36[1];
              __n128 v75 = v50;
              __n128 v73 = v49;
              __n128 v51 = v36[3];
              __n128 v52 = v36[4];
              __n128 v53 = v36[6];
              __n128 v78 = v36[5];
              __n128 v79 = v53;
              __n128 v76 = v51;
              __n128 v77 = v52;
              do
              {
                long long v54 = v48;
                __n128 v55 = *v48;
                __n128 v56 = v48[2];
                v36[1] = v48[1];
                v36[2] = v56;
                *long long v36 = v55;
                __n128 v57 = v48[3];
                __n128 v58 = v48[4];
                __n128 v59 = v48[6];
                v36[5] = v48[5];
                v36[6] = v59;
                v36[3] = v57;
                v36[4] = v58;
                if (!v47) {
                  break;
                }
                unint64_t v47 = (v47 - 1) >> 1;
                long long v48 = (__n128 *)(a1 + 112 * v47);
                long long v36 = v54;
              }
              while ((sub_1002E0D14(a4, (uint64_t)v48, (uint64_t)&v73) & 1) != 0);
              __n128 v60 = v78;
              void v54[4] = v77;
              v54[5] = v60;
              v54[6] = v79;
              __n128 v61 = v74;
              *long long v54 = v73;
              v54[1] = v61;
              __n128 v62 = v76;
              v54[2] = v75;
              v54[3] = v62;
            }
          }
        }
      }
      while (v27-- > 2);
      return v64;
    }
  }
  return a3;
}

__n128 sub_1002E2460(uint64_t a1, double **a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v38 = v4;
    uint64_t v39 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 4))
    {
      int64_t v12 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 4)) | 1;
      long long v13 = (__n128 *)(a1 + 112 * v12);
      int64_t v14 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v14 < a3 && sub_1002E0D14(a2, a1 + 112 * v12, (uint64_t)&v13[7]))
      {
        v13 += 7;
        int64_t v12 = v14;
      }
      if ((sub_1002E0D14(a2, (uint64_t)v13, (uint64_t)v7) & 1) == 0)
      {
        __n128 v16 = v7[5];
        __n128 v35 = v7[4];
        __n128 v36 = v16;
        __n128 v37 = v7[6];
        __n128 v17 = v7[1];
        __n128 v31 = *v7;
        __n128 v32 = v17;
        __n128 v18 = v7[3];
        __n128 v33 = v7[2];
        __n128 v34 = v18;
        do
        {
          __n128 v19 = v13;
          __n128 v20 = *v13;
          __n128 v21 = v13[2];
          v7[1] = v13[1];
          _DWORD v7[2] = v21;
          *long long v7 = v20;
          __n128 v22 = v13[3];
          __n128 v23 = v13[4];
          __n128 v24 = v13[6];
          v7[5] = v13[5];
          v7[6] = v24;
          v7[3] = v22;
          v7[4] = v23;
          if (v9 < v12) {
            break;
          }
          uint64_t v25 = (2 * v12) | 1;
          long long v13 = (__n128 *)(a1 + 112 * v25);
          uint64_t v26 = 2 * v12 + 2;
          if (v26 < a3)
          {
            if (sub_1002E0D14(a2, a1 + 112 * v25, (uint64_t)&v13[7]))
            {
              v13 += 7;
              uint64_t v25 = v26;
            }
          }
          long long v7 = v19;
          int64_t v12 = v25;
        }
        while (!sub_1002E0D14(a2, (uint64_t)v13, (uint64_t)&v31));
        __n128 v27 = v31;
        __n128 v28 = v33;
        v19[1] = v32;
        double v19[2] = v28;
        *__n128 v19 = v27;
        __n128 result = v34;
        __n128 v29 = v35;
        __n128 v30 = v37;
        v19[5] = v36;
        unsigned char v19[6] = v30;
        void v19[3] = result;
        v19[4] = v29;
      }
    }
  }
  return result;
}

void *sub_1002E260C(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *result) >> 4);
  if (a3 + 1 < v5) {
    uint64_t v6 = a3 + 1;
  }
  else {
    uint64_t v6 = 0;
  }
  while (*(void *)(v3 + 112 * v6 + 72) != a2)
  {
    if (v6 + 1 < v5) {
      ++v6;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  if (v5 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *result) >> 4);
  }
  if (v4 != v3)
  {
    uint64_t v8 = *(void **)(v3 + 112 * a3 + 16);
    int64_t v9 = v8;
    char v10 = 1;
    while (1)
    {
      __n128 result = *(void **)(v3 + 112 * v6 + 16);
      if (result != v9 && (v10 & 1) == 0)
      {
        uint64_t v11 = v7;
        int64_t v12 = (void *)(v3 + 48);
        uint64_t v13 = v7;
        int64_t v14 = (void *)(v3 + 48);
        if ((uint64_t)v9 > (uint64_t)v8)
        {
          do
          {
            uint64_t v15 = *(v14 - 4);
            if (v15 >= (uint64_t)v8 && v15 < (uint64_t)v9) {
              ++*v14;
            }
            v14 += 14;
            --v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v17 = *(v12 - 4);
            if (v17 >= (uint64_t)v8 || v17 < (uint64_t)v9) {
              ++*v12;
            }
            v12 += 14;
            --v11;
          }
          while (v11);
        }
        uint64_t v19 = v7;
        __n128 v20 = (void *)(v3 + 56);
        uint64_t v21 = v7;
        __n128 v22 = (void *)(v3 + 56);
        if ((uint64_t)v9 > (uint64_t)v8)
        {
          do
          {
            uint64_t v23 = *(v22 - 5);
            if (v23 > (uint64_t)v8 && v23 <= (uint64_t)v9) {
              ++*v22;
            }
            v22 += 14;
            --v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v25 = *(v20 - 5);
            if (v25 > (uint64_t)v8 || v25 <= (uint64_t)v9) {
              ++*v20;
            }
            v20 += 14;
            --v19;
          }
          while (v19);
        }
      }
      if (v6 == a3) {
        break;
      }
      int v27 = *(_DWORD *)(v3 + 112 * v6 + 44);
      if (v27) {
        __n128 v28 = v8;
      }
      else {
        __n128 v28 = result;
      }
      if (!v27) {
        char v10 = 1;
      }
      if (v27 == 1) {
        char v10 = 0;
      }
      else {
        uint64_t v8 = v28;
      }
      if (v6 + 1 < v5) {
        ++v6;
      }
      else {
        uint64_t v6 = 0;
      }
      int64_t v9 = result;
      if (*(void *)(v3 + 112 * v6 + 72) != a2)
      {
        do
        {
          if (v6 + 1 < v5) {
            ++v6;
          }
          else {
            uint64_t v6 = 0;
          }
        }
        while (*(void *)(v3 + 112 * v6 + 72) != a2);
        int64_t v9 = result;
      }
    }
  }
  return result;
}

uint64_t sub_1002E2808(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = v2 - *a1;
  if (v2 == *a1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = v3 / 112;
  unint64_t v8 = v7 + 1;
  if (v7 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v7;
  }
  uint64_t v10 = v1 + 44;
  do
  {
    uint64_t v12 = *(void *)(v10 - 28);
    if (v12 > v6) {
      uint64_t v6 = *(void *)(v10 - 28);
    }
    if (*(_DWORD *)v10 == 1 && *(void *)(v10 + 12) && *(void *)(v10 + 4) == 0) {
      unint64_t v8 = v12 + 1;
    }
    v10 += 112;
    if (v4) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v12 == v8;
    }
    if (v11) {
      uint64_t v4 = v5;
    }
    ++v5;
  }
  while (v9 != v5);
  uint64_t v14 = 0;
  uint64_t result = 0;
  uint64_t v16 = v6 + 1;
  do
  {
    if (v4 + 1 == v7) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v4 + 1;
    }
    uint64_t v17 = *(void *)(v1 + 112 * v4 + 16);
    if (v17 == v14)
    {
      uint64_t v17 = v14;
    }
    else
    {
      if (v17 == v16)
      {
        ++result;
        uint64_t v16 = v6 + 1;
      }
      if (*(_DWORD *)(v1 + 112 * v4 + 44) == 1)
      {
        uint64_t v19 = v1 + 112 * v4;
        uint64_t v21 = *(void *)(v19 + 48);
        uint64_t v20 = *(void *)(v19 + 56);
        if (v17 < v6) {
          uint64_t v22 = v17 + 1;
        }
        else {
          uint64_t v22 = 0;
        }
        if (v21) {
          BOOL v23 = 1;
        }
        else {
          BOOL v23 = v20 == 0;
        }
        if (!v23) {
          uint64_t v16 = v22;
        }
      }
    }
    *(void *)(v1 + 112 * v4 + 24) = result;
    uint64_t v4 = v18;
    uint64_t v14 = v17;
    --v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1002E2934(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = v2 - *a1;
  if (v2 == *a1) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = v3 / 112;
  unint64_t v8 = v7 + 1;
  if (v7 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v7;
  }
  uint64_t v10 = v1 + 44;
  do
  {
    uint64_t v12 = *(void *)(v10 - 28);
    if (v12 > v6) {
      uint64_t v6 = *(void *)(v10 - 28);
    }
    if (*(_DWORD *)v10 == 1 && *(void *)(v10 + 12) > 1uLL && *(void *)(v10 + 4) < 2uLL) {
      unint64_t v8 = v12 + 1;
    }
    v10 += 112;
    if (v4) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v12 == v8;
    }
    if (v11) {
      uint64_t v4 = v5;
    }
    ++v5;
  }
  while (v9 != v5);
  uint64_t v14 = 0;
  uint64_t result = 0;
  uint64_t v16 = v6 + 1;
  do
  {
    if (v4 + 1 == v7) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = v4 + 1;
    }
    uint64_t v17 = *(void *)(v1 + 112 * v4 + 16);
    if (v17 == v14)
    {
      uint64_t v17 = v14;
    }
    else
    {
      if (v17 == v16)
      {
        ++result;
        uint64_t v16 = v6 + 1;
      }
      if (*(_DWORD *)(v1 + 112 * v4 + 44) == 1)
      {
        uint64_t v19 = v1 + 112 * v4;
        unint64_t v21 = *(void *)(v19 + 48);
        unint64_t v20 = *(void *)(v19 + 56);
        if (v17 < v6) {
          uint64_t v22 = v17 + 1;
        }
        else {
          uint64_t v22 = 0;
        }
        if (v21 <= 1 && v20 >= 2) {
          uint64_t v16 = v22;
        }
      }
    }
    *(void *)(v1 + 112 * v4 + 24) = result;
    uint64_t v4 = v18;
    uint64_t v14 = v17;
    --v9;
  }
  while (v9);
  return result;
}

void sub_1002E2A60(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002E2A60(a1, *a2);
    sub_1002E2A60(a1, a2[1]);
    uint64_t v4 = (void *)a2[7];
    if (v4)
    {
      a2[8] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void *sub_1002E2AC4(uint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1 + 4;
  uint64_t v3 = (uint64_t **)(a1 + 5);
  sub_1002E4420((uint64_t)(a1 + 4), (void *)a1[5]);
  v1[4] = (uint64_t)v3;
  char *v3 = 0;
  __n128 v61 = v1;
  uint64_t v4 = (void *)v1[8];
  v1 += 8;
  *(v1 - 2) = 0;
  sub_1002E4480((uint64_t)(v1 - 1), v4);
  *(v1 - 1) = (uint64_t)v1;
  uint64_t *v1 = 0;
  v1[1] = 0;
  uint64_t v5 = (void *)*(v1 - 6);
  if (v5[5])
  {
    for (int64_t i = 0; (unint64_t)i < v5[5]; ++i)
    {
      uint64_t v7 = 0;
      uint64_t v62 = *(void *)(v5[1] + (((unint64_t)(v5[4] + i) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((*((_DWORD *)v5 + 8) + i) & 0xF)
          + 40;
      do
      {
        unint64_t v8 = (void *)(v62 + 168 * v7);
        uint64_t v10 = v8[1];
        uint64_t v9 = v8[2];
        uint64_t v11 = v8[3];
        uint64_t v12 = *v3;
        uint64_t v13 = v3;
        uint64_t v14 = v3;
        if (!*v3) {
          goto LABEL_25;
        }
        do
        {
          while (1)
          {
            uint64_t v14 = v12;
            uint64_t v15 = v12[4];
            if (v10 != v15) {
              break;
            }
            uint64_t v16 = v14[5];
            if (v9 != v16)
            {
              if (v9 < v16) {
                goto LABEL_12;
              }
              if (v16 >= v9) {
                goto LABEL_50;
              }
              goto LABEL_23;
            }
            uint64_t v17 = v14[6];
            if (v11 >= v17)
            {
              if (v17 >= v11) {
                goto LABEL_50;
              }
              goto LABEL_23;
            }
LABEL_12:
            uint64_t v12 = (uint64_t *)*v14;
            uint64_t v13 = (uint64_t **)v14;
            if (!*v14) {
              goto LABEL_25;
            }
          }
          if (v10 < v15) {
            goto LABEL_12;
          }
          if (v15 >= v10) {
            goto LABEL_50;
          }
LABEL_23:
          uint64_t v12 = (uint64_t *)v14[1];
        }
        while (v12);
        uint64_t v13 = (uint64_t **)(v14 + 1);
LABEL_25:
        uint64_t v18 = v3;
        uint64_t v19 = (void **)v2;
        unint64_t v20 = v14;
        uint64_t v14 = operator new(0x58uLL);
        v14[4] = v10;
        v14[5] = v9;
        v14[6] = v11;
        v14[7] = -1;
        v14[10] = 0;
        v14[9] = 0;
        v14[8] = v14 + 9;
        *uint64_t v14 = 0;
        v14[1] = 0;
        v14[2] = v20;
        uint64_t v2 = v19;
        *uint64_t v13 = v14;
        unint64_t v21 = (void *)**v19;
        uint64_t v22 = v14;
        if (v21)
        {
          *uint64_t v19 = v21;
          uint64_t v22 = *v13;
        }
        uint64_t v3 = v18;
        BOOL v23 = *v18;
        BOOL v24 = v22 == *v18;
        *((unsigned char *)v22 + 24) = v24;
        if (!v24)
        {
          do
          {
            uint64_t v25 = v22[2];
            if (*(unsigned char *)(v25 + 24)) {
              break;
            }
            uint64_t v26 = *(uint64_t **)(v25 + 16);
            uint64_t v27 = *v26;
            if (*v26 == v25)
            {
              uint64_t v30 = v26[1];
              if (!v30 || (int v31 = *(unsigned __int8 *)(v30 + 24), v28 = (unsigned char *)(v30 + 24), v31))
              {
                if (*(uint64_t **)v25 == v22)
                {
                  *(unsigned char *)(v25 + 24) = 1;
                  *((unsigned char *)v26 + 24) = 0;
                  uint64_t v34 = *(void *)(v25 + 8);
                  uint64_t *v26 = v34;
                  if (v34) {
                    goto LABEL_42;
                  }
                }
                else
                {
                  __n128 v32 = *(uint64_t **)(v25 + 8);
                  uint64_t v33 = *v32;
                  *(void *)(v25 + 8) = *v32;
                  if (v33)
                  {
                    *(void *)(v33 + 16) = v25;
                    uint64_t v26 = *(uint64_t **)(v25 + 16);
                  }
                  v32[2] = (uint64_t)v26;
                  *(void *)(*(void *)(v25 + 16) + 8 * (**(void **)(v25 + 16) != v25)) = v32;
                  *__n128 v32 = v25;
                  *(void *)(v25 + 16) = v32;
                  uint64_t v26 = (uint64_t *)v32[2];
                  uint64_t v25 = *v26;
                  *((unsigned char *)v32 + 24) = 1;
                  *((unsigned char *)v26 + 24) = 0;
                  uint64_t v34 = *(void *)(v25 + 8);
                  uint64_t *v26 = v34;
                  if (v34) {
LABEL_42:
                  }
                    *(void *)(v34 + 16) = v26;
                }
                *(void *)(v25 + 16) = v26[2];
                *(void *)(v26[2] + 8 * (*(void *)v26[2] != (void)v26)) = v25;
                *(void *)(v25 + 8) = v26;
LABEL_48:
                double v26[2] = v25;
                break;
              }
            }
            else if (!v27 || (int v29 = *(unsigned __int8 *)(v27 + 24), v28 = (unsigned char *)(v27 + 24), v29))
            {
              if (*(uint64_t **)v25 == v22)
              {
                uint64_t v55 = v22[1];
                *(void *)uint64_t v25 = v55;
                if (v55)
                {
                  *(void *)(v55 + 16) = v25;
                  uint64_t v26 = *(uint64_t **)(v25 + 16);
                }
                v22[2] = (uint64_t)v26;
                *(void *)(*(void *)(v25 + 16) + 8 * (**(void **)(v25 + 16) != v25)) = v22;
                v22[1] = v25;
                *(void *)(v25 + 16) = v22;
                uint64_t v26 = (uint64_t *)v22[2];
                *((unsigned char *)v22 + 24) = 1;
                *((unsigned char *)v26 + 24) = 0;
                uint64_t v25 = v26[1];
                __n128 v35 = *(uint64_t **)v25;
                v26[1] = *(void *)v25;
                if (v35) {
LABEL_46:
                }
                  void v35[2] = (uint64_t)v26;
              }
              else
              {
                *(unsigned char *)(v25 + 24) = 1;
                *((unsigned char *)v26 + 24) = 0;
                uint64_t v25 = v26[1];
                __n128 v35 = *(uint64_t **)v25;
                v26[1] = *(void *)v25;
                if (v35) {
                  goto LABEL_46;
                }
              }
              *(void *)(v25 + 16) = v26[2];
              *(void *)(v26[2] + 8 * (*(void *)v26[2] != (void)v26)) = v25;
              *(void *)uint64_t v25 = v26;
              goto LABEL_48;
            }
            *(unsigned char *)(v25 + 24) = 1;
            uint64_t v22 = v26;
            *((unsigned char *)v26 + 24) = v26 == v23;
            unsigned char *v28 = 1;
          }
          while (v26 != v23);
        }
        ++v61[6];
LABEL_50:
        __n128 v37 = (void **)(v14 + 9);
        __n128 v36 = (void *)v14[9];
        uint64_t v38 = v14 + 9;
        uint64_t v39 = v14 + 9;
        if (v36)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v39 = v36;
              uint64_t v40 = v36[4];
              if (i >= v40) {
                break;
              }
              __n128 v36 = (void *)*v39;
              uint64_t v38 = v39;
              if (!*v39) {
                goto LABEL_57;
              }
            }
            if (v40 >= i) {
              break;
            }
            __n128 v36 = (void *)v39[1];
            if (!v36)
            {
              uint64_t v38 = v39 + 1;
              goto LABEL_57;
            }
          }
        }
        else
        {
LABEL_57:
          __n128 v41 = operator new(0x28uLL);
          v41[4] = i;
          void *v41 = 0;
          v41[1] = 0;
          v41[2] = v39;
          *uint64_t v38 = v41;
          uint64_t v42 = *(void *)v14[8];
          if (v42)
          {
            v14[8] = v42;
            __n128 v41 = (void *)*v38;
          }
          __n128 v43 = *v37;
          BOOL v24 = v41 == *v37;
          *((unsigned char *)v41 + 24) = v24;
          if (!v24)
          {
            do
            {
              uint64_t v44 = v41[2];
              if (*(unsigned char *)(v44 + 24)) {
                break;
              }
              __n128 v45 = *(unsigned char **)(v44 + 16);
              uint64_t v46 = *(void *)v45;
              if (*(void *)v45 == v44)
              {
                uint64_t v49 = *((void *)v45 + 1);
                if (!v49 || (v50 = *(unsigned __int8 *)(v49 + 24), unint64_t v47 = (unsigned char *)(v49 + 24), v50))
                {
                  if (*(void **)v44 == v41)
                  {
                    *(unsigned char *)(v44 + 24) = 1;
                    v45[24] = 0;
                    uint64_t v53 = *(void *)(v44 + 8);
                    *(void *)__n128 v45 = v53;
                    if (v53) {
                      goto LABEL_74;
                    }
                  }
                  else
                  {
                    __n128 v51 = *(uint64_t **)(v44 + 8);
                    uint64_t v52 = *v51;
                    *(void *)(v44 + 8) = *v51;
                    if (v52)
                    {
                      *(void *)(v52 + 16) = v44;
                      __n128 v45 = *(unsigned char **)(v44 + 16);
                    }
                    v51[2] = (uint64_t)v45;
                    *(void *)(*(void *)(v44 + 16) + 8 * (**(void **)(v44 + 16) != v44)) = v51;
                    *__n128 v51 = v44;
                    *(void *)(v44 + 16) = v51;
                    __n128 v45 = (unsigned char *)v51[2];
                    uint64_t v44 = *(void *)v45;
                    *((unsigned char *)v51 + 24) = 1;
                    v45[24] = 0;
                    uint64_t v53 = *(void *)(v44 + 8);
                    *(void *)__n128 v45 = v53;
                    if (v53) {
LABEL_74:
                    }
                      *(void *)(v53 + 16) = v45;
                  }
                  *(void *)(v44 + 16) = *((void *)v45 + 2);
                  *(void *)(*((void *)v45 + 2) + 8 * (**((void **)v45 + 2) != (void)v45)) = v44;
                  *(void *)(v44 + 8) = v45;
LABEL_7:
                  *((void *)v45 + 2) = v44;
                  break;
                }
              }
              else if (!v46 || (v48 = *(unsigned __int8 *)(v46 + 24), unint64_t v47 = (unsigned char *)(v46 + 24), v48))
              {
                if (*(void **)v44 == v41)
                {
                  uint64_t v56 = v41[1];
                  *(void *)uint64_t v44 = v56;
                  if (v56)
                  {
                    *(void *)(v56 + 16) = v44;
                    __n128 v45 = *(unsigned char **)(v44 + 16);
                  }
                  v41[2] = v45;
                  *(void *)(*(void *)(v44 + 16) + 8 * (**(void **)(v44 + 16) != v44)) = v41;
                  v41[1] = v44;
                  *(void *)(v44 + 16) = v41;
                  __n128 v45 = (unsigned char *)v41[2];
                  *((unsigned char *)v41 + 24) = 1;
                  v45[24] = 0;
                  uint64_t v44 = *((void *)v45 + 1);
                  long long v54 = *(void **)v44;
                  *((void *)v45 + 1) = *(void *)v44;
                  if (!v54) {
                    goto LABEL_6;
                  }
                }
                else
                {
                  *(unsigned char *)(v44 + 24) = 1;
                  v45[24] = 0;
                  uint64_t v44 = *((void *)v45 + 1);
                  long long v54 = *(void **)v44;
                  *((void *)v45 + 1) = *(void *)v44;
                  if (!v54) {
                    goto LABEL_6;
                  }
                }
                v54[2] = v45;
LABEL_6:
                *(void *)(v44 + 16) = *((void *)v45 + 2);
                *(void *)(*((void *)v45 + 2) + 8 * (**((void **)v45 + 2) != (void)v45)) = v44;
                *(void *)uint64_t v44 = v45;
                goto LABEL_7;
              }
              *(unsigned char *)(v44 + 24) = 1;
              __n128 v41 = v45;
              v45[24] = v45 == (unsigned char *)v43;
              *unint64_t v47 = 1;
            }
            while (v45 != (unsigned char *)v43);
          }
          ++v14[10];
        }
        ++v7;
      }
      while (v7 != 2);
      uint64_t v5 = (void *)v61[2];
    }
  }
  uint64_t v63 = 1;
  __n128 v57 = (uint64_t *)*v2;
  if ((uint64_t **)*v2 != v3)
  {
    do
    {
      sub_1002E3290((uint64_t)v61, &v63, v57 + 4, v57 + 7, -1);
      __n128 v59 = (uint64_t *)v57[1];
      if (v59)
      {
        do
        {
          __n128 v60 = (uint64_t **)v59;
          __n128 v59 = (uint64_t *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          __n128 v60 = (uint64_t **)v57[2];
          BOOL v24 = *v60 == v57;
          __n128 v57 = (uint64_t *)v60;
        }
        while (!v24);
      }
      __n128 v57 = (uint64_t *)v60;
    }
    while (v60 != v3);
  }
  sub_1002E357C(v61);
  sub_1002E36D4(v61);
  sub_1002E4010((uint64_t)v61);
  return sub_1002E42D8(v61);
}

void sub_1002E3138(uint64_t a1, void *a2, unint64_t *a3, unsigned char *a4)
{
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4[5])
  {
    for (unint64_t i = 0; i < v4[5]; ++i)
    {
      uint64_t v11 = *(void *)(v4[1] + (((i + v4[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((i + *((_DWORD *)v4 + 8)) & 0xF);
      if (*(unsigned char *)(v11 + 32)) {
        goto LABEL_5;
      }
      int v12 = *(_DWORD *)(v11 + 40);
      if (v12 == 4)
      {
        if (*(_DWORD *)(v11 + 208) == 4)
        {
          BOOL v10 = *(double *)(v11 + 112) <= *(double *)(v11 + 280);
          goto LABEL_4;
        }
      }
      else if (v12 == 3 && *(_DWORD *)(v11 + 208) == 3)
      {
        goto LABEL_5;
      }
      sub_1002E490C(a1, v11, i, 0, a2, a3, a4);
      BOOL v10 = 1;
LABEL_4:
      sub_1002E490C(a1, v11, i, v10, a2, a3, a4);
LABEL_5:
      uint64_t v4 = *(void **)(a1 + 72);
    }
  }
}

uint64_t sub_1002E3254(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002E3290(uint64_t result, void *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  if (*a4 <= 0)
  {
    uint64_t v5 = a5;
    uint64_t v8 = result;
    if (a5 == -1) {
      uint64_t v5 = (*a2)++;
    }
    *a4 = v5;
    uint64_t v9 = (uint64_t *)a4[1];
    BOOL v10 = a4 + 2;
    if (v9 != a4 + 2)
    {
      uint64_t v11 = (void *)(result + 40);
      do
      {
        uint64_t v12 = *(void *)(v8 + 16);
        unint64_t v13 = *(void *)(v12 + 32) + v9[4];
        uint64_t v14 = *(void *)(*(void *)(v12 + 8) + ((v13 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v13 & 0xF);
        if (!*(unsigned char *)(v14 + 32))
        {
          int v15 = *(_DWORD *)(v14 + 40);
          int v16 = *(_DWORD *)(v14 + 208);
          BOOL v17 = v15 == 3 && v16 == 3;
          if (!v17)
          {
            if (*(uint64_t *)(v14 + 24) <= 0)
            {
              if (v15 == 1)
              {
                if (v16 != 1) {
                  goto LABEL_24;
                }
              }
              else if (v15 != 2 || v16 != 2)
              {
LABEL_24:
                uint64_t v20 = *(void *)(v14 + 48);
                uint64_t v19 = *(void *)(v14 + 56);
                uint64_t v21 = *(void *)(v14 + 64);
                uint64_t v54 = v20;
                uint64_t v55 = v19;
                uint64_t v56 = v21;
                uint64_t v22 = a3[1];
                uint64_t v23 = a3[2];
                uint64_t v24 = *a3;
                if (v20 == *a3 && v21 == v23 && v19 == v22)
                {
                  uint64_t v22 = v19;
                  uint64_t v23 = v21;
                  uint64_t v24 = v20;
                }
                else
                {
                  uint64_t v27 = (void *)*v11;
                  if (*v11)
                  {
                    __n128 v28 = (void *)(v8 + 40);
                    do
                    {
                      uint64_t v32 = v27[4];
                      BOOL v33 = v32 < v20;
                      if (v32 == v20)
                      {
                        uint64_t v34 = v27[5];
                        BOOL v33 = v34 < v19;
                        if (v34 == v19) {
                          BOOL v33 = v27[6] < v21;
                        }
                      }
                      int v29 = v33;
                      BOOL v30 = v29 == 0;
                      if (v29) {
                        int v31 = v27 + 1;
                      }
                      else {
                        int v31 = v27;
                      }
                      if (v30) {
                        __n128 v28 = v27;
                      }
                      uint64_t v27 = (void *)*v31;
                    }
                    while (*v31);
                    if (v28 != v11)
                    {
                      uint64_t v46 = v28[4];
                      BOOL v47 = v20 < v46;
                      if (v20 == v46 && (v48 = v28[5], BOOL v47 = v19 < v48, v19 == v48))
                      {
                        if (v21 >= v28[6])
                        {
LABEL_83:
                          uint64_t result = sub_1002E3290(v8, a2, &v54, v28 + 7, v5);
                          uint64_t v22 = a3[1];
                          uint64_t v23 = a3[2];
                          uint64_t v24 = *a3;
                        }
                      }
                      else if (!v47)
                      {
                        goto LABEL_83;
                      }
                    }
                  }
                }
                uint64_t v36 = *(void *)(v14 + 216);
                uint64_t v35 = *(void *)(v14 + 224);
                uint64_t v37 = *(void *)(v14 + 232);
                uint64_t v54 = v36;
                uint64_t v55 = v35;
                uint64_t v56 = v37;
                if (v36 != v24 || v37 != v23 || v35 != v22)
                {
                  uint64_t v38 = (void *)*v11;
                  if (*v11)
                  {
                    uint64_t v39 = (void *)(v8 + 40);
                    do
                    {
                      uint64_t v43 = v38[4];
                      BOOL v44 = v43 < v36;
                      if (v43 == v36)
                      {
                        uint64_t v45 = v38[5];
                        BOOL v44 = v45 < v35;
                        if (v45 == v35) {
                          BOOL v44 = v38[6] < v37;
                        }
                      }
                      int v40 = v44;
                      BOOL v41 = v40 == 0;
                      if (v40) {
                        uint64_t v42 = v38 + 1;
                      }
                      else {
                        uint64_t v42 = v38;
                      }
                      if (v41) {
                        uint64_t v39 = v38;
                      }
                      uint64_t v38 = (void *)*v42;
                    }
                    while (*v42);
                    if (v39 != v11)
                    {
                      uint64_t v49 = v39[4];
                      BOOL v50 = v36 < v49;
                      if (v36 == v49)
                      {
                        uint64_t v51 = v39[5];
                        BOOL v50 = v35 < v51;
                        if (v35 == v51) {
                          BOOL v50 = v37 < v39[6];
                        }
                      }
                      if (!v50) {
                        uint64_t result = sub_1002E3290(v8, a2, &v54, v39 + 7, v5);
                      }
                    }
                  }
                }
              }
            }
            else if (*(void *)(v14 + 176) == *(void *)(v14 + 344))
            {
              goto LABEL_24;
            }
          }
        }
        uint64_t v52 = (uint64_t *)v9[1];
        if (v52)
        {
          do
          {
            uint64_t v53 = v52;
            uint64_t v52 = (uint64_t *)*v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            uint64_t v53 = (uint64_t *)v9[2];
            BOOL v17 = *v53 == (void)v9;
            uint64_t v9 = v53;
          }
          while (!v17);
        }
        uint64_t v9 = v53;
      }
      while (v53 != v10);
    }
  }
  return result;
}

void *sub_1002E357C(void *result)
{
  uint64_t v1 = (void *)result[4];
  if (v1 != result + 5)
  {
    do
    {
      uint64_t v2 = (void *)v1[8];
      if (v2 != v1 + 9)
      {
        uint64_t v3 = result[2];
        uint64_t v4 = *(void *)(v3 + 32);
        uint64_t v5 = *(void *)(v3 + 8);
        do
        {
          uint64_t v6 = *(void *)(v5 + (((unint64_t)(v4 + v2[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
             + 376 * ((v4 + *((_DWORD *)v2 + 8)) & 0xF);
          if (!*(unsigned char *)(v6 + 32))
          {
            BOOL v7 = *(_DWORD *)(v6 + 40) == 3 && *(_DWORD *)(v6 + 208) == 3;
            if (!v7)
            {
              uint64_t v8 = v1[4];
              if (*(void *)(v6 + 48) == v8 && *(void *)(v6 + 64) == v1[6] && *(void *)(v6 + 56) == v1[5]) {
                *(void *)(v6 + 184) = v1[7];
              }
              if (*(void *)(v6 + 216) == v8 && *(void *)(v6 + 232) == v1[6] && *(void *)(v6 + 224) == v1[5]) {
                *(void *)(v6 + 352) = v1[7];
              }
            }
          }
          uint64_t v9 = (void *)v2[1];
          if (v9)
          {
            do
            {
              BOOL v10 = v9;
              uint64_t v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              BOOL v10 = (void *)v2[2];
              BOOL v7 = *v10 == (void)v2;
              uint64_t v2 = v10;
            }
            while (!v7);
          }
          uint64_t v2 = v10;
        }
        while (v10 != v1 + 9);
      }
      uint64_t v11 = (void *)v1[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v1[2];
          BOOL v7 = *v12 == (void)v1;
          uint64_t v1 = v12;
        }
        while (!v7);
      }
      uint64_t v1 = v12;
    }
    while (v12 != result + 5);
  }
  return result;
}

uint64_t *sub_1002E36D4(uint64_t *result)
{
  uint64_t v1 = (void *)result[2];
  if (v1[5])
  {
    uint64_t v2 = result;
    unint64_t v3 = 0;
    uint64_t v4 = (uint64_t **)(result + 8);
    do
    {
      uint64_t v6 = (void *)(*(void *)(v1[1] + (((v1[4] + v3) >> 1) & 0x7FFFFFFFFFFFFFF8))
                    + 376 * ((*((_DWORD *)v1 + 8) + v3) & 0xF));
      uint64_t v7 = v6[3];
      if (v7 > 0) {
        uint64_t v8 = -v7;
      }
      else {
        uint64_t v8 = v3;
      }
      uint64_t v9 = v6[23];
      if (v9 != -1)
      {
        BOOL v10 = *v4;
        uint64_t v11 = v4;
        uint64_t v12 = (char *)v4;
        if (*v4)
        {
          unint64_t v13 = *v4;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (char *)v13;
              uint64_t v14 = v13[4];
              if (v9 >= v14) {
                break;
              }
              unint64_t v13 = *(uint64_t **)v12;
              uint64_t v11 = (uint64_t **)v12;
              if (!*(void *)v12) {
                goto LABEL_17;
              }
            }
            if (v14 >= v9) {
              break;
            }
            unint64_t v13 = (uint64_t *)*((void *)v12 + 1);
            if (!v13)
            {
              uint64_t v11 = (uint64_t **)(v12 + 8);
              goto LABEL_17;
            }
          }
        }
        else
        {
LABEL_17:
          int v15 = v12;
          uint64_t v12 = (char *)operator new(0x68uLL);
          *((void *)v12 + 4) = v9;
          *(_OWORD *)(v12 + 40) = xmmword_1003FAAE0;
          *((void *)v12 + 8) = 0;
          *((void *)v12 + 7) = v12 + 64;
          *((void *)v12 + 12) = 0;
          *((void *)v12 + 11) = 0;
          *((void *)v12 + 9) = 0;
          *((void *)v12 + 10) = v12 + 88;
          *(void *)uint64_t v12 = 0;
          *((void *)v12 + 1) = 0;
          *((void *)v12 + 2) = v15;
          *uint64_t v11 = (uint64_t *)v12;
          uint64_t v16 = *(void *)v2[7];
          BOOL v17 = (uint64_t *)v12;
          if (v16)
          {
            v2[7] = v16;
            BOOL v17 = *v11;
          }
          uint64_t result = sub_1000619B8((uint64_t *)v2[8], v17);
          BOOL v10 = (uint64_t *)v2[8];
          ++v2[9];
        }
        *((void *)v12 + 5) = v9;
        uint64_t v18 = v6[23];
        uint64_t v19 = v4;
        uint64_t v20 = (char *)v4;
        if (v10)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v20 = (char *)v10;
              uint64_t v21 = v10[4];
              if (v18 >= v21) {
                break;
              }
              BOOL v10 = *(uint64_t **)v20;
              uint64_t v19 = (uint64_t **)v20;
              if (!*(void *)v20) {
                goto LABEL_27;
              }
            }
            if (v21 >= v18) {
              break;
            }
            BOOL v10 = (uint64_t *)*((void *)v20 + 1);
            if (!v10)
            {
              uint64_t v19 = (uint64_t **)(v20 + 8);
              goto LABEL_27;
            }
          }
        }
        else
        {
LABEL_27:
          uint64_t v22 = v20;
          uint64_t v20 = (char *)operator new(0x68uLL);
          *((void *)v20 + 4) = v18;
          *(_OWORD *)(v20 + 40) = xmmword_1003FAAE0;
          *((void *)v20 + 8) = 0;
          *((void *)v20 + 7) = v20 + 64;
          *((void *)v20 + 12) = 0;
          *((void *)v20 + 11) = 0;
          *((void *)v20 + 9) = 0;
          *((void *)v20 + 10) = v20 + 88;
          *(void *)uint64_t v20 = 0;
          *((void *)v20 + 1) = 0;
          *((void *)v20 + 2) = v22;
          *uint64_t v19 = (uint64_t *)v20;
          uint64_t v23 = *(void *)v2[7];
          uint64_t v24 = (uint64_t *)v20;
          if (v23)
          {
            v2[7] = v23;
            uint64_t v24 = *v19;
          }
          uint64_t result = sub_1000619B8((uint64_t *)v2[8], v24);
          ++v2[9];
        }
        uint64_t v26 = (uint64_t **)(v20 + 64);
        uint64_t v25 = (uint64_t *)*((void *)v20 + 8);
        if (v25)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v27 = (uint64_t **)v25;
              uint64_t v28 = v25[4];
              if (v8 >= v28) {
                break;
              }
              uint64_t v25 = *v27;
              uint64_t v26 = v27;
              if (!*v27) {
                goto LABEL_37;
              }
            }
            if (v28 >= v8) {
              break;
            }
            uint64_t v25 = v27[1];
            if (!v25)
            {
              uint64_t v26 = v27 + 1;
              goto LABEL_37;
            }
          }
        }
        else
        {
          uint64_t v27 = (uint64_t **)(v20 + 64);
LABEL_37:
          int v29 = (uint64_t *)operator new(0x28uLL);
          v29[4] = v8;
          *int v29 = 0;
          v29[1] = 0;
          v29[2] = (uint64_t)v27;
          uint64_t *v26 = v29;
          uint64_t v30 = **((void **)v20 + 7);
          if (v30)
          {
            *((void *)v20 + 7) = v30;
            int v31 = *v26;
          }
          else
          {
            int v31 = v29;
          }
          uint64_t result = sub_1000619B8(*((uint64_t **)v20 + 8), v31);
          ++*((void *)v20 + 9);
        }
      }
      uint64_t v32 = v6[44];
      if (v32 != -1 && v6[23] != v32)
      {
        uint64_t v34 = *v4;
        uint64_t v35 = v4;
        uint64_t v36 = (char *)v4;
        if (*v4)
        {
          uint64_t v37 = *v4;
          while (1)
          {
            while (1)
            {
              uint64_t v36 = (char *)v37;
              uint64_t v38 = v37[4];
              if (v32 >= v38) {
                break;
              }
              uint64_t v37 = *(uint64_t **)v36;
              uint64_t v35 = (uint64_t **)v36;
              if (!*(void *)v36) {
                goto LABEL_52;
              }
            }
            if (v38 >= v32) {
              break;
            }
            uint64_t v37 = (uint64_t *)*((void *)v36 + 1);
            if (!v37)
            {
              uint64_t v35 = (uint64_t **)(v36 + 8);
              goto LABEL_52;
            }
          }
        }
        else
        {
LABEL_52:
          uint64_t v39 = v36;
          uint64_t v36 = (char *)operator new(0x68uLL);
          *((void *)v36 + 4) = v32;
          *(_OWORD *)(v36 + 40) = xmmword_1003FAAE0;
          *((void *)v36 + 8) = 0;
          *((void *)v36 + 7) = v36 + 64;
          *((void *)v36 + 12) = 0;
          *((void *)v36 + 11) = 0;
          *((void *)v36 + 9) = 0;
          *((void *)v36 + 10) = v36 + 88;
          *(void *)uint64_t v36 = 0;
          *((void *)v36 + 1) = 0;
          *((void *)v36 + 2) = v39;
          *uint64_t v35 = (uint64_t *)v36;
          uint64_t v40 = *(void *)v2[7];
          BOOL v41 = (uint64_t *)v36;
          if (v40)
          {
            v2[7] = v40;
            BOOL v41 = *v35;
          }
          uint64_t result = sub_1000619B8((uint64_t *)v2[8], v41);
          uint64_t v34 = (uint64_t *)v2[8];
          ++v2[9];
        }
        *((void *)v36 + 5) = v32;
        uint64_t v42 = v6[44];
        uint64_t v43 = v4;
        BOOL v44 = (char *)v4;
        if (v34)
        {
          while (1)
          {
            while (1)
            {
              BOOL v44 = (char *)v34;
              uint64_t v45 = v34[4];
              if (v42 >= v45) {
                break;
              }
              uint64_t v34 = *(uint64_t **)v44;
              uint64_t v43 = (uint64_t **)v44;
              if (!*(void *)v44) {
                goto LABEL_62;
              }
            }
            if (v45 >= v42) {
              break;
            }
            uint64_t v34 = (uint64_t *)*((void *)v44 + 1);
            if (!v34)
            {
              uint64_t v43 = (uint64_t **)(v44 + 8);
              goto LABEL_62;
            }
          }
        }
        else
        {
LABEL_62:
          uint64_t v46 = v44;
          BOOL v44 = (char *)operator new(0x68uLL);
          *((void *)v44 + 4) = v42;
          *(_OWORD *)(v44 + 40) = xmmword_1003FAAE0;
          *((void *)v44 + 8) = 0;
          *((void *)v44 + 7) = v44 + 64;
          *((void *)v44 + 12) = 0;
          *((void *)v44 + 11) = 0;
          *((void *)v44 + 9) = 0;
          *((void *)v44 + 10) = v44 + 88;
          *(void *)BOOL v44 = 0;
          *((void *)v44 + 1) = 0;
          *((void *)v44 + 2) = v46;
          *uint64_t v43 = (uint64_t *)v44;
          uint64_t v47 = *(void *)v2[7];
          uint64_t v48 = (uint64_t *)v44;
          if (v47)
          {
            v2[7] = v47;
            uint64_t v48 = *v43;
          }
          uint64_t result = sub_1000619B8((uint64_t *)v2[8], v48);
          ++v2[9];
        }
        BOOL v50 = (uint64_t **)(v44 + 64);
        uint64_t v49 = (uint64_t *)*((void *)v44 + 8);
        if (v49)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v51 = (uint64_t **)v49;
              uint64_t v52 = v49[4];
              if (v8 >= v52) {
                break;
              }
              uint64_t v49 = *v51;
              BOOL v50 = v51;
              if (!*v51) {
                goto LABEL_72;
              }
            }
            if (v52 >= v8) {
              break;
            }
            uint64_t v49 = v51[1];
            if (!v49)
            {
              BOOL v50 = v51 + 1;
              goto LABEL_72;
            }
          }
        }
        else
        {
          uint64_t v51 = (uint64_t **)(v44 + 64);
LABEL_72:
          uint64_t v53 = (uint64_t *)operator new(0x28uLL);
          v53[4] = v8;
          uint64_t *v53 = 0;
          v53[1] = 0;
          v53[2] = (uint64_t)v51;
          *BOOL v50 = v53;
          uint64_t v54 = **((void **)v44 + 7);
          if (v54)
          {
            *((void *)v44 + 7) = v54;
            uint64_t v55 = *v50;
          }
          else
          {
            uint64_t v55 = v53;
          }
          uint64_t result = sub_1000619B8(*((uint64_t **)v44 + 8), v55);
          ++*((void *)v44 + 9);
        }
      }
      uint64_t v56 = v6[23];
      uint64_t v57 = v6[44];
      if (v57 != -1 && v56 != -1 && v56 != v57)
      {
        __n128 v60 = *v4;
        __n128 v61 = v4;
        uint64_t v62 = (char *)v4;
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v62 = (char *)v60;
              uint64_t v63 = v60[4];
              if (v56 >= v63) {
                break;
              }
              __n128 v60 = *(uint64_t **)v62;
              __n128 v61 = (uint64_t **)v62;
              if (!*(void *)v62) {
                goto LABEL_90;
              }
            }
            if (v63 >= v56) {
              break;
            }
            __n128 v60 = (uint64_t *)*((void *)v62 + 1);
            if (!v60)
            {
              __n128 v61 = (uint64_t **)(v62 + 8);
              goto LABEL_90;
            }
          }
        }
        else
        {
LABEL_90:
          long long v64 = v62;
          uint64_t v62 = (char *)operator new(0x68uLL);
          *((void *)v62 + 4) = v56;
          *(_OWORD *)(v62 + 40) = xmmword_1003FAAE0;
          *((void *)v62 + 8) = 0;
          *((void *)v62 + 7) = v62 + 64;
          *((void *)v62 + 12) = 0;
          *((void *)v62 + 11) = 0;
          *((void *)v62 + 9) = 0;
          *((void *)v62 + 10) = v62 + 88;
          *(void *)uint64_t v62 = 0;
          *((void *)v62 + 1) = 0;
          *((void *)v62 + 2) = v64;
          *__n128 v61 = (uint64_t *)v62;
          uint64_t v65 = *(void *)v2[7];
          __n128 v66 = (uint64_t *)v62;
          if (v65)
          {
            v2[7] = v65;
            __n128 v66 = *v61;
          }
          uint64_t result = sub_1000619B8((uint64_t *)v2[8], v66);
          ++v2[9];
          uint64_t v57 = v6[44];
        }
        __n128 v68 = (uint64_t **)(v62 + 88);
        __n128 v67 = (char *)*((void *)v62 + 11);
        if (v67)
        {
          while (1)
          {
            while (1)
            {
              __n128 v69 = v67;
              uint64_t v70 = *((void *)v67 + 4);
              if (v57 >= v70) {
                break;
              }
              __n128 v67 = *(char **)v69;
              __n128 v68 = (uint64_t **)v69;
              if (!*(void *)v69) {
                goto LABEL_100;
              }
            }
            if (v70 >= v57) {
              break;
            }
            __n128 v67 = (char *)*((void *)v69 + 1);
            if (!v67)
            {
              __n128 v68 = (uint64_t **)(v69 + 8);
              goto LABEL_100;
            }
          }
        }
        else
        {
          __n128 v69 = v62 + 88;
LABEL_100:
          __n128 v71 = v69;
          __n128 v69 = (char *)operator new(0x48uLL);
          *((void *)v69 + 4) = v57;
          *(_OWORD *)(v69 + 40) = 0u;
          *(_OWORD *)(v69 + 56) = 0u;
          *((void *)v69 + 6) = v69 + 56;
          *(void *)__n128 v69 = 0;
          *((void *)v69 + 1) = 0;
          *((void *)v69 + 2) = v71;
          *__n128 v68 = (uint64_t *)v69;
          uint64_t v72 = **((void **)v62 + 10);
          __n128 v73 = (uint64_t *)v69;
          if (v72)
          {
            *((void *)v62 + 10) = v72;
            __n128 v73 = *v68;
          }
          uint64_t result = sub_1000619B8(*((uint64_t **)v62 + 11), v73);
          ++*((void *)v62 + 12);
          uint64_t v57 = v6[44];
        }
        __n128 v74 = *v4;
        __n128 v75 = v4;
        __n128 v76 = (char *)v4;
        if (*v4)
        {
          while (1)
          {
            while (1)
            {
              __n128 v76 = (char *)v74;
              uint64_t v77 = v74[4];
              if (v57 >= v77) {
                break;
              }
              __n128 v74 = *(uint64_t **)v76;
              __n128 v75 = (uint64_t **)v76;
              if (!*(void *)v76) {
                goto LABEL_110;
              }
            }
            if (v77 >= v57) {
              break;
            }
            __n128 v74 = (uint64_t *)*((void *)v76 + 1);
            if (!v74)
            {
              __n128 v75 = (uint64_t **)(v76 + 8);
              goto LABEL_110;
            }
          }
        }
        else
        {
LABEL_110:
          __n128 v78 = v76;
          __n128 v76 = (char *)operator new(0x68uLL);
          *((void *)v76 + 4) = v57;
          *(_OWORD *)(v76 + 40) = xmmword_1003FAAE0;
          *((void *)v76 + 8) = 0;
          *((void *)v76 + 7) = v76 + 64;
          *((void *)v76 + 12) = 0;
          *((void *)v76 + 11) = 0;
          *((void *)v76 + 9) = 0;
          *((void *)v76 + 10) = v76 + 88;
          *(void *)__n128 v76 = 0;
          *((void *)v76 + 1) = 0;
          *((void *)v76 + 2) = v78;
          *__n128 v75 = (uint64_t *)v76;
          uint64_t v79 = *(void *)v2[7];
          long long v80 = (uint64_t *)v76;
          if (v79)
          {
            v2[7] = v79;
            long long v80 = *v75;
          }
          uint64_t result = sub_1000619B8((uint64_t *)v2[8], v80);
          ++v2[9];
        }
        long long v82 = (uint64_t **)(v76 + 88);
        long long v81 = (char *)*((void *)v76 + 11);
        uint64_t v83 = v6[23];
        if (v81)
        {
          while (1)
          {
            while (1)
            {
              long long v84 = v81;
              uint64_t v85 = *((void *)v81 + 4);
              if (v83 >= v85) {
                break;
              }
              long long v81 = *(char **)v84;
              long long v82 = (uint64_t **)v84;
              if (!*(void *)v84) {
                goto LABEL_120;
              }
            }
            if (v85 >= v83) {
              break;
            }
            long long v81 = (char *)*((void *)v84 + 1);
            if (!v81)
            {
              long long v82 = (uint64_t **)(v84 + 8);
              goto LABEL_120;
            }
          }
        }
        else
        {
          long long v84 = v76 + 88;
LABEL_120:
          long long v86 = v84;
          long long v84 = (char *)operator new(0x48uLL);
          *((void *)v84 + 4) = v83;
          *(_OWORD *)(v84 + 40) = 0u;
          *(_OWORD *)(v84 + 56) = 0u;
          *((void *)v84 + 6) = v84 + 56;
          *(void *)long long v84 = 0;
          *((void *)v84 + 1) = 0;
          *((void *)v84 + 2) = v86;
          *long long v82 = (uint64_t *)v84;
          uint64_t v87 = **((void **)v76 + 10);
          long long v88 = (uint64_t *)v84;
          if (v87)
          {
            *((void *)v76 + 10) = v87;
            long long v88 = *v82;
          }
          uint64_t result = sub_1000619B8(*((uint64_t **)v76 + 11), v88);
          ++*((void *)v76 + 12);
        }
        long long v90 = (uint64_t **)(v69 + 56);
        long long v89 = (uint64_t *)*((void *)v69 + 7);
        long long v91 = v89;
        if (v89)
        {
          do
          {
            uint64_t v93 = v91[4];
            if (v8 >= v93)
            {
              if (v93 >= v8) {
                goto LABEL_139;
              }
              ++v91;
            }
            long long v91 = (uint64_t *)*v91;
          }
          while (v91);
          ++*((void *)v69 + 5);
          while (1)
          {
            while (1)
            {
              long long v92 = (uint64_t **)v89;
              uint64_t v94 = v89[4];
              if (v8 >= v94) {
                break;
              }
              long long v89 = *v92;
              long long v90 = v92;
              if (!*v92) {
                goto LABEL_135;
              }
            }
            if (v94 >= v8) {
              break;
            }
            long long v89 = v92[1];
            if (!v89)
            {
              long long v90 = v92 + 1;
              goto LABEL_135;
            }
          }
        }
        else
        {
          ++*((void *)v69 + 5);
          long long v92 = (uint64_t **)(v69 + 56);
LABEL_135:
          long long v95 = (uint64_t *)operator new(0x28uLL);
          v95[4] = v8;
          uint64_t *v95 = 0;
          v95[1] = 0;
          v95[2] = (uint64_t)v92;
          long long *v90 = v95;
          uint64_t v96 = **((void **)v69 + 6);
          if (v96)
          {
            *((void *)v69 + 6) = v96;
            uint64_t v97 = *v90;
          }
          else
          {
            uint64_t v97 = v95;
          }
          uint64_t result = sub_1000619B8(*((uint64_t **)v69 + 7), v97);
          ++*((void *)v69 + 8);
        }
LABEL_139:
        long long v99 = (uint64_t **)(v84 + 56);
        long long v98 = (uint64_t *)*((void *)v84 + 7);
        __n128 v100 = v98;
        if (v98)
        {
          do
          {
            uint64_t v102 = v100[4];
            if (v8 >= v102)
            {
              if (v102 >= v8) {
                goto LABEL_5;
              }
              ++v100;
            }
            __n128 v100 = (uint64_t *)*v100;
          }
          while (v100);
          ++*((void *)v84 + 5);
          while (1)
          {
            while (1)
            {
              long long v101 = (uint64_t **)v98;
              uint64_t v103 = v98[4];
              if (v8 >= v103) {
                break;
              }
              long long v98 = *v101;
              long long v99 = v101;
              if (!*v101) {
                goto LABEL_151;
              }
            }
            if (v103 >= v8) {
              break;
            }
            long long v98 = v101[1];
            if (!v98)
            {
              long long v99 = v101 + 1;
              goto LABEL_151;
            }
          }
        }
        else
        {
          ++*((void *)v84 + 5);
          long long v101 = (uint64_t **)(v84 + 56);
LABEL_151:
          double v104 = (uint64_t *)operator new(0x28uLL);
          v104[4] = v8;
          *double v104 = 0;
          v104[1] = 0;
          v104[2] = (uint64_t)v101;
          *long long v99 = v104;
          uint64_t v105 = **((void **)v84 + 6);
          if (v105)
          {
            *((void *)v84 + 6) = v105;
            uint64_t v5 = *v99;
          }
          else
          {
            uint64_t v5 = v104;
          }
          uint64_t result = sub_1000619B8(*((uint64_t **)v84 + 7), v5);
          ++*((void *)v84 + 8);
        }
      }
LABEL_5:
      ++v3;
      uint64_t v1 = (void *)v2[2];
    }
    while (v3 < v1[5]);
  }
  return result;
}

uint64_t sub_1002E4010(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void **)(result + 56);
  unint64_t v3 = (void *)(result + 64);
  if (v2 != (void *)(result + 64))
  {
    do
    {
      uint64_t v4 = v2[12];
      if (v4)
      {
        if (v4 == 1)
        {
          if (*(void *)(v2[10] + 40) < 2uLL) {
            int v5 = 1;
          }
          else {
            int v5 = 2;
          }
          goto LABEL_23;
        }
        uint64_t v6 = (void *)v2[10];
        if (v6 != v2 + 11)
        {
          uint64_t v7 = 0;
          char v8 = 1;
          while (v6[5] == 1)
          {
            uint64_t v9 = *(void *)(v6[6] + 32);
            if ((v8 & 1) == 0)
            {
              BOOL v10 = v7 == v9;
              uint64_t v9 = v7;
              if (!v10) {
                break;
              }
            }
            uint64_t v11 = (void *)v6[1];
            if (v11)
            {
              do
              {
                uint64_t v12 = v11;
                uint64_t v11 = (void *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                uint64_t v12 = (void *)v6[2];
                BOOL v10 = *v12 == (void)v6;
                uint64_t v6 = v12;
              }
              while (!v10);
            }
            char v8 = 0;
            uint64_t v7 = v9;
            uint64_t v6 = v12;
            if (v12 == v2 + 11) {
              goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
      }
LABEL_22:
      int v5 = 1;
LABEL_23:
      *((_DWORD *)v2 + 12) = v5;
LABEL_24:
      unint64_t v13 = (void *)v2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v2[2];
          BOOL v10 = *v14 == (void)v2;
          uint64_t v2 = v14;
        }
        while (!v10);
      }
      uint64_t v2 = v14;
    }
    while (v14 != v3);
  }
  unint64_t v30 = 0;
LABEL_32:
  if (v30 < *(void *)(v1 + 72))
  {
    int v15 = *(void **)(v1 + 56);
    if (v15 != v3)
    {
      char v16 = 0;
      ++v30;
      while (1)
      {
        if (!*((_DWORD *)v15 + 12))
        {
          BOOL v17 = (void *)v15[10];
          if (v17 != v15 + 11)
          {
            uint64_t v18 = 0;
            char v19 = 1;
            while (1)
            {
              uint64_t v20 = (void *)*v3;
              if (!*v3) {
                goto LABEL_64;
              }
              uint64_t v21 = v17[4];
              uint64_t v22 = v3;
              do
              {
                uint64_t v23 = v20[4];
                BOOL v24 = v23 < v21;
                if (v23 >= v21) {
                  uint64_t v25 = v20;
                }
                else {
                  uint64_t v25 = v20 + 1;
                }
                if (!v24) {
                  uint64_t v22 = v20;
                }
                uint64_t v20 = (void *)*v25;
              }
              while (*v25);
              if (v22 == v3) {
                goto LABEL_64;
              }
              if (v21 < v22[4]) {
                goto LABEL_64;
              }
              if (v17[5] != 1)
              {
                uint64_t result = sub_1002E454C(v1, v15 + 5, v22 + 5);
                if (!result) {
                  goto LABEL_64;
                }
              }
              if ((*((_DWORD *)v22 + 12) - 1) < 2) {
                goto LABEL_55;
              }
              if (v19) {
                break;
              }
              if (v18 != *(void *)(v17[6] + 32)) {
                goto LABEL_64;
              }
              char v19 = 0;
              uint64_t v26 = (void *)v17[1];
              if (!v26)
              {
                do
                {
LABEL_60:
                  uint64_t v27 = (void *)v17[2];
                  BOOL v10 = *v27 == (void)v17;
                  BOOL v17 = v27;
                }
                while (!v10);
                goto LABEL_39;
              }
              do
              {
LABEL_56:
                uint64_t v27 = v26;
                uint64_t v26 = (void *)*v26;
              }
              while (v26);
LABEL_39:
              BOOL v17 = v27;
              if (v27 == v15 + 11) {
                goto LABEL_63;
              }
            }
            char v19 = 0;
            uint64_t v18 = *(void *)(v17[6] + 32);
LABEL_55:
            uint64_t v26 = (void *)v17[1];
            if (!v26) {
              goto LABEL_60;
            }
            goto LABEL_56;
          }
LABEL_63:
          char v16 = 1;
          *((_DWORD *)v15 + 12) = 1;
        }
LABEL_64:
        uint64_t v28 = (void *)v15[1];
        if (v28)
        {
          do
          {
            int v29 = v28;
            uint64_t v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            int v29 = (void *)v15[2];
            BOOL v10 = *v29 == (void)v15;
            int v15 = v29;
          }
          while (!v10);
        }
        int v15 = v29;
        if (v29 == v3)
        {
          if (v16) {
            goto LABEL_32;
          }
          return result;
        }
      }
    }
  }
  return result;
}

void *sub_1002E42D8(void *result)
{
  uint64_t v1 = (void *)result[2];
  uint64_t v2 = v1[1];
  if (v1[2] != v2)
  {
    unint64_t v3 = v1[4];
    uint64_t v4 = v1[5];
    int v5 = (uint64_t *)(v2 + 8 * (v3 >> 4));
    uint64_t v6 = *v5;
    uint64_t v7 = *v5 + 376 * (v3 & 0xF);
    uint64_t v8 = *(void *)(v2 + (((v4 + v3) >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * ((v4 + v3) & 0xF);
    if (v7 != v8)
    {
      BOOL v10 = (void *)result[8];
      result += 8;
      uint64_t v9 = v10;
      if (v10)
      {
        do
        {
          uint64_t v11 = *(void *)(v7 + 184);
          uint64_t v12 = result;
          unint64_t v13 = v9;
          do
          {
            uint64_t v14 = v13[4];
            BOOL v15 = v14 < v11;
            if (v14 >= v11) {
              char v16 = v13;
            }
            else {
              char v16 = v13 + 1;
            }
            if (!v15) {
              uint64_t v12 = v13;
            }
            unint64_t v13 = (void *)*v16;
          }
          while (*v16);
          if (v12 != result && v11 >= v12[4]) {
            *(unsigned char *)(v7 + 192) = *((_DWORD *)v12 + 12) == 1;
          }
          uint64_t v17 = *(void *)(v7 + 352);
          uint64_t v18 = result;
          char v19 = v9;
          do
          {
            uint64_t v20 = v19[4];
            BOOL v21 = v20 < v17;
            if (v20 >= v17) {
              uint64_t v22 = v19;
            }
            else {
              uint64_t v22 = v19 + 1;
            }
            if (!v21) {
              uint64_t v18 = v19;
            }
            char v19 = (void *)*v22;
          }
          while (*v22);
          if (v18 != result && v17 >= v18[4]) {
            *(unsigned char *)(v7 + 360) = *((_DWORD *)v18 + 12) == 1;
          }
          v7 += 376;
          if (v7 - *v5 == 6016)
          {
            uint64_t v23 = v5[1];
            ++v5;
            uint64_t v7 = v23;
          }
        }
        while (v7 != v8);
      }
      else
      {
        do
        {
          v7 += 376;
          if (v7 - v6 == 6016)
          {
            uint64_t v24 = v5[1];
            ++v5;
            uint64_t v6 = v24;
            uint64_t v7 = v24;
          }
        }
        while (v7 != v8);
      }
    }
  }
  return result;
}

void sub_1002E4420(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002E4420(a1, *a2);
    sub_1002E4420(a1, a2[1]);
    sub_10006A9DC((uint64_t)(a2 + 8), (void *)a2[9]);
    operator delete(a2);
  }
}

void sub_1002E4480(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002E4480(a1, *a2);
    sub_1002E4480(a1, a2[1]);
    sub_1002E44EC((uint64_t)(a2 + 10), (void *)a2[11]);
    sub_10006A9DC((uint64_t)(a2 + 7), (void *)a2[8]);
    operator delete(a2);
  }
}

void sub_1002E44EC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002E44EC(a1, *a2);
    sub_1002E44EC(a1, a2[1]);
    sub_10006A9DC((uint64_t)(a2 + 6), (void *)a2[7]);
    operator delete(a2);
  }
}

uint64_t sub_1002E454C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*((_DWORD *)a3 + 2) != 2) {
    return 0;
  }
  __n128 v60 = 0;
  uint64_t v61 = 0;
  __n128 v59 = (uint64_t *)&v60;
  sub_1002DD224(&v59, (void *)a2[2], a2 + 3);
  uint64_t v6 = (uint64_t *)a3[2];
  uint64_t v7 = a3 + 3;
  if (v6 != a3 + 3)
  {
    uint64_t v8 = v60;
    if (v60)
    {
LABEL_4:
      uint64_t v9 = v6[4];
      BOOL v10 = (uint64_t *)&v60;
      uint64_t v11 = v8;
      do
      {
        uint64_t v12 = v11;
        unint64_t v13 = v10;
        uint64_t v14 = v11[4];
        BOOL v15 = (uint64_t **)(v11 + 1);
        if (v14 >= v9) {
          BOOL v10 = v11;
        }
        else {
          ++v11;
        }
        uint64_t v11 = (uint64_t *)*v11;
      }
      while (v11);
      if (v10 != (uint64_t *)&v60)
      {
        if (v14 < v9) {
          uint64_t v12 = v13;
        }
        if (v9 >= v12[4])
        {
          char v16 = (uint64_t **)(v13 + 1);
          if (v14 >= v9) {
            uint64_t v17 = v15;
          }
          else {
            uint64_t v17 = v16;
          }
          uint64_t v18 = *v17;
          char v19 = v10;
          if (*v17)
          {
            do
            {
              uint64_t v20 = v18;
              uint64_t v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              uint64_t v20 = (uint64_t *)v19[2];
              BOOL v33 = *v20 == (void)v19;
              char v19 = v20;
            }
            while (!v33);
          }
          if (v59 == v10) {
            __n128 v59 = v20;
          }
          --v61;
          sub_1002845F8(v8, v10);
          operator delete(v10);
        }
      }
      while (1)
      {
        BOOL v21 = (uint64_t *)v6[1];
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            BOOL v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v22 = (uint64_t *)v6[2];
            BOOL v33 = *v22 == (void)v6;
            uint64_t v6 = v22;
          }
          while (!v33);
        }
        if (v22 == v7) {
          break;
        }
        uint64_t v8 = v60;
        uint64_t v6 = v22;
        if (v60) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      do
      {
        uint64_t v23 = (uint64_t *)v6[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            uint64_t v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (uint64_t *)v6[2];
            BOOL v33 = *v24 == (void)v6;
            uint64_t v6 = v24;
          }
          while (!v33);
        }
        uint64_t v6 = v24;
      }
      while (v24 != v7);
    }
  }
  if (v61 != 1) {
    goto LABEL_92;
  }
  uint64_t v26 = (uint64_t *)a3[2];
  if (v26 == v7)
  {
LABEL_93:
    uint64_t v25 = 1;
    goto LABEL_94;
  }
  uint64_t v27 = *a2;
  uint64_t v28 = *a3;
  while (1)
  {
    uint64_t v29 = v26[4];
    if (v29 < 0) {
      break;
    }
    uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8)
                    + (((unint64_t)(*(void *)(*(void *)(a1 + 16) + 32) + v29) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 376 * ((*(_DWORD *)(*(void *)(a1 + 16) + 32) + v29) & 0xF);
    if (*(_DWORD *)(v30 + 40) != 2 || *(_DWORD *)(v30 + 208) != 2) {
      goto LABEL_92;
    }
    uint64_t v31 = *(void *)(v30 + 184);
    uint64_t v32 = *(void *)(v30 + 352);
    BOOL v33 = v31 == v27 && v32 == v28;
    if (!v33 && (v32 != v27 || v31 != v28)) {
      goto LABEL_92;
    }
LABEL_86:
    uint64_t v56 = (uint64_t *)v26[1];
    if (v56)
    {
      do
      {
        uint64_t v57 = v56;
        uint64_t v56 = (uint64_t *)*v56;
      }
      while (v56);
    }
    else
    {
      do
      {
        uint64_t v57 = (uint64_t *)v26[2];
        BOOL v33 = *v57 == (void)v26;
        uint64_t v26 = v57;
      }
      while (!v33);
    }
    uint64_t v26 = v57;
    if (v57 == v7) {
      goto LABEL_93;
    }
  }
  uint64_t v35 = *(void *)(a1 + 24);
  uint64_t v38 = *(void **)(v35 + 8);
  uint64_t v36 = (void *)(v35 + 8);
  uint64_t v37 = v38;
  if (!v38) {
    goto LABEL_86;
  }
  uint64_t v39 = -v29;
  uint64_t v40 = v36;
  do
  {
    uint64_t v41 = v37[4];
    BOOL v42 = v41 < v39;
    if (v41 >= v39) {
      uint64_t v43 = v37;
    }
    else {
      uint64_t v43 = v37 + 1;
    }
    if (!v42) {
      uint64_t v40 = v37;
    }
    uint64_t v37 = (void *)*v43;
  }
  while (*v43);
  if (v40 == v36) {
    goto LABEL_86;
  }
  if (v40[4] > v39) {
    goto LABEL_86;
  }
  BOOL v44 = (void *)v40[5];
  uint64_t v45 = v40 + 6;
  if (v44 == v40 + 6) {
    goto LABEL_86;
  }
  uint64_t v46 = *(void *)(a1 + 16);
  uint64_t v47 = *(void *)(v46 + 32);
  uint64_t v48 = *(void *)(v46 + 8);
  while (1)
  {
    uint64_t v49 = *(void *)(v48 + (((unint64_t)(v47 + v44[4]) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 376 * ((v47 + *((_DWORD *)v44 + 8)) & 0xF);
    if (*(_DWORD *)(v49 + 40) != 2 || *(_DWORD *)(v49 + 208) != 2) {
      break;
    }
    uint64_t v50 = *(void *)(v49 + 184);
    uint64_t v51 = *(void *)(v49 + 352);
    if ((v50 != v27 || v51 != v28) && (v51 != v27 || v50 != v28)) {
      break;
    }
    uint64_t v54 = (void *)v44[1];
    if (v54)
    {
      do
      {
        uint64_t v55 = v54;
        uint64_t v54 = (void *)*v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        uint64_t v55 = (void *)v44[2];
        BOOL v33 = *v55 == (void)v44;
        BOOL v44 = v55;
      }
      while (!v33);
    }
    BOOL v44 = v55;
    if (v55 == v45) {
      goto LABEL_86;
    }
  }
LABEL_92:
  uint64_t v25 = 0;
LABEL_94:
  sub_10006A9DC((uint64_t)&v59, v60);
  return v25;
}

void sub_1002E48F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_1002E490C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5, unint64_t *a6, unsigned char *a7)
{
  uint64_t v7 = a2 + 40 + 168 * a4;
  if (*(_DWORD *)(v7 + 160)) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = *(unsigned char *)(v7 + 104) == 0;
  }
  if (!v8 && !*(unsigned char *)(a2 + 40 + 168 * a4 + 164))
  {
    int v10 = *(_DWORD *)v7;
    if (v10 == 4 || v10 == 1)
    {
      long long __p = 0;
      BOOL v21 = 0;
      uint64_t v22 = 0;
      uint64_t v18 = sub_1002E4A94((void *)a1, (uint64_t)&__p, a3, a4);
      if (v18)
      {
        char v19 = *(void **)(a1 + 72);
        sub_1002E5638(*a6, a5, &__p, v19, a2, *(void *)(v19[1] + (((unint64_t)(v19[4] + a3) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 376 * ((*((_DWORD *)v19 + 8) + a3) & 0xF)+ 168 * a4+ 40, v18, *(void *)(a1 + 56), *(uint64_t **)(a1 + 64), *(void *)(a1 + 96), *(void *)(a1 + 104), a7);
      }
      else if ((unint64_t)(v21 - (unsigned char *)__p) >= 0x31)
      {
        sub_1002E4C3C((uint64_t)&__p, *(void *)(a1 + 96), *(void *)(a1 + 104));
        sub_1002E4E24(a5, (uint64_t)&__p);
        sub_1002E4F58((void *)a1, *(uint64_t ***)(a1 + 80));
        ++*a6;
      }
      if (__p)
      {
        BOOL v21 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1002E4A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002E4A94(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1[9] + 8)
                 + (((unint64_t)(*(void *)(a1[9] + 32) + a3) >> 1) & 0x7FFFFFFFFFFFFFF8))
     + 376 * ((*(_DWORD *)(a1[9] + 32) + a3) & 0xF);
  sub_1002E5884(a2, (double *)v8, a1[12], a1[13]);
  uint64_t v20 = a3;
  int v19 = a4;
  uint64_t result = sub_1002E5B24((uint64_t)a1, a3, a4, &v20, &v19, a2, 1);
  if (!result)
  {
    uint64_t v10 = v8 + 40;
    if (v20 == a3)
    {
LABEL_3:
      uint64_t v11 = v10 + 168 * a4;
LABEL_4:
      uint64_t result = 0;
      *(_DWORD *)(v11 + 160) = 3;
      return result;
    }
    uint64_t v12 = *(void *)(v8 + 24);
    unint64_t v13 = (void *)a1[9];
    if (v12 >= 1)
    {
      uint64_t v14 = *(void *)(v13[1] + (((unint64_t)(v13[4] + v20) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((*((_DWORD *)v13 + 8) + v20) & 0xF);
      if (*(void *)(v14 + 24) == v12)
      {
        uint64_t v15 = v14 + 40;
        uint64_t v16 = *(void *)(v14 + 40 + 168 * v19 + 96);
        if (v16 == -1) {
          uint64_t v16 = *(void *)(v15 + 168 * v19 + 88);
        }
        if (v16 == a3)
        {
          uint64_t v11 = v15 + 168 * v19;
          goto LABEL_4;
        }
      }
    }
    uint64_t v17 = 2 * v13[5] + 3;
    while (1)
    {
      uint64_t result = sub_1002E5B24((uint64_t)a1, a3, a4, &v20, &v19, a2, 0);
      if (result) {
        break;
      }
      if (v20 == a3 && v19 == a4) {
        goto LABEL_3;
      }
      if (!--v17) {
        return 6;
      }
    }
  }
  return result;
}

void sub_1002E4C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(char **)a1;
  uint64_t v4 = *(char **)(a1 + 8);
  if ((unint64_t)&v4[-*(void *)a1] >= 0x50)
  {
    do
    {
      uint64_t v7 = v3 + 16;
      if (!sub_1002E6218((double *)v3 + 2, (double *)v4 - 4, (double *)v3, (uint64_t)&v20, a3)) {
        return;
      }
      uint64_t v8 = *(char **)(a1 + 8);
      if (v8 != v7)
      {
        memmove(v3, v3 + 16, v8 - v7);
        uint64_t v7 = *(char **)(a1 + 8);
      }
      uint64_t v9 = *(char **)a1;
      if (v7 == *(char **)a1)
      {
        sub_1002E64C4((char **)a1, 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v9 = *(char **)a1;
        uint64_t v10 = *(char **)(a1 + 8);
        if (v10 != *(char **)a1)
        {
LABEL_11:
          uint64_t v11 = v10 - 16;
          *(void *)(a1 + 8) = v10 - 16;
          unint64_t v12 = *(void *)(a1 + 16);
          if ((unint64_t)v11 >= v12) {
            goto LABEL_15;
          }
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v10 = v7 - 16;
        *(void *)(a1 + 8) = v7 - 16;
        if (v7 - 16 != v9) {
          goto LABEL_11;
        }
      }
      sub_1002E64C4((char **)a1, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v9 = *(char **)a1;
      uint64_t v11 = *(char **)(a1 + 8);
      unint64_t v12 = *(void *)(a1 + 16);
      if ((unint64_t)v11 >= v12)
      {
LABEL_15:
        uint64_t v13 = (v11 - v9) >> 4;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 60) {
          sub_1000A9108();
        }
        uint64_t v15 = v12 - (void)v9;
        if (v15 >> 3 > v14) {
          unint64_t v14 = v15 >> 3;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 >> 60) {
            sub_1000A6A10();
          }
          uint64_t v17 = (char *)operator new(16 * v16);
          uint64_t v18 = &v17[16 * v13];
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v9;
          uint64_t v19 = (uint64_t)v18;
          if (v11 == v9) {
            goto LABEL_28;
          }
          do
          {
LABEL_26:
            *(_OWORD *)(v19 - 16) = *((_OWORD *)v11 - 1);
            v19 -= 16;
            v11 -= 16;
          }
          while (v11 != v9);
          uint64_t v11 = *(char **)a1;
        }
        else
        {
          uint64_t v17 = 0;
          uint64_t v18 = (char *)(16 * v13);
          *(_OWORD *)(16 * v13) = *(_OWORD *)v9;
          uint64_t v19 = 16 * v13;
          if (v11 != v9) {
            goto LABEL_26;
          }
        }
LABEL_28:
        uint64_t v4 = v18 + 16;
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v18 + 16;
        *(void *)(a1 + 16) = &v17[16 * v16];
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_5;
      }
LABEL_4:
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v9;
      uint64_t v4 = v11 + 16;
LABEL_5:
      *(void *)(a1 + 8) = v4;
      unint64_t v3 = *(char **)a1;
    }
    while ((unint64_t)&v4[-*(void *)a1] > 0x40);
  }
}

void sub_1002E4E24(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    sub_1002EA9D4((uint64_t)a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
    MEMORY[0] = 0;
    MEMORY[8] = 0;
    MEMORY[0x10] = 0;
    uint64_t v9 = *(const void **)a2;
    int64_t v10 = *(void *)(a2 + 8) - *(void *)a2;
    if (!v10) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (void *)(*(void *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    uint64_t v9 = *(const void **)a2;
    int64_t v10 = *(void *)(a2 + 8) - *(void *)a2;
    if (!v10) {
      goto LABEL_11;
    }
  }
  if (v10 < 0) {
    sub_1000A9108();
  }
  uint64_t v11 = (char *)operator new(v10);
  void *v8 = v11;
  v8[1] = v11;
  unint64_t v12 = &v11[16 * (v10 >> 4)];
  v8[2] = v12;
  memcpy(v11, v9, v10);
  v8[1] = v12;
LABEL_11:
  ++a1[5];
}

void sub_1002E4F3C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002E4F58(void *result, uint64_t **a2)
{
  __n128 v67 = result;
  uint64_t v2 = (void *)result[2];
  uint64_t v3 = v2[1];
  uint64_t v4 = v2[2];
  uint64_t v5 = (void *)(v3 + 8 * (v2[4] >> 4));
  if (v4 == v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *v5 + 376 * (v2[4] & 0xFLL);
  }
  unint64_t v7 = a2 + 1;
  uint64_t v8 = a2[2];
  uint64_t v70 = a2 + 1;
  while (v4 != v3)
  {
    unint64_t v9 = v2[5] + v2[4];
    if (v6 == *(void *)(v3 + ((v9 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 376 * (v9 & 0xF)) {
      return result;
    }
LABEL_10:
    uint64_t v68 = v6;
    __n128 v69 = v5;
    uint64_t v10 = 0;
    uint64_t v11 = v6 + 40;
    char v12 = 1;
    uint64_t v72 = v6 + 40;
    while (2)
    {
      char v13 = v12;
      uint64_t v14 = v11 + 168 * v10;
      uint64_t v15 = (_DWORD *)(v14 + 160);
      if ((*(_DWORD *)(v14 + 160) - 1) > 2) {
        goto LABEL_11;
      }
      char v73 = v12;
      unint64_t v16 = v8;
      uint64_t v17 = *(void *)(v14 + 8);
      uint64_t v18 = *(void *)(v14 + 16);
      uint64_t v19 = *(void *)(v14 + 24);
      char v20 = v7;
      uint64_t result = v7;
      for (i = *v7; *result; char v20 = (uint64_t **)result)
      {
        while (1)
        {
          uint64_t result = i;
          uint64_t v22 = i[4];
          if (v17 == v22) {
            break;
          }
          if (v17 < v22) {
            goto LABEL_15;
          }
          if (v22 >= v17) {
            goto LABEL_48;
          }
LABEL_26:
          unint64_t i = (uint64_t *)result[1];
          if (!i)
          {
            char v20 = (uint64_t **)(result + 1);
            goto LABEL_28;
          }
        }
        uint64_t v23 = result[5];
        if (v18 != v23)
        {
          if (v18 < v23) {
            goto LABEL_15;
          }
          if (v23 >= v18)
          {
LABEL_48:
            uint64_t v8 = v16;
            *((unsigned char *)result + 56) = 1;
            if (*(_DWORD *)v14 != 4) {
              goto LABEL_97;
            }
            goto LABEL_56;
          }
          goto LABEL_26;
        }
        uint64_t v24 = result[6];
        if (v19 >= v24)
        {
          if (v24 >= v19) {
            goto LABEL_48;
          }
          goto LABEL_26;
        }
LABEL_15:
        unint64_t i = (uint64_t *)*result;
      }
LABEL_28:
      uint64_t v25 = result;
      uint64_t result = operator new(0x40uLL);
      result[4] = v17;
      result[5] = v18;
      result[6] = v19;
      *((_WORD *)result + 28) = 0;
      *((unsigned char *)result + 58) = 0;
      *uint64_t result = 0;
      result[1] = 0;
      result[2] = v25;
      *char v20 = result;
      uint64_t v26 = (uint64_t *)**a2;
      uint64_t v27 = result;
      if (v26)
      {
        *a2 = v26;
        uint64_t v27 = *v20;
      }
      unint64_t v7 = v70;
      uint64_t v28 = *v70;
      BOOL v29 = v27 == *v70;
      *((unsigned char *)v27 + 24) = v29;
      if (!v29)
      {
        do
        {
          uint64_t v30 = v27[2];
          if (*(unsigned char *)(v30 + 24)) {
            break;
          }
          uint64_t v31 = *(uint64_t **)(v30 + 16);
          uint64_t v32 = *v31;
          if (*v31 == v30)
          {
            uint64_t v35 = v31[1];
            if (!v35 || (v36 = *(unsigned __int8 *)(v35 + 24), BOOL v33 = (unsigned char *)(v35 + 24), v36))
            {
              if (*(uint64_t **)v30 == v27)
              {
                *(unsigned char *)(v30 + 24) = 1;
                *((unsigned char *)v31 + 24) = 0;
                uint64_t v39 = *(void *)(v30 + 8);
                *uint64_t v31 = v39;
                if (v39) {
                  goto LABEL_45;
                }
              }
              else
              {
                uint64_t v37 = *(uint64_t **)(v30 + 8);
                uint64_t v38 = *v37;
                *(void *)(v30 + 8) = *v37;
                if (v38)
                {
                  *(void *)(v38 + 16) = v30;
                  uint64_t v31 = *(uint64_t **)(v30 + 16);
                }
                v37[2] = (uint64_t)v31;
                *(void *)(*(void *)(v30 + 16) + 8 * (**(void **)(v30 + 16) != v30)) = v37;
                uint64_t *v37 = v30;
                *(void *)(v30 + 16) = v37;
                uint64_t v31 = (uint64_t *)v37[2];
                uint64_t v30 = *v31;
                *((unsigned char *)v37 + 24) = 1;
                *((unsigned char *)v31 + 24) = 0;
                uint64_t v39 = *(void *)(v30 + 8);
                *uint64_t v31 = v39;
                if (v39) {
LABEL_45:
                }
                  *(void *)(v39 + 16) = v31;
              }
              *(void *)(v30 + 16) = v31[2];
              *(void *)(v31[2] + 8 * (*(void *)v31[2] != (void)v31)) = v30;
              *(void *)(v30 + 8) = v31;
LABEL_54:
              v31[2] = v30;
              break;
            }
          }
          else if (!v32 || (v34 = *(unsigned __int8 *)(v32 + 24), BOOL v33 = (unsigned char *)(v32 + 24), v34))
          {
            if (*(uint64_t **)v30 == v27)
            {
              uint64_t v65 = v27[1];
              *(void *)uint64_t v30 = v65;
              if (v65)
              {
                *(void *)(v65 + 16) = v30;
                uint64_t v31 = *(uint64_t **)(v30 + 16);
              }
              double v27[2] = (uint64_t)v31;
              *(void *)(*(void *)(v30 + 16) + 8 * (**(void **)(v30 + 16) != v30)) = v27;
              v27[1] = v30;
              *(void *)(v30 + 16) = v27;
              uint64_t v31 = (uint64_t *)v27[2];
              *((unsigned char *)v27 + 24) = 1;
              *((unsigned char *)v31 + 24) = 0;
              uint64_t v30 = v31[1];
              uint64_t v40 = *(uint64_t **)v30;
              v31[1] = *(void *)v30;
              if (v40) {
LABEL_52:
              }
                v40[2] = (uint64_t)v31;
            }
            else
            {
              *(unsigned char *)(v30 + 24) = 1;
              *((unsigned char *)v31 + 24) = 0;
              uint64_t v30 = v31[1];
              uint64_t v40 = *(uint64_t **)v30;
              v31[1] = *(void *)v30;
              if (v40) {
                goto LABEL_52;
              }
            }
            *(void *)(v30 + 16) = v31[2];
            *(void *)(v31[2] + 8 * (*(void *)v31[2] != (void)v31)) = v30;
            *(void *)uint64_t v30 = v31;
            goto LABEL_54;
          }
          *(unsigned char *)(v30 + 24) = 1;
          uint64_t v27 = v31;
          *((unsigned char *)v31 + 24) = v31 == v28;
          *BOOL v33 = 1;
        }
        while (v31 != v28);
      }
      uint64_t v8 = (uint64_t *)((char *)v16 + 1);
      a2[2] = (uint64_t *)((char *)v16 + 1);
      uint64_t v11 = v72;
      *((unsigned char *)result + 56) = 1;
      if (*(_DWORD *)v14 != 4) {
        goto LABEL_97;
      }
LABEL_56:
      uint64_t v41 = (void *)(v11 + 168 * (v10 ^ 1));
      uint64_t v42 = v41[1];
      uint64_t v43 = v41[2];
      uint64_t v44 = v41[3];
      uint64_t v45 = *v7;
      uint64_t v46 = v7;
      uint64_t result = v7;
      if (!*v7) {
        goto LABEL_71;
      }
      do
      {
        while (1)
        {
          uint64_t result = v45;
          uint64_t v47 = v45[4];
          if (v42 != v47) {
            break;
          }
          uint64_t v48 = result[5];
          if (v43 != v48)
          {
            if (v43 < v48) {
              goto LABEL_58;
            }
            if (v48 >= v43) {
              goto LABEL_96;
            }
            goto LABEL_69;
          }
          uint64_t v49 = result[6];
          if (v44 >= v49)
          {
            if (v49 >= v44) {
              goto LABEL_96;
            }
            goto LABEL_69;
          }
LABEL_58:
          uint64_t v45 = (uint64_t *)*result;
          uint64_t v46 = (uint64_t **)result;
          if (!*result) {
            goto LABEL_71;
          }
        }
        if (v42 < v47) {
          goto LABEL_58;
        }
        if (v47 >= v42) {
          goto LABEL_96;
        }
LABEL_69:
        uint64_t v45 = (uint64_t *)result[1];
      }
      while (v45);
      uint64_t v46 = (uint64_t **)(result + 1);
LABEL_71:
      uint64_t v50 = result;
      uint64_t result = operator new(0x40uLL);
      result[4] = v42;
      result[5] = v43;
      result[6] = v44;
      *((_WORD *)result + 28) = 0;
      *((unsigned char *)result + 58) = 0;
      *uint64_t result = 0;
      result[1] = 0;
      result[2] = v50;
      *uint64_t v46 = result;
      uint64_t v51 = (uint64_t *)**a2;
      uint64_t v52 = result;
      if (v51)
      {
        *a2 = v51;
        uint64_t v52 = *v46;
      }
      unint64_t v7 = v70;
      uint64_t v53 = *v70;
      BOOL v29 = v52 == *v70;
      *((unsigned char *)v52 + 24) = v29;
      if (!v29)
      {
        do
        {
          uint64_t v54 = v52[2];
          if (*(unsigned char *)(v54 + 24)) {
            break;
          }
          uint64_t v55 = *(uint64_t **)(v54 + 16);
          uint64_t v56 = *v55;
          if (*v55 == v54)
          {
            uint64_t v59 = v55[1];
            if (!v59 || (v60 = *(unsigned __int8 *)(v59 + 24), uint64_t v57 = (unsigned char *)(v59 + 24), v60))
            {
              if (*(uint64_t **)v54 == v52)
              {
                *(unsigned char *)(v54 + 24) = 1;
                *((unsigned char *)v55 + 24) = 0;
                uint64_t v63 = *(void *)(v54 + 8);
                uint64_t *v55 = v63;
                if (v63) {
                  goto LABEL_88;
                }
              }
              else
              {
                uint64_t v61 = *(uint64_t **)(v54 + 8);
                uint64_t v62 = *v61;
                *(void *)(v54 + 8) = *v61;
                if (v62)
                {
                  *(void *)(v62 + 16) = v54;
                  uint64_t v55 = *(uint64_t **)(v54 + 16);
                }
                v61[2] = (uint64_t)v55;
                *(void *)(*(void *)(v54 + 16) + 8 * (**(void **)(v54 + 16) != v54)) = v61;
                *uint64_t v61 = v54;
                *(void *)(v54 + 16) = v61;
                uint64_t v55 = (uint64_t *)v61[2];
                uint64_t v54 = *v55;
                *((unsigned char *)v61 + 24) = 1;
                *((unsigned char *)v55 + 24) = 0;
                uint64_t v63 = *(void *)(v54 + 8);
                uint64_t *v55 = v63;
                if (v63) {
LABEL_88:
                }
                  *(void *)(v63 + 16) = v55;
              }
              *(void *)(v54 + 16) = v55[2];
              *(void *)(v55[2] + 8 * (*(void *)v55[2] != (void)v55)) = v54;
              *(void *)(v54 + 8) = v55;
LABEL_94:
              v55[2] = v54;
              break;
            }
          }
          else if (!v56 || (int v58 = *(unsigned __int8 *)(v56 + 24), v57 = (unsigned char *)(v56 + 24), v58))
          {
            if (*(uint64_t **)v54 == v52)
            {
              uint64_t v66 = v52[1];
              *(void *)uint64_t v54 = v66;
              if (v66)
              {
                *(void *)(v66 + 16) = v54;
                uint64_t v55 = *(uint64_t **)(v54 + 16);
              }
              v52[2] = (uint64_t)v55;
              *(void *)(*(void *)(v54 + 16) + 8 * (**(void **)(v54 + 16) != v54)) = v52;
              v52[1] = v54;
              *(void *)(v54 + 16) = v52;
              uint64_t v55 = (uint64_t *)v52[2];
              *((unsigned char *)v52 + 24) = 1;
              *((unsigned char *)v55 + 24) = 0;
              uint64_t v54 = v55[1];
              long long v64 = *(uint64_t **)v54;
              v55[1] = *(void *)v54;
              if (v64) {
LABEL_92:
              }
                v64[2] = (uint64_t)v55;
            }
            else
            {
              *(unsigned char *)(v54 + 24) = 1;
              *((unsigned char *)v55 + 24) = 0;
              uint64_t v54 = v55[1];
              long long v64 = *(uint64_t **)v54;
              v55[1] = *(void *)v54;
              if (v64) {
                goto LABEL_92;
              }
            }
            *(void *)(v54 + 16) = v55[2];
            *(void *)(v55[2] + 8 * (*(void *)v55[2] != (void)v55)) = v54;
            *(void *)uint64_t v54 = v55;
            goto LABEL_94;
          }
          *(unsigned char *)(v54 + 24) = 1;
          uint64_t v52 = v55;
          *((unsigned char *)v55 + 24) = v55 == v53;
          unsigned char *v57 = 1;
        }
        while (v55 != v53);
      }
      uint64_t v8 = (uint64_t *)((char *)v8 + 1);
      a2[2] = v8;
      uint64_t v11 = v72;
LABEL_96:
      *((unsigned char *)result + 56) = 1;
LABEL_97:
      char v13 = v73;
      if ((*v15 - 1) <= 2) {
        *(unsigned char *)(v11 + 168 * v10 + 165) = 1;
      }
LABEL_11:
      char v12 = 0;
      uint64_t v10 = 1;
      if (v13) {
        continue;
      }
      break;
    }
    uint64_t v5 = v69;
    uint64_t v6 = v68 + 376;
    if (v68 + 376 - *v69 == 6016)
    {
      uint64_t v5 = v69 + 1;
      uint64_t v6 = v69[1];
    }
    uint64_t v2 = (void *)v67[2];
    uint64_t v3 = v2[1];
    uint64_t v4 = v2[2];
  }
  if (v6) {
    goto LABEL_10;
  }
  return result;
}

void sub_1002E5638(unint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, unsigned char *a12)
{
  *a12 = 0;
  if (!a12[1])
  {
    a12[1] = 1;
    sub_1002EB0E8(a8, a10, a11, 1);
    sub_1002EB324(a9, a10, a11, 1);
    unint64_t v20 = a2[5];
    BOOL v18 = a1 >= v20;
    unint64_t v19 = a1 - v20;
    if (a1 > v20) {
      goto LABEL_3;
    }
LABEL_5:
    if (v18) {
      goto LABEL_14;
    }
    unint64_t v21 = a2[4];
    uint64_t v22 = a2[1];
    uint64_t v23 = (void *)(v22 + 8 * (v21 / 0xAA));
    if (a2[2] == v22)
    {
      unint64_t v24 = 0;
      if (!a1)
      {
LABEL_13:
        sub_1002F5324(a2, v23, v24);
        goto LABEL_14;
      }
    }
    else
    {
      unint64_t v24 = *v23 + 24 * (v21 % 0xAA);
      if (!a1) {
        goto LABEL_13;
      }
    }
    uint64_t v25 = a1 - 0x5555555555555555 * ((uint64_t)(v24 - *v23) >> 3);
    if (v25 < 1)
    {
      unint64_t v26 = 169 - v25;
      v23 -= v26 / 0xAA;
      unint64_t v24 = *v23 + 24 * (170 * (v26 / 0xAA) - v26) + 4056;
    }
    else
    {
      v23 += v25 / 0xAAuLL;
      unint64_t v24 = *v23 + 24 * (v25 % 0xAAuLL);
    }
    goto LABEL_13;
  }
  unint64_t v17 = a2[5];
  BOOL v18 = a1 >= v17;
  unint64_t v19 = a1 - v17;
  if (a1 <= v17) {
    goto LABEL_5;
  }
LABEL_3:
  sub_1002F511C(a2, v19);
LABEL_14:
  a3[1] = *a3;
  *(_DWORD *)(a6 + 160) = 4;
  *(unsigned char *)(a6 + 164) = 1;
  uint64_t v27 = a4[1];
  if (a4[2] != v27)
  {
    unint64_t v28 = a4[4];
    BOOL v29 = (uint64_t *)(v27 + 8 * (v28 >> 4));
    uint64_t v30 = *v29;
    uint64_t v31 = *v29 + 376 * (v28 & 0xF);
    uint64_t v32 = *(void *)(v27 + (((a4[5] + v28) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 376 * ((*((_DWORD *)a4 + 10) + v28) & 0xF);
    while (v31 != v32)
    {
      if (*(unsigned char *)(v31 + 204) || *(unsigned char *)(v31 + 205))
      {
        if (!*(unsigned char *)(v31 + 372)) {
          goto LABEL_21;
        }
      }
      else
      {
        *(_DWORD *)(v31 + 200) = 0;
        if (!*(unsigned char *)(v31 + 372))
        {
LABEL_21:
          if (!*(unsigned char *)(v31 + 373)) {
            *(_DWORD *)(v31 + 368) = 0;
          }
        }
      }
      v31 += 376;
      if (v31 - v30 == 6016)
      {
        uint64_t v33 = v29[1];
        ++v29;
        uint64_t v30 = v33;
        uint64_t v31 = v33;
      }
    }
  }
}

void sub_1002E5884(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = *(char **)a1;
  uint64_t v8 = *(char **)(a1 + 8);
  if (v8 - v7 == 16)
  {
    if (sub_1002E5FDC((double *)v7, a2, a3, a4)) {
      return;
    }
    uint64_t v8 = *(char **)(a1 + 8);
  }
  unint64_t v9 = *(void *)(a1 + 16);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v8[-*(void *)a1] >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
LABEL_46:
    }
      sub_1000A9108();
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 60) {
LABEL_47:
      }
        sub_1000A6A10();
      unint64_t v16 = (char *)operator new(16 * v15);
    }
    else
    {
      unint64_t v16 = 0;
    }
    unint64_t v17 = &v16[16 * v12];
    BOOL v18 = &v16[16 * v15];
    *(_OWORD *)unint64_t v17 = *(_OWORD *)a2;
    uint64_t v10 = (double *)(v17 + 16);
    if (v8 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
        v17 -= 16;
        v8 -= 16;
      }
      while (v8 != v11);
      uint64_t v8 = *(char **)a1;
    }
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
    uint64_t v10 = (double *)(v8 + 16);
  }
  *(void *)(a1 + 8) = v10;
  if ((unint64_t)v10 - *(void *)a1 >= 0x21)
  {
    do
    {
      if (!sub_1002E6218(a2, v10 - 6, v10 - 4, (uint64_t)&v29, a4)) {
        return;
      }
      if (*(void *)(a1 + 8) - *(void *)a1 > 0x1FuLL)
      {
        unint64_t v20 = (char *)(*(void *)(a1 + 8) - 32);
        *(void *)(a1 + 8) = v20;
        unint64_t v19 = *(void *)(a1 + 16);
        if ((unint64_t)v20 >= v19)
        {
LABEL_30:
          unint64_t v21 = *(char **)a1;
          uint64_t v22 = (uint64_t)&v20[-*(void *)a1] >> 4;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60) {
            goto LABEL_46;
          }
          uint64_t v24 = v19 - (void)v21;
          if (v24 >> 3 > v23) {
            unint64_t v23 = v24 >> 3;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            if (v25 >> 60) {
              goto LABEL_47;
            }
            unint64_t v26 = (char *)operator new(16 * v25);
            uint64_t v27 = &v26[16 * v22];
            *(_OWORD *)uint64_t v27 = *(_OWORD *)a2;
            uint64_t v28 = (uint64_t)v27;
            if (v20 == v21) {
              goto LABEL_43;
            }
            do
            {
LABEL_41:
              *(_OWORD *)(v28 - 16) = *((_OWORD *)v20 - 1);
              v28 -= 16;
              v20 -= 16;
            }
            while (v20 != v21);
            unint64_t v20 = *(char **)a1;
          }
          else
          {
            unint64_t v26 = 0;
            uint64_t v27 = (char *)(16 * v22);
            *(_OWORD *)(16 * v22) = *(_OWORD *)a2;
            uint64_t v28 = 16 * v22;
            if (v20 != v21) {
              goto LABEL_41;
            }
          }
LABEL_43:
          uint64_t v10 = (double *)(v27 + 16);
          *(void *)a1 = v28;
          *(void *)(a1 + 8) = v27 + 16;
          *(void *)(a1 + 16) = &v26[16 * v25];
          if (v20) {
            operator delete(v20);
          }
          goto LABEL_24;
        }
      }
      else
      {
        sub_1002E64C4((char **)a1, 0xFFFFFFFFFFFFFFFELL);
        unint64_t v20 = *(char **)(a1 + 8);
        unint64_t v19 = *(void *)(a1 + 16);
        if ((unint64_t)v20 >= v19) {
          goto LABEL_30;
        }
      }
      *(_OWORD *)unint64_t v20 = *(_OWORD *)a2;
      uint64_t v10 = (double *)(v20 + 16);
LABEL_24:
      *(void *)(a1 + 8) = v10;
    }
    while ((unint64_t)v10 - *(void *)a1 > 0x20);
  }
}

uint64_t sub_1002E5B24(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int *a5, uint64_t a6, int a7)
{
  int v9 = *a5;
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8)
                  + (((unint64_t)(*(void *)(*(void *)(a1 + 72) + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 376 * ((*(_DWORD *)(*(void *)(a1 + 72) + 32) + *(_DWORD *)a4) & 0xF)
      + 40;
  uint64_t v11 = v10 + 168 * *a5;
  uint64_t v12 = *(void *)(v11 + 96);
  if (v12 < 0)
  {
    uint64_t v17 = *(void *)(v10 + 168 * v9 + 80);
    if (v17 < 0 || (uint64_t v18 = *(void *)(v10 + 168 * v9 + 88), v18 < 0))
    {
      BOOL v15 = a7 == 0;
      goto LABEL_28;
    }
    uint64_t v68 = *a4;
    uint64_t v69 = a2;
    int v70 = a3;
    int v72 = a7;
    __n128 v71 = a5;
    *a4 = v18;
    long long v19 = *(_OWORD *)(v11 + 8);
    long long v20 = *(_OWORD *)(v11 + 24);
    uint64_t v76 = *(void *)(v11 + 40);
    long long v74 = v19;
    long long v75 = v20;
    uint64_t v22 = *(void *)(a1 + 96);
    uint64_t v21 = *(void *)(a1 + 104);
    char v73 = (void *)a1;
    if (*(void *)(v11 + 8))
    {
      uint64_t v23 = *(void *)(v11 + 24);
      uint64_t v24 = (double **)(**(void **)(a1 + 64) + 48 * *(void *)(v11 + 16));
      if (v23 >= 0) {
        uint64_t v24 = (double **)&v24[3][3 * v23];
      }
      unint64_t v26 = *v24;
      unint64_t v25 = v24[1];
      uint64_t v27 = *(void *)(v11 + 32);
      if (v27 < v17) {
        uint64_t v28 = v17 - (v27 + 1);
      }
      else {
        uint64_t v28 = v17 + ~v27 + (((char *)v25 - (char *)v26) >> 4);
      }
      if ((v28 & 0x8000000000000000) == 0)
      {
        char v29 = &v26[2 * v27 + 2];
        uint64_t v30 = v28 + 1;
        do
        {
          sub_1002E6768(a6, v29, v22, v21);
          if (v29 + 2 == v25) {
            char v29 = v26;
          }
          else {
            v29 += 2;
          }
          --v30;
        }
        while (v30);
      }
    }
    else
    {
      uint64_t v36 = *(void *)(v11 + 24);
      uint64_t v37 = *(void *)(v11 + 32);
      uint64_t v38 = (double **)(*(void *)(*(void *)(a1 + 56) + 24) + 24 * v36);
      if (v36 < 0) {
        uint64_t v38 = *(double ***)(a1 + 56);
      }
      uint64_t v39 = *v38;
      uint64_t v40 = v38[1];
      if (v37 < v17) {
        uint64_t v41 = v17 - (v37 + 1);
      }
      else {
        uint64_t v41 = v17 + ~v37 + (((char *)v40 - (char *)v39) >> 4);
      }
      if ((v41 & 0x8000000000000000) == 0)
      {
        uint64_t v42 = &v39[2 * v37 + 2];
        uint64_t v43 = v41 + 1;
        do
        {
          sub_1002E6768(a6, v42, v22, v21);
          if (v42 + 2 == v40) {
            uint64_t v42 = v39;
          }
          else {
            v42 += 2;
          }
          --v43;
        }
        while (v43);
      }
    }
  }
  else
  {
    uint64_t v68 = *a4;
    uint64_t v69 = a2;
    int v70 = a3;
    int v72 = a7;
    __n128 v71 = a5;
    char v73 = (void *)a1;
    *a4 = v12;
    long long v13 = *(_OWORD *)(v11 + 8);
    long long v14 = *(_OWORD *)(v11 + 24);
    uint64_t v76 = *(void *)(v11 + 40);
    long long v74 = v13;
    long long v75 = v14;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(v73[9] + 8)
                            + (((unint64_t)(*(void *)(v73[9] + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 376 * ((*(_DWORD *)(v73[9] + 32) + *(_DWORD *)a4) & 0xF)
                + 32))
  {
    BOOL v15 = v72 == 0;
    unsigned int v16 = 3;
    goto LABEL_29;
  }
  if (v72) {
    *(_DWORD *)(v10 + 168 * v9 + 160) = 1;
  }
  if (sub_1002E6600((uint64_t)v73, v69, v70, a4, v71, v9, v68, (uint64_t *)&v74, v72))
  {
    uint64_t v31 = *(void *)(*(void *)(v73[9] + 8)
                    + (((unint64_t)(*(void *)(v73[9] + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
        + 376 * ((*(_DWORD *)(v73[9] + 32) + *(_DWORD *)a4) & 0xF);
    int v32 = *v71;
    uint64_t v33 = v31 + 40 + 168 * *v71;
    if (*(unsigned char *)(v33 + 165)) {
      return 5;
    }
    int v34 = (_DWORD *)(v33 + 160);
    if (*(_DWORD *)(v33 + 160) == 2) {
      return 5;
    }
    sub_1002E5884(a6, (double *)v31, v73[12], v73[13]);
    if (*(_DWORD *)v33 == 4)
    {
      if (*(_DWORD *)(v31 + 200))
      {
        if (*(_DWORD *)(v31 + 368)) {
          goto LABEL_48;
        }
      }
      else
      {
        *(_DWORD *)(v31 + 200) = 2;
        if (*(_DWORD *)(v31 + 368))
        {
LABEL_48:
          uint64_t v44 = *(void *)(v31 + 24);
          if (v44 < 1) {
            return 0;
          }
LABEL_53:
          uint64_t v45 = v73[3];
          uint64_t v48 = *(void **)(v45 + 8);
          uint64_t v46 = (void *)(v45 + 8);
          uint64_t v47 = v48;
          if (!v48) {
            goto LABEL_63;
          }
          uint64_t v49 = v46;
          do
          {
            uint64_t v50 = v47[4];
            BOOL v51 = v50 < v44;
            if (v50 >= v44) {
              uint64_t v52 = v47;
            }
            else {
              uint64_t v52 = v47 + 1;
            }
            if (!v51) {
              uint64_t v49 = v47;
            }
            uint64_t v47 = (void *)*v52;
          }
          while (*v52);
          if (v49 == v46 || v49[4] > v44) {
LABEL_63:
          }
            uint64_t v49 = v46;
          uint64_t v53 = (void *)v49[5];
          uint64_t v54 = v49 + 6;
          if (v53 == v49 + 6) {
            return 0;
          }
          uint64_t v55 = *(void *)(v31 + 40 + 168 * v32 + 128);
          uint64_t v56 = v73[2];
          uint64_t v57 = *(void *)(v56 + 32);
          uint64_t v58 = *(void *)(v56 + 8);
          while (1)
          {
            uint64_t v59 = *(void *)(v58 + (((unint64_t)(v53[4] + v57) >> 1) & 0x7FFFFFFFFFFFFFF8))
                + 376 * ((*((_DWORD *)v53 + 8) + v57) & 0xF);
            uint64_t v60 = v59 + 40;
            int v61 = *(_DWORD *)(v59 + 200);
            uint64_t v62 = *(void *)(v59 + 168);
            if (v61) {
              BOOL v63 = 0;
            }
            else {
              BOOL v63 = v62 == v55;
            }
            if (v63)
            {
              *(_DWORD *)(v60 + 160) = 2;
              if (*(_DWORD *)(v60 + 328)) {
                BOOL v66 = 0;
              }
              else {
                BOOL v66 = *(void *)(v60 + 296) == v55;
              }
              if (!v66)
              {
LABEL_75:
                uint64_t v65 = (void *)v53[1];
                if (v65) {
                  goto LABEL_83;
                }
                goto LABEL_85;
              }
            }
            else
            {
              if (*(_DWORD *)(v60 + 328)) {
                BOOL v64 = 0;
              }
              else {
                BOOL v64 = *(void *)(v60 + 296) == v55;
              }
              if (!v64) {
                goto LABEL_75;
              }
            }
            *(_DWORD *)(v60 + 328) = 2;
            uint64_t v65 = (void *)v53[1];
            if (v65)
            {
              do
              {
LABEL_83:
                __n128 v67 = v65;
                uint64_t v65 = (void *)*v65;
              }
              while (v65);
              goto LABEL_66;
            }
            do
            {
LABEL_85:
              __n128 v67 = (void *)v53[2];
              BOOL v15 = *v67 == (void)v53;
              uint64_t v53 = v67;
            }
            while (!v15);
LABEL_66:
            uint64_t result = 0;
            uint64_t v53 = v67;
            if (v67 == v54) {
              return result;
            }
          }
        }
      }
      int v34 = (_DWORD *)(v31 + 368);
    }
    *int v34 = 2;
    uint64_t v44 = *(void *)(v31 + 24);
    if (v44 < 1) {
      return 0;
    }
    goto LABEL_53;
  }
  BOOL v15 = v72 == 0;
LABEL_28:
  unsigned int v16 = 1;
LABEL_29:
  if (v15) {
    return v16 + 1;
  }
  else {
    return v16;
  }
}

BOOL sub_1002E5FDC(double *a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v7 = *a1;
  double v8 = *a2;
  if (*a1 == *a2) {
    goto LABEL_51;
  }
  if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v13 = vabdd_f64(v7, v8);
    double v14 = fabs(v7);
    double v15 = fabs(v8);
    if (v14 < v15) {
      double v14 = v15;
    }
    double v16 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
    if (v13 <= v16)
    {
LABEL_51:
      double v9 = a1[1];
      double v10 = a2[1];
      if (v9 == v10) {
        return 1;
      }
      if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v42 = vabdd_f64(v9, v10);
        double v43 = fabs(v9);
        double v44 = fabs(v10);
        if (v43 < v44) {
          double v43 = v44;
        }
        double v45 = v43 >= 1.0 ? v43 * 2.22044605e-16 : 2.22044605e-16;
        if (v42 <= v45) {
          return 1;
        }
      }
    }
  }
  double v18 = (double)*(uint64_t *)(a4 + 24) + (a1[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v18 >= 0.0) {
    double v19 = 0.5;
  }
  else {
    double v19 = -0.5;
  }
  double v20 = v18 + v19;
  sub_1002C5028(v18 + v19);
  double v21 = ceil(v20);
  double v22 = floor(v20);
  if (v20 >= 0.0) {
    double v21 = v22;
  }
  uint64_t v23 = (uint64_t)v21;
  double v24 = (double)*(uint64_t *)(a4 + 16) + (*a1 - *(double *)a4) * *(double *)(a4 + 32);
  if (v24 >= 0.0) {
    double v25 = 0.5;
  }
  else {
    double v25 = -0.5;
  }
  double v26 = v24 + v25;
  sub_1002C5028(v24 + v25);
  double v27 = ceil(v26);
  double v28 = floor(v26);
  if (v26 >= 0.0) {
    double v27 = v28;
  }
  uint64_t v29 = (uint64_t)v27;
  double v30 = (double)*(uint64_t *)(a4 + 24) + (a2[1] - *(double *)(a4 + 8)) * *(double *)(a4 + 32);
  if (v30 >= 0.0) {
    double v31 = 0.5;
  }
  else {
    double v31 = -0.5;
  }
  double v32 = v30 + v31;
  sub_1002C5028(v30 + v31);
  double v33 = ceil(v32);
  double v34 = floor(v32);
  if (v32 >= 0.0) {
    double v33 = v34;
  }
  uint64_t v35 = (uint64_t)v33;
  double v36 = (double)*(uint64_t *)(a4 + 16) + (*a2 - *(double *)a4) * *(double *)(a4 + 32);
  if (v36 >= 0.0) {
    double v37 = 0.5;
  }
  else {
    double v37 = -0.5;
  }
  double v38 = v36 + v37;
  sub_1002C5028(v36 + v37);
  double v39 = ceil(v38);
  double v40 = floor(v38);
  if (v38 >= 0.0) {
    double v39 = v40;
  }
  return v29 == (uint64_t)v39 && v23 == v35;
}

BOOL sub_1002E6218(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  v44[0] = 0x3FF0000000000000;
  double v9 = sub_10004D628(a2, a3, a1, (double *)v44);
  if (v9 == 0.0
    || (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v9) <= *(double *)v44 * 2.22044605e-16)
  {
    return 1;
  }
  double v10 = (double)*(uint64_t *)(a5 + 24) + (a1[1] - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v10 >= 0.0) {
    double v11 = 0.5;
  }
  else {
    double v11 = -0.5;
  }
  double v12 = v10 + v11;
  sub_1002C5028(v10 + v11);
  double v13 = ceil(v12);
  double v14 = floor(v12);
  if (v12 >= 0.0) {
    double v13 = v14;
  }
  v44[1] = (uint64_t)v13;
  double v15 = (double)*(uint64_t *)(a5 + 16) + (*a1 - *(double *)a5) * *(double *)(a5 + 32);
  if (v15 >= 0.0) {
    double v16 = 0.5;
  }
  else {
    double v16 = -0.5;
  }
  double v17 = v15 + v16;
  sub_1002C5028(v15 + v16);
  double v18 = ceil(v17);
  double v19 = floor(v17);
  if (v17 >= 0.0) {
    double v18 = v19;
  }
  v44[0] = (uint64_t)v18;
  double v20 = (double)*(uint64_t *)(a5 + 24) + (a2[1] - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v20 >= 0.0) {
    double v21 = 0.5;
  }
  else {
    double v21 = -0.5;
  }
  double v22 = v20 + v21;
  sub_1002C5028(v20 + v21);
  double v23 = ceil(v22);
  double v24 = floor(v22);
  if (v22 >= 0.0) {
    double v23 = v24;
  }
  v43[1] = (uint64_t)v23;
  double v25 = (double)*(uint64_t *)(a5 + 16) + (*a2 - *(double *)a5) * *(double *)(a5 + 32);
  if (v25 >= 0.0) {
    double v26 = 0.5;
  }
  else {
    double v26 = -0.5;
  }
  double v27 = v25 + v26;
  sub_1002C5028(v25 + v26);
  double v28 = ceil(v27);
  double v29 = floor(v27);
  if (v27 >= 0.0) {
    double v28 = v29;
  }
  v43[0] = (uint64_t)v28;
  double v30 = (double)*(uint64_t *)(a5 + 24) + (a3[1] - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v30 >= 0.0) {
    double v31 = 0.5;
  }
  else {
    double v31 = -0.5;
  }
  double v32 = v30 + v31;
  sub_1002C5028(v30 + v31);
  double v33 = ceil(v32);
  double v34 = floor(v32);
  if (v32 >= 0.0) {
    double v33 = v34;
  }
  v42[1] = (uint64_t)v33;
  double v35 = (double)*(uint64_t *)(a5 + 16) + (*a3 - *(double *)a5) * *(double *)(a5 + 32);
  double v36 = v35 >= 0.0 ? 0.5 : -0.5;
  double v37 = v35 + v36;
  sub_1002C5028(v35 + v36);
  double v38 = ceil(v37);
  double v39 = floor(v37);
  if (v37 >= 0.0) {
    double v38 = v39;
  }
  v42[0] = (uint64_t)v38;
  double v45 = 1.0;
  double v40 = sub_1002CEBF4(v43, v42, v44, &v45);
  return v40 == 0.0
      || (*(void *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v40) <= v45 * 2.22044605e-16;
}

void sub_1002E64C4(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      sub_1000A9108();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_1000A6A10();
      }
      double v11 = (char *)operator new(16 * v10);
    }
    else
    {
      double v11 = 0;
    }
    double v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    double v15 = &v11[16 * v10];
    bzero(v13, v14);
    double v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_1002E6600(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int *a5, int a6, uint64_t a7, uint64_t *a8, char a9)
{
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8)
                  + (((unint64_t)(*(void *)(*(void *)(a1 + 16) + 32) + *a4) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 376 * ((*(_DWORD *)(*(void *)(a1 + 16) + 32) + *(_DWORD *)a4) & 0xF);
  if (*(uint64_t *)(v12 + 24) < 1)
  {
    if (*(_DWORD *)(v12 + 368) == 1) {
      int v16 = 1;
    }
    else {
      int v16 = -1;
    }
    if (*(_DWORD *)(v12 + 200) == 1) {
      int v17 = 0;
    }
    else {
      int v17 = v16;
    }
    *a5 = v17;
    if (v17 != -1) {
      return 1;
    }
    if (*(_DWORD *)(v12 + 200) != 3 || *(_DWORD *)(v12 + 368) != 3)
    {
      *a5 = -1;
      if (*(_DWORD *)(v12 + 40) == 4 && *(_DWORD *)(v12 + 208) == 4)
      {
        if (sub_1002EA64C(a1, v12, a2, a5)) {
          return 1;
        }
      }
      else if (sub_1002EA7DC(a1, v12, a8, a5))
      {
        return 1;
      }
    }
    return 0;
  }
  else
  {
    uint64_t result = sub_1002E6DAC(a1, a4, a5, a2, a3, a8);
    if (result)
    {
      uint64_t result = 1;
      if (a9)
      {
        if (*a4 == a7) {
          *a5 = a6;
        }
      }
    }
  }
  return result;
}

void sub_1002E6768(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(char **)a1;
  unint64_t v8 = *(char **)(a1 + 8);
  if (v8 - v7 == 16)
  {
    if (sub_1002E5FDC((double *)v7, a2, a3, a4)) {
      return;
    }
    unint64_t v8 = *(char **)(a1 + 8);
  }
  unint64_t v9 = *(void *)(a1 + 16);
  if ((unint64_t)v8 >= v9)
  {
    double v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v8[-*(void *)a1] >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
LABEL_46:
    }
      sub_1000A9108();
    uint64_t v14 = v9 - (void)v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 60) {
LABEL_47:
      }
        sub_1000A6A10();
      int v16 = (char *)operator new(16 * v15);
    }
    else
    {
      int v16 = 0;
    }
    int v17 = &v16[16 * v12];
    double v18 = &v16[16 * v15];
    *(_OWORD *)int v17 = *(_OWORD *)a2;
    unint64_t v10 = (double *)(v17 + 16);
    if (v8 != v11)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v8 - 1);
        v17 -= 16;
        v8 -= 16;
      }
      while (v8 != v11);
      unint64_t v8 = *(char **)a1;
    }
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v18;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
    unint64_t v10 = (double *)(v8 + 16);
  }
  *(void *)(a1 + 8) = v10;
  if ((unint64_t)v10 - *(void *)a1 >= 0x21)
  {
    do
    {
      if (!sub_1002E6A08(a2, v10 - 6, v10 - 4, (uint64_t)&v29, a4)) {
        return;
      }
      if (*(void *)(a1 + 8) - *(void *)a1 > 0x1FuLL)
      {
        double v20 = (char *)(*(void *)(a1 + 8) - 32);
        *(void *)(a1 + 8) = v20;
        unint64_t v19 = *(void *)(a1 + 16);
        if ((unint64_t)v20 >= v19)
        {
LABEL_30:
          double v21 = *(char **)a1;
          uint64_t v22 = (uint64_t)&v20[-*(void *)a1] >> 4;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60) {
            goto LABEL_46;
          }
          uint64_t v24 = v19 - (void)v21;
          if (v24 >> 3 > v23) {
            unint64_t v23 = v24 >> 3;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            if (v25 >> 60) {
              goto LABEL_47;
            }
            double v26 = (char *)operator new(16 * v25);
            double v27 = &v26[16 * v22];
            *(_OWORD *)double v27 = *(_OWORD *)a2;
            uint64_t v28 = (uint64_t)v27;
            if (v20 == v21) {
              goto LABEL_43;
            }
            do
            {
LABEL_41:
              *(_OWORD *)(v28 - 16) = *((_OWORD *)v20 - 1);
              v28 -= 16;
              v20 -= 16;
            }
            while (v20 != v21);
            double v20 = *(char **)a1;
          }
          else
          {
            double v26 = 0;
            double v27 = (char *)(16 * v22);
            *(_OWORD *)(16 * v22) = *(_OWORD *)a2;
            uint64_t v28 = 16 * v22;
            if (v20 != v21) {
              goto LABEL_41;
            }
          }
LABEL_43:
          unint64_t v10 = (double *)(v27 + 16);
          *(void *)a1 = v28;
          *(void *)(a1 + 8) = v27 + 16;
          *(void *)(a1 + 16) = &v26[16 * v25];
          if (v20) {
            operator delete(v20);
          }
          goto LABEL_24;
        }
      }
      else
      {
        sub_1002E64C4((char **)a1, 0xFFFFFFFFFFFFFFFELL);
        double v20 = *(char **)(a1 + 8);
        unint64_t v19 = *(void *)(a1 + 16);
        if ((unint64_t)v20 >= v19) {
          goto LABEL_30;
        }
      }
      *(_OWORD *)double v20 = *(_OWORD *)a2;
      unint64_t v10 = (double *)(v20 + 16);
LABEL_24:
      *(void *)(a1 + 8) = v10;
    }
    while ((unint64_t)v10 - *(void *)a1 > 0x20);
  }
}

BOOL sub_1002E6A08(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5)
{
  double v55 = 1.0;
  double v9 = sub_10004D628(a2, a3, a1, &v55);
  if (v9 == 0.0 || (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v9) <= v55 * 2.22044605e-16)
  {
    double v10 = a3[1];
    double v11 = a2[1] - v10;
    double v12 = *a3 - *a2;
    double v13 = -v11;
    if (v12 == 0.0) {
      goto LABEL_7;
    }
    if (COERCE_UNSIGNED_INT64(fabs(*a3 - *a2)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v17 = fabs(v12);
      double v18 = 2.22044605e-16;
      if (v17 >= 1.0) {
        double v18 = v17 * 2.22044605e-16;
      }
      if (v17 <= v18)
      {
LABEL_7:
        if (v11 == 0.0) {
          return 1;
        }
        if (COERCE_UNSIGNED_INT64(fabs(a2[1] - v10)) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          double v14 = fabs(v13);
          double v15 = 2.22044605e-16;
          if (v14 >= 1.0) {
            double v15 = v14 * 2.22044605e-16;
          }
          if (v14 <= v15) {
            return 1;
          }
        }
      }
    }
    double v16 = a1[1];
    if (v10 * v11 - v12 * *a3 + v16 * v13 + v12 * *a1 <= 0.0) {
      return 1;
    }
  }
  else
  {
    double v16 = a1[1];
  }
  double v19 = (double)*(uint64_t *)(a5 + 24) + (v16 - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v19 >= 0.0) {
    double v20 = 0.5;
  }
  else {
    double v20 = -0.5;
  }
  double v21 = v19 + v20;
  sub_1002C5028(v19 + v20);
  double v22 = ceil(v21);
  double v23 = floor(v21);
  if (v21 >= 0.0) {
    double v22 = v23;
  }
  uint64_t v56 = (uint64_t)v22;
  double v24 = (double)*(uint64_t *)(a5 + 16) + (*a1 - *(double *)a5) * *(double *)(a5 + 32);
  if (v24 >= 0.0) {
    double v25 = 0.5;
  }
  else {
    double v25 = -0.5;
  }
  double v26 = v24 + v25;
  sub_1002C5028(v24 + v25);
  double v27 = ceil(v26);
  double v28 = floor(v26);
  if (v26 >= 0.0) {
    double v27 = v28;
  }
  *(void *)&double v55 = (uint64_t)v27;
  double v29 = (double)*(uint64_t *)(a5 + 24) + (a2[1] - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v29 >= 0.0) {
    double v30 = 0.5;
  }
  else {
    double v30 = -0.5;
  }
  double v31 = v29 + v30;
  sub_1002C5028(v29 + v30);
  double v32 = ceil(v31);
  double v33 = floor(v31);
  if (v31 >= 0.0) {
    double v32 = v33;
  }
  uint64_t v54 = (uint64_t)v32;
  double v34 = (double)*(uint64_t *)(a5 + 16) + (*a2 - *(double *)a5) * *(double *)(a5 + 32);
  if (v34 >= 0.0) {
    double v35 = 0.5;
  }
  else {
    double v35 = -0.5;
  }
  double v36 = v34 + v35;
  sub_1002C5028(v34 + v35);
  double v37 = ceil(v36);
  double v38 = floor(v36);
  if (v36 >= 0.0) {
    double v37 = v38;
  }
  uint64_t v53 = (uint64_t)v37;
  double v39 = (double)*(uint64_t *)(a5 + 24) + (a3[1] - *(double *)(a5 + 8)) * *(double *)(a5 + 32);
  if (v39 >= 0.0) {
    double v40 = 0.5;
  }
  else {
    double v40 = -0.5;
  }
  double v41 = v39 + v40;
  sub_1002C5028(v39 + v40);
  double v42 = ceil(v41);
  double v43 = floor(v41);
  if (v41 >= 0.0) {
    double v42 = v43;
  }
  uint64_t v52 = (uint64_t)v42;
  double v44 = (double)*(uint64_t *)(a5 + 16) + (*a3 - *(double *)a5) * *(double *)(a5 + 32);
  if (v44 >= 0.0) {
    double v45 = 0.5;
  }
  else {
    double v45 = -0.5;
  }
  double v46 = v44 + v45;
  sub_1002C5028(v44 + v45);
  double v47 = ceil(v46);
  double v48 = floor(v46);
  if (v46 >= 0.0) {
    double v47 = v48;
  }
  uint64_t v51 = (uint64_t)v47;
  double v57 = 1.0;
  double v49 = sub_1002CEBF4(&v53, &v51, (uint64_t *)&v55, &v57);
  if (v49 != 0.0
    && ((*(void *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || fabs(v49) > v57 * 2.22044605e-16))
  {
    return 0;
  }
  if (v51 == v53 && v52 == v54) {
    return 1;
  }
  return (*(void *)&v55 - v51) * (v51 - v53) + (v56 - v52) * (v52 - v54) < 1;
}

uint64_t sub_1002E6DAC(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)(a1 + 24);
  double v15 = *(void **)(v12 + 8);
  double v13 = (void *)(v12 + 8);
  double v14 = v15;
  if (!v15) {
    goto LABEL_11;
  }
  uint64_t v16 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 8)
                              + (((unint64_t)(*(void *)(*(void *)(a1 + 16) + 32) + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
                  + 376 * ((*(_DWORD *)(*(void *)(a1 + 16) + 32) + v11) & 0xF)
                  + 24);
  double v17 = v13;
  do
  {
    uint64_t v18 = v14[4];
    BOOL v19 = v18 < v16;
    if (v18 >= v16) {
      double v20 = v14;
    }
    else {
      double v20 = v14 + 1;
    }
    if (!v19) {
      double v17 = v14;
    }
    double v14 = (void *)*v20;
  }
  while (*v20);
  if (v17 == v13 || v16 < v17[4]) {
LABEL_11:
  }
    double v17 = v13;
  uint64_t v21 = (uint64_t)(v17 + 5);
  double v48 = 0;
  double v49 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  uint64_t v50 = 0;
  if (!sub_1002E713C(a1, (uint64_t)&v48, v11, v17 + 5, a6))
  {
    uint64_t v31 = 0;
    goto LABEL_70;
  }
  uint64_t v22 = *(void *)(a1 + 16);
  uint64_t v43 = v21;
  *(_OWORD *)double v44 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v46 = 0u;
  if (sub_1002E9D98((uint64_t)&v43, v22))
  {
    int v23 = sub_1002EA3D8(&v43, (uint64_t *)&v48);
    char v47 = v23;
    if (v23)
    {
      double v24 = v44[0];
      if (v44[0] != v44[1])
      {
        if (*(void *)(v43 + 8))
        {
          int v25 = -1;
          uint64_t v26 = -1;
          uint64_t v27 = -1;
          while (2)
          {
            uint64_t v28 = v24[2];
            double v29 = *(void **)(v43 + 8);
            do
            {
              uint64_t v30 = v29[4];
              if (v28 >= v30)
              {
                if (v30 >= v28) {
                  goto LABEL_19;
                }
                ++v29;
              }
              double v29 = (void *)*v29;
            }
            while (v29);
            if (v26 < 0 || v27 == v28)
            {
              uint64_t v26 = *v24;
              int v25 = *((_DWORD *)v24 + 2);
              uint64_t v27 = v24[2];
LABEL_19:
              v24 += 4;
              if (v24 == v44[1]) {
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
        }
        else
        {
          uint64_t v26 = -1;
          uint64_t v39 = -1;
          do
          {
            if (v26 < 0)
            {
              uint64_t v39 = v24[2];
            }
            else if (v39 != v24[2])
            {
              goto LABEL_31;
            }
            uint64_t v40 = *v24;
            v24 += 4;
            uint64_t v26 = v40;
          }
          while (v24 != v44[1]);
          int v25 = *((_DWORD *)v24 - 6);
LABEL_64:
          if ((v26 & 0x8000000000000000) == 0) {
            goto LABEL_65;
          }
        }
      }
    }
  }
  else
  {
    char v47 = 0;
  }
LABEL_31:
  if (sub_1002E7450(a1, a2, v21, a3, (uint64_t *)&v48, a4, a5)) {
    goto LABEL_66;
  }
  if (!v47) {
    goto LABEL_61;
  }
  double v32 = v44[0];
  if (v44[0] == v44[1]) {
    goto LABEL_61;
  }
  if (*(void *)(v43 + 8))
  {
    int v25 = -1;
    uint64_t v26 = -1;
    uint64_t v33 = -1;
    while (2)
    {
      uint64_t v34 = v32[2];
      double v35 = *(void **)(v43 + 8);
      do
      {
        uint64_t v36 = v35[4];
        if (v34 >= v36)
        {
          if (v36 >= v34) {
            goto LABEL_37;
          }
          ++v35;
        }
        double v35 = (void *)*v35;
      }
      while (v35);
      if (v26 < 0 || v33 == v34)
      {
        uint64_t v26 = *v32;
        int v25 = *((_DWORD *)v32 + 2);
        uint64_t v33 = v32[2];
LABEL_37:
        v32 += 4;
        if (v32 == v44[1]) {
          goto LABEL_60;
        }
        continue;
      }
      goto LABEL_61;
    }
  }
  uint64_t v26 = -1;
  uint64_t v37 = -1;
  do
  {
    if (v26 < 0)
    {
      uint64_t v37 = v32[2];
    }
    else if (v37 != v32[2])
    {
      goto LABEL_61;
    }
    uint64_t v38 = *v32;
    v32 += 4;
    uint64_t v26 = v38;
  }
  while (v32 != v44[1]);
  int v25 = *((_DWORD *)v32 - 6);
LABEL_60:
  if ((v26 & 0x8000000000000000) == 0)
  {
LABEL_65:
    *a2 = v26;
    *a3 = v25;
LABEL_66:
    uint64_t v31 = 1;
    double v41 = __p[1];
    if (!__p[1]) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
LABEL_61:
  uint64_t v31 = 0;
  double v41 = __p[1];
  if (__p[1])
  {
LABEL_67:
    *(void *)&long long v46 = v41;
    operator delete(v41);
  }
LABEL_68:
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
LABEL_70:
  if (v48)
  {
    double v49 = v48;
    operator delete(v48);
  }
  return v31;
}

void sub_1002E70C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_1002E713C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  unint64_t v8 = a4 + 1;
  double v9 = (void *)*a4;
  if ((void *)*a4 != a4 + 1)
  {
    while (1)
    {
      uint64_t v11 = v9[4];
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8)
                      + (((unint64_t)(*(void *)(*(void *)(a1 + 16) + 32) + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
          + 376 * ((*(_DWORD *)(*(void *)(a1 + 16) + 32) + v11) & 0xF);
      if (*(unsigned char *)(v12 + 32)) {
        goto LABEL_45;
      }
      uint64_t v13 = v12 + 40;
      double v14 = *(uint64_t **)a1;
      double v15 = *(void **)(a1 + 8);
      if (v11 != a3)
      {
        sub_1002DF6D8((char **)a2, (double *)v12, v13, v9[4], 0, *(uint64_t **)a1, *(void **)(a1 + 8), 0);
        sub_1002DF6D8((char **)a2, (double *)v12, v12 + 208, v11, 1, *(uint64_t **)a1, *(void **)(a1 + 8), 0);
        goto LABEL_45;
      }
      double v16 = sub_1002DF6D8((char **)a2, (double *)v12, v13, a3, 0, *(uint64_t **)a1, *(void **)(a1 + 8), 0);
      uint64_t v18 = *(void *)(v12 + 48);
      if (v18 == *a5)
      {
        uint64_t v19 = *(void *)(v12 + 64);
        if (v19 == a5[2])
        {
          uint64_t v20 = *(void *)(v12 + 56);
          if (v20 == a5[1]) {
            break;
          }
        }
      }
LABEL_26:
      uint64_t v27 = *(uint64_t **)a1;
      uint64_t v28 = *(void **)(a1 + 8);
      double v29 = sub_1002DF6D8((char **)a2, (double *)v12, v12 + 208, a3, 1, *(uint64_t **)a1, v28, 0);
      uint64_t v31 = *(void *)(v12 + 216);
      if (v31 == *a5)
      {
        uint64_t v32 = *(void *)(v12 + 232);
        if (v32 == a5[2])
        {
          uint64_t v33 = *(void *)(v12 + 224);
          if (v33 == a5[1])
          {
            uint64_t v34 = *(void *)(v12 + 240);
            uint64_t v35 = a5[3];
            BOOL v36 = __OFSUB__(v34, v35);
            uint64_t v37 = v34 - v35;
            if (v31)
            {
              if (v37 < 0 == v36) {
                goto LABEL_41;
              }
              if (v32 >= 0) {
                uint64_t v38 = (uint64_t *)(*(void *)(*v28 + 48 * v33 + 24) + 24 * v32);
              }
              else {
                uint64_t v38 = (uint64_t *)(*v28 + 48 * v33);
              }
            }
            else
            {
              if (v37 < 0 == v36)
              {
LABEL_41:
                uint64_t v39 = *(void *)(a2 + 40);
                if (!v39 || v37 < *(void *)(a2 + 48))
                {
                  *(double *)(a2 + 24) = v29;
                  *(void *)(a2 + 32) = v30;
                  *(void *)(a2 + 48) = v37;
                }
                *(void *)(a2 + 40) = v39 + 1;
                goto LABEL_45;
              }
              if (v32 >= 0) {
                uint64_t v38 = (uint64_t *)(v27[3] + 24 * v32);
              }
              else {
                uint64_t v38 = v27;
              }
            }
            uint64_t v37 = v37 + ((v38[1] - *v38) >> 4) - 1;
            goto LABEL_41;
          }
        }
      }
LABEL_45:
      uint64_t v40 = (void *)v9[1];
      if (v40)
      {
        do
        {
          double v41 = v40;
          uint64_t v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          double v41 = (void *)v9[2];
          BOOL v42 = *v41 == (void)v9;
          double v9 = v41;
        }
        while (!v42);
      }
      double v9 = v41;
      if (v41 == v8) {
        goto LABEL_51;
      }
    }
    uint64_t v21 = *(void *)(v12 + 72);
    uint64_t v22 = a5[3];
    BOOL v23 = __OFSUB__(v21, v22);
    uint64_t v24 = v21 - v22;
    if (v18)
    {
      if (v24 < 0 == v23) {
        goto LABEL_22;
      }
      if (v19 >= 0) {
        int v25 = (uint64_t *)(*(void *)(*v15 + 48 * v20 + 24) + 24 * v19);
      }
      else {
        int v25 = (uint64_t *)(*v15 + 48 * v20);
      }
    }
    else
    {
      if (v24 < 0 == v23)
      {
LABEL_22:
        uint64_t v26 = *(void *)(a2 + 40);
        if (!v26 || v24 < *(void *)(a2 + 48))
        {
          *(double *)(a2 + 24) = v16;
          *(void *)(a2 + 32) = v17;
          *(void *)(a2 + 48) = v24;
        }
        *(void *)(a2 + 40) = v26 + 1;
        goto LABEL_26;
      }
      if (v19 >= 0) {
        int v25 = (uint64_t *)(v14[3] + 24 * v19);
      }
      else {
        int v25 = v14;
      }
    }
    uint64_t v24 = v24 + ((v25[1] - *v25) >> 4) - 1;
    goto LABEL_22;
  }
LABEL_51:
  uint64_t v43 = *(void *)(a2 + 40);
  if (v43) {
    sub_1002E7704(a2, (double *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 8)+ (((unint64_t)(*(void *)(*(void *)(a1 + 16) + 32) + a3) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 376 * ((*(_DWORD *)(*(void *)(a1 + 16) + 32) + a3) & 0xF)));
  }
  return v43 != 0;
}

BOOL sub_1002E7450(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 8);
  uint64_t v9 = *a5;
  unint64_t v10 = (a5[1] - *a5) / 112;
  if (a5[1] == *a5)
  {
LABEL_54:
    uint64_t v14 = -1;
    if (v10 >= 2)
    {
LABEL_18:
      int v20 = 0;
      uint64_t v21 = 1;
      uint64_t v22 = *(void **)(a3 + 8);
      while (1)
      {
        uint64_t v24 = *(void *)(v9 + 112 * v21 + 16);
        if (v24 > v14) {
          return v20 > 0;
        }
        if (v24 != v14 || *(_DWORD *)(v9 + 112 * v21 + 44) != 1) {
          goto LABEL_20;
        }
        uint64_t v26 = v9 + 112 * v21;
        uint64_t v27 = *(void *)(v26 + 32);
        uint64_t v28 = *(void *)(v8 + (((unint64_t)(*(void *)(v7 + 32) + v27) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 376 * ((*(_DWORD *)(v7 + 32) + v27) & 0xF)
            + 40;
        int v29 = *(_DWORD *)(v26 + 40);
        if (*(unsigned char *)(v28 + 168 * v29 + 165)) {
          goto LABEL_20;
        }
        uint64_t v30 = v28 + 168 * v29;
        uint64_t v32 = *(void *)(v30 + 112);
        uint64_t v31 = *(void *)(v30 + 120);
        if (v32 || v31 == 0) {
          goto LABEL_20;
        }
        uint64_t v34 = *(void *)(v28 + 168 * v29 + 96);
        if (v34 == -1)
        {
          uint64_t v34 = *(void *)(v28 + 168 * v29 + 88);
          if (!v22)
          {
LABEL_43:
            int v37 = 2;
            if (v27 == a6) {
              goto LABEL_46;
            }
            goto LABEL_49;
          }
        }
        else if (!v22)
        {
          goto LABEL_43;
        }
        uint64_t v35 = v22;
        while (1)
        {
          uint64_t v36 = v35[4];
          if (v34 >= v36) {
            break;
          }
LABEL_39:
          uint64_t v35 = (void *)*v35;
          if (!v35) {
            goto LABEL_43;
          }
        }
        if (v36 < v34) {
          break;
        }
        int v37 = 1;
        if (v27 == a6)
        {
LABEL_46:
          if (v29 == a7)
          {
            int v38 = 4;
            if (v20 < 4) {
              goto LABEL_19;
            }
            goto LABEL_20;
          }
        }
LABEL_49:
        if (v27 == a6) {
          int v38 = 3;
        }
        else {
          int v38 = v37;
        }
        if (v38 > v20)
        {
LABEL_19:
          uint64_t v23 = v9 + 112 * v21;
          *a2 = *(void *)(v23 + 32);
          *a4 = *(_DWORD *)(v23 + 40);
          int v20 = v38;
        }
LABEL_20:
        if (++v21 == v10) {
          return v20 > 0;
        }
      }
      ++v35;
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(v7 + 32);
    if (v10 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = (a5[1] - *a5) / 112;
    }
    uint64_t v13 = (_DWORD *)(v9 + 44);
    while (1)
    {
      uint64_t v14 = *(void *)(v13 - 7);
      if (v14 && *v13 != 0)
      {
        uint64_t v16 = *(void *)(v8 + (((unint64_t)(*(void *)(v13 - 3) + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 376 * ((*(v13 - 3) + v11) & 0xF)
            + 40;
        int v17 = *(v13 - 1);
        int v18 = *(_DWORD *)(v16 + 168 * v17);
        BOOL v19 = v18 == 4 || v18 == 1;
        if (v19
          && *(void *)(*(void *)(v8 + (((unint64_t)(*(void *)(v9 + 32) + v11) >> 1) & 0x7FFFFFFFFFFFFFF8))
                       + 376 * ((*(_DWORD *)(v9 + 32) + v11) & 0xF)
                       + 168 * *(int *)(v9 + 40)
                       + 184) == *(void *)(v16 + 168 * v17 + 144))
        {
          break;
        }
      }
      v13 += 28;
      if (!--v12) {
        goto LABEL_54;
      }
    }
    if (v10 >= 2) {
      goto LABEL_18;
    }
  }
  int v20 = 0;
  return v20 > 0;
}

void *sub_1002E76C0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1002E7704(uint64_t a1, double *a2)
{
  uint64_t v3 = *(long long **)a1;
  uint64_t v4 = *(__n128 **)(a1 + 8);
  v15[0] = (double *)(a1 + 24);
  v15[1] = a2;
  unint64_t v5 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v4 - (char *)v3) >> 4));
  v15[2] = (double *)(a1 + 56);
  v14[0] = (double *)(a1 + 24);
  v14[1] = a2;
  v14[2] = (double *)(a1 + 56);
  if (v4 == (__n128 *)v3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  sub_1002E7D78(v3, v4, v14, v6, 1);
  uint64_t v7 = *(long long **)a1;
  uint64_t v8 = *(void *)(a1 + 8) - *(void *)a1;
  if (v8)
  {
    *((void *)v7 + 2) = 0;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v8 >> 4)) >= 2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unint64_t v11 = 1;
      do
      {
        unsigned int v12 = sub_1002E7814(v15, (double *)&v7[v9], (double *)&v7[v9 + 7]);
        uint64_t v7 = *(long long **)a1;
        uint64_t v13 = *(void *)(a1 + 8);
        v10 += v12;
        *(void *)(*(void *)a1 + v9 * 16 + 128) = v10;
        ++v11;
        v9 += 7;
      }
      while (v11 < 0x6DB6DB6DB6DB6DB7 * ((v13 - (uint64_t)v7) >> 4));
    }
  }
}

uint64_t sub_1002E7814(double **a1, double *a2, double *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  double v57 = 1.0;
  double v8 = sub_10004D628(v6, v7, a2, &v57);
  if (v8 == 0.0)
  {
LABEL_2:
    int v9 = 0;
    goto LABEL_12;
  }
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0) {
      int v9 = 1;
    }
    else {
      int v9 = -1;
    }
  }
  else
  {
    double v10 = fabs(v8);
    if (v8 > 0.0) {
      int v9 = 1;
    }
    else {
      int v9 = -1;
    }
    if (v10 <= v57 * 2.22044605e-16) {
      goto LABEL_2;
    }
  }
LABEL_12:
  unint64_t v11 = *a1;
  unsigned int v12 = a1[1];
  double v57 = 1.0;
  double v13 = sub_10004D628(v11, v12, a3, &v57);
  if (v13 == 0.0) {
    goto LABEL_13;
  }
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v13 > 0.0) {
      int v20 = 1;
    }
    else {
      int v20 = -1;
    }
    if (v9) {
      goto LABEL_87;
    }
    goto LABEL_32;
  }
  double v21 = fabs(v13);
  if (v13 > 0.0) {
    int v20 = 1;
  }
  else {
    int v20 = -1;
  }
  if (v21 > v57 * 2.22044605e-16)
  {
    if (v9) {
      goto LABEL_87;
    }
LABEL_32:
    uint64_t v23 = a1[1];
    double v24 = v23[1];
    double v25 = (*a1)[1] - v24;
    double v26 = *v23 - **a1;
    double v27 = -v25;
    if (v26 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v23 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_85;
      }
      double v46 = fabs(v26);
      double v47 = 2.22044605e-16;
      if (v46 >= 1.0) {
        double v47 = v46 * 2.22044605e-16;
      }
      if (v46 > v47) {
        goto LABEL_85;
      }
    }
    if (v25 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs((*a1)[1] - v24)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_85;
      }
      double v28 = fabs(v27);
      double v29 = 2.22044605e-16;
      if (v28 >= 1.0) {
        double v29 = v28 * 2.22044605e-16;
      }
      if (v28 > v29)
      {
LABEL_85:
        if (v24 * v25 - v26 * *v23 + a2[1] * v27 + v26 * *a2 < 0.0) {
          return 1;
        }
      }
    }
    goto LABEL_87;
  }
LABEL_13:
  uint64_t v14 = a1[1];
  double v15 = v14[1];
  double v16 = (*a1)[1] - v15;
  double v17 = *v14 - **a1;
  double v18 = -v16;
  double v19 = v15 * v16 - v17 * *v14;
  if (!v9)
  {
    if (v17 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_59;
      }
      double v35 = fabs(v17);
      double v36 = 2.22044605e-16;
      if (v35 >= 1.0) {
        double v36 = v35 * 2.22044605e-16;
      }
      if (v35 > v36) {
        goto LABEL_59;
      }
    }
    if (v16 == 0.0) {
      goto LABEL_26;
    }
    if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_59;
    }
    double v37 = fabs(v18);
    double v38 = 2.22044605e-16;
    if (v37 >= 1.0) {
      double v38 = v37 * 2.22044605e-16;
    }
    if (v37 <= v38)
    {
LABEL_26:
      int v22 = 0;
      if (v17 != 0.0) {
        goto LABEL_65;
      }
    }
    else
    {
LABEL_59:
      double v39 = v19 + a2[1] * v18 + v17 * *a2;
      if (v39 > 0.0) {
        int v22 = 1;
      }
      else {
        int v22 = -1;
      }
      if (v39 == 0.0) {
        int v22 = 0;
      }
      if (v17 != 0.0)
      {
LABEL_65:
        if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_75;
        }
        double v40 = fabs(v17);
        double v41 = 2.22044605e-16;
        if (v40 >= 1.0) {
          double v41 = v40 * 2.22044605e-16;
        }
        if (v40 > v41) {
          goto LABEL_75;
        }
      }
    }
    if (v16 == 0.0) {
      goto LABEL_70;
    }
    if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v43 = fabs(v18);
      double v44 = 2.22044605e-16;
      if (v43 >= 1.0) {
        double v44 = v43 * 2.22044605e-16;
      }
      if (v43 <= v44)
      {
LABEL_70:
        int v42 = 0;
        return v22 < v42;
      }
    }
LABEL_75:
    double v45 = v19 + a3[1] * v18 + v17 * *a3;
    if (v45 > 0.0) {
      int v42 = 1;
    }
    else {
      int v42 = -1;
    }
    if (v45 == 0.0) {
      int v42 = 0;
    }
    return v22 < v42;
  }
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_48;
    }
    double v30 = fabs(v17);
    double v31 = 2.22044605e-16;
    if (v30 >= 1.0) {
      double v31 = v30 * 2.22044605e-16;
    }
    if (v30 > v31) {
      goto LABEL_48;
    }
  }
  if (v16 == 0.0) {
    goto LABEL_16;
  }
  if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_48;
  }
  double v32 = fabs(v18);
  double v33 = 2.22044605e-16;
  if (v32 >= 1.0) {
    double v33 = v32 * 2.22044605e-16;
  }
  if (v32 <= v33)
  {
LABEL_16:
    int v20 = 0;
  }
  else
  {
LABEL_48:
    int v20 = 0;
    uint64_t result = 0;
    if (v19 + a3[1] * v18 + v17 * *a3 < 0.0) {
      return result;
    }
  }
LABEL_87:
  BOOL v48 = v9 <= v20;
  if (v9 == v20)
  {
    double v49 = a1[1];
    double v57 = 1.0;
    double v50 = sub_10004D628(v49, a2, a3, &v57);
    if (v50 == 0.0) {
      return 0;
    }
    if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v50 > 0.0) {
        int v52 = 1;
      }
      else {
        int v52 = -1;
      }
    }
    else
    {
      double v51 = fabs(v50);
      if (v50 > 0.0) {
        int v52 = 1;
      }
      else {
        int v52 = -1;
      }
      if (v51 <= v57 * 2.22044605e-16) {
        return 0;
      }
    }
    uint64_t v53 = a1[1];
    double v57 = 1.0;
    double v54 = sub_10004D628(v53, a3, a2, &v57);
    if (v54 != 0.0)
    {
      if ((*(void *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v54 > 0.0) {
          int v55 = 1;
        }
        else {
          int v55 = -1;
        }
        goto LABEL_110;
      }
      double v56 = fabs(v54);
      if (v54 > 0.0) {
        int v55 = 1;
      }
      else {
        int v55 = -1;
      }
      if (v56 > v57 * 2.22044605e-16) {
        goto LABEL_110;
      }
    }
    int v55 = 0;
LABEL_110:
    if (v52 + v55) {
      BOOL v48 = 1;
    }
    else {
      BOOL v48 = v55 <= v52;
    }
  }
  return !v48;
}

void sub_1002E7D78(long long *a1, __n128 *a2, double **a3, uint64_t a4, char a5)
{
uint64_t sub_1002E84A4(double **a1, uint64_t a2, uint64_t a3)
{
  char v6 = *a1;
  uint64_t v7 = a1[1];
  double v70 = 1.0;
  double v8 = sub_10004D628(v6, v7, (double *)a2, &v70);
  if (v8 == 0.0)
  {
LABEL_2:
    int v9 = 0;
    goto LABEL_12;
  }
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v8 > 0.0) {
      int v9 = 1;
    }
    else {
      int v9 = -1;
    }
  }
  else
  {
    double v10 = fabs(v8);
    if (v8 > 0.0) {
      int v9 = 1;
    }
    else {
      int v9 = -1;
    }
    if (v10 <= v70 * 2.22044605e-16) {
      goto LABEL_2;
    }
  }
LABEL_12:
  unint64_t v11 = *a1;
  unsigned int v12 = a1[1];
  double v70 = 1.0;
  double v13 = sub_10004D628(v11, v12, (double *)a3, &v70);
  if (v13 == 0.0) {
    goto LABEL_13;
  }
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v13 > 0.0) {
      int v20 = 1;
    }
    else {
      int v20 = -1;
    }
    if (v9) {
      goto LABEL_91;
    }
    goto LABEL_32;
  }
  double v21 = fabs(v13);
  if (v13 > 0.0) {
    int v20 = 1;
  }
  else {
    int v20 = -1;
  }
  if (v21 > v70 * 2.22044605e-16)
  {
    if (v9) {
      goto LABEL_91;
    }
LABEL_32:
    long long v23 = a1[1];
    double v24 = v23[1];
    double v25 = (*a1)[1] - v24;
    double v26 = *v23 - **a1;
    double v27 = -v25;
    if (v26 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v23 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_89;
      }
      double v47 = fabs(v26);
      double v48 = 2.22044605e-16;
      if (v47 >= 1.0) {
        double v48 = v47 * 2.22044605e-16;
      }
      if (v47 > v48) {
        goto LABEL_89;
      }
    }
    if (v25 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs((*a1)[1] - v24)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_89;
      }
      double v28 = fabs(v27);
      double v29 = 2.22044605e-16;
      if (v28 >= 1.0) {
        double v29 = v28 * 2.22044605e-16;
      }
      if (v28 > v29)
      {
LABEL_89:
        if (v24 * v25 - v26 * *v23 + *(double *)(a2 + 8) * v27 + v26 * *(double *)a2 < 0.0) {
          return 1;
        }
      }
    }
    goto LABEL_91;
  }
LABEL_13:
  uint64_t v14 = a1[1];
  double v15 = v14[1];
  double v16 = (*a1)[1] - v15;
  double v17 = *v14 - **a1;
  double v18 = -v16;
  double v19 = v15 * v16 - v17 * *v14;
  if (!v9)
  {
    if (v17 != 0.0)
    {
      if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_59;
      }
      double v35 = fabs(v17);
      double v36 = 2.22044605e-16;
      if (v35 >= 1.0) {
        double v36 = v35 * 2.22044605e-16;
      }
      if (v35 > v36) {
        goto LABEL_59;
      }
    }
    if (v16 == 0.0) {
      goto LABEL_26;
    }
    if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_59;
    }
    double v37 = fabs(v18);
    double v38 = 2.22044605e-16;
    if (v37 >= 1.0) {
      double v38 = v37 * 2.22044605e-16;
    }
    if (v37 <= v38)
    {
LABEL_26:
      int v22 = 0;
      if (v17 != 0.0) {
        goto LABEL_65;
      }
    }
    else
    {
LABEL_59:
      double v39 = v19 + *(double *)(a2 + 8) * v18 + v17 * *(double *)a2;
      if (v39 > 0.0) {
        int v22 = 1;
      }
      else {
        int v22 = -1;
      }
      if (v39 == 0.0) {
        int v22 = 0;
      }
      if (v17 != 0.0)
      {
LABEL_65:
        if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
          goto LABEL_78;
        }
        double v40 = fabs(v17);
        double v41 = 2.22044605e-16;
        if (v40 >= 1.0) {
          double v41 = v40 * 2.22044605e-16;
        }
        if (v40 > v41) {
          goto LABEL_78;
        }
      }
    }
    if (v16 == 0.0) {
      goto LABEL_70;
    }
    if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v43 = fabs(v18);
      double v44 = 2.22044605e-16;
      if (v43 >= 1.0) {
        double v44 = v43 * 2.22044605e-16;
      }
      if (v43 <= v44)
      {
LABEL_70:
        BOOL v42 = v22 < 0;
        if (!v22) {
          goto LABEL_93;
        }
        return v42;
      }
    }
LABEL_78:
    double v45 = v19 + *(double *)(a3 + 8) * v18 + v17 * *(double *)a3;
    if (v45 > 0.0) {
      int v46 = 1;
    }
    else {
      int v46 = -1;
    }
    if (v45 == 0.0) {
      int v46 = 0;
    }
    BOOL v42 = v22 < v46;
    if (v22 == v46)
    {
LABEL_93:
      int v52 = *(_DWORD *)(a2 + 44);
      int v53 = *(_DWORD *)(a3 + 44);
      BOOL v42 = v52 < v53;
      if (v52 == v53)
      {
        uint64_t v54 = *(void *)(a2 + 32);
        uint64_t v55 = *(void *)(a3 + 32);
        BOOL v42 = v54 < v55;
        if (v54 == v55)
        {
          uint64_t v56 = *(void *)(a2 + 72);
          uint64_t v57 = *(void *)(a3 + 72);
          BOOL v42 = v56 < v57;
          if (v56 == v57)
          {
            uint64_t v58 = *(void *)(a2 + 80);
            uint64_t v59 = *(void *)(a3 + 80);
            BOOL v42 = v58 < v59;
            if (v58 == v59)
            {
              uint64_t v60 = *(void *)(a2 + 88);
              uint64_t v61 = *(void *)(a3 + 88);
              BOOL v42 = v60 < v61;
              if (v60 == v61)
              {
                uint64_t v62 = *(void *)(a2 + 104);
                uint64_t v63 = *(void *)(a3 + 104);
                BOOL v42 = v62 < v63;
                if (v62 == v63) {
                  return *(void *)(a2 + 96) < *(void *)(a3 + 96);
                }
              }
            }
          }
        }
      }
    }
    return v42;
  }
  if (v17 != 0.0)
  {
    if (COERCE_UNSIGNED_INT64(fabs(*v14 - **a1)) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_48;
    }
    double v30 = fabs(v17);
    double v31 = 2.22044605e-16;
    if (v30 >= 1.0) {
      double v31 = v30 * 2.22044605e-16;
    }
    if (v30 > v31) {
      goto LABEL_48;
    }
  }
  if (v16 == 0.0) {
    goto LABEL_16;
  }
  if ((*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_48;
  }
  double v32 = fabs(v18);
  double v33 = 2.22044605e-16;
  if (v32 >= 1.0) {
    double v33 = v32 * 2.22044605e-16;
  }
  if (v32 <= v33)
  {
LABEL_16:
    int v20 = 0;
  }
  else
  {
LABEL_48:
    int v20 = 0;
    uint64_t result = 0;
    if (v19 + *(double *)(a3 + 8) * v18 + v17 * *(double *)a3 < 0.0) {
      return result;
    }
  }
LABEL_91:
  BOOL v49 = v9 <= v20;
  if (v9 != v20) {
    return !v49;
  }
  long long v50 = a1[1];
  double v70 = 1.0;
  double v51 = sub_10004D628(v50, (double *)a2, (double *)a3, &v70);
  if (v51 == 0.0) {
    goto LABEL_93;
  }
  if ((*(void *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v51 > 0.0) {
      int v65 = 1;
    }
    else {
      int v65 = -1;
    }
  }
  else
  {
    double v64 = fabs(v51);
    if (v51 > 0.0) {
      int v65 = 1;
    }
    else {
      int v65 = -1;
    }
    if (v64 <= v70 * 2.22044605e-16) {
      goto LABEL_93;
    }
  }
  long long v66 = a1[1];
  double v70 = 1.0;
  double v67 = sub_10004D628(v66, (double *)a3, (double *)a2, &v70);
  if (v67 != 0.0)
  {
    if ((*(void *)&v67 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v67 > 0.0) {
        int v68 = 1;
      }
      else {
        int v68 = -1;
      }
      goto LABEL_120;
    }
    double v69 = fabs(v67);
    if (v67 > 0.0) {
      int v68 = 1;
    }
    else {
      int v68 = -1;
    }
    if (v69 > v70 * 2.22044605e-16) {
      goto LABEL_120;
    }
  }
  int v68 = 0;
LABEL_120:
  if (v65 + v68) {
    goto LABEL_93;
  }
  BOOL v49 = v68 <= v65;
  return !v49;
}

uint64_t sub_1002E8A84(long long *a1, long long *a2, long long *a3, double **a4)
{
  char v8 = sub_1002E84A4(a4, (uint64_t)a2, (uint64_t)a1);
  uint64_t result = sub_1002E84A4(a4, (uint64_t)a3, (uint64_t)a2);
  if (v8)
  {
    if (result)
    {
      long long v57 = a1[4];
      long long v62 = a1[5];
      long long v67 = a1[6];
      long long v37 = *a1;
      long long v42 = a1[1];
      long long v47 = a1[2];
      long long v52 = a1[3];
      long long v11 = a3[1];
      long long v10 = a3[2];
      *a1 = *a3;
      a1[1] = v11;
      a1[2] = v10;
      long long v12 = a3[6];
      long long v14 = a3[3];
      long long v13 = a3[4];
      a1[5] = a3[5];
      a1[6] = v12;
      a1[3] = v14;
      a1[4] = v13;
      *a3 = v37;
      a3[1] = v42;
      a3[5] = v62;
      a3[6] = v67;
      a3[4] = v57;
      long long v15 = v47;
      long long v16 = v52;
      uint64_t result = 1;
LABEL_10:
      a3[2] = v15;
      a3[3] = v16;
      return result;
    }
    long long v60 = a1[4];
    long long v65 = a1[5];
    long long v70 = a1[6];
    long long v40 = *a1;
    long long v45 = a1[1];
    long long v50 = a1[2];
    long long v55 = a1[3];
    long long v28 = a2[1];
    long long v27 = a2[2];
    *a1 = *a2;
    a1[1] = v28;
    a1[2] = v27;
    long long v29 = a2[6];
    long long v31 = a2[3];
    long long v30 = a2[4];
    a1[5] = a2[5];
    a1[6] = v29;
    a1[3] = v31;
    a1[4] = v30;
    *a2 = v40;
    a2[1] = v45;
    a2[5] = v65;
    a2[6] = v70;
    a2[2] = v50;
    a2[3] = v55;
    a2[4] = v60;
    if (sub_1002E84A4(a4, (uint64_t)a3, (uint64_t)a2))
    {
      long long v61 = a2[4];
      long long v66 = a2[5];
      long long v71 = a2[6];
      long long v41 = *a2;
      long long v46 = a2[1];
      long long v51 = a2[2];
      long long v56 = a2[3];
      long long v33 = a3[1];
      long long v32 = a3[2];
      *a2 = *a3;
      a2[1] = v33;
      a2[2] = v32;
      long long v34 = a3[6];
      long long v36 = a3[3];
      long long v35 = a3[4];
      a2[5] = a3[5];
      a2[6] = v34;
      a2[3] = v36;
      a2[4] = v35;
      *a3 = v41;
      a3[1] = v46;
      a3[5] = v66;
      a3[6] = v71;
      a3[4] = v61;
      long long v15 = v51;
      long long v16 = v56;
      uint64_t result = 2;
      goto LABEL_10;
    }
    return 1;
  }
  if (result)
  {
    long long v58 = a2[4];
    long long v63 = a2[5];
    long long v68 = a2[6];
    long long v38 = *a2;
    long long v43 = a2[1];
    long long v48 = a2[2];
    long long v53 = a2[3];
    long long v18 = a3[1];
    long long v17 = a3[2];
    *a2 = *a3;
    a2[1] = v18;
    a2[2] = v17;
    long long v19 = a3[6];
    long long v21 = a3[3];
    long long v20 = a3[4];
    a2[5] = a3[5];
    a2[6] = v19;
    a2[3] = v21;
    a2[4] = v20;
    *a3 = v38;
    a3[1] = v43;
    a3[5] = v63;
    a3[6] = v68;
    a3[2] = v48;
    a3[3] = v53;
    a3[4] = v58;
    if (!sub_1002E84A4(a4, (uint64_t)a2, (uint64_t)a1)) {
      return 1;
    }
    long long v59 = a1[4];
    long long v64 = a1[5];
    long long v69 = a1[6];
    long long v39 = *a1;
    long long v44 = a1[1];
    long long v49 = a1[2];
    long long v54 = a1[3];
    long long v23 = a2[1];
    long long v22 = a2[2];
    *a1 = *a2;
    a1[1] = v23;
    a1[2] = v22;
    long long v24 = a2[6];
    long long v26 = a2[3];
    long long v25 = a2[4];
    a1[5] = a2[5];
    a1[6] = v24;
    a1[3] = v26;
    a1[4] = v25;
    *a2 = v39;
    a2[1] = v44;
    a2[5] = v64;
    a2[6] = v69;
    uint64_t result = 2;
    a2[2] = v49;
    a2[3] = v54;
    a2[4] = v59;
  }
  return result;
}

long long *sub_1002E8D3C(long long *a1, long long *a2, double **a3)
{
  uint64_t v4 = a2;
  long long v6 = a1[5];
  long long v43 = a1[4];
  long long v44 = v6;
  long long v45 = a1[6];
  long long v7 = a1[1];
  long long v39 = *a1;
  long long v40 = v7;
  long long v8 = a1[3];
  long long v41 = a1[2];
  long long v42 = v8;
  if (sub_1002E84A4(a3, (uint64_t)&v39, (uint64_t)(a2 - 7)))
  {
    int v9 = a1;
    do
      v9 += 7;
    while ((sub_1002E84A4(a3, (uint64_t)&v39, (uint64_t)v9) & 1) == 0);
  }
  else
  {
    unint64_t v10 = (unint64_t)(a1 + 7);
    do
    {
      int v9 = (long long *)v10;
      if (v10 >= (unint64_t)v4) {
        break;
      }
      int v11 = sub_1002E84A4(a3, (uint64_t)&v39, v10);
      unint64_t v10 = (unint64_t)(v9 + 7);
    }
    while (!v11);
  }
  if (v9 < v4)
  {
    do
      v4 -= 7;
    while ((sub_1002E84A4(a3, (uint64_t)&v39, (uint64_t)v4) & 1) != 0);
  }
  while (v9 < v4)
  {
    long long v12 = *v9;
    long long v13 = v9[2];
    long long v47 = v9[1];
    long long v48 = v13;
    long long v46 = v12;
    long long v14 = v9[3];
    long long v15 = v9[4];
    long long v16 = v9[6];
    long long v51 = v9[5];
    long long v52 = v16;
    long long v49 = v14;
    long long v50 = v15;
    long long v17 = v4[6];
    long long v19 = v4[3];
    long long v18 = v4[4];
    v9[5] = v4[5];
    v9[6] = v17;
    v9[3] = v19;
    uint64_t v9[4] = v18;
    long long v20 = *v4;
    long long v21 = v4[2];
    v9[1] = v4[1];
    _DWORD v9[2] = v21;
    *int v9 = v20;
    long long v22 = v46;
    long long v23 = v48;
    v4[1] = v47;
    v4[2] = v23;
    *uint64_t v4 = v22;
    long long v24 = v49;
    long long v25 = v50;
    long long v26 = v52;
    v4[5] = v51;
    v4[6] = v26;
    v4[3] = v24;
    v4[4] = v25;
    do
      v9 += 7;
    while (!sub_1002E84A4(a3, (uint64_t)&v39, (uint64_t)v9));
    do
      v4 -= 7;
    while ((sub_1002E84A4(a3, (uint64_t)&v39, (uint64_t)v4) & 1) != 0);
  }
  long long v27 = v9 - 7;
  if (v9 - 7 != a1)
  {
    long long v28 = *v27;
    long long v29 = *(v9 - 5);
    a1[1] = *(v9 - 6);
    a1[2] = v29;
    *a1 = v28;
    long long v30 = *(v9 - 4);
    long long v31 = *(v9 - 3);
    long long v32 = *(v9 - 1);
    a1[5] = *(v9 - 2);
    a1[6] = v32;
    a1[3] = v30;
    a1[4] = v31;
  }
  long long v33 = v39;
  long long v34 = v41;
  *(v9 - 6) = v40;
  *(v9 - 5) = v34;
  long long *v27 = v33;
  long long v35 = v42;
  long long v36 = v43;
  long long v37 = v45;
  *(v9 - 2) = v44;
  *(v9 - 1) = v37;
  *(v9 - 4) = v35;
  *(v9 - 3) = v36;
  return v9;
}

long long *sub_1002E8F04(long long *a1, unint64_t a2, double **a3)
{
  uint64_t v6 = 0;
  long long v7 = a1[5];
  long long v42 = a1[4];
  long long v43 = v7;
  long long v44 = a1[6];
  long long v8 = a1[1];
  long long v38 = *a1;
  long long v39 = v8;
  long long v9 = a1[3];
  long long v40 = a1[2];
  long long v41 = v9;
  do
    v6 += 7;
  while ((sub_1002E84A4(a3, (uint64_t)&a1[v6], (uint64_t)&v38) & 1) != 0);
  unint64_t v10 = &a1[v6];
  int v11 = &a1[v6 - 7];
  if (v6 == 7)
  {
    do
    {
      if ((unint64_t)v10 >= a2) {
        break;
      }
      a2 -= 112;
    }
    while ((sub_1002E84A4(a3, a2, (uint64_t)&v38) & 1) == 0);
  }
  else
  {
    do
      a2 -= 112;
    while (!sub_1002E84A4(a3, a2, (uint64_t)&v38));
  }
  if ((unint64_t)v10 < a2)
  {
    long long v12 = &a1[v6];
    long long v13 = (long long *)a2;
    do
    {
      long long v14 = v12[5];
      long long v49 = v12[4];
      long long v50 = v14;
      long long v51 = v12[6];
      long long v15 = v12[1];
      long long v45 = *v12;
      long long v46 = v15;
      long long v16 = v12[3];
      long long v47 = v12[2];
      long long v48 = v16;
      long long v18 = v13[3];
      long long v17 = v13[4];
      long long v19 = v13[6];
      v12[5] = v13[5];
      v12[6] = v19;
      v12[3] = v18;
      v12[4] = v17;
      long long v21 = v13[1];
      long long v20 = v13[2];
      *long long v12 = *v13;
      v12[1] = v21;
      v12[2] = v20;
      long long v22 = v45;
      long long v23 = v47;
      v13[1] = v46;
      v13[2] = v23;
      *long long v13 = v22;
      long long v24 = v48;
      long long v25 = v49;
      long long v26 = v51;
      v13[5] = v50;
      v13[6] = v26;
      v13[3] = v24;
      v13[4] = v25;
      do
        v12 += 7;
      while ((sub_1002E84A4(a3, (uint64_t)v12, (uint64_t)&v38) & 1) != 0);
      do
        v13 -= 7;
      while (!sub_1002E84A4(a3, (uint64_t)v13, (uint64_t)&v38));
    }
    while (v12 < v13);
    int v11 = v12 - 7;
  }
  if (v11 != a1)
  {
    long long v27 = *v11;
    long long v28 = v11[2];
    a1[1] = v11[1];
    a1[2] = v28;
    *a1 = v27;
    long long v29 = v11[3];
    long long v30 = v11[4];
    long long v31 = v11[6];
    a1[5] = v11[5];
    a1[6] = v31;
    a1[3] = v29;
    a1[4] = v30;
  }
  long long v32 = v38;
  long long v33 = v40;
  v11[1] = v39;
  v11[2] = v33;
  *int v11 = v32;
  long long v34 = v41;
  long long v35 = v42;
  long long v36 = v44;
  v11[5] = v43;
  v11[6] = v36;
  void v11[3] = v34;
  v11[4] = v35;
  return v11;
}

BOOL sub_1002E90D4(long long *a1, long long *a2, double **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v8 = a2 - 7;
      if (!sub_1002E84A4(a3, (uint64_t)(a2 - 7), (uint64_t)a1)) {
        return 1;
      }
      long long v9 = a1[5];
      long long v77 = a1[4];
      long long v78 = v9;
      long long v79 = a1[6];
      long long v10 = a1[1];
      long long v73 = *a1;
      long long v74 = v10;
      long long v11 = a1[3];
      long long v75 = a1[2];
      long long v76 = v11;
      long long v13 = *(a2 - 6);
      long long v12 = *(a2 - 5);
      *a1 = *v8;
      a1[1] = v13;
      a1[2] = v12;
      long long v14 = *(a2 - 1);
      long long v16 = *(a2 - 4);
      long long v15 = *(a2 - 3);
      a1[5] = *(a2 - 2);
      a1[6] = v14;
      a1[3] = v16;
      a1[4] = v15;
      long long v17 = v74;
      long long *v8 = v73;
      *(a2 - 6) = v17;
      long long v18 = v79;
      long long v19 = v77;
      *(a2 - 2) = v78;
      *(a2 - 1) = v18;
      *(a2 - 3) = v19;
      long long v20 = v75;
      long long v21 = v76;
      goto LABEL_20;
    case 3:
      sub_1002E8A84(a1, a1 + 7, a2 - 7, a3);
      return 1;
    case 4:
      long long v8 = a1 + 7;
      long long v38 = a1 + 14;
      long long v39 = a2 - 7;
      sub_1002E8A84(a1, a1 + 7, a1 + 14, a3);
      if (!sub_1002E84A4(a3, (uint64_t)v39, (uint64_t)(a1 + 14))) {
        return 1;
      }
      long long v40 = a1[19];
      long long v77 = a1[18];
      long long v78 = v40;
      long long v79 = a1[20];
      long long v41 = a1[15];
      long long v73 = *v38;
      long long v74 = v41;
      long long v42 = a1[17];
      long long v75 = a1[16];
      long long v76 = v42;
      long long v44 = v39[1];
      long long v43 = v39[2];
      *long long v38 = *v39;
      a1[15] = v44;
      a1[16] = v43;
      long long v45 = v39[6];
      long long v47 = v39[3];
      long long v46 = v39[4];
      a1[19] = v39[5];
      a1[20] = v45;
      a1[17] = v47;
      a1[18] = v46;
      long long v48 = v74;
      *long long v39 = v73;
      v39[1] = v48;
      long long v49 = v79;
      long long v50 = v77;
      v39[5] = v78;
      v39[6] = v49;
      long long v51 = v76;
      v39[2] = v75;
      v39[3] = v51;
      v39[4] = v50;
      if (!sub_1002E84A4(a3, (uint64_t)(a1 + 14), (uint64_t)(a1 + 7))) {
        return 1;
      }
      long long v52 = a1[12];
      long long v77 = a1[11];
      long long v78 = v52;
      long long v79 = a1[13];
      long long v53 = a1[8];
      long long v73 = *v8;
      long long v74 = v53;
      long long v54 = a1[10];
      long long v75 = a1[9];
      long long v76 = v54;
      long long v55 = a1[15];
      long long *v8 = *v38;
      a1[8] = v55;
      long long v56 = a1[20];
      long long v57 = a1[18];
      a1[12] = a1[19];
      a1[13] = v56;
      long long v58 = a1[17];
      a1[9] = a1[16];
      a1[10] = v58;
      a1[11] = v57;
      long long v59 = v74;
      *long long v38 = v73;
      a1[15] = v59;
      long long v60 = v75;
      long long v61 = v76;
      long long v62 = v79;
      a1[19] = v78;
      a1[20] = v62;
      long long v63 = v77;
      a1[17] = v61;
      a1[18] = v63;
      a1[16] = v60;
      if (!sub_1002E84A4(a3, (uint64_t)(a1 + 7), (uint64_t)a1)) {
        return 1;
      }
      long long v64 = a1[5];
      long long v77 = a1[4];
      long long v78 = v64;
      long long v79 = a1[6];
      long long v65 = a1[1];
      long long v73 = *a1;
      long long v74 = v65;
      long long v66 = a1[3];
      long long v75 = a1[2];
      long long v76 = v66;
      long long v67 = a1[8];
      *a1 = *v8;
      a1[1] = v67;
      long long v68 = a1[13];
      long long v69 = a1[11];
      a1[5] = a1[12];
      a1[6] = v68;
      long long v70 = a1[10];
      a1[2] = a1[9];
      a1[3] = v70;
      a1[4] = v69;
      long long v71 = v74;
      long long *v8 = v73;
      a1[8] = v71;
      long long v20 = v75;
      long long v21 = v76;
      long long v72 = v79;
      a1[12] = v78;
      a1[13] = v72;
      a1[11] = v77;
LABEL_20:
      BOOL result = 1;
      v8[2] = v20;
      void v8[3] = v21;
      return result;
    case 5:
      sub_1002E94C4(a1, a1 + 7, a1 + 14, a1 + 21, a2 - 7, a3);
      return 1;
    default:
      uint64_t v22 = (uint64_t)(a1 + 14);
      sub_1002E8A84(a1, a1 + 7, a1 + 14, a3);
      long long v23 = a1 + 21;
      if (a1 + 21 == a2) {
        return 1;
      }
      uint64_t v24 = 0;
      int v25 = 0;
      break;
  }
  while (1)
  {
    if (sub_1002E84A4(a3, (uint64_t)v23, v22))
    {
      long long v30 = v23[5];
      long long v77 = v23[4];
      long long v78 = v30;
      long long v79 = v23[6];
      long long v31 = v23[1];
      long long v73 = *v23;
      long long v74 = v31;
      long long v32 = v23[3];
      uint64_t v33 = v24;
      long long v75 = v23[2];
      long long v76 = v32;
      do
      {
        long long v34 = (long long *)((char *)a1 + v33);
        long long v35 = *(long long *)((char *)a1 + v33 + 304);
        v34[25] = *(long long *)((char *)a1 + v33 + 288);
        v34[26] = v35;
        v34[27] = *(long long *)((char *)a1 + v33 + 320);
        long long v36 = *(long long *)((char *)a1 + v33 + 240);
        v34[21] = *(long long *)((char *)a1 + v33 + 224);
        v34[22] = v36;
        long long v37 = *(long long *)((char *)a1 + v33 + 272);
        v34[23] = *(long long *)((char *)a1 + v33 + 256);
        v34[24] = v37;
        if (v33 == -224)
        {
          long long v26 = a1;
          goto LABEL_7;
        }
        v33 -= 112;
      }
      while ((sub_1002E84A4(a3, (uint64_t)&v73, (uint64_t)(v34 + 7)) & 1) != 0);
      long long v26 = (long long *)((char *)a1 + v33 + 336);
LABEL_7:
      long long v27 = v78;
      v26[4] = v77;
      v26[5] = v27;
      v26[6] = v79;
      long long v28 = v74;
      long long *v26 = v73;
      v26[1] = v28;
      long long v29 = v76;
      ++v25;
      double v26[2] = v75;
      v26[3] = v29;
      if (v25 == 8) {
        return v23 + 7 == a2;
      }
    }
    uint64_t v22 = (uint64_t)v23;
    v24 += 112;
    v23 += 7;
    if (v23 == a2) {
      return 1;
    }
  }
}

__n128 sub_1002E94C4(long long *a1, long long *a2, long long *a3, long long *a4, long long *a5, double **a6)
{
  sub_1002E8A84(a1, a2, a3, a6);
  if (sub_1002E84A4(a6, (uint64_t)a4, (uint64_t)a3))
  {
    long long v76 = a3[4];
    long long v83 = a3[5];
    long long v90 = a3[6];
    long long v48 = *a3;
    long long v55 = a3[1];
    long long v62 = a3[2];
    long long v69 = a3[3];
    long long v13 = a4[1];
    long long v12 = a4[2];
    *a3 = *a4;
    a3[1] = v13;
    a3[2] = v12;
    long long v14 = a4[6];
    long long v16 = a4[3];
    long long v15 = a4[4];
    a3[5] = a4[5];
    a3[6] = v14;
    a3[3] = v16;
    a3[4] = v15;
    *a4 = v48;
    a4[1] = v55;
    a4[5] = v83;
    a4[6] = v90;
    a4[2] = v62;
    a4[3] = v69;
    a4[4] = v76;
    if (sub_1002E84A4(a6, (uint64_t)a3, (uint64_t)a2))
    {
      long long v77 = a2[4];
      long long v84 = a2[5];
      long long v91 = a2[6];
      long long v49 = *a2;
      long long v56 = a2[1];
      long long v63 = a2[2];
      long long v70 = a2[3];
      long long v18 = a3[1];
      long long v17 = a3[2];
      *a2 = *a3;
      a2[1] = v18;
      a2[2] = v17;
      long long v19 = a3[6];
      long long v21 = a3[3];
      long long v20 = a3[4];
      a2[5] = a3[5];
      a2[6] = v19;
      a2[3] = v21;
      a2[4] = v20;
      *a3 = v49;
      a3[1] = v56;
      a3[5] = v84;
      a3[6] = v91;
      a3[2] = v63;
      a3[3] = v70;
      a3[4] = v77;
      if (sub_1002E84A4(a6, (uint64_t)a2, (uint64_t)a1))
      {
        long long v78 = a1[4];
        long long v85 = a1[5];
        long long v92 = a1[6];
        long long v50 = *a1;
        long long v57 = a1[1];
        long long v64 = a1[2];
        long long v71 = a1[3];
        long long v23 = a2[1];
        long long v22 = a2[2];
        *a1 = *a2;
        a1[1] = v23;
        a1[2] = v22;
        long long v24 = a2[6];
        long long v26 = a2[3];
        long long v25 = a2[4];
        a1[5] = a2[5];
        a1[6] = v24;
        a1[3] = v26;
        a1[4] = v25;
        *a2 = v50;
        a2[1] = v57;
        a2[5] = v85;
        a2[6] = v92;
        a2[2] = v64;
        a2[3] = v71;
        a2[4] = v78;
      }
    }
  }
  if (sub_1002E84A4(a6, (uint64_t)a5, (uint64_t)a4))
  {
    long long v79 = a4[4];
    long long v86 = a4[5];
    long long v93 = a4[6];
    long long v51 = *a4;
    long long v58 = a4[1];
    long long v65 = a4[2];
    long long v72 = a4[3];
    long long v29 = a5[1];
    long long v28 = a5[2];
    *a4 = *a5;
    a4[1] = v29;
    a4[2] = v28;
    long long v30 = a5[6];
    long long v32 = a5[3];
    long long v31 = a5[4];
    a4[5] = a5[5];
    a4[6] = v30;
    a4[3] = v32;
    a4[4] = v31;
    *a5 = v51;
    a5[1] = v58;
    a5[5] = v86;
    a5[6] = v93;
    a5[2] = v65;
    a5[3] = v72;
    a5[4] = v79;
    if (sub_1002E84A4(a6, (uint64_t)a4, (uint64_t)a3))
    {
      long long v80 = a3[4];
      long long v87 = a3[5];
      long long v94 = a3[6];
      long long v52 = *a3;
      long long v59 = a3[1];
      long long v66 = a3[2];
      long long v73 = a3[3];
      long long v34 = a4[1];
      long long v33 = a4[2];
      *a3 = *a4;
      a3[1] = v34;
      a3[2] = v33;
      long long v35 = a4[6];
      long long v37 = a4[3];
      long long v36 = a4[4];
      a3[5] = a4[5];
      a3[6] = v35;
      a3[3] = v37;
      a3[4] = v36;
      *a4 = v52;
      a4[1] = v59;
      a4[5] = v87;
      a4[6] = v94;
      a4[2] = v66;
      a4[3] = v73;
      a4[4] = v80;
      if (sub_1002E84A4(a6, (uint64_t)a3, (uint64_t)a2))
      {
        long long v81 = a2[4];
        long long v88 = a2[5];
        long long v95 = a2[6];
        long long v53 = *a2;
        long long v60 = a2[1];
        long long v67 = a2[2];
        long long v74 = a2[3];
        long long v39 = a3[1];
        long long v38 = a3[2];
        *a2 = *a3;
        a2[1] = v39;
        a2[2] = v38;
        long long v40 = a3[6];
        long long v42 = a3[3];
        long long v41 = a3[4];
        a2[5] = a3[5];
        a2[6] = v40;
        a2[3] = v42;
        a2[4] = v41;
        *a3 = v53;
        a3[1] = v60;
        a3[5] = v88;
        a3[6] = v95;
        a3[2] = v67;
        a3[3] = v74;
        a3[4] = v81;
        if (sub_1002E84A4(a6, (uint64_t)a2, (uint64_t)a1))
        {
          long long v82 = a1[4];
          long long v89 = a1[5];
          long long v96 = a1[6];
          long long v54 = *a1;
          long long v61 = a1[1];
          __n128 v68 = (__n128)a1[2];
          long long v75 = a1[3];
          long long v44 = a2[1];
          long long v43 = a2[2];
          *a1 = *a2;
          a1[1] = v44;
          a1[2] = v43;
          long long v45 = a2[6];
          long long v47 = a2[3];
          long long v46 = a2[4];
          a1[5] = a2[5];
          a1[6] = v45;
          a1[3] = v47;
          a1[4] = v46;
          *a2 = v54;
          a2[1] = v61;
          a2[5] = v89;
          a2[6] = v96;
          __n128 result = v68;
          a2[2] = (__int128)v68;
          a2[3] = v75;
          a2[4] = v82;
        }
      }
    }
  }
  return result;
}

__n128 *sub_1002E9844(uint64_t a1, __n128 *a2, __n128 *a3, double **a4)
{
  if ((__n128 *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 112;
    if ((uint64_t)a2 - a1 >= 113)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 112 * v10);
      do
      {
        sub_1002E9BEC(a1, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    long long v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (sub_1002E84A4(a4, (uint64_t)v14, a1))
        {
          __n128 v15 = v14[5];
          __n128 v77 = v14[4];
          __n128 v78 = v15;
          __n128 v79 = v14[6];
          __n128 v16 = v14[1];
          __n128 v73 = *v14;
          __n128 v74 = v16;
          __n128 v17 = v14[3];
          __n128 v75 = v14[2];
          __n128 v76 = v17;
          __n128 v19 = *(__n128 *)(a1 + 16);
          __n128 v18 = *(__n128 *)(a1 + 32);
          *long long v14 = *(__n128 *)a1;
          v14[1] = v19;
          v14[2] = v18;
          __n128 v20 = *(__n128 *)(a1 + 96);
          __n128 v22 = *(__n128 *)(a1 + 48);
          __n128 v21 = *(__n128 *)(a1 + 64);
          v14[5] = *(__n128 *)(a1 + 80);
          v14[6] = v20;
          void v14[3] = v22;
          v14[4] = v21;
          __n128 v23 = v74;
          *(__n128 *)a1 = v73;
          *(__n128 *)(a1 + 16) = v23;
          __n128 v24 = v79;
          __n128 v25 = v77;
          *(__n128 *)(a1 + 80) = v78;
          *(__n128 *)(a1 + 96) = v24;
          __n128 v26 = v76;
          *(__n128 *)(a1 + 32) = v75;
          *(__n128 *)(a1 + 48) = v26;
          *(__n128 *)(a1 + 64) = v25;
          sub_1002E9BEC(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 7;
      }
      while (v14 != a3);
      long long v13 = a3;
    }
    if (v8 < 113)
    {
      return v13;
    }
    else
    {
      long long v64 = v13;
      long long v65 = a2;
      uint64_t v27 = (((unint64_t)v8 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64;
      do
      {
        uint64_t v29 = 0;
        __n128 v70 = *(__n128 *)(a1 + 64);
        __n128 v71 = *(__n128 *)(a1 + 80);
        __n128 v72 = *(__n128 *)(a1 + 96);
        __n128 v66 = *(__n128 *)a1;
        __n128 v67 = *(__n128 *)(a1 + 16);
        long long v30 = (_OWORD *)a1;
        __n128 v68 = *(__n128 *)(a1 + 32);
        __n128 v69 = *(__n128 *)(a1 + 48);
        do
        {
          long long v36 = (__n128 *)&v30[7 * v29 + 7];
          uint64_t v37 = (2 * v29) | 1;
          uint64_t v38 = 2 * v29 + 2;
          if (v38 < v27 && sub_1002E84A4(a4, (uint64_t)&v30[7 * v29 + 7], (uint64_t)&v30[7 * v29 + 14]))
          {
            v36 += 7;
            uint64_t v37 = v38;
          }
          __n128 v31 = *v36;
          __n128 v32 = v36[2];
          v30[1] = v36[1];
          v30[2] = v32;
          *long long v30 = v31;
          __n128 v33 = v36[3];
          __n128 v34 = v36[4];
          __n128 v35 = v36[6];
          v30[5] = v36[5];
          void v30[6] = v35;
          v30[3] = v33;
          v30[4] = v34;
          long long v30 = v36;
          uint64_t v29 = v37;
        }
        while (v37 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
        long long v39 = v65 - 7;
        BOOL v40 = v36 == &v65[-7];
        v65 -= 7;
        if (v40)
        {
          v36[1] = v67;
          v36[2] = v68;
          *long long v36 = v66;
          v36[5] = v71;
          v36[6] = v72;
          v36[3] = v69;
          v36[4] = v70;
        }
        else
        {
          __n128 v41 = *v39;
          __n128 v42 = v39[2];
          v36[1] = v39[1];
          v36[2] = v42;
          *long long v36 = v41;
          __n128 v43 = v39[3];
          __n128 v44 = v39[4];
          __n128 v45 = v39[6];
          v36[5] = v39[5];
          v36[6] = v45;
          v36[3] = v43;
          v36[4] = v44;
          v39[4] = v70;
          v39[5] = v71;
          v39[6] = v72;
          *long long v39 = v66;
          v39[1] = v67;
          v39[2] = v68;
          v39[3] = v69;
          uint64_t v46 = (uint64_t)&v36[7] - a1;
          if (v46 >= 113)
          {
            unint64_t v47 = (unint64_t)(((((unint64_t)v46 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                   - 2) >> 1;
            long long v48 = (__n128 *)(a1 + 112 * v47);
            if (sub_1002E84A4(a4, (uint64_t)v48, (uint64_t)v36))
            {
              __n128 v49 = *v36;
              __n128 v50 = v36[2];
              __n128 v74 = v36[1];
              __n128 v75 = v50;
              __n128 v73 = v49;
              __n128 v51 = v36[3];
              __n128 v52 = v36[4];
              __n128 v53 = v36[6];
              __n128 v78 = v36[5];
              __n128 v79 = v53;
              __n128 v76 = v51;
              __n128 v77 = v52;
              do
              {
                long long v54 = v48;
                __n128 v55 = *v48;
                __n128 v56 = v48[2];
                v36[1] = v48[1];
                v36[2] = v56;
                *long long v36 = v55;
                __n128 v57 = v48[3];
                __n128 v58 = v48[4];
                __n128 v59 = v48[6];
                v36[5] = v48[5];
                v36[6] = v59;
                v36[3] = v57;
                v36[4] = v58;
                if (!v47) {
                  break;
                }
                unint64_t v47 = (v47 - 1) >> 1;
                long long v48 = (__n128 *)(a1 + 112 * v47);
                long long v36 = v54;
              }
              while ((sub_1002E84A4(a4, (uint64_t)v48, (uint64_t)&v73) & 1) != 0);
              __n128 v60 = v78;
              void v54[4] = v77;
              v54[5] = v60;
              v54[6] = v79;
              __n128 v61 = v74;
              *long long v54 = v73;
              v54[1] = v61;
              __n128 v62 = v76;
              v54[2] = v75;
              v54[3] = v62;
            }
          }
        }
      }
      while (v27-- > 2);
      return v64;
    }
  }
  return a3;
}

__n128 sub_1002E9BEC(uint64_t a1, double **a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v38 = v4;
    uint64_t v39 = v5;
    long long v7 = a4;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 4))
    {
      int64_t v12 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 4)) | 1;
      long long v13 = (__n128 *)(a1 + 112 * v12);
      int64_t v14 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v14 < a3 && sub_1002E84A4(a2, a1 + 112 * v12, (uint64_t)&v13[7]))
      {
        v13 += 7;
        int64_t v12 = v14;
      }
      if ((sub_1002E84A4(a2, (uint64_t)v13, (uint64_t)v7) & 1) == 0)
      {
        __n128 v16 = v7[5];
        __n128 v35 = v7[4];
        __n128 v36 = v16;
        __n128 v37 = v7[6];
        __n128 v17 = v7[1];
        __n128 v31 = *v7;
        __n128 v32 = v17;
        __n128 v18 = v7[3];
        __n128 v33 = v7[2];
        __n128 v34 = v18;
        do
        {
          __n128 v19 = v13;
          __n128 v20 = *v13;
          __n128 v21 = v13[2];
          v7[1] = v13[1];
          _DWORD v7[2] = v21;
          *long long v7 = v20;
          __n128 v22 = v13[3];
          __n128 v23 = v13[4];
          __n128 v24 = v13[6];
          v7[5] = v13[5];
          v7[6] = v24;
          v7[3] = v22;
          v7[4] = v23;
          if (v9 < v12) {
            break;
          }
          uint64_t v25 = (2 * v12) | 1;
          long long v13 = (__n128 *)(a1 + 112 * v25);
          uint64_t v26 = 2 * v12 + 2;
          if (v26 < a3)
          {
            if (sub_1002E84A4(a2, a1 + 112 * v25, (uint64_t)&v13[7]))
            {
              v13 += 7;
              uint64_t v25 = v26;
            }
          }
          long long v7 = v19;
          int64_t v12 = v25;
        }
        while (!sub_1002E84A4(a2, (uint64_t)v13, (uint64_t)&v31));
        __n128 v27 = v31;
        __n128 v28 = v33;
        v19[1] = v32;
        double v19[2] = v28;
        *__n128 v19 = v27;
        __n128 result = v34;
        __n128 v29 = v35;
        __n128 v30 = v37;
        v19[5] = v36;
        unsigned char v19[6] = v30;
        void v19[3] = result;
        v19[4] = v29;
      }
    }
  }
  return result;
}

uint64_t sub_1002E9D98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void ***)a1;
  uint64_t v3 = 1;
  if (v2 != (void *)(*(void *)a1 + 8))
  {
    __n128 v73 = (void *)(a1 + 32);
    __n128 v74 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v6 = v2[4];
      uint64_t v7 = *(void *)(*(void *)(a2 + 8)
                     + (((unint64_t)(*(void *)(a2 + 32) + v6) >> 1) & 0x7FFFFFFFFFFFFFF8))
         + 376 * ((*(_DWORD *)(a2 + 32) + v6) & 0xF);
      if (*(unsigned char *)(v7 + 32)) {
        goto LABEL_5;
      }
      if (*(_DWORD *)(v7 + 40) == 1 && *(_DWORD *)(v7 + 208) == 1) {
        return 0;
      }
      uint64_t v10 = *(void *)(v7 + 136);
      if (v10 == -1)
      {
        uint64_t v10 = *(void *)(v7 + 128);
        int v11 = *(_DWORD *)(v7 + 40);
        if (v11 == 4) {
          goto LABEL_16;
        }
      }
      else
      {
        int v11 = *(_DWORD *)(v7 + 40);
        if (v11 == 4) {
          goto LABEL_16;
        }
      }
      if (v11 != 3) {
        break;
      }
      uint64_t v18 = *(void *)(v7 + 304);
      if (v18 == -1)
      {
        if (v10 == *(void *)(v7 + 296)) {
          goto LABEL_64;
        }
      }
      else if (v10 == v18)
      {
        goto LABEL_64;
      }
      for (unint64_t i = *(void **)(*(void *)a1 + 8); i; unint64_t i = (void *)*i)
      {
        uint64_t v28 = i[4];
        if (v10 >= v28)
        {
          if (v28 >= v10) {
            goto LABEL_64;
          }
          ++i;
        }
      }
      __n128 v27 = *(void **)(a1 + 40);
      unint64_t v26 = *(void *)(a1 + 48);
      if ((unint64_t)v27 >= v26)
      {
        __n128 v51 = (void *)*v73;
        uint64_t v52 = ((uint64_t)v27 - *v73) >> 5;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 59) {
          goto LABEL_132;
        }
        uint64_t v54 = v26 - (void)v51;
        if (v54 >> 4 > v53) {
          unint64_t v53 = v54 >> 4;
        }
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v55 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v55 = v53;
        }
        if (v55)
        {
          if (v55 >> 59) {
            goto LABEL_131;
          }
          __n128 v56 = (char *)operator new(32 * v55);
        }
        else
        {
          __n128 v56 = 0;
        }
        long long v63 = &v56[32 * v52];
        *(void *)long long v63 = v6;
        *((_DWORD *)v63 + 2) = 0;
        *((void *)v63 + 2) = v10;
        *((void *)v63 + 3) = -1;
        long long v64 = v63;
        if (v27 != v51)
        {
          do
          {
            long long v65 = *((_OWORD *)v27 - 1);
            *((_OWORD *)v64 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v64 - 1) = v65;
            v64 -= 32;
            v27 -= 4;
          }
          while (v27 != v51);
          __n128 v27 = (void *)*v73;
        }
        __n128 v66 = &v56[32 * v55];
        __n128 v67 = v63 + 32;
        *(void *)(a1 + 32) = v64;
        *(void *)(a1 + 40) = v63 + 32;
        *(void *)(a1 + 48) = v66;
        if (v27) {
          operator delete(v27);
        }
        *(void *)(a1 + 40) = v67;
        uint64_t v14 = *(void *)(v7 + 304);
        if (v14 == -1)
        {
LABEL_19:
          uint64_t v14 = *(void *)(v7 + 296);
          int v15 = *(_DWORD *)(v7 + 208);
          BOOL v16 = v15 == 1 || v15 == 4;
          if (v16) {
            goto LABEL_70;
          }
          goto LABEL_23;
        }
      }
      else
      {
        void *v27 = v6;
        *((_DWORD *)v27 + 2) = 0;
        double v27[2] = v10;
        v27[3] = -1;
        *(void *)(a1 + 40) = v27 + 4;
        uint64_t v14 = *(void *)(v7 + 304);
        if (v14 == -1) {
          goto LABEL_19;
        }
      }
LABEL_65:
      int v15 = *(_DWORD *)(v7 + 208);
      if (v15 == 1 || v15 == 4)
      {
LABEL_70:
        if (v14 == v6) {
          return 0;
        }
        BOOL v40 = *(char **)(a1 + 16);
        unint64_t v39 = *(void *)(a1 + 24);
        if ((unint64_t)v40 >= v39)
        {
          __n128 v41 = (char *)*v74;
          uint64_t v42 = (uint64_t)&v40[-*v74] >> 5;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 59) {
LABEL_130:
          }
            sub_1000A9108();
          uint64_t v44 = v39 - (void)v41;
          if (v44 >> 4 > v43) {
            unint64_t v43 = v44 >> 4;
          }
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v45 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45)
          {
            if (v45 >> 59) {
              goto LABEL_131;
            }
            uint64_t v46 = (char *)operator new(32 * v45);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v47 = &v46[32 * v42];
          *(void *)unint64_t v47 = v6;
          *((_DWORD *)v47 + 2) = 1;
          *((void *)v47 + 2) = v14;
          *((void *)v47 + 3) = -1;
          long long v48 = v47;
          if (v40 != v41)
          {
            do
            {
              long long v49 = *((_OWORD *)v40 - 1);
              *((_OWORD *)v48 - 2) = *((_OWORD *)v40 - 2);
              *((_OWORD *)v48 - 1) = v49;
              v48 -= 32;
              v40 -= 32;
            }
            while (v40 != v41);
            BOOL v40 = (char *)*v74;
          }
          __n128 v50 = v47 + 32;
          *(void *)(a1 + 8) = v48;
          *(void *)(a1 + 16) = v47 + 32;
          *(void *)(a1 + 24) = &v46[32 * v45];
          if (v40) {
            operator delete(v40);
          }
          *(void *)(a1 + 16) = v50;
          uint64_t v8 = (void *)v2[1];
          if (!v8)
          {
            do
            {
LABEL_90:
              int64_t v9 = (void *)v2[2];
              BOOL v16 = *v9 == (void)v2;
              uint64_t v2 = v9;
            }
            while (!v16);
            goto LABEL_3;
          }
        }
        else
        {
          *(void *)BOOL v40 = v6;
          *((_DWORD *)v40 + 2) = 1;
          *((void *)v40 + 2) = v14;
          *((void *)v40 + 3) = -1;
          *(void *)(a1 + 16) = v40 + 32;
          uint64_t v8 = (void *)v2[1];
          if (!v8) {
            goto LABEL_90;
          }
        }
        goto LABEL_6;
      }
LABEL_23:
      if (v15 != 3) {
        goto LABEL_5;
      }
      uint64_t v17 = *(void *)(v7 + 136);
      if (v17 == -1)
      {
        if (v14 == *(void *)(v7 + 128)) {
          goto LABEL_5;
        }
      }
      else if (v14 == v17)
      {
        goto LABEL_5;
      }
      for (int j = *(void **)(*(void *)a1 + 8); j; int j = (void *)*j)
      {
        uint64_t v32 = j[4];
        if (v14 >= v32)
        {
          if (v32 >= v14) {
            goto LABEL_5;
          }
          ++j;
        }
      }
      __n128 v31 = *(void **)(a1 + 40);
      unint64_t v30 = *(void *)(a1 + 48);
      if ((unint64_t)v31 >= v30)
      {
        __n128 v57 = (void *)*v73;
        uint64_t v58 = ((uint64_t)v31 - *v73) >> 5;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 59) {
LABEL_132:
        }
          sub_1000A9108();
        uint64_t v60 = v30 - (void)v57;
        if (v60 >> 4 > v59) {
          unint64_t v59 = v60 >> 4;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v61 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          if (v61 >> 59) {
LABEL_131:
          }
            sub_1000A6A10();
          __n128 v62 = (char *)operator new(32 * v61);
        }
        else
        {
          __n128 v62 = 0;
        }
        __n128 v68 = &v62[32 * v58];
        *(void *)__n128 v68 = v6;
        *((_DWORD *)v68 + 2) = 1;
        *((void *)v68 + 2) = v14;
        *((void *)v68 + 3) = -1;
        __n128 v69 = v68;
        if (v31 != v57)
        {
          do
          {
            long long v70 = *((_OWORD *)v31 - 1);
            *((_OWORD *)v69 - 2) = *((_OWORD *)v31 - 2);
            *((_OWORD *)v69 - 1) = v70;
            v69 -= 32;
            v31 -= 4;
          }
          while (v31 != v57);
          __n128 v31 = (void *)*v73;
        }
        __n128 v71 = v68 + 32;
        *(void *)(a1 + 32) = v69;
        *(void *)(a1 + 40) = v68 + 32;
        *(void *)(a1 + 48) = &v62[32 * v61];
        if (v31)
        {
          operator delete(v31);
          *(void *)(a1 + 40) = v71;
LABEL_5:
          uint64_t v8 = (void *)v2[1];
          if (!v8) {
            goto LABEL_90;
          }
          goto LABEL_6;
        }
        *(void *)(a1 + 40) = v71;
        uint64_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_90;
        }
      }
      else
      {
        *__n128 v31 = v6;
        *((_DWORD *)v31 + 2) = 1;
        v31[2] = v14;
        v31[3] = -1;
        *(void *)(a1 + 40) = v31 + 4;
        uint64_t v8 = (void *)v2[1];
        if (!v8) {
          goto LABEL_90;
        }
      }
      do
      {
LABEL_6:
        int64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
LABEL_3:
      uint64_t v2 = v9;
      if (v9 == (void *)(*(void *)a1 + 8)) {
        return 1;
      }
    }
    if (v11 == 1)
    {
LABEL_16:
      if (v10 == v6) {
        return 0;
      }
      long long v13 = *(char **)(a1 + 16);
      unint64_t v12 = *(void *)(a1 + 24);
      if ((unint64_t)v13 < v12)
      {
        *(void *)long long v13 = v6;
        *((_DWORD *)v13 + 2) = 0;
        *((void *)v13 + 2) = v10;
        *((void *)v13 + 3) = -1;
        *(void *)(a1 + 16) = v13 + 32;
        uint64_t v14 = *(void *)(v7 + 304);
        if (v14 == -1) {
          goto LABEL_19;
        }
        goto LABEL_65;
      }
      __n128 v19 = (char *)*v74;
      uint64_t v20 = (uint64_t)&v13[-*v74] >> 5;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 59) {
        goto LABEL_130;
      }
      uint64_t v22 = v12 - (void)v19;
      if (v22 >> 4 > v21) {
        unint64_t v21 = v22 >> 4;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 59) {
          goto LABEL_131;
        }
        __n128 v24 = (char *)operator new(32 * v23);
      }
      else
      {
        __n128 v24 = 0;
      }
      __n128 v33 = &v24[32 * v20];
      *(void *)__n128 v33 = v6;
      *((_DWORD *)v33 + 2) = 0;
      *((void *)v33 + 2) = v10;
      *((void *)v33 + 3) = -1;
      __n128 v34 = v33;
      if (v13 != v19)
      {
        do
        {
          long long v35 = *((_OWORD *)v13 - 1);
          *((_OWORD *)v34 - 2) = *((_OWORD *)v13 - 2);
          *((_OWORD *)v34 - 1) = v35;
          v34 -= 32;
          v13 -= 32;
        }
        while (v13 != v19);
        long long v13 = (char *)*v74;
      }
      __n128 v36 = &v24[32 * v23];
      __n128 v37 = v33 + 32;
      *(void *)(a1 + 8) = v34;
      *(void *)(a1 + 16) = v33 + 32;
      *(void *)(a1 + 24) = v36;
      if (v13) {
        operator delete(v13);
      }
      *(void *)(a1 + 16) = v37;
    }
LABEL_64:
    uint64_t v14 = *(void *)(v7 + 304);
    if (v14 == -1) {
      goto LABEL_19;
    }
    goto LABEL_65;
  }
  return v3;
}

uint64_t sub_1002EA3D8(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  if (v2 == v3) {
    return 1;
  }
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  if (v4 != v5)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = (v7 - *a2) / 112;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    if (v7 == v6)
    {
      unint64_t v14 = v5 - v4 - 32;
      int v15 = (char *)a1[1];
      if (v14 < 0x20) {
        goto LABEL_54;
      }
      uint64_t v16 = (v14 >> 5) + 1;
      int v15 = &v4[32 * (v16 & 0xFFFFFFFFFFFFFFELL)];
      uint64_t v17 = v4 + 56;
      uint64_t v18 = v16 & 0xFFFFFFFFFFFFFFELL;
      do
      {
        *(v17 - 4) = -1;
        *uint64_t v17 = -1;
        v17 += 8;
        v18 -= 2;
      }
      while (v18);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFELL))
      {
LABEL_54:
        do
        {
          *((void *)v15 + 3) = -1;
          v15 += 32;
        }
        while (v15 != v5);
      }
    }
    else
    {
      int64_t v9 = (_DWORD *)(v6 + 44);
      uint64_t v10 = a1[1];
      do
      {
LABEL_8:
        unint64_t v11 = v8;
        unint64_t v12 = v9;
        while (*(void *)(v12 - 3) != *(void *)v10 || *(v12 - 1) != *(_DWORD *)(v10 + 8) || *v12 != 1)
        {
          v12 += 28;
          if (!--v11)
          {
            *(void *)(v10 + 24) = -1;
            v10 += 32;
            if ((char *)v10 == v5) {
              goto LABEL_23;
            }
            goto LABEL_8;
          }
        }
        *(void *)(v10 + 24) = *(void *)(v12 - 7);
        v10 += 32;
      }
      while ((char *)v10 != v5);
    }
  }
LABEL_23:
  uint64_t v19 = *a2;
  uint64_t v20 = a2[1];
  unint64_t v21 = (v20 - *a2) / 112;
  if (v21 <= 1) {
    unint64_t v21 = 1;
  }
  if (v20 == v19)
  {
    unint64_t v27 = v3 - v2 - 32;
    uint64_t v28 = v2;
    if (v27 < 0x20) {
      goto LABEL_55;
    }
    uint64_t v29 = (v27 >> 5) + 1;
    uint64_t v28 = v2 + 32 * (v29 & 0xFFFFFFFFFFFFFFELL);
    unint64_t v30 = (void *)(v2 + 56);
    uint64_t v31 = v29 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      *(v30 - 4) = -1;
      *unint64_t v30 = -1;
      v30 += 8;
      v31 -= 2;
    }
    while (v31);
    if (v29 != (v29 & 0xFFFFFFFFFFFFFFELL))
    {
LABEL_55:
      do
      {
        *(void *)(v28 + 24) = -1;
        v28 += 32;
      }
      while (v28 != v3);
    }
  }
  else
  {
    uint64_t v22 = (_DWORD *)(v19 + 44);
    uint64_t v23 = v2;
    do
    {
LABEL_28:
      unint64_t v24 = v21;
      uint64_t v25 = v22;
      while (*(void *)(v25 - 3) != *(void *)v23 || *(v25 - 1) != *(_DWORD *)(v23 + 8) || *v25 != 1)
      {
        v25 += 28;
        if (!--v24)
        {
          *(void *)(v23 + 24) = -1;
          v23 += 32;
          if (v23 == v3) {
            goto LABEL_45;
          }
          goto LABEL_28;
        }
      }
      *(void *)(v23 + 24) = *(void *)(v25 - 7);
      v23 += 32;
    }
    while (v23 != v3);
  }
LABEL_45:
  if (v4 == v5) {
    return 1;
  }
  uint64_t v32 = v2;
  while (*(void *)(v32 + 16) != *((void *)v4 + 2) || *(void *)(v32 + 24) != *((void *)v4 + 3))
  {
    v32 += 32;
    if (v32 == v3)
    {
      v4 += 32;
      goto LABEL_45;
    }
  }
  return 0;
}

BOOL sub_1002EA64C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a2 + 136);
  if (v4 == -1 && (uint64_t v4 = *(void *)(a2 + 128), v4 == -1))
  {
    BOOL v7 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8)
                   + (((unint64_t)(*(void *)(*(void *)(a1 + 16) + 32) + v4) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 376 * ((*(_DWORD *)(*(void *)(a1 + 16) + 32) + v4) & 0xF);
    if (*(uint64_t *)(v5 + 24) > 0 || (int v6 = *(_DWORD *)(v5 + 40), v6 == 1))
    {
      BOOL v7 = 1;
      goto LABEL_6;
    }
    int v13 = *(_DWORD *)(v5 + 208);
    BOOL v7 = v13 == 1 || v13 == 4;
    if (v6 == 4)
    {
      BOOL v7 = 1;
      BOOL v15 = 1;
    }
    else
    {
      BOOL v15 = v13 == 4;
    }
    if (v15 || v13 == 1)
    {
LABEL_6:
      BOOL v8 = v4 == a3;
      uint64_t v9 = *(void *)(a2 + 304);
      if (v9 != -1) {
        goto LABEL_33;
      }
      goto LABEL_7;
    }
  }
  BOOL v8 = 0;
  uint64_t v9 = *(void *)(a2 + 304);
  if (v9 != -1) {
    goto LABEL_33;
  }
LABEL_7:
  uint64_t v9 = *(void *)(a2 + 296);
  if (v9 == -1)
  {
    BOOL v10 = 0;
    goto LABEL_9;
  }
LABEL_33:
  uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8)
                  + (((unint64_t)(*(void *)(*(void *)(a1 + 16) + 32) + v9) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 376 * ((*(_DWORD *)(*(void *)(a1 + 16) + 32) + v9) & 0xF);
  if (*(uint64_t *)(v17 + 24) > 0 || (int v18 = *(_DWORD *)(v17 + 40), v18 == 1))
  {
    BOOL v10 = 1;
  }
  else
  {
    int v19 = *(_DWORD *)(v17 + 208);
    BOOL v10 = v19 == 1 || v19 == 4;
    if (v18 == 4)
    {
      BOOL v10 = 1;
      BOOL v21 = 1;
    }
    else
    {
      BOOL v21 = v19 == 1;
    }
    if (!v21 && v19 != 4)
    {
LABEL_9:
      if (!v8) {
        goto LABEL_10;
      }
LABEL_37:
      *a4 = !v8;
      return 1;
    }
  }
  if (v8 != (v9 == a3)) {
    goto LABEL_37;
  }
LABEL_10:
  BOOL result = v7;
  if (v7)
  {
    double v12 = *(double *)(a2 + 112);
    *a4 = 0;
    if (!v10) {
      return result;
    }
  }
  else
  {
    double v12 = 0.0;
    if (!v10) {
      return result;
    }
  }
  BOOL result = 1;
  if (!v7 || *(double *)(a2 + 280) > v12)
  {
    *a4 = 1;
    return 1;
  }
  return result;
}

uint64_t sub_1002EA7DC(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(a2 + 216);
  uint64_t v5 = *(void *)(a2 + 184);
  int v6 = *(_DWORD *)(a2 + 40);
  if (*(void *)(a2 + 48) == v4)
  {
    uint64_t v7 = a3[1];
    if (v5 == -1)
    {
      if (v6 == 1 && (*(_DWORD *)(a2 + 200) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        uint64_t result = 1;
        if (*(_DWORD *)(a2 + 208) != 1) {
          return result;
        }
      }
      else
      {
        uint64_t result = 0;
        if (*(_DWORD *)(a2 + 208) != 1) {
          return result;
        }
      }
      if ((*(_DWORD *)(a2 + 368) & 0xFFFFFFFE) != 2)
      {
        if (*(void *)(a2 + 224) == v7) {
          char v11 = 0;
        }
        else {
          char v11 = result;
        }
        if ((v11 & 1) == 0) {
          goto LABEL_46;
        }
        return 1;
      }
    }
    else
    {
      if (v6 == 1 && (*(_DWORD *)(a2 + 200) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        uint64_t result = 1;
        if (*(_DWORD *)(a2 + 208) != 1) {
          return result;
        }
      }
      else
      {
        uint64_t result = 0;
        if (*(_DWORD *)(a2 + 208) != 1) {
          return result;
        }
      }
      if ((*(_DWORD *)(a2 + 368) & 0xFFFFFFFE) != 2)
      {
        if (result)
        {
          uint64_t v10 = *(void *)(a2 + 224);
          if (v5 == *(void *)(a2 + 352))
          {
            if (v10 != v7) {
              goto LABEL_46;
            }
          }
          else if (v10 == v7)
          {
            goto LABEL_46;
          }
          return 1;
        }
        goto LABEL_46;
      }
    }
  }
  else
  {
    uint64_t v9 = *a3;
    if (v5 == -1)
    {
      if (v6 == 1 && (*(_DWORD *)(a2 + 200) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        uint64_t result = 1;
        if (*(_DWORD *)(a2 + 208) != 1) {
          return result;
        }
      }
      else
      {
        uint64_t result = 0;
        if (*(_DWORD *)(a2 + 208) != 1) {
          return result;
        }
      }
      if ((*(_DWORD *)(a2 + 368) & 0xFFFFFFFE) != 2)
      {
        if (v4 == v9) {
          char v12 = 0;
        }
        else {
          char v12 = result;
        }
        if ((v12 & 1) == 0) {
          goto LABEL_46;
        }
        return 1;
      }
    }
    else
    {
      if (v6 == 1 && (*(_DWORD *)(a2 + 200) & 0xFFFFFFFE) != 2)
      {
        *a4 = 0;
        uint64_t result = 1;
        if (*(_DWORD *)(a2 + 208) != 1) {
          return result;
        }
      }
      else
      {
        uint64_t result = 0;
        if (*(_DWORD *)(a2 + 208) != 1) {
          return result;
        }
      }
      if ((*(_DWORD *)(a2 + 368) & 0xFFFFFFFE) != 2)
      {
        if (result)
        {
          if (v5 == *(void *)(a2 + 352))
          {
            if (v4 != v9) {
              goto LABEL_46;
            }
          }
          else if (v4 == v9)
          {
            goto LABEL_46;
          }
          return 1;
        }
LABEL_46:
        uint64_t result = 1;
        *a4 = 1;
      }
    }
  }
  return result;
}

void sub_1002EA9D4(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    int v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        __n128 v34 = (char *)operator new(8 * v31);
        long long v35 = &v34[8 * v32];
        __n128 v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            __n128 v74 = &v34[8 * v32];
            BOOL v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              BOOL v40 = &v35[v76];
              v7 += v76;
              __n128 v77 = (long long *)(v6 + 3);
              __n128 v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *__n128 v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            BOOL v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)BOOL v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_1000A6A10();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    BOOL v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      long long v91 = operator new(0xFF0uLL);
      sub_100192E00((char **)a1, &v91);
      return;
    }
    long long v91 = operator new(0xFF0uLL);
    sub_100192F90((void **)a1, &v91);
    __n128 v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        __n128 v34 = (char *)operator new(8 * v42);
        long long v35 = &v34[8 * v43];
        __n128 v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            long long v82 = &v34[8 * v43];
            unint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v47 = &v35[v84];
              v7 += v84;
              long long v85 = (long long *)(v41 + 3);
              long long v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *long long v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  unint64_t v26 = operator new(0xFF0uLL);
  unint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_1000A6A10();
      }
      long long v49 = (char *)operator new(8 * v48);
      unint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)unint64_t v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unint64_t v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_1000A6A10();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          unint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            long long v64 = &v60[8 * v61];
            long long v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            long long v64 = &v60[8 * v61];
            long long v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            long long v64 = &v53[v68];
            long long v65 = &v27[v68];
            __n128 v69 = (long long *)(v27 + 16);
            long long v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)long long v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)long long v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          __n128 v57 = &v29[8 * (v56 >> 1)];
          unint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        unint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      __n128 v51 = v53 - 8;
      unint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unint64_t v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  __n128 v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_1002EAF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1002EAF60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002EAF74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002EAF8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1002EAFA4(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = (uint64_t *)a2[1];
    uint64_t v10 = (uint64_t *)a2[2];
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        uint64_t v12 = v6[4];
        if (v8 == v12) {
          break;
        }
        if (v8 < v12) {
          goto LABEL_3;
        }
        if (v12 >= v8) {
          return v11;
        }
LABEL_14:
        int v6 = v11[1];
        if (!v6)
        {
          uint64_t v7 = v11 + 1;
          goto LABEL_17;
        }
      }
      uint64_t v13 = v11[5];
      if (v9 != v13)
      {
        if ((uint64_t)v9 < (uint64_t)v13) {
          goto LABEL_3;
        }
        if ((uint64_t)v13 >= (uint64_t)v9) {
          return v11;
        }
        goto LABEL_14;
      }
      uint64_t v14 = v11[6];
      if ((uint64_t)v10 >= (uint64_t)v14)
      {
        if ((uint64_t)v14 >= (uint64_t)v10) {
          return v11;
        }
        goto LABEL_14;
      }
LABEL_3:
      int v6 = *v11;
      uint64_t v7 = v11;
      if (!*v11) {
        goto LABEL_17;
      }
    }
  }
  uint64_t v11 = a1 + 1;
LABEL_17:
  BOOL v15 = v11;
  int64_t v16 = operator new(0x40uLL);
  uint64_t v17 = *((void *)*a4 + 2);
  v16[2] = **a4;
  *((void *)v16 + 6) = v17;
  *((_WORD *)v16 + 28) = 0;
  *((unsigned char *)v16 + 58) = 0;
  *(void *)int64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = v15;
  *uint64_t v7 = (uint64_t *)v16;
  uint64_t v18 = (uint64_t *)**a1;
  uint64_t v19 = (uint64_t *)v16;
  if (v18)
  {
    *a1 = v18;
    uint64_t v19 = *v7;
  }
  sub_1000619B8(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v16;
}

uint64_t sub_1002EB0E8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)long long __p = 0u;
  unsigned __int8 v20 = 0;
  sub_1002EB5CC(a1, a2, a3, (uint64_t)__p, &v20, 0, 0);
  uint64_t v5 = (void **)__p[1];
  int v6 = (void **)v22;
  unint64_t v7 = v22 - (unint64_t)__p[1];
  if ((void *)v22 != __p[1])
  {
    uint64_t v8 = (char *)__p[1] + 8 * ((unint64_t)v23 / 0x14);
    uint64_t v9 = (_DWORD *)(*v8 + 200 * ((unint64_t)v23 % 0x14));
    while (v9 != (_DWORD *)(*((void *)__p[1] + (*((void *)&v23 + 1) + (void)v23) / 0x14uLL)
                           + 200 * ((*((void *)&v23 + 1) + (void)v23) % 0x14uLL)))
    {
      int v10 = v9[10];
      if (v10 == 1)
      {
        if (v9[30] != 1) {
          goto LABEL_26;
        }
      }
      else if (v10 != 2 || v9[30] != 2)
      {
LABEL_26:
        if (a4)
        {
          uint64_t v19 = &off_100465688;
          v17.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcod"
                                "e.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Interna"
                                "l.sdk/usr/local/include/boost/geometry/algorithms/detail/has_self_intersections.hpp";
          v17.i64[1] = (uint64_t)"BOOL boost::geometry::detail::overlay::has_self_intersections(const Geometry &, const St"
                                "rategy &, const RobustPolicy &, BOOL) [Geometry = boost::geometry::model::polygon<boost:"
                                ":geometry::model::d2::point_xy<double>>, Strategy = boost::geometry::strategies::relate:"
                                ":cartesian<>, RobustPolicy = boost::geometry::detail::robust_policy<boost::geometry::mod"
                                "el::d2::point_xy<double>, boost::geometry::model::point<long long, 2, boost::geometry::c"
                                "s::cartesian>, double>]";
          uint64_t v18 = 129;
          sub_1002EB560((uint64_t)&v19, &v17);
        }
        uint64_t v12 = 1;
        *((void *)&v23 + 1) = 0;
        if (v7 >= 0x11) {
          goto LABEL_13;
        }
        goto LABEL_14;
      }
      if ((v9[4] - 3) >= 2) {
        goto LABEL_26;
      }
      v9 += 50;
      if ((_DWORD *)((char *)v9 - *v8) == (_DWORD *)4000)
      {
        uint64_t v11 = (_DWORD *)v8[1];
        ++v8;
        uint64_t v9 = v11;
      }
    }
  }
  uint64_t v12 = 0;
  *((void *)&v23 + 1) = 0;
  if (v7 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v5);
      int v6 = (void **)v22;
      uint64_t v5 = (void **)((char *)__p[1] + 8);
      __p[1] = v5;
      unint64_t v7 = v22 - (void)v5;
    }
    while ((void)v22 - (void)v5 > 0x10uLL);
  }
LABEL_14:
  unint64_t v13 = v7 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 10;
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 20;
LABEL_18:
    *(void *)&long long v23 = v14;
  }
  if (v5 != v6)
  {
    do
    {
      BOOL v15 = *v5++;
      operator delete(v15);
    }
    while (v5 != v6);
    if ((void *)v22 != __p[1]) {
      *(void *)&long long v22 = v22 + (((unint64_t)__p[1] - v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v12;
}

void sub_1002EB2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, char a15)
{
}

void sub_1002EB310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1002F17A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EB324(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)long long __p = 0u;
  unsigned __int8 v20 = 0;
  sub_1002F1868(a1, a2, a3, (uint64_t)__p, &v20, 0, 0);
  uint64_t v5 = (void **)__p[1];
  int v6 = (void **)v22;
  unint64_t v7 = v22 - (unint64_t)__p[1];
  if ((void *)v22 != __p[1])
  {
    uint64_t v8 = (char *)__p[1] + 8 * ((unint64_t)v23 / 0x14);
    uint64_t v9 = (_DWORD *)(*v8 + 200 * ((unint64_t)v23 % 0x14));
    while (v9 != (_DWORD *)(*((void *)__p[1] + (*((void *)&v23 + 1) + (void)v23) / 0x14uLL)
                           + 200 * ((*((void *)&v23 + 1) + (void)v23) % 0x14uLL)))
    {
      int v10 = v9[10];
      if (v10 == 1)
      {
        if (v9[30] != 1) {
          goto LABEL_26;
        }
      }
      else if (v10 != 2 || v9[30] != 2)
      {
LABEL_26:
        if (a4)
        {
          uint64_t v19 = &off_100465688;
          v17.i64[0] = (uint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcod"
                                "e.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Interna"
                                "l.sdk/usr/local/include/boost/geometry/algorithms/detail/has_self_intersections.hpp";
          v17.i64[1] = (uint64_t)"BOOL boost::geometry::detail::overlay::has_self_intersections(const Geometry &, const St"
                                "rategy &, const RobustPolicy &, BOOL) [Geometry = boost::geometry::model::multi_polygon<"
                                "boost::geometry::model::polygon<boost::geometry::model::d2::point_xy<double>>>, Strategy"
                                " = boost::geometry::strategies::relate::cartesian<>, RobustPolicy = boost::geometry::det"
                                "ail::robust_policy<boost::geometry::model::d2::point_xy<double>, boost::geometry::model:"
                                ":point<long long, 2, boost::geometry::cs::cartesian>, double>]";
          uint64_t v18 = 129;
          sub_1002EB560((uint64_t)&v19, &v17);
        }
        uint64_t v12 = 1;
        *((void *)&v23 + 1) = 0;
        if (v7 >= 0x11) {
          goto LABEL_13;
        }
        goto LABEL_14;
      }
      if ((v9[4] - 3) >= 2) {
        goto LABEL_26;
      }
      v9 += 50;
      if ((_DWORD *)((char *)v9 - *v8) == (_DWORD *)4000)
      {
        uint64_t v11 = (_DWORD *)v8[1];
        ++v8;
        uint64_t v9 = v11;
      }
    }
  }
  uint64_t v12 = 0;
  *((void *)&v23 + 1) = 0;
  if (v7 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v5);
      int v6 = (void **)v22;
      uint64_t v5 = (void **)((char *)__p[1] + 8);
      __p[1] = v5;
      unint64_t v7 = v22 - (void)v5;
    }
    while ((void)v22 - (void)v5 > 0x10uLL);
  }
LABEL_14:
  unint64_t v13 = v7 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 10;
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 20;
LABEL_18:
    *(void *)&long long v23 = v14;
  }
  if (v5 != v6)
  {
    do
    {
      BOOL v15 = *v5++;
      operator delete(v15);
    }
    while (v5 != v6);
    if ((void *)v22 != __p[1]) {
      *(void *)&long long v22 = v22 + (((unint64_t)__p[1] - v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v12;
}

void sub_1002EB530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, uint64_t a14, char a15)
{
}

void sub_1002EB54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1002F17A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002EB560(uint64_t a1, int8x16_t *a2)
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_1002F102C((uint64_t)exception, a1, a2);
}

void sub_1002EB5B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1002EB5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, int a6, char a7)
{
  long long __p = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v14 = *(double **)a1;
  BOOL v15 = *(double **)(a1 + 8);
  if ((unint64_t)v15 - *(void *)a1 >= 0x20)
  {
    *(void *)&long long v25 = 0;
    *((void *)&v25 + 1) = -1;
    uint64_t v26 = -1;
    sub_1002C8640(&__p, v14, v15, a3, a2, &v25, 0xAuLL);
  }
  int8x16_t v17 = *(double ***)(a1 + 24);
  int64_t v16 = *(double ***)(a1 + 32);
  if (v17 != v16)
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = *v17;
      unsigned __int8 v20 = v17[1];
      if ((unint64_t)((char *)v20 - (char *)*v17) >= 0x20)
      {
        long long v25 = xmmword_1003E6BE0;
        uint64_t v26 = v18;
        sub_1002C8640(&__p, v19, v20, a3, a2, &v25, 0xAuLL);
        int64_t v16 = *(double ***)(a1 + 32);
      }
      ++v18;
      v17 += 3;
    }
    while (v17 != v16);
  }
  *(void *)&long long v25 = a1;
  *((void *)&v25 + 1) = a2;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  int v29 = a6;
  char v30 = a7;
  uint64_t v23 = a2;
  uint64_t v24 = a2;
  sub_1002EB744((uint64_t *)&__p, (uint64_t)&v25, (uint64_t)&v24, (uint64_t)&v23, 0x10uLL);
  int v21 = *a5;
  if (__p)
  {
    unint64_t v32 = __p;
    operator delete(__p);
  }
  return v21 == 0;
}

void sub_1002EB720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002EB744(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = *a1;
  unint64_t v7 = (unsigned char *)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v7[-*a1] >> 3) <= a5)
  {
    if ((unsigned char *)v8 != v7)
    {
      unint64_t v13 = (unsigned char *)(v8 + 216);
      do
      {
        uint64_t v14 = (unsigned char *)(v8 + 120);
        if ((unsigned char *)(v8 + 120) != v7)
        {
          for (unint64_t i = v13; i - 96 != v7; i += 120)
          {
            if (*(void *)(v8 + 48) >= *((void *)i - 8) && *(void *)(v8 + 32) <= *((void *)i - 6))
            {
              BOOL v16 = *(void *)(v8 + 56) >= *((void *)i - 7) && *(void *)(v8 + 40) <= *((void *)i - 5);
              BOOL v17 = v16 && *(unsigned char *)(v8 + 96) == 0;
              if (v17 && *i == 0)
              {
                if (!sub_1002EE4F4(*(_DWORD *)(a2 + 40), *(double ***)a2, (int *)v8, *(_DWORD *)(a2 + 40), *(double ***)a2, (int *)i - 24, 0, *(unsigned __int8 *)(a2 + 44), *(void *)(a2 + 8), *(void *)(a2 + 16), *(void **)(a2 + 24), *(unsigned char **)(a2 + 32)))return 0; {
                unint64_t v7 = (unsigned char *)a1[1];
                }
              }
            }
          }
        }
        v13 += 120;
        v8 += 120;
      }
      while (v14 != v7);
    }
    return 1;
  }
  long long __p = 0;
  long long v22 = 0;
  uint64_t v23 = 0;
  v20[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v20[1] = vdupq_n_s64(0x8000000000000000);
  sub_1002C90BC(a1, (uint64_t *)v20, (char **)&__p);
  uint64_t v12 = sub_1002EB910(v20, &__p, 0, a5, a2, a3, a4, (uint64_t)&v24);
  if (__p)
  {
    long long v22 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1002EB8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002EB910(void *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *a1;
  uint64_t v15 = a1[2];
  if ((uint64_t)*a1 >= 0) {
    uint64_t v16 = *a1;
  }
  else {
    uint64_t v16 = v14 + 1;
  }
  uint64_t v17 = v16 >> 1;
  if (v15 >= 0) {
    uint64_t v18 = a1[2];
  }
  else {
    uint64_t v18 = v15 + 1;
  }
  uint64_t v19 = v18 >> 1;
  long long v20 = *((_OWORD *)a1 + 1);
  int v21 = v15 - 2 * v19 + v14 - 2 * v17;
  long long v73 = *(_OWORD *)a1;
  uint64_t v75 = *((void *)&v20 + 1);
  *((void *)&v72[0] + 1) = *((void *)&v73 + 1);
  v72[1] = v20;
  uint64_t v74 = v19 + v17 + ((v21 + ((v21 & 0x80) >> 7)) << 24 >> 25);
  uint64_t v71 = 0;
  *(void *)&v72[0] = v74;
  __n128 v69 = 0;
  long long v70 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  long long __p = 0;
  long long v64 = 0;
  uint64_t v65 = 0;
  sub_1002CA168(&v73, v72, a2, &v69, (char **)&v66, (char **)&__p);
  uint64_t v23 = (char *)__p;
  long long v22 = v64;
  if (__p == v64) {
    goto LABEL_32;
  }
  uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v25 = 0x8000000000000000;
  int64x2_t v61 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v62 = vdupq_n_s64(0x8000000000000000);
  int64_t v26 = 0x8000000000000000;
  uint64_t v27 = (char *)__p;
  uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    int v29 = *(void **)v27;
    int64_t v30 = *(void *)(*(void *)v27 + 32);
    if (v30 < v28)
    {
      v61.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v28 = v30;
      if (v30 <= v26)
      {
LABEL_12:
        uint64_t v31 = v29[5];
        if (v31 >= v24) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
    }
    else if (v30 <= v26)
    {
      goto LABEL_12;
    }
    v62.i64[0] = v30;
    int64_t v26 = v30;
    uint64_t v31 = v29[5];
    if (v31 >= v24)
    {
LABEL_13:
      if (v31 <= v25) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
LABEL_21:
    v61.i64[1] = v31;
    uint64_t v24 = v31;
    if (v31 <= v25)
    {
LABEL_14:
      uint64_t v32 = v29[6];
      if (v32 >= v28) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
LABEL_22:
    v62.i64[1] = v31;
    int64_t v25 = v31;
    uint64_t v32 = v29[6];
    if (v32 >= v28)
    {
LABEL_15:
      if (v32 <= v26) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
LABEL_23:
    v61.i64[0] = v32;
    uint64_t v28 = v32;
    if (v32 <= v26)
    {
LABEL_16:
      uint64_t v33 = v29[7];
      if (v33 < v24) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
LABEL_24:
    v62.i64[0] = v32;
    int64_t v26 = v32;
    uint64_t v33 = v29[7];
    if (v33 < v24)
    {
LABEL_25:
      v61.i64[1] = v33;
      uint64_t v24 = v33;
      if (v33 <= v25) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
LABEL_17:
    if (v33 <= v25) {
      goto LABEL_9;
    }
LABEL_26:
    v62.i64[1] = v33;
    int64_t v25 = v33;
LABEL_9:
    v27 += 8;
  }
  while (v27 != v64);
  if (a3 <= 0x63 && (v64 - (unsigned char *)__p) >> 3 >= a4)
  {
    if (sub_1002EC07C((long long *)v61.i8, &__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_30;
    }
    goto LABEL_98;
  }
  do
  {
    __n128 v36 = v23 + 8;
    if (v23 + 8 != v22)
    {
      for (unint64_t i = v23 + 8; i != v22; i += 8)
      {
        uint64_t v38 = *(void *)v23;
        uint64_t v39 = *(void *)i;
        if (*(void *)(*(void *)v23 + 48) >= *(void *)(*(void *)i + 32)
          && *(void *)(v38 + 32) <= *(void *)(v39 + 48))
        {
          BOOL v40 = *(void *)(v38 + 56) >= *(void *)(v39 + 40) && *(void *)(v38 + 40) <= *(void *)(v39 + 56);
          BOOL v41 = v40 && *(unsigned char *)(v38 + 96) == 0;
          if (v41 && *(unsigned char *)(v39 + 96) == 0)
          {
            if (!sub_1002EE4F4(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v38, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v39, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24), *(unsigned char **)(a5 + 32)))goto LABEL_98; {
            long long v22 = v64;
            }
          }
        }
      }
    }
    v23 += 8;
  }
  while (v36 != v22);
LABEL_30:
  if (sub_1002EBF08((long long *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v69, a3, a4, a5, a6, a7, a8)
    && (sub_1002EBF08((long long *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v66, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    long long v35 = (char *)v69;
    __n128 v34 = v70;
    if (a3 > 0x63 || (v70 - (unsigned char *)v69) >> 3 < a4)
    {
LABEL_73:
      while (v35 != v34)
      {
        unint64_t v43 = v35;
        v35 += 8;
        if (v35 != v34)
        {
          uint64_t v44 = v35;
          while (1)
          {
            uint64_t v45 = *(void *)v43;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v43 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002EE4F4(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v45, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v46, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24), *(unsigned char **)(a5 + 32)))goto LABEL_98; {
                __n128 v34 = v70;
                }
              }
            }
            v44 += 8;
            if (v44 == v34) {
              goto LABEL_73;
            }
          }
        }
      }
    }
    else if (!sub_1002EC07C(&v73, &v69, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    __n128 v51 = (char *)v66;
    uint64_t v50 = v67;
    if (a3 > 0x63 || (v67 - (unsigned char *)v66) >> 3 < a4)
    {
      if (v66 == v67)
      {
        uint64_t v52 = 1;
      }
      else
      {
        do
        {
          unint64_t v53 = v51;
          v51 += 8;
          if (v51 != v50)
          {
            for (int j = v51; j != v50; j += 8)
            {
              uint64_t v55 = *(void *)v53;
              uint64_t v56 = *(void *)j;
              if (*(void *)(*(void *)v53 + 48) >= *(void *)(*(void *)j + 32)
                && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
              {
                BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
                BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
                if (v58 && *(unsigned char *)(v56 + 96) == 0)
                {
                  if (!sub_1002EE4F4(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v55, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v56, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24), *(unsigned char **)(a5 + 32)))goto LABEL_98; {
                  uint64_t v50 = v67;
                  }
                }
              }
            }
          }
          uint64_t v52 = 1;
        }
        while (v51 != v50);
      }
    }
    else
    {
      uint64_t v52 = sub_1002EC07C(v72, &v66, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    uint64_t v52 = 0;
  }
  if (__p)
  {
    long long v64 = (char *)__p;
    operator delete(__p);
  }
  if (v66)
  {
    uint64_t v67 = (char *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    long long v70 = (char *)v69;
    operator delete(v69);
  }
  return v52;
}

void sub_1002EBEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    int64_t v26 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v27 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v26 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  uint64_t v27 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002EBF08(long long *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_1002ED670(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 != v12)
  {
    uint64_t v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        uint64_t v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            uint64_t v17 = *v13;
            uint64_t v18 = *v16;
            if (*(void *)(*v13 + 48) >= *(void *)(*v16 + 32) && *(void *)(v17 + 32) <= *(void *)(v18 + 48))
            {
              BOOL v19 = *(void *)(v17 + 56) >= *(void *)(v18 + 40) && *(void *)(v17 + 40) <= *(void *)(v18 + 56);
              BOOL v20 = v19 && *(unsigned char *)(v17 + 96) == 0;
              if (v20 && *(unsigned char *)(v18 + 96) == 0)
              {
                uint64_t result = sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v17, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v18, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32));
                if (!result) {
                  return result;
                }
                uint64_t v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          uint64_t v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_1002EC07C(long long *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *((void *)a1 + 2);
  uint64_t v14 = *((void *)a1 + 3);
  uint64_t v16 = *((void *)a1 + 1);
  if (v16 >= 0) {
    uint64_t v17 = *((void *)a1 + 1);
  }
  else {
    uint64_t v17 = v16 + 1;
  }
  uint64_t v18 = v17 >> 1;
  if (v14 >= 0) {
    uint64_t v19 = *((void *)a1 + 3);
  }
  else {
    uint64_t v19 = v14 + 1;
  }
  long long v20 = a1[1];
  long long v73 = *a1;
  v71[0] = v73;
  long long v72 = v20;
  uint64_t v74 = v15;
  uint64_t v75 = (v19 >> 1)
      + v18
      + ((int)((v14
              - 2 * (v19 >> 1)
              + v16
              - 2 * v18
              + (((v14 - 2 * (v19 >> 1) + v16 - 2 * v18) & 0x80) >> 7)) << 24) >> 25);
  v71[1] = v75;
  uint64_t v68 = 0;
  __n128 v69 = 0;
  uint64_t v70 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  long long __p = 0;
  unint64_t v63 = 0;
  uint64_t v64 = 0;
  sub_1002CA168(&v73, v71, a2, &v68, (char **)&v65, (char **)&__p);
  long long v22 = (char *)__p;
  int v21 = v63;
  if (__p == v63) {
    goto LABEL_32;
  }
  uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v24 = 0x8000000000000000;
  int64x2_t v60 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v61 = vdupq_n_s64(0x8000000000000000);
  int64_t v25 = 0x8000000000000000;
  int64_t v26 = (char *)__p;
  uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v28 = *(void **)v26;
    int64_t v29 = *(void *)(*(void *)v26 + 32);
    if (v29 < v27)
    {
      v60.i64[0] = *(void *)(*(void *)v26 + 32);
      uint64_t v27 = v29;
      if (v29 <= v25)
      {
LABEL_12:
        uint64_t v30 = v28[5];
        if (v30 >= v23) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
    }
    else if (v29 <= v25)
    {
      goto LABEL_12;
    }
    v61.i64[0] = v29;
    int64_t v25 = v29;
    uint64_t v30 = v28[5];
    if (v30 >= v23)
    {
LABEL_13:
      if (v30 <= v24) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
LABEL_21:
    v60.i64[1] = v30;
    uint64_t v23 = v30;
    if (v30 <= v24)
    {
LABEL_14:
      uint64_t v31 = v28[6];
      if (v31 >= v27) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
LABEL_22:
    v61.i64[1] = v30;
    int64_t v24 = v30;
    uint64_t v31 = v28[6];
    if (v31 >= v27)
    {
LABEL_15:
      if (v31 <= v25) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
LABEL_23:
    v60.i64[0] = v31;
    uint64_t v27 = v31;
    if (v31 <= v25)
    {
LABEL_16:
      uint64_t v32 = v28[7];
      if (v32 < v23) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
LABEL_24:
    v61.i64[0] = v31;
    int64_t v25 = v31;
    uint64_t v32 = v28[7];
    if (v32 < v23)
    {
LABEL_25:
      v60.i64[1] = v32;
      uint64_t v23 = v32;
      if (v32 <= v24) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
LABEL_17:
    if (v32 <= v24) {
      goto LABEL_9;
    }
LABEL_26:
    v61.i64[1] = v32;
    int64_t v24 = v32;
LABEL_9:
    v26 += 8;
  }
  while (v26 != v63);
  if (a3 <= 0x63 && (v63 - (unsigned char *)__p) >> 3 >= a4)
  {
    if (sub_1002EB910(&v60, &__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_30;
    }
    goto LABEL_98;
  }
  do
  {
    long long v35 = v22 + 8;
    if (v22 + 8 != v21)
    {
      for (unint64_t i = v22 + 8; i != v21; i += 8)
      {
        uint64_t v37 = *(void *)v22;
        uint64_t v38 = *(void *)i;
        if (*(void *)(*(void *)v22 + 48) >= *(void *)(*(void *)i + 32)
          && *(void *)(v37 + 32) <= *(void *)(v38 + 48))
        {
          BOOL v39 = *(void *)(v37 + 56) >= *(void *)(v38 + 40) && *(void *)(v37 + 40) <= *(void *)(v38 + 56);
          BOOL v40 = v39 && *(unsigned char *)(v37 + 96) == 0;
          if (v40 && *(unsigned char *)(v38 + 96) == 0)
          {
            if (!sub_1002EE4F4(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v37, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v38, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24), *(unsigned char **)(a5 + 32)))goto LABEL_98; {
            int v21 = v63;
            }
          }
        }
      }
    }
    v22 += 8;
  }
  while (v35 != v21);
LABEL_30:
  if (sub_1002EC678(v60.i64, (uint64_t **)&__p, (uint64_t **)&v68, a3, a4, a5, a6, a7, a8)
    && (sub_1002EC678(v60.i64, (uint64_t **)&__p, (uint64_t **)&v65, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    __n128 v34 = (char *)v68;
    uint64_t v33 = v69;
    if (a3 > 0x63 || (v69 - (unsigned char *)v68) >> 3 < a4)
    {
LABEL_73:
      while (v34 != v33)
      {
        unint64_t v42 = v34;
        v34 += 8;
        if (v34 != v33)
        {
          unint64_t v43 = v34;
          while (1)
          {
            uint64_t v44 = *(void *)v42;
            uint64_t v45 = *(void *)v43;
            if (*(void *)(*(void *)v42 + 48) >= *(void *)(*(void *)v43 + 32)
              && *(void *)(v44 + 32) <= *(void *)(v45 + 48))
            {
              BOOL v46 = *(void *)(v44 + 56) >= *(void *)(v45 + 40) && *(void *)(v44 + 40) <= *(void *)(v45 + 56);
              BOOL v47 = v46 && *(unsigned char *)(v44 + 96) == 0;
              if (v47 && *(unsigned char *)(v45 + 96) == 0)
              {
                if (!sub_1002EE4F4(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v44, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v45, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24), *(unsigned char **)(a5 + 32)))goto LABEL_98; {
                uint64_t v33 = v69;
                }
              }
            }
            v43 += 8;
            if (v43 == v33) {
              goto LABEL_73;
            }
          }
        }
      }
    }
    else if (!sub_1002EB910(&v73, &v68, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    uint64_t v50 = (char *)v65;
    long long v49 = v66;
    if (a3 > 0x63 || (v66 - (unsigned char *)v65) >> 3 < a4)
    {
      if (v65 == v66)
      {
        uint64_t v51 = 1;
      }
      else
      {
        do
        {
          uint64_t v52 = v50;
          v50 += 8;
          if (v50 != v49)
          {
            for (int j = v50; j != v49; j += 8)
            {
              uint64_t v54 = *(void *)v52;
              uint64_t v55 = *(void *)j;
              if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)j + 32)
                && *(void *)(v54 + 32) <= *(void *)(v55 + 48))
              {
                BOOL v56 = *(void *)(v54 + 56) >= *(void *)(v55 + 40) && *(void *)(v54 + 40) <= *(void *)(v55 + 56);
                BOOL v57 = v56 && *(unsigned char *)(v54 + 96) == 0;
                if (v57 && *(unsigned char *)(v55 + 96) == 0)
                {
                  if (!sub_1002EE4F4(*(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v54, *(_DWORD *)(a5 + 40), *(double ***)a5, (int *)v55, 0, *(unsigned __int8 *)(a5 + 44), *(void *)(a5 + 8), *(void *)(a5 + 16), *(void **)(a5 + 24), *(unsigned char **)(a5 + 32)))goto LABEL_98; {
                  long long v49 = v66;
                  }
                }
              }
            }
          }
          uint64_t v51 = 1;
        }
        while (v50 != v49);
      }
    }
    else
    {
      uint64_t v51 = sub_1002EB910(v71, &v65, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    uint64_t v51 = 0;
  }
  if (__p)
  {
    unint64_t v63 = (char *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    uint64_t v66 = (char *)v65;
    operator delete(v65);
  }
  if (v68)
  {
    __n128 v69 = (char *)v68;
    operator delete(v68);
  }
  return v51;
}

void sub_1002EC614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    int64_t v26 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v27 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v26 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  uint64_t v27 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002EC678(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_1002EC7EC(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 != v12)
  {
    uint64_t v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        uint64_t v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            uint64_t v17 = *v13;
            uint64_t v18 = *v16;
            if (*(void *)(*v13 + 48) >= *(void *)(*v16 + 32) && *(void *)(v17 + 32) <= *(void *)(v18 + 48))
            {
              BOOL v19 = *(void *)(v17 + 56) >= *(void *)(v18 + 40) && *(void *)(v17 + 40) <= *(void *)(v18 + 56);
              BOOL v20 = v19 && *(unsigned char *)(v17 + 96) == 0;
              if (v20 && *(unsigned char *)(v18 + 96) == 0)
              {
                uint64_t result = sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v17, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v18, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32));
                if (!result) {
                  return result;
                }
                uint64_t v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          uint64_t v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_1002EC7EC(uint64_t *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = *a1;
  uint64_t v18 = a1[2];
  if (*a1 >= 0) {
    uint64_t v19 = *a1;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  uint64_t v20 = v19 >> 1;
  long long v22 = *(_OWORD *)a1;
  long long v21 = *((_OWORD *)a1 + 1);
  long long v146 = *(_OWORD *)a1;
  long long v147 = v21;
  if (v18 >= 0) {
    uint64_t v23 = v18;
  }
  else {
    uint64_t v23 = v18 + 1;
  }
  uint64_t v24 = v23 >> 1;
  v144[1] = *((void *)&v22 + 1);
  long long v145 = v21;
  int v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(void *)&long long v147 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[0] = v147;
  __n128 v141 = 0;
  __n128 v142 = 0;
  uint64_t v143 = 0;
  __n128 v138 = 0;
  __n128 v139 = 0;
  uint64_t v140 = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  long long v129 = 0;
  long long v130 = 0;
  uint64_t v131 = 0;
  long long __p = 0;
  long long v127 = 0;
  uint64_t v128 = 0;
  sub_1002CA168(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_1002CA168(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  uint64_t v27 = (char *)v135;
  int64_t v26 = v136;
  if (v135 == v136) {
    goto LABEL_147;
  }
  int64_t v29 = (char *)__p;
  uint64_t v28 = v127;
  if (a5 > (v136 - (unsigned char *)v135) >> 3 || a4 > 0x63 || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        uint64_t v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            uint64_t v45 = *(void *)v27;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v27 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v45, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v46, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
                uint64_t v28 = v127;
                }
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          int64_t v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v32 = 0x8000000000000000;
  uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    __n128 v34 = *(void **)v27;
    int64_t v35 = *(void *)(*(void *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        uint64_t v36 = v34[5];
        if (v36 < v30) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v33 = v35;
      if (v35 <= v32) {
        goto LABEL_15;
      }
    }
    v125.i64[0] = v35;
    int64_t v32 = v35;
    uint64_t v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      uint64_t v30 = v36;
      if (v36 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      uint64_t v37 = v34[6];
      if (v37 < v33) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    int64_t v31 = v36;
    uint64_t v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      uint64_t v33 = v37;
      if (v37 <= v32) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      uint64_t v38 = v34[7];
      if (v38 >= v30) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    int64_t v32 = v37;
    uint64_t v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    uint64_t v30 = v38;
    if (v38 <= v31) {
      goto LABEL_12;
    }
LABEL_29:
    v125.i64[1] = v38;
    int64_t v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    BOOL v39 = *(void **)v29;
    int64_t v40 = *(void *)(*(void *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        uint64_t v41 = v39[5];
        if (v41 < v30) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v29 + 32);
      uint64_t v33 = v40;
      if (v40 <= v32) {
        goto LABEL_34;
      }
    }
    v125.i64[0] = v40;
    int64_t v32 = v40;
    uint64_t v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      uint64_t v30 = v41;
      if (v41 <= v31) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      uint64_t v42 = v39[6];
      if (v42 < v33) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    int64_t v31 = v41;
    uint64_t v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      uint64_t v33 = v42;
      if (v42 <= v32) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      uint64_t v43 = v39[7];
      if (v43 >= v30) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    int64_t v32 = v42;
    uint64_t v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    uint64_t v30 = v43;
    if (v43 <= v31) {
      goto LABEL_30;
    }
LABEL_48:
    v125.i64[1] = v43;
    int64_t v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002ED670(&v124, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
    goto LABEL_278;
  }
LABEL_72:
  uint64_t v50 = v133;
  if (a5 > (v133 - (unsigned char *)v132) >> 3)
  {
    uint64_t v52 = (char *)v135;
    uint64_t v51 = v136;
    goto LABEL_75;
  }
  uint64_t v52 = (char *)v135;
  uint64_t v51 = v136;
  if (a5 <= (v130 - (unsigned char *)v129) >> 3 && a4 <= 0x63 && (v136 - (unsigned char *)v135) >> 3 >= a5)
  {
    int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v67 = 0x8000000000000000;
      int64_t v68 = 0x8000000000000000;
      uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v70 = *(void **)v52;
        int64_t v71 = *(void *)(*(void *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            uint64_t v72 = v70[5];
            if (v72 < v66) {
              goto LABEL_129;
            }
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(void *)(*(void *)v52 + 32);
          uint64_t v69 = v71;
          if (v71 <= v68) {
            goto LABEL_128;
          }
        }
        v125.i64[0] = v71;
        int64_t v68 = v71;
        uint64_t v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          uint64_t v66 = v72;
          if (v72 <= v67) {
            goto LABEL_130;
          }
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          uint64_t v73 = v70[6];
          if (v73 < v69) {
            goto LABEL_131;
          }
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        int64_t v67 = v72;
        uint64_t v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          uint64_t v69 = v73;
          if (v73 <= v68) {
            goto LABEL_132;
          }
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          uint64_t v74 = v70[7];
          if (v74 < v66) {
            goto LABEL_133;
          }
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        int64_t v68 = v73;
        uint64_t v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          uint64_t v66 = v74;
          if (v74 > v67) {
            goto LABEL_142;
          }
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          int64_t v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002ED670(&v124, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002ED670(&v124, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    uint64_t v115 = 0;
    long long v116 = (char *)__p;
    if (!__p) {
      goto LABEL_280;
    }
LABEL_279:
    long long v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51) {
      goto LABEL_147;
    }
  }
  else
  {
    do
    {
      uint64_t v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          uint64_t v55 = *(void *)v52;
          uint64_t v56 = *(void *)v54;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v54 + 32)
            && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
          {
            BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
            BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
            if (v58 && *(unsigned char *)(v56 + 96) == 0)
            {
              if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v55, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v56, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
              uint64_t v50 = v133;
              }
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    uint64_t v52 = (char *)v135;
    if (v135 == v51) {
      goto LABEL_147;
    }
  }
  unint64_t v53 = v130;
  if (v129 != v130)
  {
    do
    {
      int64x2_t v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          uint64_t v61 = *(void *)v52;
          uint64_t v62 = *(void *)v60;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v60 + 32)
            && *(void *)(v61 + 32) <= *(void *)(v62 + 48))
          {
            BOOL v63 = *(void *)(v61 + 56) >= *(void *)(v62 + 40) && *(void *)(v61 + 40) <= *(void *)(v62 + 56);
            BOOL v64 = v63 && *(unsigned char *)(v61 + 96) == 0;
            if (v64 && *(unsigned char *)(v62 + 96) == 0)
            {
              if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v61, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v62, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
              unint64_t v53 = v130;
              }
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  uint64_t v76 = (char *)__p;
  uint64_t v75 = v127;
  if (__p == v127) {
    goto LABEL_198;
  }
  __n128 v78 = (char *)v141;
  __n128 v77 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3
    || a5 > (v139 - (unsigned char *)v138) >> 3
    || a4 > 0x63
    || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      long long v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          uint64_t v89 = *(void *)v78;
          uint64_t v90 = *(void *)v88;
          if (*(void *)(*(void *)v78 + 48) >= *(void *)(*(void *)v88 + 32)
            && *(void *)(v89 + 32) <= *(void *)(v90 + 48))
          {
            BOOL v91 = *(void *)(v89 + 56) >= *(void *)(v90 + 40) && *(void *)(v89 + 40) <= *(void *)(v90 + 56);
            BOOL v92 = v91 && *(unsigned char *)(v89 + 96) == 0;
            if (v92 && *(unsigned char *)(v90 + 96) == 0)
            {
              if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v89, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v90, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
              uint64_t v75 = v127;
              }
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        __n128 v77 = v142;
      }
      v78 += 8;
    }
    long long v95 = (char *)v138;
    long long v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        long long v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            uint64_t v100 = *(void *)v95;
            uint64_t v101 = *(void *)v99;
            if (*(void *)(*(void *)v95 + 48) >= *(void *)(*(void *)v99 + 32)
              && *(void *)(v100 + 32) <= *(void *)(v101 + 48))
            {
              BOOL v102 = *(void *)(v100 + 56) >= *(void *)(v101 + 40)
                  && *(void *)(v100 + 40) <= *(void *)(v101 + 56);
              BOOL v103 = v102 && *(unsigned char *)(v100 + 96) == 0;
              if (v103 && *(unsigned char *)(v101 + 96) == 0)
              {
                if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v100, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v101, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
                uint64_t v75 = v127;
                }
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          long long v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  uint64_t v79 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v80 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v81 = 0x8000000000000000;
  uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    uint64_t v83 = *(void **)v76;
    int64_t v84 = *(void *)(*(void *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81) {
        goto LABEL_164;
      }
LABEL_156:
      uint64_t v85 = v83[5];
      if (v85 < v79) {
        goto LABEL_157;
      }
LABEL_165:
      if (v85 > v80) {
        goto LABEL_166;
      }
LABEL_158:
      uint64_t v86 = v83[6];
      if (v86 < v82) {
        goto LABEL_159;
      }
LABEL_167:
      if (v86 > v81) {
        goto LABEL_168;
      }
LABEL_160:
      int64_t v87 = v83[7];
      if (v87 < v79) {
        goto LABEL_161;
      }
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        int64_t v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v76 + 32);
      uint64_t v82 = v84;
      if (v84 <= v81) {
        goto LABEL_156;
      }
LABEL_164:
      v125.i64[0] = v84;
      int64_t v81 = v84;
      uint64_t v85 = v83[5];
      if (v85 >= v79) {
        goto LABEL_165;
      }
LABEL_157:
      v124.i64[1] = v85;
      uint64_t v79 = v85;
      if (v85 <= v80) {
        goto LABEL_158;
      }
LABEL_166:
      v125.i64[1] = v85;
      int64_t v80 = v85;
      uint64_t v86 = v83[6];
      if (v86 >= v82) {
        goto LABEL_167;
      }
LABEL_159:
      v124.i64[0] = v86;
      uint64_t v82 = v86;
      if (v86 <= v81) {
        goto LABEL_160;
      }
LABEL_168:
      v125.i64[0] = v86;
      int64_t v81 = v86;
      int64_t v87 = v83[7];
      if (v87 >= v79) {
        goto LABEL_169;
      }
LABEL_161:
      v124.i64[1] = v87;
      uint64_t v79 = v87;
      if (v87 > v80) {
        goto LABEL_170;
      }
    }
    v76 += 8;
    if (v76 != v127) {
      continue;
    }
    break;
  }
  if (!sub_1002ED670(&v124, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002ED670(&v124, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  long long v98 = (char *)v141;
  uint64_t v97 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3 || a4 > 0x63 || (v133 - (unsigned char *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      long long v105 = v133;
      if (v132 != v133)
      {
        do
        {
          double v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              uint64_t v109 = *(void *)v98;
              uint64_t v110 = *(void *)v108;
              if (*(void *)(*(void *)v98 + 48) >= *(void *)(*(void *)v108 + 32)
                && *(void *)(v109 + 32) <= *(void *)(v110 + 48))
              {
                BOOL v111 = *(void *)(v109 + 56) >= *(void *)(v110 + 40)
                    && *(void *)(v109 + 40) <= *(void *)(v110 + 56);
                BOOL v112 = v111 && *(unsigned char *)(v109 + 96) == 0;
                if (v112 && *(unsigned char *)(v110 + 96) == 0)
                {
                  if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v109, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v110, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
                  long long v105 = v133;
                  }
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            uint64_t v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002ED670(&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  long long v107 = (char *)v138;
  long long v106 = v139;
  if (a5 > (v139 - (unsigned char *)v138) >> 3 || a4 > 0x63 || (v130 - (unsigned char *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      long long v114 = v130;
      if (v129 != v130)
      {
        do
        {
          long long v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              uint64_t v118 = *(void *)v107;
              uint64_t v119 = *(void *)v117;
              if (*(void *)(*(void *)v107 + 48) >= *(void *)(*(void *)v117 + 32)
                && *(void *)(v118 + 32) <= *(void *)(v119 + 48))
              {
                BOOL v120 = *(void *)(v118 + 56) >= *(void *)(v119 + 40)
                    && *(void *)(v118 + 40) <= *(void *)(v119 + 56);
                BOOL v121 = v120 && *(unsigned char *)(v118 + 96) == 0;
                if (v121 && *(unsigned char *)(v119 + 96) == 0)
                {
                  if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v118, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v119, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
                  long long v114 = v130;
                  }
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            long long v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002ED670(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v115 = 1;
  long long v116 = (char *)__p;
  if (__p) {
    goto LABEL_279;
  }
LABEL_280:
  if (v129)
  {
    long long v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    uint64_t v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    uint64_t v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    __n128 v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    __n128 v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002ED5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    __n128 v34 = a20;
    if (!a20)
    {
LABEL_3:
      int64_t v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    __n128 v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  int64_t v35 = a23;
  if (!a23)
  {
LABEL_4:
    uint64_t v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  uint64_t v36 = a26;
  if (!a26)
  {
LABEL_5:
    uint64_t v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  uint64_t v37 = a29;
  if (!a29)
  {
LABEL_6:
    uint64_t v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  uint64_t v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002ED670(long long *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = *((void *)a1 + 2);
  uint64_t v17 = *((void *)a1 + 3);
  uint64_t v19 = *((void *)a1 + 1);
  if (v19 >= 0) {
    uint64_t v20 = *((void *)a1 + 1);
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  uint64_t v21 = v20 >> 1;
  long long v22 = *a1;
  long long v145 = a1[1];
  long long v146 = v22;
  if (v17 >= 0) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v17 + 1;
  }
  uint64_t v24 = v23 >> 1;
  v144[0] = v22;
  int v25 = v17 - 2 * v24 + v19 - 2 * v21;
  uint64_t v147 = v18;
  uint64_t v148 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[1] = v148;
  __n128 v141 = 0;
  __n128 v142 = 0;
  uint64_t v143 = 0;
  __n128 v138 = 0;
  __n128 v139 = 0;
  uint64_t v140 = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  long long v129 = 0;
  long long v130 = 0;
  uint64_t v131 = 0;
  long long __p = 0;
  long long v127 = 0;
  uint64_t v128 = 0;
  sub_1002CA168(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_1002CA168(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  uint64_t v27 = (char *)v135;
  int64_t v26 = v136;
  if (v135 == v136) {
    goto LABEL_147;
  }
  int64_t v29 = (char *)__p;
  uint64_t v28 = v127;
  if (a5 > (v136 - (unsigned char *)v135) >> 3 || a4 > 0x63 || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        uint64_t v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            uint64_t v45 = *(void *)v27;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v27 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v45, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v46, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
                uint64_t v28 = v127;
                }
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          int64_t v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v32 = 0x8000000000000000;
  uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    __n128 v34 = *(void **)v27;
    int64_t v35 = *(void *)(*(void *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        uint64_t v36 = v34[5];
        if (v36 < v30) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v33 = v35;
      if (v35 <= v32) {
        goto LABEL_15;
      }
    }
    v125.i64[0] = v35;
    int64_t v32 = v35;
    uint64_t v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      uint64_t v30 = v36;
      if (v36 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      uint64_t v37 = v34[6];
      if (v37 < v33) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    int64_t v31 = v36;
    uint64_t v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      uint64_t v33 = v37;
      if (v37 <= v32) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      uint64_t v38 = v34[7];
      if (v38 >= v30) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    int64_t v32 = v37;
    uint64_t v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    uint64_t v30 = v38;
    if (v38 <= v31) {
      goto LABEL_12;
    }
LABEL_29:
    v125.i64[1] = v38;
    int64_t v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    BOOL v39 = *(void **)v29;
    int64_t v40 = *(void *)(*(void *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        uint64_t v41 = v39[5];
        if (v41 < v30) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v29 + 32);
      uint64_t v33 = v40;
      if (v40 <= v32) {
        goto LABEL_34;
      }
    }
    v125.i64[0] = v40;
    int64_t v32 = v40;
    uint64_t v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      uint64_t v30 = v41;
      if (v41 <= v31) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      uint64_t v42 = v39[6];
      if (v42 < v33) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    int64_t v31 = v41;
    uint64_t v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      uint64_t v33 = v42;
      if (v42 <= v32) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      uint64_t v43 = v39[7];
      if (v43 >= v30) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    int64_t v32 = v42;
    uint64_t v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    uint64_t v30 = v43;
    if (v43 <= v31) {
      goto LABEL_30;
    }
LABEL_48:
    v125.i64[1] = v43;
    int64_t v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002EC7EC(v124.i64, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
    goto LABEL_278;
  }
LABEL_72:
  uint64_t v50 = v133;
  if (a5 > (v133 - (unsigned char *)v132) >> 3)
  {
    uint64_t v52 = (char *)v135;
    uint64_t v51 = v136;
    goto LABEL_75;
  }
  uint64_t v52 = (char *)v135;
  uint64_t v51 = v136;
  if (a5 <= (v130 - (unsigned char *)v129) >> 3 && a4 <= 0x63 && (v136 - (unsigned char *)v135) >> 3 >= a5)
  {
    int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v67 = 0x8000000000000000;
      int64_t v68 = 0x8000000000000000;
      uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v70 = *(void **)v52;
        int64_t v71 = *(void *)(*(void *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            uint64_t v72 = v70[5];
            if (v72 < v66) {
              goto LABEL_129;
            }
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(void *)(*(void *)v52 + 32);
          uint64_t v69 = v71;
          if (v71 <= v68) {
            goto LABEL_128;
          }
        }
        v125.i64[0] = v71;
        int64_t v68 = v71;
        uint64_t v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          uint64_t v66 = v72;
          if (v72 <= v67) {
            goto LABEL_130;
          }
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          uint64_t v73 = v70[6];
          if (v73 < v69) {
            goto LABEL_131;
          }
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        int64_t v67 = v72;
        uint64_t v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          uint64_t v69 = v73;
          if (v73 <= v68) {
            goto LABEL_132;
          }
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          uint64_t v74 = v70[7];
          if (v74 < v66) {
            goto LABEL_133;
          }
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        int64_t v68 = v73;
        uint64_t v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          uint64_t v66 = v74;
          if (v74 > v67) {
            goto LABEL_142;
          }
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          int64_t v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002EC7EC(v124.i64, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002EC7EC(v124.i64, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    uint64_t v115 = 0;
    long long v116 = (char *)__p;
    if (!__p) {
      goto LABEL_280;
    }
LABEL_279:
    long long v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51) {
      goto LABEL_147;
    }
  }
  else
  {
    do
    {
      uint64_t v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          uint64_t v55 = *(void *)v52;
          uint64_t v56 = *(void *)v54;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v54 + 32)
            && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
          {
            BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
            BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
            if (v58 && *(unsigned char *)(v56 + 96) == 0)
            {
              if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v55, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v56, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
              uint64_t v50 = v133;
              }
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    uint64_t v52 = (char *)v135;
    if (v135 == v51) {
      goto LABEL_147;
    }
  }
  unint64_t v53 = v130;
  if (v129 != v130)
  {
    do
    {
      int64x2_t v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          uint64_t v61 = *(void *)v52;
          uint64_t v62 = *(void *)v60;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v60 + 32)
            && *(void *)(v61 + 32) <= *(void *)(v62 + 48))
          {
            BOOL v63 = *(void *)(v61 + 56) >= *(void *)(v62 + 40) && *(void *)(v61 + 40) <= *(void *)(v62 + 56);
            BOOL v64 = v63 && *(unsigned char *)(v61 + 96) == 0;
            if (v64 && *(unsigned char *)(v62 + 96) == 0)
            {
              if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v61, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v62, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
              unint64_t v53 = v130;
              }
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  uint64_t v76 = (char *)__p;
  uint64_t v75 = v127;
  if (__p == v127) {
    goto LABEL_198;
  }
  __n128 v78 = (char *)v141;
  __n128 v77 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3
    || a5 > (v139 - (unsigned char *)v138) >> 3
    || a4 > 0x63
    || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      long long v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          uint64_t v89 = *(void *)v78;
          uint64_t v90 = *(void *)v88;
          if (*(void *)(*(void *)v78 + 48) >= *(void *)(*(void *)v88 + 32)
            && *(void *)(v89 + 32) <= *(void *)(v90 + 48))
          {
            BOOL v91 = *(void *)(v89 + 56) >= *(void *)(v90 + 40) && *(void *)(v89 + 40) <= *(void *)(v90 + 56);
            BOOL v92 = v91 && *(unsigned char *)(v89 + 96) == 0;
            if (v92 && *(unsigned char *)(v90 + 96) == 0)
            {
              if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v89, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v90, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
              uint64_t v75 = v127;
              }
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        __n128 v77 = v142;
      }
      v78 += 8;
    }
    long long v95 = (char *)v138;
    long long v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        long long v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            uint64_t v100 = *(void *)v95;
            uint64_t v101 = *(void *)v99;
            if (*(void *)(*(void *)v95 + 48) >= *(void *)(*(void *)v99 + 32)
              && *(void *)(v100 + 32) <= *(void *)(v101 + 48))
            {
              BOOL v102 = *(void *)(v100 + 56) >= *(void *)(v101 + 40)
                  && *(void *)(v100 + 40) <= *(void *)(v101 + 56);
              BOOL v103 = v102 && *(unsigned char *)(v100 + 96) == 0;
              if (v103 && *(unsigned char *)(v101 + 96) == 0)
              {
                if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v100, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v101, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
                uint64_t v75 = v127;
                }
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          long long v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  uint64_t v79 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v80 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v81 = 0x8000000000000000;
  uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    uint64_t v83 = *(void **)v76;
    int64_t v84 = *(void *)(*(void *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81) {
        goto LABEL_164;
      }
LABEL_156:
      uint64_t v85 = v83[5];
      if (v85 < v79) {
        goto LABEL_157;
      }
LABEL_165:
      if (v85 > v80) {
        goto LABEL_166;
      }
LABEL_158:
      uint64_t v86 = v83[6];
      if (v86 < v82) {
        goto LABEL_159;
      }
LABEL_167:
      if (v86 > v81) {
        goto LABEL_168;
      }
LABEL_160:
      int64_t v87 = v83[7];
      if (v87 < v79) {
        goto LABEL_161;
      }
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        int64_t v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v76 + 32);
      uint64_t v82 = v84;
      if (v84 <= v81) {
        goto LABEL_156;
      }
LABEL_164:
      v125.i64[0] = v84;
      int64_t v81 = v84;
      uint64_t v85 = v83[5];
      if (v85 >= v79) {
        goto LABEL_165;
      }
LABEL_157:
      v124.i64[1] = v85;
      uint64_t v79 = v85;
      if (v85 <= v80) {
        goto LABEL_158;
      }
LABEL_166:
      v125.i64[1] = v85;
      int64_t v80 = v85;
      uint64_t v86 = v83[6];
      if (v86 >= v82) {
        goto LABEL_167;
      }
LABEL_159:
      v124.i64[0] = v86;
      uint64_t v82 = v86;
      if (v86 <= v81) {
        goto LABEL_160;
      }
LABEL_168:
      v125.i64[0] = v86;
      int64_t v81 = v86;
      int64_t v87 = v83[7];
      if (v87 >= v79) {
        goto LABEL_169;
      }
LABEL_161:
      v124.i64[1] = v87;
      uint64_t v79 = v87;
      if (v87 > v80) {
        goto LABEL_170;
      }
    }
    v76 += 8;
    if (v76 != v127) {
      continue;
    }
    break;
  }
  if (!sub_1002EC7EC(v124.i64, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002EC7EC(v124.i64, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  long long v98 = (char *)v141;
  uint64_t v97 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3 || a4 > 0x63 || (v133 - (unsigned char *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      long long v105 = v133;
      if (v132 != v133)
      {
        do
        {
          double v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              uint64_t v109 = *(void *)v98;
              uint64_t v110 = *(void *)v108;
              if (*(void *)(*(void *)v98 + 48) >= *(void *)(*(void *)v108 + 32)
                && *(void *)(v109 + 32) <= *(void *)(v110 + 48))
              {
                BOOL v111 = *(void *)(v109 + 56) >= *(void *)(v110 + 40)
                    && *(void *)(v109 + 40) <= *(void *)(v110 + 56);
                BOOL v112 = v111 && *(unsigned char *)(v109 + 96) == 0;
                if (v112 && *(unsigned char *)(v110 + 96) == 0)
                {
                  if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v109, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v110, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
                  long long v105 = v133;
                  }
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            uint64_t v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002EC7EC((uint64_t *)&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  long long v107 = (char *)v138;
  long long v106 = v139;
  if (a5 > (v139 - (unsigned char *)v138) >> 3 || a4 > 0x63 || (v130 - (unsigned char *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      long long v114 = v130;
      if (v129 != v130)
      {
        do
        {
          long long v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              uint64_t v118 = *(void *)v107;
              uint64_t v119 = *(void *)v117;
              if (*(void *)(*(void *)v107 + 48) >= *(void *)(*(void *)v117 + 32)
                && *(void *)(v118 + 32) <= *(void *)(v119 + 48))
              {
                BOOL v120 = *(void *)(v118 + 56) >= *(void *)(v119 + 40)
                    && *(void *)(v118 + 40) <= *(void *)(v119 + 56);
                BOOL v121 = v120 && *(unsigned char *)(v118 + 96) == 0;
                if (v121 && *(unsigned char *)(v119 + 96) == 0)
                {
                  if (!sub_1002EE4F4(*(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v118, *(_DWORD *)(a6 + 40), *(double ***)a6, (int *)v119, 0, *(unsigned __int8 *)(a6 + 44), *(void *)(a6 + 8), *(void *)(a6 + 16), *(void **)(a6 + 24), *(unsigned char **)(a6 + 32)))goto LABEL_278; {
                  long long v114 = v130;
                  }
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            long long v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002EC7EC(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v115 = 1;
  long long v116 = (char *)__p;
  if (__p) {
    goto LABEL_279;
  }
LABEL_280:
  if (v129)
  {
    long long v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    uint64_t v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    uint64_t v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    __n128 v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    __n128 v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002EE430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    __n128 v34 = a20;
    if (!a20)
    {
LABEL_3:
      int64_t v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    __n128 v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  int64_t v35 = a23;
  if (!a23)
  {
LABEL_4:
    uint64_t v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  uint64_t v36 = a26;
  if (!a26)
  {
LABEL_5:
    uint64_t v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  uint64_t v37 = a29;
  if (!a29)
  {
LABEL_6:
    uint64_t v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  uint64_t v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002EE4F4(int a1, double **a2, int *a3, int a4, double **a5, int *a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, unsigned char *a12)
{
  uint64_t v12 = a6;
  if (*((unsigned char *)a3 + 96) && (unint64_t)(*((void *)a3 + 10) + 1) < *((void *)a3 + 11)
    || *((unsigned char *)a6 + 96) && (unint64_t)(*((void *)a6 + 10) + 1) < *((void *)a6 + 11))
  {
    return 1;
  }
  uint64_t v15 = *((void *)a3 + 3);
  if (v15 >= 0) {
    uint64_t v16 = (double **)&a2[3][3 * v15];
  }
  else {
    uint64_t v16 = a2;
  }
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = *((void *)a6 + 3);
  if (v19 >= 0) {
    uint64_t v20 = (double **)&a5[3][3 * v19];
  }
  else {
    uint64_t v20 = a5;
  }
  long long v130 = v20[1];
  uint64_t v131 = *v20;
  int v21 = *a3;
  int v22 = *a6;
  uint64_t v23 = *((void *)a3 + 13);
  uint64_t v25 = *((void *)a3 + 8);
  uint64_t v24 = *((void *)a3 + 9);
  int64_t v26 = &v17[2 * v25];
  int v106 = a4;
  int v121 = *a6;
  uint64_t v110 = v18;
  BOOL v111 = v17;
  uint64_t v128 = v25;
  if (v25 == v24)
  {
    uint64_t v27 = &v17[2 * v25];
    uint64_t v14 = 1;
    long long v107 = &v17[2 * v24];
    if (v26 == v107) {
      return v14;
    }
    goto LABEL_34;
  }
  uint64_t v29 = 0;
  __n128 v122 = v26;
  uint64_t v124 = *((void *)a3 + 9);
  uint64_t v30 = 16 * v24 - 16 * v25;
  int64_t v31 = v26;
  uint64_t v117 = *((void *)a3 + 13);
  int64_t v32 = v26;
  while (1)
  {
    uint64_t v33 = v31;
    double v34 = (double)*(uint64_t *)(a10 + 24) + (v31[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
    if (v34 >= 0.0) {
      double v35 = 0.5;
    }
    else {
      double v35 = -0.5;
    }
    sub_1002C5028(v34 + v35);
    double v36 = v32[2];
    v32 += 2;
    double v37 = (double)*(uint64_t *)(a10 + 16) + (v36 - *(double *)a10) * *(double *)(a10 + 32);
    if (v37 >= 0.0) {
      double v38 = 0.5;
    }
    else {
      double v38 = -0.5;
    }
    double v39 = v37 + v38;
    sub_1002C5028(v37 + v38);
    double v40 = ceil(v39);
    double v41 = floor(v39);
    if (v39 >= 0.0) {
      double v40 = v41;
    }
    uint64_t v42 = (uint64_t)v40;
    if (v21 == 1)
    {
      if (*((void *)a6 + 4) <= v42)
      {
        uint64_t v128 = v25;
        goto LABEL_31;
      }
      goto LABEL_17;
    }
    if (v21 != -1) {
      break;
    }
    if (*((void *)a6 + 6) >= v42)
    {
      uint64_t v23 = v117 + v29;
      v128 += v29;
LABEL_31:
      uint64_t v12 = a6;
      a4 = v106;
      uint64_t v18 = v110;
      uint64_t v17 = v111;
      int v22 = v121;
      uint64_t v27 = v33;
      uint64_t v14 = 1;
      long long v107 = &v111[2 * v124];
      if (v27 == v107) {
        return v14;
      }
LABEL_34:
      uint64_t v118 = v23;
      uint64_t v43 = v27 + 2;
      uint64_t v44 = &v17[2 * (v27 != v17)];
      if (v27 + 2 != v18) {
        uint64_t v44 = v27 + 2;
      }
      uint64_t v45 = v44 + 2;
      uint64_t v46 = &v17[2 * (v44 != v17)];
      if (v45 != v18) {
        uint64_t v46 = v45;
      }
      uint64_t v119 = v46;
      int v109 = -v21;
      int v123 = -v22;
      uint64_t v47 = v128;
      uint64_t v120 = a4;
      double v108 = v12;
LABEL_43:
      double v50 = (double)*(uint64_t *)(a10 + 24) + (v27[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
      if (v50 >= 0.0) {
        double v51 = 0.5;
      }
      else {
        double v51 = -0.5;
      }
      sub_1002C5028(v50 + v51);
      double v52 = (double)*(uint64_t *)(a10 + 16) + (*v27 - *(double *)a10) * *(double *)(a10 + 32);
      if (v52 >= 0.0) {
        double v53 = 0.5;
      }
      else {
        double v53 = -0.5;
      }
      double v54 = v52 + v53;
      sub_1002C5028(v52 + v53);
      double v55 = ceil(v54);
      double v56 = floor(v54);
      if (v54 >= 0.0) {
        double v55 = v56;
      }
      uint64_t v57 = (uint64_t)v55;
      if (v109 == 1)
      {
        if (v12[4] > v57) {
          return 1;
        }
      }
      else if (v109 == -1 && v12[6] < v57)
      {
        return 1;
      }
      v161[0] = a3;
      v161[1] = v47;
      uint64_t v129 = v47;
      uint64_t v115 = v43;
      long long v116 = v27;
      v161[2] = v27;
      v161[3] = v43;
      v161[4] = v119;
      v161[5] = v17;
      v161[6] = v18;
      char v162 = 1;
      char v163 = 0;
      long long v58 = *(_OWORD *)(a10 + 16);
      long long v164 = *(_OWORD *)a10;
      long long v165 = v58;
      uint64_t v166 = *(void *)(a10 + 32);
      uint64_t v60 = v12[8];
      uint64_t v59 = v12[9];
      uint64_t v61 = &v131[2 * v60];
      uint64_t v62 = v12[13];
      uint64_t v114 = v62;
      if (v60 == v59) {
        goto LABEL_75;
      }
      uint64_t v63 = 0;
      uint64_t v125 = v12[9];
      uint64_t v64 = 16 * v59 - 16 * v60;
      uint64_t v65 = v12[8];
      uint64_t v66 = &v131[2 * v60];
      while (1)
      {
        double v67 = (double)*(uint64_t *)(a10 + 24) + (v61[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v67 >= 0.0) {
          double v68 = 0.5;
        }
        else {
          double v68 = -0.5;
        }
        sub_1002C5028(v67 + v68);
        double v69 = v66[2];
        v66 += 2;
        double v70 = (double)*(uint64_t *)(a10 + 16) + (v69 - *(double *)a10) * *(double *)(a10 + 32);
        if (v70 >= 0.0) {
          double v71 = 0.5;
        }
        else {
          double v71 = -0.5;
        }
        double v72 = v70 + v71;
        sub_1002C5028(v70 + v71);
        double v73 = ceil(v72);
        double v74 = floor(v72);
        if (v72 >= 0.0) {
          double v73 = v74;
        }
        uint64_t v75 = (uint64_t)v73;
        if (v121 == 1)
        {
          if (*((void *)a3 + 4) <= v75)
          {
            uint64_t v114 = v62;
            uint64_t v60 = v65;
LABEL_74:
            uint64_t v59 = v125;
LABEL_75:
            long long v126 = &v131[2 * v59];
            if (v61 == v126)
            {
LABEL_39:
              ++v118;
              uint64_t v12 = v108;
              uint64_t v18 = v110;
              uint64_t v17 = v111;
              uint64_t v48 = v129;
LABEL_40:
              uint64_t v27 = v116 + 2;
              uint64_t v43 = v115 + 2;
              uint64_t v47 = v48 + 1;
              long long v49 = v119 + 2;
              if (v119 + 2 == v18) {
                long long v49 = &v17[2 * (v119 != v17)];
              }
              uint64_t v119 = v49;
              if (v115 == v107) {
                return 1;
              }
              goto LABEL_43;
            }
            uint64_t v76 = v61 + 2;
            if (v61 + 2 == v130) {
              uint64_t v76 = &v131[2 * (v61 != v131)];
            }
            __n128 v77 = v76 + 2;
            __n128 v78 = &v131[2 * (v76 != v131)];
            if (v77 == v130) {
              uint64_t v79 = v78;
            }
            else {
              uint64_t v79 = v77;
            }
            uint64_t v80 = ++v118 - v114;
            uint64_t v12 = v108;
            uint64_t v48 = v129;
            while (2)
            {
              double v82 = (double)*(uint64_t *)(a10 + 24) + (v61[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
              if (v82 >= 0.0) {
                double v83 = 0.5;
              }
              else {
                double v83 = -0.5;
              }
              sub_1002C5028(v82 + v83);
              double v84 = (double)*(uint64_t *)(a10 + 16) + (*v61 - *(double *)a10) * *(double *)(a10 + 32);
              if (v84 >= 0.0) {
                double v85 = 0.5;
              }
              else {
                double v85 = -0.5;
              }
              double v86 = v84 + v85;
              sub_1002C5028(v84 + v85);
              double v87 = ceil(v86);
              double v88 = floor(v86);
              if (v86 >= 0.0) {
                double v87 = v88;
              }
              uint64_t v89 = (uint64_t)v87;
              if (v123 == 1)
              {
                if (*((void *)a3 + 4) > v89) {
                  goto LABEL_127;
                }
              }
              else if (v123 == -1 && *((void *)a3 + 6) < v89)
              {
                goto LABEL_127;
              }
              uint64_t v90 = *((void *)a3 + 2);
              if (a1 != v106)
              {
                uint64_t v91 = *((void *)a3 + 3);
                uint64_t v93 = v108[2];
                uint64_t v92 = v108[3];
                goto LABEL_117;
              }
              uint64_t v91 = *((void *)a3 + 3);
              uint64_t v93 = v108[2];
              uint64_t v92 = v108[3];
              if (v90 != v93) {
                goto LABEL_117;
              }
              if (v91 == v92)
              {
                if (a7)
                {
                  if (v48 >= v60 || (a8 & 1) == 0)
                  {
                    uint64_t v92 = *((void *)a3 + 3);
                    uint64_t v93 = *((void *)a3 + 2);
                    if (v48 < v60) {
                      goto LABEL_117;
                    }
LABEL_84:
                    v61 += 2;
                    ++v60;
                    if (v79 + 2 == v130) {
                      uint64_t v79 = &v131[2 * (v79 != v131)];
                    }
                    else {
                      v79 += 2;
                    }
                    --v80;
                    if (v61 == v126)
                    {
LABEL_127:
                      uint64_t v18 = v110;
                      uint64_t v17 = v111;
                      goto LABEL_40;
                    }
                    continue;
                  }
LABEL_111:
                  if (!v80) {
                    goto LABEL_84;
                  }
                  if (!v48)
                  {
                    uint64_t v92 = *((void *)a3 + 3);
                    uint64_t v93 = *((void *)a3 + 2);
                    if (*((void *)a3 + 11) - 2 <= v60) {
                      goto LABEL_84;
                    }
LABEL_117:
                    v155[0] = v108;
                    v155[1] = v60;
                    v155[2] = v61;
                    v155[3] = v61 + 2;
                    v155[4] = v79;
                    v155[5] = v131;
                    v155[6] = v130;
                    char v156 = 0;
                    char v157 = 0;
                    long long v94 = *(_OWORD *)(a10 + 16);
                    long long v158 = *(_OWORD *)a10;
                    long long v159 = v94;
                    uint64_t v160 = *(void *)(a10 + 32);
                    int v133 = 0;
                    char v134 = 0;
                    uint64_t v135 = -1;
                    __int16 v136 = 0;
                    int v137 = 0;
                    uint64_t v144 = 0;
                    uint64_t v145 = 0;
                    int v146 = 0;
                    uint64_t v152 = 1;
                    uint64_t v153 = 0;
                    uint64_t v154 = 0;
                    uint64_t v138 = a1;
                    uint64_t v139 = v90;
                    uint64_t v140 = v91;
                    uint64_t v141 = v48;
                    long long v142 = xmmword_1003FAAE0;
                    uint64_t v143 = 1;
                    uint64_t v147 = v120;
                    uint64_t v148 = v93;
                    uint64_t v149 = v92;
                    uint64_t v150 = v60;
                    long long v151 = xmmword_1003FAAE0;
                    uint64_t v95 = a11[5];
                    sub_1002EEE50((uint64_t)v161, (uint64_t)v155, (uint64_t)v132, a9, a10, a11);
                    unint64_t v96 = a11[4];
                    uint64_t v97 = a11[1];
                    uint64_t v98 = a11[2];
                    long long v99 = (void *)(v97 + 8 * (v96 / 0x14));
                    if (v98 == v97)
                    {
                      unint64_t v100 = 0;
                      if (!v95) {
                        goto LABEL_124;
                      }
                    }
                    else
                    {
                      unint64_t v100 = *v99 + 200 * (v96 % 0x14);
                      if (!v95) {
                        goto LABEL_124;
                      }
                    }
                    uint64_t v101 = v95 - 0x70A3D70A3D70A3D7 * ((uint64_t)(v100 - *v99) >> 3);
                    if (v101 < 1)
                    {
                      unint64_t v102 = 19 - v101;
                      v99 -= v102 / 0x14;
                      unint64_t v100 = *v99 + 200 * (20 * (v102 / 0x14) - v102) + 3800;
                    }
                    else
                    {
                      v99 += v101 / 0x14uLL;
                      unint64_t v100 = *v99 + 200 * (v101 % 0x14uLL);
                    }
LABEL_124:
                    uint64_t v48 = v129;
                    unint64_t v103 = a11[5] + v96;
                    double v104 = (void *)(v97 + 8 * (v103 / 0x14));
                    if (v98 == v97)
                    {
                      unint64_t v81 = 0;
                      if (!v100) {
                        goto LABEL_84;
                      }
                    }
                    else
                    {
                      unint64_t v81 = *v104 + 200 * (v103 % 0x14);
                      if (v100 == v81) {
                        goto LABEL_84;
                      }
                    }
                    if (20 * (v104 - v99) - 0x70A3D70A3D70A3D7 * ((uint64_t)(v81 - *v104) >> 3) != 0x8F5C28F5C28F5C29 * ((uint64_t)(v100 - *v99) >> 3))
                    {
                      uint64_t v14 = 0;
                      *a12 = 1;
                      return v14;
                    }
                    goto LABEL_84;
                  }
                }
                else if (a8)
                {
                  goto LABEL_111;
                }
                uint64_t v92 = *((void *)a3 + 3);
              }
              break;
            }
            uint64_t v93 = *((void *)a3 + 2);
            goto LABEL_117;
          }
        }
        else
        {
          if (v121 != -1)
          {
            uint64_t v61 = &v131[2 * v60];
            goto LABEL_74;
          }
          if (*((void *)a3 + 6) >= v75)
          {
            v114 += v63;
            v60 += v63;
            goto LABEL_74;
          }
        }
        ++v65;
        ++v62;
        ++v63;
        uint64_t v61 = v66;
        v64 -= 16;
        if (!v64) {
          goto LABEL_39;
        }
      }
    }
LABEL_17:
    ++v25;
    ++v23;
    ++v29;
    int64_t v31 = v32;
    v30 -= 16;
    if (!v30) {
      return 1;
    }
  }
  uint64_t v27 = v122;
  uint64_t v12 = a6;
  a4 = v106;
  uint64_t v18 = v110;
  uint64_t v17 = v111;
  int v22 = v121;
  uint64_t v23 = v117;
  uint64_t v14 = 1;
  long long v107 = &v111[2 * v124];
  if (v122 != v107) {
    goto LABEL_34;
  }
  return v14;
}

void *sub_1002EEE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  double v73 = a6;
  v51[0] = a1;
  v51[1] = a2;
  uint64_t v11 = sub_1002CD678((uint64_t)&v52, a1, a2, a5);
  v56[0] = a1;
  v56[1] = a5;
  v56[2] = v11;
  v56[3] = &v53;
  char v57 = 0;
  v58[0] = a2;
  v58[1] = a5;
  v58[2] = &v54;
  v58[3] = &v55;
  char v59 = 0;
  v60[1] = v56;
  v60[2] = v58;
  v61[1] = v58;
  v61[2] = v56;
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = *(double **)(a2 + 16);
  uint64_t v14 = *(double **)(a2 + 24);
  v75[0] = *(long long **)(a1 + 16);
  v75[1] = (long long *)v12;
  v74[0] = v13;
  v74[1] = v14;
  long long v42 = xmmword_1003FAAF0;
  long long v43 = 0uLL;
  long long v44 = 1uLL;
  *(double *)&long long v40 = *(double *)v12 - *(double *)v75[0];
  *(double *)&long long v41 = *v14 - *v13;
  *((double *)&v40 + 1) = *(double *)(v12 + 8) - *((double *)v75[0] + 1);
  *((double *)&v41 + 1) = v14[1] - v13[1];
  sub_1002CDB78((uint64_t)&v40, v75, v74, (uint64_t)v56, (uint64_t)v58, (uint64_t)v62);
  uint64_t v71 = a4;
  uint64_t v72 = a5;
  if (LOBYTE(v67[0]) != 100)
  {
    long long v15 = *(_OWORD *)(a3 + 176);
    *(_OWORD *)long long v49 = *(_OWORD *)(a3 + 160);
    *(_OWORD *)&v49[16] = v15;
    uint64_t v50 = *(void *)(a3 + 192);
    long long v16 = *(_OWORD *)(a3 + 112);
    *(_OWORD *)&v45[16] = *(_OWORD *)(a3 + 96);
    long long v46 = v16;
    long long v17 = *(_OWORD *)(a3 + 144);
    long long v47 = *(_OWORD *)(a3 + 128);
    long long v48 = v17;
    long long v18 = *(_OWORD *)(a3 + 48);
    long long v42 = *(_OWORD *)(a3 + 32);
    long long v43 = v18;
    long long v19 = *(_OWORD *)(a3 + 80);
    long long v44 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)uint64_t v45 = v19;
    long long v20 = *(_OWORD *)(a3 + 16);
    long long v40 = *(_OWORD *)a3;
    long long v41 = v20;
    switch(LOBYTE(v67[0]))
    {
      case 'c':
        if (!BYTE1(v67[0]))
        {
          if (v69)
          {
            sub_1002F01B0(a1, a2, (uint64_t)&v40, (uint64_t)v62, (uint64_t)v67, (uint64_t)v60);
          }
          else
          {
            sub_1002F0454(a1, a2, (uint64_t)&v40, (uint64_t)v62, (uint64_t)v67, (uint64_t)v60);
            LODWORD(v41) = 5;
          }
          goto LABEL_19;
        }
        sub_1002F0C88(a1, a2, &v40, (uint64_t *)&v73, (uint64_t)v51, (uint64_t)v60, (void (*)(long long *))nullsub_196);
        return v73;
      case 'i':
        long long v40 = *(_OWORD *)&v62[8];
        *(void *)&v45[24] = v64;
        *(_OWORD *)&v45[8] = v63;
        *(void *)&v49[24] = v66;
        *(_OWORD *)&v49[8] = v65;
        int v21 = v73;
        uint64_t v22 = v73[2];
        uint64_t v23 = v73[1];
        uint64_t v24 = 20 * ((v22 - v23) >> 3) - 1;
        LODWORD(v41) = 2;
        if (v22 == v23) {
          uint64_t v24 = 0;
        }
        BOOL v25 = v68 == 1;
        *((_DWORD *)&v42 + 20 * (v68 != 1) + 2) = 1;
        *((_DWORD *)&v42 + 20 * v25 + 2) = 2;
        unint64_t v26 = v21[5] + v21[4];
        if (v24 == v26) {
          goto LABEL_22;
        }
        goto LABEL_23;
      case 'm':
        if (v70 == 1) {
          sub_1002EF2CC(a1, a2, (uint64_t)&v40, (uint64_t)v62, v67, (uint64_t)v60);
        }
        else {
          sub_1002EF6EC(a2, a1, (uint64_t)&v40, (uint64_t)v62, v67, (uint64_t)v61);
        }
        goto LABEL_19;
      case 't':
        sub_1002EFB10(a1, a2, (uint64_t)&v40, (uint64_t)v62, v67, (uint64_t)v60);
        goto LABEL_19;
      default:
        if (LOBYTE(v67[0]) != 101 || BYTE1(v67[0])) {
          return v73;
        }
        sub_1002F0454(a1, a2, (uint64_t)&v40, (uint64_t)v62, (uint64_t)v67, (uint64_t)v60);
LABEL_19:
        int v21 = v73;
        uint64_t v27 = v73[2];
        uint64_t v23 = v73[1];
        uint64_t v28 = 20 * ((v27 - v23) >> 3) - 1;
        if (v27 == v23) {
          uint64_t v28 = 0;
        }
        unint64_t v26 = v73[5] + v73[4];
        if (v28 == v26)
        {
LABEL_22:
          sub_1002F06B8((uint64_t)v21);
          uint64_t v23 = v21[1];
          unint64_t v26 = v21[5] + v21[4];
        }
LABEL_23:
        unint64_t v29 = *(void *)(v23 + 8 * (v26 / 0x14)) + 200 * (v26 % 0x14);
        *(_OWORD *)unint64_t v29 = v40;
        long long v30 = v41;
        long long v31 = v42;
        long long v32 = v44;
        *(_OWORD *)(v29 + 48) = v43;
        *(_OWORD *)(v29 + 64) = v32;
        *(_OWORD *)(v29 + 16) = v30;
        *(_OWORD *)(v29 + 32) = v31;
        long long v33 = *(_OWORD *)v45;
        long long v34 = *(_OWORD *)&v45[16];
        long long v35 = v47;
        *(_OWORD *)(v29 + 112) = v46;
        *(_OWORD *)(v29 + 128) = v35;
        *(_OWORD *)(v29 + 80) = v33;
        *(_OWORD *)(v29 + 96) = v34;
        long long v36 = v48;
        long long v37 = *(_OWORD *)v49;
        long long v38 = *(_OWORD *)&v49[16];
        *(void *)(v29 + 192) = v50;
        *(_OWORD *)(v29 + 160) = v37;
        *(_OWORD *)(v29 + 176) = v38;
        *(_OWORD *)(v29 + 144) = v36;
        ++v21[5];
        break;
    }
  }
  return v73;
}

void sub_1002EF2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  int v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_1003FAAF0;
    *(void *)(a3 + 104) = 0;
    int v9 = a5[10];
    if (v9 == 1) {
      goto LABEL_4;
    }
  }
  else if (v8 == 1)
  {
    *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
    *(void *)(a3 + 104) = 0x412E848000000000;
    int v9 = a5[10];
    if (v9 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 168) = vdupq_n_s64(1uLL);
      *(void *)(a3 + 184) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    long long v10 = *(_OWORD *)(a4 + 40);
    *(void *)(a3 + 104) = *(void *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v10;
    int v9 = a5[10];
    if (v9 == 1) {
      goto LABEL_4;
    }
  }
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 168) = xmmword_1003FAAF0;
    *(void *)(a3 + 184) = 0;
  }
  else
  {
    long long v11 = *(_OWORD *)(a4 + 64);
    *(void *)(a3 + 184) = *(void *)(a4 + 80);
    *(_OWORD *)(a3 + 168) = v11;
  }
LABEL_11:
  int v12 = a5[7];
  uint64_t v13 = *(void *)(a6 + 8);
  uint64_t v14 = *(uint64_t **)(v13 + 16);
  long long v15 = *(uint64_t **)(v13 + 24);
  long long v16 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 16));
  double v41 = 1.0;
  double v17 = sub_1002CEBF4(v14, v15, v16, &v41);
  if (v17 == 0.0) {
    goto LABEL_12;
  }
  if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
    if (!(v12 + v18)) {
      goto LABEL_21;
    }
  }
  else
  {
    double v25 = fabs(v17);
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
    if (v25 <= v41 * 2.22044605e-16)
    {
LABEL_12:
      int v18 = 0;
      if (v12) {
        goto LABEL_13;
      }
LABEL_21:
      uint64_t v26 = a3 + 40;
      *(_DWORD *)(v26 + 80 * (v18 != -1)) = 1;
      *(_DWORD *)(v26 + 80 * (v18 == -1)) = 2;
      return;
    }
    if (!(v12 + v18)) {
      goto LABEL_21;
    }
  }
LABEL_13:
  uint64_t v19 = *(void *)(a6 + 16);
  long long v20 = *(uint64_t **)(v19 + 16);
  int v21 = *(uint64_t **)(v19 + 24);
  uint64_t v22 = (uint64_t *)sub_1002CEAE0(v19);
  double v41 = 1.0;
  double v23 = sub_1002CEBF4(v20, v21, v22, &v41);
  if (v23 == 0.0)
  {
LABEL_14:
    int v24 = 0;
    goto LABEL_36;
  }
  if ((*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v23 > 0.0) {
      int v24 = 1;
    }
    else {
      int v24 = -1;
    }
  }
  else
  {
    double v27 = fabs(v23);
    if (v23 > 0.0) {
      int v24 = 1;
    }
    else {
      int v24 = -1;
    }
    if (v27 <= v41 * 2.22044605e-16) {
      goto LABEL_14;
    }
  }
LABEL_36:
  uint64_t v28 = *(void *)(a6 + 16);
  unint64_t v29 = *(uint64_t **)(v28 + 24);
  long long v30 = (uint64_t *)sub_1002CEAE0(v28);
  long long v31 = *(uint64_t **)(*(void *)(a6 + 8) + 24);
  double v41 = 1.0;
  double v32 = sub_1002CEBF4(v29, v30, v31, &v41);
  if (v32 == 0.0)
  {
LABEL_37:
    int v33 = 0;
    goto LABEL_47;
  }
  if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
  }
  else
  {
    double v34 = fabs(v32);
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
    if (v34 <= v41 * 2.22044605e-16) {
      goto LABEL_37;
    }
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v24 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 120) = 2;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v12 == 1 && v18 == 1 && v24 == -1)
  {
    *(_DWORD *)(a3 + 40) = 1;
    if (v33 == -1) {
      int v35 = 1;
    }
    else {
      int v35 = 3;
    }
    *(_DWORD *)(a3 + 120) = v35;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v12 == v18 && v12 == v24)
  {
    unsigned int v36 = (v24 == 1) ^ (v33 == 0);
    if (v33 * v12 == -1)
    {
      int v37 = sub_1002D1488(a6);
      if (sub_1002D1524(a6) * v37 == 1 && sub_1002D15E0(a6) * v33 == -1) {
        v36 ^= 1u;
      }
    }
    uint64_t v38 = a3 + 40;
    *(_DWORD *)(v38 + 80 * v36) = 1;
    *(_DWORD *)(v38 + 80 * (v36 ^ 1)) = 2;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v18)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }
  else
  {
    if (v12 == v24)
    {
      int v39 = 4;
      *(_DWORD *)(a3 + 40) = 4;
    }
    else
    {
      if (v24 == 1) {
        int v40 = 2;
      }
      else {
        int v40 = 1;
      }
      *(_DWORD *)(a3 + 40) = v40;
      int v39 = 3;
    }
    *(_DWORD *)(a3 + 120) = v39;
  }
}

void sub_1002EF6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  *(_DWORD *)(a3 + 16) = 4;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  int v8 = a5[9];
  if (v8 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_1003FAAF0;
    *(void *)(a3 + 104) = 0;
    int v9 = a5[10];
    if (v9 != 1) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  if (v8 != 1)
  {
    long long v10 = *(_OWORD *)(a4 + 40);
    *(void *)(a3 + 104) = *(void *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v10;
    int v9 = a5[10];
    if (v9 != 1) {
      goto LABEL_6;
    }
LABEL_9:
    *(int64x2_t *)(a3 + 168) = vdupq_n_s64(1uLL);
    *(void *)(a3 + 184) = 0x412E848000000000;
    goto LABEL_11;
  }
  *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
  *(void *)(a3 + 104) = 0x412E848000000000;
  int v9 = a5[10];
  if (v9 == 1) {
    goto LABEL_9;
  }
LABEL_6:
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 168) = xmmword_1003FAAF0;
    *(void *)(a3 + 184) = 0;
  }
  else
  {
    long long v11 = *(_OWORD *)(a4 + 64);
    *(void *)(a3 + 184) = *(void *)(a4 + 80);
    *(_OWORD *)(a3 + 168) = v11;
  }
LABEL_11:
  int v12 = a5[5];
  uint64_t v13 = *(void *)(a6 + 8);
  uint64_t v14 = *(uint64_t **)(v13 + 16);
  long long v15 = *(uint64_t **)(v13 + 24);
  long long v16 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 16));
  double v40 = 1.0;
  double v17 = sub_1002CEBF4(v14, v15, v16, &v40);
  if (v17 == 0.0) {
    goto LABEL_12;
  }
  if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    double v19 = fabs(v17);
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
    if (v19 > v40 * 2.22044605e-16)
    {
      if (v12 + v18) {
        goto LABEL_25;
      }
      goto LABEL_20;
    }
LABEL_12:
    int v18 = 0;
    if (v12) {
      goto LABEL_25;
    }
LABEL_20:
    uint64_t v20 = a3 + 40;
    *(_DWORD *)(v20 + 80 * (v18 == -1)) = 1;
    *(_DWORD *)(v20 + 80 * (v18 != -1)) = 2;
    return;
  }
  if (v17 > 0.0) {
    int v18 = 1;
  }
  else {
    int v18 = -1;
  }
  if (!(v12 + v18)) {
    goto LABEL_20;
  }
LABEL_25:
  uint64_t v21 = *(void *)(a6 + 16);
  uint64_t v22 = *(uint64_t **)(v21 + 16);
  double v23 = *(uint64_t **)(v21 + 24);
  int v24 = (uint64_t *)sub_1002CEAE0(v21);
  double v40 = 1.0;
  double v25 = sub_1002CEBF4(v22, v23, v24, &v40);
  if (v25 == 0.0)
  {
LABEL_26:
    int v26 = 0;
    goto LABEL_36;
  }
  if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0) {
      int v26 = 1;
    }
    else {
      int v26 = -1;
    }
  }
  else
  {
    double v27 = fabs(v25);
    if (v25 > 0.0) {
      int v26 = 1;
    }
    else {
      int v26 = -1;
    }
    if (v27 <= v40 * 2.22044605e-16) {
      goto LABEL_26;
    }
  }
LABEL_36:
  uint64_t v28 = *(void *)(a6 + 16);
  unint64_t v29 = *(uint64_t **)(v28 + 24);
  long long v30 = (uint64_t *)sub_1002CEAE0(v28);
  long long v31 = *(uint64_t **)(*(void *)(a6 + 8) + 24);
  double v40 = 1.0;
  double v32 = sub_1002CEBF4(v29, v30, v31, &v40);
  if (v32 == 0.0)
  {
LABEL_37:
    int v33 = 0;
    goto LABEL_47;
  }
  if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
  }
  else
  {
    double v34 = fabs(v32);
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
    if (v34 <= v40 * 2.22044605e-16) {
      goto LABEL_37;
    }
  }
LABEL_47:
  if ((v18 & v12) == 0xFFFFFFFF && v26 == 1)
  {
    *(_DWORD *)(a3 + 40) = 2;
    *(_DWORD *)(a3 + 120) = 2;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v12 == 1 && v18 == 1 && v26 == -1)
  {
    if (v33 == -1) {
      int v35 = 1;
    }
    else {
      int v35 = 3;
    }
    *(_DWORD *)(a3 + 40) = v35;
    *(_DWORD *)(a3 + 120) = 1;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v12 == v18 && v12 == v26)
  {
    unsigned int v36 = (v26 == 1) ^ (v33 != 0);
    if (v33 * v12 == -1)
    {
      int v37 = sub_1002D1488(a6);
      if (sub_1002D1524(a6) * v37 == 1 && sub_1002D15E0(a6) * v33 == -1) {
        v36 ^= 1u;
      }
    }
    uint64_t v38 = a3 + 40;
    *(_DWORD *)(v38 + 80 * v36) = 1;
    *(_DWORD *)(v38 + 80 * (v36 ^ 1)) = 2;
    *(unsigned char *)(a3 + 20) = 1;
  }
  else if (v18)
  {
    *(_DWORD *)(a3 + 16) = 8;
  }
  else if (v12 == v26)
  {
    *(_DWORD *)(a3 + 40) = 4;
    *(_DWORD *)(a3 + 120) = 4;
  }
  else
  {
    if (v26 == 1) {
      int v39 = 2;
    }
    else {
      int v39 = 1;
    }
    *(_DWORD *)(a3 + 120) = v39;
    *(_DWORD *)(a3 + 40) = 3;
  }
}

void sub_1002EFB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6)
{
  *(_DWORD *)(a3 + 16) = 3;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 8);
  int v9 = a5[9];
  if (v9 == -1)
  {
    *(_OWORD *)(a3 + 88) = xmmword_1003FAAF0;
    *(void *)(a3 + 104) = 0;
    int v10 = a5[10];
    if (v10 == 1) {
      goto LABEL_4;
    }
  }
  else if (v9 == 1)
  {
    *(int64x2_t *)(a3 + 88) = vdupq_n_s64(1uLL);
    *(void *)(a3 + 104) = 0x412E848000000000;
    int v10 = a5[10];
    if (v10 == 1)
    {
LABEL_4:
      *(int64x2_t *)(a3 + 168) = vdupq_n_s64(1uLL);
      *(void *)(a3 + 184) = 0x412E848000000000;
      goto LABEL_11;
    }
  }
  else
  {
    long long v11 = *(_OWORD *)(a4 + 40);
    *(void *)(a3 + 104) = *(void *)(a4 + 56);
    *(_OWORD *)(a3 + 88) = v11;
    int v10 = a5[10];
    if (v10 == 1) {
      goto LABEL_4;
    }
  }
  if (v10 == -1)
  {
    *(_OWORD *)(a3 + 168) = xmmword_1003FAAF0;
    *(void *)(a3 + 184) = 0;
  }
  else
  {
    long long v12 = *(_OWORD *)(a4 + 64);
    *(void *)(a3 + 184) = *(void *)(a4 + 80);
    *(_OWORD *)(a3 + 168) = v12;
  }
LABEL_11:
  uint64_t v13 = *(void *)(a6 + 16);
  uint64_t v14 = *(uint64_t **)(v13 + 16);
  long long v15 = *(uint64_t **)(v13 + 24);
  long long v16 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 8));
  double v80 = 1.0;
  double v17 = sub_1002CEBF4(v14, v15, v16, &v80);
  if (v17 == 0.0)
  {
LABEL_12:
    int v18 = 0;
    goto LABEL_22;
  }
  if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
  }
  else
  {
    double v19 = fabs(v17);
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
    if (v19 <= v80 * 2.22044605e-16) {
      goto LABEL_12;
    }
  }
LABEL_22:
  int v20 = a5[7];
  uint64_t v21 = *(void *)(a6 + 8);
  uint64_t v22 = *(uint64_t **)(v21 + 16);
  double v23 = *(uint64_t **)(v21 + 24);
  int v24 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 16));
  double v80 = 1.0;
  double v25 = sub_1002CEBF4(v22, v23, v24, &v80);
  if (v25 == 0.0)
  {
LABEL_23:
    int v26 = 0;
    goto LABEL_33;
  }
  if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v25 > 0.0) {
      int v26 = 1;
    }
    else {
      int v26 = -1;
    }
    if (v26 * v20 != -1) {
      goto LABEL_33;
    }
LABEL_24:
    uint64_t v27 = *(void *)(a6 + 8);
    uint64_t v28 = *(uint64_t **)(v27 + 16);
    unint64_t v29 = *(uint64_t **)(v27 + 24);
    long long v30 = (uint64_t *)sub_1002CEAE0(v27);
    double v80 = 1.0;
    double v31 = sub_1002CEBF4(v28, v29, v30, &v80);
    if (v31 != 0.0)
    {
      if ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v31 > 0.0) {
          int v32 = 1;
        }
        else {
          int v32 = -1;
        }
        if (v32 != v20) {
          goto LABEL_139;
        }
LABEL_52:
        if (!v18)
        {
          *(_DWORD *)(a3 + 40) = 3;
          BOOL v74 = v26 == 1;
          goto LABEL_170;
        }
        if (v18 == v26)
        {
          if (v26 == 1) {
            int v42 = 1;
          }
          else {
            int v42 = 2;
          }
          *(_DWORD *)(a3 + 40) = v42;
          goto LABEL_165;
        }
LABEL_139:
        if (v32 == v26)
        {
          uint64_t v69 = *(void *)(a6 + 16);
          int v70 = *(uint64_t **)(v69 + 24);
          uint64_t v71 = (uint64_t *)sub_1002CEAE0(v69);
          uint64_t v72 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 8));
          double v80 = 1.0;
          double v73 = sub_1002CEBF4(v70, v71, v72, &v80);
          if (v73 == 0.0) {
            goto LABEL_141;
          }
          if ((*(void *)&v73 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            if (v73 > 0.0) {
              int v76 = 1;
            }
            else {
              int v76 = -1;
            }
          }
          else
          {
            double v75 = fabs(v73);
            if (v73 > 0.0) {
              int v76 = 1;
            }
            else {
              int v76 = -1;
            }
            if (v75 <= v80 * 2.22044605e-16) {
              goto LABEL_141;
            }
          }
          if (v76 == v26)
          {
            if (v26 == 1) {
              int v78 = 1;
            }
            else {
              int v78 = 2;
            }
            *(_DWORD *)(a3 + 40) = v78;
            if (v26 == 1) {
              int v42 = 2;
            }
            else {
              int v42 = 1;
            }
            goto LABEL_165;
          }
        }
        BOOL v74 = v26 == 1;
        if (v26 == 1) {
          int v79 = 2;
        }
        else {
          int v79 = 1;
        }
        *(_DWORD *)(a3 + 40) = v79;
LABEL_170:
        if (v74) {
          int v62 = 1;
        }
        else {
          int v62 = 2;
        }
        goto LABEL_173;
      }
      double v41 = fabs(v31);
      if (v31 > 0.0) {
        int v32 = 1;
      }
      else {
        int v32 = -1;
      }
      if (v41 > v80 * 2.22044605e-16)
      {
        if (v32 != v20) {
          goto LABEL_139;
        }
        goto LABEL_52;
      }
    }
    int v32 = 0;
    if (v20) {
      goto LABEL_139;
    }
    goto LABEL_52;
  }
  double v33 = fabs(v25);
  if (v25 > 0.0) {
    int v26 = 1;
  }
  else {
    int v26 = -1;
  }
  if (v33 <= v80 * 2.22044605e-16) {
    goto LABEL_23;
  }
  if (v26 * v20 == -1) {
    goto LABEL_24;
  }
LABEL_33:
  uint64_t v34 = *(void *)(a6 + 16);
  int v35 = *(uint64_t **)(v34 + 24);
  unsigned int v36 = (uint64_t *)sub_1002CEAE0(v34);
  int v37 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 8));
  double v80 = 1.0;
  double v38 = sub_1002CEBF4(v35, v36, v37, &v80);
  if (v38 == 0.0)
  {
LABEL_34:
    int v39 = 0;
    goto LABEL_61;
  }
  if ((*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v38 > 0.0) {
      int v39 = 1;
    }
    else {
      int v39 = -1;
    }
  }
  else
  {
    double v40 = fabs(v38);
    if (v38 > 0.0) {
      int v39 = 1;
    }
    else {
      int v39 = -1;
    }
    if (v40 <= v80 * 2.22044605e-16) {
      goto LABEL_34;
    }
  }
LABEL_61:
  uint64_t v43 = *(void *)(a6 + 8);
  long long v44 = *(uint64_t **)(v43 + 16);
  uint64_t v45 = *(uint64_t **)(v43 + 24);
  long long v46 = (uint64_t *)sub_1002CEAE0(v43);
  double v80 = 1.0;
  double v47 = sub_1002CEBF4(v44, v45, v46, &v80);
  if (v47 != 0.0)
  {
    if ((*(void *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v47 > 0.0) {
        int v48 = 1;
      }
      else {
        int v48 = -1;
      }
      goto LABEL_72;
    }
    double v49 = fabs(v47);
    if (v47 > 0.0) {
      int v48 = 1;
    }
    else {
      int v48 = -1;
    }
    if (v49 > v80 * 2.22044605e-16) {
      goto LABEL_72;
    }
  }
  int v48 = 0;
LABEL_72:
  uint64_t v50 = *(void *)(a6 + 16);
  double v51 = *(uint64_t **)(v50 + 16);
  uint64_t v52 = *(uint64_t **)(v50 + 24);
  uint64_t v53 = (uint64_t *)sub_1002CEAE0(v50);
  double v80 = 1.0;
  double v54 = sub_1002CEBF4(v51, v52, v53, &v80);
  if (v54 == 0.0) {
    goto LABEL_73;
  }
  if ((*(void *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v54 > 0.0) {
      int v55 = 1;
    }
    else {
      int v55 = -1;
    }
    goto LABEL_83;
  }
  double v56 = fabs(v54);
  int v55 = v54 > 0.0 ? 1 : -1;
  if (v56 <= v80 * 2.22044605e-16) {
LABEL_73:
  }
    int v55 = 0;
LABEL_83:
  if (v26) {
    BOOL v57 = 1;
  }
  else {
    BOOL v57 = v55 * v20 == 1;
  }
  int v58 = !v57;
  if (v48 == v20 || v48 == v26 || !(v26 | v20) && v48 != -1)
  {
    if (v39) {
      char v59 = 1;
    }
    else {
      char v59 = v58;
    }
    if (v59)
    {
      if (!v18)
      {
        *(_DWORD *)(a3 + 40) = 3;
        if (v55 == 1) {
          int v66 = 2;
        }
        else {
          int v66 = 1;
        }
        if (v58) {
          int v62 = 3;
        }
        else {
          int v62 = v66;
        }
        goto LABEL_173;
      }
      if (v18 == v39 && v55 * v18 != -1)
      {
        if (v55 == 1) {
          int v60 = 1;
        }
        else {
          int v60 = 2;
        }
        *(_DWORD *)(a3 + 40) = v60;
        if (v55 == 1) {
          int v61 = 2;
        }
        else {
          int v61 = 1;
        }
        if (v58) {
          int v62 = 3;
        }
        else {
          int v62 = v61;
        }
        goto LABEL_173;
      }
      if (!(v39 + v55))
      {
        BOOL v67 = v55 == 1;
        if (v55 == 1) {
          int v68 = 2;
        }
        else {
          int v68 = 1;
        }
        *(_DWORD *)(a3 + 40) = v68;
        if (v67) {
          int v42 = 1;
        }
        else {
          int v42 = 2;
        }
LABEL_165:
        *(_DWORD *)(a3 + 120) = v42;
        *(unsigned char *)(a3 + 20) = 1;
        return;
      }
      if (v18 != -v55) {
        return;
      }
      if (v55 == 1) {
        int v77 = 2;
      }
      else {
        int v77 = 1;
      }
      *(_DWORD *)(a3 + 40) = v77;
      *(_DWORD *)(a3 + 120) = v77;
      if (v58)
      {
        int v62 = 3;
        goto LABEL_173;
      }
LABEL_121:
      *(unsigned char *)(a3 + 20) = 1;
      return;
    }
LABEL_141:
    int v62 = 4;
    *(_DWORD *)(a3 + 40) = 4;
LABEL_173:
    *(_DWORD *)(a3 + 120) = v62;
    return;
  }
  if (v55 == 1) {
    int v63 = 2;
  }
  else {
    int v63 = 1;
  }
  *(_DWORD *)(a3 + 40) = v63;
  if (v26 == 1 || v20 == 1) {
    int v65 = 1;
  }
  else {
    int v65 = 2;
  }
  if (v58) {
    int v65 = 3;
  }
  *(_DWORD *)(a3 + 120) = v65;
  if ((v58 & 1) == 0) {
    goto LABEL_121;
  }
}

double sub_1002F01B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v12 = sub_1002CFCC4((double *)(a4 + 64), (double *)(a4 + 120));
  uint64_t v13 = a4 + 56 * v12;
  *(_DWORD *)(a3 + 16) = 5;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v12 + 8);
  uint64_t v14 = *(void *)(v13 + 56);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(v13 + 40);
  *(void *)(a3 + 104) = v14;
  uint64_t v15 = *(void *)(v13 + 80);
  *(_OWORD *)(a3 + 168) = *(_OWORD *)(v13 + 64);
  *(void *)(a3 + 184) = v15;
  int v16 = *(_DWORD *)(a5 + 36);
  uint64_t v17 = *(void *)(a6 + 8);
  int v18 = *(uint64_t **)(v17 + 16);
  double v19 = *(uint64_t **)(v17 + 24);
  int v20 = (uint64_t *)sub_1002CEAE0(v17);
  double v42 = 1.0;
  double v21 = sub_1002CEBF4(v18, v19, v20, &v42);
  if (v21 != 0.0)
  {
    if ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v21 > 0.0) {
        int v22 = 1;
      }
      else {
        int v22 = -1;
      }
      goto LABEL_3;
    }
    double v39 = fabs(v21);
    if (v21 > 0.0) {
      int v22 = 1;
    }
    else {
      int v22 = -1;
    }
    if (v39 > v42 * 2.22044605e-16) {
      goto LABEL_3;
    }
  }
  int v22 = 0;
LABEL_3:
  uint64_t v23 = *(void *)(a6 + 16);
  int v24 = *(uint64_t **)(v23 + 16);
  double v25 = *(uint64_t **)(v23 + 24);
  int v26 = (uint64_t *)sub_1002CEAE0(v23);
  double v42 = 1.0;
  double v27 = sub_1002CEBF4(v24, v25, v26, &v42);
  if (v27 == 0.0) {
    goto LABEL_4;
  }
  if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v27 > 0.0) {
      int v28 = 1;
    }
    else {
      int v28 = -1;
    }
    goto LABEL_5;
  }
  double v40 = fabs(v27);
  int v28 = v27 > 0.0 ? 1 : -1;
  if (v40 <= v42 * 2.22044605e-16) {
LABEL_4:
  }
    int v28 = 0;
LABEL_5:
  if (v16 == 1) {
    int v29 = v22;
  }
  else {
    int v29 = v28;
  }
  int v30 = v29 * v16;
  if (v30 == 1) {
    int v31 = 1;
  }
  else {
    int v31 = 2;
  }
  if (v30 == 1) {
    int v32 = 2;
  }
  else {
    int v32 = 1;
  }
  if (v30)
  {
    int v33 = v32;
  }
  else
  {
    int v31 = 4;
    int v33 = 4;
  }
  *(_DWORD *)(a3 + 40) = v31;
  *(_DWORD *)(a3 + 120) = v33;
  if (v22)
  {
    double v34 = *(double *)a3;
    double v35 = *(double *)(a3 + 8);
    *(double *)(a3 + 112) = (v35 - *(double *)(*(void *)(a1 + 24) + 8))
                          * (v35 - *(double *)(*(void *)(a1 + 24) + 8))
                          + (*(double *)a3 - **(double **)(a1 + 24)) * (*(double *)a3 - **(double **)(a1 + 24));
    if (v28)
    {
LABEL_19:
      unsigned int v36 = *(double **)(a2 + 24);
      double v37 = *v36;
      double v38 = v36[1];
      goto LABEL_38;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 80))
    {
      sub_1002CD91C(a1, *(double **)(a1 + 24), a1 + 32);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)*(void *)(a1 + 32);
      *(unsigned char *)(a1 + 80) = 1;
    }
    double v34 = *(double *)a3;
    double v35 = *(double *)(a3 + 8);
    *(double *)(a3 + 112) = (v35 - *(double *)(a1 + 72)) * (v35 - *(double *)(a1 + 72))
                          + (*(double *)a3 - *(double *)(a1 + 64)) * (*(double *)a3 - *(double *)(a1 + 64));
    if (v28) {
      goto LABEL_19;
    }
  }
  if (!*(unsigned char *)(a2 + 80))
  {
    sub_1002CD91C(a2, *(double **)(a2 + 24), a2 + 32);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)*(void *)(a2 + 32);
    *(unsigned char *)(a2 + 80) = 1;
    double v34 = *(double *)a3;
    double v35 = *(double *)(a3 + 8);
  }
  double v37 = *(double *)(a2 + 64);
  double v38 = *(double *)(a2 + 72);
LABEL_38:
  double result = (v35 - v38) * (v35 - v38) + (v34 - v37) * (v34 - v37);
  *(double *)(a3 + 192) = result;
  return result;
}

void sub_1002F0454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v9 = sub_1002CFCC4((double *)(a4 + 64), (double *)(a4 + 120));
  uint64_t v10 = a4 + 56 * v9;
  *(_DWORD *)(a3 + 16) = 6;
  *(_OWORD *)a3 = *(_OWORD *)(a4 + 16 * v9 + 8);
  uint64_t v11 = *(void *)(v10 + 56);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(v10 + 40);
  *(void *)(a3 + 104) = v11;
  uint64_t v12 = *(void *)(v10 + 80);
  *(_OWORD *)(a3 + 168) = *(_OWORD *)(v10 + 64);
  *(void *)(a3 + 184) = v12;
  uint64_t v13 = *(void *)(a6 + 16);
  uint64_t v14 = *(uint64_t **)(v13 + 24);
  uint64_t v15 = (uint64_t *)sub_1002CEAE0(v13);
  int v16 = (uint64_t *)sub_1002CEAE0(*(void *)(a6 + 8));
  double v38 = 1.0;
  double v17 = sub_1002CEBF4(v14, v15, v16, &v38);
  if (v17 == 0.0)
  {
LABEL_2:
    int v18 = 0;
    goto LABEL_12;
  }
  if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
  }
  else
  {
    double v19 = fabs(v17);
    if (v17 > 0.0) {
      int v18 = 1;
    }
    else {
      int v18 = -1;
    }
    if (v19 <= v38 * 2.22044605e-16) {
      goto LABEL_2;
    }
  }
LABEL_12:
  uint64_t v20 = *(void *)(a6 + 8);
  double v21 = *(uint64_t **)(v20 + 16);
  int v22 = *(uint64_t **)(v20 + 24);
  uint64_t v23 = (uint64_t *)sub_1002CEAE0(v20);
  double v38 = 1.0;
  double v24 = sub_1002CEBF4(v21, v22, v23, &v38);
  if (v24 == 0.0)
  {
LABEL_13:
    int v25 = 0;
    goto LABEL_23;
  }
  if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (v24 > 0.0) {
      int v25 = 1;
    }
    else {
      int v25 = -1;
    }
  }
  else
  {
    double v26 = fabs(v24);
    if (v24 > 0.0) {
      int v25 = 1;
    }
    else {
      int v25 = -1;
    }
    if (v26 <= v38 * 2.22044605e-16) {
      goto LABEL_13;
    }
  }
LABEL_23:
  uint64_t v28 = *(void *)(a6 + 8);
  uint64_t v27 = *(void *)(a6 + 16);
  int v29 = *(uint64_t **)(v28 + 16);
  int v30 = *(uint64_t **)(v28 + 24);
  int v31 = (uint64_t *)sub_1002CEAE0(v27);
  double v38 = 1.0;
  double v32 = sub_1002CEBF4(v29, v30, v31, &v38);
  if (v32 == 0.0)
  {
LABEL_24:
    int v33 = 0;
    goto LABEL_34;
  }
  if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    double v34 = fabs(v32);
    if (v32 > 0.0) {
      int v33 = 1;
    }
    else {
      int v33 = -1;
    }
    if (v34 > v38 * 2.22044605e-16) {
      goto LABEL_34;
    }
    goto LABEL_24;
  }
  if (v32 > 0.0) {
    int v33 = 1;
  }
  else {
    int v33 = -1;
  }
LABEL_34:
  if (v18 || v25 != v33)
  {
    if (v33 * v25 == -1) {
      BOOL v36 = v25 == -1;
    }
    else {
      BOOL v36 = v18 == -1;
    }
    if (v36) {
      int v37 = 2;
    }
    else {
      int v37 = 1;
    }
    *(_DWORD *)(a3 + 40) = v37;
    if (v36) {
      int v35 = 1;
    }
    else {
      int v35 = 2;
    }
  }
  else
  {
    int v35 = 4;
    *(_DWORD *)(a3 + 40) = 4;
  }
  *(_DWORD *)(a3 + 120) = v35;
}

void sub_1002F06B8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x14;
  unint64_t v4 = v2 - 20;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    int v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    BOOL v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        double v34 = (char *)operator new(8 * v31);
        int v35 = &v34[8 * v32];
        BOOL v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            BOOL v74 = &v34[8 * v32];
            double v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              double v40 = &v35[v76];
              v7 += v76;
              int v77 = (long long *)(v6 + 3);
              int v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *int v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            double v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)double v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_1000A6A10();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v91 = operator new(0xFA0uLL);
      sub_100192E00((char **)a1, &v91);
      return;
    }
    uint64_t v91 = operator new(0xFA0uLL);
    sub_100192F90((void **)a1, &v91);
    double v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    BOOL v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        double v34 = (char *)operator new(8 * v42);
        int v35 = &v34[8 * v43];
        BOOL v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            double v82 = &v34[8 * v43];
            double v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              double v47 = &v35[v84];
              v7 += v84;
              double v85 = (long long *)(v41 + 3);
              double v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *double v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            double v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)double v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  int v25 = (char *)operator new(8 * v24);
  double v26 = operator new(0xFA0uLL);
  uint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    uint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_1000A6A10();
      }
      double v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      int v25 = v49;
      *(void *)uint64_t v27 = v90;
      int v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      int v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_1000A6A10();
          }
          int v60 = (char *)operator new(8 * v59);
          int v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          int v29 = v53;
          if (!v37)
          {
            int v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            int v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            int v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            int v65 = &v27[v68];
            uint64_t v69 = (long long *)(v27 + 16);
            int v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)int v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          BOOL v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          int v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          int v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      double v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  int v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  double v51 = v27;
LABEL_46:
  uint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_1002F0C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1002F0C44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002F0C58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002F0C70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1002F0C88(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void (*a7)(long long *))
{
  long long v11 = a3[11];
  *(_OWORD *)int v70 = a3[10];
  *(_OWORD *)&v70[16] = v11;
  uint64_t v71 = *((void *)a3 + 24);
  long long v12 = a3[7];
  *(_OWORD *)&v66[16] = a3[6];
  long long v67 = v12;
  __n128 v13 = (__n128)a3[9];
  long long v68 = a3[8];
  __n128 v69 = v13;
  long long v14 = a3[3];
  long long v63 = a3[2];
  long long v64 = v14;
  long long v15 = a3[5];
  long long v65 = a3[4];
  *(_OWORD *)uint64_t v66 = v15;
  __n128 result = (__n128)a3[1];
  long long v61 = *a3;
  __n128 v62 = result;
  int v17 = *(_DWORD *)(a5 + 496);
  if (*(_DWORD *)(a5 + 492) == 1)
  {
    uint64_t v18 = *(void *)(a6 + 8);
    uint64_t v19 = *(uint64_t **)(v18 + 16);
    uint64_t v20 = *(uint64_t **)(v18 + 24);
    uint64_t v21 = (uint64_t *)sub_1002CEAE0(v18);
    double v72 = 1.0;
    result.n128_f64[0] = sub_1002CEBF4(v19, v20, v21, &v72);
    if (result.n128_f64[0] != 0.0
      && ((result.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000
       || fabs(result.n128_f64[0]) > v72 * 2.22044605e-16))
    {
      if (result.n128_f64[0] <= 0.0) {
        int v22 = 1;
      }
      else {
        int v22 = 2;
      }
      DWORD2(v67) = 3;
      DWORD2(v63) = v22;
      v62.n128_u32[0] = 5;
      long long v61 = *(_OWORD *)(a5 + 328);
      uint64_t v23 = *(void *)(a5 + 416);
      *(_OWORD *)&v66[8] = *(_OWORD *)(a5 + 400);
      long long v24 = *(_OWORD *)(a5 + 424);
      uint64_t v25 = *(void *)(a5 + 440);
      *(void *)&v66[24] = v23;
      *(void *)&v70[24] = v25;
      *(_OWORD *)&v70[8] = v24;
      a7(&v61);
      double v26 = (void *)*a4;
      uint64_t v27 = *(void *)(*a4 + 16);
      uint64_t v28 = *(void *)(*a4 + 8);
      uint64_t v29 = 20 * ((v27 - v28) >> 3) - 1;
      if (v27 == v28) {
        uint64_t v29 = 0;
      }
      unint64_t v30 = v26[5] + v26[4];
      if (v29 == v30)
      {
        sub_1002F06B8(*a4);
        uint64_t v28 = v26[1];
        unint64_t v30 = v26[5] + v26[4];
      }
      unint64_t v31 = *(void *)(v28 + 8 * (v30 / 0x14)) + 200 * (v30 % 0x14);
      *(_OWORD *)unint64_t v31 = v61;
      __n128 v32 = v62;
      long long v33 = v63;
      long long v34 = v65;
      *(_OWORD *)(v31 + 48) = v64;
      *(_OWORD *)(v31 + 64) = v34;
      *(__n128 *)(v31 + 16) = v32;
      *(_OWORD *)(v31 + 32) = v33;
      long long v35 = *(_OWORD *)v66;
      long long v36 = *(_OWORD *)&v66[16];
      long long v37 = v68;
      *(_OWORD *)(v31 + 112) = v67;
      *(_OWORD *)(v31 + 128) = v37;
      *(_OWORD *)(v31 + 80) = v35;
      *(_OWORD *)(v31 + 96) = v36;
      __n128 result = v69;
      long long v38 = *(_OWORD *)v70;
      long long v39 = *(_OWORD *)&v70[16];
      *(void *)(v31 + 192) = v71;
      *(_OWORD *)(v31 + 160) = v38;
      *(_OWORD *)(v31 + 176) = v39;
      *(__n128 *)(v31 + 144) = result;
      ++v26[5];
    }
  }
  if (v17 == 1)
  {
    uint64_t v40 = *(void *)(a6 + 16);
    double v41 = *(uint64_t **)(v40 + 16);
    unint64_t v42 = *(uint64_t **)(v40 + 24);
    unint64_t v43 = (uint64_t *)sub_1002CEAE0(v40);
    double v72 = 1.0;
    result.n128_f64[0] = sub_1002CEBF4(v41, v42, v43, &v72);
    if (result.n128_f64[0] != 0.0
      && ((result.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000
       || fabs(result.n128_f64[0]) > v72 * 2.22044605e-16))
    {
      if (result.n128_f64[0] <= 0.0) {
        int v44 = 1;
      }
      else {
        int v44 = 2;
      }
      DWORD2(v67) = v44;
      DWORD2(v63) = 3;
      v62.n128_u32[0] = 5;
      long long v61 = *(_OWORD *)(a5 + 312);
      uint64_t v45 = *(void *)(a5 + 360);
      *(_OWORD *)&v66[8] = *(_OWORD *)(a5 + 344);
      *(void *)&v66[24] = v45;
      uint64_t v46 = *(void *)(a5 + 384);
      *(_OWORD *)&v70[8] = *(_OWORD *)(a5 + 368);
      *(void *)&v70[24] = v46;
      a7(&v61);
      double v47 = (void *)*a4;
      uint64_t v48 = v47[2];
      uint64_t v49 = v47[1];
      uint64_t v50 = 20 * ((v48 - v49) >> 3) - 1;
      if (v48 == v49) {
        uint64_t v50 = 0;
      }
      unint64_t v51 = v47[5] + v47[4];
      if (v50 == v51)
      {
        sub_1002F06B8((uint64_t)v47);
        uint64_t v49 = v47[1];
        unint64_t v51 = v47[5] + v47[4];
      }
      unint64_t v52 = *(void *)(v49 + 8 * (v51 / 0x14)) + 200 * (v51 % 0x14);
      *(_OWORD *)unint64_t v52 = v61;
      __n128 v53 = v62;
      long long v54 = v63;
      long long v55 = v65;
      *(_OWORD *)(v52 + 48) = v64;
      *(_OWORD *)(v52 + 64) = v55;
      *(__n128 *)(v52 + 16) = v53;
      *(_OWORD *)(v52 + 32) = v54;
      long long v56 = *(_OWORD *)v66;
      long long v57 = *(_OWORD *)&v66[16];
      long long v58 = v68;
      *(_OWORD *)(v52 + 112) = v67;
      *(_OWORD *)(v52 + 128) = v58;
      *(_OWORD *)(v52 + 80) = v56;
      *(_OWORD *)(v52 + 96) = v57;
      __n128 result = v69;
      long long v59 = *(_OWORD *)v70;
      long long v60 = *(_OWORD *)&v70[16];
      *(void *)(v52 + 192) = v71;
      *(_OWORD *)(v52 + 160) = v59;
      *(_OWORD *)(v52 + 176) = v60;
      *(__n128 *)(v52 + 144) = result;
      ++v47[5];
    }
  }
  return result;
}

int8x16_t sub_1002F102C(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &off_100465610;
  *(void *)(a1 + 8) = off_100465640;
  *(void *)(a1 + 16) = off_100465668;
  *(_DWORD *)(a1 + 48) = a3[1].i32[0];
  int8x16_t result = vextq_s8(*a3, *a3, 8uLL);
  *(int8x16_t *)(a1 + 32) = result;
  return result;
}

std::exception *sub_1002F10A8(std::exception *a1)
{
  a1[2].__vftable = (std::exception_vtbl *)&off_100451DC0;
  unint64_t v2 = a1[3].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2)) {
    a1[3].__vftable = 0;
  }
  std::exception::~exception(a1 + 1);
  return a1;
}

void sub_1002F112C()
{
}

void sub_1002F126C()
{
  std::exception::~exception(v0);
  operator delete();
}

void sub_1002F1298(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void sub_1002F12CC(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_1002F1670((uint64_t)exception, a1);
}

void sub_1002F1314(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002F1328(std::exception *a1)
{
  a1[2].__vftable = (std::exception_vtbl *)&off_100451DC0;
  unint64_t v2 = a1[3].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2)) {
    a1[3].__vftable = 0;
  }
  std::exception::~exception(a1 + 1);

  operator delete();
}

void sub_1002F13CC(std::exception *this)
{
  this[1].__vftable = (std::exception_vtbl *)&off_100451DC0;
  unint64_t v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2)) {
    this[2].__vftable = 0;
  }

  std::exception::~exception(this);
}

void sub_1002F1458(std::exception *this)
{
  this[1].__vftable = (std::exception_vtbl *)&off_100451DC0;
  unint64_t v2 = this[2].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2)) {
    this[2].__vftable = 0;
  }
  std::exception::~exception(this);

  operator delete();
}

const char *sub_1002F1500()
{
  return "Boost.Geometry Overlay invalid input exception";
}

void sub_1002F150C(std::exception *a1)
{
  a1->__vftable = (std::exception_vtbl *)&off_100451DC0;
  unint64_t v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2)) {
    a1[1].__vftable = 0;
  }

  std::exception::~exception(a1 - 1);
}

void sub_1002F1594(std::exception *a1)
{
  a1->__vftable = (std::exception_vtbl *)&off_100451DC0;
  unint64_t v2 = a1[1].__vftable;
  if (v2 && (*((unsigned int (**)(std::exception_vtbl *))v2->~exception + 4))(v2)) {
    a1[1].__vftable = 0;
  }
  std::exception::~exception(a1 - 1);

  operator delete();
}

void sub_1002F1638(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

uint64_t sub_1002F1670(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_100451ED0;
  *(void *)(a1 + 8) = &off_100465688;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100451DC0;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &off_100465610;
  *(void *)(a1 + 8) = off_100465640;
  *(void *)(a1 + 16) = off_100465668;
  return a1;
}

void sub_1002F178C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F17A0(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 10;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 20;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL sub_1002F1868(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, int a6, char a7)
{
  long long __p = 0;
  long long v34 = 0;
  uint64_t v35 = 0;
  uint64_t v12 = *a1;
  if (*a1 != a1[1])
  {
    uint64_t v13 = 0;
    do
    {
      long long v14 = *(double **)v12;
      long long v15 = *(double **)(v12 + 8);
      if ((unint64_t)v15 - *(void *)v12 >= 0x20)
      {
        *(void *)&long long v27 = 0;
        *((void *)&v27 + 1) = v13;
        uint64_t v28 = -1;
        sub_1002C8640(&__p, v14, v15, a3, a2, &v27, 0xAuLL);
      }
      int v17 = *(double ***)(v12 + 24);
      int64_t v16 = *(double ***)(v12 + 32);
      if (v17 != v16)
      {
        uint64_t v18 = 0;
        do
        {
          uint64_t v19 = *v17;
          uint64_t v20 = v17[1];
          if ((unint64_t)((char *)v20 - (char *)*v17) >= 0x20)
          {
            *(void *)&long long v27 = 0;
            *((void *)&v27 + 1) = v13;
            uint64_t v28 = v18;
            sub_1002C8640(&__p, v19, v20, a3, a2, &v27, 0xAuLL);
            int64_t v16 = *(double ***)(v12 + 32);
          }
          ++v18;
          v17 += 3;
        }
        while (v17 != v16);
      }
      v12 += 48;
      ++v13;
    }
    while (v12 != a1[1]);
  }
  *(void *)&long long v27 = a1;
  *((void *)&v27 + 1) = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  unint64_t v30 = a5;
  int v31 = a6;
  char v32 = a7;
  uint64_t v25 = a2;
  uint64_t v26 = a2;
  sub_1002F19FC((uint64_t *)&__p, (void **)&v27, (uint64_t)&v26, (uint64_t)&v25, 0x10uLL);
  int v21 = *a5;
  if (__p)
  {
    long long v34 = __p;
    operator delete(__p);
  }
  return v21 == 0;
}

void sub_1002F19D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F19FC(uint64_t *a1, void **a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = *a1;
  unint64_t v7 = (unsigned char *)a1[1];
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)&v7[-*a1] >> 3) <= a5)
  {
    if ((unsigned char *)v8 != v7)
    {
      uint64_t v13 = (unsigned char *)(v8 + 216);
      do
      {
        long long v14 = (unsigned char *)(v8 + 120);
        if ((unsigned char *)(v8 + 120) != v7)
        {
          for (unint64_t i = v13; i - 96 != v7; i += 120)
          {
            if (*(void *)(v8 + 48) >= *((void *)i - 8) && *(void *)(v8 + 32) <= *((void *)i - 6))
            {
              BOOL v16 = *(void *)(v8 + 56) >= *((void *)i - 7) && *(void *)(v8 + 40) <= *((void *)i - 5);
              BOOL v17 = v16 && *(unsigned char *)(v8 + 96) == 0;
              if (v17 && *i == 0)
              {
                if (!sub_1002F47AC(*((_DWORD *)a2 + 10), *a2, (int *)v8, *((_DWORD *)a2 + 10), *a2, (int *)i - 24, 0, *((unsigned __int8 *)a2 + 44), (uint64_t)a2[1], (uint64_t)a2[2], a2[3], a2[4]))return 0; {
                unint64_t v7 = (unsigned char *)a1[1];
                }
              }
            }
          }
        }
        v13 += 120;
        v8 += 120;
      }
      while (v14 != v7);
    }
    return 1;
  }
  long long __p = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  v20[0] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v20[1] = vdupq_n_s64(0x8000000000000000);
  sub_1002C90BC(a1, (uint64_t *)v20, (char **)&__p);
  uint64_t v12 = sub_1002F1BC8(v20, &__p, 0, a5, a2, a3, a4, (uint64_t)&v24);
  if (__p)
  {
    int v22 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1002F1BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F1BC8(void *a1, void *a2, unint64_t a3, unint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *a1;
  uint64_t v15 = a1[2];
  if ((uint64_t)*a1 >= 0) {
    uint64_t v16 = *a1;
  }
  else {
    uint64_t v16 = v14 + 1;
  }
  uint64_t v17 = v16 >> 1;
  if (v15 >= 0) {
    uint64_t v18 = a1[2];
  }
  else {
    uint64_t v18 = v15 + 1;
  }
  uint64_t v19 = v18 >> 1;
  long long v20 = *((_OWORD *)a1 + 1);
  int v21 = v15 - 2 * v19 + v14 - 2 * v17;
  long long v73 = *(_OWORD *)a1;
  uint64_t v75 = *((void *)&v20 + 1);
  *((void *)&v72[0] + 1) = *((void *)&v73 + 1);
  v72[1] = v20;
  uint64_t v74 = v19 + v17 + ((v21 + ((v21 & 0x80) >> 7)) << 24 >> 25);
  uint64_t v71 = 0;
  *(void *)&v72[0] = v74;
  __n128 v69 = 0;
  int v70 = 0;
  uint64_t v66 = 0;
  long long v67 = 0;
  uint64_t v68 = 0;
  long long __p = 0;
  long long v64 = 0;
  uint64_t v65 = 0;
  sub_1002CA168(&v73, v72, a2, &v69, (char **)&v66, (char **)&__p);
  uint64_t v23 = (char *)__p;
  int v22 = v64;
  if (__p == v64) {
    goto LABEL_32;
  }
  uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v25 = 0x8000000000000000;
  int64x2_t v61 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v62 = vdupq_n_s64(0x8000000000000000);
  int64_t v26 = 0x8000000000000000;
  long long v27 = (char *)__p;
  uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v29 = *(void **)v27;
    int64_t v30 = *(void *)(*(void *)v27 + 32);
    if (v30 < v28)
    {
      v61.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v28 = v30;
      if (v30 <= v26)
      {
LABEL_12:
        uint64_t v31 = v29[5];
        if (v31 >= v24) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
    }
    else if (v30 <= v26)
    {
      goto LABEL_12;
    }
    v62.i64[0] = v30;
    int64_t v26 = v30;
    uint64_t v31 = v29[5];
    if (v31 >= v24)
    {
LABEL_13:
      if (v31 <= v25) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
LABEL_21:
    v61.i64[1] = v31;
    uint64_t v24 = v31;
    if (v31 <= v25)
    {
LABEL_14:
      uint64_t v32 = v29[6];
      if (v32 >= v28) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
LABEL_22:
    v62.i64[1] = v31;
    int64_t v25 = v31;
    uint64_t v32 = v29[6];
    if (v32 >= v28)
    {
LABEL_15:
      if (v32 <= v26) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
LABEL_23:
    v61.i64[0] = v32;
    uint64_t v28 = v32;
    if (v32 <= v26)
    {
LABEL_16:
      uint64_t v33 = v29[7];
      if (v33 < v24) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
LABEL_24:
    v62.i64[0] = v32;
    int64_t v26 = v32;
    uint64_t v33 = v29[7];
    if (v33 < v24)
    {
LABEL_25:
      v61.i64[1] = v33;
      uint64_t v24 = v33;
      if (v33 <= v25) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
LABEL_17:
    if (v33 <= v25) {
      goto LABEL_9;
    }
LABEL_26:
    v62.i64[1] = v33;
    int64_t v25 = v33;
LABEL_9:
    v27 += 8;
  }
  while (v27 != v64);
  if (a3 <= 0x63 && (v64 - (unsigned char *)__p) >> 3 >= a4)
  {
    if (sub_1002F2334((long long *)v61.i8, &__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_30;
    }
    goto LABEL_98;
  }
  do
  {
    long long v36 = v23 + 8;
    if (v23 + 8 != v22)
    {
      for (unint64_t i = v23 + 8; i != v22; i += 8)
      {
        uint64_t v38 = *(void *)v23;
        uint64_t v39 = *(void *)i;
        if (*(void *)(*(void *)v23 + 48) >= *(void *)(*(void *)i + 32)
          && *(void *)(v38 + 32) <= *(void *)(v39 + 48))
        {
          BOOL v40 = *(void *)(v38 + 56) >= *(void *)(v39 + 40) && *(void *)(v38 + 40) <= *(void *)(v39 + 56);
          BOOL v41 = v40 && *(unsigned char *)(v38 + 96) == 0;
          if (v41 && *(unsigned char *)(v39 + 96) == 0)
          {
            if (!sub_1002F47AC(*((_DWORD *)a5 + 10), *a5, (int *)v38, *((_DWORD *)a5 + 10), *a5, (int *)v39, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3], a5[4]))goto LABEL_98; {
            int v22 = v64;
            }
          }
        }
      }
    }
    v23 += 8;
  }
  while (v36 != v22);
LABEL_30:
  if (sub_1002F21C0((long long *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v69, a3, a4, a5, a6, a7, a8)
    && (sub_1002F21C0((long long *)v61.i8, (uint64_t **)&__p, (uint64_t **)&v66, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    uint64_t v35 = (char *)v69;
    long long v34 = v70;
    if (a3 > 0x63 || (v70 - (unsigned char *)v69) >> 3 < a4)
    {
LABEL_73:
      while (v35 != v34)
      {
        unint64_t v43 = v35;
        v35 += 8;
        if (v35 != v34)
        {
          int v44 = v35;
          while (1)
          {
            uint64_t v45 = *(void *)v43;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v43 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002F47AC(*((_DWORD *)a5 + 10), *a5, (int *)v45, *((_DWORD *)a5 + 10), *a5, (int *)v46, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3], a5[4]))goto LABEL_98; {
                long long v34 = v70;
                }
              }
            }
            v44 += 8;
            if (v44 == v34) {
              goto LABEL_73;
            }
          }
        }
      }
    }
    else if (!sub_1002F2334(&v73, &v69, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    unint64_t v51 = (char *)v66;
    uint64_t v50 = v67;
    if (a3 > 0x63 || (v67 - (unsigned char *)v66) >> 3 < a4)
    {
      if (v66 == v67)
      {
        uint64_t v52 = 1;
      }
      else
      {
        do
        {
          __n128 v53 = v51;
          v51 += 8;
          if (v51 != v50)
          {
            for (int j = v51; j != v50; j += 8)
            {
              uint64_t v55 = *(void *)v53;
              uint64_t v56 = *(void *)j;
              if (*(void *)(*(void *)v53 + 48) >= *(void *)(*(void *)j + 32)
                && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
              {
                BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
                BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
                if (v58 && *(unsigned char *)(v56 + 96) == 0)
                {
                  if (!sub_1002F47AC(*((_DWORD *)a5 + 10), *a5, (int *)v55, *((_DWORD *)a5 + 10), *a5, (int *)v56, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3], a5[4]))goto LABEL_98; {
                  uint64_t v50 = v67;
                  }
                }
              }
            }
          }
          uint64_t v52 = 1;
        }
        while (v51 != v50);
      }
    }
    else
    {
      uint64_t v52 = sub_1002F2334(v72, &v66, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    uint64_t v52 = 0;
  }
  if (__p)
  {
    long long v64 = (char *)__p;
    operator delete(__p);
  }
  if (v66)
  {
    long long v67 = (char *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    int v70 = (char *)v69;
    operator delete(v69);
  }
  return v52;
}

void sub_1002F215C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    int64_t v26 = a21;
    if (!a21)
    {
LABEL_3:
      long long v27 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v26 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  long long v27 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F21C0(long long *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_1002F3928(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 != v12)
  {
    uint64_t v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        uint64_t v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            uint64_t v17 = *v13;
            uint64_t v18 = *v16;
            if (*(void *)(*v13 + 48) >= *(void *)(*v16 + 32) && *(void *)(v17 + 32) <= *(void *)(v18 + 48))
            {
              BOOL v19 = *(void *)(v17 + 56) >= *(void *)(v18 + 40) && *(void *)(v17 + 40) <= *(void *)(v18 + 56);
              BOOL v20 = v19 && *(unsigned char *)(v17 + 96) == 0;
              if (v20 && *(unsigned char *)(v18 + 96) == 0)
              {
                uint64_t result = sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v17, *((_DWORD *)a6 + 10), *a6, (int *)v18, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]);
                if (!result) {
                  return result;
                }
                uint64_t v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          uint64_t v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_1002F2334(long long *a1, void *a2, unint64_t a3, unint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *((void *)a1 + 2);
  uint64_t v14 = *((void *)a1 + 3);
  uint64_t v16 = *((void *)a1 + 1);
  if (v16 >= 0) {
    uint64_t v17 = *((void *)a1 + 1);
  }
  else {
    uint64_t v17 = v16 + 1;
  }
  uint64_t v18 = v17 >> 1;
  if (v14 >= 0) {
    uint64_t v19 = *((void *)a1 + 3);
  }
  else {
    uint64_t v19 = v14 + 1;
  }
  long long v20 = a1[1];
  long long v73 = *a1;
  v71[0] = v73;
  long long v72 = v20;
  uint64_t v74 = v15;
  uint64_t v75 = (v19 >> 1)
      + v18
      + ((int)((v14
              - 2 * (v19 >> 1)
              + v16
              - 2 * v18
              + (((v14 - 2 * (v19 >> 1) + v16 - 2 * v18) & 0x80) >> 7)) << 24) >> 25);
  v71[1] = v75;
  uint64_t v68 = 0;
  __n128 v69 = 0;
  uint64_t v70 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  long long __p = 0;
  long long v63 = 0;
  uint64_t v64 = 0;
  sub_1002CA168(&v73, v71, a2, &v68, (char **)&v65, (char **)&__p);
  int v22 = (char *)__p;
  int v21 = v63;
  if (__p == v63) {
    goto LABEL_32;
  }
  uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v24 = 0x8000000000000000;
  int64x2_t v60 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v61 = vdupq_n_s64(0x8000000000000000);
  int64_t v25 = 0x8000000000000000;
  int64_t v26 = (char *)__p;
  uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    uint64_t v28 = *(void **)v26;
    int64_t v29 = *(void *)(*(void *)v26 + 32);
    if (v29 < v27)
    {
      v60.i64[0] = *(void *)(*(void *)v26 + 32);
      uint64_t v27 = v29;
      if (v29 <= v25)
      {
LABEL_12:
        uint64_t v30 = v28[5];
        if (v30 >= v23) {
          goto LABEL_13;
        }
        goto LABEL_21;
      }
    }
    else if (v29 <= v25)
    {
      goto LABEL_12;
    }
    v61.i64[0] = v29;
    int64_t v25 = v29;
    uint64_t v30 = v28[5];
    if (v30 >= v23)
    {
LABEL_13:
      if (v30 <= v24) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
LABEL_21:
    v60.i64[1] = v30;
    uint64_t v23 = v30;
    if (v30 <= v24)
    {
LABEL_14:
      uint64_t v31 = v28[6];
      if (v31 >= v27) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
LABEL_22:
    v61.i64[1] = v30;
    int64_t v24 = v30;
    uint64_t v31 = v28[6];
    if (v31 >= v27)
    {
LABEL_15:
      if (v31 <= v25) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
LABEL_23:
    v60.i64[0] = v31;
    uint64_t v27 = v31;
    if (v31 <= v25)
    {
LABEL_16:
      uint64_t v32 = v28[7];
      if (v32 < v23) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
LABEL_24:
    v61.i64[0] = v31;
    int64_t v25 = v31;
    uint64_t v32 = v28[7];
    if (v32 < v23)
    {
LABEL_25:
      v60.i64[1] = v32;
      uint64_t v23 = v32;
      if (v32 <= v24) {
        goto LABEL_9;
      }
      goto LABEL_26;
    }
LABEL_17:
    if (v32 <= v24) {
      goto LABEL_9;
    }
LABEL_26:
    v61.i64[1] = v32;
    int64_t v24 = v32;
LABEL_9:
    v26 += 8;
  }
  while (v26 != v63);
  if (a3 <= 0x63 && (v63 - (unsigned char *)__p) >> 3 >= a4)
  {
    if (sub_1002F1BC8(&v60, &__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_30;
    }
    goto LABEL_98;
  }
  do
  {
    uint64_t v35 = v22 + 8;
    if (v22 + 8 != v21)
    {
      for (unint64_t i = v22 + 8; i != v21; i += 8)
      {
        uint64_t v37 = *(void *)v22;
        uint64_t v38 = *(void *)i;
        if (*(void *)(*(void *)v22 + 48) >= *(void *)(*(void *)i + 32)
          && *(void *)(v37 + 32) <= *(void *)(v38 + 48))
        {
          BOOL v39 = *(void *)(v37 + 56) >= *(void *)(v38 + 40) && *(void *)(v37 + 40) <= *(void *)(v38 + 56);
          BOOL v40 = v39 && *(unsigned char *)(v37 + 96) == 0;
          if (v40 && *(unsigned char *)(v38 + 96) == 0)
          {
            if (!sub_1002F47AC(*((_DWORD *)a5 + 10), *a5, (int *)v37, *((_DWORD *)a5 + 10), *a5, (int *)v38, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3], a5[4]))goto LABEL_98; {
            int v21 = v63;
            }
          }
        }
      }
    }
    v22 += 8;
  }
  while (v35 != v21);
LABEL_30:
  if (sub_1002F2930(v60.i64, (uint64_t **)&__p, (uint64_t **)&v68, a3, a4, a5, a6, a7, a8)
    && (sub_1002F2930(v60.i64, (uint64_t **)&__p, (uint64_t **)&v65, a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
LABEL_32:
    long long v34 = (char *)v68;
    uint64_t v33 = v69;
    if (a3 > 0x63 || (v69 - (unsigned char *)v68) >> 3 < a4)
    {
LABEL_73:
      while (v34 != v33)
      {
        unint64_t v42 = v34;
        v34 += 8;
        if (v34 != v33)
        {
          unint64_t v43 = v34;
          while (1)
          {
            uint64_t v44 = *(void *)v42;
            uint64_t v45 = *(void *)v43;
            if (*(void *)(*(void *)v42 + 48) >= *(void *)(*(void *)v43 + 32)
              && *(void *)(v44 + 32) <= *(void *)(v45 + 48))
            {
              BOOL v46 = *(void *)(v44 + 56) >= *(void *)(v45 + 40) && *(void *)(v44 + 40) <= *(void *)(v45 + 56);
              BOOL v47 = v46 && *(unsigned char *)(v44 + 96) == 0;
              if (v47 && *(unsigned char *)(v45 + 96) == 0)
              {
                if (!sub_1002F47AC(*((_DWORD *)a5 + 10), *a5, (int *)v44, *((_DWORD *)a5 + 10), *a5, (int *)v45, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3], a5[4]))goto LABEL_98; {
                uint64_t v33 = v69;
                }
              }
            }
            v43 += 8;
            if (v43 == v33) {
              goto LABEL_73;
            }
          }
        }
      }
    }
    else if (!sub_1002F1BC8(&v73, &v68, a3 + 1, a4, a5, a6, a7, a8))
    {
      goto LABEL_98;
    }
    uint64_t v50 = (char *)v65;
    uint64_t v49 = v66;
    if (a3 > 0x63 || (v66 - (unsigned char *)v65) >> 3 < a4)
    {
      if (v65 == v66)
      {
        uint64_t v51 = 1;
      }
      else
      {
        do
        {
          uint64_t v52 = v50;
          v50 += 8;
          if (v50 != v49)
          {
            for (int j = v50; j != v49; j += 8)
            {
              uint64_t v54 = *(void *)v52;
              uint64_t v55 = *(void *)j;
              if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)j + 32)
                && *(void *)(v54 + 32) <= *(void *)(v55 + 48))
              {
                BOOL v56 = *(void *)(v54 + 56) >= *(void *)(v55 + 40) && *(void *)(v54 + 40) <= *(void *)(v55 + 56);
                BOOL v57 = v56 && *(unsigned char *)(v54 + 96) == 0;
                if (v57 && *(unsigned char *)(v55 + 96) == 0)
                {
                  if (!sub_1002F47AC(*((_DWORD *)a5 + 10), *a5, (int *)v54, *((_DWORD *)a5 + 10), *a5, (int *)v55, 0, *((unsigned __int8 *)a5 + 44), (uint64_t)a5[1], (uint64_t)a5[2], a5[3], a5[4]))goto LABEL_98; {
                  uint64_t v49 = v66;
                  }
                }
              }
            }
          }
          uint64_t v51 = 1;
        }
        while (v50 != v49);
      }
    }
    else
    {
      uint64_t v51 = sub_1002F1BC8(v71, &v65, a3 + 1, a4, a5, a6, a7, a8);
    }
  }
  else
  {
LABEL_98:
    uint64_t v51 = 0;
  }
  if (__p)
  {
    long long v63 = (char *)__p;
    operator delete(__p);
  }
  if (v65)
  {
    uint64_t v66 = (char *)v65;
    operator delete(v65);
  }
  if (v68)
  {
    __n128 v69 = (char *)v68;
    operator delete(v68);
  }
  return v51;
}

void sub_1002F28CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    int64_t v26 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v27 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int64_t v26 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  uint64_t v27 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F2930(uint64_t *a1, uint64_t **a2, uint64_t **a3, unint64_t a4, unint64_t a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  if (a5 <= v12 - *a2 && a4 <= 0x63 && a3[1] - *a3 >= a5) {
    return sub_1002F2AA4(a1, a2, a3, a4 + 1, a5, a6, a7, a8, a7, a8, a9);
  }
  if (v13 != v12)
  {
    uint64_t v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        uint64_t v16 = *a3;
        if (*a3 != v15)
        {
          do
          {
            uint64_t v17 = *v13;
            uint64_t v18 = *v16;
            if (*(void *)(*v13 + 48) >= *(void *)(*v16 + 32) && *(void *)(v17 + 32) <= *(void *)(v18 + 48))
            {
              BOOL v19 = *(void *)(v17 + 56) >= *(void *)(v18 + 40) && *(void *)(v17 + 40) <= *(void *)(v18 + 56);
              BOOL v20 = v19 && *(unsigned char *)(v17 + 96) == 0;
              if (v20 && *(unsigned char *)(v18 + 96) == 0)
              {
                uint64_t result = sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v17, *((_DWORD *)a6 + 10), *a6, (int *)v18, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]);
                if (!result) {
                  return result;
                }
                uint64_t v15 = a3[1];
              }
            }
            ++v16;
          }
          while (v16 != v15);
          uint64_t v12 = a2[1];
        }
        ++v13;
      }
      while (v13 != v12);
    }
  }
  return 1;
}

uint64_t sub_1002F2AA4(uint64_t *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = *a1;
  uint64_t v18 = a1[2];
  if (*a1 >= 0) {
    uint64_t v19 = *a1;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  uint64_t v20 = v19 >> 1;
  long long v22 = *(_OWORD *)a1;
  long long v21 = *((_OWORD *)a1 + 1);
  long long v146 = *(_OWORD *)a1;
  long long v147 = v21;
  if (v18 >= 0) {
    uint64_t v23 = v18;
  }
  else {
    uint64_t v23 = v18 + 1;
  }
  uint64_t v24 = v23 >> 1;
  v144[1] = *((void *)&v22 + 1);
  long long v145 = v21;
  int v25 = v18 - 2 * v24 + v17 - 2 * v20;
  *(void *)&long long v147 = v24 + v20 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[0] = v147;
  uint64_t v141 = 0;
  long long v142 = 0;
  uint64_t v143 = 0;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v135 = 0;
  __int16 v136 = 0;
  uint64_t v137 = 0;
  uint64_t v132 = 0;
  int v133 = 0;
  uint64_t v134 = 0;
  uint64_t v129 = 0;
  long long v130 = 0;
  uint64_t v131 = 0;
  long long __p = 0;
  long long v127 = 0;
  uint64_t v128 = 0;
  sub_1002CA168(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_1002CA168(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  uint64_t v27 = (char *)v135;
  int64_t v26 = v136;
  if (v135 == v136) {
    goto LABEL_147;
  }
  int64_t v29 = (char *)__p;
  uint64_t v28 = v127;
  if (a5 > (v136 - (unsigned char *)v135) >> 3 || a4 > 0x63 || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        uint64_t v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            uint64_t v45 = *(void *)v27;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v27 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v45, *((_DWORD *)a6 + 10), *a6, (int *)v46, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
                uint64_t v28 = v127;
                }
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          int64_t v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v32 = 0x8000000000000000;
  uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    long long v34 = *(void **)v27;
    int64_t v35 = *(void *)(*(void *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        uint64_t v36 = v34[5];
        if (v36 < v30) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v33 = v35;
      if (v35 <= v32) {
        goto LABEL_15;
      }
    }
    v125.i64[0] = v35;
    int64_t v32 = v35;
    uint64_t v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      uint64_t v30 = v36;
      if (v36 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      uint64_t v37 = v34[6];
      if (v37 < v33) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    int64_t v31 = v36;
    uint64_t v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      uint64_t v33 = v37;
      if (v37 <= v32) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      uint64_t v38 = v34[7];
      if (v38 >= v30) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    int64_t v32 = v37;
    uint64_t v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    uint64_t v30 = v38;
    if (v38 <= v31) {
      goto LABEL_12;
    }
LABEL_29:
    v125.i64[1] = v38;
    int64_t v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    BOOL v39 = *(void **)v29;
    int64_t v40 = *(void *)(*(void *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        uint64_t v41 = v39[5];
        if (v41 < v30) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v29 + 32);
      uint64_t v33 = v40;
      if (v40 <= v32) {
        goto LABEL_34;
      }
    }
    v125.i64[0] = v40;
    int64_t v32 = v40;
    uint64_t v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      uint64_t v30 = v41;
      if (v41 <= v31) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      uint64_t v42 = v39[6];
      if (v42 < v33) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    int64_t v31 = v41;
    uint64_t v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      uint64_t v33 = v42;
      if (v42 <= v32) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      uint64_t v43 = v39[7];
      if (v43 >= v30) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    int64_t v32 = v42;
    uint64_t v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    uint64_t v30 = v43;
    if (v43 <= v31) {
      goto LABEL_30;
    }
LABEL_48:
    v125.i64[1] = v43;
    int64_t v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002F3928(&v124, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
    goto LABEL_278;
  }
LABEL_72:
  uint64_t v50 = v133;
  if (a5 > (v133 - (unsigned char *)v132) >> 3)
  {
    uint64_t v52 = (char *)v135;
    uint64_t v51 = v136;
    goto LABEL_75;
  }
  uint64_t v52 = (char *)v135;
  uint64_t v51 = v136;
  if (a5 <= (v130 - (unsigned char *)v129) >> 3 && a4 <= 0x63 && (v136 - (unsigned char *)v135) >> 3 >= a5)
  {
    int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v67 = 0x8000000000000000;
      int64_t v68 = 0x8000000000000000;
      uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v70 = *(void **)v52;
        int64_t v71 = *(void *)(*(void *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            uint64_t v72 = v70[5];
            if (v72 < v66) {
              goto LABEL_129;
            }
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(void *)(*(void *)v52 + 32);
          uint64_t v69 = v71;
          if (v71 <= v68) {
            goto LABEL_128;
          }
        }
        v125.i64[0] = v71;
        int64_t v68 = v71;
        uint64_t v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          uint64_t v66 = v72;
          if (v72 <= v67) {
            goto LABEL_130;
          }
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          uint64_t v73 = v70[6];
          if (v73 < v69) {
            goto LABEL_131;
          }
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        int64_t v67 = v72;
        uint64_t v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          uint64_t v69 = v73;
          if (v73 <= v68) {
            goto LABEL_132;
          }
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          uint64_t v74 = v70[7];
          if (v74 < v66) {
            goto LABEL_133;
          }
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        int64_t v68 = v73;
        uint64_t v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          uint64_t v66 = v74;
          if (v74 > v67) {
            goto LABEL_142;
          }
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          int64_t v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002F3928(&v124, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002F3928(&v124, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    uint64_t v115 = 0;
    long long v116 = (char *)__p;
    if (!__p) {
      goto LABEL_280;
    }
LABEL_279:
    long long v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51) {
      goto LABEL_147;
    }
  }
  else
  {
    do
    {
      uint64_t v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          uint64_t v55 = *(void *)v52;
          uint64_t v56 = *(void *)v54;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v54 + 32)
            && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
          {
            BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
            BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
            if (v58 && *(unsigned char *)(v56 + 96) == 0)
            {
              if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v55, *((_DWORD *)a6 + 10), *a6, (int *)v56, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
              uint64_t v50 = v133;
              }
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    uint64_t v52 = (char *)v135;
    if (v135 == v51) {
      goto LABEL_147;
    }
  }
  __n128 v53 = v130;
  if (v129 != v130)
  {
    do
    {
      int64x2_t v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          uint64_t v61 = *(void *)v52;
          uint64_t v62 = *(void *)v60;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v60 + 32)
            && *(void *)(v61 + 32) <= *(void *)(v62 + 48))
          {
            BOOL v63 = *(void *)(v61 + 56) >= *(void *)(v62 + 40) && *(void *)(v61 + 40) <= *(void *)(v62 + 56);
            BOOL v64 = v63 && *(unsigned char *)(v61 + 96) == 0;
            if (v64 && *(unsigned char *)(v62 + 96) == 0)
            {
              if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v61, *((_DWORD *)a6 + 10), *a6, (int *)v62, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
              __n128 v53 = v130;
              }
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  uint64_t v76 = (char *)__p;
  uint64_t v75 = v127;
  if (__p == v127) {
    goto LABEL_198;
  }
  int v78 = (char *)v141;
  int v77 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3
    || a5 > (v139 - (unsigned char *)v138) >> 3
    || a4 > 0x63
    || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      long long v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          uint64_t v89 = *(void *)v78;
          uint64_t v90 = *(void *)v88;
          if (*(void *)(*(void *)v78 + 48) >= *(void *)(*(void *)v88 + 32)
            && *(void *)(v89 + 32) <= *(void *)(v90 + 48))
          {
            BOOL v91 = *(void *)(v89 + 56) >= *(void *)(v90 + 40) && *(void *)(v89 + 40) <= *(void *)(v90 + 56);
            BOOL v92 = v91 && *(unsigned char *)(v89 + 96) == 0;
            if (v92 && *(unsigned char *)(v90 + 96) == 0)
            {
              if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v89, *((_DWORD *)a6 + 10), *a6, (int *)v90, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
              uint64_t v75 = v127;
              }
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        int v77 = v142;
      }
      v78 += 8;
    }
    uint64_t v95 = (char *)v138;
    long long v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        long long v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            uint64_t v100 = *(void *)v95;
            uint64_t v101 = *(void *)v99;
            if (*(void *)(*(void *)v95 + 48) >= *(void *)(*(void *)v99 + 32)
              && *(void *)(v100 + 32) <= *(void *)(v101 + 48))
            {
              BOOL v102 = *(void *)(v100 + 56) >= *(void *)(v101 + 40)
                  && *(void *)(v100 + 40) <= *(void *)(v101 + 56);
              BOOL v103 = v102 && *(unsigned char *)(v100 + 96) == 0;
              if (v103 && *(unsigned char *)(v101 + 96) == 0)
              {
                if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v100, *((_DWORD *)a6 + 10), *a6, (int *)v101, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
                uint64_t v75 = v127;
                }
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          long long v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  uint64_t v79 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v80 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v81 = 0x8000000000000000;
  uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    uint64_t v83 = *(void **)v76;
    int64_t v84 = *(void *)(*(void *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81) {
        goto LABEL_164;
      }
LABEL_156:
      uint64_t v85 = v83[5];
      if (v85 < v79) {
        goto LABEL_157;
      }
LABEL_165:
      if (v85 > v80) {
        goto LABEL_166;
      }
LABEL_158:
      uint64_t v86 = v83[6];
      if (v86 < v82) {
        goto LABEL_159;
      }
LABEL_167:
      if (v86 > v81) {
        goto LABEL_168;
      }
LABEL_160:
      int64_t v87 = v83[7];
      if (v87 < v79) {
        goto LABEL_161;
      }
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        int64_t v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v76 + 32);
      uint64_t v82 = v84;
      if (v84 <= v81) {
        goto LABEL_156;
      }
LABEL_164:
      v125.i64[0] = v84;
      int64_t v81 = v84;
      uint64_t v85 = v83[5];
      if (v85 >= v79) {
        goto LABEL_165;
      }
LABEL_157:
      v124.i64[1] = v85;
      uint64_t v79 = v85;
      if (v85 <= v80) {
        goto LABEL_158;
      }
LABEL_166:
      v125.i64[1] = v85;
      int64_t v80 = v85;
      uint64_t v86 = v83[6];
      if (v86 >= v82) {
        goto LABEL_167;
      }
LABEL_159:
      v124.i64[0] = v86;
      uint64_t v82 = v86;
      if (v86 <= v81) {
        goto LABEL_160;
      }
LABEL_168:
      v125.i64[0] = v86;
      int64_t v81 = v86;
      int64_t v87 = v83[7];
      if (v87 >= v79) {
        goto LABEL_169;
      }
LABEL_161:
      v124.i64[1] = v87;
      uint64_t v79 = v87;
      if (v87 > v80) {
        goto LABEL_170;
      }
    }
    v76 += 8;
    if (v76 != v127) {
      continue;
    }
    break;
  }
  if (!sub_1002F3928(&v124, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002F3928(&v124, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  uint64_t v98 = (char *)v141;
  uint64_t v97 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3 || a4 > 0x63 || (v133 - (unsigned char *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      long long v105 = v133;
      if (v132 != v133)
      {
        do
        {
          double v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              uint64_t v109 = *(void *)v98;
              uint64_t v110 = *(void *)v108;
              if (*(void *)(*(void *)v98 + 48) >= *(void *)(*(void *)v108 + 32)
                && *(void *)(v109 + 32) <= *(void *)(v110 + 48))
              {
                BOOL v111 = *(void *)(v109 + 56) >= *(void *)(v110 + 40)
                    && *(void *)(v109 + 40) <= *(void *)(v110 + 56);
                BOOL v112 = v111 && *(unsigned char *)(v109 + 96) == 0;
                if (v112 && *(unsigned char *)(v110 + 96) == 0)
                {
                  if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v109, *((_DWORD *)a6 + 10), *a6, (int *)v110, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
                  long long v105 = v133;
                  }
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            uint64_t v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002F3928(&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  long long v107 = (char *)v138;
  int v106 = v139;
  if (a5 > (v139 - (unsigned char *)v138) >> 3 || a4 > 0x63 || (v130 - (unsigned char *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      uint64_t v114 = v130;
      if (v129 != v130)
      {
        do
        {
          uint64_t v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              uint64_t v118 = *(void *)v107;
              uint64_t v119 = *(void *)v117;
              if (*(void *)(*(void *)v107 + 48) >= *(void *)(*(void *)v117 + 32)
                && *(void *)(v118 + 32) <= *(void *)(v119 + 48))
              {
                BOOL v120 = *(void *)(v118 + 56) >= *(void *)(v119 + 40)
                    && *(void *)(v118 + 40) <= *(void *)(v119 + 56);
                BOOL v121 = v120 && *(unsigned char *)(v118 + 96) == 0;
                if (v121 && *(unsigned char *)(v119 + 96) == 0)
                {
                  if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v118, *((_DWORD *)a6 + 10), *a6, (int *)v119, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
                  uint64_t v114 = v130;
                  }
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            int v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002F3928(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v115 = 1;
  long long v116 = (char *)__p;
  if (__p) {
    goto LABEL_279;
  }
LABEL_280:
  if (v129)
  {
    long long v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    int v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    __int16 v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    uint64_t v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    long long v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002F3864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    long long v34 = a20;
    if (!a20)
    {
LABEL_3:
      int64_t v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    long long v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  int64_t v35 = a23;
  if (!a23)
  {
LABEL_4:
    uint64_t v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  uint64_t v36 = a26;
  if (!a26)
  {
LABEL_5:
    uint64_t v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  uint64_t v37 = a29;
  if (!a29)
  {
LABEL_6:
    uint64_t v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  uint64_t v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F3928(long long *a1, void *a2, void *a3, unint64_t a4, unint64_t a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = *((void *)a1 + 2);
  uint64_t v17 = *((void *)a1 + 3);
  uint64_t v19 = *((void *)a1 + 1);
  if (v19 >= 0) {
    uint64_t v20 = *((void *)a1 + 1);
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  uint64_t v21 = v20 >> 1;
  long long v22 = *a1;
  long long v145 = a1[1];
  long long v146 = v22;
  if (v17 >= 0) {
    uint64_t v23 = v17;
  }
  else {
    uint64_t v23 = v17 + 1;
  }
  uint64_t v24 = v23 >> 1;
  v144[0] = v22;
  int v25 = v17 - 2 * v24 + v19 - 2 * v21;
  uint64_t v147 = v18;
  uint64_t v148 = v24 + v21 + ((v25 + ((v25 & 0x80) >> 7)) << 24 >> 25);
  v144[1] = v148;
  uint64_t v141 = 0;
  long long v142 = 0;
  uint64_t v143 = 0;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v135 = 0;
  __int16 v136 = 0;
  uint64_t v137 = 0;
  uint64_t v132 = 0;
  int v133 = 0;
  uint64_t v134 = 0;
  uint64_t v129 = 0;
  long long v130 = 0;
  uint64_t v131 = 0;
  long long __p = 0;
  long long v127 = 0;
  uint64_t v128 = 0;
  sub_1002CA168(&v146, v144, a2, &v141, (char **)&v138, (char **)&v135);
  sub_1002CA168(&v146, v144, a3, &v132, (char **)&v129, (char **)&__p);
  uint64_t v27 = (char *)v135;
  int64_t v26 = v136;
  if (v135 == v136) {
    goto LABEL_147;
  }
  int64_t v29 = (char *)__p;
  uint64_t v28 = v127;
  if (a5 > (v136 - (unsigned char *)v135) >> 3 || a4 > 0x63 || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v127)
    {
      do
      {
        uint64_t v44 = (char *)__p;
        if (__p != v28)
        {
          do
          {
            uint64_t v45 = *(void *)v27;
            uint64_t v46 = *(void *)v44;
            if (*(void *)(*(void *)v27 + 48) >= *(void *)(*(void *)v44 + 32)
              && *(void *)(v45 + 32) <= *(void *)(v46 + 48))
            {
              BOOL v47 = *(void *)(v45 + 56) >= *(void *)(v46 + 40) && *(void *)(v45 + 40) <= *(void *)(v46 + 56);
              BOOL v48 = v47 && *(unsigned char *)(v45 + 96) == 0;
              if (v48 && *(unsigned char *)(v46 + 96) == 0)
              {
                if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v45, *((_DWORD *)a6 + 10), *a6, (int *)v46, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
                uint64_t v28 = v127;
                }
              }
            }
            v44 += 8;
          }
          while (v44 != v28);
          int64_t v26 = v136;
        }
        v27 += 8;
      }
      while (v27 != v26);
    }
    goto LABEL_72;
  }
  uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v31 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v32 = 0x8000000000000000;
  uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    long long v34 = *(void **)v27;
    int64_t v35 = *(void *)(*(void *)v27 + 32);
    if (v35 >= v33)
    {
      if (v35 <= v32)
      {
LABEL_15:
        uint64_t v36 = v34[5];
        if (v36 < v30) {
          goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v27 + 32);
      uint64_t v33 = v35;
      if (v35 <= v32) {
        goto LABEL_15;
      }
    }
    v125.i64[0] = v35;
    int64_t v32 = v35;
    uint64_t v36 = v34[5];
    if (v36 < v30)
    {
LABEL_16:
      v124.i64[1] = v36;
      uint64_t v30 = v36;
      if (v36 <= v31) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }
LABEL_24:
    if (v36 <= v31)
    {
LABEL_17:
      uint64_t v37 = v34[6];
      if (v37 < v33) {
        goto LABEL_18;
      }
      goto LABEL_26;
    }
LABEL_25:
    v125.i64[1] = v36;
    int64_t v31 = v36;
    uint64_t v37 = v34[6];
    if (v37 < v33)
    {
LABEL_18:
      v124.i64[0] = v37;
      uint64_t v33 = v37;
      if (v37 <= v32) {
        goto LABEL_19;
      }
      goto LABEL_27;
    }
LABEL_26:
    if (v37 <= v32)
    {
LABEL_19:
      uint64_t v38 = v34[7];
      if (v38 >= v30) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
LABEL_27:
    v125.i64[0] = v37;
    int64_t v32 = v37;
    uint64_t v38 = v34[7];
    if (v38 >= v30)
    {
LABEL_28:
      if (v38 <= v31) {
        goto LABEL_12;
      }
      goto LABEL_29;
    }
LABEL_20:
    v124.i64[1] = v38;
    uint64_t v30 = v38;
    if (v38 <= v31) {
      goto LABEL_12;
    }
LABEL_29:
    v125.i64[1] = v38;
    int64_t v31 = v38;
LABEL_12:
    v27 += 8;
  }
  while (v27 != v136);
  while (v29 != v127)
  {
    BOOL v39 = *(void **)v29;
    int64_t v40 = *(void *)(*(void *)v29 + 32);
    if (v40 >= v33)
    {
      if (v40 <= v32)
      {
LABEL_34:
        uint64_t v41 = v39[5];
        if (v41 < v30) {
          goto LABEL_35;
        }
        goto LABEL_43;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v29 + 32);
      uint64_t v33 = v40;
      if (v40 <= v32) {
        goto LABEL_34;
      }
    }
    v125.i64[0] = v40;
    int64_t v32 = v40;
    uint64_t v41 = v39[5];
    if (v41 < v30)
    {
LABEL_35:
      v124.i64[1] = v41;
      uint64_t v30 = v41;
      if (v41 <= v31) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    if (v41 <= v31)
    {
LABEL_36:
      uint64_t v42 = v39[6];
      if (v42 < v33) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    v125.i64[1] = v41;
    int64_t v31 = v41;
    uint64_t v42 = v39[6];
    if (v42 < v33)
    {
LABEL_37:
      v124.i64[0] = v42;
      uint64_t v33 = v42;
      if (v42 <= v32) {
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    if (v42 <= v32)
    {
LABEL_38:
      uint64_t v43 = v39[7];
      if (v43 >= v30) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
LABEL_46:
    v125.i64[0] = v42;
    int64_t v32 = v42;
    uint64_t v43 = v39[7];
    if (v43 >= v30)
    {
LABEL_47:
      if (v43 <= v31) {
        goto LABEL_30;
      }
      goto LABEL_48;
    }
LABEL_39:
    v124.i64[1] = v43;
    uint64_t v30 = v43;
    if (v43 <= v31) {
      goto LABEL_30;
    }
LABEL_48:
    v125.i64[1] = v43;
    int64_t v31 = v43;
LABEL_30:
    v29 += 8;
  }
  if ((sub_1002F2AA4(v124.i64, &v135, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
    goto LABEL_278;
  }
LABEL_72:
  uint64_t v50 = v133;
  if (a5 > (v133 - (unsigned char *)v132) >> 3)
  {
    uint64_t v52 = (char *)v135;
    uint64_t v51 = v136;
    goto LABEL_75;
  }
  uint64_t v52 = (char *)v135;
  uint64_t v51 = v136;
  if (a5 <= (v130 - (unsigned char *)v129) >> 3 && a4 <= 0x63 && (v136 - (unsigned char *)v135) >> 3 >= a5)
  {
    int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
    if (v135 != v136)
    {
      uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
      int64_t v67 = 0x8000000000000000;
      int64_t v68 = 0x8000000000000000;
      uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
      do
      {
        uint64_t v70 = *(void **)v52;
        int64_t v71 = *(void *)(*(void *)v52 + 32);
        if (v71 >= v69)
        {
          if (v71 <= v68)
          {
LABEL_128:
            uint64_t v72 = v70[5];
            if (v72 < v66) {
              goto LABEL_129;
            }
            goto LABEL_137;
          }
        }
        else
        {
          v124.i64[0] = *(void *)(*(void *)v52 + 32);
          uint64_t v69 = v71;
          if (v71 <= v68) {
            goto LABEL_128;
          }
        }
        v125.i64[0] = v71;
        int64_t v68 = v71;
        uint64_t v72 = v70[5];
        if (v72 < v66)
        {
LABEL_129:
          v124.i64[1] = v72;
          uint64_t v66 = v72;
          if (v72 <= v67) {
            goto LABEL_130;
          }
          goto LABEL_138;
        }
LABEL_137:
        if (v72 <= v67)
        {
LABEL_130:
          uint64_t v73 = v70[6];
          if (v73 < v69) {
            goto LABEL_131;
          }
          goto LABEL_139;
        }
LABEL_138:
        v125.i64[1] = v72;
        int64_t v67 = v72;
        uint64_t v73 = v70[6];
        if (v73 < v69)
        {
LABEL_131:
          v124.i64[0] = v73;
          uint64_t v69 = v73;
          if (v73 <= v68) {
            goto LABEL_132;
          }
          goto LABEL_140;
        }
LABEL_139:
        if (v73 <= v68)
        {
LABEL_132:
          uint64_t v74 = v70[7];
          if (v74 < v66) {
            goto LABEL_133;
          }
          goto LABEL_141;
        }
LABEL_140:
        v125.i64[0] = v73;
        int64_t v68 = v73;
        uint64_t v74 = v70[7];
        if (v74 < v66)
        {
LABEL_133:
          v124.i64[1] = v74;
          uint64_t v66 = v74;
          if (v74 > v67) {
            goto LABEL_142;
          }
          goto LABEL_125;
        }
LABEL_141:
        if (v74 > v67)
        {
LABEL_142:
          v125.i64[1] = v74;
          int64_t v67 = v74;
        }
LABEL_125:
        v52 += 8;
      }
      while (v52 != v136);
    }
    if (sub_1002F2AA4(v124.i64, &v135, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      && (sub_1002F2AA4(v124.i64, &v135, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) != 0)
    {
      goto LABEL_147;
    }
LABEL_278:
    uint64_t v115 = 0;
    long long v116 = (char *)__p;
    if (!__p) {
      goto LABEL_280;
    }
LABEL_279:
    long long v127 = v116;
    operator delete(v116);
    goto LABEL_280;
  }
LABEL_75:
  if (v132 == v133 || v52 == v51)
  {
    if (v52 == v51) {
      goto LABEL_147;
    }
  }
  else
  {
    do
    {
      uint64_t v54 = (char *)v132;
      if (v132 != v50)
      {
        do
        {
          uint64_t v55 = *(void *)v52;
          uint64_t v56 = *(void *)v54;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v54 + 32)
            && *(void *)(v55 + 32) <= *(void *)(v56 + 48))
          {
            BOOL v57 = *(void *)(v55 + 56) >= *(void *)(v56 + 40) && *(void *)(v55 + 40) <= *(void *)(v56 + 56);
            BOOL v58 = v57 && *(unsigned char *)(v55 + 96) == 0;
            if (v58 && *(unsigned char *)(v56 + 96) == 0)
            {
              if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v55, *((_DWORD *)a6 + 10), *a6, (int *)v56, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
              uint64_t v50 = v133;
              }
            }
          }
          v54 += 8;
        }
        while (v54 != v50);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
    uint64_t v52 = (char *)v135;
    if (v135 == v51) {
      goto LABEL_147;
    }
  }
  __n128 v53 = v130;
  if (v129 != v130)
  {
    do
    {
      int64x2_t v60 = (char *)v129;
      if (v129 != v53)
      {
        do
        {
          uint64_t v61 = *(void *)v52;
          uint64_t v62 = *(void *)v60;
          if (*(void *)(*(void *)v52 + 48) >= *(void *)(*(void *)v60 + 32)
            && *(void *)(v61 + 32) <= *(void *)(v62 + 48))
          {
            BOOL v63 = *(void *)(v61 + 56) >= *(void *)(v62 + 40) && *(void *)(v61 + 40) <= *(void *)(v62 + 56);
            BOOL v64 = v63 && *(unsigned char *)(v61 + 96) == 0;
            if (v64 && *(unsigned char *)(v62 + 96) == 0)
            {
              if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v61, *((_DWORD *)a6 + 10), *a6, (int *)v62, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
              __n128 v53 = v130;
              }
            }
          }
          v60 += 8;
        }
        while (v60 != v53);
        uint64_t v51 = v136;
      }
      v52 += 8;
    }
    while (v52 != v51);
  }
LABEL_147:
  uint64_t v76 = (char *)__p;
  uint64_t v75 = v127;
  if (__p == v127) {
    goto LABEL_198;
  }
  int v78 = (char *)v141;
  int v77 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3
    || a5 > (v139 - (unsigned char *)v138) >> 3
    || a4 > 0x63
    || (v127 - (unsigned char *)__p) >> 3 < a5)
  {
    while (v78 != v77)
    {
      long long v88 = (char *)__p;
      if (__p != v75)
      {
        do
        {
          uint64_t v89 = *(void *)v78;
          uint64_t v90 = *(void *)v88;
          if (*(void *)(*(void *)v78 + 48) >= *(void *)(*(void *)v88 + 32)
            && *(void *)(v89 + 32) <= *(void *)(v90 + 48))
          {
            BOOL v91 = *(void *)(v89 + 56) >= *(void *)(v90 + 40) && *(void *)(v89 + 40) <= *(void *)(v90 + 56);
            BOOL v92 = v91 && *(unsigned char *)(v89 + 96) == 0;
            if (v92 && *(unsigned char *)(v90 + 96) == 0)
            {
              if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v89, *((_DWORD *)a6 + 10), *a6, (int *)v90, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
              uint64_t v75 = v127;
              }
            }
          }
          v88 += 8;
        }
        while (v88 != v75);
        int v77 = v142;
      }
      v78 += 8;
    }
    uint64_t v95 = (char *)v138;
    long long v94 = v139;
    if (v138 != v139 && __p != v75)
    {
      do
      {
        long long v99 = (char *)__p;
        if (__p != v75)
        {
          do
          {
            uint64_t v100 = *(void *)v95;
            uint64_t v101 = *(void *)v99;
            if (*(void *)(*(void *)v95 + 48) >= *(void *)(*(void *)v99 + 32)
              && *(void *)(v100 + 32) <= *(void *)(v101 + 48))
            {
              BOOL v102 = *(void *)(v100 + 56) >= *(void *)(v101 + 40)
                  && *(void *)(v100 + 40) <= *(void *)(v101 + 56);
              BOOL v103 = v102 && *(unsigned char *)(v100 + 96) == 0;
              if (v103 && *(unsigned char *)(v101 + 96) == 0)
              {
                if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v100, *((_DWORD *)a6 + 10), *a6, (int *)v101, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
                uint64_t v75 = v127;
                }
              }
            }
            v99 += 8;
          }
          while (v99 != v75);
          long long v94 = v139;
        }
        v95 += 8;
      }
      while (v95 != v94);
    }
    goto LABEL_198;
  }
  uint64_t v79 = 0x7FFFFFFFFFFFFFFFLL;
  int64_t v80 = 0x8000000000000000;
  int64x2_t v124 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  int64x2_t v125 = vdupq_n_s64(0x8000000000000000);
  int64_t v81 = 0x8000000000000000;
  uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
  while (2)
  {
    uint64_t v83 = *(void **)v76;
    int64_t v84 = *(void *)(*(void *)v76 + 32);
    if (v84 >= v82)
    {
      if (v84 > v81) {
        goto LABEL_164;
      }
LABEL_156:
      uint64_t v85 = v83[5];
      if (v85 < v79) {
        goto LABEL_157;
      }
LABEL_165:
      if (v85 > v80) {
        goto LABEL_166;
      }
LABEL_158:
      uint64_t v86 = v83[6];
      if (v86 < v82) {
        goto LABEL_159;
      }
LABEL_167:
      if (v86 > v81) {
        goto LABEL_168;
      }
LABEL_160:
      int64_t v87 = v83[7];
      if (v87 < v79) {
        goto LABEL_161;
      }
LABEL_169:
      if (v87 > v80)
      {
LABEL_170:
        v125.i64[1] = v87;
        int64_t v80 = v87;
      }
    }
    else
    {
      v124.i64[0] = *(void *)(*(void *)v76 + 32);
      uint64_t v82 = v84;
      if (v84 <= v81) {
        goto LABEL_156;
      }
LABEL_164:
      v125.i64[0] = v84;
      int64_t v81 = v84;
      uint64_t v85 = v83[5];
      if (v85 >= v79) {
        goto LABEL_165;
      }
LABEL_157:
      v124.i64[1] = v85;
      uint64_t v79 = v85;
      if (v85 <= v80) {
        goto LABEL_158;
      }
LABEL_166:
      v125.i64[1] = v85;
      int64_t v80 = v85;
      uint64_t v86 = v83[6];
      if (v86 >= v82) {
        goto LABEL_167;
      }
LABEL_159:
      v124.i64[0] = v86;
      uint64_t v82 = v86;
      if (v86 <= v81) {
        goto LABEL_160;
      }
LABEL_168:
      v125.i64[0] = v86;
      int64_t v81 = v86;
      int64_t v87 = v83[7];
      if (v87 >= v79) {
        goto LABEL_169;
      }
LABEL_161:
      v124.i64[1] = v87;
      uint64_t v79 = v87;
      if (v87 > v80) {
        goto LABEL_170;
      }
    }
    v76 += 8;
    if (v76 != v127) {
      continue;
    }
    break;
  }
  if (!sub_1002F2AA4(v124.i64, &v141, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
    || (sub_1002F2AA4(v124.i64, &v138, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
LABEL_198:
  uint64_t v98 = (char *)v141;
  uint64_t v97 = v142;
  if (a5 > (v142 - (unsigned char *)v141) >> 3 || a4 > 0x63 || (v133 - (unsigned char *)v132) >> 3 < a5)
  {
    if (v141 != v142)
    {
      long long v105 = v133;
      if (v132 != v133)
      {
        do
        {
          double v108 = (char *)v132;
          if (v132 != v105)
          {
            do
            {
              uint64_t v109 = *(void *)v98;
              uint64_t v110 = *(void *)v108;
              if (*(void *)(*(void *)v98 + 48) >= *(void *)(*(void *)v108 + 32)
                && *(void *)(v109 + 32) <= *(void *)(v110 + 48))
              {
                BOOL v111 = *(void *)(v109 + 56) >= *(void *)(v110 + 40)
                    && *(void *)(v109 + 40) <= *(void *)(v110 + 56);
                BOOL v112 = v111 && *(unsigned char *)(v109 + 96) == 0;
                if (v112 && *(unsigned char *)(v110 + 96) == 0)
                {
                  if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v109, *((_DWORD *)a6 + 10), *a6, (int *)v110, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
                  long long v105 = v133;
                  }
                }
              }
              v108 += 8;
            }
            while (v108 != v105);
            uint64_t v97 = v142;
          }
          v98 += 8;
        }
        while (v98 != v97);
      }
    }
  }
  else if ((sub_1002F2AA4((uint64_t *)&v146, &v141, &v132, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  long long v107 = (char *)v138;
  int v106 = v139;
  if (a5 > (v139 - (unsigned char *)v138) >> 3 || a4 > 0x63 || (v130 - (unsigned char *)v129) >> 3 < a5)
  {
    if (v138 != v139)
    {
      uint64_t v114 = v130;
      if (v129 != v130)
      {
        do
        {
          uint64_t v117 = (char *)v129;
          if (v129 != v114)
          {
            do
            {
              uint64_t v118 = *(void *)v107;
              uint64_t v119 = *(void *)v117;
              if (*(void *)(*(void *)v107 + 48) >= *(void *)(*(void *)v117 + 32)
                && *(void *)(v118 + 32) <= *(void *)(v119 + 48))
              {
                BOOL v120 = *(void *)(v118 + 56) >= *(void *)(v119 + 40)
                    && *(void *)(v118 + 40) <= *(void *)(v119 + 56);
                BOOL v121 = v120 && *(unsigned char *)(v118 + 96) == 0;
                if (v121 && *(unsigned char *)(v119 + 96) == 0)
                {
                  if (!sub_1002F47AC(*((_DWORD *)a6 + 10), *a6, (int *)v118, *((_DWORD *)a6 + 10), *a6, (int *)v119, 0, *((unsigned __int8 *)a6 + 44), (uint64_t)a6[1], (uint64_t)a6[2], a6[3], a6[4]))goto LABEL_278; {
                  uint64_t v114 = v130;
                  }
                }
              }
              v117 += 8;
            }
            while (v117 != v114);
            int v106 = v139;
          }
          v107 += 8;
        }
        while (v107 != v106);
      }
    }
  }
  else if ((sub_1002F2AA4(v144, &v138, &v129, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_278;
  }
  uint64_t v115 = 1;
  long long v116 = (char *)__p;
  if (__p) {
    goto LABEL_279;
  }
LABEL_280:
  if (v129)
  {
    long long v130 = (char *)v129;
    operator delete(v129);
  }
  if (v132)
  {
    int v133 = (char *)v132;
    operator delete(v132);
  }
  if (v135)
  {
    __int16 v136 = (char *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    uint64_t v139 = (char *)v138;
    operator delete(v138);
  }
  if (v141)
  {
    long long v142 = (char *)v141;
    operator delete(v141);
  }
  return v115;
}

void sub_1002F46E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    long long v34 = a20;
    if (!a20)
    {
LABEL_3:
      int64_t v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    long long v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  int64_t v35 = a23;
  if (!a23)
  {
LABEL_4:
    uint64_t v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  uint64_t v36 = a26;
  if (!a26)
  {
LABEL_5:
    uint64_t v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  uint64_t v37 = a29;
  if (!a29)
  {
LABEL_6:
    uint64_t v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  uint64_t v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F47AC(int a1, void *a2, int *a3, int a4, void *a5, int *a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, unsigned char *a12)
{
  uint64_t v12 = a6;
  if (*((unsigned char *)a3 + 96) && (unint64_t)(*((void *)a3 + 10) + 1) < *((void *)a3 + 11)
    || *((unsigned char *)a6 + 96) && (unint64_t)(*((void *)a6 + 10) + 1) < *((void *)a6 + 11))
  {
    return 1;
  }
  uint64_t v15 = *((void *)a3 + 3);
  uint64_t v16 = (double **)(*a2 + 48 * *((void *)a3 + 2));
  if (v15 >= 0) {
    uint64_t v16 = (double **)&v16[3][3 * v15];
  }
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  uint64_t v19 = *((void *)a6 + 3);
  uint64_t v20 = (double **)(*a5 + 48 * *((void *)a6 + 2));
  if (v19 >= 0) {
    uint64_t v20 = (double **)&v20[3][3 * v19];
  }
  long long v130 = v20[1];
  uint64_t v131 = *v20;
  int v21 = *a3;
  int v22 = *a6;
  uint64_t v23 = *((void *)a3 + 13);
  uint64_t v25 = *((void *)a3 + 8);
  uint64_t v24 = *((void *)a3 + 9);
  int64_t v26 = &v17[2 * v25];
  int v106 = a4;
  int v121 = *a6;
  uint64_t v110 = v18;
  BOOL v111 = v17;
  uint64_t v128 = v25;
  if (v25 == v24)
  {
    uint64_t v27 = &v17[2 * v25];
    uint64_t v14 = 1;
    long long v107 = &v17[2 * v24];
    if (v26 == v107) {
      return v14;
    }
    goto LABEL_32;
  }
  uint64_t v29 = 0;
  __n128 v122 = v26;
  uint64_t v124 = *((void *)a3 + 9);
  uint64_t v30 = 16 * v24 - 16 * v25;
  int64_t v31 = v26;
  uint64_t v117 = *((void *)a3 + 13);
  int64_t v32 = v26;
  while (1)
  {
    uint64_t v33 = v31;
    double v34 = (double)*(uint64_t *)(a10 + 24) + (v31[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
    if (v34 >= 0.0) {
      double v35 = 0.5;
    }
    else {
      double v35 = -0.5;
    }
    sub_1002C5028(v34 + v35);
    double v36 = v32[2];
    v32 += 2;
    double v37 = (double)*(uint64_t *)(a10 + 16) + (v36 - *(double *)a10) * *(double *)(a10 + 32);
    if (v37 >= 0.0) {
      double v38 = 0.5;
    }
    else {
      double v38 = -0.5;
    }
    double v39 = v37 + v38;
    sub_1002C5028(v37 + v38);
    double v40 = ceil(v39);
    double v41 = floor(v39);
    if (v39 >= 0.0) {
      double v40 = v41;
    }
    uint64_t v42 = (uint64_t)v40;
    if (v21 == 1)
    {
      if (*((void *)a6 + 4) <= v42)
      {
        uint64_t v128 = v25;
        goto LABEL_29;
      }
      goto LABEL_15;
    }
    if (v21 != -1) {
      break;
    }
    if (*((void *)a6 + 6) >= v42)
    {
      uint64_t v23 = v117 + v29;
      v128 += v29;
LABEL_29:
      uint64_t v12 = a6;
      a4 = v106;
      uint64_t v18 = v110;
      uint64_t v17 = v111;
      int v22 = v121;
      uint64_t v27 = v33;
      uint64_t v14 = 1;
      long long v107 = &v111[2 * v124];
      if (v27 == v107) {
        return v14;
      }
LABEL_32:
      uint64_t v118 = v23;
      uint64_t v43 = v27 + 2;
      uint64_t v44 = &v17[2 * (v27 != v17)];
      if (v27 + 2 != v18) {
        uint64_t v44 = v27 + 2;
      }
      uint64_t v45 = v44 + 2;
      uint64_t v46 = &v17[2 * (v44 != v17)];
      if (v45 != v18) {
        uint64_t v46 = v45;
      }
      uint64_t v119 = v46;
      int v109 = -v21;
      int v123 = -v22;
      uint64_t v47 = v128;
      uint64_t v120 = a4;
      double v108 = v12;
LABEL_41:
      double v50 = (double)*(uint64_t *)(a10 + 24) + (v27[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
      if (v50 >= 0.0) {
        double v51 = 0.5;
      }
      else {
        double v51 = -0.5;
      }
      sub_1002C5028(v50 + v51);
      double v52 = (double)*(uint64_t *)(a10 + 16) + (*v27 - *(double *)a10) * *(double *)(a10 + 32);
      if (v52 >= 0.0) {
        double v53 = 0.5;
      }
      else {
        double v53 = -0.5;
      }
      double v54 = v52 + v53;
      sub_1002C5028(v52 + v53);
      double v55 = ceil(v54);
      double v56 = floor(v54);
      if (v54 >= 0.0) {
        double v55 = v56;
      }
      uint64_t v57 = (uint64_t)v55;
      if (v109 == 1)
      {
        if (v12[4] > v57) {
          return 1;
        }
      }
      else if (v109 == -1 && v12[6] < v57)
      {
        return 1;
      }
      v161[0] = a3;
      v161[1] = v47;
      uint64_t v129 = v47;
      uint64_t v115 = v43;
      long long v116 = v27;
      v161[2] = v27;
      v161[3] = v43;
      v161[4] = v119;
      v161[5] = v17;
      v161[6] = v18;
      char v162 = 1;
      char v163 = 0;
      long long v58 = *(_OWORD *)(a10 + 16);
      long long v164 = *(_OWORD *)a10;
      long long v165 = v58;
      uint64_t v166 = *(void *)(a10 + 32);
      uint64_t v60 = v12[8];
      uint64_t v59 = v12[9];
      uint64_t v61 = &v131[2 * v60];
      uint64_t v62 = v12[13];
      uint64_t v114 = v62;
      if (v60 == v59) {
        goto LABEL_73;
      }
      uint64_t v63 = 0;
      uint64_t v125 = v12[9];
      uint64_t v64 = 16 * v59 - 16 * v60;
      uint64_t v65 = v12[8];
      uint64_t v66 = &v131[2 * v60];
      while (1)
      {
        double v67 = (double)*(uint64_t *)(a10 + 24) + (v61[3] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
        if (v67 >= 0.0) {
          double v68 = 0.5;
        }
        else {
          double v68 = -0.5;
        }
        sub_1002C5028(v67 + v68);
        double v69 = v66[2];
        v66 += 2;
        double v70 = (double)*(uint64_t *)(a10 + 16) + (v69 - *(double *)a10) * *(double *)(a10 + 32);
        if (v70 >= 0.0) {
          double v71 = 0.5;
        }
        else {
          double v71 = -0.5;
        }
        double v72 = v70 + v71;
        sub_1002C5028(v70 + v71);
        double v73 = ceil(v72);
        double v74 = floor(v72);
        if (v72 >= 0.0) {
          double v73 = v74;
        }
        uint64_t v75 = (uint64_t)v73;
        if (v121 == 1)
        {
          if (*((void *)a3 + 4) <= v75)
          {
            uint64_t v114 = v62;
            uint64_t v60 = v65;
LABEL_72:
            uint64_t v59 = v125;
LABEL_73:
            long long v126 = &v131[2 * v59];
            if (v61 == v126)
            {
LABEL_37:
              ++v118;
              uint64_t v12 = v108;
              uint64_t v18 = v110;
              uint64_t v17 = v111;
              uint64_t v48 = v129;
LABEL_38:
              uint64_t v27 = v116 + 2;
              uint64_t v43 = v115 + 2;
              uint64_t v47 = v48 + 1;
              uint64_t v49 = v119 + 2;
              if (v119 + 2 == v18) {
                uint64_t v49 = &v17[2 * (v119 != v17)];
              }
              uint64_t v119 = v49;
              if (v115 == v107) {
                return 1;
              }
              goto LABEL_41;
            }
            uint64_t v76 = v61 + 2;
            if (v61 + 2 == v130) {
              uint64_t v76 = &v131[2 * (v61 != v131)];
            }
            int v77 = v76 + 2;
            int v78 = &v131[2 * (v76 != v131)];
            if (v77 == v130) {
              uint64_t v79 = v78;
            }
            else {
              uint64_t v79 = v77;
            }
            uint64_t v80 = ++v118 - v114;
            uint64_t v12 = v108;
            uint64_t v48 = v129;
            while (2)
            {
              double v82 = (double)*(uint64_t *)(a10 + 24) + (v61[1] - *(double *)(a10 + 8)) * *(double *)(a10 + 32);
              if (v82 >= 0.0) {
                double v83 = 0.5;
              }
              else {
                double v83 = -0.5;
              }
              sub_1002C5028(v82 + v83);
              double v84 = (double)*(uint64_t *)(a10 + 16) + (*v61 - *(double *)a10) * *(double *)(a10 + 32);
              if (v84 >= 0.0) {
                double v85 = 0.5;
              }
              else {
                double v85 = -0.5;
              }
              double v86 = v84 + v85;
              sub_1002C5028(v84 + v85);
              double v87 = ceil(v86);
              double v88 = floor(v86);
              if (v86 >= 0.0) {
                double v87 = v88;
              }
              uint64_t v89 = (uint64_t)v87;
              if (v123 == 1)
              {
                if (*((void *)a3 + 4) > v89) {
                  goto LABEL_125;
                }
              }
              else if (v123 == -1 && *((void *)a3 + 6) < v89)
              {
                goto LABEL_125;
              }
              uint64_t v90 = *((void *)a3 + 2);
              if (a1 != v106)
              {
                uint64_t v91 = *((void *)a3 + 3);
                uint64_t v93 = v108[2];
                uint64_t v92 = v108[3];
                goto LABEL_115;
              }
              uint64_t v91 = *((void *)a3 + 3);
              uint64_t v93 = v108[2];
              uint64_t v92 = v108[3];
              if (v90 != v93) {
                goto LABEL_115;
              }
              if (v91 == v92)
              {
                if (a7)
                {
                  if (v48 >= v60 || (a8 & 1) == 0)
                  {
                    uint64_t v92 = *((void *)a3 + 3);
                    uint64_t v93 = *((void *)a3 + 2);
                    if (v48 < v60) {
                      goto LABEL_115;
                    }
LABEL_82:
                    v61 += 2;
                    ++v60;
                    if (v79 + 2 == v130) {
                      uint64_t v79 = &v131[2 * (v79 != v131)];
                    }
                    else {
                      v79 += 2;
                    }
                    --v80;
                    if (v61 == v126)
                    {
LABEL_125:
                      uint64_t v18 = v110;
                      uint64_t v17 = v111;
                      goto LABEL_38;
                    }
                    continue;
                  }
LABEL_109:
                  if (!v80) {
                    goto LABEL_82;
                  }
                  if (!v48)
                  {
                    uint64_t v92 = *((void *)a3 + 3);
                    uint64_t v93 = *((void *)a3 + 2);
                    if (*((void *)a3 + 11) - 2 <= v60) {
                      goto LABEL_82;
                    }
LABEL_115:
                    v155[0] = v108;
                    v155[1] = v60;
                    v155[2] = v61;
                    v155[3] = v61 + 2;
                    v155[4] = v79;
                    v155[5] = v131;
                    v155[6] = v130;
                    char v156 = 0;
                    char v157 = 0;
                    long long v94 = *(_OWORD *)(a10 + 16);
                    long long v158 = *(_OWORD *)a10;
                    long long v159 = v94;
                    uint64_t v160 = *(void *)(a10 + 32);
                    int v133 = 0;
                    char v134 = 0;
                    uint64_t v135 = -1;
                    __int16 v136 = 0;
                    int v137 = 0;
                    uint64_t v144 = 0;
                    uint64_t v145 = 0;
                    int v146 = 0;
                    uint64_t v152 = 1;
                    uint64_t v153 = 0;
                    uint64_t v154 = 0;
                    uint64_t v138 = a1;
                    uint64_t v139 = v90;
                    uint64_t v140 = v91;
                    uint64_t v141 = v48;
                    long long v142 = xmmword_1003FAAE0;
                    uint64_t v143 = 1;
                    uint64_t v147 = v120;
                    uint64_t v148 = v93;
                    uint64_t v149 = v92;
                    uint64_t v150 = v60;
                    long long v151 = xmmword_1003FAAE0;
                    uint64_t v95 = a11[5];
                    sub_1002EEE50((uint64_t)v161, (uint64_t)v155, (uint64_t)v132, a9, a10, a11);
                    unint64_t v96 = a11[4];
                    uint64_t v97 = a11[1];
                    uint64_t v98 = a11[2];
                    long long v99 = (void *)(v97 + 8 * (v96 / 0x14));
                    if (v98 == v97)
                    {
                      unint64_t v100 = 0;
                      if (!v95) {
                        goto LABEL_122;
                      }
                    }
                    else
                    {
                      unint64_t v100 = *v99 + 200 * (v96 % 0x14);
                      if (!v95) {
                        goto LABEL_122;
                      }
                    }
                    uint64_t v101 = v95 - 0x70A3D70A3D70A3D7 * ((uint64_t)(v100 - *v99) >> 3);
                    if (v101 < 1)
                    {
                      unint64_t v102 = 19 - v101;
                      v99 -= v102 / 0x14;
                      unint64_t v100 = *v99 + 200 * (20 * (v102 / 0x14) - v102) + 3800;
                    }
                    else
                    {
                      v99 += v101 / 0x14uLL;
                      unint64_t v100 = *v99 + 200 * (v101 % 0x14uLL);
                    }
LABEL_122:
                    uint64_t v48 = v129;
                    unint64_t v103 = a11[5] + v96;
                    double v104 = (void *)(v97 + 8 * (v103 / 0x14));
                    if (v98 == v97)
                    {
                      unint64_t v81 = 0;
                      if (!v100) {
                        goto LABEL_82;
                      }
                    }
                    else
                    {
                      unint64_t v81 = *v104 + 200 * (v103 % 0x14);
                      if (v100 == v81) {
                        goto LABEL_82;
                      }
                    }
                    if (20 * (v104 - v99) - 0x70A3D70A3D70A3D7 * ((uint64_t)(v81 - *v104) >> 3) != 0x8F5C28F5C28F5C29 * ((uint64_t)(v100 - *v99) >> 3))
                    {
                      uint64_t v14 = 0;
                      *a12 = 1;
                      return v14;
                    }
                    goto LABEL_82;
                  }
                }
                else if (a8)
                {
                  goto LABEL_109;
                }
                uint64_t v92 = *((void *)a3 + 3);
              }
              break;
            }
            uint64_t v93 = *((void *)a3 + 2);
            goto LABEL_115;
          }
        }
        else
        {
          if (v121 != -1)
          {
            uint64_t v61 = &v131[2 * v60];
            goto LABEL_72;
          }
          if (*((void *)a3 + 6) >= v75)
          {
            v114 += v63;
            v60 += v63;
            goto LABEL_72;
          }
        }
        ++v65;
        ++v62;
        ++v63;
        uint64_t v61 = v66;
        v64 -= 16;
        if (!v64) {
          goto LABEL_37;
        }
      }
    }
LABEL_15:
    ++v25;
    ++v23;
    ++v29;
    int64_t v31 = v32;
    v30 -= 16;
    if (!v30) {
      return 1;
    }
  }
  uint64_t v27 = v122;
  uint64_t v12 = a6;
  a4 = v106;
  uint64_t v18 = v110;
  uint64_t v17 = v111;
  int v22 = v121;
  uint64_t v23 = v117;
  uint64_t v14 = 1;
  long long v107 = &v111[2 * v124];
  if (v122 != v107) {
    goto LABEL_32;
  }
  return v14;
}

void sub_1002F511C(void *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  unint64_t v9 = v6 - v8;
  BOOL v10 = a2 > v9;
  unint64_t v11 = a2 - v9;
  if (v10)
  {
    sub_1002F55AC((uint64_t)a1, v11);
    uint64_t v7 = a1[5];
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    unint64_t v8 = a1[4] + v7;
  }
  uint64_t v12 = (void *)(v4 + 8 * (v8 / 0xAA));
  if (v5 == v4)
  {
    uint64_t v13 = 0;
    if (!a2) {
      return;
    }
  }
  else
  {
    uint64_t v13 = (void *)(*v12 + 24 * (v8 % 0xAA));
    if (!a2) {
      return;
    }
  }
  uint64_t v14 = a2 - 0x5555555555555555 * (((uint64_t)v13 - *v12) >> 3);
  if (v14 < 1)
  {
    unint64_t v17 = 169 - v14;
    uint64_t v15 = &v12[-(v17 / 0xAA)];
    unint64_t v16 = *v15 + 24 * (170 * (v17 / 0xAA) - v17) + 4056;
    if (v13 != (void *)v16)
    {
      do
      {
LABEL_15:
        uint64_t v18 = v16;
        if (v12 != v15) {
          uint64_t v18 = *v12 + 4080;
        }
        if (v13 == (void *)v18)
        {
          a1[5] = v7;
          if (v12 == v15) {
            return;
          }
        }
        else
        {
          int64_t v19 = 24 * ((v18 - (uint64_t)v13 - 24) / 0x18uLL) + 24;
          bzero(v13, v19);
          uint64_t v7 = a1[5] - 0x5555555555555555 * (v19 >> 3);
          a1[5] = v7;
          if (v12 == v15) {
            return;
          }
        }
        uint64_t v20 = (void *)v12[1];
        ++v12;
        uint64_t v13 = v20;
      }
      while (v20 != (void *)v16);
    }
  }
  else
  {
    uint64_t v15 = &v12[v14 / 0xAAuLL];
    unint64_t v16 = *v15 + 24 * (v14 % 0xAAuLL);
    if (v13 != (void *)v16) {
      goto LABEL_15;
    }
  }
}

void sub_1002F5324(void *a1, void *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unint64_t v6 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v8 = a1[1];
  uint64_t v7 = a1[2];
  unint64_t v9 = (void *)(v8 + 8 * ((v6 + v5) / 0xAA));
  if (v7 == v8)
  {
    unint64_t v10 = 0;
    if (!a3) {
      return;
    }
  }
  else
  {
    unint64_t v10 = *v9 + 24 * ((v6 + v5) % 0xAA);
    if (v10 == a3) {
      return;
    }
  }
  uint64_t v11 = 170 * (v9 - a2) - 0x5555555555555555 * ((uint64_t)(v10 - *v9) >> 3);
  uint64_t v12 = (uint64_t)(a3 - *a2) >> 3;
  uint64_t v13 = v11 + 0x5555555555555555 * v12;
  if (v13 < 1) {
    return;
  }
  uint64_t v14 = (void *)(v8 + 8 * (v6 / 0xAA));
  if (v7 == v8)
  {
    unint64_t v15 = 0;
    if (!a3) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v15 = *v14 + 24 * (v6 % 0xAA);
    if (a3 == v15)
    {
LABEL_15:
      if (v3 == v10) {
        goto LABEL_25;
      }
      do
      {
LABEL_20:
        int v21 = *(void **)v3;
        if (*(void *)v3)
        {
          *(void *)(v3 + 8) = v21;
          operator delete(v21);
        }
        v3 += 24;
        if (v3 - *v14 == 4080)
        {
          unint64_t v22 = v14[1];
          ++v14;
          unint64_t v3 = v22;
        }
      }
      while (v3 != v10);
      uint64_t v8 = a1[1];
      uint64_t v7 = a1[2];
      unint64_t v6 = a1[4];
      uint64_t v5 = a1[5];
      goto LABEL_25;
    }
  }
  uint64_t v16 = 170 * (a2 - v14) - 0x5555555555555555 * v12;
  uint64_t v17 = (uint64_t)(v15 - *v14) >> 3;
  uint64_t v18 = v16 + 0x5555555555555555 * v17;
  if (!v18)
  {
    unint64_t v3 = v15;
    goto LABEL_15;
  }
  uint64_t v19 = v18 - 0x5555555555555555 * v17;
  if (v19 >= 1)
  {
    v14 += v19 / 0xAAuLL;
    unint64_t v3 = *v14 + 24 * (v19 % 0xAAuLL);
    if (v3 == v10) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  unint64_t v20 = 169 - v19;
  v14 -= v20 / 0xAA;
  unint64_t v3 = *v14 + 24 * (170 * (v20 / 0xAA) - v20) + 4056;
  if (v3 != v10) {
    goto LABEL_20;
  }
LABEL_25:
  if (v7 == v8) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = 170 * ((v7 - v8) >> 3) - 1;
  }
  uint64_t v24 = v5 - v13;
  a1[5] = v24;
  if (v23 - (v24 + v6) >= 0x154)
  {
    do
    {
      operator delete(*(void **)(v7 - 8));
      uint64_t v7 = a1[2] - 8;
      BOOL v25 = v7 == a1[1];
      uint64_t v26 = 170 * ((v7 - a1[1]) >> 3) - 1;
      a1[2] = v7;
      if (v25) {
        uint64_t v26 = 0;
      }
    }
    while ((unint64_t)(v26 - (a1[5] + a1[4])) > 0x153);
  }
}

void sub_1002F55AC(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = *(char **)(a1 + 16);
  uint64_t v4 = (uint64_t)&v3[-*(void *)(a1 + 8)];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0xAA) {
    unint64_t v6 = v5 / 0xAA + 1;
  }
  else {
    unint64_t v6 = v5 / 0xAA;
  }
  unint64_t v7 = *(void *)(a1 + 32);
  if (v6 >= v7 / 0xAA) {
    unint64_t v8 = v7 / 0xAA;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0xAA)
  {
    *(void *)(a1 + 32) = v7 - 170 * v8;
    if (!v8) {
      return;
    }
    while (1)
    {
      unint64_t v15 = *(void **)(a1 + 8);
      uint64_t v16 = (char *)(v15 + 1);
      uint64_t v17 = *v15;
      *(void *)(a1 + 8) = v15 + 1;
      if (v3 == *(char **)(a1 + 24))
      {
        uint64_t v18 = *(char **)a1;
        if ((unint64_t)v16 <= *(void *)a1)
        {
          unint64_t v24 = (v3 - v18) >> 2;
          if (v3 == v18) {
            unint64_t v24 = 1;
          }
          if (v24 >> 61) {
            goto LABEL_161;
          }
          unint64_t v25 = v24 >> 2;
          uint64_t v26 = 8 * v24;
          uint64_t v27 = (char *)operator new(8 * v24);
          uint64_t v28 = &v27[8 * v25];
          int64_t v30 = v3 - v16;
          BOOL v29 = v3 == v16;
          unint64_t v3 = v28;
          if (!v29)
          {
            unint64_t v3 = &v28[v30 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v31 = v30 - 8;
            if ((unint64_t)(v30 - 8) < 0x38)
            {
              int64_t v32 = &v27[8 * v25];
              goto LABEL_39;
            }
            int64_t v32 = &v27[8 * v25];
            if ((unint64_t)(v32 - v16) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v33 = (v31 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            int64_t v32 = &v28[v34];
            v16 += v34;
            double v35 = (long long *)(v15 + 3);
            double v36 = &v27[8 * v25 + 16];
            uint64_t v37 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v38 = *v35;
              *((_OWORD *)v36 - 1) = *(v35 - 1);
              *(_OWORD *)double v36 = v38;
              v35 += 2;
              v36 += 32;
              v37 -= 4;
            }
            while (v37);
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
LABEL_39:
                uint64_t v39 = *(void *)v16;
                v16 += 8;
                *(void *)int64_t v32 = v39;
                v32 += 8;
              }
              while (v32 != v3);
            }
          }
          *(void *)a1 = v27;
          *(void *)(a1 + 8) = v28;
          *(void *)(a1 + 16) = v3;
          *(void *)(a1 + 24) = &v27[v26];
          if (v18)
          {
            operator delete(v18);
            unint64_t v3 = *(char **)(a1 + 16);
          }
          goto LABEL_21;
        }
        uint64_t v19 = (uint64_t)&v16[-*(void *)a1] >> 3;
        if (v19 >= -1) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v19 + 2;
        }
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = &v16[-8 * (v20 >> 1)];
        int64_t v23 = v3 - v16;
        if (v3 != v16)
        {
          memmove(&v16[-8 * (v20 >> 1)], v16, v3 - v16);
          unint64_t v3 = *(char **)(a1 + 8);
        }
        uint64_t v14 = &v3[-8 * v21];
        unint64_t v3 = &v22[v23];
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = &v22[v23];
      }
LABEL_21:
      *(void *)unint64_t v3 = v17;
      unint64_t v3 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v3;
      if (!--v8) {
        return;
      }
    }
  }
  unint64_t v9 = v6 - v8;
  uint64_t v10 = *(void *)(a1 + 24) - *(void *)a1;
  uint64_t v11 = v4 >> 3;
  if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
  {
    if (v9)
    {
      while (*(void *)(a1 + 24) != *(void *)(a1 + 16))
      {
        uint64_t v145 = operator new(0xFF0uLL);
        sub_100192E00((char **)a1, &v145);
        --v6;
        if (!--v9) {
          goto LABEL_136;
        }
      }
      for (uint64_t i = 0; i != v9; ++i)
      {
        uint64_t v145 = operator new(0xFF0uLL);
        sub_100192F90((void **)a1, &v145);
        if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
          uint64_t v116 = 169;
        }
        else {
          uint64_t v116 = 170;
        }
        uint64_t v117 = v116 + *(void *)(a1 + 32);
        *(void *)(a1 + 32) = v117;
      }
      unint64_t v8 = v6;
      *(void *)(a1 + 32) = v117 - 170 * v6;
      if (!v6) {
        return;
      }
    }
    else
    {
LABEL_136:
      *(void *)(a1 + 32) -= 170 * v8;
      if (!v8) {
        return;
      }
    }
    uint64_t v118 = *(char **)(a1 + 16);
    while (1)
    {
      uint64_t v120 = *(void **)(a1 + 8);
      int v121 = (char *)(v120 + 1);
      uint64_t v122 = *v120;
      *(void *)(a1 + 8) = v120 + 1;
      if (v118 == *(char **)(a1 + 24))
      {
        int v123 = *(char **)a1;
        if ((unint64_t)v121 <= *(void *)a1)
        {
          unint64_t v129 = (v118 - v123) >> 2;
          if (v118 == v123) {
            unint64_t v129 = 1;
          }
          if (v129 >> 61) {
            goto LABEL_161;
          }
          unint64_t v130 = v129 >> 2;
          uint64_t v131 = 8 * v129;
          uint64_t v132 = (char *)operator new(8 * v129);
          int v133 = &v132[8 * v130];
          int64_t v134 = v118 - v121;
          BOOL v29 = v118 == v121;
          uint64_t v118 = v133;
          if (!v29)
          {
            uint64_t v118 = &v133[v134 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v135 = v134 - 8;
            if ((unint64_t)(v134 - 8) < 0x38)
            {
              __int16 v136 = &v132[8 * v130];
              goto LABEL_157;
            }
            __int16 v136 = &v132[8 * v130];
            if ((unint64_t)(v136 - v121) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v137 = (v135 >> 3) + 1;
            uint64_t v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
            __int16 v136 = &v133[v138];
            v121 += v138;
            uint64_t v139 = (long long *)(v120 + 3);
            uint64_t v140 = &v132[8 * v130 + 16];
            uint64_t v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v142 = *v139;
              *((_OWORD *)v140 - 1) = *(v139 - 1);
              *(_OWORD *)uint64_t v140 = v142;
              v139 += 2;
              v140 += 32;
              v141 -= 4;
            }
            while (v141);
            if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
LABEL_157:
                uint64_t v143 = *(void *)v121;
                v121 += 8;
                *(void *)__int16 v136 = v143;
                v136 += 8;
              }
              while (v136 != v118);
            }
          }
          *(void *)a1 = v132;
          *(void *)(a1 + 8) = v133;
          *(void *)(a1 + 16) = v118;
          *(void *)(a1 + 24) = &v132[v131];
          if (v123)
          {
            operator delete(v123);
            uint64_t v118 = *(char **)(a1 + 16);
          }
          goto LABEL_139;
        }
        uint64_t v124 = (uint64_t)&v121[-*(void *)a1] >> 3;
        if (v124 >= -1) {
          uint64_t v125 = v124 + 1;
        }
        else {
          uint64_t v125 = v124 + 2;
        }
        uint64_t v126 = v125 >> 1;
        long long v127 = &v121[-8 * (v125 >> 1)];
        int64_t v128 = v118 - v121;
        if (v118 != v121)
        {
          memmove(&v121[-8 * (v125 >> 1)], v121, v118 - v121);
          uint64_t v118 = *(char **)(a1 + 8);
        }
        uint64_t v119 = &v118[-8 * v126];
        uint64_t v118 = &v127[v128];
        *(void *)(a1 + 8) = v119;
        *(void *)(a1 + 16) = &v127[v128];
      }
LABEL_139:
      *(void *)uint64_t v118 = v122;
      uint64_t v118 = (char *)(*(void *)(a1 + 16) + 8);
      *(void *)(a1 + 16) = v118;
      if (!--v8) {
        return;
      }
    }
  }
  if (v10 >> 2 <= v9 + v11) {
    unint64_t v12 = v9 + v11;
  }
  else {
    unint64_t v12 = v10 >> 2;
  }
  if (v12)
  {
    if (v12 >> 61) {
LABEL_161:
    }
      sub_1000A6A10();
    uint64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v144 = -170 * v8;
  double v40 = &v13[8 * (v11 - v8)];
  double v41 = &v13[8 * v12];
  uint64_t v42 = v40;
  uint64_t v43 = v13;
  do
  {
    uint64_t v44 = operator new(0xFF0uLL);
    if (v42 != v41) {
      goto LABEL_49;
    }
    if (v40 > v43)
    {
      uint64_t v45 = v43;
      uint64_t v46 = (v40 - v43) >> 3;
      if (v46 >= -1) {
        uint64_t v47 = v46 + 1;
      }
      else {
        uint64_t v47 = v46 + 2;
      }
      uint64_t v48 = v47 >> 1;
      uint64_t v49 = &v40[-8 * (v47 >> 1)];
      double v50 = v41;
      if (v41 != v40)
      {
        memmove(v49, v40, v41 - v40);
        double v50 = v40;
      }
      uint64_t v42 = &v49[v41 - v40];
      double v40 = &v50[-8 * v48];
      uint64_t v43 = v45;
      goto LABEL_49;
    }
    if (v41 == v43) {
      unint64_t v51 = 1;
    }
    else {
      unint64_t v51 = (v41 - v43) >> 2;
    }
    if (v51 >> 61) {
      sub_1000A6A10();
    }
    double v52 = (char *)operator new(8 * v51);
    double v53 = v43;
    unint64_t v54 = v51 >> 2;
    double v55 = &v52[8 * (v51 >> 2)];
    uint64_t v42 = v55;
    int64_t v56 = v41 - v40;
    if (v41 != v40)
    {
      uint64_t v42 = &v55[v56 & 0xFFFFFFFFFFFFFFF8];
      unint64_t v57 = v56 - 8;
      if (v57 >= 0x38 && (uint64_t v58 = 8 * v54, (unint64_t)(&v52[8 * v54] - v40) >= 0x20))
      {
        uint64_t v62 = (v57 >> 3) + 1;
        uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v59 = &v55[v63];
        uint64_t v60 = &v40[v63];
        uint64_t v64 = (long long *)(v40 + 16);
        uint64_t v65 = &v52[v58 + 16];
        uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v67 = *v64;
          *((_OWORD *)v65 - 1) = *(v64 - 1);
          *(_OWORD *)uint64_t v65 = v67;
          v64 += 2;
          v65 += 32;
          v66 -= 4;
        }
        while (v66);
        if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v59 = &v52[8 * (v51 >> 2)];
        uint64_t v60 = v40;
      }
      do
      {
        uint64_t v61 = *(void *)v60;
        v60 += 8;
        *(void *)uint64_t v59 = v61;
        v59 += 8;
      }
      while (v59 != v42);
    }
LABEL_66:
    double v41 = &v52[8 * v51];
    if (v53) {
      operator delete(v53);
    }
    double v40 = &v52[8 * (v51 >> 2)];
    uint64_t v43 = v52;
LABEL_49:
    *(void *)uint64_t v42 = v44;
    v42 += 8;
    --v9;
  }
  while (v9);
  double v68 = *(void **)(a1 + 8);
  if (v8)
  {
    while (1)
    {
      if (v42 == v41)
      {
        if (v40 <= v43)
        {
          if (v41 == v43) {
            unint64_t v78 = 1;
          }
          else {
            unint64_t v78 = (v41 - v43) >> 2;
          }
          if (v78 >> 61) {
            sub_1000A6A10();
          }
          uint64_t v79 = (char *)operator new(8 * v78);
          uint64_t v80 = v79;
          unint64_t v81 = v78 >> 2;
          double v69 = &v79[8 * (v78 >> 2)];
          uint64_t v42 = v69;
          int64_t v82 = v41 - v40;
          if (v41 != v40)
          {
            uint64_t v42 = &v69[v82 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v83 = v82 - 8;
            if (v83 < 0x38 || (uint64_t v84 = 8 * v81, (unint64_t)(&v79[8 * v81] - v40) < 0x20))
            {
              double v85 = &v79[8 * (v78 >> 2)];
              double v86 = v40;
              goto LABEL_98;
            }
            uint64_t v88 = (v83 >> 3) + 1;
            uint64_t v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
            double v85 = &v69[v89];
            double v86 = &v40[v89];
            uint64_t v90 = (long long *)(v40 + 16);
            uint64_t v91 = &v79[v84 + 16];
            uint64_t v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v93 = *v90;
              *((_OWORD *)v91 - 1) = *(v90 - 1);
              *(_OWORD *)uint64_t v91 = v93;
              v90 += 2;
              v91 += 32;
              v92 -= 4;
            }
            while (v92);
            if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_98:
                uint64_t v87 = *(void *)v86;
                v86 += 8;
                *(void *)double v85 = v87;
                v85 += 8;
              }
              while (v85 != v42);
            }
          }
          double v41 = &v79[8 * v78];
          if (v43) {
            operator delete(v43);
          }
          uint64_t v43 = v80;
          goto LABEL_81;
        }
        double v72 = v43;
        uint64_t v73 = (v40 - v43) >> 3;
        if (v73 >= -1) {
          uint64_t v74 = v73 + 1;
        }
        else {
          uint64_t v74 = v73 + 2;
        }
        uint64_t v75 = v74 >> 1;
        uint64_t v76 = &v40[-8 * (v74 >> 1)];
        int v77 = v41;
        if (v41 != v40)
        {
          memmove(v76, v40, v41 - v40);
          int v77 = v40;
        }
        uint64_t v42 = &v76[v41 - v40];
        double v69 = &v77[-8 * v75];
        uint64_t v43 = v72;
      }
      else
      {
        double v69 = v40;
      }
LABEL_81:
      *(void *)uint64_t v42 = *v68;
      v42 += 8;
      double v68 = (void *)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v68;
      double v40 = v69;
      if (!--v8) {
        goto LABEL_75;
      }
    }
  }
  double v69 = v40;
LABEL_75:
  double v70 = *(void **)(a1 + 16);
  if (v70 != v68)
  {
    do
    {
      if (v69 == v43)
      {
        if (v42 >= v41)
        {
          if (v41 == v43) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (v41 - v43) >> 2;
          }
          if (v100 >> 61) {
            sub_1000A6A10();
          }
          uint64_t v101 = (char *)operator new(8 * v100);
          uint64_t v97 = v101;
          unint64_t v102 = (v100 + 3) >> 2;
          double v69 = &v101[8 * v102];
          int64_t v103 = v42 - v43;
          BOOL v29 = v42 == v43;
          uint64_t v42 = v69;
          if (!v29)
          {
            uint64_t v42 = &v69[v103 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v104 = v103 - 8;
            long long v105 = &v101[8 * v102];
            int v106 = v43;
            if (v104 < 0x38) {
              goto LABEL_169;
            }
            uint64_t v107 = 8 * v102;
            long long v105 = &v101[8 * v102];
            int v106 = v43;
            if ((unint64_t)(v105 - v43) < 0x20) {
              goto LABEL_169;
            }
            uint64_t v108 = (v104 >> 3) + 1;
            uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
            long long v105 = &v69[v109];
            int v106 = &v43[v109];
            uint64_t v110 = (long long *)(v43 + 16);
            BOOL v111 = &v101[v107 + 16];
            uint64_t v112 = v108 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v113 = *v110;
              *((_OWORD *)v111 - 1) = *(v110 - 1);
              *(_OWORD *)BOOL v111 = v113;
              v110 += 2;
              v111 += 32;
              v112 -= 4;
            }
            while (v112);
            if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_169:
              do
              {
                uint64_t v114 = *(void *)v106;
                v106 += 8;
                *(void *)long long v105 = v114;
                v105 += 8;
              }
              while (v105 != v42);
            }
          }
          double v41 = &v101[8 * v100];
          if (v43) {
            operator delete(v43);
          }
        }
        else
        {
          uint64_t v95 = (v41 - v42) >> 3;
          if (v95 >= -1) {
            uint64_t v96 = v95 + 1;
          }
          else {
            uint64_t v96 = v95 + 2;
          }
          uint64_t v97 = v43;
          uint64_t v98 = v96 >> 1;
          double v69 = &v97[8 * (v96 >> 1)];
          long long v99 = v97;
          if (v42 != v97)
          {
            memmove(v69, v97, v42 - v97);
            long long v99 = v42;
          }
          uint64_t v42 = &v99[8 * v98];
        }
        uint64_t v43 = v97;
      }
      uint64_t v94 = *--v70;
      *((void *)v69 - 1) = v94;
      v69 -= 8;
    }
    while (v70 != *(void **)(a1 + 8));
  }
  double v71 = *(char **)a1;
  *(void *)a1 = v43;
  *(void *)(a1 + 8) = v69;
  *(void *)(a1 + 16) = v42;
  *(void *)(a1 + 24) = v41;
  *(void *)(a1 + 32) += v144;
  if (v71)
  {
    operator delete(v71);
  }
}

void sub_1002F5ED4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F5F20()
{
}

void sub_1002F5F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *(double **)a1;
  unint64_t v8 = *(double **)(a1 + 8);
  unint64_t v9 = (unint64_t)v8 - *(void *)a1;
  if (v8 == *(double **)a1) {
    goto LABEL_16;
  }
  memset(&v54[6], 255, 24);
  uint64_t v10 = v7 + 2;
  double v11 = 0.0;
  if (v9 >= 0x40 && v10 != v8)
  {
    unint64_t v13 = v9 - 32;
    if (v13 >= 0x30)
    {
      uint64_t v16 = (v13 >> 4) + 1;
      uint64_t v17 = 2 * (v16 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v10 = (double *)((char *)v10 + v17 * 8);
      unint64_t v15 = &v7[v17];
      uint64_t v18 = v7 + 4;
      double v14 = 0.0;
      uint64_t v19 = v16 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v20 = v18 - 4;
        float64x2x2_t v55 = vld2q_f64(v20);
        float64x2x2_t v57 = vld2q_f64(v18);
        uint64_t v21 = v18 - 2;
        unint64_t v22 = v18 + 2;
        float64x2x2_t v59 = vld2q_f64(v21);
        float64x2x2_t v61 = vld2q_f64(v22);
        v55.val[0] = vmulq_f64(vaddq_f64(v55.val[0], v59.val[0]), vsubq_f64(v55.val[1], v59.val[1]));
        v55.val[1] = vmulq_f64(vaddq_f64(v57.val[0], v61.val[0]), vsubq_f64(v57.val[1], v61.val[1]));
        double v14 = v14 + v55.val[0].f64[0] + v55.val[0].f64[1] + v55.val[1].f64[0] + v55.val[1].f64[1];
        v18 += 8;
        v19 -= 4;
      }
      while (v19);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_12;
      }
    }
    else
    {
      double v14 = 0.0;
      unint64_t v15 = v7;
    }
    do
    {
      double v23 = *v10;
      v10 += 2;
      double v14 = v14 + (*v15 + v23) * (v15[1] - v15[3]);
      v15 += 2;
    }
    while (v10 != v8);
LABEL_12:
    double v11 = v14 * 0.5;
  }
  unint64_t v25 = *(uint64_t **)v7;
  unint64_t v24 = (uint64_t *)*((void *)v7 + 1);
  double v53 = (_OWORD *)a3;
  uint64_t v26 = sub_1002F7260(a4, (uint64_t *)a3, (uint64_t)&unk_1003FAE80, &v53);
  *((unsigned char *)v26 + 56) = 1;
  v26[8] = v25;
  v26[9] = v24;
  *((double *)v26 + 10) = v11;
  *((_WORD *)v26 + 44) = 0;
  *(_OWORD *)((char *)v26 + 90) = *(_OWORD *)v54;
  *(_OWORD *)(v26 + 13) = *(_OWORD *)&v54[14];
  void v26[15] = (uint64_t *)0xBFF0000000000000;
  uint64_t v28 = v26 + 16;
  uint64_t v27 = v26[16];
  if (v27)
  {
    v26[17] = v27;
    operator delete(v27);
  }
  void *v28 = 0;
  v28[1] = 0;
  double v28[2] = 0;
LABEL_16:
  int64_t v30 = *(double ***)(a1 + 24);
  BOOL v29 = *(double ***)(a1 + 32);
  if (v30 != v29)
  {
    while (1)
    {
      ++*(void *)(a3 + 16);
      unint64_t v31 = *v30;
      int64_t v32 = v30[1];
      unint64_t v33 = (char *)v32 - (char *)*v30;
      if (v32 != *v30) {
        break;
      }
LABEL_19:
      v30 += 3;
      if (v30 == v29) {
        return;
      }
    }
    memset(&v54[6], 255, 24);
    uint64_t v34 = v31 + 2;
    double v35 = 0.0;
    if (v33 < 0x40 || v34 == v32)
    {
LABEL_32:
      uint64_t v49 = *(uint64_t **)v31;
      uint64_t v48 = (uint64_t *)*((void *)v31 + 1);
      double v53 = (_OWORD *)a3;
      double v50 = sub_1002F7260(a4, (uint64_t *)a3, (uint64_t)&unk_1003FAE80, &v53);
      *((unsigned char *)v50 + 56) = 1;
      v50[8] = v49;
      v50[9] = v48;
      *((double *)v50 + 10) = v35;
      *((_WORD *)v50 + 44) = 0;
      *(_OWORD *)((char *)v50 + 90) = *(_OWORD *)v54;
      *(_OWORD *)(v50 + 13) = *(_OWORD *)&v54[14];
      v50[15] = (uint64_t *)0xBFF0000000000000;
      double v52 = v50 + 16;
      unint64_t v51 = v50[16];
      if (v51)
      {
        v50[17] = v51;
        operator delete(v51);
      }
      void *v52 = 0;
      v52[1] = 0;
      v52[2] = 0;
      BOOL v29 = *(double ***)(a1 + 32);
      goto LABEL_19;
    }
    unint64_t v37 = v33 - 32;
    if (v37 >= 0x30)
    {
      uint64_t v40 = (v37 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v34 = (double *)((char *)v34 + v41 * 8);
      uint64_t v39 = &v31[v41];
      uint64_t v42 = v31 + 4;
      double v38 = 0.0;
      uint64_t v43 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v44 = v42 - 4;
        float64x2x2_t v56 = vld2q_f64(v44);
        float64x2x2_t v58 = vld2q_f64(v42);
        uint64_t v45 = v42 - 2;
        uint64_t v46 = v42 + 2;
        float64x2x2_t v60 = vld2q_f64(v45);
        float64x2x2_t v62 = vld2q_f64(v46);
        v56.val[0] = vmulq_f64(vaddq_f64(v56.val[0], v60.val[0]), vsubq_f64(v56.val[1], v60.val[1]));
        v56.val[1] = vmulq_f64(vaddq_f64(v58.val[0], v62.val[0]), vsubq_f64(v58.val[1], v62.val[1]));
        double v38 = v38 + v56.val[0].f64[0] + v56.val[0].f64[1] + v56.val[1].f64[0] + v56.val[1].f64[1];
        v42 += 8;
        v43 -= 4;
      }
      while (v43);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_31;
      }
    }
    else
    {
      double v38 = 0.0;
      uint64_t v39 = v31;
    }
    do
    {
      double v47 = *v34;
      v34 += 2;
      double v38 = v38 + (*v39 + v47) * (v39[1] - v39[3]);
      v39 += 2;
    }
    while (v34 != v32);
LABEL_31:
    double v35 = v38 * 0.5;
    goto LABEL_32;
  }
}

void sub_1002F62D4(double **a1, double ***a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = (void *)(a5 + 8);
  sub_1002F7080(a5, *(void **)(a5 + 8));
  *(void *)a5 = v12;
  uint64_t v49 = (uint64_t **)a5;
  *(void *)(a5 + 16) = 0;
  *unint64_t v12 = 0;
  unint64_t v15 = (void *)*a4;
  double v14 = a4 + 1;
  unint64_t v13 = v15;
  if (v15 != v14)
  {
    uint64_t v16 = (void *)(a3 + 8);
    while (1)
    {
      uint64_t v17 = (void *)*v16;
      if (!*v16) {
        break;
      }
      uint64_t v19 = v13[4];
      uint64_t v18 = v13[5];
      uint64_t v20 = v16;
      uint64_t v21 = v13[6];
      do
      {
        uint64_t v25 = v17[4];
        BOOL v26 = v25 < v19;
        if (v25 == v19)
        {
          uint64_t v27 = v17[5];
          BOOL v26 = v27 < v18;
          if (v27 == v18) {
            BOOL v26 = v17[6] < v21;
          }
        }
        int v22 = v26;
        BOOL v23 = v22 == 0;
        if (v22) {
          unint64_t v24 = v17 + 1;
        }
        else {
          unint64_t v24 = v17;
        }
        if (v23) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = (void *)*v24;
      }
      while (*v24);
      if (v20 == v16) {
        break;
      }
      uint64_t v28 = v20[4];
      if (v19 == v28)
      {
        uint64_t v29 = v20[5];
        if (v18 == v29)
        {
          if (v21 < v20[6]) {
            break;
          }
        }
        else if (v18 < v29)
        {
          break;
        }
      }
      else if (v19 < v28)
      {
        break;
      }
      int v45 = *((unsigned __int8 *)v20 + 56);
      int v46 = *((unsigned __int8 *)v20 + 57);
      int v30 = *((unsigned __int8 *)v20 + 58);
      if (!(v45 | v46)) {
        goto LABEL_26;
      }
LABEL_42:
      double v47 = (void *)v13[1];
      if (v47)
      {
        do
        {
          uint64_t v48 = v47;
          double v47 = (void *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          uint64_t v48 = (void *)v13[2];
          BOOL v23 = *v48 == (void)v13;
          unint64_t v13 = v48;
        }
        while (!v23);
      }
      unint64_t v13 = v48;
      if (v48 == v14) {
        return;
      }
    }
    int v30 = 0;
LABEL_26:
    uint64_t v31 = v13[4];
    if (v31 == 1)
    {
      int v32 = sub_1002F6B28((double *)v13 + 8, a2, (uint64_t)a1);
    }
    else
    {
      if (v31) {
        goto LABEL_31;
      }
      int v32 = sub_1002F699C((double *)v13 + 8, a1, (uint64_t *)a2);
    }
    int v30 = v32 > 0;
LABEL_31:
    if (!v30)
    {
      unint64_t v33 = a1;
      uint64_t v34 = a2;
      uint64_t v35 = a6;
      long long v36 = *(_OWORD *)(v13 + 9);
      long long v37 = *(_OWORD *)(v13 + 13);
      long long v52 = *(_OWORD *)(v13 + 11);
      long long v53 = v37;
      double v38 = (unsigned char *)v13[16];
      unint64_t v54 = (uint64_t *)v13[15];
      long long v50 = *(_OWORD *)(v13 + 7);
      long long v51 = v36;
      float64x2x2_t v56 = 0;
      float64x2x2_t v57 = 0;
      long long __p = 0;
      uint64_t v39 = (unsigned char *)v13[17];
      int64_t v40 = v39 - v38;
      if (v39 != v38)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v40 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
          sub_1000A9108();
        }
        long long __p = operator new(v40);
        float64x2x2_t v56 = (char *)__p;
        uint64_t v41 = (char *)__p + 8 * (v40 >> 3);
        float64x2x2_t v57 = v41;
        memcpy(__p, v38, v40);
        float64x2x2_t v56 = v41;
      }
      LOBYTE(v52) = 0;
      float64x2x2_t v58 = v13 + 4;
      uint64_t v42 = sub_1002F7260(v49, v13 + 4, (uint64_t)&unk_1003FAE80, &v58);
      long long v43 = v50;
      *(_OWORD *)(v42 + 9) = v51;
      long long v44 = v53;
      *(_OWORD *)(v42 + 11) = v52;
      *(_OWORD *)(v42 + 13) = v44;
      v42[15] = v54;
      *(_OWORD *)(v42 + 7) = v43;
      if (v42 + 7 != (uint64_t **)&v50) {
        sub_1002F70E4(v42 + 16, (char *)__p, v56, 0xAAAAAAAAAAAAAAABLL * ((v56 - (unsigned char *)__p) >> 3));
      }
      a6 = v35;
      a1 = v33;
      if (__p)
      {
        float64x2x2_t v56 = (char *)__p;
        operator delete(__p);
      }
      a2 = v34;
    }
    goto LABEL_42;
  }
}

void sub_1002F65E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F6608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *(double **)a1;
  unint64_t v8 = *(double **)(a1 + 8);
  unint64_t v9 = (unint64_t)v8 - *(void *)a1;
  if (v8 == *(double **)a1) {
    goto LABEL_16;
  }
  memset(&v54[6], 255, 24);
  uint64_t v10 = v7 + 2;
  double v11 = 0.0;
  if (v9 >= 0x40 && v10 != v8)
  {
    unint64_t v13 = v9 - 32;
    if (v13 >= 0x30)
    {
      uint64_t v16 = (v13 >> 4) + 1;
      uint64_t v17 = 2 * (v16 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v10 = (double *)((char *)v10 + v17 * 8);
      unint64_t v15 = &v7[v17];
      uint64_t v18 = v7 + 4;
      double v14 = 0.0;
      uint64_t v19 = v16 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v20 = v18 - 4;
        float64x2x2_t v55 = vld2q_f64(v20);
        float64x2x2_t v57 = vld2q_f64(v18);
        uint64_t v21 = v18 - 2;
        int v22 = v18 + 2;
        float64x2x2_t v59 = vld2q_f64(v21);
        float64x2x2_t v61 = vld2q_f64(v22);
        v55.val[0] = vmulq_f64(vaddq_f64(v55.val[0], v59.val[0]), vsubq_f64(v55.val[1], v59.val[1]));
        v55.val[1] = vmulq_f64(vaddq_f64(v57.val[0], v61.val[0]), vsubq_f64(v57.val[1], v61.val[1]));
        double v14 = v14 + v55.val[0].f64[0] + v55.val[0].f64[1] + v55.val[1].f64[0] + v55.val[1].f64[1];
        v18 += 8;
        v19 -= 4;
      }
      while (v19);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_12;
      }
    }
    else
    {
      double v14 = 0.0;
      unint64_t v15 = v7;
    }
    do
    {
      double v23 = *v10;
      v10 += 2;
      double v14 = v14 + (*v15 + v23) * (v15[1] - v15[3]);
      v15 += 2;
    }
    while (v10 != v8);
LABEL_12:
    double v11 = v14 * 0.5;
  }
  uint64_t v25 = *(uint64_t **)v7;
  unint64_t v24 = (uint64_t *)*((void *)v7 + 1);
  long long v53 = (_OWORD *)a3;
  BOOL v26 = sub_1002F7260(a4, (uint64_t *)a3, (uint64_t)&unk_1003FAE80, &v53);
  *((unsigned char *)v26 + 56) = 1;
  v26[8] = v25;
  v26[9] = v24;
  *((double *)v26 + 10) = v11;
  *((_WORD *)v26 + 44) = 0;
  *(_OWORD *)((char *)v26 + 90) = *(_OWORD *)v54;
  *(_OWORD *)(v26 + 13) = *(_OWORD *)&v54[14];
  void v26[15] = (uint64_t *)0xBFF0000000000000;
  uint64_t v28 = v26 + 16;
  uint64_t v27 = v26[16];
  if (v27)
  {
    v26[17] = v27;
    operator delete(v27);
  }
  void *v28 = 0;
  v28[1] = 0;
  double v28[2] = 0;
LABEL_16:
  int v30 = *(double ***)(a1 + 24);
  uint64_t v29 = *(double ***)(a1 + 32);
  if (v30 != v29)
  {
    while (1)
    {
      ++*(void *)(a3 + 16);
      uint64_t v31 = *v30;
      int v32 = v30[1];
      unint64_t v33 = (char *)v32 - (char *)*v30;
      if (v32 != *v30) {
        break;
      }
LABEL_19:
      v30 += 3;
      if (v30 == v29) {
        return;
      }
    }
    memset(&v54[6], 255, 24);
    uint64_t v34 = v31 + 2;
    double v35 = 0.0;
    if (v33 < 0x40 || v34 == v32)
    {
LABEL_32:
      uint64_t v49 = *(uint64_t **)v31;
      uint64_t v48 = (uint64_t *)*((void *)v31 + 1);
      long long v53 = (_OWORD *)a3;
      long long v50 = sub_1002F7260(a4, (uint64_t *)a3, (uint64_t)&unk_1003FAE80, &v53);
      *((unsigned char *)v50 + 56) = 1;
      v50[8] = v49;
      v50[9] = v48;
      *((double *)v50 + 10) = v35;
      *((_WORD *)v50 + 44) = 0;
      *(_OWORD *)((char *)v50 + 90) = *(_OWORD *)v54;
      *(_OWORD *)(v50 + 13) = *(_OWORD *)&v54[14];
      v50[15] = (uint64_t *)0xBFF0000000000000;
      long long v52 = v50 + 16;
      long long v51 = v50[16];
      if (v51)
      {
        v50[17] = v51;
        operator delete(v51);
      }
      void *v52 = 0;
      v52[1] = 0;
      v52[2] = 0;
      uint64_t v29 = *(double ***)(a1 + 32);
      goto LABEL_19;
    }
    unint64_t v37 = v33 - 32;
    if (v37 >= 0x30)
    {
      uint64_t v40 = (v37 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v34 = (double *)((char *)v34 + v41 * 8);
      uint64_t v39 = &v31[v41];
      uint64_t v42 = v31 + 4;
      double v38 = 0.0;
      uint64_t v43 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        long long v44 = v42 - 4;
        float64x2x2_t v56 = vld2q_f64(v44);
        float64x2x2_t v58 = vld2q_f64(v42);
        int v45 = v42 - 2;
        int v46 = v42 + 2;
        float64x2x2_t v60 = vld2q_f64(v45);
        float64x2x2_t v62 = vld2q_f64(v46);
        v56.val[0] = vmulq_f64(vaddq_f64(v56.val[0], v60.val[0]), vsubq_f64(v56.val[1], v60.val[1]));
        v56.val[1] = vmulq_f64(vaddq_f64(v58.val[0], v62.val[0]), vsubq_f64(v58.val[1], v62.val[1]));
        double v38 = v38 + v56.val[0].f64[0] + v56.val[0].f64[1] + v56.val[1].f64[0] + v56.val[1].f64[1];
        v42 += 8;
        v43 -= 4;
      }
      while (v43);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_31;
      }
    }
    else
    {
      double v38 = 0.0;
      uint64_t v39 = v31;
    }
    do
    {
      double v47 = *v34;
      v34 += 2;
      double v38 = v38 + (*v39 + v47) * (v39[1] - v39[3]);
      v39 += 2;
    }
    while (v34 != v32);
LABEL_31:
    double v35 = v38 * 0.5;
    goto LABEL_32;
  }
}

uint64_t sub_1002F699C(double *a1, double **a2, uint64_t *a3)
{
  uint64_t result = sub_1002C3108(a1, a3);
  if (result) {
    return result;
  }
  unint64_t v7 = a2[3];
  unint64_t v6 = a2[4];
  unint64_t v8 = *a2;
  unint64_t v9 = a2[1];
  if (v7 == v6)
  {
    uint64_t v10 = 0;
    if (v8 != v9) {
      goto LABEL_8;
    }
  }
  else
  {
    while (1)
    {
      uint64_t v10 = *(double **)v7;
      if (*(void *)v7 != *((void *)v7 + 1)) {
        break;
      }
      v7 += 3;
      if (v7 == v6)
      {
        uint64_t v10 = 0;
        unint64_t v7 = v6;
        break;
      }
    }
    if (v8 != v9)
    {
LABEL_8:
      double v11 = v8 + 2;
      goto LABEL_18;
    }
  }
  if (v7 != v6)
  {
    v10 += 2;
    if (v10 == *((double **)v7 + 1))
    {
      while (1)
      {
        v7 += 3;
        if (v7 == v6) {
          break;
        }
        unint64_t v12 = *(double **)v7;
        if (*(void *)v7 != *((void *)v7 + 1)) {
          goto LABEL_17;
        }
      }
LABEL_28:
      unint64_t v7 = v6;
      double v11 = v9;
    }
    else
    {
      double v11 = v9;
    }
    while (1)
    {
LABEL_18:
      while (v11 != v9)
      {
        uint64_t result = sub_1002C3108(v11, a3);
        if (result) {
          return result;
        }
        v11 += 2;
      }
      if (v7 == v6) {
        break;
      }
      uint64_t result = sub_1002C3108(v10, a3);
      if (result) {
        return result;
      }
      v10 += 2;
      double v11 = v9;
      if (v10 == *((double **)v7 + 1))
      {
        unint64_t v13 = v7 + 3;
        unint64_t v7 = v6;
        double v11 = v9;
        if (v13 != v6)
        {
          unint64_t v7 = v13;
          while (1)
          {
            unint64_t v12 = *(double **)v7;
            if (*(void *)v7 != *((void *)v7 + 1)) {
              break;
            }
            v7 += 3;
            if (v7 == v6) {
              goto LABEL_28;
            }
          }
LABEL_17:
          uint64_t v10 = v12;
          double v11 = v9;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1002F6B28(double *a1, double ***a2, uint64_t a3)
{
  unint64_t v3 = *(double **)a3;
  uint64_t v4 = *(double **)(a3 + 8);
  if ((unint64_t)v4 - *(void *)a3 < 0x40) {
    return 0xFFFFFFFFLL;
  }
  int v43 = 0;
  char v44 = 0;
  if (v3 + 2 == v4) {
    return 0xFFFFFFFFLL;
  }
  do
  {
    if (!sub_10004D030(a1, v3, v3 + 2, (uint64_t)&v43)) {
      break;
    }
    unint64_t v8 = v3 + 4;
    v3 += 2;
  }
  while (v8 != v4);
  if (v43) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  if (!v44)
  {
    if (v43)
    {
      uint64_t v19 = *(double ***)(a3 + 24);
      uint64_t v18 = *(double ***)(a3 + 32);
      if (v19 != v18)
      {
        while (1)
        {
          uint64_t v20 = *v19;
          uint64_t v21 = v19[1];
          if ((unint64_t)((char *)v21 - (char *)*v19) >= 0x40)
          {
            int v43 = 0;
            char v44 = 0;
            if (v20 + 2 != v21)
            {
              do
              {
                if (!sub_10004D030(a1, v20, v20 + 2, (uint64_t)&v43)) {
                  break;
                }
                int v22 = v20 + 4;
                v20 += 2;
              }
              while (v22 != v21);
              if (v44) {
                goto LABEL_9;
              }
              if (v43) {
                return 0xFFFFFFFFLL;
              }
              uint64_t v18 = *(double ***)(a3 + 32);
            }
          }
          v19 += 3;
          if (v19 == v18) {
            return v9;
          }
        }
      }
      return 1;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_9:
  double v11 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10) {
    return 0;
  }
  uint64_t v42 = a3;
  while (1)
  {
    unint64_t v13 = *v11;
    double v14 = v11[3];
    unint64_t v15 = v11[4];
    if (v14 != v15) {
      break;
    }
    unint64_t v12 = v11[1];
    if (v13 != v12)
    {
      uint64_t v17 = 0;
      unint64_t v15 = v11[3];
      goto LABEL_39;
    }
LABEL_12:
    v11 += 6;
    if (v11 == v10) {
      return 0;
    }
  }
  uint64_t v16 = v11[3];
  while (*(void *)v16 == *((void *)v16 + 1))
  {
    v16 += 3;
    if (v16 == v15)
    {
      uint64_t v16 = v11[4];
      break;
    }
  }
  unint64_t v12 = v11[1];
  if (v16 == v15 && v13 == v12) {
    goto LABEL_12;
  }
  while (*(void *)v14 == *((void *)v14 + 1))
  {
    v14 += 3;
    if (v14 == v15)
    {
      uint64_t v17 = 0;
      double v14 = v11[4];
      goto LABEL_39;
    }
  }
  if (v14 == v15) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = *(double **)v14;
  }
LABEL_39:
  if (v11 == v10) {
    return 0;
  }
  if (v13 == v12)
  {
    v17 += 2;
    if (v17 == *((double **)v14 + 1))
    {
      v14 += 3;
      if (v14 == v15)
      {
LABEL_46:
        double v14 = v15;
      }
      else
      {
        while (*(void *)v14 == *((void *)v14 + 1))
        {
          v14 += 3;
          if (v14 == v15) {
            goto LABEL_46;
          }
        }
        uint64_t v17 = *(double **)v14;
      }
    }
  }
  else
  {
    v13 += 2;
  }
  if (v14 != v15 || v13 != v12) {
    goto LABEL_69;
  }
  v11 += 6;
  if (v11 == v10) {
    return 0;
  }
  while (2)
  {
    unint64_t v13 = *v11;
    double v14 = v11[3];
    unint64_t v15 = v11[4];
    if (v14 == v15)
    {
      unint64_t v12 = v11[1];
      if (v13 != v12)
      {
        unint64_t v15 = v11[3];
        goto LABEL_69;
      }
      goto LABEL_53;
    }
    double v23 = v11[3];
    while (*(void *)v23 == *((void *)v23 + 1))
    {
      v23 += 3;
      if (v23 == v15)
      {
        double v23 = v11[4];
        break;
      }
    }
    unint64_t v12 = v11[1];
    if (v23 == v15 && v13 == v12)
    {
LABEL_53:
      uint64_t v9 = 0;
      v11 += 6;
      if (v11 == v10) {
        return v9;
      }
      continue;
    }
    break;
  }
  while (1)
  {
    unint64_t v24 = *(double **)v14;
    if (*(void *)v14 != *((void *)v14 + 1)) {
      break;
    }
    v14 += 3;
    if (v14 == v15)
    {
      unint64_t v24 = 0;
      double v14 = v11[4];
      break;
    }
  }
  if (v14 != v15) {
    uint64_t v17 = v24;
  }
LABEL_69:
  if (v11 != v10)
  {
    uint64_t v40 = a2[1];
    uint64_t v41 = v17;
    while (1)
    {
      if (v13 == v12) {
        uint64_t v25 = v41;
      }
      else {
        uint64_t v25 = v13;
      }
      BOOL v26 = *(double **)v42;
      uint64_t v27 = *(double **)(v42 + 8);
      if ((unint64_t)v27 - *(void *)v42 < 0x40) {
        return 0xFFFFFFFFLL;
      }
      int v43 = 0;
      char v44 = 0;
      if (v26 + 2 == v27) {
        return 0xFFFFFFFFLL;
      }
      do
      {
        if (!sub_10004D030(v25, v26, v26 + 2, (uint64_t)&v43)) {
          break;
        }
        uint64_t v28 = v26 + 4;
        v26 += 2;
      }
      while (v28 != v27);
      if (!v44)
      {
        if (!v43) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v31 = *(double ***)(v42 + 24);
        int v30 = *(double ***)(v42 + 32);
        if (v31 != v30)
        {
          while (1)
          {
            unint64_t v33 = *v31;
            int v32 = v31[1];
            if ((unint64_t)((char *)v32 - (char *)*v31) >= 0x40)
            {
              int v43 = 0;
              char v44 = 0;
              if (v33 + 2 != v32)
              {
                do
                {
                  if (!sub_10004D030(v25, v33, v33 + 2, (uint64_t)&v43)) {
                    break;
                  }
                  uint64_t v34 = v33 + 4;
                  v33 += 2;
                }
                while (v34 != v32);
                if (v44) {
                  goto LABEL_81;
                }
                if (v43) {
                  return 0xFFFFFFFFLL;
                }
                int v30 = *(double ***)(v42 + 32);
              }
            }
            v31 += 3;
            uint64_t v9 = 1;
            if (v31 == v30) {
              return v9;
            }
          }
        }
        return 1;
      }
LABEL_81:
      uint64_t v29 = v41;
      if (v13 == v12)
      {
        uint64_t v29 = v41 + 2;
        if (v41 + 2 == *((double **)v14 + 1))
        {
          v14 += 3;
          if (v14 == v15)
          {
LABEL_98:
            double v14 = v15;
          }
          else
          {
            while (*(void *)v14 == *((void *)v14 + 1))
            {
              v14 += 3;
              if (v14 == v15) {
                goto LABEL_98;
              }
            }
            uint64_t v29 = *(double **)v14;
          }
        }
      }
      else
      {
        v13 += 2;
      }
      BOOL v35 = v13 == v11[1] && v14 == v11[4];
      uint64_t v41 = v29;
      if (!v35 || v14 != v15 && v29) {
        goto LABEL_72;
      }
      v11 += 6;
      if (v11 == v40) {
        return 0;
      }
      while (1)
      {
        unint64_t v13 = *v11;
        double v14 = v11[3];
        unint64_t v15 = v11[4];
        if (v14 != v15) {
          break;
        }
        unint64_t v12 = v11[1];
        if (v13 != v12)
        {
          unint64_t v15 = v11[3];
          goto LABEL_72;
        }
LABEL_110:
        uint64_t v9 = 0;
        v11 += 6;
        if (v11 == v40) {
          return v9;
        }
      }
      long long v36 = v11[3];
      while (*(void *)v36 == *((void *)v36 + 1))
      {
        v36 += 3;
        if (v36 == v15)
        {
          long long v36 = v11[4];
          break;
        }
      }
      unint64_t v12 = v11[1];
      if (v36 == v15 && v13 == v12) {
        goto LABEL_110;
      }
      while (1)
      {
        unint64_t v37 = *(double **)v14;
        if (*(void *)v14 != *((void *)v14 + 1)) {
          break;
        }
        v14 += 3;
        if (v14 == v15)
        {
          unint64_t v37 = 0;
          double v14 = v11[4];
          break;
        }
      }
      double v38 = v29;
      if (v14 != v15) {
        double v38 = v37;
      }
      uint64_t v41 = v38;
LABEL_72:
      uint64_t v9 = 0;
      if (v11 == v40) {
        return v9;
      }
    }
  }
  return 0;
}

void sub_1002F7080(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002F7080(a1, *a2);
    sub_1002F7080(a1, a2[1]);
    uint64_t v4 = (void *)a2[16];
    if (v4)
    {
      a2[17] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void *sub_1002F70E4(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_23:
    }
      sub_1000A9108();
    uint64_t v13 = 3 * v12;
    uint64_t result = operator new(24 * v12);
    uint64_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    _DWORD v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 3) >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    uint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *unint64_t v15 = &v9[v14];
  return result;
}

uint64_t **sub_1002F7260(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = (uint64_t *)a2[1];
    unint64_t v10 = (uint64_t *)a2[2];
    while (1)
    {
      while (1)
      {
        uint64_t v11 = (uint64_t **)v6;
        uint64_t v12 = v6[4];
        if (v8 == v12) {
          break;
        }
        if (v8 < v12) {
          goto LABEL_3;
        }
        if (v12 >= v8) {
          return v11;
        }
LABEL_14:
        unint64_t v6 = v11[1];
        if (!v6)
        {
          unint64_t v7 = v11 + 1;
          goto LABEL_17;
        }
      }
      uint64_t v13 = v11[5];
      if (v9 != v13)
      {
        if ((uint64_t)v9 < (uint64_t)v13) {
          goto LABEL_3;
        }
        if ((uint64_t)v13 >= (uint64_t)v9) {
          return v11;
        }
        goto LABEL_14;
      }
      size_t v14 = v11[6];
      if ((uint64_t)v10 >= (uint64_t)v14)
      {
        if ((uint64_t)v14 >= (uint64_t)v10) {
          return v11;
        }
        goto LABEL_14;
      }
LABEL_3:
      unint64_t v6 = *v11;
      unint64_t v7 = v11;
      if (!*v11) {
        goto LABEL_17;
      }
    }
  }
  uint64_t v11 = a1 + 1;
LABEL_17:
  unint64_t v15 = v11;
  uint64_t v16 = operator new(0x98uLL);
  uint64_t v17 = *((void *)*a4 + 2);
  v16[2] = **a4;
  *((void *)v16 + 6) = v17;
  *((unsigned char *)v16 + 56) = 0;
  *((void *)v16 + 10) = 0;
  *((_WORD *)v16 + 44) = 0;
  *((void *)v16 + 12) = -1;
  *((void *)v16 + 13) = -1;
  *((void *)v16 + 14) = -1;
  *((void *)v16 + 15) = 0xBFF0000000000000;
  *((void *)v16 + 17) = 0;
  *((void *)v16 + 18) = 0;
  *((void *)v16 + 16) = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = v15;
  *unint64_t v7 = (uint64_t *)v16;
  uint64_t v18 = (uint64_t *)**a1;
  uint64_t v19 = (uint64_t *)v16;
  if (v18)
  {
    *a1 = v18;
    uint64_t v19 = *v7;
  }
  sub_1000619B8(a1[1], v19);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v16;
}

uint64_t sub_1002F73C0(double **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  if (0x8E38E38E38E38E39 * (v7 - *a1) <= a5)
  {
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      while (1)
      {
        uint64_t v13 = v8;
        v8 += 9;
        size_t v14 = (long long *)v8;
        if (v8 != v7) {
          break;
        }
LABEL_6:
        uint64_t v12 = 1;
        if (v8 == v7) {
          return v12;
        }
      }
      while ((sub_1002F7CD0(a2, v13, v14, 1) & 1) != 0)
      {
        unint64_t v7 = (double *)v14 + 9;
        size_t v14 = (long long *)v7;
        if (v7 == a1[1]) {
          goto LABEL_6;
        }
      }
      return 0;
    }
  }
  else
  {
    long long __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    v16[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v16[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    sub_1002F7520(a1, (double *)v16, (char **)&__p);
    uint64_t v12 = sub_1002F77B8((double *)v16, (double ***)&__p, 0, a5, a2, a3, a4, (uint64_t)&v20);
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_1002F7504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F7520(double **a1, double *a2, char **a3)
{
  for (uint64_t i = *a1; i != a1[1]; i += 9)
  {
    double v8 = i[5];
    double v9 = *a2;
    if (v8 < *a2)
    {
      *a2 = v8;
      double v9 = v8;
      double v10 = a2[2];
      if (v8 <= v10)
      {
LABEL_7:
        double v11 = i[6];
        double v12 = a2[1];
        if (v11 >= v12) {
          goto LABEL_8;
        }
        goto LABEL_17;
      }
    }
    else
    {
      double v10 = a2[2];
      if (v8 <= v10) {
        goto LABEL_7;
      }
    }
    a2[2] = v8;
    double v10 = v8;
    double v11 = i[6];
    double v12 = a2[1];
    if (v11 >= v12)
    {
LABEL_8:
      double v13 = a2[3];
      if (v11 <= v13) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
LABEL_17:
    a2[1] = v11;
    double v12 = v11;
    double v13 = a2[3];
    if (v11 <= v13)
    {
LABEL_9:
      double v14 = i[7];
      if (v14 >= v9) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
LABEL_18:
    a2[3] = v11;
    double v13 = v11;
    double v14 = i[7];
    if (v14 >= v9)
    {
LABEL_10:
      if (v14 <= v10) {
        goto LABEL_11;
      }
      goto LABEL_20;
    }
LABEL_19:
    *a2 = v14;
    if (v14 <= v10)
    {
LABEL_11:
      double v15 = i[8];
      if (v15 >= v12) {
        goto LABEL_12;
      }
      goto LABEL_21;
    }
LABEL_20:
    a2[2] = v14;
    double v15 = i[8];
    if (v15 >= v12)
    {
LABEL_12:
      if (v15 <= v13) {
        goto LABEL_13;
      }
      goto LABEL_22;
    }
LABEL_21:
    a2[1] = v15;
    if (v15 <= v13)
    {
LABEL_13:
      uint64_t v17 = a3[1];
      unint64_t v16 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v16) {
        goto LABEL_23;
      }
      goto LABEL_3;
    }
LABEL_22:
    a2[3] = v15;
    uint64_t v17 = a3[1];
    unint64_t v16 = (unint64_t)a3[2];
    if ((unint64_t)v17 >= v16)
    {
LABEL_23:
      uint64_t v18 = *a3;
      uint64_t v19 = v17 - *a3;
      uint64_t v20 = v19 >> 3;
      unint64_t v21 = (v19 >> 3) + 1;
      if (v21 >> 61) {
        sub_1000A9108();
      }
      uint64_t v22 = v16 - (void)v18;
      if (v22 >> 2 > v21) {
        unint64_t v21 = v22 >> 2;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 >> 61) {
          sub_1000A6A10();
        }
        unint64_t v24 = operator new(8 * v23);
        uint64_t v25 = (double **)&v24[8 * v20];
        *uint64_t v25 = i;
        uint64_t v7 = (uint64_t)(v25 + 1);
        if (v17 == v18) {
          goto LABEL_41;
        }
LABEL_34:
        unint64_t v26 = v17 - 8 - v18;
        if (v26 < 0x58) {
          goto LABEL_48;
        }
        if ((unint64_t)(v17 - &v24[v19]) < 0x20) {
          goto LABEL_48;
        }
        uint64_t v27 = (v26 >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v29 = &v17[-v28];
        uint64_t v25 = (double **)((char *)v25 - v28);
        int v30 = &v24[8 * v20 - 16];
        uint64_t v31 = v17 - 16;
        uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *int v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        uint64_t v17 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_48:
          do
          {
            uint64_t v34 = (double *)*((void *)v17 - 1);
            v17 -= 8;
            *--uint64_t v25 = v34;
          }
          while (v17 != v18);
        }
        uint64_t v17 = *a3;
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = (double **)(8 * v20);
        *(void *)(8 * v20) = i;
        uint64_t v7 = 8 * v20 + 8;
        if (v17 != v18) {
          goto LABEL_34;
        }
      }
LABEL_41:
      *a3 = (char *)v25;
      a3[1] = (char *)v7;
      a3[2] = &v24[8 * v23];
      if (v17) {
        operator delete(v17);
      }
      goto LABEL_4;
    }
LABEL_3:
    *(void *)uint64_t v17 = i;
    uint64_t v7 = (uint64_t)(v17 + 8);
LABEL_4:
    a3[1] = (char *)v7;
  }
}

uint64_t sub_1002F77B8(double *a1, double ***a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v14 = (*a1 + a1[2]) * 0.5;
  long long v15 = *((_OWORD *)a1 + 1);
  long long v64 = *(_OWORD *)a1;
  uint64_t v66 = *((void *)&v15 + 1);
  v62[1] = *((double *)&v64 + 1);
  long long v63 = v15;
  double v65 = v14;
  v62[0] = v14;
  float64x2x2_t v59 = 0;
  float64x2x2_t v60 = 0;
  uint64_t v61 = 0;
  float64x2x2_t v56 = 0;
  float64x2x2_t v57 = 0;
  uint64_t v58 = 0;
  long long __p = 0;
  unint64_t v54 = 0;
  uint64_t v55 = 0;
  sub_1002F81F4((double *)&v64, v62, a2, (double ***)&v59, &v56, &__p);
  uint64_t v17 = (double **)__p;
  unint64_t v16 = v54;
  if (__p != v54)
  {
    int8x16_t v51 = 0u;
    int8x16_t v52 = 0u;
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    uint64_t v20 = (long long **)__p;
    int8x16_t v21 = (int8x16_t)v19;
    int8x16_t v22 = (int8x16_t)v18;
    do
    {
      uint64_t v23 = (uint64_t)*v20++;
      float64x2_t v24 = *(float64x2_t *)(v23 + 40);
      int8x16_t v25 = (int8x16_t)vcgtq_f64(v19, v24);
      int8x16_t v26 = vbslq_s8(v25, (int8x16_t)v24, v21);
      float64x2_t v27 = (float64x2_t)vbslq_s8(v25, (int8x16_t)v24, (int8x16_t)v19);
      float64x2_t v28 = *(float64x2_t *)(v23 + 56);
      int8x16_t v29 = (int8x16_t)vcgtq_f64(v27, v28);
      int8x16_t v21 = vbslq_s8(v29, (int8x16_t)v28, v26);
      float64x2_t v19 = (float64x2_t)vbslq_s8(v29, (int8x16_t)v28, (int8x16_t)v27);
      int8x16_t v30 = (int8x16_t)vcgtq_f64(v24, v18);
      int8x16_t v31 = vbslq_s8(v30, (int8x16_t)v24, v22);
      float64x2_t v32 = (float64x2_t)vbslq_s8(v30, (int8x16_t)v24, (int8x16_t)v18);
      int8x16_t v33 = (int8x16_t)vcgtq_f64(v28, v32);
      int8x16_t v22 = vbslq_s8(v33, (int8x16_t)v28, v31);
      float64x2_t v18 = (float64x2_t)vbslq_s8(v33, (int8x16_t)v28, (int8x16_t)v32);
    }
    while (v20 != v54);
    int8x16_t v51 = v21;
    int8x16_t v52 = v22;
    if (a3 > 0x63 || ((char *)v54 - (unsigned char *)__p) >> 3 < a4)
    {
      while (1)
      {
        BOOL v35 = (long long **)(v17 + 1);
        if (v17 + 1 != (double **)v16) {
          break;
        }
LABEL_13:
        ++v17;
        if (v35 == v16) {
          goto LABEL_8;
        }
      }
      unint64_t v16 = (long long **)(v17 + 1);
      while ((sub_1002F7CD0(a5, *v17, *v16, 1) & 1) != 0)
      {
        if (++v16 == v54) {
          goto LABEL_13;
        }
      }
      goto LABEL_41;
    }
    if (!sub_1002F871C((double *)v51.i64, (double ***)&__p, a3 + 1, a4, a5, a6, a7, a8)) {
      goto LABEL_41;
    }
    unint64_t v16 = v54;
LABEL_8:
    uint64_t v34 = (double **)__p;
    if (a4 > ((char *)v16 - (unsigned char *)__p) >> 3 || a3 > 0x63 || ((char *)v60 - (unsigned char *)v59) >> 3 < a4)
    {
      if (__p != v16)
      {
        long long v36 = v60;
        if (v59 != v60)
        {
          while (1)
          {
            uint64_t v39 = (long long **)v59;
            if (v59 != v36) {
              break;
            }
LABEL_25:
            if (++v34 == (double **)v16) {
              goto LABEL_21;
            }
          }
          while ((sub_1002F7CD0(a5, *v34, *v39, 1) & 1) != 0)
          {
            if (++v39 == v60)
            {
              unint64_t v16 = v54;
              long long v36 = v39;
              goto LABEL_25;
            }
          }
          goto LABEL_41;
        }
      }
    }
    else
    {
      if (!sub_1002F95F8((uint64_t)&v51, (double ***)&__p, (double ***)&v59, a3 + 1, a4, a5, a6, a7, a6, a7, a8))goto LABEL_41; {
      unint64_t v16 = v54;
      }
    }
LABEL_21:
    unint64_t v37 = (double **)__p;
    if (a4 <= ((char *)v16 - (unsigned char *)__p) >> 3 && a3 <= 0x63 && ((char *)v57 - (unsigned char *)v56) >> 3 >= a4)
    {
      if (sub_1002F95F8((uint64_t)&v51, (double ***)&__p, (double ***)&v56, a3 + 1, a4, a5, a6, a7, a6, a7, a8)) {
        goto LABEL_38;
      }
LABEL_41:
      uint64_t v43 = 0;
      goto LABEL_42;
    }
    if (__p != v16)
    {
      double v38 = v57;
      if (v56 != v57)
      {
        while (1)
        {
          uint64_t v40 = (long long **)v56;
          if (v56 != v38) {
            break;
          }
LABEL_30:
          if (++v37 == (double **)v16) {
            goto LABEL_38;
          }
        }
        while ((sub_1002F7CD0(a5, *v37, *v40, 1) & 1) != 0)
        {
          if (++v40 == v57)
          {
            unint64_t v16 = v54;
            double v38 = v40;
            goto LABEL_30;
          }
        }
        goto LABEL_41;
      }
    }
  }
LABEL_38:
  uint64_t v42 = (double **)v59;
  uint64_t v41 = v60;
  if (a3 > 0x63 || ((char *)v60 - (unsigned char *)v59) >> 3 < a4)
  {
LABEL_52:
    while (v42 != (double **)v41)
    {
      int v45 = v42++;
      int v46 = (long long **)v42;
      if (v42 != (double **)v41)
      {
        while ((sub_1002F7CD0(a5, *v45, *v46, 1) & 1) != 0)
        {
          uint64_t v41 = v46 + 1;
          int v46 = v41;
          if (v41 == v60) {
            goto LABEL_52;
          }
        }
        goto LABEL_41;
      }
    }
  }
  else if (!sub_1002F871C((double *)&v64, (double ***)&v59, a3 + 1, a4, a5, a6, a7, a8))
  {
    goto LABEL_41;
  }
  uint64_t v48 = (double **)v56;
  double v47 = v57;
  if (a3 > 0x63 || ((char *)v57 - (unsigned char *)v56) >> 3 < a4)
  {
    if (v56 != v57)
    {
      while (1)
      {
        uint64_t v49 = v48++;
        long long v50 = (long long **)v48;
        if (v48 != (double **)v47) {
          break;
        }
LABEL_58:
        uint64_t v43 = 1;
        if (v48 == (double **)v47) {
          goto LABEL_42;
        }
      }
      while ((sub_1002F7CD0(a5, *v49, *v50, 1) & 1) != 0)
      {
        double v47 = v50 + 1;
        long long v50 = v47;
        if (v47 == v57) {
          goto LABEL_58;
        }
      }
      goto LABEL_41;
    }
    uint64_t v43 = 1;
  }
  else
  {
    uint64_t v43 = sub_1002F871C(v62, (double ***)&v56, a3 + 1, a4, a5, a6, a7, a8);
  }
LABEL_42:
  if (__p)
  {
    unint64_t v54 = (long long **)__p;
    operator delete(__p);
  }
  if (v56)
  {
    float64x2x2_t v57 = (long long **)v56;
    operator delete(v56);
  }
  if (v59)
  {
    float64x2x2_t v60 = (long long **)v59;
    operator delete(v59);
  }
  return v43;
}

void sub_1002F7C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    int8x16_t v26 = a21;
    if (!a21)
    {
LABEL_3:
      float64x2_t v27 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    int8x16_t v26 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  float64x2_t v27 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F7CD0(uint64_t a1, double *a2, long long *a3, int a4)
{
  if (a4 && (uint64_t v7 = (double *)(a3 + 2), a2[4] < *((double *)a3 + 4)))
  {
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_11;
    }
    double v40 = *((double *)a3 + 3);
    if (v40 > 0.0)
    {
      if ((*(void *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_55;
      }
      double v41 = fabs(v40);
      double v42 = 2.22044605e-16;
      if (v41 >= 1.0) {
        double v42 = v41 * 2.22044605e-16;
      }
      if (v41 > v42)
      {
LABEL_55:
        double v43 = a2[3];
        if (v43 < 0.0)
        {
          if ((*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((double v44 = vabdd_f64(0.0, v43), v45 = fmax(fabs(v43), 0.0), v45 >= 1.0)
              ? (double v46 = v45 * 2.22044605e-16)
              : (double v46 = 2.22044605e-16),
                v44 > v46))
          {
LABEL_11:
            double v8 = *(uint64_t ***)(a1 + 24);
            float64x2x2_t v62 = a2;
            double v9 = sub_1002F7260(v8, (uint64_t *)a2, (uint64_t)&unk_1003FAE80, (_OWORD **)&v62);
            double v10 = *((double *)v9 + 8);
            if (v10 >= *((double *)a3 + 5) && v10 <= *((double *)a3 + 7))
            {
              double v12 = v9;
              double v13 = *((double *)v9 + 9);
              if (v13 >= *((double *)a3 + 6) && v13 <= *((double *)a3 + 8))
              {
                uint64_t v15 = *(void *)a1;
                unint64_t v16 = *(void **)(a1 + 16);
                uint64_t v17 = **(void **)(a1 + 8);
                double v18 = *a2;
                if (*(void *)a2 == 2)
                {
                  uint64_t v53 = *((void *)a2 + 1);
                  unint64_t v54 = v16[4];
                  uint64_t v55 = v16[1];
                  float64x2x2_t v56 = (void *)(v55 + 8 * (v54 / 0xAA));
                  if (v16[2] == v55) {
                    uint64_t v20 = 0;
                  }
                  else {
                    uint64_t v20 = (double **)(*v56 + 24 * (v54 % 0xAA));
                  }
                  if (v53)
                  {
                    uint64_t v59 = v53 - 0x5555555555555555 * (((uint64_t)v20 - *v56) >> 3);
                    if (v59 < 1) {
                      uint64_t v20 = (double **)(v56[-((169 - v59) / 0xAAuLL)]
                    }
                                      + 24 * (170 * ((169 - v59) / 0xAAuLL) - (169 - v59))
                                      + 4056);
                    else {
                      uint64_t v20 = (double **)(v56[v59 / 0xAAuLL] + 24 * (v59 % 0xAAuLL));
                    }
                  }
                }
                else if (*(void *)&v18 == 1)
                {
                  uint64_t v57 = *((void *)a2 + 2);
                  if (v57 >= 0) {
                    uint64_t v20 = (double **)(*(void *)(v17 + 48 * *((void *)a2 + 1) + 24) + 24 * v57);
                  }
                  else {
                    uint64_t v20 = (double **)(v17 + 48 * *((void *)a2 + 1));
                  }
                }
                else
                {
                  if (v18 != 0.0) {
                    return 1;
                  }
                  uint64_t v19 = *((void *)a2 + 2);
                  if (v19 >= 0) {
                    uint64_t v20 = (double **)(*(void *)(v15 + 24) + 24 * v19);
                  }
                  else {
                    uint64_t v20 = *(double ***)a1;
                  }
                }
                if (sub_1002F9FB8((uint64_t)(v9 + 7), v20, (uint64_t *)a3, v15, v17, v16)
                  && (v12[12] == (uint64_t *)-1 || *v7 < *((double *)v12 + 15)))
                {
                  long long v60 = *a3;
                  v12[14] = (uint64_t *)*((void *)a3 + 2);
                  *((_OWORD *)v12 + 6) = v60;
                  goto LABEL_85;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 40)) {
      goto LABEL_26;
    }
    double v33 = a2[3];
    if (v33 > 0.0)
    {
      if ((*(void *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_43;
      }
      double v34 = fabs(v33);
      double v35 = 2.22044605e-16;
      if (v34 >= 1.0) {
        double v35 = v34 * 2.22044605e-16;
      }
      if (v34 > v35)
      {
LABEL_43:
        double v36 = *((double *)a3 + 3);
        if (v36 < 0.0)
        {
          if ((*(void *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || ((v37 = vabdd_f64(0.0, v36), double v38 = fmax(fabs(v36), 0.0), v38 >= 1.0)
              ? (double v39 = v38 * 2.22044605e-16)
              : (double v39 = 2.22044605e-16),
                v37 > v39))
          {
LABEL_26:
            int8x16_t v21 = *(uint64_t ***)(a1 + 24);
            float64x2x2_t v62 = (double *)a3;
            int8x16_t v22 = sub_1002F7260(v21, (uint64_t *)a3, (uint64_t)&unk_1003FAE80, (_OWORD **)&v62);
            double v23 = *((double *)v22 + 8);
            if (v23 >= a2[5] && v23 <= a2[7])
            {
              double v12 = v22;
              double v25 = *((double *)v22 + 9);
              if (v25 >= a2[6] && v25 <= a2[8])
              {
                uint64_t v27 = *(void *)a1;
                float64x2_t v28 = *(void **)(a1 + 16);
                uint64_t v29 = **(void **)(a1 + 8);
                uint64_t v30 = *(void *)a3;
                if (*(void *)a3 == 2)
                {
                  uint64_t v47 = *((void *)a3 + 1);
                  unint64_t v48 = v28[4];
                  uint64_t v49 = v28[1];
                  long long v50 = (void *)(v49 + 8 * (v48 / 0xAA));
                  if (v28[2] == v49) {
                    float64x2_t v32 = 0;
                  }
                  else {
                    float64x2_t v32 = (double **)(*v50 + 24 * (v48 % 0xAA));
                  }
                  if (v47)
                  {
                    uint64_t v52 = v47 - 0x5555555555555555 * (((uint64_t)v32 - *v50) >> 3);
                    if (v52 < 1) {
                      float64x2_t v32 = (double **)(v50[-((169 - v52) / 0xAAuLL)]
                    }
                                      + 24 * (170 * ((169 - v52) / 0xAAuLL) - (169 - v52))
                                      + 4056);
                    else {
                      float64x2_t v32 = (double **)(v50[v52 / 0xAAuLL] + 24 * (v52 % 0xAAuLL));
                    }
                  }
                }
                else if (v30 == 1)
                {
                  uint64_t v51 = *((void *)a3 + 2);
                  if (v51 >= 0) {
                    float64x2_t v32 = (double **)(*(void *)(v29 + 48 * *((void *)a3 + 1) + 24) + 24 * v51);
                  }
                  else {
                    float64x2_t v32 = (double **)(v29 + 48 * *((void *)a3 + 1));
                  }
                }
                else
                {
                  if (v30) {
                    return 1;
                  }
                  uint64_t v31 = *((void *)a3 + 2);
                  if (v31 >= 0) {
                    float64x2_t v32 = (double **)(*(void *)(v27 + 24) + 24 * v31);
                  }
                  else {
                    float64x2_t v32 = *(double ***)a1;
                  }
                }
                if (sub_1002F9FB8((uint64_t)(v22 + 7), v32, (uint64_t *)a2, v27, v29, v28)
                  && (v12[12] == (uint64_t *)-1 || a2[4] < *((double *)v12 + 15)))
                {
                  long long v58 = *(_OWORD *)a2;
                  v12[14] = (uint64_t *)*((void *)a2 + 2);
                  *((_OWORD *)v12 + 6) = v58;
                  uint64_t v7 = a2 + 4;
LABEL_85:
                  v12[15] = *(uint64_t **)v7;
                }
              }
            }
          }
        }
      }
    }
  }
  return 1;
}

double *sub_1002F81F4(double *result, double *a2, double ***a3, double ***a4, void *a5, void *a6)
{
  unint64_t v6 = *a3;
  if (*a3 != a3[1])
  {
    double v8 = a2;
    unint64_t v78 = result;
    uint64_t v74 = a3;
    do
    {
      double v9 = *v6;
      double v10 = (*v6)[5];
      if (result[2] >= v10 && *result <= v9[7] && result[3] >= v9[6])
      {
        BOOL v11 = result[1] <= v9[8];
        if (v8[2] < v10) {
          goto LABEL_25;
        }
      }
      else
      {
        BOOL v11 = 0;
        if (v8[2] < v10) {
          goto LABEL_25;
        }
      }
      if (*v8 <= v9[7] && v8[3] >= v9[6] && v8[1] <= v9[8])
      {
        if (v11)
        {
          double v12 = (char **)a6;
          double v14 = (char *)a6[1];
          unint64_t v13 = a6[2];
          if ((unint64_t)v14 >= v13)
          {
            uint64_t v15 = a4;
            unint64_t v16 = (char *)*a6;
            uint64_t v17 = (uint64_t)&v14[-*a6];
            uint64_t v18 = v17 >> 3;
            unint64_t v19 = (v17 >> 3) + 1;
            if (v19 >> 61) {
              sub_1000A9108();
            }
            uint64_t v20 = v13 - (void)v16;
            if (v20 >> 2 > v19) {
              unint64_t v19 = v20 >> 2;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            unint64_t v73 = v19;
            if (v19)
            {
              if (v19 >> 61) {
                goto LABEL_82;
              }
              int8x16_t v21 = operator new(8 * v19);
              int8x16_t v22 = (double **)&v21[8 * v18];
              *int8x16_t v22 = v9;
              uint64_t v23 = (uint64_t)(v22 + 1);
              if (v14 != v16)
              {
LABEL_22:
                unint64_t v24 = v14 - 8 - v16;
                double v12 = (char **)a6;
                if (v24 < 0x58)
                {
                  a4 = v15;
                  goto LABEL_68;
                }
                unint64_t v55 = v14 - &v21[v17];
                a4 = v15;
                if (v55 < 0x20) {
                  goto LABEL_87;
                }
                uint64_t v56 = (v24 >> 3) + 1;
                uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
                long long v58 = &v14[-v57];
                int8x16_t v22 = (double **)((char *)v22 - v57);
                uint64_t v59 = &v21[8 * v18 - 16];
                long long v60 = v14 - 16;
                uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v62 = *(_OWORD *)v60;
                  *(v59 - 1) = *((_OWORD *)v60 - 1);
                  *uint64_t v59 = v62;
                  v59 -= 2;
                  v60 -= 32;
                  v61 -= 4;
                }
                while (v61);
                double v14 = v58;
                if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_87:
                  do
                  {
LABEL_68:
                    long long v63 = (double *)*((void *)v14 - 1);
                    v14 -= 8;
                    *--int8x16_t v22 = v63;
                  }
                  while (v14 != v16);
                }
LABEL_75:
                double v14 = *v12;
LABEL_76:
                *double v12 = (char *)v22;
                v12[1] = (char *)v23;
                v12[2] = &v21[8 * v73];
                if (v14) {
                  operator delete(v14);
                }
                a3 = v74;
                uint64_t result = v78;
LABEL_79:
                v12[1] = (char *)v23;
                goto LABEL_4;
              }
            }
            else
            {
              int8x16_t v21 = 0;
              int8x16_t v22 = (double **)(8 * v18);
              *(void *)(8 * v18) = v9;
              uint64_t v23 = 8 * v18 + 8;
              if (v14 != v16) {
                goto LABEL_22;
              }
            }
            double v12 = (char **)a6;
            a4 = v15;
            goto LABEL_76;
          }
LABEL_49:
          *(void *)double v14 = v9;
          uint64_t v23 = (uint64_t)(v14 + 8);
          goto LABEL_79;
        }
        double v12 = (char **)a5;
        double v14 = (char *)a5[1];
        unint64_t v47 = a5[2];
        if ((unint64_t)v14 < v47) {
          goto LABEL_49;
        }
        unint64_t v48 = a4;
        uint64_t v49 = (char *)*a5;
        uint64_t v50 = (uint64_t)&v14[-*a5];
        uint64_t v51 = v50 >> 3;
        unint64_t v52 = (v50 >> 3) + 1;
        if (v52 >> 61) {
          sub_1000A9108();
        }
        uint64_t v53 = v47 - (void)v49;
        if (v53 >> 2 > v52) {
          unint64_t v52 = v53 >> 2;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        unint64_t v73 = v52;
        if (v52)
        {
          if (v52 >> 61) {
LABEL_82:
          }
            sub_1000A6A10();
          int8x16_t v21 = operator new(8 * v52);
          int8x16_t v22 = (double **)&v21[8 * v51];
          *int8x16_t v22 = v9;
          uint64_t v23 = (uint64_t)(v22 + 1);
          if (v14 != v49)
          {
LABEL_58:
            unint64_t v54 = v14 - 8 - v49;
            double v12 = (char **)a5;
            if (v54 >= 0x58)
            {
              unint64_t v64 = v14 - &v21[v50];
              a4 = v48;
              if (v64 >= 0x20)
              {
                uint64_t v65 = (v54 >> 3) + 1;
                uint64_t v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
                long long v67 = &v14[-v66];
                int8x16_t v22 = (double **)((char *)v22 - v66);
                double v68 = &v21[8 * v51 - 16];
                double v69 = v14 - 16;
                uint64_t v70 = v65 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v71 = *(_OWORD *)v69;
                  *(v68 - 1) = *((_OWORD *)v69 - 1);
                  *double v68 = v71;
                  v68 -= 2;
                  v69 -= 32;
                  v70 -= 4;
                }
                while (v70);
                double v14 = v67;
                if (v65 == (v65 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_75;
                }
              }
            }
            else
            {
              a4 = v48;
            }
            do
            {
              double v72 = (double *)*((void *)v14 - 1);
              v14 -= 8;
              *--int8x16_t v22 = v72;
            }
            while (v14 != v49);
            goto LABEL_75;
          }
        }
        else
        {
          int8x16_t v21 = 0;
          int8x16_t v22 = (double **)(8 * v51);
          *(void *)(8 * v51) = v9;
          uint64_t v23 = 8 * v51 + 8;
          if (v14 != v49) {
            goto LABEL_58;
          }
        }
        double v12 = (char **)a5;
        a4 = v48;
        goto LABEL_76;
      }
LABEL_25:
      if (v11)
      {
        int8x16_t v26 = a4[1];
        unint64_t v25 = (unint64_t)a4[2];
        if ((unint64_t)v26 >= v25)
        {
          uint64_t v27 = a4;
          float64x2_t v28 = (char *)*a4;
          uint64_t v29 = (char *)v26 - (char *)*a4;
          uint64_t v30 = v29 >> 3;
          unint64_t v31 = (v29 >> 3) + 1;
          if (v31 >> 61) {
            sub_1000A9108();
          }
          float64x2_t v32 = a3;
          uint64_t v33 = v25 - (void)v28;
          if (v33 >> 2 > v31) {
            unint64_t v31 = v33 >> 2;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v31;
          }
          if (v34)
          {
            if (v34 >> 61) {
              goto LABEL_82;
            }
            double v35 = operator new(8 * v34);
            double v36 = (double **)&v35[8 * v30];
            *double v36 = v9;
            uint64_t v37 = (uint64_t)(v36 + 1);
            if (v26 != (double **)v28)
            {
LABEL_36:
              unint64_t v38 = (char *)(v26 - 1) - v28;
              if (v38 < 0x58) {
                goto LABEL_88;
              }
              if ((unint64_t)((char *)v26 - &v35[v29]) < 0x20) {
                goto LABEL_88;
              }
              uint64_t v39 = (v38 >> 3) + 1;
              uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
              double v41 = &v26[v40 / 0xFFFFFFFFFFFFFFF8];
              double v36 = (double **)((char *)v36 - v40);
              double v42 = &v35[8 * v30 - 16];
              double v43 = v26 - 2;
              uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v45 = *(_OWORD *)v43;
                *(v42 - 1) = *((_OWORD *)v43 - 1);
                _OWORD *v42 = v45;
                v42 -= 2;
                v43 -= 4;
                v44 -= 4;
              }
              while (v44);
              int8x16_t v26 = v41;
              if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_88:
                do
                {
                  double v46 = *--v26;
                  *--double v36 = v46;
                }
                while (v26 != (double **)v28);
              }
              a4 = v27;
              int8x16_t v26 = *v27;
              void *v27 = v36;
              v27[1] = (double **)v37;
              double v27[2] = (double **)&v35[8 * v34];
              if (v26) {
LABEL_43:
              }
                operator delete(v26);
LABEL_44:
              a3 = v32;
              double v8 = a2;
              uint64_t result = v78;
              a4[1] = (double **)v37;
              goto LABEL_4;
            }
          }
          else
          {
            double v35 = 0;
            double v36 = (double **)(8 * v30);
            *(void *)(8 * v30) = v9;
            uint64_t v37 = 8 * v30 + 8;
            if (v26 != (double **)v28) {
              goto LABEL_36;
            }
          }
          a4 = v27;
          void *v27 = v36;
          v27[1] = (double **)v37;
          double v27[2] = (double **)&v35[8 * v34];
          if (v26) {
            goto LABEL_43;
          }
          goto LABEL_44;
        }
        void *v26 = v9;
        a4[1] = v26 + 1;
      }
LABEL_4:
      ++v6;
    }
    while (v6 != a3[1]);
  }
  return result;
}

uint64_t sub_1002F871C(double *a1, double ***a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v14 = a1[1];
  double v15 = a1[3];
  long long v66 = *(_OWORD *)a1;
  double v16 = (v14 + v15) * 0.5;
  uint64_t v67 = *((void *)a1 + 2);
  long long v17 = *((_OWORD *)a1 + 1);
  *(void *)&v64[0] = v66;
  long long v65 = v17;
  double v68 = v16;
  v64[1] = v16;
  uint64_t v61 = 0;
  long long v62 = 0;
  uint64_t v63 = 0;
  long long v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  long long __p = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  sub_1002F81F4((double *)&v66, v64, a2, (double ***)&v61, &v58, &__p);
  int8x16_t v21 = (double **)__p;
  uint64_t v20 = v56;
  if (__p != v56)
  {
    int8x16_t v53 = 0u;
    int8x16_t v54 = 0u;
    __n128 v18 = (__n128)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    __n128 v19 = (__n128)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int8x16_t v22 = (long long **)__p;
    int8x16_t v23 = (int8x16_t)v19;
    int8x16_t v24 = (int8x16_t)v18;
    do
    {
      uint64_t v25 = (uint64_t)*v22++;
      float64x2_t v26 = *(float64x2_t *)(v25 + 40);
      int8x16_t v27 = (int8x16_t)vcgtq_f64((float64x2_t)v19, v26);
      int8x16_t v28 = vbslq_s8(v27, (int8x16_t)v26, v23);
      float64x2_t v29 = (float64x2_t)vbslq_s8(v27, (int8x16_t)v26, (int8x16_t)v19);
      float64x2_t v30 = *(float64x2_t *)(v25 + 56);
      int8x16_t v31 = (int8x16_t)vcgtq_f64(v29, v30);
      int8x16_t v23 = vbslq_s8(v31, (int8x16_t)v30, v28);
      __n128 v19 = (__n128)vbslq_s8(v31, (int8x16_t)v30, (int8x16_t)v29);
      int8x16_t v32 = (int8x16_t)vcgtq_f64(v26, (float64x2_t)v18);
      int8x16_t v33 = vbslq_s8(v32, (int8x16_t)v26, v24);
      float64x2_t v34 = (float64x2_t)vbslq_s8(v32, (int8x16_t)v26, (int8x16_t)v18);
      int8x16_t v35 = (int8x16_t)vcgtq_f64(v30, v34);
      int8x16_t v24 = vbslq_s8(v35, (int8x16_t)v30, v33);
      __n128 v18 = (__n128)vbslq_s8(v35, (int8x16_t)v30, (int8x16_t)v34);
    }
    while (v22 != v56);
    int8x16_t v53 = v23;
    int8x16_t v54 = v24;
    if (a3 > 0x63 || ((char *)v56 - (unsigned char *)__p) >> 3 < a4)
    {
      while (1)
      {
        uint64_t v37 = (long long **)(v21 + 1);
        if (v21 + 1 != (double **)v20) {
          break;
        }
LABEL_13:
        ++v21;
        if (v37 == v20) {
          goto LABEL_8;
        }
      }
      uint64_t v20 = (long long **)(v21 + 1);
      while ((sub_1002F7CD0(a5, *v21, *v20, 1) & 1) != 0)
      {
        if (++v20 == v56) {
          goto LABEL_13;
        }
      }
      goto LABEL_41;
    }
    if (!sub_1002F77B8(&v53, &__p, a3 + 1, a4, a5, a6, a7, a8, v18, v19)) {
      goto LABEL_41;
    }
    uint64_t v20 = v56;
LABEL_8:
    double v36 = (double **)__p;
    if (a4 > ((char *)v20 - (unsigned char *)__p) >> 3 || a3 > 0x63 || ((char *)v62 - (unsigned char *)v61) >> 3 < a4)
    {
      if (__p != v20)
      {
        unint64_t v38 = v62;
        if (v61 != v62)
        {
          while (1)
          {
            double v41 = (long long **)v61;
            if (v61 != v38) {
              break;
            }
LABEL_25:
            if (++v36 == (double **)v20) {
              goto LABEL_21;
            }
          }
          while ((sub_1002F7CD0(a5, *v36, *v41, 1) & 1) != 0)
          {
            if (++v41 == v62)
            {
              uint64_t v20 = v56;
              unint64_t v38 = v41;
              goto LABEL_25;
            }
          }
          goto LABEL_41;
        }
      }
    }
    else
    {
      if (!sub_1002F8C40((double *)v53.i64, (double ***)&__p, (double ***)&v61, a3 + 1, a4, a5, a6, a7, a6, a7, a8))goto LABEL_41; {
      uint64_t v20 = v56;
      }
    }
LABEL_21:
    uint64_t v39 = (double **)__p;
    if (a4 <= ((char *)v20 - (unsigned char *)__p) >> 3 && a3 <= 0x63 && ((char *)v59 - (unsigned char *)v58) >> 3 >= a4)
    {
      if (sub_1002F8C40((double *)v53.i64, (double ***)&__p, (double ***)&v58, a3 + 1, a4, a5, a6, a7, a6, a7, a8)) {
        goto LABEL_38;
      }
LABEL_41:
      uint64_t v45 = 0;
      goto LABEL_42;
    }
    if (__p != v20)
    {
      uint64_t v40 = v59;
      if (v58 != v59)
      {
        while (1)
        {
          double v42 = (long long **)v58;
          if (v58 != v40) {
            break;
          }
LABEL_30:
          if (++v39 == (double **)v20) {
            goto LABEL_38;
          }
        }
        while ((sub_1002F7CD0(a5, *v39, *v42, 1) & 1) != 0)
        {
          if (++v42 == v59)
          {
            uint64_t v20 = v56;
            uint64_t v40 = v42;
            goto LABEL_30;
          }
        }
        goto LABEL_41;
      }
    }
  }
LABEL_38:
  uint64_t v44 = (double **)v61;
  double v43 = v62;
  if (a3 > 0x63 || ((char *)v62 - (unsigned char *)v61) >> 3 < a4)
  {
LABEL_52:
    while (v44 != (double **)v43)
    {
      unint64_t v47 = v44++;
      unint64_t v48 = (long long **)v44;
      if (v44 != (double **)v43)
      {
        while ((sub_1002F7CD0(a5, *v47, *v48, 1) & 1) != 0)
        {
          double v43 = v48 + 1;
          unint64_t v48 = v43;
          if (v43 == v62) {
            goto LABEL_52;
          }
        }
        goto LABEL_41;
      }
    }
  }
  else if (!sub_1002F77B8(&v66, &v61, a3 + 1, a4, a5, a6, a7, a8, v18, v19))
  {
    goto LABEL_41;
  }
  uint64_t v50 = (double **)v58;
  uint64_t v49 = v59;
  if (a3 > 0x63 || ((char *)v59 - (unsigned char *)v58) >> 3 < a4)
  {
    if (v58 != v59)
    {
      while (1)
      {
        uint64_t v51 = v50++;
        unint64_t v52 = (long long **)v50;
        if (v50 != (double **)v49) {
          break;
        }
LABEL_58:
        uint64_t v45 = 1;
        if (v50 == (double **)v49) {
          goto LABEL_42;
        }
      }
      while ((sub_1002F7CD0(a5, *v51, *v52, 1) & 1) != 0)
      {
        uint64_t v49 = v52 + 1;
        unint64_t v52 = v49;
        if (v49 == v59) {
          goto LABEL_58;
        }
      }
      goto LABEL_41;
    }
    uint64_t v45 = 1;
  }
  else
  {
    uint64_t v45 = sub_1002F77B8(v64, &v58, a3 + 1, a4, a5, a6, a7, a8, v18, v19);
  }
LABEL_42:
  if (__p)
  {
    uint64_t v56 = (long long **)__p;
    operator delete(__p);
  }
  if (v58)
  {
    uint64_t v59 = (long long **)v58;
    operator delete(v58);
  }
  if (v61)
  {
    long long v62 = (long long **)v61;
    operator delete(v61);
  }
  return v45;
}

void sub_1002F8BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    operator delete(__p);
    float64x2_t v26 = a21;
    if (!a21)
    {
LABEL_3:
      int8x16_t v27 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    float64x2_t v26 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  operator delete(v26);
  int8x16_t v27 = a24;
  if (!a24) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F8C40(double *a1, double ***a2, double ***a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v17 = (*a1 + a1[2]) * 0.5;
  long long v18 = *((_OWORD *)a1 + 1);
  long long v125 = *(_OWORD *)a1;
  uint64_t v127 = *((void *)&v18 + 1);
  v123[1] = *((double *)&v125 + 1);
  long long v124 = v18;
  double v126 = v17;
  v123[0] = v17;
  uint64_t v120 = 0;
  int v121 = 0;
  uint64_t v122 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  BOOL v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  long long __p = 0;
  int v106 = 0;
  uint64_t v107 = 0;
  sub_1002F81F4((double *)&v125, v123, a2, (double ***)&v120, &v117, &v114);
  sub_1002F81F4((double *)&v125, v123, a3, (double ***)&v111, &v108, &__p);
  uint64_t v20 = (double **)v114;
  __n128 v19 = v115;
  if (v114 == v115) {
    goto LABEL_95;
  }
  int8x16_t v22 = (long long **)__p;
  int8x16_t v21 = v106;
  if (a5 > ((char *)v115 - (unsigned char *)v114) >> 3 || a4 > 0x63 || ((char *)v106 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v106)
    {
      while (1)
      {
        int8x16_t v23 = (long long **)__p;
        if (__p != v21) {
          break;
        }
LABEL_5:
        if (++v20 == v19) {
          goto LABEL_50;
        }
      }
      while ((sub_1002F7CD0(a6, *v20, *v23, 1) & 1) != 0)
      {
        if (++v23 == v106)
        {
          __n128 v19 = v115;
          int8x16_t v21 = v23;
          goto LABEL_5;
        }
      }
      goto LABEL_147;
    }
  }
  else
  {
    double v24 = 1.79769313e308;
    double v25 = -1.79769313e308;
    double v26 = -1.79769313e308;
    double v27 = 1.79769313e308;
    int8x16_t v103 = 0u;
    int8x16_t v104 = 0u;
    double v28 = -1.79769313e308;
    double v29 = 1.79769313e308;
    double v30 = -1.79769313e308;
    double v31 = 1.79769313e308;
    do
    {
      int8x16_t v33 = *v20++;
      int8x16_t v32 = v33;
      double v34 = v33[5];
      double v35 = v33[6];
      if (v34 < v31)
      {
        double v27 = v34;
        double v31 = v34;
      }
      if (v34 > v30)
      {
        double v26 = v34;
        double v30 = v34;
      }
      if (v35 < v29)
      {
        double v24 = v35;
        double v29 = v35;
      }
      if (v35 > v28)
      {
        double v25 = v35;
        double v28 = v35;
      }
      double v36 = v32[7];
      double v37 = v32[8];
      if (v36 < v31)
      {
        double v27 = v32[7];
        double v31 = v27;
      }
      if (v36 > v30)
      {
        double v26 = v32[7];
        double v30 = v26;
      }
      if (v37 < v29)
      {
        double v24 = v32[8];
        double v29 = v24;
      }
      if (v37 > v28)
      {
        double v25 = v32[8];
        double v28 = v25;
      }
    }
    while (v20 != v115);
    if (__p != v106)
    {
      double v38 = v25;
      double v39 = v24;
      double v40 = v26;
      double v41 = v27;
      do
      {
        uint64_t v43 = (uint64_t)*v22++;
        uint64_t v42 = v43;
        double v44 = *(double *)(v43 + 40);
        double v45 = *(double *)(v43 + 48);
        if (v44 < v41)
        {
          double v27 = v44;
          double v41 = v44;
        }
        if (v44 > v40)
        {
          double v26 = v44;
          double v40 = v44;
        }
        if (v45 < v39)
        {
          double v24 = v45;
          double v39 = v45;
        }
        if (v45 > v38)
        {
          double v25 = v45;
          double v38 = v45;
        }
        double v46 = *(double *)(v42 + 56);
        double v47 = *(double *)(v42 + 64);
        if (v46 < v41)
        {
          double v27 = *(double *)(v42 + 56);
          double v41 = v27;
        }
        if (v46 > v40)
        {
          double v26 = *(double *)(v42 + 56);
          double v40 = v26;
        }
        if (v47 < v39)
        {
          double v24 = *(double *)(v42 + 64);
          double v39 = v24;
        }
        if (v47 > v38)
        {
          double v25 = *(double *)(v42 + 64);
          double v38 = v25;
        }
      }
      while (v22 != v106);
    }
    *(double *)v103.i64 = v27;
    *(double *)&v103.i64[1] = v24;
    *(double *)v104.i64 = v26;
    *(double *)&v104.i64[1] = v25;
    if ((sub_1002F95F8((uint64_t)&v103, (double ***)&v114, (double ***)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
      goto LABEL_147;
    }
  }
LABEL_50:
  unint64_t v48 = v112;
  if (a5 <= ((char *)v112 - (unsigned char *)v111) >> 3)
  {
    uint64_t v50 = (double **)v114;
    uint64_t v49 = v115;
    if (a5 <= ((char *)v109 - (unsigned char *)v108) >> 3 && a4 <= 0x63 && ((char *)v115 - (unsigned char *)v114) >> 3 >= a5)
    {
      int8x16_t v103 = 0u;
      int8x16_t v104 = 0u;
      if (v114 == v115)
      {
        double v51 = 1.79769313e308;
        double v52 = -1.79769313e308;
        double v53 = -1.79769313e308;
        double v54 = 1.79769313e308;
      }
      else
      {
        double v51 = 1.79769313e308;
        double v52 = -1.79769313e308;
        double v53 = -1.79769313e308;
        double v54 = 1.79769313e308;
        double v55 = -1.79769313e308;
        double v56 = 1.79769313e308;
        double v57 = -1.79769313e308;
        double v58 = 1.79769313e308;
        do
        {
          uint64_t v60 = *v50++;
          uint64_t v59 = v60;
          double v61 = v60[5];
          double v62 = v60[6];
          if (v61 < v58)
          {
            double v54 = v61;
            double v58 = v61;
          }
          if (v61 > v57)
          {
            double v53 = v61;
            double v57 = v61;
          }
          if (v62 < v56)
          {
            double v51 = v62;
            double v56 = v62;
          }
          if (v62 > v55)
          {
            double v52 = v62;
            double v55 = v62;
          }
          double v63 = v59[7];
          double v64 = v59[8];
          if (v63 < v58)
          {
            double v54 = v59[7];
            double v58 = v54;
          }
          if (v63 > v57)
          {
            double v53 = v59[7];
            double v57 = v53;
          }
          if (v64 < v56)
          {
            double v51 = v59[8];
            double v56 = v51;
          }
          if (v64 > v55)
          {
            double v52 = v59[8];
            double v55 = v52;
          }
        }
        while (v50 != v115);
      }
      *(double *)v103.i64 = v54;
      *(double *)&v103.i64[1] = v51;
      *(double *)v104.i64 = v53;
      *(double *)&v104.i64[1] = v52;
      if (!sub_1002F95F8((uint64_t)&v103, (double ***)&v114, (double ***)&v111, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_1002F95F8((uint64_t)&v103, (double ***)&v114, (double ***)&v108, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_147;
      }
      goto LABEL_95;
    }
  }
  else
  {
    uint64_t v50 = (double **)v114;
    uint64_t v49 = v115;
  }
  if (v111 == v112 || v50 == v49)
  {
    if (v50 != v49)
    {
LABEL_78:
      long long v65 = v109;
      if (v108 != v109)
      {
        while (1)
        {
          uint64_t v67 = (long long **)v108;
          if (v108 != v65) {
            break;
          }
LABEL_85:
          if (++v50 == v49) {
            goto LABEL_95;
          }
        }
        while ((sub_1002F7CD0(a6, *v50, *v67, 1) & 1) != 0)
        {
          if (++v67 == v109)
          {
            uint64_t v49 = v115;
            long long v65 = v67;
            goto LABEL_85;
          }
        }
        goto LABEL_147;
      }
    }
  }
  else
  {
    do
    {
      long long v66 = (long long **)v111;
      if (v111 != v48)
      {
        while ((sub_1002F7CD0(a6, *v50, *v66, 1) & 1) != 0)
        {
          if (++v66 == v112)
          {
            uint64_t v49 = v115;
            unint64_t v48 = v66;
            goto LABEL_80;
          }
        }
        goto LABEL_147;
      }
LABEL_80:
      ++v50;
    }
    while (v50 != v49);
    uint64_t v50 = (double **)v114;
    if (v114 != v49) {
      goto LABEL_78;
    }
  }
LABEL_95:
  double v69 = (long long **)__p;
  double v68 = v106;
  if (__p != v106)
  {
    long long v71 = (double **)v120;
    uint64_t v70 = v121;
    if (a5 > ((char *)v121 - (unsigned char *)v120) >> 3
      || a5 > ((char *)v118 - (unsigned char *)v117) >> 3
      || a4 > 0x63
      || ((char *)v106 - (unsigned char *)__p) >> 3 < a5)
    {
      while (v71 != v70)
      {
        uint64_t v87 = (long long **)__p;
        if (__p != v68)
        {
          while ((sub_1002F7CD0(a6, *v71, *v87, 1) & 1) != 0)
          {
            if (++v87 == v106)
            {
              uint64_t v70 = v121;
              double v68 = v87;
              goto LABEL_105;
            }
          }
          goto LABEL_147;
        }
LABEL_105:
        ++v71;
      }
      uint64_t v89 = (double **)v117;
      uint64_t v88 = v118;
      if (v117 == v118 || __p == v68) {
        goto LABEL_116;
      }
      while (1)
      {
        uint64_t v98 = (long long **)__p;
        if (__p != v68) {
          break;
        }
LABEL_132:
        if (++v89 == v88) {
          goto LABEL_116;
        }
      }
      while ((sub_1002F7CD0(a6, *v89, *v98, 1) & 1) != 0)
      {
        if (++v98 == v106)
        {
          uint64_t v88 = v118;
          double v68 = v98;
          goto LABEL_132;
        }
      }
      goto LABEL_147;
    }
    float64x2_t v72 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int8x16_t v103 = 0u;
    int8x16_t v104 = 0u;
    float64x2_t v73 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int8x16_t v74 = (int8x16_t)v73;
    int8x16_t v75 = (int8x16_t)v72;
    do
    {
      uint64_t v76 = (uint64_t)*v69++;
      float64x2_t v77 = *(float64x2_t *)(v76 + 40);
      int8x16_t v78 = (int8x16_t)vcgtq_f64(v73, v77);
      int8x16_t v79 = vbslq_s8(v78, (int8x16_t)v77, v74);
      float64x2_t v80 = (float64x2_t)vbslq_s8(v78, (int8x16_t)v77, (int8x16_t)v73);
      float64x2_t v81 = *(float64x2_t *)(v76 + 56);
      int8x16_t v82 = (int8x16_t)vcgtq_f64(v80, v81);
      int8x16_t v74 = vbslq_s8(v82, (int8x16_t)v81, v79);
      float64x2_t v73 = (float64x2_t)vbslq_s8(v82, (int8x16_t)v81, (int8x16_t)v80);
      int8x16_t v83 = (int8x16_t)vcgtq_f64(v77, v72);
      int8x16_t v84 = vbslq_s8(v83, (int8x16_t)v77, v75);
      float64x2_t v85 = (float64x2_t)vbslq_s8(v83, (int8x16_t)v77, (int8x16_t)v72);
      int8x16_t v86 = (int8x16_t)vcgtq_f64(v81, v85);
      int8x16_t v75 = vbslq_s8(v86, (int8x16_t)v81, v84);
      float64x2_t v72 = (float64x2_t)vbslq_s8(v86, (int8x16_t)v81, (int8x16_t)v85);
    }
    while (v69 != v106);
    int8x16_t v103 = v74;
    int8x16_t v104 = v75;
    if (!sub_1002F95F8((uint64_t)&v103, (double ***)&v120, (double ***)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)|| (sub_1002F95F8((uint64_t)&v103, (double ***)&v117, (double ***)&__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_147;
    }
  }
LABEL_116:
  uint64_t v92 = (double **)v120;
  uint64_t v91 = v121;
  if (a5 > ((char *)v121 - (unsigned char *)v120) >> 3 || a4 > 0x63 || ((char *)v112 - (unsigned char *)v111) >> 3 < a5)
  {
    if (v120 != v121)
    {
      long long v93 = v112;
      if (v111 != v112)
      {
        while (1)
        {
          uint64_t v94 = (long long **)v111;
          if (v111 != v93) {
            break;
          }
LABEL_120:
          if (++v92 == v91) {
            goto LABEL_128;
          }
        }
        while ((sub_1002F7CD0(a6, *v92, *v94, 1) & 1) != 0)
        {
          if (++v94 == v112)
          {
            uint64_t v91 = v121;
            long long v93 = v94;
            goto LABEL_120;
          }
        }
        goto LABEL_147;
      }
    }
  }
  else if ((sub_1002F95F8((uint64_t)&v125, (double ***)&v120, (double ***)&v111, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_147;
  }
LABEL_128:
  uint64_t v96 = (double **)v117;
  uint64_t v95 = v118;
  if (a5 <= ((char *)v118 - (unsigned char *)v117) >> 3 && a4 <= 0x63 && ((char *)v109 - (unsigned char *)v108) >> 3 >= a5)
  {
    if (sub_1002F95F8((uint64_t)v123, (double ***)&v117, (double ***)&v108, a4 + 1, a5, a6, a7, a8, a9, a10, a11)) {
      goto LABEL_145;
    }
LABEL_147:
    uint64_t v100 = 0;
    uint64_t v101 = (long long **)__p;
    if (!__p) {
      goto LABEL_149;
    }
    goto LABEL_148;
  }
  if (v117 != v118)
  {
    uint64_t v97 = v109;
    if (v108 != v109)
    {
      while (1)
      {
        long long v99 = (long long **)v108;
        if (v108 != v97) {
          break;
        }
LABEL_137:
        if (++v96 == v95) {
          goto LABEL_145;
        }
      }
      while ((sub_1002F7CD0(a6, *v96, *v99, 1) & 1) != 0)
      {
        if (++v99 == v109)
        {
          uint64_t v95 = v118;
          uint64_t v97 = v99;
          goto LABEL_137;
        }
      }
      goto LABEL_147;
    }
  }
LABEL_145:
  uint64_t v100 = 1;
  uint64_t v101 = (long long **)__p;
  if (__p)
  {
LABEL_148:
    int v106 = v101;
    operator delete(v101);
  }
LABEL_149:
  if (v108)
  {
    uint64_t v109 = (long long **)v108;
    operator delete(v108);
  }
  if (v111)
  {
    uint64_t v112 = (long long **)v111;
    operator delete(v111);
  }
  if (v114)
  {
    uint64_t v115 = (double **)v114;
    operator delete(v114);
  }
  if (v117)
  {
    uint64_t v118 = (double **)v117;
    operator delete(v117);
  }
  if (v120)
  {
    int v121 = (double **)v120;
    operator delete(v120);
  }
  return v100;
}

void sub_1002F9534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    double v34 = a20;
    if (!a20)
    {
LABEL_3:
      double v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    double v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  double v35 = a23;
  if (!a23)
  {
LABEL_4:
    double v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  double v36 = a26;
  if (!a26)
  {
LABEL_5:
    double v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  double v37 = a29;
  if (!a29)
  {
LABEL_6:
    double v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  double v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F95F8(uint64_t a1, double ***a2, double ***a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v17 = (*(double *)(a1 + 8) + *(double *)(a1 + 24)) * 0.5;
  uint64_t v125 = *(void *)(a1 + 16);
  long long v18 = *(_OWORD *)(a1 + 16);
  v123[0] = *(_OWORD *)a1;
  v123[1] = v18;
  long long v124 = v123[0];
  double v126 = v17;
  *((double *)v123 + 1) = v17;
  uint64_t v120 = 0;
  int v121 = 0;
  uint64_t v122 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  uint64_t v119 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  BOOL v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  long long __p = 0;
  int v106 = 0;
  uint64_t v107 = 0;
  sub_1002F81F4((double *)&v124, (double *)v123, a2, (double ***)&v120, &v117, &v114);
  sub_1002F81F4((double *)&v124, (double *)v123, a3, (double ***)&v111, &v108, &__p);
  uint64_t v20 = (double **)v114;
  __n128 v19 = v115;
  if (v114 == v115) {
    goto LABEL_95;
  }
  int8x16_t v22 = (long long **)__p;
  int8x16_t v21 = v106;
  if (a5 > ((char *)v115 - (unsigned char *)v114) >> 3 || a4 > 0x63 || ((char *)v106 - (unsigned char *)__p) >> 3 < a5)
  {
    if (__p != v106)
    {
      while (1)
      {
        int8x16_t v23 = (long long **)__p;
        if (__p != v21) {
          break;
        }
LABEL_5:
        if (++v20 == v19) {
          goto LABEL_50;
        }
      }
      while ((sub_1002F7CD0(a6, *v20, *v23, 1) & 1) != 0)
      {
        if (++v23 == v106)
        {
          __n128 v19 = v115;
          int8x16_t v21 = v23;
          goto LABEL_5;
        }
      }
      goto LABEL_147;
    }
  }
  else
  {
    double v24 = 1.79769313e308;
    double v25 = -1.79769313e308;
    double v26 = -1.79769313e308;
    double v27 = 1.79769313e308;
    int8x16_t v103 = 0u;
    int8x16_t v104 = 0u;
    double v28 = -1.79769313e308;
    double v29 = 1.79769313e308;
    double v30 = -1.79769313e308;
    double v31 = 1.79769313e308;
    do
    {
      int8x16_t v33 = *v20++;
      int8x16_t v32 = v33;
      double v34 = v33[5];
      double v35 = v33[6];
      if (v34 < v31)
      {
        double v27 = v34;
        double v31 = v34;
      }
      if (v34 > v30)
      {
        double v26 = v34;
        double v30 = v34;
      }
      if (v35 < v29)
      {
        double v24 = v35;
        double v29 = v35;
      }
      if (v35 > v28)
      {
        double v25 = v35;
        double v28 = v35;
      }
      double v36 = v32[7];
      double v37 = v32[8];
      if (v36 < v31)
      {
        double v27 = v32[7];
        double v31 = v27;
      }
      if (v36 > v30)
      {
        double v26 = v32[7];
        double v30 = v26;
      }
      if (v37 < v29)
      {
        double v24 = v32[8];
        double v29 = v24;
      }
      if (v37 > v28)
      {
        double v25 = v32[8];
        double v28 = v25;
      }
    }
    while (v20 != v115);
    if (__p != v106)
    {
      double v38 = v25;
      double v39 = v24;
      double v40 = v26;
      double v41 = v27;
      do
      {
        uint64_t v43 = (uint64_t)*v22++;
        uint64_t v42 = v43;
        double v44 = *(double *)(v43 + 40);
        double v45 = *(double *)(v43 + 48);
        if (v44 < v41)
        {
          double v27 = v44;
          double v41 = v44;
        }
        if (v44 > v40)
        {
          double v26 = v44;
          double v40 = v44;
        }
        if (v45 < v39)
        {
          double v24 = v45;
          double v39 = v45;
        }
        if (v45 > v38)
        {
          double v25 = v45;
          double v38 = v45;
        }
        double v46 = *(double *)(v42 + 56);
        double v47 = *(double *)(v42 + 64);
        if (v46 < v41)
        {
          double v27 = *(double *)(v42 + 56);
          double v41 = v27;
        }
        if (v46 > v40)
        {
          double v26 = *(double *)(v42 + 56);
          double v40 = v26;
        }
        if (v47 < v39)
        {
          double v24 = *(double *)(v42 + 64);
          double v39 = v24;
        }
        if (v47 > v38)
        {
          double v25 = *(double *)(v42 + 64);
          double v38 = v25;
        }
      }
      while (v22 != v106);
    }
    *(double *)v103.i64 = v27;
    *(double *)&v103.i64[1] = v24;
    *(double *)v104.i64 = v26;
    *(double *)&v104.i64[1] = v25;
    if ((sub_1002F8C40(&v103, &v114, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0) {
      goto LABEL_147;
    }
  }
LABEL_50:
  unint64_t v48 = v112;
  if (a5 <= ((char *)v112 - (unsigned char *)v111) >> 3)
  {
    uint64_t v50 = (double **)v114;
    uint64_t v49 = v115;
    if (a5 <= ((char *)v109 - (unsigned char *)v108) >> 3 && a4 <= 0x63 && ((char *)v115 - (unsigned char *)v114) >> 3 >= a5)
    {
      int8x16_t v103 = 0u;
      int8x16_t v104 = 0u;
      if (v114 == v115)
      {
        double v51 = 1.79769313e308;
        double v52 = -1.79769313e308;
        double v53 = -1.79769313e308;
        double v54 = 1.79769313e308;
      }
      else
      {
        double v51 = 1.79769313e308;
        double v52 = -1.79769313e308;
        double v53 = -1.79769313e308;
        double v54 = 1.79769313e308;
        double v55 = -1.79769313e308;
        double v56 = 1.79769313e308;
        double v57 = -1.79769313e308;
        double v58 = 1.79769313e308;
        do
        {
          uint64_t v60 = *v50++;
          uint64_t v59 = v60;
          double v61 = v60[5];
          double v62 = v60[6];
          if (v61 < v58)
          {
            double v54 = v61;
            double v58 = v61;
          }
          if (v61 > v57)
          {
            double v53 = v61;
            double v57 = v61;
          }
          if (v62 < v56)
          {
            double v51 = v62;
            double v56 = v62;
          }
          if (v62 > v55)
          {
            double v52 = v62;
            double v55 = v62;
          }
          double v63 = v59[7];
          double v64 = v59[8];
          if (v63 < v58)
          {
            double v54 = v59[7];
            double v58 = v54;
          }
          if (v63 > v57)
          {
            double v53 = v59[7];
            double v57 = v53;
          }
          if (v64 < v56)
          {
            double v51 = v59[8];
            double v56 = v51;
          }
          if (v64 > v55)
          {
            double v52 = v59[8];
            double v55 = v52;
          }
        }
        while (v50 != v115);
      }
      *(double *)v103.i64 = v54;
      *(double *)&v103.i64[1] = v51;
      *(double *)v104.i64 = v53;
      *(double *)&v104.i64[1] = v52;
      if (!sub_1002F8C40(&v103, &v114, &v111, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
        || (sub_1002F8C40(&v103, &v114, &v108, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
      {
        goto LABEL_147;
      }
      goto LABEL_95;
    }
  }
  else
  {
    uint64_t v50 = (double **)v114;
    uint64_t v49 = v115;
  }
  if (v111 == v112 || v50 == v49)
  {
    if (v50 != v49)
    {
LABEL_78:
      long long v65 = v109;
      if (v108 != v109)
      {
        while (1)
        {
          uint64_t v67 = (long long **)v108;
          if (v108 != v65) {
            break;
          }
LABEL_85:
          if (++v50 == v49) {
            goto LABEL_95;
          }
        }
        while ((sub_1002F7CD0(a6, *v50, *v67, 1) & 1) != 0)
        {
          if (++v67 == v109)
          {
            uint64_t v49 = v115;
            long long v65 = v67;
            goto LABEL_85;
          }
        }
        goto LABEL_147;
      }
    }
  }
  else
  {
    do
    {
      long long v66 = (long long **)v111;
      if (v111 != v48)
      {
        while ((sub_1002F7CD0(a6, *v50, *v66, 1) & 1) != 0)
        {
          if (++v66 == v112)
          {
            uint64_t v49 = v115;
            unint64_t v48 = v66;
            goto LABEL_80;
          }
        }
        goto LABEL_147;
      }
LABEL_80:
      ++v50;
    }
    while (v50 != v49);
    uint64_t v50 = (double **)v114;
    if (v114 != v49) {
      goto LABEL_78;
    }
  }
LABEL_95:
  double v69 = (long long **)__p;
  double v68 = v106;
  if (__p != v106)
  {
    long long v71 = (double **)v120;
    uint64_t v70 = v121;
    if (a5 > ((char *)v121 - (unsigned char *)v120) >> 3
      || a5 > ((char *)v118 - (unsigned char *)v117) >> 3
      || a4 > 0x63
      || ((char *)v106 - (unsigned char *)__p) >> 3 < a5)
    {
      while (v71 != v70)
      {
        uint64_t v87 = (long long **)__p;
        if (__p != v68)
        {
          while ((sub_1002F7CD0(a6, *v71, *v87, 1) & 1) != 0)
          {
            if (++v87 == v106)
            {
              uint64_t v70 = v121;
              double v68 = v87;
              goto LABEL_105;
            }
          }
          goto LABEL_147;
        }
LABEL_105:
        ++v71;
      }
      uint64_t v89 = (double **)v117;
      uint64_t v88 = v118;
      if (v117 == v118 || __p == v68) {
        goto LABEL_116;
      }
      while (1)
      {
        uint64_t v98 = (long long **)__p;
        if (__p != v68) {
          break;
        }
LABEL_132:
        if (++v89 == v88) {
          goto LABEL_116;
        }
      }
      while ((sub_1002F7CD0(a6, *v89, *v98, 1) & 1) != 0)
      {
        if (++v98 == v106)
        {
          uint64_t v88 = v118;
          double v68 = v98;
          goto LABEL_132;
        }
      }
      goto LABEL_147;
    }
    float64x2_t v72 = (float64x2_t)vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    int8x16_t v103 = 0u;
    int8x16_t v104 = 0u;
    float64x2_t v73 = (float64x2_t)vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    int8x16_t v74 = (int8x16_t)v73;
    int8x16_t v75 = (int8x16_t)v72;
    do
    {
      uint64_t v76 = (uint64_t)*v69++;
      float64x2_t v77 = *(float64x2_t *)(v76 + 40);
      int8x16_t v78 = (int8x16_t)vcgtq_f64(v73, v77);
      int8x16_t v79 = vbslq_s8(v78, (int8x16_t)v77, v74);
      float64x2_t v80 = (float64x2_t)vbslq_s8(v78, (int8x16_t)v77, (int8x16_t)v73);
      float64x2_t v81 = *(float64x2_t *)(v76 + 56);
      int8x16_t v82 = (int8x16_t)vcgtq_f64(v80, v81);
      int8x16_t v74 = vbslq_s8(v82, (int8x16_t)v81, v79);
      float64x2_t v73 = (float64x2_t)vbslq_s8(v82, (int8x16_t)v81, (int8x16_t)v80);
      int8x16_t v83 = (int8x16_t)vcgtq_f64(v77, v72);
      int8x16_t v84 = vbslq_s8(v83, (int8x16_t)v77, v75);
      float64x2_t v85 = (float64x2_t)vbslq_s8(v83, (int8x16_t)v77, (int8x16_t)v72);
      int8x16_t v86 = (int8x16_t)vcgtq_f64(v81, v85);
      int8x16_t v75 = vbslq_s8(v86, (int8x16_t)v81, v84);
      float64x2_t v72 = (float64x2_t)vbslq_s8(v86, (int8x16_t)v81, (int8x16_t)v85);
    }
    while (v69 != v106);
    int8x16_t v103 = v74;
    int8x16_t v104 = v75;
    if (!sub_1002F8C40(&v103, &v120, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11)
      || (sub_1002F8C40(&v103, &v117, &__p, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
    {
      goto LABEL_147;
    }
  }
LABEL_116:
  uint64_t v92 = (double **)v120;
  uint64_t v91 = v121;
  if (a5 > ((char *)v121 - (unsigned char *)v120) >> 3 || a4 > 0x63 || ((char *)v112 - (unsigned char *)v111) >> 3 < a5)
  {
    if (v120 != v121)
    {
      long long v93 = v112;
      if (v111 != v112)
      {
        while (1)
        {
          uint64_t v94 = (long long **)v111;
          if (v111 != v93) {
            break;
          }
LABEL_120:
          if (++v92 == v91) {
            goto LABEL_128;
          }
        }
        while ((sub_1002F7CD0(a6, *v92, *v94, 1) & 1) != 0)
        {
          if (++v94 == v112)
          {
            uint64_t v91 = v121;
            long long v93 = v94;
            goto LABEL_120;
          }
        }
        goto LABEL_147;
      }
    }
  }
  else if ((sub_1002F8C40(&v124, &v120, &v111, a4 + 1, a5, a6, a7, a8, a9, a10, a11) & 1) == 0)
  {
    goto LABEL_147;
  }
LABEL_128:
  uint64_t v96 = (double **)v117;
  uint64_t v95 = v118;
  if (a5 <= ((char *)v118 - (unsigned char *)v117) >> 3 && a4 <= 0x63 && ((char *)v109 - (unsigned char *)v108) >> 3 >= a5)
  {
    if (sub_1002F8C40(v123, &v117, &v108, a4 + 1, a5, a6, a7, a8, a9, a10, a11)) {
      goto LABEL_145;
    }
LABEL_147:
    uint64_t v100 = 0;
    uint64_t v101 = (long long **)__p;
    if (!__p) {
      goto LABEL_149;
    }
    goto LABEL_148;
  }
  if (v117 != v118)
  {
    uint64_t v97 = v109;
    if (v108 != v109)
    {
      while (1)
      {
        long long v99 = (long long **)v108;
        if (v108 != v97) {
          break;
        }
LABEL_137:
        if (++v96 == v95) {
          goto LABEL_145;
        }
      }
      while ((sub_1002F7CD0(a6, *v96, *v99, 1) & 1) != 0)
      {
        if (++v99 == v109)
        {
          uint64_t v95 = v118;
          uint64_t v97 = v99;
          goto LABEL_137;
        }
      }
      goto LABEL_147;
    }
  }
LABEL_145:
  uint64_t v100 = 1;
  uint64_t v101 = (long long **)__p;
  if (__p)
  {
LABEL_148:
    int v106 = v101;
    operator delete(v101);
  }
LABEL_149:
  if (v108)
  {
    uint64_t v109 = (long long **)v108;
    operator delete(v108);
  }
  if (v111)
  {
    uint64_t v112 = (long long **)v111;
    operator delete(v111);
  }
  if (v114)
  {
    uint64_t v115 = (double **)v114;
    operator delete(v114);
  }
  if (v117)
  {
    uint64_t v118 = (double **)v117;
    operator delete(v117);
  }
  if (v120)
  {
    int v121 = (double **)v120;
    operator delete(v120);
  }
  return v100;
}

void sub_1002F9EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
  {
    operator delete(__p);
    double v34 = a20;
    if (!a20)
    {
LABEL_3:
      double v35 = a23;
      if (!a23) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    double v34 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v34);
  double v35 = a23;
  if (!a23)
  {
LABEL_4:
    double v36 = a26;
    if (!a26) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v35);
  double v36 = a26;
  if (!a26)
  {
LABEL_5:
    double v37 = a29;
    if (!a29) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v36);
  double v37 = a29;
  if (!a29)
  {
LABEL_6:
    double v38 = a32;
    if (!a32) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v37);
  double v38 = a32;
  if (!a32) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(v38);
  _Unwind_Resume(exception_object);
}

BOOL sub_1002F9FB8(uint64_t a1, double **a2, uint64_t *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v7 = *a3;
  if (*a3 == 2)
  {
    uint64_t v21 = a3[1];
    unint64_t v22 = a6[4];
    uint64_t v23 = a6[1];
    double v24 = (void *)(v23 + 8 * (v22 / 0xAA));
    if (a6[2] == v23)
    {
      uint64_t v25 = 0;
      if (!v21)
      {
LABEL_27:
        double v26 = *(double **)v25;
        double v27 = *(double **)(v25 + 8);
        if ((unint64_t)v27 - *(void *)v25 < 0x40) {
          goto LABEL_73;
        }
LABEL_56:
        int v53 = 0;
        char v54 = 0;
        if (v26 + 2 != v27)
        {
          double v45 = (double *)(a1 + 8);
          do
          {
            if (!sub_10004D030(v45, v26, v26 + 2, (uint64_t)&v53)) {
              break;
            }
            double v46 = v26 + 4;
            v26 += 2;
          }
          while (v46 != v27);
          if (v53) {
            int v14 = 1;
          }
          else {
            int v14 = -1;
          }
          if (!v54) {
            return v14 >= 0;
          }
          double v47 = *a2;
          unint64_t v48 = a2[1];
          if (*a2 != v48)
          {
            uint64_t v49 = v47 + 2;
            if (v47 + 2 != v48)
            {
              while (1)
              {
                uint64_t v50 = *(double **)v25;
                double v51 = *(double **)(v25 + 8);
                if ((unint64_t)v51 - *(void *)v25 < 0x40) {
                  break;
                }
                int v53 = 0;
                char v54 = 0;
                if (v50 + 2 == v51) {
                  break;
                }
                do
                {
                  if (!sub_10004D030(v49, v50, v50 + 2, (uint64_t)&v53)) {
                    break;
                  }
                  double v52 = v50 + 4;
                  v50 += 2;
                }
                while (v52 != v51);
                if (!v54)
                {
LABEL_76:
                  if (v53) {
                    int v14 = 1;
                  }
                  else {
                    int v14 = -1;
                  }
                  return v14 >= 0;
                }
                int v14 = 0;
                v49 += 2;
                if (v49 == v48) {
                  return v14 >= 0;
                }
              }
              goto LABEL_73;
            }
          }
          goto LABEL_75;
        }
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v25 = *v24 + 24 * (v22 % 0xAA);
      if (!v21) {
        goto LABEL_27;
      }
    }
    uint64_t v41 = v21 - 0x5555555555555555 * ((v25 - *v24) >> 3);
    if (v41 < 1)
    {
      unint64_t v42 = 169 - v41;
      uint64_t v43 = v24[-(v42 / 0xAA)];
      unint64_t v44 = 170 * (v42 / 0xAA) - v42;
      uint64_t v25 = v43 + 24 * v44 + 4056;
      double v26 = *(double **)v25;
      double v27 = *(double **)(v43 + 24 * v44 + 4064);
      if ((unint64_t)v27 - *(void *)v25 < 0x40) {
        goto LABEL_73;
      }
    }
    else
    {
      uint64_t v25 = v24[v41 / 0xAAuLL] + 24 * (v41 % 0xAAuLL);
      double v26 = *(double **)v25;
      double v27 = *(double **)(v25 + 8);
      if ((unint64_t)v27 - *(void *)v25 < 0x40) {
        goto LABEL_73;
      }
    }
    goto LABEL_56;
  }
  if (v7 != 1)
  {
    if (v7) {
      return 0;
    }
    uint64_t v8 = a3[2];
    if (v8 >= 0) {
      uint64_t v9 = *(void *)(a4 + 24) + 24 * v8;
    }
    else {
      uint64_t v9 = a4;
    }
    double v10 = *(double **)v9;
    BOOL v11 = *(double **)(v9 + 8);
    if ((unint64_t)v11 - *(void *)v9 < 0x40) {
      goto LABEL_73;
    }
    int v53 = 0;
    char v54 = 0;
    if (v10 + 2 == v11) {
      goto LABEL_73;
    }
    double v12 = (double *)(a1 + 8);
    do
    {
      if (!sub_10004D030(v12, v10, v10 + 2, (uint64_t)&v53)) {
        break;
      }
      unint64_t v13 = v10 + 4;
      v10 += 2;
    }
    while (v13 != v11);
    if (v53) {
      int v14 = 1;
    }
    else {
      int v14 = -1;
    }
    if (!v54) {
      return v14 >= 0;
    }
    double v15 = *a2;
    double v16 = a2[1];
    if (*a2 != v16)
    {
      double v17 = v15 + 2;
      if (v15 + 2 != v16)
      {
        while (1)
        {
          long long v18 = *(double **)v9;
          __n128 v19 = *(double **)(v9 + 8);
          if ((unint64_t)v19 - *(void *)v9 < 0x40) {
            goto LABEL_73;
          }
          int v53 = 0;
          char v54 = 0;
          if (v18 + 2 == v19) {
            goto LABEL_73;
          }
          do
          {
            if (!sub_10004D030(v17, v18, v18 + 2, (uint64_t)&v53)) {
              break;
            }
            uint64_t v20 = v18 + 4;
            v18 += 2;
          }
          while (v20 != v19);
          if (!v54) {
            goto LABEL_76;
          }
          int v14 = 0;
          v17 += 2;
          if (v17 == v16) {
            return v14 >= 0;
          }
        }
      }
    }
LABEL_75:
    int v14 = 0;
    return v14 >= 0;
  }
  uint64_t v28 = a3[2];
  if (v28 >= 0) {
    uint64_t v29 = *(void *)(a5 + 48 * a3[1] + 24) + 24 * v28;
  }
  else {
    uint64_t v29 = a5 + 48 * a3[1];
  }
  double v30 = *(double **)v29;
  double v31 = *(double **)(v29 + 8);
  if ((unint64_t)v31 - *(void *)v29 >= 0x40)
  {
    int v53 = 0;
    char v54 = 0;
    if (v30 + 2 != v31)
    {
      int8x16_t v32 = (double *)(a1 + 8);
      do
      {
        if (!sub_10004D030(v32, v30, v30 + 2, (uint64_t)&v53)) {
          break;
        }
        int8x16_t v33 = v30 + 4;
        v30 += 2;
      }
      while (v33 != v31);
      if (v53) {
        int v14 = 1;
      }
      else {
        int v14 = -1;
      }
      if (!v54) {
        return v14 >= 0;
      }
      double v34 = *a2;
      double v35 = a2[1];
      if (*a2 != v35)
      {
        double v36 = v34 + 2;
        if (v34 + 2 != v35)
        {
          while (1)
          {
            double v37 = *(double **)v29;
            double v38 = *(double **)(v29 + 8);
            if ((unint64_t)v38 - *(void *)v29 < 0x40) {
              goto LABEL_73;
            }
            int v53 = 0;
            char v54 = 0;
            if (v37 + 2 == v38) {
              goto LABEL_73;
            }
            do
            {
              if (!sub_10004D030(v36, v37, v37 + 2, (uint64_t)&v53)) {
                break;
              }
              double v39 = v37 + 4;
              v37 += 2;
            }
            while (v39 != v38);
            if (!v54) {
              goto LABEL_76;
            }
            int v14 = 0;
            v36 += 2;
            if (v36 == v35) {
              return v14 >= 0;
            }
          }
        }
      }
      goto LABEL_75;
    }
  }
LABEL_73:
  int v14 = -1;
  return v14 >= 0;
}

void ***sub_1002FA440(void ***a1, void *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  if (v5 >= (*a1)[2])
  {
    BOOL v11 = sub_1002FA79C(*a1, (uint64_t)a2);
  }
  else
  {
    *unint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    uint64_t v7 = (const void *)*a2;
    uint64_t v6 = a2[1];
    int64_t v8 = v6 - *a2;
    if (v6 != *a2)
    {
      if (v8 < 0) {
        sub_1000A9108();
      }
      uint64_t v9 = (char *)operator new(v6 - *a2);
      *unint64_t v5 = v9;
      v5[1] = v9;
      double v10 = &v9[16 * (v8 >> 4)];
      v5[2] = v10;
      memcpy(v9, v7, v8);
      v5[1] = v10;
    }
    sub_1002C41B0(v5 + 3, a2 + 3);
    BOOL v11 = (char *)(v5 + 6);
    v4[1] = v5 + 6;
  }
  v4[1] = v11;
  return a1;
}

void sub_1002FA504(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_1002FA528(uint64_t a1, int8x16_t *a2)
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_1002FAAF8((uint64_t)exception, a1, a2);
}

void sub_1002FA57C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1002FA594(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      unint64_t v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000A9108();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000A6A10();
      }
      BOOL v11 = (char *)operator new(24 * v10);
    }
    else
    {
      BOOL v11 = 0;
    }
    unint64_t v13 = &v11[24 * v7];
    int v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    double v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      double v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - 1) = v5[2];
      *unint64_t v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    __n128 v19 = *(void **)a1;
    unint64_t v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      uint64_t v20 = v5;
      do
      {
        unint64_t v22 = (void *)*(v20 - 3);
        v20 -= 3;
        uint64_t v21 = v22;
        if (v22)
        {
          *(v5 - 2) = v21;
          operator delete(v21);
        }
        unint64_t v5 = v20;
      }
      while (v20 != v19);
      unint64_t v5 = v19;
    }
    if (v5)
    {
LABEL_24:
      operator delete(v5);
    }
  }
}

char *sub_1002FA79C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_1000A9108();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_1000A6A10();
    }
    unint64_t v7 = operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[6 * v3];
  double v30 = v8;
  int8x16_t v32 = (char *)&v7[6 * v6];
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = 0;
  unint64_t v10 = *(const void **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  int64_t v11 = v9 - *(void *)a2;
  if (v9 != *(void *)a2)
  {
    if (v11 < 0) {
      sub_1000A9108();
    }
    size_t v12 = (char *)operator new(v9 - *(void *)a2);
    void *v8 = v12;
    v8[1] = v12;
    unint64_t v13 = &v12[16 * (v11 >> 4)];
    v8[2] = v13;
    memcpy(v12, v10, v11);
    v8[1] = v13;
  }
  sub_1002C41B0(&v7[6 * v3 + 3], (uint64_t *)(a2 + 24));
  double v31 = (char *)&v7[6 * v3];
  int v14 = v31 + 48;
  size_t v15 = (char *)*a1;
  double v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v30;
    a1[1] = v14;
    a1[2] = v32;
  }
  else
  {
    unint64_t v17 = 0;
    do
    {
      long long v18 = &v30[v17 / 8];
      __n128 v19 = &v16[v17];
      *(v18 - 6) = 0;
      *(v18 - 5) = 0;
      *(v18 - 4) = 0;
      *((_OWORD *)v18 - 3) = *(_OWORD *)&v16[v17 - 48];
      *(v18 - 4) = *(void *)&v16[v17 - 32];
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 5) = 0;
      *((void *)v19 - 4) = 0;
      *(v18 - 3) = 0;
      *(v18 - 2) = 0;
      *(v18 - 1) = 0;
      *(_OWORD *)(v18 - 3) = *(_OWORD *)&v16[v17 - 24];
      *(v18 - 1) = *(void *)&v16[v17 - 8];
      *((void *)v19 - 3) = 0;
      *((void *)v19 - 2) = 0;
      *((void *)v19 - 1) = 0;
      v17 -= 48;
    }
    while (&v16[v17] != v15);
    uint64_t v20 = (char *)*a1;
    double v16 = (char *)a1[1];
    *a1 = &v30[v17 / 8];
    a1[1] = v14;
    a1[2] = v32;
    if (v16 != v20)
    {
      do
      {
        uint64_t v21 = *((void *)v16 - 3);
        if (v21)
        {
          uint64_t v22 = *((void *)v16 - 2);
          uint64_t v23 = (void *)*((void *)v16 - 3);
          if (v22 != v21)
          {
            uint64_t v24 = *((void *)v16 - 2);
            do
            {
              double v26 = *(void **)(v24 - 24);
              v24 -= 24;
              uint64_t v25 = v26;
              if (v26)
              {
                *(void *)(v22 - 16) = v25;
                operator delete(v25);
              }
              uint64_t v22 = v24;
            }
            while (v24 != v21);
            uint64_t v23 = (void *)*((void *)v16 - 3);
          }
          *((void *)v16 - 2) = v21;
          operator delete(v23);
        }
        double v27 = v16 - 48;
        uint64_t v28 = (void *)*((void *)v16 - 6);
        if (v28)
        {
          *((void *)v16 - 5) = v28;
          operator delete(v28);
        }
        v16 -= 48;
      }
      while (v27 != v20);
      double v16 = v20;
    }
  }
  if (v16) {
    operator delete(v16);
  }
  return v31 + 48;
}

void sub_1002FAA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_1002FAA3C((uint64_t)va);
  _Unwind_Resume(a1);
}