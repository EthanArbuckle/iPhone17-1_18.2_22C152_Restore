void sub_100229600(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *a1 = off_100461C40;
  v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_1004617C0;
  v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  operator delete();
}

uint64_t sub_1002296D4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 40);
  uint64_t v3 = *(void *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    unint64_t *v4 = 0;
    if (!*(void *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(void *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(void *)(a2 + 80) = *(void *)(result + 8);
      *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
      int v20 = *(_DWORD *)(result + 44);
      int v21 = *(_DWORD *)(result + 48);
      if (v20 == v21) {
        return result;
      }
      uint64_t v22 = (v21 - 1);
      uint64_t v23 = (v20 - 1);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        uint64_t v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        uint64_t v28 = v25 + 24 * v23 + 24;
        unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(void *)(v28 - 24) = v24;
          *(void *)(v28 - 16) = v24;
          *(void *)uint64_t v28 = v24;
          *(void *)(v28 + 8) = v24;
          *(unsigned char *)(v28 - 8) = 0;
          *(unsigned char *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t v27 = v23;
      }
      uint64_t v30 = v22 - v27;
      v31 = (unsigned char *)(v25 + 24 * v27 + 16);
      do
      {
        *((void *)v31 - 2) = v24;
        *((void *)v31 - 1) = v24;
        unsigned char *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  unint64_t v5 = *v4 + 1;
  unint64_t *v4 = v5;
  unint64_t v6 = *(void *)(result + 24);
  unint64_t v7 = *(void *)(result + 32);
  BOOL v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6) {
    BOOL v8 = v5 < v7 && *(void *)(v3 + 16 * v2 + 8) != *(void *)(a2 + 16);
  }
  if (v8 && v5 >= v6) {
    goto LABEL_26;
  }
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(void *)(a2 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a2 + 80) = *(void *)(result + 8);
  *(void *)(v3 + 16 * v2 + 8) = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(result + 44);
  int v13 = *(_DWORD *)(result + 48);
  if (v12 == v13) {
    return result;
  }
  uint64_t v14 = (v13 - 1);
  uint64_t v15 = (v12 - 1);
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v17 = *(void *)(a2 + 32);
  uint64_t v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    uint64_t v19 = v15;
LABEL_39:
    uint64_t v34 = v14 - v19;
    v35 = (unsigned char *)(v17 + 24 * v19 + 16);
    do
    {
      *((void *)v35 - 2) = v16;
      *((void *)v35 - 1) = v16;
      unsigned char *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  uint64_t v32 = v17 + 24 * v15 + 24;
  unint64_t v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(void *)(v32 - 24) = v16;
    *(void *)(v32 - 16) = v16;
    *(void *)uint64_t v32 = v16;
    *(void *)(v32 + 8) = v16;
    *(unsigned char *)(v32 - 8) = 0;
    *(unsigned char *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_1002298B8(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(void *)(a3 + 80) = *(void *)(result + 16);
    return result;
  }
  *(void *)(a3 + 80) = *(void *)(result + 8);
  int v3 = *(_DWORD *)(result + 44);
  *(void *)(*(void *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(void *)(a3 + 16);
  int v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    uint64_t v5 = (v4 - 1);
    uint64_t v6 = (v3 - 1);
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t v8 = *(void *)(a3 + 32);
    uint64_t v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      uint64_t v10 = v6;
LABEL_9:
      uint64_t v13 = v5 - v10;
      uint64_t v14 = (unsigned char *)(v8 + 24 * v10 + 16);
      do
      {
        *((void *)v14 - 2) = v7;
        *((void *)v14 - 1) = v7;
        *uint64_t v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    uint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    uint64_t v11 = v8 + 24 * v6 + 24;
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(void *)(v11 - 24) = v7;
      *(void *)(v11 - 16) = v7;
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = v7;
      *(unsigned char *)(v11 - 8) = 0;
      *(unsigned char *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  return result;
}

void *sub_100229980(void *a1)
{
  *a1 = off_100461C40;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_1004617C0;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_100229A34(void *a1)
{
  *a1 = off_100461C40;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_1004617C0;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  operator delete();
}

void sub_100229B0C()
{
}

uint64_t sub_100229B20(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_100229B34(void *a1)
{
  *a1 = off_100461C40;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_1004617C0;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_100229BE8(void *a1)
{
  *a1 = off_100461C40;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = off_1004617C0;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  operator delete();
}

void sub_100229CBC(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_100229CC8(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void sub_100229CF0()
{
}

uint64_t sub_100229D04(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_100229D18()
{
  exception = (std::regex_error *)__cxa_allocate_exception(0x18uLL);
  std::regex_error::regex_error(exception, __re_err_empty);
}

void sub_100229D5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100229D70(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v6 = sub_10022A248(a1, a2, a3);
  uint64_t v7 = v6;
  if (v6 != a2 || v6 == a3) {
    return v7;
  }
  if (a2 + 1 == a3) {
    return a2;
  }
  if (*a2 == 92)
  {
    int v8 = a2[1];
    if (v8 == 40)
    {
      uint64_t v9 = a2 + 2;
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      do
      {
        if (v9 == a3) {
          goto LABEL_24;
        }
        uint64_t v11 = v9;
        unint64_t v12 = (unsigned __int8 *)sub_100229D70(a1, v9, a3);
        if (v12 == v9) {
          break;
        }
        uint64_t v9 = sub_100229FD0(a1, v12, a3);
      }
      while (v9 != v11);
      if (v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
LABEL_24:
      }
        sub_100221BB4();
      uint64_t v7 = &v11[2 * (v11[1] == 41)];
      if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
        operator new();
      }
      return v7;
    }
    if (((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38) && (v8 - 49) <= 8)
    {
      if ((v8 - 48) <= *(_DWORD *)(a1 + 28)) {
        sub_100224448(a1);
      }
      sub_1002243F0();
    }
  }
  return a2;
}

unsigned __int8 *sub_100229FD0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v3 = *a2;
    if (v3 == 42) {
      sub_10022930C();
    }
    if (a2 + 1 != a3 && v3 == 92 && a2[1] == 123)
    {
      uint64_t v5 = &a2[2 * (a2[1] == 123)];
      if (v5 == a3) {
        goto LABEL_43;
      }
      int v6 = *v5;
      if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
        goto LABEL_43;
      }
      int v7 = v6 - 48;
      int v8 = v5 + 1;
      if (v5 + 1 == a3)
      {
LABEL_16:
        int v8 = a3;
      }
      else
      {
        while (1)
        {
          int v9 = *v8;
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38) {
            break;
          }
          if (v7 >= 214748364) {
            goto LABEL_43;
          }
          int v7 = v9 + 10 * v7 - 48;
          if (++v8 == a3) {
            goto LABEL_16;
          }
        }
      }
      if (v8 == v5) {
LABEL_43:
      }
        sub_10022949C();
      if (v8 != a3)
      {
        uint64_t v10 = v8 + 1;
        int v11 = *v8;
        if (v11 == 44)
        {
          if (v10 == a3) {
            goto LABEL_41;
          }
          int v12 = *v10;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
          {
            uint64_t v10 = v8 + 2;
            if (v8 + 2 == a3) {
              goto LABEL_41;
            }
            int v13 = v12 - 48;
            while (1)
            {
              int v14 = *v10;
              if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38) {
                break;
              }
              if (v13 >= 214748364) {
                goto LABEL_43;
              }
              int v13 = v14 + 10 * v13 - 48;
              if (++v10 == a3) {
                goto LABEL_41;
              }
            }
          }
          else
          {
            int v13 = -1;
          }
          if (v10 != a3 && v10 + 1 != a3 && *v10 == 92 && v10[1] == 125)
          {
            if (v13 == -1) {
              sub_10022930C();
            }
            if (v13 >= v7) {
              sub_10022930C();
            }
            goto LABEL_43;
          }
        }
        else if (v10 != a3 && v11 == 92 && *v10 == 125)
        {
          sub_10022930C();
        }
      }
LABEL_41:
      sub_1002294F4();
    }
  }
  return a2;
}

unsigned char *sub_10022A248(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v4 = a2 + 1;
    int v3 = *a2;
    if (a2 + 1 != a3 || v3 != 36)
    {
      if ((v3 - 46) > 0x2E || ((1 << (v3 - 46)) & 0x600000000001) == 0) {
        sub_100224224(a1);
      }
      if (v4 != a3 && v3 == 92)
      {
        unsigned int v7 = (char)*v4 - 36;
        if (v7 <= 0x3A && ((1 << v7) & 0x580000000000441) != 0) {
          sub_100224224(a1);
        }
      }
      if (*a2 == 46) {
        operator new();
      }
    }
  }

  return sub_1002234E0(a1, a2, a3);
}

void *sub_10022A3B8(void *a1)
{
  *a1 = off_1004617C0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_10022A424(void *a1)
{
  *a1 = off_1004617C0;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

uint64_t sub_10022A4B0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    *(void *)(a2 + 80) = *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_10022A4F0(uint64_t a1, unsigned __int8 a2)
{
  if (((a2 & 0xF8) == 0x30 || (a2 & 0xFE) == 0x38) && a2 - 49 <= 8)
  {
    if (a2 - 48 <= *(_DWORD *)(a1 + 28)) {
      sub_100224448(a1);
    }
    sub_1002243F0();
  }
  return 0;
}

char *sub_10022A554(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_10022A888(a1, a2, a3);
  if (v6 == a2 && (int v6 = sub_10022AA70(a1, a2, a3), v6 == a2))
  {
    if (a2 != a3 && *a2 == 46) {
      operator new();
    }
    int v6 = sub_1002234E0(a1, a2, a3);
    if (v6 != a2) {
      goto LABEL_22;
    }
  }
  else if (v6 != a2)
  {
    goto LABEL_22;
  }
  if (v6 != a3)
  {
    int v7 = *a2;
    if (v7 == 36) {
      operator new();
    }
    if (v7 != 40)
    {
      if (v7 == 94) {
        operator new();
      }
      return a2;
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    ++*(_DWORD *)(a1 + 36);
    int v8 = (char *)sub_1002203EC(a1, a2 + 1, a3);
    if (v8 == a3 || *v8 != 41) {
      sub_100221BB4();
    }
    if ((*(unsigned char *)(a1 + 24) & 2) == 0) {
      operator new();
    }
    --*(_DWORD *)(a1 + 36);
    int v6 = v8 + 1;
  }
LABEL_22:
  if (v6 == a2) {
    return a2;
  }

  return sub_10022167C(a1, v6, a3);
}

unsigned char *sub_10022A888(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        return a2;
      case ')':
        if (!*(_DWORD *)(a1 + 36)) {
          goto LABEL_5;
        }
        return a2;
      default:
LABEL_5:
        sub_100224224(a1);
    }
  }
  return a2;
}

char *sub_10022AA70(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = a2 + 1;
  if (a2 + 1 == a3 || *a2 != 92) {
    return a2;
  }
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      sub_100224224(a1);
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = sub_100227414(a1, v4, a3, 0);
      }
      else
      {
        int v6 = sub_10022A4F0(a1, *v4);
        uint64_t v7 = 2;
        if (!v6) {
          uint64_t v7 = 0;
        }
        result = &a2[v7];
      }
      break;
  }
  return result;
}

void *sub_10022ACB4(uint64_t a1, uint64_t ***a2, void *a3)
{
  unint64_t v7 = sub_100077F68((uint64_t)v32, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      int v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = *((void *)v12 + 1);
            if (v14 == v8)
            {
              if (sub_1000706F4((const void ***)v12 + 2, (unsigned __int8 ***)a2)) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            int v12 = *(void **)v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (sub_1000706F4((const void ***)v12 + 2, (unsigned __int8 ***)a2)) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          int v12 = *(void **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  uint64_t v15 = (void *)(a1 + 16);
  int v12 = operator new(0x20uLL);
  v32[0] = v12;
  v32[1] = a1 + 16;
  *(void *)int v12 = 0;
  *((void *)v12 + 1) = v8;
  uint64_t v16 = a3[1];
  *((void *)v12 + 2) = *a3;
  *((void *)v12 + 3) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  char v33 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (v9 && (float)(v18 * (float)v9) >= v17)
  {
    uint64_t v19 = *(void *)a1;
    int v20 = *(void **)(*(void *)a1 + 8 * v3);
    if (v20)
    {
LABEL_28:
      *(void *)int v12 = *v20;
LABEL_63:
      *int v20 = v12;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v29 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v19 = *(void *)a1;
        int v20 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v20) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v19 = *(void *)a1;
        int v20 = *(void **)(*(void *)a1 + 8 * v8);
        if (v20) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v8;
      uint64_t v19 = *(void *)a1;
      int v20 = *(void **)(*(void *)a1 + 8 * (v29 & v8));
      if (v20) {
        goto LABEL_28;
      }
    }
  }
  *(void *)int v12 = *v15;
  *uint64_t v15 = v12;
  *(void *)(v19 + 8 * v3) = v15;
  if (*(void *)v12)
  {
    unint64_t v30 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9) {
        v30 %= v9;
      }
    }
    else
    {
      v30 &= v9 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_10022AFF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10022B004((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10022B004(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10022B094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  int v10 = *(_DWORD *)(a1 + 28);
  *(void *)(a4 + 24) = a3;
  int v11 = (long long *)(a4 + 24);
  *(void *)(a4 + 32) = a3;
  *(unsigned char *)(a4 + 40) = 0;
  sub_1002229FC(a4, (v10 + 1), (long long *)(a4 + 24));
  *(void *)(a4 + 48) = a2;
  *(void *)(a4 + 56) = a2;
  *(unsigned char *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 72) = *v11;
  *(unsigned char *)(a4 + 88) = *(unsigned char *)(a4 + 40);
  if ((v9 & 0x800) == 0) {
    *(void *)(a4 + 104) = a2;
  }
  *(unsigned char *)(a4 + 96) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if (sub_10022250C(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0)) {
      goto LABEL_28;
    }
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (sub_10022BEE4(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0)) {
      goto LABEL_28;
    }
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      int v12 = v9 | 0x80;
      for (uint64_t i = a2 + 1; i != a3; ++i)
      {
        sub_1002229FC(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (sub_10022BEE4(a1, i, a3, (uint64_t *)a4, v12, 0)) {
              goto LABEL_28;
            }
          }
          else if (sub_10022B564(a1, i, a3, (uint64_t *)a4, v12, 0))
          {
            goto LABEL_28;
          }
        }
        else if (sub_10022250C(a1, i, a3, (uint64_t *)a4, v12, 0))
        {
          goto LABEL_28;
        }
        sub_1002229FC(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), v11);
      }
      sub_1002229FC(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (sub_10022BEE4(a1, a3, a3, (uint64_t *)a4, v12, 0)) {
            goto LABEL_28;
          }
        }
        else if (sub_10022B564(a1, a3, a3, (uint64_t *)a4, v12, 0))
        {
          goto LABEL_28;
        }
      }
      else if (sub_10022250C(a1, a3, a3, (uint64_t *)a4, v12, 0))
      {
        goto LABEL_28;
      }
    }
    uint64_t result = 0;
    *(void *)(a4 + 8) = *(void *)a4;
    return result;
  }
  if ((sub_10022B564(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0) & 1) == 0) {
    goto LABEL_13;
  }
LABEL_28:
  if (*(void *)(a4 + 8) == *(void *)a4) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = *(long long **)a4;
  }
  uint64_t v15 = *(void *)v14;
  *(void *)(a4 + 56) = *(void *)v14;
  *(unsigned char *)(a4 + 64) = *(void *)(a4 + 48) != v15;
  uint64_t v16 = *((void *)v14 + 1);
  *(void *)(a4 + 72) = v16;
  *(unsigned char *)(a4 + 88) = v16 != *(void *)(a4 + 80);
  return 1;
}

void sub_10022B3A4(void **a1, uint64_t a2, char *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  int v12 = (char *)*a1;
  unint64_t v13 = (char *)a1[1];
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*a1) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      unint64_t v13 = &v12[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v13;
    }
  }
  else
  {
    sub_10022D584(a1, v11 - v14);
    int v12 = (char *)*a1;
    unint64_t v13 = (char *)a1[1];
  }
  if (v13 != v12)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v18 = *a4;
    uint64_t v17 = a4[1];
    do
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      int v20 = (void *)(v18 + v15);
      if (v19 <= v16) {
        BOOL v21 = a4 + 3;
      }
      else {
        BOOL v21 = v20;
      }
      *(void *)&v12[v15] = a2 + *v21 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16) {
        unint64_t v22 = a4 + 3;
      }
      else {
        unint64_t v22 = (uint64_t *)(*a4 + v15);
      }
      *(void *)((char *)*a1 + v15 + 8) = a2 + v22[1] - v10;
      uint64_t v18 = *a4;
      uint64_t v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16) {
        unint64_t v23 = a4 + 3;
      }
      else {
        unint64_t v23 = (uint64_t *)(*a4 + v15);
      }
      char v24 = *((unsigned char *)v23 + 16);
      int v12 = (char *)*a1;
      int8x8_t v25 = (char *)a1[1];
      *((unsigned char *)*a1 + v15 + 16) = v24;
      ++v16;
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((v25 - v12) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((unsigned char *)a1 + 40) = 0;
  unint64_t v26 = (char *)(a2 + a4[6] - v10);
  a1[6] = v26;
  a1[7] = (void *)(a2 + a4[7] - v10);
  *((unsigned char *)a1 + 64) = *((unsigned char *)a4 + 64);
  a1[9] = (void *)(a2 + a4[9] - v10);
  a1[10] = (void *)(a2 + a4[10] - v10);
  *((unsigned char *)a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[13] = v26;
  }
  *((unsigned char *)a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t sub_10022B564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v101 = 0u;
  long long v102 = 0u;
  long long v100 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v84 = (void **)*((void *)&v100 + 1);
    v85 = (void **)v101;
    *((void *)&v102 + 1) = 0;
    unint64_t v86 = v101 - *((void *)&v100 + 1);
    if ((void)v101 - *((void *)&v100 + 1) < 0x11uLL) {
      goto LABEL_81;
    }
    do
    {
LABEL_80:
      operator delete(*v84);
      v85 = (void **)v101;
      v84 = (void **)(*((void *)&v100 + 1) + 8);
      *((void *)&v100 + 1) = v84;
      unint64_t v86 = v101 - (void)v84;
    }
    while ((void)v101 - (void)v84 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v97 = 0;
  memset(&v97[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v99, 0, 21);
  sub_10022C708((uint64_t)&v100);
  unint64_t v11 = *(void *)(*((void *)&v100 + 1) + 8 * ((*((void *)&v102 + 1) + (void)v102) / 0x2AuLL))
      + 96 * ((*((void *)&v102 + 1) + (void)v102) % 0x2AuLL);
  long long v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(void *)(v11 + 40) = 0;
  *(void *)(v11 + 48) = 0;
  *(void *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(void *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0;
  *(void *)(v11 + 72) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v99[0] = 0;
  uint64_t v13 = v99[1];
  *(void *)(v11 + 85) = *(void *)((char *)&v99[1] + 5);
  *(void *)(v11 + 80) = v13;
  uint64_t v15 = *((void *)&v102 + 1);
  uint64_t v14 = v102;
  uint64_t v16 = ++*((void *)&v102 + 1);
  uint64_t v17 = *((void *)&v100 + 1);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = v15 + v102;
  unint64_t v20 = 8 * (v19 / 0x2A);
  unint64_t v21 = 96 * (v19 % 0x2A);
  unint64_t v22 = *(void *)(*((void *)&v100 + 1) + v20) + v21;
  *(_DWORD *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 16) = a2;
  *(void *)(*(void *)(v17 + v20) + v21 + 24) = a3;
  unint64_t v23 = *(void *)(v17 + v20) + v21;
  uint64_t v26 = *(void *)(v23 + 56);
  unint64_t v24 = v23 + 56;
  uint64_t v25 = v26;
  unint64_t v27 = (*(void *)(v24 + 8) - v26) >> 4;
  v91 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27) {
      *(void *)(v24 + 8) = v25 + 16 * v18;
    }
  }
  else
  {
    sub_1002230AC((char **)v24, v18 - v27);
    uint64_t v16 = *((void *)&v102 + 1);
    uint64_t v14 = v102;
    uint64_t v17 = *((void *)&v100 + 1);
  }
  char v94 = 0;
  unsigned int v28 = 0;
  uint64_t v92 = a3;
  uint64_t v93 = 0;
  unint64_t v29 = v16 + v14 - 1;
  unint64_t v30 = 8 * (v29 / 0x2A);
  unint64_t v31 = 96 * (v29 % 0x2A);
  *(void *)(*(void *)(v17 + v30) + v31 + 80) = v6;
  uint64_t v32 = a3 - a2;
  unint64_t v33 = *(void *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(unsigned char *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32) {
      sub_100222BDC();
    }
    unint64_t v35 = v16 + v102 - 1;
    uint64_t v36 = *(void *)(*((void *)&v100 + 1) + 8 * (v35 / 0x2A));
    unint64_t v37 = v35 % 0x2A;
    uint64_t v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (void *)(v38 + 80);
    uint64_t v39 = *(void *)(v38 + 80);
    if (v39) {
      (*(void (**)(uint64_t, unint64_t))(*(void *)v39 + 16))(v39, v36 + 96 * v37);
    }
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        uint64_t v41 = *(void *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != v92) {
          goto LABEL_21;
        }
        uint64_t v64 = v41 - *(void *)(v36 + 96 * v37 + 8);
        uint64_t v65 = v93;
        if ((v94 & (v93 >= v64)) == 0) {
          uint64_t v65 = v64;
        }
        if (v65 == v32)
        {
          v66 = (void **)*((void *)&v100 + 1);
          uint64_t v67 = v101;
          if ((void)v101 == *((void *)&v100 + 1))
          {
            *((void *)&v102 + 1) = 0;
            unint64_t v81 = 0;
          }
          else
          {
            v68 = (void *)(*((void *)&v100 + 1) + 8 * ((unint64_t)v102 / 0x2A));
            v69 = (void *)(*v68 + 96 * ((unint64_t)v102 % 0x2A));
            unint64_t v70 = *(void *)(*((void *)&v100 + 1) + 8 * ((*((void *)&v102 + 1) + (void)v102) / 0x2AuLL))
                + 96 * ((*((void *)&v102 + 1) + (void)v102) % 0x2AuLL);
            if (v69 != (void *)v70)
            {
              do
              {
                v71 = (void *)v69[7];
                if (v71)
                {
                  v69[8] = v71;
                  operator delete(v71);
                }
                v72 = (void *)v69[4];
                if (v72)
                {
                  v69[5] = v72;
                  operator delete(v72);
                }
                v69 += 12;
                if ((void *)((char *)v69 - *v68) == (void *)4032)
                {
                  v73 = (void *)v68[1];
                  ++v68;
                  v69 = v73;
                }
              }
              while (v69 != (void *)v70);
              v66 = (void **)*((void *)&v100 + 1);
              uint64_t v67 = v101;
            }
            *((void *)&v102 + 1) = 0;
            unint64_t v81 = v67 - (void)v66;
            if (v81 >= 0x11)
            {
              do
              {
                operator delete(*v66);
                v66 = (void **)(*((void *)&v100 + 1) + 8);
                *((void *)&v100 + 1) = v66;
                unint64_t v81 = v101 - (void)v66;
              }
              while ((void)v101 - (void)v66 > 0x10uLL);
            }
          }
          if (v81 >> 3 == 1)
          {
            uint64_t v82 = 21;
          }
          else
          {
            if (v81 >> 3 != 2)
            {
LABEL_76:
              char v94 = 1;
              uint64_t v93 = v32;
              goto LABEL_8;
            }
            uint64_t v82 = 42;
          }
          *(void *)&long long v102 = v82;
          goto LABEL_76;
        }
        uint64_t v93 = v65;
        unint64_t v74 = *((void *)&v102 + 1) + v102 - 1;
        uint64_t v75 = *(void *)(*((void *)&v100 + 1) + 8 * (v74 / 0x2A));
        unint64_t v76 = v74 % 0x2A;
        v77 = *(void **)(v75 + 96 * (v74 % 0x2A) + 56);
        if (v77)
        {
          *(void *)(v75 + 96 * v76 + 64) = v77;
          operator delete(v77);
        }
        v78 = *(void **)(v75 + 96 * v76 + 32);
        if (v78)
        {
          *(void *)(v75 + 96 * v76 + 40) = v78;
          operator delete(v78);
        }
        uint64_t v79 = 42 * ((uint64_t)(v101 - *((void *)&v100 + 1)) >> 3) - 1;
        long long v80 = v102;
        --*((void *)&v102 + 1);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v79 = 0;
        }
        if ((unint64_t)(v79 - (*((void *)&v80 + 1) + v80) + 1) >= 0x54)
        {
          operator delete(*(void **)(v101 - 8));
          *(void *)&long long v101 = v101 - 8;
        }
        char v94 = 1;
LABEL_8:
        uint64_t v16 = *((void *)&v102 + 1);
        if (*((void *)&v102 + 1)) {
          continue;
        }
        if (v94)
        {
          uint64_t v83 = *v91;
          *(void *)uint64_t v83 = a2;
          *(void *)(v83 + 8) = a2 + v93;
          uint64_t v6 = 1;
          *(unsigned char *)(v83 + 16) = 1;
          goto LABEL_79;
        }
        uint64_t v6 = 0;
        v84 = (void **)*((void *)&v100 + 1);
        v85 = (void **)v101;
        *((void *)&v102 + 1) = 0;
        unint64_t v86 = v101 - *((void *)&v100 + 1);
        if ((void)v101 - *((void *)&v100 + 1) >= 0x11uLL) {
          goto LABEL_80;
        }
LABEL_81:
        unint64_t v87 = v86 >> 3;
        if (v87 == 1)
        {
          uint64_t v88 = 21;
LABEL_85:
          *(void *)&long long v102 = v88;
        }
        else if (v87 == 2)
        {
          uint64_t v88 = 42;
          goto LABEL_85;
        }
        if (v84 != v85)
        {
          do
          {
            v89 = *v84++;
            operator delete(v89);
          }
          while (v84 != v85);
          if ((void)v101 != *((void *)&v100 + 1)) {
            *(void *)&long long v101 = v101 + ((*((void *)&v100 + 1) - v101 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if ((void)v100) {
          operator delete((void *)v100);
        }
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        unint64_t v49 = v102;
        if (!(void)v102)
        {
          sub_10022CCD8((uint64_t)&v100);
          unint64_t v49 = v102;
        }
        v50 = (void *)(*((void *)&v100 + 1) + 8 * (v49 / 0x2A));
        uint64_t v51 = *v50 + 96 * (v49 % 0x2A);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v51 = 0;
        }
        if (v51 == *v50) {
          uint64_t v51 = *(v50 - 1) + 4032;
        }
        long long v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        uint64_t v53 = v36 + 96 * v37;
        *(void *)(v51 - 56) = 0;
        *(void *)(v51 - 48) = 0;
        *(void *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(void *)(v51 - 48) = *(void *)(v53 + 48);
        *(void *)(v53 + 32) = 0;
        *(void *)(v53 + 40) = 0;
        *(void *)(v53 + 48) = 0;
        *(void *)(v51 - 40) = 0;
        *(void *)(v51 - 32) = 0;
        *(void *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(void *)(v51 - 24) = *(void *)(v53 + 72);
        *(void *)(v53 + 56) = 0;
        *(void *)(v53 + 64) = 0;
        *(void *)(v53 + 72) = 0;
        uint64_t v54 = *v40;
        *(void *)(v51 - 11) = *(void *)(v38 + 85);
        *(void *)(v51 - 16) = v54;
        uint64_t v55 = *((void *)&v102 + 1);
        *(void *)&long long v102 = v102 - 1;
        ++*((void *)&v102 + 1);
        uint64_t v56 = v55 + v102;
        unint64_t v57 = (v55 + (uint64_t)v102) / 0x2AuLL;
        uint64_t v43 = *(void *)(*((void *)&v100 + 1) + 8 * v57);
        unint64_t v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45) {
          goto LABEL_23;
        }
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        unint64_t v42 = *((void *)&v102 + 1) + v102 - 1;
        uint64_t v43 = *(void *)(*((void *)&v100 + 1) + 8 * (v42 / 0x2A));
        unint64_t v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(void *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(void *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        uint64_t v47 = 42 * ((uint64_t)(v101 - *((void *)&v100 + 1)) >> 3) - 1;
        long long v48 = v102;
        --*((void *)&v102 + 1);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v47 = 0;
        }
        if ((unint64_t)(v47 - (*((void *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v101 - 8));
          *(void *)&long long v101 = v101 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        sub_1002231E8((uint64_t)v97, (long long *)(v36 + 96 * v37));
        (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(void, void, unsigned char *))(*(void *)v99[1] + 24))(v99[1], 0, v97);
        uint64_t v58 = *((void *)&v100 + 1);
        if ((void)v101 == *((void *)&v100 + 1)) {
          uint64_t v59 = 0;
        }
        else {
          uint64_t v59 = 42 * ((uint64_t)(v101 - *((void *)&v100 + 1)) >> 3) - 1;
        }
        unint64_t v60 = *((void *)&v102 + 1) + v102;
        if (v59 == *((void *)&v102 + 1) + (void)v102)
        {
          sub_10022C708((uint64_t)&v100);
          uint64_t v58 = *((void *)&v100 + 1);
          unint64_t v60 = *((void *)&v102 + 1) + v102;
        }
        unint64_t v61 = *(void *)(v58 + 8 * (v60 / 0x2A)) + 96 * (v60 % 0x2A);
        long long v62 = *(_OWORD *)&v97[16];
        *(_OWORD *)unint64_t v61 = *(_OWORD *)v97;
        *(_OWORD *)(v61 + 16) = v62;
        *(void *)(v61 + 40) = 0;
        *(void *)(v61 + 48) = 0;
        *(void *)(v61 + 32) = 0;
        *(_OWORD *)(v61 + 32) = *(_OWORD *)&v97[32];
        *(void *)(v61 + 48) = *(void *)&v97[48];
        memset(&v97[32], 0, 24);
        *(void *)(v61 + 56) = 0;
        *(void *)(v61 + 64) = 0;
        *(void *)(v61 + 72) = 0;
        *(_OWORD *)(v61 + 56) = *(_OWORD *)__p;
        *(void *)(v61 + 72) = v99[0];
        __p[0] = 0;
        __p[1] = 0;
        v99[0] = 0;
        uint64_t v63 = v99[1];
        *(void *)(v61 + 85) = *(void *)((char *)&v99[1] + 5);
        *(void *)(v61 + 80) = v63;
        ++*((void *)&v102 + 1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(void *)&v97[32])
        {
          *(void *)&v97[40] = *(void *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        sub_100222C34();
    }
  }
}

void sub_10022BE38(_Unwind_Exception *a1)
{
  sub_10022C690((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_10022BE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100222B98((uint64_t *)va);
  sub_10022C690((void **)(v9 - 144));
  _Unwind_Resume(a1);
}

void sub_10022BE94(_Unwind_Exception *a1)
{
  sub_10022C690((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_10022BEA8(_Unwind_Exception *a1)
{
  sub_10022C690((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_10022BEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  unint64_t v70 = 0;
  v71 = 0;
  unint64_t v72 = 0;
  *(_DWORD *)uint64_t v67 = 0;
  memset(&v67[8], 0, 32);
  long long v68 = 0u;
  memset(v69, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_63;
  }
  *(void *)&long long v65 = a3;
  *((void *)&v65 + 1) = a3;
  char v66 = 0;
  *(_DWORD *)long long v62 = 0;
  memset(&v62[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v64, 0, 21);
  v71 = sub_100222D10((void **)&v70, (uint64_t)v62);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(void *)&v62[32])
  {
    *(void *)&v62[40] = *(void *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  uint64_t v13 = v71;
  *((_DWORD *)v71 - 24) = 0;
  *((void *)v13 - 11) = a2;
  *((void *)v13 - 10) = a2;
  *((void *)v13 - 9) = a3;
  uint64_t v14 = *((void *)v13 - 8);
  unint64_t v15 = *(unsigned int *)(a1 + 28);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v13 - 7) - v14) >> 3);
  if (v15 <= v16)
  {
    if (v15 < v16) {
      *((void *)v13 - 7) = v14 + 24 * v15;
    }
  }
  else
  {
    sub_100222EF8((void **)v13 - 8, v15 - v16, &v65);
    uint64_t v13 = v71;
  }
  uint64_t v17 = *((void *)v13 - 5);
  unint64_t v18 = *(unsigned int *)(a1 + 32);
  unint64_t v19 = (*((void *)v13 - 4) - v17) >> 4;
  uint64_t v58 = a4;
  if (v18 <= v19)
  {
    if (v18 < v19) {
      *((void *)v13 - 4) = v17 + 16 * v18;
    }
  }
  else
  {
    sub_1002230AC((char **)v13 - 5, v18 - v19);
    uint64_t v13 = v71;
  }
  char v61 = 0;
  unsigned int v20 = 0;
  uint64_t v21 = a3 - a2;
  *((void *)v13 - 2) = v6;
  *((_DWORD *)v13 - 2) = a5;
  *(v13 - 4) = a6;
  uint64_t v60 = 0;
  uint64_t v59 = a3;
  do
  {
    BOOL v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22) {
      sub_100222BDC();
    }
    unint64_t v24 = v13 - 16;
    uint64_t v23 = *((void *)v13 - 2);
    uint64_t v25 = v13 - 96;
    if (v23) {
      (*(void (**)(uint64_t, char *))(*(void *)v23 + 16))(v23, v13 - 96);
    }
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        uint64_t v26 = *((void *)v13 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v59) {
          goto LABEL_29;
        }
        uint64_t v33 = v26 - *((void *)v13 - 11);
        uint64_t v34 = v60;
        if ((v61 & (v60 >= v33)) == 0)
        {
          long long v35 = *(_OWORD *)v25;
          *(_OWORD *)&v67[16] = *((_OWORD *)v13 - 5);
          *(_OWORD *)uint64_t v67 = v35;
          if (v67 != v25)
          {
            sub_10022D0A4((char **)&v67[32], *((char **)v13 - 8), *((char **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
            sub_10022D2A4((uint64_t)v69, *((const double **)v13 - 5), *((const double **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          }
          uint64_t v36 = *(void **)v24;
          *(void **)((char *)&v69[3] + 5) = *(void **)(v13 - 11);
          v69[3] = v36;
          uint64_t v34 = v33;
        }
        unint64_t v37 = v71;
        if (v34 == v21)
        {
          uint64_t v38 = v70;
          while (v37 != v38)
          {
            uint64_t v39 = (void *)*((void *)v37 - 5);
            if (v39)
            {
              *((void *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((void *)v37 - 8);
            if (v40)
            {
              *((void *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v71 = v38;
          char v61 = 1;
          uint64_t v60 = v21;
        }
        else
        {
          uint64_t v41 = v34;
          unint64_t v42 = (void *)*((void *)v71 - 5);
          if (v42)
          {
            *((void *)v71 - 4) = v42;
            operator delete(v42);
          }
          uint64_t v60 = v41;
          uint64_t v43 = (void *)*((void *)v37 - 8);
          if (v43)
          {
            *((void *)v37 - 7) = v43;
            operator delete(v43);
          }
          v71 = v37 - 96;
          char v61 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        unint64_t v27 = v71;
        unsigned int v28 = (void *)*((void *)v71 - 5);
        if (v28)
        {
          *((void *)v71 - 4) = v28;
          operator delete(v28);
        }
        unint64_t v29 = (void *)*((void *)v27 - 8);
        if (v29)
        {
          *((void *)v27 - 7) = v29;
          operator delete(v29);
        }
        v71 = v27 - 96;
        break;
      case 0xFFFFFC20:
        sub_1002231E8((uint64_t)v62, (long long *)v13 - 6);
        (*(void (**)(void, uint64_t, char *))(**(void **)v24 + 24))(*(void *)v24, 1, v13 - 96);
        (*(void (**)(void, void, unsigned char *))(*(void *)v64[1] + 24))(v64[1], 0, v62);
        unint64_t v30 = v71;
        if ((unint64_t)v71 >= v72)
        {
          v71 = sub_100222D10((void **)&v70, (uint64_t)v62);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)v71 = *(_OWORD *)v62;
          *((_OWORD *)v30 + 1) = v31;
          *((void *)v30 + 4) = 0;
          *((void *)v30 + 5) = 0;
          *((void *)v30 + 6) = 0;
          *((void *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((void *)v30 + 6) = *(void *)&v62[48];
          memset(&v62[32], 0, 24);
          *((void *)v30 + 8) = 0;
          *((void *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)__p;
          *((void *)v30 + 9) = v64[0];
          __p[0] = 0;
          __p[1] = 0;
          v64[0] = 0;
          uint64_t v32 = v64[1];
          *(void *)(v30 + 85) = *(void *)((char *)&v64[1] + 5);
          *((void *)v30 + 10) = v32;
          v71 = v30 + 96;
        }
        if (*(void *)&v62[32])
        {
          *(void *)&v62[40] = *(void *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        sub_100222C34();
    }
    uint64_t v13 = v71;
  }
  while (v70 != v71);
  if ((v61 & 1) == 0)
  {
LABEL_63:
    uint64_t v50 = 0;
    uint64_t v51 = v69[0];
    if (!v69[0]) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  uint64_t v44 = *v58;
  *(void *)uint64_t v44 = a2;
  *(void *)(v44 + 8) = a2 + v60;
  *(unsigned char *)(v44 + 16) = 1;
  if ((void)v68 != *(void *)&v67[32])
  {
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68 - *(void *)&v67[32]) >> 3);
    v46 = (unsigned char *)(*(void *)&v67[32] + 16);
    unsigned int v47 = 1;
    do
    {
      uint64_t v48 = v44 + 24 * v47;
      *(_OWORD *)uint64_t v48 = *((_OWORD *)v46 - 1);
      char v49 = *v46;
      v46 += 24;
      *(unsigned char *)(v48 + 16) = v49;
      BOOL v22 = v45 > v47++;
    }
    while (v22);
  }
  uint64_t v50 = 1;
  uint64_t v51 = v69[0];
  if (v69[0])
  {
LABEL_64:
    v69[1] = v51;
    operator delete(v51);
  }
LABEL_65:
  if (*(void *)&v67[32])
  {
    *(void *)&long long v68 = *(void *)&v67[32];
    operator delete(*(void **)&v67[32]);
  }
  long long v52 = v70;
  if (v70)
  {
    uint64_t v53 = v71;
    uint64_t v54 = v70;
    if (v71 != v70)
    {
      do
      {
        uint64_t v55 = (void *)*((void *)v53 - 5);
        if (v55)
        {
          *((void *)v53 - 4) = v55;
          operator delete(v55);
        }
        uint64_t v56 = (void *)*((void *)v53 - 8);
        if (v56)
        {
          *((void *)v53 - 7) = v56;
          operator delete(v56);
        }
        v53 -= 96;
      }
      while (v53 != v52);
      uint64_t v54 = v70;
    }
    v71 = v52;
    operator delete(v54);
  }
  return v50;
}

void sub_10022C4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_100222B98(&a33);
  sub_100222C8C((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void sub_10022C538(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v11 = (char *)v3 - (char *)v2;
    if (v11 < 0x11) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  unint64_t v4 = a1[4];
  uint64_t v5 = &v2[v4 / 0x2A];
  uint64_t v6 = (char *)*v5 + 96 * (v4 % 0x2A);
  unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
  if (v6 != (char *)v7)
  {
    do
    {
      unint64_t v8 = (void *)*((void *)v6 + 7);
      if (v8)
      {
        *((void *)v6 + 8) = v8;
        operator delete(v8);
      }
      uint64_t v9 = (void *)*((void *)v6 + 4);
      if (v9)
      {
        *((void *)v6 + 5) = v9;
        operator delete(v9);
      }
      v6 += 96;
      if (v6 - (unsigned char *)*v5 == 4032)
      {
        uint64_t v10 = (char *)v5[1];
        ++v5;
        uint64_t v6 = v10;
      }
    }
    while (v6 != (char *)v7);
    uint64_t v2 = (void **)a1[1];
    unint64_t v3 = (void **)a1[2];
  }
  a1[5] = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
LABEL_13:
      operator delete(*v2);
      uint64_t v12 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = v12 - (void)v2;
    }
    while (v11 > 0x10);
  }
LABEL_14:
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v13 = 42;
  }
  a1[4] = v13;
}

void **sub_10022C690(void **a1)
{
  sub_10022C538(a1);
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    uint64_t v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10022C708(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        long long v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            unint64_t v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (long long *)(v6 + 3);
              v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                _OWORD *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_1000A6A10();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFC0uLL);
      sub_100192E00((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFC0uLL);
    sub_100192F90((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        long long v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            unsigned int v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v47 = &v35[v84];
              v7 += v84;
              v85 = (long long *)(v41 + 3);
              unint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *unint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unsigned int v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)unsigned int v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0xFC0uLL);
  unint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_1000A6A10();
      }
      char v49 = (char *)operator new(8 * v48);
      unint64_t v27 = &v49[8 * (v48 >> 2)];
      unsigned int v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)unint64_t v27 = v90;
      unint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unint64_t v27 = v26;
      unint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_1000A6A10();
          }
          uint64_t v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v53;
          if (!v37)
          {
            unint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            uint64_t v64 = &v60[8 * v61];
            long long v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            uint64_t v64 = &v60[8 * v61];
            long long v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v64 = &v53[v68];
            long long v65 = &v27[v68];
            v69 = (long long *)(v27 + 16);
            unint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)unint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)uint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          unsigned int v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          unint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      unint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unint64_t v27 = v26;
  unint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  long long v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_10022CC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_10022CC94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10022CCA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10022CCC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10022CCD8(uint64_t a1)
{
  BOOL v3 = *(uint64_t **)(a1 + 8);
  unint64_t v2 = *(uint64_t **)(a1 + 16);
  unint64_t v4 = v2 - v3;
  if (v2 == v3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if ((unint64_t)(v5 - (*(void *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(void *)(a1 + 32) = v6 + 42;
    unint64_t v48 = (void *)*(v2 - 1);
    *(void *)(a1 + 16) = v2 - 1;
    sub_100192F90((void **)a1, &v48);
    return;
  }
  unint64_t v7 = *(uint64_t **)(a1 + 24);
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = (uint64_t)v7 - *(void *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      unint64_t v48 = operator new(0xFC0uLL);
      sub_100192E00((char **)a1, &v48);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v48 = *(void **)(v18 - 8);
      *(void *)(a1 + 16) = v18 - 8;
      sub_100192F90((void **)a1, &v48);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      unint64_t v48 = operator new(0xFC0uLL);
      sub_100192F90((void **)a1, &v48);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v10 = 21;
LABEL_19:
        *(void *)(a1 + 32) = v10;
        return;
      }
    }
    uint64_t v10 = *(void *)(a1 + 32) + 42;
    goto LABEL_19;
  }
  if (v7 == v8) {
    unint64_t v11 = 1;
  }
  else {
    unint64_t v11 = v9 >> 2;
  }
  if (v11 >> 61) {
    sub_1000A6A10();
  }
  uint64_t v12 = (char *)operator new(8 * v11);
  uint64_t v13 = operator new(0xFC0uLL);
  uint64_t v14 = v13;
  if (v11)
  {
    unint64_t v15 = &v12[8 * v11];
    *(void *)uint64_t v12 = v13;
    int64_t v16 = v12 + 8;
    uint64_t v17 = v12;
    if (v3 != v2) {
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  uint64_t v19 = (char *)operator new(8uLL);
  unint64_t v15 = v19 + 8;
  operator delete(v12);
  BOOL v3 = *(uint64_t **)(a1 + 8);
  uint64_t v20 = *(uint64_t **)(a1 + 16);
  uint64_t v12 = v19;
  *(void *)uint64_t v19 = v14;
  int64_t v16 = v19 + 8;
  uint64_t v17 = v19;
  if (v3 != v20)
  {
    while (1)
    {
LABEL_29:
      if (v16 == v15)
      {
        if (v12 <= v17)
        {
          if (v16 == v17) {
            unint64_t v32 = 1;
          }
          else {
            unint64_t v32 = (v16 - v17) >> 2;
          }
          if (v32 >> 61) {
            sub_1000A6A10();
          }
          uint64_t v33 = (char *)operator new(8 * v32);
          uint64_t v34 = v33;
          unint64_t v35 = v32 >> 2;
          uint64_t v21 = &v33[8 * (v32 >> 2)];
          unint64_t v24 = v21;
          int64_t v36 = v16 - v12;
          if (v16 != v12)
          {
            unint64_t v24 = &v21[v36 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v37 = v36 - 8;
            if (v37 < 0x38 || (uint64_t v38 = 8 * v35, (unint64_t)(&v33[8 * v35] - v12) < 0x20))
            {
              unint64_t v39 = &v33[8 * (v32 >> 2)];
              v40 = v12;
              goto LABEL_45;
            }
            uint64_t v42 = (v37 >> 3) + 1;
            uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v39 = &v21[v43];
            v40 = &v12[v43];
            uint64_t v44 = (long long *)(v12 + 16);
            int64_t v45 = &v33[v38 + 16];
            uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v47 = *v44;
              *((_OWORD *)v45 - 1) = *(v44 - 1);
              *(_OWORD *)int64_t v45 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_45:
                uint64_t v41 = *(void *)v40;
                v40 += 8;
                *(void *)unint64_t v39 = v41;
                v39 += 8;
              }
              while (v39 != v24);
            }
          }
          int64_t v16 = &v33[8 * v32];
          if (v17) {
            operator delete(v17);
          }
          uint64_t v17 = v34;
          goto LABEL_28;
        }
        uint64_t v26 = (v12 - v17) >> 3;
        if (v26 >= -1) {
          uint64_t v27 = v26 + 1;
        }
        else {
          uint64_t v27 = v26 + 2;
        }
        uint64_t v28 = v27 >> 1;
        unint64_t v29 = &v12[-8 * (v27 >> 1)];
        unint64_t v30 = v16;
        if (v16 != v12)
        {
          memmove(v29, v12, v16 - v12);
          unint64_t v30 = v12;
        }
        uint64_t v31 = -v28;
        unint64_t v24 = &v29[v16 - v12];
        uint64_t v21 = &v30[8 * v31];
      }
      else
      {
        uint64_t v21 = v12;
        unint64_t v24 = v16;
        int64_t v16 = v15;
      }
LABEL_28:
      unint64_t v15 = v16;
      uint64_t v25 = *v3++;
      *(void *)unint64_t v24 = v25;
      uint64_t v22 = v24 + 8;
      int64_t v16 = v22;
      uint64_t v12 = v21;
      if (v3 == *(uint64_t **)(a1 + 16)) {
        goto LABEL_22;
      }
    }
  }
LABEL_21:
  uint64_t v21 = v12;
  uint64_t v22 = v16;
LABEL_22:
  uint64_t v23 = *(void **)a1;
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = v21;
  *(void *)(a1 + 16) = v22;
  *(void *)(a1 + 24) = v15;
  if (v22 - v21 == 8)
  {
    *(void *)(a1 + 32) = 21;
    if (!v23) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 42;
    if (!v23) {
      return;
    }
  }

  operator delete(v23);
}

void sub_10022D068(_Unwind_Exception *a1)
{
  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *sub_10022D0A4(char **a1, char *a2, char *a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    uint64_t v18 = a1[1];
    uint64_t v17 = a1 + 1;
    uint64_t v14 = v18;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      unint64_t v24 = result;
      if (a2 != a3)
      {
        uint64_t v25 = result;
        do
        {
          *(_OWORD *)uint64_t v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      int64_t v16 = v24 - result;
      uint64_t v14 = result;
    }
    else
    {
      uint64_t v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v14;
      if (v20 != a3)
      {
        uint64_t v22 = v14;
        do
        {
          long long v23 = *(_OWORD *)v20;
          *((void *)v22 + 2) = *((void *)v20 + 2);
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      int64_t v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_26;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
    }
      sub_1000A9108();
    uint64_t v13 = 24 * v12;
    uint64_t result = (char *)operator new(24 * v12);
    uint64_t v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    unint64_t v15 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      unint64_t v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    int64_t v16 = v15 - v14;
    uint64_t v17 = a1 + 1;
  }
  *uint64_t v17 = &v14[v16];
  return result;
}

double *sub_10022D2A4(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz >> 60) {
      goto LABEL_62;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37) {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
LABEL_62:
    }
      sub_1000A9108();
    uint64_t v12 = 2 * v11;
    uint64_t result = (double *)operator new(16 * v11);
    uint64_t v13 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[v12];
    uint64_t v14 = result;
    if (a2 != a3)
    {
      uint64_t result = (double *)memcpy(result, a2, (((char *)a3 - (char *)a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      uint64_t v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    int64_t v15 = (char *)v14 - (char *)v13;
    int64_t v16 = (void *)(a1 + 8);
    goto LABEL_29;
  }
  uint64_t v17 = *(double **)(a1 + 8);
  int64_t v16 = (void *)(a1 + 8);
  uint64_t v13 = v17;
  int64_t v18 = (char *)v17 - (char *)result;
  unint64_t v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      unint64_t v30 = (char *)result;
    }
    else
    {
      unint64_t v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((unint64_t v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             unint64_t v48 = (char *)result + v47,
             unint64_t v49 = (unint64_t)a2 + v47,
             unint64_t v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (BOOL v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (BOOL v51 = 1),
            v51 ? (char v52 = 0) : (char v52 = 1),
            v48 > (char *)a2 ? (BOOL v53 = (unint64_t)result >= v49) : (BOOL v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        unint64_t v30 = (char *)result;
        uint64_t v31 = a2;
      }
      else
      {
        uint64_t v54 = (v29 >> 4) + 1;
        uint64_t v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        unint64_t v30 = (char *)&result[v55];
        uint64_t v31 = &a2[v55];
        unint64_t v56 = a2 + 4;
        unint64_t v57 = result + 4;
        uint64_t v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v59 = v56 - 4;
          float64x2x2_t v62 = vld2q_f64(v59);
          float64x2x2_t v64 = vld2q_f64(v56);
          uint64_t v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL)) {
          goto LABEL_28;
        }
      }
      do
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        v31 += 2;
        *(void *)unint64_t v30 = v32;
        *((void *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    int64_t v15 = v30 - (char *)result;
    uint64_t v13 = result;
    goto LABEL_29;
  }
  uint64_t v20 = &a2[2 * v19];
  if (v13 != result)
  {
    unint64_t v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((unint64_t v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           unint64_t v35 = (char *)result + v34 - 8,
           unint64_t v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (BOOL v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (BOOL v37 = 1),
          v37 ? (char v38 = 0) : (char v38 = 1),
          v35 > (char *)a2 ? (BOOL v39 = (unint64_t)result >= v36) : (BOOL v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      uint64_t v22 = result;
      long long v23 = a2;
    }
    else
    {
      uint64_t v40 = (v21 >> 4) + 1;
      uint64_t v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      uint64_t v22 = &result[v41];
      long long v23 = &a2[v41];
      uint64_t v42 = a2 + 4;
      uint64_t v43 = result + 4;
      uint64_t v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        int64_t v45 = v42 - 4;
        float64x2x2_t v61 = vld2q_f64(v45);
        float64x2x2_t v63 = vld2q_f64(v42);
        uint64_t v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL)) {
        goto LABEL_18;
      }
    }
    do
    {
      uint64_t v24 = *(void *)v23;
      uint64_t v25 = *((void *)v23 + 1);
      v23 += 2;
      *(void *)uint64_t v22 = v24;
      *((void *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  uint64_t v26 = v13;
  if (v20 != a3)
  {
    uint64_t v27 = v13;
    do
    {
      long long v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)uint64_t v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  int64_t v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *int64_t v16 = (char *)v13 + v15;
  return result;
}

void sub_10022D584(void **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)v5) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = (char *)&v5[3 * a2];
      uint64_t v12 = 24 * a2;
      do
      {
        *uint64_t v5 = 0;
        v5[1] = 0;
        *((unsigned char *)v5 + 16) = 0;
        v5 += 3;
        v12 -= 24;
      }
      while (v12);
      uint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000A9108();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000A6A10();
      }
      uint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v13 = &v10[24 * v6];
    uint64_t v14 = 24 * a2;
    int64_t v15 = &v13[24 * a2];
    int64_t v16 = v13;
    do
    {
      *(void *)int64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      v16[16] = 0;
      v16 += 24;
      v14 -= 24;
    }
    while (v14);
    uint64_t v17 = *a1;
    if (v5 != *a1)
    {
      do
      {
        long long v18 = *(_OWORD *)(v5 - 3);
        *((void *)v13 - 1) = *(v5 - 1);
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        v5 -= 3;
      }
      while (v5 != v17);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = &v10[24 * v9];
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t *sub_10022D72C(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_100077FAC((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          int64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = (char *)operator new(0xB0uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = v11;
  uint64_t v27 = v26 + 16;
  long long v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_1000559FC(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    *((void *)v26 + 4) = *((void *)v28 + 2);
    *(_OWORD *)uint64_t v27 = v29;
  }
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 88) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *((void *)v26 + 21) = 0;
  *(_OWORD *)(v26 + 152) = 0u;
  *(_OWORD *)(v26 + 136) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 40) = 0u;
  *((_DWORD *)v26 + 18) = 1065353216;
  *((void *)v26 + 10) = 0;
  *((void *)v26 + 11) = 0;
  *((void *)v26 + 12) = 0;
  v26[104] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v33 = *v32;
  *uint64_t v32 = v45[0];
LABEL_92:
  int64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_10022DBAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10022DBD8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10022DBC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10022DBD8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10022DBD8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_10022DC30(v2 + 40);
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_10022DC30(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    BOOL v3 = *(std::__shared_weak_count **)(a1 + 112);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    nullsub_15(a1 + 72);
    *(unsigned char *)(a1 + 64) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    unint64_t v6 = *(void **)(a1 + 40);
    if (v5 != v4)
    {
      do
      {
        uint64_t v7 = *(void *)(v5 - 24);
        if (v7)
        {
          uint64_t v8 = *(void *)(v5 - 16);
          unint64_t v9 = *(void **)(v5 - 24);
          if (v8 != v7)
          {
            uint64_t v10 = *(void *)(v5 - 16);
            do
            {
              unint64_t v12 = *(void **)(v10 - 24);
              v10 -= 24;
              unint64_t v11 = v12;
              if (v12)
              {
                *(void *)(v8 - 16) = v11;
                operator delete(v11);
              }
              uint64_t v8 = v10;
            }
            while (v10 != v7);
            unint64_t v9 = *(void **)(v5 - 24);
          }
          *(void *)(v5 - 16) = v7;
          operator delete(v9);
        }
        uint64_t v13 = v5 - 48;
        uint64_t v14 = *(void **)(v5 - 48);
        if (v14)
        {
          *(void *)(v5 - 40) = v14;
          operator delete(v14);
        }
        v5 -= 48;
      }
      while (v13 != v4);
      unint64_t v6 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v4;
    operator delete(v6);
  }
  int64_t v15 = *(void **)(a1 + 16);
  while (v15)
  {
    char v16 = v15;
    int64_t v15 = (void *)*v15;
    uint64_t v17 = (std::__shared_weak_count *)v16[3];
    if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    operator delete(v16);
  }
  unint64_t v18 = *(void **)a1;
  *(void *)a1 = 0;
  if (v18) {
    operator delete(v18);
  }
  return a1;
}

char *sub_10022DE1C(void *a1, uint64_t a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 7);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x22222222222222) {
    sub_1000A9108();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(a1[2] - *a1) >> 7) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(a1[2] - *a1) >> 7);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[2] - *a1) >> 7) >= 0x11111111111111) {
    unint64_t v6 = 0x22222222222222;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x22222222222222) {
      sub_1000A6A10();
    }
    uint64_t v7 = (char *)operator new(1920 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v17 = &v7[1920 * v3];
  *((void *)&v18 + 1) = &v7[1920 * v6];
  sub_1000776C4(v17, a2);
  uint64_t v8 = 0;
  uint64_t v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_1000776C4(&v17[v8], v8 + i))
    v8 -= 1920;
  unint64_t v12 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  *a1 = &v17[v8];
  *(void *)&long long v18 = v17 + 1920;
  *(_OWORD *)(a1 + 1) = v18;
  if (v11 != v12)
  {
    uint64_t v13 = v11 - 1920;
    uint64_t v14 = v11 - 1920;
    do
    {
      (**(void (***)(char *))v14)(v14);
      v13 -= 1920;
      BOOL v15 = v14 == v12;
      v14 -= 1920;
    }
    while (!v15);
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 1920;
}

void sub_10022DFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10019EBE0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10022DFF0()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10022E068()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_10022E0E0()
{
}

void sub_10022E144(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v10 = sub_100163888();
    uint64_t v11 = v9;
    if (sub_100059C20((uint64_t)&v10, (unsigned char *)&v11 + 1)) {
      sub_1000AA0BC(a2, a3, a4, a5);
    }
  }
}

void sub_10022E1C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  if (!a11) {
    JUMPOUT(0x10022E1A4);
  }
  JUMPOUT(0x10022E190);
}

BOOL sub_10022E1D4(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 2);
  switch(*a1 ^ ((int)*a1 >> 31))
  {
    case 1:
      int v3 = *(_DWORD *)v2;
      sub_10022E4C4(*(unsigned int *)v2);
      BOOL result = v3 != 0;
      break;
    case 2:
      uint64_t v5 = *v2;
      sub_10022E554(*v2);
      BOOL result = v5 != 0;
      break;
    case 3:
      BOOL result = sub_10022E5E4(a2, (uint64_t)v2);
      break;
    case 4:
      double v6 = *(double *)v2;
      sub_10022E86C(*(double *)v2);
      double v7 = ceil(v6);
      double v8 = floor(v6);
      if (v6 >= 0.0) {
        double v7 = v8;
      }
      BOOL result = v7 != 0.0;
      break;
    case 5:
      sub_10022E904();
    case 6:
      sub_10022EA78();
    default:
      sub_10022E350();
  }
  return result;
}

void sub_10022E350()
{
  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_1003EE0F0;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert empty value to a type");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100453860;
  sub_10018E868((uint64_t)v0);
  sub_1000D1698(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<BOOL>::operator()(boost::none_t) const [T = BOOL]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 111, (uint64_t)v0);
}

void sub_10022E424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_10022E48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10022E47CLL);
}

void sub_10022E4B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10022E4C4(uint64_t result)
{
  int v1 = 2 * ((int)result > 1);
  if ((int)result < 0) {
    int v1 = 1;
  }
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    int v3 = sub_10015F6A0(exception);
  }
  if (v1 == 1)
  {
    unint64_t v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    uint64_t v5 = sub_10015F668(v4);
  }
  return result;
}

uint64_t sub_10022E554(uint64_t result)
{
  int v1 = 2 * (result > 1);
  if (result < 0) {
    int v1 = 1;
  }
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    int v3 = sub_10015F6A0(exception);
  }
  if (v1 == 1)
  {
    unint64_t v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    uint64_t v5 = sub_10015F668(v4);
  }
  return result;
}

BOOL sub_10022E5E4(uint64_t a1, uint64_t a2)
{
  std::locale::locale(&v22);
  int v3 = *(char *)(a2 + 23);
  BOOL v4 = v3 < 0;
  if (v3 >= 0) {
    uint64_t v5 = (char *)a2;
  }
  else {
    uint64_t v5 = *(char **)a2;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if (v4) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  sub_100077AF4(&v23, v5, &v22, &v5[v6]);
  std::locale::~locale(&v22);
  if ((*((unsigned char *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v23.__r_.__value_.__l.__size_ == 4)
    {
      if (*(_DWORD *)v23.__r_.__value_.__l.__data_ == 1702195828)
      {
        operator delete(v23.__r_.__value_.__l.__data_);
        return 1;
      }
    }
    else if (v23.__r_.__value_.__l.__size_ == 5)
    {
      BOOL v10 = *(_DWORD *)v23.__r_.__value_.__l.__data_ != 1936482662
         || *(unsigned char *)(v23.__r_.__value_.__r.__words[0] + 4) != 101;
      operator delete(v23.__r_.__value_.__l.__data_);
      if (!v10) {
        return 0;
      }
      goto LABEL_30;
    }
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  else if (HIBYTE(v23.__r_.__value_.__r.__words[2]) == 4)
  {
    if (LODWORD(v23.__r_.__value_.__l.__data_) == 1702195828) {
      return 1;
    }
  }
  else if (HIBYTE(v23.__r_.__value_.__r.__words[2]) == 5)
  {
    BOOL v7 = LODWORD(v23.__r_.__value_.__l.__data_) == 1936482662 && v23.__r_.__value_.__s.__data_[4] == 101;
    if (v7) {
      return 0;
    }
  }
LABEL_30:
  int v11 = *(char *)(a2 + 23);
  BOOL v12 = v11 < 0;
  uint64_t v13 = *(unsigned __int8 **)a2;
  if (v11 >= 0) {
    uint64_t v13 = (unsigned __int8 *)a2;
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
  if (v12) {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  if (!v14) {
    goto LABEL_54;
  }
  BOOL v15 = &v13[v14 - 1];
  int v16 = *v15;
  BOOL result = v16 == 49;
  if ((v16 & 0xFE) != 0x30) {
    goto LABEL_54;
  }
  if (v13 != v15)
  {
    BOOL v7 = v16 == 49;
    int v17 = *v13;
    BOOL v18 = !v7 && v17 == 45;
    BOOL v19 = v18 || v17 == 43;
    uint64_t v20 = v19;
    if (v19) {
      ++v13;
    }
    if (v13 != v15)
    {
      uint64_t v21 = ~v20 + v14;
      while (*v13 == 48)
      {
        ++v13;
        if (!--v21) {
          return result;
        }
      }
LABEL_54:
      std::bad_cast::bad_cast((std::bad_cast *)&v23);
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100454020;
      sub_1000DB0D4((uint64_t)&v23);
    }
  }
  return result;
}

void sub_10022E844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

void sub_10022E858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
}

void sub_10022E86C(double a1)
{
  int v1 = 2 * (a1 >= 2.0);
  if (a1 <= -1.0) {
    int v1 = 1;
  }
  if (v1 == 2)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    int v3 = sub_10015F6A0(exception);
  }
  if (v1 == 1)
  {
    BOOL v4 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v4->__vftable = 0;
    uint64_t v5 = sub_10015F668(v4);
  }
}

void sub_10022E904()
{
  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_1003EE100;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100453860;
  sub_10018E868((uint64_t)v0);
  sub_1000D1698(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<BOOL>::operator()(const F &) const [T = BOOL, F = std::vector<boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_10022E9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_10022EA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10022EA30);
}

void sub_10022EA64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10022EA78()
{
  __cxa_allocate_exception(0x40uLL);
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&v1.__r_.__value_.__r.__words[1] = xmmword_1003EE100;
  strcpy(v1.__r_.__value_.__l.__data_, "Attempt to convert between incompatible types");
  std::runtime_error::runtime_error(&v2, &v1);
  v2.__vftable = (std::runtime_error_vtbl *)&off_100453860;
  sub_10018E868((uint64_t)v0);
  sub_1000D1698(&v2, (uint64_t)"T override::detail::SettingValueImpl::lexical_cast_visitor<BOOL>::operator()(const F &) const [T = BOOL, F = std::unordered_map<std::string, boost::variant<boost::detail::variant::recursive_flag<boost::none_t>, int, long long, std::string, double, std::vector<boost::recursive_variant_>, std::unordered_map<std::string, boost::recursive_variant_>>>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/util/overridable_setting.h", 106, (uint64_t)v0);
}

void sub_10022EB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_10022EBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v17);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x10022EBA4);
}

void sub_10022EBD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_10022EBEC(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_10022EC1C()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10022EC94()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

double sub_10022ED0C(uint64_t *a1)
{
  return (double)a1[1] / 1000000000.0 + (double)*a1 - kCFAbsoluteTimeIntervalSince1970;
}

double sub_10022ED40(unint64_t a1)
{
  double v2 = *(double *)&qword_10047E058;
  if (*(double *)&qword_10047E058 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t denom = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v5 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v5;
      }
      while (denom);
    }
    else
    {
      uint32_t v5 = info.numer;
    }
    unsigned int v6 = 1000000000;
    uint32_t v7 = info.numer / v5;
    do
    {
      uint32_t v8 = v7;
      uint32_t v7 = v6;
      unsigned int v6 = v8 % v6;
    }
    while (v6);
    double v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_10047E058 = v2;
  }
  return v2 * (double)a1;
}

void sub_10022EE00()
{
}

uint64_t sub_10022EE28(uint64_t a1)
{
  if (qword_10047BED8 == -1)
  {
    double v2 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BED8, &stru_100461DE0);
  double v2 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Waiting for finalizers to finish running", buf, 2u);
  }
LABEL_4:
  *(void *)buf = 0;
  uint64_t v13 = buf;
  uint64_t v14 = 0x3002000000;
  BOOL v15 = nullsub_30;
  int v16 = nullsub_26;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000;
  v11[2] = nullsub_124;
  v11[3] = &unk_100461E08;
  v11[4] = buf;
  sub_100045DE8((dispatch_queue_t *)(a1 + 144), v11);
  _Block_object_dispose(buf, 8);
  int v3 = *(void **)(a1 + 152);
  if (v3)
  {
    BOOL v4 = *(void **)(a1 + 160);
    uint32_t v5 = *(void **)(a1 + 152);
    if (v4 != v3)
    {
      unsigned int v6 = v4 - 4;
      uint32_t v7 = v4 - 4;
      do
      {
        uint64_t v9 = (void *)v7[3];
        if (v7 == v9)
        {
          (*(void (**)(void *))(*v7 + 32))(v7);
        }
        else if (v9)
        {
          (*(void (**)(void *))(*v9 + 40))(v9);
        }
        v6 -= 4;
        BOOL v8 = v7 == v3;
        v7 -= 4;
      }
      while (!v8);
      uint32_t v5 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v3;
    operator delete(v5);
  }
  sub_100359A24((dispatch_object_t *)(a1 + 144));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  return a1;
}

uint64_t sub_10022F048(uint64_t a1, void *a2)
{
  uint64_t v8 = a1;
  int v3 = a2 + 3;
  BOOL v4 = (void *)a2[3];
  if (!v4)
  {
    int v3 = &v10;
    goto LABEL_5;
  }
  if (v4 != a2)
  {
    BOOL v10 = (void *)a2[3];
LABEL_5:
    *int v3 = 0;
    uint64_t v5 = a1;
    goto LABEL_7;
  }
  BOOL v10 = v9;
  (*(void (**)(void *, void *))(*a2 + 24))(a2, v9);
  uint64_t v5 = v8;
LABEL_7:
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x5002000000;
  v11[3] = sub_100230B48;
  v11[4] = sub_100230BC8;
  void v11[5] = v5;
  if (v10)
  {
    if (v10 == v9)
    {
      uint64_t v13 = v12;
      (*(void (**)(void *, void *))(v9[0] + 24))(v9, v12);
    }
    else
    {
      uint64_t v13 = v10;
      BOOL v10 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_100230C2C;
  v7[3] = &unk_100461E30;
  v7[4] = v11;
  sub_100359A50((dispatch_queue_t *)(a1 + 144), v7);
  _Block_object_dispose(v11, 8);
  if (v13 != v12)
  {
    if (v13) {
      (*(void (**)(void))(*v13 + 40))();
    }
    uint64_t result = (uint64_t)v10;
    if (v10 != v9) {
      goto LABEL_16;
    }
    return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
  }
  (*(void (**)(void *))(v12[0] + 32))(v12);
  uint64_t result = (uint64_t)v10;
  if (v10 == v9) {
    return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
  }
LABEL_16:
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_10022F2D4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000A6954(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10022F2EC(uint64_t a1)
{
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100461DE0);
    double v2 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  double v2 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Finished playing back events", buf, 2u);
  }
LABEL_4:
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(unsigned char *)(a1 + 17) = 0;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  *(void *)buf = 0;
  uint64_t v5 = buf;
  uint64_t v6 = 0x3002000000;
  uint32_t v7 = sub_100230FB0;
  uint64_t v8 = nullsub_125;
  uint64_t v9 = a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_100230FC0;
  v3[3] = &unk_100461E58;
  v3[4] = buf;
  sub_100359A50((dispatch_queue_t *)(a1 + 144), v3);
  _Block_object_dispose(buf, 8);
  std::mutex::unlock((std::mutex *)(a1 + 24));
}

void sub_10022F454(uint64_t a1)
{
  double v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(unsigned char *)(a1 + 17) = 1;
  std::mutex::unlock(v2);
  if (qword_10047BED8 == -1)
  {
    int v3 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BED8, &stru_100461DE0);
  int v3 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Apply event queue in batch", buf, 2u);
  }
LABEL_4:
  BOOL v4 = _os_activity_create((void *)&_mh_execute_header, "applying localizer events", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &v10);
  uint64_t v5 = sub_10022F6A4(*(void *)a1);
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 16));
  if ((v6 & 1) == 0)
  {
    std::string::size_type v7 = (std::string::size_type)v5;
    do
    {
      uint64_t v8 = *(void *)a1;
      char v11 = 0;
      *(void *)buf = 0;
      uint64_t v14 = buf;
      uint64_t v15 = 0x3802000000;
      int v16 = sub_100231038;
      int v17 = nullsub_126;
      BOOL v18 = &v11;
      uint64_t v19 = v8;
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 0x40000000;
      v12[2] = sub_100231048;
      void v12[3] = &unk_100461E80;
      v12[4] = buf;
      sub_100045DE8((dispatch_queue_t *)(v8 + 32), v12);
      _Block_object_dispose(buf, 8);
      if (v11) {
        break;
      }
      sub_10022F8A0((uint64_t *)a1, v7);
      (*(void (**)(void, std::string::size_type))(**(void **)(a1 + 8) + 248))(*(void *)(a1 + 8), v7);
      v7 += 250000000;
      unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 16));
    }
    while ((v9 & 1) == 0);
  }
  sub_10022F2EC(a1);
  os_activity_scope_leave(&v10);
}

void *sub_10022F6A4(uint64_t a1)
{
  v8.__r_.__value_.__r.__words[0] = 0;
  v8.__r_.__value_.__l.__size_ = (std::string::size_type)&v8;
  v8.__r_.__value_.__r.__words[2] = 0x3802000000;
  unsigned __int8 v9 = sub_1002324DC;
  os_activity_scope_state_s v10 = nullsub_133;
  uint64_t v11 = a1;
  BOOL v12 = &v3;
  int v3 = 0;
  v4.__vftable = (std::runtime_error_vtbl *)_NSConcreteStackBlock;
  v4.__imp_.__imp_ = (const char *)0x40000000;
  uint64_t v5 = sub_1002324EC;
  unsigned __int8 v6 = &unk_100461FD8;
  std::string::size_type v7 = &v8;
  sub_100045DE8((dispatch_queue_t *)(a1 + 32), &v4);
  _Block_object_dispose(&v8, 8);
  if (!v3)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v8, "No events in queue");
    std::runtime_error::runtime_error(&v4, &v8);
    v4.__vftable = (std::runtime_error_vtbl *)&off_100453860;
    sub_10018E868((uint64_t)v2);
    sub_1000D1698(&v4, (uint64_t)"static std::chrono::nanoseconds EventGenerator::getFirstTimestamp(const BaseLocalizer::EventPriorityQueue &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/event_generator.cpp", 320, (uint64_t)v2);
  }
  return sub_100017318(*v3);
}

void sub_10022F824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a13);
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10022F8A0(uint64_t *a1, std::string::size_type a2)
{
  if (qword_10047BED8 != -1) {
    dispatch_once(&qword_10047BED8, &stru_100461DE0);
  }
  std::runtime_error v4 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *a1;
    std::string::size_type v22 = 0;
    buf.__r_.__value_.__r.__words[0] = 0;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)&buf;
    buf.__r_.__value_.__r.__words[2] = 0x3802000000;
    uint64_t v27 = sub_100231D8C;
    long long v28 = nullsub_129;
    long long v29 = &v22;
    float v30 = (void **)v5;
    *(void *)uint64_t v32 = _NSConcreteStackBlock;
    *(void *)&v32[8] = 0x40000000;
    *(void *)&v32[16] = sub_100231D9C;
    uint64_t v33 = &unk_100461F38;
    p_std::string buf = &buf;
    sub_100045DE8((dispatch_queue_t *)(v5 + 32), v32);
    _Block_object_dispose(&buf, 8);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v22;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Applying until timestamp %lld with queue size %zu", (uint8_t *)&buf, 0x16u);
  }
  uint64_t v6 = *a1;
  uint64_t v25 = (void *)a2;
  buf.__r_.__value_.__r.__words[0] = 0;
  std::string v23 = 0;
  uint64_t v24 = 0;
  std::string::size_type v22 = 0;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)&buf;
  buf.__r_.__value_.__r.__words[2] = 0x4002000000;
  uint64_t v27 = sub_10023250C;
  long long v28 = nullsub_134;
  long long v29 = (std::string::size_type *)v6;
  float v30 = &v25;
  float v31 = &v22;
  *(void *)uint64_t v32 = _NSConcreteStackBlock;
  *(void *)&v32[8] = 0x40000000;
  *(void *)&v32[16] = sub_100232524;
  uint64_t v33 = &unk_100462000;
  p_std::string buf = &buf;
  sub_100045DE8((dispatch_queue_t *)(v6 + 32), v32);
  _Block_object_dispose(&buf, 8);
  std::string v8 = (uint64_t *)v22;
  for (uint64_t i = v23; v8 != i; v8 += 2)
  {
    if (qword_10047BED8 == -1)
    {
      unsigned __int8 v9 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_8;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100461DE0);
      unsigned __int8 v9 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_8:
        sub_100230804(&buf, (_DWORD *)*v8);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          os_activity_scope_state_s v10 = &buf;
        }
        else {
          os_activity_scope_state_s v10 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        uint64_t v25 = sub_100017318((_DWORD *)*v8);
        double v11 = sub_100190580(&v25);
        *(_DWORD *)uint64_t v32 = 136315394;
        *(void *)&v32[4] = v10;
        *(_WORD *)&v32[12] = 2048;
        *(double *)&v32[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Applying event %s @ %f", v32, 0x16u);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
    }
    buf.__r_.__value_.__r.__words[0] = a1[1];
    sub_1002310B8(*v8, (uint64_t *)&buf);
  }
  if (qword_10047BED8 == -1)
  {
    BOOL v12 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  dispatch_once(&qword_10047BED8, &stru_100461DE0);
  BOOL v12 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_19:
    std::string::size_type v14 = v22;
    uint64_t v13 = v23;
    uint64_t v15 = *a1;
    uint64_t v25 = 0;
    buf.__r_.__value_.__r.__words[0] = 0;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)&buf;
    buf.__r_.__value_.__r.__words[2] = 0x3802000000;
    uint64_t v27 = sub_100231D8C;
    long long v28 = nullsub_129;
    long long v29 = (std::string::size_type *)&v25;
    float v30 = (void **)v15;
    *(void *)uint64_t v32 = _NSConcreteStackBlock;
    *(void *)&v32[8] = 0x40000000;
    *(void *)&v32[16] = sub_100231D9C;
    uint64_t v33 = &unk_100461F38;
    p_std::string buf = &buf;
    sub_100045DE8((dispatch_queue_t *)(v15 + 32), v32);
    _Block_object_dispose(&buf, 8);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (uint64_t)((uint64_t)v13 - v14) >> 4;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Applied %zu, %zu events remaining to be applied", (uint8_t *)&buf, 0x16u);
  }
LABEL_20:
  std::string::size_type v17 = v22;
  int v16 = v23;
  if (v22)
  {
    if (v23 == (uint64_t *)v22)
    {
      uint64_t v20 = v23;
    }
    else
    {
      BOOL v18 = v23;
      do
      {
        uint64_t v19 = (std::__shared_weak_count *)*(v18 - 1);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v18 -= 2;
      }
      while (v18 != (uint64_t *)v17);
      uint64_t v20 = (void *)v22;
    }
    std::string v23 = (uint64_t *)v17;
    operator delete(v20);
  }
  return (uint64_t)((uint64_t)v16 - v17) >> 4;
}

void sub_10022FDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_1000A6954(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10022FE30(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  std::string v8 = sub_100017318((_DWORD *)*a4);
  unsigned __int8 v9 = v8;
  if (!*(unsigned char *)a3)
  {
    *(unsigned char *)a3 = 1;
    goto LABEL_11;
  }
  if (v8 == *(void **)(a3 + 8))
  {
LABEL_11:
    *(void *)(a3 + 8) = v8;
    goto LABEL_12;
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v10 = *(void *)(a2 + 8);
    if ((uint64_t)v8 - v10 >= 2500000000000)
    {
      sub_1000AE4B0(buf, "");
      sub_100231068("Unreasonably large gap the data, likely corrupt", &__p);
      sub_10016A2C4((uint64_t)buf, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v20 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1000D11E0((uint64_t)&v16);
    }
    if ((uint64_t)v8 - v10 > 249999999)
    {
      uint64_t v11 = (uint64_t)v8 - v10;
      uint64_t v12 = v10 + 250000000;
      do
      {
        (*(void (**)(std::string::size_type, uint64_t))(*(void *)a1 + 248))(a1, v12);
        if (!*(unsigned char *)a2) {
          *(unsigned char *)a2 = 1;
        }
        *(void *)(a2 + 8) = v12;
        v11 -= 250000000;
        v12 += 250000000;
      }
      while (v11 > 249999999);
    }
  }
  else
  {
    (*(void (**)(std::string::size_type))(*(void *)a1 + 248))(a1);
    if (*(unsigned char *)a2)
    {
      if (*(unsigned char *)a3) {
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
      }
      else {
        *(unsigned char *)a2 = 0;
      }
    }
    else if (*(unsigned char *)a3)
    {
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(unsigned char *)a2 = 1;
    }
  }
LABEL_12:
  if (qword_10047BED8 == -1)
  {
    uint64_t v13 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_19;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100461DE0);
    uint64_t v13 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_19;
    }
  }
  sub_100230804(&__p, (_DWORD *)*a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)std::string buf = 136315394;
  *(void *)&buf[4] = p_p;
  __int16 v18 = 2048;
  uint64_t v19 = v9;
  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Applying event %s @ %lld", buf, 0x16u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_19:
  __p.__r_.__value_.__r.__words[0] = a1;
  return sub_1002310B8(*a4, (uint64_t *)&__p);
}

void sub_10023014C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100230190(void *a1)
{
  double v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_100230220(uint64_t *a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v29 = 0x4002000000;
  float v30 = sub_100231DBC;
  float v31 = nullsub_130;
  uint64_t v32 = (char **)v4;
  uint64_t v33 = &v22;
  p_p = &__p;
  std::string::size_type v22 = a2;
  std::string v23 = _NSConcreteStackBlock;
  uint64_t v24 = 0x40000000;
  uint64_t v25 = sub_100231DD4;
  uint64_t v26 = &unk_100461F60;
  p_long long buf = &buf;
  sub_100045DE8((dispatch_queue_t *)(v4 + 32), &v23);
  _Block_object_dispose(&buf, 8);
  uint64_t v5 = (char *)__p;
  uint64_t v6 = v19;
  if (__p != v19)
  {
    *(void *)&long long buf = a2;
    while (!sub_1002321BC((uint64_t *)&buf, (int **)v5))
    {
      v5 += 16;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        goto LABEL_17;
      }
    }
    if (v5 != v6)
    {
      for (uint64_t i = v5 + 16; i != v6; i += 16)
      {
        if (!sub_1002321BC((uint64_t *)&buf, (int **)i))
        {
          long long v9 = *(_OWORD *)i;
          *(void *)uint64_t i = 0;
          *((void *)i + 1) = 0;
          uint64_t v10 = (std::__shared_weak_count *)*((void *)v5 + 1);
          *(_OWORD *)uint64_t v5 = v9;
          if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          v5 += 16;
        }
      }
    }
LABEL_17:
    uint64_t v11 = *a1;
    uint64_t v21 = v19;
    std::string::size_type v22 = v5;
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v29 = 0x4002000000;
    float v30 = sub_100232334;
    float v31 = nullsub_131;
    uint64_t v32 = &v22;
    uint64_t v33 = &v21;
    p_p = (void **)v11;
    std::string v23 = _NSConcreteStackBlock;
    uint64_t v24 = 0x40000000;
    uint64_t v25 = sub_10023234C;
    uint64_t v26 = &unk_100461F88;
    p_long long buf = &buf;
    sub_100045DE8((dispatch_queue_t *)(v11 + 32), &v23);
    _Block_object_dispose(&buf, 8);
    uint64_t v12 = (v19 - (unsigned char *)__p) >> 4;
    uint64_t v7 = v12 - ((v19 - v5) >> 4);
    if (v12 != (v19 - v5) >> 4)
    {
      if (qword_10047BED8 == -1)
      {
        uint64_t v13 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
      dispatch_once(&qword_10047BED8, &stru_100461DE0);
      uint64_t v13 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_20:
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = v7;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "WARNING: Dropping %zu events", (uint8_t *)&buf, 0xCu);
      }
    }
LABEL_21:
    uint64_t v5 = (char *)__p;
    if (!__p) {
      return v7;
    }
    goto LABEL_22;
  }
  uint64_t v7 = 0;
  if (!__p) {
    return v7;
  }
LABEL_22:
  std::string::size_type v14 = v19;
  uint64_t v15 = v5;
  if (v19 != v5)
  {
    do
    {
      int v16 = (std::__shared_weak_count *)*((void *)v14 - 1);
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v14 -= 16;
    }
    while (v14 != v5);
    uint64_t v15 = __p;
  }
  uint64_t v19 = v5;
  operator delete(v15);
  return v7;
}

void sub_1002305E0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_1000A6954(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10023060C(void *a1)
{
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100461DE0);
    double v2 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  double v2 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "WARNING: Dropping all events", buf, 2u);
  }
LABEL_4:
  uint64_t v3 = *a1;
  uint64_t v4 = (dispatch_queue_t *)(*a1 + 32);
  *(void *)long long buf = 0;
  uint64_t v7 = buf;
  uint64_t v8 = 0x3002000000;
  long long v9 = sub_100232404;
  uint64_t v10 = nullsub_132;
  uint64_t v11 = v3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_100232414;
  v5[3] = &unk_100461FB0;
  v5[4] = buf;
  sub_100045DE8(v4, v5);
  _Block_object_dispose(buf, 8);
}

uint64_t sub_100230758(uint64_t result)
{
  return result;
}

void sub_100230768(uint64_t a1)
{
  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (!*(unsigned char *)(a1 + 17)) {
    goto LABEL_4;
  }
  do
    std::condition_variable::wait((std::condition_variable *)(a1 + 88), &v2);
  while (*(unsigned char *)(a1 + 17));
  if (v2.__owns_) {
LABEL_4:
  }
    std::mutex::unlock(v2.__m_);
}

void sub_1002307D4(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_100230804(std::string *a1@<X8>, _DWORD *a2@<X0>)
{
  int v4 = *a2;
  std::unique_lock<std::mutex> v2 = a2 + 2;
  int v3 = v4;
  switch(v4 ^ (v4 >> 31))
  {
    case 1:
      sub_10035F110((char *)a1);
      break;
    case 2:
      sub_10035EDBC((uint64_t)v2, a1);
      break;
    case 3:
      if (v3 < 0) {
        std::unique_lock<std::mutex> v2 = (void *)*v2;
      }
      sub_10035EB4C((uint64_t)v2, a1);
      break;
    case 4:
      sub_10035EFB0((char *)a1);
      break;
    case 5:
      sub_10035F084((char *)a1);
      break;
    case 6:
      sub_10035F158((uint64_t)a1);
      break;
    case 7:
      sub_10035ED94((char *)a1);
      break;
    case 8:
      if (v3 < 0) {
        std::unique_lock<std::mutex> v2 = (void *)*v2;
      }
      sub_10035E804((uint64_t)v2, a1);
      break;
    case 9:
      strcpy((char *)a1, "OutdoorPosInputEvent");
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = 20;
      break;
    case 0xA:
      sub_10035F0C8((char *)a1);
      break;
    case 0xB:
      sub_10035F05C((char *)a1);
      break;
    case 0xC:
      strcpy((char *)a1, "UserLocationInput");
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = 17;
      break;
    case 0xD:
      sub_1002309DC((uint64_t)v2);
      break;
    case 0xE:
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = 14;
      strcpy((char *)a1, "WifiInputEvent");
      break;
    case 0xF:
      sub_10035F1AC((char *)a1);
      break;
    case 0x10:
      sub_10035F250((char *)a1);
      break;
    case 0x11:
      sub_10035F314((uint64_t)a1);
      break;
    case 0x12:
      sub_10035F470((uint64_t)a1);
      break;
    case 0x13:
      sub_10035F5CC((uint64_t)a1);
      break;
    case 0x14:
      sub_10035F6E8((uint64_t)a1);
      break;
    case 0x15:
      sub_10035F818((uint64_t)a1);
      break;
    default:
      strcpy((char *)a1, "ActivityState");
      *((unsigned char *)&a1->__r_.__value_.__s + 23) = 13;
      break;
  }
}

uint64_t sub_1002309DC(uint64_t a1)
{
  sub_1000CD96C((uint64_t)v5);
  std::unique_lock<std::mutex> v2 = sub_10002986C(v5, (uint64_t)"VideoFrameInputEvent(", 21);
  int v3 = sub_10035E7C8(v2, *(unsigned __int8 *)(a1 + 8));
  sub_10002986C(v3, (uint64_t)")", 1);
  std::stringbuf::str();
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100230B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000CDB10((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100230B48(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2 + 72;
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(result + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 40);
  if (!v3)
  {
    uint64_t v2 = result + 72;
    goto LABEL_5;
  }
  if (v3 != a2 + 48)
  {
    *(void *)(result + 72) = v3;
LABEL_5:
    *(void *)uint64_t v2 = 0;
    return result;
  }
  *(void *)(result + 72) = result + 48;
  return (*(uint64_t (**)(void))(**(void **)v2 + 24))();
}

uint64_t sub_100230BC8(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  uint64_t result = *(void *)(a1 + 72);
  if (result == v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

uint64_t sub_100230C2C(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = v1[5];
  if (!*(unsigned char *)(v2 + 176))
  {
    char v6 = v1 + 6;
    unint64_t v7 = *(void *)(v2 + 160);
    if (v7 >= *(void *)(v2 + 168))
    {
      uint64_t result = sub_100230D3C((uint64_t *)(v2 + 152), v6);
      *(void *)(v2 + 16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
      return result;
    }
    uint64_t v10 = (void *)v1[9];
    uint64_t v8 = v1 + 9;
    long long v9 = v10;
    if (v10)
    {
      if (v9 == v6)
      {
        *(void *)(v7 + 24) = v7;
        (*(void (**)(void, unint64_t))(*(void *)*v8 + 24))(*v8, v7);
        uint64_t result = v7 + 32;
        *(void *)(v2 + 16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v7 + 32;
        return result;
      }
      *(void *)(v7 + 24) = v9;
    }
    else
    {
      uint64_t v8 = (void *)(v7 + 24);
    }
    *uint64_t v8 = 0;
    uint64_t result = v7 + 32;
    *(void *)(v2 + 16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v7 + 32;
    return result;
  }
  uint64_t v3 = v1[9];
  if (!v3) {
    sub_10008F39C();
  }
  int v4 = *(uint64_t (**)(void))(*(void *)v3 + 48);

  return v4();
}

uint64_t sub_100230D3C(uint64_t *a1, void *a2)
{
  int v4 = (void *)*a1;
  uint64_t v3 = (void *)a1[1];
  uint64_t v5 = ((uint64_t)v3 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_1000A9108();
  }
  uint64_t v8 = a1[2] - (void)v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_1000A6A10();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
    uint64_t v11 = (uint64_t)&v10[32 * v5];
    uint64_t v12 = a2 + 3;
    uint64_t v13 = (void *)a2[3];
    if (v13)
    {
LABEL_10:
      if (v13 == a2)
      {
        *(void *)(v11 + 24) = v11;
        (*(void (**)(void *, uint64_t))(*a2 + 24))(a2, v11);
        int v4 = (void *)*a1;
        uint64_t v3 = (void *)a1[1];
        uint64_t v14 = v11;
        if (v3 == (void *)*a1) {
          goto LABEL_26;
        }
      }
      else
      {
        *(void *)(v11 + 24) = v13;
        *uint64_t v12 = 0;
        uint64_t v14 = v11;
        if (v3 == v4) {
          goto LABEL_26;
        }
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 32 * v5;
    uint64_t v12 = a2 + 3;
    uint64_t v13 = (void *)a2[3];
    if (v13) {
      goto LABEL_10;
    }
  }
  *(void *)(v11 + 24) = 0;
  uint64_t v14 = v11;
  if (v3 != v4)
  {
LABEL_17:
    uint64_t v15 = 0;
    int v16 = v3;
    while (1)
    {
      uint64_t v18 = v11 + v15 * 8;
      uint64_t v19 = &v3[v15];
      uint64_t v20 = (void *)v3[v15 - 1];
      if (v20)
      {
        if (v19 - 4 == v20)
        {
          *(void *)(v18 - 8) = v18 - 32;
          (*(void (**)(void))(*(void *)*(v19 - 1) + 24))(*(v19 - 1));
          goto LABEL_20;
        }
        std::string::size_type v17 = v16 - 1;
        *(void *)(v18 - 8) = v20;
      }
      else
      {
        std::string::size_type v17 = (void *)(v18 - 8);
      }
      *std::string::size_type v17 = 0;
LABEL_20:
      v16 -= 4;
      v15 -= 4;
      if (&v3[v15] == v4)
      {
        uint64_t v14 = v11 + v15 * 8;
        break;
      }
    }
  }
LABEL_26:
  uint64_t v21 = &v10[32 * v9];
  std::string v23 = (char *)*a1;
  std::string::size_type v22 = (char *)a1[1];
  uint64_t v24 = v11 + 32;
  *a1 = v14;
  a1[1] = v11 + 32;
  a1[2] = (uint64_t)v21;
  if (v22 != v23)
  {
    uint64_t v25 = v22 - 32;
    uint64_t v26 = v22 - 32;
    do
    {
      long long v28 = (char *)*((void *)v26 + 3);
      if (v26 == v28)
      {
        (*(void (**)(char *))(*(void *)v26 + 32))(v26);
      }
      else if (v28)
      {
        (*(void (**)(char *))(*(void *)v28 + 40))(v28);
      }
      v25 -= 32;
      BOOL v27 = v26 == v23;
      v26 -= 32;
    }
    while (!v27);
  }
  if (v23) {
    operator delete(v23);
  }
  return v24;
}

uint64_t sub_100230FB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 40);
  return result;
}

uint64_t sub_100230FC0(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40);
  *(unsigned char *)(v1 + 176) = 1;
  uint64_t v2 = *(void *)(v1 + 152);
  for (uint64_t i = *(void *)(v1 + 160); v2 != i; v2 += 32)
  {
    uint64_t v4 = *(void *)(v2 + 24);
    if (!v4) {
      sub_10008F39C();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  }
  return result;
}

__n128 sub_100231038(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
  return result;
}

uint64_t sub_100231048(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(*(void *)(result + 32) + 8) + 48);
  **(unsigned char **)(*(void *)(*(void *)(result + 32) + 8) + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *v1 == v1[1];
  return result;
}

std::string *sub_100231068@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10023109C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002310B8(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = (void **)(result + 8);
  int v4 = *(_DWORD *)result;
  switch(v4 ^ (v4 >> 31))
  {
    case 1:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 40))(*a2, v3);
      break;
    case 2:
      __n128 result = (*(uint64_t (**)(uint64_t, void))(*(void *)*a2 + 48))(*a2, *(unsigned int *)(result + 16));
      break;
    case 3:
      if (v4 < 0) {
        __n128 result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)*a2 + 56))(*a2, *v3, *((unsigned int *)*v3 + 24));
      }
      else {
        __n128 result = (*(uint64_t (**)(uint64_t, void **, void))(*(void *)*a2 + 56))(*a2, v3, *(unsigned int *)(result + 104));
      }
      break;
    case 4:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 64))(*a2, v3);
      break;
    case 5:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 72))(*a2, v3);
      break;
    case 6:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 88))(*a2, v3);
      break;
    case 7:
      return result;
    case 8:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      __n128 result = sub_1002316BC((uint64_t)v3, *a2);
      break;
    case 9:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 120))(*a2, v3);
      break;
    case 0xA:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 128))(*a2, v3);
      break;
    case 0xB:
      __n128 result = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)*a2 + 16))(*a2, *(void *)(result + 8), *(unsigned int *)(result + 16), result + 24);
      break;
    case 0xC:
      if (v4 < 0) {
        __n128 result = (*(uint64_t (**)(uint64_t, void, void *, void *))(*(void *)*a2 + 168))(*a2, **v3, *v3 + 3, *v3 + 1);
      }
      else {
        __n128 result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)*a2 + 168))(*a2, *(void *)(result + 8), result + 32, result + 16);
      }
      break;
    case 0xD:
      __n128 result = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)*a2 + 160))(*a2, *(void *)(result + 8), *(unsigned __int8 *)(result + 16), *(void *)(result + 24));
      break;
    case 0xE:
      __n128 result = (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)*a2 + 176))(*a2, *(void *)(result + 8), *(void *)(result + 16), result + 32);
      break;
    case 0xF:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      __n128 result = (*(uint64_t (**)(uint64_t, void **))(*(void *)*a2 + 184))(*a2, v3);
      break;
    case 0x10:
      __n128 result = (*(uint64_t (**)(uint64_t, void, uint64_t, double, double, double))(*(void *)*a2 + 192))(*a2, *(void *)(result + 8), result + 16, *(double *)(result + 40), *(double *)(result + 48), *(double *)(result + 56));
      break;
    case 0x11:
      if (v4 < 0) {
        __n128 result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)*a2 + 200))(*a2, *v3 + 2, *v3 + 1);
      }
      else {
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a2 + 200))(*a2, result + 24, result + 16);
      }
      break;
    case 0x12:
      if (v4 < 0) {
        __n128 result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)*a2 + 208))(*a2, *v3 + 14, *v3 + 1);
      }
      else {
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a2 + 208))(*a2, result + 120, result + 16);
      }
      break;
    case 0x13:
      if (v4 < 0) {
        __n128 result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)*a2 + 216))(*a2, *v3 + 10, *v3 + 1);
      }
      else {
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a2 + 216))(*a2, result + 88, result + 16);
      }
      break;
    case 0x14:
      if (v4 < 0) {
        uint64_t v3 = (void **)*v3;
      }
      __n128 result = sub_100231AAC((uint64_t)v3, *a2);
      break;
    case 0x15:
      if (v4 < 0) {
        __n128 result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)*a2 + 240))(*a2, *v3 + 13, *v3 + 1);
      }
      else {
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)*a2 + 240))(*a2, result + 112, result + 16);
      }
      break;
    default:
      if (v4 < 0) {
        __n128 result = (*(uint64_t (**)(uint64_t, void *))(*(void *)*a2 + 32))(*a2, *v3 + 1);
      }
      else {
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)*a2 + 32))(*a2, result + 16);
      }
      break;
  }
  return result;
}

uint64_t sub_1002316BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 96;
  switch(*(_DWORD *)(a1 + 96))
  {
    case 2:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 3:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 4:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 136);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 0xA:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 96);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 0xC:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 0xD:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 144);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    case 0xF:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 112);
      uint64_t v5 = a2;
      uint64_t v6 = a1;
      break;
    default:
      __cxa_allocate_exception(0x40uLL);
      sub_10015EA8C(v2, &v11);
      uint64_t v8 = std::string::insert(&v11, 0, "Illegal state - how is the thrift type enum = ");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v12.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(&v13, &v12);
      v13.__vftable = (std::runtime_error_vtbl *)&off_100453860;
      sub_10018E868((uint64_t)v10);
      sub_1000D1698(&v13, (uint64_t)"void InertialInputEvent::applyTo(Receiver *) const [Receiver = LocalizerInputEventChronology]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_input_event.h", 288, (uint64_t)v10);
  }
  return v4(v5, v6);
}

void sub_1002319E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v23 - 48));
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100231AAC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 2)
  {
    uint64_t v9 = a1 + 176;
    uint64_t v4 = a1 + 16;
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 232);
    uint64_t v6 = a2;
    uint64_t v7 = v9;
  }
  else
  {
    if (v2 != 1)
    {
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v11, "Unsupported ProviderPositionDataFlow");
      std::runtime_error::runtime_error(&v12, &v11);
      v12.__vftable = (std::runtime_error_vtbl *)&off_100453630;
      sub_10018E868((uint64_t)v10);
      sub_1000CC8F4(&v12, (uint64_t)"void CLProviderPositionInputEvent::applyTo(Receiver *) const [Receiver = LocalizerInputEventChronology]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_input_event.h", 996, (uint64_t)v10);
    }
    uint64_t v3 = a1 + 176;
    uint64_t v4 = a1 + 16;
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 224);
    uint64_t v6 = a2;
    uint64_t v7 = v3;
  }
  return v5(v6, v7, v4);
}

void sub_100231C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_100231C94()
{
}

void *sub_100231CA8()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_100461EB0;
  return result;
}

void sub_100231CE0(uint64_t a1, void *a2)
{
  *a2 = off_100461EB0;
}

uint64_t sub_100231D08()
{
  return 0;
}

uint64_t sub_100231D10(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN14EventGenerator15applyInRealTimeEvE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN14EventGenerator15applyInRealTimeEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN14EventGenerator15applyInRealTimeEvE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN14EventGenerator15applyInRealTimeEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_100231D80()
{
}

__n128 sub_100231D8C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
  return result;
}

uint64_t sub_100231D9C(uint64_t result)
{
  **(void **)(*(void *)(*(void *)(result + 32) + 8) + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = (uint64_t)(*(void *)(*(void *)(*(void *)(*(void *)(result + 32) + 8) + 48)
                                                                                          + 8)
                                                                              - **(void **)(*(void *)(*(void *)(result + 32) + 8)
                                                                                            + 48)) >> 4;
  return result;
}

__n128 sub_100231DBC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
  return result;
}

void sub_100231DD4(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  int v2 = (uint64_t *)v1[5];
  unint64_t v3 = (_DWORD **)*v2;
  if (*v2 != v2[1])
  {
    do
    {
      uint64_t v4 = (void *)v1[6];
      if ((uint64_t)sub_100017318(*v3) >= *v4) {
        break;
      }
      uint64_t v5 = v1[7];
      uint64_t v6 = *(void **)(v5 + 8);
      if ((unint64_t)v6 >= *(void *)(v5 + 16))
      {
        uint64_t v8 = sub_100017420(v1[7], v3);
      }
      else
      {
        uint64_t v7 = (atomic_ullong *)v3[1];
        *uint64_t v6 = *v3;
        v6[1] = v7;
        if (v7) {
          atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = v6 + 2;
      }
      *(void *)(v5 + 8) = v8;
      sub_100231EF8(*v2, v2[1], (uint64_t)&v11, (v2[1] - *v2) >> 4);
      uint64_t v9 = v2[1];
      uint64_t v10 = *(std::__shared_weak_count **)(v9 - 8);
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v2[1] = v9 - 16;
      unint64_t v3 = (_DWORD **)*v2;
    }
    while (*v2 != v9 - 16);
  }
}

void sub_100231EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = 0;
    long long v23 = *(_OWORD *)a1;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    int64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = a1;
    do
    {
      uint64_t v9 = v8;
      v8 += 16 * v6 + 16;
      uint64_t v10 = 2 * v6;
      uint64_t v6 = (2 * v6) | 1;
      uint64_t v11 = v10 + 2;
      if (v10 + 2 < a4)
      {
        std::runtime_error v12 = sub_100017318(*(_DWORD **)v8);
        if ((uint64_t)v12 >= (uint64_t)sub_100017318(*(_DWORD **)(v8 + 16)))
        {
          v8 += 16;
          uint64_t v6 = v11;
        }
      }
      long long v13 = *(_OWORD *)v8;
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      uint64_t v14 = *(std::__shared_weak_count **)(v9 + 8);
      *(_OWORD *)uint64_t v9 = v13;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    while (v6 <= v7);
    if (v8 == a2 - 16)
    {
      long long v19 = v23;
      long long v24 = 0uLL;
      uint64_t v20 = *(std::__shared_weak_count **)(v8 + 8);
      *(_OWORD *)uint64_t v8 = v19;
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    else
    {
      long long v15 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      int v16 = *(std::__shared_weak_count **)(v8 + 8);
      *(_OWORD *)uint64_t v8 = v15;
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      long long v17 = v23;
      long long v24 = 0uLL;
      uint64_t v18 = *(std::__shared_weak_count **)(a2 - 8);
      *(_OWORD *)(a2 - 16) = v17;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      sub_100017138(a1, v8 + 16, a3, (v8 + 16 - a1) >> 4);
    }
    if (*((void *)&v24 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(void))(**((void **)&v24 + 1) + 16))(*((void *)&v24 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
  }
}

void sub_100232194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E11EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002321A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E11EC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1002321BC(uint64_t *a1, int **a2)
{
  unsigned int v3 = (**a2 ^ (**a2 >> 31)) - 11;
  if (v3 >= 2)
  {
    uint64_t v5 = sub_100017318(*a2);
    uint64_t v6 = *a1;
    if (qword_10047BED8 == -1)
    {
      int64_t v7 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return v3 < 2;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100461DE0);
      int64_t v7 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return v3 < 2;
      }
    }
    sub_100230804(&__p, *a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315394;
    std::runtime_error v12 = p_p;
    __int16 v13 = 2048;
    uint64_t v14 = (uint64_t)v5 - v6 - 100000000;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Dropping event '%s' from %lld ns (in the past), too out-of-sync", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v3 < 2;
}

__n128 sub_100232334(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
  return result;
}

void sub_10023234C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  int v2 = **(void ***)(v1 + 40);
  if (**(void ***)(v1 + 48) != v2)
  {
    unsigned int v3 = *(uint64_t **)(v1 + 56);
    do
    {
      uint64_t v5 = (void *)v3[1];
      if ((unint64_t)v5 >= v3[2])
      {
        uint64_t v4 = sub_100017420((uint64_t)v3, v2);
      }
      else
      {
        uint64_t v6 = v2[1];
        *uint64_t v5 = *v2;
        v5[1] = v6;
        if (v6) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v4 = v5 + 2;
      }
      v3[1] = (uint64_t)v4;
      sub_100017138(*v3, (uint64_t)v4, (uint64_t)&v7, ((uint64_t)v4 - *v3) >> 4);
      v2 += 2;
    }
    while (v2 != **(void ***)(v1 + 48));
  }
}

uint64_t sub_100232404(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 40);
  return result;
}

void sub_100232414(uint64_t a1)
{
  uint64_t v1 = *(char ***)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  int v2 = *v1;
  unsigned int v3 = v1[1];
  v1[1] = 0;
  v1[2] = 0;
  void *v1 = 0;
  if (v2)
  {
    for (; v3 != v2; v3 -= 16)
    {
      uint64_t v4 = (std::__shared_weak_count *)*((void *)v3 - 1);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete(v2);
  }
}

__n128 sub_1002324DC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
  return result;
}

uint64_t sub_1002324EC(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 8);
  unsigned int v3 = *(uint64_t **)(v1 + 40);
  int v2 = *(void **)(v1 + 48);
  if (*v3 == v3[1]) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *v3;
  }
  *int v2 = v4;
  return result;
}

__n128 sub_10023250C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
  return result;
}

void sub_100232524(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8);
  int v2 = (uint64_t *)v1[5];
  unsigned int v3 = (_DWORD **)*v2;
  if (*v2 != v2[1])
  {
    while (1)
    {
      uint64_t v4 = (uint64_t *)v1[6];
      if (*v4 < (uint64_t)sub_100017318(*v3)) {
        break;
      }
      uint64_t v5 = v1[7];
      uint64_t v6 = *(void **)(v5 + 8);
      if ((unint64_t)v6 >= *(void *)(v5 + 16))
      {
        uint64_t v8 = sub_100017420(v1[7], v3);
      }
      else
      {
        *uint64_t v6 = *v3;
        char v7 = (atomic_ullong *)v3[1];
        v6[1] = v7;
        if (v7) {
          atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = v6 + 2;
      }
      *(void *)(v5 + 8) = v8;
      sub_100231EF8(*v2, v2[1], (uint64_t)&v14, (v2[1] - *v2) >> 4);
      uint64_t v9 = v2[1];
      uint64_t v10 = *(std::__shared_weak_count **)(v9 - 8);
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v2[1] = v9 - 16;
      unsigned int v3 = (_DWORD **)*v2;
      if (*v2 == v9 - 16) {
        return;
      }
    }
    if (qword_10047BED8 == -1)
    {
      uint64_t v11 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100461DE0);
      uint64_t v11 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return;
      }
    }
    std::runtime_error v12 = sub_100017318(*v3);
    uint64_t v13 = *v4;
    int v14 = 134218240;
    long long v15 = v12;
    __int16 v16 = 2048;
    uint64_t v17 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Next %lld is after %lld, we're done", (uint8_t *)&v14, 0x16u);
  }
}

void sub_100232738()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002327B0()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t *sub_100232828(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  sub_1002645B4(a3, a1);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  char v7 = *(const void **)a2;
  int64_t v8 = *(void *)(a2 + 8) - *(void *)a2;
  if (v8)
  {
    if (v8 < 0) {
      sub_1000A9108();
    }
    uint64_t v9 = (char *)operator new(v8);
    a1[3] = (uint64_t)v9;
    a1[4] = (uint64_t)v9;
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    a1[5] = (uint64_t)v10;
    memcpy(v9, v7, v8);
    a1[4] = (uint64_t)v10;
    unint64_t v11 = (unint64_t)v8 >> 3;
  }
  else
  {
    unint64_t v11 = 0;
  }
  a1[6] = a4;
  if (0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4) != v11)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v13);
  }
  return a1;
}

void sub_100232950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    uint64_t v17 = *v15;
    if (!*v15)
    {
LABEL_3:
      sub_1002329B0((void **)v14);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v17 = *v15;
    if (!*v15) {
      goto LABEL_3;
    }
  }
  *(void *)(v14 + 32) = v17;
  operator delete(v17);
  sub_1002329B0((void **)v14);
  _Unwind_Resume(a1);
}

void **sub_1002329B0(void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    unsigned int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 168;
      do
      {
        int v7 = *((_DWORD *)v3 - 44);
        if (v7 == v7 >> 31)
        {
          if (*(v3 - 128)) {
            *(v3 - 128) = 0;
          }
        }
        else
        {
          uint64_t v6 = *((void *)v3 - 21);
          if (v7 < 0)
          {
            if (v6) {
              (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
            }
          }
          else
          {
            (*(void (**)(char *))v6)(v3 - 168);
          }
        }
        v3 -= 208;
        v5 -= 208;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_100232A98(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v7 = sub_100233E30(a1, a3);
  v7[3] = 0;
  v7[4] = 0;
  void v7[5] = 0;
  int64_t v8 = *(const void **)a2;
  int64_t v9 = *(void *)(a2 + 8) - *(void *)a2;
  if (v9)
  {
    if (v9 < 0) {
      sub_1000A9108();
    }
    uint64_t v10 = (char *)operator new(v9);
    a1[3] = v10;
    a1[4] = v10;
    unint64_t v11 = &v10[8 * (v9 >> 3)];
    a1[5] = v11;
    memcpy(v10, v8, v9);
    a1[4] = v11;
    unint64_t v12 = (unint64_t)v9 >> 3;
  }
  else
  {
    unint64_t v12 = 0;
  }
  a1[6] = a4;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 4) != v12)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v14);
  }
  return a1;
}

void sub_100232BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    uint64_t v17 = *v15;
    if (!*v15)
    {
LABEL_3:
      sub_1002329B0((void **)v14);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v17 = *v15;
    if (!*v15) {
      goto LABEL_3;
    }
  }
  *(void *)(v14 + 32) = v17;
  operator delete(v17);
  sub_1002329B0((void **)v14);
  _Unwind_Resume(a1);
}

void sub_100232C20(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)long long v88 = 0u;
  *(_OWORD *)uint64_t v89 = 0u;
  int v90 = 1065353216;
  uint64_t v3 = *a1;
  if (a1[1] == *a1)
  {
    *(_OWORD *)a2 = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_DWORD *)(a2 + 32) = 1065353216;
    goto LABEL_95;
  }
  unint64_t v5 = 0;
  uint64_t v6 = (uint64_t *)&__p[1];
LABEL_7:
  uint64_t v8 = a1[3];
  if (v5 < (a1[4] - v8) >> 3)
  {
    uint64_t v9 = *(void *)(v8 + 8 * v5);
    uint64_t v10 = (_DWORD *)(v3 + 208 * v5);
    int v87 = 0;
    unint64_t v12 = v10 + 8;
    int v11 = v10[8];
    if (v11 == v11 >> 31)
    {
      int v13 = *(_DWORD *)(v3 + 208 * v5 + 120);
      int v87 = v13;
      unint64_t v14 = (unint64_t)v88[1];
      if (!v88[1]) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v15 = v3 + 208 * v5;
      uint64_t v18 = *(void *)(v15 + 40);
      uint64_t v16 = v15 + 40;
      uint64_t v17 = v18;
      if (v11 >= 0) {
        uint64_t v19 = v16;
      }
      else {
        uint64_t v19 = v17;
      }
      int v13 = *(_DWORD *)(v19 + 96) + 2402;
      int v87 = v13;
      unint64_t v14 = (unint64_t)v88[1];
      if (!v88[1]) {
        goto LABEL_34;
      }
    }
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      unint64_t v21 = v13;
      if (v14 <= v13) {
        unint64_t v21 = v13 % v14;
      }
    }
    else
    {
      unint64_t v21 = (v14 - 1) & v13;
    }
    std::string::size_type v22 = (uint64_t **)*((void *)v88[0] + v21);
    if (!v22 || (long long v23 = *v22) == 0)
    {
LABEL_34:
      *(_OWORD *)std::string __p = 0u;
      long long v86 = 0u;
      *(_OWORD *)uint64_t v84 = 0u;
      BOOL v27 = operator new(8uLL);
      *BOOL v27 = v9;
      v84[1] = v27 + 1;
      __p[0] = v27 + 1;
      v84[0] = v27;
      *(void *)&long long v86 = sub_100234354(v6, v3 + 208 * v5);
      sub_1002349E8((uint64_t)v88, &v87, &v87, (uint64_t)v84);
      if ((v28 & 1) == 0)
      {
        sub_1000AE4B0(v92, "");
        sub_100234F6C(".find() didn't match so this should be a clean insertion", &v94);
        sub_10016A2C4((uint64_t)v92, (uint64_t)&v94, 1);
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v94.__r_.__value_.__l.__data_);
        }
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        sub_1000D11E0((uint64_t)&v91);
      }
      uint64_t v29 = (char *)__p[1];
      if (__p[1])
      {
        float v30 = (char *)v86;
        float v31 = __p[1];
        if ((void *)v86 != __p[1])
        {
          uint64_t v32 = v86 - 168;
          do
          {
            int v34 = *((_DWORD *)v30 - 44);
            if (v34 == v34 >> 31)
            {
              if (*(v30 - 128)) {
                *(v30 - 128) = 0;
              }
            }
            else
            {
              uint64_t v33 = *((void *)v30 - 21);
              if (v34 < 0)
              {
                if (v33) {
                  (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
                }
              }
              else
              {
                (*(void (**)(char *))v33)(v30 - 168);
              }
            }
            v30 -= 208;
            v32 -= 208;
          }
          while (v30 != v29);
          float v31 = __p[1];
        }
        *(void *)&long long v86 = v29;
        operator delete(v31);
      }
      if (v84[0])
      {
        v84[1] = v84[0];
        operator delete(v84[0]);
      }
      goto LABEL_6;
    }
    if (v20.u32[0] < 2uLL)
    {
      unint64_t v24 = v14 - 1;
      while (1)
      {
        uint64_t v26 = v23[1];
        if (v26 == v13)
        {
          if (*((_DWORD *)v23 + 4) == v13) {
            goto LABEL_50;
          }
        }
        else if ((v26 & v24) != v21)
        {
          goto LABEL_34;
        }
        long long v23 = (uint64_t *)*v23;
        if (!v23) {
          goto LABEL_34;
        }
      }
    }
    while (1)
    {
      unint64_t v25 = v23[1];
      if (v25 == v13)
      {
        if (*((_DWORD *)v23 + 4) == v13)
        {
LABEL_50:
          unint64_t v36 = (char *)v23[4];
          unint64_t v35 = v23[5];
          if ((unint64_t)v36 < v35)
          {
            *(void *)unint64_t v36 = v9;
            BOOL v37 = v36 + 8;
            goto LABEL_72;
          }
          uint64_t v83 = v6;
          int8x8_t v38 = (char *)v23[3];
          int64_t v39 = v36 - v38;
          uint64_t v40 = (v36 - v38) >> 3;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61) {
            sub_1000A9108();
          }
          uint64_t v42 = v35 - (void)v38;
          if (v42 >> 2 > v41) {
            unint64_t v41 = v42 >> 2;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (!v43)
          {
            int64_t v45 = 0;
            char v46 = (void *)(8 * v40);
            *(void *)(8 * v4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v9;
            uint64_t v47 = 8 * v40 + 8;
            if (v36 != v38) {
              goto LABEL_61;
            }
LABEL_64:
            uint64_t v6 = v83;
            goto LABEL_70;
          }
          if (v43 >> 61) {
            sub_1000A6A10();
          }
          unint64_t v44 = v43;
          int64_t v45 = operator new(8 * v43);
          unint64_t v43 = v44;
          uint64_t v40 = (v36 - v38) >> 3;
          int64_t v39 = v36 - v38;
          char v46 = &v45[8 * v40];
          void *v46 = v9;
          uint64_t v47 = (uint64_t)(v46 + 1);
          if (v36 == v38) {
            goto LABEL_64;
          }
LABEL_61:
          unint64_t v48 = v36 - 8 - v38;
          if (v48 < 0x58)
          {
            uint64_t v6 = v83;
            goto LABEL_69;
          }
          uint64_t v6 = v83;
          if ((unint64_t)(v36 - v45 - v39) < 0x20) {
            goto LABEL_118;
          }
          uint64_t v49 = (v48 >> 3) + 1;
          uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v51 = &v36[-v50];
          char v46 = (void *)((char *)v46 - v50);
          char v52 = &v45[8 * v40 - 16];
          BOOL v53 = v36 - 16;
          uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v55 = *(_OWORD *)v53;
            *(v52 - 1) = *((_OWORD *)v53 - 1);
            *char v52 = v55;
            v52 -= 2;
            v53 -= 32;
            v54 -= 4;
          }
          while (v54);
          unint64_t v36 = v51;
          if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_118:
            do
            {
LABEL_69:
              uint64_t v56 = *((void *)v36 - 1);
              v36 -= 8;
              *--char v46 = v56;
            }
            while (v36 != v38);
          }
LABEL_70:
          v23[3] = (uint64_t)v46;
          v23[4] = v47;
          v23[5] = (uint64_t)&v45[8 * v43];
          if (v38)
          {
            BOOL v37 = (void *)v47;
            operator delete(v38);
LABEL_72:
            uint64_t v47 = (uint64_t)v37;
          }
          v23[4] = v47;
          unint64_t v57 = v23[7];
          if (v57 >= v23[8])
          {
            uint64_t v7 = sub_100234354(v23 + 6, (uint64_t)v10);
          }
          else
          {
            uint64_t v58 = (void *)(v57 + 8);
            uint64_t v60 = v10 + 2;
            int v59 = *v10;
            if (v59 == v59 >> 31)
            {
              *uint64_t v58 = *v60;
              int v61 = v59;
            }
            else
            {
              long long v62 = *(_OWORD *)v60;
              *(_DWORD *)(v57 + 24) = v10[6];
              *(_OWORD *)uint64_t v58 = v62;
              int v61 = *v10;
              int v59 = (int)*v10 >> 31;
            }
            *(_DWORD *)unint64_t v57 = v61 ^ v59;
            int v63 = *v12;
            float64x2x2_t v64 = (int *)(v3 + 208 * v5 + 40);
            if (v63 == v63 >> 31)
            {
              long long v65 = (void *)(v57 + 48);
              int v66 = *v64;
              uint64_t v67 = (void *)(v3 + 208 * v5 + 48);
              if (v66 == v66 >> 31)
              {
                *long long v65 = *v67;
                int v68 = v66;
              }
              else
              {
                long long v70 = *(_OWORD *)v67;
                *(_DWORD *)(v57 + 64) = *(_DWORD *)(v3 + 208 * v5 + 64);
                *(_OWORD *)long long v65 = v70;
                int v68 = *v64;
                int v66 = v68 >> 31;
              }
              *(_DWORD *)(v57 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v68 ^ v66;
              uint64_t v71 = v3 + 208 * v5;
              *(void *)(v57 + 72) = *(void *)(v71 + 72);
              *(unsigned char *)(v57 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
              if (*(unsigned char *)(v71 + 80))
              {
                *(_DWORD *)(v57 + 84) = *(_DWORD *)(v3 + 208 * v5 + 84);
                *(unsigned char *)(v57 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
              }
              uint64_t v72 = v3 + 208 * v5;
              long long v73 = *(_OWORD *)(v72 + 88);
              long long v74 = *(_OWORD *)(v72 + 104);
              *(_DWORD *)(v57 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(v72 + 120);
              *(_OWORD *)(v57 + 104) = v74;
              *(_OWORD *)(v57 + 88) = v73;
            }
            else
            {
              if (v63 >= 0) {
                uint64_t v69 = v3 + 208 * v5 + 40;
              }
              else {
                uint64_t v69 = *(void *)v64;
              }
              sub_1001AC878(v57 + 40, v69);
            }
            *(_DWORD *)(v57 + 32) = *v12 ^ (*v12 >> 31);
            uint64_t v7 = v57 + 208;
            v23[7] = v57 + 208;
          }
          v23[7] = v7;
LABEL_6:
          ++v5;
          uint64_t v3 = *a1;
          if (v5 >= 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 4)) {
            break;
          }
          goto LABEL_7;
        }
      }
      else
      {
        if (v25 >= v14) {
          v25 %= v14;
        }
        if (v25 != v21) {
          goto LABEL_34;
        }
      }
      long long v23 = (uint64_t *)*v23;
      if (!v23) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v75 = v89[0];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  for (*(_DWORD *)(a2 + 32) = 1065353216; v75; uint64_t v75 = *(void **)v75)
  {
    sub_100232A98(v84, (uint64_t)v75 + 24, (uint64_t *)v75 + 6, a1[6]);
    sub_1002350D4(a2, (int *)v75 + 4, (_DWORD *)v75 + 4, (long long *)v84);
    if (__p[1])
    {
      *(void **)&long long v86 = __p[1];
      operator delete(__p[1]);
    }
    v78 = (char *)v84[0];
    if (v84[0])
    {
      uint64_t v79 = (char *)v84[1];
      v77 = v84[0];
      if (v84[1] != v84[0])
      {
        long long v80 = (char *)v84[1] - 168;
        do
        {
          int v82 = *((_DWORD *)v79 - 44);
          if (v82 == v82 >> 31)
          {
            if (*(v79 - 128)) {
              *(v79 - 128) = 0;
            }
          }
          else
          {
            uint64_t v81 = *((void *)v79 - 21);
            if (v82 < 0)
            {
              if (v81) {
                (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
              }
            }
            else
            {
              (*(void (**)(char *))v81)(v79 - 168);
            }
          }
          v79 -= 208;
          v80 -= 208;
        }
        while (v79 != v78);
        v77 = v84[0];
      }
      v84[1] = v78;
      operator delete(v77);
    }
  }
LABEL_95:
  sub_100234238((int)v88, (void *)v89[0]);
  uint64_t v76 = v88[0];
  v88[0] = 0;
  if (v76) {
    operator delete(v76);
  }
}

void sub_1002333A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0)
  {
    operator delete(__p);
    sub_100233488((uint64_t)&a13);
    sub_1002336AC((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  sub_100233488((uint64_t)&a13);
  sub_1002336AC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100233488(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 168;
      do
      {
        int v7 = *(_DWORD *)(v3 - 176);
        if (v7 == v7 >> 31)
        {
          if (*(unsigned char *)(v3 - 128)) {
            *(unsigned char *)(v3 - 128) = 0;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v3 - 168);
          if (v7 < 0)
          {
            if (v6) {
              (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
            }
          }
          else
          {
            (*(void (**)(uint64_t))v6)(v3 - 168);
          }
        }
        v3 -= 208;
        v5 -= 208;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void **sub_10023357C(void **a1)
{
  uint64_t v2 = a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (char *)*a1;
  if (*a1)
  {
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = *a1;
    if (v4 != v3)
    {
      uint64_t v6 = v4 - 168;
      do
      {
        int v8 = *((_DWORD *)v4 - 44);
        if (v8 == v8 >> 31)
        {
          if (*(v4 - 128)) {
            *(v4 - 128) = 0;
          }
        }
        else
        {
          uint64_t v7 = *((void *)v4 - 21);
          if (v8 < 0)
          {
            if (v7) {
              (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
            }
          }
          else
          {
            (*(void (**)(char *))v7)(v4 - 168);
          }
        }
        v4 -= 208;
        v6 -= 208;
      }
      while (v4 != v3);
      uint64_t v5 = *a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_100233670(uint64_t a1)
{
  sub_100234FBC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1002336AC(uint64_t a1)
{
  sub_100234238(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1002336E8(uint64_t *a1@<X0>, void *a2@<X8>)
{
  std::string __p = 0;
  uint64_t v54 = 0;
  long long v55 = 0;
  unint64_t v56 = 0;
  char v52 = 0;
  BOOL v53 = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      if (!sub_100233B24(v2))
      {
        int v8 = v55;
        if ((unint64_t)v55 >= v56)
        {
          uint64_t v23 = sub_100234354((uint64_t *)&v54, v2);
        }
        else
        {
          uint64_t v9 = v55 + 2;
          int v11 = (void *)(v2 + 8);
          int v10 = *(_DWORD *)v2;
          if (v10 == v10 >> 31)
          {
            *uint64_t v9 = *v11;
            int v12 = v10;
          }
          else
          {
            long long v24 = *(_OWORD *)v11;
            v55[6] = *(_DWORD *)(v2 + 24);
            *(_OWORD *)uint64_t v9 = v24;
            int v12 = *(_DWORD *)v2;
            int v10 = *(int *)v2 >> 31;
          }
          *int v8 = v12 ^ v10;
          int v25 = *(_DWORD *)(v2 + 32);
          uint64_t v26 = (int *)(v2 + 40);
          if (v25 == v25 >> 31)
          {
            BOOL v27 = v8 + 12;
            int v28 = *(_DWORD *)(v2 + 40);
            uint64_t v29 = (void *)(v2 + 48);
            if (v28 == v28 >> 31)
            {
              *BOOL v27 = *v29;
              int v30 = v28;
            }
            else
            {
              long long v41 = *(_OWORD *)v29;
              v8[16] = *(_DWORD *)(v2 + 64);
              *(_OWORD *)BOOL v27 = v41;
              int v30 = *v26;
              int v28 = v30 >> 31;
            }
            v8[10] = v30 ^ v28;
            *((void *)v8 + 9) = *(void *)(v2 + 72);
            *((unsigned char *)v8 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
            if (*(unsigned char *)(v2 + 80))
            {
              v8[21] = *(_DWORD *)(v2 + 84);
              *((unsigned char *)v8 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
            }
            long long v42 = *(_OWORD *)(v2 + 88);
            long long v43 = *(_OWORD *)(v2 + 104);
            v8[30] = *(_DWORD *)(v2 + 120);
            *(_OWORD *)(v8 + 26) = v43;
            *(_OWORD *)(v8 + 22) = v42;
          }
          else
          {
            if (v25 >= 0) {
              uint64_t v31 = v2 + 40;
            }
            else {
              uint64_t v31 = *(void *)v26;
            }
            sub_1001AC878(v8 + 10, v31);
          }
          v8[8] = *(_DWORD *)(v2 + 32) ^ (*(int *)(v2 + 32) >> 31);
          uint64_t v23 = (uint64_t)(v8 + 52);
        }
        long long v55 = (_DWORD *)v23;
        goto LABEL_4;
      }
      int v4 = *(_DWORD *)(v2 + 32);
      if (v4 == v4 >> 31)
      {
        double v5 = *(double *)(v2 + 72);
        uint64_t v7 = v52;
        uint64_t v6 = v53;
        if (v52 >= v53) {
          goto LABEL_16;
        }
      }
      else
      {
        if (v4 >= 0) {
          uint64_t v13 = v2 + 40;
        }
        else {
          uint64_t v13 = *(void *)(v2 + 40);
        }
        double v5 = (double)*(int *)(v13 + 92);
        uint64_t v7 = v52;
        uint64_t v6 = v53;
        if (v52 >= v53)
        {
LABEL_16:
          unint64_t v14 = (double *)__p;
          int64_t v15 = (char *)v7 - (unsigned char *)__p;
          uint64_t v16 = ((char *)v7 - (unsigned char *)__p) >> 3;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 61) {
            sub_1000A9108();
          }
          uint64_t v18 = (char *)v6 - (unsigned char *)__p;
          if (v18 >> 2 > v17) {
            unint64_t v17 = v18 >> 2;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            if (v19 >> 61) {
              sub_1000A6A10();
            }
            uint8x8_t v20 = operator new(8 * v19);
            unint64_t v21 = (double *)&v20[8 * v16];
            *unint64_t v21 = v5;
            uint64_t v22 = (uint64_t)(v21 + 1);
            if (v7 == v14) {
              goto LABEL_42;
            }
LABEL_36:
            unint64_t v32 = (char *)(v7 - 1) - (char *)v14;
            if (v32 < 0x58) {
              goto LABEL_71;
            }
            if ((unint64_t)((char *)v7 - &v20[v15]) < 0x20) {
              goto LABEL_71;
            }
            uint64_t v33 = (v32 >> 3) + 1;
            uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v35 = &v7[v34 / 0xFFFFFFFFFFFFFFF8];
            unint64_t v21 = (double *)((char *)v21 - v34);
            unint64_t v36 = &v20[8 * v16 - 16];
            BOOL v37 = v7 - 2;
            uint64_t v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v39 = *(_OWORD *)v37;
              *(v36 - 1) = *((_OWORD *)v37 - 1);
              *unint64_t v36 = v39;
              v36 -= 2;
              v37 -= 4;
              v38 -= 4;
            }
            while (v38);
            uint64_t v7 = v35;
            if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_71:
              do
              {
                uint64_t v40 = *((void *)v7-- - 1);
                *((void *)v21-- - 1) = v40;
              }
              while (v7 != v14);
            }
          }
          else
          {
            uint8x8_t v20 = 0;
            unint64_t v21 = (double *)(8 * v16);
            *(double *)(8 * v16) = v5;
            uint64_t v22 = 8 * v16 + 8;
            if (v7 != v14) {
              goto LABEL_36;
            }
          }
LABEL_42:
          std::string __p = v21;
          char v52 = (double *)v22;
          BOOL v53 = (double *)&v20[8 * v19];
          if (v14) {
            operator delete(v14);
          }
          char v52 = (double *)v22;
          goto LABEL_4;
        }
      }
      *uint64_t v7 = v5;
      char v52 = v7 + 1;
LABEL_4:
      v2 += 208;
    }
    while (v2 != v3);
  }
  sub_100233D58(a2, (uint64_t *)&v54, (uint64_t)&__p);
  if (__p)
  {
    char v52 = (double *)__p;
    operator delete(__p);
  }
  unint64_t v44 = v54;
  if (v54)
  {
    int64_t v45 = v55;
    char v46 = v54;
    if (v55 != v54)
    {
      uint64_t v47 = v55 - 42;
      do
      {
        int v49 = *(v45 - 44);
        if (v49 == v49 >> 31)
        {
          if (*((unsigned char *)v45 - 128)) {
            *((unsigned char *)v45 - 128) = 0;
          }
        }
        else
        {
          uint64_t v48 = *((void *)v45 - 21);
          if (v49 < 0)
          {
            if (v48) {
              (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
            }
          }
          else
          {
            (*(void (**)(_DWORD *))v48)(v45 - 42);
          }
        }
        v45 -= 52;
        v47 -= 52;
      }
      while (v45 != v44);
      char v46 = v54;
    }
    long long v55 = v44;
    operator delete(v46);
  }
}

void sub_100233AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1002329B0(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100233B24(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == v2 >> 31)
  {
    if (*(unsigned char *)(a1 + 80))
    {
      if ((*(unsigned char *)(a1 + 85) & 0x10) != 0) {
        return 1;
      }
      double v3 = *(double *)(a1 + 72);
      if (v3 >= -120.0 && v3 <= -20.0 && v3 != -1.0 && v3 != 0.0 && v3 != (double)2000000000) {
        return 0;
      }
      if (qword_10047BED8 != -1) {
        dispatch_once(&qword_10047BED8, &stru_100462040);
      }
      int v12 = qword_10047BEE0;
      uint64_t v7 = 1;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
        int v13 = *(_DWORD *)(a1 + 32);
        if (v13 == v13 >> 31)
        {
          double v14 = *(double *)(a1 + 72);
        }
        else
        {
          uint64_t v17 = *(void *)(a1 + 40);
          uint64_t v16 = a1 + 40;
          uint64_t v15 = v17;
          if (v13 >= 0) {
            uint64_t v18 = v16;
          }
          else {
            uint64_t v18 = v15;
          }
          double v14 = (double)*(int *)(v18 + 92);
        }
        int v19 = 134217984;
        double v20 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "WARNING: WiFi chip reported OK RSSI but %f seems invalid", (uint8_t *)&v19, 0xCu);
      }
      return v7;
    }
    double v9 = *(double *)(a1 + 72);
  }
  else
  {
    if (v2 >= 0) {
      uint64_t v8 = a1 + 40;
    }
    else {
      uint64_t v8 = *(void *)(a1 + 40);
    }
    double v9 = (double)*(int *)(v8 + 92);
  }
  BOOL v10 = v9 == 0.0;
  if (v9 == (double)2000000000) {
    BOOL v10 = 1;
  }
  if (v9 == -1.0) {
    BOOL v10 = 1;
  }
  if (v9 > -20.0) {
    BOOL v10 = 1;
  }
  return v9 < -120.0 || v10;
}

uint64_t sub_100233D08(double a1)
{
  BOOL v1 = a1 == 0.0;
  if ((double)2000000000 == a1) {
    BOOL v1 = 1;
  }
  if (a1 == -1.0) {
    BOOL v1 = 1;
  }
  if (a1 > -20.0) {
    BOOL v1 = 1;
  }
  return a1 < -120.0 || v1;
}

void *sub_100233D58(void *a1, uint64_t *a2, uint64_t a3)
{
  double v5 = sub_100233E30(a1, a2);
  v5[3] = 0;
  v5[4] = 0;
  void v5[5] = 0;
  uint64_t v6 = *(const void **)a3;
  int64_t v7 = *(void *)(a3 + 8) - *(void *)a3;
  if (v7)
  {
    if (v7 < 0) {
      sub_1000A9108();
    }
    uint64_t v8 = (char *)operator new(v7);
    a1[3] = v8;
    a1[4] = v8;
    double v9 = &v8[8 * (v7 >> 3)];
    a1[5] = v9;
    memcpy(v8, v6, v7);
    a1[4] = v9;
  }
  return a1;
}

void sub_100233DDC(_Unwind_Exception *a1)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_1003A5364((void **)v1);
  _Unwind_Resume(a1);
}

void sub_100233E00(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void *sub_100233E30(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x4EC4EC4EC4EC4EC5 * (v6 >> 4);
    if (v7 >= 0x13B13B13B13B13CLL) {
      sub_1000A9108();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[208 * v7];
    a1[1] = sub_100233F14(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_100233EE8(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_1003A545C((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100233F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v24 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      BOOL v10 = (void *)(v4 + 8);
      int v12 = (void *)(v6 + 8);
      int v11 = *(_DWORD *)v6;
      if (v11 == v11 >> 31)
      {
        *BOOL v10 = *v12;
        int v13 = v11;
      }
      else
      {
        long long v14 = *(_OWORD *)v12;
        *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
        *(_OWORD *)BOOL v10 = v14;
        int v13 = *(_DWORD *)v6;
        int v11 = *(int *)v6 >> 31;
      }
      *(_DWORD *)uint64_t v4 = v13 ^ v11;
      int v15 = *(_DWORD *)(v6 + 32);
      uint64_t v16 = (int *)(v6 + 40);
      if (v15 == v15 >> 31)
      {
        uint64_t v17 = (void *)(v4 + 48);
        int v18 = *(_DWORD *)(v6 + 40);
        int v19 = (void *)(v6 + 48);
        if (v18 == v18 >> 31)
        {
          *uint64_t v17 = *v19;
          int v20 = v18;
        }
        else
        {
          long long v22 = *(_OWORD *)v19;
          *(_DWORD *)(v4 + 64) = *(_DWORD *)(v6 + 64);
          *(_OWORD *)uint64_t v17 = v22;
          int v20 = *v16;
          int v18 = v20 >> 31;
        }
        *(_DWORD *)(v4 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v20 ^ v18;
        *(void *)(v4 + 72) = *(void *)(v6 + 72);
        *(unsigned char *)(v4 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
        if (*(unsigned char *)(v6 + 80))
        {
          *(_DWORD *)(v4 + 84) = *(_DWORD *)(v6 + 84);
          *(unsigned char *)(v4 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
        }
        long long v7 = *(_OWORD *)(v6 + 88);
        long long v8 = *(_OWORD *)(v6 + 104);
        *(_DWORD *)(v4 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(v6 + 120);
        *(_OWORD *)(v4 + 104) = v8;
        *(_OWORD *)(v4 + 88) = v7;
        uint64_t v9 = v4;
      }
      else
      {
        if (v15 >= 0) {
          uint64_t v21 = v6 + 40;
        }
        else {
          uint64_t v21 = *(void *)v16;
        }
        sub_1001AC878(v4 + 40, v21);
        uint64_t v9 = v24;
      }
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v6 + 32) ^ (*(int *)(v6 + 32) >> 31);
      v6 += 208;
      uint64_t v4 = v9 + 208;
      uint64_t v24 = v9 + 208;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_10023408C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002340A0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v5 = *v3;
    uint64_t v6 = *v4;
    if (*v3 != *v4)
    {
      uint64_t v7 = v5 - 168;
      do
      {
        int v9 = *(_DWORD *)(v5 - 176);
        if (v9 == v9 >> 31)
        {
          if (*(unsigned char *)(v5 - 128)) {
            *(unsigned char *)(v5 - 128) = 0;
          }
        }
        else
        {
          uint64_t v8 = *(void *)(v5 - 168);
          if (v9 < 0)
          {
            if (v8) {
              (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
            }
          }
          else
          {
            (*(void (**)(uint64_t))v8)(v5 - 168);
          }
        }
        v5 -= 208;
        v7 -= 208;
      }
      while (v5 != v6);
    }
  }
  return a1;
}

BOOL sub_10023417C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void sub_100234238(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[6];
      if (v4)
      {
        uint64_t v5 = v2[7];
        uint64_t v6 = (void *)v2[6];
        if (v5 != v4)
        {
          uint64_t v7 = v5 - 168;
          do
          {
            int v9 = *(_DWORD *)(v5 - 176);
            if (v9 == v9 >> 31)
            {
              if (*(unsigned char *)(v5 - 128)) {
                *(unsigned char *)(v5 - 128) = 0;
              }
            }
            else
            {
              uint64_t v8 = *(void *)(v5 - 168);
              if (v9 < 0)
              {
                if (v8) {
                  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
                }
              }
              else
              {
                (*(void (**)(uint64_t))v8)(v5 - 168);
              }
            }
            v5 -= 208;
            v7 -= 208;
          }
          while (v5 != v4);
          uint64_t v6 = (void *)v2[6];
        }
        v2[7] = v4;
        operator delete(v6);
      }
      int v10 = (void *)v2[3];
      if (v10)
      {
        v2[4] = v10;
        operator delete(v10);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100234354(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x13B13B13B13B13BLL) {
    sub_1000A9108();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4) > v6) {
    unint64_t v6 = 0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 4)) >= 0x9D89D89D89D89DLL) {
    unint64_t v8 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x13B13B13B13B13BLL) {
      sub_1000A6A10();
    }
    int v9 = operator new(208 * v8);
  }
  else
  {
    int v9 = 0;
  }
  int v10 = &v9[52 * v5];
  unint64_t v35 = v10;
  int v11 = v10 + 2;
  BOOL v13 = (void *)(a2 + 8);
  int v12 = *(_DWORD *)a2;
  int v14 = *(int *)a2 >> 31;
  if (v12 >> 31 == v12)
  {
    *int v11 = *v13;
    int v14 = v12;
  }
  else
  {
    *(_OWORD *)int v11 = *(_OWORD *)v13;
    v10[6] = *(_DWORD *)(a2 + 24);
  }
  *int v10 = v14 ^ v12;
  int v15 = &v9[52 * v5 + 10];
  int v16 = *(_DWORD *)(a2 + 32);
  int v17 = v16 >> 31;
  if (v16 >> 31 == v16)
  {
    int v18 = &v9[52 * v5 + 12];
    int v19 = *(_DWORD *)(a2 + 40);
    int v20 = v19 >> 31;
    uint64_t v21 = (void *)(a2 + 48);
    if (v19 >> 31 == v19)
    {
      *int v18 = *v21;
      int v20 = v19;
    }
    else
    {
      *(_OWORD *)int v18 = *(_OWORD *)v21;
      v9[52 * v5 + 16] = *(_DWORD *)(a2 + 64);
    }
    *int v15 = v20 ^ v19;
    uint64_t v24 = (char *)&v9[52 * v5];
    uint64_t v25 = *(void *)(a2 + 72);
    v24[80] = 0;
    uint64_t v26 = v24 + 80;
    *((void *)v26 - 1) = v25;
    if (*(unsigned char *)(a2 + 80))
    {
      v9[52 * v5 + 21] = *(_DWORD *)(a2 + 84);
      *uint64_t v26 = 1;
    }
    uint64_t v23 = (char *)&v9[52 * v5];
    *(_OWORD *)(v23 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(a2 + 104);
    *((_DWORD *)v23 + 3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(a2 + 120);
  }
  else
  {
    if (v16 >= 0) {
      uint64_t v22 = a2 + 40;
    }
    else {
      uint64_t v22 = *(void *)(a2 + 40);
    }
    sub_1001AC878(v15, v22);
    int v16 = *(_DWORD *)(a2 + 32);
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    int v10 = v35;
    uint64_t v23 = (char *)&v9[52 * v5];
    int v17 = v16 >> 31;
  }
  v9[52 * v5 + 8] = v17 ^ v16;
  uint64_t v27 = (uint64_t)(v23 + 208);
  sub_10023474C((uint64_t)(a1 + 2), v4, v4, v3, v3, (uint64_t)v10, (uint64_t)v10);
  int v28 = (char *)*a1;
  uint64_t v29 = (char *)a1[1];
  *a1 = v30;
  a1[1] = v27;
  a1[2] = (uint64_t)&v9[52 * v8];
  if (v29 != v28)
  {
    uint64_t v31 = v29 - 168;
    do
    {
      int v33 = *((_DWORD *)v29 - 44);
      if (v33 == v33 >> 31)
      {
        if (*(v29 - 128)) {
          *(v29 - 128) = 0;
        }
      }
      else
      {
        uint64_t v32 = *((void *)v29 - 21);
        if (v33 < 0)
        {
          if (v32) {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
          }
        }
        else
        {
          (*(void (**)(char *))v32)(v29 - 168);
        }
      }
      v29 -= 208;
      v31 -= 208;
    }
    while (v29 != v28);
  }
  if (v28) {
    operator delete(v28);
  }
  return v27;
}

void sub_100234668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023467C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10023467C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 208;
    int v4 = *(_DWORD *)(v2 - 176);
    if (v4 == v4 >> 31)
    {
      if (!*(unsigned char *)(v2 - 128)) {
        goto LABEL_2;
      }
      *(unsigned char *)(v2 - 128) = 0;
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v7 = *(void *)(v2 - 168);
      uint64_t v6 = v2 - 168;
      uint64_t v5 = v7;
      if (v4 < 0)
      {
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
LABEL_2:
        uint64_t v2 = *(void *)(a1 + 16);
      }
      else
      {
        (*(void (**)(uint64_t))v5)(v6);
        uint64_t v2 = *(void *)(a1 + 16);
      }
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10023474C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    while (1)
    {
      int v14 = *(_DWORD *)(v10 - 208);
      v10 -= 208;
      int v15 = (void *)(v7 - 200);
      int v16 = (void *)(v10 + 8);
      if (v14 == v14 >> 31)
      {
        *int v15 = *v16;
        *(_DWORD *)(v7 - 208) = 0;
        int v17 = *(_DWORD *)(v9 - 176);
        int v18 = (int *)(v9 - 168);
        if (v17 == v17 >> 31) {
          goto LABEL_12;
        }
      }
      else
      {
        long long v20 = *(_OWORD *)v16;
        *(_DWORD *)(v7 - 184) = *(_DWORD *)(v10 + 24);
        *(_OWORD *)int v15 = v20;
        *(_DWORD *)(v7 - 208) = *(_DWORD *)(v9 - 208) ^ (*(int *)(v9 - 208) >> 31);
        int v17 = *(_DWORD *)(v9 - 176);
        int v18 = (int *)(v9 - 168);
        if (v17 == v17 >> 31)
        {
LABEL_12:
          uint64_t v21 = (void *)(v7 - 160);
          int v22 = *(_DWORD *)(v9 - 168);
          uint64_t v23 = (void *)(v9 - 160);
          if (v22 == v22 >> 31)
          {
            *uint64_t v21 = *v23;
            int v24 = v22;
          }
          else
          {
            long long v25 = *(_OWORD *)v23;
            *(_DWORD *)(v7 - 144) = *(_DWORD *)(v9 - 144);
            *(_OWORD *)uint64_t v21 = v25;
            int v24 = *v18;
            int v22 = v24 >> 31;
          }
          *(_DWORD *)(v7 - 168) = v24 ^ v22;
          *(void *)(v7 - 136) = *(void *)(v9 - 136);
          *(unsigned char *)(v7 - 128) = 0;
          if (*(unsigned char *)(v9 - 128))
          {
            *(_DWORD *)(v7 - 124) = *(_DWORD *)(v9 - 124);
            *(unsigned char *)(v7 - 128) = 1;
          }
          long long v11 = *(_OWORD *)(v9 - 120);
          long long v12 = *(_OWORD *)(v9 - 104);
          *(_DWORD *)(v7 - 88) = *(_DWORD *)(v9 - 88);
          *(_OWORD *)(v7 - 104) = v12;
          *(_OWORD *)(v7 - 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v11;
          uint64_t v13 = v7;
          goto LABEL_4;
        }
      }
      if (v17 >= 0) {
        int v19 = v18;
      }
      else {
        int v19 = *(int **)v18;
      }
      sub_1001AC878(v7 - 168, v19);
      uint64_t v13 = v28;
LABEL_4:
      *(_DWORD *)(v7 - 176) = *(_DWORD *)(v9 - 176) ^ (*(int *)(v9 - 176) >> 31);
      uint64_t v7 = v13 - 208;
      uint64_t v28 = v13 - 208;
      uint64_t v9 = v10;
      if (v10 == a5) {
        return v27;
      }
    }
  }
  return a6;
}

void sub_1002348F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100234908(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(*(void *)(a1 + 16) + 8);
    int v4 = *(uint64_t **)(*(void *)(a1 + 8) + 8);
    if (v3 != v4)
    {
      uint64_t v5 = v3 + 5;
      uint64_t v6 = v3 + 5;
      do
      {
        int v9 = *((_DWORD *)v6 - 2);
        if (v9 == v9 >> 31)
        {
          if (*((unsigned char *)v6 + 40)) {
            *((unsigned char *)v6 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
          }
        }
        else
        {
          uint64_t v7 = *v6;
          if (v9 < 0)
          {
            if (v7) {
              (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
            }
          }
          else
          {
            (*(void (**)(uint64_t *))v7)(v6);
          }
        }
        unint64_t v8 = v6 + 21;
        v6 += 26;
        v5 += 26;
      }
      while (v8 != v4);
    }
  }
  return a1;
}

uint64_t *sub_1002349E8(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    int v9 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      __n128 result = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = result[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == v6) {
                return result;
              }
            }
            else if ((v12 & (v7 - 1)) != v4)
            {
              goto LABEL_23;
            }
            __n128 result = (uint64_t *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == v6) {
              return result;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v4) {
              break;
            }
          }
          __n128 result = (uint64_t *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  sub_100234D24(a1, *a2, a3, a4, (uint64_t)v26);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v13 / v14);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v20 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v20) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v20)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v20 < 3uLL || (uint8x8_t v22 = (uint8x8_t)vcnt_s8(v20), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < *(void *)&v20) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v24 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v4 = v6 % v7;
        int v15 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v15) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v6;
        int v15 = *(void **)(*(void *)a1 + 8 * v6);
        if (v15) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v24 & v6;
      int v15 = *(void **)(*(void *)a1 + 8 * (v24 & v6));
      if (v15) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v25 = *(void *)(*(void *)v26[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v25 >= v7) {
          v25 %= v7;
        }
      }
      else
      {
        v25 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v26[0];
    }
    goto LABEL_61;
  }
  int v15 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v15) {
    goto LABEL_50;
  }
LABEL_26:
  *(void *)v26[0] = *v15;
  *int v15 = v26[0];
LABEL_61:
  __n128 result = (uint64_t *)v26[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_100234D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_100234E28((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100234D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x48uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *uint64_t v10 = 0;
  v10[1] = a2;
  int v11 = *a3;
  v10[3] = 0;
  *((_DWORD *)v10 + 4) = v11;
  v10[4] = 0;
  v10[5] = 0;
  float v13 = *(const void **)a4;
  uint64_t v12 = *(void *)(a4 + 8);
  int64_t v14 = v12 - *(void *)a4;
  if (v12 != *(void *)a4)
  {
    if (v14 < 0) {
      sub_1000A9108();
    }
    int v15 = (char *)operator new(v12 - *(void *)a4);
    v10[3] = v15;
    v10[4] = v15;
    BOOL v16 = &v15[8 * (v14 >> 3)];
    v10[5] = v16;
    memcpy(v15, v13, v14);
    v10[4] = v16;
  }
  __n128 result = sub_100233E30(v10 + 6, (uint64_t *)(a4 + 24));
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_100234DF8(_Unwind_Exception *a1)
{
  unint64_t v6 = *v4;
  if (*v4)
  {
    v2[4] = v6;
    operator delete(v6);
  }
  void *v1 = 0;
  sub_100234E28(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100234E28(uint64_t a1, void *__p)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    if (!__p) {
      return;
    }
    goto LABEL_14;
  }
  uint64_t v3 = __p[6];
  if (v3)
  {
    uint64_t v4 = __p[7];
    uint64_t v5 = (void *)__p[6];
    if (v4 != v3)
    {
      uint64_t v6 = v4 - 168;
      do
      {
        int v8 = *(_DWORD *)(v4 - 176);
        if (v8 == v8 >> 31)
        {
          if (*(unsigned char *)(v4 - 128)) {
            *(unsigned char *)(v4 - 128) = 0;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(v4 - 168);
          if (v8 < 0)
          {
            if (v7) {
              (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
            }
          }
          else
          {
            (*(void (**)(uint64_t))v7)(v4 - 168);
          }
        }
        v4 -= 208;
        v6 -= 208;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)__p[6];
    }
    __p[7] = v3;
    operator delete(v5);
  }
  uint64_t v10 = (void *)__p[3];
  if (!v10)
  {
LABEL_14:
    uint64_t v9 = __p;
    goto LABEL_16;
  }
  __p[4] = v10;
  operator delete(v10);
  uint64_t v9 = __p;

LABEL_16:
  operator delete(v9);
}

std::string *sub_100234F6C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100234FA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100234FBC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t v5 = (void *)v2[6];
      if (v5)
      {
        v2[7] = v5;
        operator delete(v5);
      }
      uint64_t v6 = v2[3];
      if (v6)
      {
        uint64_t v7 = v2[4];
        uint64_t v3 = (void *)v2[3];
        if (v7 != v6)
        {
          uint64_t v8 = v7 - 168;
          do
          {
            int v10 = *(_DWORD *)(v7 - 176);
            if (v10 == v10 >> 31)
            {
              if (*(unsigned char *)(v7 - 128)) {
                *(unsigned char *)(v7 - 128) = 0;
              }
            }
            else
            {
              uint64_t v9 = *(void *)(v7 - 168);
              if (v10 < 0)
              {
                if (v9) {
                  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
                }
              }
              else
              {
                (*(void (**)(uint64_t))v9)(v7 - 168);
              }
            }
            v7 -= 208;
            v8 -= 208;
          }
          while (v7 != v6);
          uint64_t v3 = (void *)v2[3];
        }
        v2[4] = v6;
        operator delete(v3);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
}

char *sub_1002350D4(uint64_t a1, int *a2, _DWORD *a3, long long *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    int v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = *((void *)v12 + 1);
            if (v14 == v8)
            {
              if (*((_DWORD *)v12 + 4) == v8) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v12 = *(char **)v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  int v15 = (void *)(a1 + 16);
  uint64_t v12 = (char *)operator new(0x50uLL);
  *((_DWORD *)v12 + 4) = *a3;
  long long v16 = *a4;
  *((void *)v12 + 5) = *((void *)a4 + 2);
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  long long v17 = *(long long *)((char *)a4 + 24);
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  uint64_t v18 = *((void *)a4 + 5);
  uint64_t v19 = *((void *)a4 + 6);
  *((void *)a4 + 4) = 0;
  *((void *)a4 + 5) = 0;
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = v8;
  *(_OWORD *)(v12 + 24) = v16;
  *((_OWORD *)v12 + 3) = v17;
  *((void *)v12 + 8) = v18;
  *((void *)v12 + 9) = v19;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_26:
      *(void *)uint64_t v12 = *v23;
LABEL_61:
      *uint64_t v23 = v12;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v9 >= 3) {
      BOOL v24 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v9);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v32 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
      {
        unint64_t v4 = v8 % v9;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v23) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v8;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v8);
        if (v23) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v8;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v32 & v8));
      if (v23) {
        goto LABEL_26;
      }
    }
  }
  *(void *)uint64_t v12 = *v15;
  *int v15 = v12;
  *(void *)(v22 + 8 * v4) = v15;
  if (*(void *)v12)
  {
    unint64_t v33 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9) {
        v33 %= v9;
      }
    }
    else
    {
      v33 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_100235424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_100235440(v11, v10);
  _Unwind_Resume(a1);
}

void sub_100235440(uint64_t a1, void *__p)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    if (!__p) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v3 = (void *)__p[6];
  if (v3)
  {
    __p[7] = v3;
    operator delete(v3);
  }
  uint64_t v4 = __p[3];
  if (!v4)
  {
LABEL_16:
    uint8x8_t v10 = __p;
    goto LABEL_18;
  }
  uint64_t v5 = __p[4];
  uint64_t v6 = (void *)__p[3];
  if (v5 != v4)
  {
    uint64_t v7 = v5 - 168;
    do
    {
      int v9 = *(_DWORD *)(v5 - 176);
      if (v9 == v9 >> 31)
      {
        if (*(unsigned char *)(v5 - 128)) {
          *(unsigned char *)(v5 - 128) = 0;
        }
      }
      else
      {
        uint64_t v8 = *(void *)(v5 - 168);
        if (v9 < 0)
        {
          if (v8) {
            (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          }
        }
        else
        {
          (*(void (**)(uint64_t))v8)(v5 - 168);
        }
      }
      v5 -= 208;
      v7 -= 208;
    }
    while (v5 != v4);
    uint64_t v6 = (void *)__p[3];
  }
  __p[4] = v4;
  operator delete(v6);
  uint8x8_t v10 = __p;

LABEL_18:
  operator delete(v10);
}

void sub_100235584()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002355FC()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void *sub_100235674(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int64_t v7 = v5 - *(void *)a2;
  if (v5 == *(void *)a2)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    uint8x8_t v10 = *(const void **)a3;
    int64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
    if (v11) {
      goto LABEL_4;
    }
LABEL_8:
    if ((v9 - v8) >> 3) {
      goto LABEL_10;
    }
    return a1;
  }
  if (v7 < 0) {
    sub_1000A9108();
  }
  uint64_t v8 = (char *)operator new(v5 - *(void *)a2);
  *a1 = v8;
  a1[1] = v8;
  int v9 = &v8[8 * (v7 >> 3)];
  a1[2] = v9;
  memcpy(v8, v6, v7);
  a1[1] = v9;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint8x8_t v10 = *(const void **)a3;
  int64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (!v11) {
    goto LABEL_8;
  }
LABEL_4:
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 5);
  if (v12 >= 0x19999999999999ALL) {
    sub_1000A9108();
  }
  unint64_t v13 = (char *)operator new(v11);
  a1[3] = v13;
  a1[4] = v13;
  uint64_t v14 = &v13[32 * (v11 >> 5)];
  a1[5] = v14;
  memcpy(v13, v10, v11);
  a1[4] = v14;
  if (v12 < (v9 - v8) >> 3)
  {
LABEL_10:
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    sub_10014B3FC((uint64_t)&v16);
  }
  return a1;
}

void sub_10023580C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    long long v17 = *v15;
    if (!*v15)
    {
LABEL_3:
      char v18 = *(void **)v14;
      if (!*(void *)v14) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    long long v17 = *v15;
    if (!*v15) {
      goto LABEL_3;
    }
  }
  *(void *)(v14 + 32) = v17;
  operator delete(v17);
  char v18 = *(void **)v14;
  if (!*(void *)v14) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  *(void *)(v14 + 8) = v18;
  operator delete(v18);
  goto LABEL_5;
}

void sub_100235870()
{
  if (!*v0) {
    JUMPOUT(0x100235830);
  }
  JUMPOUT(0x100235828);
}

void sub_100235884(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  if (a1[1] == *a1)
  {
    int64_t v7 = 0;
LABEL_34:
    *(_OWORD *)a3 = xmmword_1003F79C0;
    *(_OWORD *)(a3 + 16) = xmmword_1003F79C0;
    *(_OWORD *)(a3 + 32) = xmmword_1003F79C0;
    *(_OWORD *)(a3 + 48) = xmmword_1003F79C0;
    *(unsigned char *)(a3 + 64) = 0;
    *(unsigned char *)(a3 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
    *(unsigned char *)(a3 + 88) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    *(unsigned char *)(a3 + 112) = 0;
    *(unsigned char *)(a3 + 128) = 0;
    *(unsigned char *)(a3 + 136) = 0;
    *(unsigned char *)(a3 + 152) = 0;
    if (!v7) {
      return;
    }
    goto LABEL_35;
  }
  int64_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  unint64_t v10 = 0;
  do
  {
    if (sub_100082814(*(void *)(v4 + 8 * v10)) != a2) {
      goto LABEL_4;
    }
    char v18 = (_OWORD *)(a1[3] + 160 * v10);
    if (v9 < v8)
    {
      long long v11 = v18[1];
      *(_OWORD *)int v9 = *v18;
      *((_OWORD *)v9 + 1) = v11;
      long long v12 = v18[2];
      long long v13 = v18[3];
      long long v14 = v18[5];
      *((_OWORD *)v9 + 4) = v18[4];
      *((_OWORD *)v9 + 5) = v14;
      *((_OWORD *)v9 + 2) = v12;
      *((_OWORD *)v9 + 3) = v13;
      long long v15 = v18[6];
      long long v16 = v18[7];
      long long v17 = v18[9];
      *((_OWORD *)v9 + 8) = v18[8];
      *((_OWORD *)v9 + 9) = v17;
      *((_OWORD *)v9 + 6) = v15;
      *((_OWORD *)v9 + 7) = v16;
      v9 += 160;
      goto LABEL_4;
    }
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5) + 1;
    if (v19 > 0x199999999999999) {
      sub_1000A9108();
    }
    if (0x999999999999999ALL * ((v8 - v7) >> 5) > v19) {
      unint64_t v19 = 0x999999999999999ALL * ((v8 - v7) >> 5);
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v20 = 0x199999999999999;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20)
    {
      if (v20 > 0x199999999999999) {
        sub_1000A6A10();
      }
      float v21 = (char *)operator new(160 * v20);
    }
    else
    {
      float v21 = 0;
    }
    uint64_t v22 = &v21[32 * ((v9 - v7) >> 5)];
    long long v23 = v18[1];
    *(_OWORD *)uint64_t v22 = *v18;
    *((_OWORD *)v22 + 1) = v23;
    long long v24 = v18[2];
    long long v25 = v18[3];
    long long v26 = v18[5];
    *((_OWORD *)v22 + 4) = v18[4];
    *((_OWORD *)v22 + 5) = v26;
    *((_OWORD *)v22 + 2) = v24;
    *((_OWORD *)v22 + 3) = v25;
    long long v27 = v18[6];
    long long v28 = v18[7];
    long long v29 = v18[9];
    *((_OWORD *)v22 + 8) = v18[8];
    *((_OWORD *)v22 + 9) = v29;
    *((_OWORD *)v22 + 6) = v27;
    *((_OWORD *)v22 + 7) = v28;
    if (v9 == v7)
    {
      uint64_t v38 = &v21[32 * ((v9 - v7) >> 5)];
      uint64_t v8 = &v21[160 * v20];
      int v9 = v22 + 160;
      if (!v7) {
        goto LABEL_22;
      }
    }
    else
    {
      uint8x8_t v30 = &v21[32 * ((v9 - v7) >> 5)];
      do
      {
        long long v31 = *((_OWORD *)v9 - 9);
        *((_OWORD *)v30 - 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *((_OWORD *)v9 - 10);
        *((_OWORD *)v30 - 9) = v31;
        long long v32 = *((_OWORD *)v9 - 8);
        long long v33 = *((_OWORD *)v9 - 7);
        long long v34 = *((_OWORD *)v9 - 5);
        *((_OWORD *)v30 - 6) = *((_OWORD *)v9 - 6);
        *((_OWORD *)v30 - 5) = v34;
        *((_OWORD *)v30 - 8) = v32;
        *((_OWORD *)v30 - 7) = v33;
        long long v35 = *((_OWORD *)v9 - 4);
        long long v36 = *((_OWORD *)v9 - 3);
        long long v37 = *((_OWORD *)v9 - 1);
        uint64_t v38 = v30 - 160;
        *((_OWORD *)v30 - 2) = *((_OWORD *)v9 - 2);
        *((_OWORD *)v30 - 1) = v37;
        *((_OWORD *)v30 - 4) = v35;
        *((_OWORD *)v30 - 3) = v36;
        v9 -= 160;
        v30 -= 160;
      }
      while (v9 != v7);
      uint64_t v8 = &v21[160 * v20];
      int v9 = v22 + 160;
      if (!v7) {
        goto LABEL_22;
      }
    }
    operator delete(v7);
LABEL_22:
    int64_t v7 = v38;
LABEL_4:
    ++v10;
    uint64_t v4 = *a1;
  }
  while (v10 < (a1[1] - *a1) >> 3);
  if (v7 == v9) {
    goto LABEL_34;
  }
  long long v39 = v7 + 160;
  uint64_t v40 = v7;
  if (v7 + 160 != v9)
  {
    uint64_t v40 = v7;
    do
    {
      if (*((double *)v40 + 1) < *((double *)v39 + 1)) {
        uint64_t v40 = v39;
      }
      v39 += 160;
    }
    while (v39 != v9);
  }
  long long v41 = *((_OWORD *)v40 + 1);
  *(_OWORD *)a3 = *(_OWORD *)v40;
  *(_OWORD *)(a3 + 16) = v41;
  long long v42 = *((_OWORD *)v40 + 2);
  long long v43 = *((_OWORD *)v40 + 3);
  long long v44 = *((_OWORD *)v40 + 5);
  *(_OWORD *)(a3 + 64) = *((_OWORD *)v40 + 4);
  *(_OWORD *)(a3 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v44;
  *(_OWORD *)(a3 + 32) = v42;
  *(_OWORD *)(a3 + 48) = v43;
  long long v45 = *((_OWORD *)v40 + 6);
  long long v46 = *((_OWORD *)v40 + 7);
  long long v47 = *((_OWORD *)v40 + 9);
  *(_OWORD *)(a3 + 128) = *((_OWORD *)v40 + 8);
  *(_OWORD *)(a3 + 144) = v47;
  *(_OWORD *)(a3 + 96) = v45;
  *(_OWORD *)(a3 + 112) = v46;
  if (v7)
  {
LABEL_35:
    operator delete(v7);
  }
}

void sub_100235B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100235BA8(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  float v4 = (float)(unint64_t)((a1[1] - *a1) >> 3);
  size_t prime = (unint64_t)v4;
  if ((unint64_t)v4 == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C(a2, prime);
    goto LABEL_18;
  }
  if ((prime & ((unint64_t)v4 - 1)) != 0)
  {
    size_t prime = std::__next_prime((unint64_t)v4);
    int8x8_t v6 = *(int8x8_t *)(a2 + 8);
    BOOL v7 = prime >= *(void *)&v6;
    if (prime > *(void *)&v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v6 = 0;
    BOOL v7 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v7)
  {
    unint64_t v8 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
    if (*(void *)&v6 < 3uLL || (uint8x8_t v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      unint64_t v8 = std::__next_prime(v8);
    }
    else
    {
      uint64_t v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2) {
        unint64_t v8 = v10;
      }
    }
    if (prime <= v8) {
      size_t prime = v8;
    }
    if (prime < *(void *)&v6) {
      goto LABEL_17;
    }
  }
LABEL_18:
  uint64_t v11 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      sub_100235D1C((void *)a2, *(void *)(v11 + 8 * v13++) + 8, (_OWORD *)(a1[3] + v12));
      uint64_t v11 = *a1;
      v12 += 160;
    }
    while (v13 < (a1[1] - *a1) >> 3);
  }
}

void sub_100235CF4(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

void sub_100235D08(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

const void ***sub_100235D1C(void *a1, uint64_t a2, _OWORD *a3)
{
  std::string __p = operator new(0x30uLL);
  *(void *)std::string __p = 0;
  *((void *)__p + 1) = 0;
  sub_100085B24((void *)__p + 2, a2);
  *((_OWORD *)__p + 2) = *a3;
  *((void *)__p + 1) = sub_100077F68((uint64_t)&v11, (uint64_t ***)__p + 2);
  int8x8_t v6 = sub_100061FB0(a1, (uint64_t)__p);
  if ((v7 & 1) == 0 && __p)
  {
    unint64_t v8 = (std::__shared_weak_count *)*((void *)__p + 3);
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    operator delete(__p);
  }
  return v6;
}

void sub_100235E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100235E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100235E54()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100235ECC()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

unsigned char *sub_100235F44(uint64_t a1)
{
  uint64_t v1 = a1 + 304;
  if (!*(unsigned char *)(a1 + 456))
  {
    uint64_t v2 = (unsigned char *)(a1 + 152);
    if (!*(unsigned char *)(a1 + 304)) {
      return v2;
    }
    if (!*v2) {
      return (unsigned char *)v1;
    }
LABEL_9:
    if (*(void *)(v1 + 16) > *(void *)(a1 + 168)) {
      return (unsigned char *)v1;
    }
    return v2;
  }
  if (*(unsigned char *)(a1 + 304))
  {
    if (*(void *)(a1 + 472) > *(void *)(a1 + 320)) {
      uint64_t v1 = a1 + 456;
    }
    uint64_t v2 = (unsigned char *)(a1 + 152);
    if (!*(unsigned char *)(a1 + 152)) {
      return (unsigned char *)v1;
    }
    goto LABEL_9;
  }
  uint64_t v2 = (unsigned char *)(a1 + 152);
  uint64_t v1 = a1 + 456;
  if (*(unsigned char *)(a1 + 152)) {
    goto LABEL_9;
  }
  return (unsigned char *)v1;
}

uint64_t sub_100235FBC(uint64_t result)
{
  uint64_t v1 = result + 304;
  if (*(unsigned char *)(result + 456))
  {
    if (*(unsigned char *)(result + 304))
    {
      if (*(void *)(result + 472) > *(void *)(result + 320)) {
        uint64_t v1 = result + 456;
      }
      uint64_t v2 = result + 152;
      if (!*(unsigned char *)(result + 152))
      {
LABEL_14:
        uint64_t v2 = v1;
        if (!*(unsigned char *)v1) {
          return result;
        }
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v2 = result + 152;
      uint64_t v1 = result + 456;
      if (!*(unsigned char *)(result + 152)) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v2 = result + 152;
    if (!*(unsigned char *)(result + 304)) {
      goto LABEL_11;
    }
    if (!*(unsigned char *)v2) {
      goto LABEL_14;
    }
  }
  if (*(void *)(v1 + 16) > *(void *)(result + 168)) {
    uint64_t v2 = v1;
  }
LABEL_11:
  if (!*(unsigned char *)v2) {
    return result;
  }
LABEL_15:
  if (!*(unsigned char *)result) {
    return v2;
  }
  if (*(void *)(v2 + 16) > *(void *)(result + 16)) {
    return v2;
  }
  return result;
}

void sub_100236060(unsigned char *a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 136) & 0x10) == 0)
  {
LABEL_63:
    uint64_t v37 = (uint64_t)(a1 + 160);
    if (!a1[152])
    {
      sub_1000417D0(v37, a2);
      a1[152] = 1;
      return;
    }
LABEL_64:
    sub_1001B8394(v37, a2);
    return;
  }
  float v4 = (const void **)(a2 + 64);
  std::to_string(&v39, 1u);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 87);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 87);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 72);
  }
  std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  char v8 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  if (v6 == size)
  {
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint8x8_t v9 = &v39;
    }
    else {
      uint8x8_t v9 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v4, v9, *(void *)(a2 + 72))) {
        goto LABEL_18;
      }
    }
    else if (*(unsigned char *)(a2 + 87))
    {
      uint64_t v10 = (unsigned __int8 *)(a2 + 64);
      while (*v10 == v9->__r_.__value_.__s.__data_[0])
      {
        ++v10;
        uint8x8_t v9 = (std::string *)((char *)v9 + 1);
        if (!--v5) {
          goto LABEL_38;
        }
      }
      goto LABEL_18;
    }
LABEL_38:
    BOOL v24 = 1;
    if ((v8 & 0x80) == 0) {
      goto LABEL_62;
    }
LABEL_39:
    operator delete(v39.__r_.__value_.__l.__data_);
    if (v24) {
      goto LABEL_63;
    }
    goto LABEL_40;
  }
LABEL_18:
  std::to_string(&__p, 9u);
  uint64_t v11 = *(unsigned __int8 *)(a2 + 87);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 87);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 72);
  }
  std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
  }
  if (v12 != v13)
  {
    BOOL v24 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_37;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v11 & 0x80) != 0)
  {
    BOOL v24 = memcmp(*v4, p_p, *(void *)(a2 + 72)) == 0;
    goto LABEL_60;
  }
  if (*(unsigned char *)(a2 + 87))
  {
    uint64_t v16 = v11 - 1;
    long long v17 = (unsigned __int8 *)(a2 + 64);
    do
    {
      int v19 = *v17++;
      int v18 = v19;
      int v21 = p_p->__r_.__value_.__s.__data_[0];
      p_p = (std::string *)((char *)p_p + 1);
      int v20 = v21;
      BOOL v22 = v16-- != 0;
      char v23 = v22;
      BOOL v24 = v18 == v20;
    }
    while (v18 == v20 && (v23 & 1) != 0);
LABEL_60:
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_61;
    }
LABEL_37:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  BOOL v24 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_37;
  }
LABEL_61:
  if ((*((unsigned char *)&v39.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_39;
  }
LABEL_62:
  if (v24) {
    goto LABEL_63;
  }
LABEL_40:
  if ((*(_WORD *)(a2 + 136) & 0x10) != 0)
  {
    std::to_string(&v39, 4u);
    uint64_t v25 = *(unsigned __int8 *)(a2 + 87);
    if ((v25 & 0x80u) == 0) {
      uint64_t v26 = *(unsigned __int8 *)(a2 + 87);
    }
    else {
      uint64_t v26 = *(void *)(a2 + 72);
    }
    std::string::size_type v27 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    int v28 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v27 = v39.__r_.__value_.__l.__size_;
    }
    if (v26 == v27)
    {
      long long v29 = (v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v39
          : (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v25 & 0x80) != 0)
      {
        BOOL v36 = memcmp(*v4, v29, *(void *)(a2 + 72)) == 0;
      }
      else if (*(unsigned char *)(a2 + 87))
      {
        uint64_t v30 = v25 - 1;
        do
        {
          int v32 = *(unsigned __int8 *)v4;
          float v4 = (const void **)((char *)v4 + 1);
          int v31 = v32;
          int v34 = v29->__r_.__value_.__s.__data_[0];
          long long v29 = (std::string *)((char *)v29 + 1);
          int v33 = v34;
          BOOL v22 = v30-- != 0;
          char v35 = v22;
          BOOL v36 = v31 == v33;
        }
        while (v31 == v33 && (v35 & 1) != 0);
      }
      else
      {
        BOOL v36 = 1;
      }
    }
    else
    {
      BOOL v36 = 0;
    }
    if (v28 < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (v36)
    {
      uint64_t v37 = (uint64_t)(a1 + 8);
      if (!*a1)
      {
        sub_1000417D0(v37, a2);
        *a1 = 1;
        return;
      }
      goto LABEL_64;
    }
  }
}

void sub_100236328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_100236344(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 152))
  {
    double result = sub_1002A5A90(*(double *)(a2 + 8), 0.25) + *(double *)(a1 + 256);
    *(double *)(a1 + 256) = result;
  }
  if (*(unsigned char *)a1)
  {
    double result = sub_1002A5A90(*(double *)(a2 + 8), 0.25) + *(double *)(a1 + 104);
    *(double *)(a1 + 104) = result;
  }
  if (*(unsigned char *)(a1 + 304))
  {
    double result = sub_1002A5A90(*(double *)(a2 + 8), 0.25) + *(double *)(a1 + 408);
    *(double *)(a1 + 408) = result;
  }
  if (*(unsigned char *)(a1 + 456))
  {
    double result = sub_1002A5A90(*(double *)(a2 + 8), 0.25) + *(double *)(a1 + 560);
    *(double *)(a1 + 56sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
  }
  return result;
}

uint64_t sub_1002363E8(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      sub_10022DC30((uint64_t)(v2 + 5));
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_10023645C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 16) = v3;
      operator delete(v3);
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

unsigned char *sub_1002364AC(unsigned char *a1)
{
  if (a1[456])
  {
    sub_100041664((uint64_t)(a1 + 464));
    a1[456] = 0;
  }
  if (a1[304])
  {
    sub_100041664((uint64_t)(a1 + 312));
    a1[304] = 0;
  }
  if (a1[152])
  {
    sub_100041664((uint64_t)(a1 + 160));
    a1[152] = 0;
  }
  if (*a1)
  {
    sub_100041664((uint64_t)(a1 + 8));
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_100236520(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_100271710();
    operator delete();
  }
  return a1;
}

char **sub_100236568(char **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    for (uint64_t i = a1[1]; i != v2; i -= 88)
    {
      if (*(i - 64)) {
        *(i - 64) = 0;
      }
    }
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

void ***sub_1002365C0(void ***a1)
{
  if (*a1)
  {
    sub_100243558((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_1002365FC(uint64_t a1)
{
  uint64_t v2 = *(void (****)(void))(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void (****)(void))(a1 + 16);
    float v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 95;
      uint64_t v6 = v3 - 95;
      do
      {
        (**v6)(v6);
        v5 -= 95;
        BOOL v7 = v6 == v2;
        v6 -= 95;
      }
      while (!v7);
      float v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *sub_100236690(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v1 + 16);
      float v4 = *(void **)(v1 + 8);
      if (v3 != v2)
      {
        uint64_t v5 = v3 - 168;
        do
        {
          int v7 = *(_DWORD *)(v3 - 176);
          if (v7 == v7 >> 31)
          {
            if (*(unsigned char *)(v3 - 128)) {
              *(unsigned char *)(v3 - 128) = 0;
            }
          }
          else
          {
            uint64_t v6 = *(void *)(v3 - 168);
            if (v7 < 0)
            {
              if (v6) {
                (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
              }
            }
            else
            {
              (*(void (**)(uint64_t))v6)(v3 - 168);
            }
          }
          v3 -= 208;
          v5 -= 208;
        }
        while (v3 != v2);
        float v4 = *(void **)(v1 + 8);
      }
      *(void *)(v1 + 16) = v2;
      operator delete(v4);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_1002367A0(uint64_t a1)
{
  *(void *)a1 = off_100462070;
  *(void *)(a1 + 8) = off_100462188;
  sub_1000D6904(*(void *)(a1 + 2528), a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 2536);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(void ***)(a1 + 2440);
  if (v3)
  {
    do
    {
      uint64_t v10 = (void **)*v3;
      sub_10022DC30((uint64_t)(v3 + 5));
      if (*((char *)v3 + 39) < 0) {
        operator delete(v3[2]);
      }
      operator delete(v3);
      uint64_t v3 = v10;
    }
    while (v10);
  }
  float v4 = *(void **)(a1 + 2424);
  *(void *)(a1 + 2424) = 0;
  if (v4) {
    operator delete(v4);
  }
  sub_1001A530C(a1 + 2240);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 2224);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (*(unsigned char *)(a1 + 2160)) {
    *(unsigned char *)(a1 + 216sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 2152);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  sub_1002424DC(a1 + 2032);
  if (*(unsigned char *)(a1 + 2016)) {
    *(unsigned char *)(a1 + 2016) = 0;
  }
  if (*(unsigned char *)(a1 + 2000)) {
    *(unsigned char *)(a1 + 200sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  if (*(unsigned char *)(a1 + 1984)) {
    *(unsigned char *)(a1 + 1984) = 0;
  }
  if (*(unsigned char *)(a1 + 1968)) {
    *(unsigned char *)(a1 + 1968) = 0;
  }
  uint64_t v7 = *(void *)(a1 + 1944);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 1952);
    uint8x8_t v9 = *(void **)(a1 + 1944);
    if (v8 != v7)
    {
      do
      {
        uint64_t v11 = *(std::__shared_weak_count **)(v8 - 8);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v8 -= 16;
      }
      while (v8 != v7);
      uint8x8_t v9 = *(void **)(a1 + 1944);
    }
    *(void *)(a1 + 1952) = v7;
    operator delete(v9);
  }
  uint64_t v12 = *(void **)(a1 + 1920);
  if (v12)
  {
    *(void *)(a1 + 1928) = v12;
    operator delete(v12);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 1856));
  std::string::size_type v13 = *(void **)(a1 + 1832);
  if (v13)
  {
    *(void *)(a1 + 184sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v13;
    operator delete(v13);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 1768));
  int v14 = *(void **)(a1 + 1744);
  if (v14)
  {
    *(void *)(a1 + 1752) = v14;
    operator delete(v14);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 1680));
  long long v15 = *(void **)(a1 + 1656);
  if (v15)
  {
    *(void *)(a1 + 1664) = v15;
    operator delete(v15);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 1592));
  if (*(unsigned char *)(a1 + 1536))
  {
    uint64_t v16 = *(void **)(a1 + 1568);
    if (v16)
    {
      *(void *)(a1 + 1576) = v16;
      operator delete(v16);
    }
    long long v17 = *(void **)(a1 + 1544);
    if (v17)
    {
      *(void *)(a1 + 1552) = v17;
      operator delete(v17);
    }
    *(unsigned char *)(a1 + 1536) = 0;
  }
  int v18 = *(std::__shared_weak_count **)(a1 + 1528);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  int v19 = *(std::__shared_weak_count **)(a1 + 1512);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (*(unsigned char *)(a1 + 1352))
  {
    sub_100041664(a1 + 1360);
    *(unsigned char *)(a1 + 1352) = 0;
  }
  if (*(unsigned char *)(a1 + 1200))
  {
    sub_100041664(a1 + 1208);
    *(unsigned char *)(a1 + 120sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  if (*(unsigned char *)(a1 + 1048))
  {
    sub_100041664(a1 + 1056);
    *(unsigned char *)(a1 + 1048) = 0;
  }
  if (*(unsigned char *)(a1 + 896))
  {
    sub_100041664(a1 + 904);
    *(unsigned char *)(a1 + 896) = 0;
  }
  if (*(unsigned char *)(a1 + 688))
  {
    sub_1000A45A0(a1 + 696);
    *(unsigned char *)(a1 + 688) = 0;
  }
  sub_10009C73C((uint64_t *)(a1 + 680));
  if (*(unsigned char *)(a1 + 664)) {
    *(unsigned char *)(a1 + 664) = 0;
  }
  if (*(unsigned char *)(a1 + 648)) {
    *(unsigned char *)(a1 + 648) = 0;
  }
  sub_10028D474(a1 + 528);
  sub_1002425E0(a1 + 328);
  uint64_t v20 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 288);
  *(void *)(a1 + 288) = 0;
  if (v21)
  {
    sub_100271710();
    operator delete();
  }
  BOOL v22 = *(char **)(a1 + 264);
  if (v22)
  {
    for (uint64_t i = *(char **)(a1 + 272); i != v22; i -= 88)
    {
      if (*(i - 64)) {
        *(i - 64) = 0;
      }
    }
    *(void *)(a1 + 272) = v22;
    operator delete(v22);
  }
  BOOL v24 = *(std::__shared_weak_count **)(a1 + 256);
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  uint64_t v25 = *(void ***)(a1 + 224);
  if (v25)
  {
    sub_100243558(a1 + 224, v25);
    operator delete(*(void **)(a1 + 224));
  }
  uint64_t v26 = *(void (****)(void))(a1 + 192);
  if (v26)
  {
    std::string::size_type v27 = *(void (****)(void))(a1 + 200);
    int v28 = *(void **)(a1 + 192);
    if (v27 != v26)
    {
      long long v29 = v27 - 95;
      uint64_t v30 = v27 - 95;
      do
      {
        (**v30)(v30);
        v29 -= 95;
        BOOL v31 = v30 == v26;
        v30 -= 95;
      }
      while (!v31);
      int v28 = *(void **)(a1 + 192);
    }
    *(void *)(a1 + 20sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v26;
    operator delete(v28);
  }
  uint64_t v32 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 16))(v32);
  }
  uint64_t v33 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v33)
  {
    uint64_t v34 = *(void *)(v33 + 8);
    if (v34)
    {
      uint64_t v35 = *(void *)(v33 + 16);
      BOOL v36 = *(void **)(v33 + 8);
      if (v35 != v34)
      {
        uint64_t v37 = v35 - 168;
        do
        {
          int v39 = *(_DWORD *)(v35 - 176);
          if (v39 == v39 >> 31)
          {
            if (*(unsigned char *)(v35 - 128)) {
              *(unsigned char *)(v35 - 128) = 0;
            }
          }
          else
          {
            uint64_t v38 = *(void *)(v35 - 168);
            if (v39 < 0)
            {
              if (v38) {
                (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
              }
            }
            else
            {
              (*(void (**)(uint64_t))v38)(v35 - 168);
            }
          }
          v35 -= 208;
          v37 -= 208;
        }
        while (v35 != v34);
        BOOL v36 = *(void **)(v33 + 8);
      }
      *(void *)(v33 + 16) = v34;
      operator delete(v36);
    }
    operator delete();
  }
  uint64_t v40 = *(std::__shared_weak_count **)(a1 + 160);
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  long long v41 = *(std::__shared_weak_count **)(a1 + 144);
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  long long v42 = *(std::__shared_weak_count **)(a1 + 128);
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  nullsub_20(a1 + 56);
  long long v43 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v43 || atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
  std::__shared_weak_count::__release_weak(v43);
  return a1;
}

uint64_t sub_100236F5C(uint64_t a1)
{
  return sub_1002367A0(a1 - 8);
}

void sub_100236F64(uint64_t a1)
{
  sub_1002367A0(a1);

  operator delete();
}

void sub_100236F9C(uint64_t a1)
{
  sub_1002367A0(a1 - 8);

  operator delete();
}

void sub_100236FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  sub_100281408(*(void *)(a1 + 296), a2, &v29);
  sub_1002814D0(*(void *)(a1 + 296), a2, (uint64_t)v28);
  uint64_t v4 = *(void *)(a1 + 2528);
  if (v4)
  {
    sub_1000D681C(v4);
    sub_1000D6844(*(void *)(a1 + 2528), (uint64_t)&v34);
    uint64_t v5 = (uint64_t)v29;
    if (*((unsigned char *)v29 + 24))
    {
      if ((_BYTE)v34)
      {
        uint64_t v6 = v38;
        long long v7 = v37;
        long long v8 = v36;
        v29[2] = v35;
        *(_OWORD *)(v5 + 48) = v8;
        *(_OWORD *)(v5 + 64) = v7;
        *(void *)(v5 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v6;
        if (!*(unsigned char *)(a1 + 688)) {
          goto LABEL_12;
        }
LABEL_11:
        *(double *)(a1 + 792) = sub_1002A5A90(*(double *)(v5 + 8), 0.25) + *(double *)(a1 + 792);
        uint64_t v5 = (uint64_t)v29;
        goto LABEL_12;
      }
      *((unsigned char *)v29 + 24) = 0;
      if (*(unsigned char *)(a1 + 688)) {
        goto LABEL_11;
      }
    }
    else
    {
      if ((_BYTE)v34)
      {
        uint64_t v9 = v38;
        long long v10 = v37;
        long long v11 = v36;
        v29[2] = v35;
        *(_OWORD *)(v5 + 48) = v11;
        *(_OWORD *)(v5 + 64) = v10;
        *(void *)(v5 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v9;
        *(unsigned char *)(v5 + 24) = 1;
      }
      if (*(unsigned char *)(a1 + 688)) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v5 = (uint64_t)v29;
    if (*(unsigned char *)(a1 + 688)) {
      goto LABEL_11;
    }
  }
LABEL_12:
  sub_100236344(a1 + 896, v5);
  sub_10025FB18(*(void **)(a1 + 120), v31);
  sub_1002AA158(*(void *)(a1 + 1520), &v31);
  if (*(unsigned char *)(a1 + 1536))
  {
    uint64_t v12 = *(void **)(a1 + 1568);
    if (v12)
    {
      *(void *)(a1 + 1576) = v12;
      operator delete(v12);
    }
    std::string::size_type v13 = *(void **)(a1 + 1544);
    if (v13)
    {
      *(void *)(a1 + 1552) = v13;
      operator delete(v13);
    }
    *(unsigned char *)(a1 + 1536) = 0;
  }
  uint64_t v34 = 0;
  *(void *)&long long v35 = 0;
  v32[0] = off_1004624E8;
  v32[1] = a1;
  void v32[2] = v31;
  uint64_t v33 = v32;
  sub_100285670((unsigned char *)(a1 + 304), v31, (uint64_t)&v34, (uint64_t)v32, *(void (****)(void, uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 176), a1 + 2184);
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
    int v14 = (std::__shared_weak_count *)v35;
    if (!(void)v35) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  if (v33) {
    (*(void (**)(void))(*v33 + 40))();
  }
  int v14 = (std::__shared_weak_count *)v35;
  if ((void)v35)
  {
LABEL_24:
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_26:
  if (!sub_1002ADBC0(v28)) {
    sub_100256EA4(*(void **)(a1 + 176), v28, (uint64_t)v29);
  }
  uint64_t v15 = *(void *)(a1 + 176);
  uint64_t v16 = v31;
  sub_1002374E8(a1, v31, &v34);
  long long v17 = v34;
  uint64_t v18 = sub_10008CB7C(*(void *)(a1 + 152));
  sub_100256FFC(v15, v16, (uint64_t)v17, v18, a1 + 2032);
  int v19 = (std::__shared_weak_count *)v35;
  if ((void)v35 && !atomic_fetch_add((atomic_ullong *volatile)(v35 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  if (sub_100256F38(*(void **)(a1 + 176), (uint64_t)v29)) {
    *(unsigned char *)(a1 + 304) = 1;
  }
  uint64_t v20 = (uint64_t)v29;
  unint64_t v21 = *(void *)(a1 + 272);
  if (v21 >= *(void *)(a1 + 280))
  {
    uint64_t v26 = sub_100243798((void **)(a1 + 264), (uint64_t)v29);
  }
  else
  {
    long long v22 = *v29;
    *(void *)(v21 + 16) = *((void *)v29 + 2);
    *(_OWORD *)unint64_t v21 = v22;
    *(unsigned char *)(v21 + 24) = 0;
    if (*(unsigned char *)(v20 + 24))
    {
      long long v23 = *(_OWORD *)(v20 + 32);
      long long v24 = *(_OWORD *)(v20 + 48);
      long long v25 = *(_OWORD *)(v20 + 64);
      *(void *)(v21 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(v20 + 80);
      *(_OWORD *)(v21 + 48) = v24;
      *(_OWORD *)(v21 + 64) = v25;
      *(_OWORD *)(v21 + 32) = v23;
      *(unsigned char *)(v21 + 24) = 1;
    }
    uint64_t v26 = (char *)(v21 + 88);
  }
  *(void *)(a1 + 272) = v26;
  sub_100238184(a1, v31);
  std::string::size_type v27 = v30;
  if (v30)
  {
    if (!atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1002373D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002373EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100237400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  sub_100237458((uint64_t *)va1);
  sub_1000BA884((uint64_t)va2);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100237428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_1000BA884((uint64_t)va1);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100237444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100237458(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_1002374E8(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  if (*(unsigned char *)(a1 + 2160)) {
    BOOL v5 = *(void *)(a1 + 2168) == a2;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    uint64_t v6 = a2;
    sub_10023C8FC(a1);
    uint64_t v7 = *(void *)(a1 + 24);
    long long v102 = (uint64_t *)(a1 + 1544);
    uint64_t v8 = nullsub_22(a1 + 1544);
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(void *)v7 + 32))(&v121, v7, v8);
    int v9 = *(_DWORD *)(a1 + 48);
    if (v9 == 1)
    {
      uint64_t v12 = v121;
      uint64_t v11 = v122;
      if (v121 != v122)
      {
        uint64_t v13 = (void **)(a1 + 1944);
        uint64_t v14 = *(void **)(a1 + 1952);
        do
        {
          while (1)
          {
            uint64_t v15 = *(void *)v12;
            uint64_t v16 = v14;
            if (*v13 != v14)
            {
              uint64_t v16 = *v13;
              while (*v16 != v15)
              {
                v16 += 2;
                if (v16 == v14)
                {
                  uint64_t v16 = v14;
                  break;
                }
              }
            }
            if (v16 == v14) {
              break;
            }
            v12 += 16;
            if (v12 == v11) {
              goto LABEL_26;
            }
          }
          if ((unint64_t)v14 >= *(void *)(a1 + 1960))
          {
            uint64_t v14 = sub_1001F4898(a1 + 1944, (long long *)v12);
          }
          else
          {
            *uint64_t v14 = v15;
            uint64_t v17 = *((void *)v12 + 1);
            v14[1] = v17;
            if (v17) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
            }
            v14 += 2;
          }
          *(void *)(a1 + 1952) = v14;
          v12 += 16;
        }
        while (v12 != v11);
      }
    }
    else if (!v9 && (char **)(a1 + 1944) != &v121)
    {
      sub_100097B00(a1 + 1944, v121, v122, (v122 - v121) >> 4);
    }
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    if (sub_1002A40B0(*(void *)(a1 + 248)))
    {
      uint64_t v100 = v6;
      long long v101 = a3;
      (*(void (**)(char **__return_ptr))(**(void **)(a1 + 120) + 16))(&v119);
      v116 = 0;
      v117 = 0;
      v118 = 0;
      uint64_t v18 = v119;
      int v19 = v120;
      if (v119 == v120) {
        goto LABEL_103;
      }
      uint64_t v20 = 0;
      while (1)
      {
        int v21 = *((_DWORD *)v18 + 8);
        if (v21 == v21 >> 31)
        {
          double v22 = *((double *)v18 + 9);
        }
        else
        {
          uint64_t v23 = v21 >= 0 ? (uint64_t)(v18 + 40) : *((void *)v18 + 5);
          double v22 = (double)*(int *)(v23 + 92);
        }
        long long v24 = v117;
        if (!sub_100233D08(v22)) {
          break;
        }
        if (v117 >= v118)
        {
          long long v25 = v116;
          uint64_t v26 = (v117 - v116) >> 3;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61) {
            sub_1000A9108();
          }
          uint64_t v28 = v118 - v116;
          if ((v118 - v116) >> 2 > v27) {
            unint64_t v27 = v28 >> 2;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v27;
          }
          if (v29)
          {
            if (v29 >> 61) {
              sub_1000A6A10();
            }
            uint64_t v30 = operator new(8 * v29);
            uint64_t v31 = &v30[8 * v26];
            *(void *)uint64_t v31 = 0;
            uint64_t v32 = (uint64_t)(v31 + 8);
            if (v24 == v25) {
              goto LABEL_68;
            }
LABEL_62:
            unint64_t v41 = v24 - 8 - v25;
            if (v41 < 0x58) {
              goto LABEL_184;
            }
            if ((unint64_t)(v25 - v30) < 0x20) {
              goto LABEL_184;
            }
            uint64_t v42 = (v41 >> 3) + 1;
            uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            long long v44 = &v24[-v43];
            v31 -= v43;
            long long v45 = &v30[8 * v26 - 16];
            long long v46 = v24 - 16;
            uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v48 = *(_OWORD *)v46;
              *(v45 - 1) = *((_OWORD *)v46 - 1);
              _OWORD *v45 = v48;
              v45 -= 2;
              v46 -= 32;
              v47 -= 4;
            }
            while (v47);
            long long v24 = v44;
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_184:
              do
              {
                uint64_t v49 = *((void *)v24 - 1);
                v24 -= 8;
                *((void *)v31 - 1) = v49;
                v31 -= 8;
              }
              while (v24 != v25);
            }
          }
          else
          {
            uint64_t v30 = 0;
            uint64_t v31 = (char *)(8 * v26);
            *(void *)(8 * v26) = 0;
            uint64_t v32 = 8 * v26 + 8;
            if (v24 != v25) {
              goto LABEL_62;
            }
          }
LABEL_68:
          v116 = v31;
          v117 = (char *)v32;
          v118 = &v30[8 * v29];
          if (v25) {
            operator delete(v25);
          }
          v117 = (char *)v32;
          goto LABEL_29;
        }
        *(void *)v117 = 0;
        v117 = v24 + 8;
LABEL_29:
        v18 += 208;
        if (v18 == v19)
        {
          if (v20)
          {
            uint64_t v6 = v100;
            sub_100232C1C(&v112, &v116, &v119, v100);
            a3 = (void **)v101;
            sub_10023BDF4(&v103, (uint64_t *)&v112);
            sub_1002819EC((uint64_t)&v107, (uint64_t)&v103, 0, 1.0);
            float64x2x2_t v64 = operator new(0x108uLL);
            v64[1] = 0;
            v64[2] = 0;
            *float64x2x2_t v64 = off_100462658;
            sub_100245A38((uint64_t)v123, (uint64_t)(v64 + 3), (uint64_t)&v121, (uint64_t)&v107, (uint64_t *)(a1 + 2216));
            *long long v101 = v64 + 3;
            v101[1] = v64;
            if (v110)
            {
              v111 = v110;
              operator delete(v110);
            }
            long long v65 = (char *)v107;
            if (v107)
            {
              int v66 = v108;
              uint64_t v67 = v107;
              if (v108 != v107)
              {
                int v68 = v108 - 168;
                do
                {
                  int v70 = *((_DWORD *)v66 - 44);
                  if (v70 == v70 >> 31)
                  {
                    if (*(v66 - 128)) {
                      *(v66 - 128) = 0;
                    }
                  }
                  else
                  {
                    uint64_t v69 = *((void *)v66 - 21);
                    if (v70 < 0)
                    {
                      if (v69) {
                        (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
                      }
                    }
                    else
                    {
                      (*(void (**)(char *))v69)(v66 - 168);
                    }
                  }
                  v66 -= 208;
                  v68 -= 208;
                }
                while (v66 != v65);
                uint64_t v67 = v107;
              }
              v108 = v65;
              operator delete(v67);
            }
            if (v105)
            {
              v106 = v105;
              operator delete(v105);
            }
            uint64_t v76 = (char *)v103;
            if (v103)
            {
              v77 = v104;
              v78 = v103;
              if (v104 != v103)
              {
                uint64_t v79 = v104 - 168;
                do
                {
                  int v81 = *((_DWORD *)v77 - 44);
                  if (v81 == v81 >> 31)
                  {
                    if (*(v77 - 128)) {
                      *(v77 - 128) = 0;
                    }
                  }
                  else
                  {
                    uint64_t v80 = *((void *)v77 - 21);
                    if (v81 < 0)
                    {
                      if (v80) {
                        (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
                      }
                    }
                    else
                    {
                      (*(void (**)(char *))v80)(v77 - 168);
                    }
                  }
                  v77 -= 208;
                  v79 -= 208;
                }
                while (v77 != v76);
                v78 = v103;
              }
              v104 = v76;
              operator delete(v78);
            }
            if (v114)
            {
              v115 = v114;
              operator delete(v114);
            }
            int v82 = (char *)v112;
            if (v112)
            {
              uint64_t v83 = v113;
              uint64_t v75 = v112;
              if (v113 != v112)
              {
                uint64_t v84 = v113 - 168;
                do
                {
                  int v86 = *((_DWORD *)v83 - 44);
                  if (v86 == v86 >> 31)
                  {
                    if (*(v83 - 128)) {
                      *(v83 - 128) = 0;
                    }
                  }
                  else
                  {
                    uint64_t v85 = *((void *)v83 - 21);
                    if (v86 < 0)
                    {
                      if (v85) {
                        (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
                      }
                    }
                    else
                    {
                      (*(void (**)(char *))v85)(v83 - 168);
                    }
                  }
                  v83 -= 208;
                  v84 -= 208;
                }
                while (v83 != v82);
                uint64_t v75 = v112;
              }
              v113 = v82;
              goto LABEL_143;
            }
            goto LABEL_144;
          }
LABEL_103:
          sub_100235BA8(v102, (uint64_t)&v107);
          a3 = (void **)v101;
          uint64_t v71 = operator new(0x108uLL);
          v71[1] = 0;
          v71[2] = 0;
          void *v71 = off_100462658;
          sub_100245818((uint64_t)&v112, (uint64_t)(v71 + 3), (uint64_t)&v121, (uint64_t)&v107);
          *long long v101 = v71 + 3;
          v101[1] = v71;
          uint64_t v72 = __p;
          uint64_t v6 = v100;
          if (__p)
          {
            do
            {
              long long v73 = v72;
              uint64_t v72 = (void *)*v72;
              long long v74 = (std::__shared_weak_count *)v73[3];
              if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
              operator delete(v73);
            }
            while (v72);
          }
          uint64_t v75 = v107;
          v107 = 0;
          if (v75) {
LABEL_143:
          }
            operator delete(v75);
LABEL_144:
          if (v116)
          {
            v117 = v116;
            operator delete(v116);
          }
          int v87 = v119;
          if (v119)
          {
            long long v88 = v120;
            int v63 = v119;
            if (v120 != v119)
            {
              uint64_t v89 = v120 - 168;
              do
              {
                int v91 = *((_DWORD *)v88 - 44);
                if (v91 == v91 >> 31)
                {
                  if (*(v88 - 128)) {
                    *(v88 - 128) = 0;
                  }
                }
                else
                {
                  uint64_t v90 = *((void *)v88 - 21);
                  if (v91 < 0)
                  {
                    if (v90) {
                      (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
                    }
                  }
                  else
                  {
                    (*(void (**)(char *))v90)(v88 - 168);
                  }
                }
                v88 -= 208;
                v89 -= 208;
              }
              while (v88 != v87);
              int v63 = v119;
            }
            v120 = v87;
            goto LABEL_159;
          }
          goto LABEL_160;
        }
      }
      if (v117 < v118)
      {
        *(void *)v117 = 0x3FF0000000000000;
        uint64_t v33 = (uint64_t)(v24 + 8);
LABEL_80:
        v117 = (char *)v33;
        ++v20;
        goto LABEL_29;
      }
      uint64_t v34 = v116;
      uint64_t v35 = (v117 - v116) >> 3;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61) {
        sub_1000A9108();
      }
      uint64_t v37 = v118 - v116;
      if ((v118 - v116) >> 2 > v36) {
        unint64_t v36 = v37 >> 2;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        if (v38 >> 61) {
          sub_1000A6A10();
        }
        int v39 = operator new(8 * v38);
        uint64_t v40 = &v39[8 * v35];
        *(void *)uint64_t v40 = 0x3FF0000000000000;
        uint64_t v33 = (uint64_t)(v40 + 8);
        if (v24 == v34) {
          goto LABEL_78;
        }
      }
      else
      {
        int v39 = 0;
        uint64_t v40 = (char *)(8 * v35);
        *(void *)(8 * v35) = 0x3FF0000000000000;
        uint64_t v33 = 8 * v35 + 8;
        if (v24 == v34)
        {
LABEL_78:
          v116 = v40;
          v117 = (char *)v33;
          v118 = &v39[8 * v38];
          if (v34) {
            operator delete(v34);
          }
          goto LABEL_80;
        }
      }
      unint64_t v50 = v24 - 8 - v34;
      if (v50 < 0x58) {
        goto LABEL_185;
      }
      if ((unint64_t)(v34 - v39) < 0x20) {
        goto LABEL_185;
      }
      uint64_t v51 = (v50 >> 3) + 1;
      uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
      BOOL v53 = &v24[-v52];
      v40 -= v52;
      uint64_t v54 = &v39[8 * v35 - 16];
      long long v55 = v24 - 16;
      uint64_t v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v57 = *(_OWORD *)v55;
        *(v54 - 1) = *((_OWORD *)v55 - 1);
        *uint64_t v54 = v57;
        v54 -= 2;
        v55 -= 32;
        v56 -= 4;
      }
      while (v56);
      long long v24 = v53;
      if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_185:
        do
        {
          uint64_t v58 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v40 - 1) = v58;
          v40 -= 8;
        }
        while (v24 != v34);
      }
      goto LABEL_78;
    }
    sub_100235BA8(v102, (uint64_t)&v107);
    int v59 = operator new(0x108uLL);
    v59[1] = 0;
    v59[2] = 0;
    *int v59 = off_100462658;
    sub_100245818((uint64_t)&v112, (uint64_t)(v59 + 3), (uint64_t)&v121, (uint64_t)&v107);
    *a3 = v59 + 3;
    a3[1] = v59;
    uint64_t v60 = __p;
    if (__p)
    {
      do
      {
        int v61 = v60;
        uint64_t v60 = (void *)*v60;
        long long v62 = (std::__shared_weak_count *)v61[3];
        if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
        operator delete(v61);
      }
      while (v60);
    }
    int v63 = v107;
    v107 = 0;
    if (v63) {
LABEL_159:
    }
      operator delete(v63);
LABEL_160:
    uint64_t v92 = (uint64_t)*a3;
    uint64_t v93 = sub_1002AEB6C(*a3);
    sub_10009FBAC((void **)(a1 + 168), v93);
    std::string v94 = a3[1];
    if (v94) {
      atomic_fetch_add_explicit(v94 + 1, 1uLL, memory_order_relaxed);
    }
    *(void *)(a1 + 2144) = v92;
    v95 = *(std::__shared_weak_count **)(a1 + 2152);
    *(void *)(a1 + 2152) = v94;
    if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
      if (*(unsigned char *)(a1 + 2160))
      {
LABEL_166:
        *(void *)(a1 + 2168) = v6;
        v96 = v121;
        if (v121)
        {
          v97 = v122;
          v98 = v121;
          if (v122 != v121)
          {
            do
            {
              v99 = (std::__shared_weak_count *)*((void *)v97 - 1);
              if (v99)
              {
                if (!atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                  std::__shared_weak_count::__release_weak(v99);
                }
              }
              v97 -= 16;
            }
            while (v97 != v96);
            v98 = v121;
          }
          v122 = v96;
          operator delete(v98);
        }
        return;
      }
    }
    else if (*(unsigned char *)(a1 + 2160))
    {
      goto LABEL_166;
    }
    *(unsigned char *)(a1 + 216sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
    goto LABEL_166;
  }
  uint64_t v10 = *(void **)(a1 + 2152);
  *a3 = *(void **)(a1 + 2144);
  a3[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
  }
}

void sub_100238040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  std::__shared_weak_count::~__shared_weak_count(v29);
  operator delete(v32);
  sub_10023357C(&a20);
  sub_10023357C(&a13);
  sub_10023357C(&a29);
  uint64_t v33 = *(void **)(v30 - 168);
  if (v33)
  {
    *(void *)(v30 - 16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v33;
    operator delete(v33);
  }
  sub_1002329B0((void **)(v30 - 144));
  sub_1000BA884(a11);
  sub_1000D8DD8((void **)(v30 - 120));
  _Unwind_Resume(a1);
}

void sub_100238184(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 648) || a2 - *(void *)(a1 + 656) >= *(void *)(a1 + 16))
  {
    int v4 = 0;
    if (!*(unsigned char *)(a1 + 1984)) {
      goto LABEL_5;
    }
LABEL_9:
    uint64_t v6 = *(void *)(a1 + 1992);
    *(unsigned char *)(a1 + 2176) = v6 < a2;
    if (*(unsigned char *)(a1 + 2000))
    {
      uint64_t v5 = *(void *)(a1 + 2008);
      *(unsigned char *)(a1 + 2177) = v5 < a2;
      if (v6 >= a2)
      {
        if (v5 >= a2) {
          goto LABEL_52;
        }
LABEL_24:
        uint64_t v20 = sub_10002BE50();
        int v21 = v20;
        unsigned __int8 v22 = atomic_load((unsigned __int8 *)v20 + 26);
        if ((v22 & 1) == 0 && !*((unsigned char *)v20 + 16))
        {
          *((_DWORD *)v20 + 5) = sub_100058BC0((uint64_t)v20, (unsigned int *)v20 + 3);
          *((unsigned char *)v21 + 16) = 1;
          atomic_store(1u, (unsigned __int8 *)v21 + 26);
        }
        double v23 = (double)(a2 - v5 + 1000000000 * *((int *)v21 + 5)) / 1000000000.0;
        if (0xEEEEEEEEEEEEEEEFLL * (uint64_t)v23 + 0x888888888888888 <= 0x1111111111111110)
        {
          if (v23 >= 30.0) {
            int v24 = 1;
          }
          else {
            int v24 = 3;
          }
          if (v23 < 60.0) {
            int v25 = v24;
          }
          else {
            int v25 = 2;
          }
          if (v23 < 90.0) {
            unsigned int v26 = v25;
          }
          else {
            unsigned int v26 = 0;
          }
          std::to_string(&v47, (uint64_t)v23);
          unint64_t v27 = std::string::append(&v47, "s since we had wifi data last");
          long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v27->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v47.__r_.__value_.__l.__data_);
          }
          unint64_t v29 = sub_10036E200();
          uint64_t v30 = v29;
          unsigned __int8 v31 = atomic_load((unsigned __int8 *)v29 + 20);
          if ((v31 & 1) == 0 && !*((unsigned char *)v29 + 16))
          {
            *((unsigned char *)v29 + 17) = sub_100059C20((uint64_t)v29, (unsigned char *)v29 + 9);
            *((unsigned char *)v30 + 16) = 1;
            atomic_store(1u, (unsigned __int8 *)v30 + 20);
          }
          if (__p[23] >= 0) {
            uint64_t v32 = __p;
          }
          else {
            uint64_t v32 = *(unsigned char **)__p;
          }
          sub_10022E144(*((unsigned __int8 *)v30 + 17), v26, (uint64_t)"No WiFi data!", (uint64_t)v32, 5000000000);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (qword_10047BED8 == -1)
        {
          uint64_t v33 = qword_10047BEE0;
          if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
            goto LABEL_52;
          }
        }
        else
        {
          dispatch_once(&qword_10047BED8, &stru_100462220);
          uint64_t v33 = qword_10047BEE0;
          if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
            goto LABEL_52;
          }
        }
        *(_DWORD *)std::string __p = 134217984;
        *(double *)&__p[4] = v23;
        uint64_t v17 = "WARNING: no Wi-Fi data in %f";
        uint64_t v18 = v33;
        uint32_t v19 = 12;
LABEL_50:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, v17, __p, v19);
        goto LABEL_52;
      }
      uint64_t v6 = *(void *)(a1 + 1992);
    }
    else
    {
      *(unsigned char *)(a1 + 2177) = 0;
      if (v6 >= a2) {
        goto LABEL_52;
      }
    }
    uint64_t v7 = sub_10002BE50();
    uint64_t v8 = v7;
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)v7 + 26);
    if ((v9 & 1) == 0 && !*((unsigned char *)v7 + 16))
    {
      *((_DWORD *)v7 + 5) = sub_100058BC0((uint64_t)v7, (unsigned int *)v7 + 3);
      *((unsigned char *)v8 + 16) = 1;
      atomic_store(1u, (unsigned __int8 *)v8 + 26);
    }
    int v10 = *((_DWORD *)v8 + 5);
    if (*(unsigned char *)(a1 + 2000))
    {
      uint64_t v11 = *(void *)(a1 + 2008);
      uint64_t v12 = sub_10002BE50();
      uint64_t v13 = v12;
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)v12 + 26);
      if ((v14 & 1) == 0 && !*((unsigned char *)v12 + 16))
      {
        *((_DWORD *)v12 + 5) = sub_100058BC0((uint64_t)v12, (unsigned int *)v12 + 3);
        *((unsigned char *)v13 + 16) = 1;
        atomic_store(1u, (unsigned __int8 *)v13 + 26);
      }
      uint64_t v15 = a2 - v11 + 1000000000 * *((int *)v13 + 5);
      if (qword_10047BED8 == -1)
      {
LABEL_21:
        uint64_t v16 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
          goto LABEL_52;
        }
LABEL_22:
        *(_DWORD *)std::string __p = 134218240;
        *(double *)&__p[4] = (double)(a2 - v6 + 1000000000 * v10) / 1000000000.0;
        *(_WORD *)&__p[12] = 2048;
        *(double *)&__p[14] = (double)v15 / 1000000000.0;
        uint64_t v17 = "WARNING: no Wi-Fi scans in %f, no Wi-Fi data in %f";
        uint64_t v18 = v16;
        uint32_t v19 = 22;
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v15 = -1000000000;
      if (qword_10047BED8 == -1) {
        goto LABEL_21;
      }
    }
    dispatch_once(&qword_10047BED8, &stru_100462220);
    uint64_t v16 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_52;
    }
    goto LABEL_22;
  }
  if (*(unsigned char *)(a1 + 2179)) {
    return;
  }
  int v4 = 1;
  if (*(unsigned char *)(a1 + 1984)) {
    goto LABEL_9;
  }
LABEL_5:
  *(unsigned char *)(a1 + 2176) = 0;
  if (!*(unsigned char *)(a1 + 2000))
  {
    *(unsigned char *)(a1 + 2177) = 0;
    goto LABEL_52;
  }
  uint64_t v5 = *(void *)(a1 + 2008);
  *(unsigned char *)(a1 + 2177) = v5 < a2;
  if (v5 < a2) {
    goto LABEL_24;
  }
LABEL_52:
  sub_10023CE24(a1, a2, v4, __p);
  if (!__p[0]) {
    return;
  }
  sub_1000A1C74((_OWORD *)(a1 + 2184));
  sub_100243558(a1 + 224, *(void ***)(a1 + 224));
  uint64_t v34 = *(void *)(a1 + 264);
  for (uint64_t i = *(void *)(a1 + 272); i != v34; i -= 88)
  {
    if (*(unsigned char *)(i - 64)) {
      *(unsigned char *)(i - 64) = 0;
    }
  }
  *(void *)(a1 + 272) = v34;
  if (!v44)
  {
    *(unsigned char *)(a1 + 2179) = 1;
LABEL_69:
    uint64_t v37 = v43;
    unint64_t v38 = sub_10009C9F8();
    int v39 = v38;
    unsigned __int8 v40 = atomic_load((unsigned __int8 *)v38 + 26);
    if ((v40 & 1) == 0 && !*((unsigned char *)v38 + 16))
    {
      *((_DWORD *)v38 + 5) = sub_100058BC0((uint64_t)v38, (unsigned int *)v38 + 3);
      *((unsigned char *)v39 + 16) = 1;
      atomic_store(1u, (unsigned __int8 *)v39 + 26);
    }
    uint64_t v41 = v37 + 1000000000 * *((int *)v39 + 5);
    if (!*(unsigned char *)(a1 + 1968)) {
      *(unsigned char *)(a1 + 1968) = 1;
    }
    *(void *)(a1 + 1976) = v41;
    goto LABEL_75;
  }
  if (!*(unsigned char *)(a1 + 1968)) {
    goto LABEL_69;
  }
  if (*(void *)(a1 + 1976) < a2 && (v46 & 0x20) != 0 && !v45)
  {
    if (qword_10047BED8 == -1)
    {
      unint64_t v36 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_66;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100462220);
      unint64_t v36 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
LABEL_66:
        if (*(unsigned char *)(a1 + 1968)) {
          *(unsigned char *)(a1 + 1968) = 0;
        }
        goto LABEL_75;
      }
    }
    LODWORD(v47.__r_.__value_.__l.__data_) = 134349056;
    *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = a2;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Reset the force give-up timestamp at t=%{public}lld", (uint8_t *)&v47, 0xCu);
    goto LABEL_66;
  }
LABEL_75:
  if (!*(unsigned char *)(a1 + 648)) {
    *(unsigned char *)(a1 + 648) = 1;
  }
  *(void *)(a1 + 656) = a2;
  if (__p[0]) {
    sub_1001A0B70(&__p[8]);
  }
}

void sub_100238824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1002384F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_100238920(uint64_t a1, void *a2)
{
  if (qword_10047BED8 == -1)
  {
    int v4 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BED8, &stru_100462220);
  int v4 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    uint64_t v7 = a2[12];
    uint64_t v8 = a2[5];
    uint64_t v9 = a2[6];
    int v12 = 134219009;
    uint64_t v13 = v5;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = v7;
    __int16 v18 = 2049;
    uint64_t v19 = v8;
    __int16 v20 = 2049;
    uint64_t v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "receiveOutdoorPos = {timestampNanos=%lld,systemTimestampNanos=%lld,horizontalAccuracy=%f,latlon={ lat=%{private}.18f,lon=%{private}.18f }}", (uint8_t *)&v12, 0x34u);
  }
LABEL_4:
  std::mutex::lock((std::mutex *)(a1 + 1680));
  int v10 = *(void **)(a1 + 1744);
  for (uint64_t i = *(void **)(a1 + 1752); v10 != i; ++v10)
    (*(void (**)(void, void, void *))(*(void *)*v10 + 16))(*v10, a2[1], a2);
  std::mutex::unlock((std::mutex *)(a1 + 1680));
  sub_100238ACC(a1, (uint64_t)a2);
}

void sub_100238AB8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100238ACC(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 136) & 0x10) == 0) {
    goto LABEL_35;
  }
  std::to_string(&v79, 1u);
  int v4 = (const void **)(a2 + 64);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 87);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 87);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 72);
  }
  std::string::size_type size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  char v8 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v79.__r_.__value_.__l.__size_;
  }
  if (v6 == size)
  {
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v79;
    }
    else {
      uint64_t v9 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v4, v9, *(void *)(a2 + 72))) {
        goto LABEL_18;
      }
    }
    else if (*(unsigned char *)(a2 + 87))
    {
      int v10 = (unsigned __int8 *)(a2 + 64);
      while (*v10 == v9->__r_.__value_.__s.__data_[0])
      {
        ++v10;
        uint64_t v9 = (std::string *)((char *)v9 + 1);
        if (!--v5) {
          goto LABEL_33;
        }
      }
      goto LABEL_18;
    }
LABEL_33:
    BOOL v17 = 0;
    if ((v8 & 0x80) == 0) {
      goto LABEL_173;
    }
    goto LABEL_34;
  }
LABEL_18:
  std::to_string(&v78, 9u);
  uint64_t v11 = *(unsigned __int8 *)(a2 + 87);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 87);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 72);
  }
  std::string::size_type v13 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  char v14 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v13 = v78.__r_.__value_.__l.__size_;
  }
  if (v12 != v13) {
    goto LABEL_103;
  }
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v78;
  }
  else {
    uint64_t v15 = (std::string *)v78.__r_.__value_.__r.__words[0];
  }
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*v4, v15, *(void *)(a2 + 72))) {
      goto LABEL_103;
    }
  }
  else if (*(unsigned char *)(a2 + 87))
  {
    __int16 v16 = (unsigned __int8 *)(a2 + 64);
    while (*v16 == v15->__r_.__value_.__s.__data_[0])
    {
      ++v16;
      uint64_t v15 = (std::string *)((char *)v15 + 1);
      if (!--v11) {
        goto LABEL_118;
      }
    }
LABEL_103:
    std::to_string(&v77, 0x80u);
    uint64_t v50 = *(unsigned __int8 *)(a2 + 87);
    if ((v50 & 0x80u) == 0) {
      uint64_t v51 = *(unsigned __int8 *)(a2 + 87);
    }
    else {
      uint64_t v51 = *(void *)(a2 + 72);
    }
    std::string::size_type v52 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    char v53 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v52 = v77.__r_.__value_.__l.__size_;
    }
    if (v51 != v52) {
      goto LABEL_121;
    }
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v54 = &v77;
    }
    else {
      uint64_t v54 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    if ((v50 & 0x80) != 0)
    {
      if (memcmp(*v4, v54, *(void *)(a2 + 72))) {
        goto LABEL_121;
      }
    }
    else if (*(unsigned char *)(a2 + 87))
    {
      long long v55 = (unsigned __int8 *)(a2 + 64);
      while (*v55 == v54->__r_.__value_.__s.__data_[0])
      {
        ++v55;
        uint64_t v54 = (std::string *)((char *)v54 + 1);
        if (!--v50) {
          goto LABEL_136;
        }
      }
LABEL_121:
      std::to_string(&v76, 0x81u);
      uint64_t v56 = *(unsigned __int8 *)(a2 + 87);
      if ((v56 & 0x80u) == 0) {
        uint64_t v57 = *(unsigned __int8 *)(a2 + 87);
      }
      else {
        uint64_t v57 = *(void *)(a2 + 72);
      }
      std::string::size_type v58 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      char v59 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v58 = v76.__r_.__value_.__l.__size_;
      }
      if (v57 != v58) {
        goto LABEL_141;
      }
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v60 = &v76;
      }
      else {
        uint64_t v60 = (std::string *)v76.__r_.__value_.__r.__words[0];
      }
      if ((v56 & 0x80) != 0)
      {
        if (memcmp(*v4, v60, *(void *)(a2 + 72))) {
          goto LABEL_141;
        }
      }
      else if (*(unsigned char *)(a2 + 87))
      {
        int v61 = (unsigned __int8 *)(a2 + 64);
        while (*v61 == v60->__r_.__value_.__s.__data_[0])
        {
          ++v61;
          uint64_t v60 = (std::string *)((char *)v60 + 1);
          if (!--v56) {
            goto LABEL_160;
          }
        }
LABEL_141:
        std::to_string(&__p, 4u);
        uint64_t v62 = *(unsigned __int8 *)(a2 + 87);
        if ((v62 & 0x80u) == 0) {
          uint64_t v63 = *(unsigned __int8 *)(a2 + 87);
        }
        else {
          uint64_t v63 = *(void *)(a2 + 72);
        }
        std::string::size_type v64 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        int v65 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v64 = __p.__r_.__value_.__l.__size_;
        }
        if (v63 == v64)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((v62 & 0x80) != 0)
          {
            BOOL v17 = memcmp(*v4, p_p, *(void *)(a2 + 72)) != 0;
          }
          else if (*(unsigned char *)(a2 + 87))
          {
            uint64_t v67 = v62 - 1;
            int v68 = (unsigned __int8 *)(a2 + 64);
            do
            {
              int v70 = *v68++;
              int v69 = v70;
              int v71 = p_p->__r_.__value_.__s.__data_[0];
              p_p = (std::string *)((char *)p_p + 1);
              BOOL v17 = v69 != v71;
            }
            while (v69 == v71 && v67-- != 0);
          }
          else
          {
            BOOL v17 = 0;
          }
        }
        else
        {
          BOOL v17 = 1;
        }
        if (v65 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((*((unsigned char *)&v76.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_168:
          if ((*((unsigned char *)&v77.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_170;
          }
          goto LABEL_169;
        }
LABEL_167:
        operator delete(v76.__r_.__value_.__l.__data_);
        goto LABEL_168;
      }
LABEL_160:
      BOOL v17 = 0;
      if ((v59 & 0x80) == 0) {
        goto LABEL_168;
      }
      goto LABEL_167;
    }
LABEL_136:
    BOOL v17 = 0;
    if ((v53 & 0x80) == 0) {
      goto LABEL_170;
    }
LABEL_169:
    operator delete(v77.__r_.__value_.__l.__data_);
LABEL_170:
    if ((*((unsigned char *)&v78.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_172;
    }
    goto LABEL_171;
  }
LABEL_118:
  BOOL v17 = 0;
  if ((v14 & 0x80) == 0) {
    goto LABEL_172;
  }
LABEL_171:
  operator delete(v78.__r_.__value_.__l.__data_);
LABEL_172:
  if ((*((unsigned char *)&v79.__r_.__value_.__s + 23) & 0x80) == 0)
  {
LABEL_173:
    if (v17) {
      goto LABEL_174;
    }
LABEL_35:
    std::to_string(&v79, 0x80u);
    __int16 v18 = (const void **)(a2 + 64);
    uint64_t v19 = *(unsigned __int8 *)(a2 + 87);
    if ((v19 & 0x80u) == 0) {
      uint64_t v20 = *(unsigned __int8 *)(a2 + 87);
    }
    else {
      uint64_t v20 = *(void *)(a2 + 72);
    }
    std::string::size_type v21 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    int v22 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v21 = v79.__r_.__value_.__l.__size_;
    }
    if (v20 == v21)
    {
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v23 = &v79;
      }
      else {
        double v23 = (std::string *)v79.__r_.__value_.__r.__words[0];
      }
      if ((v19 & 0x80) != 0)
      {
        BOOL v32 = memcmp(*v18, v23, *(void *)(a2 + 72)) == 0;
        if ((v22 & 0x80000000) == 0) {
          goto LABEL_53;
        }
      }
      else if (*(unsigned char *)(a2 + 87))
      {
        uint64_t v24 = v19 - 1;
        int v25 = (unsigned __int8 *)(a2 + 64);
        do
        {
          int v27 = *v25++;
          int v26 = v27;
          int v29 = v23->__r_.__value_.__s.__data_[0];
          double v23 = (std::string *)((char *)v23 + 1);
          int v28 = v29;
          BOOL v30 = v24-- != 0;
          char v31 = v30;
          BOOL v32 = v26 == v28;
        }
        while (v26 == v28 && (v31 & 1) != 0);
        if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_53:
          if (v32) {
            goto LABEL_54;
          }
          goto LABEL_58;
        }
      }
      else
      {
        BOOL v32 = 1;
        if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_53;
        }
      }
    }
    else
    {
      BOOL v32 = 0;
      if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_53;
      }
    }
    operator delete(v79.__r_.__value_.__l.__data_);
    if (v32)
    {
LABEL_54:
      uint64_t v33 = a1 + 1208;
      if (!*(unsigned char *)(a1 + 1200))
      {
        sub_1000417D0(v33, a2);
        *(unsigned char *)(a1 + 120sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
        if (qword_10047BED8 == -1) {
          goto LABEL_91;
        }
        goto LABEL_100;
      }
LABEL_89:
      sub_1001B8394(v33, a2);
LABEL_90:
      if (qword_10047BED8 == -1) {
        goto LABEL_91;
      }
      goto LABEL_100;
    }
LABEL_58:
    std::to_string(&v79, 0x81u);
    uint64_t v34 = *(unsigned __int8 *)(a2 + 87);
    if ((v34 & 0x80u) == 0) {
      uint64_t v35 = *(unsigned __int8 *)(a2 + 87);
    }
    else {
      uint64_t v35 = *(void *)(a2 + 72);
    }
    std::string::size_type v36 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    int v37 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v36 = v79.__r_.__value_.__l.__size_;
    }
    if (v35 != v36)
    {
      BOOL v45 = 0;
      if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_87;
      }
      goto LABEL_77;
    }
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v38 = &v79;
    }
    else {
      unint64_t v38 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    if ((v34 & 0x80) != 0)
    {
      BOOL v45 = memcmp(*v18, v38, *(void *)(a2 + 72)) == 0;
    }
    else
    {
      if (!*(unsigned char *)(a2 + 87))
      {
        BOOL v45 = 1;
        if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_87:
          if (v45)
          {
LABEL_88:
            uint64_t v33 = a1 + 1360;
            if (!*(unsigned char *)(a1 + 1352))
            {
              sub_1000417D0(v33, a2);
              *(unsigned char *)(a1 + 1352) = 1;
              if (qword_10047BED8 == -1)
              {
LABEL_91:
                char v46 = qword_10047BEE0;
                if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_93;
                }
                goto LABEL_92;
              }
LABEL_100:
              dispatch_once(&qword_10047BED8, &stru_100462220);
              char v46 = qword_10047BEE0;
              if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
              {
LABEL_93:
                if (*(unsigned char *)(a1 + 1536))
                {
                  long long v48 = *(void **)(a1 + 1568);
                  if (v48)
                  {
                    *(void *)(a1 + 1576) = v48;
                    operator delete(v48);
                  }
                  uint64_t v49 = *(void **)(a1 + 1544);
                  if (v49)
                  {
                    *(void *)(a1 + 1552) = v49;
                    operator delete(v49);
                  }
                  *(unsigned char *)(a1 + 1536) = 0;
                }
                return;
              }
LABEL_92:
              std::string::size_type v47 = *(void *)(a2 + 96);
              LODWORD(v79.__r_.__value_.__l.__data_) = 134217984;
              *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words + 4) = v47;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "fRegionalCLLocationTracker with horizontalAccuracy %f", (uint8_t *)&v79, 0xCu);
              goto LABEL_93;
            }
            goto LABEL_89;
          }
LABEL_78:
          sub_100236060((unsigned char *)(a1 + 896), a2);
          goto LABEL_90;
        }
LABEL_77:
        operator delete(v79.__r_.__value_.__l.__data_);
        if (v45) {
          goto LABEL_88;
        }
        goto LABEL_78;
      }
      uint64_t v39 = v34 - 1;
      do
      {
        int v41 = *(unsigned __int8 *)v18;
        __int16 v18 = (const void **)((char *)v18 + 1);
        int v40 = v41;
        int v43 = v38->__r_.__value_.__s.__data_[0];
        unint64_t v38 = (std::string *)((char *)v38 + 1);
        int v42 = v43;
        BOOL v30 = v39-- != 0;
        char v44 = v30;
        BOOL v45 = v40 == v42;
      }
      while (v40 == v42 && (v44 & 1) != 0);
    }
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_87;
    }
    goto LABEL_77;
  }
LABEL_34:
  operator delete(v79.__r_.__value_.__l.__data_);
  if (!v17) {
    goto LABEL_35;
  }
LABEL_174:
  if (qword_10047BED8 == -1)
  {
    long long v73 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      return;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100462220);
    long long v73 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      return;
    }
  }
  if (*(char *)(a2 + 87) >= 0) {
    std::string::size_type v74 = a2 + 64;
  }
  else {
    std::string::size_type v74 = *(void *)(a2 + 64);
  }
  LODWORD(v79.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words + 4) = v74;
  _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "dropped a measurement with provider %s", (uint8_t *)&v79, 0xCu);
}

void sub_1002391CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if (a23 < 0)
    {
LABEL_5:
      operator delete(a18);
      if (a29 < 0)
      {
LABEL_8:
        operator delete(a24);
        if ((*(char *)(v29 - 57) & 0x80000000) == 0) {
LABEL_12:
        }
          _Unwind_Resume(a1);
LABEL_11:
        operator delete(*(void **)(v29 - 80));
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((*(char *)(v29 - 57) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else if (a23 < 0)
  {
    goto LABEL_5;
  }
  if (a29 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

void sub_100239270(uint64_t a1, uint64_t a2)
{
  if (qword_10047BED8 == -1)
  {
    int v4 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_8;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100462220);
    int v4 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_8;
    }
  }
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  sub_100020B9C(",", (char *)(a2 + 48), (uint64_t)__p);
  if (v13 >= 0) {
    char v8 = __p;
  }
  else {
    char v8 = (void **)__p[0];
  }
  *(_DWORD *)long long buf = 134218755;
  uint64_t v15 = v5;
  __int16 v16 = 2049;
  uint64_t v17 = v7;
  __int16 v18 = 2049;
  uint64_t v19 = v6;
  __int16 v20 = 2081;
  std::string::size_type v21 = v8;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "receiveLocalizerUniverseState = {timestampNanos=%lld,latlon={ lat=%{private}.18f,lon=%{private}.18f }, locationGroupIds={%{private}s} }", buf, 0x2Au);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
LABEL_8:
  uint64_t v9 = (std::mutex *)(a1 + 1680);
  std::mutex::lock((std::mutex *)(a1 + 1680));
  int v10 = *(void **)(a1 + 1744);
  for (uint64_t i = *(void **)(a1 + 1752); v10 != i; ++v10)
    (*(void (**)(void, uint64_t))(*(void *)*v10 + 24))(*v10, a2);
  std::mutex::unlock(v9);
}

void sub_10023942C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100239440(uint64_t a1, uint64_t a2)
{
  if (qword_10047BED8 == -1)
  {
    int v4 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BED8, &stru_100462220);
  int v4 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 96);
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    int v22 = 134219009;
    uint64_t v23 = v5;
    __int16 v24 = 2048;
    uint64_t v25 = v6;
    __int16 v26 = 2048;
    uint64_t v27 = v7;
    __int16 v28 = 2049;
    uint64_t v29 = v8;
    __int16 v30 = 2049;
    uint64_t v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "receiveGPS = {timestampNanos=%lld,systemTiemstampNanos=%lld,horizontalAccuracy=%f,latlon={ lat=%{private}.18f, lon=%{private}.18f} }", (uint8_t *)&v22, 0x34u);
  }
LABEL_4:
  sub_1002FF17C(a2, (uint64_t)&v22);
  sub_100238ACC(a1, (uint64_t)&v22);
  sub_100041664((uint64_t)&v22);
  if ((sub_1001E2094(a2) & 1) == 0)
  {
    if (qword_10047BED8 == -1)
    {
      uint64_t v12 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100462220);
      uint64_t v12 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return;
      }
    }
    uint64_t v15 = *(void *)(a2 + 64);
    uint64_t v14 = a2 + 64;
    uint64_t v13 = v15;
    if (*(char *)(v14 + 23) >= 0) {
      uint64_t v13 = v14;
    }
    int v22 = 136315138;
    uint64_t v23 = v13;
    uint64_t v11 = "dropped a measurement with provider %s";
    __int16 v16 = v12;
    uint32_t v17 = 12;
    goto LABEL_35;
  }
  if (!**(unsigned char **)(a1 + 248) || *(unsigned char *)(a1 + 2178))
  {
    if (*(int *)(a2 + 124) < 90)
    {
      if (qword_10047BED8 == -1)
      {
        uint64_t v10 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        goto LABEL_10;
      }
      dispatch_once(&qword_10047BED8, &stru_100462220);
      uint64_t v10 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_10:
        LOWORD(v22) = 0;
        uint64_t v11 = "Ignoring GPS-coarse.";
LABEL_34:
        __int16 v16 = v10;
        uint32_t v17 = 2;
LABEL_35:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v11, (uint8_t *)&v22, v17);
        return;
      }
      return;
    }
    if (*(unsigned char *)(a1 + 688))
    {
      if (*(void *)(a2 + 8) <= *(void *)(a1 + 704))
      {
        if (qword_10047BED8 == -1)
        {
          uint64_t v10 = qword_10047BEE0;
          if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
            return;
          }
        }
        else
        {
          dispatch_once(&qword_10047BED8, &stru_100462220);
          uint64_t v10 = qword_10047BEE0;
          if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
            return;
          }
        }
        LOWORD(v22) = 0;
        uint64_t v11 = "Ignoring GPS because older than last precise location";
        goto LABEL_34;
      }
      sub_1001AB5FC(a1 + 696, a2);
    }
    else
    {
      sub_1001AB5F8(a1 + 696, a2);
      *(unsigned char *)(a1 + 688) = 1;
    }
    if (qword_10047BED8 == -1)
    {
      __int16 v18 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
LABEL_23:
        if (*(unsigned char *)(a1 + 1536))
        {
          __int16 v20 = *(void **)(a1 + 1568);
          if (v20)
          {
            *(void *)(a1 + 1576) = v20;
            operator delete(v20);
          }
          std::string::size_type v21 = *(void **)(a1 + 1544);
          if (v21)
          {
            *(void *)(a1 + 1552) = v21;
            operator delete(v21);
          }
          *(unsigned char *)(a1 + 1536) = 0;
        }
        if (sub_1002A3C4C(*(void *)(a1 + 248)))
        {
          sub_100256DF0(*(void *)(a1 + 176), a2);
          *(unsigned char *)(a1 + 304) = 1;
        }
        return;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100462220);
      __int16 v18 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_23;
      }
    }
    uint64_t v19 = *(void *)(a1 + 792);
    int v22 = 134217984;
    uint64_t v23 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "fLastGpsLikePreciseLocation gps with accuracy %f", (uint8_t *)&v22, 0xCu);
    goto LABEL_23;
  }
}

void sub_100239838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_100239850(uint64_t a1, uint64_t a2)
{
  double result = sub_1000656E4();
  uint64_t v5 = result;
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)result + 20);
  if ((v6 & 1) != 0 || *((unsigned char *)result + 16))
  {
    if (!*((unsigned char *)result + 17)) {
      return result;
    }
  }
  else
  {
    double result = (uint64_t *)sub_100059C20((uint64_t)result, (unsigned char *)result + 9);
    v5[17] = (_BYTE)result;
    v5[16] = 1;
    atomic_store(1u, v5 + 20);
    if (!(_BYTE)result) {
      return result;
    }
  }
  double result = (uint64_t *)sub_10035D0F8(a2);
  if (result)
  {
    sub_100264574((uint64_t)&v39, a2);
    uint64_t v7 = (long long *)(v43 + 8);
    if (v42 >= 0) {
      uint64_t v7 = &v44;
    }
    if (v42 == v42 >> 31) {
      uint64_t v8 = (uint64_t *)v49 + 1;
    }
    else {
      uint64_t v8 = (uint64_t *)v7;
    }
    uint64_t v9 = *v8;
    uint64_t v10 = sub_10009C8D8();
    uint64_t v11 = v10;
    unsigned __int8 v12 = atomic_load((unsigned __int8 *)v10 + 26);
    if ((v12 & 1) == 0 && !*((unsigned char *)v10 + 16))
    {
      *((_DWORD *)v10 + 5) = sub_100058BC0((uint64_t)v10, (unsigned int *)v10 + 3);
      *((unsigned char *)v11 + 16) = 1;
      atomic_store(1u, (unsigned __int8 *)v11 + 26);
    }
    uint64_t v13 = v9 + 1000000000 * *((int *)v11 + 5);
    if (*(unsigned char *)(a1 + 2016))
    {
      *(void *)(a1 + 2024) = v13;
      int v14 = v39;
      int v15 = v39 >> 31;
      if (v39 >> 31 == v39)
      {
LABEL_15:
        *(void *)&long long v27 = v40;
        int v15 = v14;
        goto LABEL_20;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 2016) = 1;
      *(void *)(a1 + 2024) = v13;
      int v14 = v39;
      int v15 = v39 >> 31;
      if (v39 >> 31 == v39) {
        goto LABEL_15;
      }
    }
    long long v27 = v40;
    int v28 = v41;
LABEL_20:
    int v26 = v15 ^ v14;
    int v16 = v42;
    int v17 = v42 >> 31;
    if (v42 >> 31 == v42)
    {
      int v18 = (int)v43 >> 31;
      if ((int)v43 >> 31 == v43)
      {
        *(void *)&long long v31 = v44;
        int v18 = v43;
      }
      else
      {
        long long v31 = v44;
        int v32 = v45;
      }
      LODWORD(v3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v18 ^ v43;
      uint64_t v33 = v46;
      char v34 = 0;
      if (v47)
      {
        int v35 = v48;
        char v34 = 1;
      }
      long long v36 = v49[0];
      long long v37 = v49[1];
      int v38 = v50;
    }
    else
    {
      if (v42 >= 0) {
        uint64_t v19 = &v43;
      }
      else {
        uint64_t v19 = (uint64_t *)v43;
      }
      sub_1001AC878(&v30, v19);
      int v16 = v42;
      int v17 = v42 >> 31;
    }
    int v29 = v17 ^ v16;
    sub_10023B26C(&__p, (uint64_t)&v26, 1uLL);
    __int16 v20 = (uint64_t *)(v43 + 8);
    if (v42 >= 0) {
      __int16 v20 = (uint64_t *)&v44;
    }
    if (v42 == v42 >> 31) {
      std::string::size_type v21 = (uint64_t *)v49 + 1;
    }
    else {
      std::string::size_type v21 = v20;
    }
    uint64_t v22 = *v21;
    uint64_t v23 = *(void *)(a1 + 144);
    v24[0] = *(void *)(a1 + 136);
    v24[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    sub_100239DC4(a1, (uint64_t *)&__p, 0, v22, v24);
  }
  return result;
}

void sub_100239D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x100239924);
  }
  _Unwind_Resume(exception_object);
}

void sub_100239DC4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = sub_10036E170();
  uint64_t v11 = v10;
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)v10 + 20);
  if ((v12 & 1) != 0 || *((unsigned char *)v10 + 16))
  {
    int v13 = *((unsigned __int8 *)v10 + 17);
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    std::string v76 = 0;
    std::string v77 = 0;
    uint64_t v75 = 0;
    uint64_t v16 = v14 - v15;
    if (!v16) {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v39 = sub_100059C20((uint64_t)v10, (unsigned char *)v10 + 9);
    *((unsigned char *)v11 + 17) = v39;
    *((unsigned char *)v11 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v11 + 20);
    int v13 = v39;
    uint64_t v41 = *a2;
    uint64_t v40 = a2[1];
    std::string v76 = 0;
    std::string v77 = 0;
    uint64_t v75 = 0;
    uint64_t v16 = v40 - v41;
    if (!v16) {
      goto LABEL_6;
    }
  }
  uint64_t v17 = v16 / 208;
  if ((unint64_t)(v16 / 208) >> 61) {
    sub_1000A9108();
  }
  uint64_t v75 = (uint64_t ***)operator new(8 * v17);
  std::string v77 = &v75[v17];
  memset_pattern16(v75, &unk_1003F7A00, 8 * v17);
  std::string v76 = v77;
LABEL_6:
  sub_100232C1C(v68, &v75, a2, a4);
  if (v75)
  {
    std::string v76 = v75;
    operator delete(v75);
  }
  (*(void (**)(void, uint64_t, void **))(*(void *)*a5 + 24))(*a5, a3, v68);
  if (*(unsigned char *)(a1 + 1536))
  {
    int v18 = *(void **)(a1 + 1568);
    if (v18)
    {
      *(void *)(a1 + 1576) = v18;
      operator delete(v18);
    }
    uint64_t v19 = *(void **)(a1 + 1544);
    if (v19)
    {
      *(void *)(a1 + 1552) = v19;
      operator delete(v19);
    }
    *(unsigned char *)(a1 + 1536) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __int16 v20 = (char *)v68[0];
  if (v68[0])
  {
    std::string::size_type v21 = (char *)v68[1];
    uint64_t v22 = v68[0];
    if (v68[1] != v68[0])
    {
      uint64_t v23 = (char *)v68[1] - 168;
      do
      {
        int v25 = *((_DWORD *)v21 - 44);
        if (v25 == v25 >> 31)
        {
          if (*(v21 - 128)) {
            *(v21 - 128) = 0;
          }
        }
        else
        {
          uint64_t v24 = *((void *)v21 - 21);
          if (v25 < 0)
          {
            if (v24) {
              (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
            }
          }
          else
          {
            (*(void (**)(char *))v24)(v21 - 168);
          }
        }
        v21 -= 208;
        v23 -= 208;
      }
      while (v21 != v20);
      uint64_t v22 = v68[0];
    }
    v68[1] = v20;
    operator delete(v22);
  }
  if (!sub_10025818C(*(void *)(a1 + 176)))
  {
    uint64_t v26 = *(void *)(a1 + 176);
    sub_1002374E8(a1, a4, (void **)v68);
    uint64_t v75 = 0;
    std::string v76 = 0;
    sub_100254E20(v26, a4, v68, (uint64_t *)&v75, a1 + 2184);
    long long v27 = (std::__shared_weak_count *)v76;
    if (v76 && !atomic_fetch_add((atomic_ullong *volatile)v76 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
    int v28 = (std::__shared_weak_count *)v68[1];
    if (v68[1] && !atomic_fetch_add((atomic_ullong *volatile)v68[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_1002336E8(a2, &v73);
  if (v74[0] == v74[1])
  {
LABEL_55:
    sub_100257E8C(*(void *)(a1 + 176), (uint64_t)v63);
    sub_1001F43CC((uint64_t)&v62, (uint64_t)v63);
    v60[0] = 0;
    v60[1] = 0;
    uint64_t v61 = 0;
    uint64_t v75 = 0;
    std::string v76 = 0;
    std::string v77 = 0;
    unint64_t prime = vcvtps_u32_f32((float)v66 / v67);
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = v64;
    if (prime > *(void *)&v64) {
      goto LABEL_60;
    }
    if (prime < *(void *)&v64)
    {
      unint64_t v36 = vcvtps_u32_f32((float)v66 / v67);
      if (*(void *)&v64 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v64), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        unint64_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_60:
      }
        sub_10006338C((uint64_t)v63, prime);
    }
    int v42 = v65;
    if (v65)
    {
      uint64_t v43 = v76;
      do
      {
        while (v43 >= v77)
        {
          uint64_t v43 = (uint64_t ***)sub_100017420((uint64_t)&v75, v42 + 2);
          std::string v76 = v43;
          int v42 = (void *)*v42;
          if (!v42) {
            goto LABEL_80;
          }
        }
        *uint64_t v43 = (uint64_t **)v42[2];
        uint64_t v44 = v42[3];
        v43[1] = (uint64_t **)v44;
        if (v44) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
        }
        v43 += 2;
        std::string v76 = v43;
        int v42 = (void *)*v42;
      }
      while (v42);
    }
LABEL_80:
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 32) + 32))(v68);
    sub_1002703F8(v68, &v75, (uint64_t *)buf);
    int v45 = (char *)v60[0];
    if (v60[0])
    {
      uint64_t v46 = (char *)v60[1];
      char v47 = v60[0];
      if (v60[1] != v60[0])
      {
        int v48 = (char *)v60[1] - 168;
        do
        {
          int v50 = *((_DWORD *)v46 - 44);
          if (v50 == v50 >> 31)
          {
            if (*(v46 - 128)) {
              *(v46 - 128) = 0;
            }
          }
          else
          {
            uint64_t v49 = *((void *)v46 - 21);
            if (v50 < 0)
            {
              if (v49) {
                (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
              }
            }
            else
            {
              (*(void (**)(char *))v49)(v46 - 168);
            }
          }
          v46 -= 208;
          v48 -= 208;
        }
        while (v46 != v45);
        char v47 = v60[0];
      }
      v60[1] = v45;
      operator delete(v47);
    }
    *(_OWORD *)uint64_t v60 = *(_OWORD *)buf;
    uint64_t v61 = *(void *)&buf[16];
    memset(buf, 0, sizeof(buf));
    uint64_t v51 = v69;
    if (v69)
    {
      do
      {
        std::string::size_type v52 = (void *)*v51;
        sub_1002426B8(v51 + 2);
        operator delete(v51);
        uint64_t v51 = v52;
      }
      while (v52);
    }
    char v53 = v68[0];
    v68[0] = 0;
    if (v53) {
      operator delete(v53);
    }
    uint64_t v54 = v75;
    if (v75)
    {
      long long v55 = v76;
      uint64_t v56 = v75;
      if (v76 != v75)
      {
        do
        {
          uint64_t v57 = (std::__shared_weak_count *)*(v55 - 1);
          if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
          v55 -= 2;
        }
        while (v55 != v54);
        uint64_t v56 = v75;
      }
      std::string v76 = v54;
      operator delete(v56);
    }
    uint64_t v58 = *(void *)(a1 + 288);
    uint64_t v59 = sub_10009BD68(*(void *)(a1 + 176));
    (*(void (**)(uint64_t))(*(void *)v59 + 64))(v59);
    if (v13) {
      sub_100271714(v58, (uint64_t *)&v62);
    }
    sub_100318E34((uint64_t **)(a1 + 168), a4, (uint64_t *)v60);
    sub_100319008((void *)(a1 + 168));
    sub_100271934(v58);
  }
  sub_10000C898((uint64_t)v68);
  *(_DWORD *)((char *)__p + *(v69 - 3)) |= 0x800u;
  sub_100243E0C((uint64_t *)v74);
  if (SHIBYTE(v77) >= 0) {
    int v29 = &v75;
  }
  else {
    int v29 = (uint64_t ****)v75;
  }
  if (SHIBYTE(v77) >= 0) {
    uint64_t v30 = HIBYTE(v77);
  }
  else {
    uint64_t v30 = (uint64_t)v76;
  }
  sub_10002986C(&v69, (uint64_t)v29, v30);
  if (SHIBYTE(v77) < 0) {
    operator delete(v75);
  }
  if (qword_10047BED8 == -1)
  {
    long long v31 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_47;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100462220);
    long long v31 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
    {
LABEL_47:
      std::stringbuf::str();
      if (SHIBYTE(v77) >= 0) {
        int v32 = &v75;
      }
      else {
        int v32 = (uint64_t ****)v75;
      }
      *(_DWORD *)long long buf = 134218242;
      *(void *)&uint8_t buf[4] = a4;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "WARNING: Bad RSSI values @ t=%lld: %s", buf, 0x16u);
      if (SHIBYTE(v77) < 0) {
        operator delete(v75);
      }
    }
  }
  *(void **)((char *)v68
  int v69 = v33;
  if (v72 < 0) {
    operator delete(v71);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  goto LABEL_55;
}

void sub_10023ADE0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x10023A3CCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10023B1B4(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == v2 >> 31)
  {
    if (*(unsigned char *)(a1 + 80)) {
      *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v2 < 0)
  {
    if (!v4) {
      return a1;
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    return a1;
  }
  else
  {
    (*(void (**)(uint64_t))v4)(a1 + 40);
    return a1;
  }
}

void *sub_10023B26C(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x13B13B13B13B13CLL) {
      sub_1000A9108();
    }
    uint64_t v7 = (char *)operator new(208 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[208 * a3];
    a1[1] = sub_100243968(v4, a2, a2 + 208 * a3, (uint64_t)v7);
  }
  return a1;
}

void sub_10023B318(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_1003A5970((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10023B348(int64x2_t *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 && *(unsigned char *)(a3 + 48) && *(_DWORD *)(a3 + 52)) {
    return;
  }
  if (!a1[136].i8[0])
  {
    double v13 = 0.0;
    goto LABEL_13;
  }
  uint64_t v8 = sub_10002BE50();
  uint64_t v9 = v8;
  unsigned __int8 v10 = atomic_load((unsigned __int8 *)v8 + 26);
  if ((v10 & 1) == 0 && !*((unsigned char *)v8 + 16))
  {
    *((_DWORD *)v8 + 5) = sub_100058BC0((uint64_t)v8, (unsigned int *)v8 + 3);
    *((unsigned char *)v9 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v9 + 26);
  }
  double v11 = (double)(uint64_t)(a2 - a1[124].i64[1] + 1000000000 * *((int *)v9 + 5));
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100462220);
    unsigned __int8 v12 = qword_10047BEE0;
    double v13 = v11 / 1000000000.0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  unsigned __int8 v12 = qword_10047BEE0;
  double v13 = v11 / 1000000000.0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_10:
    *(_DWORD *)long long buf = 134217984;
    *(double *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Got a scan after %f seconds", buf, 0xCu);
  }
LABEL_11:
  a1[136].i8[0] = 0;
LABEL_13:
  uint64_t v14 = sub_10002BE50();
  uint64_t v15 = v14;
  unsigned __int8 v16 = atomic_load((unsigned __int8 *)v14 + 26);
  if ((v16 & 1) != 0 || *((unsigned char *)v14 + 16))
  {
    unint64_t v17 = a2 + 1000000000 * *((int *)v14 + 5);
    if (a1[124].i8[0]) {
      goto LABEL_16;
    }
LABEL_45:
    a1[124].i8[0] = 1;
    a1[124].i64[1] = v17;
    if (*a4 != a4[1])
    {
LABEL_17:
      if (!a1[136].i8[1]) {
        goto LABEL_37;
      }
      int v18 = sub_10002BE50();
      uint64_t v19 = v18;
      unsigned __int8 v20 = atomic_load((unsigned __int8 *)v18 + 26);
      if ((v20 & 1) == 0 && !*((unsigned char *)v18 + 16))
      {
        *((_DWORD *)v18 + 5) = sub_100058BC0((uint64_t)v18, (unsigned int *)v18 + 3);
        *((unsigned char *)v19 + 16) = 1;
        atomic_store(1u, (unsigned __int8 *)v19 + 26);
      }
      double v21 = (double)(uint64_t)(a2 - a1[125].i64[1] + 1000000000 * *((int *)v19 + 5));
      if (qword_10047BED8 == -1)
      {
        uint64_t v22 = qword_10047BEE0;
        double v23 = v21 / 1000000000.0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
          goto LABEL_24;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100462220);
        uint64_t v22 = qword_10047BEE0;
        double v23 = v21 / 1000000000.0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
        {
LABEL_24:
          a1[136].i8[1] = 0;
          if (v23 - v13 >= 20.0)
          {
            std::to_string(&v60, (uint64_t)(v23 - v13));
            uint64_t v24 = std::string::insert(&v60, 0, "Non-empty scan after ");
            long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v65.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            uint64_t v26 = std::string::append(&v65, "s");
            long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            int64_t v69 = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)long long buf = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v65.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v60.__r_.__value_.__l.__data_);
            }
            int v28 = sub_10036E200();
            int v29 = v28;
            unsigned __int8 v30 = atomic_load((unsigned __int8 *)v28 + 20);
            if ((v30 & 1) == 0 && !*((unsigned char *)v28 + 16))
            {
              *((unsigned char *)v28 + 17) = sub_100059C20((uint64_t)v28, (unsigned char *)v28 + 9);
              *((unsigned char *)v29 + 16) = 1;
              atomic_store(1u, (unsigned __int8 *)v29 + 20);
            }
            if (v69 >= 0) {
              long long v31 = buf;
            }
            else {
              long long v31 = *(uint8_t **)buf;
            }
            sub_10022E144(*((unsigned __int8 *)v29 + 17), 3u, (uint64_t)"Got a non-empty scan", (uint64_t)v31, 5000000000);
            if (SHIBYTE(v69) < 0) {
              operator delete(*(void **)buf);
            }
          }
LABEL_37:
          int v32 = sub_10002BE50();
          uint64_t v33 = v32;
          unsigned __int8 v34 = atomic_load((unsigned __int8 *)v32 + 26);
          if ((v34 & 1) != 0 || *((unsigned char *)v32 + 16))
          {
            unint64_t v35 = a2 + 1000000000 * *((int *)v32 + 5);
            if (a1[125].i8[0]) {
              goto LABEL_41;
            }
          }
          else
          {
            *((_DWORD *)v32 + 5) = sub_100058BC0((uint64_t)v32, (unsigned int *)v32 + 3);
            *((unsigned char *)v33 + 16) = 1;
            atomic_store(1u, (unsigned __int8 *)v33 + 26);
            unint64_t v35 = a2 + 1000000000 * *((int *)v33 + 5);
            if (a1[125].i8[0])
            {
LABEL_41:
              a1[125].i64[1] = v35;
              sub_1002645B4(a4, (uint64_t *)buf);
              uint64_t v36 = a1[8].i64[0];
              v59[0] = a1[7].i64[1];
              v59[1] = v36;
              if (v36) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
              }
              sub_100239DC4((uint64_t)a1, (uint64_t *)buf, a3, a2, v59);
            }
          }
          a1[125].i8[0] = 1;
          goto LABEL_41;
        }
      }
      *(_DWORD *)long long buf = 134217984;
      *(double *)&uint8_t buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Got a non-empty scan after %f", buf, 0xCu);
      goto LABEL_24;
    }
    goto LABEL_46;
  }
  *((_DWORD *)v14 + 5) = sub_100058BC0((uint64_t)v14, (unsigned int *)v14 + 3);
  *((unsigned char *)v15 + 16) = 1;
  atomic_store(1u, (unsigned __int8 *)v15 + 26);
  unint64_t v17 = a2 + 1000000000 * *((int *)v15 + 5);
  if (!a1[124].i8[0]) {
    goto LABEL_45;
  }
LABEL_16:
  a1[124].i64[1] = v17;
  if (*a4 != a4[1]) {
    goto LABEL_17;
  }
LABEL_46:
  sub_100260F18(a1[7].i64[1], a2);
  memset(buf, 0, sizeof(buf));
  int64_t v69 = 0;
  sub_100232A94((uint64_t *)&v65, (uint64_t)buf, a4, a2);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  sub_10023BDF4(&v61, (uint64_t *)&v65);
  sub_1002819EC((uint64_t)buf, (uint64_t)&v61, 0, 0.0);
  unint64_t v37 = a1[14].u64[1];
  if (v37 >= a1[15].i64[0])
  {
    BOOL v39 = sub_100243AF4(a1 + 14, (uint64_t)buf);
    uint64_t v40 = (void *)__p;
    a1[14].i64[1] = (uint64_t)v39;
    if (v40)
    {
      *((void *)&__p + 1) = v40;
      operator delete(v40);
    }
  }
  else
  {
    *(void *)(v37 + 16) = 0;
    *(void *)(v37 + 24) = 0;
    *(void *)unint64_t v37 = 0;
    *(void *)(v37 + 8) = 0;
    *(_OWORD *)unint64_t v37 = *(_OWORD *)buf;
    *(void *)(v37 + 16) = v69;
    memset(buf, 0, sizeof(buf));
    *(void *)(v37 + 32) = 0;
    *(void *)(v37 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
    *(_OWORD *)(v37 + 24) = __p;
    *(void *)(v37 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v71;
    int64_t v69 = 0;
    long long __p = 0uLL;
    uint64_t v71 = 0;
    *(void *)(v37 + 48) = v72;
    uint64_t v38 = v73;
    *(unsigned char *)(v37 + 64) = v74;
    *(void *)(v37 + 56) = v38;
    a1[14].i64[1] = v37 + 72;
  }
  uint64_t v41 = *(void *)buf;
  if (*(void *)buf)
  {
    uint64_t v42 = *(void *)&buf[8];
    uint64_t v43 = *(void **)buf;
    if (*(void *)&buf[8] != *(void *)buf)
    {
      uint64_t v44 = *(void *)&buf[8] - 168;
      do
      {
        int v46 = *(_DWORD *)(v42 - 176);
        if (v46 == v46 >> 31)
        {
          if (*(unsigned char *)(v42 - 128)) {
            *(unsigned char *)(v42 - 128) = 0;
          }
        }
        else
        {
          uint64_t v45 = *(void *)(v42 - 168);
          if (v46 < 0)
          {
            if (v45) {
              (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
            }
          }
          else
          {
            (*(void (**)(uint64_t))v45)(v42 - 168);
          }
        }
        v42 -= 208;
        v44 -= 208;
      }
      while (v42 != v41);
      uint64_t v43 = *(void **)buf;
    }
    *(void *)&uint8_t buf[8] = v41;
    operator delete(v43);
  }
  if (v63)
  {
    int8x8_t v64 = v63;
    operator delete(v63);
  }
  char v47 = (char *)v61;
  if (v61)
  {
    int v48 = v62;
    uint64_t v49 = v61;
    if (v62 != v61)
    {
      int v50 = v62 - 168;
      do
      {
        int v52 = *((_DWORD *)v48 - 44);
        if (v52 == v52 >> 31)
        {
          if (*(v48 - 128)) {
            *(v48 - 128) = 0;
          }
        }
        else
        {
          uint64_t v51 = *((void *)v48 - 21);
          if (v52 < 0)
          {
            if (v51) {
              (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
            }
          }
          else
          {
            (*(void (**)(char *))v51)(v48 - 168);
          }
        }
        v48 -= 208;
        v50 -= 208;
      }
      while (v48 != v47);
      uint64_t v49 = v61;
    }
    uint64_t v62 = v47;
    operator delete(v49);
  }
  if (v66)
  {
    float v67 = v66;
    operator delete(v66);
  }
  std::string::size_type v53 = v65.__r_.__value_.__r.__words[0];
  if (v65.__r_.__value_.__r.__words[0])
  {
    std::string::size_type size = v65.__r_.__value_.__l.__size_;
    long long v55 = (void *)v65.__r_.__value_.__r.__words[0];
    if (v65.__r_.__value_.__l.__size_ != v65.__r_.__value_.__r.__words[0])
    {
      std::string::size_type v56 = v65.__r_.__value_.__l.__size_ - 168;
      do
      {
        int v58 = *(_DWORD *)(size - 176);
        if (v58 == v58 >> 31)
        {
          if (*(unsigned char *)(size - 128)) {
            *(unsigned char *)(size - 128) = 0;
          }
        }
        else
        {
          uint64_t v57 = *(void *)(size - 168);
          if (v58 < 0)
          {
            if (v57) {
              (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
            }
          }
          else
          {
            (*(void (**)(std::string::size_type))v57)(size - 168);
          }
        }
        size -= 208;
        v56 -= 208;
      }
      while (size != v53);
      long long v55 = (void *)v65.__r_.__value_.__r.__words[0];
    }
    v65.__r_.__value_.__l.__size_ = v53;
    operator delete(v55);
  }
}

void sub_10023BC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x10023B654);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10023BDF4(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_100233E30(a1, a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  unsigned __int8 v6 = (unsigned char *)a2[3];
  uint64_t v5 = (unsigned char *)a2[4];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_1000A9108();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    a1[3] = v8;
    a1[4] = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    a1[5] = v9;
    memcpy(v8, v6, v7);
    a1[4] = v9;
  }
  a1[6] = a2[6];
  return a1;
}

void sub_10023BE88(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_1003A5A44((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10023BEAC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1002426B8(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_10023BF0C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = sub_10025818C(*(void *)(a1 + 176));
  if (v4)
  {
    *(unsigned char *)(a1 + 304) = 1;
    return !v4;
  }
  uint64_t v6 = *(void *)(a1 + 176);
  sub_1002374E8(a1, a2, &v11);
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  sub_100254E20(v6, a2, &v11, &v9, a1 + 2184);
  int64_t v7 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = v12;
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return !v4;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return 1;
}

void sub_10023C034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_10023C050(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 296) + 24))();
}

uint64_t sub_10023C078(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 296) + 144))();
}

uint64_t sub_10023C0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a1 + 296);
  BOOL v4 = *(void (****)(void, uint64_t, uint64_t *, uint64_t, uint64_t))(a1 + 176);
  v6[0] = off_100462588;
  v6[1] = a1;
  v6[2] = v2;
  int64_t v7 = v6;
  *(unsigned char *)(a1 + 304) |= sub_1002BFC84(a1 + 328, a2, v3, v4, (unsigned char *)(a1 + 304), 0, v6, a1 + 2184);
  uint64_t result = (uint64_t)v7;
  if (v7 == v6) {
    return (*(uint64_t (**)(void *))(v6[0] + 32))(v6);
  }
  if (v7) {
    return (*(uint64_t (**)(void))(*v7 + 40))();
  }
  return result;
}

void sub_10023C1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100237458((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10023C1C8(uint64_t *a1, uint64_t a2)
{
}

uint64_t sub_10023C1DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 296) + 80))();
}

uint64_t sub_10023C218(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 296) + 128))();
}

uint64_t *sub_10023C240(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t *)sub_1002A3BE8(*(void *)(a1 + 248));
  if (result && *(unsigned char *)(a1 + 520))
  {
    sub_10029A680(*(void *)(a1 + 152), a2, *(_DWORD *)(a1 + 524));
    uint64_t v5 = *(uint64_t **)(a1 + 1504);
    uint64_t v6 = sub_10008CB7C(*(void *)(a1 + 152));
    return sub_1002B5EC4(v5, v6);
  }
  return result;
}

uint64_t sub_10023C2BC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(a1 + 2464) = *a3;
  if (qword_10047BED8 == -1)
  {
    uint64_t v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BED8, &stru_100462220);
  uint64_t v6 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    int v7 = *a3;
    v11[0] = 67240192;
    v11[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Update cached ARSessionState to %{public}d", (uint8_t *)v11, 8u);
  }
LABEL_4:
  if (*(unsigned char *)(a1 + 1536))
  {
    uint64_t v8 = *(void **)(a1 + 1568);
    if (v8)
    {
      *(void *)(a1 + 1576) = v8;
      operator delete(v8);
    }
    uint64_t v9 = *(void **)(a1 + 1544);
    if (v9)
    {
      *(void *)(a1 + 1552) = v9;
      operator delete(v9);
    }
    *(unsigned char *)(a1 + 1536) = 0;
  }
  return (*(uint64_t (**)(void, uint64_t, _DWORD *))(**(void **)(a1 + 2528) + 200))(*(void *)(a1 + 2528), a2, a3);
}

uint64_t sub_10023C418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100462220);
    uint64_t v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 2528) + 208))(*(void *)(a1 + 2528), a2, a3);
    }
    goto LABEL_3;
  }
  uint64_t v6 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received VIO Estimation", v8, 2u);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 2528) + 208))(*(void *)(a1 + 2528), a2, a3);
}

uint64_t sub_10023C500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100462220);
    uint64_t v6 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 2528) + 216))(*(void *)(a1 + 2528), a2, a3);
    }
    goto LABEL_3;
  }
  uint64_t v6 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received VL localization result", v8, 2u);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 2528) + 216))(*(void *)(a1 + 2528), a2, a3);
}

uint64_t sub_10023C5E8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = sub_1000BEA40(a3);
  if (result)
  {
    sub_1000BEA48((uint64_t)a3, (uint64_t)v12);
    sub_100238ACC(a1, (uint64_t)v12);
    sub_100041664((uint64_t)v12);
    sub_1000BEBC4((uint64_t)a3, (uint64_t)v12);
    if (!*(unsigned char *)(a1 + 688))
    {
      sub_1001AB5F8(a1 + 696, v12);
      *(unsigned char *)(a1 + 688) = 1;
LABEL_6:
      if (qword_10047BED8 == -1)
      {
        uint64_t v6 = qword_10047BEE0;
        if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
        {
LABEL_8:
          int v7 = (void *)(a1 + 760);
          if (*(char *)(a1 + 783) < 0) {
            int v7 = (void *)*v7;
          }
          uint64_t v8 = *(void *)(a1 + 792);
          *(_DWORD *)long long buf = 136380931;
          uint64_t v15 = v7;
          __int16 v16 = 2050;
          uint64_t v17 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "fLastGpsLikePreciseLocation vision location type %{private}s with accuracy %{public}f", buf, 0x16u);
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100462220);
        uint64_t v6 = qword_10047BEE0;
        if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
          goto LABEL_8;
        }
      }
      if (*(unsigned char *)(a1 + 1536))
      {
        uint64_t v9 = *(void **)(a1 + 1568);
        if (v9)
        {
          *(void *)(a1 + 1576) = v9;
          operator delete(v9);
        }
        unsigned __int8 v10 = *(void **)(a1 + 1544);
        if (v10)
        {
          *(void *)(a1 + 1552) = v10;
          operator delete(v10);
        }
        *(unsigned char *)(a1 + 1536) = 0;
      }
      if (*(unsigned char *)(a1 + 2505))
      {
        sub_100256DF0(*(void *)(a1 + 176), (uint64_t)v12);
        *(unsigned char *)(a1 + 304) = 1;
      }
      return sub_1000A45A0((uint64_t)v12);
    }
    if (v13 > *(void *)(a1 + 704))
    {
      sub_1001AB5FC(a1 + 696, (uint64_t)v12);
      goto LABEL_6;
    }
    if (qword_10047BED8 == -1)
    {
      double v11 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return sub_1000A45A0((uint64_t)v12);
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100462220);
      double v11 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        return sub_1000A45A0((uint64_t)v12);
      }
    }
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Ignoring VL because older than last precise location", buf, 2u);
    return sub_1000A45A0((uint64_t)v12);
  }
  return result;
}

void sub_10023C840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A45A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10023C854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100041664((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10023C86C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  return sub_10023C5E8(a1 - 8, a2, a3);
}

uint64_t sub_10023C874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 48) == 4) {
    sub_1002B5994(*(void *)(a1 + 1504), a3);
  }
  sub_1000A213C(a3, (uint64_t)v6);
  sub_100239440(a1, (uint64_t)v6);
  return sub_1000A45A0((uint64_t)v6);
}

void sub_10023C8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A45A0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10023C8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002AA09C(*(void *)(a1 + 1520), a3);
}

void sub_10023C8FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1536))
  {
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 32) + 16))(__p);
    uint64_t v2 = (void **)(a1 + 1544);
    if (*(unsigned char *)(a1 + 1536))
    {
      uint64_t v3 = *v2;
      if (*v2)
      {
        *(void *)(a1 + 1552) = v3;
        operator delete(v3);
      }
      *(_OWORD *)uint64_t v2 = *(_OWORD *)__p;
      *(void *)(a1 + 156sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v7;
      __p[1] = 0;
      uint64_t v7 = 0;
      __p[0] = 0;
      BOOL v4 = *(void **)(a1 + 1568);
      if (v4)
      {
        *(void *)(a1 + 1576) = v4;
        operator delete(v4);
      }
      *(_OWORD *)(a1 + 1568) = v8;
      *(void *)(a1 + 1584) = v9;
      uint64_t v9 = 0;
      long long v8 = 0uLL;
      uint64_t v5 = __p[0];
      if (!__p[0]) {
        goto LABEL_9;
      }
    }
    else
    {
      *(_OWORD *)uint64_t v2 = *(_OWORD *)__p;
      *(void *)(a1 + 156sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v7;
      __p[0] = 0;
      __p[1] = 0;
      *(_OWORD *)(a1 + 1568) = v8;
      *(void *)(a1 + 1584) = v9;
      uint64_t v7 = 0;
      long long v8 = 0uLL;
      uint64_t v9 = 0;
      *(unsigned char *)(a1 + 1536) = 1;
      uint64_t v5 = __p[0];
      if (!__p[0]) {
        goto LABEL_9;
      }
    }
    __p[1] = v5;
    operator delete(v5);
LABEL_9:
    sub_10023CA50(a1, a1 + 1544);
  }
}

void sub_10023CA50(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (std::mutex *)(a1 + 1856);
  std::mutex::lock((std::mutex *)(a1 + 1856));
  uint64_t v5 = (void *)nullsub_22(a2);
  if (*v5 != v5[1])
  {
    int v6 = sub_10028D1B8(a2);
    sub_10025835C(*(void **)(a1 + 176), v6);
    sub_100280F4C(*(void *)(a1 + 296), v6);
  }
  uint64_t v7 = *(uint64_t **)(a1 + 1920);
  for (uint64_t i = *(uint64_t **)(a1 + 1928); v7 != i; ++v7)
  {
    uint64_t v9 = *v7;
    unsigned __int8 v10 = (uint64_t *)nullsub_22(a2);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = sub_10028D1B8(a2);
    (*(void (**)(uint64_t, BOOL, uint64_t))(*(void *)v9 + 16))(v9, v11 != v12, v13);
  }

  std::mutex::unlock(v4);
}

void sub_10023CB4C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10023CB60(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10023CB74(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 1860))
  {
    int v6 = (unsigned __int8 *)(a1 + 1200);
    if (*(unsigned char *)(a1 + 1352))
    {
      if (*(unsigned char *)(a1 + 1200))
      {
        if (*(void *)(a1 + 1368) > *(void *)(a1 + 1216)) {
          int v6 = (unsigned __int8 *)(a1 + 1352);
        }
        uint64_t v3 = (unsigned __int8 *)(a1 + 1048);
        if (!*(unsigned char *)(a1 + 1048)) {
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v3 = (unsigned __int8 *)(a1 + 1048);
        int v6 = (unsigned __int8 *)(a1 + 1352);
        if (!*(unsigned char *)(a1 + 1048)) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      uint64_t v3 = (unsigned __int8 *)(a1 + 1048);
      if (!*(unsigned char *)(a1 + 1200)) {
        goto LABEL_31;
      }
      if (!*v3)
      {
LABEL_59:
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_60;
        }
        goto LABEL_32;
      }
    }
    if (*((void *)v6 + 2) > *(void *)(a1 + 1064)) {
      uint64_t v3 = v6;
    }
    goto LABEL_31;
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 896);
  BOOL v4 = (unsigned __int8 *)(a1 + 1200);
  if (*(unsigned char *)(a1 + 1352))
  {
    if (*(unsigned char *)(a1 + 1200))
    {
      if (*(void *)(a1 + 1368) > *(void *)(a1 + 1216)) {
        BOOL v4 = (unsigned __int8 *)(a1 + 1352);
      }
      uint64_t v5 = (unsigned __int8 *)(a1 + 1048);
      if (!*(unsigned char *)(a1 + 1048))
      {
LABEL_21:
        uint64_t v5 = v4;
        if (*v4) {
          goto LABEL_22;
        }
LABEL_31:
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_60;
        }
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v5 = (unsigned __int8 *)(a1 + 1048);
      BOOL v4 = (unsigned __int8 *)(a1 + 1352);
      if (!*(unsigned char *)(a1 + 1048)) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    uint64_t v5 = (unsigned __int8 *)(a1 + 1048);
    if (!*(unsigned char *)(a1 + 1200)) {
      goto LABEL_18;
    }
    if (!*v5) {
      goto LABEL_21;
    }
  }
  if (*((void *)v4 + 2) > *(void *)(a1 + 1064)) {
    uint64_t v5 = v4;
  }
LABEL_18:
  if (!*v5) {
    goto LABEL_31;
  }
LABEL_22:
  if (*v3)
  {
    if (*((void *)v5 + 2) > *(void *)(a1 + 912)) {
      uint64_t v3 = v5;
    }
    uint64_t v5 = v3;
    if (!*v3) {
LABEL_60:
    }
      sub_1003A5B30();
  }
LABEL_32:
  double v7 = (double)(uint64_t)sub_100042EE0() / 1000000000.0;
  long long v8 = (unsigned __int8 *)(a1 + 1200);
  double v9 = (double)*((uint64_t *)v5 + 2) / 1000000000.0;
  if (!*(unsigned char *)(a1 + 1352))
  {
    unsigned __int8 v10 = (unsigned char *)(a1 + 1048);
    if (!*(unsigned char *)(a1 + 1200)) {
      goto LABEL_42;
    }
    if (!*v10) {
      goto LABEL_45;
    }
    goto LABEL_40;
  }
  if (!*(unsigned char *)(a1 + 1200))
  {
    unsigned __int8 v10 = (unsigned char *)(a1 + 1048);
    long long v8 = (unsigned __int8 *)(a1 + 1352);
    if (!*(unsigned char *)(a1 + 1048)) {
      goto LABEL_45;
    }
    goto LABEL_40;
  }
  if (*(void *)(a1 + 1368) > *(void *)(a1 + 1216)) {
    long long v8 = (unsigned __int8 *)(a1 + 1352);
  }
  unsigned __int8 v10 = (unsigned char *)(a1 + 1048);
  if (*(unsigned char *)(a1 + 1048))
  {
LABEL_40:
    if (*((void *)v8 + 2) > *(void *)(a1 + 1064)) {
      unsigned __int8 v10 = v8;
    }
LABEL_42:
    double v11 = v7 - v9;
    int v12 = *v5;
    int v13 = *v10;
    if (!*v5) {
      goto LABEL_50;
    }
    goto LABEL_46;
  }
LABEL_45:
  unsigned __int8 v10 = v8;
  double v11 = v7 - v9;
  int v12 = *v5;
  int v13 = *v8;
  if (!*v5) {
    goto LABEL_50;
  }
LABEL_46:
  if (v13)
  {
    if (!sub_10024425C((uint64_t)(v5 + 8), (uint64_t)(v10 + 8))) {
      goto LABEL_48;
    }
LABEL_51:
    if (*(double *)(sub_1002A40BC(*(void *)(a1 + 248)) + 16) >= v11) {
      return;
    }
    goto LABEL_52;
  }
LABEL_50:
  if ((v12 != 0) != (v13 == 0)) {
    goto LABEL_51;
  }
LABEL_48:
  if (*(double *)(sub_1002A40BC(*(void *)(a1 + 248)) + 24) >= v11) {
    return;
  }
LABEL_52:
  if (*(unsigned char *)(a1 + 1536))
  {
    uint64_t v14 = *(void **)(a1 + 1568);
    if (v14)
    {
      *(void *)(a1 + 1576) = v14;
      operator delete(v14);
    }
    uint64_t v15 = *(void **)(a1 + 1544);
    if (v15)
    {
      *(void *)(a1 + 1552) = v15;
      operator delete(v15);
    }
    *(unsigned char *)(a1 + 1536) = 0;
  }
}

void *sub_10023CE24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned char *a4@<X8>)
{
  uint64_t v336 = a2;
  sub_10023C8FC(a1);
  int v6 = sub_10036E320();
  double v7 = v6;
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)v6 + 20);
  if ((v8 & 1) == 0 && !*((unsigned char *)v6 + 16))
  {
    *((unsigned char *)v6 + 17) = sub_100059C20((uint64_t)v6, (unsigned char *)v6 + 9);
    *((unsigned char *)v7 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v7 + 20);
  }
  int v9 = *((unsigned __int8 *)v7 + 17);
  unsigned __int8 v10 = (uint64_t *)(a1 + 1544);
  sub_1002577B0(*(uint64_t **)(a1 + 176), (uint64_t *)(a1 + 1544), (uint64_t)v335);
  uint64_t v11 = sub_100254624((uint64_t)v335);
  int v12 = *(std::__shared_weak_count **)(v11 + 8);
  v333 = *(char **)v11;
  v334 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = sub_100254624((uint64_t)v335);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 16))(&v331, v13, v14);
  uint64_t v15 = (unsigned __int8 ***)(*(uint64_t (**)(uint64_t))(*(void *)v331 + 64))(v331);
  if (sub_1001982CC((const void ***)&v333, v15))
  {
    if (qword_10047BED8 == -1)
    {
      __int16 v16 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    dispatch_once(&qword_10047BED8, &stru_100462220);
    __int16 v16 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
    {
LABEL_9:
      uint64_t v17 = (char **)(*(uint64_t (**)(uint64_t))(*(void *)v331 + 64))(v331);
      int v18 = sub_1000900B8(v17);
      uint64_t v19 = sub_1000900B8(&v333);
      *(_DWORD *)long long buf = 136380931;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Mismatch between floor keys: (%{private}s vs %{private}s)", buf, 0x16u);
    }
  }
LABEL_10:
  *(void *)&v270[0] = off_10045D828;
  uint64_t v272 = 0;
  *(void *)&v270[1] = off_10045DA98;
  uint64_t v271 = 0;
  v273 &= 0xFCu;
  uint64_t v276 = 0;
  v274 = off_10045DAB8;
  uint64_t v275 = 0;
  v277 &= 0xFCu;
  uint64_t v279 = 0;
  uint64_t v278 = 0;
  long long v281 = 0u;
  long long v282 = 0u;
  int v280 = 0;
  int v283 = 0;
  long long v292 = 0u;
  long long v293 = 0u;
  long long v284 = 0u;
  long long v285 = 0u;
  long long v286 = 0u;
  long long v287 = 0u;
  long long v288 = 0u;
  long long v289 = 0u;
  long long v290 = 0u;
  long long v291 = 0u;
  v295 = off_10045D7E8;
  long long v296 = 0u;
  long long v297 = 0u;
  long long v298 = 0u;
  long long v299 = 0u;
  long long v300 = 0u;
  long long v301 = 0u;
  long long v302 = 0u;
  int v303 = 0;
  uint64_t v306 = 0;
  uint64_t v304 = 0;
  uint64_t v305 = 0;
  v307 &= 0xC0u;
  __int16 v308 = 0;
  long long v309 = 0u;
  long long v310 = 0u;
  long long v311 = 0u;
  uint64_t v312 = 0;
  v313 = off_10045DAB8;
  uint64_t v315 = 0;
  uint64_t v314 = 0;
  v316 &= 0xFCu;
  double v317 = 0.0;
  v318 = off_10045D808;
  uint64_t v320 = 0;
  uint64_t v319 = 0;
  v321 &= 0xF8u;
  uint64_t v322 = 0;
  int v323 = 0;
  long long v324 = 0u;
  long long v325 = 0u;
  long long v326 = 0u;
  int v327 = 0;
  long long v328 = 0u;
  memset(v329, 0, 28);
  memset(&v329[32], 0, 32);
  unint64_t v330 = v330 & 0xF000000000000000 | 0x10000000;
  uint64_t v294 = 4;
  uint64_t v20 = 0;
  switch(sub_10025462C((uint64_t)v335))
  {
    case 0u:
      double v21 = (std::__shared_weak_count *)v332;
      v269[0] = v331;
      v269[1] = v332;
      if (v332) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v332 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1002402E0(a1, v269, v336, (uint64_t)v335, (uint64_t)buf);
      sub_1001A39A8((uint64_t)v270, (uint64_t)buf);
      sub_1001A0B70(buf);
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      uint64_t v20 = *(void *)(sub_10025463C((uint64_t)v335) + 8);
      break;
    case 1u:
      sub_1002401F8((uint64_t)buf, (uint64_t)&v333, v331);
      sub_1001A39A8((uint64_t)v270, (uint64_t)buf);
      sub_1001A0B70(buf);
      *((void *)&v286 + 1) = *(void *)(sub_10025463C((uint64_t)v335) + 24);
      sub_1001A0BFC((uint64_t)v270, 1.0);
      *(void *)&long long v286 = *(void *)(sub_10025463C((uint64_t)v335) + 16);
      uint64_t v23 = sub_10025463C((uint64_t)v335);
      *((void *)&v285 + 1) = sub_100253CB8(v23);
      uint64_t v20 = *(void *)(sub_10025463C((uint64_t)v335) + 8);
      BOOL v24 = (*(uint64_t (**)(uint64_t))(*(void *)v331 + 72))(v331) != 0;
      sub_1001A0D14((uint64_t)v270, 4 * v24);
      int v25 = sub_100254634((uint64_t)v335);
      sub_1001A0DAC((uint64_t)v270, v25);
      uint64_t v26 = (const std::string *)sub_100085D38((uint64_t)&v333);
      sub_1001A0BD8((uint64_t)v270, v26);
      int v22 = 1;
      goto LABEL_20;
    case 2u:
      sub_10014E21C((uint64_t)buf);
      sub_1001A39A8((uint64_t)v270, (uint64_t)buf);
      sub_1001A0B70(buf);
      int v22 = 2;
      goto LABEL_20;
    case 3u:
      sub_1002401F8((uint64_t)buf, (uint64_t)&v333, v331);
      sub_1001A39A8((uint64_t)v270, (uint64_t)buf);
      sub_1001A0B70(buf);
      *((void *)&v285 + 1) = 0;
      int v22 = 3;
LABEL_20:
      LODWORD(v294) = v22;
      break;
    case 4u:
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(buf, "getBestLocalizerState() always sets a valid YieldStatus. How did we get YIELD_DATA_MISSING?");
      std::runtime_error::runtime_error(&v248, (const std::string *)buf);
      v248.__vftable = (std::runtime_error_vtbl *)&off_100453860;
      sub_10018E868((uint64_t)&v268);
      sub_1000D1698(&v248, (uint64_t)"boost::optional<PoseEstimate> LocalizerIoWrapper::forceNotifyObserver(nanoseconds, BOOL)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/localizer_io_wrapper.cpp", 1223, (uint64_t)&v268);
    default:
      break;
  }
  sub_1001A0C10((uint64_t)v270, v336);
  sub_1001E1F04((uint64_t)v266);
  if (v267)
  {
    sub_1001A0E24((uint64_t)v270, *(double *)&v266[2]);
    sub_1001A0DFC((uint64_t)v270, *(double *)&v266[1]);
    double v27 = *(double *)v266;
  }
  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    sub_1001A0E24((uint64_t)v270, Current);
    double v29 = sub_100016C70();
    sub_1001A0DFC((uint64_t)v270, v29);
    double v27 = sub_100016BAC();
  }
  sub_1001A0E10((uint64_t)v270, v27);
  if (!v294)
  {
    if ((v330 & 0x20000000000) != 0)
    {
      double v36 = v317;
      if (v36 < sub_1002A4044(*(void *)(a1 + 248)))
      {
        uint64_t v37 = *(void *)(a1 + 248);
        if (v323 == 1) {
          uint64_t v38 = sub_1002A410C(v37);
        }
        else {
          uint64_t v38 = sub_1002A40E0(v37);
        }
        sub_1001F033C(v38, (int64x2_t *)buf);
        std::string v265 = *(std::string *)buf;
        if (qword_10047BED8 == -1)
        {
          uint64_t v43 = qword_10047BEE0;
          if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
          {
LABEL_45:
            double v42 = sub_1002A4050(*(void *)(a1 + 248));
LABEL_46:
            double v32 = v42;
            uint64_t v33 = (uint64_t *)a1;
            unint64_t v34 = *(void *)(a1 + 200);
            if (v34 < *(void *)(a1 + 208)) {
              goto LABEL_29;
            }
            goto LABEL_47;
          }
        }
        else
        {
          dispatch_once(&qword_10047BED8, &stru_100462220);
          uint64_t v43 = qword_10047BEE0;
          if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
            goto LABEL_45;
          }
        }
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "YIELD_DEEP_INDOOR", buf, 2u);
        goto LABEL_45;
      }
    }
    uint64_t v39 = *(void *)(a1 + 248);
    if (v323 == 1) {
      uint64_t v40 = sub_1002A4164(v39);
    }
    else {
      uint64_t v40 = sub_1002A4138(v39);
    }
    sub_1001F033C(v40, (int64x2_t *)buf);
    std::string v265 = *(std::string *)buf;
    if (qword_10047BED8 == -1)
    {
      uint64_t v41 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
LABEL_40:
        double v42 = sub_1002A4060(*(void *)(a1 + 248));
        goto LABEL_46;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100462220);
      uint64_t v41 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_40;
      }
    }
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "YIELD_OK_NEAR_EDGE", buf, 2u);
    goto LABEL_40;
  }
  uint64_t v30 = sub_1002A4190(*(void *)(a1 + 248));
  sub_1001F033C(v30, (int64x2_t *)buf);
  std::string v265 = *(std::string *)buf;
  if (qword_10047BED8 == -1)
  {
    long long v31 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  dispatch_once(&qword_10047BED8, &stru_100462220);
  long long v31 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEFAULT))
  {
LABEL_27:
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "NO_YIELD", buf, 2u);
  }
LABEL_28:
  double v32 = NAN;
  uint64_t v33 = (uint64_t *)a1;
  unint64_t v34 = *(void *)(a1 + 200);
  if (v34 < *(void *)(a1 + 208))
  {
LABEL_29:
    sub_1001A39A4(v34, v270);
    unint64_t v35 = (char *)(v34 + 760);
    uint64_t v33 = (uint64_t *)a1;
    *(void *)(a1 + 20sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v34 + 760;
    goto LABEL_48;
  }
LABEL_47:
  unint64_t v35 = sub_100244634(v33 + 24, (uint64_t)v270);
LABEL_48:
  v33[25] = (uint64_t)v35;
  sub_100244400(v33 + 23, 0x4E25B9EFD4E25B9FLL * ((uint64_t)&v35[-v33[24]] >> 3) - 1);
  uint64_t v44 = v33[24];
  v260[4] = (void *)v33[23];
  long long __p = 0;
  v262 = 0;
  uint64_t v263 = 0;
  sub_1002427FC(&__p, v44, v33[25], 0x4E25B9EFD4E25B9FLL * ((v33[25] - v44) >> 3));
  uint64_t v45 = &OBJC_METACLASS___CLPrefetchFloorRequest;
  int v264 = *(_DWORD *)(a1 + 216);
  char v47 = (char *)__p;
  int v46 = v262;
  double v48 = 0.0;
  if (__p != v262)
  {
    do
    {
      sub_1001A39A4(buf, v47);
      if (((v360 >> 44) & (v359 == 0) & (v48 < v358)) != 0) {
        double v48 = v358;
      }
      sub_1001A0B70(buf);
      v47 += 760;
    }
    while (v47 != v46);
  }
  float v49 = sub_1002A3EF8(*(void *)(a1 + 248));
  int v50 = (char *)__p;
  if (__p)
  {
    uint64_t v51 = __p;
    if (v262 != __p)
    {
      int v52 = v262 - 760;
      std::string::size_type v53 = v262 - 760;
      do
      {
        (**(void (***)(char *))v53)(v53);
        v52 -= 760;
        BOOL v54 = v53 == v50;
        v53 -= 760;
      }
      while (!v54);
      uint64_t v51 = __p;
      uint64_t v45 = &OBJC_METACLASS___CLPrefetchFloorRequest;
    }
    v262 = v50;
    operator delete(v51);
  }
  if ((v330 & 0x100000000000) == 0 || (v323 == 2 ? (BOOL v54 = v294 == 0) : (BOOL v54 = 1), v54))
  {
    if ((v330 & 0x8000000000) != 0 && HIDWORD(v312) == 2)
    {
      sub_100254DE8(*(void *)(a1 + 176));
      if (qword_10047BED8 == -1)
      {
        superclass = v45[95].superclass;
        if (!os_log_type_enabled(superclass, OS_LOG_TYPE_INFO)) {
          goto LABEL_74;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100462220);
        superclass = v45[95].superclass;
        if (!os_log_type_enabled(superclass, OS_LOG_TYPE_INFO)) {
          goto LABEL_74;
        }
      }
      *(_WORD *)long long buf = 0;
      std::string::size_type v56 = "Reset DR because we are fusing with GPS";
      goto LABEL_72;
    }
    if ((v330 & 0x100000000000) != 0 && v323 != 2 && v48 < v49)
    {
      sub_100254DE8(*(void *)(a1 + 176));
      if (qword_10047BED8 == -1)
      {
        int v68 = v45[95].superclass;
        if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_74;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100462220);
        int v68 = v45[95].superclass;
        if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_74;
        }
      }
      *(_WORD *)long long buf = 0;
      std::string::size_type v56 = "Reset DR because we have a non-DR pose and the compound confidence has not been high enough";
      uint64_t v57 = v68;
      os_log_type_t v58 = OS_LOG_TYPE_DEBUG;
      goto LABEL_73;
    }
  }
  else
  {
    sub_100254DE8(*(void *)(a1 + 176));
    if (qword_10047BED8 != -1)
    {
      dispatch_once(&qword_10047BED8, &stru_100462220);
      superclass = v45[95].superclass;
      if (!os_log_type_enabled(superclass, OS_LOG_TYPE_INFO)) {
        goto LABEL_74;
      }
      goto LABEL_66;
    }
    superclass = v45[95].superclass;
    if (os_log_type_enabled(superclass, OS_LOG_TYPE_INFO))
    {
LABEL_66:
      *(_WORD *)long long buf = 0;
      std::string::size_type v56 = "Reset DR because DR is yield low";
LABEL_72:
      uint64_t v57 = superclass;
      os_log_type_t v58 = OS_LOG_TYPE_INFO;
LABEL_73:
      _os_log_impl((void *)&_mh_execute_header, v57, v58, v56, buf, 2u);
    }
  }
LABEL_74:
  if ((v330 & 0x8000000000) != 0 && !HIDWORD(v312) && (v330 & 0x100000000000) != 0 && !v323 && !v294)
  {
    double v59 = *((double *)&v285 + 1);
    if (v59 >= sub_1002A3EF8(*(void *)(a1 + 248)))
    {
      sub_100254C7C(*(uint64_t **)(a1 + 176));
      if (qword_10047BED8 != -1)
      {
        dispatch_once(&qword_10047BED8, &stru_100462220);
        std::string v60 = v45[95].superclass;
        if (!os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_83;
        }
        goto LABEL_82;
      }
      std::string v60 = v45[95].superclass;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
      {
LABEL_82:
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "Seed DR because we are yielding the primary filter and the compound confidence is high enough", buf, 2u);
      }
    }
  }
LABEL_83:
  if ((v330 & 0x100000000000) != 0 && v323 == 1) {
    double v32 = sub_1002A4070(*(void *)(a1 + 248));
  }
  if (!a3 || !v294)
  {
    *(std::string *)&uint8_t buf[8] = v265;
    buf[0] = 1;
    char v62 = sub_1001F07BC((uint64_t)buf);
    sub_1001A0CA4((uint64_t)v270, v62);
    sub_1001A0CF8((uint64_t)v270, v32);
    uint64_t v63 = *(void **)(a1 + 2144);
    if (v63) {
      sub_1001A0D00((uint64_t)v270, (v63[1] - *v63) >> 4);
    }
    if (sub_1001F0350((uint64_t *)(a1 + 680), v336, (uint64_t *)&v265))
    {
      if (qword_10047BED8 == -1)
      {
        int8x8_t v64 = v45[95].superclass;
        if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_96;
        }
        goto LABEL_95;
      }
      dispatch_once(&qword_10047BED8, &stru_100462220);
      int8x8_t v64 = v45[95].superclass;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
LABEL_95:
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = HIBYTE(v308);
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "we've reset the StrobeGps counters and are using new settings %d", buf, 8u);
      }
    }
LABEL_96:
    BOOL v65 = sub_1001F05E8((uint64_t *)(a1 + 680), v336, *(void *)(a1 + 16) + v336);
    if (v9)
    {
      BOOL v66 = v65;
      if (qword_10047BED8 == -1)
      {
        float v67 = v45[95].superclass;
        if (!os_log_type_enabled(v67, OS_LOG_TYPE_INFO)) {
          goto LABEL_107;
        }
        goto LABEL_99;
      }
      dispatch_once(&qword_10047BED8, &stru_100462220);
      float v67 = v45[95].superclass;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
      {
LABEL_99:
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v66;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = *((void *)&v290 + 1);
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "GPS assistance request = %d @ t=%lld", buf, 0x12u);
      }
    }
    else
    {
      LOBYTE(v66) = 0;
    }
LABEL_107:
    sub_1001A0C9C((uint64_t)v270, v66);
    *(unsigned char *)(a1 + 2178) = v308;
    (*(void (**)(void **__return_ptr))(*(void *)v331 + 80))(v260);
    v69.n128_f64[0] = sub_1001A0BB4((uint64_t)v270, (uint64_t)v260);
    v330 |= 2uLL;
    if ((*(unsigned __int8 (**)(uint64_t, __n128))(*(void *)v331 + 88))(v331, v69))
    {
      (*(void (**)(uint64_t))(*(void *)v331 + 88))(v331);
      sub_1001A0E38((uint64_t)v270, v70);
    }
    if ((*(unsigned __int8 (**)(uint64_t))(*(void *)v331 + 96))(v331))
    {
      (*(void (**)(uint64_t))(*(void *)v331 + 96))(v331);
      sub_1001A0C74((uint64_t)v270, v71);
    }
    v259[0] = 1.0 - *(double *)sub_10025463C((uint64_t)v335);
    v259[1] = *(double *)sub_10025463C((uint64_t)v335);
    BOOL v72 = sub_1000D78F8((uint64_t)v259);
    int v73 = v294;
    if (!v294 || v72)
    {
LABEL_118:
      if (v73 && *(unsigned char *)(a1 + 1968) && *(void *)(a1 + 1976) < v336 && ((v330 & 0x20000000) == 0 || HIDWORD(v294)))
      {
        sub_1001A0C88((uint64_t)v270, 0);
        if (qword_10047BED8 == -1)
        {
          std::string v79 = v45[95].superclass;
          if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_126;
          }
          goto LABEL_125;
        }
        dispatch_once(&qword_10047BED8, &stru_100462220);
        std::string v79 = v45[95].superclass;
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
LABEL_125:
          uint64_t v80 = *(void *)(a1 + 1976);
          *(_DWORD *)long long buf = 134349312;
          *(void *)&uint8_t buf[4] = v336;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&buf[14] = v80;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Too long since last YIELD_OK, force a YIELD_FAILURE_GIVE_UP at t=%{public}lld (> %{public}lld)", buf, 0x16u);
        }
      }
LABEL_126:
      uint64_t v82 = *(void *)(a1 + 264);
      uint64_t v81 = *(void *)(a1 + 272);
      if (v81 == v82)
      {
        unint64_t v85 = v330 & 0xFFF7FFFFFFBFFFEFLL;
        goto LABEL_154;
      }
      uint64_t v83 = *(void *)(a1 + 264);
      do
      {
        if (*(_DWORD *)(v83 + 4) == 1)
        {
          int v84 = 1;
          goto LABEL_137;
        }
        v83 += 88;
      }
      while (v83 != v81);
      do
      {
        if (*(_DWORD *)(v82 + 4) != 2)
        {
          int v84 = 3;
          goto LABEL_137;
        }
        v82 += 88;
      }
      while (v82 != v81);
      int v84 = 2;
LABEL_137:
      sub_1001A0BC4((uint64_t)v270, v84);
      int v86 = *(_DWORD **)(a1 + 264);
      int v87 = *(_DWORD **)(a1 + 272);
      if (v86 == v87)
      {
LABEL_145:
        int v89 = 3;
      }
      else
      {
        long long v88 = *(_DWORD **)(a1 + 264);
        do
        {
          if (*v88 == 1)
          {
            int v89 = 2;
            goto LABEL_147;
          }
          v88 += 22;
        }
        while (v88 != v87);
        while (*v86)
        {
          v86 += 22;
          if (v86 == v87) {
            goto LABEL_145;
          }
        }
        int v89 = 1;
      }
LABEL_147:
      sub_1001A0DE8((uint64_t)v270, v89);
      if (v89 == 1)
      {
        double v90 = 0.0;
      }
      else
      {
        if (v89 != 2)
        {
          sub_1001A0C24((uint64_t)v270, NAN);
          v330 &= ~0x400000uLL;
LABEL_153:
          sub_10019FAE4((uint64_t)&v295, *(unsigned __int8 *)(*(void *)(a1 + 272) - 64));
          unint64_t v85 = v330;
LABEL_154:
          unint64_t v330 = v85 | (unint64_t)&_mh_execute_header;
          if (*(unsigned char *)(a1 + 2000))
          {
            int v91 = sub_10002BE50();
            uint64_t v92 = v91;
            unsigned __int8 v93 = atomic_load((unsigned __int8 *)v91 + 26);
            if ((v93 & 1) == 0 && !*((unsigned char *)v91 + 16))
            {
              *((_DWORD *)v91 + 5) = sub_100058BC0((uint64_t)v91, (unsigned int *)v91 + 3);
              *((unsigned char *)v92 + 16) = 1;
              atomic_store(1u, (unsigned __int8 *)v92 + 26);
            }
            int v94 = *((_DWORD *)v92 + 5);
            v95 = sub_10002BE50();
            v96 = v95;
            unsigned __int8 v97 = atomic_load((unsigned __int8 *)v95 + 26);
            if ((v97 & 1) == 0 && !*((unsigned char *)v95 + 16))
            {
              *((_DWORD *)v95 + 5) = sub_100058BC0((uint64_t)v95, (unsigned int *)v95 + 3);
              *((unsigned char *)v96 + 16) = 1;
              atomic_store(1u, (unsigned __int8 *)v96 + 26);
            }
            uint64_t v98 = *(void *)(a1 + 2008) - 1000000000 * *((int *)v96 + 5);
            *(void *)&long long v301 = exp(-0.693147181 / (double)v94 * ((double)(v336 - v98) / 1000000000.0));
            sub_1001A0CAC((uint64_t)v270, v98);
            v330 |= 0x200000000uLL;
            if (*(unsigned char *)(a1 + 2016)) {
              goto LABEL_162;
            }
          }
          else
          {
            sub_1001A0CAC((uint64_t)v270, 0x8000000000000000);
            *(void *)&long long v301 = 0;
            v330 |= 0x200000000uLL;
            if (*(unsigned char *)(a1 + 2016))
            {
LABEL_162:
              v99 = sub_10009C8D8();
              uint64_t v100 = v99;
              unsigned __int8 v101 = atomic_load((unsigned __int8 *)v99 + 26);
              if ((v101 & 1) == 0 && !*((unsigned char *)v99 + 16))
              {
                *((_DWORD *)v99 + 5) = sub_100058BC0((uint64_t)v99, (unsigned int *)v99 + 3);
                *((unsigned char *)v100 + 16) = 1;
                atomic_store(1u, (unsigned __int8 *)v100 + 26);
              }
              sub_1001A0CB4((uint64_t)v270, *(void *)(a1 + 2024) - 1000000000 * *((int *)v100 + 5));
LABEL_168:
              if ((v330 & 0x200000) == 0)
              {
                sub_1003A5CE4(qword_10047BED8 == -1);
                uint64_t result = (void *)abort_report_np();
                __break(1u);
                return result;
              }
              if (qword_10047BED8 == -1)
              {
                long long v102 = v45[95].superclass;
                if (!os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_232;
                }
              }
              else
              {
                dispatch_once(&qword_10047BED8, &stru_100462220);
                long long v102 = v45[95].superclass;
                if (!os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_232;
                }
              }
              uint64_t v103 = qword_10047ED70;
              if (!qword_10047ED70) {
LABEL_177:
              }
                sub_10018E334("map::at:  key not found");
              while (1)
              {
                while (1)
                {
                  int v104 = *(_DWORD *)(v103 + 32);
                  if ((int)v294 >= v104) {
                    break;
                  }
                  uint64_t v103 = *(void *)v103;
                  if (!v103) {
                    goto LABEL_177;
                  }
                }
                if (v104 >= (int)v294) {
                  break;
                }
                uint64_t v103 = *(void *)(v103 + 8);
                if (!v103) {
                  goto LABEL_177;
                }
              }
              v105 = *(const char **)(v103 + 40);
              size_t v106 = strlen(v105);
              if (v106 > 0x7FFFFFFFFFFFFFF7) {
                sub_1000A6968();
              }
              size_t v107 = v106;
              if (v106 >= 0x17)
              {
                uint64_t v109 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v106 | 7) != 0x17) {
                  uint64_t v109 = v106 | 7;
                }
                uint64_t v110 = v109 + 1;
                p_dst = (long long *)operator new(v109 + 1);
                int64_t v338 = v110 | 0x8000000000000000;
                *(void *)&long long __dst = p_dst;
                *((void *)&__dst + 1) = v107;
              }
              else
              {
                HIBYTE(v338) = v106;
                p_dst = &__dst;
                if (!v106)
                {
LABEL_186:
                  *((unsigned char *)p_dst + v107) = 0;
                  if (v338 >= 0) {
                    v111 = &__dst;
                  }
                  else {
                    v111 = (long long *)__dst;
                  }
                  uint64_t v112 = v271;
                  uint64_t v113 = v272;
                  v114 = sub_1000900B8(&v333);
                  uint64_t v115 = qword_10047EDD8;
                  if (!qword_10047EDD8) {
LABEL_195:
                  }
                    sub_10018E334("map::at:  key not found");
                  while (1)
                  {
                    while (1)
                    {
                      int v116 = *(_DWORD *)(v115 + 32);
                      if (SHIDWORD(v312) >= v116) {
                        break;
                      }
                      uint64_t v115 = *(void *)v115;
                      if (!v115) {
                        goto LABEL_195;
                      }
                    }
                    if (v116 >= SHIDWORD(v312)) {
                      break;
                    }
                    uint64_t v115 = *(void *)(v115 + 8);
                    if (!v115) {
                      goto LABEL_195;
                    }
                  }
                  uint64_t v238 = v285;
                  uint64_t v239 = v293;
                  int v240 = v308;
                  v242 = (std::mutex *)v114;
                  v117 = *(const char **)(v115 + 40);
                  size_t v118 = strlen(v117);
                  if (v118 > 0x7FFFFFFFFFFFFFF7) {
                    sub_1000A6968();
                  }
                  v119 = (const char *)v118;
                  v237 = v111;
                  if (v118 >= 0x17)
                  {
                    v121 = a4;
                    uint64_t v122 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v118 | 7) != 0x17) {
                      uint64_t v122 = v118 | 7;
                    }
                    uint64_t v123 = v122 + 1;
                    v120 = (std::runtime_error_vtbl *)operator new(v122 + 1);
                    v257.__imp_.__imp_ = v119;
                    int64_t v258 = v123 | 0x8000000000000000;
                    v257.__vftable = v120;
                    a4 = v121;
                    uint64_t v45 = &OBJC_METACLASS___CLPrefetchFloorRequest;
                  }
                  else
                  {
                    HIBYTE(v258) = v118;
                    v120 = (std::runtime_error_vtbl *)&v257;
                    if (!v118)
                    {
LABEL_204:
                      v119[(void)v120] = 0;
                      if (v258 >= 0) {
                        v124 = &v257;
                      }
                      else {
                        v124 = v257.__vftable;
                      }
                      uint64_t v125 = qword_10047EDA8;
                      if (!qword_10047EDA8) {
LABEL_213:
                      }
                        sub_10018E334("map::at:  key not found");
                      while (1)
                      {
                        while (1)
                        {
                          int v126 = *(_DWORD *)(v125 + 32);
                          if (v323 >= v126) {
                            break;
                          }
                          uint64_t v125 = *(void *)v125;
                          if (!v125) {
                            goto LABEL_213;
                          }
                        }
                        if (v126 >= v323) {
                          break;
                        }
                        uint64_t v125 = *(void *)(v125 + 8);
                        if (!v125) {
                          goto LABEL_213;
                        }
                      }
                      v127 = *(const char **)(v125 + 40);
                      size_t v128 = strlen(v127);
                      if (v128 > 0x7FFFFFFFFFFFFFF7) {
                        sub_1000A6968();
                      }
                      v129 = (const char *)v128;
                      if (v128 >= 0x17)
                      {
                        v131 = a4;
                        uint64_t v132 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v128 | 7) != 0x17) {
                          uint64_t v132 = v128 | 7;
                        }
                        uint64_t v133 = v132 + 1;
                        v130 = (std::runtime_error_vtbl *)operator new(v132 + 1);
                        v255.__imp_.__imp_ = v129;
                        int64_t v256 = v133 | 0x8000000000000000;
                        v255.__vftable = v130;
                        a4 = v131;
                        uint64_t v45 = &OBJC_METACLASS___CLPrefetchFloorRequest;
                      }
                      else
                      {
                        HIBYTE(v256) = v128;
                        v130 = (std::runtime_error_vtbl *)&v255;
                        if (!v128)
                        {
LABEL_222:
                          v129[(void)v130] = 0;
                          v134 = &v255;
                          if (v256 < 0) {
                            v134 = v255.__vftable;
                          }
                          *(_DWORD *)long long buf = 136449027;
                          *(void *)&uint8_t buf[4] = v237;
                          *(_WORD *)&unsigned char buf[12] = 2049;
                          *(void *)&buf[14] = v112;
                          *(_WORD *)&buf[22] = 2049;
                          *(void *)&uint8_t buf[24] = v113;
                          __int16 v341 = 2081;
                          uint64_t v342 = (uint64_t)v242;
                          __int16 v343 = 2048;
                          uint64_t v344 = v238;
                          __int16 v345 = 2048;
                          uint64_t v346 = v239;
                          __int16 v347 = 1024;
                          int v348 = v240;
                          __int16 v349 = 2082;
                          v350 = v124;
                          __int16 v351 = 2082;
                          v352 = v134;
                          *(_WORD *)v353 = 2049;
                          *(void *)&v353[2] = v275;
                          __int16 v354 = 2049;
                          uint64_t v355 = v276;
                          __int16 v356 = 2048;
                          uint64_t v357 = *((void *)&v290 + 1);
                          _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "%{public}s p = x,y: %{private}f,%{private}f %{private}s sigmaDist: %f m horizontalAccuracy: %f m strobe: %d yield-source: %{public}s yield-type: %{public}s, converted lat-lon: %{private}.10f, %{private}.10f t=%lld", buf, 0x76u);
                          if (SHIBYTE(v256) < 0)
                          {
                            operator delete(v255.__vftable);
                            unsigned __int8 v10 = (uint64_t *)(a1 + 1544);
                            if ((SHIBYTE(v258) & 0x80000000) == 0)
                            {
LABEL_226:
                              if ((SHIBYTE(v338) & 0x80000000) == 0) {
                                goto LABEL_227;
                              }
                              goto LABEL_231;
                            }
                          }
                          else
                          {
                            unsigned __int8 v10 = (uint64_t *)(a1 + 1544);
                            if ((SHIBYTE(v258) & 0x80000000) == 0) {
                              goto LABEL_226;
                            }
                          }
                          operator delete(v257.__vftable);
                          if ((SHIBYTE(v338) & 0x80000000) == 0)
                          {
LABEL_227:
                            if (qword_10047BED8 != -1)
                            {
LABEL_359:
                              dispatch_once(&qword_10047BED8, &stru_100462220);
                              v135 = v45[95].superclass;
                              if (!os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT)) {
                                goto LABEL_243;
                              }
                              goto LABEL_233;
                            }
LABEL_232:
                            v135 = v45[95].superclass;
                            if (!os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT)) {
                              goto LABEL_243;
                            }
LABEL_233:
                            uint64_t v136 = *(void *)&v317;
                            if ((v330 & 0x20000000000) == 0) {
                              uint64_t v136 = 0x7FF4000000000000;
                            }
                            uint64_t v137 = v322;
                            if ((v330 & 0x80000000000) == 0) {
                              uint64_t v137 = 0x7FF4000000000000;
                            }
                            uint64_t v138 = *((void *)&v326 + 1);
                            if ((v330 & 0x4000000000000) == 0) {
                              uint64_t v138 = 0x7FF4000000000000;
                            }
                            if ((v330 & 0x2000000000000) != 0) {
                              uint64_t v139 = v326;
                            }
                            else {
                              uint64_t v139 = 0x7FF4000000000000;
                            }
                            *(_DWORD *)long long buf = 134218752;
                            *(void *)&uint8_t buf[4] = v136;
                            *(_WORD *)&unsigned char buf[12] = 2048;
                            *(void *)&buf[14] = v137;
                            *(_WORD *)&buf[22] = 2048;
                            *(void *)&uint8_t buf[24] = v138;
                            __int16 v341 = 2048;
                            uint64_t v342 = v139;
                            _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "Polygon distances, signedDistToSurvey: %f m, signedDistToFloorplan: %f m, gpsSignedDistToSurvey: %f m, gpsSignedDistToFloorplan: %f m", buf, 0x2Au);
LABEL_243:
                            *(void *)&long long v296 = *((void *)&v285 + 1);
                            int v140 = (*(uint64_t (**)(uint64_t))(*(void *)v331 + 72))(v331);
                            sub_100235884(v10, v140, (uint64_t)&v248);
                            *((void *)&v296 + 1) = v248.__imp_.__imp_;
                            *(void *)&long long v297 = v250;
                            *((void *)&v297 + 1) = v249;
                            if (v252) {
                              sub_10019FAF8((uint64_t)&v295, v251);
                            }
                            sub_1002AA1F0(*(void *)(a1 + 1520), (uint64_t)&v257);
                            if ((_BYTE)v258) {
                              sub_10019FB0C((uint64_t)&v295, *(double *)&v257.__imp_.__imp_);
                            }
                            if (v254) {
                              sub_10019FB20((uint64_t)&v295, v253);
                            }
                            *((void *)&v298 + 1) = v20;
                            int v141 = sub_100254644((uint64_t)v335);
                            sub_10019FABC((uint64_t)&v295, v141);
                            int v142 = sub_10025462C((uint64_t)v335);
                            sub_10019FAD0((uint64_t)&v295, v142);
                            *(double *)&long long v298 = *((double *)&v298 + 1)
                                             * *((double *)&v286 + 1)
                                             * *((double *)&v287 + 1)
                                             * *(double *)&v287;
                            v255.__vftable = 0;
                            v255.__imp_.__imp_ = 0;
                            int64_t v256 = 0;
                            uint64_t v143 = sub_10025461C((uint64_t)v335);
                            uint64_t v144 = sub_10025463C((uint64_t)v335);
                            double v145 = sub_100253CA8(v144);
                            sub_100311EA0(v143, &v255, (uint64_t)&v246, v145);
                            if (qword_10047BED8 == -1)
                            {
                              v146 = v45[95].superclass;
                              if (!os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT)) {
                                goto LABEL_256;
                              }
                            }
                            else
                            {
                              dispatch_once(&qword_10047BED8, &stru_100462220);
                              v146 = v45[95].superclass;
                              if (!os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT)) {
                                goto LABEL_256;
                              }
                            }
                            uint64_t v147 = nullsub_22(v335);
                            unint64_t v148 = sub_1001F3CA4(v147);
                            sub_100311B64(v148, (uint64_t *)&v246, &v255);
                            if (buf[23] >= 0) {
                              v149 = buf;
                            }
                            else {
                              v149 = *(unsigned char **)buf;
                            }
                            LODWORD(__dst) = 136315138;
                            *(void *)((char *)&__dst + 4) = v149;
                            _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&__dst, 0xCu);
                            if ((buf[23] & 0x80000000) != 0) {
                              operator delete(*(void **)buf);
                            }
LABEL_256:
                            sub_10007C388(&v299, (char *)v246, v247, (v247 - (unsigned char *)v246) >> 3);
                            unint64_t v150 = 126 - 2 * __clz((uint64_t)(*((void *)&v299 + 1) - v299) >> 3);
                            if (*((void *)&v299 + 1) == (void)v299) {
                              uint64_t v151 = 0;
                            }
                            else {
                              uint64_t v151 = v150;
                            }
                            sub_100244920((double *)v299, *((double **)&v299 + 1), (uint64_t)buf, v151, 1);
                            *((void *)&v300 + 1) = v287;
                            double v152 = sub_100314F04((void *)(a1 + 2184));
                            sub_10019FAAC((uint64_t)&v295, v152);
                            double v153 = sub_100314F2C(a1 + 2184);
                            sub_10019FAB4((uint64_t)&v295, v153);
                            if (qword_10047BED8 == -1)
                            {
                              v154 = v45[95].superclass;
                              if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT)) {
                                goto LABEL_270;
                              }
                            }
                            else
                            {
                              dispatch_once(&qword_10047BED8, &stru_100462220);
                              v154 = v45[95].superclass;
                              if (!os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT)) {
                                goto LABEL_270;
                              }
                            }
                            sub_10000C898((uint64_t)buf);
                            uint64_t v155 = *(void *)&buf[16];
                            *(_DWORD *)&buf[*(void *)(*(void *)&buf[16] - 24) + 24] = *(_DWORD *)&buf[*(void *)(*(void *)&buf[16] - 24) + 24] & 0xFFFFFEFB | 4;
                            *(void *)((char *)&v341 + *(void *)(v155 - 24)) = 2;
                            sub_10002986C(&buf[16], (uint64_t)"{", 1);
                            LOBYTE(v244) = 34;
                            v156 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v157 = sub_10002986C(v156, (uint64_t)"prbPipelinedSaysYield", 21);
                            LOBYTE(v244) = 34;
                            v158 = sub_10002986C(v157, (uint64_t)&v244, 1);
                            sub_10002986C(v158, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v159 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v160 = sub_10002986C(v159, (uint64_t)"prbCoarseIndoorSaysIndoor", 25);
                            LOBYTE(v244) = 34;
                            v161 = sub_10002986C(v160, (uint64_t)&v244, 1);
                            sub_10002986C(v161, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v162 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v163 = sub_10002986C(v162, (uint64_t)"prbWifiSaysIndoor", 17);
                            LOBYTE(v244) = 34;
                            v164 = sub_10002986C(v163, (uint64_t)&v244, 1);
                            sub_10002986C(v164, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v165 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v166 = sub_10002986C(v165, (uint64_t)"prbGpsSaysIndoor", 16);
                            LOBYTE(v244) = 34;
                            v167 = sub_10002986C(v166, (uint64_t)&v244, 1);
                            sub_10002986C(v167, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v168 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v169 = sub_10002986C(v168, (uint64_t)"prbParticleFilterSaysYield", 26);
                            LOBYTE(v244) = 34;
                            v170 = sub_10002986C(v169, (uint64_t)&v244, 1);
                            sub_10002986C(v170, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v171 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v172 = sub_10002986C(v171, (uint64_t)"prbOnFloors", 11);
                            LOBYTE(v244) = 34;
                            v173 = sub_10002986C(v172, (uint64_t)&v244, 1);
                            sub_10002986C(v173, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v174 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v175 = sub_10002986C(v174, (uint64_t)"prbOnFloor", 10);
                            LOBYTE(v244) = 34;
                            v176 = sub_10002986C(v175, (uint64_t)&v244, 1);
                            sub_10002986C(v176, (uint64_t)": [", 3);
                            long long v177 = v299;
                            if ((void)v299 != *((void *)&v299 + 1))
                            {
                              std::ostream::operator<<();
                              while ((void)v177 + 8 != *((void *)&v177 + 1))
                              {
                                sub_10002986C(&buf[16], (uint64_t)", ", 2);
                                std::ostream::operator<<();
                              }
                            }
                            sub_10002986C(&buf[16], (uint64_t)"],  ", 4);
                            LOBYTE(v244) = 34;
                            v178 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v179 = sub_10002986C(v178, (uint64_t)"prbInlier", 9);
                            LOBYTE(v244) = 34;
                            v180 = sub_10002986C(v179, (uint64_t)&v244, 1);
                            sub_10002986C(v180, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v181 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v182 = sub_10002986C(v181, (uint64_t)"prbLocalizerIoWrapperSaysWifiOk", 31);
                            LOBYTE(v244) = 34;
                            v183 = sub_10002986C(v182, (uint64_t)&v244, 1);
                            sub_10002986C(v183, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v184 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v185 = sub_10002986C(v184, (uint64_t)"motionUpdateSource", 18);
                            LOBYTE(v244) = 34;
                            v186 = sub_10002986C(v185, (uint64_t)&v244, 1);
                            sub_10002986C(v186, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v187 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v188 = sub_10002986C(v187, (uint64_t)"prbRawCLOutdoorServiceSaysIndoor", 32);
                            LOBYTE(v244) = 34;
                            v189 = sub_10002986C(v188, (uint64_t)&v244, 1);
                            sub_10002986C(v189, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v190 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v191 = sub_10002986C(v190, (uint64_t)"prbCoarseIndoorSaysIndoorWifiAndGps", 35);
                            LOBYTE(v244) = 34;
                            v192 = sub_10002986C(v191, (uint64_t)&v244, 1);
                            sub_10002986C(v192, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)",  ", 3);
                            LOBYTE(v244) = 34;
                            v193 = sub_10002986C(&buf[16], (uint64_t)&v244, 1);
                            v194 = sub_10002986C(v193, (uint64_t)"prbZAxisSaysIndoor", 18);
                            LOBYTE(v244) = 34;
                            v195 = sub_10002986C(v194, (uint64_t)&v244, 1);
                            sub_10002986C(v195, (uint64_t)": ", 2);
                            std::ostream::operator<<();
                            sub_10002986C(&buf[16], (uint64_t)" }", 2);
                            std::stringbuf::str();
                            *(void *)&uint8_t buf[16] = v196;
                            if (SBYTE1(v357) < 0) {
                              operator delete(*(void **)v353);
                            }
                            std::streambuf::~streambuf();
                            std::iostream::~basic_iostream();
                            std::ios::~ios();
                            v197 = &__dst;
                            if (v338 < 0) {
                              v197 = (long long *)__dst;
                            }
                            LODWORD(v339[0]) = 136446210;
                            *(void *)((char *)v339 + 4) = v197;
                            _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)v339, 0xCu);
                            if (SHIBYTE(v338) < 0) {
                              operator delete((void *)__dst);
                            }
LABEL_270:
                            if ((v330 & 0x8000000000) == 0 || HIDWORD(v312) != 4 || v294)
                            {
LABEL_299:
                              if (*(void *)(a1 + 1832) != *(void *)(a1 + 1840))
                              {
                                sub_100257C00(*(void *)(a1 + 176), v10, v339);
                                sub_100257D68(*(void *)(a1 + 176), v10, &v244);
                                sub_1001A5348(a1 + 2240, v336);
                                sub_1001A0BBC(a1 + 2240, *((double *)&v285 + 1));
                                v241 = a4;
                                std::mutex::lock((std::mutex *)(a1 + 1768));
                                v203 = *(uint64_t **)(a1 + 1832);
                                for (uint64_t i = *(uint64_t **)(a1 + 1840); v203 != i; ++v203)
                                {
                                  uint64_t v205 = *v203;
                                  *(void *)long long buf = off_10045DAB8;
                                  *(_OWORD *)&uint8_t buf[8] = 0uLL;
                                  buf[24] &= 0xFCu;
                                  uint64_t v206 = *(void *)(a1 + 2408);
                                  if (v206)
                                  {
                                    sub_1002902AC(v206, *((uint64_t *)&v290 + 1), (uint64_t)&__dst);
                                    sub_10007B704((uint64_t)buf, (uint64_t)&__dst);
                                    nullsub_15(&__dst);
                                  }
                                  else
                                  {
                                    sub_100076484((uint64_t)buf, NAN);
                                    sub_10007647C((uint64_t)buf, NAN);
                                  }
                                  uint64_t v207 = *(void *)(a1 + 2144);
                                  uint64_t v208 = sub_1002464D8(*(void *)(a1 + 176));
                                  (*(void (**)(uint64_t, double *, _OWORD *, void **, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)v205 + 16))(v205, v270, v339, &v244, a1 + 224, a1 + 56, v207, a1 + 2240, buf, v208, a1 + 1536);
                                  nullsub_15(buf);
                                }
                                std::mutex::unlock((std::mutex *)(a1 + 1768));
                                v209 = v244;
                                a4 = v241;
                                if (v244)
                                {
                                  v210 = v245;
                                  v211 = v244;
                                  if (v245 != v244)
                                  {
                                    do
                                      v210 = sub_1002429C0(v210 - 37);
                                    while (v210 != v209);
                                    v211 = v244;
                                  }
                                  v245 = v209;
                                  operator delete(v211);
                                }
                                v212 = *(void **)&v339[0];
                                if (*(void *)&v339[0])
                                {
                                  v213 = (void *)*((void *)&v339[0] + 1);
                                  v214 = *(void **)&v339[0];
                                  if (*((void *)&v339[0] + 1) != *(void *)&v339[0])
                                  {
                                    do
                                      v213 = sub_1002429C0(v213 - 37);
                                    while (v213 != v212);
                                    v214 = *(void **)&v339[0];
                                  }
                                  *((void *)&v339[0] + 1) = v212;
                                  operator delete(v214);
                                }
                              }
                              uint64_t v215 = (*(uint64_t (**)(uint64_t))(*(void *)v331 + 56))(v331);
                              *(_OWORD *)long long buf = 0uLL;
                              if (v215)
                              {
                                v216 = operator new(0x798uLL);
                                v216[1] = 0;
                                v216[2] = 0;
                                void *v216 = off_100462608;
                                uint64_t v217 = sub_1000776C4(v216 + 3, v215);
                                v218 = *(std::__shared_weak_count **)&buf[8];
                                *(void *)long long buf = v217;
                                *(void *)&uint8_t buf[8] = v216;
                                if (v218)
                                {
                                  if (!atomic_fetch_add(&v218->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
                                    std::__shared_weak_count::__release_weak(v218);
                                  }
                                }
                              }
                              std::mutex::lock((std::mutex *)(a1 + 1592));
                              v219 = *(uint64_t **)(a1 + 1656);
                              for (j = *(uint64_t **)(a1 + 1664); v219 != j; ++v219)
                              {
                                uint64_t v221 = *v219;
                                uint64_t v222 = v336;
                                uint64_t v223 = nullsub_22(v335);
                                (*(void (**)(uint64_t, uint64_t, double *, uint64_t, unsigned char *))(*(void *)v221 + 16))(v221, v222, v270, v223, buf);
                              }
                              std::mutex::unlock((std::mutex *)(a1 + 1592));
                              v224 = *(std::__shared_weak_count **)&buf[8];
                              if (*(void *)&buf[8]
                                && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                                std::__shared_weak_count::__release_weak(v224);
                              }
                              std::mutex::lock((std::mutex *)(a1 + 1680));
                              v225 = *(uint64_t **)(a1 + 1744);
                              for (k = *(uint64_t **)(a1 + 1752); v225 != k; ++v225)
                              {
                                uint64_t v227 = *v225;
                                uint64_t v228 = v336;
                                uint64_t v229 = nullsub_22(v335);
                                (*(void (**)(uint64_t, uint64_t, double *, uint64_t))(*(void *)v227 + 32))(v227, v228, v270, v229);
                              }
                              std::mutex::unlock((std::mutex *)(a1 + 1680));
                              if ((v330 & 0x8000000000) != 0 && HIDWORD(v312) == 4 && !v294)
                              {
                                uint64_t v230 = (*(uint64_t (**)(uint64_t))(*(void *)v331 + 56))(v331);
                                sub_10023CB74(a1, v230);
                              }
                              *a4 = 0;
                              sub_1001A39A4(a4 + 8, v270);
                              *a4 = 1;
                              if (v246)
                              {
                                v247 = (char *)v246;
                                operator delete(v246);
                              }
                              v231 = v255.__vftable;
                              if (v255.__vftable)
                              {
                                imp = v255.__imp_.__imp_;
                                v233 = v255.__vftable;
                                if (v255.__imp_.__imp_ != (const char *)v255.__vftable)
                                {
                                  do
                                  {
                                    v234 = (std::__shared_weak_count *)*((void *)imp - 1);
                                    if (v234 && !atomic_fetch_add(&v234->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                    {
                                      ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                                      std::__shared_weak_count::__release_weak(v234);
                                    }
                                    imp -= 16;
                                  }
                                  while (imp != (const char *)v231);
                                  v233 = v255.__vftable;
                                }
                                v255.__imp_.__imp_ = (const char *)v231;
                                operator delete(v233);
                              }
                              nullsub_15(v260);
                              sub_1001A0B70(v270);
                              uint64_t v61 = (std::__shared_weak_count *)v332;
                              if (!v332) {
                                goto LABEL_344;
                              }
                              goto LABEL_342;
                            }
                            uint64_t v198 = a1 + 1200;
                            if (*(unsigned char *)(a1 + 1352))
                            {
                              if (*(unsigned char *)(a1 + 1200))
                              {
                                if (*(void *)(a1 + 1368) <= *(void *)(a1 + 1216)) {
                                  uint64_t v199 = a1 + 1200;
                                }
                                else {
                                  uint64_t v199 = a1 + 1352;
                                }
                                v200 = (unsigned char *)(a1 + 1048);
                                if (!*(unsigned char *)(a1 + 1048))
                                {
LABEL_279:
                                  if (!*(unsigned char *)v199) {
                                    goto LABEL_299;
                                  }
LABEL_286:
                                  uint64_t v201 = (*(uint64_t (**)(uint64_t))(*(void *)v331 + 56))(v331);
                                  if (*(unsigned char *)(a1 + 1352))
                                  {
                                    if (*(unsigned char *)v198)
                                    {
                                      if (*(void *)(a1 + 1368) > *(void *)(a1 + 1216)) {
                                        uint64_t v198 = a1 + 1352;
                                      }
                                      v202 = (unsigned char *)(a1 + 1048);
                                      if (!*(unsigned char *)(a1 + 1048)) {
                                        goto LABEL_291;
                                      }
LABEL_296:
                                      if (*(void *)(v198 + 16) > *(void *)(a1 + 1064)) {
                                        v202 = (unsigned char *)v198;
                                      }
                                      goto LABEL_298;
                                    }
                                    v202 = (unsigned char *)(a1 + 1048);
                                    uint64_t v198 = a1 + 1352;
                                    if (*(unsigned char *)(a1 + 1048)) {
                                      goto LABEL_296;
                                    }
                                  }
                                  else
                                  {
                                    v202 = (unsigned char *)(a1 + 1048);
                                    if (!*(unsigned char *)v198) {
                                      goto LABEL_298;
                                    }
                                    if (*v202) {
                                      goto LABEL_296;
                                    }
                                  }
LABEL_291:
                                  v202 = (unsigned char *)v198;
LABEL_298:
                                  sub_10021F42C(a1 + 2416, v270, v201, (uint64_t)(v202 + 8), &v336);
                                  goto LABEL_299;
                                }
                              }
                              else
                              {
                                v200 = (unsigned char *)(a1 + 1048);
                                uint64_t v199 = a1 + 1352;
                                if (!*(unsigned char *)(a1 + 1048)) {
                                  goto LABEL_279;
                                }
                              }
                            }
                            else
                            {
                              v200 = (unsigned char *)(a1 + 1048);
                              uint64_t v199 = a1 + 1200;
                              if (!*(unsigned char *)(a1 + 1200)) {
                                goto LABEL_285;
                              }
                              if (!*v200) {
                                goto LABEL_279;
                              }
                            }
                            if (*(void *)(v199 + 16) > *(void *)(a1 + 1064)) {
                              v200 = (unsigned char *)v199;
                            }
LABEL_285:
                            if (!*v200) {
                              goto LABEL_299;
                            }
                            goto LABEL_286;
                          }
LABEL_231:
                          operator delete((void *)__dst);
                          if (qword_10047BED8 != -1) {
                            goto LABEL_359;
                          }
                          goto LABEL_232;
                        }
                      }
                      memmove(v130, v127, (size_t)v129);
                      goto LABEL_222;
                    }
                  }
                  memmove(v120, v117, (size_t)v119);
                  goto LABEL_204;
                }
              }
              memmove(p_dst, v105, v107);
              goto LABEL_186;
            }
          }
          sub_1001A0CB4((uint64_t)v270, 0x8000000000000000);
          goto LABEL_168;
        }
        double v90 = 6.28318531;
      }
      sub_1001A0C24((uint64_t)v270, v90);
      goto LABEL_153;
    }
    uint64_t v74 = sub_10025463C((uint64_t)v335);
    uint64_t v75 = sub_10025463C((uint64_t)v335);
    double v76 = sub_100253CB8(v75);
    int v77 = sub_1002547AC(v74, v76);
    if (sub_1002547F8(v77))
    {
      sub_1001A0C88((uint64_t)v270, 0);
      if (qword_10047BED8 != -1)
      {
        dispatch_once(&qword_10047BED8, &stru_100462220);
        std::string v78 = v45[95].superclass;
        if (!os_log_type_enabled(v78, OS_LOG_TYPE_INFO)) {
          goto LABEL_117;
        }
        goto LABEL_116;
      }
      std::string v78 = v45[95].superclass;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
      {
LABEL_116:
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = *((void *)&v290 + 1);
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "YIELD_FAILURE_GIVE_UP at t=%lld", buf, 0xCu);
      }
    }
LABEL_117:
    int v73 = v294;
    goto LABEL_118;
  }
  *a4 = 0;
  sub_1001A0B70(v270);
  uint64_t v61 = (std::__shared_weak_count *)v332;
  if (v332)
  {
LABEL_342:
    if (!atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
LABEL_344:
  v235 = v334;
  if (v334)
  {
    if (!atomic_fetch_add(&v334->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  return sub_1002429C0(v335);
}

void sub_1002400A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::runtime_error a52)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a52);
  if (a31 < 0) {
    operator delete(a26);
  }
  __cxa_end_catch();
  JUMPOUT(0x1002401B4);
}

void sub_100240154()
{
  std::mutex::unlock(v0);
  JUMPOUT(0x100240178);
}

void sub_100240164()
{
  std::mutex::unlock(v0);
  JUMPOUT(0x100240170);
}

uint64_t sub_1002401F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10014E21C(a1);
  int v6 = (const std::string *)sub_100085D38(a2);
  std::string::operator=((std::string *)(a1 + 104), v6);
  v11[0] = (*(double (**)(uint64_t))(*(void *)a3 + 24))(a3);
  v11[1] = v7;
  _DWORD v11[2] = v8;
  v11[3] = v9;
  sub_1003587C0(v11, (uint64_t)v12);
  sub_10007B704(a1 + 8, (uint64_t)v12);
  return nullsub_17(v12);
}

void sub_10024029C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nullsub_17(va);
  sub_1001A0B70(v5);
  _Unwind_Resume(a1);
}

void sub_1002402B8(_Unwind_Exception *a1)
{
  sub_1001A0B70(v1);
  _Unwind_Resume(a1);
}

void sub_1002402CC(_Unwind_Exception *a1)
{
  sub_1001A0B70(v1);
  _Unwind_Resume(a1);
}

void sub_1002402E0(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double v9 = (void *)sub_10008807C(a4);
  uint64_t v10 = a2[1];
  uint64_t v113 = *a2;
  v114 = (std::__shared_weak_count *)v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10028EA94(v9, &v113, (uint64_t)&v115);
  uint64_t v11 = v114;
  if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  sub_10028DA80((unsigned char **)(a1 + 528), (uint64_t)&v115);
  if (!*(unsigned char *)(a1 + 664) || a3 - *(void *)(a1 + 672) >= 2000000001)
  {
    sub_10028E214(a1 + 528, (uint64_t)&v115);
    if (!*(unsigned char *)(a1 + 664)) {
      *(unsigned char *)(a1 + 664) = 1;
    }
    *(void *)(a1 + 672) = a3;
  }
  sub_10028EA8C((uint64_t *)(a1 + 528), a5);
  uint64_t v99 = *a2;
  uint64_t v100 = a5;
  long long __p = 0;
  unint64_t v105 = 0;
  v106[0] = 0;
  uint64_t v12 = nullsub_22(a4);
  uint64_t v13 = (void *)sub_100085D38(v12);
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13[1] - *v13) >> 4);
  if (v14)
  {
    if (v14 >> 61) {
      sub_1000A9108();
    }
    uint64_t v15 = (char *)operator new(0x6666666666666668 * ((uint64_t)(v13[1] - *v13) >> 4));
    long long __p = &v15[v105 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v105 = (unint64_t)__p;
    v106[0] = &v15[8 * v14];
  }
  int v94 = a2;
  uint64_t v95 = a3;
  uint64_t v96 = a1;
  __int16 v16 = *(void **)(sub_10008807C(a4) + 16);
  uint64_t v17 = v100;
  if (v16)
  {
    uint64_t v98 = a1 + 2032;
    sub_1001E4CDC(a1 + 2032, v16[2], v99, (uint64_t)&buf);
    while (1)
    {
      uint64_t v18 = v16[6];
      uint64_t v19 = v16[7];
      if (v18 != v19) {
        break;
      }
LABEL_16:
      nullsub_17(&buf);
      __int16 v16 = (void *)*v16;
      if (!v16) {
        goto LABEL_47;
      }
      sub_1001E4CDC(v98, v16[2], v99, (uint64_t)&buf);
    }
    uint64_t v20 = (double *)v105;
    while (1)
    {
      double v22 = *(double *)(v18 + 16) - *(double *)(v17 + 16) + v127;
      double v23 = (*(double *)(v18 + 24) - *(double *)(v17 + 24) + v128)
          * (*(double *)(v18 + 24) - *(double *)(v17 + 24) + v128)
          + v22 * v22;
      if ((unint64_t)v20 < v106[0])
      {
        *uint64_t v20 = v23;
        double v21 = v20 + 1;
      }
      else
      {
        BOOL v24 = (double *)__p;
        int64_t v25 = (char *)v20 - (unsigned char *)__p;
        uint64_t v26 = ((char *)v20 - (unsigned char *)__p) >> 3;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61) {
          sub_1000A9108();
        }
        uint64_t v28 = v106[0] - (void)__p;
        if ((uint64_t)(v106[0] - (void)__p) >> 2 > v27) {
          unint64_t v27 = v28 >> 2;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          if (v29 >> 61) {
            sub_1000A6A10();
          }
          uint64_t v30 = operator new(8 * v29);
          long long v31 = (double *)&v30[8 * v26];
          double *v31 = v23;
          double v21 = v31 + 1;
          if (v20 != v24)
          {
LABEL_32:
            unint64_t v32 = (char *)(v20 - 1) - (char *)v24;
            if (v32 < 0x168
              || &v30[v25 - 8 - (v32 & 0xFFFFFFFFFFFFFFF8)] > &v30[v25 - 8]
              || (double *)((char *)v20 - (v32 & 0xFFFFFFFFFFFFFFF8) - 8) > v20 - 1
              || (unint64_t)((char *)v20 - v30 - v25) < 0x20)
            {
              uint64_t v33 = v20;
              uint64_t v17 = v100;
            }
            else
            {
              uint64_t v35 = (v32 >> 3) + 1;
              uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v33 = &v20[v36 / 0xFFFFFFFFFFFFFFF8];
              long long v31 = (double *)((char *)v31 - v36);
              uint64_t v37 = &v30[8 * v26 - 16];
              uint64_t v38 = v20 - 2;
              uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v40 = *(_OWORD *)v38;
                *(v37 - 1) = *((_OWORD *)v38 - 1);
                *uint64_t v37 = v40;
                v37 -= 2;
                v38 -= 4;
                v39 -= 4;
              }
              while (v39);
              uint64_t v17 = v100;
              if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_35:
                long long __p = v31;
                unint64_t v105 = (unint64_t)v21;
                v106[0] = &v30[8 * v29];
                if (!v24) {
                  goto LABEL_21;
                }
LABEL_39:
                operator delete(v24);
                goto LABEL_21;
              }
            }
            do
            {
              uint64_t v34 = *((void *)v33-- - 1);
              *((void *)v31-- - 1) = v34;
            }
            while (v33 != v24);
            goto LABEL_35;
          }
        }
        else
        {
          uint64_t v30 = 0;
          long long v31 = (double *)(8 * v26);
          *(double *)(8 * v26) = v23;
          double v21 = (double *)(8 * v26 + 8);
          if (v20 != v24) {
            goto LABEL_32;
          }
        }
        uint64_t v17 = v100;
        long long __p = v31;
        unint64_t v105 = (unint64_t)v21;
        v106[0] = &v30[8 * v29];
        if (v24) {
          goto LABEL_39;
        }
      }
LABEL_21:
      unint64_t v105 = (unint64_t)v21;
      v18 += 80;
      uint64_t v20 = v21;
      if (v18 == v19) {
        goto LABEL_16;
      }
    }
  }
LABEL_47:
  uint64_t v41 = (double *)__p;
  int64_t v42 = (uint64_t)(v105 - (void)__p) >> 3;
  signed int v43 = v42 - 1;
  signed int v44 = llround((double)(unint64_t)v42 * 0.655);
  if (v43 >= v44) {
    signed int v45 = v44;
  }
  else {
    signed int v45 = v43;
  }
  int v46 = (double *)((char *)__p + 8 * v45);
  if (v46 == (double *)v105)
  {
    uint64_t v47 = v95;
    uint64_t v49 = v96;
    double v48 = v94;
  }
  else
  {
    sub_100242C24((double *)__p, v46, (double *)v105);
    double v48 = v94;
    uint64_t v47 = v95;
    uint64_t v41 = (double *)__p;
    uint64_t v49 = v96;
  }
  sub_1001A0C60(v100, sqrt(v41[v45]));
  if (__p)
  {
    unint64_t v105 = (unint64_t)__p;
    operator delete(__p);
  }
  uint64_t v50 = (*(uint64_t (**)(void))(*(void *)*v48 + 64))();
  uint64_t v51 = (const std::string *)sub_100085D38(v50);
  std::string::operator=((std::string *)(v100 + 104), v51);
  BOOL v52 = (*(uint64_t (**)(void))(*(void *)*v48 + 72))() != 0;
  sub_1001A0D14(v100, 4 * v52);
  uint64_t v53 = (*(uint64_t (**)(void))(*(void *)*v48 + 56))();
  uint64_t v54 = v53;
  if (*(unsigned char *)(v49 + 688) && !*(_DWORD *)(v100 + 524) && v53)
  {
    sub_1000776C4(v108, v53);
    sub_100148A04((uint64_t)v108, v109);
    sub_100074A24(v108);
    long long __p = off_100462250;
    sub_1001AB5F8(v106, v49 + 696);
    char v107 = 1;
    LOBYTE(v105) = 1;
    v121[0] = 0;
    sub_1001AA12C((uint64_t)v122, (uint64_t)v109);
    v122[4] = v109[4];
    uint64_t v123 = v110;
    if (v110) {
      atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v124 = v111;
    uint64_t v125 = v112;
    if (v112) {
      atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v121[0] = 1;
    sub_100241870((uint64_t)&__p, (uint64_t)v121, (uint64_t)&buf);
    if (v121[0])
    {
      long long v55 = v125;
      if (v125 && !atomic_fetch_add(&v125->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
      std::string::size_type v56 = v123;
      if (v123 && !atomic_fetch_add(&v123->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
      nullsub_15(v122);
      v121[0] = 0;
    }
    long long __p = off_100462250;
    sub_1000A45A0((uint64_t)v106);
    if (sub_1002A3C20(*(void *)(v49 + 248)))
    {
      sub_10014D97C(*v48, (uint64_t)&buf, (uint8_t *)v100, v47, *(void *)(v49 + 248), (uint64_t)&__p);
      sub_1001A39A8(v100, (uint64_t)&__p);
      sub_1001A0B70(&__p);
    }
    if (sub_100254634(a4) == 2)
    {
      sub_1001A9C7C((uint64_t)v103, (uint64_t)&v127);
      double v57 = sub_100370A98(v54, (uint64_t)v103, 0, 0, v129);
      nullsub_17(v103);
      sub_1001A0DC0(v100, v57);
    }
    sub_1001A0B70(&buf);
    os_log_type_t v58 = v112;
    if (v112 && !atomic_fetch_add(&v112->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
    double v59 = v110;
    if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
    nullsub_15(v109);
  }
  int v60 = sub_100254634(a4);
  sub_1001A0DAC(v100, v60);
  uint64_t v61 = *v48;
  uint64_t v62 = *(void *)(v49 + 248);
  if ((*(unsigned int (**)(uint64_t))(*(void *)*v48 + 72))(*v48) != 1)
  {
    if ((uint64_t v63 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 16))(v61),
          uint64_t v64 = v63,
          int v65 = *(_DWORD *)(v100 + 524),
          v65 != 2)
      && (v65 || *(_DWORD *)(v100 + 608) != 2)
      || ((*(uint64_t (**)(uint64_t))(*(void *)v63 + 48))(v63) & 1) == 0)
    {
      __int16 v66 = (*(uint64_t (**)(uint64_t, double, double))(*(void *)v64 + 16))(v64, *(double *)(v100 + 16), *(double *)(v100 + 24));
      if ((v66 & 1) == 0)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v61 + 80))(&buf, v61, v100 + 8);
        sub_1001A0D28(v100, (uint64_t)&buf);
        if ((v66 & 0x100) != 0)
        {
          double v67 = sub_1002A40A0(v62);
          sub_10031E92C(v64, v100 + 8, (uint64_t)&__p, v67);
          sub_1001A0BAC(v100, (uint64_t)&__p);
          nullsub_17(&__p);
        }
        nullsub_15(&buf);
      }
    }
  }
  uint64_t v68 = sub_10025463C(a4);
  *(_OWORD *)(v100 + 168) = *(_OWORD *)(v68 + 16);
  sub_1001A0BFC(v100, v120);
  double v69 = *(double *)(v100 + 184);
  double v70 = sub_100253CB8(v68);
  *(double *)(v100 + 16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v69 * v70 * v120;
  if (v54)
  {
    sub_1001A9C7C((uint64_t)v102, v100 + 8);
    double v71 = sub_100370590((void *)v54, (uint64_t)v102, 0, 1, 1, *(double *)(v100 + 280));
    nullsub_17(v102);
    sub_1001A0D5C(v100, v71);
    if (sub_100254634(a4) == 2)
    {
      sub_1001A9C7C((uint64_t)v101, v100 + 8);
      double v72 = sub_100370A98(v54, (uint64_t)v101, 0, 1, *(double *)(v100 + 152));
      nullsub_17(v101);
      sub_1001A0D98(v100, v72);
    }
  }
  uint64_t v73 = *(void *)(v49 + 248);
  if (sub_100254634(a4) != 2)
  {
    int v78 = sub_100254680(a4, *(double *)(v100 + 160));
    *(_DWORD *)(v100 + 296) = !sub_1002547E8(v78);
    if (!v54) {
      goto LABEL_111;
    }
    goto LABEL_108;
  }
  double v74 = *(double *)(v100 + 152);
  if (v74 > sub_1002A3E1C(v73)) {
    goto LABEL_107;
  }
  uint64_t v75 = *(void *)(v100 + 752);
  if ((v75 & 0x2000000000000) != 0)
  {
    double v76 = *(double *)(v100 + 648);
    float v77 = sub_1002A3ECC(v73);
LABEL_101:
    if (v76 > v77) {
      goto LABEL_107;
    }
    goto LABEL_102;
  }
  if ((v75 & 0x4000000000000) != 0)
  {
    double v76 = *(double *)(v100 + 656);
    float v77 = sub_1002A3EA0(v73);
    goto LABEL_101;
  }
LABEL_102:
  uint64_t v79 = *(void *)(v100 + 752);
  if ((v79 & 0x80000000000) != 0)
  {
    double v80 = *(double *)(v100 + 600);
    float v81 = sub_1002A3E74(v73);
  }
  else
  {
    if ((v79 & 0x20000000000) == 0) {
      goto LABEL_107;
    }
    double v80 = *(double *)(v100 + 560);
    float v81 = sub_1002A3E48(v73);
  }
  if (v80 > v81)
  {
LABEL_107:
    *(_DWORD *)(v100 + 296) = 1;
    if (!v54) {
      goto LABEL_111;
    }
    goto LABEL_108;
  }
  *(_DWORD *)(v100 + 296) = 0;
  if (!v54) {
    goto LABEL_111;
  }
LABEL_108:
  if ((*(unsigned char *)(v54 + 1913) & 0x40) != 0 && sub_10028D178(v54))
  {
    sub_1001A0BE0(v100, *(_DWORD *)(v54 + 1616));
    *(_DWORD *)(v49 + 524) = *(_DWORD *)(v54 + 1616);
    *(unsigned char *)(v49 + 52sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
  }
LABEL_111:
  uint64_t v82 = sub_10008CB7C(*(void *)(v49 + 152));
  sub_1001A0D70(v100, v82);
  sub_1001A0BBC(v100, NAN);
  sub_10019FAAC(v100, NAN);
  sub_1001A0C4C(v100, 0.0);
  (*(void (**)(void **__return_ptr))(*(void *)*v48 + 48))(&__p);
  if (sub_100281038(*(void *)(v49 + 296)))
  {
    if (__p)
    {
      double v83 = sub_100281048(*(void *)(v49 + 296), (uint64_t)__p);
      sub_10019FAAC(v100, v83);
      if (*(void *)(v49 + 368) != *(void *)(v49 + 376))
      {
        uint64_t v84 = nullsub_22(v49 + 328);
        double v85 = sub_100275E80(v84, (uint64_t)__p);
        sub_10019FAAC(v100, v85);
        double v86 = sub_1002C02E8(v49 + 328);
        sub_1001A0C4C(v100, v86);
        sub_1002C02DC(v49 + 328);
      }
    }
  }
  sub_1001A0C38(v100, NAN);
  v87.n128_u64[0] = *(void *)(v100 + 24);
  long long v88 = (std::__shared_weak_count *)v105;
  if (v105 && !atomic_fetch_add((atomic_ullong *volatile)(v105 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, double))v88->__on_zero_shared)(v88, v87.n128_f64[0]);
    std::__shared_weak_count::__release_weak(v88);
  }
  int v89 = v119;
  if (v119 && !atomic_fetch_add(&v119->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v89->__on_zero_shared)(v89, v87);
    std::__shared_weak_count::__release_weak(v89);
  }
  if (v117)
  {
    size_t v118 = v117;
    operator delete(v117);
  }
  double v90 = (char *)v115;
  if (v115)
  {
    int v91 = v116;
    uint64_t v92 = v115;
    if (v116 != v115)
    {
      do
      {
        unsigned __int8 v93 = (std::__shared_weak_count *)*((void *)v91 - 2);
        if (v93)
        {
          if (!atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, __n128))v93->__on_zero_shared)(v93, v87);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        v91 -= 80;
      }
      while (v91 != v90);
      uint64_t v92 = v115;
    }
    int v116 = v90;
    operator delete(v92);
  }
}

void sub_100241624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100241750(_Unwind_Exception *a1)
{
}

void sub_100241768(_Unwind_Exception *a1)
{
}

void sub_10024177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  if (a35)
  {
    operator delete(a35);
    sub_1001A0B70(a18);
    sub_100241D50(&STACK[0xB98]);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1002417FCLL);
}

void sub_100241790(_Unwind_Exception *a1)
{
  sub_1001A0B70(v1);
  sub_100241D50((void **)&STACK[0xB98]);
  _Unwind_Resume(a1);
}

void sub_1002417AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  if (a35)
  {
    operator delete(a35);
    sub_1001A0B70(v35);
    sub_100241D50((void **)&STACK[0xB98]);
    _Unwind_Resume(a1);
  }
  sub_1001A0B70(v35);
  sub_100241D50((void **)&STACK[0xB98]);
  _Unwind_Resume(a1);
}

void sub_1002417B4()
{
}

void sub_1002417F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void **sub_100241814(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    BOOL v4 = v2;
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_1002429C0(v3 - 37);
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100241870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_10045D828;
  uint64_t v6 = a3 + 8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = off_10045DA98;
  *(unsigned char *)(a3 + 32) &= 0xFCu;
  uint64_t v7 = a3 + 40;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = off_10045DAB8;
  *(unsigned char *)(a3 + 64) &= 0xFCu;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(_DWORD *)(a3 + 88) = 0;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_DWORD *)(a3 + 128) = 0;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 20sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  uint64_t v8 = a3 + 136;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(void *)(a3 + 304) = off_10045D7E8;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_OWORD *)(a3 + 328) = 0u;
  *(_OWORD *)(a3 + 344) = 0u;
  *(_OWORD *)(a3 + 36sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_OWORD *)(a3 + 376) = 0u;
  *(_OWORD *)(a3 + 392) = 0u;
  *(_OWORD *)(a3 + 408) = 0u;
  *(_DWORD *)(a3 + 424) = 0;
  *(void *)(a3 + 44sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(void *)(a3 + 448) = 0;
  *(void *)(a3 + 432) = 0;
  *(unsigned char *)(a3 + 456) &= 0xC0u;
  *(_WORD *)(a3 + 464) = 0;
  *(_OWORD *)(a3 + 472) = 0u;
  *(_OWORD *)(a3 + 488) = 0u;
  *(_OWORD *)(a3 + 504) = 0u;
  *(void *)(a3 + 52sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(void *)(a3 + 528) = off_10045DAB8;
  *(void *)(a3 + 544) = 0;
  *(void *)(a3 + 536) = 0;
  *(unsigned char *)(a3 + 552) &= 0xFCu;
  *(void *)(a3 + 56sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(void *)(a3 + 568) = off_10045D808;
  *(void *)(a3 + 584) = 0;
  *(void *)(a3 + 576) = 0;
  *(unsigned char *)(a3 + 592) &= 0xF8u;
  *(void *)(a3 + 60sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(_DWORD *)(a3 + 608) = 0;
  *(_OWORD *)(a3 + 616) = 0u;
  *(_OWORD *)(a3 + 632) = 0u;
  *(_OWORD *)(a3 + 648) = 0u;
  *(_DWORD *)(a3 + 664) = 0;
  *(_OWORD *)(a3 + 70sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_OWORD *)(a3 + 672) = 0u;
  *(_OWORD *)(a3 + 688) = 0u;
  *(_OWORD *)(a3 + 72sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_OWORD *)(a3 + 736) = 0u;
  *(void *)(a3 + 752) = *(void *)(a3 + 752) & 0xF000000000000000 | 0x10000000;
  *(void *)(a3 + 296) = 4;
  sub_10007B704(v7, a1 + 48);
  *(void *)(a3 + 752) |= 2uLL;
  double v9 = *(double *)(a1 + 112);
  *(double *)(a3 + 152) = v9;
  sub_1001A0C60(a3, v9);
  sub_1001A0C10(a3, *(void *)(a1 + 24));
  *(_DWORD *)(a3 + 296) = 0;
  sub_1001A0D14(a3, 1);
  uint64_t result = sub_1001A0CF8(a3, 8.0);
  if (*(unsigned char *)a2)
  {
    sub_1001AA12C((uint64_t)v16, a1 + 48);
    sub_1001486EC(a2 + 8, (uint64_t)v16, (uint64_t)v17);
    sub_100148878((uint64_t)v17, (uint64_t)&v18);
    sub_10007B704(v6, (uint64_t)&v18);
    nullsub_17(&v18);
    uint64_t result = nullsub_15(v16);
    if ((~*(unsigned __int16 *)(a1 + 208) & 0x8080) == 0)
    {
      double v11 = sub_10014B024(*(double *)(a1 + 176));
      double v12 = *(double *)(a1 + 120);
      uint64_t v13 = *(std::__shared_weak_count **)(a2 + 48);
      uint64_t v18 = *(void *)(a2 + 40);
      uint64_t v19 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v14 = sub_10014B3C4((uint64_t)&v18, v12);
      sub_1001A0BBC(a3, v14);
      uint64_t v15 = v19;
      if (v19)
      {
        if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      return sub_1001A0C24(a3, v11 * v11);
    }
  }
  return result;
}

void sub_100241BC0(_Unwind_Exception *a1)
{
  sub_1001A0B70(v1);
  _Unwind_Resume(a1);
}

void sub_100241BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000BA884((uint64_t)va);
  sub_1001A0B70(v9);
  _Unwind_Resume(a1);
}

void sub_100241BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  nullsub_17(va1);
  nullsub_15((uint64_t *)va);
  sub_1001A0B70(v2);
  _Unwind_Resume(a1);
}

void sub_100241C30(_Unwind_Exception *a1)
{
  sub_1001A0B70(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100241C44(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    nullsub_15(a1 + 8);
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void *sub_100241D0C(void *a1)
{
  *a1 = off_100462250;
  sub_1000A45A0((uint64_t)(a1 + 2));
  return a1;
}

void **sub_100241D50(void **a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    uint64_t v3 = a1[3];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  uint64_t v3 = a1[3];
  if (v3)
  {
LABEL_4:
    a1[4] = v3;
    operator delete(v3);
  }
LABEL_5:
  uint64_t v4 = (char *)*a1;
  if (*a1)
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 - 2);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 80;
      }
      while (v5 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

void sub_100241E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1592);
  std::mutex::lock((std::mutex *)(a1 + 1592));
  uint64_t v5 = *(char **)(a1 + 1656);
  uint64_t v6 = *(char **)(a1 + 1664);
  if (v5 != v6)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v6)
      {
        uint64_t v5 = *(char **)(a1 + 1664);
        break;
      }
    }
  }
  if (v5 != v6)
  {
    int64_t v7 = v6 - (v5 + 8);
    if (v6 != v5 + 8) {
      memmove(v5, v5 + 8, v6 - (v5 + 8));
    }
    *(void *)(a1 + 1664) = &v5[v7];
  }

  std::mutex::unlock(v4);
}

void sub_100241F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1680);
  std::mutex::lock((std::mutex *)(a1 + 1680));
  uint64_t v5 = *(char **)(a1 + 1752);
  uint64_t v6 = v5;
  unint64_t v7 = *(void *)(a1 + 1760);
  if ((unint64_t)v5 < v7)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v8 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  uint64_t v9 = *(char **)(a1 + 1744);
  uint64_t v10 = (v5 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    sub_1000A9108();
  }
  uint64_t v12 = v7 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_1000A6A10();
    }
    double v14 = (char *)operator new(8 * v13);
    uint64_t v15 = &v14[8 * v10];
    __int16 v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = a2;
    uint64_t v8 = (uint64_t)(v15 + 8);
    uint64_t v17 = (char *)(v5 - v9);
    if (v5 == v9)
    {
LABEL_12:
      *(void *)(a1 + 1744) = v15;
      *(void *)(a1 + 1752) = v8;
      *(void *)(a1 + 176sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v16;
      if (!v5) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    double v14 = 0;
    uint64_t v15 = (char *)(8 * v10);
    __int16 v16 = 0;
    *(void *)(8 * v1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = a2;
    uint64_t v8 = 8 * v10 + 8;
    uint64_t v17 = (char *)(v5 - v9);
    if (v5 == v9) {
      goto LABEL_12;
    }
  }
  unint64_t v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58) {
    goto LABEL_30;
  }
  if ((unint64_t)(v9 - v14) < 0x20) {
    goto LABEL_30;
  }
  uint64_t v19 = (v18 >> 3) + 1;
  uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v6 = &v5[-v20];
  v15 -= v20;
  double v21 = &v14[8 * v10 - 16];
  double v22 = (long long *)(v5 - 16);
  uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *v22;
    *((_OWORD *)v21 - 1) = *(v22 - 1);
    *(_OWORD *)double v21 = v24;
    v21 -= 32;
    v22 -= 2;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      uint64_t v25 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v9);
  }
  uint64_t v6 = *(char **)(a1 + 1744);
  *(void *)(a1 + 1744) = v15;
  *(void *)(a1 + 1752) = v8;
  *(void *)(a1 + 176sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v16;
  if (v6) {
LABEL_13:
  }
    operator delete(v6);
LABEL_14:
  *(void *)(a1 + 1752) = v8;

  std::mutex::unlock(v4);
}

void sub_1002420CC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1002420E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1680);
  std::mutex::lock((std::mutex *)(a1 + 1680));
  uint64_t v5 = *(char **)(a1 + 1744);
  uint64_t v6 = *(char **)(a1 + 1752);
  if (v5 != v6)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v6)
      {
        uint64_t v5 = *(char **)(a1 + 1752);
        break;
      }
    }
  }
  if (v5 != v6)
  {
    int64_t v7 = v6 - (v5 + 8);
    if (v6 != v5 + 8) {
      memmove(v5, v5 + 8, v6 - (v5 + 8));
    }
    *(void *)(a1 + 1752) = &v5[v7];
  }

  std::mutex::unlock(v4);
}

void sub_100242180(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1768);
  std::mutex::lock((std::mutex *)(a1 + 1768));
  uint64_t v5 = *(char **)(a1 + 1840);
  uint64_t v6 = v5;
  unint64_t v7 = *(void *)(a1 + 1848);
  if ((unint64_t)v5 < v7)
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v8 = (uint64_t)(v5 + 8);
    goto LABEL_14;
  }
  uint64_t v9 = *(char **)(a1 + 1832);
  uint64_t v10 = (v5 - v9) >> 3;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61) {
    sub_1000A9108();
  }
  uint64_t v12 = v7 - (void)v9;
  if (v12 >> 2 > v11) {
    unint64_t v11 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 61) {
      sub_1000A6A10();
    }
    double v14 = (char *)operator new(8 * v13);
    uint64_t v15 = &v14[8 * v10];
    __int16 v16 = &v14[8 * v13];
    *(void *)uint64_t v15 = a2;
    uint64_t v8 = (uint64_t)(v15 + 8);
    uint64_t v17 = (char *)(v5 - v9);
    if (v5 == v9)
    {
LABEL_12:
      *(void *)(a1 + 1832) = v15;
      *(void *)(a1 + 184sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v8;
      *(void *)(a1 + 1848) = v16;
      if (!v5) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    double v14 = 0;
    uint64_t v15 = (char *)(8 * v10);
    __int16 v16 = 0;
    *(void *)(8 * v1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = a2;
    uint64_t v8 = 8 * v10 + 8;
    uint64_t v17 = (char *)(v5 - v9);
    if (v5 == v9) {
      goto LABEL_12;
    }
  }
  unint64_t v18 = (unint64_t)(v17 - 8);
  if (v18 < 0x58) {
    goto LABEL_30;
  }
  if ((unint64_t)(v9 - v14) < 0x20) {
    goto LABEL_30;
  }
  uint64_t v19 = (v18 >> 3) + 1;
  uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v6 = &v5[-v20];
  v15 -= v20;
  double v21 = &v14[8 * v10 - 16];
  double v22 = (long long *)(v5 - 16);
  uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *v22;
    *((_OWORD *)v21 - 1) = *(v22 - 1);
    *(_OWORD *)double v21 = v24;
    v21 -= 32;
    v22 -= 2;
    v23 -= 4;
  }
  while (v23);
  if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      uint64_t v25 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v9);
  }
  uint64_t v6 = *(char **)(a1 + 1832);
  *(void *)(a1 + 1832) = v15;
  *(void *)(a1 + 184sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v8;
  *(void *)(a1 + 1848) = v16;
  if (v6) {
LABEL_13:
  }
    operator delete(v6);
LABEL_14:
  *(void *)(a1 + 184sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v8;
  *(unsigned char *)(a1 + 2232) = *(void *)(a1 + 1832) != v8;

  std::mutex::unlock(v4);
}

void sub_100242354(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100242368(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1768);
  std::mutex::lock((std::mutex *)(a1 + 1768));
  uint64_t v5 = *(char **)(a1 + 1832);
  uint64_t v6 = *(char **)(a1 + 1840);
  unint64_t v7 = v5;
  if (v5 != v6)
  {
    while (*(void *)v7 != a2)
    {
      v7 += 8;
      if (v7 == v6)
      {
        unint64_t v7 = *(char **)(a1 + 1840);
        break;
      }
    }
  }
  int64_t v8 = v6 - (v7 + 8);
  if (v6 != v7 + 8)
  {
    memmove(v7, v7 + 8, v6 - (v7 + 8));
    uint64_t v5 = *(char **)(a1 + 1832);
  }
  *(void *)(a1 + 184sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = &v7[v8];
  *(unsigned char *)(a1 + 2232) = v5 != &v7[v8];

  std::mutex::unlock(v4);
}

void sub_100242414(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 1856);
  std::mutex::lock((std::mutex *)(a1 + 1856));
  uint64_t v5 = *(char **)(a1 + 1920);
  uint64_t v6 = *(char **)(a1 + 1928);
  if (v5 != v6)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v6)
      {
        uint64_t v5 = *(char **)(a1 + 1928);
        break;
      }
    }
  }
  int64_t v7 = v6 - (v5 + 8);
  if (v6 != v5 + 8) {
    memmove(v5, v5 + 8, v6 - (v5 + 8));
  }
  *(void *)(a1 + 1928) = &v5[v7];

  std::mutex::unlock(v4);
}

void sub_1002424AC(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_1002424DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    nullsub_15(a1 + 48);
    *(unsigned char *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      nullsub_17(v4 + 3);
      operator delete(v4);
      uint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_1002425E0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 128);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 136);
    uint64_t v5 = *(void **)(a1 + 128);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = v4 - 40;
        nullsub_94(v4 - 32);
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = *(void **)(a1 + 128);
    }
    *(void *)(a1 + 136) = v3;
    operator delete(v5);
  }
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v7 = *(void *)(a1 + 72);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 80);
      uint64_t v9 = *(void **)(a1 + 72);
      if (v8 != v7)
      {
        do
        {
          uint64_t v10 = v8 - 40;
          nullsub_94(v8 - 32);
          uint64_t v8 = v10;
        }
        while (v10 != v7);
        uint64_t v9 = *(void **)(a1 + 72);
      }
      *(void *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v7;
      operator delete(v9);
    }
    *(unsigned char *)(a1 + 64) = 0;
  }
  unint64_t v11 = *(void **)(a1 + 40);
  if (v11)
  {
    *(void *)(a1 + 48) = v11;
    operator delete(v11);
  }
  nullsub_94(a1 + 8);
  return a1;
}

void sub_1002426B8(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = (void *)a1[2];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 168;
      do
      {
        int v7 = *(_DWORD *)(v3 - 176);
        if (v7 == v7 >> 31)
        {
          if (*(unsigned char *)(v3 - 128)) {
            *(unsigned char *)(v3 - 128) = 0;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v3 - 168);
          if (v7 < 0)
          {
            if (v6) {
              (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
            }
          }
          else
          {
            (*(void (**)(uint64_t))v6)(v3 - 168);
          }
        }
        v3 -= 208;
        v5 -= 208;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void *sub_1002427FC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x563B48C20563B5) {
      sub_1000A9108();
    }
    uint64_t result = operator new(760 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[95 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = (void *)sub_1001A39A4(&v8[v9 / 8], a2 + v9);
        v9 += 760;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1002428C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1002428D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_1003A5E78(v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_1002428FC(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1002428FC(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    uint64_t v3 = (void (***)(void))**result;
    if (v3)
    {
      uint64_t v4 = (void (***)(void))v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        uint64_t v6 = v4 - 95;
        int v7 = v4 - 95;
        do
        {
          (**v7)(v7);
          v6 -= 95;
          BOOL v8 = v7 == v3;
          v7 -= 95;
        }
        while (!v8);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_1002429C0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[29];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_100242B38((uint64_t)(a1 + 22));
    uint64_t v3 = (void *)a1[19];
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
    sub_100242B38((uint64_t)(a1 + 22));
    uint64_t v3 = (void *)a1[19];
    if (!v3) {
      goto LABEL_10;
    }
  }
  do
  {
    uint64_t v4 = v3;
    uint64_t v3 = (void *)*v3;
    uint64_t v5 = (std::__shared_weak_count *)v4[3];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v4);
  }
  while (v3);
LABEL_10:
  uint64_t v6 = (void *)a1[17];
  a1[17] = 0;
  if (v6) {
    operator delete(v6);
  }
  sub_10025D07C(a1 + 24);
  int v7 = (std::__shared_weak_count *)a1[1];
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

uint64_t sub_100242B38(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t v5 = v2[4];
      if (v5)
      {
        uint64_t v6 = v2[5];
        uint64_t v3 = (void *)v2[4];
        if (v6 != v5)
        {
          do
          {
            int v7 = *(std::__shared_weak_count **)(v6 - 8);
            if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
            v6 -= 16;
          }
          while (v6 != v5);
          uint64_t v3 = (void *)v2[4];
        }
        v2[5] = v5;
        operator delete(v3);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  BOOL v8 = *(void **)a1;
  *(void *)a1 = 0;
  if (v8) {
    operator delete(v8);
  }
  return a1;
}

double *sub_100242C24(double *result, double *a2, double *a3)
{
  while (a3 != a2)
  {
    unint64_t v3 = a3 - result;
    if (v3 < 2) {
      break;
    }
    if (v3 == 3)
    {
      double v38 = *result;
      double v39 = result[1];
      double v40 = *(a3 - 1);
      if (v39 >= *result)
      {
        if (v40 < v39)
        {
          result[1] = v40;
          *(a3 - 1) = v39;
          double v50 = *result;
          double v49 = result[1];
          if (v49 < *result)
          {
            void *result = v49;
            result[1] = v50;
          }
        }
      }
      else if (v40 >= v39)
      {
        void *result = v39;
        result[1] = v38;
        double v51 = *(a3 - 1);
        if (v51 < v38)
        {
          result[1] = v51;
          *(a3 - 1) = v38;
        }
      }
      else
      {
        void *result = v40;
        *(a3 - 1) = v38;
      }
      return result;
    }
    if (v3 == 2)
    {
      double v36 = *(a3 - 1);
      double v37 = *result;
      if (v36 < *result)
      {
        void *result = v36;
        *(a3 - 1) = v37;
      }
      return result;
    }
    if ((char *)a3 - (char *)result <= 63)
    {
      while (result != a3 - 1)
      {
        uint64_t v41 = result++;
        if (v41 != a3 && result != a3)
        {
          double v42 = *v41;
          double v43 = *v41;
          signed int v44 = result;
          signed int v45 = v41;
          int v46 = result;
          do
          {
            double v47 = *v46++;
            double v48 = v47;
            if (v47 < v43)
            {
              double v43 = v48;
              signed int v45 = v44;
            }
            signed int v44 = v46;
          }
          while (v46 != a3);
          if (v45 != v41)
          {
            *uint64_t v41 = *v45;
            double *v45 = v42;
          }
        }
      }
      return result;
    }
    uint64_t v4 = &result[v3 >> 1];
    uint64_t v5 = a3 - 1;
    double v6 = *(a3 - 1);
    double v7 = *v4;
    double v8 = *result;
    if (*v4 >= *result)
    {
      if (v6 >= v7)
      {
        int v9 = 0;
        double v10 = *result;
        double v11 = *v4;
        if (*result >= *v4) {
          goto LABEL_27;
        }
        goto LABEL_9;
      }
      double *v4 = v6;
      *uint64_t v5 = v7;
      double v21 = *result;
      if (*v4 < *result)
      {
        void *result = *v4;
        double *v4 = v21;
        int v9 = 2;
        double v10 = *result;
        double v11 = *v4;
        if (*result >= *v4) {
          goto LABEL_27;
        }
        goto LABEL_9;
      }
LABEL_49:
      int v9 = 1;
      double v10 = *result;
      double v11 = *v4;
      if (*result >= *v4) {
        goto LABEL_27;
      }
LABEL_9:
      uint64_t v12 = a3 - 1;
      unint64_t v13 = result + 1;
      if (result + 1 >= a3 - 1)
      {
LABEL_31:
        unint64_t v18 = v13;
      }
      else
      {
LABEL_10:
        double v14 = v13;
        while (1)
        {
          double v15 = *v4;
          do
          {
            double v16 = *v14++;
            double v17 = v16;
          }
          while (v16 < v15);
          unint64_t v18 = v14 - 1;
          do
          {
            double v19 = *--v12;
            double v20 = v19;
          }
          while (v19 >= v15);
          if (v18 >= v12) {
            break;
          }
          *unint64_t v18 = v20;
          *uint64_t v12 = v17;
          ++v9;
          if (v18 == v4) {
            uint64_t v4 = v12;
          }
        }
      }
      if (v18 != v4)
      {
        double v22 = *v18;
        if (*v4 < *v18)
        {
          *unint64_t v18 = *v4;
          double *v4 = v22;
          ++v9;
        }
      }
      if (v18 == a2) {
        return result;
      }
      if (!v9)
      {
        if (v18 <= a2)
        {
          unint64_t v27 = v18 + 1;
          while (v27 != a3)
          {
            double v29 = *(v27 - 1);
            double v28 = *v27++;
            if (v28 < v29) {
              goto LABEL_37;
            }
          }
        }
        else
        {
          while (v13 != v18)
          {
            double v24 = *(v13 - 1);
            double v23 = *v13++;
            if (v23 < v24) {
              goto LABEL_37;
            }
          }
        }
        return result;
      }
LABEL_37:
      if (v18 <= a2) {
        uint64_t result = v18 + 1;
      }
      else {
        a3 = v18;
      }
    }
    else
    {
      if (v6 >= v7)
      {
        void *result = v7;
        double *v4 = v8;
        if (*v5 < v8)
        {
          double *v4 = *v5;
          *uint64_t v5 = v8;
          int v9 = 2;
          double v10 = *result;
          double v11 = *v4;
          if (*result >= *v4) {
            goto LABEL_27;
          }
          goto LABEL_9;
        }
        goto LABEL_49;
      }
      void *result = v6;
      *uint64_t v5 = v8;
      int v9 = 1;
      double v10 = *result;
      double v11 = *v4;
      if (*result < *v4) {
        goto LABEL_9;
      }
LABEL_27:
      uint64_t v12 = a3 - 1;
      while (--v12 != result)
      {
        if (*v12 < v11)
        {
          void *result = *v12;
          *uint64_t v12 = v10;
          ++v9;
          unint64_t v13 = result + 1;
          if (result + 1 < v12) {
            goto LABEL_10;
          }
          goto LABEL_31;
        }
      }
      uint64_t v25 = result + 1;
      if (v10 >= *v5)
      {
        if (v25 == v5) {
          return result;
        }
        while (1)
        {
          double v26 = *v25;
          if (v10 < *v25) {
            break;
          }
          if (++v25 == v5) {
            return result;
          }
        }
        *v25++ = *v5;
        *uint64_t v5 = v26;
      }
      if (v25 == v5) {
        return result;
      }
      while (1)
      {
        double v30 = *result;
        do
        {
          double v31 = *v25++;
          double v32 = v31;
        }
        while (v30 >= v31);
        uint64_t v33 = v25 - 1;
        do
        {
          double v34 = *--v5;
          double v35 = v34;
        }
        while (v30 < v34);
        if (v33 >= v5) {
          break;
        }
        *uint64_t v33 = v35;
        *uint64_t v5 = v32;
      }
      uint64_t result = v25 - 1;
      if (v33 > a2) {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_100242FCC(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 8))
  {
    if (a2 - *(void *)(result + 24) >= 8000000000) {
      *(unsigned char *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_100242FF8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

char *sub_100243000@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[103] < 0) {
    return (char *)sub_1000559FC((unsigned char *)a2, *((void **)result + 10), *((void *)result + 11));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 5);
  *(void *)(a2 + 16) = *((void *)result + 12);
  return result;
}

void sub_10024302C(void *a1)
{
  *a1 = off_100462250;
  sub_1000A45A0((uint64_t)(a1 + 2));

  operator delete();
}

void sub_100243090(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1004622B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002430B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1004622B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100243104(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10024312C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10024314C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462308;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002431A0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1002431C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002431E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462358;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10024323C(uint64_t a1)
{
  return sub_10029A5DC(a1 + 24);
}

void sub_100243248(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1004623A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100243268(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1004623A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1002432BC(uint64_t a1)
{
  uint64_t v2 = *(void (****)(void))(a1 + 248);
  if (v2)
  {
    unint64_t v3 = *(void (****)(void))(a1 + 256);
    uint64_t v4 = *(void **)(a1 + 248);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 20;
      double v6 = v3 - 20;
      double v7 = v3 - 20;
      do
      {
        double v8 = *v7;
        v7 -= 20;
        (*v8)(v6);
        v5 -= 20;
        BOOL v9 = v6 == v2;
        double v6 = v7;
      }
      while (!v9);
      uint64_t v4 = *(void **)(a1 + 248);
    }
    *(void *)(a1 + 256) = v2;
    operator delete(v4);
  }
  if (*(unsigned char *)(a1 + 80))
  {
    sub_100042F7C((void *)(a1 + 88));
    *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }

  sub_1001DB108(a1 + 24);
}

void sub_100243380(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1004623F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002433A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1004623F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1002433F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    sub_1000FE82C((void *)(a1 + 96));
    *(unsigned char *)(a1 + 88) = 0;
  }

  sub_1001DB988(a1 + 24);
}

void sub_100243440(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100243460(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462448;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1002434BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002434DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462498;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100243530(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100243558(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      double v6 = *(v4 - 6);
      if (v6)
      {
        *(v4 - 5) = v6;
        operator delete(v6);
      }
      double v7 = v4 - 9;
      double v8 = (char *)*(v4 - 9);
      if (v8)
      {
        BOOL v9 = (char *)*(v4 - 8);
        uint64_t v5 = *(v4 - 9);
        if (v9 != v8)
        {
          double v10 = v9 - 168;
          do
          {
            int v12 = *((_DWORD *)v9 - 44);
            if (v12 == v12 >> 31)
            {
              if (*(v9 - 128)) {
                *(v9 - 128) = 0;
              }
            }
            else
            {
              uint64_t v11 = *((void *)v9 - 21);
              if (v12 < 0)
              {
                if (v11) {
                  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
                }
              }
              else
              {
                (*(void (**)(char *))v11)(v9 - 168);
              }
            }
            v9 -= 208;
            v10 -= 208;
          }
          while (v9 != v8);
          uint64_t v5 = *v7;
        }
        *(v4 - 8) = v8;
        operator delete(v5);
      }
      v4 -= 9;
    }
    while (v7 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_100243680()
{
}

__n128 sub_100243694(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1004624E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1002436E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1004624E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100243710(uint64_t a1@<X0>, void **a2@<X8>)
{
}

uint64_t sub_10024371C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN18LocalizerIoWrapper27updateMotionUniformTimestepENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000000000EEEEEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN18LocalizerIoWrapper27updateMotionUniformTimestepENSt3__16chrono8durationIxNS0_5ratioI"
                                "Ll1ELl1000000000EEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN18LocalizerIoWrapper27updateMotionUniformTimestepENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000000000EEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN18LocalizerIoWrapper27updateMotionUniformTimestepENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000000000EEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10024378C()
{
}

char *sub_100243798(void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)*a1;
  unint64_t v3 = (char *)a1[1];
  uint64_t v5 = 0x2E8BA2E8BA2E8BA3 * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_1000A9108();
  }
  if (0x5D1745D1745D1746 * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0x5D1745D1745D1746 * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((unsigned char *)a1[2] - v4) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v8 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x2E8BA2E8BA2E8BALL) {
      sub_1000A6A10();
    }
    BOOL v9 = (char *)operator new(88 * v8);
  }
  else
  {
    BOOL v9 = 0;
  }
  double v10 = &v9[88 * v5];
  *(_OWORD *)double v10 = *(_OWORD *)a2;
  *((void *)v10 + 2) = *(void *)(a2 + 16);
  unsigned char v10[24] = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v11 = &v9[88 * v5];
    long long v12 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v11 + 3) = v12;
    *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
    *((void *)v11 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 80);
    unsigned char v10[24] = 1;
  }
  unint64_t v13 = &v9[88 * v8];
  double v14 = v10 + 88;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    do
    {
      long long v15 = *(_OWORD *)(v3 - 88);
      *((void *)v10 - 9) = *((void *)v3 - 9);
      *(_OWORD *)(v10 - 88) = v15;
      *(v10 - 64) = 0;
      if (*(v3 - 64))
      {
        long long v16 = *(_OWORD *)(v3 - 56);
        long long v17 = *(_OWORD *)(v3 - 40);
        long long v18 = *(_OWORD *)(v3 - 24);
        *((void *)v10 - 1) = *((void *)v3 - 1);
        *(_OWORD *)(v10 - 24) = v18;
        *(_OWORD *)(v10 - 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v17;
        *(_OWORD *)(v10 - 56) = v16;
        *(v10 - 64) = 1;
      }
      v10 -= 88;
      v3 -= 88;
    }
    while (v3 != v4);
    unint64_t v3 = (char *)*a1;
    double v19 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v13;
    while (v19 != v3)
    {
      if (*(v19 - 64)) {
        *(v19 - 64) = 0;
      }
      v19 -= 88;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v14;
}

uint64_t sub_100243968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v24 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      double v10 = (void *)(v4 + 8);
      long long v12 = (void *)(v6 + 8);
      int v11 = *(_DWORD *)v6;
      if (v11 == v11 >> 31)
      {
        *double v10 = *v12;
        int v13 = v11;
      }
      else
      {
        long long v14 = *(_OWORD *)v12;
        *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
        *(_OWORD *)double v10 = v14;
        int v13 = *(_DWORD *)v6;
        int v11 = *(int *)v6 >> 31;
      }
      *(_DWORD *)uint64_t v4 = v13 ^ v11;
      int v15 = *(_DWORD *)(v6 + 32);
      long long v16 = (int *)(v6 + 40);
      if (v15 == v15 >> 31)
      {
        long long v17 = (void *)(v4 + 48);
        int v18 = *(_DWORD *)(v6 + 40);
        double v19 = (void *)(v6 + 48);
        if (v18 == v18 >> 31)
        {
          *long long v17 = *v19;
          int v20 = v18;
        }
        else
        {
          long long v22 = *(_OWORD *)v19;
          *(_DWORD *)(v4 + 64) = *(_DWORD *)(v6 + 64);
          *(_OWORD *)long long v17 = v22;
          int v20 = *v16;
          int v18 = v20 >> 31;
        }
        *(_DWORD *)(v4 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v20 ^ v18;
        *(void *)(v4 + 72) = *(void *)(v6 + 72);
        *(unsigned char *)(v4 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
        if (*(unsigned char *)(v6 + 80))
        {
          *(_DWORD *)(v4 + 84) = *(_DWORD *)(v6 + 84);
          *(unsigned char *)(v4 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
        }
        long long v7 = *(_OWORD *)(v6 + 88);
        long long v8 = *(_OWORD *)(v6 + 104);
        *(_DWORD *)(v4 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(v6 + 120);
        *(_OWORD *)(v4 + 104) = v8;
        *(_OWORD *)(v4 + 88) = v7;
        uint64_t v9 = v4;
      }
      else
      {
        if (v15 >= 0) {
          uint64_t v21 = v6 + 40;
        }
        else {
          uint64_t v21 = *(void *)v16;
        }
        sub_1001AC878(v4 + 40, v21);
        uint64_t v9 = v24;
      }
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v6 + 32) ^ (*(int *)(v6 + 32) >> 31);
      v6 += 208;
      uint64_t v4 = v9 + 208;
      uint64_t v24 = v9 + 208;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_100243AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_100243AF4(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_1000A9108();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  double v26 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_1000A6A10();
    }
    long long v7 = (char *)operator new(72 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  long long v8 = &v7[72 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)long long v8 = *(_OWORD *)a2;
  uint64_t v9 = &v7[72 * v6];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *((void *)v8 + 5) = v10;
  *((void *)v8 + 6) = v11;
  uint64_t v12 = *(void *)(a2 + 56);
  v8[64] = *(unsigned char *)(a2 + 64);
  *((void *)v8 + 7) = v12;
  int v13 = v8 + 72;
  v24.i64[1] = (uint64_t)(v8 + 72);
  uint64_t v25 = v9;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v14);
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      long long v17 = &v8[v16];
      uint64_t v18 = v14 + v16;
      *((void *)v17 - 9) = 0;
      *((void *)v17 - 8) = 0;
      *((void *)v17 - 7) = 0;
      *(_OWORD *)(v17 - 72) = *(_OWORD *)(v14 + v16 - 72);
      *((void *)v17 - 7) = *(void *)(v14 + v16 - 56);
      *(void *)(v18 - 72) = 0;
      *(void *)(v18 - 64) = 0;
      *(void *)(v18 - 56) = 0;
      *((void *)v17 - 6) = 0;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((_OWORD *)v17 - 3) = *(_OWORD *)(v14 + v16 - 48);
      *((void *)v17 - 4) = *(void *)(v14 + v16 - 32);
      *(void *)(v18 - 48) = 0;
      *(void *)(v18 - 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
      *(void *)(v18 - 32) = 0;
      *((void *)v17 - 3) = *(void *)(v14 + v16 - 24);
      uint64_t v19 = *(void *)(v14 + v16 - 16);
      *(v17 - 8) = *(unsigned char *)(v14 + v16 - 8);
      *((void *)v17 - 2) = v19;
      v16 -= 72;
    }
    while (v14 + v16 != v15);
    int64x2_t v20 = *a1;
    v8 += v16;
    int v13 = (char *)v24.i64[1];
    uint64_t v9 = v25;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v13;
  int64x2_t v24 = v20;
  uint64_t v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  uint64_t v25 = v21;
  long long __p = (void *)v20.i64[0];
  sub_100243CE4((uint64_t)&__p, v20.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_100243CE4(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v6 = (void **)(i - 72);
    *(void *)(a1 + 16) = i - 72;
    long long v7 = *(void **)(i - 48);
    if (v7)
    {
      *(void *)(i - 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v7;
      operator delete(v7);
    }
    long long v8 = (char *)*v6;
    if (*v6)
    {
      uint64_t v9 = *(char **)(i - 64);
      uint64_t v5 = *v6;
      if (v9 != v8)
      {
        uint64_t v10 = v9 - 168;
        do
        {
          int v12 = *((_DWORD *)v9 - 44);
          if (v12 == v12 >> 31)
          {
            if (*(v9 - 128)) {
              *(v9 - 128) = 0;
            }
          }
          else
          {
            uint64_t v11 = *((void *)v9 - 21);
            if (v12 < 0)
            {
              if (v11) {
                (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
              }
            }
            else
            {
              (*(void (**)(char *))v11)(v9 - 168);
            }
          }
          v9 -= 208;
          v10 -= 208;
        }
        while (v9 != v8);
        uint64_t v5 = *v6;
      }
      *(void *)(i - 64) = v8;
      operator delete(v5);
    }
  }
}

uint64_t sub_100243E0C(uint64_t *a1)
{
  sub_10000C898((uint64_t)v7);
  sub_10002986C(v8, (uint64_t)"[", 1);
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    std::ostream::operator<<();
    for (uint64_t i = v3 + 8; i != v2; i += 8)
    {
      sub_10002986C(v8, (uint64_t)", ", 2);
      std::ostream::operator<<();
    }
  }
  sub_10002986C(v8, (uint64_t)"]", 1);
  std::stringbuf::str();
  *(void *)((char *)v7
  v8[0] = v5;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100243FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100244004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100244018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024402C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100244040(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (std::__shared_weak_count *)v3[5];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = (std::__shared_weak_count *)v3[3];
      if (v5)
      {
LABEL_7:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      uint64_t v5 = (std::__shared_weak_count *)v3[3];
      if (v5) {
        goto LABEL_7;
      }
    }
    operator delete(v3);
  }
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

void sub_100244144()
{
}

__n128 sub_100244158(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_100462588;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1002441A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100462588;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1002441D4(uint64_t a1@<X0>, void **a2@<X8>)
{
}

uint64_t sub_1002441E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN18LocalizerIoWrapper26receiveMagneticReliabilityERK17SensorMeasurementE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN18LocalizerIoWrapper26receiveMagneticReliabilityERK17SensorMeasurementE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN18LocalizerIoWrapper26receiveMagneticReliabilityERK17SensorMeasurementE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN18LocalizerIoWrapper26receiveMagneticReliabilityERK17SensorMeasurementE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_100244250()
{
}

BOOL sub_10024425C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  if (*(void *)(a1 + 24) != *(void *)(a2 + 24)) {
    return 0;
  }
  if (*(double *)(a1 + 40) != *(double *)(a2 + 40)) {
    return 0;
  }
  if (*(double *)(a1 + 48) != *(double *)(a2 + 48)) {
    return 0;
  }
  __int16 v4 = *(_WORD *)(a1 + 136);
  unsigned int v5 = *(unsigned __int16 *)(a2 + 136);
  if (((v5 >> 4) & 1) != (v4 & 0x10) >> 4) {
    return 0;
  }
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if (((v5 >> 5) & 1) == (v4 & 0x20) >> 5
      && ((v4 & 0x20) == 0 || *(double *)(a1 + 88) == *(double *)(a2 + 88))
      && ((v5 >> 6) & 1) == (v4 & 0x40) >> 6
      && ((v4 & 0x40) == 0 || *(double *)(a1 + 96) == *(double *)(a2 + 96))
      && ((v5 >> 7) & 1) == (v4 & 0x80) >> 7
      && ((v4 & 0x80) == 0 || *(double *)(a1 + 104) == *(double *)(a2 + 104))
      && ((v5 >> 8) & 1) == (unsigned __int16)(v4 & 0x100) >> 8
      && ((v4 & 0x100) == 0 || *(double *)(a1 + 112) == *(double *)(a2 + 112))
      && ((v5 >> 9) & 1) == (unsigned __int16)(v4 & 0x200) >> 9
      && ((v4 & 0x200) == 0 || *(double *)(a1 + 120) == *(double *)(a2 + 120)))
    {
      unsigned int v7 = v4 & 0x400;
      if (((v5 >> 10) & 1) == v7 >> 10 && (!v7 || *(double *)(a1 + 128) == *(double *)(a2 + 128))) {
        return 1;
      }
    }
    return 0;
  }
  BOOL result = sub_10023417C((unsigned __int8 *)(a1 + 64), (unsigned __int8 *)(a2 + 64));
  if (result)
  {
    __int16 v4 = *(_WORD *)(a1 + 136);
    unsigned int v5 = *(unsigned __int16 *)(a2 + 136);
    goto LABEL_10;
  }
  return result;
}

void sub_100244400(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2] - v3;
  if (v4 == 760)
  {
    *((_DWORD *)a1 + 8) = 1;
  }
  else
  {
    unint64_t v5 = v4 / 760;
    if (v5 <= a2)
    {
      unint64_t v6 = 0;
    }
    else
    {
      unint64_t v6 = 0;
      do
      {
        if (v6 != a2)
        {
          uint64_t v7 = *(void *)(v3 + 760 * a2 + 240);
          uint64_t v8 = *a1;
          char v9 = (void *)(v3 + 240 + 760 * v6);
          while (v8 < v7 - *v9)
          {
            v9 += 95;
            ++v6;
            *((_DWORD *)a1 + 8) = 2;
            if (a2 == v6) {
              goto LABEL_6;
            }
          }
        }
        if (v6 == a2)
        {
LABEL_6:
          *((_DWORD *)a1 + 8) = 1;
          unint64_t v6 = a2;
        }
        ++a2;
      }
      while (a2 != v5);
    }
    long long __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    sub_100244820(&__p, v3, v3 + 760 * v6, v6);
    if (v6)
    {
      unint64_t v10 = v3 + 760 * v6;
      uint64_t v11 = a1[2];
      if (v10 != v11)
      {
        uint64_t v12 = 760 * v6;
        do
        {
          sub_1001A39A8(v3, v3 + v12);
          v3 += 760;
        }
        while (v3 + v12 != v11);
        unint64_t v10 = a1[2];
      }
      if (v10 != v3)
      {
        unint64_t v13 = v10 - 760;
        unint64_t v14 = (void (***)(void))(v10 - 760);
        do
        {
          (**v14)(v14);
          v13 -= 760;
          BOOL v15 = v14 == (void (***)(void))v3;
          v14 -= 95;
        }
        while (!v15);
      }
      a1[2] = v3;
    }
    uint64_t v16 = (char *)__p;
    if (__p)
    {
      long long v17 = __p;
      if (v21 != __p)
      {
        uint64_t v18 = v21 - 760;
        uint64_t v19 = v21 - 760;
        do
        {
          (**(void (***)(char *))v19)(v19);
          v18 -= 760;
          BOOL v15 = v19 == v16;
          v19 -= 760;
        }
        while (!v15);
        long long v17 = __p;
      }
      uint64_t v21 = v16;
      operator delete(v17);
    }
  }
}

void sub_100244618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  if (a10) {
    sub_1003A5EE0((uint64_t)&a10, a10);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100244634(void *a1, uint64_t a2)
{
  uint64_t v3 = 0x4E25B9EFD4E25B9FLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x563B48C20563B4) {
    sub_1000A9108();
  }
  if (0x9C4B73DFA9C4B73ELL * ((uint64_t)(a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9C4B73DFA9C4B73ELL * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4E25B9EFD4E25B9FLL * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x2B1DA46102B1DALL) {
    unint64_t v6 = 0x563B48C20563B4;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x563B48C20563B4) {
      sub_1000A6A10();
    }
    uint64_t v7 = (char *)operator new(760 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  long long v17 = &v7[760 * v3];
  *((void *)&v18 + 1) = &v7[760 * v6];
  sub_1001A39A4(v17, a2);
  uint64_t v8 = 0;
  unint64_t v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_1001A39A4(&v17[v8], v8 + i))
    v8 -= 760;
  uint64_t v12 = (char *)*a1;
  uint64_t v11 = (char *)a1[1];
  *a1 = &v17[v8];
  *(void *)&long long v18 = v17 + 760;
  *(_OWORD *)(a1 + 1) = v18;
  if (v11 != v12)
  {
    unint64_t v13 = v11 - 760;
    unint64_t v14 = v11 - 760;
    do
    {
      (**(void (***)(char *))v14)(v14);
      v13 -= 760;
      BOOL v15 = v14 == v12;
      v14 -= 760;
    }
    while (!v15);
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 760;
}

void sub_1002447E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1001A5B18((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100244820(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = result;
    if (a4 >= 0x563B48C20563B5) {
      sub_1000A9108();
    }
    BOOL result = operator new(760 * a4);
    uint64_t v8 = result;
    *unint64_t v5 = result;
    v5[1] = result;
    v5[2] = &result[95 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        BOOL result = (void *)sub_1001A39A4(&v8[v9 / 8], a2 + v9);
        v9 += 760;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1002448E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1002448F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_1003A5E78(v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_1002428FC(&a9);
  _Unwind_Resume(a1);
}

double *sub_100244920(double *result, double *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
  while (2)
  {
    uint64_t v12 = v11;
    while (1)
    {
      while (1)
      {
        uint64_t v11 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = a2 - v12;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              double v69 = *(a2 - 1);
              double v70 = *v12;
              if (v69 > *v12)
              {
                *uint64_t v12 = v69;
                *(a2 - 1) = v70;
              }
              break;
            case 3uLL:
              double v71 = v12[1];
              double v72 = *(a2 - 1);
              if (v71 <= v72) {
                uint64_t v73 = *((void *)a2 - 1);
              }
              else {
                uint64_t v73 = *((void *)v12 + 1);
              }
              if (v71 > v72) {
                double v71 = *(a2 - 1);
              }
              *(a2 - 1) = v71;
              *((void *)v12 + 1) = v73;
              double v74 = *(a2 - 1);
              if (v74 <= *v12) {
                double v75 = *v12;
              }
              else {
                double v75 = *(a2 - 1);
              }
              if (v74 > *v12) {
                double v74 = *v12;
              }
              *(a2 - 1) = v74;
              uint64_t v77 = *(void *)v12;
              double v76 = v12[1];
              if (v75 <= v76)
              {
                uint64_t v77 = *((void *)v12 + 1);
                double v76 = v75;
              }
              *(void *)uint64_t v12 = v77;
              v12[1] = v76;
              break;
            case 4uLL:
              double v79 = v12[1];
              double v78 = v12[2];
              if (*v12 <= v78) {
                uint64_t v80 = *((void *)v12 + 2);
              }
              else {
                uint64_t v80 = *(void *)v12;
              }
              if (*v12 <= v78) {
                double v78 = *v12;
              }
              v12[2] = v78;
              *(void *)uint64_t v12 = v80;
              double v81 = *(a2 - 1);
              if (v79 <= v81) {
                double v82 = *(a2 - 1);
              }
              else {
                double v82 = v79;
              }
              if (v79 <= v81) {
                double v81 = v79;
              }
              *(a2 - 1) = v81;
              double v83 = *v12;
              if (*v12 <= v82) {
                double v84 = v82;
              }
              else {
                double v84 = *v12;
              }
              if (*v12 > v82) {
                double v83 = v82;
              }
              *uint64_t v12 = v84;
              v12[1] = v83;
              double v85 = v12[2];
              double v86 = *(a2 - 1);
              if (v85 <= v86) {
                double v87 = *(a2 - 1);
              }
              else {
                double v87 = v12[2];
              }
              if (v85 > v86) {
                double v85 = *(a2 - 1);
              }
              *(a2 - 1) = v85;
              double v88 = v12[1];
              if (v88 <= v87) {
                double v89 = v87;
              }
              else {
                double v89 = v12[1];
              }
              if (v88 > v87) {
                double v88 = v87;
              }
              v12[1] = v89;
              v12[2] = v88;
              break;
            case 5uLL:
              uint64_t v90 = *(void *)v12;
              double v91 = v12[1];
              if (*v12 <= v91) {
                uint64_t v92 = *((void *)v12 + 1);
              }
              else {
                uint64_t v92 = *(void *)v12;
              }
              if (*v12 > v91) {
                uint64_t v90 = *((void *)v12 + 1);
              }
              *(void *)uint64_t v12 = v92;
              *((void *)v12 + 1) = v90;
              double v93 = v12[3];
              double v94 = *(a2 - 1);
              if (v93 <= v94) {
                uint64_t v95 = *((void *)a2 - 1);
              }
              else {
                uint64_t v95 = *((void *)v12 + 3);
              }
              if (v93 > v94) {
                double v93 = *(a2 - 1);
              }
              *(a2 - 1) = v93;
              *((void *)v12 + 3) = v95;
              double v96 = *(a2 - 1);
              double v97 = v12[2];
              if (v96 <= v97) {
                double v98 = v12[2];
              }
              else {
                double v98 = *(a2 - 1);
              }
              if (v96 > v97) {
                double v96 = v12[2];
              }
              *(a2 - 1) = v96;
              uint64_t v100 = *((void *)v12 + 2);
              double v99 = v12[3];
              double v101 = v12[1];
              if (v98 <= v99)
              {
                uint64_t v100 = *((void *)v12 + 3);
                double v99 = v98;
              }
              *((void *)v12 + 2) = v100;
              void v12[3] = v99;
              double v102 = *(a2 - 1);
              if (v101 <= v102) {
                double v103 = *(a2 - 1);
              }
              else {
                double v103 = v101;
              }
              if (v101 <= v102) {
                double v102 = v101;
              }
              *(a2 - 1) = v102;
              uint64_t v104 = *(void *)v12;
              double v106 = v12[2];
              double v105 = v12[3];
              if (v105 <= *v12) {
                double v107 = *v12;
              }
              else {
                double v107 = v12[3];
              }
              if (v105 > *v12) {
                double v105 = *v12;
              }
              if (v107 <= v106)
              {
                uint64_t v104 = *((void *)v12 + 2);
                double v106 = v107;
              }
              if (v105 <= v103) {
                double v108 = v103;
              }
              else {
                double v108 = v105;
              }
              if (v105 > v103) {
                double v105 = v103;
              }
              if (v108 <= v106) {
                double v103 = v106;
              }
              *(void *)uint64_t v12 = v104;
              v12[1] = v103;
              if (v108 <= v106) {
                double v109 = v108;
              }
              else {
                double v109 = v106;
              }
              v12[2] = v109;
              void v12[3] = v105;
              break;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          uint64_t v110 = v12 + 1;
          BOOL v112 = v12 == a2 || v110 == a2;
          if (a5)
          {
            if (!v112)
            {
              uint64_t v113 = 0;
              v114 = v12;
              do
              {
                double v117 = *v114;
                double v116 = v114[1];
                v114 = v110;
                if (v116 > v117)
                {
                  uint64_t v118 = v113;
                  do
                  {
                    *(double *)((char *)v12 + v118 + 8) = v117;
                    if (!v118)
                    {
                      uint64_t v115 = v12;
                      goto LABEL_192;
                    }
                    double v117 = *(double *)((char *)v12 + v118 - 8);
                    v118 -= 8;
                  }
                  while (v116 > v117);
                  uint64_t v115 = (double *)((char *)v12 + v118 + 8);
LABEL_192:
                  double *v115 = v116;
                }
                uint64_t v110 = v114 + 1;
                v113 += 8;
              }
              while (v114 + 1 != a2);
            }
          }
          else if (!v112)
          {
            do
            {
              double v120 = *v11;
              double v119 = v11[1];
              uint64_t v11 = v110;
              if (v119 > v120)
              {
                v121 = v110;
                do
                {
                  double *v121 = v120;
                  double v120 = *(v121 - 2);
                  --v121;
                }
                while (v119 > v120);
                double *v121 = v119;
              }
              ++v110;
            }
            while (v11 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            return sub_1002453C0(v12, a2, a2);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = &v12[v14 >> 1];
        double v17 = *(a2 - 1);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        double v20 = *v12;
        double v21 = *v16;
        if (*v12 > *v16)
        {
          if (v17 <= v20)
          {
            *uint64_t v16 = v20;
            *uint64_t v12 = v21;
            double v33 = *(a2 - 1);
            if (v33 <= v21) {
              goto LABEL_33;
            }
            *uint64_t v12 = v33;
          }
          else
          {
            *uint64_t v16 = v17;
          }
          *(a2 - 1) = v21;
LABEL_33:
          --a4;
          double v24 = *v12;
          if (a5) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        if (v17 <= v20) {
          goto LABEL_33;
        }
        *uint64_t v12 = v17;
        *(a2 - 1) = v20;
        double v23 = *v16;
        if (*v12 <= *v16) {
          goto LABEL_33;
        }
        *uint64_t v16 = *v12;
        *uint64_t v12 = v23;
        --a4;
        double v24 = *v12;
        if (a5) {
          goto LABEL_57;
        }
LABEL_56:
        if (*(v12 - 1) > v24) {
          goto LABEL_57;
        }
        if (v24 > *(a2 - 1))
        {
          do
          {
            double v60 = v12[1];
            ++v12;
          }
          while (v24 <= v60);
        }
        else
        {
          uint64_t v61 = v12 + 1;
          do
          {
            uint64_t v12 = v61;
            if (v61 >= a2) {
              break;
            }
            ++v61;
          }
          while (v24 <= *v12);
        }
        uint64_t v62 = a2;
        if (v12 < a2)
        {
          uint64_t v62 = a2;
          do
            double v63 = *--v62;
          while (v24 > v63);
        }
        if (v12 < v62)
        {
          double v64 = *v12;
          double v65 = *v62;
          do
          {
            *uint64_t v12 = v65;
            *uint64_t v62 = v64;
            do
            {
              double v66 = v12[1];
              ++v12;
              double v64 = v66;
            }
            while (v24 <= v66);
            do
            {
              double v67 = *--v62;
              double v65 = v67;
            }
            while (v24 > v67);
          }
          while (v12 < v62);
        }
        uint64_t v68 = v12 - 1;
        BOOL v5 = v12 - 1 >= v11;
        BOOL v6 = v12 - 1 == v11;
        if (v12 - 1 != v11) {
          *uint64_t v11 = *v68;
        }
        a5 = 0;
        double *v68 = v24;
      }
      double v18 = *v16;
      double v19 = *v12;
      if (*v16 <= *v12)
      {
        if (v17 > v18)
        {
          *uint64_t v16 = v17;
          *(a2 - 1) = v18;
          double v22 = *v12;
          if (*v16 > *v12)
          {
            *uint64_t v12 = *v16;
            *uint64_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 <= v18)
        {
          *uint64_t v12 = v18;
          *uint64_t v16 = v19;
          double v25 = *(a2 - 1);
          if (v25 <= v19) {
            goto LABEL_24;
          }
          *uint64_t v16 = v25;
        }
        else
        {
          *uint64_t v12 = v17;
        }
        *(a2 - 1) = v19;
      }
LABEL_24:
      double v26 = &v12[v15];
      double v28 = *(v26 - 1);
      unint64_t v27 = v26 - 1;
      double v29 = v28;
      double v30 = v12[1];
      double v31 = *(a2 - 2);
      if (v28 <= v30)
      {
        if (v31 > v29)
        {
          *unint64_t v27 = v31;
          *(a2 - 2) = v29;
          double v32 = v12[1];
          if (*v27 > v32)
          {
            v12[1] = *v27;
            *unint64_t v27 = v32;
          }
        }
      }
      else
      {
        if (v31 <= v29)
        {
          v12[1] = v29;
          *unint64_t v27 = v30;
          double v34 = *(a2 - 2);
          if (v34 <= v30) {
            goto LABEL_38;
          }
          *unint64_t v27 = v34;
        }
        else
        {
          v12[1] = v31;
        }
        *(a2 - 2) = v30;
      }
LABEL_38:
      double v35 = &v12[v15];
      double v37 = v35[1];
      double v36 = v35 + 1;
      double v38 = v37;
      double v39 = v12[2];
      double v40 = *(a2 - 3);
      if (v37 <= v39)
      {
        if (v40 > v38)
        {
          *double v36 = v40;
          *(a2 - 3) = v38;
          double v41 = v12[2];
          if (*v36 > v41)
          {
            v12[2] = *v36;
            *double v36 = v41;
          }
        }
      }
      else
      {
        if (v40 <= v38)
        {
          v12[2] = v38;
          *double v36 = v39;
          double v42 = *(a2 - 3);
          if (v42 <= v39) {
            goto LABEL_47;
          }
          *double v36 = v42;
        }
        else
        {
          v12[2] = v40;
        }
        *(a2 - 3) = v39;
      }
LABEL_47:
      double v43 = *v16;
      double v44 = *v27;
      double v45 = *v36;
      if (*v16 <= *v27)
      {
        if (v45 <= v43) {
          goto LABEL_55;
        }
        *uint64_t v16 = v45;
        *double v36 = v43;
        double v36 = &v12[v14 >> 1];
        double v43 = v44;
        if (v45 <= v44)
        {
          double v43 = v45;
          goto LABEL_55;
        }
      }
      else if (v45 <= v43)
      {
        *unint64_t v27 = v43;
        *uint64_t v16 = v44;
        unint64_t v27 = &v12[v14 >> 1];
        double v43 = v45;
        if (v45 <= v44)
        {
          double v43 = v44;
          goto LABEL_55;
        }
      }
      *unint64_t v27 = v45;
      *double v36 = v44;
LABEL_55:
      double v46 = *v12;
      *uint64_t v12 = v43;
      *uint64_t v16 = v46;
      --a4;
      double v24 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v47 = 0;
      do
        double v48 = v12[++v47];
      while (v48 > v24);
      double v49 = &v12[v47];
      double v50 = a2;
      if (v47 == 1)
      {
        double v50 = a2;
        do
        {
          if (v49 >= v50) {
            break;
          }
          double v52 = *--v50;
        }
        while (v52 <= v24);
      }
      else
      {
        do
          double v51 = *--v50;
        while (v51 <= v24);
      }
      if (v49 >= v50)
      {
        os_log_type_t v58 = v49 - 1;
        if (v49 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *uint64_t v12 = *v58;
        goto LABEL_75;
      }
      double v53 = *v50;
      uint64_t v54 = &v12[v47];
      long long v55 = v50;
      do
      {
        *uint64_t v54 = v53;
        *long long v55 = v48;
        do
        {
          double v56 = v54[1];
          ++v54;
          double v48 = v56;
        }
        while (v56 > v24);
        do
        {
          double v57 = *--v55;
          double v53 = v57;
        }
        while (v57 <= v24);
      }
      while (v54 < v55);
      os_log_type_t v58 = v54 - 1;
      if (v54 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *os_log_type_t v58 = v24;
      if (v49 < v50) {
        goto LABEL_78;
      }
      BOOL v59 = sub_1002450E4(v12, v58);
      uint64_t v12 = v58 + 1;
      BOOL result = (double *)sub_1002450E4(v58 + 1, a2);
      if (result) {
        break;
      }
      if (!v59)
      {
LABEL_78:
        BOOL result = (double *)sub_100244920(v11, v58, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v58 + 1;
      }
    }
    a2 = v58;
    if (!v59) {
      continue;
    }
    return result;
  }
}

BOOL sub_1002450E4(double *a1, double *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      double v17 = *(a2 - 1);
      double v18 = *a1;
      if (v17 <= *a1) {
        return 1;
      }
      *a1 = v17;
      *(a2 - 1) = v18;
      return 1;
    case 3:
      double v19 = a1[1];
      double v20 = *(a2 - 1);
      if (v19 <= v20) {
        uint64_t v21 = *((void *)a2 - 1);
      }
      else {
        uint64_t v21 = *((void *)a1 + 1);
      }
      if (v19 > v20) {
        double v19 = *(a2 - 1);
      }
      *(a2 - 1) = v19;
      *((void *)a1 + 1) = v21;
      double v22 = *(a2 - 1);
      if (v22 <= *a1) {
        double v23 = *a1;
      }
      else {
        double v23 = *(a2 - 1);
      }
      if (v22 > *a1) {
        double v22 = *a1;
      }
      *(a2 - 1) = v22;
      double v25 = *a1;
      double v24 = a1[1];
      if (v23 <= v24)
      {
        double v25 = a1[1];
        double v24 = v23;
      }
      *a1 = v25;
      a1[1] = v24;
      return 1;
    case 4:
      double v47 = a1[1];
      double v46 = a1[2];
      if (*a1 <= v46) {
        double v48 = a1[2];
      }
      else {
        double v48 = *a1;
      }
      if (*a1 <= v46) {
        double v46 = *a1;
      }
      a1[2] = v46;
      *a1 = v48;
      double v49 = *(a2 - 1);
      if (v47 <= v49) {
        double v50 = *(a2 - 1);
      }
      else {
        double v50 = v47;
      }
      if (v47 <= v49) {
        double v49 = v47;
      }
      *(a2 - 1) = v49;
      double v51 = *a1;
      if (*a1 <= v50) {
        double v52 = v50;
      }
      else {
        double v52 = *a1;
      }
      if (*a1 > v50) {
        double v51 = v50;
      }
      *a1 = v52;
      a1[1] = v51;
      double v53 = a1[2];
      double v54 = *(a2 - 1);
      if (v53 <= v54) {
        double v55 = *(a2 - 1);
      }
      else {
        double v55 = a1[2];
      }
      if (v53 > v54) {
        double v53 = *(a2 - 1);
      }
      *(a2 - 1) = v53;
      double v56 = a1[1];
      if (v56 <= v55) {
        double v57 = v55;
      }
      else {
        double v57 = a1[1];
      }
      if (v56 > v55) {
        double v56 = v55;
      }
      a1[1] = v57;
      a1[2] = v56;
      return 1;
    case 5:
      double v26 = *a1;
      double v27 = a1[1];
      if (*a1 <= v27) {
        double v28 = a1[1];
      }
      else {
        double v28 = *a1;
      }
      if (*a1 > v27) {
        double v26 = a1[1];
      }
      *a1 = v28;
      a1[1] = v26;
      double v29 = a1[3];
      double v30 = *(a2 - 1);
      if (v29 <= v30) {
        uint64_t v31 = *((void *)a2 - 1);
      }
      else {
        uint64_t v31 = *((void *)a1 + 3);
      }
      if (v29 > v30) {
        double v29 = *(a2 - 1);
      }
      *(a2 - 1) = v29;
      *((void *)a1 + 3) = v31;
      double v32 = *(a2 - 1);
      double v33 = a1[2];
      if (v32 <= v33) {
        double v34 = a1[2];
      }
      else {
        double v34 = *(a2 - 1);
      }
      if (v32 > v33) {
        double v32 = a1[2];
      }
      *(a2 - 1) = v32;
      uint64_t v36 = *((void *)a1 + 2);
      double v35 = a1[3];
      double v37 = a1[1];
      if (v34 <= v35)
      {
        uint64_t v36 = *((void *)a1 + 3);
        double v35 = v34;
      }
      *((void *)a1 + 2) = v36;
      a1[3] = v35;
      double v38 = *(a2 - 1);
      if (v37 <= v38) {
        double v39 = *(a2 - 1);
      }
      else {
        double v39 = v37;
      }
      if (v37 <= v38) {
        double v38 = v37;
      }
      *(a2 - 1) = v38;
      double v40 = *a1;
      double v42 = a1[2];
      double v41 = a1[3];
      if (v41 <= *a1) {
        double v43 = *a1;
      }
      else {
        double v43 = a1[3];
      }
      if (v41 > *a1) {
        double v41 = *a1;
      }
      if (v43 <= v42)
      {
        double v40 = a1[2];
        double v42 = v43;
      }
      if (v41 <= v39) {
        double v44 = v39;
      }
      else {
        double v44 = v41;
      }
      if (v41 > v39) {
        double v41 = v39;
      }
      if (v44 <= v42) {
        double v39 = v42;
      }
      *a1 = v40;
      a1[1] = v39;
      if (v44 <= v42) {
        double v45 = v44;
      }
      else {
        double v45 = v42;
      }
      a1[2] = v45;
      a1[3] = v41;
      return 1;
    default:
      uint64_t v3 = a1 + 2;
      double v4 = a1[2];
      double v6 = *a1;
      double v5 = a1[1];
      if (v5 <= v4) {
        double v7 = a1[2];
      }
      else {
        double v7 = a1[1];
      }
      if (v5 <= v4) {
        double v4 = a1[1];
      }
      if (v4 <= v6) {
        double v8 = *a1;
      }
      else {
        double v8 = v4;
      }
      if (v4 > v6) {
        double v4 = *a1;
      }
      *uint64_t v3 = v4;
      if (v8 <= v7) {
        double v9 = v7;
      }
      else {
        double v9 = v6;
      }
      if (v8 > v7) {
        double v8 = v7;
      }
      *a1 = v9;
      a1[1] = v8;
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v11 = 0;
      uint64_t v12 = 24;
      break;
  }
  while (1)
  {
    double v13 = *v10;
    double v14 = *v3;
    if (*v10 > *v3) {
      break;
    }
LABEL_27:
    uint64_t v3 = v10;
    v12 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
  uint64_t v15 = v12;
  do
  {
    *(double *)((char *)a1 + v15) = v14;
    uint64_t v16 = v15 - 8;
    if (v15 == 8)
    {
      *a1 = v13;
      if (++v11 != 8) {
        goto LABEL_27;
      }
      return v10 + 1 == a2;
    }
    double v14 = *(double *)((char *)a1 + v15 - 16);
    v15 -= 8;
  }
  while (v13 > v14);
  *(double *)((char *)a1 + v16) = v13;
  if (++v11 != 8) {
    goto LABEL_27;
  }
  return v10 + 1 == a2;
}

double *sub_1002453C0(double *a1, double *a2, double *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = (char *)a2 - (char *)a1;
  uint64_t v4 = a2 - a1;
  if ((char *)a2 - (char *)a1 >= 9 && (unint64_t)v3 >= 0x10)
  {
    int64_t v32 = (unint64_t)(v4 - 2) >> 1;
    int64_t v33 = v32;
    do
    {
      if (v32 >= v33)
      {
        uint64_t v34 = (2 * v33) | 1;
        double v35 = &a1[v34];
        if (2 * v33 + 2 < v4 && *v35 > v35[1])
        {
          ++v35;
          uint64_t v34 = 2 * v33 + 2;
        }
        uint64_t v36 = &a1[v33];
        double v37 = *v35;
        double v38 = *v36;
        if (*v35 <= *v36)
        {
          do
          {
            *uint64_t v36 = v37;
            uint64_t v36 = v35;
            if (v32 < v34) {
              break;
            }
            uint64_t v39 = 2 * v34;
            uint64_t v34 = (2 * v34) | 1;
            double v35 = &a1[v34];
            uint64_t v40 = v39 + 2;
            if (v40 < v4 && *v35 > v35[1])
            {
              ++v35;
              uint64_t v34 = v40;
            }
            double v37 = *v35;
          }
          while (*v35 <= v38);
          *uint64_t v36 = v38;
        }
      }
      BOOL v20 = v33-- <= 0;
    }
    while (!v20);
  }
  double v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 16)
    {
      double v6 = *a1;
      double v7 = a2;
      do
      {
        double v8 = *v7;
        if (*v7 > v6)
        {
          *double v7 = v6;
          *a1 = v8;
          double v6 = v8;
        }
        ++v7;
      }
      while (v7 != a3);
LABEL_25:
      double v5 = a3;
      goto LABEL_26;
    }
    double v9 = a1 + 1;
    uint64_t v10 = a1 + 2;
    int v11 = a2;
    while (1)
    {
      double v12 = *v11;
      if (*v11 > *a1)
      {
        *int v11 = *a1;
        *a1 = v12;
        if (v3 == 16 || *v9 <= *v10)
        {
          double v13 = a1 + 1;
          uint64_t v14 = 1;
          double v15 = *v9;
          if (*v9 <= v12)
          {
LABEL_19:
            uint64_t v16 = a1;
            do
            {
              *uint64_t v16 = v15;
              uint64_t v16 = v13;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v14) {
                break;
              }
              uint64_t v17 = 2 * v14;
              uint64_t v14 = (2 * v14) | 1;
              double v13 = &a1[v14];
              uint64_t v18 = v17 + 2;
              if (v18 < v4 && *v13 > v13[1])
              {
                ++v13;
                uint64_t v14 = v18;
              }
              double v15 = *v13;
            }
            while (*v13 <= v12);
            *uint64_t v16 = v12;
          }
        }
        else
        {
          double v13 = a1 + 2;
          uint64_t v14 = 2;
          double v15 = *v10;
          if (*v10 <= v12) {
            goto LABEL_19;
          }
        }
      }
      if (++v11 == a3) {
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  if (v3 >= 9)
  {
    uint64_t v19 = (unint64_t)v3 >> 3;
    do
    {
      uint64_t v21 = 0;
      double v22 = *a1;
      double v23 = a1;
      do
      {
        double v24 = v23;
        v23 += v21 + 1;
        uint64_t v25 = 2 * v21;
        uint64_t v21 = (2 * v21) | 1;
        uint64_t v26 = v25 + 2;
        if (v26 < v19 && *v23 > v23[1])
        {
          ++v23;
          uint64_t v21 = v26;
        }
        *double v24 = *v23;
      }
      while (v21 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
      if (v23 != --a2)
      {
        *double v23 = *a2;
        *a2 = v22;
        uint64_t v27 = (char *)v23 - (char *)a1 + 8;
        if (v27 < 9) {
          goto LABEL_29;
        }
        unint64_t v28 = (((unint64_t)v27 >> 3) - 2) >> 1;
        double v29 = &a1[v28];
        double v30 = *v29;
        double v22 = *v23;
        if (*v29 <= *v23) {
          goto LABEL_29;
        }
        do
        {
          *double v23 = v30;
          double v23 = v29;
          if (!v28) {
            break;
          }
          unint64_t v28 = (v28 - 1) >> 1;
          double v29 = &a1[v28];
          double v30 = *v29;
        }
        while (*v29 > v22);
      }
      *double v23 = v22;
LABEL_29:
      BOOL v20 = v19-- <= 2;
    }
    while (!v20);
  }
  return v5;
}

void sub_1002456FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10024571C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462608;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100245770(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100245798(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002457B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

char **sub_10024580C(uint64_t a1)
{
  return sub_100245900((char **)(a1 + 24));
}

void sub_100245818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)long long __p = *(_OWORD *)a3;
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_1002AD104(a2, __p, a4);
  uint64_t v4 = (char *)__p[0];
  if (__p[0])
  {
    double v5 = (char *)__p[1];
    double v6 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        double v7 = (std::__shared_weak_count *)*((void *)v5 - 1);
        if (v7)
        {
          if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      double v6 = __p[0];
    }
    __p[1] = v4;
    operator delete(v6);
  }
}

void sub_1002458EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

char **sub_100245900(char **a1)
{
  sub_10006A9DC((uint64_t)(a1 + 27), a1[28]);
  uint64_t v2 = a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[21];
  if (v3)
  {
    a1[22] = v3;
    operator delete(v3);
  }
  sub_10006A9DC((uint64_t)(a1 + 18), a1[19]);
  uint64_t v4 = a1[15];
  if (v4)
  {
    a1[16] = v4;
    operator delete(v4);
  }
  double v5 = a1[12];
  if (v5)
  {
    a1[13] = v5;
    operator delete(v5);
  }
  double v6 = a1[9];
  if (v6)
  {
    a1[10] = v6;
    operator delete(v6);
  }
  sub_10006A9DC((uint64_t)(a1 + 6), a1[7]);
  double v7 = a1[3];
  if (v7)
  {
    a1[4] = v7;
    operator delete(v7);
  }
  double v8 = *a1;
  if (*a1)
  {
    uint64_t v9 = a1[1];
    uint64_t v10 = *a1;
    if (v9 != v8)
    {
      do
      {
        int v11 = (std::__shared_weak_count *)*((void *)v9 - 1);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v9 -= 16;
      }
      while (v9 != v8);
      uint64_t v10 = *a1;
    }
    a1[1] = v8;
    operator delete(v10);
  }
  return a1;
}

void sub_100245A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  *(_OWORD *)long long __p = *(_OWORD *)a3;
  uint64_t v14 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  double v5 = (std::__shared_weak_count *)a5[1];
  uint64_t v11 = *a5;
  double v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1002ADBBC(a2, __p, a4, &v11);
  double v6 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  double v7 = (char *)__p[0];
  if (__p[0])
  {
    double v8 = (char *)__p[1];
    uint64_t v9 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        uint64_t v10 = (std::__shared_weak_count *)*((void *)v8 - 1);
        if (v10)
        {
          if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        v8 -= 16;
      }
      while (v8 != v7);
      uint64_t v9 = __p[0];
    }
    __p[1] = v7;
    operator delete(v9);
  }
}

void sub_100245B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t sub_100245B9C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100245BB4@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

BOOL sub_100245BC4()
{
  uint64_t v1 = qword_10047BEE0;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

void sub_100245BE4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x26u);
}

void sub_100245C08(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, OS_LOG_TYPE_INFO, a4, a5, 0x26u);
}

void sub_100245C20()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100245C98()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_100245D10(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  double v82 = 0;
  double v83 = 0;
  double v84 = 0;
  uint64_t v11 = (unsigned char *)a1[3];
  uint64_t v10 = (unsigned char *)a1[4];
  int64_t v12 = v10 - v11;
  if (v10 == v11)
  {
    double v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    if (v12 < 0) {
      sub_1000A9108();
    }
    double v13 = (float64x2_t *)operator new(v10 - v11);
    uint64_t v14 = (float64x2_t *)((char *)v13 + 8 * (v12 >> 3));
    double v82 = v13;
    double v84 = v14;
    memcpy(v13, v11, v12);
    double v83 = v14;
  }
  uint64_t v15 = *(void *)(*a1 + 56);
  long long v16 = *(_OWORD *)(a3 + 16);
  v80[0] = *(_OWORD *)a3;
  v80[1] = v16;
  uint64_t v81 = *(void *)(a3 + 32);
  double v17 = sub_10024A3B8(v15, (uint64_t)v80);
  sub_1002A7F8C(&v78, a2, a1, a1[8]);
  if (*(unsigned char *)a4)
  {
    size_t v18 = (char *)v14 - (char *)v13;
    double v55 = a5;
    unint64_t v56 = ((char *)v14 - (char *)v13) >> 3;
    if (v14 == v13) {
      goto LABEL_16;
    }
    unint64_t v19 = *(void *)(a4 + 8);
    if (v56 <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = ((char *)v14 - (char *)v13) >> 3;
    }
    if (v20 >= 2 && ((unint64_t)v13 >= v19 + 8 * v20 || v19 >= (unint64_t)&v13->f64[v20]))
    {
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
      double v49 = v13;
      unint64_t v50 = v20 & 0xFFFFFFFFFFFFFFFELL;
      double v54 = v49;
      double v51 = *(long long **)(a4 + 8);
      do
      {
        long long v52 = *v51++;
        long double v57 = exp(*((long double *)&v52 + 1));
        v53.f64[0] = exp(*(long double *)&v52);
        v53.f64[1] = v57;
        *double v49 = vmulq_f64(*v49, v53);
        ++v49;
        v50 -= 2;
      }
      while (v50);
      double v13 = v54;
      if (v20 == v21)
      {
LABEL_16:
        double v75 = 0;
        double v76 = 0;
        uint64_t v77 = 0;
        sub_1001F3E0C(&v75, *a1, a1[1], 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4));
        long long __p = 0;
        uint64_t v73 = 0;
        double v74 = 0;
        if (v14 != v13)
        {
          if ((v18 & 0x8000000000000000) != 0) {
            sub_1000A9108();
          }
          uint64_t v27 = (char *)operator new(v18);
          unint64_t v28 = &v27[8 * v56];
          long long __p = v27;
          double v74 = v28;
          memcpy(v27, v13, v18);
          uint64_t v73 = v28;
        }
        uint64_t v29 = *a2;
        double v30 = (std::__shared_weak_count *)a2[1];
        v71[0] = v29;
        v71[1] = (uint64_t)v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v68 = 0;
        double v69 = 0;
        double v70 = 0;
        uint64_t v31 = v78;
        int64_t v32 = v79 - v78;
        if (v79 == v78)
        {
          int64_t v33 = 0;
        }
        else
        {
          if (v32 < 0) {
            sub_1000A9108();
          }
          int64_t v33 = (char *)operator new(v79 - v78);
          uint64_t v68 = v33;
          double v70 = &v33[8 * (v32 >> 3)];
          memcpy(v33, v31, v32);
          double v69 = v70;
        }
        sub_100246AD8(v55, (uint64_t)&v75, (uint64_t)&__p, v71, (uint64_t)&v68, v17);
        if (v33)
        {
          double v69 = v33;
          operator delete(v33);
        }
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        if (__p)
        {
          uint64_t v73 = __p;
          operator delete(__p);
        }
        double v42 = v75;
        if (v75)
        {
          double v43 = v76;
          double v44 = v75;
          if (v76 != v75)
          {
            do
            {
              double v45 = (std::__shared_weak_count *)*((void *)v43 - 2);
              if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
              v43 -= 80;
            }
            while (v43 != v42);
            double v44 = v75;
          }
          double v76 = v42;
LABEL_66:
          operator delete(v44);
          goto LABEL_67;
        }
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v21 = 0;
    }
    unint64_t v22 = v20 - v21;
    uint64_t v23 = v21;
    double v24 = (double *)(v19 + 8 * v21);
    uint64_t v25 = (long double *)&v13->f64[v23];
    do
    {
      long double v26 = *v24++;
      *uint64_t v25 = *v25 * exp(v26);
      ++v25;
      --v22;
    }
    while (v22);
    goto LABEL_16;
  }
  double v65 = 0;
  double v66 = 0;
  uint64_t v67 = 0;
  sub_1001F3E0C(&v65, *a1, a1[1], 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4));
  uint64_t v62 = 0;
  double v63 = 0;
  double v64 = 0;
  uint64_t v34 = (char *)v14 - (char *)v13;
  if (v14 != v13)
  {
    if (v34 < 0) {
      sub_1000A9108();
    }
    double v35 = (char *)operator new((char *)v14 - (char *)v13);
    uint64_t v36 = &v35[8 * (v34 >> 3)];
    uint64_t v62 = v35;
    double v64 = v36;
    memcpy(v35, v13, (char *)v14 - (char *)v13);
    double v63 = v36;
  }
  uint64_t v37 = *a2;
  double v38 = (std::__shared_weak_count *)a2[1];
  v61[0] = v37;
  v61[1] = (uint64_t)v38;
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  os_log_type_t v58 = 0;
  BOOL v59 = 0;
  double v60 = 0;
  uint64_t v39 = v78;
  int64_t v40 = v79 - v78;
  if (v79 == v78)
  {
    double v41 = 0;
  }
  else
  {
    if (v40 < 0) {
      sub_1000A9108();
    }
    double v41 = (char *)operator new(v79 - v78);
    os_log_type_t v58 = v41;
    double v60 = &v41[8 * (v40 >> 3)];
    memcpy(v41, v39, v40);
    BOOL v59 = v60;
  }
  sub_100246AD8(a5, (uint64_t)&v65, (uint64_t)&v62, v61, (uint64_t)&v58, v17);
  if (v41)
  {
    BOOL v59 = v41;
    operator delete(v41);
  }
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  if (v62)
  {
    double v63 = v62;
    operator delete(v62);
  }
  double v46 = (char *)v65;
  if (v65)
  {
    double v47 = v66;
    double v44 = v65;
    if (v66 != v65)
    {
      do
      {
        double v48 = (std::__shared_weak_count *)*((void *)v47 - 2);
        if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
        v47 -= 80;
      }
      while (v47 != v46);
      double v44 = v65;
    }
    double v66 = v46;
    goto LABEL_66;
  }
LABEL_67:
  if (v78)
  {
    double v79 = v78;
    operator delete(v78);
  }
  if (v82) {
    operator delete(v82);
  }
}

void sub_1002462C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37)
{
  if (v37) {
    operator delete(v37);
  }
  sub_1002463A8((uint64_t)&a21);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100246424(&a26);
  double v41 = *(void **)(v39 - 200);
  if (v41)
  {
    *(void *)(v39 - 192) = v41;
    operator delete(v41);
  }
  if (v38) {
    operator delete(v38);
  }
  _Unwind_Resume(a1);
}

void sub_100246394()
{
  uint64_t v1 = *(void *)(v0 - 136);
  if (v1)
  {
    *(void *)(v0 - 128) = v1;
    JUMPOUT(0x100246388);
  }
  JUMPOUT(0x10024638CLL);
}

uint64_t sub_1002463A8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void **sub_100246424(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 2);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1002464D8(uint64_t a1)
{
  return a1 + 72;
}

float64_t sub_1002464E0(uint64_t a1, double a2)
{
  double v36 = (*(double (**)(void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48));
  double v32 = (1.0 - a2) * *(double *)(a1 + 64);
  v3.f64[0] = log(v32);
  uint64_t v4 = *(_OWORD **)(a1 + 96);
  uint64_t v5 = *(void *)(a1 + 104) - (void)v4;
  if (v5)
  {
    unint64_t v6 = v5 >> 3;
    double v31 = v3.f64[0];
    if (v36 != INFINITY)
    {
      uint64_t v9 = *(long long **)(a1 + 120);
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      if (v6 >= 2 && (unint64_t)((char *)v4 - (char *)v9) >= 0x10)
      {
        unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFFELL;
        float64x2_t v29 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v3.f64[0], 0);
        float64x2_t v30 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32, 0);
        unint64_t v17 = v6 & 0xFFFFFFFFFFFFFFFELL;
        size_t v18 = (float64x2_t *)v4;
        unint64_t v19 = v9;
        do
        {
          long long v20 = *v19++;
          long double v34 = exp(*((long double *)&v20 + 1));
          v21.f64[0] = exp(*(long double *)&v20);
          v21.f64[1] = v34;
          float64x2_t __x = vaddq_f64(v30, vmulq_n_f64(vmulq_n_f64(v21, v36), a2));
          long double v35 = log(__x.f64[1]);
          v22.f64[0] = log(__x.f64[0]);
          v22.f64[1] = v35;
          float64x2_t v3 = vsubq_f64(v29, v22);
          *v18++ = v3;
          v17 -= 2;
        }
        while (v17);
        if (v6 == v11) {
          return v3.f64[0];
        }
      }
      else
      {
        unint64_t v11 = 0;
      }
      unint64_t v23 = v6 - v11;
      double v24 = (double *)v9 + v11;
      uint64_t v25 = (void *)v4 + v11;
      do
      {
        long double v26 = *v24++;
        long double v27 = exp(v26);
        v3.f64[0] = v31 - log(v32 + v36 * v27 * a2);
        *v25++ = *(void *)&v3.f64[0];
        --v23;
      }
      while (v23);
      return v3.f64[0];
    }
    v3.f64[0] = v3.f64[0] - log(v32 + a2 * 0.0);
    if (v6 <= 1) {
      unint64_t v7 = 1;
    }
    else {
      unint64_t v7 = v6;
    }
    if (v7 < 4)
    {
      unint64_t v8 = 0;
LABEL_18:
      unint64_t v15 = v7 - v8;
      long long v16 = (void *)v4 + v8;
      do
      {
        *v16++ = *(void *)&v3.f64[0];
        --v15;
      }
      while (v15);
      return v3.f64[0];
    }
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v12 = vdupq_lane_s64(*(uint64_t *)&v3.f64[0], 0);
    double v13 = (int64x2_t *)(v4 + 1);
    unint64_t v14 = v7 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v13[-1] = v12;
      *double v13 = v12;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v7 != v8) {
      goto LABEL_18;
    }
  }
  return v3.f64[0];
}

uint64_t sub_100246714(uint64_t a1)
{
  return a1 + 96;
}

BOOL sub_10024671C(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 24);
  uint64_t v2 = *(double **)(a1 + 32);
  float64x2_t v3 = v1 + 1;
  if (v1 != v2 && v3 != v2)
  {
    double v5 = *v1;
    unint64_t v6 = v1 + 1;
    do
    {
      double v7 = *v6++;
      double v8 = v7;
      if (v5 < v7)
      {
        double v5 = v8;
        uint64_t v1 = v3;
      }
      float64x2_t v3 = v6;
    }
    while (v6 != v2);
  }
  return *v1 <= 0.0;
}

double sub_100246764(void *a1, double a2)
{
  sub_100246998((uint64_t)a1, a2);
  uint64_t v4 = (unsigned char *)a1[9];
  float64x2_t v3 = (unsigned char *)a1[10];
  int64_t v5 = v3 - v4;
  if (v3 == v4)
  {
    double v7 = 0;
    unint64_t v6 = 0;
    uint64_t v9 = (unsigned char *)a1[3];
    long long v16 = (unsigned char *)a1[4];
    size_t v10 = v16 - v9;
    if (v16 != v9) {
      goto LABEL_4;
    }
  }
  else
  {
    if (v5 < 0) {
      sub_1000A9108();
    }
    unint64_t v6 = (char *)operator new(v3 - v4);
    double v7 = &v6[8 * (v5 >> 3)];
    memcpy(v6, v4, v5);
    uint64_t v9 = (unsigned char *)a1[3];
    double v8 = (unsigned char *)a1[4];
    size_t v10 = v8 - v9;
    if (v8 != v9)
    {
LABEL_4:
      if ((v10 & 0x8000000000000000) != 0) {
        sub_1000A9108();
      }
      unint64_t v11 = (char *)operator new(v10);
      memcpy(v11, v9, v10);
      if (v7 == v6)
      {
        double v14 = 0.0;
        double v15 = 0.0;
        goto LABEL_21;
      }
      unint64_t v12 = (v7 - v6) >> 3;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      if (v12 < 2) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  if (v7 == v6)
  {
    double v14 = 0.0;
    double v15 = 0.0;
    if (!v6) {
      return v14 / (v15 + v14);
    }
    goto LABEL_22;
  }
  unint64_t v11 = 0;
  unint64_t v12 = (v7 - v6) >> 3;
  if (v12 <= 1) {
    unint64_t v12 = 1;
  }
  if (v12 < 2)
  {
LABEL_9:
    unint64_t v13 = 0;
    double v14 = 0.0;
    double v15 = 0.0;
    do
    {
LABEL_18:
      double v22 = *(double *)&v6[8 * v13];
      double v23 = *(double *)&v11[8 * v13];
      double v14 = v14 + (1.0 - v22) * v23;
      double v15 = v15 + v22 * v23;
      ++v13;
    }
    while (v12 != v13);
    goto LABEL_21;
  }
LABEL_15:
  uint64_t v17 = 0;
  unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  double v14 = 0.0;
  double v15 = 0.0;
  do
  {
    size_t v18 = (double *)&v6[8 * v17];
    double v19 = v18[1];
    long long v20 = (double *)&v11[8 * v17];
    double v21 = v20[1];
    double v14 = v14 + (1.0 - *v18) * *v20 + (1.0 - v19) * v21;
    double v15 = v15 + *v18 * *v20 + v19 * v21;
    v17 += 2;
  }
  while (v13 != v17);
  if (v12 != v13) {
    goto LABEL_18;
  }
LABEL_21:
  operator delete(v11);
  if (v6) {
LABEL_22:
  }
    operator delete(v6);
  return v14 / (v15 + v14);
}

void sub_10024695C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100246998(uint64_t a1, double a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 48))(*(void *)(a1 + 48));
  uint64_t v6 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (v6)
  {
    double v7 = v5;
    double v8 = (1.0 - a2) * *(double *)(a1 + 64);
    unint64_t v9 = v6 >> 3;
    unint64_t v10 = 0;
    if (v5 == INFINITY)
    {
      if (v9 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = v9;
      }
      do
      {
        uint64_t result = sub_100246D50(a1, v10, v8 / (v8 + a2 * 0.0), a2, 0.0, a2 * 0.0, v8);
        *(double *)(*(void *)(a1 + 72) + 8 * v10++) = v8 / (v8 + a2 * 0.0);
      }
      while (v11 != v10);
    }
    else
    {
      if (v9 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        uint64_t v12 = v9;
      }
      do
      {
        long double v13 = exp(*(long double *)(*(void *)(a1 + 120) + 8 * v10));
        double v14 = v7 * v13 * a2;
        double v15 = v8 / (v8 + v14);
        uint64_t result = sub_100246D50(a1, v10, v15, a2, v7 * v13, v14, v8);
        *(double *)(*(void *)(a1 + 72) + 8 * v10++) = v15;
      }
      while (v12 != v10);
    }
  }
  return result;
}

uint64_t *sub_100246AD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, double a6)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)a3;
  a1[5] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v8 = a4[1];
  a1[6] = *a4;
  a1[7] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a1[9] = 0;
  *((double *)a1 + 8) = a6;
  double v10 = *(double *)a1;
  uint64_t v9 = a1[1];
  a1[10] = 0;
  a1[11] = 0;
  uint64_t v11 = v9 - *(void *)&v10;
  if (!v11)
  {
    a1[12] = 0;
    a1[13] = 0;
    a1[14] = 0;
    a1[15] = 0;
    a1[16] = 0;
    a1[17] = 0;
    double v15 = *(const void **)a5;
    int64_t v16 = *(void *)(a5 + 8) - *(void *)a5;
    if (!v16) {
      return a1;
    }
    goto LABEL_8;
  }
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 4);
  if (v12 >> 61) {
    sub_1000A9108();
  }
  long double v13 = (char *)operator new(0x6666666666666668 * (v11 >> 4));
  a1[9] = (uint64_t)v13;
  a1[11] = (uint64_t)&v13[8 * v12];
  bzero(v13, 8 * v12);
  a1[12] = 0;
  a1[10] = (uint64_t)&v13[8 * v12];
  a1[13] = 0;
  a1[14] = 0;
  double v14 = (char *)operator new(8 * v12);
  a1[12] = (uint64_t)v14;
  a1[14] = (uint64_t)&v14[8 * v12];
  bzero(v14, 8 * v12);
  a1[13] = (uint64_t)&v14[8 * v12];
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  double v15 = *(const void **)a5;
  int64_t v16 = *(void *)(a5 + 8) - *(void *)a5;
  if (v16)
  {
LABEL_8:
    if (v16 < 0) {
      sub_1000A9108();
    }
    uint64_t v17 = (char *)operator new(v16);
    a1[15] = (uint64_t)v17;
    a1[16] = (uint64_t)v17;
    size_t v18 = &v17[8 * (v16 >> 3)];
    a1[17] = (uint64_t)v18;
    memcpy(v17, v15, v16);
    a1[16] = (uint64_t)v18;
  }
  return a1;
}

void sub_100246CA4(_Unwind_Exception *a1)
{
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v6;
    operator delete(v6);
    sub_1002463A8(v2);
    double v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_100246424((void **)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_1002463A8(v2);
    double v7 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 32) = v7;
  operator delete(v7);
  sub_100246424((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100246D50(uint64_t result, unint64_t a2, double a3, double a4, double a5, double a6, double a7)
{
  double v15 = a4;
  double v16 = a3;
  double v13 = a6;
  double v14 = a5;
  double v12 = a7;
  if (a3 < 0.0)
  {
    uint64_t v8 = result;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(result + 8) - *(void *)result) >> 4) <= a2) {
      sub_1001F352C();
    }
    uint64_t v11 = *(void *)result + 80 * a2;
    double v10 = (*(double (**)(void))(**(void **)(result + 48) + 32))(*(void *)(result + 48));
    uint64_t v9 = *(void *)(v8 + 120);
    char v19 = 0;
    LOBYTE(v18) = 0;
    memset(&v23, 0, sizeof(v23));
    std::string::assign(&v23, "Invalid outlierprobability (NaN?). Why?");
    memset(&v24, 0, sizeof(v24));
    std::string::assign(&v24, "\nisNaN = ");
    uint64_t v27 = 0x100000000000000;
    memset(&v28, 0, sizeof(v28));
    uint64_t v26 = 0;
    uint64_t v25 = (void *)48;
    std::string::assign(&v28, "\nParticle = ");
    memset(&v29, 0, sizeof(v29));
    if ((sub_1002477A0((uint64_t)&v11, &v29) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_100454020;
      double v21 = &off_1004626C0;
      sub_1000DB0D4((uint64_t)&v20);
    }
    memset(&v30, 0, sizeof(v30));
    std::string::assign(&v30, "\nGaussian partition = ");
    memset(&v31, 0, sizeof(v31));
    if ((sub_1001645DC(&v10, &v31) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_100454020;
      sub_1000DB0D4((uint64_t)&v20);
    }
    memset(&v32, 0, sizeof(v32));
    std::string::assign(&v32, "\nGaussian lognormpdfrelative = ");
    memset(&v33, 0, sizeof(v33));
    if ((sub_1001645DC((double *)(v9 + 8 * a2), &v33) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_100454020;
      sub_1000DB0D4((uint64_t)&v20);
    }
    memset(&v34, 0, sizeof(v34));
    std::string::assign(&v34, "\nGaussian likelihood = ");
    memset(&v35, 0, sizeof(v35));
    if ((sub_1001645DC(&v14, &v35) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_100454020;
      sub_1000DB0D4((uint64_t)&v20);
    }
    memset(&v36, 0, sizeof(v36));
    std::string::assign(&v36, "\npriorUniform = ");
    memset(&v37, 0, sizeof(v37));
    if ((sub_1001645DC((double *)(v8 + 64), &v37) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_100454020;
      sub_1000DB0D4((uint64_t)&v20);
    }
    memset(&v38, 0, sizeof(v38));
    std::string::assign(&v38, "\nobservationProbabilityFromGaussian = ");
    memset(&v39, 0, sizeof(v39));
    if ((sub_1001645DC(&v13, &v39) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_100454020;
      sub_1000DB0D4((uint64_t)&v20);
    }
    memset(&v40, 0, sizeof(v40));
    std::string::assign(&v40, "\nobservationProbabilityFromUniform = ");
    memset(&v41, 0, sizeof(v41));
    if ((sub_1001645DC(&v12, &v41) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_100454020;
      sub_1000DB0D4((uint64_t)&v20);
    }
    memset(&v42, 0, sizeof(v42));
    std::string::assign(&v42, "\nInlier Confidence (init) = ");
    memset(&v43, 0, sizeof(v43));
    if ((sub_1001645DC(&v15, &v43) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_100454020;
      sub_1000DB0D4((uint64_t)&v20);
    }
    memset(&v44, 0, sizeof(v44));
    std::string::assign(&v44, "\nuint64_t result = ");
    memset(&v45, 0, sizeof(v45));
    if ((sub_1001645DC(&v16, &v45) & 1) == 0)
    {
      std::bad_cast::bad_cast(&v20);
      v20.__vftable = (std::bad_cast_vtbl *)&off_100454020;
      sub_1000DB0D4((uint64_t)&v20);
    }
    sub_10016A2C4((uint64_t)&v18, (uint64_t)&v23, 21);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_14:
        if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_15;
        }
        goto LABEL_38;
      }
    }
    else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_14;
    }
    operator delete(v44.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_39;
    }
LABEL_38:
    operator delete(v43.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_40;
    }
LABEL_39:
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_41;
    }
LABEL_40:
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_42;
    }
LABEL_41:
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_43;
    }
LABEL_42:
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_20:
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_44;
    }
LABEL_43:
    operator delete(v38.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_23:
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_47;
    }
LABEL_46:
    operator delete(v35.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_48;
    }
LABEL_47:
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v32.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_51;
    }
LABEL_50:
    operator delete(v31.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_52;
    }
LABEL_51:
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_30;
      }
      goto LABEL_53;
    }
LABEL_52:
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v27) & 0x80000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_54;
    }
LABEL_53:
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27) & 0x80000000) == 0)
    {
LABEL_31:
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_55;
    }
LABEL_54:
    operator delete(v25);
    if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_32:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_56;
    }
LABEL_55:
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_33:
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_34;
      }
LABEL_57:
      operator delete(v18);
LABEL_34:
      sub_1000D11E0((uint64_t)&__p);
    }
LABEL_56:
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_57;
  }
  return result;
}

void sub_100247574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002477A0(uint64_t a1, std::string *a2)
{
  long long v25 = 0u;
  long long v26 = 0u;
  memset(v24, 0, sizeof(v24));
  std::streambuf::basic_streambuf();
  *(_OWORD *)long long __p = 0u;
  long long v28 = 0u;
  uint64_t v29 = 24;
  *(void *)&long long v25 = 0;
  *(void *)&v24[0] = off_100453E60;
  std::ios_base::init(&v31, v24);
  uint64_t v32 = 0;
  int v33 = -1;
  std::string v35 = &v34;
  std::string v36 = (char *)&v34 + 2;
  float64x2_t v3 = (std::ios_base *)((char *)&v30 + (void)*(v30 - 3));
  v3->__exceptions_ = 1;
  std::ios_base::clear(v3, v3->__rdstate_);
  uint64_t v4 = (void *)std::ostream::operator<<();
  int v5 = *(_DWORD *)((char *)v4 + *(void *)(*v4 - 24) + 32);
  uint64_t v6 = *(void *)((char *)&v31.__rdstate_ + (void)*(v30 - 3));
  uint64_t v7 = *(void *)(v6 + 40);
  std::string v35 = (uint64_t *)v7;
  uint64_t v8 = *(char **)(v6 + 48);
  std::string v36 = v8;
  if ((v5 & 5) == 0)
  {
    unint64_t v10 = (unint64_t)&v8[-v7];
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v14 = a2->__r_.__value_.__r.__words[2];
      std::string::size_type v13 = (v14 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v13 >= v10)
      {
        unint64_t v15 = HIBYTE(v14);
LABEL_10:
        if ((v15 & 0x80u) == 0) {
          uint64_t v11 = a2;
        }
        else {
          uint64_t v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
LABEL_13:
        if ((char *)v7 == v8)
        {
          double v16 = v11;
          goto LABEL_23;
        }
        if (v10 < 0x20 || (unint64_t)v11 - v7 < 0x20)
        {
          double v16 = v11;
          uint64_t v17 = (char *)v7;
        }
        else
        {
          double v16 = (std::string *)((char *)v11 + (v10 & 0xFFFFFFFFFFFFFFE0));
          uint64_t v17 = (char *)(v7 + (v10 & 0xFFFFFFFFFFFFFFE0));
          size_t v18 = (long long *)(v7 + 16);
          char v19 = &v11->__r_.__value_.__r.__words[2];
          unint64_t v20 = v10 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v21 = *v18;
            *((_OWORD *)v19 - 1) = *(v18 - 1);
            *(_OWORD *)char v19 = v21;
            v18 += 2;
            v19 += 4;
            v20 -= 32;
          }
          while (v20);
          if (v10 == (v10 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_23:
            v16->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
              a2->__r_.__value_.__l.__size_ = v10;
            }
            else {
              *((unsigned char *)&a2->__r_.__value_.__s + 23) = v10 & 0x7F;
            }
            uint64_t v9 = 1;
            goto LABEL_27;
          }
        }
        do
        {
          std::string::value_type v22 = *v17++;
          v16->__r_.__value_.__s.__data_[0] = v22;
          double v16 = (std::string *)((char *)v16 + 1);
        }
        while (v17 != v8);
        goto LABEL_23;
      }
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      uint64_t v11 = a2;
      if (v10 <= 0x16) {
        goto LABEL_13;
      }
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = 22;
    }
    std::string::__grow_by(a2, v13, v10 - v13, size, 0, size, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v15) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
    goto LABEL_10;
  }
  uint64_t v9 = 0;
LABEL_27:
  std::ostream::~ostream();
  if (SBYTE7(v28) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  return v9;
}

void sub_100247A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100247AAC(void *a1)
{
}

void sub_100247AC4()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100247B3C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_100247BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (_DWORD **)sub_100308F74(a2);
  uint64_t v7 = sub_100017318(*v6);
  uint64_t v10 = sub_100048550() - (void)v7;
  uint64_t v8 = operator new(0x28uLL);
  *uint64_t v8 = off_100462730;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = &v10;
  v8[4] = a1;
  double v12 = v8;
  sub_10000B118(a1, (uint64_t)v11);
  uint64_t result = (uint64_t)v12;
  if (v12 == v11) {
    return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
  }
  if (v12) {
    return (*(uint64_t (**)(void *))(*v12 + 40))(v12);
  }
  return result;
}

void sub_100247CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100230190((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100247D00(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  *(unsigned char *)(a1 + 17) = 1;
  std::mutex::unlock(v6);
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100462700);
    uint64_t v7 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_3:
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Apply event queue in batch", buf, 2u);
  }
LABEL_4:
  v33[0] = 0;
  v32[0] = 0;
  while (a2[58] != *(void *)(a3 + 464) || sub_10004008C((unint64_t)(a2 + 55), a3 + 440))
  {
    uint64_t v8 = (uint64_t *)sub_100308F74((uint64_t)a2);
    uint64_t v9 = v8[1];
    v17[0] = *v8;
    v17[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *(void *)a1;
    uint64_t v29 = &v30;
    std::string v30 = 0;
    *(void *)uint64_t buf = 0;
    std::string v24 = buf;
    uint64_t v25 = 0x3802000000;
    long long v26 = sub_100248B78;
    uint64_t v27 = nullsub_151;
    uint64_t v28 = v10;
    size_t v18 = _NSConcreteStackBlock;
    uint64_t v19 = 0x40000000;
    unint64_t v20 = sub_100248B88;
    long long v21 = &unk_1004627D0;
    std::string::value_type v22 = buf;
    sub_100045DE8((dispatch_queue_t *)(v10 + 32), &v18);
    _Block_object_dispose(buf, 8);
    if (v30 && (uint64_t v11 = sub_100017318(*v30), (uint64_t)sub_100017318((_DWORD *)v17[0]) >= (uint64_t)v11))
    {
      uint64_t v13 = *(void *)a1;
      LOBYTE(v3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
      *(void *)uint64_t buf = 0;
      std::string v24 = buf;
      uint64_t v25 = 0x3802000000;
      long long v26 = sub_100248BA8;
      uint64_t v27 = nullsub_152;
      uint64_t v28 = v13;
      uint64_t v29 = &v30;
      size_t v18 = _NSConcreteStackBlock;
      uint64_t v19 = 0x40000000;
      unint64_t v20 = sub_100248BB8;
      long long v21 = &unk_1004627F8;
      std::string::value_type v22 = buf;
      sub_100045DE8((dispatch_queue_t *)(v13 + 32), &v18);
      _Block_object_dispose(buf, 8);
      long long v14 = v31;
      long long v31 = 0uLL;
      unint64_t v15 = (std::__shared_weak_count *)v17[1];
      *(_OWORD *)uint64_t v17 = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
        if (!(_BYTE)v30) {
          goto LABEL_12;
        }
      }
      else if (!(_BYTE)v30)
      {
        goto LABEL_12;
      }
      double v16 = (std::__shared_weak_count *)*((void *)&v31 + 1);
      if (*((void *)&v31 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      sub_100308AA8(a2);
    }
LABEL_12:
    sub_10022FE30(*(void *)(a1 + 8), (uint64_t)v33, (uint64_t)v32, v17);
    double v12 = (std::__shared_weak_count *)v17[1];
    if (v17[1])
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(v17[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  sub_10022F2EC(a1);
}

void sub_1002480FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1000A6954(exception_object);
}

void sub_100248140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E11EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100248154(uint64_t a1, int a2, uint64_t *a3)
{
  *(_DWORD *)(a1 + 8) = a2;
  if (qword_10047BED8 == -1)
  {
    uint64_t v4 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100462700);
    uint64_t v4 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_4:
      *(void *)uint64_t buf = sub_1000A2F70;
      uint64_t v7 = 0;
      int v5 = operator new(0x3C8uLL);
      v5[1] = 0;
      v5[2] = 0;
      *int v5 = off_100462828;
      sub_100248398((uint64_t)(v5 + 3), a3);
      sub_100248398((uint64_t)(v5 + 62), a3 + 59);
      sub_100248EBC();
    }
  }
  *(_WORD *)uint64_t buf = 0;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Starting localizer thread", buf, 2u);
  goto LABEL_4;
}

void sub_100248374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100248388(uint64_t *a1)
{
  return sub_100230758(*a1);
}

void sub_100248390(uint64_t *a1)
{
}

__n128 sub_100248398(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)a1 = v2;
  uint64_t v3 = a2[1];
  a2[1] = 0;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2[2];
  a2[2] = 0;
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = a2[3];
  a2[3] = 0;
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2[4];
  a2[4] = 0;
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[5];
  a2[5] = 0;
  *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v7;
  uint64_t v8 = a2[6];
  a2[6] = 0;
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = a2[7];
  a2[7] = 0;
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = a2[8];
  a2[8] = 0;
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = a2[9];
  a2[9] = 0;
  *(void *)(a1 + 72) = v11;
  uint64_t v12 = a2[10];
  a2[10] = 0;
  *(void *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v12;
  uint64_t v13 = a2[11];
  a2[11] = 0;
  *(void *)(a1 + 88) = v13;
  uint64_t v14 = a2[12];
  a2[12] = 0;
  *(void *)(a1 + 96) = v14;
  uint64_t v15 = a2[13];
  a2[13] = 0;
  *(void *)(a1 + 104) = v15;
  uint64_t v16 = a2[14];
  a2[14] = 0;
  *(void *)(a1 + 112) = v16;
  uint64_t v17 = a2[15];
  a2[15] = 0;
  *(void *)(a1 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v17;
  uint64_t v18 = a2[16];
  a2[16] = 0;
  *(void *)(a1 + 128) = v18;
  long long v19 = *(_OWORD *)(a2 + 17);
  a2[17] = 0;
  *(_OWORD *)(a1 + 136) = v19;
  *(void *)(a1 + 152) = a2[19];
  a2[18] = 0;
  a2[19] = 0;
  *(_OWORD *)(a1 + 16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *((_OWORD *)a2 + 10);
  a2[20] = 0;
  a2[21] = 0;
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  a2[22] = 0;
  a2[23] = 0;
  *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
  a2[24] = 0;
  a2[25] = 0;
  *(_OWORD *)(a1 + 208) = *((_OWORD *)a2 + 13);
  a2[26] = 0;
  a2[27] = 0;
  *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
  a2[28] = 0;
  a2[29] = 0;
  *(_OWORD *)(a1 + 24sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *((_OWORD *)a2 + 15);
  a2[30] = 0;
  a2[31] = 0;
  *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
  a2[32] = 0;
  a2[33] = 0;
  *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
  a2[34] = 0;
  a2[35] = 0;
  *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
  a2[36] = 0;
  a2[37] = 0;
  *(_OWORD *)(a1 + 304) = *((_OWORD *)a2 + 19);
  a2[38] = 0;
  a2[39] = 0;
  *(_OWORD *)(a1 + 32sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *((_OWORD *)a2 + 20);
  a2[40] = 0;
  a2[41] = 0;
  *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
  a2[42] = 0;
  a2[43] = 0;
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  a2[44] = 0;
  a2[45] = 0;
  *(_OWORD *)(a1 + 368) = *((_OWORD *)a2 + 23);
  a2[46] = 0;
  a2[47] = 0;
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
  a2[48] = 0;
  a2[49] = 0;
  *(_OWORD *)(a1 + 40sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *((_OWORD *)a2 + 25);
  a2[50] = 0;
  a2[51] = 0;
  *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
  a2[52] = 0;
  a2[53] = 0;
  *(void *)(a1 + 432) = a2[54];
  __n128 result = *(__n128 *)(a2 + 55);
  *(void *)(a1 + 456) = a2[57];
  *(__n128 *)(a1 + 44sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
  a2[56] = 0;
  a2[57] = 0;
  a2[55] = 0;
  *(void *)(a1 + 464) = a2[58];
  return result;
}

void sub_10024857C(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_1002485B0()
{
}

__n128 sub_1002485C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_100462730;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100248618(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100462730;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100248650(uint64_t a1, uint64_t *a2)
{
  return sub_1002486D8((uint64_t *)(a1 + 8), *a2);
}

uint64_t sub_10024865C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN14EventGenerator15applyInRealTimeI27input_event_stream_iteratorEEvT_S2_EUlNSt3__16chrono8duration"
                     "IxNS3_5ratioILl1ELl1000000000EEEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN14EventGenerator15applyInRealTimeI27input_event_stream_iteratorEEvT_S2_EUlNSt3__16chro"
                                "no8durationIxNS3_5ratioILl1ELl1000000000EEEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN14EventGenerator15applyInRealTimeI27input_event_stream_iteratorEEvT_S2_EUlNSt3__16chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN14EventGenerator15applyInRealTimeI27input_event_stream_iteratorEEvT_S2_EUlNSt3__16chrono8durationIxNS3_5ratioILl1ELl1000000000EEEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_1002486CC()
{
}

uint64_t sub_1002486D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)a1[3];
  uint64_t v5 = a1[1];
  if (*(void *)(*a1 + 464) == *(void *)(v5 + 464) && !sub_10004008C(*a1 + 440, v5 + 440)) {
    return 1;
  }
  long long __p = 0;
  std::string::value_type v22 = 0;
  unint64_t v23 = 0;
  while (1)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    if (*(void *)(*a1 + 464) == *(void *)(v8 + 464))
    {
      if (!sub_10004008C(v7 + 440, v8 + 440)) {
        break;
      }
      uint64_t v7 = *a1;
    }
    uint64_t v9 = (void *)a1[2];
    uint64_t v10 = (_DWORD **)sub_100308F74(v7);
    if ((uint64_t)sub_100017318(*v10) + *v9 > a2) {
      break;
    }
    uint64_t v11 = (int **)sub_100308F74(*a1);
    v27[0] = *(void *)a1[2];
    sub_100248988(*v11, v27);
    uint64_t v12 = (void *)sub_100308F74(*a1);
    uint64_t v13 = v22;
    if ((unint64_t)v22 >= v23)
    {
      uint64_t v6 = sub_100017420((uint64_t)&__p, v12);
    }
    else
    {
      *std::string::value_type v22 = *v12;
      uint64_t v14 = v12[1];
      v13[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = v13 + 2;
    }
    std::string::value_type v22 = v6;
    sub_100308AA8((uint64_t *)*a1);
  }
  uint64_t v15 = *v4;
  std::string v24 = v22;
  uint64_t v25 = __p;
  v27[0] = 0;
  v27[1] = (uint64_t)v27;
  v27[2] = 0x4002000000;
  v27[3] = (uint64_t)sub_10009658C;
  v27[4] = (uint64_t)nullsub_27;
  v27[5] = (uint64_t)&v25;
  v27[6] = (uint64_t)&v24;
  v27[7] = v15;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 0x40000000;
  v26[2] = sub_100248AC0;
  void v26[3] = &unk_100462798;
  v26[4] = v27;
  sub_100045DE8((dispatch_queue_t *)(v15 + 32), v26);
  _Block_object_dispose(v27, 8);
  uint64_t v16 = __p;
  if (__p)
  {
    uint64_t v17 = v22;
    uint64_t v18 = __p;
    if (v22 != __p)
    {
      do
      {
        long long v19 = (std::__shared_weak_count *)*(v17 - 1);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v17 -= 2;
      }
      while (v17 != v16);
      uint64_t v18 = __p;
    }
    std::string::value_type v22 = v16;
    operator delete(v18);
  }
  return 0;
}

void sub_100248960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_100248974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

_DWORD *sub_100248988(int *a1, uint64_t *a2)
{
  int v4 = *a1;
  __n128 result = a1 + 2;
  int v3 = v4;
  switch(v4 ^ (v4 >> 31))
  {
    case 1:
      if (v3 < 0) {
        __n128 result = *(_DWORD **)result;
      }
      *((void *)result + 2) += *a2;
      break;
    case 2:
    case 0xB:
    case 0xD:
    case 0xE:
    case 0x10:
      goto LABEL_6;
    case 3:
    case 8:
      if (v3 < 0) {
        __n128 result = *(_DWORD **)result;
      }
      uint64_t v5 = *a2;
      *((void *)result + 4) += *a2;
      *((double *)result + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = (double)v5 / 1000000000.0 + *((double *)result + 10);
      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
    case 0xA:
    case 0xF:
      if (v3 < 0) {
        __n128 result = *(_DWORD **)result;
      }
      *((void *)result + 1) += *a2;
      break;
    default:
      if (v3 < 0)
      {
        __n128 result = *(_DWORD **)result;
        *(void *)result += *a2;
      }
      else
      {
LABEL_6:
        *(void *)result += *a2;
      }
      break;
  }
  return result;
}

void sub_100248AC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = **(void ***)(v1 + 40);
  if (**(void ***)(v1 + 48) != v2)
  {
    int v3 = *(uint64_t **)(v1 + 56);
    do
    {
      uint64_t v5 = (void *)v3[1];
      if ((unint64_t)v5 >= v3[2])
      {
        int v4 = sub_100017420((uint64_t)v3, v2);
      }
      else
      {
        uint64_t v6 = v2[1];
        *uint64_t v5 = *v2;
        v5[1] = v6;
        if (v6) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
        }
        int v4 = v5 + 2;
      }
      v3[1] = (uint64_t)v4;
      sub_100017138(*v3, (uint64_t)v4, (uint64_t)&v7, ((uint64_t)v4 - *v3) >> 4);
      v2 += 2;
    }
    while (v2 != **(void ***)(v1 + 48));
  }
}

__n128 sub_100248B78(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
  return result;
}

uint64_t sub_100248B88(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 8);
  int v3 = *(uint64_t **)(v1 + 40);
  uint64_t v2 = *(void **)(v1 + 48);
  if (*v3 == v3[1]) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *v3;
  }
  *uint64_t v2 = v4;
  return result;
}

__n128 sub_100248BA8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = result;
  return result;
}

void sub_100248BB8(uint64_t a1)
{
}

void sub_100248BC8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)**a1;
  if (v2 != (void *)(*a1)[1])
  {
    int v3 = a1[1];
    uint64_t v4 = (void *)*v2;
    if (*(unsigned char *)v3)
    {
      uint64_t v5 = (void *)v2[1];
      if (v5) {
        atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = (std::__shared_weak_count *)v3[2];
      v3[1] = (uint64_t)v4;
      v3[2] = (uint64_t)v5;
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else
    {
      char v7 = (void *)v2[1];
      v3[1] = (uint64_t)v4;
      v3[2] = (uint64_t)v7;
      if (v7) {
        atomic_fetch_add_explicit(v7 + 1, 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)int v3 = 1;
    }
    sub_100231EF8(*v1, v1[1], (uint64_t)&v10, (v1[1] - *v1) >> 4);
    uint64_t v8 = v1[1];
    uint64_t v9 = *(std::__shared_weak_count **)(v8 - 8);
    if (v9)
    {
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v1[1] = v8 - 16;
  }
}

std::__thread_struct ***sub_100248D00(std::__thread_struct ***result)
{
  uint64_t v1 = *result;
  _DWORD *result = 0;
  if (v1)
  {
    uint64_t v2 = *v1;
    uint64_t *v1 = 0;
    if (v2)
    {
      std::__thread_struct::~__thread_struct(v2);
      operator delete();
    }
    operator delete();
  }
  return result;
}

std::__thread_struct **sub_100248D6C(std::__thread_struct **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__thread_struct::~__thread_struct(v2);
    operator delete();
  }
  return a1;
}

void sub_100248DB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100248DD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462828;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t *sub_100248E28(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 496);
  if (*(char *)(a1 + 959) < 0)
  {
    operator delete(*(void **)(a1 + 936));
    sub_1000E0C3C((void *)(a1 + 640));
    sub_1000E1268(v2);
    if ((*(char *)(a1 + 487) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1000E0C3C((void *)(a1 + 640));
    sub_1000E1268(v2);
    if ((*(char *)(a1 + 487) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*(void **)(a1 + 464));
LABEL_3:
  sub_1000E0C3C((void *)(a1 + 168));

  return sub_1000E1268((uint64_t *)(a1 + 24));
}

void sub_100248EBC()
{
}

void sub_100248F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100248D6C((std::__thread_struct **)va);
  _Unwind_Resume(a1);
}

void sub_100248FAC()
{
}

void sub_100248FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__thread_struct *a10)
{
}

uint64_t sub_100248FEC(uint64_t a1)
{
  uint64_t v2 = std::__thread_local_data();
  int v3 = *(std::__thread_struct **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = (long long *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void (**)(void *, long long *))(a1 + 8);
  char v7 = (void *)(*(void *)(a1 + 24) + (v5 >> 1));
  if (v5) {
    uint64_t v6 = *(void (**)(void *, long long *))(*v7 + v6);
  }
  long long v13 = *v4;
  *(void *)uint64_t v4 = 0;
  *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  v6(v7, &v13);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (a1)
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    char v10 = *(std::__thread_struct **)a1;
    *(void *)a1 = 0;
    if (v10)
    {
      std::__thread_struct::~__thread_struct(v10);
      operator delete();
    }
    operator delete();
  }
  return 0;
}

void sub_100249144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13)
{
  if (a12)
  {
    sub_1003A5FCC(a12);
    uint64_t v14 = a13;
    sub_100249188(&a10);
    _Unwind_Resume(v14);
  }
  sub_100249188(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100249188(uint64_t *result)
{
  uint64_t v1 = *result;
  _DWORD *result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 40);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    int v3 = *(std::__thread_struct **)v1;
    *(void *)uint64_t v1 = 0;
    if (v3)
    {
      std::__thread_struct::~__thread_struct(v3);
      operator delete();
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100249244(uint64_t result)
{
  return result;
}

void sub_100249260()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002492D8()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_100249350@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = sub_1002AA5A0(a1);
  if (v4 <= 1)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    sub_10014B3FC((uint64_t)&v12);
  }
  *(void *)a2 = off_10045D828;
  *(void *)(a2 + 8) = off_10045DA98;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) &= 0xFCu;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = off_10045DAB8;
  *(unsigned char *)(a2 + 64) &= 0xFCu;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(_DWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_DWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 20sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 28sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(void *)(a2 + 304) = off_10045D7E8;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 36sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_OWORD *)(a2 + 392) = 0u;
  *(_OWORD *)(a2 + 408) = 0u;
  *(_DWORD *)(a2 + 424) = 0;
  *(void *)(a2 + 44sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(void *)(a2 + 448) = 0;
  *(void *)(a2 + 432) = 0;
  *(unsigned char *)(a2 + 456) &= 0xC0u;
  *(_WORD *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 472) = 0u;
  *(_OWORD *)(a2 + 488) = 0u;
  *(_OWORD *)(a2 + 504) = 0u;
  *(void *)(a2 + 52sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(void *)(a2 + 528) = off_10045DAB8;
  *(void *)(a2 + 544) = 0;
  *(void *)(a2 + 536) = 0;
  *(unsigned char *)(a2 + 552) &= 0xFCu;
  *(void *)(a2 + 56sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(void *)(a2 + 568) = off_10045D808;
  *(void *)(a2 + 584) = 0;
  *(void *)(a2 + 576) = 0;
  *(unsigned char *)(a2 + 592) &= 0xF8u;
  *(void *)(a2 + 60sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(_DWORD *)(a2 + 608) = 0;
  *(_OWORD *)(a2 + 616) = 0u;
  *(_OWORD *)(a2 + 632) = 0u;
  *(_OWORD *)(a2 + 648) = 0u;
  *(_DWORD *)(a2 + 664) = 0;
  *(_OWORD *)(a2 + 70sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_OWORD *)(a2 + 672) = 0u;
  *(_OWORD *)(a2 + 688) = 0u;
  *(_OWORD *)(a2 + 72sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_OWORD *)(a2 + 736) = 0u;
  *(void *)(a2 + 752) = *(void *)(a2 + 752) & 0xF000000000000000 | 0x10000000;
  *(void *)(a2 + 296) = 4;
  *(void *)(a2 + 16) = *(void *)sub_1002AA5B0(a1, 0);
  *(void *)(a2 + 24) = *(void *)sub_1002AA5B0(a1, 1);
  if (v4 >= 3)
  {
    *(void *)(a2 + 144) = *(void *)sub_1002AA5B0(a1, 2);
    if (v4 >= 5)
    {
      long double v5 = *(double *)sub_1002AA5B0(a1, 3);
      uint64_t v6 = (long double *)sub_1002AA5B0(a1, 4);
      *(long double *)(a2 + 72) = atan2(*v6, v5);
    }
  }
  uint64_t v7 = (uint64_t)(a1 + 3);
  *(double *)(a2 + 152) = sqrt(sub_10030144C(v7, 2uLL));
  if (sub_1003013F8(v7) && (sub_1003013EC(v7, __p), __p[0] >= (void *)2))
  {
    uint64_t v8 = (double *)sub_100300DC4(v7, 0, 0);
    sub_1001A0CBC(a2, *v8);
    uint64_t v9 = (double *)sub_100300DC4(v7, 0, 1uLL);
    sub_1001A0CD0(a2, *v9);
    double v10 = *(double *)sub_100300DC4(v7, 1uLL, 1uLL);
  }
  else
  {
    sub_1001A0CBC(a2, INFINITY);
    double v10 = INFINITY;
    sub_1001A0CD0(a2, INFINITY);
  }
  return sub_1001A0CE4(a2, v10);
}

void sub_100249708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100249724(_Unwind_Exception *a1)
{
  sub_1001A0B70(v1);
  _Unwind_Resume(a1);
}

void sub_100249738(_Unwind_Exception *a1)
{
  sub_1001A0B70(v1);
  _Unwind_Resume(a1);
}

void sub_10024974C(_Unwind_Exception *a1)
{
  sub_1001A0B70(v1);
  _Unwind_Resume(a1);
}

void sub_100249760(_Unwind_Exception *a1)
{
  sub_1001A0B70(v1);
  _Unwind_Resume(a1);
}

void sub_100249774(_Unwind_Exception *a1)
{
  sub_1001A0B70(v1);
  _Unwind_Resume(a1);
}

int64x2_t sub_100249788(double *a1, double *a2)
{
  uint64_t v2 = (int64x2_t *)sub_1002753A0(a1, *a2, a2[1]);
  int64x2_t result = vdupq_n_s64(0x7FF4000000000000uLL);
  v2[1] = result;
  v2[2] = result;
  v2[3].i16[0] = 0;
  v2[4].i64[0] = 0;
  v2[4].i64[1] = 0;
  v2[3].i64[1] = 0;
  return result;
}

double *sub_1002497BC(double *a1, uint64_t a2, double *a3)
{
  int64x2_t result = sub_1002753A0(a1, *a3, a3[1]);
  *((_OWORD *)result + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)result + 2) = *(_OWORD *)(a2 + 32);
  *((unsigned char *)result + 48) = *(unsigned char *)(a2 + 48);
  *((unsigned char *)result + 49) = 0;
  uint64_t v5 = *(void *)(a2 + 64);
  result[7] = *(double *)(a2 + 56);
  *((void *)result + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  result[9] = *(double *)(a2 + 72);
  return result;
}

void sub_100249820(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6, unint64_t a7)
{
  unint64_t v7 = a7;
  unint64_t v8 = a6;
  if (!a3)
  {
    sub_1000AE4B0(v30, "");
    sub_10024A41C("You must have made a mistake", (std::string *)&__p);
    sub_10016A2C4((uint64_t)v30, (uint64_t)&__p, 1);
    if (SBYTE7(v33) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    sub_10014B3FC((uint64_t)v29);
  }
  if (a7 - a6 != a3)
  {
    sub_1000AE4B0(v30, "");
    sub_10024A46C("For now this is not allowed. Siblings is strictly the number of samples that are permitted", (std::string *)&__p);
    sub_10016A2C4((uint64_t)v30, (uint64_t)&__p, 1);
    if (SBYTE7(v33) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    sub_10014B3FC((uint64_t)v29);
  }
  if (a7 <= a6)
  {
    sub_1000AE4B0(v30, "");
    sub_1001EF448("Bug in indexing", (std::string *)&__p);
    sub_10016A2C4((uint64_t)v30, (uint64_t)&__p, 1);
    if (SBYTE7(v33) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    sub_10014B3FC((uint64_t)v29);
  }
  long long v26 = (void **)(a4 + 8);
  uint64_t v12 = 80 * a6 + 72;
  do
  {
    if (v8 >= *(void *)a4)
    {
      sub_1002753A0(__p.n128_f64, *a2, a2[1]);
      long long v18 = *(_OWORD *)(a1 + 32);
      long long v33 = *(_OWORD *)(a1 + 16);
      long long v34 = v18;
      __int16 v35 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v19 = *(void *)(a1 + 64);
      *(void *)&long long v36 = *(void *)(a1 + 56);
      *((void *)&v36 + 1) = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = *(void *)(a1 + 72);
      uint64_t v16 = (char *)(*a5 - 80 * *(void *)a4);
      uint64_t v17 = &v16[v12];
      sub_100033728((__n128 *)&v16[v12 - 72], &__p);
    }
    else
    {
      unint64_t v13 = *(void *)(a4 + 16);
      if (v8 >= 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - *(void *)(a4 + 8)) >> 4))
      {
        if (v13 >= *(void *)(a4 + 24))
        {
          *(void *)(a4 + 16) = sub_10024A4BC(v26, (uint64_t)&__p, a1, a2);
        }
        else
        {
          sub_1002753A0(*(double **)(a4 + 16), *a2, a2[1]);
          *(_OWORD *)(v13 + 16) = *(_OWORD *)(a1 + 16);
          *(_OWORD *)(v13 + 32) = *(_OWORD *)(a1 + 32);
          *(unsigned char *)(v13 + 48) = *(unsigned char *)(a1 + 48);
          *(unsigned char *)(v13 + 49) = 0;
          *(void *)(v13 + 56) = *(void *)(a1 + 56);
          uint64_t v25 = *(void *)(a1 + 64);
          *(void *)(v13 + 64) = v25;
          if (v25) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(v13 + 72) = *(void *)(a1 + 72);
          *(void *)(a4 + 16) = v13 + 80;
          *(void *)(a4 + 16) = v13 + 80;
        }
        goto LABEL_6;
      }
      sub_1002753A0(__p.n128_f64, *a2, a2[1]);
      long long v14 = *(_OWORD *)(a1 + 32);
      long long v33 = *(_OWORD *)(a1 + 16);
      long long v34 = v14;
      __int16 v35 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v15 = *(void *)(a1 + 64);
      *(void *)&long long v36 = *(void *)(a1 + 56);
      *((void *)&v36 + 1) = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v37 = *(void *)(a1 + 72);
      uint64_t v16 = (char *)*v26;
      uint64_t v17 = (char *)*v26 + v12;
      sub_100033728((__n128 *)(v17 - 72), &__p);
    }
    long long v20 = v33;
    long long v21 = v34;
    *((_WORD *)v17 - 12) = v35;
    *(_OWORD *)(v17 - 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v21;
    *(_OWORD *)(v17 - 56) = v20;
    long long v22 = v36;
    long long v36 = 0uLL;
    unint64_t v23 = (std::__shared_weak_count *)*((void *)v17 - 1);
    *((_OWORD *)v17 - 1) = v22;
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      *(void *)&v16[v12] = v37;
      std::string v24 = (std::__shared_weak_count *)*((void *)&v36 + 1);
      unint64_t v7 = a7;
      if (!*((void *)&v36 + 1)) {
        goto LABEL_6;
      }
    }
    else
    {
      *(void *)&v16[v12] = v37;
      std::string v24 = (std::__shared_weak_count *)*((void *)&v36 + 1);
      unint64_t v7 = a7;
      if (!*((void *)&v36 + 1)) {
        goto LABEL_6;
      }
    }
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
LABEL_6:
    ++v8;
    v12 += 80;
  }
  while (v7 != v8);
}

void sub_100249C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100249D18(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 64);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_100249D94(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_100249DE0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100249DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 5)
  {
    long long v32 = *(_OWORD *)(a1 + 16);
    double v12 = *(double *)(a1 + 32);
    *(void *)&long long v33 = *(void *)(a1 + 40);
    __double2 v13 = __sincos_stret(v12);
    *((void *)&v33 + 1) = *(void *)&v13.__cosval;
    double sinval = v13.__sinval;
    uint64_t v14 = *(void *)(a3 + 16);
    uint64_t v5 = *(char **)a3;
    if ((unint64_t)(v14 - *(void *)a3) >= 0x28)
    {
      uint64_t v28 = *(char **)(a3 + 8);
      double v10 = (char **)(a3 + 8);
      uint64_t v27 = v28;
      size_t v24 = v28 - v5;
      if ((unint64_t)(v28 - v5) <= 0x27)
      {
        uint64_t v25 = (char *)&v32 + v24;
        if (v27 != v5)
        {
          memcpy(v5, &v32, v24);
          uint64_t v5 = *v10;
        }
        uint64_t v26 = 40;
        goto LABEL_43;
      }
      long long v31 = v33;
      *(_OWORD *)uint64_t v5 = v32;
      *((_OWORD *)v5 + 1) = v31;
      *((double *)v5 + 4) = sinval;
    }
    else
    {
      if (v5)
      {
        *(void *)(a3 + 8) = v5;
        operator delete(v5);
        uint64_t v14 = 0;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
      }
      uint64_t v15 = v14 >> 2;
      if ((unint64_t)(v14 >> 2) <= 5) {
        uint64_t v15 = 5;
      }
      BOOL v7 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v7) {
        unint64_t v16 = v15;
      }
      if (v16 >> 61) {
        goto LABEL_51;
      }
      uint64_t v17 = 8 * v16;
      uint64_t v5 = (char *)operator new(8 * v16);
      *(void *)a3 = v5;
      *(void *)(a3 + 16) = &v5[v17];
      double v10 = (char **)(a3 + 8);
      long long v18 = v33;
      *(_OWORD *)uint64_t v5 = v32;
      *((_OWORD *)v5 + 1) = v18;
      *((double *)v5 + 4) = sinval;
    }
    uint64_t v11 = 5;
    goto LABEL_49;
  }
  if (a2 == 3)
  {
    long long v32 = *(_OWORD *)(a1 + 16);
    *(void *)&long long v33 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(a3 + 16);
    uint64_t v5 = *(char **)a3;
    if ((unint64_t)(v19 - *(void *)a3) < 0x18)
    {
      if (v5)
      {
        *(void *)(a3 + 8) = v5;
        operator delete(v5);
        uint64_t v19 = 0;
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
      }
      uint64_t v20 = v19 >> 2;
      if ((unint64_t)(v19 >> 2) <= 3) {
        uint64_t v20 = 3;
      }
      BOOL v7 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v7) {
        unint64_t v21 = v20;
      }
      if (!(v21 >> 61))
      {
        uint64_t v22 = 8 * v21;
        uint64_t v5 = (char *)operator new(8 * v21);
        *(void *)a3 = v5;
        *(void *)(a3 + 16) = &v5[v22];
        double v10 = (char **)(a3 + 8);
        *(_OWORD *)uint64_t v5 = v32;
        *((void *)v5 + 2) = v33;
LABEL_48:
        uint64_t v11 = 3;
        goto LABEL_49;
      }
LABEL_51:
      sub_1000A9108();
    }
    double v10 = (char **)(a3 + 8);
    uint64_t v29 = *(char **)(a3 + 8);
    size_t v24 = v29 - v5;
    if ((unint64_t)(v29 - v5) > 0x17)
    {
      *(_OWORD *)uint64_t v5 = v32;
      *((void *)v5 + 2) = v33;
      goto LABEL_48;
    }
    uint64_t v25 = (char *)&v32 + v24;
    if (v29 != v5)
    {
      memcpy(v5, &v32, v24);
      uint64_t v5 = *v10;
    }
    uint64_t v26 = 24;
LABEL_43:
    size_t v30 = v26 - v24;
    memcpy(v5, v25, v30);
    uint64_t v11 = v30 >> 3;
    goto LABEL_49;
  }
  if (a2 != 2) {
    return;
  }
  long long v32 = *(_OWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(char **)a3;
  if ((unint64_t)(v4 - *(void *)a3) >= 0x10)
  {
    double v10 = (char **)(a3 + 8);
    unint64_t v23 = *(char **)(a3 + 8);
    size_t v24 = v23 - v5;
    if ((unint64_t)(v23 - v5) > 0xF)
    {
      *(_OWORD *)uint64_t v5 = v32;
      uint64_t v11 = 2;
      goto LABEL_49;
    }
    uint64_t v25 = (char *)&v32 + v24;
    if (v23 != v5)
    {
      memcpy(v5, &v32, v24);
      uint64_t v5 = *v10;
    }
    uint64_t v26 = 16;
    goto LABEL_43;
  }
  if (v5)
  {
    *(void *)(a3 + 8) = v5;
    operator delete(v5);
    uint64_t v4 = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  uint64_t v6 = v4 >> 2;
  if ((unint64_t)(v4 >> 2) <= 2) {
    uint64_t v6 = 2;
  }
  BOOL v7 = (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8;
  unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v7) {
    unint64_t v8 = v6;
  }
  if (v8 >> 61) {
    goto LABEL_51;
  }
  uint64_t v9 = 8 * v8;
  uint64_t v5 = (char *)operator new(8 * v8);
  *(void *)a3 = v5;
  *(void *)(a3 + 16) = &v5[v9];
  double v10 = (char **)(a3 + 8);
  *(_OWORD *)uint64_t v5 = v32;
  uint64_t v11 = 2;
LABEL_49:
  *double v10 = &v5[8 * v11];
}

void sub_10024A158(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  int v3 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v2;
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t sub_10024A1E0(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t ***a8)
{
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
  __int16 v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double))(*(void *)v15 + 56))(v15, a1, a6, a7, *(double *)(a1 + 16), *(double *)(a1 + 24), a2, a3);
  int v17 = v16;
  int v18 = HIBYTE(v16);
  if ((v16 & 1) == 0)
  {
    uint64_t v19 = *a8;
    if (*a8)
    {
      v22[0] = off_10045DA98;
      char v23 = 0;
      *(double *)&v22[1] = a2;
      *(double *)&v22[2] = a3;
      sub_1002A0198(v19, (uint64_t)v22, a1, (uint64_t)v24);
      if (v24[0])
      {
        nullsub_17(&v26);
        uint64_t v20 = v25;
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        int v17 = 1;
        int v18 = 1;
      }
      nullsub_17(v22);
    }
  }
  if (v17)
  {
    *(void *)(a1 + 72) = 0;
  }
  else if (a5 >= 1)
  {
    *(void *)(a1 + 72) += a5;
  }
  return v17 | (v18 << 8);
}

void sub_10024A3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_10024A3B8(uint64_t a1, uint64_t a2)
{
  double v3 = (*(double (**)(uint64_t))(*(void *)a1 + 24))(a1);
  return 1.0 / ((v4 - v3) * (v5 - v6) * (*(double *)(a2 + 16) - *(double *)(a2 + 8)));
}

std::string *sub_10024A41C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10024A450(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10024A46C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10024A4A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10024A4BC(void **a1, uint64_t a2, uint64_t a3, double *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 > 0x333333333333333) {
      sub_1000A6A10();
    }
    double v10 = operator new(80 * v9);
  }
  else
  {
    double v10 = 0;
  }
  uint64_t v25 = (double *)&v10[10 * v5];
  uint64_t v27 = (char *)&v10[10 * v9];
  sub_1002753A0(v25, *a4, a4[1]);
  long long v11 = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v25 + 1) = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v25 + 2) = v11;
  *((unsigned char *)v25 + 48) = *(unsigned char *)(a3 + 48);
  *((unsigned char *)v25 + 49) = 0;
  uint64_t v12 = *(void *)(a3 + 64);
  v25[7] = *(double *)(a3 + 56);
  *((void *)v25 + 8) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  v10[10 * v5 + 9] = *(void *)(a3 + 72);
  __double2 v13 = (char *)&v10[10 * v5];
  uint64_t v14 = (char *)(v25 + 10);
  __int16 v16 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    uint64_t v22 = (char *)a1[1];
  }
  else
  {
    unint64_t v17 = 0;
    do
    {
      int v18 = (char *)&v25[v17 / 8];
      sub_100033728((__n128 *)&v25[v17 / 8 - 10], (__n128 *)&v15[v17 - 80]);
      long long v19 = *(_OWORD *)&v15[v17 - 64];
      long long v20 = *(_OWORD *)&v15[v17 - 48];
      *((_WORD *)v18 - 16) = *(_WORD *)&v15[v17 - 32];
      *((_OWORD *)v18 - 4) = v19;
      *((_OWORD *)v18 - 3) = v20;
      *((void *)v18 - 3) = *(void *)&v15[v17 - 24];
      uint64_t v21 = *(void *)&v15[v17 - 16];
      *((void *)v18 - 2) = v21;
      if (v21) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
      }
      v25[v17 / 8 - 1] = *(double *)&v15[v17 - 8];
      v17 -= 80;
    }
    while (&v15[v17] != v16);
    uint64_t v22 = (char *)*a1;
    uint64_t v15 = (char *)a1[1];
    __double2 v13 = (char *)&v25[v17 / 8];
    uint64_t v14 = (char *)(v25 + 10);
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = v27;
  if (v15 != v22)
  {
    do
    {
      uint64_t v26 = v15 - 80;
      char v23 = (std::__shared_weak_count *)*((void *)v15 - 2);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      v15 -= 80;
    }
    while (v26 != v22);
    uint64_t v15 = v22;
  }
  if (v15) {
    operator delete(v15);
  }
  return v14;
}

void sub_10024A728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024A760((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024A73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v3) {
    sub_1003A6030(v2 + v3, v2);
  }
  sub_10024A760((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10024A760(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    double v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10024A808()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10024A880()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_10024A8F8(uint64_t a1)
{
  *(void *)a1 = off_100462878;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!*(unsigned char *)(a1 + 64)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if (*(unsigned char *)(a1 + 64)) {
LABEL_4:
  }
    *(unsigned char *)(a1 + 64) = 0;
LABEL_5:
  if (*(unsigned char *)(a1 + 48)) {
    *(unsigned char *)(a1 + 48) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    unint64_t v5 = *(void **)(a1 + 8);
    if (v4 != v3)
    {
      do
      {
        unint64_t v6 = *(std::__shared_weak_count **)(v4 - 16);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 80;
      }
      while (v4 != v3);
      unint64_t v5 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_10024AA3C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10024AAE0(a1, a2);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16) - v4;
  if (v5)
  {
    unint64_t v6 = v5 / 80;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    if (v6 < 2)
    {
      unint64_t v7 = 0;
LABEL_9:
      unint64_t v10 = v6 - v7;
      long long v11 = (unsigned char *)(v4 + 80 * v7 + 49);
      do
      {
        *long long v11 = 1;
        v11 += 80;
        --v10;
      }
      while (v10);
      return result;
    }
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v8 = (unsigned char *)(v4 + 129);
    unint64_t v9 = v6 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v8 - 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
      *unint64_t v8 = 1;
      v8 += 160;
      v9 -= 2;
    }
    while (v9);
    if (v6 != v7) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_10024AAE0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    sub_10024D850((void **)(a1 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4));
  }
  sub_100033728((__n128 *)(a1 + 32), (__n128 *)(a2 + 32));
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(unsigned char *)(a2 + 48))
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      int v4 = *(unsigned __int8 *)(a2 + 64);
      if (!*(unsigned char *)(a1 + 64)) {
        goto LABEL_14;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 48) = 0;
      int v4 = *(unsigned __int8 *)(a2 + 64);
      if (!*(unsigned char *)(a1 + 64)) {
        goto LABEL_14;
      }
    }
LABEL_10:
    if (v4)
    {
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(_OWORD *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_OWORD *)(a2 + 80);
      uint64_t v6 = *(void *)(a2 + 96);
      uint64_t v5 = *(void *)(a2 + 104);
      if (!v5) {
        goto LABEL_18;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 64) = 0;
      *(_OWORD *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_OWORD *)(a2 + 80);
      uint64_t v6 = *(void *)(a2 + 96);
      uint64_t v5 = *(void *)(a2 + 104);
      if (!v5) {
        goto LABEL_18;
      }
    }
    goto LABEL_17;
  }
  if (*(unsigned char *)(a2 + 48))
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 48) = 1;
  }
  int v4 = *(unsigned __int8 *)(a2 + 64);
  if (*(unsigned char *)(a1 + 64)) {
    goto LABEL_10;
  }
LABEL_14:
  if (v4)
  {
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(_OWORD *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_OWORD *)(a2 + 80);
  uint64_t v6 = *(void *)(a2 + 96);
  uint64_t v5 = *(void *)(a2 + 104);
  if (v5) {
LABEL_17:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
LABEL_18:
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v6;
  *(void *)(a1 + 104) = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

void sub_10024AC58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; i -= 80)
  {
    int v4 = *(std::__shared_weak_count **)(i - 16);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(void *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
}

long double sub_10024ACF8(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    return 1.0;
  }
  double v2 = sub_100273560(a1 + 32);
  sub_100273414(v1, (uint64_t)v5);
  double v3 = sub_100273560((uint64_t)v5);
  return 1.0 / (exp(-(v2 - v3)) + 1.0);
}

void sub_10024AD84(uint64_t a1, uint64_t *a2, std::string::size_type a3, uint64_t *a4)
{
  if (!sub_100272D44((void *)(a1 + 8), (double *)(a1 + 32), -INFINITY))
  {
    sub_1000AE4B0(v13, "");
    sub_10024DD3C("BEFORE WIFI: ", &v16);
    sub_10016A2C4((uint64_t)v13, (uint64_t)&v16, 1);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    sub_1000D11E0((uint64_t)__p);
  }
  sub_10026E208(a2, a4, (double **)__p);
  uint64_t v15 = 0;
  unint64_t v8 = (std::string *)operator new(0x20uLL);
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)off_100462900;
  v8->__r_.__value_.__l.__size_ = a3;
  v8->__r_.__value_.__r.__words[2] = (std::string::size_type)__p;
  v8[1].__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
  uint64_t v15 = v8;
  unint64_t v9 = operator new(0x20uLL);
  *unint64_t v9 = off_100462990;
  v9[1] = a3;
  v9[2] = __p;
  void v9[3] = a4;
  uint64_t v15 = 0;
  unint64_t v17 = v8;
  long long v19 = v9;
  sub_10024B164(a1, (uint64_t)&v16);
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
    unint64_t v10 = v17;
    if (v17 != &v16) {
      goto LABEL_6;
    }
  }
  else
  {
    if (v19) {
      (*(void (**)(void))(*v19 + 40))();
    }
    unint64_t v10 = v17;
    if (v17 != &v16)
    {
LABEL_6:
      if (v10) {
        (*(void (**)(std::string *))(v10->__r_.__value_.__r.__words[0] + 40))(v10);
      }
      long long v11 = __p[0];
      if (__p[0]) {
        goto LABEL_9;
      }
      return;
    }
  }
  (*(void (**)(std::string *))(v16.__r_.__value_.__r.__words[0] + 32))(&v16);
  long long v11 = __p[0];
  if (__p[0])
  {
LABEL_9:
    __p[1] = v11;
    operator delete(v11);
  }
}

void sub_10024B050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10024B0D4(void *a1)
{
  double v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_10024B164(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 120);
  *(unsigned char *)(a1 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4) {
    sub_10008F39C();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v4 + 48))(__p);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      sub_100273560(v6 + v7);
      double v9 = *((double *)__p[0] + v8);
      sub_1002753A8((double *)(v6 + v7), v9);
      if (v9 != -INFINITY) {
        *(unsigned char *)(a1 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
      }
      sub_100273560(v6 + v7);
      ++v8;
      uint64_t v6 = *(void *)(a1 + 8);
      v7 += 80;
    }
    while (v8 < 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 16) - v6) >> 4));
  }
  uint64_t v10 = *(void *)(a2 + 56);
  if (!v10) {
    sub_10008F39C();
  }
  double v13 = (*(double (**)(uint64_t))(*(void *)v10 + 48))(v10);
  sub_1002753A8((double *)(a1 + 32), v13);
  sub_100273560(a1 + 32);
  if (v3 != *(unsigned __int8 *)(a1 + 120))
  {
    if (qword_10047BED8 == -1)
    {
      long long v11 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    dispatch_once(&qword_10047BED8, &stru_1004628D0);
    long long v11 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_11:
      int v12 = *(unsigned __int8 *)(a1 + 120);
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "After receiveWifi, hasFeasibleParticles changed to '%d'", buf, 8u);
    }
  }
LABEL_12:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_10024B628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,std::invalid_argument a31,int a32,__int16 a33,char a34,char a35)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (!a16) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void *sub_10024B740(void *a1)
{
  double v2 = a1 + 4;
  int v3 = (void *)a1[7];
  if (v3 != v2)
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    uint64_t v4 = (void *)a1[3];
    if (v4 != a1) {
      goto LABEL_5;
    }
LABEL_9:
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  (*(void (**)(void *))(*v2 + 32))(v2);
  uint64_t v4 = (void *)a1[3];
  if (v4 == a1) {
    goto LABEL_9;
  }
LABEL_5:
  if (v4) {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

void sub_10024B840(uint64_t a1, uint64_t a2)
{
  double v2 = (uint64_t *)(a1 + 8);
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    return;
  }
  uint64_t v4 = a1;
  int v5 = sub_1001E2094(a2);
  BOOL v6 = sub_10028D2D8(v2);
  if (v5)
  {
    if (!v6) {
      return;
    }
  }
  uint64_t v7 = *(void *)(v4 + 96);
  if (!v7)
  {
    sub_1000AE4B0(v86, "");
    sub_10024EC34("Params not populated", &buf);
    sub_10016A2C4((uint64_t)v86, (uint64_t)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    sub_100149690((uint64_t)v85);
  }
  if (!sub_1002A3D6C(v7)) {
    return;
  }
  sub_10014E914(v2, a2, &v90);
  uint64_t v75 = a2;
  unint64_t v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v90 + 40))(v90);
  uint64_t v10 = *v8;
  double v9 = (std::__shared_weak_count *)v8[1];
  uint64_t v88 = *v8;
  double v89 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v11 = (*(double (**)(uint64_t))(*(void *)v10 + 80))(v10);
  if (v11 > 100.0)
  {
    if (qword_10047BED8 != -1)
    {
      dispatch_once(&qword_10047BED8, &stru_1004628D0);
      int v12 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    int v12 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
    {
LABEL_11:
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "WARNING: GPS fusion accuracy threshold seems too high - low quality GPS measurements could get fused! Threshold value = %f", (uint8_t *)&buf, 0xCu);
    }
  }
LABEL_12:
  double v13 = sqrt(*(double *)(v75 + 136) * *(double *)(v75 + 136) + *(double *)(v75 + 128) * *(double *)(v75 + 128))
      * 0.408163265;
  if ((~(*(unsigned __int16 *)(v75 + 192) | (*(unsigned __int8 *)(v75 + 194) << 16)) & 0x1800) != 0) {
    double v13 = 0.0;
  }
  BOOL v14 = v13 <= 0.0;
  if (v13 > 0.0)
  {
    double v15 = *(double *)(v75 + 128);
  }
  else
  {
    double v13 = *(double *)(v75 + 96);
    double v15 = v13 * 1.73241161;
  }
  if (v14) {
    double v16 = *(double *)(v75 + 96) * 1.73241161;
  }
  else {
    double v16 = *(double *)(v75 + 136);
  }
  if (v13 >= v11) {
    char v17 = v5;
  }
  else {
    char v17 = 0;
  }
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
    sub_100072438(v86, v18);
    double v19 = sub_10014E47C((uint64_t)v86, v15);
    long double v20 = sub_10014E47C((uint64_t)v86, v16);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 104))(v10);
    sub_100072438(v85, v21);
    double v77 = sub_10014E47C((uint64_t)v85, *(double *)(v75 + 144));
    uint64_t v22 = *(void *)(v4 + 96);
    if (v5) {
      float v23 = sub_1002A3D14(v22);
    }
    else {
      float v23 = sub_1002A3DC4(v22);
    }
    double v24 = v23;
    if (v19 <= v24) {
      long double v25 = v24;
    }
    else {
      long double v25 = v19;
    }
    if (v20 <= v24) {
      long double v20 = v24;
    }
    double v26 = log(v25);
    double v27 = log(v20);
    float v28 = sub_1002A3D40(*(void *)(v4 + 96));
    double v29 = -1.83787707 - v26 - v27;
    double v30 = (v29 - v28 * v28) * 0.5;
    long long __p = 0u;
    long long v83 = 0u;
    int v84 = 1065353216;
    uint64_t v31 = *(void *)(v4 + 8);
    if (*(void *)(v4 + 16) != v31)
    {
      unint64_t v32 = 0;
      double v33 = v20 * v20;
      uint64_t v76 = v4;
      while (1)
      {
        v81[0] = *(void *)(v31 + 80 * v32 + 56);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
        __int16 v35 = sub_10024EC84((uint64_t)&__p, v81, (uint64_t)&unk_1003FAE80, &buf);
        long long v36 = v35;
        uint64_t v37 = *v2 + 80 * v32;
        std::string v39 = (uint64_t *)v35[4];
        unint64_t v38 = v35[5];
        if ((unint64_t)v39 >= v38) {
          break;
        }
        *std::string v39 = v37;
        uint64_t v34 = (uint64_t)(v39 + 1);
LABEL_35:
        v36[4] = v34;
        ++v32;
        uint64_t v31 = *(void *)(v4 + 8);
        if (v32 >= 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v4 + 16) - v31) >> 4))
        {
          for (uint64_t i = (uint64_t **)v83; i; uint64_t i = (uint64_t **)*i)
          {
            uint64_t v59 = (*(uint64_t (**)(uint64_t *))(*i[2] + 56))(i[2]);
            sub_1000776C4(v79, v59);
            sub_100148A04((uint64_t)v79, &buf);
            sub_1001AA12C((uint64_t)v78, v75 + 32);
            sub_1001486EC((uint64_t)&buf, (uint64_t)v78, (uint64_t)v80);
            sub_100148878((uint64_t)v80, (uint64_t)v81);
            nullsub_15(v78);
            double v60 = v94;
            if (v94 && !atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
            uint64_t v61 = v93;
            if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
            nullsub_15(&buf);
            sub_100074A24(v79);
            (*(void (**)(std::string *__return_ptr))(*i[2] + 48))(&buf);
            double v62 = sub_10014B3C4((uint64_t)&buf, v77);
            std::string::size_type size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_
              && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
            __double2 v64 = __sincos_stret(v62);
            double v65 = (double **)i[3];
            for (j = (double **)i[4]; v65 != j; ++v65)
            {
              double v67 = (*v65)[2] - *(double *)&v81[1];
              double v68 = (*v65)[3] - *(double *)&v81[2];
              double v69 = (v29
                   - ((v64.__sinval * v68 + v64.__cosval * v67)
                    * (v64.__sinval * v68 + v64.__cosval * v67)
                    / (v25
                     * v25)
                    + (v64.__cosval * v68 + -v64.__sinval * v67) * (v64.__cosval * v68 + -v64.__sinval * v67) / v33))
                  * 0.5;
              if (v30 >= v69) {
                double v69 = v30;
              }
              sub_1002753A8(*v65, v69);
            }
            nullsub_17(v81);
          }
          goto LABEL_76;
        }
      }
      std::string v40 = (uint64_t **)(v35 + 3);
      std::string v41 = (char *)v35[3];
      uint64_t v42 = ((char *)v39 - v41) >> 3;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 61) {
        sub_1000A9108();
      }
      uint64_t v44 = v38 - (void)v41;
      if (v44 >> 2 > v43) {
        unint64_t v43 = v44 >> 2;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v43;
      }
      if (v45)
      {
        if (v45 >> 61) {
          sub_1000A6A10();
        }
        unint64_t v46 = v45;
        double v47 = (char *)operator new(8 * v45);
        unint64_t v45 = v46;
        double v48 = (uint64_t *)&v47[8 * v42];
        *double v48 = v37;
        uint64_t v34 = (uint64_t)(v48 + 1);
        if (v39 == (uint64_t *)v41) {
          goto LABEL_56;
        }
      }
      else
      {
        double v47 = 0;
        double v48 = (uint64_t *)(8 * v42);
        *(void *)(8 * v42) = v37;
        uint64_t v34 = 8 * v42 + 8;
        if (v39 == (uint64_t *)v41)
        {
LABEL_56:
          v36[3] = v48;
          v36[4] = v34;
          v36[5] = &v47[8 * v45];
          if (v39) {
            operator delete(v39);
          }
          uint64_t v4 = v76;
          goto LABEL_35;
        }
      }
      unint64_t v49 = (char *)(v39 - 1) - v41;
      if (v49 < 0x58) {
        goto LABEL_101;
      }
      if ((unint64_t)(v41 - v47) < 0x20) {
        goto LABEL_101;
      }
      uint64_t v50 = (v49 >> 3) + 1;
      uint64_t v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
      long long v52 = &v39[v51 / 0xFFFFFFFFFFFFFFF8];
      double v48 = (uint64_t *)((char *)v48 - v51);
      float64x2_t v53 = &v47[8 * v42 - 16];
      double v54 = v39 - 2;
      uint64_t v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v56 = *(_OWORD *)v54;
        *((_OWORD *)v53 - 1) = *((_OWORD *)v54 - 1);
        *(_OWORD *)float64x2_t v53 = v56;
        v53 -= 32;
        v54 -= 4;
        v55 -= 4;
      }
      while (v55);
      std::string v39 = v52;
      if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_101:
        do
        {
          uint64_t v57 = *--v39;
          *--double v48 = v57;
        }
        while (v39 != (uint64_t *)v41);
      }
      std::string v39 = *v40;
      goto LABEL_56;
    }
LABEL_76:
    sub_1002753A8((double *)(v4 + 32), v30);
    double v70 = (void *)v83;
    if ((void)v83)
    {
      do
      {
        uint64_t v73 = (void *)*v70;
        double v74 = (void *)v70[3];
        if (v74)
        {
          v70[4] = v74;
          operator delete(v74);
        }
        operator delete(v70);
        double v70 = v73;
      }
      while (v73);
    }
    double v71 = (void *)__p;
    *(void *)&long long __p = 0;
    if (v71) {
      operator delete(v71);
    }
    sub_100320B04((uint64_t)v85);
    sub_100320B04((uint64_t)v86);
    double v9 = v89;
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  double v72 = v91;
  if (v91)
  {
    if (!atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_10024C154(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x837]) < 0)
  {
    operator delete((void *)STACK[0x820]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10024C204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100074A24(va);
  sub_10024C290(&STACK[0x7F0]);
  sub_100320B04(&STACK[0x820]);
  sub_100320B04(&STACK[0x858]);
  sub_1000BA884(&STACK[0x890]);
  sub_1000BA884(v8 - 256);
  _Unwind_Resume(a1);
}

void sub_10024C20C()
{
  sub_100148DD8(v0 - 240);
  JUMPOUT(0x10024C248);
}

void sub_10024C218()
{
  sub_1000BA884(v0 - 240);
  JUMPOUT(0x10024C258);
}

void sub_10024C22C(_Unwind_Exception *a1)
{
  sub_10024C290((uint64_t)&STACK[0x7F0]);
  sub_100320B04((uint64_t)&STACK[0x820]);
  sub_100320B04((uint64_t)&STACK[0x858]);
  sub_1000BA884((uint64_t)&STACK[0x890]);
  sub_1000BA884(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_10024C234(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nullsub_15(va);
  JUMPOUT(0x10024C240);
}

void sub_10024C254()
{
}

uint64_t sub_10024C290(uint64_t a1)
{
  double v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v5 = (void *)*v2;
      BOOL v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      double v2 = v5;
    }
    while (v5);
  }
  int v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

BOOL sub_10024C2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(double **)(a1 + 8);
  int v5 = *(double **)(a1 + 16);
  if (v4 == v5)
  {
    double v7 = -INFINITY;
    double v6 = INFINITY;
    double v9 = *(double *)(a2 + 24);
  }
  else
  {
    double v6 = INFINITY;
    double v7 = -INFINITY;
    do
    {
      double v8 = sub_1002FEC20((uint64_t)v4, a2);
      sub_1002753A8(v4, v8);
      if (v7 < v8) {
        double v7 = v8;
      }
      if (v8 < v6) {
        double v6 = v8;
      }
      v4 += 10;
    }
    while (v4 != v5);
    double v9 = *(double *)(a2 + 24);
  }
  uint64_t v10 = (double *)(a1 + 32);
  sub_1002753A8(v10, v9);
  sub_100273560((uint64_t)v10);
  return v6 < v7;
}

void sub_10024C484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10024C4A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1002ADBC0(a2);
  if ((result & 1) == 0)
  {
    uint64_t v9 = *(void *)(a1 + 8);
    for (uint64_t i = *(void *)(a1 + 16); v9 != i; v9 += 80)
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a3 + 24))(a3, v9, a2, a4);
  }
  return result;
}

uint64_t sub_10024C53C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 8);
  for (uint64_t i = *(void *)(result + 16); v3 != i; v3 += 80)
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v3, a3);
  return result;
}

BOOL sub_10024C5B0(uint64_t a1, uint64_t a2, float *a3)
{
  if (!*(unsigned char *)(a1 + 120)) {
    return 0;
  }
  *(_DWORD *)(a1 + 124) = 0;
  uint64_t v6 = *(void *)(a2 + 16) - *(void *)(a1 + 112);
  double v22 = (float)(a3[7] * (float)v6) / 1000000000.0;
  if (v22 > 0.0)
  {
    sub_1000AE4B0(v24, "");
    sub_10024F040("Deweight amount is not negative or zero:  ", &v26);
    sub_10016452C(&v22, &v27);
    sub_10016A2C4((uint64_t)v24, (uint64_t)&v26, 2);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v27.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_24:
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_25;
        }
LABEL_28:
        operator delete(v24[0]);
LABEL_25:
        sub_1000D11E0((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_28;
  }
  double v7 = sub_100272CF8((double **)(a1 + 8), 0);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v8 != v9)
  {
    uint64_t v10 = v6 & ~(v6 >> 63);
    double v11 = 0.0;
    while (1)
    {
      __int16 v12 = (*(uint64_t (**)(float *, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v8, a2, v10);
      double v13 = sub_100273560(v8);
      if (v13 >= 0.0)
      {
        if (v12) {
          goto LABEL_6;
        }
      }
      else if (fabs(v13) == INFINITY || (v12 & 1) != 0)
      {
        goto LABEL_6;
      }
      if ((v12 & 0x100) != 0)
      {
        ++*(_DWORD *)(a1 + 124);
        if ((double)*(uint64_t *)(v8 + 72) / 1000000000.0 <= a3[6]) {
          goto LABEL_6;
        }
        double v18 = sub_100273560(v8);
        double v19 = exp(v18 - v7);
        double v20 = sub_100273560(v8);
        double v17 = v22;
        double v16 = v19 - exp(v20 + v22 - v7);
      }
      else
      {
        double v15 = sub_100273560(v8);
        double v16 = exp(v15 - v7);
        double v17 = -INFINITY;
      }
      sub_1002753A8((double *)v8, v17);
      double v11 = v11 + v16;
LABEL_6:
      v8 += 80;
      if (v8 == v9) {
        goto LABEL_21;
      }
    }
  }
  double v11 = 0.0;
LABEL_21:
  *(void *)(a1 + 112) = *(void *)(a2 + 16);
  return sub_10024C8E8(a1, v7, v11);
}

void sub_10024C88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10024C8E8(uint64_t a1, double a2, double a3)
{
  if (a3 != 0.0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    if (v5 == v6)
    {
      double v8 = 0.0;
    }
    else
    {
      double v8 = 0.0;
      do
      {
        double v9 = sub_100273560(v5);
        double v8 = v8 + exp(v9 - a2);
        v5 += 80;
      }
      while (v5 != v6);
      if (v8 != 0.0 && v8 + a3 != 0.0)
      {
        uint64_t v10 = (double *)(a1 + 32);
        double v11 = log(v8 / (v8 + a3));
        sub_1002753A8(v10, v11);
        sub_100273560((uint64_t)v10);
        return a3 != 0.0;
      }
    }
    if (qword_10047BED8 == -1)
    {
      __int16 v12 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return a3 != 0.0;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_1004628D0);
      __int16 v12 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return a3 != 0.0;
      }
    }
    __p[0] = 134218240;
    *(double *)&__p[1] = a3;
    __int16 v15 = 2048;
    double v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "WARNING: Cannot modify off map weight after deweighting particles due to walls/bounds.  removedOnMapLikelihood: %f, onMapLikelihoodAfterRemoval: %f", (uint8_t *)__p, 0x16u);
  }
  return a3 != 0.0;
}

void sub_10024CAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10024CB30(__n128 *a1, uint64_t a2, uint64_t a3)
{
  if (a1[7].n128_u8[8])
  {
    uint64_t v4 = &a1->n128_i64[1];
    if (a1->n128_u64[1] == a1[1].n128_u64[0])
    {
      sub_1000AE4B0(&__p, "");
      sub_10016A2C4((uint64_t)&__p, 0, 0);
      if (v15 < 0) {
        operator delete((void *)__p.n128_u64[0]);
      }
      sub_1000D11E0((uint64_t)&v13);
    }
    double v5 = (*(double (**)(__n128 *, uint64_t, uint64_t))(a1->n128_u64[0] + 16))(a1, a2, a3);
    sub_100273414(v4, (uint64_t)v12);
    double v6 = log(1.0 - v5);
    double v7 = (double *)a1->n128_u64[1];
    double v8 = (double *)a1[1].n128_u64[0];
    if (v7 != v8)
    {
      double v9 = v6;
      do
      {
        sub_1002753A8(v7, v9);
        v7 += 10;
      }
      while (v7 != v8);
    }
    double v10 = log(v5);
    sub_1002753A8(v12, v10);
    double v11 = a1 + 2;
    sub_100275308(v12, v11->n128_f64, (uint64_t)&__p);
    sub_100033728(v11, &__p);
    sub_100273560((uint64_t)v11);
  }
}

void sub_10024CD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10024CD70(uint64_t a1, void *a2)
{
  double v4 = sub_100272CF8((double **)(a1 + 8), 0);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  for (double i = 0.0; v5 != v6; v5 += 80)
  {
    double v8 = (uint64_t ***)(*(uint64_t (**)(void))(**(void **)(v5 + 56) + 64))(*(void *)(v5 + 56));
    if (!sub_10006F50C(a2, v8))
    {
      double v9 = sub_100273560(v5);
      double i = i + exp(v9 - v4);
      sub_1002753A8((double *)v5, -INFINITY);
    }
  }

  return sub_10024C8E8(a1, v4, i);
}

BOOL sub_10024CE58(uint64_t a1)
{
  BOOL result = sub_100272D8C((double **)(a1 + 8), (double *)(a1 + 32));
  if (*(unsigned char *)(a1 + 120)) {
    BOOL v3 = result;
  }
  else {
    BOOL v3 = 0;
  }
  *(unsigned char *)(a1 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v3;
  return result;
}

void sub_10024CE94(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, double **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (qword_10047BED8 != -1) {
    dispatch_once(&qword_10047BED8, &stru_1004628D0);
  }
  uint64_t v36 = a6;
  double v11 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = a2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "resampleTo, numParticles=%zu", (uint8_t *)&buf, 0xCu);
  }
  unint64_t v37 = a2;
  uint64_t v34 = *(double **)(a1 + 16);
  __int16 v35 = *(double **)(a1 + 8);
  sub_10024D378(v35, v34);
  __int16 v12 = *(__n128 **)(a1 + 16);
  if (v12 == *(__n128 **)(a1 + 8))
  {
    double v18 = *(__n128 **)(a1 + 16);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) / 80;
    if (v15 <= 1) {
      uint64_t v16 = 1;
    }
    else {
      uint64_t v16 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) / 80;
    }
    do
    {
      uint64_t v17 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a3 + 88))(a3, v15);
      sub_10024F090(*(void *)(a1 + 8) + v13, *(void *)(a1 + 8) + 80 * (v17 + v14++));
      v13 += 80;
      --v15;
    }
    while (v16 != v14);
    double v18 = *(__n128 **)(a1 + 8);
    __int16 v12 = *(__n128 **)(a1 + 16);
  }
  if ((char *)v12 - (char *)v18 < 1)
  {
LABEL_16:
    double v22 = 0;
    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (v12 - v18);
    while (1)
    {
      double v20 = operator new(80 * v19, &std::nothrow);
      if (v20) {
        break;
      }
      BOOL v21 = v19 > 1;
      v19 >>= 1;
      if (!v21) {
        goto LABEL_16;
      }
    }
    double v22 = v20;
  }
  sub_10024F264(v18, v12, (uint64_t)&buf, 0xCCCCCCCCCCCCCCCDLL * (v12 - v18), v22, v19);
  if (v22) {
    operator delete(v22);
  }
  if (*a4)
  {
    if (qword_10047BED8 != -1) {
      dispatch_once(&qword_10047BED8, &stru_1004628D0);
    }
    float v23 = qword_10047BEE0;
    BOOL v24 = os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG);
    char v25 = *a4;
    if (v24)
    {
      sub_10024D4BC(a1, v25, (double *)(a1 + 32), (uint64_t)&buf);
      if (SHIBYTE(v40) >= 0) {
        p_long long buf = &buf;
      }
      else {
        p_long long buf = (long long *)buf;
      }
      *(_DWORD *)std::string v41 = 136315138;
      uint64_t v42 = p_buf;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Best particle is %s the reference injection weight, offmap weight", v41, 0xCu);
      if (SHIBYTE(v40) < 0) {
        operator delete((void *)buf);
      }
      char v25 = *a4;
    }
  }
  else
  {
    char v25 = 0;
  }
  sub_1002731BC((uint64_t *)(a1 + 8), (uint64_t)v25, a1 + 32);
  std::string v27 = *a4;
  float v28 = (*(float (**)(uint64_t))(*(void *)a3 + 32))(a3);
  sub_100274000(a1 + 8, v27, v37, a5, &buf, v28);
  if ((_BYTE)buf)
  {
    sub_10024D378(*(double **)(a1 + 8), *(double **)(a1 + 16));
    if (0xCCCCCCCCCCCCCCCDLL * (((char *)v34 - (char *)v35) >> 4) < 0xCCCCCCCCCCCCCCCDLL
                                                                   * ((uint64_t)(*(void *)(a1 + 16)
                                                                              - *(void *)(a1 + 8)) >> 4))
    {
      if (qword_10047BED8 != -1) {
        dispatch_once(&qword_10047BED8, &stru_1004628D0);
      }
      double v29 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "New particles were injected. If you were not isFeasible before, you certainly are now.", v41, 2u);
      }
      *(unsigned char *)(a1 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
    }
    *(unsigned char *)uint64_t v36 = 0;
    if ((_BYTE)buf)
    {
      *(void *)(v36 + 8) = 0;
      *(void *)(v36 + 16) = 0;
      *(void *)(v36 + 24) = 0;
      double v30 = (void *)*((void *)&buf + 1);
      int64_t v31 = (int64_t)v40 - *((void *)&buf + 1);
      if (v40 != *((void **)&buf + 1))
      {
        if (v31 < 0) {
          sub_1000A9108();
        }
        unint64_t v32 = (char *)operator new((size_t)v40 - *((void *)&buf + 1));
        *(void *)(v36 + 8) = v32;
        double v33 = &v32[16 * (v31 >> 4)];
        *(void *)(v36 + 24) = v33;
        memcpy(v32, v30, v31);
        *(void *)(v36 + 16) = v33;
      }
      *(unsigned char *)uint64_t v36 = 1;
      if (v30)
      {
        std::string v40 = v30;
        operator delete(v30);
      }
    }
  }
  else
  {
    *(unsigned char *)uint64_t v36 = 0;
  }
}

void sub_10024D314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17)
{
  unint64_t v19 = *v17;
  if (*v17)
  {
    *(void *)(a12 + 16) = v19;
    operator delete(v19);
  }
  if (a15)
  {
    if (__p)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_10024D378(double *a1, double *a2)
{
  if (a1 != a2)
  {
    BOOL v3 = a1;
    do
    {
      sub_1002753B8(v3);
      v3 += 10;
    }
    while (v3 != a2);
  }
}

void sub_10024D478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10024D4BC(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  if (v5 == v6)
  {
    *(unsigned char *)(a4 + 23) = 3;
    *(_DWORD *)a4 = 4271950;
    return;
  }
  for (double i = v5 + 10; i != v6; i += 10)
  {
    double v10 = sub_1002753B8(v5);
    if (v10 < sub_1002753B8(i)) {
      uint64_t v5 = i;
    }
  }
  double v11 = sub_1002753B8(v5);
  double v12 = sub_1002753B8(a2);
  long double v13 = exp(v11 - v12);
  double v14 = sub_1002753B8(a3);
  __p[0] = *(void **)&v13;
  sub_100150A74((uint64_t)v33, "%1%");
  double v30 = __p;
  int64_t v31 = nullsub_154;
  unint64_t v32 = sub_10024DD34;
  unint64_t v15 = (std::string *)sub_100153BCC((uint64_t)v33, (uint64_t)&v30);
  sub_10014FF00(v15, (uint64_t)&v26);
  sub_1001501E8((uint64_t)v33);
  uint64_t v16 = std::string::append(&v26, "x, ");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  long double v29 = exp(v11 - v14);
  sub_100150A74((uint64_t)v33, "%1%");
  double v30 = (void **)&v29;
  int64_t v31 = nullsub_154;
  unint64_t v32 = sub_10024DD34;
  double v18 = (std::string *)sub_100153BCC((uint64_t)v33, (uint64_t)&v30);
  sub_10014FF00(v18, (uint64_t)__p);
  sub_1001501E8((uint64_t)v33);
  if ((v25 & 0x80u) == 0) {
    unint64_t v19 = __p;
  }
  else {
    unint64_t v19 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v20 = v25;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  BOOL v21 = std::string::append(&v27, (const std::string::value_type *)v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  float v23 = std::string::append(&v28, "x");
  *(std::string *)a4 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_20;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_21:
    operator delete(v26.__r_.__value_.__l.__data_);
    return;
  }
LABEL_20:
  operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_21;
  }
}

void sub_10024D788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if (a14 < 0)
    {
LABEL_5:
      operator delete(a9);
      if (a26 < 0)
      {
LABEL_8:
        operator delete(a21);
        if ((a20 & 0x80000000) == 0) {
          goto LABEL_12;
        }
LABEL_11:
        operator delete(a15);
LABEL_12:
        _Unwind_Resume(a1);
      }
LABEL_10:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if (a26 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

void sub_10024D83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10024D850(void **a1, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  double v9 = (char *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 4) < __sz)
  {
    if (v9)
    {
      double v10 = (char *)a1[1];
      double v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          double v12 = (std::__shared_weak_count *)*((void *)v10 - 2);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v10 -= 80;
        }
        while (v10 != v9);
        double v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0x333333333333333) {
      goto LABEL_59;
    }
    unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    uint64_t v27 = 2 * v26;
    if (2 * v26 <= __sz) {
      uint64_t v27 = __sz;
    }
    unint64_t v28 = v26 >= 0x199999999999999 ? 0x333333333333333 : v27;
    if (v28 > 0x333333333333333) {
LABEL_59:
    }
      sub_1000A9108();
    uint64_t v29 = 80 * v28;
    double v30 = (char *)operator new(80 * v28);
    *a1 = v30;
    a1[1] = v30;
    a1[2] = &v30[v29];
    if (v6 != a3)
    {
      uint64_t v31 = 0;
      do
      {
        sub_100033728((__n128 *)&v30[v31], (__n128 *)(v6 + v31));
        long long v32 = *(_OWORD *)(v6 + v31 + 32);
        *(_OWORD *)(v33 + 16) = *(_OWORD *)(v6 + v31 + 16);
        *(_OWORD *)(v33 + 32) = v32;
        *(_WORD *)(v33 + 48) = *(_WORD *)(v6 + v31 + 48);
        uint64_t v34 = *(void *)(v6 + v31 + 64);
        *(void *)(v33 + 56) = *(void *)(v6 + v31 + 56);
        *(void *)(v33 + 64) = v34;
        if (v34) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)&v30[v31 + 72] = *(void *)(v6 + v31 + 72);
        v31 += 80;
      }
      while (v6 + v31 != a3);
      v30 += v31;
    }
    a1[1] = v30;
    return;
  }
  long double v13 = (char *)a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v13 - v9) >> 4) >= __sz)
  {
    if (a2 == a3)
    {
      std::string::size_type v20 = (char *)*a1;
      if (v13 == v9)
      {
LABEL_58:
        a1[1] = v20;
        return;
      }
    }
    else
    {
      std::string::size_type v20 = (char *)*a1;
      do
      {
        sub_100033728((__n128 *)v9, (__n128 *)v6);
        long long v21 = *(_OWORD *)(v6 + 16);
        long long v22 = *(_OWORD *)(v6 + 32);
        *((_WORD *)v9 + 24) = *(_WORD *)(v6 + 48);
        *((_OWORD *)v9 + 1) = v21;
        *((_OWORD *)v9 + 2) = v22;
        uint64_t v24 = *(void *)(v6 + 56);
        uint64_t v23 = *(void *)(v6 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        unsigned __int8 v25 = (std::__shared_weak_count *)*((void *)v9 + 8);
        *((void *)v9 + 7) = v24;
        *((void *)v9 + 8) = v23;
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        *((void *)v9 + 9) = *(void *)(v6 + 72);
        v20 += 80;
        v6 += 80;
        v9 += 80;
      }
      while (v6 != a3);
      long double v13 = (char *)a1[1];
      if (v13 == v20) {
        goto LABEL_58;
      }
    }
    do
    {
      std::string v41 = (std::__shared_weak_count *)*((void *)v13 - 2);
      if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      v13 -= 80;
    }
    while (v13 != v20);
    goto LABEL_58;
  }
  uint64_t v14 = a2 + 16 * ((v13 - v9) >> 4);
  if (v13 != v9)
  {
    do
    {
      sub_100033728((__n128 *)v9, (__n128 *)v6);
      long long v15 = *(_OWORD *)(v6 + 16);
      long long v16 = *(_OWORD *)(v6 + 32);
      *((_WORD *)v9 + 24) = *(_WORD *)(v6 + 48);
      *((_OWORD *)v9 + 1) = v15;
      *((_OWORD *)v9 + 2) = v16;
      uint64_t v18 = *(void *)(v6 + 56);
      uint64_t v17 = *(void *)(v6 + 64);
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v19 = (std::__shared_weak_count *)*((void *)v9 + 8);
      *((void *)v9 + 7) = v18;
      *((void *)v9 + 8) = v17;
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      *((void *)v9 + 9) = *(void *)(v6 + 72);
      v6 += 80;
      v9 += 80;
    }
    while (v6 != v14);
    double v9 = (char *)a1[1];
  }
  __int16 v35 = v9;
  if (v14 != a3)
  {
    uint64_t v36 = 0;
    do
    {
      sub_100033728((__n128 *)&v9[v36], (__n128 *)(v14 + v36));
      long long v37 = *(_OWORD *)(v14 + v36 + 16);
      long long v38 = *(_OWORD *)(v14 + v36 + 32);
      *(_WORD *)(v39 + 48) = *(_WORD *)(v14 + v36 + 48);
      *(_OWORD *)(v39 + 16) = v37;
      *(_OWORD *)(v39 + 32) = v38;
      uint64_t v40 = *(void *)(v14 + v36 + 64);
      *(void *)(v39 + 56) = *(void *)(v14 + v36 + 56);
      *(void *)(v39 + 64) = v40;
      if (v40) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&v9[v36 + 72] = *(void *)(v14 + v36 + 72);
      v36 += 80;
    }
    while (v14 + v36 != a3);
    __int16 v35 = &v9[v36];
  }
  a1[1] = v35;
}

void sub_10024DCC0(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    sub_1003A49C0(v2 + v3, v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_10024DD00(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_10024DD34()
{
  return std::ostream::operator<<();
}

std::string *sub_10024DD3C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10024DD70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10024DD90()
{
}

__n128 sub_10024DDA4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100462900;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10024DDF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100462900;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10024DE30(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
}

uint64_t sub_10024DE40(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikel"
                     "ihoodMeasurementEventE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK"
                                "30WifiLikelihoodMeasurementEventE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikelihoodMeasurementEventE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikelihoodMeasurementEventE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10024DEB0()
{
}

void sub_10024DEC0()
{
}

__n128 sub_10024DED4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_100462990;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10024DF28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_100462990;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_10024DF60(uint64_t a1)
{
  return sub_10026DAB8(*(void *)(a1 + 8), *(void **)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_10024DF70(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikel"
                     "ihoodMeasurementEventE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK"
                                "30WifiLikelihoodMeasurementEventE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikelihoodMeasurementEventE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN14ParticleFilter15wifiMeasurementERK25PriorProbabilitiesContextRK17WifiMapLikelihoodRK30WifiLikelihoodMeasurementEventE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_10024DFE0()
{
}

void sub_10024DFF0()
{
}

void sub_10024E04C()
{
}

void sub_10024E060(std::string *a1@<X8>)
{
  sub_1000CD728((const char *)((unint64_t)"PN10purpleslam20tag_unexpected_valueE" & 0x7FFFFFFFFFFFFFFFLL), &v10);
  if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v2.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v10;
  }
  else {
    v2.__i_ = (std::__wrap_iter<const char *>::iterator_type)v10.__r_.__value_.__r.__words[0];
  }
  std::string::insert(&v10, v2, 91);
  std::string v11 = v10;
  memset(&v10, 0, sizeof(v10));
  unint64_t v3 = std::string::append(&v11, "] = ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_10024E2A4(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  double v7 = std::string::append(&v12, (const std::string::value_type *)p_p, size);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v13, 10);
  *a1 = v13;
  memset(&v13, 0, sizeof(v13));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_17;
    }
  }
  else if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v12.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_18:
    operator delete(v10.__r_.__value_.__l.__data_);
    return;
  }
LABEL_17:
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_18;
  }
}

void sub_10024E1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_10024E2A4(std::string *a1@<X8>)
{
  *((unsigned char *)&v14.__r_.__value_.__s + 23) = 1;
  LOWORD(v14.__r_.__value_.__l.__data_) = 40;
  sub_10024E530();
  if ((v13 & 0x80u) == 0) {
    std::string::const_iterator v2 = v12;
  }
  else {
    std::string::const_iterator v2 = (void **)v12[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v3 = v13;
  }
  else {
    std::string::size_type v3 = (std::string::size_type)v12[1];
  }
  long long v4 = std::string::append(&v14, (const std::string::value_type *)v2, v3);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v15, 44);
  std::string v16 = v15;
  memset(&v15, 0, sizeof(v15));
  sub_10024E530();
  if ((v11 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    std::string::size_type v7 = v11;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  long long v8 = std::string::append(&v16, (const std::string::value_type *)v6, v7);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v17, 41);
  *a1 = v17;
  memset(&v17, 0, sizeof(v17));
  if ((char)v11 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_21;
    }
  }
  else if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v16.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if (((char)v13 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v15.__r_.__value_.__l.__data_);
  if (((char)v13 & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_23:
    operator delete(v14.__r_.__value_.__l.__data_);
    return;
  }
LABEL_22:
  operator delete(v12[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_23;
  }
}

void sub_10024E444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0)
  {
    operator delete(*(void **)(v33 - 64));
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v33 - 73) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((*(char *)(v33 - 73) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v33 - 96));
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a28);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(a16);
  if ((a27 & 0x80000000) == 0) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10024E530()
{
  sub_1000CD96C((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10024E664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000CDB10((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024E678()
{
}

void sub_10024E904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10024E9C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10024E918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000CD238((uint64_t)va);
  sub_10024E9C4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10024E934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 16))(a14);
    if (atomic_fetch_add(a14 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 24))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10024E9C4(uint64_t a1)
{
  char v2 = *(atomic_uint **)(a1 + 8);
  if (v2)
  {
    if (atomic_fetch_add(v2 + 2, 0xFFFFFFFF) == 1)
    {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 16))(v2);
      if (atomic_fetch_add(v2 + 3, 0xFFFFFFFF) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v2 + 24))(v2);
      }
    }
  }
  return a1;
}

void sub_10024EA6C()
{
}

void sub_10024EB58(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    sub_1003A3598(v1);
  }
  __cxa_rethrow();
}

void sub_10024EB70(_Unwind_Exception *a1)
{
}

void sub_10024EB88()
{
}

uint64_t sub_10024EB9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_10024EBCC()
{
  return 0;
}

uint64_t sub_10024EBD4()
{
  return 0;
}

uint64_t sub_10024EBDC()
{
  return 0;
}

std::string *sub_10024EBE4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10024EC18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10024EC34@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10024EC68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10024EC84(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unsigned __int8 v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      std::string v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            std::string v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          std::string v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  std::string v17 = (void *)(a1 + 16);
  std::string v14 = operator new(0x30uLL);
  *std::string v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v14[5] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    long long v21 = *(void **)(*(void *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *std::string v14 = *v21;
LABEL_61:
      *long long v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v11) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v20 = *(void *)a1;
        long long v21 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v20 = *(void *)a1;
        long long v21 = *(void **)(*(void *)a1 + 8 * v10);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v29 & v10;
      uint64_t v20 = *(void *)a1;
      long long v21 = *(void **)(*(void *)a1 + 8 * (v29 & v10));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  *std::string v14 = *v17;
  *std::string v17 = v14;
  *(void *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v30 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    long long v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_10024EFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024EFF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10024EFF0(uint64_t a1)
{
  char v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      std::string::size_type v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

std::string *sub_10024F040@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10024F074(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10024F090(uint64_t a1, uint64_t a2)
{
  sub_100033728(&v13, (__n128 *)a1);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v14 = *(_OWORD *)(a1 + 16);
  long long v15 = v4;
  __int16 v16 = *(_WORD *)(a1 + 48);
  long long v17 = *(_OWORD *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v18 = *(void *)(a1 + 72);
  sub_100033728((__n128 *)a1, (__n128 *)a2);
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  long long v7 = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  sub_100033728((__n128 *)a2, &v13);
  long long v9 = v15;
  *(_OWORD *)(a2 + 16) = v14;
  *(_OWORD *)(a2 + 32) = v9;
  *(_WORD *)(a2 + 48) = v16;
  long long v10 = v17;
  long long v17 = 0uLL;
  unint64_t v11 = *(std::__shared_weak_count **)(a2 + 64);
  *(_OWORD *)(a2 + 56) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint8x8_t v12 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  *(void *)(a2 + 72) = v18;
  if (v12)
  {
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_10024F250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10024F264(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, void *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      double v8 = sub_100273560((uint64_t)&a2[-5]);
      if (v8 < sub_100273560((uint64_t)a1))
      {
        sub_10024F090((uint64_t)a1, (uint64_t)&a2[-5]);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      sub_10024F504(a1, a2);
    }
    else
    {
      uint64_t v13 = a4 >> 1;
      uint64_t v14 = (uint64_t)&a1[5 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        sub_10024F798((uint64_t)a1, &a1[5 * (a4 >> 1)], a3, a4 >> 1, (uint64_t)a5);
        unint64_t v16 = a4 - v13;
        long long v17 = &a5[10 * v13];
        sub_10024F798((uint64_t)&a1[5 * (a4 >> 1)], a2, a3, v16, (uint64_t)v17);
        sub_10024FA2C((uint64_t)a5, v17, (uint64_t)v17, (uint64_t)&a5[10 * a4], a1);
        if (a5)
        {
          unint64_t v18 = 0;
          float v19 = (std::__shared_weak_count **)(a5 + 8);
          do
          {
            uint64_t v20 = *v19;
            if (*v19 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            ++v18;
            v19 += 10;
          }
          while (v18 < a4);
        }
      }
      else
      {
        sub_10024F264(a1, &a1[5 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        uint64_t v15 = a4 - v13;
        sub_10024F264(v14, a2, a3, v15, a5, a6);
        sub_10024FDBC((uint64_t)a1, v14, (uint64_t)a2, a3, v13, v15, a5, a6);
      }
    }
  }
}

void sub_10024F4F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10024F504(__n128 *a1, __n128 *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = (uint64_t)&a1[5];
    if (&a1[5] != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (uint64_t)a1;
      do
      {
        long long v7 = (__n128 *)v4;
        double v8 = sub_100273560(v4);
        if (v8 < sub_100273560(v6))
        {
          sub_100033728(&v23, v7);
          long long v9 = *(_OWORD *)(v6 + 112);
          long long v24 = *(_OWORD *)(v6 + 96);
          long long v25 = v9;
          __int16 v26 = *(_WORD *)(v6 + 128);
          long long v27 = *(_OWORD *)(v6 + 136);
          *(void *)(v6 + 136) = 0;
          *(void *)(v6 + 144) = 0;
          uint64_t v10 = v5;
          unint64_t v28 = *(void *)(v6 + 152);
          while (1)
          {
            unint64_t v11 = (char *)a1 + v10;
            sub_100033728((__n128 *)((char *)a1 + v10 + 80), (__n128 *)((char *)a1 + v10));
            long long v12 = *(long long *)((char *)&a1[2] + v10);
            *((_OWORD *)v11 + 6) = *((_OWORD *)v11 + 1);
            *((_OWORD *)v11 + 7) = v12;
            *((_WORD *)v11 + 64) = *((_WORD *)v11 + 24);
            long long v13 = *(long long *)((char *)&a1[3] + v10 + 8);
            *((void *)v11 + 7) = 0;
            *((void *)v11 + 8) = 0;
            uint64_t v14 = *(std::__shared_weak_count **)((char *)a1[9].n128_u64 + v10);
            *(_OWORD *)(v11 + 136) = v13;
            if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
            uint64_t v15 = (char *)a1 + v10;
            *(unint64_t *)((char *)&a1[9].n128_u64[1] + v1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(unint64_t *)((char *)&a1[4].n128_u64[1]
                                                                                          + v10);
            if (!v10) {
              break;
            }
            double v16 = sub_100273560((uint64_t)&v23);
            v10 -= 80;
            if (v16 >= sub_100273560((uint64_t)(v15 - 80)))
            {
              long long v17 = (__n128 *)((char *)a1 + v10 + 80);
              goto LABEL_14;
            }
          }
          long long v17 = a1;
LABEL_14:
          sub_100033728(v17, &v23);
          long long v18 = v24;
          long long v19 = v25;
          *((_WORD *)v15 + 24) = v26;
          *((_OWORD *)v15 + 1) = v18;
          *((_OWORD *)v15 + 2) = v19;
          long long v20 = v27;
          long long v27 = 0uLL;
          *((void *)v15 + 7) = v20;
          long long v21 = (std::__shared_weak_count *)v17[4].n128_u64[0];
          v17[4].n128_u64[0] = *((void *)&v20 + 1);
          if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
            BOOL v22 = (std::__shared_weak_count *)*((void *)&v27 + 1);
            v17[4].n128_u64[1] = v28;
            if (v22)
            {
LABEL_17:
              if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
          }
          else
          {
            BOOL v22 = (std::__shared_weak_count *)*((void *)&v27 + 1);
            v17[4].n128_u64[1] = v28;
            if (v22) {
              goto LABEL_17;
            }
          }
        }
        uint64_t v4 = (uint64_t)&v7[5];
        v5 += 80;
        uint64_t v6 = (uint64_t)v7;
      }
      while (&v7[5] != a2);
    }
  }
}

void sub_10024F770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10024F784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10024F798(uint64_t a1, __n128 *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (a4 == 2)
    {
      double v11 = sub_100273560((uint64_t)&a2[-5]);
      if (v11 >= sub_100273560(a1))
      {
        sub_100033728((__n128 *)a5, (__n128 *)a1);
        long long v20 = *(_OWORD *)(a1 + 16);
        long long v21 = *(_OWORD *)(a1 + 32);
        *(_WORD *)(a5 + 48) = *(_WORD *)(a1 + 48);
        *(_OWORD *)(a5 + 16) = v20;
        *(_OWORD *)(a5 + 32) = v21;
        *(_OWORD *)(a5 + 56) = *(_OWORD *)(a1 + 56);
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
        *(void *)(a5 + 72) = *(void *)(a1 + 72);
        sub_100033728((__n128 *)(a5 + 80), a2 - 5);
        __n128 v22 = a2[-4];
        __n128 v23 = a2[-3];
        *(_WORD *)(a5 + 128) = a2[-2].n128_u16[0];
        *(__n128 *)(a5 + 96) = v22;
        *(__n128 *)(a5 + 112) = v23;
        *(__n128 *)(a5 + 136) = *(__n128 *)((char *)a2 - 24);
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        double v16 = &a2[-1].n128_u64[1];
      }
      else
      {
        sub_100033728((__n128 *)a5, a2 - 5);
        __n128 v12 = a2[-4];
        __n128 v13 = a2[-3];
        *(_WORD *)(a5 + 48) = a2[-2].n128_u16[0];
        *(__n128 *)(a5 + 16) = v12;
        *(__n128 *)(a5 + 32) = v13;
        *(__n128 *)(a5 + 56) = *(__n128 *)((char *)a2 - 24);
        a2[-2].n128_u64[1] = 0;
        a2[-1].n128_u64[0] = 0;
        *(void *)(a5 + 72) = a2[-1].n128_u64[1];
        sub_100033728((__n128 *)(a5 + 80), (__n128 *)a1);
        long long v14 = *(_OWORD *)(a1 + 16);
        long long v15 = *(_OWORD *)(a1 + 32);
        *(_WORD *)(a5 + 128) = *(_WORD *)(a1 + 48);
        *(_OWORD *)(a5 + 96) = v14;
        *(_OWORD *)(a5 + 112) = v15;
        *(_OWORD *)(a5 + 136) = *(_OWORD *)(a1 + 56);
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 64) = 0;
        double v16 = (unint64_t *)(a1 + 72);
      }
      *(void *)(a5 + 152) = *v16;
    }
    else if (a4 == 1)
    {
      sub_100033728((__n128 *)a5, (__n128 *)a1);
      long long v9 = *(_OWORD *)(a1 + 16);
      long long v10 = *(_OWORD *)(a1 + 32);
      *(_WORD *)(a5 + 48) = *(_WORD *)(a1 + 48);
      *(_OWORD *)(a5 + 16) = v9;
      *(_OWORD *)(a5 + 32) = v10;
      *(_OWORD *)(a5 + 56) = *(_OWORD *)(a1 + 56);
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      *(void *)(a5 + 72) = *(void *)(a1 + 72);
    }
    else if ((uint64_t)a4 > 8)
    {
      unint64_t v18 = a4 >> 1;
      uint64_t v19 = 80 * (a4 >> 1);
      sub_10024F264(a1, a1 + v19, a3, a4 >> 1, a5, a4 >> 1);
      sub_10024F264(a1 + v19, a2, a3, a4 - v18, a5 + v19, a4 - v18);
      sub_100250500(a1, a1 + v19, a1 + v19, (uint64_t)a2, a5);
    }
    else
    {
      sub_1002501F0((__n128 *)a1, a2, a5);
    }
  }
}

void sub_10024FA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10024FA2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  if ((void *)a1 == a2)
  {
LABEL_21:
    while (a3 != a4)
    {
      sub_100033728((__n128 *)v5, (__n128 *)a3);
      long long v30 = *(_OWORD *)(a3 + 16);
      long long v31 = *(_OWORD *)(a3 + 32);
      *((_WORD *)v5 + 24) = *(_WORD *)(a3 + 48);
      *((_OWORD *)v5 + 1) = v30;
      *((_OWORD *)v5 + 2) = v31;
      long long v32 = *(_OWORD *)(a3 + 56);
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      uint64_t v33 = (std::__shared_weak_count *)v5[8];
      *(_OWORD *)(v5 + 7) = v32;
      if (v33)
      {
        if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v5[9] = *(void *)(a3 + 72);
      a3 += 80;
      v5 += 10;
    }
  }
  else
  {
    uint64_t v9 = a1;
    long long v10 = a5 + 9;
    while (a3 != a4)
    {
      double v11 = sub_100273560(a3);
      double v12 = sub_100273560(v9);
      __n128 v13 = v10 - 7;
      long long v14 = (__n128 *)(v10 - 9);
      if (v11 >= v12)
      {
        sub_100033728(v14, (__n128 *)v9);
        long long v19 = *(_OWORD *)(v9 + 16);
        long long v20 = *(_OWORD *)(v9 + 32);
        *((_WORD *)v10 - 12) = *(_WORD *)(v9 + 48);
        *__n128 v13 = v19;
        *(_OWORD *)(v10 - 5) = v20;
        long long v21 = *(_OWORD *)(v9 + 56);
        *(void *)(v9 + 56) = 0;
        *(void *)(v9 + 64) = 0;
        __n128 v22 = (std::__shared_weak_count *)*(v10 - 1);
        *((_OWORD *)v10 - 1) = v21;
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        *long long v10 = *(void *)(v9 + 72);
        v10 += 10;
        v9 += 80;
        if ((void *)v9 == a2)
        {
LABEL_20:
          uint64_t v5 = v10 - 9;
          goto LABEL_21;
        }
      }
      else
      {
        sub_100033728(v14, (__n128 *)a3);
        long long v15 = *(_OWORD *)(a3 + 16);
        long long v16 = *(_OWORD *)(a3 + 32);
        *((_WORD *)v10 - 12) = *(_WORD *)(a3 + 48);
        *__n128 v13 = v15;
        *(_OWORD *)(v10 - 5) = v16;
        long long v17 = *(_OWORD *)(a3 + 56);
        *(void *)(a3 + 56) = 0;
        *(void *)(a3 + 64) = 0;
        unint64_t v18 = (std::__shared_weak_count *)*(v10 - 1);
        *((_OWORD *)v10 - 1) = v17;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
        *long long v10 = *(void *)(a3 + 72);
        v10 += 10;
        a3 += 80;
        if ((void *)v9 == a2) {
          goto LABEL_20;
        }
      }
    }
    if ((void *)v9 != a2)
    {
      unint64_t v23 = 0;
      do
      {
        long long v24 = (void *)(v9 + v23);
        long long v25 = &v10[v23 / 8];
        sub_100033728((__n128 *)&v10[v23 / 8 - 9], (__n128 *)(v9 + v23));
        long long v26 = *(_OWORD *)(v9 + v23 + 16);
        long long v27 = *(_OWORD *)(v9 + v23 + 32);
        *((_WORD *)v25 - 12) = *(_WORD *)(v9 + v23 + 48);
        *(_OWORD *)(v25 - 5) = v27;
        *(_OWORD *)(v25 - 7) = v26;
        long long v28 = *(_OWORD *)(v9 + v23 + 56);
        v24[7] = 0;
        v24[8] = 0;
        unint64_t v29 = (std::__shared_weak_count *)v10[v23 / 8 - 1];
        *((_OWORD *)v25 - 1) = v28;
        if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        v10[v23 / 8] = v24[9];
        v23 += 80;
      }
      while (v24 + 10 != a2);
    }
  }
}

uint64_t *sub_10024FD04(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::string::size_type v3 = (unint64_t *)a1[1];
    if (*v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = (std::__shared_weak_count **)(v2 + 64);
      do
      {
        uint64_t v6 = *v5;
        if (*v5 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        ++v4;
        v5 += 10;
      }
      while (v4 < *v3);
    }
  }
  return a1;
}

void sub_10024FDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v51 = a6;
  if (!a6) {
    return;
  }
  while (v51 > a8 && a5 > a8)
  {
    if (!a5) {
      return;
    }
    uint64_t v13 = 0;
    uint64_t v14 = -a5;
    while (1)
    {
      uint64_t v15 = a1 + v13;
      double v16 = sub_100273560(a2);
      if (v16 < sub_100273560(a1 + v13)) {
        break;
      }
      v13 += 80;
      if (__CFADD__(v14++, 1)) {
        return;
      }
    }
    uint64_t v18 = -v14;
    uint64_t v19 = v51;
    uint64_t v47 = a8;
    uint64_t v48 = a3;
    if (-v14 >= v51)
    {
      if (v14 == -1)
      {
        sub_10024F090(a1 + v13, a2);
        return;
      }
      if (v14 > 0) {
        uint64_t v18 = 1 - v14;
      }
      uint64_t v26 = v18 >> 1;
      uint64_t v23 = a1 + 80 * (v18 >> 1) + v13;
      uint64_t v33 = a3;
      uint64_t v22 = a2;
      if (a2 != v33)
      {
        uint64_t v44 = v26;
        unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((v48 - a2) >> 4);
        uint64_t v22 = a2;
        do
        {
          uint64_t v35 = v22 + 80 * (v34 >> 1);
          double v36 = sub_100273560(v35);
          double v37 = sub_100273560(v23);
          if (v36 >= v37) {
            v34 >>= 1;
          }
          else {
            v34 += ~(v34 >> 1);
          }
          if (v36 < v37) {
            uint64_t v22 = v35 + 80;
          }
        }
        while (v34);
        uint64_t v19 = v51;
        uint64_t v26 = v44;
      }
      uint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((v22 - a2) >> 4);
      if (v23 != a2)
      {
LABEL_22:
        if (v22 == a2)
        {
          uint64_t v27 = v23;
        }
        else
        {
          uint64_t v43 = v26;
          uint64_t v46 = v21;
          sub_10024F090(v23, a2);
          uint64_t v27 = v23 + 80;
          for (uint64_t i = a2 + 80; i != v22; i += 80)
          {
            if (v27 == a2) {
              a2 = i;
            }
            sub_10024F090(v27, i);
            v27 += 80;
          }
          if (v27 != a2)
          {
            uint64_t v29 = v27;
            uint64_t v30 = a2;
            while (1)
            {
              sub_10024F090(v29, v30);
              v30 += 80;
              BOOL v31 = v29 + 80 == a2;
              if (v30 == v22)
              {
                if (v29 + 80 == a2) {
                  break;
                }
                uint64_t v30 = a2 + 80;
                v29 += 160;
                while (1)
                {
                  sub_10024F090(v29 - 80, a2);
                  BOOL v31 = v29 == a2;
                  if (v30 != v22) {
                    break;
                  }
                  BOOL v32 = v29 == a2;
                  v29 += 80;
                  if (v32) {
                    goto LABEL_39;
                  }
                }
              }
              else
              {
                v29 += 80;
              }
              if (v31) {
                a2 = v30;
              }
            }
          }
LABEL_39:
          uint64_t v19 = v51;
          uint64_t v26 = v43;
          uint64_t v21 = v46;
        }
        goto LABEL_55;
      }
    }
    else
    {
      if (v51 >= 0) {
        uint64_t v20 = v51;
      }
      else {
        uint64_t v20 = v51 + 1;
      }
      uint64_t v21 = v20 >> 1;
      uint64_t v22 = a2 + 80 * (v20 >> 1);
      uint64_t v23 = a2;
      if (a2 - a1 != v13)
      {
        uint64_t v45 = v20 >> 1;
        unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1 - v13) >> 4);
        uint64_t v23 = a1 + v13;
        do
        {
          double v25 = sub_100273560(v22);
          if (v25 < sub_100273560(v23 + 80 * (v24 >> 1)))
          {
            v24 >>= 1;
          }
          else
          {
            v23 += 80 * (v24 >> 1) + 80;
            v24 += ~(v24 >> 1);
          }
        }
        while (v24);
        uint64_t v19 = v51;
        uint64_t v21 = v45;
      }
      uint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - a1 - v13) >> 4);
      if (v23 != a2) {
        goto LABEL_22;
      }
    }
    uint64_t v27 = v22;
LABEL_55:
    a5 = -v26 - v14;
    uint64_t v38 = v19 - v21;
    if (v26 + v21 >= v19 - (v26 + v21) - v14)
    {
      uint64_t v40 = v26;
      uint64_t v41 = -v26 - v14;
      uint64_t v42 = v21;
      sub_10024FDBC(v27, v22, v48, a4, v41, v19 - v21, a7, v47);
      a2 = v23;
      a8 = v47;
      a5 = v40;
      a3 = v27;
      uint64_t v51 = v42;
      a1 = v15;
      if (!v42) {
        return;
      }
    }
    else
    {
      uint64_t v39 = v23;
      a8 = v47;
      sub_10024FDBC(a1 + v13, v39, v27, a4, v26, v21, a7, v47);
      a2 = v22;
      a3 = v48;
      uint64_t v51 = v38;
      a1 = v27;
      if (!v38) {
        return;
      }
    }
  }

  sub_10025071C(a1, a2, a3, a4, a5, v51, a7);
}

void sub_1002501F0(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    sub_100033728((__n128 *)a3, a1);
    __n128 v6 = v5[1];
    __n128 v7 = v5[2];
    *(_WORD *)(a3 + 48) = v5[3].n128_u16[0];
    *(__n128 *)(a3 + 16) = v6;
    *(__n128 *)(a3 + 32) = v7;
    *(__n128 *)(a3 + 56) = *(__n128 *)((char *)v5 + 56);
    v5[3].n128_u64[1] = 0;
    v5[4].n128_u64[0] = 0;
    *(void *)(a3 + 72) = v5[4].n128_u64[1];
    uint64_t v28 = 1;
    uint64_t v8 = (uint64_t)&v5[5];
    if (&v5[5] != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = a3;
      do
      {
        while (1)
        {
          double v11 = (__n128 *)v8;
          double v12 = sub_100273560(v8);
          uint64_t v13 = v10 + 80;
          if (v12 < sub_100273560(v10)) {
            break;
          }
          sub_100033728((__n128 *)(v10 + 80), v11);
          __n128 v22 = v5[6];
          __n128 v23 = v5[7];
          *(_WORD *)(v10 + 128) = v5[8].n128_u16[0];
          *(__n128 *)(v10 + 96) = v22;
          *(__n128 *)(v10 + 112) = v23;
          *(__n128 *)(v10 + 136) = *(__n128 *)((char *)v5 + 136);
          v5[8].n128_u64[1] = 0;
          v5[9].n128_u64[0] = 0;
          *(void *)(v10 + 152) = v5[9].n128_u64[1];
          ++v28;
          uint64_t v8 = (uint64_t)&v11[5];
          v9 += 80;
          v10 += 80;
          uint64_t v5 = v11;
          if (&v11[5] == a2) {
            return;
          }
        }
        sub_100033728((__n128 *)(v10 + 80), (__n128 *)v10);
        long long v14 = *(_OWORD *)(v10 + 32);
        *(_OWORD *)(v10 + 96) = *(_OWORD *)(v10 + 16);
        *(_OWORD *)(v10 + 112) = v14;
        *(_WORD *)(v10 + 128) = *(_WORD *)(v10 + 48);
        *(_OWORD *)(v10 + 136) = *(_OWORD *)(v10 + 56);
        *(void *)(v10 + 152) = *(void *)(v10 + 72);
        ++v28;
        uint64_t v15 = a3;
        *(void *)(v10 + 56) = 0;
        *(void *)(v10 + 64) = 0;
        if (v10 != a3)
        {
          uint64_t v16 = v9;
          do
          {
            double v17 = sub_100273560((uint64_t)v11);
            if (v17 >= sub_100273560(a3 + v16 - 80))
            {
              uint64_t v15 = a3 + v16;
              goto LABEL_17;
            }
            sub_100033728((__n128 *)(a3 + v16), (__n128 *)(a3 + v16 - 80));
            uint64_t v18 = a3 + v16;
            long long v19 = *(_OWORD *)(a3 + v16 - 48);
            *(_OWORD *)(v18 + 16) = *(_OWORD *)(a3 + v16 - 64);
            *(_OWORD *)(v18 + 32) = v19;
            *(_WORD *)(v18 + 48) = *(_WORD *)(a3 + v16 - 32);
            long long v20 = *(_OWORD *)(a3 + v16 - 24);
            *(void *)(v18 - 24) = 0;
            *(void *)(v18 - 16) = 0;
            uint64_t v21 = *(std::__shared_weak_count **)(a3 + v16 + 64);
            *(_OWORD *)(v18 + 56) = v20;
            if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
            *(void *)(v18 + 72) = *(void *)(v18 - 8);
            v16 -= 80;
          }
          while (v16);
          uint64_t v15 = a3;
        }
LABEL_17:
        sub_100033728((__n128 *)v15, v11);
        __n128 v24 = v5[6];
        __n128 v25 = v5[7];
        *(_WORD *)(v15 + 48) = v5[8].n128_u16[0];
        *(__n128 *)(v15 + 16) = v24;
        *(__n128 *)(v15 + 32) = v25;
        long long v26 = *(long long *)((char *)&v5[8] + 8);
        v5[8].n128_u64[1] = 0;
        v5[9].n128_u64[0] = 0;
        uint64_t v27 = *(std::__shared_weak_count **)(v15 + 64);
        *(_OWORD *)(v15 + 56) = v26;
        if (v27)
        {
          if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        *(void *)(v15 + 72) = v5[9].n128_u64[1];
        uint64_t v8 = (uint64_t)&v11[5];
        v9 += 80;
        uint64_t v10 = v13;
        uint64_t v5 = v11;
      }
      while (&v11[5] != a2);
    }
  }
}

void sub_1002504C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002504D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002504EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100250500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = 0;
  if (a1 == a2)
  {
LABEL_7:
    if (a3 != a4)
    {
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = a3 + v15;
        sub_100033728((__n128 *)(a5 + v15), (__n128 *)(a3 + v15));
        long long v17 = *(_OWORD *)(a3 + v15 + 16);
        long long v18 = *(_OWORD *)(a3 + v15 + 32);
        *(_WORD *)(v19 + 48) = *(_WORD *)(a3 + v15 + 48);
        *(_OWORD *)(v19 + 16) = v17;
        *(_OWORD *)(v19 + 32) = v18;
        *(_OWORD *)(v19 + 56) = *(_OWORD *)(a3 + v15 + 56);
        *(void *)(v16 + 56) = 0;
        *(void *)(v16 + 64) = 0;
        *(void *)(v19 + 72) = *(void *)(a3 + v15 + 72);
        ++v25;
        v15 += 80;
      }
      while (a3 + v15 != a4);
    }
  }
  else
  {
    uint64_t v9 = a1;
    while (a3 != a4)
    {
      double v12 = sub_100273560(a3);
      if (v12 >= sub_100273560(v9))
      {
        sub_100033728((__n128 *)a5, (__n128 *)v9);
        long long v10 = *(_OWORD *)(v9 + 16);
        long long v11 = *(_OWORD *)(v9 + 32);
        *(_WORD *)(a5 + 48) = *(_WORD *)(v9 + 48);
        *(_OWORD *)(a5 + 16) = v10;
        *(_OWORD *)(a5 + 32) = v11;
        *(_OWORD *)(a5 + 56) = *(_OWORD *)(v9 + 56);
        *(void *)(v9 + 56) = 0;
        *(void *)(v9 + 64) = 0;
        *(void *)(a5 + 72) = *(void *)(v9 + 72);
        ++v25;
        v9 += 80;
        a5 += 80;
        if (v9 == a2) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_100033728((__n128 *)a5, (__n128 *)a3);
        long long v13 = *(_OWORD *)(a3 + 16);
        long long v14 = *(_OWORD *)(a3 + 32);
        *(_WORD *)(a5 + 48) = *(_WORD *)(a3 + 48);
        *(_OWORD *)(a5 + 16) = v13;
        *(_OWORD *)(a5 + 32) = v14;
        *(_OWORD *)(a5 + 56) = *(_OWORD *)(a3 + 56);
        *(void *)(a3 + 56) = 0;
        *(void *)(a3 + 64) = 0;
        *(void *)(a5 + 72) = *(void *)(a3 + 72);
        ++v25;
        a3 += 80;
        a5 += 80;
        if (v9 == a2) {
          goto LABEL_7;
        }
      }
    }
    if (v9 != a2)
    {
      uint64_t v20 = 0;
      do
      {
        uint64_t v21 = v9 + v20;
        sub_100033728((__n128 *)(a5 + v20), (__n128 *)(v9 + v20));
        long long v22 = *(_OWORD *)(v9 + v20 + 16);
        long long v23 = *(_OWORD *)(v9 + v20 + 32);
        *(_WORD *)(v24 + 48) = *(_WORD *)(v9 + v20 + 48);
        *(_OWORD *)(v24 + 16) = v22;
        *(_OWORD *)(v24 + 32) = v23;
        *(_OWORD *)(v24 + 56) = *(_OWORD *)(v9 + v20 + 56);
        *(void *)(v21 + 56) = 0;
        *(void *)(v21 + 64) = 0;
        *(void *)(v24 + 72) = *(void *)(v9 + v20 + 72);
        ++v25;
        v20 += 80;
      }
      while (v9 + v20 != a2);
    }
  }
}

void sub_1002506E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002506F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100250708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10025071C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v7 = (uint64_t)a7;
  unint64_t v27 = 0;
  if (a5 > a6)
  {
    uint64_t v11 = (uint64_t)a7;
    if (a2 != a3)
    {
      uint64_t v12 = 0;
      do
      {
        uint64_t v13 = a2 + v12;
        sub_100033728((__n128 *)(v7 + v12), (__n128 *)(a2 + v12));
        long long v14 = *(_OWORD *)(a2 + v12 + 16);
        long long v15 = *(_OWORD *)(a2 + v12 + 32);
        *(_WORD *)(v16 + 48) = *(_WORD *)(a2 + v12 + 48);
        *(_OWORD *)(v16 + 16) = v14;
        *(_OWORD *)(v16 + 32) = v15;
        *(_OWORD *)(v16 + 56) = *(_OWORD *)(a2 + v12 + 56);
        *(void *)(v13 + 56) = 0;
        *(void *)(v13 + 64) = 0;
        *(void *)(v16 + 72) = *(void *)(a2 + v12 + 72);
        ++v27;
        v12 += 80;
      }
      while (a2 + v12 != a3);
      uint64_t v11 = v7 + v12;
    }
    sub_100250BA4(v11, v11, v7, v7, a2, a2, a1, a1, a3, a3);
    if (!v7) {
      return;
    }
LABEL_13:
    if (v27)
    {
      unint64_t v23 = 0;
      uint64_t v24 = (std::__shared_weak_count **)(v7 + 64);
      do
      {
        uint64_t v25 = *v24;
        if (*v24)
        {
          if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        ++v23;
        v24 += 10;
      }
      while (v23 < v27);
    }
    return;
  }
  long long v17 = a7;
  if (a1 != a2)
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = a1 + v18;
      sub_100033728((__n128 *)(v7 + v18), (__n128 *)(a1 + v18));
      long long v20 = *(_OWORD *)(a1 + v18 + 16);
      long long v21 = *(_OWORD *)(a1 + v18 + 32);
      *(_WORD *)(v22 + 48) = *(_WORD *)(a1 + v18 + 48);
      *(_OWORD *)(v22 + 16) = v20;
      *(_OWORD *)(v22 + 32) = v21;
      *(_OWORD *)(v22 + 56) = *(_OWORD *)(a1 + v18 + 56);
      *(void *)(v19 + 56) = 0;
      *(void *)(v19 + 64) = 0;
      *(void *)(v22 + 72) = *(void *)(a1 + v18 + 72);
      ++v27;
      v18 += 80;
    }
    while (a1 + v18 != a2);
    long long v17 = (void *)(v7 + v18);
  }
  sub_100250970(v7, v17, a2, a3, a1);
  uint64_t v7 = (uint64_t)a7;
  if (a7) {
    goto LABEL_13;
  }
}

void sub_100250920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100250934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100250948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10025095C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10024FD04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100250970(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((void *)a1 != a2)
  {
    uint64_t v8 = a1;
    uint64_t v9 = (void *)(a5 + 72);
    while (a3 != a4)
    {
      double v10 = sub_100273560(a3);
      double v11 = sub_100273560(v8);
      uint64_t v12 = v9 - 7;
      uint64_t v13 = (__n128 *)(v9 - 9);
      if (v10 >= v11)
      {
        sub_100033728(v13, (__n128 *)v8);
        long long v18 = *(_OWORD *)(v8 + 16);
        long long v19 = *(_OWORD *)(v8 + 32);
        *((_WORD *)v9 - 12) = *(_WORD *)(v8 + 48);
        *uint64_t v12 = v18;
        *(_OWORD *)(v9 - 5) = v19;
        long long v20 = *(_OWORD *)(v8 + 56);
        *(void *)(v8 + 56) = 0;
        *(void *)(v8 + 64) = 0;
        long long v21 = (std::__shared_weak_count *)*(v9 - 1);
        *((_OWORD *)v9 - 1) = v20;
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        *uint64_t v9 = *(void *)(v8 + 72);
        v9 += 10;
        v8 += 80;
        if ((void *)v8 == a2) {
          return;
        }
      }
      else
      {
        sub_100033728(v13, (__n128 *)a3);
        long long v14 = *(_OWORD *)(a3 + 16);
        long long v15 = *(_OWORD *)(a3 + 32);
        *((_WORD *)v9 - 12) = *(_WORD *)(a3 + 48);
        *uint64_t v12 = v14;
        *(_OWORD *)(v9 - 5) = v15;
        long long v16 = *(_OWORD *)(a3 + 56);
        *(void *)(a3 + 56) = 0;
        *(void *)(a3 + 64) = 0;
        long long v17 = (std::__shared_weak_count *)*(v9 - 1);
        *((_OWORD *)v9 - 1) = v16;
        if (v17)
        {
          if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        *uint64_t v9 = *(void *)(a3 + 72);
        v9 += 10;
        a3 += 80;
        if ((void *)v8 == a2) {
          return;
        }
      }
    }
    unint64_t v22 = 0;
    do
    {
      unint64_t v23 = &v9[v22 / 8];
      uint64_t v24 = (void *)(v8 + v22);
      sub_100033728((__n128 *)&v9[v22 / 8 - 9], (__n128 *)(v8 + v22));
      long long v25 = *(_OWORD *)(v8 + v22 + 16);
      long long v26 = *(_OWORD *)(v8 + v22 + 32);
      *((_WORD *)v23 - 12) = *(_WORD *)(v8 + v22 + 48);
      *(_OWORD *)(v23 - 5) = v26;
      *(_OWORD *)(v23 - 7) = v25;
      long long v27 = *(_OWORD *)(v8 + v22 + 56);
      v24[7] = 0;
      v24[8] = 0;
      uint64_t v28 = (std::__shared_weak_count *)v9[v22 / 8 - 1];
      *((_OWORD *)v23 - 1) = v27;
      if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      v9[v22 / 8] = v24[9];
      v22 += 80;
    }
    while (v24 + 10 != a2);
  }
}

void sub_100250BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 == a4) {
    return;
  }
  uint64_t v13 = a2;
  uint64_t v14 = a10 - 80;
  while (a6 != a8)
  {
    uint64_t v16 = v13 - 80;
    double v17 = sub_100273560(v13 - 80);
    long long v18 = (_OWORD *)(v14 + 16);
    if (v17 >= sub_100273560(a6 - 80))
    {
      sub_100033728((__n128 *)v14, (__n128 *)(v13 - 80));
      long long v23 = *(_OWORD *)(v13 - 64);
      long long v24 = *(_OWORD *)(v13 - 48);
      *(_WORD *)(v14 + 48) = *(_WORD *)(v13 - 32);
      *long long v18 = v23;
      *(_OWORD *)(v14 + 32) = v24;
      long long v25 = *(_OWORD *)(v13 - 24);
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      unint64_t v22 = *(std::__shared_weak_count **)(v14 + 64);
      *(_OWORD *)(v14 + 56) = v25;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v15 = v13;
        goto LABEL_14;
      }
      uint64_t v15 = v13;
    }
    else
    {
      sub_100033728((__n128 *)v14, (__n128 *)(a6 - 80));
      long long v19 = *(_OWORD *)(a6 - 64);
      long long v20 = *(_OWORD *)(a6 - 48);
      *(_WORD *)(v14 + 48) = *(_WORD *)(a6 - 32);
      *long long v18 = v19;
      *(_OWORD *)(v14 + 32) = v20;
      long long v21 = *(_OWORD *)(a6 - 24);
      *(void *)(a6 - 24) = 0;
      *(void *)(a6 - 16) = 0;
      unint64_t v22 = *(std::__shared_weak_count **)(v14 + 64);
      *(_OWORD *)(v14 + 56) = v21;
      if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        uint64_t v15 = a6;
        a6 -= 80;
        uint64_t v16 = v13;
LABEL_14:
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
        goto LABEL_4;
      }
      uint64_t v15 = a6;
      a6 -= 80;
      uint64_t v16 = v13;
    }
LABEL_4:
    *(void *)(v14 + 72) = *(void *)(v15 - 8);
    v14 -= 80;
    uint64_t v13 = v16;
    if (v16 == a4) {
      return;
    }
  }
  uint64_t v26 = 0;
  do
  {
    uint64_t v27 = v13 + v26;
    uint64_t v28 = v14 + v26;
    sub_100033728((__n128 *)(v14 + v26), (__n128 *)(v13 + v26 - 80));
    long long v29 = *(_OWORD *)(v13 + v26 - 64);
    long long v30 = *(_OWORD *)(v13 + v26 - 48);
    *(_WORD *)(v28 + 48) = *(_WORD *)(v13 + v26 - 32);
    *(_OWORD *)(v28 + 16) = v29;
    *(_OWORD *)(v28 + 32) = v30;
    long long v31 = *(_OWORD *)(v13 + v26 - 24);
    *(void *)(v27 - 24) = 0;
    *(void *)(v27 - 16) = 0;
    BOOL v32 = *(std::__shared_weak_count **)(v14 + v26 + 64);
    *(_OWORD *)(v28 + 56) = v31;
    if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    *(void *)(v28 + 72) = *(void *)(v27 - 8);
    v26 -= 80;
  }
  while (v13 + v26 != a4);
}

void sub_100250DC8()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100250E40()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_100250EB8(uint64_t a1, uint64_t a2)
{
  memset(v3, 0, sizeof(v3));
  __src[2] = 1;
  __src[0] = 10;
  std::__sort<std::__less<char,char> &,char *>();
  sub_100251248((uint64_t)v3, a2 + 32, __src, 0);
}

void sub_1002511B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  if (a21 >= 0x11)
  {
    if (a19) {
      operator delete[]();
    }
  }
  sub_1000E0AA4(&a16);
  _Unwind_Resume(a1);
}

void sub_100251248(uint64_t a1, uint64_t a2, void *__src, int a4)
{
  size_t v7 = __src[2];
  size_t __n = v7;
  __srca[0] = 0;
  if (v7 < 0x11)
  {
    memcpy(__srca, __src, v7);
    size_t v13 = __n;
    v12[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v12, __srca, __n);
      __dst[2] = v13;
      __dst[0] = 0;
      if (v13 <= 0x10)
      {
        memcpy(__dst, v12, v13);
        int v11 = a4;
        sub_100251E20(a1, a2, (uint64_t)__dst);
      }
      operator new[]();
    }
    operator new[]();
  }
  operator new[]();
}

void sub_100251424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17) {
    operator delete[]();
  }
  if (v17 >= 0x11)
  {
    if (a10) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100251494()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  *(_OWORD *)long long v30 = 0u;
  long long v31 = 0u;
  float v32 = 1.0;
  float v6 = (float)(unint64_t)(((char *)v1[1] - (char *)*v1) >> 4);
  size_t prime = (unint64_t)v6;
  if ((unint64_t)v6 == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C((uint64_t)v30, prime);
    goto LABEL_18;
  }
  if ((prime & ((unint64_t)v6 - 1)) != 0)
  {
    size_t prime = std::__next_prime((unint64_t)v6);
    uint64_t v8 = v30[1];
    BOOL v9 = (void *)prime >= v30[1];
    if ((void *)prime > v30[1]) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v8 = 0;
    BOOL v9 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v9)
  {
    unint64_t v10 = vcvtps_u32_f32((float)*((unint64_t *)&v31 + 1) / v32);
    if ((unint64_t)v8 < 3
      || (uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v11.i16[0] = vaddlv_u8(v11), v11.u32[0] > 1uLL))
    {
      unint64_t v10 = std::__next_prime(v10);
    }
    else
    {
      uint64_t v12 = 1 << -(char)__clz(v10 - 1);
      if (v10 >= 2) {
        unint64_t v10 = v12;
      }
    }
    if (prime <= v10) {
      size_t prime = v10;
    }
    if (prime < (unint64_t)v8) {
      goto LABEL_17;
    }
  }
LABEL_18:
  size_t v13 = *v2;
  uint64_t v14 = v2[1];
  if (*v2 != v14)
  {
    do
    {
      while (1)
      {
        sub_100074A28(v13, (uint64_t)v39);
        if (SHIBYTE(v41) < 0)
        {
          sub_1000559FC(__p, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          *(_OWORD *)std::string __p = __src;
          uint64_t v34 = v41;
        }
        sub_1000776C4(v35, v39);
        sub_100074A24(v39);
        sub_100085B24(&v36, (uint64_t)__p);
        sub_1000776C4(v38, v35);
        sub_100251A7C((uint64_t)v30, &v36, &v36);
        sub_100074A24(v38);
        uint64_t v15 = v37;
        if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        sub_100074A24(v35);
        if (SHIBYTE(v34) < 0) {
          break;
        }
        v13 += 2;
        if (v13 == v14) {
          goto LABEL_29;
        }
      }
      operator delete(__p[0]);
      v13 += 2;
    }
    while (v13 != v14);
  }
LABEL_29:
  uint64_t v16 = v30[0];
  unint64_t v17 = (unint64_t)v30[1];
  v30[0] = 0;
  v30[1] = 0;
  v27[0] = v16;
  v27[1] = (void *)v17;
  long long v28 = v31;
  float v29 = v32;
  if (*((void *)&v31 + 1))
  {
    unint64_t v18 = *(void *)(v31 + 8);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v18 >= v17) {
        v18 %= v17;
      }
    }
    else
    {
      v18 &= v17 - 1;
    }
    *((void *)v16 + v18) = &v28;
    long long v31 = 0uLL;
  }
  sub_100026854(v5, v4, (uint64_t *)v27);
  long long v19 = (void *)v28;
  while (v19)
  {
    long long v20 = v19;
    long long v19 = (void *)*v19;
    sub_100074A24(v20 + 4);
    long long v21 = (std::__shared_weak_count *)v20[3];
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    operator delete(v20);
  }
  unint64_t v22 = v27[0];
  v27[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  long long v23 = (void *)v31;
  while (v23)
  {
    long long v24 = v23;
    long long v23 = (void *)*v23;
    sub_100074A24(v24 + 4);
    long long v25 = (std::__shared_weak_count *)v24[3];
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    operator delete(v24);
  }
  uint64_t v26 = v30[0];
  v30[0] = 0;
  if (v26) {
    operator delete(v26);
  }
}

void sub_100251874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_1001F53E0((uint64_t)va);
  sub_1001F53E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100251890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001F53E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002518A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100074A24(&STACK[0xF90]);
  sub_1001F53E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1001F53E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10025193C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 40) != *(void *)(a1 + 40)) {
    return 0;
  }
  uint64_t v2 = *(uint64_t ****)(a1 + 32);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = (void *)(a2 + 16);
  while (1)
  {
    uint64_t v4 = sub_10006F50C(v3, v2 + 2);
    BOOL result = v4 != 0;
    if (!v4) {
      break;
    }
    uint64_t v2 = (uint64_t ***)*v2;
    if (!v2) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1002519AC(uint64_t a1)
{
  sub_100074A24(a1 + 16);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_100251A30(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void ***sub_100251A7C(uint64_t a1, uint64_t ***a2, void *a3)
{
  unint64_t v7 = sub_100077F68((uint64_t)v32, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint8x8_t v11 = *(const void *****)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v12[1];
            if (v14 == (const void **)v8)
            {
              if (sub_1000706F4(v12 + 2, (unsigned __int8 ***)a2)) {
                return v12;
              }
            }
            else if (((unint64_t)v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v12 = (const void ***)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = (unint64_t)v12[1];
          if (v13 == v8)
          {
            if (sub_1000706F4(v12 + 2, (unsigned __int8 ***)a2)) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (const void ***)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x7A0uLL);
  v32[0] = v15;
  v32[1] = a1 + 16;
  char v33 = 0;
  *uint64_t v15 = 0;
  v15[1] = v8;
  uint64_t v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000776C4(v15 + 4, a3 + 2);
  char v33 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v29 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        long long v19 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        long long v20 = (void *)v32[0];
        if (v19) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v3 = v8;
        long long v19 = *(void **)(*(void *)a1 + 8 * v8);
        long long v20 = (void *)v32[0];
        if (v19) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v8;
      long long v19 = *(void **)(*(void *)a1 + 8 * (v29 & v8));
      long long v20 = (void *)v32[0];
      if (v19) {
        goto LABEL_28;
      }
    }
LABEL_52:
    *long long v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v32[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v32[0])
    {
      unint64_t v30 = *(void *)(*(void *)v32[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v30 >= v9) {
          v30 %= v9;
        }
      }
      else
      {
        v30 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v32[0];
    }
    goto LABEL_63;
  }
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  long long v20 = (void *)v32[0];
  if (!v19) {
    goto LABEL_52;
  }
LABEL_28:
  *long long v20 = *v19;
  *long long v19 = v32[0];
LABEL_63:
  uint64_t v12 = (const void ***)v32[0];
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_100251DEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F555C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4) {
    sub_1003A60B0(v4);
  }
  sub_1001F555C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100251E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(char *)(a2 + 23);
  BOOL v5 = v4 < 0;
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(void *)a2;
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if (v5) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  uint64_t v8 = v6 + v7;
  size_t v9 = *(void *)(a3 + 16);
  _DWORD v11[2] = v9;
  v11[0] = 0;
  if (v9 < 0x11)
  {
    memcpy(v11, (const void *)a3, v9);
    int v12 = *(_DWORD *)(a3 + 24);
    sub_10025233C(v10, v6, v8, (uint64_t)v11);
  }
  operator new[]();
}

void sub_1002521EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2) {
    sub_1000A6954(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100252294(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      unint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_1002522E8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      unint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void sub_10025233C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v6 = *(void *)(a4 + 16);
  void v7[2] = v6;
  v7[0] = 0;
  if (v6 < 0x11)
  {
    memcpy(v7, (const void *)a4, v6);
    int v8 = *(_DWORD *)(a4 + 24);
    sub_100252504(a1, (uint64_t)v7);
  }
  operator new[]();
}

void sub_1002524B4(_Unwind_Exception *a1)
{
  sub_1002526B8(v1);
  _Unwind_Resume(a1);
}

void sub_1002524C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a12 >= 0x11)
  {
    if (a10) {
      operator delete[]();
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100252504(void *a1, uint64_t a2)
{
  size_t v4 = *(void *)(a2 + 16);
  size_t __n = v4;
  __src[0] = 0;
  if (v4 < 0x11)
  {
    memcpy(__src, (const void *)a2, v4);
    int v5 = *(_DWORD *)(a2 + 24);
    int v8 = v5;
    *a1 = 0;
    v9[2] = __n;
    v9[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v9, __src, __n);
      int v10 = v5;
      sub_10025270C((uint64_t)a1, (uint64_t)v9);
    }
    operator new[]();
  }
  operator new[]();
}

void sub_100252660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a10) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1002526B8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      unint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void sub_10025270C(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 16);
  size_t __n = v3;
  __src[0] = 0;
  if (v3 < 0x11)
  {
    memcpy(__src, (const void *)a2, v3);
    int v4 = *(_DWORD *)(a2 + 24);
    int v7 = v4;
    v8[2] = __n;
    v8[0] = 0;
    if (__n < 0x11)
    {
      memcpy(v8, __src, __n);
      int v9 = v4;
      sub_100252DB8((uint64_t)off_100462AB8, (uint64_t)v8);
    }
    operator new[]();
  }
  operator new[]();
}

void sub_100252880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a10) {
    operator delete[]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002528D8(uint64_t result, _WORD *a2, int a3)
{
  if (a3 != 4) {
    return sub_100252900(result, a2, a3);
  }
  a2[4] = 0;
  return result;
}

char *sub_1002528F8(void **a1, char *a2, char *a3)
{
  return sub_100252AEC(*a1, a2, a3);
}

uint64_t sub_100252900(uint64_t result, _WORD *a2, int a3)
{
  int v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)BOOL result = 0;
      break;
    case 2:
      int v5 = *(void **)a2;
      if (*(void *)a2)
      {
        if (v5[2] >= 0x11uLL)
        {
          if (*v5) {
            operator delete[]();
          }
        }
        operator delete();
      }
      *(void *)a2 = 0;
      break;
    case 3:
      BOOL result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N5boost9algorithm6detail13token_finderFINS1_10is_any_ofFIcEEEE" & 0x7FFFFFFFFFFFFFFFLL)
        || (BOOL result = strcmp((const char *)result, (const char *)((unint64_t)"N5boost9algorithm6detail13token_finderFINS1_10is_any_ofFIcEEEE" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_100252AB8()
{
}

char *sub_100252AEC(void *__src, char *a2, char *a3)
{
  size_t v6 = __src[2];
  unint64_t v40 = v6;
  v39[0] = 0;
  if (v6 >= 0x11) {
    operator new[]();
  }
  memcpy(v39, __src, v6);
  if (a2 == a3)
  {
LABEL_28:
    a2 = a3;
    if (v40 < 0x11) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }
  if (v40 > 0x10)
  {
    while (1)
    {
      int v14 = *a2;
      uint64_t v15 = (char *)v39[0];
      unint64_t v16 = v40;
      do
      {
        unint64_t v17 = v16 >> 1;
        float v18 = &v15[v16 >> 1];
        int v20 = *v18;
        long long v19 = v18 + 1;
        v16 += ~(v16 >> 1);
        if (v20 < v14) {
          uint64_t v15 = v19;
        }
        else {
          unint64_t v16 = v17;
        }
      }
      while (v16);
      if (v15 != (char *)(v39[0] + v40) && *v15 <= v14) {
        break;
      }
      if (++a2 == a3) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (!v40) {
      return a3;
    }
    while (1)
    {
      int v7 = *a2;
      int v8 = v39;
      unint64_t v9 = v40;
      do
      {
        unint64_t v10 = v9 >> 1;
        uint8x8_t v11 = (char *)v8 + (v9 >> 1);
        int v13 = *v11;
        int v12 = v11 + 1;
        v9 += ~(v9 >> 1);
        if (v13 < v7) {
          int v8 = v12;
        }
        else {
          unint64_t v9 = v10;
        }
      }
      while (v9);
      if (v8 != (void *)((char *)v39 + v40) && *(char *)v8 <= v7) {
        break;
      }
      if (++a2 == a3) {
        goto LABEL_28;
      }
    }
  }
  if (v40 >= 0x11)
  {
LABEL_29:
    if (v39[0]) {
      operator delete[]();
    }
  }
LABEL_31:
  if (a2 == a3) {
    return a3;
  }
  if (!*((_DWORD *)__src + 6))
  {
    unint64_t v21 = __src[2];
    if (v21 > 0x10)
    {
      long long v31 = a2;
      do
      {
        int v32 = *v31;
        char v33 = (char *)*__src;
        unint64_t v34 = __src[2];
        do
        {
          unint64_t v35 = v34 >> 1;
          double v36 = &v33[v34 >> 1];
          int v38 = *v36;
          double v37 = v36 + 1;
          v34 += ~(v34 >> 1);
          if (v38 < v32) {
            char v33 = v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
        if (v33 == (char *)(*__src + v21)) {
          break;
        }
        if (*v33 > v32) {
          break;
        }
        ++v31;
      }
      while (v31 != a3);
    }
    else if (v21)
    {
      unint64_t v22 = a2;
      do
      {
        int v23 = *v22;
        long long v24 = (char *)__src;
        unint64_t v25 = __src[2];
        do
        {
          unint64_t v26 = v25 >> 1;
          uint8x8_t v27 = &v24[v25 >> 1];
          int v29 = *v27;
          uint64_t v28 = v27 + 1;
          v25 += ~(v25 >> 1);
          if (v29 < v23) {
            long long v24 = v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
        if (v24 == (char *)__src + v21) {
          break;
        }
        if (*v24 > v23) {
          break;
        }
        ++v22;
      }
      while (v22 != a3);
    }
  }
  return a2;
}

void sub_100252DB8(uint64_t a1, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 16);
  __src[2] = v3;
  __src[0] = 0;
  if (v3 < 0x11)
  {
    memcpy(__src, (const void *)a2, v3);
    int v5 = *(_DWORD *)(a2 + 24);
    operator new();
  }
  operator new[]();
}

void sub_100252F04()
{
}

void *sub_100252F58(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v19 = 0;
  uint64_t v6 = *(void *)a2;
  if (*(void *)a2)
  {
    uint64_t v19 = *(void *)a2;
    if (v6)
    {
      long long v20 = *(_OWORD *)(a2 + 8);
      uint64_t v21 = *(void *)(a2 + 24);
    }
    else
    {
      (*(void (**)(uint64_t, long long *, void))(v6 & 0xFFFFFFFFFFFFFFFELL))(a2 + 8, &v20, 0);
    }
  }
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v22 = *(_OWORD *)(a2 + 32);
  long long v23 = v7;
  char v24 = *(unsigned char *)(a2 + 64);
  uint64_t v13 = 0;
  uint64_t v8 = *a3;
  if (*a3)
  {
    uint64_t v13 = *a3;
    if (v8)
    {
      long long v14 = *(_OWORD *)(a3 + 1);
      uint64_t v15 = a3[3];
    }
    else
    {
      (*(void (**)(uint64_t *, long long *, void))(v8 & 0xFFFFFFFFFFFFFFFELL))(a3 + 1, &v14, 0);
    }
  }
  long long v9 = *((_OWORD *)a3 + 3);
  long long v16 = *((_OWORD *)a3 + 2);
  long long v17 = v9;
  char v18 = *((unsigned char *)a3 + 64);
  sub_1002530E8((uint64_t)a1, &v19, (uint64_t)&v13);
  if (v13)
  {
    if ((v13 & 1) == 0)
    {
      unint64_t v10 = *(void (**)(long long *, long long *, uint64_t))(v13 & 0xFFFFFFFFFFFFFFFELL);
      if (v10) {
        v10(&v14, &v14, 2);
      }
    }
    uint64_t v13 = 0;
  }
  if (v19)
  {
    if ((v19 & 1) == 0)
    {
      uint8x8_t v11 = *(void (**)(long long *, long long *, uint64_t))(v19 & 0xFFFFFFFFFFFFFFFELL);
      if (v11) {
        v11(&v20, &v20, 2);
      }
    }
  }
  return a1;
}

void sub_1002530B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1002522E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1002530CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

uint64_t sub_1002530E8(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v34 = result;
  char v35 = 0;
  uint64_t v6 = a2 + 1;
  while (1)
  {
    BOOL v7 = *a2 && *((unsigned char *)a2 + 64) == 0;
    int v8 = !v7;
    if (*(void *)a3) {
      break;
    }
    if (v8) {
      return result;
    }
LABEL_19:
    uint64_t v13 = a2[4];
    int v12 = (char *)a2[5];
    unint64_t v14 = (unint64_t)&v12[-v13];
    if ((unint64_t)&v12[-v13] >= 0x7FFFFFFFFFFFFFF8) {
      sub_1000A6968();
    }
    if (v14 > 0x16)
    {
      uint64_t v22 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v22 = v14 | 7;
      }
      uint64_t v23 = v22 + 1;
      uint64_t v15 = operator new(v22 + 1);
      __p[1] = &v12[-v13];
      unint64_t v33 = v23 | 0x8000000000000000;
      __p[0] = v15;
      if ((char *)v13 == v12)
      {
LABEL_31:
        long long v16 = v15;
        goto LABEL_34;
      }
    }
    else
    {
      HIBYTE(v33) = (_BYTE)v12 - v13;
      uint64_t v15 = __p;
      if ((char *)v13 == v12) {
        goto LABEL_31;
      }
    }
    if (v14 < 0x20 || (unint64_t)v15 - v13 < 0x20)
    {
      long long v16 = v15;
      long long v17 = (char *)v13;
      do
      {
LABEL_33:
        char v24 = *v17++;
        *v16++ = v24;
      }
      while (v17 != v12);
      goto LABEL_34;
    }
    long long v16 = (char *)v15 + (v14 & 0xFFFFFFFFFFFFFFE0);
    long long v17 = (char *)(v13 + (v14 & 0xFFFFFFFFFFFFFFE0));
    char v18 = (long long *)(v13 + 16);
    uint64_t v19 = v15 + 1;
    unint64_t v20 = v14 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v21 = *v18;
      *(v19 - 1) = *(v18 - 1);
      *uint64_t v19 = v21;
      v18 += 2;
      v19 += 2;
      v20 -= 32;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFE0)) {
      goto LABEL_33;
    }
LABEL_34:
    *long long v16 = 0;
    unint64_t v25 = *(void *)(v5 + 8);
    if (v25 >= *(void *)(v5 + 16))
    {
      int v29 = sub_10008CF94((void **)v5, (uint64_t)__p);
      int v30 = SHIBYTE(v33);
      *(void *)(v5 + 8) = v29;
      if (v30 < 0)
      {
        operator delete(__p[0]);
        uint64_t v27 = a2[7];
        uint64_t v28 = *a2;
        if (*a2)
        {
LABEL_39:
          BOOL result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))((v28 & 0xFFFFFFFFFFFFFFFELL) + 8))(v6, a2[6], v27);
          uint64_t v27 = a2[7];
          if (result != v27) {
            goto LABEL_2;
          }
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v27 = a2[7];
        uint64_t v28 = *a2;
        if (*a2) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      long long v26 = *(_OWORD *)__p;
      *(void *)(v25 + 16) = v33;
      *(_OWORD *)unint64_t v25 = v26;
      *(void *)(v5 + 8) = v25 + 24;
      uint64_t v27 = a2[7];
      uint64_t v28 = *a2;
      if (*a2) {
        goto LABEL_39;
      }
    }
    uint64_t v31 = v27;
    BOOL result = v27;
LABEL_43:
    if (v31 == v27 && a2[5] == v27) {
      *((unsigned char *)a2 + 64) = 1;
    }
LABEL_2:
    a2[4] = a2[6];
    a2[5] = result;
    a2[6] = v31;
  }
  if (((*(unsigned char *)(a3 + 64) == 0) & ~v8) == 0)
  {
    if (((v8 ^ (*(unsigned char *)(a3 + 64) != 0)) & 1) == 0) {
      return result;
    }
    goto LABEL_19;
  }
  long long v9 = (const void *)a2[4];
  unint64_t v10 = *(const void **)(a3 + 32);
  size_t v11 = a2[5] - (void)v9;
  if (v11 != *(void *)(a3 + 40) - (void)v10) {
    goto LABEL_19;
  }
  BOOL result = memcmp(v9, v10, v11);
  if (result || a2[6] != *(void *)(a3 + 48) || a2[7] != *(void *)(a3 + 56)) {
    goto LABEL_19;
  }
  return result;
}

void sub_100253378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16)
{
}

char *sub_1002533B8(char **a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_1000A9108();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 60) {
      sub_1000A6A10();
    }
    int v8 = (char *)operator new(16 * v7);
  }
  else
  {
    int v8 = 0;
  }
  long long v9 = &v8[16 * v3];
  *(_OWORD *)long long v9 = *(_OWORD *)a2;
  unint64_t v10 = v9 + 16;
  size_t v11 = &v8[16 * v7];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  int v12 = *a1;
  uint64_t v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
    if (!v13) {
      return v10;
    }
    goto LABEL_21;
  }
  do
  {
    long long v14 = *((_OWORD *)v13 - 1);
    v13 -= 16;
    *((_OWORD *)v9 - 1) = v14;
    v9 -= 16;
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0;
  }
  while (v13 != v12);
  uint64_t v15 = *a1;
  uint64_t v13 = a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = v11;
  if (v13 != v15)
  {
    do
    {
      long long v16 = (std::__shared_weak_count *)*((void *)v13 - 1);
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      v13 -= 16;
    }
    while (v13 != v15);
    uint64_t v13 = v15;
  }
  if (v13) {
LABEL_21:
  }
    operator delete(v13);
  return v10;
}

std::string *sub_10025351C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100253550(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10025356C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002535A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1002535BC(void *a1, uint64_t a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 7);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x22222222222222) {
    sub_1000A9108();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((uint64_t)(a1[2] - *a1) >> 7) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(a1[2] - *a1) >> 7);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[2] - *a1) >> 7) >= 0x11111111111111) {
    unint64_t v6 = 0x22222222222222;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x22222222222222) {
      sub_1000A6A10();
    }
    unint64_t v7 = (char *)operator new(1920 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long v17 = &v7[1920 * v3];
  *((void *)&v18 + 1) = &v7[1920 * v6];
  sub_1000776C4(v17, a2);
  uint64_t v8 = 0;
  unint64_t v10 = (char *)*a1;
  for (uint64_t i = a1[1]; (char *)(i + v8) != v10; sub_1000776C4(&v17[v8], v8 + i))
    v8 -= 1920;
  int v12 = (char *)*a1;
  size_t v11 = (char *)a1[1];
  *a1 = &v17[v8];
  *(void *)&long long v18 = v17 + 1920;
  *(_OWORD *)(a1 + 1) = v18;
  if (v11 != v12)
  {
    uint64_t v13 = v11 - 1920;
    long long v14 = v11 - 1920;
    do
    {
      (**(void (***)(char *))v14)(v14);
      v13 -= 1920;
      BOOL v15 = v14 == v12;
      v14 -= 1920;
    }
    while (!v15);
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 1920;
}

void sub_100253750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10019EBE0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100253790(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462AE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002537B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462AE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100253804(uint64_t a1)
{
  return sub_100253810(a1 + 24);
}

uint64_t sub_100253810(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 272);
  while (v2)
  {
    unint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (std::__shared_weak_count *)v3[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  uint64_t v5 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(a1 + 232);
  if (v6)
  {
    do
    {
      unint64_t v7 = (void *)*v6;
      sub_1002539C8(v6 + 2);
      operator delete(v6);
      unint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v8) {
    operator delete(v8);
  }
  sub_1000A0968((void *)(a1 + 128));
  if (*(void *)(a1 + 120)) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(void *)(a1 + 96)) {
    operator delete(*(void **)(a1 + 80));
  }
  long long v9 = *(void **)(a1 + 56);
  if (v9)
  {
    do
    {
      unint64_t v10 = (void *)*v9;
      operator delete(v9);
      long long v9 = v10;
    }
    while (v10);
  }
  size_t v11 = *(void **)(a1 + 40);
  *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  if (v11) {
    operator delete(v11);
  }
  int v12 = *(void **)(a1 + 16);
  while (v12)
  {
    uint64_t v13 = v12;
    int v12 = (void *)*v12;
    sub_100074A24(v13 + 4);
    long long v14 = (std::__shared_weak_count *)v13[3];
    if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    operator delete(v13);
  }
  BOOL v15 = *(void **)a1;
  *(void *)a1 = 0;
  if (v15) {
    operator delete(v15);
  }
  return a1;
}

void *sub_1002539C8(void *a1)
{
  uint64_t v2 = (void (***)(void))a1[10];
  if (v2)
  {
    unint64_t v3 = (void (***)(void))a1[11];
    unint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 5;
      unint64_t v6 = v3 - 5;
      unint64_t v7 = v3 - 5;
      do
      {
        uint64_t v8 = *v7;
        v7 -= 5;
        (*v8)(v6);
        v5 -= 5;
        BOOL v9 = v6 == v2;
        unint64_t v6 = v7;
      }
      while (!v9);
      unint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  unint64_t v10 = (void *)a1[7];
  if (v10)
  {
    a1[8] = v10;
    operator delete(v10);
  }
  size_t v11 = (void *)a1[4];
  if (v11)
  {
    do
    {
      int v12 = (void *)*v11;
      operator delete(v11);
      size_t v11 = v12;
    }
    while (v12);
  }
  uint64_t v13 = (void *)a1[2];
  a1[2] = 0;
  if (v13) {
    operator delete(v13);
  }
  long long v14 = (std::__shared_weak_count *)a1[1];
  if (!v14 || atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_100253AFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100253B1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462B38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100253B70(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100253B98()
{
  operator delete[]();
}

void sub_100253BB8()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100253C30()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

double sub_100253CA8(uint64_t a1)
{
  return 1.0 - *(double *)(a1 + 16);
}

double sub_100253CB8(uint64_t a1)
{
  return *(double *)(a1 + 16) * *(double *)(a1 + 24);
}

uint64_t *sub_100253CC4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1000A0CB0(v2);
    operator delete();
  }
  return a1;
}

void **sub_100253D0C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_1000A0CB0(v3 - 72);
      while ((void *)v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100253D68(uint64_t a1)
{
  *(void *)a1 = &off_100462B88;
  sub_10025B588(a1 + 472);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 424);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 408);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 408);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = *(void *)(a1 + 376);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 384);
    unint64_t v6 = *(void **)(a1 + 376);
    if (v5 != v4)
    {
      do
      {
        unint64_t v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      unint64_t v6 = *(void **)(a1 + 376);
    }
    *(void *)(a1 + 384) = v4;
    operator delete(v6);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 368);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    BOOL v9 = *(std::__shared_weak_count **)(a1 + 288);
    if (!v9) {
      goto LABEL_22;
    }
  }
  else
  {
    BOOL v9 = *(std::__shared_weak_count **)(a1 + 288);
    if (!v9) {
      goto LABEL_22;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_22:
  if (*(unsigned char *)(a1 + 72))
  {
    sub_1000A45A0(a1 + 80);
    *(unsigned char *)(a1 + 72) = 0;
  }
  unint64_t v10 = *(std::__shared_weak_count **)(a1 + 64);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    size_t v11 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v11) {
      goto LABEL_30;
    }
  }
  else
  {
    size_t v11 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v11) {
      goto LABEL_30;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_30:
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v12)
  {
    sub_1000A0CB0(v12);
    operator delete();
  }
  uint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 16);
    BOOL v15 = *(void **)(a1 + 8);
    if (v14 != v13)
    {
      do
        uint64_t v14 = sub_1000A0CB0(v14 - 72);
      while (v14 != v13);
      BOOL v15 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v13;
    operator delete(v15);
  }
  return a1;
}

void sub_100254088(uint64_t a1)
{
  sub_100253D68(a1);

  operator delete();
}

uint64_t sub_1002540C0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, uint64_t *a5)
{
  unint64_t v10 = sub_1001F3C90((void *)a1, a2);
  size_t v11 = v10 + 3;
  sub_1001F3C94(v10, (uint64_t)(v10 + 3));
  sub_100311864(a1 + 136, v11);
  sub_100311868((void *)(a1 + 136), a1 + 224);
  int64x2_t v12 = vdupq_n_s64(0x7FF4000000000000uLL);
  *(int64x2_t *)(a1 + 248) = v12;
  *(_DWORD *)(a1 + 24sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 4;
  *(_DWORD *)(a1 + 244) = a4;
  *(int64x2_t *)(a1 + 264) = v12;
  *(unsigned char *)(a1 + 28sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  if (sub_1000706F4((const void ***)(a1 + 224), (unsigned __int8 ***)&qword_10047ED40))
  {
    uint64_t v13 = sub_100085D38(a2);
    double v14 = sub_10025443C((void *)(a1 + 136), v13, a3, 0);
    char v15 = 0;
    *(double *)(a1 + 248) = v14;
    *(void *)(a1 + 256) = v16;
    *(void *)(a1 + 264) = v17;
    *(void *)(a1 + 272) = v18;
    *(_DWORD *)(a1 + 24sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 2;
    if (!*(unsigned char *)(a1 + 288)) {
      return a1;
    }
LABEL_14:
    if ((v15 & 1) == 0)
    {
      if (qword_10047BED8 != -1)
      {
        dispatch_once(&qword_10047BED8, &stru_100462BE8);
        long long v26 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
          return a1;
        }
        goto LABEL_17;
      }
      long long v26 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
LABEL_17:
        int v27 = *(_DWORD *)(a1 + 240);
        v30[0] = 67109120;
        v30[1] = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Yield status is %d but forcing it to YIELD_OK", (uint8_t *)v30, 8u);
        return a1;
      }
    }
    return a1;
  }
  char v15 = *(unsigned char *)(sub_100085D38(a2) + 120);
  if (!v15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_DWORD *)(a1 + 24sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 3;
    if (!*(unsigned char *)(a1 + 288)) {
      return a1;
    }
    goto LABEL_14;
  }
  uint64_t v19 = *a5;
  uint64_t v20 = a5[1];
  if (*a5 == v20) {
    goto LABEL_12;
  }
  while (1)
  {
    long long v21 = (const void ***)(*(uint64_t (**)(void))(**(void **)v19 + 64))();
    if (sub_1000706F4(v21, (unsigned __int8 ***)(a1 + 224))) {
      break;
    }
    v19 += 16;
    if (v19 == v20)
    {
      uint64_t v19 = v20;
      break;
    }
  }
  if (v19 == a5[1])
  {
LABEL_12:
    char v15 = 0;
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 284) = (*(uint64_t (**)(void))(**(void **)v19 + 72))();
  *(unsigned char *)(a1 + 28sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
  uint64_t v22 = sub_100085D38(a2);
  *(double *)(a1 + 248) = sub_10025443C((void *)(a1 + 136), v22, a3, *(_DWORD *)(a1 + 284));
  *(void *)(a1 + 256) = v23;
  *(double *)(a1 + 264) = v24;
  *(double *)(a1 + 272) = v25;
  if (*(_DWORD *)(a1 + 244) == 2)
  {
    *(_DWORD *)(a1 + 24sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
    return a1;
  }
  BOOL v29 = 1.0 - v24 > v24 * v25 && v24 * v25 < 0.5;
  char v15 = !v29;
  *(_DWORD *)(a1 + 24sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v29;
  if (*(unsigned char *)(a1 + 288)) {
    goto LABEL_14;
  }
  return a1;
}

void sub_1002543C8(_Unwind_Exception *a1)
{
  sub_100198250(v4);
  sub_100254564(v3);
  sub_10025D07C(v2);
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

double sub_10025443C(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  sub_100235884(a3, a4, (uint64_t)&v9);
  unint64_t v6 = v9;
  sub_10024ACF8(a2);
  sub_100311868(a1, (uint64_t)&v9);
  sub_100311A2C((uint64_t)a1, &v9);
  unint64_t v7 = v10;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return 1.0 - *(double *)&v6;
}

void sub_100254550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100254564(uint64_t a1)
{
  sub_100242B38(a1 + 40);
  int v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v3 = v2;
    int v2 = (void *)*v2;
    uint64_t v4 = (std::__shared_weak_count *)v3[3];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_10025461C(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_100254624(uint64_t a1)
{
  return a1 + 224;
}

uint64_t sub_10025462C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 240);
}

uint64_t sub_100254634(uint64_t a1)
{
  return *(unsigned int *)(a1 + 244);
}

uint64_t sub_10025463C(uint64_t a1)
{
  return a1 + 248;
}

uint64_t sub_100254644(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 280)) {
    return 2;
  }
  double v1 = *(double *)(a1 + 256);
  double v2 = *(double *)(a1 + 272) * v1;
  return 1.0 - v1 > v2 && v2 < 0.5;
}

uint64_t sub_100254680(uint64_t a1, double a2)
{
  if (a2 >= 0.5) {
    return 0;
  }
  double v2 = 1.0 - *(double *)(a1 + 264);
  if (v2 <= 0.5) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 3;
  }
  if (v2 <= a2) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = v3;
  }
  if (*(unsigned char *)(a1 + 288))
  {
    if (qword_10047BED8 == -1)
    {
      uint64_t v5 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return 0;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100462BE8);
      uint64_t v5 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return 0;
      }
    }
    unint64_t v6 = off_100462CF8[v4 - 1];
    *(_DWORD *)long long buf = 136315138;
    BOOL v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Yield status from probability/confidence is %s but forcing yield to OK", buf, 0xCu);
    return 0;
  }
  return v4;
}

uint64_t sub_1002547AC(uint64_t a1, double a2)
{
  if (a2 >= 0.5) {
    return 0;
  }
  double v2 = 1.0 - *(double *)(a1 + 16);
  if (v2 <= 0.5) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 3;
  }
  if (v2 <= a2) {
    return 1;
  }
  else {
    return v3;
  }
}

BOOL sub_1002547E8(int a1)
{
  return (a1 & 0xFFFFFFFE) != 2;
}

BOOL sub_1002547F8(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

void sub_100254808(void *a1)
{
  double v2 = a1 + 47;
  unsigned int v3 = a1 + 50;
  uint64_t v4 = (std::__shared_weak_count *)operator new(0xB0uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_100462C68;
  sub_100097354((uint64_t)&v29, (uint64_t)&v4[1], v2, v3);
  int v27 = &v4[1].__vftable;
  uint64_t v28 = v4;
  uint64_t v5 = a1[1];
  if (a1[2] != v5)
  {
    uint64_t v6 = a1[45];
    double v24 = &v4[1].__vftable;
    double v25 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_1000318E8((uint64_t)(a1 + 52), v6, (uint64_t)&v24);
    sub_10028FF58(v5, &v26);
    uint64_t v7 = v26;
    uint64_t v26 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = v25;
    if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)a1[45] + 56))(a1[45]);
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v10 = a1[1];
  if (0x8E38E38E38E38E39 * ((a1[2] - v10) >> 3) < 2) {
    goto LABEL_15;
  }
  long long v21 = v27;
  uint64_t v22 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000318E8((uint64_t)(a1 + 52), v9, (uint64_t)&v21);
  sub_10028FF58(v10 + 72, &v23);
  uint64_t v11 = v23;
  uint64_t v23 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  int64x2_t v12 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = a1[4];
    if (!v13) {
      goto LABEL_23;
    }
  }
  else
  {
LABEL_15:
    uint64_t v13 = a1[4];
    if (!v13) {
      goto LABEL_23;
    }
  }
  uint64_t v14 = a1[45];
  uint64_t v18 = v27;
  uint64_t v19 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000318E8((uint64_t)(a1 + 52), v14, (uint64_t)&v18);
  sub_10028FF58(v13, &v20);
  uint64_t v15 = v20;
  uint64_t v20 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_23:
  uint64_t v17 = v28;
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_100254B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v5 = v9;
  uint64_t v9 = 0;
  if (v5) {
    sub_1003A6124();
  }
  sub_1000BA884((uint64_t)va);
  sub_1000BA884((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100254BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v19 = a11;
  a11 = 0;
  if (v19) {
    sub_1003A6124();
  }
  sub_1000BA884((uint64_t)&a9);
  sub_1000BA884((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_100254BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    sub_1003A6124();
  }
  sub_1000BA884((uint64_t)va);
  sub_1000BA884((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100254C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100254C1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void **sub_100254C34(void **a1)
{
  double v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1001E385C(v2);
    operator delete();
  }
  return a1;
}

void sub_100254C7C(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  if (v2 && a1[1] != a1[2])
  {
    uint64_t v3 = sub_100085D38(v2);
    uint64_t v4 = sub_100085D38(a1[1]);
    sub_10024AA3C(v3, v4);
    uint64_t v5 = (void **)a1[60];
    uint64_t v6 = (void **)a1[61];
    if (v6 == v5)
    {
      a1[64] = 0;
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v7 = a1[63];
      uint64_t v8 = &v5[v7 >> 7];
      uint64_t v9 = *(uint64_t *)((char *)v5 + (((a1[64] + v7) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[64] + v7) & 0x7F);
      if ((char *)*v8 + 32 * (v7 & 0x7F) != (void *)v9)
      {
        uint64_t v10 = (void (***)(void))((char *)*v8 + 32 * (v7 & 0x7F));
        do
        {
          uint64_t v11 = *v10;
          v10 += 4;
          (*v11)();
          if ((char *)v10 - (unsigned char *)*v8 == 4096)
          {
            uint64_t v12 = (void (***)(void))v8[1];
            ++v8;
            uint64_t v10 = v12;
          }
        }
        while (v10 != (void (***)(void))v9);
        uint64_t v5 = (void **)a1[60];
        uint64_t v6 = (void **)a1[61];
      }
      a1[64] = 0;
      unint64_t v13 = (char *)v6 - (char *)v5;
      if (v13 >= 0x11)
      {
        do
        {
          operator delete(*v5);
          uint64_t v14 = a1[61];
          uint64_t v5 = (void **)(a1[60] + 8);
          a1[60] = (uint64_t)v5;
          unint64_t v13 = v14 - (void)v5;
        }
        while (v13 > 0x10);
      }
    }
    if (v13 >> 3 == 1)
    {
      uint64_t v15 = 64;
    }
    else
    {
      if (v13 >> 3 != 2) {
        return;
      }
      uint64_t v15 = 128;
    }
    a1[63] = v15;
  }
}

void sub_100254DE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = sub_100085D38(v1);
    sub_10024AC58(v2);
  }
}

void sub_100254E20(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6 == *(void *)(a1 + 8))
  {
    uint64_t v22 = a2;
    uint64_t v23 = *(void *)(a1 + 16);
    goto LABEL_37;
  }
  unint64_t v7 = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  do
  {
    if (*(unsigned char *)(sub_100085D38(v6 + 72 * v7) + 120)) {
      goto LABEL_4;
    }
    if (qword_10047BED8 == -1)
    {
      uint64_t v9 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_9;
      }
LABEL_8:
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "WARNING: Resetting particle filter #%zu; it is no longer feasible",
        (uint8_t *)&buf,
        0xCu);
      goto LABEL_9;
    }
    dispatch_once(&qword_10047BED8, &stru_100462BE8);
    uint64_t v9 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v10 = sub_100085D38(*(void *)(a1 + 8) + 72 * v7);
    uint64_t v11 = *(void *)(v10 + 8);
    for (uint64_t i = *(void *)(v10 + 16); i != v11; i -= 80)
    {
      unint64_t v13 = *(std::__shared_weak_count **)(i - 16);
      if (v13)
      {
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
    *(void *)(v10 + 16) = v11;
LABEL_4:
    ++v7;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
  }
  while (v7 < 0x8E38E38E38E38E39 * ((v8 - v6) >> 3));
  if (v6 == v8)
  {
    uint64_t v23 = *(void *)(a1 + 8);
  }
  else
  {
    int v14 = 0;
    do
    {
      uint64_t v15 = sub_100085D38(v6);
      if (!sub_10024CE58(v15)) {
        int v14 = 1;
      }
      v6 += 72;
    }
    while (v6 != v8);
    if (v14)
    {
      memset(&v157, 0, sizeof(v157));
      v167 = &buf.__r_.__value_.__s.__data_[2];
      v168 = v166;
      if (a2 >= 0) {
        uint64_t v16 = a2;
      }
      else {
        uint64_t v16 = -a2;
      }
      v162 = (void *)v16;
      v163 = v166;
      LOBYTE(v164) = 48;
      HIDWORD(v164) = 48;
      uint64_t v17 = sub_100169AA8((uint64_t)&v162);
      uint64_t v18 = (unsigned char *)v17;
      if (a2 < 0)
      {
        *(unsigned char *)(v17 - 1) = 45;
        uint64_t v18 = (unsigned char *)(v17 - 1);
        v167 = (std::string::value_type *)(v17 - 1);
        v168 = v166;
        std::string::size_type v19 = (std::string::size_type)&v166[-v17 + 1];
        if (v19 < 0x17) {
          goto LABEL_96;
        }
LABEL_28:
        std::string::__grow_by(&v157, 0x16uLL, v19 - 22, 0, 0, 0, 0);
        v157.__r_.__value_.__l.__size_ = 0;
        if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v20 = &v157;
        }
        else {
          uint64_t v20 = (std::string *)v157.__r_.__value_.__r.__words[0];
        }
        if (v18 == v166) {
          goto LABEL_32;
        }
LABEL_97:
        unint64_t v63 = (char *)&buf - v18 + 41;
        if (v63 < 0x20 || (unint64_t)((char *)v20 - v18) < 0x20)
        {
          long long v21 = v20;
          __double2 v64 = v18;
        }
        else
        {
          long long v21 = (std::string *)((char *)v20 + (v63 & 0xFFFFFFFFFFFFFFE0));
          __double2 v64 = &v18[v63 & 0xFFFFFFFFFFFFFFE0];
          double v65 = (long long *)(v18 + 16);
          double v66 = &v20->__r_.__value_.__r.__words[2];
          unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v68 = *v65;
            *((_OWORD *)v66 - 1) = *(v65 - 1);
            *(_OWORD *)double v66 = v68;
            v65 += 2;
            v66 += 4;
            v67 -= 32;
          }
          while (v67);
          if (v63 == (v63 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_105;
          }
        }
        do
        {
          std::string::value_type v69 = *v64++;
          v21->__r_.__value_.__s.__data_[0] = v69;
          long long v21 = (std::string *)((char *)v21 + 1);
        }
        while (v64 != v166);
      }
      else
      {
        v167 = (std::string::value_type *)v17;
        v168 = v166;
        std::string::size_type v19 = (std::string::size_type)&v166[-v17];
        if ((unint64_t)&v166[-v17] >= 0x17) {
          goto LABEL_28;
        }
LABEL_96:
        uint64_t v20 = &v157;
        if (v18 != v166) {
          goto LABEL_97;
        }
LABEL_32:
        long long v21 = v20;
      }
LABEL_105:
      v21->__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        v157.__r_.__value_.__l.__size_ = v19;
      }
      else {
        *((unsigned char *)&v157.__r_.__value_.__s + 23) = v19 & 0x7F;
      }
      double v70 = std::string::insert(&v157, 0, "Precision has been lost at at timestamp ");
      long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v158.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      double v72 = std::string::append(&v158, ". If you get here, your particles probably didn't make it. As long as the OffMapParticle is stable, this will never return false. If it does, inference has failed.");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      int64_t v160 = v72->__r_.__value_.__r.__words[2];
      long long __p = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      if (qword_10047BED8 == -1)
      {
        double v74 = qword_10047BEE0;
        if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_110;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100462BE8);
        double v74 = qword_10047BEE0;
        if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
        {
LABEL_110:
          p_p = &__p;
          if (v160 < 0) {
            p_p = (long long *)__p;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
        }
      }
      sub_10002FFEC((void *)a1, *(void *)(a1 + 456), (void *)(a1 + 360), (void **)(a1 + 376));
    }
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v23 = *(void *)(a1 + 16);
  }
  uint64_t v22 = a2;
LABEL_37:
  uint64_t v24 = *(void *)(a1 + 280);
  double v25 = (void *)*a3;
  memset(&v157, 0, sizeof(v157));
  uint64_t v26 = v23 - v6;
  if (v26)
  {
    uint64_t v27 = v26 / 72;
    if ((unint64_t)(v26 / 72) >> 61) {
      sub_1000A9108();
    }
    uint64_t v28 = operator new(8 * v27);
    std::string::size_type size = (std::string::size_type)v28 + 8 * v27;
    v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    v157.__r_.__value_.__r.__words[2] = size;
    memset_pattern16(v28, &unk_1003F86E0, 8 * v27);
    v157.__r_.__value_.__l.__size_ = size;
  }
  else
  {
    std::string::size_type size = 0;
    uint64_t v28 = 0;
  }
  if (sub_1002ADBC0(v25))
  {
    if ((uint64_t)(size - (void)v28) >= 1) {
      bzero(v28, 8 * (((size - (unint64_t)v28) >> 3) - (size - (unint64_t)v28 > 7)) + 8);
    }
    goto LABEL_56;
  }
  uint64_t v30 = v22 - sub_10009A588(v24);
  if (*(void *)(a1 + 456) > v30) {
    uint64_t v30 = *(void *)(a1 + 456);
  }
  *(void *)(a1 + 456) = v30;
  uint64_t v31 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v31)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    while (1)
    {
      uint64_t v35 = sub_100085D38(v31 + v32);
      *((double *)v28 + v33) = (*(double (**)(uint64_t, void, uint64_t))(*(void *)v35 + 16))(v35, *(void *)(a1 + 456), a2);
      if (qword_10047BED8 == -1)
      {
        double v36 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_49;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100462BE8);
        double v36 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_49;
        }
      }
      double v34 = *((double *)v28 + v33) * 100.0;
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v33;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v34;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "pfilter #%zu going to transition %f%% of our particles during our injection", (uint8_t *)&buf, 0x16u);
LABEL_49:
      ++v33;
      uint64_t v31 = *(void *)(a1 + 8);
      v32 += 72;
      if (v33 >= 0x8E38E38E38E38E39 * ((*(void *)(a1 + 16) - v31) >> 3))
      {
        std::string::size_type size = v157.__r_.__value_.__l.__size_;
        uint64_t v28 = (void *)v157.__r_.__value_.__r.__words[0];
        uint64_t v22 = a2;
        break;
      }
    }
  }
LABEL_56:
  uint64_t v37 = *(void *)(a1 + 456);
  if (v37 <= v22) {
    uint64_t v37 = v22;
  }
  *(void *)(a1 + 456) = v37;
  uint64_t v38 = size - (void)v28;
  uint64_t v40 = *(void *)(a1 + 8);
  uint64_t v39 = *(void *)(a1 + 16);
  unint64_t v41 = 0x8E38E38E38E38E39 * ((v39 - v40) >> 3);
  if (v41 != v38 >> 3)
  {
    sub_1000AE4B0(&buf, "");
    sub_10016A2C4((uint64_t)&buf, 0, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1000D11E0((uint64_t)&v162);
  }
  v154 = 0;
  uint64_t v155 = 0;
  v156 = 0;
  if (!v41)
  {
    uint64_t v42 = 0;
    if (v39 != v40) {
      goto LABEL_62;
    }
LABEL_118:
    uint64_t v39 = v40;
    if (v41) {
      goto LABEL_232;
    }
    goto LABEL_119;
  }
  if (v41 >> 61) {
    sub_1000A9108();
  }
  uint64_t v42 = (unint64_t *)operator new(0x71C71C71C71C71C8 * ((v39 - v40) >> 3));
  v154 = v42;
  uint64_t v155 = (uint64_t *)v42;
  v156 = &v42[0xE38E38E38E38E39 * ((v39 - v40) >> 3)];
  if (v39 == v40) {
    goto LABEL_118;
  }
LABEL_62:
  unint64_t v43 = 0;
  do
  {
    if (v42 < v156)
    {
      *v42++ = v43;
      goto LABEL_64;
    }
    uint64_t v45 = (unint64_t *)v154;
    int64_t v46 = (char *)v42 - (unsigned char *)v154;
    uint64_t v47 = ((char *)v42 - (unsigned char *)v154) >> 3;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61) {
      sub_1000A9108();
    }
    uint64_t v49 = (char *)v156 - (unsigned char *)v154;
    if (((char *)v156 - (unsigned char *)v154) >> 2 > v48) {
      unint64_t v48 = v49 >> 2;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    if (v50)
    {
      if (v50 >> 61) {
        sub_1000A6A10();
      }
      uint64_t v51 = operator new(8 * v50);
      long long v52 = (unint64_t *)&v51[8 * v47];
      *long long v52 = v43;
      uint64_t v53 = (uint64_t)(v52 + 1);
      if (v42 == v45) {
        goto LABEL_80;
      }
    }
    else
    {
      uint64_t v51 = 0;
      long long v52 = (unint64_t *)(8 * v47);
      *(void *)(8 * v47) = v43;
      uint64_t v53 = 8 * v47 + 8;
      if (v42 == v45) {
        goto LABEL_80;
      }
    }
    unint64_t v54 = (char *)(v42 - 1) - (char *)v45;
    if (v54 >= 0x168)
    {
      if (&v51[v46 - 8 - (v54 & 0xFFFFFFFFFFFFFFF8)] > &v51[v46 - 8])
      {
        uint64_t v55 = v42;
      }
      else if ((unint64_t *)((char *)v42 - (v54 & 0xFFFFFFFFFFFFFFF8) - 8) > v42 - 1)
      {
        uint64_t v55 = v42;
      }
      else if ((unint64_t)((char *)v42 - v51 - v46) >= 0x20)
      {
        uint64_t v57 = (v54 >> 3) + 1;
        uint64_t v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v55 = &v42[v58 / 0xFFFFFFFFFFFFFFF8];
        long long v52 = (unint64_t *)((char *)v52 - v58);
        uint64_t v59 = &v51[8 * v47 - 16];
        double v60 = v42 - 2;
        uint64_t v61 = v57 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v62 = *(_OWORD *)v60;
          *(v59 - 1) = *((_OWORD *)v60 - 1);
          *uint64_t v59 = v62;
          v59 -= 2;
          v60 -= 4;
          v61 -= 4;
        }
        while (v61);
        if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v55 = v42;
      }
    }
    else
    {
      uint64_t v55 = v42;
    }
    do
    {
      unint64_t v56 = *--v55;
      *--long long v52 = v56;
    }
    while (v55 != v45);
LABEL_80:
    v154 = v52;
    uint64_t v155 = (uint64_t *)v53;
    v156 = (unint64_t *)&v51[8 * v50];
    if (v45)
    {
      operator delete(v45);
      uint64_t v40 = *(void *)(a1 + 8);
      uint64_t v39 = *(void *)(a1 + 16);
    }
    uint64_t v42 = (unint64_t *)v53;
LABEL_64:
    uint64_t v155 = (uint64_t *)v42;
    ++v43;
    unint64_t v44 = 0x8E38E38E38E38E39 * ((v39 - v40) >> 3);
  }
  while (v43 < v44);
  if (v44 != ((char *)v42 - (unsigned char *)v154) >> 3)
  {
LABEL_232:
    sub_1000AE4B0(&buf, "");
    sub_10016A2C4((uint64_t)&buf, 0, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1000D11E0((uint64_t)&v162);
  }
LABEL_119:
  uint64_t v151 = 0;
  double v152 = 0;
  double v153 = 0;
  unint64_t v76 = (v39 - v40) / 72;
  if (v39 != v40)
  {
    if (v76 >> 61) {
      sub_1000A9108();
    }
    double v77 = (char *)operator new(8 * v76);
    double v78 = &v77[8 * v76];
    uint64_t v151 = v77;
    double v153 = v78;
    memset_pattern16(v77, &unk_1003F7A00, 8 * v76);
    uint64_t v79 = 0;
    double v152 = v78;
    uint64_t v80 = 72;
    do
    {
      unint64_t v81 = v79 + 1;
      if (v79 + 1 < v76)
      {
        uint64_t v82 = sub_100085D38(v40 + v80);
        *((long double *)v151 + v79) = *((double *)v151 + v79) - sub_10024ACF8(v82);
        uint64_t v40 = *(void *)(a1 + 8);
        uint64_t v39 = *(void *)(a1 + 16);
      }
      unint64_t v76 = 0x8E38E38E38E38E39 * ((v39 - v40) >> 3);
      v80 += 72;
      ++v79;
    }
    while (v81 < v76);
  }
  unint64_t v148 = 0;
  v149 = 0;
  unint64_t v150 = 0;
  sub_100256570(&v148, v76);
  uint64_t v83 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
  if (v83)
  {
    unint64_t v84 = v83 / 72;
    uint64_t v85 = 392 * (v83 / 72) - 376;
    uint64_t v86 = 72 * (v83 / 72);
    do
    {
      if (!*(unsigned char *)(a1 + 72))
      {
        LOBYTE(v162) = 0;
        sub_1002566B0(a1, a2, (uint64_t)a3, a4, (uint64_t)&v162, &buf);
        double v96 = v149;
        if ((unint64_t)v149 >= v150) {
          goto LABEL_149;
        }
        goto LABEL_148;
      }
      uint64_t v87 = *(void *)(a1 + 88);
      double v88 = sub_1002A3CAC(*(void *)(a1 + 280));
      int v89 = sub_1002A3C4C(*(void *)(a1 + 280));
      char v90 = sub_1001E2094(a1 + 80);
      int v91 = sub_1002A3D98(*(void *)(a1 + 280));
      uint64_t v92 = sub_100085D38(*(void *)(a1 + 8) + v86 - 72);
      BOOL v93 = sub_10028D2D8((void *)(v92 + 8));
      double v94 = (double)(a2 - v87) / 1000000000.0;
      if (v94 >= v88 || ((v89 ^ 1) & 1) != 0)
      {
        if (v94 >= v88) {
          char v97 = 1;
        }
        else {
          char v97 = v90;
        }
        if (v97) {
          goto LABEL_147;
        }
        int v95 = 0;
      }
      else
      {
        if (v93) {
          int v95 = v91;
        }
        else {
          int v95 = 0;
        }
        if (v90)
        {
          if (v95) {
            goto LABEL_145;
          }
          goto LABEL_147;
        }
      }
      if ((sub_1002A3DF0(*(void *)(a1 + 280)) | v95))
      {
LABEL_145:
        LOBYTE(v162) = 0;
        sub_1001AB5F8(&v163, a1 + 80);
        LOBYTE(v162) = 1;
        sub_1002566B0(a1, a2, (uint64_t)a3, a4, (uint64_t)&v162, &buf);
        double v96 = v149;
        if ((unint64_t)v149 >= v150) {
          goto LABEL_149;
        }
        goto LABEL_148;
      }
LABEL_147:
      LOBYTE(v162) = 0;
      sub_1002566B0(a1, a2, (uint64_t)a3, a4, (uint64_t)&v162, &buf);
      double v96 = v149;
      if ((unint64_t)v149 >= v150)
      {
LABEL_149:
        double v98 = (char *)sub_10025BA78(&v148, (uint64_t)&buf);
        goto LABEL_150;
      }
LABEL_148:
      sub_10025BC34((uint64_t)v149, (uint64_t)&buf);
      double v98 = v96 + 392;
LABEL_150:
      v149 = v98;
      sub_1002583D8((uint64_t)&buf);
      if ((_BYTE)v162) {
        sub_1000A45A0((uint64_t)&v163);
      }
      uint64_t v99 = *(void *)(a1 + 8);
      if (v84 < 0x8E38E38E38E38E39 * ((*(void *)(a1 + 16) - v99) >> 3))
      {
        uint64_t v100 = (char *)v148;
        *(void *)&v100[v85] = sub_100085D38(v99 + v86) + 8;
      }
      v85 -= 392;
      v86 -= 72;
      --v84;
    }
    while (v84);
  }
  double v102 = (uint64_t *)v154;
  double v101 = v155;
  if (v154 == v155) {
    goto LABEL_220;
  }
  if (a2 >= 0) {
    uint64_t v103 = a2;
  }
  else {
    uint64_t v103 = -a2;
  }
  uint64_t v141 = v103;
  while (2)
  {
    uint64_t v104 = *v102;
    double v105 = *((double *)v151 + *v102) * *(double *)(v157.__r_.__value_.__r.__words[0] + 8 * *v102);
    double v106 = (uint64_t *)(*(void *)(a1 + 8) + 72 * *v102);
    long long v147 = 0uLL;
    if (v105 == 0.0)
    {
      long long v147 = 0uLL;
      goto LABEL_162;
    }
    sub_1002586BC((uint64_t)v161, (uint64_t)v148 + 392 * v104);
    sub_10028FB14(v106, (uint64_t)v161, v105);
    long long v109 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v110 = (std::__shared_weak_count *)*((void *)&v147 + 1);
    long long v147 = v109;
    if (v110 && !atomic_fetch_add(&v110->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
      uint64_t v111 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_) {
        goto LABEL_169;
      }
    }
    else
    {
      uint64_t v111 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
LABEL_169:
        if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
          std::__shared_weak_count::__release_weak(v111);
        }
      }
    }
    sub_1002583D8((uint64_t)v161);
    if (!(void)v147)
    {
LABEL_162:
      uint64_t v107 = sub_100085D38((uint64_t)v106);
      if (*(void *)(v107 + 8) != *(void *)(v107 + 16)) {
        goto LABEL_173;
      }
      if (qword_10047BED8 == -1)
      {
        double v108 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_210;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100462BE8);
        double v108 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_210;
        }
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "No need to resample at timestamp %lld because we haven't initialized yet and no injection was requested.", (uint8_t *)&buf, 0xCu);
      goto LABEL_210;
    }
LABEL_173:
    uint64_t v112 = sub_100085D38((uint64_t)v106);
    sub_10024CE94(v112, *(void *)(a1 + 312), *(void *)(a1 + 400), (double **)&v147, a5, (uint64_t)&v162);
    uint64_t v113 = sub_100085D38((uint64_t)v106);
    sub_100272F08((uint64_t *)(v113 + 8));
    int v114 = v162;
    if (!(_BYTE)v162)
    {
      memset(&v145, 0, sizeof(v145));
      v167 = &buf.__r_.__value_.__s.__data_[2];
      v168 = v166;
      *(void *)&long long __p = v141;
      *((void *)&__p + 1) = v166;
      LOBYTE(v16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 48;
      HIDWORD(v16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 48;
      uint64_t v118 = sub_100169AA8((uint64_t)&__p);
      double v119 = (unsigned char *)v118;
      if (a2 < 0)
      {
        *(unsigned char *)(v118 - 1) = 45;
        double v119 = (unsigned char *)(v118 - 1);
        v167 = (std::string::value_type *)(v118 - 1);
        v168 = v166;
        std::string::size_type v120 = (std::string::size_type)&v166[-v118 + 1];
        if (v120 >= 0x17)
        {
LABEL_182:
          std::string::__grow_by(&v145, 0x16uLL, v120 - 22, 0, 0, 0, 0);
          v145.__r_.__value_.__l.__size_ = 0;
          if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v121 = &v145;
          }
          else {
            v121 = (std::string *)v145.__r_.__value_.__r.__words[0];
          }
          if (v119 == v166) {
            goto LABEL_186;
          }
          goto LABEL_189;
        }
      }
      else
      {
        v167 = (std::string::value_type *)v118;
        v168 = v166;
        std::string::size_type v120 = (std::string::size_type)&v166[-v118];
        if ((unint64_t)&v166[-v118] >= 0x17) {
          goto LABEL_182;
        }
      }
      v121 = &v145;
      if (v119 == v166)
      {
LABEL_186:
        uint64_t v122 = v121;
        goto LABEL_197;
      }
LABEL_189:
      if (v120 < 0x20 || (unint64_t)((char *)v121 - v119) < 0x20)
      {
        uint64_t v122 = v121;
        uint64_t v123 = v119;
      }
      else
      {
        uint64_t v122 = (std::string *)((char *)v121 + (v120 & 0xFFFFFFFFFFFFFFE0));
        uint64_t v123 = &v119[v120 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v124 = (long long *)(v119 + 16);
        uint64_t v125 = &v121->__r_.__value_.__r.__words[2];
        unint64_t v126 = v120 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v127 = *v124;
          *((_OWORD *)v125 - 1) = *(v124 - 1);
          *(_OWORD *)uint64_t v125 = v127;
          v124 += 2;
          v125 += 4;
          v126 -= 32;
        }
        while (v126);
        if (v120 == (v120 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_197;
        }
      }
      do
      {
        std::string::value_type v128 = *v123++;
        v122->__r_.__value_.__s.__data_[0] = v128;
        uint64_t v122 = (std::string *)((char *)v122 + 1);
      }
      while (v123 != v166);
LABEL_197:
      v122->__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        v145.__r_.__value_.__l.__size_ = v120;
      }
      else {
        *((unsigned char *)&v145.__r_.__value_.__s + 23) = v120 & 0x7F;
      }
      double v129 = std::string::insert(&v145, 0, "Inference has failed at timestamp ");
      long long v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
      v146.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v130;
      v129->__r_.__value_.__l.__size_ = 0;
      v129->__r_.__value_.__r.__words[2] = 0;
      v129->__r_.__value_.__r.__words[0] = 0;
      v131 = std::string::append(&v146, ". Our only option is to start a new particle filter from this point forward.");
      long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
      v158.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v132;
      v131->__r_.__value_.__l.__size_ = 0;
      v131->__r_.__value_.__r.__words[2] = 0;
      v131->__r_.__value_.__r.__words[0] = 0;
      if (qword_10047BED8 == -1)
      {
        uint64_t v133 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_205;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100462BE8);
        uint64_t v133 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_205;
        }
      }
      v134 = &v158;
      if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v134 = (std::string *)v158.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v134;
      _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
LABEL_205:
      sub_10002FFEC((void *)a1, *(void *)(a1 + 456), (void *)(a1 + 360), (void **)(a1 + 376));
    }
    uint64_t v115 = sub_100085D38((uint64_t)v106);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v115 + 32))(v115, &v163, a2);
    uint64_t v116 = sub_100085D38((uint64_t)v106);
    sub_100272F08((uint64_t *)(v116 + 8));
    uint64_t v117 = sub_100085D38((uint64_t)v106);
    if (sub_1002753B8(*(double **)(v117 + 8)) == -INFINITY)
    {
      sub_1000AE4B0(&__p, "");
      sub_1001EF448("AFTER reabsorb ", &buf);
      sub_10016A2C4((uint64_t)&__p, (uint64_t)&buf, 1);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v160) < 0) {
        operator delete((void *)__p);
      }
      sub_1000D11E0((uint64_t)&v158);
    }
    if ((_BYTE)v162 && v163)
    {
      v164 = v163;
      operator delete(v163);
    }
    if (v114)
    {
LABEL_210:
      v135 = (std::__shared_weak_count *)*((void *)&v147 + 1);
      if (*((void *)&v147 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v147 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
      if (++v102 == v101) {
        goto LABEL_220;
      }
      continue;
    }
    break;
  }
  uint64_t v136 = (std::__shared_weak_count *)*((void *)&v147 + 1);
  if (*((void *)&v147 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v147 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
    std::__shared_weak_count::__release_weak(v136);
  }
LABEL_220:
  uint64_t v137 = (char *)v148;
  if (v148)
  {
    uint64_t v138 = v149;
    uint64_t v139 = v148;
    if (v149 != v148)
    {
      do
        uint64_t v138 = (char *)sub_1002583D8((uint64_t)(v138 - 392));
      while (v138 != v137);
      uint64_t v139 = v148;
    }
    v149 = v137;
    operator delete(v139);
  }
  if (v151) {
    operator delete(v151);
  }
  if (v154)
  {
    uint64_t v155 = (uint64_t *)v154;
    operator delete(v154);
  }
  if (v157.__r_.__value_.__r.__words[0]) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
}

void sub_1002562A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40)
{
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  if (a37) {
    operator delete(a37);
  }
  if (a40)
  {
    operator delete(a40);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100256570(void *a1, unint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (0x7D6343EB1A1F58D1 * ((uint64_t)(a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xA72F05397829CCLL) {
      sub_1000A9108();
    }
    uint64_t v4 = a1[1];
    uint64_t v5 = 392 * a2;
    uint64_t v6 = (char *)operator new(392 * a2);
    uint64_t v7 = 0;
    uint64_t v8 = &v6[v4 - (void)v2];
    *(void *)&long long v11 = v8;
    *((void *)&v11 + 1) = &v6[v5];
    while ((void *)(v4 + v7) != v2)
    {
      v7 -= 392;
      sub_1002586BC((uint64_t)&v8[v7], v7 + v4);
    }
    uint64_t v10 = (void *)*a1;
    uint64_t v9 = a1[1];
    *a1 = &v8[v7];
    for (*(_OWORD *)(a1 + 1) = v11; (void *)v9 != v10; uint64_t v9 = sub_1002583D8(v9 - 392))
      ;
    if (v10) {
      operator delete(v10);
    }
  }
}

void sub_1002566B0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1002B0894(a6, a3, a2, &v16, &v14, a5);
  uint64_t v9 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = (std::__shared_weak_count *)a6[1];
  *a6 = v12;
  a6[1] = v11;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_100256824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void **sub_100256840(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_1002583D8(v3 - 392);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_10025689C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  sub_1001F43D0(a2, &v31);
  if (v31 == v32)
  {
    if (qword_10047BED8 == -1)
    {
      uint64_t v11 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    dispatch_once(&qword_10047BED8, &stru_100462BE8);
    uint64_t v11 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_4:
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "No viable locations for positioning", v28, 2u);
    }
  }
LABEL_5:
  uint64_t v12 = ((char *)v32 - (char *)v31) >> 4;
  if (*(void *)(a1 + 464) == v12) {
    goto LABEL_26;
  }
  sub_10000C898((uint64_t)v28);
  unint64_t v13 = sub_10002986C(v29, (uint64_t)"WiFi measurement on frequencies ", 32);
  sub_100258FCC(a4, &buf);
  sub_10025BDCC((uint64_t *)&buf);
  if (v35 >= 0) {
    uint64_t v14 = (void **)&v33;
  }
  else {
    uint64_t v14 = v33;
  }
  if (v35 >= 0) {
    uint64_t v15 = HIBYTE(v35);
  }
  else {
    uint64_t v15 = v34;
  }
  uint64_t v16 = sub_10002986C(v13, (uint64_t)v14, v15);
  if (SHIBYTE(v35) < 0) {
    operator delete(v33);
  }
  sub_10002986C(v16, (uint64_t)" that are indicative of ", 24);
  uint64_t v17 = (void *)std::ostream::operator<<();
  sub_10002986C(v17, (uint64_t)" possible locations", 19);
  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
  if (qword_10047BED8 == -1)
  {
    uint64_t v18 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_18;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100462BE8);
    uint64_t v18 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_18:
      std::stringbuf::str();
      if (v35 >= 0) {
        std::string::size_type v19 = (void **)&v33;
      }
      else {
        std::string::size_type v19 = v33;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v35) < 0) {
        operator delete(v33);
      }
    }
  }
  v29[0] = v20;
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  uint64_t v12 = ((char *)v32 - (char *)v31) >> 4;
LABEL_26:
  *(void *)(a1 + 464) = v12;
  sub_10026F40C(&v31, (uint64_t)v28);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 360) + 48))(*(void *)(a1 + 360)))
  {
    uint64_t v21 = *(void *)(a1 + 8);
    uint64_t v22 = *(void *)(a1 + 16);
    if (v21 != v22)
    {
      uint64_t v23 = a1 + 320;
      do
      {
        unint64_t v33 = (void **)v28;
        uint64_t v34 = v23;
        uint64_t v35 = a3;
        sub_10028FCD8(v21, (uint64_t *)&v33, a4, a5, a6);
        v21 += 72;
      }
      while (v21 != v22);
    }
  }
  uint64_t v24 = v31;
  if (v31)
  {
    double v25 = v32;
    uint64_t v26 = v31;
    if (v32 != v31)
    {
      do
      {
        uint64_t v27 = (std::__shared_weak_count *)*(v25 - 1);
        if (v27)
        {
          if (!atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 2;
      }
      while (v25 != v24);
      uint64_t v26 = v31;
    }
    uint64_t v32 = v24;
    operator delete(v26);
  }
}

void sub_100256D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000DEA14((uint64_t)&a9);
  sub_1000D8DD8((void **)(v9 - 160));
  _Unwind_Resume(a1);
}

void sub_100256DDC(_Unwind_Exception *a1)
{
  sub_1000D8DD8((void **)(v1 - 160));
  _Unwind_Resume(a1);
}

void sub_100256DF0(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v5 = a1 + 80;
  if (v4)
  {
    sub_1001AB5FC(v5, a2);
    uint64_t v7 = *(uint64_t **)(a1 + 8);
    uint64_t v6 = *(uint64_t **)(a1 + 16);
    if (v7 == v6) {
      return;
    }
  }
  else
  {
    sub_1001AB5F8(v5, a2);
    *(unsigned char *)(a1 + 72) = 1;
    uint64_t v7 = *(uint64_t **)(a1 + 8);
    uint64_t v6 = *(uint64_t **)(a1 + 16);
    if (v7 == v6) {
      return;
    }
  }
  do
  {
    sub_10028FF20(v7, a2);
    v7 += 9;
  }
  while (v7 != v6);
}

uint64_t sub_100256E6C(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 360);
  if (v1[2]) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 40))();
  }
  else {
    return 0;
  }
}

uint64_t *sub_100256EA4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)a1[1];
  for (uint64_t i = (uint64_t *)a1[2]; v6 != i; v6 += 9)
    sub_10028FF28(v6, a2, a3);
  BOOL result = (uint64_t *)a1[4];
  if (result)
  {
    return (uint64_t *)sub_10028FF28(result, a2, a3);
  }
  return result;
}

uint64_t sub_100256F38(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  for (uint64_t i = a1[2]; v4 != i; v4 += 72)
  {
    uint64_t v6 = (__n128 *)sub_100085D38(v4);
    sub_10024CB30(v6, *(void *)(a2 + 16) - 250000000, *(void *)(a2 + 16));
  }
  uint64_t v7 = a1[4];
  if (v7) {
    sub_10028FF38(v7, a2);
  }
  uint64_t v9 = a1[1];
  uint64_t v8 = a1[2];
  if (v9 == v8) {
    return 0;
  }
  int v10 = 0;
  do
  {
    v10 |= sub_10028FF38(v9, a2);
    v9 += 72;
  }
  while (v9 != v8);
  return v10 & 1;
}

uint64_t sub_100256FFC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  int v10 = *(uint64_t **)(result + 8);
  for (uint64_t i = *(uint64_t **)(result + 16); v10 != i; v10 += 9)
  {
    v14[0] = a2;
    v14[1] = a3;
    v14[2] = a5;
    v14[3] = a4;
    BOOL result = sub_10028FF44(v10, (uint64_t)v14);
  }
  if (*(void *)(v9 + 32))
  {
    if (sub_1002A3BF4(*(void *)(v9 + 280))) {
      sub_1002570E8(v9, a2, a3, a4, (uint64_t)v14);
    }
    else {
      sub_1001A0A84((uint64_t)v14, a4);
    }
    uint64_t v12 = *(uint64_t **)(v9 + 32);
    v13[0] = a2;
    v13[1] = a3;
    v13[2] = a5;
    v13[3] = v14;
    sub_10028FF44(v12, (uint64_t)v13);
    return nullsub_93(v14);
  }
  return result;
}

void sub_1002570D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nullsub_93(va);
  _Unwind_Resume(a1);
}

void sub_1002570E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!*(void *)(a1 + 512)) {
    goto LABEL_21;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 480) + ((*(void *)(a1 + 504) >> 4) & 0xFFFFFFFFFFFFFF8))
                  + 32 * (*(void *)(a1 + 504) & 0x7FLL)
                  + 16);
  sub_10009A69C(*(void *)(a1 + 280), (uint64_t)buf);
  double v11 = *(double *)&v48[1];
  sub_10009E214((uint64_t)buf);
  if ((double)(a2 - v10) * 0.000000001 <= v11) {
    goto LABEL_21;
  }
  uint64_t v12 = *(void ***)(a1 + 480);
  unint64_t v13 = *(void ***)(a1 + 488);
  if (v13 == v12)
  {
    *(void *)(a1 + 512) = 0;
    unint64_t v20 = 0;
  }
  else
  {
    unint64_t v14 = *(void *)(a1 + 504);
    uint64_t v15 = &v12[v14 >> 7];
    uint64_t v16 = *(uint64_t *)((char *)v12 + (((*(void *)(a1 + 512) + v14) >> 4) & 0xFFFFFFFFFFFFFF8))
        + 32 * ((*(void *)(a1 + 512) + v14) & 0x7F);
    if ((char *)*v15 + 32 * (v14 & 0x7F) != (void *)v16)
    {
      uint64_t v17 = (void (***)(void))((char *)*v15 + 32 * (v14 & 0x7F));
      do
      {
        uint64_t v18 = *v17;
        v17 += 4;
        (*v18)();
        if ((char *)v17 - (unsigned char *)*v15 == 4096)
        {
          std::string::size_type v19 = (void (***)(void))v15[1];
          ++v15;
          uint64_t v17 = v19;
        }
      }
      while (v17 != (void (***)(void))v16);
      uint64_t v12 = *(void ***)(a1 + 480);
      unint64_t v13 = *(void ***)(a1 + 488);
    }
    *(void *)(a1 + 512) = 0;
    unint64_t v20 = (char *)v13 - (char *)v12;
    if (v20 >= 0x11)
    {
      do
      {
        operator delete(*v12);
        uint64_t v21 = *(void *)(a1 + 488);
        uint64_t v12 = (void **)(*(void *)(a1 + 480) + 8);
        *(void *)(a1 + 48sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v12;
        unint64_t v20 = v21 - (void)v12;
      }
      while (v20 > 0x10);
    }
  }
  if (v20 >> 3 == 1)
  {
    uint64_t v22 = 64;
    goto LABEL_17;
  }
  if (v20 >> 3 == 2)
  {
    uint64_t v22 = 128;
LABEL_17:
    *(void *)(a1 + 504) = v22;
  }
  if (qword_10047BED8 == -1)
  {
    uint64_t v23 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  dispatch_once(&qword_10047BED8, &stru_100462BE8);
  uint64_t v23 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
  {
LABEL_20:
    uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 480) + ((*(void *)(a1 + 504) >> 4) & 0xFFFFFFFFFFFFFF8))
                    + 32 * (*(void *)(a1 + 504) & 0x7FLL)
                    + 16);
    *(_DWORD *)long long buf = 134218240;
    uint64_t v47 = v24;
    LOWORD(v48[0]) = 2048;
    *(void *)((char *)v48 + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Clearing DR floor transition signal buffer because the oldest FloorTransitionState was stashed at %lld and it's %lld now!", buf, 0x16u);
  }
LABEL_21:
  unsigned int v25 = *(_DWORD *)(a4 + 12);
  if (v25 <= 1)
  {
    sub_1001A0A84((uint64_t)buf, a4);
    uint64_t v26 = *(void *)(a1 + 480);
    uint64_t v27 = *(void *)(a1 + 488);
    uint64_t v28 = 16 * (v27 - v26) - 1;
    *(void *)&v48[1] = a2;
    if (v27 == v26) {
      uint64_t v28 = 0;
    }
    if (v28 == *(void *)(a1 + 512) + *(void *)(a1 + 504))
    {
      sub_10025C000(a1 + 472);
      uint64_t v26 = *(void *)(a1 + 480);
      uint64_t v27 = *(void *)(a1 + 488);
    }
    if (v27 == v26)
    {
      uint64_t v30 = 0;
    }
    else
    {
      unint64_t v29 = *(void *)(a1 + 512) + *(void *)(a1 + 504);
      uint64_t v30 = *(void *)(v26 + ((v29 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v29 & 0x7F);
    }
    sub_1001A0A84(v30, (uint64_t)buf);
    ++*(void *)(a1 + 512);
    if (qword_10047BED8 == -1)
    {
      uint64_t v31 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_31:
        uint64_t v32 = "DOWN";
        uint64_t v33 = *(void *)(a4 + 16);
        if (!*(_DWORD *)(a4 + 12)) {
          uint64_t v32 = "UP";
        }
        int v40 = 136315650;
        unint64_t v41 = v32;
        __int16 v42 = 2048;
        uint64_t v43 = v33;
        __int16 v44 = 2048;
        uint64_t v45 = a2;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Stashing floor transition signal: %s where the sensor event timestamp is %lld at %lld", (uint8_t *)&v40, 0x20u);
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100462BE8);
      uint64_t v31 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_31;
      }
    }
    nullsub_93(buf);
    unsigned int v25 = *(_DWORD *)(a4 + 12);
  }
  BOOL v34 = sub_1002B039C(a3, *(_DWORD *)(a4 + 8), v25);
  sub_1001A0A84(a5, a4);
  if (v34 && *(void *)(a1 + 512))
  {
    sub_1001A0A84((uint64_t)buf, *(void *)(*(void *)(a1 + 480) + ((*(void *)(a1 + 504) >> 4) & 0xFFFFFFFFFFFFFF8))+ 32 * (*(void *)(a1 + 504) & 0x7FLL));
    *(_DWORD *)(a5 + 12) = v48[0];
    if (qword_10047BED8 != -1) {
      dispatch_once(&qword_10047BED8, &stru_100462BE8);
    }
    uint64_t v35 = (int64x2_t *)(a1 + 504);
    double v36 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v37 = "DOWN";
      if (!v48[0]) {
        uint64_t v37 = "UP";
      }
      int v40 = 136315650;
      unint64_t v41 = v37;
      __int16 v42 = 2048;
      uint64_t v43 = *(void *)&v48[1];
      __int16 v44 = 2048;
      uint64_t v45 = a2;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Popping floor transition signal: %s stashed at %lld and popped at %lld", (uint8_t *)&v40, 0x20u);
    }
    uint64_t v38 = (void (***)(void))(*(void *)(*(void *)(a1 + 480)
                                                    + ((*(void *)(a1 + 504) >> 4) & 0xFFFFFFFFFFFFFF8))
                                        + 32 * (*(void *)(a1 + 504) & 0x7FLL));
    (**v38)(v38);
    int64x2_t v39 = vaddq_s64(*v35, (int64x2_t)xmmword_1003F1860);
    int64x2_t *v35 = v39;
    if (v39.i64[0] >= 0x100uLL)
    {
      operator delete(**(void ***)(a1 + 480));
      *(void *)(a1 + 480) += 8;
      *(void *)(a1 + 504) -= 128;
    }
    nullsub_93(buf);
  }
}

void sub_10025766C(_Unwind_Exception *a1)
{
  nullsub_93(v1);
  _Unwind_Resume(a1);
}

void sub_100257680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nullsub_93(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100257698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  sub_1002A4080(*(void *)(a1 + 280));
  sub_1002A4090(*(void *)(a1 + 280));
  uint64_t result = sub_1002540C0(a5, a2, a3, a4, (uint64_t *)(a1 + 376));
  if (*(_DWORD *)(a5 + 240) == 4)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v11);
  }
  return result;
}

void sub_100257778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1002429C0(v14);
    _Unwind_Resume(a1);
  }
  sub_1002429C0(v14);
  _Unwind_Resume(a1);
}

void *sub_1002577B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (a1[1] == a1[2])
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v14, "The caller is requesting configuration state while uninitialized.");
    std::runtime_error::runtime_error(&buf, &v14);
    buf.__vftable = (std::runtime_error_vtbl *)&off_100453630;
    sub_10018E868((uint64_t)v16);
    sub_1000CC8F4(&buf, (uint64_t)"Converged ParticleFilterLocalizer::getBestLocalizerState(const ScoredLocations &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/particle_filter_localizer.cpp", 899, (uint64_t)v16);
  }
  if ((sub_1002A3F24(a1[35]) & 1) == 0 && sub_10028D198((uint64_t)a2)) {
    goto LABEL_15;
  }
  sub_100257698((uint64_t)a1, a1[1], a2, 0, (uint64_t)&v14);
  if (!v15) {
    goto LABEL_12;
  }
  uint64_t v6 = a1[4];
  if (!v6 || !*(unsigned char *)(sub_100085D38(v6) + 120))
  {
    if (a1[2] - a1[1] == 72)
    {
LABEL_9:
      if (qword_10047BED8 != -1)
      {
        dispatch_once(&qword_10047BED8, &stru_100462BE8);
        uint64_t v7 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      uint64_t v7 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:
        LOWORD(buf.__vftable) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "No particle filters can yield.", (uint8_t *)&buf, 2u);
      }
LABEL_12:
      sub_100259134(a3, (uint64_t)&v14);
      return sub_1002429C0(&v14);
    }
    sub_1002429C0(&v14);
LABEL_15:
    uint64_t v9 = a1[1];
    if (0x8E38E38E38E38E39 * ((a1[2] - v9) >> 3) < 2)
    {
LABEL_22:
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v14, "The above for loop always returns. How did we get here?");
      std::runtime_error::runtime_error(&buf, &v14);
      buf.__vftable = (std::runtime_error_vtbl *)&off_100453860;
      sub_10018E868((uint64_t)v13);
      sub_1000D1698(&buf, (uint64_t)"Converged ParticleFilterLocalizer::getBestLocalizerState(const ScoredLocations &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/particle_filter_localizer.cpp", 932, (uint64_t)v13);
    }
    unint64_t v10 = 1;
    uint64_t v11 = 72;
    while (1)
    {
      sub_100257698((uint64_t)a1, v9 + v11, a2, 1, (uint64_t)&v14);
      if (!v15) {
        goto LABEL_12;
      }
      uint64_t v12 = a1[4];
      if (v12 && *(unsigned char *)(sub_100085D38(v12) + 120)) {
        break;
      }
      if (v10 == -1 - 0x71C71C71C71C71C7 * ((a1[2] - a1[1]) >> 3)) {
        goto LABEL_9;
      }
      sub_1002429C0(&v14);
      uint64_t v9 = a1[1];
      ++v10;
      v11 += 72;
      if (v10 >= 0x8E38E38E38E38E39 * ((a1[2] - v9) >> 3)) {
        goto LABEL_22;
      }
    }
  }
  sub_100257698((uint64_t)a1, a1[4], a2, 2, a3);
  return sub_1002429C0(&v14);
}

void sub_100257AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  unint64_t v20 = *(void **)(v18 - 104);
  if (v20)
  {
    *(void *)(v18 - 96) = v20;
    operator delete(v20);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v18 - 80));
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100257BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1002429C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100257C00@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(void *)(result + 8);
  if (*(void *)(result + 16) != v4)
  {
    uint64_t v6 = (void *)result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(result + 376);
    do
    {
      double v15 = sub_1002A4080(v6[35]);
      double v10 = sub_1002A4090(v6[35]);
      uint64_t v11 = v4 + v7;
      double v14 = v10;
      BOOL v13 = v8 != 0;
      unint64_t v12 = a3[1];
      if (v12 >= a3[2])
      {
        uint64_t result = sub_10025C5D0(a3, v11, a2, (uint64_t)&v15, (uint64_t)&v14, (int *)&v13, v9);
      }
      else
      {
        sub_1002540C0(a3[1], v11, a2, v8 != 0, v9);
        uint64_t result = v12 + 296;
        a3[1] = v12 + 296;
      }
      a3[1] = result;
      ++v8;
      uint64_t v4 = v6[1];
      v7 += 72;
    }
    while (v8 < 0x8E38E38E38E38E39 * ((v6[2] - v4) >> 3));
  }
  return result;
}

void sub_100257D14(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_100241814((void **)v1);
  _Unwind_Resume(a1);
}

void sub_100257D2C(_Unwind_Exception *a1)
{
  sub_100241814(v1);
  _Unwind_Resume(a1);
}

void sub_100257D40(_Unwind_Exception *a1)
{
  sub_100241814(v1);
  _Unwind_Resume(a1);
}

void sub_100257D54(_Unwind_Exception *a1)
{
  sub_100241814(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100257D68@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(void *)(result + 32);
  if (v3)
  {
    uint64_t v5 = result;
    double v11 = sub_1002A4080(*(void *)(result + 280));
    double v10 = sub_1002A4090(*(void *)(v5 + 280));
    int v9 = 2;
    uint64_t v7 = (uint64_t *)(v5 + 376);
    unint64_t v8 = a3[1];
    if (v8 >= a3[2])
    {
      uint64_t result = sub_10025C818(a3, v3, a2, (uint64_t)&v11, (uint64_t)&v10, &v9, v7);
    }
    else
    {
      sub_1002540C0(a3[1], v3, a2, 2, v7);
      uint64_t result = v8 + 296;
      a3[1] = v8 + 296;
    }
    a3[1] = result;
  }
  return result;
}

void sub_100257E38(_Unwind_Exception *a1)
{
  sub_100241814(v1);
  _Unwind_Resume(a1);
}

void sub_100257E4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_100241814((void **)v1);
  _Unwind_Resume(a1);
}

void sub_100257E64(_Unwind_Exception *a1)
{
  sub_100241814(v1);
  _Unwind_Resume(a1);
}

void sub_100257E78(_Unwind_Exception *a1)
{
  sub_100241814(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100257E8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v4 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v18 = v3;
  while (v4 != v3)
  {
    uint64_t result = sub_100085D38(v4);
    uint64_t v5 = *(void *)(result + 8);
    uint64_t v6 = *(void *)(result + 16);
    while (v5 != v6)
    {
      uint64_t v7 = (uint64_t ***)(*(uint64_t (**)(void))(**(void **)(v5 + 56) + 64))(*(void *)(v5 + 56));
      if (!sub_10006F50C((void *)a2, v7))
      {
        uint64_t result = (uint64_t)sub_10025B0C0(a2, v7, (const void **)v7, (const void **)(v5 + 56));
        goto LABEL_7;
      }
      unint64_t v8 = sub_100077F68((uint64_t)&__p, v7);
      int8x8_t v9 = *(int8x8_t *)(a2 + 8);
      if (!*(void *)&v9) {
        goto LABEL_36;
      }
      unint64_t v10 = v8;
      uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
      v11.i16[0] = vaddlv_u8(v11);
      if (v11.u32[0] > 1uLL)
      {
        unint64_t v12 = v8;
        if (v8 >= *(void *)&v9) {
          unint64_t v12 = v8 % *(void *)&v9;
        }
      }
      else
      {
        unint64_t v12 = (*(void *)&v9 - 1) & v8;
      }
      BOOL v13 = *(const void *****)(*(void *)a2 + 8 * v12);
      if (!v13 || (double v14 = *v13) == 0) {
LABEL_36:
      }
        sub_10018E334("unordered_map::at: key not found");
      if (v11.u32[0] < 2uLL)
      {
        uint64_t v15 = *(void *)&v9 - 1;
        while (1)
        {
          uint64_t v17 = v14[1];
          if (v17 == (const void **)v10)
          {
            uint64_t result = sub_1000706F4(v14 + 2, (unsigned __int8 ***)v7);
            if (result) {
              goto LABEL_29;
            }
          }
          else if (((unint64_t)v17 & v15) != v12)
          {
            goto LABEL_36;
          }
          double v14 = (const void ***)*v14;
          if (!v14) {
            goto LABEL_36;
          }
        }
      }
      while (1)
      {
        unint64_t v16 = (unint64_t)v14[1];
        if (v16 == v10) {
          break;
        }
        if (v16 >= *(void *)&v9) {
          v16 %= *(void *)&v9;
        }
        if (v16 != v12) {
          goto LABEL_36;
        }
LABEL_19:
        double v14 = (const void ***)*v14;
        if (!v14) {
          goto LABEL_36;
        }
      }
      uint64_t result = sub_1000706F4(v14 + 2, (unsigned __int8 ***)v7);
      if ((result & 1) == 0) {
        goto LABEL_19;
      }
LABEL_29:
      if (*(const void ***)(v5 + 56) != v14[4])
      {
        char v21 = 0;
        LOBYTE(v2sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
        sub_10025B070("Two particles with the same floorKey must have the same floorEnv", &__p);
        sub_10016A2C4((uint64_t)&v20, (uint64_t)&__p, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v21 < 0) {
          operator delete(v20);
        }
        sub_1000D11E0((uint64_t)&v19);
      }
LABEL_7:
      v5 += 80;
    }
    v4 += 72;
    uint64_t v3 = v18;
  }
  return result;
}

void sub_100258120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_100244040(v22);
    _Unwind_Resume(a1);
  }
  sub_100244040(v22);
  _Unwind_Resume(a1);
}

BOOL sub_10025818C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v1 == v2) {
    return 1;
  }
  do
  {
    uint64_t v3 = sub_100085D38(v1);
    int v4 = *(unsigned __int8 *)(v3 + 120);
    BOOL result = *(unsigned char *)(v3 + 120) != 0;
    v1 += 72;
    if (v4) {
      BOOL v6 = v1 == v2;
    }
    else {
      BOOL v6 = 1;
    }
  }
  while (!v6);
  return result;
}

uint64_t sub_1002581E8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  for (uint64_t i = *(void *)(result + 16); v1 != i; v1 += 72)
  {
    uint64_t v3 = sub_100085D38(v1);
    BOOL result = nullsub_22(v3);
  }
  return result;
}

uint64_t sub_100258238(void *a1, uint64_t a2)
{
  int v4 = (_DWORD *)a1[45];
  if (!v4[2] || ((*(uint64_t (**)(_DWORD *))(*(void *)v4 + 40))(v4) & 1) == 0)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v10);
  }
  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  if (v6 == v5) {
    return 0;
  }
  int v7 = 0;
  do
  {
    uint64_t v8 = sub_100085D38(v6);
    v7 |= sub_10024C2FC(v8, a2);
    v6 += 72;
  }
  while (v6 != v5);
  return v7 & 1;
}

void sub_100258340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10025835C(void *a1, int a2)
{
  if (sub_1001F4120((uint64_t)(a1 + 52), a2))
  {
    sub_100254808(a1);
  }
}

void sub_1002583A8(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

uint64_t sub_1002583D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 368);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)(a1 + 352);
  *(void *)(a1 + 352) = 0;
  if (v4) {
    operator delete(v4);
  }
  sub_1002585C0(a1 + 288);
  if (*(unsigned char *)(a1 + 80))
  {
    sub_1000A45A0(a1 + 88);
    *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  int v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

uint64_t sub_100258574(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1002585C0(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (v2)
    {
      *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void **)(a1 + 8);
      if (v4 != v3)
      {
        uint64_t v6 = v4 - 168;
        do
        {
          int v8 = *(_DWORD *)(v4 - 176);
          if (v8 == v8 >> 31)
          {
            if (*(unsigned char *)(v4 - 128)) {
              *(unsigned char *)(v4 - 128) = 0;
            }
          }
          else
          {
            uint64_t v7 = *(void *)(v4 - 168);
            if (v8 < 0)
            {
              if (v7) {
                (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
              }
            }
            else
            {
              (*(void (**)(uint64_t))v7)(v4 - 168);
            }
          }
          v4 -= 208;
          v6 -= 208;
        }
        while (v4 != v3);
        uint64_t v5 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 16) = v3;
      operator delete(v5);
    }
    *(unsigned char *)a1 = 0;
  }
}

uint64_t sub_1002586BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    sub_1001AB5F8(a1 + 88, a2 + 88);
    *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
  }
  *(unsigned char *)(a1 + 288) = 0;
  if (*(unsigned char *)(a2 + 288))
  {
    sub_10023BDF4((void *)(a1 + 296), (uint64_t *)(a2 + 296));
    *(unsigned char *)(a1 + 288) = 1;
  }
  sub_100258820(a1 + 352, a2 + 352);
  return a1;
}

void sub_1002587C0(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 80))
  {
    sub_1000A45A0(v1 + 88);
    *(unsigned char *)(v1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  sub_1000BA884(v3);
  sub_1000BA884(v2);
  sub_1000BA884(v1 + 24);
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100258820(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    sub_100258964(a1, (uint64_t)(i + 4), i + 4);
  return a1;
}

void sub_10025893C(_Unwind_Exception *a1)
{
  sub_100258574(v1);
  _Unwind_Resume(a1);
}

void sub_100258950(_Unwind_Exception *a1)
{
  sub_100258574(v1);
  _Unwind_Resume(a1);
}

void *sub_100258964(uint64_t a1, uint64_t a2, int *a3)
{
  int64_t v46 = &v45;
  uint64_t v7 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    unint64_t v8 = *(void *)v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_58;
    }
  }
  else
  {
    unint64_t v8 = sub_100258DC8((uint64_t)&v46, (unsigned __int8 *)(a2 + 8));
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_58;
    }
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v3 = v8;
    if (v8 >= v9) {
      unint64_t v3 = v8 % v9;
    }
  }
  else
  {
    unint64_t v3 = (v9 - 1) & v8;
  }
  uint8x8_t v11 = *(void **)(*(void *)a1 + 8 * v3);
  if (v11)
  {
    char v12 = (void *)*v11;
    if (*v11)
    {
      int v13 = *(_DWORD *)a2;
      int v14 = (v13 >> 31) ^ v13;
      BOOL v15 = v13 >> 31 == v13;
      uint64_t v16 = *(void *)(a2 + 8);
      if (v10.u32[0] <= 1uLL)
      {
        unint64_t v17 = v9 - 1;
        if (v15)
        {
          while (1)
          {
            uint64_t v18 = v12[1];
            if (v18 == v8)
            {
              if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16) {
                return v12;
              }
            }
            else if ((v18 & v17) != v3)
            {
              goto LABEL_58;
            }
            char v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_58;
            }
          }
        }
        while (1)
        {
          uint64_t v19 = v12[1];
          if (v19 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
            {
              BOOL v20 = v12[3] == *(void *)v7 && v12[4] == *(void *)(v7 + 8);
              if (v20 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16)) {
                return v12;
              }
            }
          }
          else if ((v19 & v17) != v3)
          {
            goto LABEL_58;
          }
          char v12 = (void *)*v12;
          if (!v12) {
            goto LABEL_58;
          }
        }
      }
      if (v15)
      {
        while (1)
        {
          unint64_t v22 = v12[1];
          if (v22 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16) {
              return v12;
            }
          }
          else
          {
            if (v22 >= v9) {
              v22 %= v9;
            }
            if (v22 != v3) {
              goto LABEL_58;
            }
          }
          char v12 = (void *)*v12;
          if (!v12) {
            goto LABEL_58;
          }
        }
      }
      do
      {
        unint64_t v23 = v12[1];
        if (v23 == v8)
        {
          if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
          {
            BOOL v24 = v12[3] == *(void *)v7 && v12[4] == *(void *)(v7 + 8);
            if (v24 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16)) {
              return v12;
            }
          }
        }
        else
        {
          if (v23 >= v9) {
            v23 %= v9;
          }
          if (v23 != v3) {
            break;
          }
        }
        char v12 = (void *)*v12;
      }
      while (v12);
    }
  }
LABEL_58:
  uint64_t v26 = operator new(0x30uLL);
  char v12 = v26;
  *uint64_t v26 = 0;
  v26[1] = v8;
  uint64_t v27 = v26 + 3;
  int v30 = *a3;
  unint64_t v29 = a3 + 2;
  int v28 = v30;
  int v31 = v30 >> 31;
  if (v30 >> 31 == v30)
  {
    *uint64_t v27 = *(void *)v29;
    int v31 = v28;
  }
  else
  {
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v29;
    *((_DWORD *)v26 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v29[4];
  }
  *((_DWORD *)v26 + 4) = v31 ^ v28;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (v9 && (float)(v33 * (float)v9) >= v32)
  {
    unint64_t v8 = v3;
  }
  else
  {
    BOOL v34 = 1;
    if (v9 >= 3) {
      BOOL v34 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v9);
    unint64_t v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_74;
    }
    if (prime < v9)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < v9) {
LABEL_74:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        v8 %= v9;
      }
    }
    else
    {
      v8 &= v9 - 1;
    }
  }
  uint64_t v41 = *(void *)a1;
  __int16 v42 = *(void **)(*(void *)a1 + 8 * v8);
  if (v42)
  {
    *char v12 = *v42;
LABEL_97:
    *__int16 v42 = v12;
    goto LABEL_98;
  }
  *char v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v41 + 8 * v8) = a1 + 16;
  if (*v12)
  {
    unint64_t v43 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9) {
        v43 %= v9;
      }
    }
    else
    {
      v43 &= v9 - 1;
    }
    __int16 v42 = (void *)(*(void *)a1 + 8 * v43);
    goto LABEL_97;
  }
LABEL_98:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_100258DB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_100258DC8(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v2 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[8]) ^ ((0xC6A4A7935BD1E995 * a2[8]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[7]) ^ ((0xC6A4A7935BD1E995 * a2[7]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[6]) ^ ((0xC6A4A7935BD1E995 * a2[6]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[5]) ^ ((0xC6A4A7935BD1E995 * a2[5]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[4]) ^ ((0xC6A4A7935BD1E995 * a2[4]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[3]) ^ ((0xC6A4A7935BD1E995 * a2[3]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[2]) ^ ((0xC6A4A7935BD1E995 * a2[2]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[1]) ^ ((0xC6A4A7935BD1E995 * a2[1]) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * *a2) ^ ((0xC6A4A7935BD1E995 * *a2) >> 47)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u))
     + 3864292196u;
  unint64_t v3 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[17]) ^ ((0xC6A4A7935BD1E995 * a2[17]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[16]) ^ ((0xC6A4A7935BD1E995 * a2[16]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[15]) ^ ((0xC6A4A7935BD1E995 * a2[15]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[14]) ^ ((0xC6A4A7935BD1E995 * a2[14]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[13]) ^ ((0xC6A4A7935BD1E995 * a2[13]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[12]) ^ ((0xC6A4A7935BD1E995 * a2[12]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[11]) ^ ((0xC6A4A7935BD1E995 * a2[11]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[10]) ^ ((0xC6A4A7935BD1E995 * a2[10]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[9]) ^ ((0xC6A4A7935BD1E995 * a2[9]) >> 47))) ^ v2) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u)) + 3864292196u))
     + 3864292196u;
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[19]) ^ ((0xC6A4A7935BD1E995 * a2[19]) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2[18]) ^ ((0xC6A4A7935BD1E995 * a2[18]) >> 47))) ^ v3) + 3864292196u))
       + 3864292196u;
}

uint64_t sub_100258FCC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  for (uint64_t i = a2; v3 != v4; v3 += 208)
  {
    int v5 = *(_DWORD *)(v3 + 32);
    if (v5 == v5 >> 31)
    {
      int v6 = *(_DWORD *)(v3 + 120);
    }
    else
    {
      if (v5 >= 0) {
        uint64_t v7 = v3 + 40;
      }
      else {
        uint64_t v7 = *(void *)(v3 + 40);
      }
      int v6 = *(_DWORD *)(v7 + 96) + 2402;
    }
    int v17 = v6;
    sub_10005B970((uint64_t *)&i, &v17);
  }
  uint64_t result = std::__sort<std::__less<int,int> &,int *>();
  unint64_t v9 = (char *)a2[1];
  if ((char *)*a2 != v9)
  {
    uint8x8_t v10 = (char *)(*a2 + 4);
    while (v10 != v9)
    {
      int v11 = *((_DWORD *)v10 - 1);
      int v12 = *(_DWORD *)v10;
      v10 += 4;
      if (v11 == v12)
      {
        int v13 = v10 - 8;
        while (v10 != v9)
        {
          int v14 = v11;
          int v11 = *(_DWORD *)v10;
          if (v14 != *(_DWORD *)v10)
          {
            *((_DWORD *)v13 + 1) = v11;
            v13 += 4;
          }
          v10 += 4;
        }
        BOOL v15 = v13 + 4;
        int64_t v16 = v9 - (v13 + 4);
        if (v9 != v13 + 4)
        {
          if (v9 != (char *)v15 + v16) {
            uint64_t result = (uint64_t)memmove(v13 + 4, (char *)v15 + v16, 0);
          }
          a2[1] = v15;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_100259114(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100259134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  sub_10025923C(a1 + 24, (uint64_t *)(a2 + 24));
  sub_10025A574(a1 + 136, a2 + 136);
  sub_10025AA10(a1 + 176, a2 + 176);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v5 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(_OWORD *)(a2 + 240);
  long long v7 = *(_OWORD *)(a2 + 256);
  long long v8 = *(_OWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v7;
  *(_OWORD *)(a1 + 272) = v8;
  *(_OWORD *)(a1 + 24sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v6;
  return a1;
}

void sub_1002591E8(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void ***)(v1 + 152);
  if (v5) {
    sub_1003A6158(v5);
  }
  long long v6 = *v3;
  *uint64_t v3 = 0;
  if (v6) {
    operator delete(v6);
  }
  sub_10025D07C(v2);
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

void sub_100259228(_Unwind_Exception *a1)
{
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10025923C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100259334(a1, (uint64_t)a2);
  sub_100259B24(v4 + 40, (uint64_t)(a2 + 5));
  *(void *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_100015648((char *)(a1 + 80), a2[10], a2[11], 0xAAAAAAAAAAAAAAABLL * ((a2[11] - a2[10]) >> 3));
  *(void *)(a1 + 104) = a2[13];
  return a1;
}

void sub_1002592B0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void ***)(v1 + 56);
  if (v4) {
    sub_1003A61D8(v4);
  }
  uint64_t v5 = *v2;
  *int v2 = 0;
  if (v5)
  {
    operator delete(v5);
    sub_100259A40(v1, *(void **)(v1 + 16));
    long long v6 = *(void **)v1;
    *(void *)uint64_t v1 = 0;
    if (!v6) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_100259A40(v1, *(void **)(v1 + 16));
    long long v6 = *(void **)v1;
    *(void *)uint64_t v1 = 0;
    if (!v6) {
      goto LABEL_5;
    }
  }
  operator delete(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_100259334(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1002594B4(a1, i + 2, i + 2);
  return a1;
}

void sub_100259450(_Unwind_Exception *a1)
{
  sub_100259478(v1);
  _Unwind_Resume(a1);
}

void sub_100259464(_Unwind_Exception *a1)
{
  sub_100259478(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100259478(uint64_t a1)
{
  sub_100259A40(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *sub_1002594B4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v7 = (uint64_t ***)(*(uint64_t (**)(void))(*(void *)*a2 + 64))();
  unint64_t v8 = sub_100077F68((uint64_t)v32, v7);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    int v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t result = (void *)*v12;
      if (*v12)
      {
        uint64_t v14 = *a2;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = result[1];
            if (v16 == v9)
            {
              if (result[2] == v14) {
                return result;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = result[1];
          if (v15 == v9)
          {
            if (result[2] == v14) {
              return result;
            }
          }
          else
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
            if (v15 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  int v17 = operator new(0x48uLL);
  v32[0] = v17;
  v32[1] = a1 + 16;
  char v33 = 0;
  *int v17 = 0;
  v17[1] = v9;
  sub_100259874(v17 + 2, a3);
  char v33 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v26) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v26)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v26 < 3uLL || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < *(void *)&v26) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v30 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        BOOL v20 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        char v21 = (void *)v32[0];
        if (v20) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        BOOL v20 = *(void **)(*(void *)a1 + 8 * v9);
        char v21 = (void *)v32[0];
        if (v20) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v30 & v9;
      BOOL v20 = *(void **)(*(void *)a1 + 8 * (v30 & v9));
      char v21 = (void *)v32[0];
      if (v20) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *char v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v32[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v32[0])
    {
      unint64_t v31 = *(void *)(*(void *)v32[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v31 >= v10) {
          v31 %= v10;
        }
      }
      else
      {
        v31 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v31) = v32[0];
    }
    goto LABEL_61;
  }
  BOOL v20 = *(void **)(*(void *)a1 + 8 * v3);
  char v21 = (void *)v32[0];
  if (!v20) {
    goto LABEL_50;
  }
LABEL_26:
  *char v21 = *v20;
  *BOOL v20 = v32[0];
LABEL_61:
  uint64_t result = (void *)v32[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_100259840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    sub_10025994C(v10, a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100259874(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  BOOL v6 = (unsigned char *)a2[1];
  int8x8_t v5 = (unsigned char *)a2[2];
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_1000A9108();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    a1[1] = v8;
    a1[2] = v8;
    unint64_t v9 = &v8[8 * (v7 >> 3)];
    a1[3] = v9;
    memcpy(v8, v6, v7);
    a1[2] = v9;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_1001F3E0C(a1 + 4, a2[4], a2[5], 0xCCCCCCCCCCCCCCCDLL * ((a2[5] - a2[4]) >> 4));
  return a1;
}

void sub_10025992C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10025994C(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[6];
    if (v3)
    {
      uint64_t v4 = __p[7];
      int8x8_t v5 = (void *)__p[6];
      if (v4 != v3)
      {
        do
        {
          BOOL v6 = *(std::__shared_weak_count **)(v4 - 16);
          if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          v4 -= 80;
        }
        while (v4 != v3);
        int8x8_t v5 = (void *)__p[6];
      }
      __p[7] = v3;
      operator delete(v5);
    }
    int64_t v7 = (void *)__p[3];
    if (v7)
    {
      __p[4] = v7;
      operator delete(v7);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_100259A40(int a1, void *__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[6];
      if (v4)
      {
        uint64_t v5 = v2[7];
        BOOL v6 = (void *)v2[6];
        if (v5 != v4)
        {
          do
          {
            int64_t v7 = *(std::__shared_weak_count **)(v5 - 16);
            if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
            v5 -= 80;
          }
          while (v5 != v4);
          BOOL v6 = (void *)v2[6];
        }
        v2[7] = v4;
        operator delete(v6);
      }
      unint64_t v8 = (void *)v2[3];
      if (v8)
      {
        v2[4] = v8;
        operator delete(v8);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100259B24(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    sub_100259CEC(a1, i + 4, i + 4);
  return a1;
}

void sub_100259C40(_Unwind_Exception *a1)
{
  sub_100259C68(v1);
  _Unwind_Resume(a1);
}

void sub_100259C54(_Unwind_Exception *a1)
{
  sub_100259C68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100259C68(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int8x8_t v5 = (void *)*v2;
      BOOL v6 = (void *)v2[5];
      if (v6)
      {
        do
        {
          unint64_t v7 = (void *)*v6;
          operator delete(v6);
          BOOL v6 = v7;
        }
        while (v7);
      }
      uint8x8_t v8 = (void *)v2[3];
      v2[3] = 0;
      if (v8) {
        operator delete(v8);
      }
      operator delete(v2);
      int v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *sub_100259CEC(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = result[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == v6) {
                return result;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == v6) {
              return result;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  unint64_t v27 = operator new(0x40uLL);
  *unint64_t v27 = 0;
  v27[1] = v6;
  *((_DWORD *)v27 + 4) = *a3;
  sub_10025A0D4((uint64_t)(v27 + 3), (uint64_t)(a3 + 2));
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v21) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v21)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v21 < 3uLL || (uint8x8_t v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < *(void *)&v21) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v25 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        unint64_t v15 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        uint64_t v16 = v27;
        if (v15) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        unint64_t v15 = *(void **)(*(void *)a1 + 8 * v6);
        uint64_t v16 = v27;
        if (v15) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v25 & v6;
      unint64_t v15 = *(void **)(*(void *)a1 + 8 * (v25 & v6));
      uint64_t v16 = v27;
      if (v15) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *uint64_t v16 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v27)
    {
      unint64_t v26 = *(void *)(*v27 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v26 >= v7) {
          v26 %= v7;
        }
      }
      else
      {
        v26 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v27;
    }
    goto LABEL_61;
  }
  unint64_t v15 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v16 = v27;
  if (!v15) {
    goto LABEL_50;
  }
LABEL_26:
  *uint64_t v16 = *v15;
  *unint64_t v15 = v27;
LABEL_61:
  uint64_t result = v27;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_10025A03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10025A064((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025A050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10025A064((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025A064(uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[5];
      if (v3)
      {
        do
        {
          uint64_t v4 = (void *)*v3;
          operator delete(v3);
          unint64_t v3 = v4;
        }
        while (v4);
      }
      int8x8_t v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5) {
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10025A0D4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_10025A218(a1, i + 2, i + 2);
  return a1;
}

void sub_10025A1F0(_Unwind_Exception *a1)
{
  sub_100258574(v1);
  _Unwind_Resume(a1);
}

void sub_10025A204(_Unwind_Exception *a1)
{
  sub_100258574(v1);
  _Unwind_Resume(a1);
}

void *sub_10025A218(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      float v13 = (void *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            float v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          float v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  BOOL v17 = operator new(0x18uLL);
  *BOOL v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    int8x8_t v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *BOOL v17 = *v21;
LABEL_61:
      *int8x8_t v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_37;
    }
    if (prime < v10)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v10) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v20 = *(void *)a1;
        int8x8_t v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v20 = *(void *)a1;
        int8x8_t v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v20 = *(void *)a1;
      int8x8_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  *BOOL v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    unint64_t v30 = *(void *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    int8x8_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_10025A560(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10025A574(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(uint64_t ****)(a2 + 16); i; uint64_t i = (uint64_t ***)*i)
    sub_10025A6B8(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_10025A690(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

void sub_10025A6A4(_Unwind_Exception *a1)
{
  sub_1000D8B48(v1);
  _Unwind_Resume(a1);
}

const void **sub_10025A6B8(uint64_t a1, uint64_t ***a2, uint64_t a3)
{
  unint64_t v7 = sub_100077F68((uint64_t)v33, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint8x8_t v11 = *(const void ****)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v14 = (unint64_t)v12[1];
            if (v14 == v8)
            {
              if (sub_1000706F4((const void ***)v12 + 2, (unsigned __int8 ***)a2)) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v12 = (const void **)*v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = (unint64_t)v12[1];
          if (v13 == v8)
          {
            if (sub_1000706F4((const void ***)v12 + 2, (unsigned __int8 ***)a2)) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (const void **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  uint64_t v15 = (const void ***)(a1 + 16);
  uint64_t v16 = (const void **)operator new(0x30uLL);
  uint64_t v12 = v16;
  v33[0] = v16;
  v33[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = (const void *)v8;
  BOOL v17 = *(atomic_ullong **)(a3 + 8);
  v16[2] = *(const void **)a3;
  v16[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit(v17 + 1, 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)v16 + 2) = *(_OWORD *)(a3 + 16);
  char v34 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v9 && (float)(v19 * (float)v9) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    int8x8_t v21 = *(const void ****)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_28:
      *uint64_t v12 = *v21;
LABEL_63:
      *int8x8_t v21 = v12;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v26) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v26)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v26 < 3uLL || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < *(void *)&v26) {
LABEL_39:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v30 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v3 = v8 % v9;
        uint64_t v20 = *(void *)a1;
        int8x8_t v21 = *(const void ****)(*(void *)a1 + 8 * (v8 % v9));
        if (v21) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v3 = v8;
        uint64_t v20 = *(void *)a1;
        int8x8_t v21 = *(const void ****)(*(void *)a1 + 8 * v8);
        if (v21) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v3 = v30 & v8;
      uint64_t v20 = *(void *)a1;
      int8x8_t v21 = *(const void ****)(*(void *)a1 + 8 * (v30 & v8));
      if (v21) {
        goto LABEL_28;
      }
    }
  }
  *uint64_t v12 = *v15;
  *uint64_t v15 = v12;
  *(void *)(v20 + 8 * v3) = v15;
  if (*v12)
  {
    unint64_t v31 = *((void *)*v12 + 1);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v31 >= v9) {
        v31 %= v9;
      }
    }
    else
    {
      v31 &= v9 - 1;
    }
    int8x8_t v21 = (const void ***)(*(void *)a1 + 8 * v31);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_10025A9FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10022B004((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025AA10(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_10006338C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    sub_10025AB54(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_10025AB2C(_Unwind_Exception *a1)
{
  sub_100242B38(v1);
  _Unwind_Resume(a1);
}

void sub_10025AB40(_Unwind_Exception *a1)
{
  sub_100242B38(v1);
  _Unwind_Resume(a1);
}

void *sub_10025AB54(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = result[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == v6) {
                return result;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == v6) {
              return result;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  unint64_t v27 = operator new(0x38uLL);
  *unint64_t v27 = 0;
  v27[1] = v6;
  *((_DWORD *)v27 + 4) = *(_DWORD *)a3;
  v27[3] = *(void *)(a3 + 8);
  sub_10025AFA4(v27 + 4, (uint64_t *)(a3 + 16));
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v13 / v14);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v21 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v21) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v21)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v21 < 3uLL || (uint8x8_t v23 = (uint8x8_t)vcnt_s8(v21), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < *(void *)&v21) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v25 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v15 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        uint64_t v16 = v27;
        if (v15) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v15 = *(void **)(*(void *)a1 + 8 * v6);
        uint64_t v16 = v27;
        if (v15) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v25 & v6;
      uint64_t v15 = *(void **)(*(void *)a1 + 8 * (v25 & v6));
      uint64_t v16 = v27;
      if (v15) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *uint64_t v16 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v27)
    {
      unint64_t v26 = *(void *)(*v27 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v26 >= v7) {
          v26 %= v7;
        }
      }
      else
      {
        v26 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v27;
    }
    goto LABEL_61;
  }
  uint64_t v15 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v16 = v27;
  if (!v15) {
    goto LABEL_50;
  }
LABEL_26:
  *uint64_t v16 = *v15;
  *uint64_t v15 = v27;
LABEL_61:
  uint64_t result = v27;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_10025AEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10025AED4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025AEC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10025AED4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025AED4(uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[4];
      if (v3)
      {
        uint64_t v4 = v2[5];
        int8x8_t v5 = (void *)v2[4];
        if (v4 != v3)
        {
          do
          {
            unint64_t v6 = *(std::__shared_weak_count **)(v4 - 8);
            if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
            v4 -= 16;
          }
          while (v4 != v3);
          int8x8_t v5 = (void *)v2[4];
        }
        v2[5] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void *sub_10025AFA4(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      sub_1000A9108();
    }
    unint64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[16 * (v5 >> 4)];
    do
    {
      uint64_t v8 = v3 + v7;
      uint64_t v9 = &v6[v7];
      uint64_t v10 = *(void *)(v3 + v7 + 8);
      *(void *)uint64_t v9 = *(void *)(v3 + v7);
      *((void *)v9 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      v7 += 16;
    }
    while (v8 + 16 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_10025B050(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_1003A623C((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10025B070@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10025B0A4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_10025B0C0(uint64_t a1, uint64_t ***a2, const void **a3, const void **a4)
{
  unint64_t v9 = sub_100077F68((uint64_t)v36, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v13 = *(const void ****)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      float v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            unint64_t v16 = (unint64_t)v14[1];
            if (v16 == v10)
            {
              if (sub_1000706F4((const void ***)v14 + 2, (unsigned __int8 ***)a2)) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            float v14 = (const void **)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = (unint64_t)v14[1];
          if (v15 == v10)
          {
            if (sub_1000706F4((const void ***)v14 + 2, (unsigned __int8 ***)a2)) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          float v14 = (const void **)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  BOOL v17 = (const void ***)(a1 + 16);
  unint64_t v18 = (const void **)operator new(0x30uLL);
  float v14 = v18;
  v36[0] = v18;
  v36[1] = a1 + 16;
  *unint64_t v18 = 0;
  v18[1] = (const void *)v10;
  unint64_t v19 = (atomic_ullong *)a3[1];
  v18[2] = *a3;
  void v18[3] = v19;
  if (v19) {
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = (atomic_ullong *)a4[1];
  v18[4] = *a4;
  v18[5] = v20;
  if (v20) {
    atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
  }
  char v37 = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v11 && (float)(v22 * (float)v11) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(const void ****)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_30:
      *float v14 = *v24;
LABEL_65:
      *uint64_t v24 = v14;
      goto LABEL_66;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_41;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_41:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v33 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(const void ****)(*(void *)a1 + 8 * (v10 % v11));
        if (v24) {
          goto LABEL_30;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(const void ****)(*(void *)a1 + 8 * v10);
        if (v24) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      unint64_t v4 = v33 & v10;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(const void ****)(*(void *)a1 + 8 * (v33 & v10));
      if (v24) {
        goto LABEL_30;
      }
    }
  }
  *float v14 = *v17;
  *BOOL v17 = v14;
  *(void *)(v23 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v34 = *((void *)*v14 + 1);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v34 >= v11) {
        v34 %= v11;
      }
    }
    else
    {
      v34 &= v11 - 1;
    }
    uint64_t v24 = (const void ***)(*(void *)a1 + 8 * v34);
    goto LABEL_65;
  }
LABEL_66:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_10025B420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10025B434((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025B434(uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[5];
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      unint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_10025B50C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10025B52C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462C18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10025B588(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
    *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = &v2[v4 >> 7];
    uint64_t v6 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v4) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(void *)(a1 + 40) + v4) & 0x7F);
    if ((char *)*v5 + 32 * (v4 & 0x7F) != (void *)v6)
    {
      uint64_t v7 = (void (***)(void))((char *)*v5 + 32 * (v4 & 0x7F));
      do
      {
        uint64_t v8 = *v7;
        v7 += 4;
        (*v8)();
        if ((char *)v7 - (unsigned char *)*v5 == 4096)
        {
          unint64_t v9 = (void (***)(void))v5[1];
          ++v5;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (void (***)(void))v6);
      int v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
    *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
    unint64_t v10 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        uint64_t v3 = *(void ***)(a1 + 16);
        int v2 = (void **)(*(void *)(a1 + 8) + 8);
        *(void *)(a1 + 8) = v2;
        unint64_t v10 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 64;
    goto LABEL_15;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 128;
LABEL_15:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      float v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10025B710(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10025B730(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462C68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10025B784(uint64_t a1)
{
  sub_10025B7B0((uint64_t)&v1, (void **)(a1 + 24));
}

void sub_10025B7B0(uint64_t a1, void **a2)
{
  sub_1002424DC((uint64_t)(a2 + 5));
  uint64_t v3 = (std::__shared_weak_count *)a2[4];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    unint64_t v4 = (char *)*a2;
    if (!*a2) {
      return;
    }
  }
  else
  {
    unint64_t v4 = (char *)*a2;
    if (!*a2) {
      return;
    }
  }
  uint64_t v5 = (char *)a2[1];
  uint64_t v6 = v4;
  if (v5 != v4)
  {
    do
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 - 1);
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      v5 -= 16;
    }
    while (v5 != v4);
    uint64_t v6 = *a2;
  }
  a2[1] = v4;

  operator delete(v6);
}

void sub_10025B8DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_10025B914(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 24);
  if (result)
  {
    sub_1001E385C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10025B95C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteI17ParticleGeneratorEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteI17ParticleGeneratorEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteI17ParticleGeneratorEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteI17ParticleGeneratorEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_10025B9D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    sub_1000A0CB0(i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10025BA24(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 392;
    sub_1002583D8(i - 392);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10025BA78(void *a1, uint64_t a2)
{
  uint64_t v3 = 0x7D6343EB1A1F58D1 * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xA72F05397829CBLL) {
    sub_1000A9108();
  }
  if (0xFAC687D6343EB1A2 * ((uint64_t)(a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xFAC687D6343EB1A2 * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x7D6343EB1A1F58D1 * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x5397829CBC14E5) {
    unint64_t v6 = 0xA72F05397829CBLL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xA72F05397829CBLL) {
      sub_1000A6A10();
    }
    uint64_t v7 = (char *)operator new(392 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[392 * v3];
  *((void *)&v15 + 1) = &v7[392 * v6];
  sub_10025BC34(v14, a2);
  uint64_t v8 = 0;
  unint64_t v10 = (void *)*a1;
  for (uint64_t i = a1[1]; (void *)(i + v8) != v10; sub_1002586BC(v8 + v14, v8 + i))
    v8 -= 392;
  uint64_t v12 = (void *)*a1;
  uint64_t v11 = a1[1];
  *a1 = v14 + v8;
  *(void *)&long long v15 = v14 + 392;
  for (*(_OWORD *)(a1 + 1) = v15; (void *)v11 != v12; uint64_t v11 = sub_1002583D8(v11 - 392))
    ;
  if (v12) {
    operator delete(v12);
  }
  return v14 + 392;
}

void sub_10025BBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10025BA24((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025BC34(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    sub_1001AB5F8(a1 + 88, a2 + 88);
    *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
  }
  *(unsigned char *)(a1 + 288) = 0;
  if (*(unsigned char *)(a2 + 288))
  {
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 312) = 0;
    uint64_t v4 = *(void *)(a2 + 304);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = v4;
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 312) = 0;
    *(void *)(a1 + 32sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    *(_OWORD *)(a1 + 32sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_OWORD *)(a2 + 320);
    uint64_t v5 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a2 + 328) = 0;
    *(void *)(a2 + 336) = 0;
    *(void *)(a2 + 32sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
    *(void *)(a1 + 344) = v5;
    *(unsigned char *)(a1 + 288) = 1;
  }
  uint64_t v6 = *(void *)(a2 + 352);
  *(void *)(a2 + 352) = 0;
  *(void *)(a1 + 352) = v6;
  *(void *)(a1 + 36sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 360);
  *(void *)(a2 + 36sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  uint64_t v7 = *(void *)(a2 + 368);
  *(void *)(a1 + 368) = v7;
  uint64_t v8 = *(void *)(a2 + 376);
  *(void *)(a1 + 376) = v8;
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  if (v8)
  {
    unint64_t v9 = *(void *)(v7 + 8);
    unint64_t v10 = *(void *)(a1 + 360);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        v9 %= v10;
      }
    }
    else
    {
      v9 &= v10 - 1;
    }
    *(void *)(v6 + 8 * v9) = a1 + 368;
    *(void *)(a2 + 368) = 0;
    *(void *)(a2 + 376) = 0;
  }
  return a1;
}

void sub_10025BD9C(_Unwind_Exception *a1)
{
  sub_1000BA884(v3);
  sub_1000BA884(v2);
  sub_1000BA884(v1 + 24);
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10025BDCC(uint64_t *a1)
{
  sub_10000C898((uint64_t)v7);
  sub_10002986C(v8, (uint64_t)"[", 1);
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    std::ostream::operator<<();
    for (uint64_t i = v3 + 4; i != v2; i += 4)
    {
      sub_10002986C(v8, (uint64_t)", ", 2);
      std::ostream::operator<<();
    }
  }
  sub_10002986C(v8, (uint64_t)"]", 1);
  std::stringbuf::str();
  *(void *)((char *)v7
  v8[0] = v5;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10025BFB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025BFC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025BFD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025BFEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000DEA14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025C000(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    char v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        unint64_t v34 = (char *)operator new(8 * v31);
        unint64_t v35 = &v34[8 * v32];
        unint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            double v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              double v77 = (long long *)(v6 + 3);
              double v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                _OWORD *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_1000A6A10();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    long long v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      int v91 = operator new(0x1000uLL);
      sub_100192E00((char **)a1, &v91);
      return;
    }
    int v91 = operator new(0x1000uLL);
    sub_100192F90((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    char v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        unint64_t v34 = (char *)operator new(8 * v42);
        unint64_t v35 = &v34[8 * v43];
        unint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            uint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              uint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *uint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  BOOL v25 = (char *)operator new(8 * v24);
  unint64_t v26 = operator new(0x1000uLL);
  unint64_t v27 = &v25[8 * v21];
  uint8x8_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    char v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_1000A6A10();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      unint64_t v27 = &v49[8 * (v48 >> 2)];
      uint8x8_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      BOOL v25 = v49;
      *(void *)unint64_t v27 = v90;
      int8x8_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)unint64_t v27 = v26;
      int8x8_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_1000A6A10();
          }
          double v60 = (char *)operator new(8 * v59);
          BOOL v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          int8x8_t v29 = v53;
          if (!v37)
          {
            int8x8_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            __double2 v64 = &v60[8 * v61];
            double v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            __double2 v64 = &v60[8 * v61];
            double v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            __double2 v64 = &v53[v68];
            double v65 = &v27[v68];
            std::string::value_type v69 = (long long *)(v27 + 16);
            double v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)double v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)__double2 v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint8x8_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          uint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          int8x8_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          BOOL v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      uint64_t v51 = v53 - 8;
      unint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)unint64_t v27 = v26;
  int8x8_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  uint64_t v51 = v27;
LABEL_46:
  long long v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_10025C570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_10025C58C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10025C5A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10025C5B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10025C5D0(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int *a6, uint64_t *a7)
{
  uint64_t v8 = 0x14C1BACF914C1BADLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0xDD67C8A60DD67CLL) {
    sub_1000A9108();
  }
  if (0x2983759F2298375ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v9) {
    unint64_t v9 = 0x2983759F2298375ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x14C1BACF914C1BADLL * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x6EB3E45306EB3ELL) {
    unint64_t v14 = 0xDD67C8A60DD67CLL;
  }
  else {
    unint64_t v14 = v9;
  }
  if (v14)
  {
    if (v14 > 0xDD67C8A60DD67CLL) {
      sub_1000A6A10();
    }
    long long v15 = (char *)operator new(296 * v14);
  }
  else
  {
    long long v15 = 0;
  }
  uint64_t v22 = (uint64_t)&v15[296 * v8];
  *((void *)&v23 + 1) = &v15[296 * v14];
  sub_1002540C0(v22, a2, a3, *a6, a7);
  uint64_t v16 = 0;
  uint64_t v18 = (void *)*a1;
  for (uint64_t i = a1[1]; (void *)(i + v16) != v18; sub_100259134(v16 + v22, v16 + i))
    v16 -= 296;
  uint64_t v20 = (void *)*a1;
  uint64_t v19 = (void *)a1[1];
  *a1 = v22 + v16;
  *(void *)&long long v23 = v22 + 296;
  for (*(_OWORD *)(a1 + 1) = v23; v19 != v20; uint64_t v19 = sub_1002429C0(v19 - 37))
    ;
  if (v20) {
    operator delete(v20);
  }
  return v22 + 296;
}

void sub_10025C780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10025C7C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025C7C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 296;
    sub_1002429C0((void *)(i - 296));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10025C818(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, int *a6, uint64_t *a7)
{
  uint64_t v8 = 0x14C1BACF914C1BADLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0xDD67C8A60DD67CLL) {
    sub_1000A9108();
  }
  if (0x2983759F2298375ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v9) {
    unint64_t v9 = 0x2983759F2298375ALL * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x14C1BACF914C1BADLL * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x6EB3E45306EB3ELL) {
    unint64_t v14 = 0xDD67C8A60DD67CLL;
  }
  else {
    unint64_t v14 = v9;
  }
  if (v14)
  {
    if (v14 > 0xDD67C8A60DD67CLL) {
      sub_1000A6A10();
    }
    long long v15 = (char *)operator new(296 * v14);
  }
  else
  {
    long long v15 = 0;
  }
  uint64_t v22 = (uint64_t)&v15[296 * v8];
  *((void *)&v23 + 1) = &v15[296 * v14];
  sub_1002540C0(v22, a2, a3, *a6, a7);
  uint64_t v16 = 0;
  uint64_t v18 = (void *)*a1;
  for (uint64_t i = a1[1]; (void *)(i + v16) != v18; sub_100259134(v16 + v22, v16 + i))
    v16 -= 296;
  uint64_t v20 = (void *)*a1;
  uint64_t v19 = (void *)a1[1];
  *a1 = v22 + v16;
  *(void *)&long long v23 = v22 + 296;
  for (*(_OWORD *)(a1 + 1) = v23; v19 != v20; uint64_t v19 = sub_1002429C0(v19 - 37))
    ;
  if (v20) {
    operator delete(v20);
  }
  return v22 + 296;
}

void sub_10025C9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10025C7C4((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_10025CA0C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10025CA40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025CA5C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_10025CA80()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10025CAF8()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_10025CB70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    unint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 16);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_10025CC34(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  uint64_t v38 = a1 + 40;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a3;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  double v6 = -INFINITY;
  if (*a2 != v5)
  {
    while (1)
    {
      uint64_t v39 = *(void *)(v4 + 56);
      uint64_t v40 = (int *)&v39;
      uint64_t v8 = sub_10025D64C(a1, &v39, (uint64_t)&unk_1003FAE80, (void **)&v40);
      unint64_t v9 = v8;
      unint64_t v10 = *((void *)v8 + 7);
      if (v10 >= *((void *)v8 + 8))
      {
        unint64_t v14 = sub_10025D9E0((void **)v8 + 6, (__n128 *)v4);
      }
      else
      {
        sub_100033728(*((__n128 **)v8 + 7), (__n128 *)v4);
        long long v11 = *(_OWORD *)(v4 + 16);
        long long v12 = *(_OWORD *)(v4 + 32);
        *(_WORD *)(v10 + 48) = *(_WORD *)(v4 + 48);
        *(_OWORD *)(v10 + 16) = v11;
        *(_OWORD *)(v10 + 32) = v12;
        *(void *)(v10 + 56) = *(void *)(v4 + 56);
        uint64_t v13 = *(void *)(v4 + 64);
        *(void *)(v10 + 64) = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)(v10 + 72) = *(void *)(v4 + 72);
        unint64_t v14 = (char *)(v10 + 80);
        *((void *)v9 + 7) = v10 + 80;
      }
      *((void *)v9 + 7) = v14;
      uint64_t v40 = (int *)((*(uint64_t (**)(uint64_t))(*(void *)v39 + 56))(v39) + 1616);
      long long v15 = sub_10025DC7C(v38, v40, (uint64_t)&unk_1003FAE80, &v40);
      sub_10025DFC0((uint64_t)(v15 + 24), &v39, &v39);
      double v16 = sub_100273560(v4);
      double v17 = v16;
      uint64_t v19 = (double *)*((void *)v9 + 4);
      unint64_t v18 = *((void *)v9 + 5);
      if ((unint64_t)v19 >= v18) {
        break;
      }
      *uint64_t v19 = v16;
      uint64_t v7 = (uint64_t)(v19 + 1);
LABEL_4:
      *((void *)v9 + 4) = v7;
      if (v6 < v17) {
        double v6 = v17;
      }
      v4 += 80;
      if (v4 == v5) {
        goto LABEL_32;
      }
    }
    uint64_t v20 = (double *)*((void *)v9 + 3);
    uint64_t v21 = v19 - v20;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61) {
      sub_1000A9108();
    }
    uint64_t v23 = v18 - (void)v20;
    if (v23 >> 2 > v22) {
      unint64_t v22 = v23 >> 2;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      if (v24 >> 61) {
        sub_1000A6A10();
      }
      BOOL v25 = operator new(8 * v24);
      unint64_t v26 = (double *)&v25[8 * v21];
      *unint64_t v26 = v17;
      uint64_t v7 = (uint64_t)(v26 + 1);
      if (v19 == v20) {
        goto LABEL_30;
      }
    }
    else
    {
      BOOL v25 = 0;
      unint64_t v26 = (double *)(8 * v21);
      *(double *)(8 * v21) = v16;
      uint64_t v7 = 8 * v21 + 8;
      if (v19 == v20)
      {
LABEL_30:
        *((void *)v9 + 3) = v26;
        *((void *)v9 + 4) = v7;
        *((void *)v9 + 5) = &v25[8 * v24];
        if (v20) {
          operator delete(v20);
        }
        goto LABEL_4;
      }
    }
    unint64_t v27 = (char *)(v19 - 1) - (char *)v20;
    if (v27 < 0x58) {
      goto LABEL_40;
    }
    if ((unint64_t)((char *)v20 - v25) < 0x20) {
      goto LABEL_40;
    }
    uint64_t v28 = (v27 >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v30 = &v19[v29 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v26 = (double *)((char *)v26 - v29);
    unint64_t v31 = &v25[8 * v21 - 16];
    unint64_t v32 = v19 - 2;
    uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      _OWORD *v31 = v34;
      v31 -= 2;
      v32 -= 4;
      v33 -= 4;
    }
    while (v33);
    uint64_t v19 = v30;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_40:
      do
      {
        uint64_t v35 = *((void *)v19-- - 1);
        *((void *)v26-- - 1) = v35;
      }
      while (v19 != v20);
    }
    goto LABEL_30;
  }
LABEL_32:
  for (uint64_t i = a1 + 16; ; sub_100357DBC((float64x2_t **)(i + 24), v6))
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
  }
  return a1;
}

void sub_10025CF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11)
{
  *(void *)(v12 + 56) = v13;
  sub_1000E0AA4(a10);
  sub_100259C68(a11);
  sub_100259478(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_10025CF94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    uint64_t v4 = *(void **)(a1 + 80);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 56);
  if (v5)
  {
    do
    {
      unint64_t v9 = (void *)*v5;
      unint64_t v10 = (void *)v5[5];
      if (v10)
      {
        do
        {
          uint64_t v11 = (void *)*v10;
          operator delete(v10);
          unint64_t v10 = v11;
        }
        while (v11);
      }
      uint64_t v12 = (void *)v5[3];
      v5[3] = 0;
      if (v12) {
        operator delete(v12);
      }
      operator delete(v5);
      uint64_t v5 = v9;
    }
    while (v9);
  }
  double v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  if (v6) {
    operator delete(v6);
  }
  sub_100259A40(a1, *(void **)(a1 + 16));
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_10025D080(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

uint64_t sub_10025D088@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*a2 + 56))();
  int8x8_t v7 = (int8x8_t)a1[6];
  if (v7)
  {
    unint64_t v8 = *(int *)(result + 1616);
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = *(int *)(result + 1616);
      if (*(void *)&v7 <= v8) {
        unint64_t v10 = v8 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v7 - 1) & v8;
    }
    uint64_t v11 = a1[5];
    uint64_t v12 = *(uint64_t ***)(v11 + 8 * v10);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        uint64_t v14 = *(void *)&v7 - 1;
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v8)
            {
              if (*((_DWORD *)v13 + 4) == v8) {
                goto LABEL_23;
              }
            }
            else if ((v15 & v14) != v10)
            {
              goto LABEL_21;
            }
            uint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_21;
            }
          }
        }
        while (1)
        {
          unint64_t v16 = v13[1];
          if (v16 == v8) {
            break;
          }
          if (v16 >= *(void *)&v7) {
            v16 %= *(void *)&v7;
          }
          if (v16 != v10) {
            goto LABEL_21;
          }
LABEL_16:
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            goto LABEL_21;
          }
        }
        if (*((_DWORD *)v13 + 4) != v8) {
          goto LABEL_16;
        }
LABEL_23:
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v17 = *(int *)(result + 1616);
          if (*(void *)&v7 <= v8) {
            unint64_t v17 = v8 % *(void *)&v7;
          }
        }
        else
        {
          unint64_t v17 = v14 & v8;
        }
        unint64_t v18 = *(uint64_t ***)(v11 + 8 * v17);
        if (!v18 || (uint64_t v19 = *v18) == 0) {
LABEL_71:
        }
          sub_10018E334("unordered_map::at: key not found");
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v19[1];
            if (v20 == v8)
            {
              if (*((_DWORD *)v19 + 4) == v8) {
                goto LABEL_35;
              }
            }
            else if ((v20 & v14) != v17)
            {
              goto LABEL_71;
            }
            uint64_t v19 = (uint64_t *)*v19;
            if (!v19) {
              goto LABEL_71;
            }
          }
        }
        while (2)
        {
          unint64_t v36 = v19[1];
          if (v36 == v8)
          {
            if (*((_DWORD *)v19 + 4) == v8)
            {
LABEL_35:
              *(_OWORD *)(a3 + 16) = 0u;
              *(_OWORD *)(a3 + 32) = 0u;
              *(_OWORD *)a3 = 0u;
              memset(v52, 0, sizeof(v52));
              int v53 = 1065353216;
              char v54 = 0;
              uint64_t v21 = (void *)v19[5];
              if (!v21) {
                return sub_1002424DC((uint64_t)v52);
              }
              BOOL v37 = a1;
              while (1)
              {
                uint64_t v42 = v21[2];
                unint64_t v22 = sub_10025E31C(a1, &v42);
                if (!v22) {
                  sub_10018E334("unordered_map::at: key not found");
                }
                uint64_t v38 = v21;
                sub_1001E4CDC((uint64_t)v52, v42, *a2, (uint64_t)v40);
                uint64_t v23 = v22[6];
                uint64_t v24 = v22[7];
                while (v23 != v24)
                {
                  if (v42 != *(void *)(v23 + 56))
                  {
                    char v45 = 0;
                    LOBYTE(__p) = 0;
                    memset(v46, 0, 24);
                    std::string::assign((std::string *)v46, "The floors should be the same.");
                    sub_10016A2C4((uint64_t)&__p, (uint64_t)v46, 1);
                    if ((v46[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v46);
                    }
                    if (v45 < 0) {
                      operator delete(__p);
                    }
                    sub_1000D11E0((uint64_t)&v43);
                  }
                  sub_100033728((__n128 *)v46, (__n128 *)v23);
                  long long v25 = *(_OWORD *)(v23 + 16);
                  long long v26 = *(_OWORD *)(v23 + 32);
                  __int16 v48 = *(_WORD *)(v23 + 48);
                  *(_OWORD *)&v46[16] = v25;
                  long long v47 = v26;
                  uint64_t v49 = *(void *)(v23 + 56);
                  unint64_t v27 = *(std::__shared_weak_count **)(v23 + 64);
                  uint64_t v50 = v27;
                  if (v27) {
                    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v51 = *(void *)(v23 + 72);
                  *(float64x2_t *)&v46[16] = vaddq_f64(v41, *(float64x2_t *)&v46[16]);
                  uint64_t v28 = a2[1];
                  *(void *)&long long v39 = *a2;
                  *((void *)&v39 + 1) = v28;
                  if (v28) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
                  }
                  sub_10024A158((uint64_t)v46, &v39);
                  uint64_t v29 = (std::__shared_weak_count *)*((void *)&v39 + 1);
                  if (*((void *)&v39 + 1)
                    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                    std::__shared_weak_count::__release_weak(v29);
                    unint64_t v30 = *(void *)(a3 + 32);
                    if (v30 >= *(void *)(a3 + 40))
                    {
LABEL_53:
                      long long v34 = sub_10025E480((void **)(a3 + 24), (__n128 *)v46);
                      goto LABEL_54;
                    }
                  }
                  else
                  {
                    unint64_t v30 = *(void *)(a3 + 32);
                    if (v30 >= *(void *)(a3 + 40)) {
                      goto LABEL_53;
                    }
                  }
                  sub_100033728((__n128 *)v30, (__n128 *)v46);
                  long long v31 = *(_OWORD *)&v46[16];
                  long long v32 = v47;
                  *(_WORD *)(v30 + 48) = v48;
                  *(_OWORD *)(v30 + 16) = v31;
                  *(_OWORD *)(v30 + 32) = v32;
                  *(void *)(v30 + 56) = v49;
                  uint64_t v33 = v50;
                  *(void *)(v30 + 64) = v50;
                  if (v33) {
                    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  *(void *)(v30 + 72) = v51;
                  long long v34 = (char *)(v30 + 80);
                  *(void *)(a3 + 32) = v30 + 80;
LABEL_54:
                  *(void *)(a3 + 32) = v34;
                  uint64_t v35 = v50;
                  if (v50)
                  {
                    if (!atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                      std::__shared_weak_count::__release_weak(v35);
                    }
                  }
                  v23 += 80;
                }
                sub_10025E71C((unint64_t *)a3, *(void **)(a3 + 8), (char *)v22[3], (char *)v22[4], (uint64_t)(v22[4] - v22[3]) >> 3);
                nullsub_17(v40);
                a1 = v37;
                uint64_t v21 = (void *)*v38;
                if (!*v38) {
                  return sub_1002424DC((uint64_t)v52);
                }
              }
            }
          }
          else
          {
            if (v36 >= *(void *)&v7) {
              v36 %= *(void *)&v7;
            }
            if (v36 != v17) {
              goto LABEL_71;
            }
          }
          uint64_t v19 = (uint64_t *)*v19;
          if (!v19) {
            goto LABEL_71;
          }
          continue;
        }
      }
    }
  }
LABEL_21:
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return result;
}

void sub_10025D594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  nullsub_17(&a14);
  sub_1002424DC((uint64_t)&a44);
  sub_10025CB70(v44);
  _Unwind_Resume(a1);
}

char *sub_10025D64C(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v8 = (uint64_t ***)(*(uint64_t (**)(void))(*(void *)*a2 + 64))();
  unint64_t v9 = sub_100077F68((uint64_t)v33, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        uint64_t v15 = *a2;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = *((void *)v14 + 1);
            if (v17 == v9)
            {
              if (*((void *)v14 + 2) == v15) {
                return v14;
              }
            }
            else if ((v17 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v14 = *(char **)v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v16 = *((void *)v14 + 1);
          if (v16 == v9)
          {
            if (*((void *)v14 + 2) == v15) {
              return v14;
            }
          }
          else
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  unint64_t v18 = (void *)(a1 + 16);
  uint64_t v14 = (char *)operator new(0x48uLL);
  uint64_t v34 = a1 + 16;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  char v35 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *(void *)uint64_t v14 = *v22;
LABEL_61:
      *unint64_t v22 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v11) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v21 = *(void *)a1;
        unint64_t v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v21 = *(void *)a1;
        unint64_t v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v10;
      uint64_t v21 = *(void *)a1;
      unint64_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_26;
      }
    }
  }
  *(void *)uint64_t v14 = *v18;
  *unint64_t v18 = v14;
  *(void *)(v21 + 8 * v4) = v18;
  if (*(void *)v14)
  {
    unint64_t v31 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_10025D9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10025994C(v11, v10);
  _Unwind_Resume(a1);
}

char *sub_10025D9E0(void **a1, __n128 *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_1000A6A10();
    }
    int8x8_t v7 = operator new(80 * v6);
  }
  else
  {
    int8x8_t v7 = 0;
  }
  unint64_t v22 = (__n128 *)&v7[10 * v3];
  unint64_t v24 = (char *)&v7[10 * v6];
  sub_100033728(v22, a2);
  __n128 v8 = a2[2];
  v22[1] = a2[1];
  v22[2] = v8;
  v22[3].n128_u16[0] = a2[3].n128_u16[0];
  unint64_t v9 = a2[4].n128_u64[0];
  v22[3].n128_u64[1] = a2[3].n128_u64[1];
  v22[4].n128_u64[0] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  v7[10 * v3 + 9] = a2[4].n128_u64[1];
  unint64_t v10 = (char *)&v7[10 * v3];
  uint64_t v11 = (char *)&v22[5];
  uint64_t v13 = (char *)*a1;
  uint8x8_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    float v19 = (char *)a1[1];
  }
  else
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t v15 = (char *)&v22[v14 / 0x10];
      sub_100033728(&v22[v14 / 0x10 - 5], (__n128 *)&v12[v14 - 80]);
      long long v16 = *(_OWORD *)&v12[v14 - 64];
      long long v17 = *(_OWORD *)&v12[v14 - 48];
      *((_WORD *)v15 - 16) = *(_WORD *)&v12[v14 - 32];
      *((_OWORD *)v15 - 4) = v16;
      *((_OWORD *)v15 - 3) = v17;
      *((void *)v15 - 3) = *(void *)&v12[v14 - 24];
      uint64_t v18 = *(void *)&v12[v14 - 16];
      *((void *)v15 - 2) = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      v22[v14 / 0x10 - 1].n128_u64[1] = *(void *)&v12[v14 - 8];
      v14 -= 80;
    }
    while (&v12[v14] != v13);
    float v19 = (char *)*a1;
    uint8x8_t v12 = (char *)a1[1];
    unint64_t v10 = (char *)&v22[v14 / 0x10];
    uint64_t v11 = (char *)&v22[5];
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v24;
  if (v12 != v19)
  {
    do
    {
      BOOL v23 = v12 - 80;
      float v20 = (std::__shared_weak_count *)*((void *)v12 - 2);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      v12 -= 80;
    }
    while (v23 != v19);
    uint8x8_t v12 = v19;
  }
  if (v12) {
    operator delete(v12);
  }
  return v11;
}

void sub_10025DC44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024A760((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025DC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_1003A62DC();
  }
  sub_10024A760((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10025DC7C(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (char *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = *((void *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = *(char **)v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  unint64_t v14 = (void *)(a1 + 16);
  uint64_t v11 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *((_DWORD *)v11 + 14) = 1065353216;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v8 && (float)(v16 * (float)v8) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(void *)uint64_t v11 = *v18;
LABEL_61:
      *uint64_t v18 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v8) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v26 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v7);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v26 & v7;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v7));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *(void *)uint64_t v11 = *v14;
  *unint64_t v14 = v11;
  *(void *)(v17 + 8 * v4) = v14;
  if (*(void *)v11)
  {
    unint64_t v27 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_10025DFAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10025A064((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10025DFC0(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = HIDWORD(*a2);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == v6) {
                return v13;
              }
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == v6) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_23:
  uint64_t v17 = operator new(0x18uLL);
  *uint64_t v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_26:
      *uint64_t v17 = *v21;
LABEL_61:
      *unint64_t v21 = v17;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_37;
    }
    if (prime < v10)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v10) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v20 = *(void *)a1;
        unint64_t v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v20 = *(void *)a1;
        unint64_t v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v20 = *(void *)a1;
      unint64_t v21 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  *uint64_t v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    unint64_t v30 = *(void *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_10025E308(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10025E31C(void *a1, uint64_t *a2)
{
  unint64_t v4 = (uint64_t ***)(*(uint64_t (**)(void))(*(void *)*a2 + 64))();
  unint64_t v5 = sub_100077F68((uint64_t)&v15, v4);
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v8 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & v5;
  }
  unint64_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return v9;
  }
  unint64_t v9 = (void *)*v9;
  if (!v9) {
    return v9;
  }
  uint64_t v11 = *a2;
  if (v7.u32[0] >= 2uLL)
  {
    do
    {
      unint64_t v13 = v9[1];
      if (v5 == v13)
      {
        if (v9[2] == v11) {
          return v9;
        }
      }
      else
      {
        if (v13 >= *(void *)&v6) {
          v13 %= *(void *)&v6;
        }
        if (v13 != v8) {
          return 0;
        }
      }
      unint64_t v9 = (void *)*v9;
    }
    while (v9);
    return v9;
  }
  uint64_t v12 = *(void *)&v6 - 1;
  while (1)
  {
    uint64_t v14 = v9[1];
    if (v5 == v14)
    {
      if (v9[2] == v11) {
        return v9;
      }
      goto LABEL_20;
    }
    if ((v14 & v12) != v8) {
      return 0;
    }
LABEL_20:
    unint64_t v9 = (void *)*v9;
    if (!v9) {
      return v9;
    }
  }
}

char *sub_10025E480(void **a1, __n128 *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_1000A6A10();
    }
    uint8x8_t v7 = operator new(80 * v6);
  }
  else
  {
    uint8x8_t v7 = 0;
  }
  BOOL v22 = (__n128 *)&v7[10 * v3];
  unint64_t v24 = (char *)&v7[10 * v6];
  sub_100033728(v22, a2);
  __n128 v8 = a2[2];
  v22[1] = a2[1];
  v22[2] = v8;
  v22[3].n128_u16[0] = a2[3].n128_u16[0];
  unint64_t v9 = a2[4].n128_u64[0];
  v22[3].n128_u64[1] = a2[3].n128_u64[1];
  v22[4].n128_u64[0] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  v7[10 * v3 + 9] = a2[4].n128_u64[1];
  unint64_t v10 = (char *)&v7[10 * v3];
  uint64_t v11 = (char *)&v22[5];
  unint64_t v13 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    float v19 = (char *)a1[1];
  }
  else
  {
    unint64_t v14 = 0;
    do
    {
      char v15 = (char *)&v22[v14 / 0x10];
      sub_100033728(&v22[v14 / 0x10 - 5], (__n128 *)&v12[v14 - 80]);
      long long v16 = *(_OWORD *)&v12[v14 - 64];
      long long v17 = *(_OWORD *)&v12[v14 - 48];
      *((_WORD *)v15 - 16) = *(_WORD *)&v12[v14 - 32];
      *((_OWORD *)v15 - 4) = v16;
      *((_OWORD *)v15 - 3) = v17;
      *((void *)v15 - 3) = *(void *)&v12[v14 - 24];
      uint64_t v18 = *(void *)&v12[v14 - 16];
      *((void *)v15 - 2) = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      v22[v14 / 0x10 - 1].n128_u64[1] = *(void *)&v12[v14 - 8];
      v14 -= 80;
    }
    while (&v12[v14] != v13);
    float v19 = (char *)*a1;
    uint64_t v12 = (char *)a1[1];
    unint64_t v10 = (char *)&v22[v14 / 0x10];
    uint64_t v11 = (char *)&v22[5];
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v24;
  if (v12 != v19)
  {
    do
    {
      unint64_t v23 = v12 - 80;
      uint64_t v20 = (std::__shared_weak_count *)*((void *)v12 - 2);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      v12 -= 80;
    }
    while (v23 != v19);
    uint64_t v12 = v19;
  }
  if (v12) {
    operator delete(v12);
  }
  return v11;
}

void sub_10025E6E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024A760((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025E6F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_1003A62DC();
  }
  sub_10024A760((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_10025E71C(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6 = *a1;
  uint64_t v7 = (uint64_t)a2 - *a1;
  __n128 v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = a5 - 1;
  if (a5 < 1) {
    return v8;
  }
  uint64_t v11 = __src;
  uint64_t v13 = v7 >> 3;
  unint64_t v15 = a1[1];
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    unint64_t v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61) {
      sub_1000A9108();
    }
    uint64_t v17 = v14 - v6;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_1000A6A10();
      }
      unint64_t v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v20 = v18;
      unint64_t v21 = operator new(8 * v18);
      unint64_t v18 = v20;
      __n128 v8 = (char *)v19;
      uint64_t v13 = v7 >> 3;
      uint64_t v11 = __src;
    }
    else
    {
      unint64_t v21 = 0;
    }
    unint64_t v43 = &v21[8 * v13];
    uint64_t v44 = &v43[8 * a5];
    char v45 = v43;
    unint64_t v46 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7) {
      goto LABEL_57;
    }
    char v45 = &v21[8 * v13];
    unint64_t v46 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20) {
      goto LABEL_57;
    }
    uint64_t v47 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    char v45 = &v43[v48];
    unint64_t v46 = &v11[v48];
    uint64_t v49 = (long long *)(v11 + 16);
    uint64_t v50 = &v21[8 * v13 + 16];
    uint64_t v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v52 = *v49;
      *(v50 - 1) = *(v49 - 1);
      _OWORD *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        uint64_t v53 = *(void *)v46;
        v46 += 8;
        *(void *)char v45 = v53;
        v45 += 8;
      }
      while (v45 != v44);
    }
    char v54 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      uint64_t v55 = v8;
      char v54 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68) {
        goto LABEL_58;
      }
      uint64_t v55 = v8;
      char v54 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20) {
        goto LABEL_58;
      }
      unint64_t v56 = ((unint64_t)(v7 - 8) >> 3) + 1;
      uint64_t v57 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v55 = &v8[-v57];
      char v54 = &v43[-v57];
      uint64_t v58 = 8 * v13 - 16;
      unint64_t v59 = &v21[v58];
      double v60 = (long long *)(v6 + v58);
      uint64_t v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v62 = *v60;
        *(v59 - 1) = *(v60 - 1);
        *unint64_t v59 = v62;
        v59 -= 2;
        v60 -= 2;
        v61 -= 4;
      }
      while (v61);
      if (v56 != (v56 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_58:
        do
        {
          uint64_t v63 = *((void *)v55 - 1);
          v55 -= 8;
          *((void *)v54 - 1) = v63;
          v54 -= 8;
        }
        while (v55 != (char *)v6);
      }
    }
    __double2 v64 = &v21[8 * v18];
    size_t v65 = v15 - (void)v8;
    if (v65) {
      memmove(&v43[8 * a5], v8, v65);
    }
    *a1 = (unint64_t)v54;
    a1[1] = (unint64_t)&v44[v65];
    a1[2] = (unint64_t)v64;
    if (v6) {
      operator delete((void *)v6);
    }
    return v43;
  }
  uint64_t v22 = v15 - (void)v8;
  uint64_t v23 = (uint64_t)(v15 - (void)v8) >> 3;
  if (v23 >= a5)
  {
    unint64_t v24 = &__src[8 * a5];
    unint64_t v26 = a1[1];
  }
  else
  {
    unint64_t v24 = &__src[8 * v23];
    int64_t v25 = a4 - v24;
    if (a4 != v24)
    {
      unint64_t v70 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      uint64_t v13 = v7 >> 3;
      __n128 v8 = (char *)v70;
    }
    unint64_t v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1) {
      return v8;
    }
  }
  uint8x8_t v27 = &v8[8 * a5];
  size_t v28 = v26 - (void)v27;
  uint64_t v29 = (uint64_t)(v26 - (void)v27) >> 3;
  unint64_t v30 = (uint64_t *)(v26 - 8 * a5);
  unint64_t v31 = (void *)v26;
  if ((unint64_t)v30 < v15)
  {
    unint64_t v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    uint64_t v33 = (char *)(v32 + v6);
    unint64_t v34 = v32 + v6 + 8;
    if (v15 > v34) {
      unint64_t v34 = v15;
    }
    unint64_t v35 = v34 + ~v6 - v32;
    if (v35 < 0x58)
    {
      unint64_t v31 = (void *)v26;
    }
    else
    {
      unint64_t v36 = v26 - (void)v33;
      unint64_t v31 = (void *)v26;
      if (v36 >= 0x20)
      {
        uint64_t v37 = (v35 >> 3) + 1;
        uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v30 = (uint64_t *)((char *)v30 + v38);
        unint64_t v31 = (void *)(v26 + v38);
        long long v39 = (_OWORD *)(v26 + 16);
        uint64_t v40 = (long long *)(8 * v29 + 8 * v13 + v6 + 16);
        uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          *long long v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 4;
        }
        while (v41);
        if (v37 == (v37 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_47;
        }
      }
    }
    do
    {
      uint64_t v66 = *v30++;
      *v31++ = v66;
    }
    while ((unint64_t)v30 < v15);
  }
LABEL_47:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    uint64_t v67 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    __n128 v8 = v67;
  }
  if (v24 != v11)
  {
    unint64_t v43 = v8;
    memmove(v8, v11, v24 - v11);
    return v43;
  }
  return v8;
}

void sub_10025EAD8()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10025EB50()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_10025EBC8()
{
  xmmword_10047E078 = 0u;
  unk_10047E088 = 0u;
  xmmword_10047E068 = 0u;
  return __cxa_atexit((void (*)(void *))sub_10025CB70, &xmmword_10047E068, (void *)&_mh_execute_header);
}

double sub_10025EBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 24)) {
    BOOL v5 = *(unsigned char *)(a4 + 56) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    double result = *(double *)(a2 + 32) + *(double *)(a4 + 64) * 0.25;
    *(double *)(a2 + 32) = result;
    return result;
  }
  int v7 = *(_DWORD *)(a4 + 4);
  int v8 = sub_100310EB8(a3);
  if (v8 != 1)
  {
    if (v8) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 32)
           + *(double *)(a3 + 16) * ((double)(uint64_t)(*(void *)(a3 + 8) - *(void *)a3) * 0.000000001);
    *(double *)(a2 + 32) = result;
    return result;
  }
  if (v7 == 3) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10025ECB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1002AC76C(a1 + 72, *(void *)(a1 + 56));
  *(void *)(a2 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v8;
  uint64_t result = sub_10025ED2C(a1, (double *)a2, a3, a4);
  if (*(_DWORD *)(a3 + 4) != 2) {
    *(unsigned char *)(a2 + 48) = (result & 1) == 0;
  }
  return result;
}

uint64_t sub_10025ED2C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  double v8 = a2[2];
  double v9 = a2[3];
  uint64_t v10 = a1 + 56;
  uint64_t v11 = *(void *)(a1 + 56);
  if (*(unsigned char *)(a3 + 24)) {
    BOOL v12 = *(unsigned char *)(a3 + 72) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    double v13 = sqrt(*(double *)(a3 + 80) * 0.25 * 0.25 * 12.0);
LABEL_9:
    double v14 = (*(double (**)(void, double, double))(*(void *)v11 + 24))(*(void *)(a1 + 56), v13 * -0.5, v13 * 0.5)+ a2[4];
LABEL_10:
    a2[4] = v14;
    goto LABEL_11;
  }
  if (*(_DWORD *)a3 != 1)
  {
    if (*(_DWORD *)a3) {
      goto LABEL_11;
    }
    double v13 = *(double *)(a1 + 216);
    goto LABEL_9;
  }
  if (!sub_100314D68(a1 + 120, v11))
  {
    double v22 = (*(double (**)(uint64_t))(*(void *)v11 + 16))(v11);
    double v14 = (v22 + v22) * 3.14159265;
    goto LABEL_10;
  }
LABEL_11:
  unint64_t v15 = (double *)(a1 + 184);
  if (*(unsigned char *)(a3 + 24))
  {
    double v16 = sub_1002A5A84(v15, *(double *)(a3 + 32));
    v17.n128_f64[0] = sub_100314DBC(a1 + 120);
    if (*(unsigned char *)(a3 + 40))
    {
      v17.n128_f64[0] = sqrt(*(double *)(a3 + 48) * 0.25 * 0.25 * 12.0);
      double v19 = a2[4];
      if (v17.n128_f64[0] <= 0.0) {
        goto LABEL_29;
      }
    }
    else
    {
      v17.n128_f64[0] = sqrt(v16 * (v16 * v17.n128_f64[0]) * 12.0);
      double v19 = a2[4];
      if (v17.n128_f64[0] <= 0.0) {
        goto LABEL_29;
      }
    }
    goto LABEL_27;
  }
  double v16 = sub_1002A5A84(v15, *(double *)(a3 + 8));
  v17.n128_f64[0] = sqrt(v16 * (v16 * sub_100314DBC(a1 + 120)) * 12.0);
  int v20 = *(_DWORD *)(a3 + 4);
  if (!*(_DWORD *)a3)
  {
    if (v20 == 3)
    {
      double v19 = a2[4];
      v17.n128_f64[0] = -v16;
      v18.n128_f64[0] = v16;
      double v21 = (*(double (**)(uint64_t, __n128, __n128))(*(void *)v11 + 24))(v11, v17, v18);
      goto LABEL_28;
    }
    if (v20 == 2)
    {
      double v19 = (*(double (**)(uint64_t, double))(*(void *)v11 + 48))(v11, v17.n128_f64[0]);
      double v25 = (*(double (**)(uint64_t))(*(void *)v11 + 16))(v11) * 0.5;
      double v16 = v25 * sub_100314D54(a1 + 120);
      goto LABEL_29;
    }
    goto LABEL_25;
  }
  if (v20 == 3)
  {
    double v19 = (*(double (**)(uint64_t, double))(*(void *)v11 + 48))(v11, v17.n128_f64[0]);
    double v21 = sub_1002A59BC((double *)(a1 + 200), v11, *(double *)(a3 + 8));
    goto LABEL_28;
  }
  if (v20 != 2)
  {
LABEL_25:
    if (v20 == 1)
    {
      double v19 = a2[4];
LABEL_27:
      v18.n128_f64[0] = v17.n128_f64[0] * 0.5;
      v17.n128_f64[0] = v16 - v17.n128_f64[0] * 0.5;
      v18.n128_f64[0] = v16 + v18.n128_f64[0];
      double v21 = (*(double (**)(uint64_t, __n128, __n128))(*(void *)v11 + 24))(v11, v17, v18);
      goto LABEL_28;
    }
    sub_1000AE4B0(v27, "");
    sub_10025F478("Unimplemented pedometryLikelihood or bodyFixed", &v29);
    sub_10025F4C8(a3 + 4, &v30);
    sub_10016A2C4((uint64_t)v27, (uint64_t)&v29, 2);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_32:
        if ((v28 & 0x80000000) == 0) {
          goto LABEL_33;
        }
LABEL_37:
        operator delete(v27[0]);
LABEL_33:
        sub_1000D11E0((uint64_t)&__p);
      }
    }
    else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((v28 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_37;
  }
  double v19 = (*(double (**)(uint64_t, double))(*(void *)v11 + 48))(v11, v17.n128_f64[0]);
  double v21 = sub_100314D4C(a1 + 120);
LABEL_28:
  double v16 = v21;
LABEL_29:
  __double2 v23 = __sincos_stret(v19);
  return sub_10024A1E0((uint64_t)a2, v8 + v23.__cosval * v16, v9 + v23.__sinval * v16, *(void *)(a3 + 16), a4, v10, a1 + 8, (uint64_t ***)(a1 + 224));
}

void sub_10025F1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10025F208(void *a1)
{
  *a1 = off_100462D20;
  uint64_t v2 = (std::__shared_weak_count *)a1[29];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *a1 = off_100458C30;
    unint64_t v3 = (std::__shared_weak_count *)a1[8];
    if (!v3) {
      goto LABEL_5;
    }
  }
  else
  {
    *a1 = off_100458C30;
    unint64_t v3 = (std::__shared_weak_count *)a1[8];
    if (!v3)
    {
LABEL_5:
      sub_10002FCB0((uint64_t)(a1 + 1));
      return a1;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_5;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  sub_10002FCB0((uint64_t)(a1 + 1));
  return a1;
}

void sub_10025F33C(void *a1)
{
  *a1 = off_100462D20;
  uint64_t v2 = (std::__shared_weak_count *)a1[29];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *a1 = off_100458C30;
    unint64_t v3 = (std::__shared_weak_count *)a1[8];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    *a1 = off_100458C30;
    unint64_t v3 = (std::__shared_weak_count *)a1[8];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  sub_10002FCB0((uint64_t)(a1 + 1));

  operator delete();
}

std::string *sub_10025F478@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10025F4AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025F4C8@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t result = sub_1001A57F4(a1, a2);
  if ((result & 1) == 0)
  {
    std::bad_cast::bad_cast(&v3);
    v3.__vftable = (std::bad_cast_vtbl *)&off_100454020;
    sub_1000DB0D4((uint64_t)&v3);
  }
  return result;
}

void sub_10025F54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
  std::bad_cast::~bad_cast(&a10);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void sub_10025F578()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10025F5F0()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_10025F668(uint64_t a1)
{
  *(void *)a1 = off_100462D68;
  uint64_t v2 = *(void **)(a1 + 200);
  if (v2)
  {
    do
    {
      std::bad_cast v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v4) {
    operator delete(v4);
  }
  sub_100234FBC(a1 + 144, *(void **)(a1 + 160));
  BOOL v5 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v5) {
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(a1 + 120);
  if (v6)
  {
    do
    {
      int v7 = (void *)*v6;
      operator delete(v6);
      unint64_t v6 = v7;
    }
    while (v7);
  }
  double v8 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v8) {
    operator delete(v8);
  }
  *(void *)a1 = off_100462DC0;
  double v9 = (void **)(a1 + 56);
  sub_100260FC4((void *)(a1 + 56));
  uint64_t v10 = *(void ***)(a1 + 64);
  uint64_t v11 = *(void ***)(a1 + 72);
  if (v10 != v11)
  {
    do
    {
      BOOL v12 = *v10++;
      operator delete(v12);
    }
    while (v10 != v11);
    uint64_t v14 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 72);
    if (v13 != v14) {
      *(void *)(a1 + 72) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*v9) {
    operator delete(*v9);
  }
  unint64_t v15 = *(void **)(a1 + 24);
  if (v15)
  {
    *(void *)(a1 + 32) = v15;
    operator delete(v15);
  }
  return a1;
}

void sub_10025F7A0(uint64_t a1)
{
  sub_10025F668(a1);

  operator delete();
}

void sub_10025F7D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  float v4 = (float)*(unint64_t *)(a1 + 128);
  size_t prime = (unint64_t)v4;
  if ((unint64_t)v4 == 1)
  {
    size_t prime = 2;
LABEL_6:
    sub_10006338C(a2, prime);
    goto LABEL_7;
  }
  if ((prime & ((unint64_t)v4 - 1)) != 0) {
    size_t prime = std::__next_prime((unint64_t)v4);
  }
  if (prime) {
    goto LABEL_6;
  }
LABEL_7:
  for (uint64_t i = *(uint64_t **)(a1 + 120); i; uint64_t i = (uint64_t *)*i)
  {
    int v7 = *((_DWORD *)i + 4);
    double v8 = i + 3;
    if (v7 == v7 >> 31)
    {
      *(void *)&long long v11 = *v8;
      int v9 = v7;
    }
    else
    {
      long long v11 = *(_OWORD *)v8;
      int v12 = *((_DWORD *)i + 10);
      int v9 = *((_DWORD *)i + 4);
      int v7 = v9 >> 31;
    }
    int v10 = v9 ^ v7;
    sub_10026244C(a2, (uint64_t)&v10, &v10);
  }
}

void sub_10025F8EC(_Unwind_Exception *exception_object)
{
  std::bad_cast v3 = *(void **)(v1 + 16);
  if (v3)
  {
    do
    {
      float v4 = (void *)*v3;
      operator delete(v3);
      std::bad_cast v3 = v4;
    }
    while (v4);
  }
  BOOL v5 = *(void **)v1;
  *(void *)uint64_t v1 = 0;
  if (v5) {
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_10025F924(void *a1, uint64_t a2, uint64_t *a3)
{
  sub_10025FB18(a1, a3[6]);
  int v7 = (float64x2_t *)a3[3];
  unint64_t v6 = (double *)a3[4];
  if (v7 == (float64x2_t *)v6)
  {
    uint64_t v9 = 0;
    goto LABEL_11;
  }
  unint64_t v8 = (char *)v6 - (char *)v7 - 8;
  if (v8 >= 0x18)
  {
    uint64_t v11 = (v8 >> 3) + 1;
    int v10 = &v7->f64[v11 & 0x3FFFFFFFFFFFFFFCLL];
    int v12 = v7 + 1;
    int64x2_t v13 = 0uLL;
    uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    int64x2_t v15 = 0uLL;
    do
    {
      int64x2_t v13 = vsubq_s64(v13, vcgtzq_f64(v12[-1]));
      int64x2_t v15 = vsubq_s64(v15, vcgtzq_f64(*v12));
      v12 += 2;
      v14 -= 4;
    }
    while (v14);
    uint64_t v9 = vaddvq_s64(vaddq_s64(v15, v13));
    if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = (double *)a3[3];
  }
  do
  {
    double v16 = *v10++;
    if (v16 > 0.0) {
      ++v9;
    }
  }
  while (v10 != v6);
LABEL_11:
  *(void *)&long long v26 = a3[6];
  *((void *)&v26 + 1) = v9;
  sub_100260138(a1 + 2, &v26);
  __n128 v17 = (int *)*a3;
  __n128 v18 = (int *)a3[1];
  if ((int *)*a3 != v18)
  {
    do
    {
      LODWORD(v26) = 1;
      double v19 = sub_1002636AC((uint64_t)(a1 + 13), (uint64_t)v17, v17, (int *)&v26);
      if (!v20) {
        ++v19[6];
      }
      v17 += 52;
    }
    while (v17 != v18);
  }
  uint64_t v21 = a1[8];
  uint64_t v22 = a1[9];
  uint64_t v23 = 73 * ((v22 - v21) >> 3) - 1;
  if (v22 == v21) {
    uint64_t v23 = 0;
  }
  if (v23 == a1[12] + a1[11])
  {
    sub_100263B24((uint64_t)(a1 + 7));
    uint64_t v21 = a1[8];
    uint64_t v22 = a1[9];
  }
  if (v22 == v21)
  {
    double v25 = 0;
  }
  else
  {
    unint64_t v24 = a1[12] + a1[11];
    double v25 = (void *)(*(void *)(v21 + 8 * (v24 / 0x49)) + 56 * (v24 % 0x49));
  }
  sub_10023BDF4(v25, a3);
  ++a1[12];
  sub_10026026C((uint64_t)a1, a2, a3);
}

void sub_10025FB18(void *a1, uint64_t a2)
{
  sub_100260590(a1 + 2, a2, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  sub_1002606CC(a1, a2);
  if (a1[12])
  {
    float v4 = a1 + 13;
    do
    {
      unint64_t v5 = a1[11];
      uint64_t v6 = *(void *)(a1[8] + 8 * (v5 / 0x49));
      unint64_t v7 = v5 % 0x49;
      if (a1[1] + *(void *)(v6 + 56 * v7 + 48) >= a2) {
        return;
      }
      unint64_t v8 = (int **)(v6 + 56 * v7);
      int v10 = *v8;
      uint64_t v9 = v8[1];
      while (v10 != v9)
      {
        int v12 = (std::string::size_type *)(v10 + 2);
        int v11 = *v10;
        if (v11 == v11 >> 31)
        {
          v47.__r_.__value_.__l.__size_ = *v12;
          int v13 = v11;
        }
        else
        {
          long long v14 = *(_OWORD *)v12;
          LODWORD(v48.__r_.__value_.__l.__data_) = v10[6];
          *(_OWORD *)&v47.__r_.__value_.__r.__words[1] = v14;
          int v13 = *v10;
          int v11 = *v10 >> 31;
        }
        LODWORD(v47.__r_.__value_.__l.__data_) = v13 ^ v11;
        int64x2_t v15 = sub_100261668(a1 + 13, (uint64_t)&v47);
        if (!v15)
        {
          uint64_t v38 = a1[16];
          char v43 = 0;
          LOBYTE(v42) = 0;
          memset(&v47, 0, sizeof(v47));
          std::string::assign(&v47, "Can't find mac ");
          memset(&v48, 0, sizeof(v48));
          if ((sub_1001EF548(v10, &v48) & 1) == 0)
          {
            unint64_t v36 = std::bad_cast::bad_cast(&v51);
            v51.__vftable = (std::bad_cast_vtbl *)&off_100454020;
            sub_1000DB0D4((uint64_t)v36);
          }
          memset(&v49, 0, sizeof(v49));
          std::string::assign(&v49, " among size=");
          memset(&v50, 0, sizeof(v50));
          uint64_t v55 = (char *)&v51.__vftable + 2;
          unint64_t v56 = v54;
          v44[0] = v38;
          v44[1] = v54;
          char v45 = 48;
          int v46 = 48;
          uint64_t v26 = sub_1001F322C((uint64_t)v44);
          uint64_t v55 = (char *)v26;
          unint64_t v56 = v54;
          std::string::size_type v27 = (std::string::size_type)&v54[-v26];
          char v28 = &v50;
          if ((unint64_t)&v54[-v26] >= 0x17)
          {
            uint64_t v37 = &v54[-v26];
            uint64_t v39 = v26;
            std::string::__grow_by(&v50, 0x16uLL, v27 - 22, 0, 0, 0, 0);
            uint64_t v26 = v39;
            v50.__r_.__value_.__l.__size_ = 0;
            if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v28 = &v50;
            }
            else {
              char v28 = (std::string *)v50.__r_.__value_.__r.__words[0];
            }
            std::string::size_type v27 = (std::string::size_type)v37;
          }
          if ((unsigned char *)v26 == v54)
          {
            std::string v29 = v28;
          }
          else
          {
            if (v27 < 0x20 || (unint64_t)v28 - v26 < 0x20)
            {
              std::string v29 = v28;
              std::string v30 = (std::string::value_type *)v26;
            }
            else
            {
              std::string v29 = (std::string *)((char *)v28 + (v27 & 0xFFFFFFFFFFFFFFE0));
              std::string v30 = (std::string::value_type *)(v26 + (v27 & 0xFFFFFFFFFFFFFFE0));
              unint64_t v31 = (long long *)(v26 + 16);
              unint64_t v32 = &v28->__r_.__value_.__r.__words[2];
              unint64_t v33 = v27 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v34 = *v31;
                *((_OWORD *)v32 - 1) = *(v31 - 1);
                *(_OWORD *)unint64_t v32 = v34;
                v31 += 2;
                v32 += 4;
                v33 -= 32;
              }
              while (v33);
              if (v27 == (v27 & 0xFFFFFFFFFFFFFFE0)) {
                goto LABEL_57;
              }
            }
            do
            {
              std::string::value_type v35 = *v30++;
              v29->__r_.__value_.__s.__data_[0] = v35;
              std::string v29 = (std::string *)((char *)v29 + 1);
            }
            while (v30 != v54);
          }
LABEL_57:
          v29->__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
            v50.__r_.__value_.__l.__size_ = v27;
          }
          else {
            *((unsigned char *)&v50.__r_.__value_.__s + 23) = v27 & 0x7F;
          }
          sub_10016A2C4((uint64_t)&v42, (uint64_t)&v47, 4);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v50.__r_.__value_.__l.__data_);
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_67;
            }
LABEL_62:
            if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_63;
            }
LABEL_68:
            operator delete(v48.__r_.__value_.__l.__data_);
            if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_69;
            }
LABEL_64:
            if (v43 < 0) {
LABEL_70:
            }
              operator delete(v42);
          }
          else
          {
            if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_62;
            }
LABEL_67:
            operator delete(v49.__r_.__value_.__l.__data_);
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_68;
            }
LABEL_63:
            if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_64;
            }
LABEL_69:
            operator delete(v47.__r_.__value_.__l.__data_);
            if (v43 < 0) {
              goto LABEL_70;
            }
          }
          sub_1000D11E0((uint64_t)&v41);
        }
        uint64_t v16 = v15[6] - 1;
        v15[6] = v16;
        if (!v16)
        {
          int8x8_t v17 = (int8x8_t)a1[14];
          unint64_t v18 = v15[1];
          uint8x8_t v19 = (uint8x8_t)vcnt_s8(v17);
          v19.i16[0] = vaddlv_u8(v19);
          if (v19.u32[0] > 1uLL)
          {
            if (v18 >= *(void *)&v17) {
              v18 %= *(void *)&v17;
            }
          }
          else
          {
            v18 &= *(void *)&v17 - 1;
          }
          uint64_t v20 = *v15;
          uint64_t v21 = *(uint64_t **)(*v4 + 8 * v18);
          do
          {
            uint64_t v22 = v21;
            uint64_t v21 = (uint64_t *)*v21;
          }
          while (v21 != v15);
          if (v22 == a1 + 15) {
            goto LABEL_32;
          }
          unint64_t v23 = v22[1];
          if (v19.u32[0] > 1uLL)
          {
            if (v23 >= *(void *)&v17) {
              v23 %= *(void *)&v17;
            }
          }
          else
          {
            v23 &= *(void *)&v17 - 1;
          }
          if (v23 == v18)
          {
LABEL_34:
            if (v20) {
              goto LABEL_35;
            }
          }
          else
          {
LABEL_32:
            if (!v20) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v20 + 8);
            if (v19.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&v17) {
                v24 %= *(void *)&v17;
              }
            }
            else
            {
              v24 &= *(void *)&v17 - 1;
            }
            if (v24 != v18)
            {
LABEL_33:
              *(void *)(*v4 + 8 * v18) = 0;
              uint64_t v20 = *v15;
              goto LABEL_34;
            }
LABEL_35:
            unint64_t v25 = *(void *)(v20 + 8);
            if (v19.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&v17) {
                v25 %= *(void *)&v17;
              }
            }
            else
            {
              v25 &= *(void *)&v17 - 1;
            }
            if (v25 != v18)
            {
              *(void *)(*v4 + 8 * v25) = v22;
              uint64_t v20 = *v15;
            }
          }
          *uint64_t v22 = v20;
          *int64x2_t v15 = 0;
          --a1[16];
          operator delete(v15);
        }
        v10 += 52;
      }
      sub_100260B04((uint64_t)(a1 + 7));
    }
    while (a1[12]);
  }
}

void sub_100260068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a25 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100260138(void *a1, _OWORD *a2)
{
  unint64_t v5 = (_OWORD *)a1[2];
  unint64_t v4 = a1[3];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = (_OWORD **)(a1 + 1);
    unint64_t v8 = (_OWORD *)a1[1];
    uint64_t v9 = v5 - v8;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_1000A9108();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 60) {
        sub_1000A6A10();
      }
      int v13 = (char *)operator new(16 * v12);
    }
    else
    {
      int v13 = 0;
    }
    long long v14 = &v13[16 * v9];
    *(_OWORD *)long long v14 = *a2;
    uint64_t v6 = v14 + 16;
    if (v5 != v8)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *(v5 - 1);
        v14 -= 16;
        --v5;
      }
      while (v5 != v8);
      unint64_t v5 = *v7;
    }
    a1[1] = v14;
    a1[2] = v6;
    a1[3] = &v13[16 * v12];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *unint64_t v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  a1[2] = v6;
  unint64_t v15 = (((uint64_t)v6 - a1[1]) >> 4) - 1;

  return sub_100263580(a1, v15);
}

void sub_10026026C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 108) && *(unsigned char *)(a2 + 109)) {
      goto LABEL_7;
    }
    if (*(void *)(a2 + 40) != 110 || *(_DWORD *)(a2 + 104) != 2)
    {
      if (!*(unsigned char *)(a2 + 108))
      {
        uint64_t v6 = "unknown";
        size_t v7 = strlen("unknown");
        if (v7 < 0x7FFFFFFFFFFFFFF8) {
          goto LABEL_11;
        }
        goto LABEL_35;
      }
LABEL_7:
      if (*(unsigned char *)(a2 + 109)) {
        uint64_t v6 = "merged";
      }
      else {
        uint64_t v6 = "not merged";
      }
      size_t v7 = strlen(v6);
      if (v7 < 0x7FFFFFFFFFFFFFF8)
      {
LABEL_11:
        size_t v8 = v7;
        if (v7 >= 0x17)
        {
          uint64_t v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17) {
            uint64_t v12 = v7 | 7;
          }
          uint64_t v13 = v12 + 1;
          uint64_t v9 = (long long *)operator new(v12 + 1);
          *((void *)&v20 + 1) = v8;
          int64_t v21 = v13 | 0x8000000000000000;
          *(void *)&long long v20 = v9;
        }
        else
        {
          HIBYTE(v21) = v7;
          uint64_t v9 = &v20;
          if (!v7)
          {
LABEL_22:
            *((unsigned char *)v9 + v8) = 0;
            if (qword_10047BED8 == -1)
            {
              long long v14 = qword_10047BEE0;
              if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
              {
LABEL_24:
                unint64_t v15 = &v20;
                if (v21 < 0) {
                  unint64_t v15 = (long long *)v20;
                }
                uint64_t v16 = *(void *)(a2 + 40);
                int v17 = *(_DWORD *)(a2 + 104);
                *(_DWORD *)std::string __p = 136315650;
                *(void *)&__p[4] = v15;
                __int16 v23 = 2048;
                *(void *)unint64_t v24 = v16;
                *(_WORD *)&v24[8] = 1024;
                LODWORD(v25) = v17;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Scan not used for coarse indoor. merged = %s, dwell = %lld, scanType = %d", __p, 0x1Cu);
              }
            }
            else
            {
              dispatch_once(&qword_10047BED8, &stru_100462E00);
              long long v14 = qword_10047BEE0;
              if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
                goto LABEL_24;
              }
            }
            if ((SHIBYTE(v21) & 0x80000000) == 0) {
              return;
            }
            unint64_t v18 = (void *)v20;
LABEL_32:
            operator delete(v18);
            return;
          }
        }
        memcpy(v9, v6, v8);
        goto LABEL_22;
      }
LABEL_35:
      sub_1000A6968();
    }
LABEL_17:
    sub_100260C7C(a1, a2, a3);
    return;
  }
  sub_100232C20(a3, (uint64_t)__p);
  unint64_t v10 = v25;
  sub_100234FBC((uint64_t)__p, *(void **)&v24[2]);
  uint64_t v11 = *(void **)__p;
  *(void *)std::string __p = 0;
  if (v11) {
    operator delete(v11);
  }
  if (v10 < 2) {
    goto LABEL_17;
  }
  if (qword_10047BED8 == -1)
  {
    uint8x8_t v19 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      return;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_100462E00);
    uint8x8_t v19 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      return;
    }
  }
  sub_100232C20(a3, (uint64_t)__p);
  LODWORD(v2sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 134217984;
  *(void *)((char *)&v20 + 4) = v25;
  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Scan not used for coarse indoor. splitByFrequency std::string::size_type size = %zu", (uint8_t *)&v20, 0xCu);
  sub_100234FBC((uint64_t)__p, *(void **)&v24[2]);
  unint64_t v18 = *(void **)__p;
  *(void *)std::string __p = 0;
  if (v18) {
    goto LABEL_32;
  }
}

void *sub_100260590@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = (char *)result[1];
  unint64_t v5 = (char *)result[2];
  if (v4 == v5)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    uint64_t v8 = (v5 - v4) >> 4;
    uint64_t v9 = *result;
    unint64_t v10 = (uint64_t *)result[1];
    while (1)
    {
      uint64_t v11 = *v10;
      v10 += 2;
      if (v9 >= a2 - v11) {
        break;
      }
      ++v7;
      *((_DWORD *)result + 8) = 2;
      if (v8 == v7) {
        goto LABEL_9;
      }
    }
    if (v8 != v7) {
      goto LABEL_10;
    }
LABEL_9:
    *((_DWORD *)result + 8) = 1;
    uint64_t v7 = (v5 - v4) >> 4;
LABEL_10:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v7)
    {
      if (v7 < 0) {
        sub_1000A9108();
      }
      size_t v12 = 16 * v7;
      uint64_t v13 = (char *)operator new(16 * v7);
      long long v14 = &v4[16 * v7];
      *a3 = v13;
      unint64_t v15 = &v13[16 * v7];
      a3[2] = v15;
      uint64_t result = memmove(v13, v4, v12);
      a3[1] = v15;
      if (v5 != v14) {
        uint64_t result = memmove(v4, &v4[v12], v5 - v14);
      }
      v6[2] = &v4[v5 - v14];
    }
  }
  return result;
}

void sub_1002606B0(_Unwind_Exception *exception_object)
{
  std::bad_cast v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002606CC(void *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)a1[20];
  if (!v2) {
    return;
  }
  unint64_t v5 = a1 + 18;
  uint64_t v6 = a1 + 23;
  uint64_t v7 = a1 + 25;
  do
  {
    while (a1[1] + v2[9] >= a2)
    {
      if (qword_10047BED8 != -1)
      {
        dispatch_once(&qword_10047BED8, &stru_100462E00);
        char v28 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_3;
        }
LABEL_47:
        int v29 = *((_DWORD *)v2 + 4);
        uint64_t v30 = 0x4EC4EC4EC4EC4EC5 * ((v2[4] - v2[3]) >> 4);
        uint64_t v31 = a1[1];
        uint64_t v32 = a2 - v2[9];
        *(_DWORD *)std::runtime_error buf = 67175425;
        *(_DWORD *)&uint8_t buf[4] = v29;
        __int16 v34 = 2048;
        uint64_t v35 = v30;
        __int16 v36 = 2048;
        uint64_t v37 = v31;
        __int16 v38 = 2048;
        uint64_t v39 = v32;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Keeping freq= %{private}d, size=%zu, fWindowLength=%lld, age = %lld", buf, 0x26u);
        goto LABEL_3;
      }
      char v28 = qword_10047BEE0;
      if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_47;
      }
LABEL_3:
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        return;
      }
    }
    uint64_t v9 = v2[3];
    uint64_t v8 = v2[4];
    if (v9 != v8)
    {
      while (1)
      {
        *(void *)std::runtime_error buf = v9;
        int v17 = sub_1002611F4((uint64_t)v6, v9, (uint64_t)&unk_1003FAE80, (int **)buf);
        if (v17[6] != 1) {
          break;
        }
        unint64_t v18 = sub_100261668(v6, v9);
        if (v18)
        {
          int8x8_t v19 = (int8x8_t)a1[24];
          unint64_t v20 = v18[1];
          uint8x8_t v21 = (uint8x8_t)vcnt_s8(v19);
          v21.i16[0] = vaddlv_u8(v21);
          if (v21.u32[0] > 1uLL)
          {
            if (v20 >= *(void *)&v19) {
              v20 %= *(void *)&v19;
            }
          }
          else
          {
            v20 &= *(void *)&v19 - 1;
          }
          uint64_t v22 = *(uint64_t **)(*v6 + 8 * v20);
          do
          {
            __int16 v23 = v22;
            uint64_t v22 = (uint64_t *)*v22;
          }
          while (v22 != v18);
          if (v23 == v7) {
            goto LABEL_36;
          }
          unint64_t v24 = v23[1];
          if (v21.u32[0] > 1uLL)
          {
            if (v24 >= *(void *)&v19) {
              v24 %= *(void *)&v19;
            }
          }
          else
          {
            v24 &= *(void *)&v19 - 1;
          }
          if (v24 != v20)
          {
LABEL_36:
            if (!*v18) {
              goto LABEL_37;
            }
            unint64_t v25 = *(void *)(*v18 + 8);
            if (v21.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&v19) {
                v25 %= *(void *)&v19;
              }
            }
            else
            {
              v25 &= *(void *)&v19 - 1;
            }
            if (v25 != v20) {
LABEL_37:
            }
              *(void *)(*v6 + 8 * v2sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
          }
          uint64_t v26 = *v18;
          if (*v18)
          {
            unint64_t v27 = *(void *)(v26 + 8);
            if (v21.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&v19) {
                v27 %= *(void *)&v19;
              }
            }
            else
            {
              v27 &= *(void *)&v19 - 1;
            }
            if (v27 != v20)
            {
              *(void *)(*v6 + 8 * v27) = v23;
              uint64_t v26 = *v18;
            }
          }
          *__int16 v23 = v26;
          *unint64_t v18 = 0;
          --a1[26];
          operator delete(v18);
          v9 += 208;
          if (v9 == v8) {
            goto LABEL_6;
          }
        }
        else
        {
LABEL_19:
          v9 += 208;
          if (v9 == v8) {
            goto LABEL_6;
          }
        }
      }
      --v17[6];
      goto LABEL_19;
    }
LABEL_6:
    if (qword_10047BED8 == -1)
    {
      unint64_t v10 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    dispatch_once(&qword_10047BED8, &stru_100462E00);
    unint64_t v10 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
LABEL_8:
      int v11 = *((_DWORD *)v2 + 4);
      uint64_t v12 = 0x4EC4EC4EC4EC4EC5 * ((v2[4] - v2[3]) >> 4);
      uint64_t v13 = a1[1];
      uint64_t v14 = a2 - v2[9];
      *(_DWORD *)std::runtime_error buf = 67175425;
      *(_DWORD *)&uint8_t buf[4] = v11;
      __int16 v34 = 2048;
      uint64_t v35 = v12;
      __int16 v36 = 2048;
      uint64_t v37 = v13;
      __int16 v38 = 2048;
      uint64_t v39 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Age out freq=%{private}d, size=%zu, fWindowLength=%lld, age = %lld", buf, 0x26u);
    }
LABEL_9:
    unint64_t v15 = (uint64_t *)*v2;
    sub_1000A9E44(v5, v2, (uint64_t)buf);
    uint64_t v16 = *(void **)buf;
    *(void *)std::runtime_error buf = 0;
    if (v16) {
      sub_100235440((uint64_t)&v34, v16);
    }
    uint64_t v2 = v15;
  }
  while (v15);
}

void sub_100260B04(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8 * (v2 / 0x49));
  unint64_t v4 = v2 % 0x49;
  unint64_t v5 = (void **)(v3 + 56 * v4);
  uint64_t v6 = v5[3];
  if (v6)
  {
    *(void *)(v3 + 56 * v4 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (char *)*v5;
  if (*v5)
  {
    uint64_t v8 = (char *)v5[1];
    uint64_t v9 = *v5;
    if (v8 != v7)
    {
      unint64_t v10 = v8 - 168;
      do
      {
        int v12 = *((_DWORD *)v8 - 44);
        if (v12 == v12 >> 31)
        {
          if (*(v8 - 128)) {
            *(v8 - 128) = 0;
          }
        }
        else
        {
          uint64_t v11 = *((void *)v8 - 21);
          if (v12 < 0)
          {
            if (v11) {
              (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
            }
          }
          else
          {
            (*(void (**)(char *))v11)(v8 - 168);
          }
        }
        v8 -= 208;
        v10 -= 208;
      }
      while (v8 != v7);
      uint64_t v9 = *v5;
    }
    v5[1] = v7;
    operator delete(v9);
  }
  int64x2_t v13 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1003F1860);
  *(int64x2_t *)(a1 + 32) = v13;
  if (v13.i64[0] >= 0x92uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 73;
  }
}

void sub_100260C7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100232C20(a3, (uint64_t)v19);
  unint64_t v5 = v20;
  if (v20)
  {
    while (1)
    {
      uint64_t v6 = (char *)v5[3];
      int v18 = *((_DWORD *)v5 + 4);
      for (uint64_t i = (char *)v5[4]; v6 != i; v6 += 208)
      {
        while (1)
        {
          uint64_t v8 = sub_100261668((void *)(a1 + 184), (uint64_t)v6);
          if (!v8) {
            break;
          }
          ++v8[6];
          v6 += 208;
          if (v6 == i) {
            goto LABEL_10;
          }
        }
        __p[0] = v6;
        sub_1002611F4(a1 + 184, (uint64_t)v6, (uint64_t)&unk_1003FAE80, (int **)__p)[6] = 1;
      }
LABEL_10:
      uint64_t v9 = sub_1002640F4(a1 + 144, &v18, &v18, v5 + 3);
      if (v10) {
        goto LABEL_4;
      }
      uint64_t v11 = v9;
      if (a2)
      {
        if (v5[9] - v9[9] < 500000 * *(void *)(a2 + 40)) {
          goto LABEL_4;
        }
      }
      int v12 = (char *)v9[3];
      int64x2_t v13 = (char *)v9[4];
      if (v12 != v13) {
        break;
      }
LABEL_21:
      if (v5 != v11)
      {
        sub_1002618D8(v11 + 3, v5[3], v5[4], 0x4EC4EC4EC4EC4EC5 * ((v5[4] - v5[3]) >> 4));
        sub_10007C388(v11 + 6, (char *)v5[6], (char *)v5[7], (v5[7] - v5[6]) >> 3);
      }
      v11[9] = v5[9];
      *(unsigned char *)(a1 + 224) = 1;
LABEL_4:
      unint64_t v5 = (uint64_t *)*v5;
      if (!v5)
      {
        sub_100234FBC((uint64_t)v19, v20);
        int v17 = v19[0];
        v19[0] = 0;
        if (!v17) {
          return;
        }
        goto LABEL_24;
      }
    }
    while (1)
    {
      while (1)
      {
        __p[0] = v12;
        uint64_t v14 = sub_1002611F4(a1 + 184, (uint64_t)v12, (uint64_t)&unk_1003FAE80, (int **)__p);
        if (v14[6] == 1) {
          break;
        }
        --v14[6];
LABEL_16:
        v12 += 208;
        if (v12 == v13) {
          goto LABEL_21;
        }
      }
      unint64_t v15 = sub_100261668((void *)(a1 + 184), (uint64_t)v12);
      if (!v15) {
        goto LABEL_16;
      }
      sub_1000A9E44((void *)(a1 + 184), v15, (uint64_t)__p);
      uint64_t v16 = __p[0];
      __p[0] = 0;
      if (!v16) {
        goto LABEL_16;
      }
      operator delete(v16);
      v12 += 208;
      if (v12 == v13) {
        goto LABEL_21;
      }
    }
  }
  sub_100234FBC((uint64_t)v19, 0);
  int v17 = v19[0];
  v19[0] = 0;
  if (!v17) {
    return;
  }
LABEL_24:
  operator delete(v17);
}

void sub_100260EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100233670((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100260EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100233670((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100260EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100233670((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100260F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100233670((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100260F18(uint64_t a1, unint64_t a2)
{
  long long v3 = a2;
  return sub_100260138((void *)(a1 + 16), &v3);
}

uint64_t sub_100260F44@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  for (uint64_t i = (void *)(result + 160);
        ;
        uint64_t result = sub_1002628B0(a2, a2[1], i[3], i[4], 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(i[4] - i[3]) >> 4)))
  {
    uint64_t i = (void *)*i;
    if (!i) {
      break;
    }
  }
  return result;
}

void sub_100260FB0(_Unwind_Exception *a1)
{
  sub_1002329B0(v1);
  _Unwind_Resume(a1);
}

void sub_100260FC4(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    unint64_t v16 = (char *)v3 - (char *)v2;
    if (v16 < 0x11) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  unint64_t v4 = a1[4];
  unint64_t v5 = &v2[v4 / 0x49];
  uint64_t v6 = (char *)*v5 + 56 * (v4 % 0x49);
  unint64_t v7 = (unint64_t)v2[(a1[5] + v4) / 0x49] + 56 * ((a1[5] + v4) % 0x49);
  if (v6 != (char *)v7)
  {
    do
    {
      uint64_t v8 = (void *)*((void *)v6 + 3);
      if (v8)
      {
        *((void *)v6 + 4) = v8;
        operator delete(v8);
      }
      uint64_t v9 = *(char **)v6;
      if (*(void *)v6)
      {
        char v10 = (char *)*((void *)v6 + 1);
        uint64_t v11 = *(char **)v6;
        if (v10 != v9)
        {
          int v12 = v10 - 168;
          do
          {
            int v14 = *((_DWORD *)v10 - 44);
            if (v14 == v14 >> 31)
            {
              if (*(v10 - 128)) {
                *(v10 - 128) = 0;
              }
            }
            else
            {
              uint64_t v13 = *((void *)v10 - 21);
              if (v14 < 0)
              {
                if (v13) {
                  (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
                }
              }
              else
              {
                (*(void (**)(char *))v13)(v10 - 168);
              }
            }
            v10 -= 208;
            v12 -= 208;
          }
          while (v10 != v9);
          uint64_t v11 = *(char **)v6;
        }
        *((void *)v6 + 1) = v9;
        operator delete(v11);
      }
      v6 += 56;
      if (v6 - (unsigned char *)*v5 == 4088)
      {
        unint64_t v15 = (char *)v5[1];
        ++v5;
        uint64_t v6 = v15;
      }
    }
    while (v6 != (char *)v7);
    unint64_t v2 = (void **)a1[1];
    long long v3 = (void **)a1[2];
  }
  a1[5] = 0;
  unint64_t v16 = (char *)v3 - (char *)v2;
  if (v16 >= 0x11)
  {
    do
    {
LABEL_24:
      operator delete(*v2);
      uint64_t v17 = a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v16 = v17 - (void)v2;
    }
    while (v16 > 0x10);
  }
LABEL_25:
  if (v16 >> 3 == 1)
  {
    uint64_t v18 = 36;
  }
  else
  {
    if (v16 >> 3 != 2) {
      return;
    }
    uint64_t v18 = 73;
  }
  a1[4] = v18;
}

void sub_1002611C4(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void *sub_1002611F4(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  std::string v48 = &v47;
  uint64_t v8 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    unint64_t v9 = *(void *)v8;
    unint64_t v10 = *(void *)(a1 + 8);
    if (!v10) {
      goto LABEL_58;
    }
  }
  else
  {
    unint64_t v9 = sub_100258DC8((uint64_t)&v48, (unsigned __int8 *)(a2 + 8));
    unint64_t v10 = *(void *)(a1 + 8);
    if (!v10) {
      goto LABEL_58;
    }
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v4 = v9;
    if (v9 >= v10) {
      unint64_t v4 = v9 % v10;
    }
  }
  else
  {
    unint64_t v4 = (v10 - 1) & v9;
  }
  int v12 = *(void **)(*(void *)a1 + 8 * v4);
  if (v12)
  {
    uint64_t v13 = (void *)*v12;
    if (*v12)
    {
      int v14 = *(_DWORD *)a2;
      int v15 = (v14 >> 31) ^ v14;
      BOOL v16 = v14 >> 31 == v14;
      uint64_t v17 = *(void *)(a2 + 8);
      if (v11.u32[0] <= 1uLL)
      {
        unint64_t v18 = v10 - 1;
        if (v16)
        {
          while (1)
          {
            uint64_t v19 = v13[1];
            if (v19 == v9)
            {
              if ((*((_DWORD *)v13 + 4) ^ (*((int *)v13 + 4) >> 31)) == v15 && v13[3] == v17) {
                return v13;
              }
            }
            else if ((v19 & v18) != v4)
            {
              goto LABEL_58;
            }
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              goto LABEL_58;
            }
          }
        }
        while (1)
        {
          uint64_t v20 = v13[1];
          if (v20 == v9)
          {
            if ((*((_DWORD *)v13 + 4) ^ (*((int *)v13 + 4) >> 31)) == v15)
            {
              BOOL v21 = v13[3] == *(void *)v8 && v13[4] == *(void *)(v8 + 8);
              if (v21 && *((_DWORD *)v13 + 10) == (unint64_t)*(unsigned int *)(v8 + 16)) {
                return v13;
              }
            }
          }
          else if ((v20 & v18) != v4)
          {
            goto LABEL_58;
          }
          uint64_t v13 = (void *)*v13;
          if (!v13) {
            goto LABEL_58;
          }
        }
      }
      if (v16)
      {
        while (1)
        {
          unint64_t v23 = v13[1];
          if (v23 == v9)
          {
            if ((*((_DWORD *)v13 + 4) ^ (*((int *)v13 + 4) >> 31)) == v15 && v13[3] == v17) {
              return v13;
            }
          }
          else
          {
            if (v23 >= v10) {
              v23 %= v10;
            }
            if (v23 != v4) {
              goto LABEL_58;
            }
          }
          uint64_t v13 = (void *)*v13;
          if (!v13) {
            goto LABEL_58;
          }
        }
      }
      do
      {
        unint64_t v24 = v13[1];
        if (v24 == v9)
        {
          if ((*((_DWORD *)v13 + 4) ^ (*((int *)v13 + 4) >> 31)) == v15)
          {
            BOOL v25 = v13[3] == *(void *)v8 && v13[4] == *(void *)(v8 + 8);
            if (v25 && *((_DWORD *)v13 + 10) == (unint64_t)*(unsigned int *)(v8 + 16)) {
              return v13;
            }
          }
        }
        else
        {
          if (v24 >= v10) {
            v24 %= v10;
          }
          if (v24 != v4) {
            break;
          }
        }
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
  }
LABEL_58:
  unint64_t v27 = operator new(0x38uLL);
  uint64_t v13 = v27;
  *unint64_t v27 = 0;
  v27[1] = v9;
  char v28 = *a4;
  int v29 = v27 + 3;
  uint64_t v31 = *a4 + 2;
  int v30 = **a4;
  if (v30 == v30 >> 31)
  {
    *int v29 = *v31;
    int v32 = v30;
  }
  else
  {
    long long v33 = *(_OWORD *)v31;
    *((_DWORD *)v27 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = (*a4)[6];
    *(_OWORD *)int v29 = v33;
    int v32 = *v28;
    int v30 = *v28 >> 31;
  }
  *((_DWORD *)v27 + 4) = v32 ^ v30;
  v27[6] = 0;
  float v34 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v35 = *(float *)(a1 + 32);
  if (v10 && (float)(v35 * (float)v10) >= v34)
  {
    unint64_t v9 = v4;
  }
  else
  {
    BOOL v36 = 1;
    if (v10 >= 3) {
      BOOL v36 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v10);
    unint64_t v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_74;
    }
    if (prime < v10)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < v10) {
LABEL_74:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        v9 %= v10;
      }
    }
    else
    {
      v9 &= v10 - 1;
    }
  }
  uint64_t v43 = *(void *)a1;
  uint64_t v44 = *(void **)(*(void *)a1 + 8 * v9);
  if (v44)
  {
    *uint64_t v13 = *v44;
LABEL_97:
    *uint64_t v44 = v13;
    goto LABEL_98;
  }
  *uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v43 + 8 * v9) = a1 + 16;
  if (*v13)
  {
    unint64_t v45 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v45 >= v10) {
        v45 %= v10;
      }
    }
    else
    {
      v45 &= v10 - 1;
    }
    uint64_t v44 = (void *)(*(void *)a1 + 8 * v45);
    goto LABEL_97;
  }
LABEL_98:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_100261654(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100261668(void *a1, uint64_t a2)
{
  BOOL v25 = &v24;
  uint64_t v4 = a2 + 8;
  if (*(_DWORD *)a2 != *(int *)a2 >> 31)
  {
    unint64_t v5 = sub_100258DC8((uint64_t)&v25, (unsigned __int8 *)(a2 + 8));
    int8x8_t v6 = (int8x8_t)a1[1];
    if (v6) {
      goto LABEL_3;
    }
    return 0;
  }
  unint64_t v5 = *(void *)v4;
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
LABEL_3:
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v8 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & v5;
  }
  unint64_t v10 = *(uint64_t **)(*a1 + 8 * v8);
  if (!v10) {
    return v10;
  }
  unint64_t v10 = (uint64_t *)*v10;
  if (!v10) {
    return v10;
  }
  int v11 = *(_DWORD *)a2;
  int v12 = (v11 >> 31) ^ v11;
  BOOL v13 = v11 >> 31 == v11;
  uint64_t v14 = *(void *)(a2 + 8);
  if (v7.u32[0] <= 1uLL)
  {
    uint64_t v15 = *(void *)&v6 - 1;
    if (v13)
    {
      while (1)
      {
        uint64_t v16 = v10[1];
        if (v16 == v5)
        {
          if ((*((_DWORD *)v10 + 4) ^ (*((int *)v10 + 4) >> 31)) == v12 && v10[3] == v14) {
            return v10;
          }
        }
        else if ((v16 & v15) != v8)
        {
          return 0;
        }
        unint64_t v10 = (uint64_t *)*v10;
        if (!v10) {
          return v10;
        }
      }
    }
    while (1)
    {
      uint64_t v17 = v10[1];
      if (v17 == v5)
      {
        if ((*((_DWORD *)v10 + 4) ^ (*((int *)v10 + 4) >> 31)) == v12)
        {
          BOOL v18 = v10[3] == *(void *)v4 && v10[4] == *(void *)(v4 + 8);
          if (v18 && *((_DWORD *)v10 + 10) == (unint64_t)*(unsigned int *)(v4 + 16)) {
            return v10;
          }
        }
      }
      else if ((v17 & v15) != v8)
      {
        return 0;
      }
      unint64_t v10 = (uint64_t *)*v10;
      if (!v10) {
        return v10;
      }
    }
  }
  if (v13)
  {
    while (1)
    {
      unint64_t v20 = v10[1];
      if (v20 == v5)
      {
        if ((*((_DWORD *)v10 + 4) ^ (*((int *)v10 + 4) >> 31)) == v12 && v10[3] == v14) {
          return v10;
        }
      }
      else
      {
        if (v20 >= *(void *)&v6) {
          v20 %= *(void *)&v6;
        }
        if (v20 != v8) {
          return 0;
        }
      }
      unint64_t v10 = (uint64_t *)*v10;
      if (!v10) {
        return v10;
      }
    }
  }
  while (1)
  {
    unint64_t v21 = v10[1];
    if (v21 != v5) {
      break;
    }
    if ((*((_DWORD *)v10 + 4) ^ (*((int *)v10 + 4) >> 31)) == v12)
    {
      BOOL v22 = v10[3] == *(void *)v4 && v10[4] == *(void *)(v4 + 8);
      if (v22 && *((_DWORD *)v10 + 10) == (unint64_t)*(unsigned int *)(v4 + 16)) {
        return v10;
      }
    }
LABEL_44:
    unint64_t v10 = (uint64_t *)*v10;
    if (!v10) {
      return v10;
    }
  }
  if (v21 >= *(void *)&v6) {
    v21 %= *(void *)&v6;
  }
  if (v21 == v8) {
    goto LABEL_44;
  }
  return 0;
}

uint64_t *sub_1002618D8(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint8x8_t v7 = result;
  uint64_t v9 = (uint64_t)(result + 2);
  uint64_t v8 = result[2];
  uint64_t v10 = *result;
  if (0x4EC4EC4EC4EC4EC5 * ((v8 - *result) >> 4) < a4)
  {
    if (v10)
    {
      uint64_t v11 = result[1];
      int v12 = (void *)*result;
      if (v11 != v10)
      {
        uint64_t v13 = v11 - 168;
        do
        {
          int v15 = *(_DWORD *)(v11 - 176);
          if (v15 == v15 >> 31)
          {
            if (*(unsigned char *)(v11 - 128)) {
              *(unsigned char *)(v11 - 128) = 0;
            }
          }
          else
          {
            uint64_t v14 = *(void *)(v11 - 168);
            if (v15 < 0)
            {
              if (v14) {
                (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
              }
            }
            else
            {
              (*(void (**)(uint64_t))v14)(v11 - 168);
            }
          }
          v11 -= 208;
          v13 -= 208;
        }
        while (v11 != v10);
        int v12 = (void *)*v7;
      }
      v7[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *uint8x8_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0x13B13B13B13B13BLL) {
      goto LABEL_59;
    }
    unint64_t v38 = 0x4EC4EC4EC4EC4EC5 * (v8 >> 4);
    uint64_t v39 = 2 * v38;
    if (2 * v38 <= a4) {
      uint64_t v39 = a4;
    }
    unint64_t v40 = v38 >= 0x9D89D89D89D89DLL ? 0x13B13B13B13B13BLL : v39;
    if (v40 > 0x13B13B13B13B13BLL) {
LABEL_59:
    }
      sub_1000A9108();
    uint64_t v41 = 208 * v40;
    uint64_t v42 = (char *)operator new(208 * v40);
    *uint8x8_t v7 = (uint64_t)v42;
    v7[1] = (uint64_t)v42;
    void v7[2] = (uint64_t)&v42[v41];
    uint64_t result = (uint64_t *)sub_100233F14(v9, a2, a3, (uint64_t)v42);
LABEL_46:
    v7[1] = (uint64_t)result;
    return result;
  }
  uint64_t v16 = result[1];
  if (0x4EC4EC4EC4EC4EC5 * ((v16 - v10) >> 4) < a4)
  {
    uint64_t v17 = a2 + 16 * ((v16 - v10) >> 4);
    if (v16 != v10)
    {
      uint64_t v18 = v10 + 32;
      uint64_t v19 = a2 + 8;
      do
      {
        uint64_t v22 = v19 - 8;
        int v21 = *(_DWORD *)(v19 - 8);
        int v23 = *(_DWORD *)(v18 - 32);
        if (v23 == v21)
        {
          char v24 = (void *)(v18 - 24);
          if (v23 == v23 >> 31)
          {
            *char v24 = *(void *)v19;
          }
          else
          {
            long long v20 = *(_OWORD *)v19;
            *(_DWORD *)(v18 - 8) = *(_DWORD *)(v19 + 16);
            *(_OWORD *)char v24 = v20;
          }
        }
        else
        {
          int v25 = v21 ^ (v21 >> 31);
          if (v25)
          {
            uint64_t v26 = v18 - 24;
            long long v27 = *(_OWORD *)v19;
            *(_DWORD *)(v26 + 16) = *(_DWORD *)(v19 + 16);
            *(_OWORD *)uint64_t v26 = v27;
            *(_DWORD *)(v18 - 32) = v25;
          }
          else
          {
            *(void *)(v18 - 24) = *(void *)v19;
            *(_DWORD *)(v18 - 32) = 0;
          }
        }
        sub_100261CFC(v18, v19 + 24);
        v18 += 208;
        v19 += 208;
      }
      while (v22 + 208 != v17);
      uint64_t v10 = v7[1];
    }
    uint64_t result = (uint64_t *)sub_100233F14(v9, v17, a3, v10);
    goto LABEL_46;
  }
  if (a2 != a3)
  {
    uint64_t v28 = v10 + 32;
    uint64_t v29 = a2 + 8;
    do
    {
      uint64_t v32 = v29 - 8;
      int v31 = *(_DWORD *)(v29 - 8);
      int v33 = *(_DWORD *)(v28 - 32);
      if (v33 == v31)
      {
        float v34 = (void *)(v28 - 24);
        if (v33 == v33 >> 31)
        {
          *float v34 = *(void *)v29;
        }
        else
        {
          long long v30 = *(_OWORD *)v29;
          *(_DWORD *)(v28 - 8) = *(_DWORD *)(v29 + 16);
          *(_OWORD *)float v34 = v30;
        }
      }
      else
      {
        int v35 = v31 ^ (v31 >> 31);
        if (v35)
        {
          uint64_t v36 = v28 - 24;
          long long v37 = *(_OWORD *)v29;
          *(_DWORD *)(v36 + 16) = *(_DWORD *)(v29 + 16);
          *(_OWORD *)uint64_t v36 = v37;
          *(_DWORD *)(v28 - 32) = v35;
        }
        else
        {
          *(void *)(v28 - 24) = *(void *)v29;
          *(_DWORD *)(v28 - 32) = 0;
        }
      }
      uint64_t result = (uint64_t *)sub_100261CFC(v28, v29 + 24);
      v28 += 208;
      v10 += 208;
      v29 += 208;
    }
    while (v32 + 208 != a3);
    uint64_t v16 = v7[1];
  }
  if (v16 != v10)
  {
    uint64_t v43 = v16 - 168;
    do
    {
      int v44 = *(_DWORD *)(v16 - 176);
      if (v44 == v44 >> 31)
      {
        if (*(unsigned char *)(v16 - 128)) {
          *(unsigned char *)(v16 - 128) = 0;
        }
      }
      else
      {
        uint64_t result = *(uint64_t **)(v16 - 168);
        if (v44 < 0)
        {
          if (result) {
            uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
          }
        }
        else
        {
          uint64_t result = (uint64_t *)((uint64_t (*)(uint64_t))*result)(v16 - 168);
        }
      }
      v16 -= 208;
      v43 -= 208;
    }
    while (v16 != v10);
  }
  v7[1] = v10;
  return result;
}

void sub_100261CEC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100261CF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100261CFC(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)a1;
  int v4 = *(_DWORD *)a2;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
  {
    int v11 = v4 ^ (v4 >> 31);
    uint64_t v34 = a1;
    int v35 = v11;
    if (v11)
    {
      uint64_t v12 = a2 + 8;
      if (v4 < 0)
      {
        *(void *)&long long v36 = a1;
        DWORD2(v36) = v4 ^ (v4 >> 31);
        *(void *)&long long v37 = v12;
        *((void *)&v37 + 1) = sub_100262444;
        uint64_t v26 = a1 + 8;
        if (v3 == v3 >> 31)
        {
          sub_10026219C((uint64_t)&v36, v26);
        }
        else
        {
          if ((v3 & 0x80000000) == 0) {
            sub_100262328();
          }
          uint64_t v33 = *(void *)(a1 + 8);
          *(void *)(a1 + 8) = 0;
          *(_DWORD *)a1 = v11;
          if (v33) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 8))(v33, v26);
          }
        }
      }
      else
      {
        sub_100262088((uint64_t)&v34, v12);
      }
      return a1;
    }
    int v13 = *(_DWORD *)(a2 + 8);
    int v14 = v13;
    if (v13 >> 31 != v13)
    {
      uint64_t v39 = *(void *)(a2 + 24);
      int v40 = *(_DWORD *)(a2 + 32);
      int v14 = v13 >> 31;
    }
    uint64_t v15 = *(void *)(a2 + 16);
    int v16 = v14 ^ v13;
    uint64_t v17 = *(void *)(a2 + 40);
    int v18 = *(unsigned __int8 *)(a2 + 48);
    int v19 = *(_DWORD *)(a2 + 52);
    long long v20 = *(_OWORD *)(a2 + 72);
    long long v36 = *(_OWORD *)(a2 + 56);
    long long v37 = v20;
    int v38 = *(_DWORD *)(a2 + 88);
    if (v3 != v3 >> 31)
    {
      uint64_t v21 = *(void *)(a1 + 8);
      if (v3 < 0)
      {
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
      }
      else
      {
        (*(void (**)(uint64_t))v21)(a1 + 8);
      }
    }
    if (v16 >> 31 == v16)
    {
      *(void *)(a1 + 16) = v15;
      *(_DWORD *)(a1 + 8) = 0;
      *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v17;
      *(unsigned char *)(a1 + 48) = 0;
      if (!v18) {
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v30 = v39;
      *(void *)(a1 + 16) = v15;
      *(void *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 32) = v40;
      *(_DWORD *)(a1 + 8) = (v16 >> 31) ^ v16;
      *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v17;
      *(unsigned char *)(a1 + 48) = 0;
      if (!v18)
      {
LABEL_40:
        long long v31 = v37;
        *(_OWORD *)(a1 + 56) = v36;
        *(_OWORD *)(a1 + 72) = v31;
        *(_DWORD *)(a1 + 88) = v38;
        *(_DWORD *)a1 = 0;
        return a1;
      }
    }
    *(_DWORD *)(a1 + 52) = v19;
    *(unsigned char *)(a1 + 48) = 1;
    goto LABEL_40;
  }
  unint64_t v5 = (uint64_t *)(a2 + 8);
  int8x8_t v6 = (uint64_t *)(a1 + 8);
  if (v3 == v3 >> 31)
  {
    int v7 = *(_DWORD *)v5;
    if (*(_DWORD *)v6 == v7)
    {
      uint64_t v8 = (void *)(a2 + 16);
      uint64_t v9 = (void *)(a1 + 16);
      if (*(_DWORD *)v6 == *(int *)v6 >> 31)
      {
        *uint64_t v9 = *v8;
        *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 40);
        int v10 = *(unsigned __int8 *)(a2 + 48);
        if (!*(unsigned char *)(a1 + 48)) {
          goto LABEL_30;
        }
      }
      else
      {
        long long v27 = *(_OWORD *)v8;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_OWORD *)uint64_t v9 = v27;
        *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 40);
        int v10 = *(unsigned __int8 *)(a2 + 48);
        if (!*(unsigned char *)(a1 + 48)) {
          goto LABEL_30;
        }
      }
    }
    else
    {
      int v22 = v7 ^ (v7 >> 31);
      int v23 = (long long *)(a2 + 16);
      char v24 = (_OWORD *)(a1 + 16);
      if (v22)
      {
        long long v25 = *v23;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *char v24 = v25;
        *(_DWORD *)int8x8_t v6 = v22;
        *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 40);
        int v10 = *(unsigned __int8 *)(a2 + 48);
        if (!*(unsigned char *)(a1 + 48))
        {
LABEL_30:
          if (v10)
          {
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
            *(unsigned char *)(a1 + 48) = 1;
          }
          goto LABEL_32;
        }
      }
      else
      {
        *(void *)char v24 = *(void *)v23;
        *(_DWORD *)int8x8_t v6 = 0;
        *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 40);
        int v10 = *(unsigned __int8 *)(a2 + 48);
        if (!*(unsigned char *)(a1 + 48)) {
          goto LABEL_30;
        }
      }
    }
    if (v10) {
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    }
    else {
      *(unsigned char *)(a1 + 48) = 0;
    }
LABEL_32:
    long long v28 = *(_OWORD *)(a2 + 56);
    long long v29 = *(_OWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v29;
    *(_OWORD *)(a1 + 56) = v28;
    return a1;
  }
  if (v3 < 0) {
    sub_1001AC87C(*v6, *v5);
  }
  else {
    sub_1001AC87C((uint64_t)v6, a2 + 8);
  }
  return a1;
}

uint64_t sub_100262088(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(_DWORD **)a1;
  int v10 = v3;
  uint64_t v11 = a2;
  uint64_t v12 = sub_100262198;
  int v4 = (uint64_t *)(v9 + 2);
  int v5 = *v9;
  if (v5 == v5 >> 31) {
    return sub_10026219C((uint64_t)&v9, (uint64_t)v4);
  }
  if ((v5 & 0x80000000) == 0) {
    sub_100262328();
  }
  uint64_t v7 = *v4;
  uint64_t *v4 = 0;
  uint64_t result = sub_1001AC878(v4, a2);
  *uint64_t v9 = v10;
  if (v7)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 8);
    return v8(v7);
  }
  return result;
}

void sub_100262170(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_begin_catch(a1);
  *(void *)(a9 + 8) = v9;
  __cxa_rethrow();
}

void sub_100262184(_Unwind_Exception *a1)
{
}

uint64_t sub_10026219C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40)) {
    *(unsigned char *)(a2 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(a1 + 24))(*(void *)a1 + 8, *(void *)(a1 + 16));
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_10026228C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, int a11, uint64_t a12, int a13)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    uint64_t v19 = *v13;
    int v20 = v15 >> 31;
    *(void *)(*v13 + 16) = v17;
    if (v15 >> 31 == v15)
    {
      int v20 = v15;
    }
    else
    {
      *(void *)(v19 + 24) = a12;
      *(_DWORD *)(v19 + 32) = a13;
    }
    *(_DWORD *)(v19 + 8) = v20 ^ v15;
    *(void *)(v19 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v18;
    *(unsigned char *)(v19 + 48) = 0;
    if (v14)
    {
      *(_DWORD *)(v19 + 52) = v16;
      *(unsigned char *)(v19 + 48) = 1;
    }
    *(_OWORD *)(v19 + 56) = a9;
    *(_OWORD *)(v19 + 72) = a10;
    *(_DWORD *)(v19 + 88) = a11;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_100262328()
{
}

void sub_1002623F0(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v3 = *v2;
  *(void *)(v3 + 8) = v1;
  *(_DWORD *)v3 ^= ~(*(int *)v3 >> 31);
  __cxa_rethrow();
}

void sub_100262410(_Unwind_Exception *a1)
{
}

void *sub_100262444(void *result)
{
  void *result = 0;
  return result;
}

void *sub_10026244C(uint64_t a1, uint64_t a2, int *a3)
{
  int v46 = &v45;
  uint64_t v7 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    unint64_t v8 = *(void *)v7;
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_58;
    }
  }
  else
  {
    unint64_t v8 = sub_100258DC8((uint64_t)&v46, (unsigned __int8 *)(a2 + 8));
    unint64_t v9 = *(void *)(a1 + 8);
    if (!v9) {
      goto LABEL_58;
    }
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v3 = v8;
    if (v8 >= v9) {
      unint64_t v3 = v8 % v9;
    }
  }
  else
  {
    unint64_t v3 = (v9 - 1) & v8;
  }
  uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
  if (v11)
  {
    uint64_t v12 = (void *)*v11;
    if (*v11)
    {
      int v13 = *(_DWORD *)a2;
      int v14 = (v13 >> 31) ^ v13;
      BOOL v15 = v13 >> 31 == v13;
      uint64_t v16 = *(void *)(a2 + 8);
      if (v10.u32[0] <= 1uLL)
      {
        unint64_t v17 = v9 - 1;
        if (v15)
        {
          while (1)
          {
            uint64_t v18 = v12[1];
            if (v18 == v8)
            {
              if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16) {
                return v12;
              }
            }
            else if ((v18 & v17) != v3)
            {
              goto LABEL_58;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_58;
            }
          }
        }
        while (1)
        {
          uint64_t v19 = v12[1];
          if (v19 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
            {
              BOOL v20 = v12[3] == *(void *)v7 && v12[4] == *(void *)(v7 + 8);
              if (v20 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16)) {
                return v12;
              }
            }
          }
          else if ((v19 & v17) != v3)
          {
            goto LABEL_58;
          }
          uint64_t v12 = (void *)*v12;
          if (!v12) {
            goto LABEL_58;
          }
        }
      }
      if (v15)
      {
        while (1)
        {
          unint64_t v22 = v12[1];
          if (v22 == v8)
          {
            if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14 && v12[3] == v16) {
              return v12;
            }
          }
          else
          {
            if (v22 >= v9) {
              v22 %= v9;
            }
            if (v22 != v3) {
              goto LABEL_58;
            }
          }
          uint64_t v12 = (void *)*v12;
          if (!v12) {
            goto LABEL_58;
          }
        }
      }
      do
      {
        unint64_t v23 = v12[1];
        if (v23 == v8)
        {
          if ((*((_DWORD *)v12 + 4) ^ (*((int *)v12 + 4) >> 31)) == v14)
          {
            BOOL v24 = v12[3] == *(void *)v7 && v12[4] == *(void *)(v7 + 8);
            if (v24 && *((_DWORD *)v12 + 10) == (unint64_t)*(unsigned int *)(v7 + 16)) {
              return v12;
            }
          }
        }
        else
        {
          if (v23 >= v9) {
            v23 %= v9;
          }
          if (v23 != v3) {
            break;
          }
        }
        uint64_t v12 = (void *)*v12;
      }
      while (v12);
    }
  }
LABEL_58:
  uint64_t v26 = operator new(0x30uLL);
  uint64_t v12 = v26;
  *uint64_t v26 = 0;
  v26[1] = v8;
  long long v27 = v26 + 3;
  int v30 = *a3;
  long long v29 = a3 + 2;
  int v28 = v30;
  int v31 = v30 >> 31;
  if (v30 >> 31 == v30)
  {
    *long long v27 = *(void *)v29;
    int v31 = v28;
  }
  else
  {
    *(_OWORD *)long long v27 = *(_OWORD *)v29;
    *((_DWORD *)v26 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v29[4];
  }
  *((_DWORD *)v26 + 4) = v31 ^ v28;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (v9 && (float)(v33 * (float)v9) >= v32)
  {
    unint64_t v8 = v3;
  }
  else
  {
    BOOL v34 = 1;
    if (v9 >= 3) {
      BOOL v34 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v9);
    unint64_t v36 = vcvtps_u32_f32(v32 / v33);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_74;
    }
    if (prime < v9)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < v9) {
LABEL_74:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        v8 %= v9;
      }
    }
    else
    {
      v8 &= v9 - 1;
    }
  }
  uint64_t v41 = *(void *)a1;
  uint64_t v42 = *(void **)(*(void *)a1 + 8 * v8);
  if (v42)
  {
    *uint64_t v12 = *v42;
LABEL_97:
    *uint64_t v42 = v12;
    goto LABEL_98;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v41 + 8 * v8) = a1 + 16;
  if (*v12)
  {
    unint64_t v43 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9) {
        v43 %= v9;
      }
    }
    else
    {
      v43 &= v9 - 1;
    }
    uint64_t v42 = (void *)(*(void *)a1 + 8 * v43);
    goto LABEL_97;
  }
LABEL_98:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_10026289C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002628B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 208;
  uint64_t v7 = *a1 + 208 * v6;
  if (a5 <= 0) {
    return v7;
  }
  uint64_t v12 = (uint64_t)(a1 + 2);
  uint64_t v11 = a1[2];
  unint64_t v13 = a1[1];
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v11 - v13) >> 4) >= a5)
  {
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v13 - v7) >> 4) >= a5)
    {
      uint64_t v18 = a3 + 208 * a5;
    }
    else
    {
      uint64_t v18 = a3 + 16 * ((uint64_t)(v13 - v7) >> 4);
      a1[1] = sub_100243968((uint64_t)(a1 + 2), v18, a4, v13);
      if ((uint64_t)(v13 - v7) < 1) {
        return v7;
      }
    }
    sub_100262D84((uint64_t)a1, v7, v13, v7 + 208 * a5);
    if (v18 != a3)
    {
      uint64_t v19 = v5 + 208 * v6 + 32;
      BOOL v20 = (long long *)(a3 + 8);
      do
      {
        uint64_t v23 = (uint64_t)v20 - 8;
        int v22 = *((_DWORD *)v20 - 2);
        int v24 = *(_DWORD *)(v19 - 32);
        if (v24 == v22)
        {
          long long v25 = (void *)(v19 - 24);
          if (v24 == v24 >> 31)
          {
            *long long v25 = *(void *)v20;
          }
          else
          {
            long long v21 = *v20;
            *(_DWORD *)(v19 - 8) = *((_DWORD *)v20 + 4);
            *(_OWORD *)long long v25 = v21;
          }
        }
        else
        {
          int v26 = v22 ^ (v22 >> 31);
          if (v26)
          {
            uint64_t v27 = v19 - 24;
            long long v28 = *v20;
            *(_DWORD *)(v27 + 16) = *((_DWORD *)v20 + 4);
            *(_OWORD *)uint64_t v27 = v28;
            *(_DWORD *)(v19 - 32) = v26;
          }
          else
          {
            *(void *)(v19 - 24) = *(void *)v20;
            *(_DWORD *)(v19 - 32) = 0;
          }
        }
        sub_100261CFC(v19, (uint64_t)v20 + 24);
        v19 += 208;
        v20 += 13;
      }
      while (v23 + 208 != v18);
    }
    return v7;
  }
  unint64_t v14 = a5 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v13 - v5) >> 4);
  if (v14 > 0x13B13B13B13B13BLL) {
    sub_1000A9108();
  }
  unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * ((v11 - v5) >> 4);
  if (2 * v15 > v14) {
    unint64_t v14 = 2 * v15;
  }
  if (v15 >= 0x9D89D89D89D89DLL) {
    unint64_t v16 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 > 0x13B13B13B13B13BLL) {
      sub_1000A6A10();
    }
    unint64_t v17 = (char *)operator new(208 * v16);
  }
  else
  {
    unint64_t v17 = 0;
  }
  uint64_t v30 = 0;
  uint64_t v31 = (uint64_t)&v17[208 * v6];
  long long v62 = &v17[208 * v16];
  uint64_t v32 = 208 * a5;
  uint64_t v33 = v31 + 208 * a5;
  do
  {
    unint64_t v35 = (void *)(v31 + v30 + 8);
    long long v37 = (void *)(a3 + v30 + 8);
    int v36 = *(_DWORD *)(a3 + v30);
    if (v36 == v36 >> 31)
    {
      void *v35 = *v37;
      int v38 = v36;
    }
    else
    {
      long long v39 = *(_OWORD *)v37;
      *(_DWORD *)(v31 + v30 + 24) = *(_DWORD *)(a3 + v30 + 24);
      *(_OWORD *)unint64_t v35 = v39;
      int v38 = *(_DWORD *)(a3 + v30);
      int v36 = v38 >> 31;
    }
    *(_DWORD *)(v31 + v3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v38 ^ v36;
    uint64_t v40 = (int *)(v31 + v30 + 40);
    uint64_t v41 = a3 + v30;
    int v42 = *(_DWORD *)(a3 + v30 + 32);
    unint64_t v43 = (int *)(a3 + v30 + 40);
    if (v42 == v42 >> 31)
    {
      int v44 = (void *)(v31 + v30 + 48);
      int v45 = *v43;
      int v46 = (void *)(v41 + 48);
      if (v45 == v45 >> 31)
      {
        *int v44 = *v46;
        int v47 = v45;
      }
      else
      {
        long long v48 = *(_OWORD *)v46;
        *(_DWORD *)(v31 + v30 + 64) = *(_DWORD *)(v41 + 64);
        *(_OWORD *)int v44 = v48;
        int v47 = *v43;
        int v45 = v47 >> 31;
      }
      int *v40 = v47 ^ v45;
      uint64_t v49 = v31 + v30;
      uint64_t v50 = a3 + v30;
      *(void *)(v49 + 72) = *(void *)(a3 + v30 + 72);
      *(unsigned char *)(v49 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
      if (*(unsigned char *)(a3 + v30 + 80))
      {
        *(_DWORD *)(v49 + 84) = *(_DWORD *)(v50 + 84);
        *(unsigned char *)(v49 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
      }
      long long v51 = *(_OWORD *)(v50 + 88);
      long long v52 = *(_OWORD *)(v50 + 104);
      *(_DWORD *)(v49 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(v50 + 120);
      *(_OWORD *)(v49 + 104) = v52;
      *(_OWORD *)(v49 + 88) = v51;
    }
    else
    {
      if (v42 >= 0) {
        uint64_t v34 = a3 + v30 + 40;
      }
      else {
        uint64_t v34 = *(void *)v43;
      }
      sub_1001AC878(v40, v34);
    }
    *(_DWORD *)(v31 + v30 + 32) = *(_DWORD *)(v41 + 32) ^ (*(int *)(v41 + 32) >> 31);
    v30 += 208;
  }
  while (v32 != v30);
  uint64_t v29 = v31;
  sub_10023474C(v12, v7, v7, *a1, *a1, v31, v31);
  uint64_t v61 = v53;
  uint64_t v54 = sub_1002633F4(v12, v7, a1[1], v33);
  uint64_t v55 = (char *)*a1;
  unint64_t v56 = (char *)a1[1];
  *a1 = v61;
  a1[1] = v54;
  a1[2] = (uint64_t)v62;
  if (v56 != v55)
  {
    uint64_t v57 = v56 - 168;
    do
    {
      int v59 = *((_DWORD *)v56 - 44);
      if (v59 == v59 >> 31)
      {
        if (*(v56 - 128)) {
          *(v56 - 128) = 0;
        }
      }
      else
      {
        uint64_t v58 = *((void *)v56 - 21);
        if (v59 < 0)
        {
          if (v58) {
            (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
          }
        }
        else
        {
          (*(void (**)(char *))v58)(v56 - 168);
        }
      }
      v56 -= 208;
      v57 -= 208;
    }
    while (v56 != v55);
  }
  if (v55) {
    operator delete(v55);
  }
  return v29;
}

void sub_100262D4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100262D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023467C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100262D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  a12 = v13 + v12;
  sub_10023467C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_100262D84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = v6 - a4;
  unint64_t v8 = a2 + v6 - a4;
  uint64_t v9 = v6;
  if (v8 < a3)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v13 = (void *)(v6 + v11 + 8);
      unint64_t v15 = (void *)(v8 + v11 + 8);
      int v14 = *(_DWORD *)(v8 + v11);
      if (v14 == v14 >> 31)
      {
        *uint64_t v13 = *v15;
        int v16 = v14;
      }
      else
      {
        long long v17 = *(_OWORD *)v15;
        *(_DWORD *)(v6 + v11 + 24) = *(_DWORD *)(v8 + v11 + 24);
        *(_OWORD *)uint64_t v13 = v17;
        int v16 = *(_DWORD *)(v8 + v11);
        int v14 = v16 >> 31;
      }
      *(_DWORD *)(v6 + v11) = v16 ^ v14;
      uint64_t v18 = (int *)(v6 + v11 + 40);
      uint64_t v19 = v8 + v11;
      int v20 = *(_DWORD *)(v8 + v11 + 32);
      long long v21 = (int *)(v8 + v11 + 40);
      if (v20 == v20 >> 31)
      {
        int v22 = (void *)(v6 + v11 + 48);
        int v23 = *v21;
        int v24 = (void *)(v19 + 48);
        if (v23 == v23 >> 31)
        {
          *int v22 = *v24;
          int v25 = v23;
        }
        else
        {
          long long v26 = *(_OWORD *)v24;
          *(_DWORD *)(v6 + v11 + 64) = *(_DWORD *)(v19 + 64);
          *(_OWORD *)int v22 = v26;
          int v25 = *v21;
          int v23 = v25 >> 31;
        }
        *uint64_t v18 = v25 ^ v23;
        uint64_t v27 = v6 + v11;
        uint64_t v28 = v8 + v11;
        *(void *)(v27 + 72) = *(void *)(v8 + v11 + 72);
        *(unsigned char *)(v27 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
        if (*(unsigned char *)(v8 + v11 + 80))
        {
          *(_DWORD *)(v27 + 84) = *(_DWORD *)(v28 + 84);
          *(unsigned char *)(v27 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
        }
        long long v29 = *(_OWORD *)(v28 + 88);
        long long v30 = *(_OWORD *)(v28 + 104);
        *(_DWORD *)(v27 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(v28 + 120);
        *(_OWORD *)(v27 + 104) = v30;
        *(_OWORD *)(v27 + 88) = v29;
      }
      else
      {
        if (v20 >= 0) {
          uint64_t v12 = v8 + v11 + 40;
        }
        else {
          uint64_t v12 = *(void *)v21;
        }
        sub_1001AC878(v18, v12);
      }
      *(_DWORD *)(v6 + v11 + 32) = *(_DWORD *)(v19 + 32) ^ (*(int *)(v19 + 32) >> 31);
      v11 += 208;
    }
    while (v8 + v11 < a3);
    uint64_t v9 = v6 + v11;
  }
  *(void *)(a1 + 8) = v9;
  if (v6 != a4)
  {
    uint64_t v31 = 0;
    do
    {
      uint64_t v33 = v8 + v31;
      uint64_t v34 = v6 + v31;
      int v35 = *(_DWORD *)(v6 + v31 - 208);
      int v36 = *(_DWORD *)(v8 + v31 - 208);
      if (v35 == v36)
      {
        long long v37 = (void *)(v33 - 200);
        uint64_t v38 = v34 - 200;
        if (v35 == v35 >> 31)
        {
          *(void *)uint64_t v38 = *v37;
        }
        else
        {
          long long v32 = *(_OWORD *)v37;
          *(_DWORD *)(v38 + 16) = *(_DWORD *)(v33 - 184);
          *(_OWORD *)uint64_t v38 = v32;
        }
      }
      else
      {
        int v39 = v36 ^ (v36 >> 31);
        uint64_t v40 = (long long *)(v33 - 200);
        uint64_t v41 = (_OWORD *)(v34 - 200);
        if (v39)
        {
          long long v42 = *v40;
          *(_DWORD *)(v34 - 184) = *((_DWORD *)v40 + 4);
          *uint64_t v41 = v42;
          *(_DWORD *)(v34 - 208) = v39;
        }
        else
        {
          *(void *)uint64_t v41 = *(void *)v40;
          *(_DWORD *)(v34 - 208) = 0;
        }
      }
      sub_100262FEC((uint64_t *)(v6 + v31 - 176), (unsigned int *)(v8 + v31 - 176));
      v31 -= 208;
    }
    while (-16 * (v7 >> 4) != v31);
  }
}

void sub_100262FE0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2 + v3;
  _Unwind_Resume(a1);
}

double sub_100262FEC(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3 = *(unsigned int *)a1;
  uint64_t v4 = *a2;
  if (v3 == v4)
  {
    unint64_t v8 = (uint64_t *)(a2 + 2);
    uint64_t v5 = (__n128 *)(a1 + 1);
    if (v3 == (int)v3 >> 31) {
      *(void *)&double result = sub_10026309C(v3, (int **)&v8, v5).n128_u64[0];
    }
    else {
      sub_1002631C0(v3, &v8, (uint64_t *)v5);
    }
  }
  else
  {
    unint64_t v8 = a1;
    int v9 = v4 ^ ((int)v4 >> 31);
    uint64_t v7 = (uint64_t)(a2 + 2);
    if (v9) {
      sub_10026330C(v4, (uint64_t)&v8, v7);
    }
    else {
      *(void *)&double result = sub_1002631DC(v4, (uint64_t)&v8, v7).n128_u64[0];
    }
  }
  return result;
}

__n128 sub_10026309C(uint64_t a1, int **a2, __n128 *a3)
{
  uint64_t v3 = (__n128 *)*a2;
  int v4 = **a2;
  if (a3->n128_u32[0] == v4)
  {
    uint64_t v5 = &v3->n128_u64[1];
    uint64_t v6 = &a3->n128_u64[1];
    if (a3->n128_u32[0] == a3->n128_i32[0] >> 31)
    {
      *uint64_t v6 = *v5;
      a3[2].n128_u64[0] = v3[2].n128_u64[0];
      int v7 = v3[2].n128_u8[8];
      if (!a3[2].n128_u8[8]) {
        goto LABEL_14;
      }
    }
    else
    {
      long long v11 = *(_OWORD *)v5;
      a3[1].n128_u32[2] = v3[1].n128_u32[2];
      *(_OWORD *)uint64_t v6 = v11;
      a3[2].n128_u64[0] = v3[2].n128_u64[0];
      int v7 = v3[2].n128_u8[8];
      if (!a3[2].n128_u8[8]) {
        goto LABEL_14;
      }
    }
LABEL_9:
    if (!v7)
    {
      a3[2].n128_u8[8] = 0;
      __n128 result = v3[3];
      __n128 v14 = v3[4];
      a3[5].n128_u32[0] = v3[5].n128_u32[0];
      a3[3] = result;
      a3[4] = v14;
      return result;
    }
    a3[2].n128_u32[3] = v3[2].n128_u32[3];
LABEL_11:
    __n128 result = v3[3];
    __n128 v13 = v3[4];
    a3[5].n128_u32[0] = v3[5].n128_u32[0];
    a3[3] = result;
    a3[4] = v13;
    return result;
  }
  int v8 = v4 ^ (v4 >> 31);
  int v9 = &v3->n128_u64[1];
  if (!v8)
  {
    a3->n128_u64[1] = *v9;
    a3->n128_u32[0] = 0;
    a3[2].n128_u64[0] = v3[2].n128_u64[0];
    int v7 = v3[2].n128_u8[8];
    if (!a3[2].n128_u8[8]) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  __n128 v10 = *(__n128 *)v9;
  a3[1].n128_u32[2] = v3[1].n128_u32[2];
  *(__n128 *)((char *)a3 + 8) = v10;
  a3->n128_u32[0] = v8;
  a3[2].n128_u64[0] = v3[2].n128_u64[0];
  int v7 = v3[2].n128_u8[8];
  if (a3[2].n128_u8[8]) {
    goto LABEL_9;
  }
LABEL_14:
  if (!v7) {
    goto LABEL_11;
  }
  a3[2].n128_u32[3] = v3[2].n128_u32[3];
  a3[2].n128_u8[8] = 1;
  __n128 result = v3[3];
  __n128 v15 = v3[4];
  a3[5].n128_u32[0] = v3[5].n128_u32[0];
  a3[3] = result;
  a3[4] = v15;
  return result;
}

uint64_t sub_1002631C0(int a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (a1 < 0) {
    return sub_1001AC87C(*a3, *v3);
  }
  else {
    return sub_1001AC87C((uint64_t)a3, (uint64_t)v3);
  }
}

__n128 sub_1002631DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(_DWORD **)a2;
  uint64_t v6 = (void *)(*(void *)a2 + 8);
  int v7 = **(_DWORD **)a2;
  if (v7 == v7 >> 31)
  {
    if (*((unsigned char *)v5 + 48)) {
      *((unsigned char *)v5 + 48) = 0;
    }
  }
  else
  {
    uint64_t v8 = *v6;
    if (v7 < 0)
    {
      if (v8) {
        (*(void (**)(void))(*(void *)v8 + 8))(*v6);
      }
    }
    else
    {
      (*(void (**)(void))v8)();
    }
  }
  int v9 = *(int **)a2;
  __n128 v10 = (void *)(*(void *)a2 + 16);
  uint64_t v12 = (void *)(a3 + 8);
  int v11 = *(_DWORD *)a3;
  if (v11 == v11 >> 31)
  {
    *__n128 v10 = *v12;
    int v13 = v11;
  }
  else
  {
    long long v14 = *(_OWORD *)v12;
    *(_DWORD *)(*(void *)a2 + 32) = *(_DWORD *)(a3 + 24);
    *(_OWORD *)__n128 v10 = v14;
    int v13 = *(_DWORD *)a3;
    int v11 = *(int *)a3 >> 31;
  }
  v9[2] = v13 ^ v11;
  *((void *)v9 + 5) = *(void *)(a3 + 32);
  *((unsigned char *)v9 + 48) = 0;
  if (*(unsigned char *)(a3 + 40))
  {
    v9[13] = *(_DWORD *)(a3 + 44);
    *((unsigned char *)v9 + 48) = 1;
  }
  __n128 result = *(__n128 *)(a3 + 48);
  long long v16 = *(_OWORD *)(a3 + 64);
  v9[22] = *(_DWORD *)(a3 + 80);
  *(_OWORD *)(v9 + 18) = v16;
  *(__n128 *)(v9 + 14) = result;
  **(_DWORD **)a2 = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_10026330C(int a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    uint64_t v4 = *(void *)a2;
    int v5 = *(_DWORD *)(a2 + 8);
    uint64_t v8 = v4;
    int v9 = v5;
    uint64_t v10 = a3;
    int v11 = sub_100262444;
    int v6 = *(_DWORD *)v4;
    if (v6 == v6 >> 31)
    {
      return sub_10026219C((uint64_t)&v8, v4 + 8);
    }
    else
    {
      if ((v6 & 0x80000000) == 0) {
        sub_100262328();
      }
      uint64_t result = *(void *)(v4 + 8);
      *(void *)(v4 + 8) = 0;
      *(_DWORD *)uint64_t v4 = v5;
      if (result)
      {
        int v7 = *(uint64_t (**)(void))(*(void *)result + 8);
        return v7();
      }
    }
  }
  else
  {
    return sub_100262088(a2, a3);
  }
  return result;
}

uint64_t sub_1002633F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v24 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v10 = (void *)(v4 + 8);
      uint64_t v12 = (void *)(v6 + 8);
      int v11 = *(_DWORD *)v6;
      if (v11 == v11 >> 31)
      {
        *uint64_t v10 = *v12;
        int v13 = v11;
      }
      else
      {
        long long v14 = *(_OWORD *)v12;
        *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
        *(_OWORD *)uint64_t v10 = v14;
        int v13 = *(_DWORD *)v6;
        int v11 = *(int *)v6 >> 31;
      }
      *(_DWORD *)uint64_t v4 = v13 ^ v11;
      int v15 = *(_DWORD *)(v6 + 32);
      long long v16 = (int *)(v6 + 40);
      if (v15 == v15 >> 31)
      {
        long long v17 = (void *)(v4 + 48);
        int v18 = *(_DWORD *)(v6 + 40);
        uint64_t v19 = (void *)(v6 + 48);
        if (v18 == v18 >> 31)
        {
          *long long v17 = *v19;
          int v20 = v18;
        }
        else
        {
          long long v22 = *(_OWORD *)v19;
          *(_DWORD *)(v4 + 64) = *(_DWORD *)(v6 + 64);
          *(_OWORD *)long long v17 = v22;
          int v20 = *v16;
          int v18 = v20 >> 31;
        }
        *(_DWORD *)(v4 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v20 ^ v18;
        *(void *)(v4 + 72) = *(void *)(v6 + 72);
        *(unsigned char *)(v4 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
        if (*(unsigned char *)(v6 + 80))
        {
          *(_DWORD *)(v4 + 84) = *(_DWORD *)(v6 + 84);
          *(unsigned char *)(v4 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
        }
        long long v7 = *(_OWORD *)(v6 + 88);
        long long v8 = *(_OWORD *)(v6 + 104);
        *(_DWORD *)(v4 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(v6 + 120);
        *(_OWORD *)(v4 + 104) = v8;
        *(_OWORD *)(v4 + 88) = v7;
        uint64_t v9 = v4;
      }
      else
      {
        if (v15 >= 0) {
          uint64_t v21 = v6 + 40;
        }
        else {
          uint64_t v21 = *(void *)v16;
        }
        sub_1001AC878(v4 + 40, v21);
        uint64_t v9 = v24;
      }
      *(_DWORD *)(v4 + 32) = *(_DWORD *)(v6 + 32) ^ (*(int *)(v6 + 32) >> 31);
      v6 += 208;
      uint64_t v4 = v9 + 208;
      uint64_t v24 = v9 + 208;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_10026356C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100263580(void *result, unint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v4 = (void *)result[1];
  uint64_t v3 = (unsigned char *)result[2];
  uint64_t v5 = v3 - (unsigned char *)v4;
  if (v3 - (unsigned char *)v4 == 16)
  {
    *((_DWORD *)result + 8) = 1;
  }
  else
  {
    uint64_t v6 = v5 >> 4;
    if (v5 >> 4 > a2)
    {
      unint64_t v7 = 0;
      do
      {
        if (v7 != a2)
        {
          uint64_t v8 = v4[2 * a2];
          uint64_t v9 = *result;
          uint64_t v10 = &v4[2 * v7];
          while (1)
          {
            uint64_t v11 = *v10;
            v10 += 2;
            if (v9 >= v8 - v11) {
              break;
            }
            ++v7;
            *((_DWORD *)result + 8) = 2;
            if (a2 == v7) {
              goto LABEL_6;
            }
          }
        }
        if (v7 == a2)
        {
LABEL_6:
          *((_DWORD *)result + 8) = 1;
          unint64_t v7 = a2;
        }
        ++a2;
      }
      while (a2 != v6);
      if (v7)
      {
        if ((v7 & 0x8000000000000000) != 0) {
          sub_1000A9108();
        }
        uint64_t v12 = (char *)&v4[2 * v7];
        uint64_t v13 = v3 - v12;
        if (v3 != v12) {
          uint64_t result = memmove(v4, v12, v3 - v12);
        }
        v2[2] = (char *)v4 + v13;
      }
    }
  }
  return result;
}

void sub_100263690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002636AC(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  long long v48 = &v47;
  uint64_t v9 = a2 + 8;
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    unint64_t v10 = *(void *)v9;
    unint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      goto LABEL_58;
    }
  }
  else
  {
    unint64_t v10 = sub_100258DC8((uint64_t)&v48, (unsigned __int8 *)(a2 + 8));
    unint64_t v11 = *(void *)(a1 + 8);
    if (!v11) {
      goto LABEL_58;
    }
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v4 = v10;
    if (v10 >= v11) {
      unint64_t v4 = v10 % v11;
    }
  }
  else
  {
    unint64_t v4 = (v11 - 1) & v10;
  }
  uint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
  if (v13)
  {
    long long v14 = (void *)*v13;
    if (*v13)
    {
      int v15 = *(_DWORD *)a2;
      int v16 = (v15 >> 31) ^ v15;
      BOOL v17 = v15 >> 31 == v15;
      uint64_t v18 = *(void *)(a2 + 8);
      if (v12.u32[0] <= 1uLL)
      {
        unint64_t v19 = v11 - 1;
        if (v17)
        {
          while (1)
          {
            uint64_t v20 = v14[1];
            if (v20 == v10)
            {
              if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18) {
                return v14;
              }
            }
            else if ((v20 & v19) != v4)
            {
              goto LABEL_58;
            }
            long long v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_58;
            }
          }
        }
        while (1)
        {
          uint64_t v21 = v14[1];
          if (v21 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
            {
              BOOL v22 = v14[3] == *(void *)v9 && v14[4] == *(void *)(v9 + 8);
              if (v22 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16)) {
                return v14;
              }
            }
          }
          else if ((v21 & v19) != v4)
          {
            goto LABEL_58;
          }
          long long v14 = (void *)*v14;
          if (!v14) {
            goto LABEL_58;
          }
        }
      }
      if (v17)
      {
        while (1)
        {
          unint64_t v24 = v14[1];
          if (v24 == v10)
          {
            if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16 && v14[3] == v18) {
              return v14;
            }
          }
          else
          {
            if (v24 >= v11) {
              v24 %= v11;
            }
            if (v24 != v4) {
              goto LABEL_58;
            }
          }
          long long v14 = (void *)*v14;
          if (!v14) {
            goto LABEL_58;
          }
        }
      }
      do
      {
        unint64_t v25 = v14[1];
        if (v25 == v10)
        {
          if ((*((_DWORD *)v14 + 4) ^ (*((int *)v14 + 4) >> 31)) == v16)
          {
            BOOL v26 = v14[3] == *(void *)v9 && v14[4] == *(void *)(v9 + 8);
            if (v26 && *((_DWORD *)v14 + 10) == (unint64_t)*(unsigned int *)(v9 + 16)) {
              return v14;
            }
          }
        }
        else
        {
          if (v25 >= v11) {
            v25 %= v11;
          }
          if (v25 != v4) {
            break;
          }
        }
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
  }
LABEL_58:
  uint64_t v28 = operator new(0x38uLL);
  long long v14 = v28;
  *uint64_t v28 = 0;
  v28[1] = v10;
  long long v29 = v28 + 3;
  int v32 = *a3;
  uint64_t v31 = a3 + 2;
  int v30 = v32;
  int v33 = v32 >> 31;
  if (v32 >> 31 == v32)
  {
    *long long v29 = *(void *)v31;
    int v33 = v30;
  }
  else
  {
    *(_OWORD *)long long v29 = *(_OWORD *)v31;
    *((_DWORD *)v28 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v31[4];
  }
  *((_DWORD *)v28 + 4) = v33 ^ v30;
  v28[6] = *a4;
  float v34 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v35 = *(float *)(a1 + 32);
  if (v11 && (float)(v35 * (float)v11) >= v34)
  {
    unint64_t v10 = v4;
  }
  else
  {
    BOOL v36 = 1;
    if (v11 >= 3) {
      BOOL v36 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v11);
    unint64_t v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_74;
    }
    if (prime < v11)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < v11) {
LABEL_74:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        v10 %= v11;
      }
    }
    else
    {
      v10 &= v11 - 1;
    }
  }
  uint64_t v43 = *(void *)a1;
  int v44 = *(void **)(*(void *)a1 + 8 * v10);
  if (v44)
  {
    *long long v14 = *v44;
LABEL_97:
    *int v44 = v14;
    goto LABEL_98;
  }
  *long long v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v43 + 8 * v1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = a1 + 16;
  if (*v14)
  {
    unint64_t v45 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v45 >= v11) {
        v45 %= v11;
      }
    }
    else
    {
      v45 &= v11 - 1;
    }
    int v44 = (void *)(*(void *)a1 + 8 * v45);
    goto LABEL_97;
  }
LABEL_98:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_100263B10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100263B24(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        float v34 = (char *)operator new(8 * v31);
        float v35 = &v34[8 * v32];
        BOOL v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            double v74 = &v34[8 * v32];
            unint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v40 = &v35[v76];
              v7 += v76;
              double v77 = (long long *)(v6 + 3);
              double v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                _OWORD *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_1000A6A10();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    int v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      int v91 = operator new(0xFF8uLL);
      sub_100192E00((char **)a1, &v91);
      return;
    }
    int v91 = operator new(0xFF8uLL);
    sub_100192F90((void **)a1, &v91);
    uint8x8_t v41 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        float v34 = (char *)operator new(8 * v42);
        float v35 = &v34[8 * v43];
        BOOL v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        uint64_t v5 = v35;
        if (!v37)
        {
          uint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            char v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              char v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              uint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *uint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            char v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)char v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  unint64_t v25 = (char *)operator new(8 * v24);
  BOOL v26 = operator new(0xFF8uLL);
  uint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    char v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_1000A6A10();
      }
      uint64_t v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      unint64_t v25 = v49;
      *(void *)uint64_t v27 = v90;
      long long v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      long long v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_1000A6A10();
          }
          double v60 = (char *)operator new(8 * v59);
          unint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          long long v29 = v53;
          if (!v37)
          {
            long long v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            __double2 v64 = &v60[8 * v61];
            size_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            __double2 v64 = &v60[8 * v61];
            size_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            __double2 v64 = &v53[v68];
            size_t v65 = &v27[v68];
            std::string::value_type v69 = (long long *)(v27 + 16);
            unint64_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)unint64_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)__double2 v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          uint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          long long v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          unint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      long long v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  long long v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  long long v51 = v27;
LABEL_46:
  long long v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_100264094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1002640B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002640C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1002640DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002640F4(uint64_t a1, int *a2, _DWORD *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t result = (void *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = result[1];
            if (v14 == v8)
            {
              if (*((_DWORD *)result + 4) == v8) {
                return result;
              }
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t result = (void *)*result;
            if (!result) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = result[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)result + 4) == v8) {
              return result;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  long long v29 = operator new(0x50uLL);
  *long long v29 = 0;
  v29[1] = v8;
  *((_DWORD *)v29 + 4) = *a3;
  sub_10023BDF4(v29 + 3, a4);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v23) {
      goto LABEL_37;
    }
    if (prime < *(void *)&v23)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v23 < 3uLL || (uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < *(void *)&v23) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v27 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
      {
        unint64_t v4 = v8 % v9;
        uint64_t v17 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        uint64_t v18 = v29;
        if (v17) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v8;
        uint64_t v17 = *(void **)(*(void *)a1 + 8 * v8);
        uint64_t v18 = v29;
        if (v17) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v8;
      uint64_t v17 = *(void **)(*(void *)a1 + 8 * (v27 & v8));
      uint64_t v18 = v29;
      if (v17) {
        goto LABEL_26;
      }
    }
LABEL_50:
    *uint64_t v18 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v29)
    {
      unint64_t v28 = *(void *)(*v29 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v28 >= v9) {
          v28 %= v9;
        }
      }
      else
      {
        v28 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v28) = v29;
    }
    goto LABEL_61;
  }
  uint64_t v17 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v18 = v29;
  if (!v17) {
    goto LABEL_50;
  }
LABEL_26:
  *uint64_t v18 = *v17;
  *uint64_t v17 = v29;
LABEL_61:
  uint64_t result = v29;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_100264450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {
    sub_100235440(v10, a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100264484()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002644FC()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_100264574(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100361658();
  sub_1001AC878(v4 + 40, a2);
  *(_DWORD *)(a1 + 32) = 1;
  return a1;
}

uint64_t *sub_1002645B4@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result != v5)
  {
    while (1)
    {
      int v6 = *(_DWORD *)v4;
      int v7 = *(_DWORD *)v4;
      if (*(int *)v4 >> 31 != *(_DWORD *)v4)
      {
        uint64_t v42 = *(void *)(v4 + 16);
        int v43 = *(_DWORD *)(v4 + 24);
        int v7 = v6 >> 31;
      }
      int v8 = *(unsigned __int8 *)(v4 + 40);
      if (*(unsigned char *)(v4 + 40)) {
        int v2 = *(_DWORD *)(v4 + 44);
      }
      uint64_t v9 = *(void *)(v4 + 8);
      int v10 = v7 ^ v6;
      uint64_t v11 = *(void *)(v4 + 32);
      long long v26 = *(_OWORD *)(v4 + 48);
      long long v27 = *(_OWORD *)(v4 + 64);
      int v28 = *(_DWORD *)(v4 + 80);
      *(void *)&long long v30 = v9;
      if (v10 >> 31 != v10) {
        break;
      }
      int v12 = 0;
      int v29 = 0;
      *(void *)&long long v34 = v9;
      LODWORD(v33) = 0;
      uint64_t v36 = v11;
      char v37 = 0;
      if (v8) {
        goto LABEL_13;
      }
LABEL_14:
      long long v39 = v26;
      long long v40 = v27;
      int v41 = v28;
      int v32 = 0;
      unint64_t v13 = a2[1];
      if (v13 >= a2[2])
      {
        uint64_t result = (uint64_t *)sub_100264918(a2, (uint64_t)&v29);
        a2[1] = (uint64_t)result;
        int v18 = v32;
        if (v32 != v32 >> 31) {
          goto LABEL_31;
        }
        goto LABEL_4;
      }
      uint64_t v14 = (void *)(v13 + 8);
      if (v12 >> 31 == v12)
      {
        int v15 = 0;
        *uint64_t v14 = v9;
        *(_DWORD *)unint64_t v13 = 0;
        int v16 = 0;
LABEL_24:
        unint64_t v20 = (void *)(v13 + 48);
        int v21 = (int)v33;
        int v22 = (int)v33 >> 31;
        if ((int)v33 >> 31 == v33)
        {
          *unint64_t v20 = v34;
          int v22 = v21;
        }
        else
        {
          long long v23 = v34;
          *(_DWORD *)(v13 + 64) = v35;
          *(_OWORD *)unint64_t v20 = v23;
        }
        *(_DWORD *)(v13 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v22 ^ v21;
        *(void *)(v13 + 72) = v36;
        *(unsigned char *)(v13 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
        if (v37)
        {
          *(_DWORD *)(v13 + 84) = v38;
          *(unsigned char *)(v13 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
        }
        long long v24 = v39;
        long long v25 = v40;
        *(_DWORD *)(v13 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v41;
        *(_OWORD *)(v13 + 104) = v25;
        *(_OWORD *)(v13 + 88) = v24;
        goto LABEL_30;
      }
      long long v19 = v30;
      *(_DWORD *)(v13 + 24) = v31;
      *(_OWORD *)uint64_t v14 = v19;
      int v15 = v32;
      *(_DWORD *)unint64_t v13 = (v12 >> 31) ^ v12;
      int v16 = v15 >> 31;
      if (v15 >> 31 == v15) {
        goto LABEL_24;
      }
      if (v15 >= 0) {
        uint64_t v17 = &v33;
      }
      else {
        uint64_t v17 = v33;
      }
      sub_1001AC878(v13 + 40, v17);
      int v15 = v32;
      int v16 = v32 >> 31;
LABEL_30:
      *(_DWORD *)(v13 + 32) = v16 ^ v15;
      uint64_t result = (uint64_t *)(v13 + 208);
      a2[1] = v13 + 208;
      a2[1] = v13 + 208;
      int v18 = v32;
      if (v32 != v32 >> 31)
      {
LABEL_31:
        uint64_t result = v33;
        if (v18 < 0)
        {
          if (v33) {
            uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*v33 + 8))();
          }
        }
        else
        {
          uint64_t result = (uint64_t *)((uint64_t (*)(void **))*v33)(&v33);
        }
      }
LABEL_4:
      v4 += 88;
      if (v4 == v5) {
        return result;
      }
    }
    *((void *)&v30 + 1) = v42;
    int v31 = v43;
    int v12 = (v10 >> 31) ^ v10;
    int v29 = v12;
    *(void *)&long long v34 = v9;
    *((void *)&v34 + 1) = v42;
    int v35 = v43;
    LODWORD(v33) = v12;
    uint64_t v36 = v11;
    char v37 = 0;
    if (!v8) {
      goto LABEL_14;
    }
LABEL_13:
    int v38 = v2;
    char v37 = 1;
    goto LABEL_14;
  }
  return result;
}

void sub_1002648DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  *(void *)(v9 + 8) = v10;
  sub_10023B1B4((uint64_t)va);
  sub_1002329B0((void **)v9);
  _Unwind_Resume(a1);
}

void sub_1002648FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10023B1B4((uint64_t)va);
  sub_1002329B0(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100264918(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x13B13B13B13B13BLL) {
    sub_1000A9108();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4) > v6) {
    unint64_t v6 = 0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 4)) >= 0x9D89D89D89D89DLL) {
    unint64_t v8 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x13B13B13B13B13BLL) {
      sub_1000A6A10();
    }
    uint64_t v9 = operator new(208 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[52 * v5];
  int v35 = v10;
  uint64_t v11 = v10 + 2;
  unint64_t v13 = (void *)(a2 + 8);
  int v12 = *(_DWORD *)a2;
  int v14 = *(int *)a2 >> 31;
  if (v12 >> 31 == v12)
  {
    *uint64_t v11 = *v13;
    int v14 = v12;
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v13;
    v10[6] = *(_DWORD *)(a2 + 24);
  }
  *uint64_t v10 = v14 ^ v12;
  int v15 = &v9[52 * v5 + 10];
  int v16 = *(_DWORD *)(a2 + 32);
  int v17 = v16 >> 31;
  if (v16 >> 31 == v16)
  {
    int v18 = &v9[52 * v5 + 12];
    int v19 = *(_DWORD *)(a2 + 40);
    int v20 = v19 >> 31;
    int v21 = (void *)(a2 + 48);
    if (v19 >> 31 == v19)
    {
      *int v18 = *v21;
      int v20 = v19;
    }
    else
    {
      *(_OWORD *)int v18 = *(_OWORD *)v21;
      v9[52 * v5 + 16] = *(_DWORD *)(a2 + 64);
    }
    *int v15 = v20 ^ v19;
    long long v24 = (char *)&v9[52 * v5];
    uint64_t v25 = *(void *)(a2 + 72);
    v24[80] = 0;
    long long v26 = v24 + 80;
    *((void *)v26 - 1) = v25;
    if (*(unsigned char *)(a2 + 80))
    {
      v9[52 * v5 + 21] = *(_DWORD *)(a2 + 84);
      *long long v26 = 1;
    }
    long long v23 = (char *)&v9[52 * v5];
    *(_OWORD *)(v23 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(a2 + 104);
    *((_DWORD *)v23 + 3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(a2 + 120);
  }
  else
  {
    if (v16 >= 0) {
      uint64_t v22 = a2 + 40;
    }
    else {
      uint64_t v22 = *(void *)(a2 + 40);
    }
    sub_1001AC878(v15, v22);
    int v16 = *(_DWORD *)(a2 + 32);
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v10 = v35;
    long long v23 = (char *)&v9[52 * v5];
    int v17 = v16 >> 31;
  }
  v9[52 * v5 + 8] = v17 ^ v16;
  uint64_t v27 = (uint64_t)(v23 + 208);
  sub_10023474C((uint64_t)(a1 + 2), v4, v4, v3, v3, (uint64_t)v10, (uint64_t)v10);
  int v28 = (char *)*a1;
  int v29 = (char *)a1[1];
  *a1 = v30;
  a1[1] = v27;
  a1[2] = (uint64_t)&v9[52 * v8];
  if (v29 != v28)
  {
    int v31 = v29 - 168;
    do
    {
      int v33 = *((_DWORD *)v29 - 44);
      if (v33 == v33 >> 31)
      {
        if (*(v29 - 128)) {
          *(v29 - 128) = 0;
        }
      }
      else
      {
        uint64_t v32 = *((void *)v29 - 21);
        if (v33 < 0)
        {
          if (v32) {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
          }
        }
        else
        {
          (*(void (**)(char *))v32)(v29 - 168);
        }
      }
      v29 -= 208;
      v31 -= 208;
    }
    while (v29 != v28);
  }
  if (v28) {
    operator delete(v28);
  }
  return v27;
}

void sub_100264C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023467C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100264C40()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100264CB8()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_100264D30(uint64_t a1, unint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  sub_1002AA4A0(__p, 0);
  sub_1002677C4((void *)(a1 + 112), a2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000A9108();
    }
    uint64_t v4 = (char *)operator new(8 * a2);
    *(void *)(a1 + 136) = v4;
    *(void *)(a1 + 152) = &v4[8 * a2];
    bzero(v4, 8 * a2);
    *(void *)(a1 + 144) = &v4[8 * a2];
  }
  return a1;
}

void sub_100264DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    if (!*(unsigned char *)(v11 + 80))
    {
LABEL_3:
      sub_100264F04(v11);
      _Unwind_Resume(a1);
    }
  }
  else if (!*(unsigned char *)(v11 + 80))
  {
    goto LABEL_3;
  }
  unint64_t v13 = *(void **)(v11 + 88);
  if (v13)
  {
    *(void *)(v11 + 96) = v13;
    operator delete(v13);
  }
  *(unsigned char *)(v11 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  sub_100264F04(v11);
  _Unwind_Resume(a1);
}

void **sub_100264E8C(void **a1)
{
  int v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (char *)a1[1];
      do
      {
        int v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        unint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_100264F04(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    int v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(void *)(a1 + 56) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 16) = v3;
      operator delete(v3);
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

uint64_t sub_100264F58(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  unint64_t v6 = *(const void **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  int64_t v7 = v5 - *(void *)a3;
  if (v5 != *(void *)a3)
  {
    if (v7 < 0) {
      sub_1000A9108();
    }
    unint64_t v8 = (char *)operator new(v5 - *(void *)a3);
    *(void *)(a1 + 88) = v8;
    *(void *)(a1 + 96) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 104) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 96) = v9;
  }
  *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
  sub_1002AA4A0(__p, 0);
  sub_1002677C4((void *)(a1 + 112), a2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000A9108();
    }
    uint64_t v10 = (char *)operator new(8 * a2);
    *(void *)(a1 + 136) = v10;
    *(void *)(a1 + 152) = &v10[8 * a2];
    bzero(v10, 8 * a2);
    *(void *)(a1 + 144) = &v10[8 * a2];
  }
  return a1;
}

void sub_100265084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v11 + 80))
  {
    int v14 = *v12;
    if (*v12)
    {
      *(void *)(v11 + 96) = v14;
      operator delete(v14);
    }
    *(unsigned char *)(v11 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
    sub_100264F04(v11);
    _Unwind_Resume(a1);
  }
  sub_100264F04(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100265114(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  if (*(unsigned char *)a3)
  {
    sub_100267358(a1 + 8, a3 + 8);
    *(unsigned char *)a1 = 1;
  }
  *(void *)(a1 + 72) = *(void *)(a3 + 72);
  *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  sub_1002AA4A0(__p, 0);
  sub_1002677C4((void *)(a1 + 112), a2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000A9108();
    }
    unint64_t v6 = (char *)operator new(8 * a2);
    *(void *)(a1 + 136) = v6;
    *(void *)(a1 + 152) = &v6[8 * a2];
    bzero(v6, 8 * a2);
    *(void *)(a1 + 144) = &v6[8 * a2];
  }
  return a1;
}

void sub_100265204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    if (!*(unsigned char *)(v11 + 80))
    {
LABEL_3:
      sub_100264F04(v11);
      _Unwind_Resume(a1);
    }
  }
  else if (!*(unsigned char *)(v11 + 80))
  {
    goto LABEL_3;
  }
  unint64_t v13 = *(void **)(v11 + 88);
  if (v13)
  {
    *(void *)(v11 + 96) = v13;
    operator delete(v13);
  }
  *(unsigned char *)(v11 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  sub_100264F04(v11);
  _Unwind_Resume(a1);
}

void sub_100265298(uint64_t a1)
{
  if (*(unsigned char *)a1) {
    sub_1003186A4((void *)(a1 + 8));
  }
}

uint64_t sub_1002652AC(unsigned char *a1, uint64_t a2)
{
  int v4 = *a1;
  uint64_t v3 = (uint64_t)(a1 + 8);
  if (v4)
  {
    return sub_100317768(v3, a2);
  }
  else
  {
    uint64_t result = sub_100267358(v3, a2);
    *a1 = 1;
  }
  return result;
}

void sub_1002652FC(uint64_t a1, double a2)
{
  if (!*(unsigned char *)a1) {
    goto LABEL_13;
  }
  sub_100318224(a1, 0, buf);
  uint64_t v4 = *(void *)buf;
  uint64_t v3 = v17;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    double v5 = a2;
    if (v4) {
      goto LABEL_5;
    }
LABEL_13:
    if (*(unsigned char *)(a1 + 80)) {
      return;
    }
    if (qword_10047BED8 == -1)
    {
      int v14 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100462E40);
      int v14 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return;
      }
    }
    *(_WORD *)std::runtime_error buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "WARNING: MultivariateGaussian#scale ignored; covariance is already infinite",
      buf,
      2u);
    return;
  }
  double v5 = a2;
  if (!v4) {
    goto LABEL_13;
  }
LABEL_5:
  int64_t v7 = *(float64x2_t **)(a1 + 48);
  unint64_t v6 = *(double **)(a1 + 56);
  if (v7 != (float64x2_t *)v6)
  {
    unint64_t v8 = (char *)v6 - (char *)v7 - 8;
    uint64_t v9 = *(double **)(a1 + 48);
    if (v8 < 0x18) {
      goto LABEL_21;
    }
    uint64_t v10 = (v8 >> 3) + 1;
    uint64_t v9 = &v7->f64[v10 & 0x3FFFFFFFFFFFFFFCLL];
    uint64_t v11 = v7 + 1;
    uint64_t v12 = v10 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v13 = vmulq_n_f64(*v11, v5);
      v11[-1] = vmulq_n_f64(v11[-1], v5);
      *uint64_t v11 = v13;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_21:
      do
      {
        *uint64_t v9 = *v9 * v5;
        ++v9;
      }
      while (v9 != v6);
    }
  }
}

BOOL sub_1002654AC(uint64_t a1)
{
  return *(double *)(a1 + 72) == 0.0;
}

double sub_1002654BC(uint64_t a1)
{
  double v1 = *(double *)(a1 + 72);
  double v2 = 0.0;
  if (v1 == 0.0) {
    return v2;
  }
  sub_100318224(a1, 0, &v5);
  if (v5) {
    double v2 = v1 * (*(double (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  uint64_t v4 = v6;
  if (!v6 || atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v2;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v2;
}

void sub_100265598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002655AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = (uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3;
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 4);
  unint64_t v23 = v9;
  unint64_t v24 = v8;
  if (v8 < v9)
  {
    sub_1000AE4B0(v27, "");
    sub_1001F1308("We have {} particle weights but {} onFloorParticles", &buf);
    sub_1001F3080(&v24, &v30);
    sub_1001F3080(&v23, &v31);
    sub_10016A2C4((uint64_t)v27, (uint64_t)&buf, 3);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v31.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_23:
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_33;
      }
    }
    else if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_24:
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_25;
      }
LABEL_34:
      operator delete(v27[0]);
LABEL_25:
      sub_1000D11E0((uint64_t)&v25);
    }
LABEL_33:
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((v28 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_34;
  }
  uint64_t v10 = (void *)(a1 + 112);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 3) < v9)
  {
    sub_1000AE4B0(&buf, "");
    sub_10016A2C4((uint64_t)&buf, 0, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1000D11E0((uint64_t)v27);
  }
  sub_1003185D8(a1, *(unsigned char *)(a1 + 80) == 0, &v25);
  if (sub_100265A8C((void *)a1, a2, (uint64_t)v25, a3) == -INFINITY)
  {
    if (qword_10047BED8 == -1)
    {
      uint64_t v11 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_7;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100462E40);
      uint64_t v11 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
      {
LABEL_7:
        uint64_t v12 = sub_1002AA5A0((void *)*v10);
        sub_1002AA4A0(v27, v12);
        LODWORD(v24) = 1;
        sub_100300F94((uint64_t)&buf, v12, &v24);
        sub_100317764(a4, (uint64_t)v27, (uint64_t)&buf);
        if (buf.__r_.__value_.__r.__words[2])
        {
          v30.__r_.__value_.__r.__words[0] = buf.__r_.__value_.__r.__words[2];
          operator delete((void *)buf.__r_.__value_.__r.__words[2]);
        }
        float64x2_t v13 = v27[0];
        if (v27[0])
        {
          v27[1] = v27[0];
LABEL_16:
          operator delete(v13);
          goto LABEL_17;
        }
        goto LABEL_17;
      }
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "supposedly the java code checked for -inf.  seems unlikely", (uint8_t *)&buf, 2u);
    goto LABEL_7;
  }
  int v20 = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  int v15 = *(unsigned char **)(a1 + 136);
  int v14 = *(unsigned char **)(a1 + 144);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if (v16 < 0) {
      sub_1000A9108();
    }
    int v17 = (char *)operator new(v14 - v15);
    int v18 = &v17[8 * (v16 >> 3)];
    int v20 = v17;
    uint64_t v22 = v18;
    memcpy(v17, v15, v16);
    int v21 = v18;
  }
  sub_1003177CC(v10, &v20, 1, 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 4), a4);
  float64x2_t v13 = v20;
  if (v20)
  {
    int v21 = v20;
    goto LABEL_16;
  }
LABEL_17:
  int v19 = v26;
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_100265998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_100265A8C(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = *a4;
  uint64_t v8 = a4[1];
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *a4) >> 4);
  if (v10 > (uint64_t)(a1[18] - a1[17]) >> 3)
  {
    sub_1000AE4B0(__p, "");
    sub_100267DC4("you passed in more particles than the max number you set this up with", &v29);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&v29, 1);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v26);
  }
  sub_1002AA4A0(&v29, 3uLL);
  if (v8 == v9)
  {
    double v15 = -INFINITY;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if (v10 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v10;
    }
    double v15 = -INFINITY;
    do
    {
      uint64_t v16 = *a4 + v12;
      sub_100249DFC(v16, a2, a1[14] + v11);
      double v17 = sub_100273560(v16);
      sub_1002AA538((void **)&v29.__r_.__value_.__l.__data_, a1[14] + v11);
      double v18 = v17 + (*(double (**)(uint64_t, std::string *))(*(void *)a3 + 24))(a3, &v29);
      *(double *)(a1[17] + 8 * v13) = v18;
      if (v15 < v18) {
        double v15 = v18;
      }
      ++v13;
      v12 += 80;
      v11 += 24;
    }
    while (v14 != v13);
  }
  uint64_t v19 = a1[14];
  uint64_t v20 = a1[15];
  if (v10 != 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3))
  {
    sub_1002AA4A0(__p, 0);
    int v21 = (void **)(v19 + 24 * v10);
    if (v20 - (uint64_t)v21 >= 1)
    {
      unint64_t v22 = (v20 - (uint64_t)v21) / 0x18uLL + 1;
      do
      {
        sub_1002AA538(v21, (uint64_t)__p);
        v21 += 3;
        --v22;
      }
      while (v22 > 1);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    unint64_t v23 = (void *)(a1[17] + 8 * v10);
    uint64_t v24 = a1[18] - (void)v23;
    if (v24 >= 1) {
      memset_pattern16(v23, &unk_1003F8A00, 8 * (((unint64_t)v24 >> 3) - ((unint64_t)v24 > 7)) + 8);
    }
  }
  if (v29.__r_.__value_.__r.__words[0])
  {
    v29.__r_.__value_.__l.__size_ = v29.__r_.__value_.__r.__words[0];
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  return v15;
}

void sub_100265D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100265DC4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  sub_100318224(a1, *(unsigned char *)(a1 + 80) == 0, &v16);
  double v18 = v16;
  uint64_t v19 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = v17;
    if (v17)
    {
      if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  (*(void (**)(void *))(*(void *)v18 + 40))(v18);
  v20[0] = 0;
  sub_100245D10(a2, (uint64_t *)&v18, a3, (uint64_t)v20, (uint64_t *)&v16);
  if (v20[0] && v21)
  {
    unint64_t v22 = v21;
    operator delete(v21);
  }
  sub_1002464E0((uint64_t)&v16, *(double *)(a1 + 72));
  uint64_t v9 = sub_100246714((uint64_t)&v16);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v11 = *(const void **)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  int64_t v12 = v10 - *(void *)v9;
  if (v10 != *(void *)v9)
  {
    if (v12 < 0) {
      sub_1000A9108();
    }
    uint64_t v13 = (char *)operator new(v10 - *(void *)v9);
    *a4 = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    a4[2] = v14;
    memcpy(v13, v11, v12);
    a4[1] = v14;
  }
  sub_100267210(&v16);
  double v15 = v19;
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100265FB4(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 - 88)) {
    sub_1003A6354(v1 - 88);
  }
  sub_1002463A8(v1 - 104);
  _Unwind_Resume(a1);
}

double sub_100266018(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = (unsigned char *)(a1 + 80);
  sub_100318224(a1, *(unsigned char *)(a1 + 80) == 0, v58);
  long long v56 = *(_OWORD *)v58;
  if (*(void *)&v58[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v58[8] + 8), 1uLL, memory_order_relaxed);
    int64_t v7 = *(std::__shared_weak_count **)&v58[8];
    if (*(void *)&v58[8])
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v58[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
        uint64_t v8 = v56;
        if ((void)v56) {
          goto LABEL_5;
        }
LABEL_60:
        double v10 = 0.0;
        uint64_t v49 = (std::__shared_weak_count *)*((void *)&v56 + 1);
        if (!*((void *)&v56 + 1)) {
          return v10;
        }
        goto LABEL_61;
      }
    }
  }
  uint64_t v8 = v56;
  if (!(void)v56) {
    goto LABEL_60;
  }
LABEL_5:
  (*(void (**)(uint64_t))(*(void *)v8 + 40))(v8);
  sub_100245D10(a2, (uint64_t *)&v56, a3, (uint64_t)v6, (uint64_t *)v55);
  if (sub_10024671C((uint64_t)v55))
  {
    if (qword_10047BED8 != -1) {
      dispatch_once(&qword_10047BED8, &stru_100462E40);
    }
    uint64_t v9 = qword_10047BEE0;
    double v10 = 0.0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
      goto LABEL_57;
    }
    *(_WORD *)size_t v58 = 0;
    uint64_t v11 = "Not enough precision contained in mode estimate, defining as 0.0 inlierConfidence.";
    int64_t v12 = v9;
    os_log_type_t v13 = OS_LOG_TYPE_INFO;
    uint32_t v14 = 2;
LABEL_56:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, v58, v14);
    goto LABEL_57;
  }
  uint64_t v15 = 0;
  long long v51 = (double **)(a1 + 8);
  double v16 = 0.5;
  do
  {
    double v10 = sub_100246764(v55, v16);
    if (v10 < 0.0)
    {
      uint64_t v18 = *a2;
      if (*(unsigned char *)a1 && !sub_1003177A8((uint64_t)v51)) {
        sub_100301D68(a1 + 32);
      }
      sub_1000CD96C((uint64_t)v58);
      sub_10002986C(v58, (uint64_t)"Not possible. What happened here? prevGuess = ", 46);
      uint64_t v19 = (void *)std::ostream::operator<<();
      sub_10002986C(v19, (uint64_t)" bestGuess = ", 13);
      uint64_t v20 = (void *)std::ostream::operator<<();
      sub_10002986C(v20, (uint64_t)" | ", 3);
      sub_10002986C(v58, (uint64_t)"getOutlierProbabilities = [", 27);
      int v21 = (uint64_t *)sub_1002464D8((uint64_t)v55);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      if (*v21 != v23)
      {
        do
        {
          uint64_t v24 = (void *)std::ostream::operator<<();
          sub_10002986C(v24, (uint64_t)" ", 1);
          v22 += 8;
        }
        while (v22 != v23);
      }
      sub_10002986C(v58, (uint64_t)"]  |  mode = ", 13);
      if (*(unsigned char *)a1)
      {
        uint64_t v25 = sub_100318B88(v58, v51);
        sub_10002986C(v25, (uint64_t)"  det(cov) = ", 13);
        long long v26 = (void *)std::ostream::operator<<();
      }
      else
      {
        long long v26 = sub_10002986C(v58, (uint64_t)"not set   det(cov) = infinity", 29);
      }
      sub_10002986C(v26, (uint64_t)" | ", 3);
      sub_10002986C(v58, (uint64_t)"partition = ", 12);
      (*(void (**)(void))(*(void *)v56 + 32))(v56);
      uint64_t v27 = (void *)std::ostream::operator<<();
      sub_10002986C(v27, (uint64_t)" | ", 3);
      char v28 = sub_10002986C(v58, (uint64_t)"first particle = ", 17);
      sub_100249D94(v18, a2[8], &__dst);
      std::string v29 = sub_1002AAA6C(v28, (uint64_t *)&__dst);
      sub_10002986C(v29, (uint64_t)" | ", 3);
      if ((void)__dst)
      {
        *((void *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      sub_10002986C(v58, (uint64_t)"gaussian = ", 11);
      uint64_t v30 = v56;
      sub_100249D94(v18, a2[8], __p);
      (*(void (**)(uint64_t, void **))(*(void *)v30 + 16))(v30, __p);
      std::string v31 = (void *)std::ostream::operator<<();
      sub_10002986C(v31, (uint64_t)" | ", 3);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (*v6)
      {
        sub_10002986C(v58, (uint64_t)"logPdf = [", 10);
        uint64_t v32 = *(void *)(a1 + 88);
        for (uint64_t i = *(void *)(a1 + 96); v32 != i; v32 += 8)
        {
          long long v34 = (void *)std::ostream::operator<<();
          sub_10002986C(v34, (uint64_t)" ", 1);
        }
        int v35 = sub_10002986C(v58, (uint64_t)"]", 1);
        sub_10002986C(v35, (uint64_t)" | ", 3);
        sub_10002986C(v58, (uint64_t)"max(logPdf) = ", 14);
        uint64_t v36 = *(double **)(a1 + 88);
        char v37 = *(double **)(a1 + 96);
        if (v36 != v37 && v36 + 1 != v37)
        {
          double v38 = *v36;
          long long v39 = v36 + 1;
          do
          {
            double v40 = *v39++;
            double v41 = v40;
            if (v38 < v40) {
              double v38 = v41;
            }
          }
          while (v39 != v37);
        }
        uint64_t v42 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v42 + *(void *)(*v42 - 24)));
        int v43 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put();
        std::ostream::flush();
      }
      else
      {
        uint64_t v44 = sub_10002986C(v58, (uint64_t)"logPdf = not set | max(logPdf) = not set", 40);
        std::ios_base::getloc((const std::ios_base *)((char *)v44 + *(void *)(*v44 - 24)));
        int64_t v45 = std::locale::use_facet((const std::locale *)&__dst, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
        std::locale::~locale((std::locale *)&__dst);
        std::ostream::put();
        std::ostream::flush();
      }
      if (qword_10047BED8 == -1)
      {
        unint64_t v46 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_43;
        }
      }
      else
      {
        dispatch_once(&qword_10047BED8, &stru_100462E40);
        unint64_t v46 = qword_10047BEE0;
        if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_43;
        }
      }
      std::stringbuf::str();
      p_dst = &__dst;
      if (v62 < 0) {
        p_dst = (long long *)__dst;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = p_dst;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if (SHIBYTE(v62) < 0) {
        operator delete((void *)__dst);
      }
LABEL_43:
      std::stringbuf::str();
      char v60 = 0;
      buf[0] = 0;
      if (SHIBYTE(v53) < 0)
      {
        sub_1000559FC(&__dst, v52[0], (unint64_t)v52[1]);
      }
      else
      {
        long long __dst = *(_OWORD *)v52;
        uint64_t v62 = v53;
      }
      sub_10016A2C4((uint64_t)buf, (uint64_t)&__dst, 1);
      if (SHIBYTE(v62) < 0)
      {
        operator delete((void *)__dst);
        if ((v60 & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      else if ((v60 & 0x80000000) == 0)
      {
        goto LABEL_48;
      }
      operator delete(*(void **)buf);
LABEL_48:
      sub_1000D11E0((uint64_t)&v57);
    }
    ++v15;
    double v17 = vabdd_f64(v16, v10);
    double v16 = v10;
  }
  while (v17 > 0.01);
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_100462E40);
    uint64_t v48 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_57;
    }
LABEL_55:
    *(_DWORD *)size_t v58 = 134217984;
    *(void *)&v58[4] = v15;
    uint64_t v11 = "computeInlierConfidence EM required %zu iterations";
    int64_t v12 = v48;
    os_log_type_t v13 = OS_LOG_TYPE_DEBUG;
    uint32_t v14 = 12;
    goto LABEL_56;
  }
  uint64_t v48 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_55;
  }
LABEL_57:
  sub_100267210(v55);
  uint64_t v49 = (std::__shared_weak_count *)*((void *)&v56 + 1);
  if (*((void *)&v56 + 1))
  {
LABEL_61:
    if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return v10;
}

void sub_100266A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53)
{
}

void sub_100266B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x100266B18);
  }
  JUMPOUT(0x100266B2CLL);
}

void sub_100266B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

double sub_100266B4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100266C04(a1);
  if (!*(unsigned char *)a1)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v5);
  }
  sub_100249350((void *)(a1 + 8), a2);
  double result = *(double *)(a1 + 72);
  *(double *)(a2 + 184) = result;
  return result;
}

void sub_100266BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100266C04(uint64_t a1)
{
  if (*(double *)(a1 + 72) == 0.0)
  {
    sub_100318224(a1, 0, &buf);
    long long v2 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(buf.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v2 + 1) + 16))(*((void *)&v2 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v2 + 1));
    }
    if ((void)v2)
    {
      sub_100267358((uint64_t)v7, a1 + 8);
      sub_1002679F0(v7, &v8);
      uint64_t v4 = std::string::insert(&v8, 0, "What is your mode anyway? ");
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v8.__r_.__value_.__l.__data_);
      }
      sub_100266E68((uint64_t)v7);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&v8, &buf);
      sub_10018E868((uint64_t)v6);
      sub_100266EAC((std::runtime_error *)&v8, (uint64_t)"void ParticleMode::assertValidPoseEstimate() const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/particle_mode.cpp", 273, (uint64_t)v6);
    }
    if (qword_10047BED8 == -1)
    {
      uint64_t v3 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        return;
      }
      goto LABEL_8;
    }
    dispatch_once(&qword_10047BED8, &stru_100462E40);
    uint64_t v3 = qword_10047BEE0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
    {
LABEL_8:
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "WARNING: Your primary mode has reached 0.0 confidence! Should we clearPoseEstimate?", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_100266DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::runtime_error a20)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a20);
  if (*(char *)(v20 - 41) < 0) {
    operator delete(*(void **)(v20 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_100266E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_100266E68((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_100266E68((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100266E68(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100266EAC(std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  std::runtime_error::runtime_error(&v12, a1);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)off_10045A880;
  os_log_type_t v13 = off_10045A8A8;
  sub_10016E894((uint64_t)&v18, (uint64_t)&v12);
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  int v21 = a4;
  uint64_t v9 = *(const void **)a5;
  size_t v10 = *(void *)(a5 + 8) - *(void *)a5;
  if (v10)
  {
    if ((v10 & 0x8000000000000000) != 0) {
      sub_1000A9108();
    }
    std::string __p = operator new(v10);
    memcpy(__p, v9, v10);
  }
  sub_100267468();
}

void sub_10026719C(void *a1)
{
  std::runtime_error::~runtime_error(v1);
  sub_1000A6954(a1);
}

void sub_1002671B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    operator delete(__p);
    sub_1000A6954(a1);
  }
  sub_1000A6954(a1);
}

uint64_t sub_1002671D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

void sub_1002671E0(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void **sub_100267210(void **a1)
{
  long long v2 = a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  long long v5 = (std::__shared_weak_count *)a1[7];
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v6 = a1[3];
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  unint64_t v6 = a1[3];
  if (v6)
  {
LABEL_10:
    a1[4] = v6;
    operator delete(v6);
  }
LABEL_11:
  char v7 = (char *)*a1;
  if (*a1)
  {
    std::string v8 = (char *)a1[1];
    uint64_t v9 = *a1;
    if (v8 != v7)
    {
      do
      {
        size_t v10 = (std::__shared_weak_count *)*((void *)v8 - 2);
        if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        v8 -= 80;
      }
      while (v8 != v7);
      uint64_t v9 = *a1;
    }
    a1[1] = v7;
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_100267358(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_1000A9108();
    }
    char v7 = (char *)operator new(v4 - *(void *)a2);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    std::string v8 = &v7[8 * (v6 >> 3)];
    *(void *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8) = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(_OWORD *)(a1 + 24) = v9;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = *(unsigned char **)(a2 + 40);
  size_t v10 = *(unsigned char **)(a2 + 48);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_1000A9108();
    }
    os_log_type_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v13;
    *(void *)(a1 + 48) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_100267434(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_100267468()
{
}

void sub_100267704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000CD2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100267718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000CD238((uint64_t)va);
  sub_1000CD2E0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100267734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14)
{
  if (a14 && atomic_fetch_add(a14 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)a14 + 16))(a14);
    if (atomic_fetch_add(a14 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 24))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002677C4(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1000A9108();
    }
    uint64_t v6 = operator new(24 * a2);
    char v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    std::string v8 = &v6[3 * a2];
    a1[2] = v8;
    long long v9 = *(const void **)a3;
    int64_t v10 = *(void *)(a3 + 8) - *(void *)a3;
    if (v10)
    {
      if (v10 < 0)
      {
        *uint64_t v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        sub_1000A9108();
      }
      uint64_t v11 = 24 * a2;
      do
      {
        *char v7 = 0;
        v7[1] = 0;
        void v7[2] = 0;
        int64_t v12 = (char *)operator new(v10);
        *char v7 = v12;
        v7[1] = v12;
        os_log_type_t v13 = &v12[8 * (v10 >> 3)];
        void v7[2] = v13;
        memcpy(v12, v9, v10);
        v7[1] = v13;
        v7 += 3;
        v11 -= 24;
      }
      while (v11);
    }
    else
    {
      bzero(v6, 24 * ((24 * a2 - 24) / 0x18) + 24);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_100267900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  int64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  *(void *)(v9 + 8) = v10;
  sub_100267954(&a9);
  _Unwind_Resume(a1);
}

void sub_100267928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_10026793C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100267954(&a9);
  _Unwind_Resume(a1);
}

void ***sub_100267954(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    long long v2 = *result;
    uint64_t v3 = (char *)**result;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        uint64_t v6 = (char *)v2[1];
        do
        {
          std::string v8 = (void *)*((void *)v6 - 3);
          v6 -= 24;
          char v7 = v8;
          if (v8)
          {
            *((void *)v4 - 2) = v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_1002679F0@<X0>(double **a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t result = sub_100267AA0(a1, a2);
  if ((result & 1) == 0)
  {
    std::bad_cast::bad_cast(&v3);
    v3.__vftable = (std::bad_cast_vtbl *)&off_100454020;
    sub_1000DB0D4((uint64_t)&v3);
  }
  return result;
}

void sub_100267A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::bad_cast a10)
{
  std::bad_cast::~bad_cast(&a10);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100267AA0(double **a1, std::string *a2)
{
  long long v26 = 0u;
  long long v27 = 0u;
  memset(v25, 0, sizeof(v25));
  std::streambuf::basic_streambuf();
  *(_OWORD *)std::string __p = 0u;
  long long v29 = 0u;
  uint64_t v30 = 24;
  *(void *)&long long v26 = 0;
  *(void *)&v25[0] = off_100453E60;
  std::ios_base::init(&v32, v25);
  uint64_t v33 = 0;
  int v34 = -1;
  uint64_t v36 = &v35;
  char v37 = (char *)&v35 + 2;
  uint64_t v4 = (std::ios_base *)((char *)&v31 + (void)*(v31 - 3));
  v4->__exceptions_ = 1;
  std::ios_base::clear(v4, v4->__rdstate_);
  long long v5 = sub_100318B88(&v31, a1);
  int v6 = *(_DWORD *)((char *)v5 + *(void *)(*v5 - 24) + 32);
  uint64_t v7 = *(void *)((char *)&v32.__rdstate_ + (void)*(v31 - 3));
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v36 = (uint64_t *)v8;
  uint64_t v9 = *(char **)(v7 + 48);
  char v37 = v9;
  if ((v6 & 5) == 0)
  {
    unint64_t v11 = (unint64_t)&v9[-v8];
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v15 = a2->__r_.__value_.__r.__words[2];
      std::string::size_type v14 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v14 >= v11)
      {
        unint64_t v16 = HIBYTE(v15);
LABEL_10:
        if ((v16 & 0x80u) == 0) {
          int64_t v12 = a2;
        }
        else {
          int64_t v12 = (std::string *)a2->__r_.__value_.__r.__words[0];
        }
LABEL_13:
        if ((char *)v8 == v9)
        {
          int v17 = v12;
          goto LABEL_23;
        }
        if (v11 < 0x20 || (unint64_t)v12 - v8 < 0x20)
        {
          int v17 = v12;
          std::runtime_error v18 = (char *)v8;
        }
        else
        {
          int v17 = (std::string *)((char *)v12 + (v11 & 0xFFFFFFFFFFFFFFE0));
          std::runtime_error v18 = (char *)(v8 + (v11 & 0xFFFFFFFFFFFFFFE0));
          uint64_t v19 = (long long *)(v8 + 16);
          uint64_t v20 = &v12->__r_.__value_.__r.__words[2];
          unint64_t v21 = v11 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v22 = *v19;
            *((_OWORD *)v20 - 1) = *(v19 - 1);
            *(_OWORD *)uint64_t v20 = v22;
            v19 += 2;
            v20 += 4;
            v21 -= 32;
          }
          while (v21);
          if (v11 == (v11 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_23:
            v17->__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
              a2->__r_.__value_.__l.__size_ = v11;
            }
            else {
              *((unsigned char *)&a2->__r_.__value_.__s + 23) = v11 & 0x7F;
            }
            uint64_t v10 = 1;
            goto LABEL_27;
          }
        }
        do
        {
          std::string::value_type v23 = *v18++;
          v17->__r_.__value_.__s.__data_[0] = v23;
          int v17 = (std::string *)((char *)v17 + 1);
        }
        while (v18 != v9);
        goto LABEL_23;
      }
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    else
    {
      int64_t v12 = a2;
      if (v11 <= 0x16) {
        goto LABEL_13;
      }
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      std::string::size_type v14 = 22;
    }
    std::string::__grow_by(a2, v14, v11 - v14, size, 0, size, 0);
    a2->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v16) = *((unsigned char *)&a2->__r_.__value_.__s + 23);
    goto LABEL_10;
  }
  uint64_t v10 = 0;
LABEL_27:
  std::ostream::~ostream();
  if (SBYTE7(v29) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  return v10;
}

void sub_100267D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100267DAC(void *a1)
{
}

std::string *sub_100267DC4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100267DF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100267E14()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100267E8C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_100267F04(uint64_t *a1, uint64_t *a2, void *a3, int a4, _DWORD *a5)
{
  unint64_t v5 = (unint64_t)(a1[1] - *a1) >> 4;
  if (qword_10047BEF8 != -1) {
    dispatch_once(&qword_10047BEF8, &stru_100462E90);
  }
  int v6 = 954437177 * v5;
  uint64_t v7 = qword_10047BF00;
  if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (a2[1] - *a2) >> 5;
    *(_DWORD *)std::string buf = 134349568;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@TileMaxPri, incoming, request, %{public}lu, db, %{public}d, maxcount, %{public}d", buf, 0x18u);
  }
  int v343 = v6;
  v372 = 0;
  v373 = 0;
  unint64_t v374 = 0;
  v369 = 0;
  v370 = 0;
  v371 = 0;
  v367 = 0;
  uint64_t v368 = 0;
  v366 = &v367;
  v365[0] = 0;
  v365[1] = 0;
  unint64_t v363 = 0;
  v364 = (uint64_t *)v365;
  v361 = 0;
  v362 = 0;
  double v358 = 0;
  int v359 = 0;
  unint64_t v360 = 0;
  std::string __p = 0;
  __int16 v356 = 0;
  unint64_t v357 = 0;
  v353 = 0;
  uint64_t v354 = 0;
  uint64_t v351 = 0;
  v352 = (uint64_t *)&v353;
  __int16 v349 = &v350;
  v350 = 0;
  uint64_t v9 = *a2;
  if (*a2 == a2[1]) {
    goto LABEL_78;
  }
  do
  {
    unint64_t v11 = v373;
    if ((unint64_t)v373 >= v374)
    {
      v373 = sub_10021DB9C(&v372, v9);
      std::string::size_type v14 = v370;
      os_log_type_t v13 = v371;
      if (v370 < v371) {
        goto LABEL_23;
      }
    }
    else if (*(char *)(v9 + 23) < 0)
    {
      sub_1000559FC(v373, *(void **)v9, *(void *)(v9 + 8));
      v373 = v11 + 24;
      std::string::size_type v14 = v370;
      os_log_type_t v13 = v371;
      if (v370 < v371)
      {
LABEL_23:
        *(_DWORD *)std::string::size_type v14 = *(_DWORD *)(v9 + 24);
        uint64_t v22 = (uint64_t)(v14 + 4);
        goto LABEL_35;
      }
    }
    else
    {
      long long v12 = *(_OWORD *)v9;
      *((void *)v373 + 2) = *(void *)(v9 + 16);
      *(_OWORD *)unint64_t v11 = v12;
      v373 = v11 + 24;
      std::string::size_type v14 = v370;
      os_log_type_t v13 = v371;
      if (v370 < v371) {
        goto LABEL_23;
      }
    }
    unint64_t v15 = v369;
    uint64_t v16 = (v14 - v369) >> 2;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62) {
      sub_1000A9108();
    }
    uint64_t v18 = v13 - v369;
    if (v18 >> 1 > v17) {
      unint64_t v17 = v18 >> 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 62) {
        sub_1000A6A10();
      }
      uint64_t v20 = operator new(4 * v19);
      unint64_t v21 = &v20[4 * v16];
      *(_DWORD *)unint64_t v21 = *(_DWORD *)(v9 + 24);
      uint64_t v22 = (uint64_t)(v21 + 4);
      if (v14 == v15) {
        goto LABEL_33;
      }
LABEL_27:
      unint64_t v23 = v14 - 4 - v15;
      if (v23 < 0x2C) {
        goto LABEL_583;
      }
      if ((unint64_t)(v15 - v20) < 0x20) {
        goto LABEL_583;
      }
      uint64_t v24 = (v23 >> 2) + 1;
      uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
      long long v26 = &v14[-v25];
      v21 -= v25;
      long long v27 = &v20[4 * v16 - 16];
      char v28 = (long long *)(v14 - 16);
      uint64_t v29 = v24 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v30 = *v28;
        *(v27 - 1) = *(v28 - 1);
        *long long v27 = v30;
        v27 -= 2;
        v28 -= 2;
        v29 -= 8;
      }
      while (v29);
      std::string::size_type v14 = v26;
      if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_583:
        do
        {
          int v31 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v21 - 1) = v31;
          v21 -= 4;
        }
        while (v14 != v15);
      }
      goto LABEL_33;
    }
    uint64_t v20 = 0;
    unint64_t v21 = (char *)(4 * v16);
    *(_DWORD *)(4 * v16) = *(_DWORD *)(v9 + 24);
    uint64_t v22 = 4 * v16 + 4;
    if (v14 != v15) {
      goto LABEL_27;
    }
LABEL_33:
    v369 = v21;
    v371 = &v20[4 * v19];
    if (v15) {
      operator delete(v15);
    }
LABEL_35:
    v370 = (char *)v22;
    sub_10026AE58(&v364, v9);
    std::ios_base v32 = v353;
    int v33 = *(_DWORD *)(v9 + 24);
    int v34 = &v353;
    uint64_t v35 = &v353;
    if (v353)
    {
      uint64_t v36 = v353;
      while (1)
      {
        while (1)
        {
          int v34 = (uint64_t **)v36;
          int v37 = *((_DWORD *)v36 + 7);
          if (v33 >= v37) {
            break;
          }
          uint64_t v36 = *v34;
          uint64_t v35 = v34;
          if (!*v34) {
            goto LABEL_42;
          }
        }
        if (v37 >= v33) {
          break;
        }
        uint64_t v36 = v34[1];
        if (!v36)
        {
          uint64_t v35 = v34 + 1;
          goto LABEL_42;
        }
      }
      double v38 = v34;
    }
    else
    {
LABEL_42:
      double v38 = operator new(0x28uLL);
      v38[7] = v33;
      v38[8] = 0;
      *(void *)double v38 = 0;
      *((void *)v38 + 1) = 0;
      *((void *)v38 + 2) = v34;
      void *v35 = (uint64_t *)v38;
      long long v39 = (uint64_t *)v38;
      if (*v352)
      {
        v352 = (uint64_t *)*v352;
        long long v39 = *v35;
      }
      sub_1000619B8(v353, v39);
      std::ios_base v32 = v353;
      ++v354;
      int v33 = *(_DWORD *)(v9 + 24);
    }
    int v40 = v38[8];
    double v41 = &v353;
LABEL_48:
    uint64_t v42 = v41;
    if (v32)
    {
      while (1)
      {
        double v41 = (uint64_t **)v32;
        int v43 = *((_DWORD *)v32 + 7);
        if (v33 < v43)
        {
          std::ios_base v32 = *v41;
          goto LABEL_48;
        }
        if (v43 >= v33) {
          break;
        }
        std::ios_base v32 = v41[1];
        if (!v32)
        {
          uint64_t v42 = v41 + 1;
          goto LABEL_53;
        }
      }
      *((_DWORD *)v41 + 8) = v40 + 1;
      if (qword_10047BEF8 != -1)
      {
LABEL_60:
        dispatch_once(&qword_10047BEF8, &stru_100462E90);
        unint64_t v46 = qword_10047BF00;
        if (!os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO)) {
          goto LABEL_8;
        }
        goto LABEL_57;
      }
    }
    else
    {
LABEL_53:
      uint64_t v44 = operator new(0x28uLL);
      v44[7] = v33;
      v44[8] = 0;
      *(void *)uint64_t v44 = 0;
      *((void *)v44 + 1) = 0;
      *((void *)v44 + 2) = v41;
      *uint64_t v42 = (uint64_t *)v44;
      int64_t v45 = (uint64_t *)v44;
      if (*v352)
      {
        v352 = (uint64_t *)*v352;
        int64_t v45 = *v42;
      }
      sub_1000619B8(v353, v45);
      ++v354;
      v44[8] = v40 + 1;
      if (qword_10047BEF8 != -1) {
        goto LABEL_60;
      }
    }
    unint64_t v46 = qword_10047BF00;
    if (!os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO)) {
      goto LABEL_8;
    }
LABEL_57:
    char v47 = (void *)v9;
    if (*(char *)(v9 + 23) < 0) {
      char v47 = *(void **)v9;
    }
    int v10 = *(_DWORD *)(v9 + 24);
    *(_DWORD *)std::string buf = 136381187;
    *(void *)&uint8_t buf[4] = v47;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&buf[14] = v10;
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = v354;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "TileMaxPri, fetch, %{private}s, %{public}d, onlist, %{public}ld", buf, 0x1Cu);
LABEL_8:
    v9 += 32;
  }
  while (v9 != a2[1]);
  uint64_t v48 = v352;
  if (v352 != (uint64_t *)&v353)
  {
    int v341 = 0;
    int v49 = 0;
    uint64_t v50 = qword_10047BEF8;
    while (1)
    {
      v49 += *((_DWORD *)v48 + 8);
      int v51 = v341;
      if (v49 <= a4) {
        int v51 = *((_DWORD *)v48 + 7);
      }
      int v341 = v51;
      if (v50 == -1)
      {
        long long v52 = qword_10047BF00;
        if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO)) {
          goto LABEL_69;
        }
      }
      else
      {
        dispatch_once(&qword_10047BEF8, &stru_100462E90);
        long long v52 = qword_10047BF00;
        if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
        {
LABEL_69:
          int v53 = *((_DWORD *)v48 + 7);
          int v54 = *((_DWORD *)v48 + 8);
          *(_DWORD *)std::string buf = 67240960;
          *(_DWORD *)&uint8_t buf[4] = v53;
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)&buf[10] = v54;
          *(_WORD *)&buf[14] = 1026;
          *(_DWORD *)&uint8_t buf[16] = v49;
          *(_WORD *)&buf[20] = 1026;
          *(_DWORD *)&buf[22] = v341;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "TileMaxPri, bins, priority, %{public}d, %{public}d, sum, %{public}d, priorityAtMax, %{public}d", buf, 0x1Au);
          uint64_t v50 = qword_10047BEF8;
          uint64_t v55 = (uint64_t *)v48[1];
          if (v55) {
            goto LABEL_73;
          }
          goto LABEL_75;
        }
      }
      uint64_t v50 = -1;
      uint64_t v55 = (uint64_t *)v48[1];
      if (v55)
      {
        do
        {
LABEL_73:
          long long v56 = (uint64_t **)v55;
          uint64_t v55 = (uint64_t *)*v55;
        }
        while (v55);
        goto LABEL_64;
      }
      do
      {
LABEL_75:
        long long v56 = (uint64_t **)v48[2];
        BOOL v57 = *v56 == v48;
        uint64_t v48 = (uint64_t *)v56;
      }
      while (!v57);
LABEL_64:
      uint64_t v48 = (uint64_t *)v56;
      if (v56 == &v353) {
        goto LABEL_79;
      }
    }
  }
LABEL_78:
  int v341 = 0;
LABEL_79:
  uint64_t v58 = *a1;
  uint64_t v59 = a1[1];
  if (*a1 != v59)
  {
    int v339 = 0;
    while (1)
    {
      int v60 = sub_100089D70(v58);
      int v61 = v339;
      if (v60 == 1) {
        int v61 = v339 + 1;
      }
      int v339 = v61;
      uint64_t v62 = sub_10008D64C(v58);
      uint64_t v63 = nullsub_22(v58);
      sub_100085B24(buf, v63);
      __double2 v64 = v367;
      size_t v65 = &v367;
      uint64_t v66 = (void **)&v367;
      if (!v367) {
        goto LABEL_92;
      }
      uint64_t v66 = (void **)&v367;
      while (1)
      {
        while (1)
        {
          size_t v65 = (uint64_t **)v64;
          uint64_t v67 = (const void ***)(v64 + 4);
          if (!sub_10006182C((const void ***)buf, (const void ***)v64 + 4)) {
            break;
          }
          __double2 v64 = *v65;
          uint64_t v66 = (void **)v65;
          if (!*v65) {
            goto LABEL_92;
          }
        }
        if (!sub_10006182C(v67, (const void ***)buf)) {
          break;
        }
        uint64_t v66 = (void **)(v65 + 1);
        __double2 v64 = v65[1];
        if (!v64) {
          goto LABEL_92;
        }
      }
      uint64_t v68 = *v66;
      if (!*v66)
      {
LABEL_92:
        uint64_t v68 = operator new(0x38uLL);
        v68[2] = *(_OWORD *)buf;
        *(void *)std::string buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *((void *)v68 + 6) = 0;
        *(void *)uint64_t v68 = 0;
        *((void *)v68 + 1) = 0;
        *((void *)v68 + 2) = v65;
        *uint64_t v66 = v68;
        std::string::value_type v69 = (uint64_t *)v68;
        if (*v366)
        {
          v366 = (uint64_t **)*v366;
          std::string::value_type v69 = (uint64_t *)*v66;
        }
        sub_1000619B8(v367, v69);
        ++v368;
      }
      *((void *)v68 + 6) = v62;
      unint64_t v70 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      sub_10008CB5C(v58, (uint64_t)buf);
      char v71 = buf[0];
      uint64_t v72 = nullsub_22(v58);
      sub_100085B24(&v348, v72);
      uint64_t v73 = v350;
      double v74 = &v350;
      uint64_t v75 = (void **)&v350;
      if (!v350) {
        goto LABEL_106;
      }
      uint64_t v75 = (void **)&v350;
      while (1)
      {
        while (1)
        {
          double v74 = (uint64_t **)v73;
          uint64_t v76 = (const void ***)(v73 + 4);
          if (!sub_10006182C((const void ***)&v348, (const void ***)v73 + 4)) {
            break;
          }
          uint64_t v73 = *v74;
          uint64_t v75 = (void **)v74;
          if (!*v74) {
            goto LABEL_106;
          }
        }
        if (!sub_10006182C(v76, (const void ***)&v348)) {
          break;
        }
        uint64_t v75 = (void **)(v74 + 1);
        uint64_t v73 = v74[1];
        if (!v73) {
          goto LABEL_106;
        }
      }
      double v77 = *v75;
      if (!*v75)
      {
LABEL_106:
        double v77 = operator new(0x38uLL);
        v77[2] = v348;
        long long v348 = 0uLL;
        *((unsigned char *)v77 + 48) = 0;
        *(void *)double v77 = 0;
        *((void *)v77 + 1) = 0;
        *((void *)v77 + 2) = v74;
        *uint64_t v75 = v77;
        double v78 = (uint64_t *)v77;
        if (*v349)
        {
          __int16 v349 = (uint64_t **)*v349;
          double v78 = (uint64_t *)*v75;
        }
        sub_1000619B8(v350, v78);
        ++v351;
      }
      *((unsigned char *)v77 + 48) = v71 ^ 1;
      uint64_t v79 = (std::__shared_weak_count *)*((void *)&v348 + 1);
      if (*((void *)&v348 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v348 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
      uint64_t v80 = nullsub_22(v58);
      sub_100085B24(buf, v80);
      uint64_t v81 = v365[0];
      if (!v365[0]) {
        goto LABEL_122;
      }
      uint64_t v82 = v365;
      do
      {
        uint64_t v83 = v82;
        uint64_t v84 = (const void ***)(v81 + 4);
        BOOL v85 = sub_10006182C((const void ***)v81 + 4, (const void ***)buf);
        uint64_t v86 = v81 + 1;
        if (!v85)
        {
          uint64_t v86 = v81;
          uint64_t v82 = (void **)v81;
        }
        uint64_t v81 = (void *)*v86;
      }
      while (*v86);
      if (v82 == v365
        || (!v85 ? (uint64_t v87 = v84) : (uint64_t v87 = (const void ***)(v83 + 4)), sub_10006182C((const void ***)buf, v87)))
      {
LABEL_122:
        uint64_t v82 = v365;
      }
      long long v88 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
        if (v82 != v365) {
          goto LABEL_132;
        }
      }
      else if (v82 != v365)
      {
        goto LABEL_132;
      }
      uint64_t v89 = nullsub_22(v58);
      char v90 = v362;
      if ((unint64_t)v362 >= v363)
      {
        int v91 = sub_10026B09C((char **)&v361, v89);
      }
      else
      {
        sub_100085B24(v362, v89);
        int v91 = v90 + 16;
      }
      v362 = v91;
LABEL_132:
      if (qword_10047BEF8 == -1)
      {
        uint64_t v92 = qword_10047BF00;
        if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO)) {
          goto LABEL_134;
        }
      }
      else
      {
        dispatch_once(&qword_10047BEF8, &stru_100462E90);
        uint64_t v92 = qword_10047BF00;
        if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
        {
LABEL_134:
          uint64_t v93 = nullsub_22(v58);
          int v94 = *(char *)(v93 + 23);
          uint64_t v95 = *(void *)v93;
          uint64_t v96 = sub_10008D64C(v58);
          if (v94 >= 0) {
            uint64_t v97 = v93;
          }
          else {
            uint64_t v97 = v95;
          }
          *(_DWORD *)std::string buf = 136381443;
          *(void *)&uint8_t buf[4] = v97;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&buf[14] = v96;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&uint8_t buf[24] = v82 == v365;
          *(_WORD *)&buf[28] = 2050;
          *(void *)&buf[30] = (v362 - (unsigned char *)v361) >> 4;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "TileMaxPri, inDB, %{private}s, localId, %{private}llu, offlist, %{public}d, %{public}lu", buf, 0x26u);
        }
      }
      v58 += 144;
      if (v58 == v59) {
        goto LABEL_141;
      }
    }
  }
  int v339 = 0;
LABEL_141:
  int v332 = 0;
  int v346 = 0;
  int v342 = 0;
  uint64_t v335 = 0;
  int v333 = 0;
  unint64_t v98 = 0;
  int v345 = 0;
  unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((v373 - v372) >> 3) - 1;
  int v100 = a4 - v343;
  if (a4 <= v343) {
    int v100 = 0;
  }
  int v340 = v100;
  unint64_t v101 = (unint64_t)(v362 - (unsigned char *)v361) >> 4;
  while (2)
  {
    if (v98 > v99 || !v99)
    {
      int64_t v256 = a5;
      int v257 = v339;
      goto LABEL_460;
    }
    if (qword_10047BEF8 == -1)
    {
      double v102 = qword_10047BF00;
      if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO)) {
        goto LABEL_150;
      }
    }
    else
    {
      dispatch_once(&qword_10047BEF8, &stru_100462E90);
      double v102 = qword_10047BF00;
      if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
      {
LABEL_150:
        *(_DWORD *)std::string buf = 134349568;
        *(void *)&uint8_t buf[4] = v98;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v99;
        *(_WORD *)&buf[22] = 1026;
        *(_DWORD *)&uint8_t buf[24] = v341;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_INFO, "TileMaxPri, headtail, %{public}lu, %{public}lu, priorityAtMax, %{public}d", buf, 0x1Cu);
      }
    }
    unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((v373 - v372) >> 3);
    if (v98 < v103 && v99 < v103)
    {
      unint64_t v338 = v101;
      int v105 = *(_DWORD *)&v369[4 * v98];
      unint64_t v344 = v99;
      int v106 = *(_DWORD *)&v369[4 * v99];
      if (!v345)
      {
        uint64_t v107 = 0;
        int v345 = 0;
        while (2)
        {
          uint64_t v112 = v353;
          uint64_t v113 = &v353;
LABEL_162:
          int v114 = v113;
          if (v112)
          {
            while (1)
            {
              uint64_t v113 = (uint64_t **)v112;
              int v115 = *((_DWORD *)v112 + 7);
              if (v105 < v115)
              {
                uint64_t v112 = *v113;
                goto LABEL_162;
              }
              if (v115 >= v105) {
                break;
              }
              uint64_t v112 = v113[1];
              if (!v112)
              {
                int v114 = v113 + 1;
                goto LABEL_167;
              }
            }
            if (v107 >= *((int *)v113 + 8)) {
              goto LABEL_227;
            }
          }
          else
          {
LABEL_167:
            uint64_t v116 = (uint64_t *)operator new(0x28uLL);
            *((_DWORD *)v116 + 7) = v105;
            *((_DWORD *)v116 + 8) = 0;
            uint64_t *v116 = 0;
            v116[1] = 0;
            v116[2] = (uint64_t)v113;
            double *v114 = v116;
            if (*v352)
            {
              v352 = (uint64_t *)*v352;
              uint64_t v116 = *v114;
            }
            uint64_t v117 = v353;
            BOOL v57 = v116 == v353;
            *((unsigned char *)v116 + 24) = v116 == v353;
            if (!v57)
            {
              do
              {
                uint64_t v118 = v116[2];
                if (*(unsigned char *)(v118 + 24)) {
                  break;
                }
                double v119 = *(uint64_t **)(v118 + 16);
                uint64_t v120 = *v119;
                if (*v119 == v118)
                {
                  uint64_t v123 = v119[1];
                  if (!v123 || (int v124 = *(unsigned __int8 *)(v123 + 24), v121 = (unsigned char *)(v123 + 24), v124))
                  {
                    if (*(uint64_t **)v118 == v116)
                    {
                      *(unsigned char *)(v118 + 24) = 1;
                      *((unsigned char *)v119 + 24) = 0;
                      uint64_t v127 = *(void *)(v118 + 8);
                      uint64_t *v119 = v127;
                      if (v127) {
                        goto LABEL_184;
                      }
                    }
                    else
                    {
                      uint64_t v125 = *(uint64_t **)(v118 + 8);
                      uint64_t v126 = *v125;
                      *(void *)(v118 + 8) = *v125;
                      if (v126)
                      {
                        *(void *)(v126 + 16) = v118;
                        double v119 = *(uint64_t **)(v118 + 16);
                      }
                      v125[2] = (uint64_t)v119;
                      *(void *)(*(void *)(v118 + 16) + 8 * (**(void **)(v118 + 16) != v118)) = v125;
                      *uint64_t v125 = v118;
                      *(void *)(v118 + 16) = v125;
                      double v119 = (uint64_t *)v125[2];
                      uint64_t v118 = *v119;
                      *((unsigned char *)v125 + 24) = 1;
                      *((unsigned char *)v119 + 24) = 0;
                      uint64_t v127 = *(void *)(v118 + 8);
                      uint64_t *v119 = v127;
                      if (v127) {
LABEL_184:
                      }
                        *(void *)(v127 + 16) = v119;
                    }
                    *(void *)(v118 + 16) = v119[2];
                    *(void *)(v119[2] + 8 * (*(void *)v119[2] != (void)v119)) = v118;
                    *(void *)(v118 + 8) = v119;
LABEL_192:
                    v119[2] = v118;
                    break;
                  }
                }
                else if (!v120 || (int v122 = *(unsigned __int8 *)(v120 + 24), v121 = (unsigned char *)(v120 + 24), v122))
                {
                  if (*(uint64_t **)v118 == v116)
                  {
                    uint64_t v143 = v116[1];
                    *(void *)uint64_t v118 = v143;
                    if (v143)
                    {
                      *(void *)(v143 + 16) = v118;
                      double v119 = *(uint64_t **)(v118 + 16);
                    }
                    v116[2] = (uint64_t)v119;
                    *(void *)(*(void *)(v118 + 16) + 8 * (**(void **)(v118 + 16) != v118)) = v116;
                    v116[1] = v118;
                    *(void *)(v118 + 16) = v116;
                    double v119 = (uint64_t *)v116[2];
                    *((unsigned char *)v116 + 24) = 1;
                    *((unsigned char *)v119 + 24) = 0;
                    uint64_t v118 = v119[1];
                    std::string::value_type v128 = *(uint64_t **)v118;
                    v119[1] = *(void *)v118;
                    if (v128) {
LABEL_190:
                    }
                      v128[2] = (uint64_t)v119;
                  }
                  else
                  {
                    *(unsigned char *)(v118 + 24) = 1;
                    *((unsigned char *)v119 + 24) = 0;
                    uint64_t v118 = v119[1];
                    std::string::value_type v128 = *(uint64_t **)v118;
                    v119[1] = *(void *)v118;
                    if (v128) {
                      goto LABEL_190;
                    }
                  }
                  *(void *)(v118 + 16) = v119[2];
                  *(void *)(v119[2] + 8 * (*(void *)v119[2] != (void)v119)) = v118;
                  *(void *)uint64_t v118 = v119;
                  goto LABEL_192;
                }
                *(unsigned char *)(v118 + 24) = 1;
                uint64_t v116 = v119;
                *((unsigned char *)v119 + 24) = v119 == v117;
                unsigned char *v121 = 1;
              }
              while (v119 != v117);
            }
            ++v354;
            if (v107 >= 0) {
              goto LABEL_227;
            }
          }
          unint64_t v129 = v98;
          unint64_t v130 = v98 + v107;
          sub_100085B24(buf, (uint64_t)&v372[24 * v98 + 24 * v107]);
          v131 = v367;
          if (!v367) {
            goto LABEL_204;
          }
          long long v132 = &v367;
          do
          {
            uint64_t v133 = v132;
            v134 = (const void ***)(v131 + 4);
            BOOL v135 = sub_10006182C((const void ***)v131 + 4, (const void ***)buf);
            uint64_t v136 = v131 + 1;
            if (!v135)
            {
              uint64_t v136 = v131;
              long long v132 = (uint64_t **)v131;
            }
            v131 = (uint64_t *)*v136;
          }
          while (*v136);
          if (v132 == &v367
            || (!v135 ? (uint64_t v137 = v134) : (uint64_t v137 = (const void ***)(v133 + 4)), sub_10006182C((const void ***)buf, v137)))
          {
LABEL_204:
            long long v132 = &v367;
          }
          uint64_t v138 = *(std::__shared_weak_count **)&buf[8];
          if (!*(void *)&buf[8]
            || atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            if (v132 != &v367) {
              goto LABEL_208;
            }
LABEL_213:
            unint64_t v98 = v129;
            if (qword_10047BEF8 != -1) {
              dispatch_once(&qword_10047BEF8, &stru_100462E90);
            }
            ++v345;
            uint64_t v141 = qword_10047BF00;
            if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
            {
              int v142 = &v372[24 * v130];
              if (v142[23] < 0) {
                int v142 = *(char **)v142;
              }
              *(_DWORD *)std::string buf = 134349571;
              *(void *)&uint8_t buf[4] = v130;
              *(_WORD *)&unsigned char buf[12] = 2081;
              *(void *)&buf[14] = v142;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&uint8_t buf[24] = v345;
              double v108 = v141;
              os_log_type_t v109 = OS_LOG_TYPE_INFO;
              uint64_t v110 = "TileMaxPri, notindb, %{public}zu, %{private}s, need, %{public}d";
              uint32_t v111 = 28;
LABEL_158:
              _os_log_impl((void *)&_mh_execute_header, v108, v109, v110, buf, v111);
            }
LABEL_159:
            ++v107;
            continue;
          }
          break;
        }
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
        if (v132 == &v367) {
          goto LABEL_213;
        }
LABEL_208:
        unint64_t v98 = v129;
        if (qword_10047BEF8 == -1)
        {
          uint64_t v139 = qword_10047BF00;
          if (!os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_159;
          }
        }
        else
        {
          dispatch_once(&qword_10047BEF8, &stru_100462E90);
          uint64_t v139 = qword_10047BF00;
          if (!os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_159;
          }
        }
        int v140 = &v372[24 * v130];
        if (v140[23] < 0) {
          int v140 = *(char **)v140;
        }
        *(_DWORD *)std::string buf = 136380675;
        *(void *)&uint8_t buf[4] = v140;
        double v108 = v139;
        os_log_type_t v109 = OS_LOG_TYPE_DEFAULT;
        uint64_t v110 = "@TileMaxPri, nofetch, %{private}s, indb";
        uint32_t v111 = 12;
        goto LABEL_158;
      }
LABEL_227:
      if (qword_10047BEF8 == -1)
      {
        uint64_t v144 = qword_10047BF00;
        if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO)) {
          goto LABEL_229;
        }
      }
      else
      {
        dispatch_once(&qword_10047BEF8, &stru_100462E90);
        uint64_t v144 = qword_10047BF00;
        if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
        {
LABEL_229:
          *(_DWORD *)std::string buf = 67240960;
          *(_DWORD *)&uint8_t buf[4] = v105;
          *(_WORD *)&uint8_t buf[8] = 1026;
          *(_DWORD *)&buf[10] = v345;
          *(_WORD *)&buf[14] = 1026;
          *(_DWORD *)&uint8_t buf[16] = v340;
          *(_WORD *)&buf[20] = 1026;
          *(_DWORD *)&buf[22] = v338;
          _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_INFO, "TileMaxPri, spaceneed, priority, %{public}d, need, %{public}d, empty, %{public}d, avail, %{public}d", buf, 0x1Au);
        }
      }
      if (!v345)
      {
        v164 = v353;
        v165 = &v353;
        v166 = &v353;
        if (!v353) {
          goto LABEL_272;
        }
        v167 = v353;
        while (1)
        {
          while (1)
          {
            v165 = (uint64_t **)v167;
            int v168 = *((_DWORD *)v167 + 7);
            if (v105 >= v168) {
              break;
            }
            v167 = *v165;
            v166 = v165;
            if (!*v165) {
              goto LABEL_272;
            }
          }
          if (v168 >= v105) {
            break;
          }
          v167 = v165[1];
          if (!v167)
          {
            v166 = v165 + 1;
LABEL_272:
            v169 = (int *)operator new(0x28uLL);
            v169[7] = v105;
            v169[8] = 0;
            *(void *)v169 = 0;
            *((void *)v169 + 1) = 0;
            *((void *)v169 + 2) = v165;
            void *v166 = (uint64_t *)v169;
            v170 = (uint64_t *)v169;
            if (*v352)
            {
              v352 = (uint64_t *)*v352;
              v170 = *v166;
            }
            sub_1000619B8(v353, v170);
            v164 = v353;
            ++v354;
LABEL_343:
            uint64_t v206 = v169[8];
            for (uint64_t i = &v353; ; v164 = *i)
            {
              uint64_t v208 = i;
              if (!v164) {
                goto LABEL_350;
              }
              while (1)
              {
                uint64_t i = (uint64_t **)v164;
                int v209 = *((_DWORD *)v164 + 7);
                if (v105 < v209) {
                  break;
                }
                if (v209 >= v105)
                {
                  int v212 = *((_DWORD *)i + 8);
                  if (qword_10047BEF8 == -1) {
                    goto LABEL_353;
                  }
                  goto LABEL_356;
                }
                v164 = i[1];
                if (!v164)
                {
                  uint64_t v208 = i + 1;
LABEL_350:
                  v210 = operator new(0x28uLL);
                  v210[7] = v105;
                  v210[8] = 0;
                  *(void *)v210 = 0;
                  *((void *)v210 + 1) = 0;
                  *((void *)v210 + 2) = i;
                  *uint64_t v208 = (uint64_t *)v210;
                  v211 = (uint64_t *)v210;
                  if (*v352)
                  {
                    v352 = (uint64_t *)*v352;
                    v211 = *v208;
                  }
                  sub_1000619B8(v353, v211);
                  ++v354;
                  int v212 = v210[8];
                  if (qword_10047BEF8 == -1)
                  {
LABEL_353:
                    v98 += v206;
                    LODWORD(v335) = v212 + v335;
                    v213 = qword_10047BF00;
                    if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)std::string buf = 67240192;
                      *(_DWORD *)&uint8_t buf[4] = v105;
                      _os_log_impl((void *)&_mh_execute_header, v213, OS_LOG_TYPE_INFO, "TileMaxPri, spacecheck, priority, %{public}d, allindb", buf, 8u);
                    }
                    goto LABEL_434;
                  }
LABEL_356:
                  dispatch_once(&qword_10047BEF8, &stru_100462E90);
                  goto LABEL_353;
                }
              }
            }
          }
        }
        v169 = (int *)v165;
        goto LABEL_343;
      }
      int v145 = v345 - v340;
      if (v345 <= v340)
      {
        v171 = v353;
        v172 = &v353;
        v173 = &v353;
        if (!v353) {
          goto LABEL_282;
        }
        v174 = v353;
        while (1)
        {
          while (1)
          {
            v172 = (uint64_t **)v174;
            int v175 = *((_DWORD *)v174 + 7);
            if (v105 >= v175) {
              break;
            }
            v174 = *v172;
            v173 = v172;
            if (!*v172) {
              goto LABEL_282;
            }
          }
          if (v175 >= v105) {
            break;
          }
          v174 = v172[1];
          if (!v174)
          {
            v173 = v172 + 1;
LABEL_282:
            v176 = (int *)operator new(0x28uLL);
            v176[7] = v105;
            v176[8] = 0;
            *(void *)v176 = 0;
            *((void *)v176 + 1) = 0;
            *((void *)v176 + 2) = v172;
            void *v173 = (uint64_t *)v176;
            long long v177 = (uint64_t *)v176;
            if (*v352)
            {
              v352 = (uint64_t *)*v352;
              long long v177 = *v173;
            }
            sub_1000619B8(v353, v177);
            v171 = v353;
            ++v354;
LABEL_358:
            uint64_t v214 = v176[8];
            for (j = &v353; ; v171 = *j)
            {
              v216 = j;
              if (!v171) {
                goto LABEL_365;
              }
              while (1)
              {
                j = (uint64_t **)v171;
                int v217 = *((_DWORD *)v171 + 7);
                if (v105 < v217) {
                  break;
                }
                if (v217 >= v105)
                {
                  int v220 = *((_DWORD *)j + 8);
                  if (qword_10047BEF8 == -1) {
                    goto LABEL_368;
                  }
                  goto LABEL_439;
                }
                v171 = j[1];
                if (!v171)
                {
                  v216 = j + 1;
LABEL_365:
                  v218 = operator new(0x28uLL);
                  v218[7] = v105;
                  v218[8] = 0;
                  *(void *)v218 = 0;
                  *((void *)v218 + 1) = 0;
                  *((void *)v218 + 2) = j;
                  void *v216 = (uint64_t *)v218;
                  v219 = (uint64_t *)v218;
                  if (*v352)
                  {
                    v352 = (uint64_t *)*v352;
                    v219 = *v216;
                  }
                  sub_1000619B8(v353, v219);
                  ++v354;
                  int v220 = v218[8];
                  if (qword_10047BEF8 == -1)
                  {
LABEL_368:
                    uint64_t v331 = v214;
                    uint64_t v221 = qword_10047BF00;
                    if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)std::string buf = 67240448;
                      *(_DWORD *)&uint8_t buf[4] = v105;
                      *(_WORD *)&uint8_t buf[8] = 2050;
                      *(void *)&buf[10] = (v356 - (unsigned char *)__p) >> 4;
                      _os_log_impl((void *)&_mh_execute_header, v221, OS_LOG_TYPE_INFO, "TileMaxPri, spacecheck, priority, %{public}d, haveempty, transfer, %{public}ld", buf, 0x12u);
                    }
                    uint64_t v222 = v356;
                    if (v356 == __p)
                    {
                      uint64_t v253 = v331;
                      goto LABEL_433;
                    }
                    int v329 = v220;
                    unint64_t v223 = 0;
                    uint64_t v222 = (char *)__p;
LABEL_373:
                    v225 = &v222[16 * v223];
                    v226 = v359;
                    if ((unint64_t)v359 >= v360)
                    {
                      int v359 = (char *)sub_100017420((uint64_t)&v358, v225);
                      uint64_t v228 = (char *)__p + 16 * v223;
                      uint64_t v229 = v350;
                      uint64_t v230 = &v350;
                      v231 = &v350;
                      if (!v350) {
                        goto LABEL_386;
                      }
                    }
                    else
                    {
                      *(void *)int v359 = *(void *)v225;
                      uint64_t v227 = *((void *)v225 + 1);
                      *((void *)v226 + 1) = v227;
                      if (v227) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v227 + 8), 1uLL, memory_order_relaxed);
                      }
                      int v359 = v226 + 16;
                      uint64_t v228 = &v222[16 * v223];
                      uint64_t v229 = v350;
                      uint64_t v230 = &v350;
                      v231 = &v350;
                      if (!v350)
                      {
LABEL_386:
                        v233 = operator new(0x38uLL);
                        v233[4] = *(void *)v228;
                        uint64_t v234 = *((void *)v228 + 1);
                        v233[5] = v234;
                        if (v234) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v234 + 8), 1uLL, memory_order_relaxed);
                        }
                        *((unsigned char *)v233 + 48) = 0;
                        void *v233 = 0;
                        v233[1] = 0;
                        v233[2] = v230;
                        std::runtime_error_vtbl *v231 = v233;
                        v235 = v233;
                        if (*v349)
                        {
                          __int16 v349 = (uint64_t **)*v349;
                          v235 = *v231;
                        }
                        v236 = v350;
                        BOOL v57 = v235 == v350;
                        *((unsigned char *)v235 + 24) = v235 == v350;
                        if (v57) {
                          goto LABEL_412;
                        }
                        while (1)
                        {
                          uint64_t v237 = v235[2];
                          if (*(unsigned char *)(v237 + 24)) {
                            goto LABEL_412;
                          }
                          uint64_t v238 = *(uint64_t **)(v237 + 16);
                          uint64_t v239 = *v238;
                          if (*v238 == v237)
                          {
                            uint64_t v242 = v238[1];
                            if (!v242 || (v243 = *(unsigned __int8 *)(v242 + 24), int v240 = (unsigned char *)(v242 + 24), v243))
                            {
                              if (*(uint64_t **)v237 == v235)
                              {
                                *(unsigned char *)(v237 + 24) = 1;
                                *((unsigned char *)v238 + 24) = 0;
                                uint64_t v246 = *(void *)(v237 + 8);
                                *uint64_t v238 = v246;
                                if (v246) {
                                  goto LABEL_405;
                                }
                              }
                              else
                              {
                                v244 = *(uint64_t **)(v237 + 8);
                                uint64_t v245 = *v244;
                                *(void *)(v237 + 8) = *v244;
                                if (v245)
                                {
                                  *(void *)(v245 + 16) = v237;
                                  uint64_t v238 = *(uint64_t **)(v237 + 16);
                                }
                                v244[2] = (uint64_t)v238;
                                *(void *)(*(void *)(v237 + 16) + 8 * (**(void **)(v237 + 16) != v237)) = v244;
                                uint64_t *v244 = v237;
                                *(void *)(v237 + 16) = v244;
                                uint64_t v238 = (uint64_t *)v244[2];
                                uint64_t v237 = *v238;
                                *((unsigned char *)v244 + 24) = 1;
                                *((unsigned char *)v238 + 24) = 0;
                                uint64_t v246 = *(void *)(v237 + 8);
                                *uint64_t v238 = v246;
                                if (v246) {
LABEL_405:
                                }
                                  *(void *)(v246 + 16) = v238;
                              }
                              *(void *)(v237 + 16) = v238[2];
                              *(void *)(v238[2] + 8 * (*(void *)v238[2] != (void)v238)) = v237;
                              *(void *)(v237 + 8) = v238;
LABEL_411:
                              v238[2] = v237;
LABEL_412:
                              ++v351;
LABEL_413:
                              int v248 = *((unsigned __int8 *)v233 + 48);
                              if (qword_10047BEF8 == -1)
                              {
                                uint64_t v249 = qword_10047BF00;
                                if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT)) {
                                  goto LABEL_415;
                                }
                              }
                              else
                              {
                                dispatch_once(&qword_10047BEF8, &stru_100462E90);
                                uint64_t v249 = qword_10047BF00;
                                if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT))
                                {
LABEL_415:
                                  uint64_t v250 = sub_1000900B8((char **)__p + 2 * v223);
                                  double v251 = sub_1000900B8((char **)__p + 2 * v223);
                                  *(_DWORD *)std::string buf = 136381187;
                                  *(void *)&uint8_t buf[4] = v250;
                                  *(_WORD *)&unsigned char buf[12] = 2081;
                                  *(void *)&buf[14] = v251;
                                  *(_WORD *)&buf[22] = 1026;
                                  *(_DWORD *)&uint8_t buf[24] = v248;
                                  _os_log_impl((void *)&_mh_execute_header, v249, OS_LOG_TYPE_DEFAULT, "@EvictTrigger, prefetch, exec, 1, %{private}s, R%{private}s, R, untouched, %{public}d", buf, 0x1Cu);
                                }
                              }
                              v346 += v248;
                              ++v223;
                              uint64_t v222 = (char *)__p;
                              v224 = v356;
                              if (v223 < (v356 - (unsigned char *)__p) >> 4) {
                                goto LABEL_373;
                              }
                              if (v356 == __p)
                              {
                                uint64_t v253 = v331;
                              }
                              else
                              {
                                uint64_t v253 = v331;
                                do
                                {
                                  char v254 = (std::__shared_weak_count *)*((void *)v224 - 1);
                                  if (v254 && !atomic_fetch_add(&v254->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                                    std::__shared_weak_count::__release_weak(v254);
                                  }
                                  v224 -= 16;
                                }
                                while (v224 != v222);
                              }
                              int v220 = v329;
LABEL_433:
                              v98 += v253;
                              LODWORD(v335) = v335 - v345 + v220;
                              v333 += v345;
                              v340 -= v345;
                              __int16 v356 = v222;
LABEL_434:
                              int v345 = 0;
                              goto LABEL_435;
                            }
                          }
                          else if (!v239 || (v241 = *(unsigned __int8 *)(v239 + 24), int v240 = (unsigned char *)(v239 + 24), v241))
                          {
                            if (*(uint64_t **)v237 == v235)
                            {
                              uint64_t v252 = v235[1];
                              *(void *)uint64_t v237 = v252;
                              if (v252)
                              {
                                *(void *)(v252 + 16) = v237;
                                uint64_t v238 = *(uint64_t **)(v237 + 16);
                              }
                              v235[2] = (uint64_t)v238;
                              *(void *)(*(void *)(v237 + 16) + 8 * (**(void **)(v237 + 16) != v237)) = v235;
                              v235[1] = v237;
                              *(void *)(v237 + 16) = v235;
                              uint64_t v238 = (uint64_t *)v235[2];
                              *((unsigned char *)v235 + 24) = 1;
                              *((unsigned char *)v238 + 24) = 0;
                              uint64_t v237 = v238[1];
                              v247 = *(uint64_t **)v237;
                              v238[1] = *(void *)v237;
                              if (v247) {
LABEL_409:
                              }
                                v247[2] = (uint64_t)v238;
                            }
                            else
                            {
                              *(unsigned char *)(v237 + 24) = 1;
                              *((unsigned char *)v238 + 24) = 0;
                              uint64_t v237 = v238[1];
                              v247 = *(uint64_t **)v237;
                              v238[1] = *(void *)v237;
                              if (v247) {
                                goto LABEL_409;
                              }
                            }
                            *(void *)(v237 + 16) = v238[2];
                            *(void *)(v238[2] + 8 * (*(void *)v238[2] != (void)v238)) = v237;
                            *(void *)uint64_t v237 = v238;
                            goto LABEL_411;
                          }
                          *(unsigned char *)(v237 + 24) = 1;
                          v235 = v238;
                          *((unsigned char *)v238 + 24) = v238 == v236;
                          *int v240 = 1;
                          if (v238 == v236) {
                            goto LABEL_412;
                          }
                        }
                      }
                    }
                    v231 = &v350;
                    while (1)
                    {
                      while (1)
                      {
                        uint64_t v230 = (uint64_t **)v229;
                        v232 = (const void ***)(v229 + 4);
                        if (!sub_10006182C((const void ***)v228, (const void ***)v229 + 4)) {
                          break;
                        }
                        uint64_t v229 = *v230;
                        v231 = v230;
                        if (!*v230) {
                          goto LABEL_386;
                        }
                      }
                      if (!sub_10006182C(v232, (const void ***)v228)) {
                        break;
                      }
                      v231 = v230 + 1;
                      uint64_t v229 = v230[1];
                      if (!v229) {
                        goto LABEL_386;
                      }
                    }
                    v233 = *v231;
                    if (*v231) {
                      goto LABEL_413;
                    }
                    goto LABEL_386;
                  }
LABEL_439:
                  dispatch_once(&qword_10047BEF8, &stru_100462E90);
                  goto LABEL_368;
                }
              }
            }
          }
        }
        v176 = (int *)v172;
        goto LABEL_358;
      }
      if (v338)
      {
        unint64_t v330 = v98;
        if (v145 >= (int)v338) {
          int v145 = v338;
        }
        uint64_t v146 = v145;
        if (!v145)
        {
LABEL_285:
          if (qword_10047BEF8 != -1) {
            dispatch_once(&qword_10047BEF8, &stru_100462E90);
          }
          v332 += v146;
          v340 += v146;
          unint64_t v338 = (v338 - v146);
          v178 = qword_10047BF00;
          if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 67240960;
            *(_DWORD *)&uint8_t buf[4] = v105;
            *(_WORD *)&uint8_t buf[8] = 2050;
            *(void *)&buf[10] = v146;
            *(_WORD *)&buf[18] = 2050;
            *(void *)&buf[20] = (v359 - (unsigned char *)v358) >> 4;
            *(_WORD *)&buf[28] = 2050;
            *(void *)&buf[30] = (v362 - (unsigned char *)v361) >> 4;
            _os_log_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_INFO, "TileMaxPri, spacecheck, priority, %{public}d, freeavail, %{public}ld, evict, %{public}lu, offlist, %{public}lu", buf, 0x26u);
          }
          unint64_t v98 = v330;
          goto LABEL_435;
        }
        uint64_t v147 = 0;
        while (2)
        {
          unint64_t v148 = (char *)v361;
          uint64_t v149 = *(void *)v361;
          uint64_t v150 = *((void *)v361 + 1);
          *(void *)&long long v348 = *(void *)v361;
          *((void *)&v348 + 1) = v150;
          if (v150) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v150 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v151 = v359;
          if ((unint64_t)v359 >= v360)
          {
            uint64_t v155 = (char *)sub_100017420((uint64_t)&v358, &v348);
            unint64_t v148 = (char *)v361;
            v154 = v362;
            int v359 = v155;
            double v153 = (char *)v361 + 16;
            if ((char *)v361 + 16 == v362) {
              goto LABEL_253;
            }
          }
          else
          {
            *(void *)int v359 = v149;
            uint64_t v152 = *((void *)&v348 + 1);
            *((void *)v151 + 1) = *((void *)&v348 + 1);
            if (v152) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v152 + 8), 1uLL, memory_order_relaxed);
            }
            int v359 = v151 + 16;
            double v153 = v148 + 16;
            v154 = v362;
            if (v148 + 16 == v362)
            {
LABEL_253:
              while (v153 != v148)
              {
                std::string v158 = (std::__shared_weak_count *)*((void *)v153 - 1);
                if (v158 && !atomic_fetch_add(&v158->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                  std::__shared_weak_count::__release_weak(v158);
                }
                v153 -= 16;
              }
              v362 = v148;
              *(void *)std::string buf = &v348;
              int v159 = *((unsigned __int8 *)sub_10026B2DC((uint64_t **)&v349, (const void ***)&v348, (uint64_t)&unk_1003FAE80, (void **)buf)+ 48);
              if (qword_10047BEF8 == -1)
              {
                int64_t v160 = qword_10047BF00;
                if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_259;
                }
              }
              else
              {
                dispatch_once(&qword_10047BEF8, &stru_100462E90);
                int64_t v160 = qword_10047BF00;
                if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT))
                {
LABEL_259:
                  v161 = sub_1000900B8((char **)&v348);
                  v162 = sub_1000900B8((char **)&v348);
                  *(_DWORD *)std::string buf = 136381187;
                  *(void *)&uint8_t buf[4] = v161;
                  *(_WORD *)&unsigned char buf[12] = 2081;
                  *(void *)&buf[14] = v162;
                  *(_WORD *)&buf[22] = 1026;
                  *(_DWORD *)&uint8_t buf[24] = v159;
                  _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEFAULT, "@EvictTrigger, prefetch, exec, 1, %{private}s, R%{private}s, R, untouched, %{public}d", buf, 0x1Cu);
                }
              }
              v163 = (std::__shared_weak_count *)*((void *)&v348 + 1);
              if (*((void *)&v348 + 1)
                && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v348 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
                std::__shared_weak_count::__release_weak(v163);
              }
              v346 += v159;
              if (++v147 == v146) {
                goto LABEL_285;
              }
              continue;
            }
          }
          break;
        }
        do
        {
          long long v156 = *(_OWORD *)v153;
          *(void *)double v153 = 0;
          *((void *)v153 + 1) = 0;
          std::string v157 = (std::__shared_weak_count *)*((void *)v153 - 1);
          *((_OWORD *)v153 - 1) = v156;
          if (v157 && !atomic_fetch_add(&v157->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
            std::__shared_weak_count::__release_weak(v157);
          }
          v153 += 16;
          v148 += 16;
        }
        while (v153 != v154);
        double v153 = v362;
        goto LABEL_253;
      }
      int v179 = 0;
LABEL_292:
      v180 = v353;
      v181 = &v353;
LABEL_294:
      v182 = v181;
      if (v180)
      {
        while (1)
        {
          v181 = (uint64_t **)v180;
          int v183 = *((_DWORD *)v180 + 7);
          if (v106 < v183)
          {
            v180 = *v181;
            goto LABEL_294;
          }
          if (v183 >= v106) {
            break;
          }
          v180 = v181[1];
          if (!v180)
          {
            v182 = v181 + 1;
            goto LABEL_299;
          }
        }
        if (v179 >= *((_DWORD *)v181 + 8))
        {
LABEL_337:
          if (qword_10047BEF8 == -1)
          {
            uint64_t v205 = qword_10047BF00;
            if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO)) {
              goto LABEL_339;
            }
          }
          else
          {
            dispatch_once(&qword_10047BEF8, &stru_100462E90);
            uint64_t v205 = qword_10047BF00;
            if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
            {
LABEL_339:
              *(_DWORD *)std::string buf = 67240448;
              *(_DWORD *)&uint8_t buf[4] = v105;
              *(_WORD *)&uint8_t buf[8] = 2050;
              *(void *)&buf[10] = (v359 - (unsigned char *)v358) >> 4;
              _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_INFO, "TileMaxPri, spacecheck, priority, %{public}d, tailpri, evict, %{public}lu", buf, 0x12u);
            }
          }
          unint64_t v338 = 0;
LABEL_435:
          if (qword_10047BEF8 == -1)
          {
            std::runtime_error v255 = qword_10047BF00;
            if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
            {
LABEL_144:
              *(_DWORD *)std::string buf = 134350080;
              *(void *)&uint8_t buf[4] = v98;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(void *)&buf[14] = v344;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&uint8_t buf[24] = v105;
              *(_WORD *)&buf[28] = 1026;
              *(_DWORD *)&buf[30] = v106;
              *(_WORD *)&buf[34] = 1026;
              *(_DWORD *)&buf[36] = v340;
              _os_log_impl((void *)&_mh_execute_header, v255, OS_LOG_TYPE_INFO, "TileMaxPri, htindex, %{public}lu, %{public}lu, htpriority, %{public}d, %{public}d, empty, %{public}d", buf, 0x28u);
            }
          }
          else
          {
            dispatch_once(&qword_10047BEF8, &stru_100462E90);
            std::runtime_error v255 = qword_10047BF00;
            if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO)) {
              goto LABEL_144;
            }
          }
          unint64_t v99 = v344;
          unint64_t v101 = v338;
          if (v105 > v341)
          {
            if (qword_10047BEF8 != -1) {
              dispatch_once(&qword_10047BEF8, &stru_100462E90);
            }
            int64_t v256 = a5;
            int v257 = v339;
            v259 = qword_10047BF00;
            if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)std::string buf = 134349568;
              *(void *)&uint8_t buf[4] = v98;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(void *)&buf[14] = v344;
              *(_WORD *)&buf[22] = 1026;
              *(_DWORD *)&uint8_t buf[24] = v341;
              _os_log_impl((void *)&_mh_execute_header, v259, OS_LOG_TYPE_INFO, "TileMaxPri, primax, %{public}lu, %{public}lu, priorityAtMax, %{public}d", buf, 0x1Cu);
            }
            if (v98) {
              unint64_t v99 = v98 - 1;
            }
            goto LABEL_460;
          }
          continue;
        }
      }
      else
      {
LABEL_299:
        v184 = operator new(0x28uLL);
        v184[7] = v106;
        v184[8] = 0;
        *(void *)v184 = 0;
        *((void *)v184 + 1) = 0;
        *((void *)v184 + 2) = v181;
        void *v182 = (uint64_t *)v184;
        v185 = (uint64_t *)v184;
        if (*v352)
        {
          v352 = (uint64_t *)*v352;
          v185 = *v182;
        }
        sub_1000619B8(v353, v185);
        ++v354;
        if (v179 >= v184[8]) {
          goto LABEL_337;
        }
      }
      sub_100085B24(&v348, (uint64_t)&v372[24 * v344]);
      v186 = v367;
      if (!v367) {
        goto LABEL_318;
      }
      v187 = &v367;
      do
      {
        v188 = v187;
        v189 = (const void ***)(v186 + 4);
        BOOL v190 = sub_10006182C((const void ***)v186 + 4, (const void ***)&v348);
        if (v190) {
          v191 = v186 + 1;
        }
        else {
          v191 = v186;
        }
        if (v190) {
          v187 = v188;
        }
        else {
          v187 = (uint64_t **)v186;
        }
        v186 = (uint64_t *)*v191;
      }
      while (*v191);
      if (v187 == &v367
        || (!v190 ? (v192 = v189) : (v192 = (const void ***)(v188 + 4)), sub_10006182C((const void ***)&v348, v192)))
      {
LABEL_318:
        if (qword_10047BEF8 != -1) {
          dispatch_once(&qword_10047BEF8, &stru_100462E90);
        }
        ++v342;
        uint64_t v193 = qword_10047BF00;
        if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT))
        {
          v194 = sub_1000900B8((char **)&v348);
          *(_DWORD *)std::string buf = 136380675;
          *(void *)&uint8_t buf[4] = v194;
          v195 = v193;
          uint64_t v196 = "@TileMaxPri, nofetch, %{private}s, lowpri";
          uint32_t v197 = 12;
          goto LABEL_322;
        }
      }
      else
      {
        v200 = v356;
        if ((unint64_t)v356 >= v357)
        {
          v202 = (char *)sub_100017420((uint64_t)&__p, &v348);
        }
        else
        {
          *(void *)__int16 v356 = v348;
          uint64_t v201 = *((void *)&v348 + 1);
          *((void *)v200 + 1) = *((void *)&v348 + 1);
          if (v201) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v201 + 8), 1uLL, memory_order_relaxed);
          }
          v202 = v200 + 16;
        }
        __int16 v356 = v202;
        if (qword_10047BEF8 != -1) {
          dispatch_once(&qword_10047BEF8, &stru_100462E90);
        }
        ++v340;
        ++HIDWORD(v335);
        uint64_t v203 = qword_10047BF00;
        if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT))
        {
          v204 = sub_1000900B8((char **)&v348);
          *(_DWORD *)std::string buf = 136380931;
          *(void *)&uint8_t buf[4] = v204;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&buf[14] = (v356 - (unsigned char *)__p) >> 4;
          v195 = v203;
          uint64_t v196 = "@TileMaxPri, nofetch, %{private}s, evictlow, %{public}ld";
          uint32_t v197 = 22;
LABEL_322:
          _os_log_impl((void *)&_mh_execute_header, v195, OS_LOG_TYPE_DEFAULT, v196, buf, v197);
        }
      }
      unint64_t v198 = v344 - 1;
      if (!v344) {
        unint64_t v198 = 0;
      }
      unint64_t v344 = v198;
      uint64_t v199 = (std::__shared_weak_count *)*((void *)&v348 + 1);
      if (*((void *)&v348 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v348 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
      }
      ++v179;
      goto LABEL_292;
    }
    break;
  }
  if (qword_10047BEF8 != -1) {
    dispatch_once(&qword_10047BEF8, &stru_100462E90);
  }
  int64_t v256 = a5;
  int v257 = v339;
  int64_t v258 = qword_10047BF00;
  if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134349824;
    *(void *)&uint8_t buf[4] = v98;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = v99;
    *(_WORD *)&buf[22] = 2050;
    *(void *)&uint8_t buf[24] = 0xAAAAAAAAAAAAAAABLL * ((v373 - v372) >> 3);
    *(_WORD *)&unsigned char buf[32] = 2050;
    *(void *)&buf[34] = (v370 - v369) >> 2;
    _os_log_impl((void *)&_mh_execute_header, v258, OS_LOG_TYPE_ERROR, "TileMaxPri, error, out of range, iterindex, %{public}lu, %{public}lu, sizes, %{public}lu, %{public}lu", buf, 0x2Au);
  }
  unint64_t v98 = 0;
  unint64_t v99 = 0;
LABEL_460:
  if (qword_10047BEF8 == -1)
  {
    v260 = qword_10047BF00;
    if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_462;
    }
  }
  else
  {
    dispatch_once(&qword_10047BEF8, &stru_100462E90);
    v260 = qword_10047BF00;
    if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT))
    {
LABEL_462:
      uint64_t v261 = (a2[1] - *a2) >> 5;
      unint64_t v262 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
      *(_DWORD *)std::string buf = 134350848;
      *(void *)&uint8_t buf[4] = v261;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v333;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v335;
      *(_WORD *)&uint8_t buf[24] = 1026;
      *(_DWORD *)&buf[26] = HIDWORD(v335);
      *(_WORD *)&buf[30] = 1026;
      *(_DWORD *)&unsigned char buf[32] = v342;
      *(_WORD *)&buf[36] = 1026;
      *(_DWORD *)&buf[38] = v332;
      LOWORD(v376) = 1026;
      *(_DWORD *)((char *)&v376 + 2) = v346;
      HIWORD(v376) = 2050;
      unint64_t v377 = v262;
      _os_log_impl((void *)&_mh_execute_header, v260, OS_LOG_TYPE_DEFAULT, "@TileMaxPri, results, in, %{public}lu, queued, %{public}d, indb, %{public}d, evictlow, %{public}d, lowpri, %{public}d, evictoff, %{public}d, untouched, %{public}d, numtiles, %{public}ld", buf, 0x3Au);
    }
  }
  *int64_t v256 = (unint64_t)(a2[1] - *a2) >> 5;
  v256[1] = v333;
  v256[2] = v335;
  v256[3] = v342;
  v256[4] = HIDWORD(v335);
  v256[5] = v332;
  v256[6] = v257;
  v256[7] = a4;
  v256[8] = v346;
  if (v99 | v98)
  {
    char v277 = a3;
    if (v99 < 0xAAAAAAAAAAAAAAABLL * ((v373 - v372) >> 3) && v370 != v369)
    {
      unsigned int v278 = *(_DWORD *)&v369[4 * v99];
      goto LABEL_491;
    }
    if (qword_10047BEF8 == -1)
    {
      uint64_t v279 = qword_10047BF00;
      if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_ERROR))
      {
LABEL_489:
        *(_DWORD *)std::string buf = 134349312;
        *(void *)&uint8_t buf[4] = v99;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = (v370 - v369) >> 2;
        _os_log_impl((void *)&_mh_execute_header, v279, OS_LOG_TYPE_ERROR, "TileMaxPri, error, out of range, retindex, %{public}lu, size, %{public}lu", buf, 0x16u);
        unsigned int v278 = 0;
        goto LABEL_490;
      }
    }
    else
    {
      dispatch_once(&qword_10047BEF8, &stru_100462E90);
      uint64_t v279 = qword_10047BF00;
      if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_ERROR)) {
        goto LABEL_489;
      }
    }
    unsigned int v278 = 0;
    char v277 = a3;
    goto LABEL_492;
  }
  if (qword_10047BEF8 == -1)
  {
    uint64_t v263 = qword_10047BF00;
    if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_ERROR)) {
      goto LABEL_466;
    }
  }
  else
  {
    dispatch_once(&qword_10047BEF8, &stru_100462E90);
    uint64_t v263 = qword_10047BF00;
    if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_ERROR))
    {
LABEL_466:
      uint64_t v265 = *a2;
      uint64_t v264 = a2[1];
      v266 = &v353;
      char v267 = &v353;
      v268 = v353;
      if (v353)
      {
        while (1)
        {
          while (1)
          {
            char v267 = (uint64_t **)v268;
            int v269 = *((_DWORD *)v268 + 7);
            if (v269 < 1) {
              break;
            }
            v268 = *v267;
            v266 = v267;
            if (!*v267) {
              goto LABEL_473;
            }
          }
          if ((v269 & 0x80000000) == 0) {
            break;
          }
          v268 = v267[1];
          if (!v268)
          {
            v266 = v267 + 1;
            goto LABEL_473;
          }
        }
        uint64_t v271 = v267;
      }
      else
      {
LABEL_473:
        v270 = v266;
        uint64_t v271 = operator new(0x28uLL);
        v271[7] = 0;
        v271[8] = 0;
        *(void *)uint64_t v271 = 0;
        *((void *)v271 + 1) = 0;
        *((void *)v271 + 2) = v267;
        *v270 = (uint64_t *)v271;
        uint64_t v272 = (uint64_t *)v271;
        if (*v352)
        {
          v352 = (uint64_t *)*v352;
          uint64_t v272 = *v270;
        }
        sub_1000619B8(v353, v272);
        ++v354;
      }
      int v273 = v271[8];
      *(_DWORD *)std::string buf = 134349568;
      *(void *)&uint8_t buf[4] = (v264 - v265) >> 5;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&buf[14] = v273;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = a4;
      _os_log_impl((void *)&_mh_execute_header, v263, OS_LOG_TYPE_ERROR, "TileMaxPri, error, group exceeds max, total, %{public}lu, numinpriority, %{public}d, max, %{public}d", buf, 0x18u);
    }
  }
  v274 = (char *)v358;
  uint64_t v275 = v359;
  if (v359 != v358)
  {
    do
    {
      uint64_t v276 = (std::__shared_weak_count *)*((void *)v275 - 1);
      if (v276 && !atomic_fetch_add(&v276->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
        std::__shared_weak_count::__release_weak(v276);
      }
      v275 -= 16;
    }
    while (v275 != v274);
  }
  unsigned int v278 = 0;
  int v359 = v274;
LABEL_490:
  char v277 = a3;
LABEL_491:
  if (qword_10047BEF8 == -1)
  {
LABEL_492:
    int v280 = qword_10047BF00;
    if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_493;
    }
  }
  else
  {
    dispatch_once(&qword_10047BEF8, &stru_100462E90);
    int v280 = qword_10047BF00;
    if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT))
    {
LABEL_493:
      uint64_t v281 = v370 - v369;
      if (v370 == v369)
      {
        int v283 = 0;
      }
      else
      {
        unint64_t v282 = v281 >> 2;
        if (v98 >= v282) {
          uint64_t v281 = v282 - 1;
        }
        else {
          uint64_t v281 = v98;
        }
        LODWORD(v281) = *(_DWORD *)&v369[4 * v281];
        int v283 = *(_DWORD *)&v369[4 * v99];
      }
      *(_DWORD *)std::string buf = 67241472;
      *(_DWORD *)&uint8_t buf[4] = v278;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v281;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&uint8_t buf[16] = v283;
      *(_WORD *)&buf[20] = 2050;
      *(void *)&buf[22] = v98;
      *(_WORD *)&buf[30] = 2050;
      *(void *)&unsigned char buf[32] = v99;
      *(_WORD *)&buf[40] = 2050;
      uint64_t v376 = (v359 - (unsigned char *)v358) >> 4;
      _os_log_impl((void *)&_mh_execute_header, v280, OS_LOG_TYPE_DEFAULT, "@TileMaxPri, converged, %{public}d, htpriorities, %{public}d, %{public}d, htindex, %{public}lu, %{public}lu, evict, %{public}lu", buf, 0x32u);
    }
  }
  unsigned int v347 = v278;
  v277[1] = *v277;
  long long v284 = (char *)v358;
  if (v359 != v358)
  {
    unint64_t v285 = 0;
    while (1)
    {
      *(void *)std::string buf = &v284[16 * v285];
      long long v287 = sub_10026B3FC((uint64_t **)&v366, *(const void ****)buf, (uint64_t)&unk_1003FAE80, (uint64_t **)buf);
      long long v288 = v287;
      char v277 = a3;
      long long v290 = (char *)a3[1];
      unint64_t v289 = a3[2];
      if ((unint64_t)v290 >= v289) {
        break;
      }
      *(void *)long long v290 = v287[6];
      uint64_t v286 = (uint64_t)(v290 + 8);
LABEL_503:
      v277[1] = v286;
      ++v285;
      long long v284 = (char *)v358;
      if (v285 >= (v359 - (unsigned char *)v358) >> 4) {
        goto LABEL_525;
      }
    }
    long long v291 = (char *)*a3;
    uint64_t v292 = (uint64_t)&v290[-*a3];
    uint64_t v293 = v292 >> 3;
    unint64_t v294 = (v292 >> 3) + 1;
    if (v294 >> 61) {
      sub_1000A9108();
    }
    uint64_t v295 = v289 - (void)v291;
    if (v295 >> 2 > v294) {
      unint64_t v294 = v295 >> 2;
    }
    if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v296 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v296 = v294;
    }
    if (v296)
    {
      if (v296 >> 61) {
        sub_1000A6A10();
      }
      long long v297 = operator new(8 * v296);
      long long v298 = &v297[8 * v293];
      *long long v298 = v288[6];
      uint64_t v286 = (uint64_t)(v298 + 1);
      if (v290 != v291)
      {
LABEL_514:
        unint64_t v299 = v290 - 8 - v291;
        if (v299 < 0x58)
        {
          char v277 = a3;
          goto LABEL_522;
        }
        unint64_t v300 = v290 - &v297[v292];
        char v277 = a3;
        if (v300 < 0x20) {
          goto LABEL_584;
        }
        uint64_t v301 = (v299 >> 3) + 1;
        uint64_t v302 = 8 * (v301 & 0x3FFFFFFFFFFFFFFCLL);
        int v303 = &v290[-v302];
        long long v298 = (void *)((char *)v298 - v302);
        uint64_t v304 = &v297[8 * v293 - 16];
        uint64_t v305 = v290 - 16;
        uint64_t v306 = v301 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v307 = *(_OWORD *)v305;
          *(v304 - 1) = *((_OWORD *)v305 - 1);
          *uint64_t v304 = v307;
          v304 -= 2;
          v305 -= 32;
          v306 -= 4;
        }
        while (v306);
        long long v290 = v303;
        if (v301 != (v301 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_584:
          do
          {
LABEL_522:
            uint64_t v308 = *((void *)v290 - 1);
            v290 -= 8;
            *--long long v298 = v308;
          }
          while (v290 != v291);
        }
LABEL_523:
        *char v277 = v298;
        v277[1] = v286;
        v277[2] = &v297[8 * v296];
        if (v291) {
          operator delete(v291);
        }
        goto LABEL_503;
      }
    }
    else
    {
      long long v297 = 0;
      long long v298 = (void *)(8 * v293);
      *(void *)(8 * v293) = v288[6];
      uint64_t v286 = 8 * v293 + 8;
      if (v290 != v291) {
        goto LABEL_514;
      }
    }
    char v277 = a3;
    goto LABEL_523;
  }
LABEL_525:
  if (qword_10047BEF8 == -1)
  {
    long long v309 = qword_10047BF00;
    if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_527;
    }
  }
  else
  {
    dispatch_once(&qword_10047BEF8, &stru_100462E90);
    long long v309 = qword_10047BF00;
    if (os_log_type_enabled((os_log_t)qword_10047BF00, OS_LOG_TYPE_DEFAULT))
    {
LABEL_527:
      uint64_t v310 = (uint64_t)(v277[1] - *v277) >> 3;
      *(_DWORD *)std::string buf = 134349056;
      *(void *)&uint8_t buf[4] = v310;
      _os_log_impl((void *)&_mh_execute_header, v309, OS_LOG_TYPE_DEFAULT, "@EvictTrigger, prefetch, result, indoor, -1, -1, regional, %{public}ld, -1", buf, 0xCu);
    }
  }
  sub_10014EAB8((uint64_t)&v349, v350);
  sub_10006A9DC((uint64_t)&v352, v353);
  long long v311 = (char *)__p;
  if (__p)
  {
    uint64_t v312 = v356;
    v313 = __p;
    if (v356 != __p)
    {
      do
      {
        uint64_t v314 = (std::__shared_weak_count *)*((void *)v312 - 1);
        if (v314 && !atomic_fetch_add(&v314->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
          std::__shared_weak_count::__release_weak(v314);
        }
        v312 -= 16;
      }
      while (v312 != v311);
      v313 = __p;
    }
    __int16 v356 = v311;
    operator delete(v313);
  }
  uint64_t v315 = (char *)v358;
  if (v358)
  {
    char v316 = v359;
    double v317 = v358;
    if (v359 != v358)
    {
      do
      {
        v318 = (std::__shared_weak_count *)*((void *)v316 - 1);
        if (v318 && !atomic_fetch_add(&v318->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
          std::__shared_weak_count::__release_weak(v318);
        }
        v316 -= 16;
      }
      while (v316 != v315);
      double v317 = v358;
    }
    int v359 = v315;
    operator delete(v317);
  }
  uint64_t v319 = (char *)v361;
  if (v361)
  {
    uint64_t v320 = v362;
    char v321 = v361;
    if (v362 != v361)
    {
      do
      {
        uint64_t v322 = (std::__shared_weak_count *)*((void *)v320 - 1);
        if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
          std::__shared_weak_count::__release_weak(v322);
        }
        v320 -= 16;
      }
      while (v320 != v319);
      char v321 = v361;
    }
    v362 = v319;
    operator delete(v321);
  }
  sub_10014EAB8((uint64_t)&v364, v365[0]);
  sub_10014EAB8((uint64_t)&v366, v367);
  if (v369) {
    operator delete(v369);
  }
  int v323 = v372;
  if (v372)
  {
    long long v324 = v373;
    long long v325 = v372;
    if (v373 != v372)
    {
      do
      {
        if (*(v324 - 1) < 0) {
          operator delete(*((void **)v324 - 3));
        }
        v324 -= 24;
      }
      while (v324 != v323);
      long long v325 = v372;
    }
    v373 = v323;
    operator delete(v325);
  }
  return v347;
}

void sub_10026ACB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,void *a52,uint64_t a53,char a54,void *a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  sub_10014EAB8((uint64_t)&a51, a52);
  sub_10006A9DC((uint64_t)&a54, a55);
  sub_1000D8DD8(&a57);
  sub_1000D8DD8(&a60);
  sub_1000D8DD8(&a63);
  sub_10014EAB8((uint64_t)&a66, a67);
  sub_10014EAB8(v67 - 256, *(void **)(v67 - 248));
  std::string::value_type v69 = *(void **)(v67 - 232);
  if (v69)
  {
    *(void *)(v67 - 224) = v69;
    operator delete(v69);
  }
  sub_1000E0AA4((void **)(v67 - 208));
  _Unwind_Resume(a1);
}

void sub_10026AE28(id a1)
{
  qword_10047BF00 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Daemon");
}

uint64_t *sub_10026AE58(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  std::string __p = operator new(0x30uLL);
  sub_100085B24(__p + 4, a2);
  unint64_t v5 = __p;
  int v6 = *v4;
  if (!*v4)
  {
    uint64_t v8 = v4;
LABEL_17:
    *unint64_t v5 = 0;
    v5[1] = 0;
    v5[2] = (uint64_t)v8;
    std::ios_base *v4 = v5;
    long long v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      unint64_t v5 = *v4;
    }
    sub_1000619B8(a1[1], v5);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return __p;
  }
  uint64_t v7 = (const void ***)(__p + 4);
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v6;
      uint64_t v9 = (const void ***)(v6 + 4);
      if (!sub_10006182C(v7, (const void ***)v6 + 4)) {
        break;
      }
      int v6 = *v8;
      uint64_t v4 = v8;
      if (!*v8)
      {
        uint64_t v4 = v8;
        unint64_t v5 = __p;
        goto LABEL_17;
      }
    }
    if (!sub_10006182C(v9, v7)) {
      break;
    }
    uint64_t v4 = v8 + 1;
    int v6 = v8[1];
    if (!v6)
    {
      unint64_t v5 = __p;
      goto LABEL_17;
    }
  }
  int v10 = *v4;
  unint64_t v5 = __p;
  if (!*v4) {
    goto LABEL_17;
  }
  if (__p)
  {
    unint64_t v11 = (std::__shared_weak_count *)__p[5];
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    operator delete(__p);
  }
  return v10;
}

void sub_10026AFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10026B00C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10026AFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10026B00C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10026B00C(uint64_t a1)
{
  long long v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      std::bad_cast v3 = (std::__shared_weak_count *)v2[5];
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

char *sub_10026B09C(char **a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_1000A9108();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 60) {
      sub_1000A6A10();
    }
    uint64_t v8 = (char *)operator new(16 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v16 = &v8[16 * v3];
  uint64_t v18 = &v8[16 * v7];
  sub_100085B24(v16, a2);
  uint64_t v9 = v16;
  unint64_t v11 = *a1;
  int v10 = a1[1];
  if (v10 == *a1)
  {
    os_log_type_t v13 = a1[1];
  }
  else
  {
    do
    {
      long long v12 = *((_OWORD *)v10 - 1);
      v10 -= 16;
      *((_OWORD *)v9 - 1) = v12;
      v9 -= 16;
      *(void *)int v10 = 0;
      *((void *)v10 + 1) = 0;
    }
    while (v10 != v11);
    os_log_type_t v13 = *a1;
    int v10 = a1[1];
  }
  *a1 = v9;
  a1[1] = v16 + 16;
  a1[2] = v18;
  if (v10 != v13)
  {
    do
    {
      unint64_t v17 = v10 - 16;
      std::string::size_type v14 = (std::__shared_weak_count *)*((void *)v10 - 1);
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      int v10 = v17;
    }
    while (v17 != v13);
    int v10 = v13;
  }
  if (v10) {
    operator delete(v10);
  }
  return v16 + 16;
}

void sub_10026B220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10026B234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10026B234(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_10026B2DC(uint64_t **a1, const void ***a2, uint64_t a3, void **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = (const void ***)(v6 + 4);
        if (!sub_10006182C(a2, (const void ***)v6 + 4)) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (!sub_10006182C(v10, a2)) {
        break;
      }
      unint64_t v7 = v9 + 1;
      uint64_t v6 = v9[1];
      if (!v6) {
        goto LABEL_9;
      }
    }
    if (*v7) {
      return *v7;
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
  }
LABEL_9:
  unint64_t v11 = operator new(0x38uLL);
  long long v12 = v11;
  uint64_t v13 = (*a4)[1];
  double v11[4] = **a4;
  void v11[5] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *((unsigned char *)v11 + 48) = 0;
  *unint64_t v11 = 0;
  v11[1] = 0;
  _DWORD v11[2] = v9;
  *unint64_t v7 = v11;
  std::string::size_type v14 = (uint64_t *)**a1;
  unint64_t v15 = v11;
  if (v14)
  {
    *a1 = v14;
    unint64_t v15 = *v7;
  }
  sub_1000619B8(a1[1], v15);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v12;
}

uint64_t *sub_10026B3FC(uint64_t **a1, const void ***a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = (const void ***)(v6 + 4);
        if (!sub_10006182C(a2, (const void ***)v6 + 4)) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (!sub_10006182C(v10, a2)) {
        break;
      }
      unint64_t v7 = v9 + 1;
      uint64_t v6 = v9[1];
      if (!v6) {
        goto LABEL_9;
      }
    }
    if (*v7) {
      return *v7;
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
  }
LABEL_9:
  unint64_t v11 = (uint64_t *)operator new(0x38uLL);
  long long v12 = v11;
  uint64_t v13 = (*a4)[1];
  double v11[4] = **a4;
  void v11[5] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  void v11[6] = 0;
  *unint64_t v11 = 0;
  v11[1] = 0;
  _DWORD v11[2] = (uint64_t)v9;
  *unint64_t v7 = v11;
  std::string::size_type v14 = (uint64_t *)**a1;
  unint64_t v15 = v11;
  if (v14)
  {
    *a1 = v14;
    unint64_t v15 = *v7;
  }
  sub_1000619B8(a1[1], v15);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v12;
}

void sub_10026B51C()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10026B594()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_10026B60C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (*a2 == a2[1])
  {
    uint64_t v7 = a1 + 48;
    sub_1001F3950(v7, a3, 0.0);
  }
  else
  {
    sub_1002751CC(a2, (uint64_t)v10);
    sub_100273414((uint64_t *)(a1 + 8), (uint64_t)v9);
    sub_100275308(v9, v10, (uint64_t)v8);
    double v5 = sub_100273560((uint64_t)v9);
    double v6 = v5 - sub_100273560((uint64_t)v8);
    if (v6 > 0.0)
    {
      sub_1000AE4B0(__p, "");
      sub_10026BE34("b / (a + b)   cannot be greater than 1.0 if a>0 and b>0", &v14);
      sub_10016A2C4((uint64_t)__p, (uint64_t)&v14, 1);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      sub_1000D11E0((uint64_t)&v11);
    }
    sub_1001F3950(a1 + 48, a3, v6);
    sub_100273560(a1 + 32);
  }
}

void sub_10026B808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_10026B854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= a2)
  {
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      return *(double *)(a1 + 136);
    }
    else {
      return 1.0 - exp((double)(a3 - a2) / -250000000.0 * *(double *)(a1 + 128));
    }
  }
  else
  {
    if (qword_10047BED8 != -1) {
      dispatch_once(&qword_10047BED8, &stru_100462F20);
    }
    double v5 = qword_10047BEE0;
    double v6 = 0.0;
    if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 134218240;
      uint64_t v9 = a2;
      __int16 v10 = 2048;
      uint64_t v11 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Out-of-order suggestTransition. Expected: %lld <= %lld.", (uint8_t *)&v8, 0x16u);
    }
  }
  return v6;
}

void sub_10026B9B8(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, double a5@<D0>)
{
  double v13 = a5;
  int v8 = (double *)(a1 + 32);
  sub_100273560(a1 + 32);
  uint64_t v9 = operator new(0x1C0uLL);
  v9[1] = 0;
  double v9[2] = 0;
  *uint64_t v9 = off_100462F50;
  __int16 v10 = (double *)(v9 + 3);
  sub_10026BF04((uint64_t)&__p, (uint64_t)(v9 + 3), a2, a3, (uint64_t)v8);
  *a4 = v9 + 3;
  a4[1] = v9;
  if (v13 > 1.0 || v13 < 0.0)
  {
    sub_1000AE4B0(v15, "");
    sub_10026C010("Transition percent must be between 0 and 1; it is actually ", &__p);
    sub_10016452C(&v13, &v18);
    sub_10016A2C4((uint64_t)v15, (uint64_t)&__p, 2);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v18.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_6:
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_7;
        }
LABEL_10:
        operator delete(v15[0]);
LABEL_7:
        sub_10014B3FC((uint64_t)&v14);
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  double v11 = log(v13);
  sub_1002753A8(v10, v11);
  double v12 = log(1.0 - v13);
  sub_1002753A8(v8, v12);
  sub_100273560((uint64_t)v8);
  sub_100273560((uint64_t)v10);
}

void sub_10026BCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1000BA884(v27);
    _Unwind_Resume(a1);
  }
  sub_1000BA884(v27);
  _Unwind_Resume(a1);
}

void sub_10026BDCC(uint64_t a1)
{
  sub_10024A8F8(a1);

  operator delete();
}

void sub_10026BE04(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

std::string *sub_10026BE34@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10026BE68(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10026BE84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100462F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10026BEA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100462F50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10026BEF8(uint64_t a1)
{
  return sub_1002FFC70(a1 + 24);
}

void sub_10026BF04(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  long long v8 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_1002586BC((uint64_t)v9, a4);
  sub_1002FFC6C(a2, &v8, v9, a5);
  sub_1002583D8((uint64_t)v9);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (*((void *)&v8 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_10026BFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10026BFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *sub_10026C010@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10026C044(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10026C060()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10026C0D8()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_10026C150(double *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, double *a4@<X3>, uint64_t *a5@<X8>)
{
  long long v118 = 0u;
  long long v119 = 0u;
  int v120 = 1065353216;
  uint64_t v6 = *a2;
  if (a2[1] == *a2)
  {
    a5[1] = 0;
    *a5 = 0;
    a5[2] = 0;
    uint64_t v31 = v119;
    if ((void)v119) {
      goto LABEL_35;
    }
    goto LABEL_125;
  }
  unint64_t v7 = 0;
  do
  {
    __p[0] = *(void **)(v6 + 80 * v7 + 56);
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    double v11 = sub_10026F6F8((uint64_t)&v118, (uint64_t *)__p, (uint64_t)&unk_1003FAE80, &v107);
    double v13 = (char *)v11[4];
    unint64_t v12 = v11[5];
    if ((unint64_t)v13 < v12)
    {
      *(void *)double v13 = v7;
      uint64_t v8 = (uint64_t)(v13 + 8);
      goto LABEL_4;
    }
    std::string v14 = (char *)v11[3];
    uint64_t v15 = (v13 - v14) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_1000A9108();
    }
    uint64_t v17 = v12 - (void)v14;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_1000A6A10();
      }
      unint64_t v19 = operator new(8 * v18);
      uint64_t v20 = (unint64_t *)&v19[8 * v15];
      *uint64_t v20 = v7;
      uint64_t v8 = (uint64_t)(v20 + 1);
      if (v13 == v14) {
        goto LABEL_23;
      }
LABEL_17:
      unint64_t v21 = v13 - 8 - v14;
      if (v21 < 0x58) {
        goto LABEL_142;
      }
      if ((unint64_t)(v14 - v19) < 0x20) {
        goto LABEL_142;
      }
      uint64_t v22 = (v21 >> 3) + 1;
      uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v24 = &v13[-v23];
      uint64_t v20 = (unint64_t *)((char *)v20 - v23);
      uint64_t v25 = &v19[8 * v15 - 16];
      long long v26 = v13 - 16;
      uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *uint64_t v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 4;
      }
      while (v27);
      double v13 = v24;
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_142:
        do
        {
          unint64_t v29 = *((void *)v13 - 1);
          v13 -= 8;
          *--uint64_t v20 = v29;
        }
        while (v13 != v14);
      }
      goto LABEL_23;
    }
    unint64_t v19 = 0;
    uint64_t v20 = (unint64_t *)(8 * v15);
    *(void *)(8 * v15) = v7;
    uint64_t v8 = 8 * v15 + 8;
    if (v13 != v14) {
      goto LABEL_17;
    }
LABEL_23:
    void v11[3] = v20;
    double v11[4] = v8;
    void v11[5] = &v19[8 * v18];
    if (v14) {
      operator delete(v14);
    }
LABEL_4:
    double v11[4] = v8;
    ++v7;
    uint64_t v6 = *a2;
    uint64_t v9 = a2[1];
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - *a2) >> 4);
  }
  while (v7 < v10);
  a5[1] = 0;
  *a5 = 0;
  a5[2] = 0;
  if (v9 != v6)
  {
    if (v10 >> 61) {
      sub_1000A9108();
    }
    long long v30 = (char *)operator new(8 * v10);
    *a5 = (uint64_t)v30;
    a5[2] = (uint64_t)&v30[8 * v10];
    bzero(v30, 8 * v10);
    a5[1] = (uint64_t)&v30[8 * v10];
  }
  uint64_t v31 = v119;
  if (!(void)v119) {
    goto LABEL_125;
  }
LABEL_35:
  while (2)
  {
    uint64_t v33 = (*(uint64_t (**)(void))(**(void **)(v31 + 16) + 40))(*(void *)(v31 + 16));
    if (!*(void *)v33)
    {
      __cxa_allocate_exception(0x40uLL);
      sub_1000AE4B0(&v107, "As of <rdar://problem/16461123> this is no longer possible");
      std::runtime_error::runtime_error((std::runtime_error *)__p, &v107);
      __p[0] = &off_100453860;
      sub_10018E868((uint64_t)v117);
      sub_1000D1698((std::runtime_error *)__p, (uint64_t)"std::vector<double> WifiMapLikelihood::measurementLogLikelihood(const std::vector<Particle> &, const WifiMapLikelihood::PriorProbabilities &, const WifiLikelihoodMeasurementEvent &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/wifi_map_likelihood.cpp", 66, (uint64_t)v117);
    }
    (*(void (**)(char **__return_ptr))(**(void **)v33 + 48))(&v115);
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)uint64_t v113 = 0u;
    int v114 = 1065353216;
    int v34 = *(uint64_t **)(v31 + 24);
    int v100 = (uint64_t *)v31;
    int v105 = *(uint64_t **)(v31 + 32);
    if (v34 == v105)
    {
LABEL_68:
      sub_10026FA64((int)__p, 0);
      int v60 = __p[0];
      __p[0] = 0;
      int v61 = v100;
      if (!v60) {
        goto LABEL_70;
      }
      goto LABEL_69;
    }
    int v106 = (void *)v33;
    while (2)
    {
      uint64_t v35 = *v34;
      uint64_t v36 = *a2;
      os_log_type_t v109 = off_10045DA98;
      long long v110 = 0uLL;
      v111 &= 0xFCu;
      long long v110 = *(_OWORD *)(v36 + 80 * v35 + 16);
      (*(void (**)(std::string *__return_ptr))(**(void **)v33 + 16))(&v107);
      v121 = &v107;
      int v37 = sub_10026FB58((uint64_t)__p, (uint64_t)&v107, (uint64_t)&unk_1003FAE80, (void **)&v121);
      long long v39 = (char *)*((void *)v37 + 10);
      unint64_t v38 = *((void *)v37 + 11);
      if ((unint64_t)v39 < v38)
      {
        *(void *)long long v39 = v35;
        uint64_t v40 = (uint64_t)(v39 + 8);
        goto LABEL_60;
      }
      double v41 = (char *)*((void *)v37 + 9);
      uint64_t v42 = (v39 - v41) >> 3;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 61) {
        sub_1000A9108();
      }
      uint64_t v44 = v38 - (void)v41;
      if (v44 >> 2 > v43) {
        unint64_t v43 = v44 >> 2;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v43;
      }
      if (v45)
      {
        if (v45 >> 61) {
          sub_1000A6A10();
        }
        unint64_t v46 = operator new(8 * v45);
        char v47 = &v46[8 * v42];
        *char v47 = v35;
        uint64_t v40 = (uint64_t)(v47 + 1);
        if (v39 == v41) {
          goto LABEL_58;
        }
LABEL_52:
        unint64_t v48 = v39 - 8 - v41;
        if (v48 < 0x58) {
          goto LABEL_143;
        }
        if ((unint64_t)(v41 - v46) < 0x20) {
          goto LABEL_143;
        }
        uint64_t v49 = (v48 >> 3) + 1;
        uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        int v51 = &v39[-v50];
        char v47 = (void *)((char *)v47 - v50);
        long long v52 = &v46[8 * v42 - 16];
        int v53 = v39 - 16;
        uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v55 = *(_OWORD *)v53;
          *(v52 - 1) = *((_OWORD *)v53 - 1);
          *long long v52 = v55;
          v52 -= 2;
          v53 -= 32;
          v54 -= 4;
        }
        while (v54);
        long long v39 = v51;
        if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_143:
          do
          {
            uint64_t v56 = *((void *)v39 - 1);
            v39 -= 8;
            *--char v47 = v56;
          }
          while (v39 != v41);
        }
      }
      else
      {
        unint64_t v46 = 0;
        char v47 = (void *)(8 * v42);
        *(void *)(8 * v42) = v35;
        uint64_t v40 = 8 * v42 + 8;
        if (v39 != v41) {
          goto LABEL_52;
        }
      }
LABEL_58:
      *((void *)v37 + 9) = v47;
      *((void *)v37 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v40;
      *((void *)v37 + 11) = &v46[8 * v45];
      if (v41) {
        operator delete(v41);
      }
LABEL_60:
      uint64_t v33 = (uint64_t)v106;
      *((void *)v37 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v40;
      BOOL v57 = v108;
      if (v108 && !atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
        std::string::size_type size = (std::__shared_weak_count *)v107.__r_.__value_.__l.__size_;
        if (v107.__r_.__value_.__l.__size_) {
          goto LABEL_63;
        }
      }
      else
      {
        std::string::size_type size = (std::__shared_weak_count *)v107.__r_.__value_.__l.__size_;
        if (v107.__r_.__value_.__l.__size_)
        {
LABEL_63:
          if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
      nullsub_17(&v109);
      if (++v34 != v105) {
        continue;
      }
      break;
    }
    uint64_t v59 = v113[0];
    if (!v113[0]) {
      goto LABEL_68;
    }
    while (2)
    {
      memset(&v107, 0, sizeof(v107));
      size_t v65 = (char *)*((void *)v59 + 9);
      uint64_t v66 = (char *)*((void *)v59 + 10);
      uint64_t v67 = v66 - v65;
      if (v66 == v65)
      {
        uint64_t v68 = 0;
      }
      else
      {
        if (v67 < 0) {
          sub_1000A9108();
        }
        uint64_t v68 = (char *)operator new(v66 - v65);
        v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
        v107.__r_.__value_.__l.__size_ = (std::string::size_type)v68;
        v107.__r_.__value_.__r.__words[2] = (std::string::size_type)&v68[8 * (v67 >> 3)];
        size_t v65 = (char *)*((void *)v59 + 9);
        uint64_t v66 = (char *)*((void *)v59 + 10);
      }
      while (2)
      {
        if (v65 != v66)
        {
          unint64_t v70 = (void *)(*a2 + 80 * *(void *)v65 + 40);
          if ((unint64_t)v68 < v107.__r_.__value_.__r.__words[2])
          {
            *(void *)uint64_t v68 = *v70;
            std::string::size_type v69 = (std::string::size_type)(v68 + 8);
          }
          else
          {
            char v71 = (char *)v107.__r_.__value_.__r.__words[0];
            uint64_t v72 = &v68[-v107.__r_.__value_.__r.__words[0]];
            uint64_t v73 = (uint64_t)&v68[-v107.__r_.__value_.__r.__words[0]] >> 3;
            unint64_t v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 61) {
              sub_1000A9108();
            }
            int64_t v75 = v107.__r_.__value_.__r.__words[2] - v107.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v107.__r_.__value_.__r.__words[2] - v107.__r_.__value_.__r.__words[0]) >> 2 > v74) {
              unint64_t v74 = v75 >> 2;
            }
            if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v76 = v74;
            }
            if (v76)
            {
              if (v76 >> 61) {
                sub_1000A6A10();
              }
              double v77 = operator new(8 * v76);
              double v78 = &v77[8 * v73];
              void *v78 = *v70;
              std::string::size_type v69 = (std::string::size_type)(v78 + 1);
              if (v68 == v71) {
                goto LABEL_100;
              }
            }
            else
            {
              double v77 = 0;
              double v78 = (void *)(8 * v73);
              *(void *)(8 * v73) = *v70;
              std::string::size_type v69 = 8 * v73 + 8;
              if (v68 == v71) {
                goto LABEL_100;
              }
            }
            unint64_t v79 = v68 - 8 - v71;
            if (v79 >= 0x168)
            {
              if (&v72[(void)v77 - 8 - (v79 & 0xFFFFFFFFFFFFFFF8)] > &v72[(void)v77 - 8])
              {
                uint64_t v80 = v68;
              }
              else if (&v68[-(v79 & 0xFFFFFFFFFFFFFFF8) - 8] > v68 - 8)
              {
                uint64_t v80 = v68;
              }
              else if ((unint64_t)(v68 - v77 - (void)v72) >= 0x20)
              {
                uint64_t v82 = (v79 >> 3) + 1;
                uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v80 = &v68[-v83];
                double v78 = (void *)((char *)v78 - v83);
                uint64_t v84 = &v77[8 * v73 - 16];
                BOOL v85 = v68 - 16;
                uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v87 = *(_OWORD *)v85;
                  *(v84 - 1) = *((_OWORD *)v85 - 1);
                  *uint64_t v84 = v87;
                  v84 -= 2;
                  v85 -= 32;
                  v86 -= 4;
                }
                while (v86);
                if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_100;
                }
              }
              else
              {
                uint64_t v80 = v68;
              }
            }
            else
            {
              uint64_t v80 = v68;
            }
            do
            {
              uint64_t v81 = *((void *)v80 - 1);
              v80 -= 8;
              *--double v78 = v81;
            }
            while (v80 != v71);
LABEL_100:
            v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
            v107.__r_.__value_.__l.__size_ = v69;
            v107.__r_.__value_.__r.__words[2] = (std::string::size_type)&v77[8 * v76];
            if (v71) {
              operator delete(v71);
            }
          }
          v107.__r_.__value_.__l.__size_ = v69;
          v65 += 8;
          uint64_t v68 = (char *)v69;
          continue;
        }
        break;
      }
      sub_10026CD98(a1, v106, (double *)v59 + 2, (uint64_t *)&v107, a3, a4, (uint64_t)&v115, (uint64_t)&v109);
      long long v88 = v109;
      if ((uint64_t (**)())v110 == v109)
      {
        if (v109) {
          goto LABEL_119;
        }
      }
      else
      {
        unint64_t v89 = (uint64_t)(v110 - (void)v109) >> 3;
        char v90 = (uint64_t *)*((void *)v59 + 9);
        uint64_t v91 = *a5;
        if (v89 <= 1) {
          unint64_t v89 = 1;
        }
        uint64_t v92 = v109;
        do
        {
          uint64_t v93 = (uint64_t)*v92++;
          uint64_t v94 = v93;
          uint64_t v95 = *v90++;
          *(void *)(v91 + 8 * v95) = v94;
          --v89;
        }
        while (v89);
LABEL_119:
        *(void *)&long long v110 = v88;
        operator delete(v88);
      }
      if (v107.__r_.__value_.__r.__words[0])
      {
        v107.__r_.__value_.__l.__size_ = v107.__r_.__value_.__r.__words[0];
        operator delete(v107.__r_.__value_.__l.__data_);
      }
      uint64_t v59 = *(void **)v59;
      if (v59) {
        continue;
      }
      break;
    }
    sub_10026FA64((int)__p, (void *)v113[0]);
    int v60 = __p[0];
    __p[0] = 0;
    int v61 = v100;
    if (v60) {
LABEL_69:
    }
      operator delete(v60);
LABEL_70:
    uint64_t v62 = v115;
    if (v115)
    {
      uint64_t v63 = v116;
      std::ios_base v32 = v115;
      if (v116 != v115)
      {
        do
        {
          __double2 v64 = (std::__shared_weak_count *)*((void *)v63 - 1);
          if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          v63 -= 16;
        }
        while (v63 != v62);
        std::ios_base v32 = v115;
      }
      uint64_t v116 = v62;
      operator delete(v32);
    }
    uint64_t v31 = *v61;
    if (v31) {
      continue;
    }
    break;
  }
  uint64_t v96 = (void *)v119;
  if ((void)v119)
  {
    do
    {
      unint64_t v98 = (void *)*v96;
      unint64_t v99 = (void *)v96[3];
      if (v99)
      {
        v96[4] = v99;
        operator delete(v99);
      }
      operator delete(v96);
      uint64_t v96 = v98;
    }
    while (v98);
  }
LABEL_125:
  uint64_t v97 = (void *)v118;
  *(void *)&long long v118 = 0;
  if (v97) {
    operator delete(v97);
  }
}

void sub_10026CB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,std::runtime_error a34,void *a35)
{
  int v37 = *a12;
  if (*a12)
  {
    *a10 = v37;
    operator delete(v37);
  }
  unint64_t v38 = *(void **)(v35 - 144);
  if (v38)
  {
    do
    {
      uint64_t v40 = (void *)*v38;
      double v41 = (void *)v38[3];
      if (v41)
      {
        v38[4] = v41;
        operator delete(v41);
      }
      operator delete(v38);
      unint64_t v38 = v40;
    }
    while (v40);
  }
  long long v39 = *(void **)(v35 - 160);
  *(void *)(v35 - 16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  if (v39) {
    operator delete(v39);
  }
  _Unwind_Resume(exception_object);
}

void sub_10026CD98(double *a1@<X0>, void *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, double *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  if (!*a2)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v24, "As of <rdar://problem/16461123> this is no longer possible");
    std::runtime_error::runtime_error(&v23, &v24);
    v23.__vftable = (std::runtime_error_vtbl *)&off_100453860;
    sub_10018E868((uint64_t)v22);
    sub_1000D1698(&v23, (uint64_t)"std::vector<double> WifiMapLikelihood::measurementLogLikelihood(const shared_ptr<JointWifiSignalSnapshot> &, const HybridCellIndex &, const std::vector<double> &, const WifiMapLikelihood::PriorProbabilities &, const WifiLikelihoodMeasurementEvent &, const std::vector<std::shared_ptr<SingleApRadioMap>> &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/wifi_map_likelihood.cpp", 109, (uint64_t)v22);
  }
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 40))(*a2))
  {
    uint64_t v17 = *a4;
    uint64_t v16 = a4[1];
    *(void *)(a8 + 8) = 0;
    *(void *)(a8 + 16) = 0;
    *(void *)a8 = 0;
    uint64_t v18 = v16 - v17;
    if (v16 != v17)
    {
      if (v18 < 0) {
        sub_1000A9108();
      }
      unint64_t v19 = (char *)operator new(v16 - v17);
      *(void *)a8 = v19;
      uint64_t v20 = &v19[8 * (v18 >> 3)];
      *(void *)(a8 + 16) = v20;
      bzero(v19, v18 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(a8 + 8) = v20;
    }
  }
  else if ((*(unsigned int (**)(void))(*(void *)*a2 + 72))() == 2)
  {
    sub_100317264((uint64_t)&v24, a7, a3);
    sub_10026D27C(a1, a6, &v24, a5, a4, (float64x2_t **)a8);
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1004669F0;
    unint64_t v21 = v28;
    if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    sub_1001E35C0(v27);
  }
  else
  {
    sub_10031714C((uint64_t)&v24, a7, (uint64_t)a3);
    sub_10026D27C(a1, a6, &v24, a5, a4, (float64x2_t **)a8);
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1004669C8;
    if (v25) {
      nullsub_98(&v26);
    }
  }
}

void sub_10026D0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::runtime_error a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a13);
  if (a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

double sub_10026D1AC(double *a1, void *a2, double *a3, void *a4, double *a5, uint64_t a6, double a7)
{
  std::string v14 = (double *)operator new(8uLL);
  *std::string v14 = a7;
  v17[1] = (uint64_t)(v14 + 1);
  v17[2] = (uint64_t)(v14 + 1);
  v17[0] = (uint64_t)v14;
  sub_10026CD98(a1, a2, a3, v17, a4, a5, a6, (uint64_t)__p);
  double v15 = *(double *)__p[0];
  __p[1] = __p[0];
  operator delete(__p[0]);
  operator delete(v14);
  return v15;
}

void sub_10026D268(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10026D27C@<X0>(double *a1@<X0>, double *a2@<X1>, void **a3@<X2>, void *a4@<X3>, uint64_t *a5@<X4>, float64x2_t **a6@<X8>)
{
  v61[1] = 0;
  double v62 = 0.0;
  v61[0] = off_10045DC88;
  char v63 = 0;
  uint64_t v13 = *a5;
  uint64_t v12 = a5[1];
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  int64_t v14 = v12 - v13;
  if (v12 == v13)
  {
    double v15 = 0;
  }
  else
  {
    if (v14 < 0) {
      sub_1000A9108();
    }
    double v15 = (float64x2_t *)operator new(v12 - v13);
    *a6 = v15;
    a6[2] = (float64x2_t *)((char *)v15 + 8 * (v14 >> 3));
    bzero(v15, v14);
    a6[1] = (float64x2_t *)((char *)v15 + v14);
  }
  unint64_t v60 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4);
  uint64_t v16 = sub_1003170F8((uint64_t)a3);
  uint64_t v59 = v16;
  if (v60 != v16)
  {
    sub_1000AE4B0(&v65, "");
    sub_10015F140("Mismatch between number of scans ", &__p);
    sub_1001F3080(&v60, &v68);
    sub_1002700A4(" and number of map cells ", &v69);
    sub_1001F3080(&v59, &v70);
    sub_10016A2C4((uint64_t)&v65, (uint64_t)&__p, 4);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v70.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_54:
        if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_65;
      }
    }
    else if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_54;
    }
    operator delete(v69.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_56;
      }
      goto LABEL_66;
    }
LABEL_65:
    operator delete(v68.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_56:
      if ((v66 & 0x80000000) == 0) {
        goto LABEL_57;
      }
LABEL_67:
      operator delete(v65.__vftable);
LABEL_57:
      sub_1000D11E0((uint64_t)v64);
    }
LABEL_66:
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v66 & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_67;
  }
  if (v16)
  {
    unint64_t v17 = 0;
    BOOL v57 = a1;
    do
    {
      if (a2[7] * *(double *)(*((void *)a2 + 3) + 8 * v17) != 0.0)
      {
        double v18 = *a2;
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4) <= v17) {
          sub_1001F352C();
        }
        double v58 = a2[7] * *(double *)(*((void *)a2 + 3) + 8 * v17);
        unint64_t v19 = *(void *)&v18 + 208 * v17;
        int v22 = *(_DWORD *)(v19 + 32);
        unint64_t v21 = (int *)(v19 + 32);
        int v20 = v22;
        if (v22 == v22 >> 31)
        {
          double v23 = *(double *)(*(void *)&v18 + 208 * v17 + 72);
        }
        else
        {
          unint64_t v24 = *(void *)&v18 + 208 * v17;
          unint64_t v27 = *(void *)(v24 + 40);
          unint64_t v25 = v24 + 40;
          unint64_t v26 = v27;
          if (v20 >= 0) {
            unint64_t v28 = v25;
          }
          else {
            unint64_t v28 = v26;
          }
          double v23 = (double)*(int *)(v28 + 92);
        }
        if (sub_100233D08(v23))
        {
          sub_1000AE4B0(&v65, "");
          sub_100231068("Bad scans must have been deweighted already!!!!", &__p);
          sub_10016A2C4((uint64_t)&v65, (uint64_t)&__p, 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v66 < 0) {
            operator delete(v65.__vftable);
          }
          sub_10014B3FC((uint64_t)v64);
        }
        double v29 = *(double *)(*a4 + 8 * v17);
        double v30 = *a1;
        sub_100076484((uint64_t)v61, NAN);
        sub_10007647C((uint64_t)v61, NAN);
        double v31 = v29 * v30;
        if (sub_10031710C(a3, v17))
        {
          if (v62 <= 0.0)
          {
            sub_1000AE4B0(&__p, "");
            sub_10016A2C4((uint64_t)&__p, 0, 0);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            sub_1000D11E0((uint64_t)&v65);
          }
          if (v62 > 1.0 && v62 < 1.00000001) {
            double v62 = 1.0;
          }
          uint64_t v32 = *a5;
          if (a5[1] != *a5)
          {
            uint64_t v33 = a3;
            int v34 = a4;
            unint64_t v35 = 0;
            unint64_t v36 = *(void *)&v18 + 208 * v17;
            int v37 = (void *)(v36 + 40);
            unint64_t v38 = (double *)(v36 + 72);
            do
            {
              int v39 = *v21;
              if (v39 == v39 >> 31)
              {
                double v40 = *v38;
              }
              else
              {
                if (v39 >= 0) {
                  double v41 = v37;
                }
                else {
                  double v41 = (void *)*v37;
                }
                double v40 = (double)*((int *)v41 + 23);
              }
              v15->f64[v35] = v15->f64[v35] + v58 * sub_10026DF60((uint64_t)v61, v40 + *(double *)(v32 + 8 * v35), v31);
              ++v35;
              uint64_t v32 = *a5;
            }
            while (v35 < (a5[1] - *a5) >> 3);
            a4 = v34;
            a3 = v33;
            a1 = v57;
          }
          goto LABEL_8;
        }
        uint64_t v42 = a5[1] - *a5;
        if (v42)
        {
          unint64_t v43 = v42 >> 3;
          double v44 = log(v31);
          if (v43 <= 1) {
            unint64_t v45 = 1;
          }
          else {
            unint64_t v45 = v43;
          }
          if (v45 >= 4)
          {
            unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFFCLL;
            float64x2_t v47 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v58, 0);
            float64x2_t v48 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v44, 0);
            uint64_t v49 = v15 + 1;
            unint64_t v50 = v45 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              float64x2_t v51 = vmlaq_f64(*v49, v48, v47);
              v49[-1] = vmlaq_f64(v49[-1], v48, v47);
              *uint64_t v49 = v51;
              v49 += 2;
              v50 -= 4;
            }
            while (v50);
            if (v45 == v46) {
              goto LABEL_8;
            }
          }
          else
          {
            unint64_t v46 = 0;
          }
          do
          {
            v15->f64[v46] = v15->f64[v46] + v58 * v44;
            ++v46;
          }
          while (v45 != v46);
        }
      }
LABEL_8:
      ++v17;
    }
    while (v17 < v60);
  }
  uint64_t v52 = a5[1];
  uint64_t v53 = v52 - *a5;
  if (v52 != *a5)
  {
    uint64_t v54 = 0;
    unint64_t v55 = v53 >> 3;
    if (v55 <= 1) {
      unint64_t v55 = 1;
    }
    do
      ++v54;
    while (v55 != v54);
  }
  return nullsub_98(v61);
}

void sub_10026D8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,std::runtime_error a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v39)
  {
    *(void *)(a9 + 8) = v39;
    operator delete(v39);
  }
  nullsub_98(&a19);
  _Unwind_Resume(a1);
}

void *sub_10026DA10(void *a1)
{
  *a1 = off_1004669F0;
  long long v2 = (std::__shared_weak_count *)a1[23];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    sub_1001E35C0(a1 + 10);
    return a1;
  }
  else
  {
    sub_1001E35C0(a1 + 10);
    return a1;
  }
}

double sub_10026DAB8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  double v4 = 0.0;
  if (*a2 != v3)
  {
    uint64_t v7 = *(void *)(a3 + 8);
    unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *(void *)a3) >> 4);
    if (v8 != (v3 - *a2) >> 3)
    {
      sub_1000AE4B0(v17, "");
      sub_100270004("Each measurement must have a prior probability, otherwise OffMap, injection, and Yield/NoYield won't work!", &v19);
      sub_10016A2C4((uint64_t)v17, (uint64_t)&v19, 1);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      sub_10014B3FC((uint64_t)&v16);
    }
    if (v7 != *(void *)a3)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      if (v8 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *(void *)a3) >> 4);
      }
      do
      {
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4) <= v10) {
          sub_1001F352C();
        }
        double v12 = *(double *)(a3 + 56) * *(double *)(*(void *)(a3 + 24) + 8 * v10);
        sub_1001EF930((int *)(*(void *)a3 + v9), (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        __p[0] = 0;
        __p[0] = *(void **)(*a2 + 8 * v10);
        double v4 = v4 + v12 * log(*(long double *)__p);
        ++v10;
        v9 += 208;
      }
      while (v11 != v10);
    }
  }
  return v4;
}

void sub_10026DE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_10026DF60(uint64_t a1, double a2, double a3)
{
  double v3 = *(double *)(a1 + 16);
  if (v3 < 0.0 || v3 > 1.0)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    sub_10014B3FC((uint64_t)v8);
  }
  long double v5 = (1.0 - v3) * a3 + v3 * sub_100275A90(*(double *)(a1 + 8), a2);
  if (v5 < 0.0 || v5 > 1.0)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v8);
  }

  return log(v5);
}

void sub_10026E1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10026E208(uint64_t *a1@<X0>, uint64_t *a2@<X1>, double **a3@<X8>)
{
  if (*(_DWORD *)(a1[1] + 28)) {
    sub_10026E420(a1[2], a2, a3);
  }
  else {
    sub_10026E22C(*a1, (uint64_t **)a2, a3);
  }
}

void sub_10026E22C(uint64_t a1@<X0>, uint64_t **a2@<X1>, void *a3@<X8>)
{
  sub_100299AA4((uint64_t)&v31);
  sub_100299D8C((uint64_t)&v31, a1);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    int8x16_t v8 = v32;
    uint64_t v9 = v6 + 5;
    do
    {
      int v15 = *((_DWORD *)v9 - 2);
      if (v15 == v15 >> 31)
      {
        double v11 = *((double *)v9 + 4);
      }
      else
      {
        if (v15 >= 0) {
          char v10 = v9;
        }
        else {
          char v10 = (uint64_t *)*v9;
        }
        double v11 = (double)*((int *)v10 + 23);
      }
      v9 += 26;
      int8x16_t v12 = (int8x16_t)vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11, 0), (float64x2_t)xmmword_1003F8AB0);
      *(void *)&v13.f64[0] = v12.i64[0];
      *(void *)&v13.f64[1] = v8.i64[1];
      *(void *)&v14.f64[0] = v8.i64[0];
      *(void *)&v14.f64[1] = v12.i64[1];
      int8x16_t v8 = vbslq_s8((int8x16_t)vcgtq_f64(v14, v13), v12, v8);
    }
    while (v9 - 5 != v7);
    int8x16_t v32 = v8;
  }
  v31 += 0x4EC4EC4EC4EC4EC5 * (((char *)v7 - (char *)v6) >> 4);
  if (sub_100299AB8((uint64_t)&v31) >= 1.0)
  {
    char v18 = a2;
    uint64_t v16 = *a2;
    unint64_t v17 = v18[1];
    double v19 = sub_100299AB8((uint64_t)&v31);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (v17 != v16)
    {
      unint64_t v20 = ((char *)v17 - (char *)v16) / 208;
      if (v20 >> 61) {
        sub_1000A9108();
      }
      double v21 = v19;
      int v22 = (char *)operator new(8 * v20);
      *a3 = v22;
      a3[1] = v22;
      double v23 = (double *)&v22[8 * v20];
      a3[2] = v23;
      unint64_t v24 = (v20 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      unint64_t v25 = (double *)v22;
      double v26 = 1.0 / v21;
      if (v24 < 3) {
        goto LABEL_25;
      }
      unint64_t v27 = v24 + 1;
      unint64_t v25 = (double *)&v22[8 * (v27 & 0x3FFFFFFFFFFFFFFCLL)];
      int64x2_t v28 = vdupq_lane_s64(*(uint64_t *)&v26, 0);
      double v29 = (int64x2_t *)(v22 + 16);
      uint64_t v30 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29[-1] = v28;
        *double v29 = v28;
        v29 += 2;
        v30 -= 4;
      }
      while (v30);
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        do
          *v25++ = v26;
        while (v25 != v23);
      }
      a3[1] = v23;
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_10026E404(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10026E420@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, double **a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  sub_10035905C(a1, (uint64_t)&v88);
  sub_100359058((uint64_t)v78, (uint64_t)&v88);
  unint64_t v8 = (v6 - v7) / 208;
  nullsub_20(&v88);
  if (v6 == v7)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    char v10 = 0;
    uint64_t v11 = 0;
    if (v8 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = (v6 - v7) / 208;
    }
    do
    {
      if (*(double *)(a2[3] + 8 * v11) > 0.0)
      {
        uint64_t v13 = *a2 + v9;
        int v14 = *(_DWORD *)(v13 + 32);
        if (v14 == v14 >> 31)
        {
          double v15 = *(double *)(v13 + 72);
        }
        else
        {
          uint64_t v18 = *(void *)(v13 + 40);
          uint64_t v16 = v13 + 40;
          uint64_t v17 = v18;
          if (v14 < 0) {
            uint64_t v16 = v17;
          }
          double v15 = (double)*(int *)(v16 + 92);
        }
        sub_100359068((uint64_t)v78, v15 + -0.5, v15 + 0.5, 1.0);
        char v10 = 1;
      }
      ++v11;
      v9 += 208;
    }
    while (v12 != v11);
  }
  sub_10035905C((uint64_t)v78, (uint64_t)&v88);
  double v19 = *(double *)&v89.__r_.__value_.__r.__words[2];
  nullsub_20(&v88);
  double v77 = v19;
  if ((v10 & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (v6 != v7)
    {
      if (v8 >> 61) {
        sub_1000A9108();
      }
      int v22 = (double *)operator new(8 * v8);
      *a3 = v22;
      double v23 = &v22[v8];
      a3[2] = v23;
      bzero(v22, 8 * v8);
      a3[1] = v23;
    }
    return nullsub_20(v78);
  }
  double v76 = 0.0;
  if (sub_1003591FC(v4) <= 1.44269504)
  {
    if (sub_1003591FC(v4) <= 0.693147181) {
      double v24 = sub_100359204((uint64_t)v78);
    }
    else {
      double v24 = sub_100359204(v4);
    }
    double v21 = v77 + (v24 - v77) / -0.442695041;
  }
  else
  {
    double v20 = sub_100359204(v4);
    double v21 = v77 - (v20 - v77) / (sub_1003591FC(v4) + -1.0);
  }
  double v76 = v21;
  if ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    sub_1000AE4B0(v86, "");
    sub_1001747D4("allDbmMin must be a well-behaved number.", &v88);
    sub_10016A2C4((uint64_t)v86, (uint64_t)&v88, 1);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    sub_1000D11E0((uint64_t)__p);
  }
  double v74 = 0.0;
  double v75 = 0.0;
  if (sub_1003591FC(v4) <= 0.693147181)
  {
    double v74 = 0.693147181;
    double v26 = sub_100359204((uint64_t)v78) * 0.693147181;
  }
  else
  {
    double v74 = sub_1003591FC(v4);
    double v25 = sub_100359204(v4);
    double v26 = v25 * sub_1003591FC(v4);
  }
  double v75 = v26;
  double v73 = v26 - v74 * v76;
  if (v73 < 0.0)
  {
    sub_1000AE4B0(v86, "");
    sub_10015F140("lambda_floored is always positive", &v88);
    sub_10016452C(&v73, &v89);
    sub_10026F658(" ", &v90);
    sub_10016452C(&v75, &v91);
    sub_10026F658(" ", &v92);
    sub_10016452C(&v74, &v93);
    sub_10026F658(" ", &v94);
    sub_10016452C(&v76, &v95);
    sub_10016A2C4((uint64_t)v86, (uint64_t)&v88, 8);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v95.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_141:
        if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_142;
        }
        goto LABEL_151;
      }
    }
    else if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_141;
    }
    operator delete(v94.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_142:
      if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_143;
      }
      goto LABEL_152;
    }
LABEL_151:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_143:
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_144;
      }
      goto LABEL_153;
    }
LABEL_152:
    operator delete(v92.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_144:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_145;
      }
      goto LABEL_154;
    }
LABEL_153:
    operator delete(v91.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_145:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_146;
      }
      goto LABEL_155;
    }
LABEL_154:
    operator delete(v90.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_146:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_147;
      }
      goto LABEL_156;
    }
LABEL_155:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_147:
      if ((v87 & 0x80000000) == 0) {
        goto LABEL_148;
      }
LABEL_157:
      operator delete(v86[0]);
LABEL_148:
      sub_1000D11E0((uint64_t)__p);
    }
LABEL_156:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((v87 & 0x80000000) == 0) {
      goto LABEL_148;
    }
    goto LABEL_157;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((unint64_t)(v6 - v7 + 207) >= 0x19F)
  {
    if (v8 >> 61) {
      sub_1000A9108();
    }
    unint64_t v27 = (double *)operator new(8 * v8);
    *a3 = v27;
    a3[1] = v27;
    a3[2] = &v27[v8];
  }
  if (v6 != v7)
  {
    uint64_t v28 = 0;
    if (v8 <= 1) {
      uint64_t v29 = 1;
    }
    else {
      uint64_t v29 = (v6 - v7) / 208;
    }
    uint64_t v72 = v4;
    do
    {
      while (1)
      {
        uint64_t v30 = *a2;
        int v31 = *(_DWORD *)(*a2 + 208 * v28 + 32);
        int v32 = v31 >> 31;
        double v33 = 0.0;
        if (*(double *)(a2[3] + 8 * v28) > 0.0)
        {
          uint64_t v34 = v30 + 208 * v28;
          if (v32 == v31)
          {
            double v35 = *(double *)(v34 + 72);
          }
          else
          {
            uint64_t v38 = *(void *)(v34 + 40);
            uint64_t v36 = v34 + 40;
            uint64_t v37 = v38;
            if (v31 < 0) {
              uint64_t v36 = v37;
            }
            double v35 = (double)*(int *)(v36 + 92);
          }
          double v33 = v35 - v76;
        }
        uint64_t v39 = v30 + 208 * v28;
        if (v32 == v31)
        {
          double v40 = *(double *)(v39 + 72);
        }
        else
        {
          uint64_t v43 = *(void *)(v39 + 40);
          uint64_t v41 = v39 + 40;
          uint64_t v42 = v43;
          if (v31 < 0) {
            uint64_t v41 = v42;
          }
          double v40 = (double)*(int *)(v41 + 92);
        }
        double v83 = v40;
        double v82 = sub_1003591FC(v4);
        double v81 = sub_100359204(v4);
        double v80 = sub_100359204((uint64_t)v78);
        if (v33 < 0.0)
        {
          sub_1000AE4B0(v86, "");
          sub_10015F140("There is a bug in your allDbmMin.", &v88);
          sub_10016452C(&v83, &v89);
          sub_10026F658(" ", &v90);
          sub_10016452C(&v76, &v91);
          sub_100270194(" N=", &v92);
          sub_10016452C(&v82, &v93);
          sub_100270194(" a=", &v94);
          sub_10016452C(&v77, &v95);
          sub_10026F6A8(" Rmu=", &v96);
          sub_10016452C(&v81, &v97);
          sub_100164950(" Rmu_=", &v98);
          sub_10016452C(&v80, &v99);
          sub_10016A2C4((uint64_t)v86, (uint64_t)&v88, 12);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v99.__r_.__value_.__l.__data_);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_108;
            }
LABEL_81:
            if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_82;
            }
LABEL_109:
            operator delete(v97.__r_.__value_.__l.__data_);
            if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_110;
            }
LABEL_83:
            if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_84;
            }
LABEL_111:
            operator delete(v95.__r_.__value_.__l.__data_);
            if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_112;
            }
LABEL_85:
            if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_86;
            }
LABEL_113:
            operator delete(v93.__r_.__value_.__l.__data_);
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_114;
            }
LABEL_87:
            if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_88;
            }
LABEL_115:
            operator delete(v91.__r_.__value_.__l.__data_);
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_116;
            }
LABEL_89:
            if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_90;
            }
LABEL_117:
            operator delete(v89.__r_.__value_.__l.__data_);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_118;
            }
LABEL_91:
            if (v87 < 0) {
LABEL_119:
            }
              operator delete(v86[0]);
          }
          else
          {
            if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_81;
            }
LABEL_108:
            operator delete(v98.__r_.__value_.__l.__data_);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_109;
            }
LABEL_82:
            if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_83;
            }
LABEL_110:
            operator delete(v96.__r_.__value_.__l.__data_);
            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_111;
            }
LABEL_84:
            if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_85;
            }
LABEL_112:
            operator delete(v94.__r_.__value_.__l.__data_);
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_113;
            }
LABEL_86:
            if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_87;
            }
LABEL_114:
            operator delete(v92.__r_.__value_.__l.__data_);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_115;
            }
LABEL_88:
            if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_89;
            }
LABEL_116:
            operator delete(v90.__r_.__value_.__l.__data_);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_117;
            }
LABEL_90:
            if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_91;
            }
LABEL_118:
            operator delete(v88.__r_.__value_.__l.__data_);
            if (v87 < 0) {
              goto LABEL_119;
            }
          }
          sub_1000D11E0((uint64_t)__p);
        }
        double v83 = v74;
        double v84 = v73;
        double v82 = v33;
        long double v44 = (v33 + 0.5) / v73 + 1.0;
        long double v45 = 1.0 / (v73 + v33 + -0.5) + 1.0;
        double v80 = v45;
        double v81 = v44;
        double v46 = pow(v44, -v74);
        double v47 = v46 * (pow(v45, v74) + -1.0);
        double v79 = v47;
        if (v47 < 0.0 || v47 > 1.0)
        {
          sub_1000AE4B0(v86, "");
          sub_10026F5B8("Prb must be between 0.0 and 1.0, but was ", &v88);
          sub_10016452C(&v79, &v89);
          sub_10026F608(" (", &v90);
          sub_10016452C(&v83, &v91);
          sub_10026F658(" ", &v92);
          sub_10016452C(&v84, &v93);
          sub_10026F658(" ", &v94);
          sub_10016452C(&v82, &v95);
          sub_10026F6A8(") == ", &v96);
          sub_10016452C(&v81, &v97);
          sub_10026F658(" ", &v98);
          sub_10016452C(&v80, &v99);
          sub_10016A2C4((uint64_t)v86, (uint64_t)&v88, 12);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v99.__r_.__value_.__l.__data_);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_121;
            }
LABEL_95:
            if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_96;
            }
LABEL_122:
            operator delete(v97.__r_.__value_.__l.__data_);
            if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_123;
            }
LABEL_97:
            if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_98;
            }
LABEL_124:
            operator delete(v95.__r_.__value_.__l.__data_);
            if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_125;
            }
LABEL_99:
            if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_100;
            }
LABEL_126:
            operator delete(v93.__r_.__value_.__l.__data_);
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_127;
            }
LABEL_101:
            if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_102;
            }
LABEL_128:
            operator delete(v91.__r_.__value_.__l.__data_);
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_129;
            }
LABEL_103:
            if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_104;
            }
LABEL_130:
            operator delete(v89.__r_.__value_.__l.__data_);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_131;
            }
LABEL_105:
            if (v87 < 0) {
LABEL_132:
            }
              operator delete(v86[0]);
          }
          else
          {
            if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_95;
            }
LABEL_121:
            operator delete(v98.__r_.__value_.__l.__data_);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_122;
            }
LABEL_96:
            if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_97;
            }
LABEL_123:
            operator delete(v96.__r_.__value_.__l.__data_);
            if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_124;
            }
LABEL_98:
            if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_99;
            }
LABEL_125:
            operator delete(v94.__r_.__value_.__l.__data_);
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_126;
            }
LABEL_100:
            if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_101;
            }
LABEL_127:
            operator delete(v92.__r_.__value_.__l.__data_);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_128;
            }
LABEL_102:
            if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_103;
            }
LABEL_129:
            operator delete(v90.__r_.__value_.__l.__data_);
            if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_130;
            }
LABEL_104:
            if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_105;
            }
LABEL_131:
            operator delete(v88.__r_.__value_.__l.__data_);
            if (v87 < 0) {
              goto LABEL_132;
            }
          }
          sub_1000D11E0((uint64_t)__p);
        }
        unint64_t v50 = a3[1];
        unint64_t v49 = (unint64_t)a3[2];
        if ((unint64_t)v50 >= v49) {
          break;
        }
        double *v50 = v47;
        a3[1] = v50 + 1;
        if (++v28 == v29) {
          return nullsub_20(v78);
        }
      }
      uint64_t v51 = v29;
      uint64_t v52 = *a3;
      uint64_t v53 = (char *)v50 - (char *)*a3;
      uint64_t v54 = v53 >> 3;
      unint64_t v55 = (v53 >> 3) + 1;
      if (v55 >> 61) {
        sub_1000A9108();
      }
      uint64_t v56 = v49 - (void)v52;
      if (v56 >> 2 > v55) {
        unint64_t v55 = v56 >> 2;
      }
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57)
      {
        if (v57 >> 61) {
          sub_1000A6A10();
        }
        double v58 = operator new(8 * v57);
        uint64_t v59 = (double *)&v58[8 * v54];
        *uint64_t v59 = v47;
        uint64_t v60 = (uint64_t)(v59 + 1);
        if (v50 == v52)
        {
LABEL_69:
          uint64_t v29 = v51;
          uint64_t v4 = v72;
          goto LABEL_75;
        }
      }
      else
      {
        double v58 = 0;
        uint64_t v59 = (double *)(8 * v54);
        *(double *)(8 * v54) = v47;
        uint64_t v60 = 8 * v54 + 8;
        if (v50 == v52) {
          goto LABEL_69;
        }
      }
      unint64_t v61 = (char *)(v50 - 1) - (char *)v52;
      if (v61 >= 0x58)
      {
        unint64_t v62 = (char *)v50 - &v58[v53];
        uint64_t v29 = v51;
        uint64_t v4 = v72;
        if (v62 >= 0x20)
        {
          uint64_t v63 = (v61 >> 3) + 1;
          uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          std::runtime_error v65 = &v50[v64 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v59 = (double *)((char *)v59 - v64);
          char v66 = &v58[8 * v54 - 16];
          uint64_t v67 = v50 - 2;
          uint64_t v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v69 = *(_OWORD *)v67;
            *(v66 - 1) = *((_OWORD *)v67 - 1);
            *char v66 = v69;
            v66 -= 2;
            v67 -= 4;
            v68 -= 4;
          }
          while (v68);
          unint64_t v50 = v65;
          if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_75;
          }
        }
      }
      else
      {
        uint64_t v29 = v51;
        uint64_t v4 = v72;
      }
      do
      {
        uint64_t v70 = *((void *)v50-- - 1);
        *((void *)v59-- - 1) = v70;
      }
      while (v50 != v52);
LABEL_75:
      *a3 = v59;
      a3[1] = (double *)v60;
      a3[2] = (double *)&v58[8 * v57];
      if (v52) {
        operator delete(v52);
      }
      a3[1] = (double *)v60;
      ++v28;
    }
    while (v28 != v29);
  }
  return nullsub_20(v78);
}

void sub_10026F228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a46 < 0)
  {
    operator delete(__p);
    nullsub_20(&a27);
    _Unwind_Resume(a1);
  }
  nullsub_20(&a27);
  _Unwind_Resume(a1);
}

void sub_10026F40C(uint64_t **a1@<X0>, uint64_t a2@<X8>)
{
  v4.n128_f64[0] = sub_100299AA4(a2);
  long double v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      uint64_t v7 = *v5;
      void v9[3] = *v5;
      unint64_t v8 = (std::__shared_weak_count *)v5[1];
      v9[4] = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (((*(uint64_t (**)(uint64_t, __n128))(*(void *)v7 + 40))(v7, v4) & 1) == 0)
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v7 + 64))(v9, v7);
        sub_100299D8C(a2, (uint64_t)v9);
      }
      if (v8)
      {
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_10026F540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10026F554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_10026F568@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10026F59C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10026F5B8@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10026F5EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10026F608@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10026F63C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10026F658@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10026F68C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10026F6A8@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10026F6DC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10026F6F8(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            int v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          int v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v17 = (void *)(a1 + 16);
  int v14 = operator new(0x30uLL);
  *int v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[3] = 0;
  void v14[4] = 0;
  v14[5] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    double v21 = *(void **)(*(void *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *int v14 = *v21;
LABEL_61:
      *double v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v11) {
LABEL_37:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v20 = *(void *)a1;
        double v21 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v21) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v20 = *(void *)a1;
        double v21 = *(void **)(*(void *)a1 + 8 * v10);
        if (v21) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v29 & v10;
      uint64_t v20 = *(void *)a1;
      double v21 = *(void **)(*(void *)a1 + 8 * (v29 & v10));
      if (v21) {
        goto LABEL_26;
      }
    }
  }
  *int v14 = *v17;
  *uint64_t v17 = v14;
  *(void *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    unint64_t v30 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11) {
        v30 %= v11;
      }
    }
    else
    {
      v30 &= v11 - 1;
    }
    double v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_10026FA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024EFF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10026FA64(int a1, void *__p)
{
  if (__p)
  {
    long long v2 = __p;
    do
    {
      double v3 = v2;
      long long v2 = (void *)*v2;
      unint64_t v4 = (void *)v3[9];
      if (v4)
      {
        v3[10] = v4;
        operator delete(v4);
      }
      long double v5 = (std::__shared_weak_count *)v3[6];
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        uint64_t v6 = (std::__shared_weak_count *)v3[3];
        if (v6)
        {
LABEL_9:
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
      else
      {
        uint64_t v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          goto LABEL_9;
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

char *sub_10026FB58(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *(unsigned int *)(a2 + 16);
  uint64_t v8 = *(int *)(a2 + 20);
  unint64_t v9 = v8 ^ (v7 << 32);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8 ^ (v7 << 32);
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
    uint8x8_t v12 = *(char ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = *((void *)v13 + 1);
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 8) == v7 && *((_DWORD *)v13 + 9) == v8) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v13 = *(char **)v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 8) == v7 && *((_DWORD *)v13 + 9) == v8) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  float v18 = (void *)(a1 + 16);
  float v19 = (char *)operator new(0x60uLL);
  uint64_t v13 = v19;
  *(void *)float v19 = 0;
  *((void *)v19 + 1) = v9;
  uint64_t v20 = *a4;
  *((void *)v19 + 2) = **a4;
  uint64_t v21 = v20[1];
  *((void *)v19 + 3) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v19 + 4) = v20[2];
  *((void *)v19 + 5) = v20[3];
  uint64_t v22 = v20[4];
  *((void *)v19 + 6) = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v19 + 56) = *(_OWORD *)(v20 + 5);
  *((void *)v19 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *((void *)v19 + 11) = 0;
  *((void *)v19 + 9) = 0;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (v10 && (float)(v24 * (float)v10) >= v23)
  {
    uint64_t v25 = *(void *)a1;
    unint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
    if (v26)
    {
LABEL_38:
      *(void *)uint64_t v13 = *v26;
LABEL_73:
      *unint64_t v26 = v13;
      goto LABEL_74;
    }
  }
  else
  {
    BOOL v27 = 1;
    if (v10 >= 3) {
      BOOL v27 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v10);
    unint64_t v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29) {
      size_t prime = v29;
    }
    else {
      size_t prime = v28;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v31) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v31)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v31 < 3uLL || (uint8x8_t v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime < *(void *)&v31) {
LABEL_49:
      }
        sub_10006338C(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v35 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v25 = *(void *)a1;
        unint64_t v26 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v26) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v25 = *(void *)a1;
        unint64_t v26 = *(void **)(*(void *)a1 + 8 * v9);
        if (v26) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      unint64_t v4 = v35 & v9;
      uint64_t v25 = *(void *)a1;
      unint64_t v26 = *(void **)(*(void *)a1 + 8 * (v35 & v9));
      if (v26) {
        goto LABEL_38;
      }
    }
  }
  *(void *)uint64_t v13 = *v18;
  *float v18 = v13;
  *(void *)(v25 + 8 * v4) = v18;
  if (*(void *)v13)
  {
    unint64_t v36 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v36 >= v10) {
        v36 %= v10;
      }
    }
    else
    {
      v36 &= v10 - 1;
    }
    unint64_t v26 = (void *)(*(void *)a1 + 8 * v36);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_10026FEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_10026FEF8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_10026FEF8(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    double v3 = (void *)__p[9];
    if (v3)
    {
      __p[10] = v3;
      operator delete(v3);
    }
    unint64_t v4 = (std::__shared_weak_count *)__p[6];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    long double v5 = (std::__shared_weak_count *)__p[3];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      uint64_t v6 = __p;
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v6 = __p;
LABEL_11:
    operator delete(v6);
    return;
  }
  if (__p) {
    goto LABEL_9;
  }
}

std::string *sub_100270004@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100270038(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100270054@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100270088(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1002700A4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002700D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1002700F4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100270128(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100270144@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100270178(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100270194@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002701C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002701E4()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10027025C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002702D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = a2[1];
  a2[1] = 0;
  uint64_t v6 = (void *)a2[2];
  unint64_t v4 = a2 + 2;
  long double v5 = v6;
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = (void **)(a1 + 16);
  uint64_t v8 = v4[1];
  *(void *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v4 + 4);
  if (v8)
  {
    unint64_t v9 = v5[1];
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        v9 %= v10;
      }
    }
    else
    {
      v9 &= v10 - 1;
    }
    *(void *)(v3 + 8 * v9) = v7;
    void *v4 = 0;
    v4[1] = 0;
    long double v5 = *v7;
  }
  if (v5)
  {
    do
    {
      while (v5[4] != v5[5])
      {
        long double v5 = (void *)*v5;
        if (!v5) {
          return a1;
        }
      }
      uint64_t v11 = (void *)*v5;
      sub_1000A9E44((void *)a1, v5, (uint64_t)&__p);
      uint8x8_t v12 = __p;
      std::string __p = 0;
      if (v12)
      {
        if (v15) {
          sub_1002426B8(v12 + 2);
        }
        operator delete(v12);
      }
      long double v5 = v11;
    }
    while (v11);
  }
  return a1;
}

BOOL sub_1002703D8(void *a1, uint64_t ***a2)
{
  return sub_10006F50C(a1, a2) != 0;
}

void sub_1002703F8(void *a1@<X0>, uint64_t ****a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_OWORD *)unint64_t v30 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v32 = 1065353216;
  unint64_t v4 = *a2;
  long double v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t v7 = sub_10006F50C(a1, v4);
      if (v7)
      {
        uint64_t v8 = (uint64_t)v7[4];
        unint64_t v9 = v7[5];
        while ((const void **)v8 != v9)
        {
          if (!sub_100261668(v30, v8))
          {
            unint64_t v11 = a3[1];
            if (v11 >= a3[2])
            {
              uint64_t v10 = sub_100234354(a3, v8);
            }
            else
            {
              uint8x8_t v12 = (void *)(v11 + 8);
              unint64_t v14 = (void *)(v8 + 8);
              int v13 = *(_DWORD *)v8;
              if (v13 == v13 >> 31)
              {
                *uint8x8_t v12 = *v14;
                int v15 = v13;
              }
              else
              {
                long long v16 = *(_OWORD *)v14;
                *(_DWORD *)(v11 + 24) = *(_DWORD *)(v8 + 24);
                *(_OWORD *)uint8x8_t v12 = v16;
                int v15 = *(_DWORD *)v8;
                int v13 = *(int *)v8 >> 31;
              }
              *(_DWORD *)unint64_t v11 = v15 ^ v13;
              int v17 = *(_DWORD *)(v8 + 32);
              float v18 = (int *)(v8 + 40);
              if (v17 == v17 >> 31)
              {
                float v19 = (void *)(v11 + 48);
                int v20 = *(_DWORD *)(v8 + 40);
                uint64_t v21 = (void *)(v8 + 48);
                if (v20 == v20 >> 31)
                {
                  *float v19 = *v21;
                  int v22 = v20;
                }
                else
                {
                  long long v24 = *(_OWORD *)v21;
                  *(_DWORD *)(v11 + 64) = *(_DWORD *)(v8 + 64);
                  *(_OWORD *)float v19 = v24;
                  int v22 = *v18;
                  int v20 = v22 >> 31;
                }
                *(_DWORD *)(v11 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v22 ^ v20;
                *(void *)(v11 + 72) = *(void *)(v8 + 72);
                *(unsigned char *)(v11 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
                if (*(unsigned char *)(v8 + 80))
                {
                  *(_DWORD *)(v11 + 84) = *(_DWORD *)(v8 + 84);
                  *(unsigned char *)(v11 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
                }
                long long v25 = *(_OWORD *)(v8 + 88);
                long long v26 = *(_OWORD *)(v8 + 104);
                *(_DWORD *)(v11 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(v8 + 120);
                *(_OWORD *)(v11 + 104) = v26;
                *(_OWORD *)(v11 + 88) = v25;
              }
              else
              {
                if (v17 >= 0) {
                  uint64_t v23 = v8 + 40;
                }
                else {
                  uint64_t v23 = *(void *)v18;
                }
                sub_1001AC878(v11 + 40, v23);
              }
              *(_DWORD *)(v11 + 32) = *(_DWORD *)(v8 + 32) ^ (*(int *)(v8 + 32) >> 31);
              uint64_t v10 = v11 + 208;
              a3[1] = v11 + 208;
            }
            a3[1] = v10;
            sub_1000611FC((uint64_t)v30, v8, (int *)v8);
          }
          v8 += 208;
        }
      }
      v4 += 2;
    }
    while (v4 != v5);
    BOOL v27 = __p[0];
    if (__p[0])
    {
      do
      {
        unint64_t v28 = (void *)*v27;
        operator delete(v27);
        BOOL v27 = v28;
      }
      while (v28);
    }
  }
  unint64_t v29 = v30[0];
  v30[0] = 0;
  if (v29) {
    operator delete(v29);
  }
}

void sub_1002705FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100258574((uint64_t)&a9);
  sub_1002329B0(v9);
  _Unwind_Resume(a1);
}

void sub_100270640()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002706B8()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

double sub_100270730@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 160))(&v5);
  uint64_t v3 = v6;
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  a2[2] = v3;
  return result;
}

void sub_100270798(_Unwind_Exception *a1)
{
  sub_1000D8DD8(v1);
  _Unwind_Resume(a1);
}

double sub_1002707AC@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 168))(&v5);
  uint64_t v3 = v6;
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  a2[2] = v3;
  return result;
}

void sub_100270814(_Unwind_Exception *a1)
{
  sub_1000D8DD8(v1);
  _Unwind_Resume(a1);
}

void sub_100270828()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002708A0()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

double sub_100270918(uint64_t a1, uint64_t a2)
{
  sub_100074140((uint64_t)v22, a1);
  double v3 = v25;
  unsigned int v4 = sub_1001E0EE0(a2);
  double v23 = v23 + v3 * (double)v4;
  unsigned int v5 = sub_10031B5EC(a2);
  double v24 = v24 + v3 * (double)v5;
  v15[0] = off_10045DAF8;
  v15[1] = 0;
  v15[2] = off_10045DAD8;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  v15[4] = 0;
  v15[5] = 0;
  v15[3] = off_10045DA98;
  char v16 = 0;
  char v20 = 4;
  char v21 = 0;
  int v6 = sub_10031B604(a2);
  sub_10007664C((uint64_t)v15, v6);
  int v7 = sub_10031B5F8(a2);
  sub_100076644((uint64_t)v15, v7);
  sub_100076610((uint64_t)v15, (uint64_t)v22);
  sub_100073E84((uint64_t)v15, &v13);
  double v8 = sub_100072640(v13);
  double v9 = v8;
  uint64_t v10 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  *(void *)&double v11 = nullsub_19(v15, v8).n128_u64[0];
  nullsub_16(v22, v11);
  return v9;
}

void sub_100270AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  sub_1000BA884((uint64_t)va);
  *(void *)&double v4 = nullsub_19((uint64_t *)va1, v3).n128_u64[0];
  nullsub_16(va2, v4);
  _Unwind_Resume(a1);
}

void sub_100270AF4(_Unwind_Exception *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  *(void *)&double v6 = nullsub_19((uint64_t *)va, a2).n128_u64[0];
  nullsub_16(va1, v6);
  _Unwind_Resume(a1);
}

uint64_t sub_100270B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_100462FB0;
  uint64_t v6 = a1 + 8;
  int v20 = sub_1001E0EE0(a2);
  int v19 = sub_10031B5EC(a2);
  int v17 = sub_10031B5F8(a2);
  int v16 = sub_10031B604(a2);
  sub_1000741D0(&v18, &v17, &v16);
  sub_1002A6200(v6, &v20, &v19, &v18);
  *(double *)(a1 + 24) = sub_100270918(a3, a2);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = sub_10031B610(a2);
  sub_1001F0EC4(a1 + 56, v10);
  uint64_t v11 = sub_10031B634(a2);
  sub_1001F0EC4(a1 + 88, v11);
  *(_DWORD *)(a1 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 72);
  uint64_t v12 = sub_1000D7EFC(a2);
  if (*(char *)(v12 + 23) < 0)
  {
    sub_1000559FC((unsigned char *)(a1 + 128), *(void **)v12, *(void *)(v12 + 8));
    LODWORD(v14) = *(char *)(a1 + 151);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v14 = *(void *)(a1 + 136);
    goto LABEL_6;
  }
  long long v13 = *(_OWORD *)v12;
  *(void *)(a1 + 144) = *(void *)(v12 + 16);
  *(_OWORD *)(a1 + 128) = v13;
  LODWORD(v14) = *(char *)(a1 + 151);
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v14 = v14;
LABEL_6:
  *(void *)(a1 + 152) = v14;
  return a1;
}

uint64_t sub_100270C80(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)double result = off_100462FB0;
  if (*(char *)(result + 151) < 0)
  {
    operator delete(*(void **)(result + 128));
    return v1;
  }
  return result;
}

void sub_100270CE0(uint64_t a1)
{
  *(void *)a1 = off_100462FB0;
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }

  operator delete();
}

BOOL sub_100270D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = sub_1002A6204((_DWORD *)(a1 + 8), a2);
  if (v5 == -1) {
    return 0;
  }
  uint64_t v6 = (void *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    uint64_t v6 = (void *)*v6;
  }
  unsigned int v7 = sub_1002711EC((uint64_t)v6, *(void *)(a1 + 152), *(_DWORD *)(a1 + 120) * v5, *(_DWORD *)(a1 + 120) * v5 + *(_DWORD *)(a1 + 120));
  float v8 = sub_1001F0EF0(a1 + 88, v7 & ~(-1 << *(_DWORD *)(a1 + 104)));
  if (!a3) {
    return v8 > 0.0;
  }
  *(double *)(a3 + 16) = v8;
  if (v8 <= 0.0)
  {
    BOOL result = 0;
    *(void *)(a3 + 8) = 0x7FF4000000000000;
  }
  else
  {
    float v9 = sub_1001F0EF0(a1 + 56, (v7 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
    *(double *)(a3 + 8) = v9;
    return 1;
  }
  return result;
}

BOOL sub_100270E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001E331C(a2, (_DWORD *)(a1 + 8), &v34);
  int v5 = (uint64_t *)(a1 + 128);
  double v6 = *((double *)&v34 + 1);
  double v7 = 0.0;
  if (*((double *)&v34 + 1) == 0.0 || v34 == -1)
  {
    double v8 = 0.0;
    double v9 = 0.0;
  }
  else
  {
    uint64_t v14 = a1 + 128;
    if (*(char *)(a1 + 151) < 0) {
      uint64_t v14 = *v5;
    }
    unsigned int v15 = sub_1002711EC(v14, *(void *)(a1 + 152), *(_DWORD *)(a1 + 120) * (int)v34, *(_DWORD *)(a1 + 120) * (int)v34 + *(_DWORD *)(a1 + 120));
    float v16 = sub_1001F0EF0(a1 + 88, v15 & ~(-1 << *(_DWORD *)(a1 + 104)));
    double v8 = 0.0;
    double v9 = 0.0;
    if (v16 != 0.0)
    {
      float v17 = sub_1001F0EF0(a1 + 56, (v15 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
      double v8 = v6 * v17 + 0.0;
      float v18 = sub_1001F0EF0(a1 + 88, v15 & ~(-1 << *(_DWORD *)(a1 + 104)));
      double v9 = v6 * v18 + 0.0;
      double v7 = v6 + 0.0;
    }
  }
  double v10 = v36;
  if (v36 != 0.0 && v35 != -1)
  {
    uint64_t v19 = a1 + 128;
    if (*(char *)(a1 + 151) < 0) {
      uint64_t v19 = *v5;
    }
    unsigned int v20 = sub_1002711EC(v19, *(void *)(a1 + 152), *(_DWORD *)(a1 + 120) * v35, *(_DWORD *)(a1 + 120) * v35 + *(_DWORD *)(a1 + 120));
    float v21 = sub_1001F0EF0(a1 + 88, v20 & ~(-1 << *(_DWORD *)(a1 + 104)));
    if (v21 != 0.0)
    {
      float v22 = sub_1001F0EF0(a1 + 56, (v20 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
      double v8 = v8 + v10 * v22;
      float v23 = sub_1001F0EF0(a1 + 88, v20 & ~(-1 << *(_DWORD *)(a1 + 104)));
      double v9 = v9 + v10 * v23;
      double v7 = v7 + v10;
    }
  }
  double v11 = v38;
  if (v38 != 0.0 && v37 != -1)
  {
    uint64_t v24 = a1 + 128;
    if (*(char *)(a1 + 151) < 0) {
      uint64_t v24 = *v5;
    }
    unsigned int v25 = sub_1002711EC(v24, *(void *)(a1 + 152), *(_DWORD *)(a1 + 120) * v37, *(_DWORD *)(a1 + 120) * v37 + *(_DWORD *)(a1 + 120));
    float v26 = sub_1001F0EF0(a1 + 88, v25 & ~(-1 << *(_DWORD *)(a1 + 104)));
    if (v26 != 0.0)
    {
      float v27 = sub_1001F0EF0(a1 + 56, (v25 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
      double v8 = v8 + v11 * v27;
      float v28 = sub_1001F0EF0(a1 + 88, v25 & ~(-1 << *(_DWORD *)(a1 + 104)));
      double v9 = v9 + v11 * v28;
      double v7 = v7 + v11;
    }
  }
  double v12 = v40;
  if (v40 != 0.0 && v39 != -1)
  {
    if (*(char *)(a1 + 151) < 0) {
      int v5 = (uint64_t *)*v5;
    }
    unsigned int v29 = sub_1002711EC((uint64_t)v5, *(void *)(a1 + 152), *(_DWORD *)(a1 + 120) * v39, *(_DWORD *)(a1 + 120) * v39 + *(_DWORD *)(a1 + 120));
    float v30 = sub_1001F0EF0(a1 + 88, v29 & ~(-1 << *(_DWORD *)(a1 + 104)));
    if (v30 != 0.0)
    {
      float v31 = sub_1001F0EF0(a1 + 56, (v29 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
      double v8 = v8 + v12 * v31;
      float v32 = sub_1001F0EF0(a1 + 88, v29 & ~(-1 << *(_DWORD *)(a1 + 104)));
      double v9 = v9 + v12 * v32;
      double v7 = v7 + v12;
    }
  }
  if (a3)
  {
    if (v7 <= 0.0)
    {
      *(void *)(a3 + 8) = 0x7FF4000000000000;
      double v13 = 0.0;
    }
    else
    {
      *(double *)(a3 + 8) = v8 / v7;
      double v13 = v9 / v7;
    }
    *(double *)(a3 + 16) = v13;
  }
  return v7 > 0.0;
}

uint64_t sub_1002711EC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  char v4 = a4;
  char v5 = a3;
  if (a4 <= a3)
  {
    sub_1000AE4B0(__p, "");
    sub_10025351C("End bit must be after start bit", &__dst);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&__dst, 1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v9);
  }
  if (a4 - a3 >= 17)
  {
    sub_1000AE4B0(__p, "");
    sub_1001F1308("We only output 16 bits of data, cannot support more", &__dst);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&__dst, 1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v9);
  }
  LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
  uint64_t v6 = (uint64_t)a3 >> 3;
  if ((unint64_t)(a2 - v6) >= 4) {
    size_t v7 = 4;
  }
  else {
    size_t v7 = a2 - v6;
  }
  memcpy(&__dst, (const void *)(a1 + v6), v7);
  return (bswap32(__dst.__r_.__value_.__l.__data_) >> ((v5 & 0xF8) - v4)) & (unsigned __int16)~(-1 << (v4 - (v5 & 0xF8) - (v5 & 7)));
}

void sub_1002713A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

float sub_1002713EC(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 120);
  char v4 = (void *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    char v4 = (void *)*v4;
  }
  unsigned int v5 = sub_1002711EC((uint64_t)v4, *(void *)(a1 + 152), v3 * a2, v3 * a2 + v3);
  return sub_1001F0EF0(a1 + 56, (v5 >> *(_DWORD *)(a1 + 104)) & ~(-1 << *(_DWORD *)(a1 + 72)));
}

float sub_100271458(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 120);
  char v4 = (void *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    char v4 = (void *)*v4;
  }
  int v5 = sub_1002711EC((uint64_t)v4, *(void *)(a1 + 152), v3 * a2, v3 * a2 + v3);
  return sub_1001F0EF0(a1 + 88, v5 & ~(-1 << *(_DWORD *)(a1 + 104)));
}

uint64_t sub_1002714BC(uint64_t a1)
{
  return a1 + 24;
}

void sub_1002714C4()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10027153C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002715B4(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    int v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    int v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v6 = *(void **)(a1 + 16);
      if (v5 != v4)
      {
        do
        {
          size_t v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          v5 -= 16;
        }
        while (v5 != v4);
        uint64_t v6 = *(void **)(a1 + 16);
      }
      *(void *)(a1 + 24) = v4;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t sub_100271714(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v5 = (const void ***)*a2;
    uint64_t v6 = (const void ***)a2[1];
    size_t v7 = *(unsigned __int8 ****)(a1 + 16);
    if ((const void ***)((char *)v6 - *a2) == (const void ***)(*(void *)(a1 + 24) - (void)v7))
    {
      if (v5 == v6) {
        return 0;
      }
      while (sub_1000706F4(v5, v7))
      {
        v5 += 2;
        v7 += 2;
        if (v5 == v6) {
          return 0;
        }
      }
    }
  }
  sub_1001F44CC((uint64_t)a2, (uint64_t)a2, (uint64_t)&v17);
  sub_1001E5ADC((unint64_t *)&v17, (uint64_t *)&v16);
  long long v9 = v16;
  long long v16 = 0uLL;
  double v10 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  char v11 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  sub_100272AEC(v4, a2);
  if (__p)
  {
    unsigned int v20 = __p;
    operator delete(__p);
  }
  double v12 = (char *)v17;
  if (v17)
  {
    double v13 = v18;
    uint64_t v14 = v17;
    if (v18 != v17)
    {
      do
      {
        unsigned int v15 = (std::__shared_weak_count *)*((void *)v13 - 1);
        if (v15)
        {
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 16;
      }
      while (v13 != v12);
      uint64_t v14 = v17;
    }
    float v18 = v12;
    operator delete(v14);
  }
  return 1;
}

void sub_10027190C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1001F47D4((void **)va);
  _Unwind_Resume(a1);
}

void sub_100271920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1001F47D4((void **)va);
  _Unwind_Resume(a1);
}

void sub_100271934(uint64_t a1)
{
}

void sub_1002719D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1003A63B4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002719E8(uint64_t a1)
{
  if (sub_1001E58CC(*(void *)(a1 + 40)))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = v2;
    if (!v2)
    {
LABEL_6:
      int v3 = *(_DWORD *)a1;
      if (*(_DWORD *)a1)
      {
        if (v3 != 1)
        {
          if (v3 == 2) {
            sub_1002722B4();
          }
          __cxa_allocate_exception(0x40uLL);
          v13[0] = *(_DWORD *)a1;
          uint64_t v4 = sub_1002724A8((uint64_t)&qword_10047EE30, v13);
          sub_1000AE4B0(&v8, (char *)*v4);
          uint64_t v5 = std::string::insert(&v8, 0, "Not yet implemented: ");
          long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
          v9.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v6;
          v5->__r_.__value_.__l.__size_ = 0;
          v5->__r_.__value_.__r.__words[2] = 0;
          v5->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(&v10, &v9);
          v10.__vftable = (std::runtime_error_vtbl *)&off_100453860;
          sub_10018E868((uint64_t)v7);
          sub_1000D1698(&v10, (uint64_t)"std::unique_ptr<WifiIndependenceSnapshot> WifiMeasurementIndependence::getSnapshot(const std::vector<RadioScanEntry> &, const std::vector<RadioScanEntry> &) const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/rssi/wifi_measurement_independence.cpp", 131, (uint64_t)v7);
        }
        sub_1002722B4();
      }
      operator new();
    }
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = v2;
    if (!v2) {
      goto LABEL_6;
    }
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  goto LABEL_6;
}

void sub_100271C0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::runtime_error a25,char a26)
{
}

void sub_100271D3C()
{
  uint64_t v1 = *(void **)(v0 - 96);
  if (v1)
  {
    *(void *)(v0 - 88) = v1;
    operator delete(v1);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v0 - 48));
  if (*(char *)(v0 - 49) < 0) {
    operator delete(*(void **)(v0 - 72));
  }
  __cxa_end_catch();
  JUMPOUT(0x100271DB0);
}

void sub_100271DCC()
{
}

void sub_100271DE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  ++*(_DWORD *)(a1 + 72);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  unint64_t v61 = 0;
  unint64_t v62 = 0;
  uint64_t v63 = 0;
  std::string __p = 0;
  uint64_t v59 = 0;
  for (unint64_t i = 0; v5 != v6; v5 += 208)
  {
    uint64_t v11 = (void *)(v5 + 8);
    int v10 = *(_DWORD *)v5;
    int v12 = *(int *)v5 >> 31;
    if (v10 >> 31 == v10)
    {
      *(void *)&long long v65 = *v11;
      int v12 = v10;
    }
    else
    {
      long long v13 = *(_OWORD *)v11;
      int v66 = *(_DWORD *)(v5 + 24);
      long long v65 = v13;
    }
    int v64 = v12 ^ v10;
    double v14 = (*(double (**)(uint64_t, int *))(*(void *)a2 + 16))(a2, &v64);
    if (v14 <= 0.0) {
      continue;
    }
    unsigned int v15 = v59;
    if ((unint64_t)v59 >= i)
    {
      uint64_t v59 = (_DWORD *)sub_100272500((uint64_t *)&__p, v5);
      unsigned int v20 = v62;
      uint64_t v19 = v63;
      if (v62 >= v63) {
        goto LABEL_31;
      }
    }
    else
    {
      long long v16 = v59 + 2;
      int v17 = *(_DWORD *)v5;
      if (v17 == v17 >> 31)
      {
        *long long v16 = *v11;
        int v18 = v17;
      }
      else
      {
        long long v21 = *(_OWORD *)v11;
        v59[6] = *(_DWORD *)(v5 + 24);
        *(_OWORD *)long long v16 = v21;
        int v18 = *(_DWORD *)v5;
        int v17 = *(int *)v5 >> 31;
      }
      *unsigned int v15 = v18 ^ v17;
      int v22 = *(_DWORD *)(v5 + 32);
      float v23 = (int *)(v5 + 40);
      if (v22 == v22 >> 31)
      {
        uint64_t v24 = v15 + 12;
        int v25 = *(_DWORD *)(v5 + 40);
        float v26 = (void *)(v5 + 48);
        if (v25 == v25 >> 31)
        {
          *uint64_t v24 = *v26;
          int v27 = v25;
        }
        else
        {
          long long v29 = *(_OWORD *)v26;
          v15[16] = *(_DWORD *)(v5 + 64);
          *(_OWORD *)uint64_t v24 = v29;
          int v27 = *v23;
          int v25 = v27 >> 31;
        }
        v15[10] = v27 ^ v25;
        *((void *)v15 + 9) = *(void *)(v5 + 72);
        *((unsigned char *)v15 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
        if (*(unsigned char *)(v5 + 80))
        {
          v15[21] = *(_DWORD *)(v5 + 84);
          *((unsigned char *)v15 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
        }
        long long v30 = *(_OWORD *)(v5 + 88);
        long long v31 = *(_OWORD *)(v5 + 104);
        v15[30] = *(_DWORD *)(v5 + 120);
        *(_OWORD *)(v15 + 26) = v31;
        *(_OWORD *)(v15 + 22) = v30;
      }
      else
      {
        if (v22 >= 0) {
          uint64_t v28 = v5 + 40;
        }
        else {
          uint64_t v28 = *(void *)v23;
        }
        sub_1001AC878(v15 + 10, v28);
      }
      v15[8] = *(_DWORD *)(v5 + 32) ^ (*(int *)(v5 + 32) >> 31);
      uint64_t v59 = v15 + 52;
      unsigned int v20 = v62;
      uint64_t v19 = v63;
      if (v62 >= v63)
      {
LABEL_31:
        float v32 = (double *)v61;
        int64_t v33 = (char *)v20 - (unsigned char *)v61;
        uint64_t v34 = ((char *)v20 - (unsigned char *)v61) >> 3;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61) {
          sub_1000A9108();
        }
        uint64_t v36 = (char *)v19 - (unsigned char *)v61;
        if (v36 >> 2 > v35) {
          unint64_t v35 = v36 >> 2;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37)
        {
          if (v37 >> 61) {
            sub_1000A6A10();
          }
          double v38 = operator new(8 * v37);
        }
        else
        {
          double v38 = 0;
        }
        int v39 = (double *)&v38[8 * v34];
        if (v14 <= 1.0) {
          double v40 = v14;
        }
        else {
          double v40 = 1.0;
        }
        *int v39 = v40;
        std::string v9 = v39 + 1;
        if (v20 != v32)
        {
          unint64_t v41 = (char *)(v20 - 1) - (char *)v32;
          if (v41 < 0x58) {
            goto LABEL_73;
          }
          if ((unint64_t)((char *)v20 - &v38[v33]) < 0x20) {
            goto LABEL_73;
          }
          uint64_t v42 = (v41 >> 3) + 1;
          uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          long double v44 = &v20[v43 / 0xFFFFFFFFFFFFFFF8];
          int v39 = (double *)((char *)v39 - v43);
          long double v45 = &v38[8 * v34 - 16];
          double v46 = v20 - 2;
          uint64_t v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            _OWORD *v45 = v48;
            v45 -= 2;
            v46 -= 4;
            v47 -= 4;
          }
          while (v47);
          unsigned int v20 = v44;
          if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_73:
            do
            {
              uint64_t v49 = *((void *)v20-- - 1);
              *((void *)v39-- - 1) = v49;
            }
            while (v20 != v32);
          }
        }
        unint64_t v61 = v39;
        unint64_t v62 = v9;
        uint64_t v63 = (double *)&v38[8 * v37];
        if (v32) {
          operator delete(v32);
        }
        goto LABEL_7;
      }
    }
    if (v14 <= 1.0) {
      double v8 = v14;
    }
    else {
      double v8 = 1.0;
    }
    *unsigned int v20 = v8;
    std::string v9 = v20 + 1;
LABEL_7:
    unint64_t v62 = v9;
  }
  sub_100232C1C(a5, &v61, &__p, a4);
  unint64_t v50 = __p;
  if (__p)
  {
    uint64_t v51 = v59;
    uint64_t v52 = __p;
    if (v59 != __p)
    {
      uint64_t v53 = v59 - 42;
      do
      {
        int v55 = *(v51 - 44);
        if (v55 == v55 >> 31)
        {
          if (*((unsigned char *)v51 - 128)) {
            *((unsigned char *)v51 - 128) = 0;
          }
        }
        else
        {
          uint64_t v54 = *((void *)v51 - 21);
          if (v55 < 0)
          {
            if (v54) {
              (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
            }
          }
          else
          {
            (*(void (**)(_DWORD *))v54)(v51 - 42);
          }
        }
        v51 -= 52;
        v53 -= 52;
      }
      while (v51 != v50);
      uint64_t v52 = __p;
    }
    uint64_t v59 = v50;
    operator delete(v52);
  }
  if (v61)
  {
    unint64_t v62 = (double *)v61;
    operator delete(v61);
  }
}

void sub_100272260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (a12) {
    sub_1003A63D8((uint64_t)&a12, a12);
  }
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002722B4()
{
}

void sub_100272454(uint64_t a1, ...)
{
  va_start(va1, a1);
  va_start(va, a1);
  uint64_t v1 = va_arg(va1, void *);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v4 = va_arg(va1, void);
  sub_1002329B0((void **)va);
  sub_1000BA884((uint64_t)va1);
  operator delete();
}

BOOL sub_100272490(uint64_t a1)
{
  return *(_DWORD *)a1 && sub_1001E58CC(*(void *)(a1 + 40));
}

uint64_t *sub_1002724A8(uint64_t a1, int *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (!v2) {
LABEL_7:
  }
    sub_10018E334("map::at:  key not found");
  int v3 = *a2;
  while (1)
  {
    while (1)
    {
      int v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        goto LABEL_7;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    uint64_t v2 = (uint64_t *)v2[1];
    if (!v2) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_100272500(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x13B13B13B13B13BLL) {
    sub_1000A9108();
  }
  if (0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4) > v6) {
    unint64_t v6 = 0x9D89D89D89D89D8ALL * ((a1[2] - v3) >> 4);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 4)) >= 0x9D89D89D89D89DLL) {
    unint64_t v8 = 0x13B13B13B13B13BLL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x13B13B13B13B13BLL) {
      sub_1000A6A10();
    }
    std::string v9 = operator new(208 * v8);
  }
  else
  {
    std::string v9 = 0;
  }
  int v10 = &v9[52 * v5];
  unint64_t v35 = v10;
  uint64_t v11 = v10 + 2;
  long long v13 = (void *)(a2 + 8);
  int v12 = *(_DWORD *)a2;
  int v14 = *(int *)a2 >> 31;
  if (v12 >> 31 == v12)
  {
    *uint64_t v11 = *v13;
    int v14 = v12;
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v13;
    v10[6] = *(_DWORD *)(a2 + 24);
  }
  *int v10 = v14 ^ v12;
  unsigned int v15 = &v9[52 * v5 + 10];
  int v16 = *(_DWORD *)(a2 + 32);
  int v17 = v16 >> 31;
  if (v16 >> 31 == v16)
  {
    int v18 = &v9[52 * v5 + 12];
    int v19 = *(_DWORD *)(a2 + 40);
    int v20 = v19 >> 31;
    long long v21 = (void *)(a2 + 48);
    if (v19 >> 31 == v19)
    {
      *int v18 = *v21;
      int v20 = v19;
    }
    else
    {
      *(_OWORD *)int v18 = *(_OWORD *)v21;
      v9[52 * v5 + 16] = *(_DWORD *)(a2 + 64);
    }
    *unsigned int v15 = v20 ^ v19;
    uint64_t v24 = (char *)&v9[52 * v5];
    uint64_t v25 = *(void *)(a2 + 72);
    v24[80] = 0;
    float v26 = v24 + 80;
    *((void *)v26 - 1) = v25;
    if (*(unsigned char *)(a2 + 80))
    {
      v9[52 * v5 + 21] = *(_DWORD *)(a2 + 84);
      *float v26 = 1;
    }
    float v23 = (char *)&v9[52 * v5];
    *(_OWORD *)(v23 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(a2 + 104);
    *((_DWORD *)v23 + 3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_DWORD *)(a2 + 120);
  }
  else
  {
    if (v16 >= 0) {
      uint64_t v22 = a2 + 40;
    }
    else {
      uint64_t v22 = *(void *)(a2 + 40);
    }
    sub_1001AC878(v15, v22);
    int v16 = *(_DWORD *)(a2 + 32);
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    int v10 = v35;
    float v23 = (char *)&v9[52 * v5];
    int v17 = v16 >> 31;
  }
  v9[52 * v5 + 8] = v17 ^ v16;
  uint64_t v27 = (uint64_t)(v23 + 208);
  sub_10023474C((uint64_t)(a1 + 2), v4, v4, v3, v3, (uint64_t)v10, (uint64_t)v10);
  uint64_t v28 = (char *)*a1;
  long long v29 = (char *)a1[1];
  *a1 = v30;
  a1[1] = v27;
  a1[2] = (uint64_t)&v9[52 * v8];
  if (v29 != v28)
  {
    long long v31 = v29 - 168;
    do
    {
      int v33 = *((_DWORD *)v29 - 44);
      if (v33 == v33 >> 31)
      {
        if (*(v29 - 128)) {
          *(v29 - 128) = 0;
        }
      }
      else
      {
        uint64_t v32 = *((void *)v29 - 21);
        if (v33 < 0)
        {
          if (v32) {
            (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
          }
        }
        else
        {
          (*(void (**)(char *))v32)(v29 - 168);
        }
      }
      v29 -= 208;
      v31 -= 208;
    }
    while (v29 != v28);
  }
  if (v28) {
    operator delete(v28);
  }
  return v27;
}

void sub_100272814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023467C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100272828(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100463020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100272848(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100463020;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10027289C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1002728C8()
{
}

double sub_1002728DC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[1];
  if (*a3 == v3)
  {
LABEL_18:
    sub_1000AE4B0(v13, "");
    sub_100272A9C("This will always be true because historyIncludingCurrentScan always includes the current scan, after all", &v15);
    sub_10016A2C4((uint64_t)v13, (uint64_t)&v15, 1);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v15.__r_.__value_.__l.__data_);
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_20;
      }
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v13[0]);
LABEL_20:
    sub_1000D11E0((uint64_t)&__p);
  }
  uint64_t v4 = *a3 + 8;
  double v5 = 0.0;
  do
  {
    int v10 = *(_DWORD *)(v4 - 8);
    if ((*(_DWORD *)a2 ^ (*(int *)a2 >> 31)) != ((v10 >> 31) ^ v10))
    {
LABEL_10:
      double v8 = *(double *)(a1 + 8);
      goto LABEL_11;
    }
    if (v10 >> 31 == v10)
    {
      double v8 = 1.0;
      if (*(void *)(a2 + 8) != *(void *)v4) {
        goto LABEL_10;
      }
    }
    else
    {
      if (*(void *)(a2 + 8) != *(void *)v4
        || *(void *)(a2 + 16) != *(void *)(v4 + 8)
        || *(_DWORD *)(a2 + 24) != (unint64_t)*(unsigned int *)(v4 + 16))
      {
        goto LABEL_10;
      }
      double v8 = 1.0;
    }
LABEL_11:
    double v5 = v5 + v8;
    uint64_t v9 = v4 + 200;
    v4 += 208;
  }
  while (v9 != v3);
  if (v5 <= 0.0) {
    goto LABEL_18;
  }
  return 1.0 / v5;
}

void sub_100272A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100272A9C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100272AD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100272AEC(unsigned __int8 *a1, uint64_t *a2)
{
  int v4 = *a1;
  uint64_t v3 = a1 + 8;
  if (v4)
  {
    sub_10025AFA4(__p, a2);
    uint64_t v6 = *(void *)&__p[16];
    long long v7 = *((_OWORD *)a1 + 1);
    long long v8 = *(_OWORD *)__p;
    *(void *)std::string __p = *((void *)a1 + 1);
    double v5 = *(char **)__p;
    *(_OWORD *)(a1 + 8) = v8;
    *(_OWORD *)&__p[8] = v7;
    *((void *)a1 + 3) = v6;
    if (v5)
    {
      uint64_t v9 = (char *)v7;
      int v10 = v5;
      if ((char *)v7 != v5)
      {
        do
        {
          uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 - 1);
          if (v11)
          {
            if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v9 -= 16;
        }
        while (v9 != v5);
        int v10 = *(char **)__p;
      }
      *(void *)&__p[8] = v5;
      operator delete(v10);
    }
  }
  else
  {
    sub_10025AFA4(v3, a2);
    *a1 = 1;
  }
}

void sub_100272BEC()
{
}

double sub_100272C00()
{
  return 1.0;
}

void sub_100272C08()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100272C80()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

double sub_100272CF8(double **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    double result = -INFINITY;
    if (!a2) {
      return result;
    }
    goto LABEL_7;
  }
  double result = -INFINITY;
  do
  {
    double v5 = *v2;
    v2 += 10;
    double v6 = v5;
    if (result < v5) {
      double result = v6;
    }
  }
  while (v2 != v3);
  if (a2)
  {
LABEL_7:
    if (result < *(double *)a2) {
      return *(double *)a2;
    }
  }
  return result;
}

BOOL sub_100272D44(void *a1, double *a2, double a3)
{
  if (*a2 > a3) {
    return 1;
  }
  uint64_t v4 = a1[1];
  if (*a1 == v4) {
    return 0;
  }
  uint64_t v5 = *a1 + 80;
  do
  {
    double v6 = *(double *)(v5 - 80);
    BOOL result = v6 > a3;
    BOOL v7 = v6 > a3 || v5 == v4;
    v5 += 80;
  }
  while (!v7);
  return result;
}

BOOL sub_100272D8C(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  double v4 = -INFINITY;
  if (*a1 != v3)
  {
    uint64_t v5 = *a1;
    do
    {
      double v6 = *v5;
      v5 += 10;
      double v7 = v6;
      if (v4 < v6) {
        double v4 = v7;
      }
    }
    while (v5 != v3);
  }
  if (a2 && v4 < *a2) {
    double v4 = *a2;
  }
  if (v4 < -3.6e16)
  {
    if (qword_10047BED8 == -1)
    {
      int v10 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
        return v4 >= -3.6e16;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100463110);
      int v10 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
        return v4 >= -3.6e16;
      }
    }
    int v12 = 134217984;
    double v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "These days it's unclear if this type of catastrophic failure can still occur given:\n+ globalDbm scan prior\n+ map uncertainty\n+ off-map particle\n+ renormalization\n\nBUT: in case it does, your maxLoglikelihood was %f", (uint8_t *)&v12, 0xCu);
    return v4 >= -3.6e16;
  }
  for (; v2 != v3; v2 += 10)
  {
    double v8 = v4 + v2[1];
    *uint64_t v2 = *v2 - v4;
    v2[1] = v8;
  }
  if (a2)
  {
    double v9 = v4 + a2[1];
    *a2 = *a2 - v4;
    a2[1] = v9;
  }
  return v4 >= -3.6e16;
}

void sub_100272F08(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    double v3 = *(double *)(v1 + 8);
    for (uint64_t i = v1 + 80; i != v2; i += 80)
      sub_100273050(v3, *(double *)(i + 8));
  }
}

void sub_100272FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::invalid_argument a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::invalid_argument::~invalid_argument(&a13);
  _Unwind_Resume(a1);
}

void sub_100273020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::invalid_argument a13)
{
  std::invalid_argument::~invalid_argument(&a13);
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void sub_10027303C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100273050(double a1, double a2)
{
  if (a1 != a2)
  {
    __cxa_allocate_exception(0x40uLL);
    std::logic_error::logic_error(&v3, "Your particle state has become inconsistent");
    sub_10018E868((uint64_t)v2);
    sub_1000D8F04(&v3, (uint64_t)"static void HypothesisWeight::assertValidRenormalization(double, double)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/hypothesis_weight.cpp", 541, (uint64_t)v2);
  }
}

void sub_10027315C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::invalid_argument a17, std::invalid_argument a18)
{
  sub_1000D924C(&a18);
  if (__p)
  {
    operator delete(__p);
    std::invalid_argument::~invalid_argument(&a17);
    if ((v19 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    std::invalid_argument::~invalid_argument(&a17);
    if (!v19) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_1002731BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a1[1])
  {
    if (!a2 || !a3) {
      return;
    }
    double v8 = *(double *)(a2 + 8);
    double v7 = *(double *)(a3 + 8);
    goto LABEL_9;
  }
  sub_100272F08(a1);
  double v6 = *(double *)(*a1 + 8);
  if (a2) {
    sub_100273050(*(double *)(*a1 + 8), *(double *)(a2 + 8));
  }
  if (a3)
  {
    double v7 = *(double *)(a3 + 8);
    double v8 = v6;
LABEL_9:
    sub_100273050(v8, v7);
  }
}

void sub_1002733C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long double sub_100273414@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100272F08(a1);
  uint64_t v5 = *a1;
  double v4 = (double *)a1[1];
  uint64_t v6 = *(void *)(v5 + 8);
  long double v7 = 0.0;
  if ((double *)v5 == v4)
  {
    double v12 = -INFINITY;
  }
  else
  {
    double v8 = -INFINITY;
    double v9 = (double *)v5;
    do
    {
      double v10 = *v9;
      v9 += 10;
      double v11 = v10;
      if (v8 < v10) {
        double v8 = v11;
      }
    }
    while (v9 != v4);
    double v12 = -INFINITY;
    if (v8 != -INFINITY)
    {
      unint64_t v13 = (unint64_t)v4 - v5 - 80;
      long double v7 = 0.0;
      if (v13 >= 0x50)
      {
        unint64_t v15 = v13 / 0x50 + 1;
        char v14 = (double *)(v5 + 80 * (v15 & 0x7FFFFFFFFFFFFFELL));
        uint64_t v16 = v15 & 0x7FFFFFFFFFFFFFELL;
        do
        {
          long double v17 = *(double *)(v5 + 80) - v8;
          double v18 = exp(*(double *)v5 - v8);
          long double v7 = v7 + v18 + exp(v17);
          v5 += 160;
          v16 -= 2;
        }
        while (v16);
        if (v15 == (v15 & 0x7FFFFFFFFFFFFFELL)) {
          goto LABEL_14;
        }
      }
      else
      {
        char v14 = (double *)v5;
      }
      do
      {
        double v19 = *v14;
        v14 += 10;
        long double v7 = v7 + exp(v19 - v8);
      }
      while (v14 != v4);
LABEL_14:
      double v12 = v8;
    }
  }
  long double result = v12 + log(v7);
  *(long double *)a2 = result;
  *(void *)(a2 + 8) = v6;
  return result;
}

double sub_100273560(uint64_t a1)
{
  return *(double *)a1;
}

void sub_100273568(double **a1@<X0>, double *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  double v9 = *a1;
  double v8 = a1[1];
  if (a2) {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)*a1) >> 4) + 1;
  }
  else {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)*a1) >> 4);
  }
  double v11 = -INFINITY;
  if (v8 != v9)
  {
    double v12 = *a1;
    do
    {
      double v13 = *v12;
      v12 += 10;
      double v14 = v13;
      if (v11 < v13) {
        double v11 = v14;
      }
    }
    while (v12 != v8);
  }
  if (a2 && v11 < *a2) {
    double v11 = *a2;
  }
  std::string v91 = 0;
  uint64_t v92 = 0;
  std::string v93 = 0;
  if (v10)
  {
    if (v10 >> 61) {
      sub_1000A9108();
    }
    unint64_t v15 = (double *)operator new(8 * v10);
    std::string v91 = v15;
    uint64_t v92 = (uint64_t)v15;
    std::string v93 = &v15[v10];
    if (v9 != v8) {
      goto LABEL_15;
    }
LABEL_56:
    unint64_t v35 = a2;
    if (a2)
    {
      double v5 = a2[1];
      long double v17 = 0.0;
      goto LABEL_58;
    }
    long double v17 = 0.0;
    int v46 = 1;
    goto LABEL_84;
  }
  unint64_t v15 = 0;
  if (v9 == v8) {
    goto LABEL_56;
  }
LABEL_15:
  unint64_t v85 = a3;
  int v16 = 0;
  long double v17 = 0.0;
  do
  {
    while (1)
    {
      if (v16)
      {
        if (v5 != v9[1])
        {
          sub_1000AE4B0(&__p, "");
          sub_10016A2C4((uint64_t)&__p, 0, 0);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_10014B3FC((uint64_t)v95);
        }
      }
      else
      {
        int v16 = 1;
        double v5 = v9[1];
      }
      long double v17 = v17 + exp(*v9 - v11);
      if (v15 >= v93) {
        break;
      }
      *v15++ = v17;
      uint64_t v92 = (uint64_t)v15;
      v9 += 10;
      if (v9 == v8) {
        goto LABEL_52;
      }
    }
    double v18 = v91;
    uint64_t v19 = v15 - v91;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61) {
      sub_1000A9108();
    }
    uint64_t v21 = (char *)v93 - (char *)v91;
    if (((char *)v93 - (char *)v91) >> 2 > v20) {
      unint64_t v20 = v21 >> 2;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 >> 61) {
        sub_1000A6A10();
      }
      float v23 = operator new(8 * v22);
      uint64_t v24 = (double *)&v23[8 * v19];
      *uint64_t v24 = v17;
      uint64_t v25 = (uint64_t)(v24 + 1);
      if (v15 == v91) {
        goto LABEL_38;
      }
    }
    else
    {
      float v23 = 0;
      uint64_t v24 = (double *)(8 * v19);
      *(long double *)(8 * v19) = v17;
      uint64_t v25 = 8 * v19 + 8;
      if (v15 == v91) {
        goto LABEL_38;
      }
    }
    unint64_t v26 = (char *)(v15 - 1) - (char *)v91;
    if (v26 < 0x168)
    {
      uint64_t v27 = v15;
      goto LABEL_37;
    }
    if (&v23[(char *)v15 - (char *)v91 - 8 - (v26 & 0xFFFFFFFFFFFFFFF8)] > &v23[(char *)v15 - (char *)v91 - 8])
    {
      uint64_t v27 = v15;
      do
      {
LABEL_37:
        uint64_t v28 = *((void *)v27-- - 1);
        *((void *)v24-- - 1) = v28;
      }
      while (v27 != v91);
      goto LABEL_38;
    }
    if ((double *)((char *)v15 - (v26 & 0xFFFFFFFFFFFFFFF8) - 8) > v15 - 1)
    {
      uint64_t v27 = v15;
      goto LABEL_37;
    }
    if ((unint64_t)((char *)v91 - v23) < 0x20)
    {
      uint64_t v27 = v15;
      goto LABEL_37;
    }
    uint64_t v29 = (v26 >> 3) + 1;
    uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v27 = &v15[v30 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v24 = (double *)((char *)v24 - v30);
    long long v31 = &v23[8 * v19 - 16];
    uint64_t v32 = v15 - 2;
    uint64_t v33 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      _OWORD *v31 = v34;
      v31 -= 2;
      v32 -= 4;
      v33 -= 4;
    }
    while (v33);
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_37;
    }
LABEL_38:
    std::string v91 = v24;
    std::string v93 = (double *)&v23[8 * v22];
    if (v18) {
      operator delete(v18);
    }
    unint64_t v15 = (double *)v25;
    uint64_t v92 = v25;
    v9 += 10;
  }
  while (v9 != v8);
LABEL_52:
  if (a2)
  {
    a3 = v85;
    if (v5 != a2[1])
    {
      sub_1000AE4B0(&__p, "");
      sub_10016A2C4((uint64_t)&__p, 0, 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_10014B3FC((uint64_t)v95);
    }
    unint64_t v35 = a2;
LABEL_58:
    long double v17 = v17 + exp(*v35 - v11);
    if (v15 < v93)
    {
      unint64_t v36 = v10;
      *unint64_t v15 = v17;
      uint64_t v37 = (uint64_t)(v15 + 1);
      goto LABEL_83;
    }
    double v38 = v91;
    uint64_t v39 = v15 - v91;
    unint64_t v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 61) {
      sub_1000A9108();
    }
    unint64_t v36 = v10;
    uint64_t v41 = (char *)v93 - (char *)v91;
    if (((char *)v93 - (char *)v91) >> 2 > v40) {
      unint64_t v40 = v41 >> 2;
    }
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v40;
    }
    if (v42)
    {
      if (v42 >> 61) {
        sub_1000A6A10();
      }
      uint64_t v43 = operator new(8 * v42);
      long double v44 = (double *)&v43[8 * v39];
      *long double v44 = v17;
      uint64_t v37 = (uint64_t)(v44 + 1);
      int64_t v45 = (char *)v15 - (char *)v91;
      if (v15 == v91) {
        goto LABEL_81;
      }
LABEL_73:
      unint64_t v47 = v45 - 8;
      if (v47 < 0x58)
      {
        long long v48 = v15;
        goto LABEL_80;
      }
      if ((unint64_t)((char *)v91 - v43) < 0x20)
      {
        long long v48 = v15;
        goto LABEL_80;
      }
      uint64_t v49 = (v47 >> 3) + 1;
      uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
      long long v48 = &v15[v50 / 0xFFFFFFFFFFFFFFF8];
      long double v44 = (double *)((char *)v44 - v50);
      uint64_t v51 = &v43[8 * v39 - 16];
      uint64_t v52 = v15 - 2;
      uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v54 = *(_OWORD *)v52;
        *(v51 - 1) = *((_OWORD *)v52 - 1);
        *uint64_t v51 = v54;
        v51 -= 2;
        v52 -= 4;
        v53 -= 4;
      }
      while (v53);
      if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_80:
          uint64_t v55 = *((void *)v48-- - 1);
          *((void *)v44-- - 1) = v55;
        }
        while (v48 != v91);
      }
    }
    else
    {
      uint64_t v43 = 0;
      long double v44 = (double *)(8 * v39);
      *(long double *)(8 * v39) = v17;
      uint64_t v37 = 8 * v39 + 8;
      int64_t v45 = (char *)v15 - (char *)v91;
      if (v15 != v91) {
        goto LABEL_73;
      }
    }
LABEL_81:
    std::string v91 = v44;
    if (v38) {
      operator delete(v38);
    }
LABEL_83:
    int v46 = 0;
    uint64_t v92 = v37;
    unint64_t v15 = (double *)v37;
    unint64_t v10 = v36;
  }
  else
  {
    int v46 = 0;
    a3 = v85;
  }
LABEL_84:
  if (v10 != v15 - v91)
  {
    sub_1000AE4B0(&__p, "");
    sub_10016A2C4((uint64_t)&__p, 0, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1000D11E0((uint64_t)v95);
  }
  double v56 = v17 / (double)a3;
  if (v56 <= nextafter(v17, INFINITY) - v17)
  {
    if (qword_10047BED8 == -1)
    {
      double v80 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR))
      {
LABEL_126:
        *(unsigned char *)a4 = 0;
        goto LABEL_145;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_100463110);
      double v80 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_126;
      }
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
    *(long double *)((char *)__p.__r_.__value_.__r.__words + 4) = v17;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v17 / (double)a3;
    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "Resetting - Horrible things have happened because c is %f and du is %f", (uint8_t *)&__p, 0x16u);
    goto LABEL_126;
  }
  std::string v89 = 0;
  int v88 = v46;
  if (a3)
  {
    if (a3 >> 61) {
      sub_1000A9108();
    }
    unint64_t v57 = (unint64_t *)operator new(8 * a3);
    unint64_t v58 = 0;
    unint64_t v59 = 0;
    double v60 = v56 * a5;
    std::string v89 = v57;
    std::string v90 = (char *)&v57[a3];
    while (1)
    {
      do
        double v62 = v91[v59++];
      while (v60 + (double)v58 * v56 >= v62 && v59 < (v92 - (uint64_t)v91) >> 3);
      --v59;
      if (v57 >= (unint64_t *)v90) {
        break;
      }
      *unint64_t v57 = v59;
      uint64_t v61 = (uint64_t)(v57 + 1);
LABEL_90:
      ++v58;
      unint64_t v57 = (unint64_t *)v61;
      if (v58 == a3) {
        goto LABEL_128;
      }
    }
    int v64 = v89;
    uint64_t v65 = v57 - v89;
    unint64_t v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 61) {
      sub_1000A9108();
    }
    uint64_t v67 = v90 - (char *)v89;
    if ((v90 - (char *)v89) >> 2 > v66) {
      unint64_t v66 = v67 >> 2;
    }
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v68 = v66;
    }
    if (v68)
    {
      if (v68 >> 61) {
        sub_1000A6A10();
      }
      long long v69 = operator new(8 * v68);
      uint64_t v70 = (unint64_t *)&v69[8 * v65];
      *uint64_t v70 = v59;
      uint64_t v61 = (uint64_t)(v70 + 1);
      if (v57 == v89) {
        goto LABEL_111;
      }
LABEL_108:
      unint64_t v71 = (char *)(v57 - 1) - (char *)v89;
      if (v71 < 0x168)
      {
        uint64_t v72 = v57;
        goto LABEL_110;
      }
      if (&v69[(char *)v57 - (char *)v89 - 8 - (v71 & 0xFFFFFFFFFFFFFFF8)] > &v69[(char *)v57 - (char *)v89 - 8])
      {
        uint64_t v72 = v57;
        goto LABEL_110;
      }
      if ((unint64_t *)((char *)v57 - (v71 & 0xFFFFFFFFFFFFFFF8) - 8) > v57 - 1)
      {
        uint64_t v72 = v57;
        goto LABEL_110;
      }
      if ((unint64_t)((char *)v89 - v69) < 0x20)
      {
        uint64_t v72 = v57;
        goto LABEL_110;
      }
      uint64_t v74 = (v71 >> 3) + 1;
      uint64_t v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v72 = &v57[v75 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v70 = (unint64_t *)((char *)v70 - v75);
      double v76 = &v69[8 * v65 - 16];
      double v77 = (long long *)(v57 - 2);
      uint64_t v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v79 = *v77;
        *(v76 - 1) = *(v77 - 1);
        *double v76 = v79;
        v76 -= 2;
        v77 -= 2;
        v78 -= 4;
      }
      while (v78);
      if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_110:
          unint64_t v73 = *--v72;
          *--uint64_t v70 = v73;
        }
        while (v72 != v89);
      }
    }
    else
    {
      long long v69 = 0;
      uint64_t v70 = (unint64_t *)(8 * v65);
      *(void *)(8 * v65) = v59;
      uint64_t v61 = 8 * v65 + 8;
      if (v57 != v89) {
        goto LABEL_108;
      }
    }
LABEL_111:
    std::string v89 = v70;
    std::string v90 = &v69[8 * v68];
    if (v64) {
      operator delete(v64);
    }
    goto LABEL_90;
  }
  uint64_t v61 = 0;
LABEL_128:
  double v81 = log(v17);
  if (v88)
  {
    sub_1000AE4B0(v95, "");
    sub_10025351C("This value should have been set", &__p);
    sub_10016A2C4((uint64_t)v95, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v96 < 0) {
      operator delete(v95[0]);
    }
    sub_1000D11E0((uint64_t)&v94);
  }
  memset(&__p, 0, sizeof(__p));
  int64_t v82 = v61 - (void)v89;
  if ((unint64_t *)v61 == v89)
  {
    double v84 = 0;
    double v83 = 0;
  }
  else
  {
    if (v82 < 0) {
      sub_1000A9108();
    }
    double v83 = (char *)operator new(v82);
    double v84 = &v83[8 * (v82 >> 3)];
    memcpy(v83, v89, v82);
  }
  *(double *)&long long v98 = v11 + v81;
  *((double *)&v98 + 1) = v5;
  *(void *)(a4 + 8) = v83;
  *(void *)(a4 + 16) = v84;
  *(void *)(a4 + 24) = v84;
  *(_OWORD *)(a4 + 32) = v98;
  *(unsigned char *)a4 = 1;
  if (v89) {
    operator delete(v89);
  }
LABEL_145:
  if (v91) {
    operator delete(v91);
  }
}

void sub_100273F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100274000(uint64_t a1@<X0>, double *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>, float a6@<S0>)
{
  long double v7 = (uint64_t *)a1;
  double v9 = *(double **)(a1 + 8);
  if (*(double **)a1 == v9)
  {
    double v9 = *(double **)a1;
  }
  else
  {
    double v10 = -INFINITY;
    double v11 = *(double **)a1;
    do
    {
      double v12 = v10;
      double v10 = *v11;
      if (v12 > *v11)
      {
        sub_1000AE4B0(&v80, "");
        sub_1002753F4("Particles now need to be in ascending order of weight in order to resample", &v82);
        sub_10016A2C4((uint64_t)&v80, (uint64_t)&v82, 1);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        sub_1000D11E0((uint64_t)&v84);
      }
      v11 += 10;
    }
    while (v11 != v9);
  }
  unint64_t v13 = ((uint64_t)v9 - *(void *)a1) / 80;
  if (a2) {
    unint64_t v14 = v13 + 1;
  }
  else {
    unint64_t v14 = ((uint64_t)v9 - *(void *)a1) / 80;
  }
  unint64_t v15 = a3 - v13;
  if (a3 < v13) {
    unint64_t v15 = 0;
  }
  unint64_t v66 = v15;
  sub_100273568((double **)a1, a2, a3, (uint64_t)&v82, a6);
  if (!v82.__r_.__value_.__s.__data_[0])
  {
    *a5 = 0;
    return;
  }
  long long v76 = v83;
  *(double *)&long long v76 = *(double *)&v76 - log((double)a3);
  uint64_t v75 = 0;
  uint64_t v70 = v7;
  if (v14)
  {
    if (v14 >> 61) {
      sub_1000A9108();
    }
    int v16 = operator new(8 * v14);
    uint64_t v75 = v16;
    bzero(v16, 8 * v14);
    double v18 = (uint64_t *)v82.__r_.__value_.__r.__words[2];
    std::string::size_type size = (uint64_t *)v82.__r_.__value_.__l.__size_;
    if (v82.__r_.__value_.__l.__size_ == v82.__r_.__value_.__r.__words[2]) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  int v16 = 0;
  double v18 = (uint64_t *)v82.__r_.__value_.__r.__words[2];
  for (std::string::size_type size = (uint64_t *)v82.__r_.__value_.__l.__size_; size != v18; ++v16[v19])
LABEL_16:
    uint64_t v19 = *size++;
LABEL_17:
  uint64_t v65 = a5;
  *(_OWORD *)unint64_t v73 = 0uLL;
  uint64_t v74 = 0;
  if (!v14)
  {
    uint64_t v37 = 0;
    unint64_t v71 = 0;
    goto LABEL_83;
  }
  unint64_t v20 = 0;
  for (unint64_t i = 0; i != v14; ++i)
  {
    if (!v75[i])
    {
      if (i == v13)
      {
        if (v20 >= v74)
        {
          uint64_t v24 = (v20 - (char *)v73[0]) >> 4;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60) {
            goto LABEL_159;
          }
          uint64_t v26 = v74 - (char *)v73[0];
          if ((v74 - (char *)v73[0]) >> 3 > v25) {
            unint64_t v25 = v26 >> 3;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            if (v27 >> 60) {
              goto LABEL_160;
            }
            uint64_t v28 = (char *)operator new(16 * v27);
          }
          else
          {
            uint64_t v28 = 0;
          }
          uint64_t v33 = &v28[16 * v24];
          *(_OWORD *)uint64_t v33 = *(_OWORD *)a2;
          uint64_t v34 = (uint64_t)v33;
          if (v20 == v73[0]) {
            goto LABEL_55;
          }
          do
          {
            *(_OWORD *)(v34 - 16) = *((_OWORD *)v20 - 1);
            v34 -= 16;
            v20 -= 16;
          }
          while (v20 != v73[0]);
          goto LABEL_54;
        }
        long long v22 = *(_OWORD *)a2;
      }
      else
      {
        if (0xCCCCCCCCCCCCCCCDLL * ((v7[1] - *v7) >> 4) <= i) {
          sub_1001F352C();
        }
        uint64_t v29 = (_OWORD *)(*v7 + 80 * i);
        if (v20 >= v74)
        {
          uint64_t v30 = (v20 - (char *)v73[0]) >> 4;
          unint64_t v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 60) {
LABEL_159:
          }
            sub_1000A9108();
          uint64_t v32 = v74 - (char *)v73[0];
          if ((v74 - (char *)v73[0]) >> 3 > v31) {
            unint64_t v31 = v32 >> 3;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v31;
          }
          if (v27)
          {
            if (v27 >> 60) {
LABEL_160:
            }
              sub_1000A6A10();
            uint64_t v28 = (char *)operator new(16 * v27);
            uint64_t v33 = &v28[16 * v30];
            *(_OWORD *)uint64_t v33 = *v29;
            uint64_t v34 = (uint64_t)v33;
            if (v20 == v73[0]) {
              goto LABEL_55;
            }
          }
          else
          {
            uint64_t v28 = 0;
            uint64_t v33 = (char *)(16 * v30);
            *(_OWORD *)(16 * v3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *v29;
            uint64_t v34 = 16 * v30;
            if (v20 == v73[0]) {
              goto LABEL_55;
            }
          }
          do
          {
            *(_OWORD *)(v34 - 16) = *((_OWORD *)v20 - 1);
            v34 -= 16;
            v20 -= 16;
          }
          while (v20 != v73[0]);
LABEL_54:
          unint64_t v20 = (char *)v73[0];
LABEL_55:
          float v23 = v33 + 16;
          v73[0] = (void *)v34;
          uint64_t v74 = &v28[16 * v27];
          if (v20) {
            operator delete(v20);
          }
          goto LABEL_21;
        }
        long long v22 = *v29;
      }
      *(_OWORD *)unint64_t v20 = v22;
      float v23 = v20 + 16;
LABEL_21:
      v73[1] = v23;
      unint64_t v20 = (char *)v23;
      long double v7 = v70;
      continue;
    }
  }
  if (v14 >> 60) {
    sub_1000A9108();
  }
  unint64_t v35 = (char *)operator new(16 * v14);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unint64_t v71 = v35;
  uint64_t v72 = &v35[16 * v14];
  while (2)
  {
    while (1)
    {
      uint64_t v38 = v75[v36] + v37;
      if (v35 >= v72) {
        break;
      }
      *(void *)unint64_t v35 = v37;
      *((void *)v35 + 1) = v38;
      v35 += 16;
      v37 += v75[v36++];
      if (v36 == v14) {
        goto LABEL_77;
      }
    }
    uint64_t v39 = v71;
    uint64_t v40 = (v35 - v71) >> 4;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 60) {
      sub_1000A9108();
    }
    uint64_t v42 = v72 - v71;
    if ((v72 - v71) >> 3 > v41) {
      unint64_t v41 = v42 >> 3;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v41;
    }
    if (v43 >> 60) {
      sub_1000A6A10();
    }
    long double v44 = (char *)operator new(16 * v43);
    int64_t v45 = &v44[16 * v40];
    *(void *)int64_t v45 = v37;
    *((void *)v45 + 1) = v38;
    if (v35 == v71)
    {
      unint64_t v35 = v45 + 16;
      unint64_t v71 = &v44[16 * v40];
      uint64_t v72 = &v44[16 * v43];
      if (v39) {
        goto LABEL_72;
      }
    }
    else
    {
      int v46 = &v44[16 * v40];
      do
      {
        unint64_t v47 = v46 - 16;
        *((_OWORD *)v46 - 1) = *((_OWORD *)v35 - 1);
        v35 -= 16;
        v46 -= 16;
      }
      while (v35 != v71);
      unint64_t v35 = v45 + 16;
      unint64_t v71 = v47;
      uint64_t v72 = &v44[16 * v43];
      if (v39) {
LABEL_72:
      }
        operator delete(v39);
    }
    long double v7 = v70;
    v37 += v75[v36++];
    if (v36 != v14) {
      continue;
    }
    break;
  }
LABEL_77:
  if (v14 != (v35 - v71) >> 4)
  {
    sub_1000AE4B0(&v84, "");
    sub_1001F083C("All old particles must be accounted for", &v80);
    sub_10016A2C4((uint64_t)&v84, (uint64_t)&v80, 1);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    sub_1000D11E0((uint64_t)__p);
  }
LABEL_83:
  if (v37 != a3)
  {
    sub_1000AE4B0(&v84, "");
    sub_100275444("Bug in lowVarianceSelection. It should produce exactly newNumParticles total siblings.", &v80);
    sub_10016A2C4((uint64_t)&v84, (uint64_t)&v80, 1);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    sub_1000D11E0((uint64_t)__p);
  }
  uint64_t v81 = 0;
  v80.__r_.__value_.__r.__words[0] = v66;
  *(_OWORD *)&v80.__r_.__value_.__r.__words[1] = 0uLL;
  sub_100274CB8((char **)&v80.__r_.__value_.__l.__size_, v66);
  if (v14)
  {
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    for (uint64_t j = 0; j != v14; ++j)
    {
      if (v13 == j)
      {
        unint64_t v51 = v75[v13];
        uint64_t v52 = (uint64_t *)&v71[16 * v13];
        uint64_t v53 = *v52;
        uint64_t v54 = v52[1];
        uint64_t v55 = v54 - *v52;
        if (v55)
        {
          if (v55 != v51)
          {
            sub_1000AE4B0(__p, "");
            sub_10014B844("For now, the only supported behaviour is num(sublings) == num(destination particles).", &v84);
            sub_10016A2C4((uint64_t)__p, (uint64_t)&v84, 1);
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
            if (v79 < 0) {
              operator delete(__p[0]);
            }
            sub_10014B3FC((uint64_t)v77);
          }
          sub_1002FFCF4((uint64_t)a2, (double *)&v76, v51, (uint64_t)&v80, v7, v53, v54, a4);
        }
        else if (v51)
        {
          sub_1000AE4B0(__p, "");
          sub_10016620C("If siblings is zero, you better not have any destinations", &v84);
          sub_10016A2C4((uint64_t)__p, (uint64_t)&v84, 1);
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v84.__r_.__value_.__l.__data_);
          }
          if (v79 < 0) {
            operator delete(__p[0]);
          }
          sub_10014B3FC((uint64_t)v77);
        }
      }
      else
      {
        uint64_t v56 = v75[j];
        unint64_t v58 = *(void *)&v71[v48];
        unint64_t v57 = *(void *)&v71[v48 + 8];
        if (v57 == v58)
        {
          if (v56)
          {
            sub_1000AE4B0(__p, "");
            sub_10016620C("If siblings is zero, you better not have any destinations", &v84);
            sub_10016A2C4((uint64_t)__p, (uint64_t)&v84, 1);
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
            if (v79 < 0) {
              operator delete(__p[0]);
            }
            sub_10014B3FC((uint64_t)v77);
          }
        }
        else
        {
          if (v57 - v58 != v56)
          {
            sub_1000AE4B0(__p, "");
            sub_10014B844("For now, the only supported behaviour is num(sublings) == num(destination particles).", &v84);
            sub_10016A2C4((uint64_t)__p, (uint64_t)&v84, 1);
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
            if (v79 < 0) {
              operator delete(__p[0]);
            }
            sub_10014B3FC((uint64_t)v77);
          }
          sub_100249820(*v7 + v49, (double *)&v76, v56, (uint64_t)&v80, v7, v58, v57);
        }
      }
      v49 += 80;
      v48 += 16;
    }
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v80.__r_.__value_.__r.__words[2] - v80.__r_.__value_.__l.__size_) >> 4) != v80.__r_.__value_.__r.__words[0])
  {
    sub_1000AE4B0(__p, "");
    sub_1001F110C("Didn't fully resample", &v84);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&v84, 1);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (v79 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v77);
  }
  uint64_t v59 = *v7;
  uint64_t v60 = v7[1];
  if (v66 - 0x3333333333333333 * ((v60 - *v7) >> 4) > a3)
  {
    sub_100274E4C((uint64_t)v7, v59 + 80 * (a3 - v66), v60);
    uint64_t v59 = *v7;
  }
  sub_100275494((char **)v7, v59, v80.__r_.__value_.__l.__size_, v80.__r_.__value_.__r.__words[2], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v80.__r_.__value_.__r.__words[2] - v80.__r_.__value_.__l.__size_) >> 4));
  *(_OWORD *)(v65 + 8) = *(_OWORD *)v73;
  *((void *)v65 + 3) = v74;
  *uint64_t v65 = 1;
  std::string::size_type v61 = v80.__r_.__value_.__l.__size_;
  if (v80.__r_.__value_.__l.__size_)
  {
    std::string::size_type v62 = v80.__r_.__value_.__r.__words[2];
    uint64_t v63 = (void *)v80.__r_.__value_.__l.__size_;
    if (v80.__r_.__value_.__r.__words[2] != v80.__r_.__value_.__l.__size_)
    {
      do
      {
        int v64 = *(std::__shared_weak_count **)(v62 - 16);
        if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
        v62 -= 80;
      }
      while (v62 != v61);
      uint64_t v63 = (void *)v80.__r_.__value_.__l.__size_;
    }
    v80.__r_.__value_.__r.__words[2] = v61;
    operator delete(v63);
  }
  if (v71) {
    operator delete(v71);
  }
  if (v75) {
    operator delete(v75);
  }
  if (v82.__r_.__value_.__s.__data_[0] && v82.__r_.__value_.__l.__size_) {
    operator delete((void *)v82.__r_.__value_.__l.__size_);
  }
}

void sub_100274B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,_Unwind_Exception *exception_object,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  sub_100274FD0((uint64_t)&a40);
  if (a16)
  {
    operator delete(a16);
    unint64_t v47 = a19;
    if (!a19)
    {
LABEL_5:
      uint64_t v48 = exception_object;
      if (!exception_object) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v47 = a19;
    if (!a19) {
      goto LABEL_5;
    }
  }
  operator delete(v47);
  uint64_t v48 = exception_object;
  if (!exception_object)
  {
LABEL_7:
    if (*(unsigned char *)(v45 - 184))
    {
      uint64_t v49 = *(void **)(v45 - 176);
      if (v49)
      {
        operator delete(v49);
        _Unwind_Resume(a1);
      }
    }
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(v48);
  goto LABEL_7;
}

void sub_100274CB8(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x333333333333334) {
    sub_1000A9108();
  }
  double v4 = a1[1];
  uint64_t v5 = 80 * a2;
  uint64_t v6 = (char *)operator new(80 * a2);
  long double v7 = &v6[v5];
  double v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  do
  {
    double v10 = &v8[v9];
    *((_OWORD *)v10 - 5) = *(_OWORD *)&v4[v9 - 80];
    long long v11 = *(_OWORD *)&v4[v9 - 64];
    long long v12 = *(_OWORD *)&v4[v9 - 48];
    *((_WORD *)v10 - 16) = *(_WORD *)&v4[v9 - 32];
    *((_OWORD *)v10 - 4) = v11;
    *((_OWORD *)v10 - 3) = v12;
    uint64_t v13 = *(void *)&v4[v9 - 16];
    *((void *)v10 - 3) = *(void *)&v4[v9 - 24];
    *((void *)v10 - 2) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v10 - 1) = *(void *)&v4[v9 - 8];
    v9 -= 80;
  }
  while (&v4[v9] != v2);
  unint64_t v14 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v14)
  {
    do
    {
      unint64_t v15 = (std::__shared_weak_count *)*((void *)v2 - 2);
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      v2 -= 80;
    }
    while (v2 != v14);
    uint64_t v2 = v14;
  }
  if (v2)
  {
LABEL_16:
    operator delete(v2);
  }
}

uint64_t sub_100274E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    if (a3 == v6)
    {
      uint64_t v8 = a2;
      if (a3 == a2)
      {
LABEL_16:
        *(void *)(a1 + 8) = v8;
        return a2;
      }
    }
    else
    {
      uint64_t v7 = 16 * ((a3 - a2) >> 4);
      uint64_t v8 = a2;
      do
      {
        uint64_t v9 = (void *)(v8 + v7);
        __int16 v10 = *(_WORD *)(v8 + v7 + 48);
        long long v12 = *(_OWORD *)(v8 + v7 + 16);
        long long v11 = *(_OWORD *)(v8 + v7 + 32);
        *(_OWORD *)uint64_t v8 = *(_OWORD *)(v8 + v7);
        *(_OWORD *)(v8 + 16) = v12;
        *(_OWORD *)(v8 + 32) = v11;
        *(_WORD *)(v8 + 48) = v10;
        long long v13 = *(_OWORD *)(v8 + v7 + 56);
        v9[7] = 0;
        v9[8] = 0;
        unint64_t v14 = *(std::__shared_weak_count **)(v8 + 64);
        *(_OWORD *)(v8 + 56) = v13;
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        *(void *)(v8 + 72) = v9[9];
        v8 += 80;
      }
      while (v8 + v7 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5 == v8) {
        goto LABEL_16;
      }
    }
    do
    {
      unint64_t v15 = *(std::__shared_weak_count **)(v5 - 16);
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      v5 -= 80;
    }
    while (v5 != v8);
    goto LABEL_16;
  }
  return a2;
}

uint64_t sub_100274FD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    double v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 16);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      double v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_100275084(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    double v3 = *(double *)(v1 + 8);
    for (uint64_t i = v1 + 16; i != v2; i += 16)
      sub_100273050(v3, *(double *)(i + 8));
  }
}

void sub_100275178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, std::invalid_argument a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::invalid_argument::~invalid_argument(&a13);
  _Unwind_Resume(a1);
}

void sub_10027519C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::invalid_argument a13)
{
  std::invalid_argument::~invalid_argument(&a13);
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void sub_1002751B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

long double sub_1002751CC@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100275084(a1);
  uint64_t v4 = *a1;
  uint64_t v5 = (double *)a1[1];
  uint64_t v6 = *(void *)(v4 + 8);
  long double v7 = 0.0;
  if ((double *)v4 == v5)
  {
    double v13 = -INFINITY;
  }
  else
  {
    uint64_t v8 = (double *)v4;
    double v9 = -INFINITY;
    __int16 v10 = (double *)v4;
    do
    {
      double v11 = *v10;
      v10 += 2;
      double v12 = v11;
      if (v11 > v9) {
        double v9 = v12;
      }
    }
    while (v10 != v5);
    double v13 = -INFINITY;
    if (v9 != -INFINITY)
    {
      unint64_t v14 = (unint64_t)v5 - v4 - 16;
      long double v7 = 0.0;
      if (v14 < 0x10) {
        goto LABEL_17;
      }
      uint64_t v15 = (v14 >> 4) + 1;
      uint64_t v8 = (double *)(v4 + 16 * (v15 & 0x1FFFFFFFFFFFFFFELL));
      int v16 = (double *)(v4 + 16);
      uint64_t v17 = v15 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        double v18 = *(v16 - 2);
        double v19 = *v16;
        v16 += 4;
        double v20 = exp(v18 - v9);
        long double v7 = v7 + v20 + exp(v19 - v9);
        v17 -= 2;
      }
      while (v17);
      if (v15 != (v15 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_17:
        do
        {
          double v21 = *v8;
          v8 += 2;
          long double v7 = v7 + exp(v21 - v9);
        }
        while (v8 != v5);
      }
      double v13 = v9;
    }
  }
  long double result = v13 + log(v7);
  *(long double *)a2 = result;
  *(void *)(a2 + 8) = v6;
  return result;
}

long double sub_100275308@<D0>(double *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  sub_100273050(a1[1], a2[1]);
  uint64_t v6 = *((void *)a1 + 1);
  double v7 = *a2;
  if (*a1 >= *a2) {
    double v8 = *a1;
  }
  else {
    double v8 = *a2;
  }
  if (v8 == -INFINITY)
  {
    long double v10 = 0.0;
  }
  else
  {
    double v9 = exp(*a1 - v8);
    long double v10 = v9 + exp(v7 - v8);
  }
  long double result = v8 + log(v10);
  *(long double *)a3 = result;
  *(void *)(a3 + 8) = v6;
  return result;
}

double *sub_1002753A0(double *result, double a2, double a3)
{
  void *result = a2;
  result[1] = a3;
  return result;
}

double sub_1002753A8(double *a1, double a2)
{
  double result = *a1 + a2;
  *a1 = result;
  return result;
}

double sub_1002753B8(double *a1)
{
  return *a1 + a1[1];
}

void sub_1002753C4(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

std::string *sub_1002753F4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100275428(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_100275444@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100275478(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100275494(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 80;
  uint64_t v7 = (uint64_t)&(*a1)[80 * v6];
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  unint64_t v11 = (unint64_t)a1[1];
  double v12 = a1[2];
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v12[-v11] >> 4)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v7) >> 4)) >= a5)
    {
      uint64_t v17 = a3 + 80 * a5;
      double v18 = a1[1];
    }
    else
    {
      uint64_t v17 = a3 + 16 * ((uint64_t)(v11 - v7) >> 4);
      double v18 = a1[1];
      if (v17 != a4)
      {
        uint64_t v19 = a3 + 16 * ((uint64_t)(v11 - v7) >> 4);
        double v20 = a1[1];
        do
        {
          *(_OWORD *)double v20 = *(_OWORD *)v19;
          long long v21 = *(_OWORD *)(v19 + 16);
          long long v22 = *(_OWORD *)(v19 + 32);
          *((_WORD *)v20 + 24) = *(_WORD *)(v19 + 48);
          *((_OWORD *)v20 + 1) = v21;
          *((_OWORD *)v20 + 2) = v22;
          *(_OWORD *)(v20 + 56) = *(_OWORD *)(v19 + 56);
          *(void *)(v19 + 56) = 0;
          *(void *)(v19 + 64) = 0;
          *((void *)v20 + 9) = *(void *)(v19 + 72);
          v18 += 80;
          v19 += 80;
          v20 += 80;
        }
        while (v19 != a4);
      }
      a1[1] = v18;
      if ((uint64_t)(v11 - v7) < 1) {
        return v7;
      }
    }
    uint64_t v23 = v7 + 80 * a5;
    unint64_t v24 = (unint64_t)&v18[-80 * a5];
    unint64_t v25 = v18;
    if (v24 < v11)
    {
      unint64_t v25 = v18;
      do
      {
        *(_OWORD *)unint64_t v25 = *(_OWORD *)v24;
        long long v26 = *(_OWORD *)(v24 + 16);
        long long v27 = *(_OWORD *)(v24 + 32);
        *((_WORD *)v25 + 24) = *(_WORD *)(v24 + 48);
        *((_OWORD *)v25 + 1) = v26;
        *((_OWORD *)v25 + 2) = v27;
        *(_OWORD *)(v25 + 56) = *(_OWORD *)(v24 + 56);
        *(void *)(v24 + 56) = 0;
        *(void *)(v24 + 64) = 0;
        *((void *)v25 + 9) = *(void *)(v24 + 72);
        v25 += 80;
        v24 += 80;
      }
      while (v24 < v11);
    }
    a1[1] = v25;
    if (v18 != (char *)v23)
    {
      uint64_t v28 = 0;
      uint64_t v29 = &v5[80 * v6 + 16 * ((uint64_t)&v18[-v23] >> 4)];
      uint64_t v30 = -16 * ((uint64_t)&v18[-v23] >> 4);
      do
      {
        unint64_t v31 = &v29[v28];
        uint64_t v32 = &v18[v28];
        *((_OWORD *)v32 - 5) = *(_OWORD *)&v29[v28 - 80];
        long long v33 = *(_OWORD *)&v29[v28 - 64];
        long long v34 = *(_OWORD *)&v29[v28 - 48];
        *((_WORD *)v32 - 16) = *(_WORD *)&v29[v28 - 32];
        *((_OWORD *)v32 - 4) = v33;
        *((_OWORD *)v32 - 3) = v34;
        long long v35 = *(_OWORD *)&v29[v28 - 24];
        *((void *)v31 - 3) = 0;
        *((void *)v31 - 2) = 0;
        uint64_t v36 = *(std::__shared_weak_count **)&v18[v28 - 16];
        *(_OWORD *)(v32 - 24) = v35;
        if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
        *((void *)v32 - 1) = *((void *)v31 - 1);
        v28 -= 80;
      }
      while (v30 != v28);
    }
    if (v17 != v9)
    {
      uint64_t v37 = v7;
      do
      {
        *(_OWORD *)uint64_t v37 = *(_OWORD *)v9;
        long long v38 = *(_OWORD *)(v9 + 16);
        long long v39 = *(_OWORD *)(v9 + 32);
        *(_WORD *)(v37 + 48) = *(_WORD *)(v9 + 48);
        *(_OWORD *)(v37 + 16) = v38;
        *(_OWORD *)(v37 + 32) = v39;
        long long v40 = *(_OWORD *)(v9 + 56);
        *(void *)(v9 + 56) = 0;
        *(void *)(v9 + 64) = 0;
        unint64_t v41 = *(std::__shared_weak_count **)(v37 + 64);
        *(_OWORD *)(v37 + 56) = v40;
        if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
        *(void *)(v37 + 72) = *(void *)(v9 + 72);
        v9 += 80;
        v37 += 80;
      }
      while (v9 != v17);
    }
    return v7;
  }
  unint64_t v13 = a5 - 0x3333333333333333 * ((uint64_t)(v11 - (void)v5) >> 4);
  if (v13 > 0x333333333333333) {
    sub_1000A9108();
  }
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - v5) >> 4);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x199999999999999) {
    unint64_t v15 = 0x333333333333333;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 > 0x333333333333333) {
      sub_1000A6A10();
    }
    int v16 = (char *)operator new(80 * v15);
  }
  else
  {
    int v16 = 0;
  }
  uint64_t v42 = &v16[80 * v6];
  unint64_t v43 = &v16[80 * v15];
  long double v44 = &v42[80 * a5];
  uint64_t v45 = v42;
  do
  {
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v9;
    long long v46 = *(_OWORD *)(v9 + 16);
    long long v47 = *(_OWORD *)(v9 + 32);
    *((_WORD *)v45 + 24) = *(_WORD *)(v9 + 48);
    *((_OWORD *)v45 + 1) = v46;
    *((_OWORD *)v45 + 2) = v47;
    *(_OWORD *)(v45 + 56) = *(_OWORD *)(v9 + 56);
    *(void *)(v9 + 56) = 0;
    *(void *)(v9 + 64) = 0;
    *((void *)v45 + 9) = *(void *)(v9 + 72);
    v45 += 80;
    v9 += 80;
  }
  while (v45 != v44);
  uint64_t v48 = *a1;
  uint64_t v49 = &v16[80 * v6];
  if (*a1 != (char *)v7)
  {
    uint64_t v50 = 80 * v6;
    do
    {
      unint64_t v51 = &v16[v50];
      *((_OWORD *)v51 - 5) = *(_OWORD *)&v5[v50 - 80];
      long long v52 = *(_OWORD *)&v5[v50 - 64];
      long long v53 = *(_OWORD *)&v5[v50 - 48];
      *((_WORD *)v51 - 16) = *(_WORD *)&v5[v50 - 32];
      *((_OWORD *)v51 - 4) = v52;
      *((_OWORD *)v51 - 3) = v53;
      uint64_t v54 = *(void *)&v5[v50 - 16];
      *((void *)v51 - 3) = *(void *)&v5[v50 - 24];
      *((void *)v51 - 2) = v54;
      if (v54) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v51 - 1) = *(void *)&v5[v50 - 8];
      v16 -= 80;
      v5 -= 80;
    }
    while (&v5[v50] != v48);
    uint64_t v49 = &v16[80 * v6];
  }
  uint64_t v55 = a1[1];
  if (v55 != (char *)v7)
  {
    do
    {
      *(_OWORD *)long double v44 = *(_OWORD *)v7;
      long long v56 = *(_OWORD *)(v7 + 16);
      long long v57 = *(_OWORD *)(v7 + 32);
      *((_WORD *)v44 + 24) = *(_WORD *)(v7 + 48);
      *((_OWORD *)v44 + 1) = v56;
      *((_OWORD *)v44 + 2) = v57;
      uint64_t v58 = *(void *)(v7 + 64);
      *((void *)v44 + 7) = *(void *)(v7 + 56);
      *((void *)v44 + 8) = v58;
      if (v58) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)v44 + 9) = *(void *)(v7 + 72);
      v44 += 80;
      v7 += 80;
    }
    while ((char *)v7 != v55);
    uint64_t v7 = (uint64_t)a1[1];
  }
  uint64_t v59 = *a1;
  *a1 = v49;
  a1[1] = v44;
  for (a1[2] = v43; (char *)v7 != v59; v7 -= 80)
  {
    uint64_t v60 = *(std::__shared_weak_count **)(v7 - 16);
    if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v59) {
    operator delete(v59);
  }
  return (uint64_t)v42;
}

void sub_1002759A0()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100275A18()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

long double sub_100275A90(double a1, double a2)
{
  double v2 = a2 - a1;
  if (vabdd_f64(a2, a1) < 50.0) {
    return dbl_10047F128[(unint64_t)((v2 + 50.0) * 100.0)];
  }
  double v4 = __exp10(v2 / 10.0) * -0.5;
  long double v5 = v4 * *(double *)&qword_10047E0A0;
  double v6 = exp(v4 * *(double *)&qword_10047E0A8);
  return v6 - exp(v5);
}

void sub_100275B30()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100275BA8()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_100275C20()
{
  double v0 = __exp10(0.05);
  qword_10047E0A0 = *(void *)&v0;
  double v1 = __exp10(-0.05);
  qword_10047E0A8 = *(void *)&v1;
  double v2 = -50.0;
  do
  {
    double v3 = __exp10(v2 / 10.0) * -0.5;
    long double v4 = v0 * v3;
    double v5 = exp(v1 * v3);
    dbl_10047F128[(unint64_t)((v2 + 50.0) * 100.0)] = v5 - exp(v4);
    double v2 = v2 + 0.01;
  }
  while (v2 < 50.0);
}

void *sub_100275D08(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_1001A763C((uint64_t)(a1 + 1), a3);
  return a1;
}

void *sub_100275D38(void *result)
{
  if (*result == -1)
  {
    __cxa_allocate_exception(0x40uLL);
    sub_1000AE4B0(&v2, "Attempt to utilize an improperly initialized TimestampedMagneticNorthLocal");
    std::runtime_error::runtime_error(&v3, &v2);
    v3.__vftable = (std::runtime_error_vtbl *)&off_100458B70;
    sub_10018E868((uint64_t)v1);
    sub_100149B48(&v3, (uint64_t)"void TimestampedMagneticNorthLocal::validateInitialized() const", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/timestamped_magnetic_north_local.cpp", 36, (uint64_t)v1);
  }
  return result;
}

void sub_100275E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::runtime_error a18)
{
  if (__p) {
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a18);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

long double sub_100275E80(uint64_t a1, uint64_t a2)
{
  return 3.14159265 - atan2(*(long double *)(a1 + 24), *(long double *)(a1 + 16)) + *(double *)(a2 + 80);
}

uint64_t sub_100275EC4(void *a1)
{
  return *a1;
}

void *sub_100275EEC(void *a1)
{
  return a1 + 1;
}

void sub_100275F14()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100275F8C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void *sub_100276004(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *a1 = off_100463140;
  a1[1] = v5;
  a1[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100233E30(a1 + 3, a3);
  return a1;
}

void sub_100276068(_Unwind_Exception *exception_object)
{
  std::runtime_error v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_1003A4A40(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100276080(void *a1)
{
  *a1 = off_100463140;
  uint64_t v2 = a1[3];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 168;
      do
      {
        int v7 = *(_DWORD *)(v3 - 176);
        if (v7 == v7 >> 31)
        {
          if (*(unsigned char *)(v3 - 128)) {
            *(unsigned char *)(v3 - 128) = 0;
          }
        }
        else
        {
          uint64_t v6 = *(void *)(v3 - 168);
          if (v7 < 0)
          {
            if (v6) {
              (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
            }
          }
          else
          {
            (*(void (**)(uint64_t))v6)(v3 - 168);
          }
        }
        v3 -= 208;
        v5 -= 208;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  double v8 = (std::__shared_weak_count *)a1[2];
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_1002761E0(void *a1)
{
  sub_100276080(a1);

  operator delete();
}

uint64_t sub_100276218(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v6 = *a2;
  uint64_t v4 = a2 + 2;
  int v5 = v6;
  int v7 = v6 >> 31;
  if (v6 >> 31 == v6)
  {
    *(void *)&long long v10 = *(void *)v4;
    int v7 = v5;
  }
  else
  {
    long long v10 = *(_OWORD *)v4;
    int v11 = v4[4];
  }
  int v9 = v7 ^ v5;
  return (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v3 + 16))(v3, &v9, a1 + 24);
}

void sub_1002762D4()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10027634C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_1002763C4(int *a1@<X0>, int **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = a1[4] + 3;
  while (sub_10028D020(a1) >= v4)
  {
    int v5 = sub_10028CF40((uint64_t)a1, a1[4]);
    if (sub_10028CFF0(a1))
    {
      int v6 = sub_10028CF40((uint64_t)a1, 1);
      unint64_t v7 = sub_10028D020(a1);
      if (v6)
      {
        if (v7 >= 6)
        {
          int v8 = 5;
          int v9 = 6;
LABEL_10:
          int v10 = sub_10028CF40((uint64_t)a1, v9) + v8;
          if (v10 >= 1)
          {
            int v11 = *a2;
            double v12 = a2[1];
            uint64_t v13 = (char *)v12 - (char *)*a2;
            uint64_t v14 = v13 >> 2;
            if ((unint64_t)v13 >= 5 && (unint64_t v15 = (char *)&v11[v14], *((_DWORD *)v15 - 2) == v5))
            {
              *((_DWORD *)v15 - 1) += v10;
            }
            else
            {
              int v16 = a2[2];
              if (v12 >= v16)
              {
                unint64_t v18 = v14 + 1;
                if ((unint64_t)(v14 + 1) >> 62) {
                  goto LABEL_61;
                }
                uint64_t v19 = (char *)v16 - (char *)v11;
                if (v19 >> 1 > v18) {
                  unint64_t v18 = v19 >> 1;
                }
                if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v20 = v18;
                }
                if (v20)
                {
                  if (v20 >> 62) {
                    goto LABEL_62;
                  }
                  unint64_t v21 = v20;
                  long long v22 = operator new(4 * v20);
                  unint64_t v20 = v21;
                  uint64_t v23 = (int *)&v22[4 * v14];
                  *uint64_t v23 = v5;
                  uint64_t v17 = v23 + 1;
                  if (v12 == v11) {
                    goto LABEL_33;
                  }
LABEL_27:
                  unint64_t v24 = (char *)(v12 - 1) - (char *)v11;
                  if (v24 < 0x2C) {
                    goto LABEL_65;
                  }
                  if ((char *)v12 - v22 - (v13 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
                    goto LABEL_65;
                  }
                  uint64_t v25 = (v24 >> 2) + 1;
                  uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
                  long long v27 = &v12[v26 / 0xFFFFFFFFFFFFFFFCLL];
                  uint64_t v23 = (int *)((char *)v23 - v26);
                  uint64_t v28 = &v22[4 * v14 - 16];
                  uint64_t v29 = v12 - 4;
                  uint64_t v30 = v25 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v31 = *(_OWORD *)v29;
                    *(v28 - 1) = *((_OWORD *)v29 - 1);
                    *uint64_t v28 = v31;
                    v28 -= 2;
                    v29 -= 8;
                    v30 -= 8;
                  }
                  while (v30);
                  double v12 = v27;
                  if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_65:
                    do
                    {
                      int v32 = *--v12;
                      *--uint64_t v23 = v32;
                    }
                    while (v12 != v11);
                  }
                }
                else
                {
                  long long v22 = 0;
                  uint64_t v23 = (int *)(4 * v14);
                  *(_DWORD *)(4 * v14) = v5;
                  uint64_t v17 = (int *)(4 * v14 + 4);
                  if (v12 != v11) {
                    goto LABEL_27;
                  }
                }
LABEL_33:
                int v16 = (int *)&v22[4 * v20];
                *a2 = v23;
                a2[1] = v17;
                a2[2] = v16;
                if (v11)
                {
                  operator delete(v11);
                  int v16 = a2[2];
                }
                goto LABEL_35;
              }
              *double v12 = v5;
              uint64_t v17 = v12 + 1;
LABEL_35:
              a2[1] = v17;
              if (v17 < v16)
              {
                *uint64_t v17 = v10;
                a2[1] = v17 + 1;
              }
              else
              {
                long long v33 = *a2;
                uint64_t v34 = (char *)v17 - (char *)*a2;
                uint64_t v35 = v34 >> 2;
                unint64_t v36 = (v34 >> 2) + 1;
                if (v36 >> 62) {
LABEL_61:
                }
                  sub_1000A9108();
                uint64_t v37 = (char *)v16 - (char *)v33;
                if (v37 >> 1 > v36) {
                  unint64_t v36 = v37 >> 1;
                }
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v38 = v36;
                }
                if (v38)
                {
                  if (v38 >> 62) {
LABEL_62:
                  }
                    sub_1000A6A10();
                  long long v39 = operator new(4 * v38);
                  long long v40 = (int *)&v39[4 * v35];
                  int *v40 = v10;
                  uint64_t v41 = (uint64_t)(v40 + 1);
                  if (v17 == v33) {
                    goto LABEL_55;
                  }
                }
                else
                {
                  long long v39 = 0;
                  long long v40 = (int *)(4 * v35);
                  *(_DWORD *)(4 * v35) = v10;
                  uint64_t v41 = 4 * v35 + 4;
                  if (v17 == v33) {
                    goto LABEL_55;
                  }
                }
                unint64_t v42 = (char *)(v17 - 1) - (char *)v33;
                if (v42 >= 0x2C)
                {
                  if ((unint64_t)((char *)v17 - v39 - v34) >= 0x20)
                  {
                    uint64_t v44 = (v42 >> 2) + 1;
                    uint64_t v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
                    unint64_t v43 = &v17[v45 / 0xFFFFFFFFFFFFFFFCLL];
                    long long v40 = (int *)((char *)v40 - v45);
                    long long v46 = &v39[4 * v35 - 16];
                    long long v47 = v17 - 4;
                    uint64_t v48 = v44 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v49 = *(_OWORD *)v47;
                      *(v46 - 1) = *((_OWORD *)v47 - 1);
                      _OWORD *v46 = v49;
                      v46 -= 2;
                      v47 -= 8;
                      v48 -= 8;
                    }
                    while (v48);
                    if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8)) {
                      goto LABEL_55;
                    }
                  }
                  else
                  {
                    unint64_t v43 = v17;
                  }
                }
                else
                {
                  unint64_t v43 = v17;
                }
                do
                {
                  int v50 = *--v43;
                  *--long long v40 = v50;
                }
                while (v43 != v33);
LABEL_55:
                *a2 = v40;
                a2[1] = (int *)v41;
                a2[2] = (int *)&v39[4 * v38];
                if (v33) {
                  operator delete(v33);
                }
                a2[1] = (int *)v41;
              }
            }
          }
        }
      }
      else if (v7 >= 2)
      {
        int v8 = 1;
        int v9 = 2;
        goto LABEL_10;
      }
    }
  }

  sub_1001F0D88((uint64_t)a2);
}

void sub_100276768(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_100276794(uint64_t a1)
{
  *(void *)a1 = -1;
  *(void *)(a1 + 8) = -1;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(a1 + 16) = result;
  return result;
}

double sub_1002767A8(uint64_t a1)
{
  float v1 = *(float *)(a1 + 20);
  if (v1 == -1.0)
  {
    sub_1000AE4B0(v4, "");
    sub_10027692C("numOfDaysBeforeRegionalTileRedownload is uninitilized", &__p);
    sub_10016A2C4((uint64_t)v4, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
    sub_1000D11E0((uint64_t)&v3);
  }
  return v1;
}

void sub_100276898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1002768DC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100276910(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10027692C@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_100276960(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10027697C()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002769F4()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

BOOL sub_100276A6C(unsigned int **a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    sub_10006F1A8((uint64_t)&v13, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    unint64_t v4 = a1[1];
    uint64_t v5 = (uint64_t)*a1 + 10 * (void)v4;
    if (!v4) {
      goto LABEL_10;
    }
    unint64_t v6 = v13 | ((unint64_t)v14 << 32);
    do
    {
      unint64_t v7 = (unsigned int *)((unint64_t)v4 >> 1);
      int v8 = (char *)v3 + 10 * ((unint64_t)v4 >> 1);
      uint64_t v9 = *((unsigned __int16 *)v8 + 2);
      unsigned int v11 = *(_DWORD *)v8;
      int v10 = (unsigned int *)(v8 + 10);
      unint64_t v4 = (unsigned int *)((char *)v4 + ~((unint64_t)v4 >> 1));
      if (v6 <= (v11 | (unint64_t)(v9 << 32))) {
        unint64_t v4 = v7;
      }
      else {
        uint64_t v3 = v10;
      }
    }
    while (v4);
    if (v3 == (unsigned int *)v5 || (*v3 | ((unint64_t)*((unsigned __int16 *)v3 + 2) << 32)) > v6) {
LABEL_10:
    }
      uint64_t v3 = (unsigned int *)v5;
    return v3 != (unsigned int *)v5;
  }
  else
  {
    sub_10027D144((int **)a1 + 3, (_DWORD *)a2, (int **)&v15);
    return v15 != &a1[3][10 * (void)a1[4]];
  }
}

uint64_t sub_100276B54(unsigned int **a1, uint64_t a2)
{
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    sub_10006F1A8((uint64_t)&v26, *(void *)(a2 + 8));
    unint64_t v4 = a1[1];
    if (!v4) {
      goto LABEL_10;
    }
    uint64_t v5 = *a1;
    uint64_t v6 = (uint64_t)*a1 + 10 * (void)v4;
    unint64_t v7 = LODWORD(v26.__r_.__value_.__l.__data_) | ((unint64_t)WORD2(v26.__r_.__value_.__r.__words[0]) << 32);
    do
    {
      int v8 = (unsigned int *)((unint64_t)v4 >> 1);
      uint64_t v9 = (char *)v5 + 10 * ((unint64_t)v4 >> 1);
      uint64_t v10 = *((unsigned __int16 *)v9 + 2);
      unsigned int v12 = *(_DWORD *)v9;
      unsigned int v11 = (unsigned int *)(v9 + 10);
      unint64_t v4 = (unsigned int *)((char *)v4 + ~((unint64_t)v4 >> 1));
      if (v7 <= (v12 | (unint64_t)(v10 << 32))) {
        unint64_t v4 = v8;
      }
      else {
        uint64_t v5 = v11;
      }
    }
    while (v4);
    if (v5 == (unsigned int *)v6 || (*v5 | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32)) > v7)
    {
LABEL_10:
      sub_1000AE4B0(v24, "");
      sub_10016620C("Attemping to retrieve offset for non-existent mac address", &v26);
      sub_10016A2C4((uint64_t)v24, (uint64_t)&v26, 1);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v26.__r_.__value_.__l.__data_);
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_12;
        }
      }
      else if ((v25 & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v24[0]);
LABEL_12:
      sub_1000D11E0((uint64_t)&__p);
    }
  }
  else
  {
    sub_10027D144((int **)a1 + 3, (_DWORD *)a2, (int **)&v26);
    if ((unsigned int *)v26.__r_.__value_.__l.__data_ == &a1[3][10 * (void)a1[4]]) {
      goto LABEL_10;
    }
  }
  if (*(_DWORD *)a2 == *(int *)a2 >> 31)
  {
    sub_10006F1A8((uint64_t)&v26, *(void *)(a2 + 8));
    unsigned int v13 = a1[1];
    if (!v13) {
      goto LABEL_29;
    }
    unsigned __int16 v14 = *a1;
    uint64_t v15 = (uint64_t)*a1 + 10 * (void)v13;
    unint64_t v16 = LODWORD(v26.__r_.__value_.__l.__data_) | ((unint64_t)WORD2(v26.__r_.__value_.__r.__words[0]) << 32);
    do
    {
      uint64_t v17 = (unsigned int *)((unint64_t)v13 >> 1);
      unint64_t v18 = (char *)v14 + 10 * ((unint64_t)v13 >> 1);
      uint64_t v19 = *((unsigned __int16 *)v18 + 2);
      unsigned int v21 = *(_DWORD *)v18;
      unint64_t v20 = (unsigned int *)(v18 + 10);
      unsigned int v13 = (unsigned int *)((char *)v13 + ~((unint64_t)v13 >> 1));
      if (v16 <= (v21 | (unint64_t)(v19 << 32))) {
        unsigned int v13 = v17;
      }
      else {
        unsigned __int16 v14 = v20;
      }
    }
    while (v13);
    if (v14 == (unsigned int *)v15 || (*v14 | ((unint64_t)*((unsigned __int16 *)v14 + 2) << 32)) > v16) {
LABEL_29:
    }
      sub_1002782B4((uint64_t)"flat_map::at key not found");
    return *(unsigned int *)((char *)v14 + 6);
  }
  else
  {
    sub_10027D144((int **)a1 + 3, (_DWORD *)a2, (int **)&v26);
    if ((unsigned int *)v26.__r_.__value_.__l.__data_ == &a1[3][10 * (void)a1[4]]) {
      sub_1002782B4((uint64_t)"flat_map::at key not found");
    }
    return *(unsigned int *)(v26.__r_.__value_.__r.__words[0] + 32);
  }
}

void sub_100276DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100276E08(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_100276E4C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (qword_10047BED8 == -1)
  {
    int v8 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BED8, &stru_100463190);
  int v8 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    uint64_t v9 = (uint64_t)(a1[1] - *a1) >> 5;
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "searching ApRssiMap stream for macs, count, %zu", buf, 0xCu);
  }
LABEL_4:
  int v100 = 0;
  unint64_t v101 = 0;
  unint64_t v102 = 0;
  uint64_t v10 = (_DWORD *)*a1;
  unsigned int v11 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v11)
  {
    while (1)
    {
      unsigned int v13 = (long long *)(v10 + 2);
      if (*v10 == (int)*v10 >> 31) {
        break;
      }
      long long v14 = *v13;
      int v107 = v10[6];
      *(_OWORD *)&uint8_t buf[8] = v14;
      *(_DWORD *)std::string buf = *v10 ^ ((int)*v10 >> 31);
      if (*(_DWORD *)buf == *(int *)buf >> 31) {
        goto LABEL_14;
      }
      sub_10027D144((int **)(a2 + 24), buf, (int **)&v108);
      if (v108.__r_.__value_.__r.__words[0] != *(void *)(a2 + 24) + 40 * *(void *)(a2 + 32)) {
        goto LABEL_22;
      }
LABEL_8:
      v10 += 8;
      if (v10 == v11)
      {
        uint64_t v29 = (int *)v100;
        uint64_t v30 = v101;
        goto LABEL_29;
      }
    }
    *(void *)&uint8_t buf[8] = *(void *)v13;
    *(_DWORD *)std::string buf = 0;
LABEL_14:
    sub_10006F1A8((uint64_t)&v108, *(unint64_t *)&buf[8]);
    unint64_t v15 = *(void *)(a2 + 8);
    if (!v15) {
      goto LABEL_8;
    }
    unint64_t v16 = *(unsigned int **)a2;
    uint64_t v17 = *(void *)a2 + 10 * v15;
    unint64_t v18 = LODWORD(v108.__r_.__value_.__l.__data_) | ((unint64_t)WORD2(v108.__r_.__value_.__r.__words[0]) << 32);
    do
    {
      unint64_t v19 = v15 >> 1;
      unint64_t v20 = (char *)v16 + 10 * (v15 >> 1);
      uint64_t v21 = *((unsigned __int16 *)v20 + 2);
      unsigned int v23 = *(_DWORD *)v20;
      long long v22 = (unsigned int *)(v20 + 10);
      v15 += ~(v15 >> 1);
      if (v18 <= (v23 | (unint64_t)(v21 << 32))) {
        unint64_t v15 = v19;
      }
      else {
        unint64_t v16 = v22;
      }
    }
    while (v15);
    if (v16 == (unsigned int *)v17 || (*v16 | ((unint64_t)*((unsigned __int16 *)v16 + 2) << 32)) > v18) {
      goto LABEL_8;
    }
LABEL_22:
    unint64_t v24 = v101;
    if ((unint64_t)v101 >= v102)
    {
      unsigned int v12 = sub_1001E77C4(&v100, (int *)buf);
    }
    else
    {
      char v25 = v101 + 2;
      int v26 = *(_DWORD *)buf;
      int v27 = *(int *)buf >> 31;
      if (*(int *)buf >> 31 == *(_DWORD *)buf)
      {
        *(void *)char v25 = *(void *)&buf[8];
        int v27 = v26;
      }
      else
      {
        long long v28 = *(_OWORD *)&buf[8];
        v101[6] = v107;
        *(_OWORD *)char v25 = v28;
      }
      *unint64_t v24 = v27 ^ v26;
      unsigned int v12 = v24 + 8;
    }
    unint64_t v101 = v12;
    goto LABEL_8;
  }
  uint64_t v30 = 0;
  uint64_t v29 = 0;
LABEL_29:
  unint64_t v31 = 126 - 2 * __clz(((char *)v30 - (char *)v29) >> 5);
  *(void *)std::string buf = a2;
  if (v30 == v29) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  sub_10027D510((uint64_t)v29, v30, (unsigned int ***)buf, v32, 1);
  long long v33 = (int *)sub_10028013C((int *)v100, v101);
  uint64_t v35 = (int *)v100;
  uint64_t v34 = v101;
  if (v101 != v33)
  {
    unint64_t v36 = (char *)((char *)v101 - (char *)v33);
    if ((char *)v100 + (((char *)v33 - (unsigned char *)v100) & 0xFFFFFFFFFFFFFFE0) + (char *)v101 - (char *)v33 == (char *)v101)
    {
      long long v33 = (int *)((char *)v100 + (((char *)v33 - (unsigned char *)v100) & 0xFFFFFFFFFFFFFFE0));
    }
    else
    {
      uint64_t v37 = (char *)v100 + 32 * (((char *)v33 - (unsigned char *)v100) >> 5) + 8;
      do
      {
        long long v39 = &v36[(void)v37];
        int v40 = *((_DWORD *)v37 - 2);
        int v41 = *(_DWORD *)&v36[(void)v37 - 8];
        if (v40 == v41)
        {
          if (v40 == v40 >> 31)
          {
            *(void *)uint64_t v37 = *(void *)v39;
          }
          else
          {
            long long v38 = *(_OWORD *)v39;
            *((_DWORD *)v37 + 4) = *((_DWORD *)v39 + 4);
            *(_OWORD *)uint64_t v37 = v38;
          }
        }
        else
        {
          int v42 = v41 ^ (v41 >> 31);
          if (v42)
          {
            long long v43 = *(_OWORD *)v39;
            *((_DWORD *)v37 + 4) = *((_DWORD *)v39 + 4);
            *(_OWORD *)uint64_t v37 = v43;
            *((_DWORD *)v37 - 2) = v42;
          }
          else
          {
            *(void *)uint64_t v37 = *(void *)v39;
            *((_DWORD *)v37 - 2) = 0;
          }
        }
        v37 += 32;
      }
      while ((int *)&v36[(void)v37 - 8] != v34);
      long long v33 = (int *)(v37 - 8);
    }
    unint64_t v101 = v33;
  }
  std::string v97 = 0;
  long long v98 = 0;
  std::string v99 = 0;
  unint64_t v44 = (char *)v33 - (char *)v35;
  if (v33 == v35)
  {
    std::string v95 = 0;
    uint64_t v96 = 0;
    std::string v94 = &v95;
  }
  else
  {
    if ((v44 & 0x8000000000000000) != 0) {
      sub_1000A9108();
    }
    std::string v97 = operator new(v44 >> 3);
    std::string v99 = (char *)v97 + 4 * ((uint64_t)v44 >> 5);
    bzero(v97, v44 >> 3);
    uint64_t v45 = 0;
    unint64_t v46 = 0;
    long long v98 = (char *)v97 + (v44 >> 3);
    do
    {
      long long v47 = (char *)v97;
      *((_DWORD *)v97 + v46++) = sub_100276B54((unsigned int **)a2, (uint64_t)&v35[v45]);
      uint64_t v35 = (int *)v100;
      v45 += 8;
    }
    while (v46 < ((char *)v101 - (unsigned char *)v100) >> 5);
    uint64_t v48 = v98;
    std::string v95 = 0;
    uint64_t v96 = 0;
    std::string v94 = &v95;
    if (v98 != v47)
    {
      uint64_t v49 = 0;
      for (unint64_t i = 0; i < (v48 - v47) >> 2; ++i)
      {
        uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 40))(a3);
        if ((*(uint64_t (**)(uint64_t, void))(*(void *)a3 + 32))(a3, (*(_DWORD *)&v47[4 * i] - v51)))
        {
          sub_100063F14(a3, &v92);
          uint64_t v52 = sub_100064294((uint64_t)&v92);
          sub_100063BA4((uint64_t)buf, v52);
          long long v53 = (char *)v100;
          int v54 = *(_DWORD *)((char *)v100 + v49);
          if ((*(_DWORD *)buf ^ (*(int *)buf >> 31)) != ((v54 >> 31) ^ v54)) {
            goto LABEL_87;
          }
          uint64_t v55 = (char *)v100 + v49;
          if (v54 >> 31 == v54)
          {
            if (*(void *)&buf[8] != *((void *)v55 + 1)) {
              goto LABEL_87;
            }
          }
          else
          {
            uint64_t v57 = *((void *)v55 + 1);
            uint64_t v58 = *((void *)v55 + 2);
            uint64_t v59 = *((unsigned int *)v55 + 6);
            if (*(void *)&buf[8] != v57 || *(void *)&buf[16] != v58 || v107 != v59)
            {
LABEL_87:
              sub_1000AE4B0(__p, "");
              sub_1002803AC("ApRssiMap read from stream does not have the expected mac address", &v108);
              sub_10016A2C4((uint64_t)__p, (uint64_t)&v108, 1);
              if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v108.__r_.__value_.__l.__data_);
              }
              if (v105 < 0) {
                operator delete(__p[0]);
              }
              sub_1000D11E0((uint64_t)&v103);
            }
          }
          std::string::size_type v62 = operator new(0x28uLL);
          v62[1] = 0;
          v62[2] = 0;
          *std::string::size_type v62 = off_100463218;
          uint64_t v63 = v93;
          v62[3] = v92;
          v62[4] = v63;
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(void *)std::string buf = v62 + 3;
          *(void *)&uint8_t buf[8] = v62;
          int v64 = sub_1002804F0((uint64_t)&v94, &v108, (int *)&v53[v49]);
          if (*v64)
          {
            uint64_t v65 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8]
              && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          else
          {
            unint64_t v66 = (uint64_t *)operator new(0x50uLL);
            uint64_t v67 = v66;
            unint64_t v68 = v66 + 5;
            uint64_t v70 = &v53[v49 + 8];
            int v69 = *(_DWORD *)&v53[v49];
            int v71 = v69 >> 31;
            if (v69 >> 31 == v69)
            {
              void *v68 = *(void *)v70;
              int v71 = v69;
            }
            else
            {
              long long v72 = *(_OWORD *)v70;
              *((_DWORD *)v66 + 14) = *(_DWORD *)&v53[v49 + 24];
              *(_OWORD *)unint64_t v68 = v72;
            }
            *((_DWORD *)v66 + 8) = v71 ^ v69;
            *((_OWORD *)v66 + 4) = *(_OWORD *)buf;
            std::string::size_type v73 = v108.__r_.__value_.__r.__words[0];
            *unint64_t v66 = 0;
            v66[1] = 0;
            v66[2] = v73;
            *int v64 = (uint64_t)v66;
            if (*v94)
            {
              std::string v94 = (uint64_t **)*v94;
              uint64_t v67 = (uint64_t *)*v64;
            }
            sub_1000619B8(v95, v67);
            ++v96;
          }
          uint64_t v74 = v93;
          if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
          long long v47 = (char *)v97;
          uint64_t v48 = v98;
        }
        else
        {
          if (qword_10047BED8 != -1)
          {
            dispatch_once(&qword_10047BED8, &stru_100463190);
            long long v56 = qword_10047BEE0;
            if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
              goto LABEL_53;
            }
LABEL_61:
            *(_DWORD *)std::string buf = 134217984;
            *(void *)&uint8_t buf[4] = v51;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "Error Skipping Bytes in protobuf stream, byte count, %lld", buf, 0xCu);
            goto LABEL_53;
          }
          long long v56 = qword_10047BEE0;
          if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR)) {
            goto LABEL_61;
          }
        }
LABEL_53:
        v49 += 32;
      }
    }
  }
  unint64_t v75 = (uint64_t)(a1[1] - *a1) >> 5;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_1002778C4(a4, v75, (unint64_t *)buf);
  long long v76 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]
    && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
    double v77 = (_DWORD *)*a1;
    if (a1[1] == *a1) {
      goto LABEL_108;
    }
  }
  else
  {
    double v77 = (_DWORD *)*a1;
    if (a1[1] == *a1) {
      goto LABEL_108;
    }
  }
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v80 = 0;
  do
  {
    uint64_t v81 = &v77[v79];
    uint64_t v83 = (uint64_t)&v77[v79 + 2];
    int v82 = v77[v79];
    if (v82 == v82 >> 31)
    {
      *(void *)&uint8_t buf[8] = *(void *)v83;
      int v84 = v82;
    }
    else
    {
      long long v85 = *(_OWORD *)v83;
      int v107 = *(_DWORD *)(v83 + 16);
      *(_OWORD *)&uint8_t buf[8] = v85;
      int v84 = *v81;
      int v82 = v84 >> 31;
    }
    *(_DWORD *)std::string buf = v84 ^ v82;
    uint64_t v86 = sub_1002806C0((uint64_t)&v94, (int *)buf);
    if (&v95 != (uint64_t **)v86)
    {
      uint64_t v87 = *a4;
      uint64_t v89 = v86[8];
      uint64_t v88 = v86[9];
      if (v88) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
      }
      std::string v90 = (uint64_t *)(v87 + v78);
      std::string v91 = (std::__shared_weak_count *)v90[1];
      uint64_t *v90 = v89;
      v90[1] = v88;
      if (v91 && !atomic_fetch_add(&v91->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    ++v80;
    double v77 = (_DWORD *)*a1;
    v79 += 8;
    v78 += 16;
  }
  while (v80 < (uint64_t)(a1[1] - *a1) >> 5);
LABEL_108:
  sub_1002802F0((uint64_t)&v94, v95);
  if (v97) {
    operator delete(v97);
  }
  if (v100)
  {
    unint64_t v101 = (int *)v100;
    operator delete(v100);
  }
}

void sub_1002777E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_1000BA884((uint64_t)&a12);
  sub_1002802F0((uint64_t)&a14, a15);
  if (a17) {
    operator delete(a17);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void *sub_1002778C4(void *a1, unint64_t a2, unint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60) {
      sub_1000A9108();
    }
    uint64_t v6 = operator new(16 * a2);
    *a1 = v6;
    a1[1] = v6;
    unint64_t v7 = &v6[2 * a2];
    a1[2] = v7;
    unint64_t v8 = a3[1];
    if (v8)
    {
      *uint64_t v6 = *a3;
      v6[1] = v8;
LABEL_5:
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      while (1)
      {
        v6 += 2;
        if (v6 == v7) {
          break;
        }
        unint64_t v8 = a3[1];
        *uint64_t v6 = *a3;
        v6[1] = v8;
        if (v8) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      uint64_t v9 = *a3;
      unint64_t v10 = (a2 - 1) & 0xFFFFFFFFFFFFFFFLL;
      if (v10 < 3) {
        goto LABEL_19;
      }
      unint64_t v11 = v10 + 1;
      long long v12 = *a3;
      unsigned int v13 = v6 + 4;
      uint64_t v14 = v11 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        *(v13 - 2) = v12;
        *(v13 - 1) = v12;
        *unsigned int v13 = v12;
        v13[1] = v12;
        v13 += 4;
        v14 -= 4;
      }
      while (v14);
      v6 += 2 * (v11 & 0x1FFFFFFFFFFFFFFCLL);
      if (v11 != (v11 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_19:
        do
        {
          *uint64_t v6 = v9;
          v6[1] = 0;
          v6 += 2;
        }
        while (v6 != v7);
      }
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_1002779C4(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    sub_1003A48D4((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002779E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100065654();
  unint64_t v7 = v6;
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)v6 + 20);
  if ((v8 & 1) != 0 || *((unsigned char *)v6 + 16))
  {
    int v9 = *((unsigned __int8 *)v6 + 17);
    unint64_t v10 = sub_1000656E4();
    unsigned __int8 v11 = atomic_load((unsigned __int8 *)v10 + 20);
    if (v11) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v12 = sub_100059C20((uint64_t)v6, (unsigned char *)v6 + 9);
    *((unsigned char *)v7 + 17) = v12;
    *((unsigned char *)v7 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v7 + 20);
    int v9 = v12;
    unint64_t v10 = sub_1000656E4();
    unsigned __int8 v13 = atomic_load((unsigned __int8 *)v10 + 20);
    if (v13) {
      goto LABEL_7;
    }
  }
  if (!*((unsigned char *)v10 + 16))
  {
    *((unsigned char *)v10 + 17) = sub_100059C20((uint64_t)v10, (unsigned char *)v10 + 9);
    *((unsigned char *)v10 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v10 + 20);
  }
LABEL_7:
  int v14 = *((unsigned __int8 *)v10 + 17);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (result != a2)
  {
    do
    {
      sub_100063F14(a1, &v26);
      uint64_t v16 = sub_100064294((uint64_t)&v26);
      sub_1000645D0((uint64_t)v24, v16);
      if (v14) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v25 == 2;
      }
      char v18 = v17;
      BOOL v19 = v25 == 1 && v9 == 0;
      char v20 = 1;
      if (!v19 && (v18 & 1) == 0)
      {
        sub_100063BA4((uint64_t)v28, (uint64_t)v24);
        uint64_t v21 = *(void *)(a3 + 24);
        if (!v21) {
          sub_10008F39C();
        }
        char v20 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v21 + 48))(v21, v28, &v26);
      }
      sub_100064538(v24);
      long long v22 = v27;
      if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      if (result == a2) {
        char v23 = 0;
      }
      else {
        char v23 = v20;
      }
    }
    while ((v23 & 1) != 0);
  }
  return result;
}

void sub_100277C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x100277A9CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_100277CD4(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

unsigned int *sub_100277D1C(unsigned int *a1, unsigned int *j)
{
  unint64_t v2 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
  signed int v3 = *(unsigned int *)((char *)a1 + 6);
  unint64_t v4 = *(unsigned int *)((char *)j - 10) | ((unint64_t)*((unsigned __int16 *)j - 3) << 32);
  if (v4 <= v2 && (v2 > v4 || v3 >= (int)*(j - 1)))
  {
    for (unint64_t i = (unsigned int *)((char *)a1 + 10); i < j; unint64_t i = (unsigned int *)((char *)i + 10))
    {
      unint64_t v8 = *i | ((unint64_t)*((unsigned __int16 *)i + 2) << 32);
      if (v8 > v2 || v2 <= v8 && v3 < *(int *)((char *)i + 6)) {
        break;
      }
    }
  }
  else
  {
    unint64_t i = a1;
    do
    {
      unsigned int v6 = *(unsigned int *)((char *)i + 10);
      unint64_t i = (unsigned int *)((char *)i + 10);
      unint64_t v7 = v6 | ((unint64_t)*((unsigned __int16 *)i + 2) << 32);
    }
    while (v7 <= v2 && (v2 > v7 || v3 >= *(int *)((char *)i + 6)));
  }
  if (i < j)
  {
    for (uint64_t j = (unsigned int *)((char *)j - 10);
          v4 > v2 || v2 <= v4 && v3 < *(int *)((char *)j + 6);
          unint64_t v4 = v9 | ((unint64_t)*((unsigned __int16 *)j + 2) << 32))
    {
      unsigned int v9 = *(unsigned int *)((char *)j - 10);
      uint64_t j = (unsigned int *)((char *)j - 10);
    }
  }
  while (i < j)
  {
    __int16 v17 = *((_WORD *)i + 4);
    uint64_t v16 = *(void *)i;
    uint64_t v10 = *(void *)j;
    *((_WORD *)i + 4) = *((_WORD *)j + 4);
    *(void *)unint64_t i = v10;
    *((_WORD *)j + 4) = v17;
    *(void *)uint64_t j = v16;
    do
    {
      unsigned int v11 = *(unsigned int *)((char *)i + 10);
      unint64_t i = (unsigned int *)((char *)i + 10);
      unint64_t v12 = v11 | ((unint64_t)*((unsigned __int16 *)i + 2) << 32);
    }
    while (v12 <= v2 && (v2 > v12 || v3 >= *(int *)((char *)i + 6)));
    do
    {
      do
      {
        uint64_t j = (unsigned int *)((char *)j - 10);
        unint64_t v13 = *j | ((unint64_t)*((unsigned __int16 *)j + 2) << 32);
      }
      while (v13 > v2);
    }
    while (v2 <= v13 && v3 < *(int *)((char *)j + 6));
  }
  if ((unsigned int *)((char *)i - 10) != a1)
  {
    uint64_t v14 = *(void *)((char *)i - 10);
    *((_WORD *)a1 + 4) = *((_WORD *)i - 1);
    *(void *)a1 = v14;
  }
  *(unsigned int *)((char *)i - 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v2;
  *((_WORD *)i - 3) = WORD2(v2);
  *(i - 1) = v3;
  return i;
}

uint64_t sub_100277EDC(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 1)))
    {
      int64_t v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 1)) | 1;
      unsigned int v6 = (unsigned int *)(result + 10 * v5);
      if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 1) + 2) < a3)
      {
        unint64_t v7 = *(unsigned int *)((char *)v6 + 10) | ((unint64_t)*((unsigned __int16 *)v6 + 7) << 32);
        unint64_t v8 = *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
        if (v7 > v8 || v8 <= v7 && *(_DWORD *)(result + 10 * v5 + 6) < (signed int)v6[4])
        {
          unsigned int v6 = (unsigned int *)((char *)v6 + 10);
          int64_t v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 1) + 2;
        }
      }
      unint64_t v9 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
      unint64_t v10 = *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
      if (v9 <= v10)
      {
        if (v10 <= v9)
        {
          signed int v11 = *(unsigned int *)((char *)a4 + 6);
          if (*(int *)((char *)v6 + 6) < v11) {
            return result;
          }
        }
        else
        {
          signed int v11 = *(unsigned int *)((char *)a4 + 6);
        }
        uint64_t v12 = *(void *)v6;
        *((_WORD *)a4 + 4) = *((_WORD *)v6 + 4);
        *(void *)a4 = v12;
        if (v4 >= v5)
        {
          while (1)
          {
            uint64_t v15 = 2 * v5;
            int64_t v5 = (2 * v5) | 1;
            unint64_t v13 = (unsigned int *)(result + 10 * v5);
            int64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              unint64_t v17 = *(unsigned int *)((char *)v13 + 10) | ((unint64_t)*((unsigned __int16 *)v13 + 7) << 32);
              unint64_t v18 = *v13 | ((unint64_t)*((unsigned __int16 *)v13 + 2) << 32);
              if (v17 > v18 || v18 <= v17 && *(_DWORD *)(result + 10 * v5 + 6) < (signed int)v13[4])
              {
                unint64_t v13 = (unsigned int *)((char *)v13 + 10);
                int64_t v5 = v16;
              }
            }
            unint64_t v19 = *v13 | ((unint64_t)*((unsigned __int16 *)v13 + 2) << 32);
            if (v9 > v19 || v19 <= v9 && *(int *)((char *)v13 + 6) < v11) {
              break;
            }
            uint64_t v14 = *(void *)v13;
            *((_WORD *)v6 + 4) = *((_WORD *)v13 + 4);
            *(void *)unsigned int v6 = v14;
            unsigned int v6 = v13;
            if (v4 < v5) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v13 = v6;
LABEL_14:
        *unint64_t v13 = v9;
        *((_WORD *)v13 + 2) = WORD2(v9);
        *(unsigned int *)((char *)v13 + 6) = v11;
      }
    }
  }
  return result;
}

char *sub_100278098(char *result, char *a2)
{
  if (a2 - result >= 11)
  {
    int64_t v2 = (a2 - result) / 0xAuLL;
    do
    {
      uint64_t v4 = 0;
      uint64_t v26 = *(void *)result;
      __int16 v27 = *((_WORD *)result + 4);
      int64_t v5 = (unsigned int *)result;
      do
      {
        unint64_t v7 = v5;
        uint64_t v8 = v4 + 1;
        int64_t v5 = (unsigned int *)((char *)v5 + 10 * v4 + 10);
        uint64_t v9 = 2 * v4;
        uint64_t v4 = (2 * v4) | 1;
        int64_t v10 = v9 + 2;
        if (v10 < v2)
        {
          unint64_t v11 = *(unsigned int *)((char *)v5 + 10) | ((unint64_t)*((unsigned __int16 *)v5 + 7) << 32);
          unint64_t v12 = *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32);
          if (v11 > v12 || v12 <= v11 && *(int *)((char *)v7 + 10 * v8 + 6) < (int)v5[4])
          {
            int64_t v5 = (unsigned int *)((char *)v5 + 10);
            uint64_t v4 = v10;
          }
        }
        uint64_t v6 = *(void *)v5;
        *((_WORD *)v7 + 4) = *((_WORD *)v5 + 4);
        *(void *)unint64_t v7 = v6;
      }
      while (v4 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 10;
      if (v5 == (unsigned int *)a2)
      {
        *((_WORD *)v5 + 4) = v27;
        *(void *)int64_t v5 = v26;
      }
      else
      {
        uint64_t v13 = *(void *)a2;
        *((_WORD *)v5 + 4) = *((_WORD *)a2 + 4);
        *(void *)int64_t v5 = v13;
        *(void *)a2 = v26;
        *((_WORD *)a2 + 4) = v27;
        uint64_t v14 = (char *)v5 - result + 10;
        if (v14 >= 11)
        {
          unint64_t v15 = v14 / 0xAuLL - 2;
          unint64_t v16 = v15 >> 1;
          unint64_t v17 = &result[10 * (v15 >> 1)];
          unint64_t v18 = *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32);
          unint64_t v19 = *(unsigned int *)v17 | ((unint64_t)*((unsigned __int16 *)v17 + 2) << 32);
          if (v18 > v19)
          {
            signed int v20 = *(unsigned int *)((char *)v5 + 6);
LABEL_17:
            uint64_t v21 = *(void *)v17;
            *((_WORD *)v5 + 4) = *((_WORD *)v17 + 4);
            *(void *)int64_t v5 = v21;
            if (v15 >= 2)
            {
              while (1)
              {
                unint64_t v24 = v16 - 1;
                unint64_t v16 = (v16 - 1) >> 1;
                long long v22 = &result[10 * v16];
                unint64_t v25 = *(unsigned int *)v22 | ((unint64_t)*((unsigned __int16 *)v22 + 2) << 32);
                if (v18 <= v25 && (v25 > v18 || *(_DWORD *)&result[10 * v16 + 6] >= v20)) {
                  break;
                }
                uint64_t v23 = *(void *)v22;
                *((_WORD *)v17 + 4) = *((_WORD *)v22 + 4);
                *(void *)unint64_t v17 = v23;
                unint64_t v17 = &result[10 * v16];
                if (v24 <= 1) {
                  goto LABEL_19;
                }
              }
            }
            long long v22 = v17;
LABEL_19:
            *(_DWORD *)long long v22 = v18;
            *((_WORD *)v22 + 2) = WORD2(v18);
            *(_DWORD *)(v22 + 6) = v20;
            continue;
          }
          if (v19 <= v18)
          {
            signed int v20 = *(unsigned int *)((char *)v5 + 6);
            if (*(_DWORD *)&result[10 * v16 + 6] < v20) {
              goto LABEL_17;
            }
          }
        }
      }
    }
    while (v2-- > 2);
  }
  return result;
}

void sub_1002782B4(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x10uLL);
  void *exception = &off_1004631F0;
  exception[1] = a1;
}

void sub_10027830C(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete();
}

const char *sub_100278344(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    return *(const char **)(a1 + 8);
  }
  else {
    return "unknown boost::container exception";
  }
}

uint64_t sub_10027835C(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = result;
LABEL_2:
  int64_t v10 = a2 - 10;
  unint64_t v11 = (int *)v9;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v9 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = sub_100278A64(a3, (uint64_t)(a2 - 10), (_DWORD *)v9);
          if (!result) {
            return result;
          }
          int v34 = *(_DWORD *)v9;
          int v35 = *(int *)v9 >> 31;
          uint64_t v37 = (void *)(v9 + 8);
          uint64_t v36 = *(void *)(v9 + 8);
          if (v35 == *(_DWORD *)v9)
          {
            int v38 = *v10;
            if (v34 == *v10)
            {
              int v39 = 0;
              *uint64_t v37 = *((void *)a2 - 4);
              goto LABEL_70;
            }
            int v39 = 0;
          }
          else
          {
            uint64_t v52 = *(void *)(v9 + 16);
            int v53 = *(_DWORD *)(v9 + 24);
            int v39 = v35 ^ v34;
            int v38 = *v10;
            if (v34 == *v10)
            {
              long long v45 = *((_OWORD *)a2 - 2);
              *(_DWORD *)(v9 + 24) = *(a2 - 4);
              *(_OWORD *)uint64_t v37 = v45;
              goto LABEL_70;
            }
          }
          int v46 = v38 ^ (v38 >> 31);
          long long v47 = a2 - 8;
          if (v46)
          {
            long long v48 = *(_OWORD *)v47;
            *(_DWORD *)(v9 + 24) = *(a2 - 4);
            *(_OWORD *)uint64_t v37 = v48;
            *(_DWORD *)uint64_t v9 = v46;
          }
          else
          {
            *(void *)(v9 + 8) = *(void *)v47;
            *(_DWORD *)uint64_t v9 = 0;
          }
LABEL_70:
          int v49 = v39 >> 31;
          if (*v10 == v39)
          {
            *((void *)a2 - 4) = v36;
            if (v49 != v39)
            {
              *((void *)a2 - 3) = v52;
              *(a2 - 4) = v53;
            }
          }
          else
          {
            *((void *)a2 - 4) = v36;
            if (v49 != v39)
            {
              *((void *)a2 - 3) = v52;
              *(a2 - 4) = v53;
              *(a2 - 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v49 ^ v39;
            }
            else
            {
              *int64_t v10 = 0;
            }
          }
          int v50 = *(_DWORD *)(v9 + 32);
          *(_DWORD *)(v9 + 32) = *(a2 - 2);
          *(a2 - 2) = v50;
          break;
        case 3uLL:
          return sub_1002796B8((int *)v9, v9 + 40, (uint64_t)(a2 - 10), a3);
        case 4uLL:
          return sub_10027BB90(v9, v9 + 40, v9 + 80, (uint64_t)(a2 - 10), a3);
        case 5uLL:
          return sub_10027BFD0(v9, v9 + 40, v9 + 80, v9 + 120, (uint64_t)(a2 - 10), a3);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 959) {
      break;
    }
    if (v12 == 1)
    {
      if ((int *)v9 != a2)
      {
        unint64_t v40 = (v15 - 2) >> 1;
        unint64_t v41 = v40 + 1;
        int v42 = (int *)(v9 + 40 * v40);
        do
        {
          sub_10027C530(v9, a3, v15, v42);
          v42 -= 10;
          --v41;
        }
        while (v41);
        unint64_t v43 = v14 / 0x28uLL;
        do
        {
          uint64_t result = sub_10027C814(v9, (uint64_t)a2, a3, v43);
          a2 -= 10;
        }
        while (v43-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = v9 + 40 * (v15 >> 1);
    if ((unint64_t)v14 < 0x1401)
    {
      sub_1002796B8((int *)v17, v9, (uint64_t)(a2 - 10), a3);
      if (a5) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    sub_1002796B8((int *)v9, v17, (uint64_t)(a2 - 10), a3);
    sub_1002796B8((int *)(v9 + 40), 40 * v16 + v9 - 40, (uint64_t)(a2 - 20), a3);
    sub_1002796B8((int *)(v9 + 80), v9 + 40 + 40 * v16, (uint64_t)(a2 - 30), a3);
    sub_1002796B8((int *)(40 * v16 + v9 - 40), v17, v9 + 40 + 40 * v16, a3);
    int v18 = *(_DWORD *)v9;
    int v19 = *(int *)v9 >> 31;
    uint64_t v21 = (void *)(v9 + 8);
    uint64_t v20 = *(void *)(v9 + 8);
    if (v19 == *(_DWORD *)v9)
    {
      int v22 = *(_DWORD *)v17;
      if (v18 == *(_DWORD *)v17)
      {
        int v23 = 0;
        *uint64_t v21 = *(void *)(v17 + 8);
        goto LABEL_16;
      }
      int v23 = 0;
    }
    else
    {
      uint64_t v52 = *(void *)(v9 + 16);
      int v53 = *(_DWORD *)(v9 + 24);
      int v23 = v19 ^ v18;
      int v22 = *(_DWORD *)v17;
      if (v18 == *(_DWORD *)v17)
      {
        long long v24 = *(_OWORD *)(v17 + 8);
        *(_DWORD *)(v9 + 24) = *(_DWORD *)(v17 + 24);
        *(_OWORD *)uint64_t v21 = v24;
LABEL_16:
        int v25 = v23 >> 31;
        if (*(_DWORD *)v17 != v23) {
          goto LABEL_22;
        }
        goto LABEL_17;
      }
    }
    int v26 = v22 ^ (v22 >> 31);
    __int16 v27 = (long long *)(v17 + 8);
    if (v26)
    {
      long long v28 = *v27;
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v17 + 24);
      *(_OWORD *)uint64_t v21 = v28;
      *(_DWORD *)uint64_t v9 = v26;
      int v25 = v23 >> 31;
      if (*(_DWORD *)v17 != v23) {
        goto LABEL_22;
      }
    }
    else
    {
      *(void *)(v9 + 8) = *(void *)v27;
      *(_DWORD *)uint64_t v9 = 0;
      int v25 = v23 >> 31;
      if (*(_DWORD *)v17 != v23)
      {
LABEL_22:
        *(void *)(v17 + 8) = v20;
        if (v25 != v23)
        {
          *(_DWORD *)(v17 + 24) = v53;
          *(void *)(v17 + 16) = v52;
          *(_DWORD *)uint64_t v17 = v25 ^ v23;
        }
        else
        {
          *(_DWORD *)uint64_t v17 = 0;
        }
        goto LABEL_27;
      }
    }
LABEL_17:
    *(void *)(v17 + 8) = v20;
    if (v25 != v23)
    {
      *(_DWORD *)(v17 + 24) = v53;
      *(void *)(v17 + 16) = v52;
    }
LABEL_27:
    uint64_t v29 = v9 + 40 * v16;
    int v30 = *(_DWORD *)(v9 + 32);
    *(_DWORD *)(v9 + 32) = *(_DWORD *)(v29 + 32);
    *(_DWORD *)(v29 + 32) = v30;
    if (a5) {
      goto LABEL_29;
    }
LABEL_28:
    if (!sub_100278A64(a3, v9 - 40, (_DWORD *)v9))
    {
      uint64_t result = (uint64_t)sub_100279D80(v9, (unint64_t)a2, a3);
      unint64_t v11 = (int *)result;
      goto LABEL_34;
    }
LABEL_29:
    unint64_t v31 = sub_10027A73C(v9, (unint64_t)a2, a3);
    if ((v32 & 1) == 0) {
      goto LABEL_32;
    }
    BOOL v33 = sub_10027B6EC(v9, v31, a3);
    unint64_t v11 = v31 + 10;
    uint64_t result = sub_10027B6EC((uint64_t)(v31 + 10), a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v31;
      if (v33) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v33)
    {
LABEL_32:
      uint64_t result = sub_10027835C(v9, v31, a3, -v13, a5 & 1);
      unint64_t v11 = v31 + 10;
LABEL_34:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_100278C3C((int *)v9, a2, a3);
  }
  else
  {
    return (uint64_t)sub_100278FE8((unsigned __int8 *)v9, (unsigned __int8 *)a2, a3);
  }
}

BOOL sub_100278A64(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char v6 = (unsigned __int8 *)(a3 + 2);
  int v5 = *a3;
  int v7 = (int)*a3 >> 31;
  if (v5 >> 31 == v5)
  {
    *(void *)&long long v19 = *(void *)v6;
    int v7 = v5;
  }
  else
  {
    long long v19 = *(_OWORD *)v6;
    int v20 = a3[6];
  }
  int v8 = v7 ^ v5;
  int v18 = v8;
  int64_t v10 = (long long *)(a2 + 8);
  int v9 = *(_DWORD *)a2;
  int v11 = *(int *)a2 >> 31;
  int v12 = v8 >> 31;
  if (v11 != *(_DWORD *)a2)
  {
    if (v12 != v8)
    {
      if (sub_1001E6FAC((unsigned __int8 *)(a2 + 8), (unsigned __int8 *)&v19)) {
        return 1;
      }
      int v9 = *(_DWORD *)a2;
      int v11 = *(int *)a2 >> 31;
    }
    if (v11 != v9)
    {
      long long v16 = *v10;
      int v17 = *(_DWORD *)(a2 + 24);
      int v14 = v11 ^ v9;
      int v15 = v14 >> 31;
      if (*a3 == (int)*a3 >> 31) {
        goto LABEL_15;
      }
      goto LABEL_19;
    }
LABEL_14:
    *(void *)&long long v16 = *(void *)v10;
    int v14 = v11 ^ v9;
    int v15 = v14 >> 31;
    if (*a3 == (int)*a3 >> 31)
    {
LABEL_15:
      if (v15 != v14 || *(void *)v6 < (unint64_t)v16) {
        return 0;
      }
      return *(_DWORD *)(a2 + 32) < a3[8];
    }
LABEL_19:
    if (v15 != v14 && sub_1001E6FAC(v6, (unsigned __int8 *)&v16)) {
      return 0;
    }
    return *(_DWORD *)(a2 + 32) < a3[8];
  }
  if (v12 == v8 && *(void *)v10 >= (unint64_t)v19)
  {
    int v11 = *(_DWORD *)a2;
    goto LABEL_14;
  }
  return 1;
}

int *sub_100278C3C(int *result, int *a2, uint64_t a3)
{
  if (result == a2) {
    return result;
  }
  signed int v3 = result;
  uint64_t v4 = (uint64_t)(result + 10);
  if (result + 10 == a2) {
    return result;
  }
  uint64_t v5 = 0;
  char v6 = result;
  while (2)
  {
    int v7 = (int *)v4;
    uint64_t result = (int *)sub_100278A64(a3, v4, v6);
    if (!result) {
      goto LABEL_6;
    }
    int v8 = *v7;
    int v9 = *v7 >> 31;
    int64_t v10 = v6 + 12;
    if (v8 >> 31 == v8)
    {
      *(void *)&long long v38 = *v10;
      int v9 = v8;
    }
    else
    {
      long long v38 = *(_OWORD *)v10;
      int v39 = v6[16];
    }
    int v37 = v9 ^ v8;
    int v40 = v6[18];
    for (uint64_t i = v5; ; i -= 40)
    {
      uint64_t v13 = (int *)((char *)v3 + i);
      int v14 = *(int *)((char *)v3 + i);
      if (v8 == v14)
      {
        int v15 = v13 + 2;
        long long v16 = v13 + 12;
        if (v8 == v8 >> 31)
        {
          *long long v16 = *v15;
          int v17 = (char *)v3 + i;
          *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
          if (!i) {
            goto LABEL_47;
          }
        }
        else
        {
          *(_OWORD *)long long v16 = *(_OWORD *)v15;
          v13[16] = v13[6];
          int v17 = (char *)v3 + i;
          *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
          if (!i) {
            goto LABEL_47;
          }
        }
      }
      else
      {
        int v18 = v14 ^ (v14 >> 31);
        long long v19 = v13 + 2;
        int v20 = v13 + 12;
        if (v18)
        {
          *int v20 = *v19;
          v13[16] = v13[6];
          int v13[10] = v18;
          int v17 = (char *)v3 + i;
          *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
          if (!i) {
            goto LABEL_47;
          }
        }
        else
        {
          *(void *)int v20 = *(void *)v19;
          int v13[10] = 0;
          int v17 = (char *)v3 + i;
          *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
          if (!i)
          {
LABEL_47:
            int v12 = v3;
            int v31 = *v3;
            int v32 = v37;
            if (*v3 == v37) {
              goto LABEL_45;
            }
LABEL_48:
            int v34 = v32 ^ (v32 >> 31);
            if (v34)
            {
              *(_OWORD *)(v12 + 2) = v38;
              v12[6] = v39;
              *int v12 = v34;
            }
            else
            {
              *((void *)v12 + 1) = v38;
              *int v12 = 0;
            }
            goto LABEL_5;
          }
        }
      }
      int v21 = *((_DWORD *)v17 - 10);
      int v22 = v21 >> 31;
      int v23 = v17 - 32;
      if (v21 >> 31 == v21)
      {
        *(void *)&long long v45 = *(void *)v23;
        int v22 = v21;
      }
      else
      {
        long long v45 = *(_OWORD *)v23;
        int v46 = *((_DWORD *)v17 - 4);
      }
      int v24 = v22 ^ v21;
      int v44 = v24;
      int v25 = v37;
      int v26 = v37 >> 31;
      int v27 = v24 >> 31;
      if (v37 >> 31 == v37)
      {
        if (v27 != v24) {
          goto LABEL_13;
        }
        uint64_t v28 = v38;
        if ((unint64_t)v38 < (unint64_t)v45) {
          goto LABEL_13;
        }
LABEL_36:
        *(void *)&long long v42 = v28;
        int v29 = 0;
        int v41 = 0;
        int v30 = 0;
        if (*((_DWORD *)v17 - 10) == *((int *)v17 - 10) >> 31) {
          goto LABEL_37;
        }
        goto LABEL_41;
      }
      if (v27 != v24)
      {
        uint64_t result = (int *)sub_1001E6FAC((unsigned __int8 *)&v38, (unsigned __int8 *)&v45);
        if (result) {
          goto LABEL_13;
        }
        int v25 = v37;
        int v26 = v37 >> 31;
      }
      if (v26 == v25)
      {
        uint64_t v28 = v38;
        goto LABEL_36;
      }
      long long v42 = v38;
      int v43 = v39;
      int v29 = v26 ^ v25;
      int v41 = v29;
      int v30 = v29 >> 31;
      if (*((_DWORD *)v17 - 10) == *((int *)v17 - 10) >> 31)
      {
LABEL_37:
        if (v30 != v29 || *(void *)v23 < (unint64_t)v42) {
          break;
        }
        goto LABEL_12;
      }
LABEL_41:
      if (v30 != v29)
      {
        uint64_t result = (int *)sub_1001E6FAC((unsigned __int8 *)v17 - 32, (unsigned __int8 *)&v42);
        if (result) {
          break;
        }
      }
LABEL_12:
      int v12 = (int *)((char *)v3 + i);
      if (v40 >= *(int *)((char *)v3 + i - 8)) {
        goto LABEL_44;
      }
LABEL_13:
      int v8 = *v13;
    }
    int v12 = (int *)((char *)v3 + i);
LABEL_44:
    int v31 = *v12;
    int v32 = v37;
    if (*v12 != v37) {
      goto LABEL_48;
    }
LABEL_45:
    BOOL v33 = v12 + 2;
    if (v31 == v31 >> 31)
    {
      *BOOL v33 = v38;
    }
    else
    {
      *(_OWORD *)BOOL v33 = v38;
      v12[6] = v39;
    }
LABEL_5:
    unsigned char v12[8] = v40;
LABEL_6:
    uint64_t v4 = (uint64_t)(v7 + 10);
    v5 += 40;
    char v6 = v7;
    if (v7 + 10 != a2) {
      continue;
    }
    return result;
  }
}

unsigned __int8 *sub_100278FE8(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3)
{
  if (result == a2) {
    return result;
  }
  signed int v3 = result;
  uint64_t v4 = (uint64_t)(result + 40);
  if (result + 40 == a2) {
    return result;
  }
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unsigned int v41 = 0;
  unsigned int v40 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  unsigned int v5 = 0;
  unsigned int v6 = 0;
  int v7 = result + 16;
  while (2)
  {
    int v8 = (int *)v4;
    uint64_t result = (unsigned __int8 *)sub_100278A64(a3, v4, v3);
    if (!result) {
      goto LABEL_6;
    }
    int v9 = *v8;
    int v10 = *v8;
    if (*v8 >> 31 != *v8)
    {
      LODWORD(v37) = v3[57];
      HIDWORD(v37) = v3[56];
      LODWORD(v36) = v3[59];
      HIDWORD(v36) = v3[58];
      LODWORD(v35) = v3[61];
      HIDWORD(v35) = v3[60];
      LODWORD(v34) = v3[63];
      HIDWORD(v34) = v3[62];
      LODWORD(v33) = v3[65];
      HIDWORD(v33) = v3[64];
      int v10 = v9 >> 31;
      LODWORD(v32) = v3[67];
      HIDWORD(v32) = v3[66];
    }
    unint64_t v11 = *((void *)v3 + 6);
    unint64_t v29 = HIBYTE(v11);
    int v12 = v10 ^ v9;
    int v13 = *((_DWORD *)v3 + 18);
    int v14 = (v10 ^ v9) >> 31;
    for (uint64_t i = v7; ; i -= 40)
    {
      int v16 = *((_DWORD *)i - 4);
      if (v9 == v16)
      {
        int v17 = i - 8;
        int v18 = i + 32;
        if (v9 == v9 >> 31)
        {
          *int v18 = *(void *)v17;
        }
        else
        {
          *(_OWORD *)int v18 = *(_OWORD *)v17;
          *((_DWORD *)i + 12) = *((_DWORD *)i + 2);
        }
      }
      else
      {
        int v19 = v16 ^ (v16 >> 31);
        if (v19)
        {
          *((_OWORD *)i + 2) = *(_OWORD *)(i - 8);
          *((_DWORD *)i + 12) = *((_DWORD *)i + 2);
          *((_DWORD *)i + 6) = v19;
        }
        else
        {
          *((void *)i + 4) = *((void *)i - 1);
          *((_DWORD *)i + 6) = 0;
        }
      }
      *((_DWORD *)i + 14) = *((_DWORD *)i + 4);
      int v20 = *((_DWORD *)i - 14);
      int v21 = v20 >> 31;
      int v22 = v20;
      if (v20 >> 31 != v20)
      {
        LODWORD(v43) = *(i - 39);
        HIDWORD(v43) = *(i - 40);
        LODWORD(v42) = *(i - 37);
        HIDWORD(v42) = *(i - 38);
        unsigned int v41 = *(i - 36);
        HIDWORD(v39) = *(i - 34);
        unsigned int v40 = *(i - 35);
        HIDWORD(v38) = *(i - 32);
        LODWORD(v39) = *(i - 33);
        LODWORD(v38) = *(i - 31);
        unsigned int v5 = *(i - 30);
        int v22 = v20 >> 31;
        unsigned int v6 = *(i - 29);
      }
      uint64_t result = i - 48;
      unint64_t v23 = *((void *)i - 6);
      int v24 = v22 ^ v20;
      int v25 = v24 >> 31;
      if (v14 == v12)
      {
        if (v25 != v24 || v11 < v23) {
          goto LABEL_12;
        }
        unint64_t v44 = v11;
        int v26 = 0;
        int v27 = 0;
        if (v21 != v20) {
          goto LABEL_26;
        }
      }
      else
      {
        if (v25 != v24)
        {
          if (v11 < *((void *)i - 6)) {
            goto LABEL_12;
          }
          if (*((void *)i - 6) >= v11)
          {
            if (BYTE1(v11) < BYTE1(v23)) {
              goto LABEL_12;
            }
            if (BYTE1(v23) >= BYTE1(v11))
            {
              if (BYTE2(v11) < BYTE2(v23)) {
                goto LABEL_12;
              }
              if (BYTE2(v23) >= BYTE2(v11))
              {
                if (BYTE3(v11) < BYTE3(v23)) {
                  goto LABEL_12;
                }
                if (BYTE3(v23) >= BYTE3(v11))
                {
                  if (BYTE4(v11) < BYTE4(v23)) {
                    goto LABEL_12;
                  }
                  if (BYTE4(v23) >= BYTE4(v11))
                  {
                    if (BYTE5(v11) < BYTE5(v23)) {
                      goto LABEL_12;
                    }
                    if (BYTE5(v23) >= BYTE5(v11))
                    {
                      if (BYTE6(v11) < BYTE6(v23)) {
                        goto LABEL_12;
                      }
                      if (BYTE6(v23) >= BYTE6(v11))
                      {
                        unint64_t v28 = HIBYTE(v23);
                        if (v29 < v28
                          || v28 >= v29
                          && (HIDWORD(v37) < HIDWORD(v43)
                           || HIDWORD(v43) >= HIDWORD(v37)
                           && (v37 < v43
                            || v43 >= v37
                            && (HIDWORD(v36) < HIDWORD(v42)
                             || HIDWORD(v42) >= HIDWORD(v36)
                             && (v36 < v42
                              || v42 >= v36
                              && (HIDWORD(v35) < v41
                               || v41 >= HIDWORD(v35)
                               && (v35 < v40
                                || v40 >= v35
                                && (HIDWORD(v34) < HIDWORD(v39)
                                 || HIDWORD(v39) >= HIDWORD(v34)
                                 && (v34 < v39
                                  || v39 >= v34
                                  && (HIDWORD(v33) < HIDWORD(v38)
                                   || HIDWORD(v38) >= HIDWORD(v33)
                                   && (v33 < v38
                                    || v38 >= v33 && v32 < __PAIR64__(v5, v6))))))))))))
                        {
                          goto LABEL_12;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        unint64_t v44 = v11;
        char v45 = BYTE4(v37);
        char v46 = v37;
        char v47 = BYTE4(v36);
        char v48 = v36;
        char v49 = BYTE4(v35);
        char v50 = v35;
        char v51 = BYTE4(v34);
        char v52 = v34;
        char v53 = BYTE4(v33);
        char v54 = v33;
        char v55 = BYTE4(v32);
        char v56 = v32;
        int v26 = v14 ^ v12;
        int v27 = (v14 ^ v12) >> 31;
        if (v21 != v20)
        {
LABEL_26:
          if (v27 != v26)
          {
            uint64_t result = (unsigned __int8 *)sub_1001E6FAC(result, (unsigned __int8 *)&v44);
            if (result) {
              break;
            }
          }
          goto LABEL_11;
        }
      }
      if (v27 != v26 || *(void *)result < v11) {
        break;
      }
LABEL_11:
      if (v13 >= *((_DWORD *)i - 6)) {
        break;
      }
LABEL_12:
      int v9 = *((_DWORD *)i - 4);
    }
    if (*((_DWORD *)i - 4) == v12)
    {
      *((void *)i - 1) = v11;
      if (v14 != v12)
      {
        *uint64_t i = BYTE4(v37);
        i[1] = v37;
        i[2] = BYTE4(v36);
        i[3] = v36;
        i[4] = BYTE4(v35);
        i[5] = v35;
        i[6] = BYTE4(v34);
        i[7] = v34;
        i[8] = BYTE4(v33);
        i[9] = v33;
        i[10] = BYTE4(v32);
        i[11] = v32;
      }
    }
    else
    {
      *((void *)i - 1) = v11;
      if (v14 != v12)
      {
        *uint64_t i = BYTE4(v37);
        i[1] = v37;
        i[2] = BYTE4(v36);
        i[3] = v36;
        i[4] = BYTE4(v35);
        i[5] = v35;
        i[6] = BYTE4(v34);
        i[7] = v34;
        i[8] = BYTE4(v33);
        i[9] = v33;
        i[10] = BYTE4(v32);
        i[11] = v32;
        *((_DWORD *)i - 4) = v14 ^ v12;
      }
      else
      {
        *((_DWORD *)i - 4) = 0;
      }
    }
    *((_DWORD *)i + 4) = v13;
LABEL_6:
    uint64_t v4 = (uint64_t)(v8 + 10);
    v7 += 40;
    signed int v3 = (unsigned __int8 *)v8;
    if (v8 + 10 != (int *)a2) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1002796B8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = sub_100278A64(a4, a2, a1);
  uint64_t result = sub_100278A64(a4, a3, (_DWORD *)a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    int v17 = *(_DWORD *)a2;
    int v18 = *(int *)a2 >> 31;
    int v20 = (void *)(a2 + 8);
    uint64_t v19 = *(void *)(a2 + 8);
    if (v18 == *(_DWORD *)a2)
    {
      int v21 = *(_DWORD *)a3;
      if (v17 == *(_DWORD *)a3)
      {
        int v22 = 0;
        *int v20 = *(void *)(a3 + 8);
        int v23 = 0;
        if (*(_DWORD *)a3) {
          goto LABEL_22;
        }
        goto LABEL_36;
      }
      int v22 = 0;
    }
    else
    {
      uint64_t v70 = *(void *)(a2 + 16);
      int v71 = *(_DWORD *)(a2 + 24);
      int v22 = v18 ^ v17;
      int v21 = *(_DWORD *)a3;
      if (v17 == *(_DWORD *)a3)
      {
        long long v32 = *(_OWORD *)(a3 + 8);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)int v20 = v32;
        int v23 = v22 >> 31;
        if (*(_DWORD *)a3 != v22) {
          goto LABEL_22;
        }
        goto LABEL_36;
      }
    }
    int v38 = v21 ^ (v21 >> 31);
    uint64_t v39 = (long long *)(a3 + 8);
    if (v38)
    {
      long long v40 = *v39;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)int v20 = v40;
      *(_DWORD *)a2 = v38;
      int v23 = v22 >> 31;
      if (*(_DWORD *)a3 != v22) {
        goto LABEL_22;
      }
    }
    else
    {
      *(void *)(a2 + 8) = *(void *)v39;
      *(_DWORD *)a2 = 0;
      int v23 = v22 >> 31;
      if (*(_DWORD *)a3 != v22)
      {
LABEL_22:
        *(void *)(a3 + 8) = v19;
        if (v23 != v22)
        {
          *(void *)(a3 + 16) = v70;
          *(_DWORD *)(a3 + 24) = v71;
          *(_DWORD *)a3 = v23 ^ v22;
        }
        else
        {
          *(_DWORD *)a3 = 0;
        }
        goto LABEL_46;
      }
    }
LABEL_36:
    *(void *)(a3 + 8) = v19;
    if (v23 != v22)
    {
      *(void *)(a3 + 16) = v70;
      *(_DWORD *)(a3 + 24) = v71;
    }
LABEL_46:
    char v45 = (int *)(a2 + 32);
    int v46 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(a3 + 32) = v46;
    if (!sub_100278A64(a4, a2, a1)) {
      return 1;
    }
    int v47 = *a1;
    int v48 = *a1 >> 31;
    char v50 = a1 + 2;
    uint64_t v49 = *((void *)a1 + 1);
    if (v48 == *a1)
    {
      int v51 = *(_DWORD *)a2;
      if (v47 == *(_DWORD *)a2)
      {
        int v52 = 0;
        void *v50 = *v20;
        int v53 = 0;
        if (*(_DWORD *)a2) {
          goto LABEL_53;
        }
LABEL_75:
        *int v20 = v49;
        if (v53 != v52)
        {
          *(void *)(a2 + 16) = v70;
          *(_DWORD *)(a2 + 24) = v71;
          unint64_t v44 = a1 + 8;
          goto LABEL_86;
        }
LABEL_76:
        unint64_t v44 = a1 + 8;
LABEL_86:
        uint64_t result = 2;
        goto LABEL_87;
      }
      int v52 = 0;
    }
    else
    {
      uint64_t v70 = *((void *)a1 + 2);
      int v71 = a1[6];
      int v52 = v48 ^ v47;
      int v51 = *(_DWORD *)a2;
      if (v47 == *(_DWORD *)a2)
      {
        long long v54 = *(_OWORD *)v20;
        a1[6] = *(_DWORD *)(a2 + 24);
        *(_OWORD *)char v50 = v54;
        int v53 = v52 >> 31;
        if (*(_DWORD *)a2 == v52) {
          goto LABEL_75;
        }
        goto LABEL_53;
      }
    }
    int v64 = v51 ^ (v51 >> 31);
    if (!v64)
    {
      *((void *)a1 + 1) = *v20;
      *a1 = 0;
      int v53 = v52 >> 31;
      if (*(_DWORD *)a2 != v52) {
        goto LABEL_53;
      }
      goto LABEL_75;
    }
    long long v65 = *(_OWORD *)v20;
    a1[6] = *(_DWORD *)(a2 + 24);
    *(_OWORD *)char v50 = v65;
    *a1 = v64;
    int v53 = v52 >> 31;
    if (*(_DWORD *)a2 == v52) {
      goto LABEL_75;
    }
LABEL_53:
    *int v20 = v49;
    if (v53 == v52)
    {
      *(_DWORD *)a2 = 0;
      unint64_t v44 = a1 + 8;
      goto LABEL_86;
    }
    *(void *)(a2 + 16) = v70;
    *(_DWORD *)(a2 + 24) = v71;
    *(_DWORD *)a2 = v53 ^ v52;
    goto LABEL_76;
  }
  int v10 = a1 + 2;
  if (!result)
  {
    int v24 = *a1;
    int v25 = *a1 >> 31;
    uint64_t v26 = *((void *)a1 + 1);
    if (v25 == *a1)
    {
      int v27 = *(_DWORD *)a2;
      if (v24 == *(_DWORD *)a2)
      {
        int v28 = 0;
        *int v10 = *(void *)(a2 + 8);
        int v29 = 0;
        if (*(_DWORD *)a2) {
          goto LABEL_26;
        }
        goto LABEL_41;
      }
      int v28 = 0;
    }
    else
    {
      uint64_t v70 = *((void *)a1 + 2);
      int v71 = a1[6];
      int v28 = v25 ^ v24;
      int v27 = *(_DWORD *)a2;
      if (v24 == *(_DWORD *)a2)
      {
        long long v33 = *(_OWORD *)(a2 + 8);
        a1[6] = *(_DWORD *)(a2 + 24);
        *(_OWORD *)int v10 = v33;
        int v29 = v28 >> 31;
        if (*(_DWORD *)a2 != v28) {
          goto LABEL_26;
        }
        goto LABEL_41;
      }
    }
    int v41 = v27 ^ (v27 >> 31);
    uint64_t v42 = (long long *)(a2 + 8);
    if (v41)
    {
      long long v43 = *v42;
      a1[6] = *(_DWORD *)(a2 + 24);
      *(_OWORD *)int v10 = v43;
      *a1 = v41;
      int v29 = v28 >> 31;
      if (*(_DWORD *)a2 != v28) {
        goto LABEL_26;
      }
    }
    else
    {
      *((void *)a1 + 1) = *(void *)v42;
      *a1 = 0;
      int v29 = v28 >> 31;
      if (*(_DWORD *)a2 != v28)
      {
LABEL_26:
        *(void *)(a2 + 8) = v26;
        int v34 = v29 ^ v28;
        if (v34)
        {
          *(void *)(a2 + 16) = v70;
          *(_DWORD *)(a2 + 24) = v71;
          *(_DWORD *)a2 = v34;
        }
        else
        {
          *(_DWORD *)a2 = 0;
        }
        goto LABEL_56;
      }
    }
LABEL_41:
    *(void *)(a2 + 8) = v26;
    if (v29 != v28)
    {
      *(void *)(a2 + 16) = v70;
      *(_DWORD *)(a2 + 24) = v71;
    }
LABEL_56:
    unint64_t v44 = (int *)(a2 + 32);
    int v55 = a1[8];
    a1[8] = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = v55;
    if (sub_100278A64(a4, a3, (_DWORD *)a2))
    {
      int v56 = *(_DWORD *)a2;
      int v57 = *(int *)a2 >> 31;
      uint64_t v59 = (void *)(a2 + 8);
      uint64_t v58 = *(void *)(a2 + 8);
      if (v57 == *(_DWORD *)a2)
      {
        int v60 = *(_DWORD *)a3;
        if (v56 == *(_DWORD *)a3)
        {
          int v61 = 0;
          *uint64_t v59 = *(void *)(a3 + 8);
          int v62 = 0;
          if (*(_DWORD *)a3) {
            goto LABEL_64;
          }
          goto LABEL_80;
        }
        int v61 = 0;
      }
      else
      {
        uint64_t v70 = *(void *)(a2 + 16);
        int v71 = *(_DWORD *)(a2 + 24);
        int v61 = v57 ^ v56;
        int v60 = *(_DWORD *)a3;
        if (v56 == *(_DWORD *)a3)
        {
          long long v63 = *(_OWORD *)(a3 + 8);
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
          *(_OWORD *)uint64_t v59 = v63;
          int v62 = v61 >> 31;
          if (*(_DWORD *)a3 != v61) {
            goto LABEL_64;
          }
          goto LABEL_80;
        }
      }
      int v66 = v60 ^ (v60 >> 31);
      uint64_t v67 = (long long *)(a3 + 8);
      if (v66)
      {
        long long v68 = *v67;
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)uint64_t v59 = v68;
        *(_DWORD *)a2 = v66;
        int v62 = v61 >> 31;
        if (*(_DWORD *)a3 != v61) {
          goto LABEL_64;
        }
      }
      else
      {
        *(void *)(a2 + 8) = *(void *)v67;
        *(_DWORD *)a2 = 0;
        int v62 = v61 >> 31;
        if (*(_DWORD *)a3 != v61)
        {
LABEL_64:
          *(void *)(a3 + 8) = v58;
          if (v62 != v61)
          {
            *(void *)(a3 + 16) = v70;
            *(_DWORD *)(a3 + 24) = v71;
            *(_DWORD *)a3 = v62 ^ v61;
          }
          else
          {
            *(_DWORD *)a3 = 0;
          }
LABEL_85:
          char v45 = (int *)(a3 + 32);
          goto LABEL_86;
        }
      }
LABEL_80:
      *(void *)(a3 + 8) = v58;
      if (v62 != v61)
      {
        *(void *)(a3 + 16) = v70;
        *(_DWORD *)(a3 + 24) = v71;
      }
      goto LABEL_85;
    }
    return 1;
  }
  int v11 = *a1;
  int v12 = *a1 >> 31;
  uint64_t v13 = *((void *)a1 + 1);
  if (v12 == *a1)
  {
    int v14 = *(_DWORD *)a3;
    if (v11 == *(_DWORD *)a3)
    {
      int v15 = 0;
      *int v10 = *(void *)(a3 + 8);
      int v16 = 0;
      if (*(_DWORD *)a3) {
        goto LABEL_18;
      }
LABEL_31:
      *(void *)(a3 + 8) = v13;
      if (v16 != v15)
      {
        *(void *)(a3 + 16) = v70;
        *(_DWORD *)(a3 + 24) = v71;
      }
      goto LABEL_44;
    }
    int v15 = 0;
  }
  else
  {
    uint64_t v70 = *((void *)a1 + 2);
    int v71 = a1[6];
    int v15 = v12 ^ v11;
    int v14 = *(_DWORD *)a3;
    if (v11 == *(_DWORD *)a3)
    {
      long long v30 = *(_OWORD *)(a3 + 8);
      a1[6] = *(_DWORD *)(a3 + 24);
      *(_OWORD *)int v10 = v30;
      int v16 = v15 >> 31;
      if (*(_DWORD *)a3 != v15) {
        goto LABEL_18;
      }
      goto LABEL_31;
    }
  }
  int v35 = v14 ^ (v14 >> 31);
  uint64_t v36 = (long long *)(a3 + 8);
  if (v35)
  {
    long long v37 = *v36;
    a1[6] = *(_DWORD *)(a3 + 24);
    *(_OWORD *)int v10 = v37;
    *a1 = v35;
    int v16 = v15 >> 31;
    if (*(_DWORD *)a3 != v15) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
  *((void *)a1 + 1) = *(void *)v36;
  *a1 = 0;
  int v16 = v15 >> 31;
  if (*(_DWORD *)a3 == v15) {
    goto LABEL_31;
  }
LABEL_18:
  *(void *)(a3 + 8) = v13;
  int v31 = v16 ^ v15;
  if (v31)
  {
    *(void *)(a3 + 16) = v70;
    *(_DWORD *)(a3 + 24) = v71;
    *(_DWORD *)a3 = v31;
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
LABEL_44:
  unint64_t v44 = a1 + 8;
  char v45 = (int *)(a3 + 32);
  uint64_t result = 1;
LABEL_87:
  int v69 = *v44;
  *unint64_t v44 = *v45;
  int *v45 = v69;
  return result;
}

int *sub_100279D80(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = a2;
  int v8 = *(_DWORD *)a1;
  unsigned int v6 = (long long *)(a1 + 8);
  int v7 = v8;
  int v9 = v8 >> 31;
  uint64_t v67 = v6;
  if (v8 >> 31 == v8)
  {
    *(void *)&long long v80 = *(void *)v6;
    int v9 = v7;
  }
  else
  {
    long long v80 = *v6;
    int v81 = *((_DWORD *)v6 + 4);
  }
  int v10 = v9 ^ v7;
  int v11 = *(_DWORD *)(a1 + 32);
  int v79 = v10;
  int v82 = v11;
  if (sub_100278A64(a3, (uint64_t)&v79, (_DWORD *)(a2 - 40)))
  {
    int v12 = (int *)a1;
    do
      v12 += 10;
    while (!sub_100278A64(a3, (uint64_t)&v79, v12));
  }
  else
  {
    uint64_t v13 = (int *)(a1 + 40);
    do
    {
      int v12 = v13;
      if ((unint64_t)v13 >= v5) {
        break;
      }
      BOOL v14 = sub_100278A64(a3, (uint64_t)&v79, v13);
      uint64_t v13 = v12 + 10;
    }
    while (!v14);
  }
  if ((unint64_t)v12 < v5)
  {
    do
      v5 -= 40;
    while (sub_100278A64(a3, (uint64_t)&v79, (_DWORD *)v5));
  }
  if ((unint64_t)v12 < v5)
  {
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v71 = 0;
    unsigned int v70 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    uint64_t v76 = 0;
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    unsigned int v17 = 0;
    unsigned int v18 = 0;
    unsigned int v19 = 0;
    do
    {
      int v20 = *v12;
      int v21 = *v12 >> 31;
      int v23 = v12 + 2;
      uint64_t v22 = *((void *)v12 + 1);
      if (v21 == *v12)
      {
        int v24 = *(_DWORD *)v5;
        if (v20 == *(_DWORD *)v5)
        {
          int v25 = 0;
          *int v23 = *(void *)(v5 + 8);
          int v26 = 0;
          if (!*(_DWORD *)v5) {
            goto LABEL_26;
          }
          goto LABEL_29;
        }
        int v25 = 0;
      }
      else
      {
        uint64_t v83 = *((void *)v12 + 2);
        LODWORD(v84) = v12[6];
        int v25 = v21 ^ v20;
        int v24 = *(_DWORD *)v5;
        if (v20 == *(_DWORD *)v5)
        {
          long long v27 = *(_OWORD *)(v5 + 8);
          v12[6] = *(_DWORD *)(v5 + 24);
          *(_OWORD *)int v23 = v27;
          int v26 = v25 >> 31;
          if (*(_DWORD *)v5 == v25) {
            goto LABEL_26;
          }
          goto LABEL_29;
        }
      }
      int v28 = v24 ^ (v24 >> 31);
      int v29 = (long long *)(v5 + 8);
      if (v28)
      {
        long long v30 = *v29;
        v12[6] = *(_DWORD *)(v5 + 24);
        *(_OWORD *)int v23 = v30;
        *int v12 = v28;
        int v26 = v25 >> 31;
        if (*(_DWORD *)v5 == v25) {
          goto LABEL_26;
        }
      }
      else
      {
        *((void *)v12 + 1) = *(void *)v29;
        *int v12 = 0;
        int v26 = v25 >> 31;
        if (*(_DWORD *)v5 == v25)
        {
LABEL_26:
          *(void *)(v5 + 8) = v22;
          if (v26 != v25)
          {
            *(void *)(v5 + 16) = v83;
            *(_DWORD *)(v5 + 24) = v84;
          }
          goto LABEL_32;
        }
      }
LABEL_29:
      *(void *)(v5 + 8) = v22;
      if (v26 != v25)
      {
        *(void *)(v5 + 16) = v83;
        *(_DWORD *)(v5 + 24) = v84;
        *(_DWORD *)unint64_t v5 = v26 ^ v25;
      }
      else
      {
        *(_DWORD *)unint64_t v5 = 0;
      }
LABEL_32:
      int v31 = v12[8];
      unsigned char v12[8] = *(_DWORD *)(v5 + 32);
      *(_DWORD *)(v5 + 32) = v31;
      for (uint64_t i = v12 + 18; ; i += 10)
      {
        int v33 = *(i - 8);
        int v34 = v33 >> 31;
        int v35 = v33;
        if (v33 >> 31 != v33)
        {
          LODWORD(v75) = *((unsigned __int8 *)i - 15);
          HIDWORD(v75) = *((unsigned __int8 *)i - 16);
          LODWORD(v74) = *((unsigned __int8 *)i - 13);
          HIDWORD(v74) = *((unsigned __int8 *)i - 14);
          LODWORD(v73) = *((unsigned __int8 *)i - 11);
          HIDWORD(v73) = *((unsigned __int8 *)i - 12);
          LODWORD(v72) = *((unsigned __int8 *)i - 9);
          HIDWORD(v72) = *((unsigned __int8 *)i - 10);
          LODWORD(v71) = *((unsigned __int8 *)i - 7);
          HIDWORD(v71) = *((unsigned __int8 *)i - 8);
          unsigned int v70 = *((unsigned __int8 *)i - 6);
          int v35 = v33 >> 31;
          unsigned __int8 v69 = *((unsigned char *)i - 5);
        }
        unint64_t v36 = *((void *)i - 3);
        int v37 = v35 ^ v33;
        int v38 = v79 >> 31;
        int v39 = (v35 ^ v33) >> 31;
        if (v79 >> 31 == v79) {
          break;
        }
        if (v39 != v37
          && (v80 < *((void *)i - 3)
           || v80 <= *((void *)i - 3)
           && (BYTE1(v80) < BYTE1(v36)
            || BYTE1(v80) <= BYTE1(v36)
            && (BYTE2(v80) < BYTE2(v36)
             || BYTE2(v80) <= BYTE2(v36)
             && (BYTE3(v80) < BYTE3(v36)
              || BYTE3(v80) <= BYTE3(v36)
              && (BYTE4(v80) < BYTE4(v36)
               || BYTE4(v80) <= BYTE4(v36)
               && (BYTE5(v80) < BYTE5(v36)
                || BYTE5(v80) <= BYTE5(v36)
                && (BYTE6(v80) < BYTE6(v36)
                 || BYTE6(v80) <= BYTE6(v36)
                 && (BYTE7(v80) < HIBYTE(v36)
                  || BYTE7(v80) <= HIBYTE(v36)
                  && (BYTE8(v80) < HIDWORD(v75)
                   || HIDWORD(v75) >= BYTE8(v80)
                   && (BYTE9(v80) < v75
                    || v75 >= BYTE9(v80)
                    && (BYTE10(v80) < HIDWORD(v74)
                     || HIDWORD(v74) >= BYTE10(v80)
                     && (BYTE11(v80) < v74
                      || v74 >= BYTE11(v80)
                      && (BYTE12(v80) < HIDWORD(v73)
                       || HIDWORD(v73) >= BYTE12(v80)
                       && (BYTE13(v80) < v73
                        || v73 >= BYTE13(v80)
                        && (BYTE14(v80) < HIDWORD(v72)
                         || HIDWORD(v72) >= BYTE14(v80)
                         && (HIBYTE(v80) < v72
                          || v72 >= HIBYTE(v80)
                          && (v81 < HIDWORD(v71)
                           || HIDWORD(v71) >= v81
                           && (BYTE1(v81) < v71
                            || v71 >= BYTE1(v81)
                            && (BYTE2(v81) < v70 || v70 >= BYTE2(v81) && HIBYTE(v81) < v69))))))))))))))))))))
        {
          goto LABEL_91;
        }
        long long v84 = v80;
        int v85 = v81;
        int v41 = v38 ^ v79;
        LODWORD(v83) = v38 ^ v79;
        int v42 = (v38 ^ v79) >> 31;
        if (v34 == v33)
        {
LABEL_88:
          if (v42 != v41 || v36 < (unint64_t)v84) {
            continue;
          }
          goto LABEL_33;
        }
LABEL_44:
        if (v42 != v41 && sub_1001E6FAC((unsigned __int8 *)i - 24, (unsigned __int8 *)&v84)) {
          continue;
        }
LABEL_33:
        if (v82 < *i) {
          goto LABEL_91;
        }
      }
      if (v39 == v37 && (unint64_t)v80 >= v36)
      {
        *(void *)&long long v84 = v80;
        int v41 = 0;
        LODWORD(v83) = 0;
        int v42 = 0;
        if (v34 == v33) {
          goto LABEL_88;
        }
        goto LABEL_44;
      }
LABEL_91:
      int v12 = i - 8;
      while (1)
      {
        while (1)
        {
          v5 -= 40;
          long long v43 = (unsigned __int8 *)(v5 + 8);
          int v44 = *(_DWORD *)v5;
          int v45 = *(_DWORD *)v5;
          if (*(int *)v5 >> 31 != *(_DWORD *)v5)
          {
            LODWORD(v78) = *(unsigned __int8 *)(v5 + 17);
            HIDWORD(v78) = *(unsigned __int8 *)(v5 + 16);
            LODWORD(v77) = *(unsigned __int8 *)(v5 + 19);
            HIDWORD(v77) = *(unsigned __int8 *)(v5 + 18);
            LODWORD(v76) = *(unsigned __int8 *)(v5 + 21);
            HIDWORD(v76) = *(unsigned __int8 *)(v5 + 20);
            unsigned int v15 = *(unsigned __int8 *)(v5 + 22);
            unsigned int v16 = *(unsigned __int8 *)(v5 + 23);
            unsigned int v17 = *(unsigned __int8 *)(v5 + 24);
            unsigned int v18 = *(unsigned __int8 *)(v5 + 25);
            unsigned int v19 = *(unsigned __int8 *)(v5 + 26);
            int v45 = v44 >> 31;
            unsigned __int8 v3 = *(unsigned char *)(v5 + 27);
          }
          unint64_t v46 = *(void *)v43;
          int v47 = v45 ^ v44;
          int v48 = v79 >> 31;
          int v49 = v47 >> 31;
          if (v79 >> 31 != v79) {
            break;
          }
          if (v49 == v47 && (unint64_t)v80 >= v46)
          {
            *(void *)&long long v84 = v80;
            int v51 = 0;
            LODWORD(v83) = 0;
            int v52 = 0;
            if (*(_DWORD *)v5 == *(int *)v5 >> 31) {
              goto LABEL_109;
            }
LABEL_102:
            if (v52 != v51 && sub_1001E6FAC(v43, (unsigned __int8 *)&v84)) {
              goto LABEL_15;
            }
LABEL_92:
            if (v82 >= *(_DWORD *)(v5 + 32)) {
              goto LABEL_15;
            }
          }
        }
        if (v49 == v47) {
          break;
        }
        if (v80 >= *(void *)v43)
        {
          if (v80 > *(void *)v43) {
            break;
          }
          if (BYTE1(v80) >= BYTE1(v46))
          {
            if (BYTE1(v80) > BYTE1(v46)) {
              break;
            }
            if (BYTE2(v80) >= BYTE2(v46))
            {
              if (BYTE2(v80) > BYTE2(v46)) {
                break;
              }
              if (BYTE3(v80) >= BYTE3(v46))
              {
                if (BYTE3(v80) > BYTE3(v46)) {
                  break;
                }
                if (BYTE4(v80) >= BYTE4(v46))
                {
                  if (BYTE4(v80) > BYTE4(v46)) {
                    break;
                  }
                  if (BYTE5(v80) >= BYTE5(v46))
                  {
                    if (BYTE5(v80) > BYTE5(v46)) {
                      break;
                    }
                    if (BYTE6(v80) >= BYTE6(v46))
                    {
                      if (BYTE6(v80) > BYTE6(v46)) {
                        break;
                      }
                      unint64_t v53 = HIBYTE(v46);
                      if (BYTE7(v80) >= v53
                        && (BYTE7(v80) > v53
                         || BYTE8(v80) >= HIDWORD(v78)
                         && (HIDWORD(v78) < BYTE8(v80)
                          || BYTE9(v80) >= v78
                          && (v78 < BYTE9(v80)
                           || BYTE10(v80) >= HIDWORD(v77)
                           && (HIDWORD(v77) < BYTE10(v80)
                            || BYTE11(v80) >= v77
                            && (v77 < BYTE11(v80)
                             || BYTE12(v80) >= HIDWORD(v76)
                             && (HIDWORD(v76) < BYTE12(v80)
                              || BYTE13(v80) >= v76
                              && (v76 < BYTE13(v80)
                               || BYTE14(v80) >= v15
                               && (v15 < BYTE14(v80)
                                || HIBYTE(v80) >= v16
                                && (v16 < HIBYTE(v80)
                                 || v81 >= v17
                                 && (v17 < v81
                                  || BYTE1(v81) >= v18
                                  && (v18 < BYTE1(v81)
                                   || BYTE2(v81) >= v19 && (v19 < BYTE2(v81) || HIBYTE(v81) >= v3)))))))))))))
                      {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      long long v84 = v80;
      int v85 = v81;
      int v51 = v48 ^ v79;
      LODWORD(v83) = v48 ^ v79;
      int v52 = (v48 ^ v79) >> 31;
      if (*(_DWORD *)v5 != *(int *)v5 >> 31) {
        goto LABEL_102;
      }
LABEL_109:
      if (v52 == v51 && *(void *)v43 >= (unint64_t)v84) {
        goto LABEL_92;
      }
LABEL_15:
      ;
    }
    while ((unint64_t)v12 < v5);
  }
  long long v54 = v12 - 10;
  int v55 = *(v12 - 10);
  if (v12 - 10 != (int *)a1)
  {
    if (*(_DWORD *)a1 == v55)
    {
      int v56 = v12 - 8;
      if (v55 == v55 >> 31)
      {
        *(void *)uint64_t v67 = *(void *)v56;
      }
      else
      {
        long long v60 = *(_OWORD *)v56;
        *((_DWORD *)v67 + 4) = *(v12 - 4);
        *uint64_t v67 = v60;
      }
    }
    else
    {
      int v57 = v55 ^ (v55 >> 31);
      uint64_t v58 = v12 - 8;
      if (v57)
      {
        long long v59 = *(_OWORD *)v58;
        *((_DWORD *)v67 + 4) = *(v12 - 4);
        *uint64_t v67 = v59;
        *(_DWORD *)a1 = v57;
      }
      else
      {
        *(void *)(a1 + 8) = *(void *)v58;
        *(_DWORD *)a1 = 0;
      }
    }
    *(_DWORD *)(a1 + 32) = *(v12 - 2);
    int v55 = *(v12 - 10);
  }
  if (v55 == v79)
  {
    int v61 = v12 - 8;
    if (v55 == v55 >> 31)
    {
      *(void *)int v61 = v80;
    }
    else
    {
      long long v65 = v80;
      *(v12 - 4) = v81;
      *(_OWORD *)int v61 = v65;
    }
  }
  else
  {
    int v62 = v79 ^ (v79 >> 31);
    long long v63 = v12 - 8;
    if (v62)
    {
      long long v64 = v80;
      *(v12 - 4) = v81;
      *(_OWORD *)long long v63 = v64;
      *long long v54 = v62;
    }
    else
    {
      *(void *)long long v63 = v80;
      *long long v54 = 0;
    }
  }
  *(v12 - 2) = v82;
  return v12;
}

int *sub_10027A73C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v9 = (void *)(a1 + 8);
  int v8 = *(_DWORD *)a1;
  int v10 = *(int *)a1 >> 31;
  uint64_t v112 = a1 + 8;
  if (v8 >> 31 == v8)
  {
    *(void *)&long long v154 = *v9;
    int v10 = v8;
  }
  else
  {
    long long v154 = *(_OWORD *)v9;
    int v155 = *(_DWORD *)(a1 + 24);
  }
  uint64_t v11 = 0;
  int v12 = *(_DWORD *)(a1 + 32);
  int v153 = v10 ^ v8;
  int v156 = v12;
  do
  {
    BOOL v13 = sub_100278A64(a3, a1 + v11 + 40, &v153);
    v11 += 40;
  }
  while (v13);
  uint64_t v22 = (int *)(a1 + v11);
  if (v11 == 40)
  {
    do
    {
      if ((unint64_t)v22 >= a2) {
        break;
      }
      a2 -= 40;
    }
    while (!sub_100278A64(a3, a2, &v153));
  }
  else
  {
    do
      a2 -= 40;
    while (!sub_100278A64(a3, a2, &v153));
  }
  if ((unint64_t)v22 >= a2)
  {
    int v25 = (int *)(a1 + v11);
    uint64_t result = v22 - 10;
    int v100 = *(v22 - 10);
    if (v22 - 10 == (int *)a1) {
      goto LABEL_249;
    }
    goto LABEL_244;
  }
  int v23 = *v22;
  unint64_t v24 = a2;
  int v25 = (int *)(a1 + v11);
  while (2)
  {
    long long v27 = v25 + 2;
    uint64_t v26 = *((void *)v25 + 1);
    int v28 = v152;
    if (v23 >> 31 == v23)
    {
      int v29 = *(_DWORD *)v24;
      if (v23 == *(_DWORD *)v24)
      {
        int v30 = 0;
        *long long v27 = *(void *)(v24 + 8);
        int v31 = 0;
        int v115 = v4;
        if (*(_DWORD *)v24) {
          goto LABEL_20;
        }
        goto LABEL_25;
      }
      int v30 = 0;
    }
    else
    {
      uint64_t v157 = *((void *)v25 + 2);
      int v158 = v25[6];
      int v30 = (v23 >> 31) ^ v23;
      int v29 = *(_DWORD *)v24;
      if (v23 == *(_DWORD *)v24)
      {
        long long v32 = *(_OWORD *)(v24 + 8);
        v25[6] = *(_DWORD *)(v24 + 24);
        *(_OWORD *)long long v27 = v32;
        int v31 = v30 >> 31;
        int v115 = v4;
        if (*(_DWORD *)v24 != v30) {
          goto LABEL_20;
        }
        goto LABEL_25;
      }
    }
    int v33 = v29 ^ (v29 >> 31);
    int v34 = (long long *)(v24 + 8);
    if (v33)
    {
      long long v35 = *v34;
      v25[6] = *(_DWORD *)(v24 + 24);
      *(_OWORD *)long long v27 = v35;
      *int v25 = v33;
      int v31 = v30 >> 31;
      int v115 = v4;
      if (*(_DWORD *)v24 != v30) {
        goto LABEL_20;
      }
    }
    else
    {
      *((void *)v25 + 1) = *(void *)v34;
      *int v25 = 0;
      int v31 = v30 >> 31;
      int v115 = v4;
      if (*(_DWORD *)v24 != v30)
      {
LABEL_20:
        *(void *)(v24 + 8) = v26;
        if (v31 != v30)
        {
          *(void *)(v24 + 16) = v157;
          *(_DWORD *)(v24 + 24) = v158;
          *(_DWORD *)unint64_t v24 = v31 ^ v30;
        }
        else
        {
          *(_DWORD *)unint64_t v24 = 0;
        }
        goto LABEL_28;
      }
    }
LABEL_25:
    *(void *)(v24 + 8) = v26;
    if (v31 != v30)
    {
      *(void *)(v24 + 16) = v157;
      *(_DWORD *)(v24 + 24) = v158;
    }
LABEL_28:
    int v36 = v25[8];
    v25[8] = *(_DWORD *)(v24 + 32);
    *(_DWORD *)(v24 + 32) = v36;
    int v37 = v153 >> 31;
    int v38 = BYTE13(v154);
    unint64_t v113 = BYTE7(v154);
    int v39 = (v153 >> 31) ^ v153;
    int v151 = v39 >> 31;
    for (uint64_t i = v25 + 18; ; i += 10)
    {
      if (v37 != v153)
      {
        unsigned __int8 v16 = HIBYTE(v155);
        LOBYTE(v11) = BYTE2(v155);
        unsigned __int8 v15 = BYTE1(v155);
        unsigned __int8 v14 = v155;
        unsigned __int8 v21 = HIBYTE(v154);
        unsigned __int8 v20 = BYTE14(v154);
        unsigned __int8 v19 = v38;
        unsigned __int8 v18 = BYTE12(v154);
        unsigned __int8 v17 = BYTE11(v154);
        int v28 = BYTE10(v154);
        LOBYTE(v22) = BYTE9(v154);
        int v3 = BYTE8(v154);
      }
      int v23 = *(i - 8);
      int v152 = v28;
      if (v23 >> 31 == v23) {
        break;
      }
      if (v151 == v39) {
        goto LABEL_41;
      }
      unsigned int v45 = *((unsigned __int8 *)i - 24);
      if (v45 < v154) {
        goto LABEL_29;
      }
      int v38 = BYTE13(v154);
      if (v45 > v154) {
        goto LABEL_41;
      }
      unsigned int v46 = *((unsigned __int8 *)i - 23);
      if (v46 < BYTE1(v154))
      {
LABEL_29:
        int v38 = BYTE13(v154);
        goto LABEL_30;
      }
      int v38 = BYTE13(v154);
      if (v46 > BYTE1(v154)) {
        goto LABEL_41;
      }
      unsigned int v47 = *((unsigned __int8 *)i - 22);
      if (v47 < BYTE2(v154)) {
        goto LABEL_30;
      }
      if (v47 > BYTE2(v154)) {
        goto LABEL_41;
      }
      unsigned int v48 = *((unsigned __int8 *)i - 21);
      if (v48 < BYTE3(v154)) {
        goto LABEL_30;
      }
      if (v48 > BYTE3(v154)) {
        goto LABEL_41;
      }
      unsigned int v49 = *((unsigned __int8 *)i - 20);
      if (v49 < BYTE4(v154)) {
        goto LABEL_30;
      }
      if (v49 > BYTE4(v154)) {
        goto LABEL_41;
      }
      unsigned int v50 = *((unsigned __int8 *)i - 19);
      if (v50 < BYTE5(v154)) {
        goto LABEL_30;
      }
      if (v50 > BYTE5(v154)) {
        goto LABEL_41;
      }
      unsigned int v51 = *((unsigned __int8 *)i - 18);
      if (v51 < BYTE6(v154)) {
        goto LABEL_30;
      }
      if (v51 > BYTE6(v154)) {
        goto LABEL_41;
      }
      unsigned int v52 = *((unsigned __int8 *)i - 17);
      if (v52 < v113) {
        goto LABEL_30;
      }
      if (v52 > v113) {
        goto LABEL_41;
      }
      unsigned int v53 = *((unsigned __int8 *)i - 16);
      if (v53 < v3) {
        goto LABEL_30;
      }
      if (v53 > v3) {
        goto LABEL_41;
      }
      unsigned int v54 = *((unsigned __int8 *)i - 15);
      if (v54 < v22) {
        goto LABEL_30;
      }
      if (v54 > v22) {
        goto LABEL_41;
      }
      unsigned int v55 = *((unsigned __int8 *)i - 14);
      if (v55 < v28) {
        goto LABEL_30;
      }
      if (v55 > v28) {
        goto LABEL_41;
      }
      unsigned int v56 = *((unsigned __int8 *)i - 13);
      if (v56 < v17) {
        goto LABEL_119;
      }
      int v38 = BYTE13(v154);
      if (v56 > v17) {
        goto LABEL_41;
      }
      unsigned int v57 = *((unsigned __int8 *)i - 12);
      if (v57 < v18) {
        goto LABEL_119;
      }
      int v38 = BYTE13(v154);
      if (v57 > v18) {
        goto LABEL_41;
      }
      unsigned int v58 = *((unsigned __int8 *)i - 11);
      if (v58 < v19) {
        goto LABEL_119;
      }
      int v38 = BYTE13(v154);
      if (v58 > v19) {
        goto LABEL_41;
      }
      unsigned int v59 = *((unsigned __int8 *)i - 10);
      if (v59 < v20) {
        goto LABEL_119;
      }
      int v38 = BYTE13(v154);
      if (v59 > v20) {
        goto LABEL_41;
      }
      unsigned int v60 = *((unsigned __int8 *)i - 9);
      if (v60 < v21) {
        goto LABEL_119;
      }
      int v38 = BYTE13(v154);
      if (v60 > v21) {
        goto LABEL_41;
      }
      unsigned int v61 = *((unsigned __int8 *)i - 8);
      if (v61 < v14) {
        goto LABEL_119;
      }
      int v38 = BYTE13(v154);
      if (v61 > v14) {
        goto LABEL_41;
      }
      unsigned int v62 = *((unsigned __int8 *)i - 7);
      if (v62 < v15) {
        goto LABEL_119;
      }
      int v38 = BYTE13(v154);
      if (v62 > v15) {
        goto LABEL_41;
      }
      unsigned int v63 = *((unsigned __int8 *)i - 6);
      if (v63 < v11)
      {
LABEL_119:
        int v38 = BYTE13(v154);
        goto LABEL_30;
      }
      int v38 = BYTE13(v154);
      if (v63 > v11 || *((unsigned __int8 *)i - 5) >= v16)
      {
LABEL_41:
        unint64_t v41 = *((void *)i - 3);
        unsigned __int8 v138 = *((unsigned char *)i - 16);
        unsigned __int8 v137 = *((unsigned char *)i - 15);
        unsigned __int8 v136 = *((unsigned char *)i - 14);
        unsigned __int8 v135 = *((unsigned char *)i - 13);
        unsigned __int8 v134 = *((unsigned char *)i - 12);
        unsigned __int8 v133 = *((unsigned char *)i - 11);
        unsigned __int8 v132 = *((unsigned char *)i - 10);
        unsigned __int8 v131 = *((unsigned char *)i - 9);
        unsigned __int8 v130 = *((unsigned char *)i - 8);
        unsigned __int8 v129 = *((unsigned char *)i - 7);
        unsigned __int8 v128 = *((unsigned char *)i - 6);
        unsigned __int8 v127 = *((unsigned char *)i - 5);
        int v42 = v3;
        int v43 = (v23 >> 31) ^ v23;
        int v44 = v43 >> 31;
        if (v37 != v153) {
          goto LABEL_42;
        }
LABEL_37:
        if (v44 != v43 || (unint64_t)v154 < v41) {
          goto LABEL_125;
        }
LABEL_82:
        if (*i >= v156) {
          goto LABEL_125;
        }
        int v3 = v42;
      }
LABEL_30:
      int v28 = v152;
    }
    if (v151 != v39) {
      goto LABEL_30;
    }
    unint64_t v41 = *((void *)i - 3);
    if (v41 < (unint64_t)v154) {
      goto LABEL_30;
    }
    int v42 = v3;
    int v43 = 0;
    int v44 = 0;
    if (v37 == v153) {
      goto LABEL_37;
    }
LABEL_42:
    if (v44 == v43) {
      goto LABEL_82;
    }
    if (v41 <= v154)
    {
      if (v41 < v154) {
        goto LABEL_82;
      }
      int v38 = BYTE13(v154);
      if (BYTE1(v41) <= BYTE1(v154)
        && (BYTE1(v41) < BYTE1(v154)
         || BYTE2(v41) <= BYTE2(v154)
         && (BYTE2(v41) < BYTE2(v154)
          || BYTE3(v41) <= BYTE3(v154)
          && (BYTE3(v41) < BYTE3(v154)
           || BYTE4(v41) <= BYTE4(v154)
           && (BYTE4(v41) < BYTE4(v154)
            || BYTE5(v41) <= BYTE5(v154)
            && (BYTE5(v41) < BYTE5(v154)
             || BYTE6(v41) <= BYTE6(v154)
             && (BYTE6(v41) < BYTE6(v154)
              || HIBYTE(v41) <= v113
              && (HIBYTE(v41) < v113
               || BYTE8(v154) >= v138
               && (BYTE8(v154) > v138
                || BYTE9(v154) >= v137
                && (BYTE9(v154) > v137
                 || BYTE10(v154) >= v136
                 && (BYTE10(v154) > v136
                  || BYTE11(v154) >= v135
                  && (BYTE11(v154) > v135
                   || BYTE12(v154) >= v134
                   && (BYTE12(v154) > v134
                    || BYTE13(v154) >= v133
                    && (BYTE13(v154) > v133
                     || BYTE14(v154) >= v132
                     && (BYTE14(v154) > v132
                      || HIBYTE(v154) >= v131
                      && (HIBYTE(v154) > v131
                       || v155 >= v130
                       && (v155 > v130
                        || BYTE1(v155) >= v129
                        && (BYTE1(v155) > v129
                         || BYTE2(v155) >= v128
                         && (BYTE2(v155) > v128 || HIBYTE(v155) >= v127)))))))))))))))))))
      {
        goto LABEL_82;
      }
    }
LABEL_125:
    int v114 = i - 8;
    v24 -= 40;
    int v4 = v115;
    int v3 = v42;
    while (1)
    {
      int v64 = v139;
      if (v37 != v153) {
        int v64 = HIBYTE(v155);
      }
      int v139 = v64;
      int v65 = v140;
      if (v37 != v153) {
        int v65 = BYTE2(v155);
      }
      int v140 = v65;
      int v66 = v141;
      if (v37 != v153) {
        int v66 = BYTE1(v155);
      }
      int v141 = v66;
      int v67 = v142;
      if (v37 != v153) {
        int v67 = v155;
      }
      int v142 = v67;
      int v68 = v143;
      if (v37 != v153) {
        int v68 = HIBYTE(v154);
      }
      int v143 = v68;
      int v69 = v144;
      if (v37 != v153) {
        int v69 = BYTE14(v154);
      }
      int v144 = v69;
      int v70 = v145;
      if (v37 != v153) {
        int v70 = v38;
      }
      int v145 = v70;
      int v71 = v146;
      if (v37 != v153) {
        int v71 = BYTE12(v154);
      }
      int v146 = v71;
      int v72 = v147;
      if (v37 != v153) {
        int v72 = BYTE11(v154);
      }
      int v147 = v72;
      int v73 = v148;
      if (v37 != v153) {
        int v73 = BYTE10(v154);
      }
      int v148 = v73;
      int v74 = v149;
      int v75 = v150;
      if (v37 != v153) {
        int v74 = BYTE9(v154);
      }
      int v149 = v74;
      if (v37 != v153) {
        int v75 = BYTE8(v154);
      }
      int v76 = *(int *)v24 >> 31;
      int v150 = v75;
      if (v76 != *(_DWORD *)v24) {
        break;
      }
      if (v151 != v39) {
        goto LABEL_13;
      }
      unint64_t v77 = *(void *)(v24 + 8);
      if (v77 < (unint64_t)v154) {
        goto LABEL_13;
      }
      int v78 = 0;
      int v79 = 0;
      if (v37 == v153)
      {
LABEL_238:
        int v3 = v42;
        if (v79 != v78 || (unint64_t)v154 < v77) {
          goto LABEL_127;
        }
        goto LABEL_126;
      }
LABEL_156:
      int v3 = v42;
      if (v79 != v78)
      {
        int v38 = BYTE13(v154);
        if (v77 > v154) {
          goto LABEL_127;
        }
        if (v77 >= v154)
        {
          int v38 = BYTE13(v154);
          if (BYTE1(v77) > BYTE1(v154)
            || BYTE1(v77) >= BYTE1(v154)
            && (BYTE2(v77) > BYTE2(v154)
             || BYTE2(v77) >= BYTE2(v154)
             && (BYTE3(v77) > BYTE3(v154)
              || BYTE3(v77) >= BYTE3(v154)
              && (BYTE4(v77) > BYTE4(v154)
               || BYTE4(v77) >= BYTE4(v154)
               && (BYTE5(v77) > BYTE5(v154)
                || BYTE5(v77) >= BYTE5(v154)
                && (BYTE6(v77) > BYTE6(v154)
                 || BYTE6(v77) >= BYTE6(v154)
                 && (HIBYTE(v77) > v113
                  || HIBYTE(v77) >= v113
                  && (BYTE8(v154) < v4
                   || BYTE8(v154) <= v4
                   && (BYTE9(v154) < v126
                    || BYTE9(v154) <= v126
                    && (BYTE10(v154) < v125
                     || BYTE10(v154) <= v125
                     && (BYTE11(v154) < v124
                      || BYTE11(v154) <= v124
                      && (BYTE12(v154) < v123
                       || BYTE12(v154) <= v123
                       && (BYTE13(v154) < v122
                        || BYTE13(v154) <= v122
                        && (BYTE14(v154) < v121
                         || BYTE14(v154) <= v121
                         && (HIBYTE(v154) < v120
                          || HIBYTE(v154) <= v120
                          && (v155 < v119
                           || v155 <= v119
                           && (BYTE1(v155) < v118
                            || BYTE1(v155) <= v118
                            && (BYTE2(v155) < v117
                             || BYTE2(v155) <= v117 && HIBYTE(v155) < v116))))))))))))))))))
          {
            goto LABEL_127;
          }
        }
      }
LABEL_126:
      if (*(_DWORD *)(v24 + 32) < v156) {
        goto LABEL_13;
      }
LABEL_127:
      v24 -= 40;
    }
    if (v151 == v39) {
      goto LABEL_237;
    }
    unsigned int v80 = *(unsigned __int8 *)(v24 + 8);
    if (v80 >= v154)
    {
      int v38 = BYTE13(v154);
      if (v80 > v154) {
        goto LABEL_237;
      }
      unsigned int v81 = *(unsigned __int8 *)(v24 + 9);
      if (v81 >= BYTE1(v154))
      {
        int v38 = BYTE13(v154);
        if (v81 > BYTE1(v154)) {
          goto LABEL_237;
        }
        unsigned int v82 = *(unsigned __int8 *)(v24 + 10);
        if (v82 >= BYTE2(v154))
        {
          if (v82 > BYTE2(v154)) {
            goto LABEL_237;
          }
          unsigned int v83 = *(unsigned __int8 *)(v24 + 11);
          if (v83 >= BYTE3(v154))
          {
            if (v83 > BYTE3(v154)) {
              goto LABEL_237;
            }
            unsigned int v84 = *(unsigned __int8 *)(v24 + 12);
            if (v84 >= BYTE4(v154))
            {
              if (v84 > BYTE4(v154)) {
                goto LABEL_237;
              }
              unsigned int v85 = *(unsigned __int8 *)(v24 + 13);
              if (v85 >= BYTE5(v154))
              {
                if (v85 > BYTE5(v154)) {
                  goto LABEL_237;
                }
                unsigned int v86 = *(unsigned __int8 *)(v24 + 14);
                if (v86 >= BYTE6(v154))
                {
                  if (v86 > BYTE6(v154)) {
                    goto LABEL_237;
                  }
                  unsigned int v87 = *(unsigned __int8 *)(v24 + 15);
                  if (v87 >= v113)
                  {
                    if (v87 > v113) {
                      goto LABEL_237;
                    }
                    unsigned int v88 = *(unsigned __int8 *)(v24 + 16);
                    if (v88 >= v150)
                    {
                      int v38 = BYTE13(v154);
                      if (v88 > v150) {
                        goto LABEL_237;
                      }
                      unsigned int v89 = *(unsigned __int8 *)(v24 + 17);
                      if (v89 >= v149)
                      {
                        int v38 = BYTE13(v154);
                        if (v89 > v149) {
                          goto LABEL_237;
                        }
                        unsigned int v90 = *(unsigned __int8 *)(v24 + 18);
                        if (v90 >= v148)
                        {
                          int v38 = BYTE13(v154);
                          if (v90 > v148) {
                            goto LABEL_237;
                          }
                          unsigned int v91 = *(unsigned __int8 *)(v24 + 19);
                          if (v91 >= v147)
                          {
                            int v38 = BYTE13(v154);
                            if (v91 > v147) {
                              goto LABEL_237;
                            }
                            unsigned int v92 = *(unsigned __int8 *)(v24 + 20);
                            if (v92 >= v146)
                            {
                              int v38 = BYTE13(v154);
                              if (v92 > v146) {
                                goto LABEL_237;
                              }
                              unsigned int v93 = *(unsigned __int8 *)(v24 + 21);
                              if (v93 >= v145)
                              {
                                int v38 = BYTE13(v154);
                                if (v93 > v145) {
                                  goto LABEL_237;
                                }
                                unsigned int v94 = *(unsigned __int8 *)(v24 + 22);
                                if (v94 >= v144)
                                {
                                  int v38 = BYTE13(v154);
                                  if (v94 > v144) {
                                    goto LABEL_237;
                                  }
                                  unsigned int v95 = *(unsigned __int8 *)(v24 + 23);
                                  if (v95 >= v143)
                                  {
                                    int v38 = BYTE13(v154);
                                    if (v95 > v143
                                      || (unsigned int v96 = *(unsigned __int8 *)(v24 + 24), v96 >= v142)
                                      && ((int v38 = BYTE13(v154), v96 > v142)
                                       || (unsigned int v97 = *(unsigned __int8 *)(v24 + 25), v97 >= v141)
                                       && ((int v38 = BYTE13(v154), v97 > v141)
                                        || (unsigned int v98 = *(unsigned __int8 *)(v24 + 26), v98 >= v140)
                                        && ((int v38 = BYTE13(v154), v98 > v140)
                                         || (int v38 = BYTE13(v154),
                                             *(unsigned __int8 *)(v24 + 27) >= v139)))))
                                    {
LABEL_237:
                                      unint64_t v77 = *(void *)(v24 + 8);
                                      int v4 = *(unsigned __int8 *)(v24 + 16);
                                      unsigned __int8 v126 = *(unsigned char *)(v24 + 17);
                                      unsigned __int8 v125 = *(unsigned char *)(v24 + 18);
                                      unsigned __int8 v124 = *(unsigned char *)(v24 + 19);
                                      unsigned __int8 v123 = *(unsigned char *)(v24 + 20);
                                      unsigned __int8 v122 = *(unsigned char *)(v24 + 21);
                                      unsigned __int8 v121 = *(unsigned char *)(v24 + 22);
                                      unsigned __int8 v120 = *(unsigned char *)(v24 + 23);
                                      unsigned __int8 v119 = *(unsigned char *)(v24 + 24);
                                      unsigned __int8 v118 = *(unsigned char *)(v24 + 25);
                                      unsigned __int8 v117 = *(unsigned char *)(v24 + 26);
                                      unsigned __int8 v116 = *(unsigned char *)(v24 + 27);
                                      int v78 = v76 ^ *(_DWORD *)v24;
                                      int v79 = v78 >> 31;
                                      if (v37 == v153) {
                                        goto LABEL_238;
                                      }
                                      goto LABEL_156;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_13:
    int v25 = v114;
    if ((unint64_t)v114 < v24) {
      continue;
    }
    break;
  }
  uint64_t result = v114 - 10;
  int v100 = *(v114 - 10);
  if (v114 - 10 == (int *)a1)
  {
LABEL_249:
    int v102 = v153;
    if (v100 == v153) {
      goto LABEL_250;
    }
LABEL_259:
    int v109 = v102 ^ (v102 >> 31);
    long long v110 = v25 - 8;
    if (v109)
    {
      long long v111 = v154;
      *(v25 - 4) = v155;
      *(_OWORD *)long long v110 = v111;
      int *result = v109;
    }
    else
    {
      *(void *)long long v110 = v154;
      int *result = 0;
    }
    goto LABEL_262;
  }
LABEL_244:
  if (*(_DWORD *)a1 != v100)
  {
    int v104 = v100 ^ (v100 >> 31);
    char v105 = (long long *)(v25 - 8);
    if (v104)
    {
      long long v106 = *v105;
      *(_DWORD *)(v112 + 16) = *(v25 - 4);
      *(_OWORD *)uint64_t v112 = v106;
      *(_DWORD *)a1 = v104;
      *(_DWORD *)(a1 + 32) = *(v25 - 2);
      int v100 = *(v25 - 10);
      int v102 = v153;
      if (v100 == v153) {
        goto LABEL_250;
      }
    }
    else
    {
      *(void *)(a1 + 8) = *(void *)v105;
      *(_DWORD *)a1 = 0;
      *(_DWORD *)(a1 + 32) = *(v25 - 2);
      int v100 = *(v25 - 10);
      int v102 = v153;
      if (v100 == v153) {
        goto LABEL_250;
      }
    }
    goto LABEL_259;
  }
  unint64_t v101 = (long long *)(v25 - 8);
  if (v100 != v100 >> 31)
  {
    long long v108 = *v101;
    *(_DWORD *)(v112 + 16) = *(v25 - 4);
    *(_OWORD *)uint64_t v112 = v108;
    *(_DWORD *)(a1 + 32) = *(v25 - 2);
    int v100 = *(v25 - 10);
    int v102 = v153;
    if (v100 == v153) {
      goto LABEL_250;
    }
    goto LABEL_259;
  }
  *(void *)uint64_t v112 = *(void *)v101;
  *(_DWORD *)(a1 + 32) = *(v25 - 2);
  int v100 = *(v25 - 10);
  int v102 = v153;
  if (v100 != v153) {
    goto LABEL_259;
  }
LABEL_250:
  unint64_t v103 = v25 - 8;
  if (v100 == v100 >> 31)
  {
    *(void *)unint64_t v103 = v154;
  }
  else
  {
    long long v107 = v154;
    *(v25 - 4) = v155;
    *(_OWORD *)unint64_t v103 = v107;
  }
LABEL_262:
  *(v25 - 2) = v156;
  return result;
}

BOOL sub_10027B6EC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v8 = a2 - 10;
      if (!sub_100278A64(a3, (uint64_t)(a2 - 10), (_DWORD *)a1)) {
        return 1;
      }
      int v9 = *(_DWORD *)a1;
      int v10 = *(int *)a1 >> 31;
      int v12 = (void *)(a1 + 8);
      uint64_t v11 = *(void *)(a1 + 8);
      if (v10 == *(_DWORD *)a1)
      {
        int v13 = *v8;
        if (v9 == *v8)
        {
          int v14 = 0;
          *int v12 = *((void *)a2 - 4);
          int v15 = 0;
          if (*v8) {
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        int v14 = 0;
      }
      else
      {
        uint64_t v45 = *(void *)(a1 + 16);
        LODWORD(v46) = *(_DWORD *)(a1 + 24);
        int v14 = v10 ^ v9;
        int v13 = *v8;
        if (v9 == *v8)
        {
          long long v40 = *((_OWORD *)a2 - 2);
          *(_DWORD *)(a1 + 24) = *(a2 - 4);
          *(_OWORD *)int v12 = v40;
          int v15 = v14 >> 31;
          if (*v8 != v14)
          {
LABEL_48:
            *((void *)a2 - 4) = v11;
            if (v15 != v14)
            {
              *((void *)a2 - 3) = v45;
              *(a2 - 4) = v46;
              *(a2 - 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v15 ^ v14;
            }
            else
            {
              *int v8 = 0;
            }
LABEL_51:
            int v44 = *(_DWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = *(a2 - 2);
            *(a2 - 2) = v44;
            return 1;
          }
LABEL_45:
          *((void *)a2 - 4) = v11;
          if (v15 != v14)
          {
            *((void *)a2 - 3) = v45;
            *(a2 - 4) = v46;
          }
          goto LABEL_51;
        }
      }
      int v41 = v13 ^ (v13 >> 31);
      int v42 = (long long *)(a2 - 8);
      if (v41)
      {
        long long v43 = *v42;
        *(_DWORD *)(a1 + 24) = *(a2 - 4);
        *(_OWORD *)int v12 = v43;
        *(_DWORD *)a1 = v41;
        int v15 = v14 >> 31;
        if (*v8 != v14) {
          goto LABEL_48;
        }
      }
      else
      {
        *(void *)(a1 + 8) = *(void *)v42;
        *(_DWORD *)a1 = 0;
        int v15 = v14 >> 31;
        if (*v8 != v14) {
          goto LABEL_48;
        }
      }
      goto LABEL_45;
    case 3uLL:
      sub_1002796B8((int *)a1, a1 + 40, (uint64_t)(a2 - 10), a3);
      return 1;
    case 4uLL:
      sub_10027BB90(a1, a1 + 40, a1 + 80, (uint64_t)(a2 - 10), a3);
      return 1;
    case 5uLL:
      sub_10027BFD0(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)(a2 - 10), a3);
      return 1;
    default:
      unsigned __int8 v16 = (_DWORD *)(a1 + 80);
      sub_1002796B8((int *)a1, a1 + 40, a1 + 80, a3);
      unsigned __int8 v17 = (_DWORD *)(a1 + 120);
      if ((_DWORD *)(a1 + 120) == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      while (2)
      {
        if (!sub_100278A64(a3, (uint64_t)v17, v16)) {
          goto LABEL_11;
        }
        unsigned __int8 v21 = v17 + 2;
        int v20 = *v17;
        int v22 = (int)*v17 >> 31;
        if (v20 >> 31 == v20)
        {
          *(void *)&long long v46 = *v21;
          int v22 = v20;
        }
        else
        {
          long long v46 = *(_OWORD *)v21;
          int v47 = v17[6];
        }
        int v23 = v22 ^ v20;
        int v24 = v17[8];
        LODWORD(v45) = v23;
        int v48 = v24;
        uint64_t v25 = v18;
        while (2)
        {
          uint64_t v26 = (_DWORD *)(a1 + v25);
          int v27 = *(_DWORD *)(a1 + v25 + 120);
          int v28 = *(_DWORD *)(a1 + v25 + 80);
          if (v27 == v28)
          {
            int v29 = v26 + 22;
            int v30 = v26 + 32;
            if (v27 == v27 >> 31)
            {
              *(void *)int v30 = *(void *)v29;
              uint64_t v31 = a1 + v25;
              *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
              if (v25 == -80) {
                goto LABEL_31;
              }
            }
            else
            {
              *(_OWORD *)int v30 = *(_OWORD *)v29;
              v30[4] = v29[4];
              uint64_t v31 = a1 + v25;
              *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
              if (v25 == -80) {
                goto LABEL_31;
              }
            }
LABEL_27:
            v25 -= 40;
            if (!sub_100278A64(a3, (uint64_t)&v45, (_DWORD *)(v31 + 40)))
            {
              uint64_t v35 = a1 + v25 + 120;
              int v36 = *(_DWORD *)v35;
              int v37 = v45;
              if (*(_DWORD *)v35 != v45) {
                goto LABEL_29;
              }
LABEL_32:
              int v39 = (void *)(v35 + 8);
              if (v36 == v36 >> 31)
              {
                *int v39 = v46;
              }
              else
              {
                *(_OWORD *)int v39 = v46;
                *(_DWORD *)(v35 + 24) = v47;
              }
              goto LABEL_10;
            }
            continue;
          }
          break;
        }
        int v32 = v28 ^ (v28 >> 31);
        int v33 = v26 + 22;
        int v34 = v26 + 32;
        if (v32)
        {
          *int v34 = *v33;
          v26[36] = v26[26];
          v26[30] = v32;
          uint64_t v31 = a1 + v25;
          *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
          if (v25 == -80) {
            goto LABEL_31;
          }
          goto LABEL_27;
        }
        *(void *)int v34 = *(void *)v33;
        v26[30] = 0;
        uint64_t v31 = a1 + v25;
        *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
        if (v25 != -80) {
          goto LABEL_27;
        }
LABEL_31:
        uint64_t v35 = a1;
        int v36 = *(_DWORD *)a1;
        int v37 = v45;
        if (*(_DWORD *)a1 == v45) {
          goto LABEL_32;
        }
LABEL_29:
        int v38 = v37 ^ (v37 >> 31);
        if (v38)
        {
          *(_OWORD *)(v35 + 8) = v46;
          *(_DWORD *)(v35 + 24) = v47;
          *(_DWORD *)uint64_t v35 = v38;
        }
        else
        {
          *(void *)(v35 + 8) = v46;
          *(_DWORD *)uint64_t v35 = 0;
        }
LABEL_10:
        *(_DWORD *)(v35 + 32) = v48;
        if (++v19 == 8) {
          return v17 + 10 == a2;
        }
LABEL_11:
        unsigned __int8 v16 = v17;
        v18 += 40;
        v17 += 10;
        if (v17 != a2) {
          continue;
        }
        return 1;
      }
  }
}

BOOL sub_10027BB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1002796B8((int *)a1, a2, a3, a5);
  BOOL result = sub_100278A64(a5, a4, (_DWORD *)a3);
  if (result)
  {
    int v11 = *(_DWORD *)a3;
    int v12 = *(int *)a3 >> 31;
    int v14 = (void *)(a3 + 8);
    uint64_t v13 = *(void *)(a3 + 8);
    if (v12 == *(_DWORD *)a3)
    {
      int v15 = *(_DWORD *)a4;
      if (v11 == *(_DWORD *)a4)
      {
        int v16 = 0;
        *int v14 = *(void *)(a4 + 8);
        int v17 = 0;
        if (*(_DWORD *)a4) {
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      int v16 = 0;
    }
    else
    {
      uint64_t v45 = *(void *)(a3 + 16);
      int v46 = *(_DWORD *)(a3 + 24);
      int v16 = v12 ^ v11;
      int v15 = *(_DWORD *)a4;
      if (v11 == *(_DWORD *)a4)
      {
        long long v18 = *(_OWORD *)(a4 + 8);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
        *(_OWORD *)int v14 = v18;
        int v17 = v16 >> 31;
        if (*(_DWORD *)a4 != v16)
        {
LABEL_15:
          *(void *)(a4 + 8) = v13;
          if (v17 != v16)
          {
            *(void *)(a4 + 16) = v45;
            *(_DWORD *)(a4 + 24) = v46;
            *(_DWORD *)a4 = v17 ^ v16;
          }
          else
          {
            *(_DWORD *)a4 = 0;
          }
          goto LABEL_18;
        }
LABEL_12:
        *(void *)(a4 + 8) = v13;
        if (v17 != v16)
        {
          *(void *)(a4 + 16) = v45;
          *(_DWORD *)(a4 + 24) = v46;
        }
LABEL_18:
        int v22 = *(_DWORD *)(a3 + 32);
        *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
        *(_DWORD *)(a4 + 32) = v22;
        BOOL result = sub_100278A64(a5, a3, (_DWORD *)a2);
        if (!result) {
          return result;
        }
        int v23 = *(_DWORD *)a2;
        int v24 = *(int *)a2 >> 31;
        uint64_t v26 = (void *)(a2 + 8);
        uint64_t v25 = *(void *)(a2 + 8);
        if (v24 == *(_DWORD *)a2)
        {
          int v27 = *(_DWORD *)a3;
          if (v23 == *(_DWORD *)a3)
          {
            int v28 = 0;
            *uint64_t v26 = *v14;
            int v29 = 0;
            if (*(_DWORD *)a3) {
              goto LABEL_32;
            }
            goto LABEL_29;
          }
          int v28 = 0;
        }
        else
        {
          uint64_t v45 = *(void *)(a2 + 16);
          int v46 = *(_DWORD *)(a2 + 24);
          int v28 = v24 ^ v23;
          int v27 = *(_DWORD *)a3;
          if (v23 == *(_DWORD *)a3)
          {
            long long v30 = *(_OWORD *)v14;
            *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
            *(_OWORD *)uint64_t v26 = v30;
            int v29 = v28 >> 31;
            if (*(_DWORD *)a3 != v28)
            {
LABEL_32:
              *int v14 = v25;
              if (v29 != v28)
              {
                *(void *)(a3 + 16) = v45;
                *(_DWORD *)(a3 + 24) = v46;
                *(_DWORD *)a3 = v29 ^ v28;
              }
              else
              {
                *(_DWORD *)a3 = 0;
              }
              goto LABEL_35;
            }
LABEL_29:
            *int v14 = v25;
            if (v29 != v28)
            {
              *(void *)(a3 + 16) = v45;
              *(_DWORD *)(a3 + 24) = v46;
            }
LABEL_35:
            int v33 = *(_DWORD *)(a2 + 32);
            *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
            *(_DWORD *)(a3 + 32) = v33;
            BOOL result = sub_100278A64(a5, a2, (_DWORD *)a1);
            if (!result) {
              return result;
            }
            int v34 = *(_DWORD *)a1;
            int v35 = *(int *)a1 >> 31;
            int v37 = (void *)(a1 + 8);
            uint64_t v36 = *(void *)(a1 + 8);
            if (v35 == *(_DWORD *)a1)
            {
              int v38 = *(_DWORD *)a2;
              if (v34 == *(_DWORD *)a2)
              {
                int v39 = 0;
                *int v37 = *v26;
                int v40 = 0;
                if (*(_DWORD *)a2) {
                  goto LABEL_49;
                }
                goto LABEL_46;
              }
              int v39 = 0;
            }
            else
            {
              uint64_t v45 = *(void *)(a1 + 16);
              int v46 = *(_DWORD *)(a1 + 24);
              int v39 = v35 ^ v34;
              int v38 = *(_DWORD *)a2;
              if (v34 == *(_DWORD *)a2)
              {
                long long v41 = *(_OWORD *)v26;
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
                *(_OWORD *)int v37 = v41;
                int v40 = v39 >> 31;
                if (*(_DWORD *)a2 != v39)
                {
LABEL_49:
                  *uint64_t v26 = v36;
                  if (v40 != v39)
                  {
                    *(void *)(a2 + 16) = v45;
                    *(_DWORD *)(a2 + 24) = v46;
                    *(_DWORD *)a2 = v40 ^ v39;
                  }
                  else
                  {
                    *(_DWORD *)a2 = 0;
                  }
LABEL_52:
                  int v44 = *(_DWORD *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
                  *(_DWORD *)(a2 + 32) = v44;
                  return result;
                }
LABEL_46:
                *uint64_t v26 = v36;
                if (v40 != v39)
                {
                  *(void *)(a2 + 16) = v45;
                  *(_DWORD *)(a2 + 24) = v46;
                }
                goto LABEL_52;
              }
            }
            int v42 = v38 ^ (v38 >> 31);
            if (v42)
            {
              long long v43 = *(_OWORD *)v26;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
              *(_OWORD *)int v37 = v43;
              *(_DWORD *)a1 = v42;
              int v40 = v39 >> 31;
              if (*(_DWORD *)a2 != v39) {
                goto LABEL_49;
              }
            }
            else
            {
              *(void *)(a1 + 8) = *v26;
              *(_DWORD *)a1 = 0;
              int v40 = v39 >> 31;
              if (*(_DWORD *)a2 != v39) {
                goto LABEL_49;
              }
            }
            goto LABEL_46;
          }
        }
        int v31 = v27 ^ (v27 >> 31);
        if (v31)
        {
          long long v32 = *(_OWORD *)v14;
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
          *(_OWORD *)uint64_t v26 = v32;
          *(_DWORD *)a2 = v31;
          int v29 = v28 >> 31;
          if (*(_DWORD *)a3 != v28) {
            goto LABEL_32;
          }
        }
        else
        {
          *(void *)(a2 + 8) = *v14;
          *(_DWORD *)a2 = 0;
          int v29 = v28 >> 31;
          if (*(_DWORD *)a3 != v28) {
            goto LABEL_32;
          }
        }
        goto LABEL_29;
      }
    }
    int v19 = v15 ^ (v15 >> 31);
    int v20 = (long long *)(a4 + 8);
    if (v19)
    {
      long long v21 = *v20;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_OWORD *)int v14 = v21;
      *(_DWORD *)a3 = v19;
      int v17 = v16 >> 31;
      if (*(_DWORD *)a4 != v16) {
        goto LABEL_15;
      }
    }
    else
    {
      *(void *)(a3 + 8) = *(void *)v20;
      *(_DWORD *)a3 = 0;
      int v17 = v16 >> 31;
      if (*(_DWORD *)a4 != v16) {
        goto LABEL_15;
      }
    }
    goto LABEL_12;
  }
  return result;
}

BOOL sub_10027BFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_10027BB90(a1, a2, a3, a4, a6);
  BOOL result = sub_100278A64(a6, a5, (_DWORD *)a4);
  if (!result) {
    return result;
  }
  int v13 = *(_DWORD *)a4;
  int v14 = *(int *)a4 >> 31;
  int v16 = (void *)(a4 + 8);
  uint64_t v15 = *(void *)(a4 + 8);
  if (v14 == *(_DWORD *)a4)
  {
    int v17 = *(_DWORD *)a5;
    if (v13 == *(_DWORD *)a5)
    {
      int v18 = 0;
      *int v16 = *(void *)(a5 + 8);
      int v19 = 0;
      if (*(_DWORD *)a5) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
    int v18 = 0;
LABEL_10:
    int v21 = v17 ^ (v17 >> 31);
    int v22 = (long long *)(a5 + 8);
    if (v21)
    {
      long long v23 = *v22;
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
      *(_OWORD *)int v16 = v23;
      *(_DWORD *)a4 = v21;
      int v19 = v18 >> 31;
      if (*(_DWORD *)a5 != v18) {
        goto LABEL_15;
      }
    }
    else
    {
      *(void *)(a4 + 8) = *(void *)v22;
      *(_DWORD *)a4 = 0;
      int v19 = v18 >> 31;
      if (*(_DWORD *)a5 != v18) {
        goto LABEL_15;
      }
    }
    goto LABEL_12;
  }
  uint64_t v58 = *(void *)(a4 + 16);
  int v59 = *(_DWORD *)(a4 + 24);
  int v18 = v14 ^ v13;
  int v17 = *(_DWORD *)a5;
  if (v13 != *(_DWORD *)a5) {
    goto LABEL_10;
  }
  long long v20 = *(_OWORD *)(a5 + 8);
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
  *(_OWORD *)int v16 = v20;
  int v19 = v18 >> 31;
  if (*(_DWORD *)a5 != v18)
  {
LABEL_15:
    *(void *)(a5 + 8) = v15;
    if (v19 != v18)
    {
      *(void *)(a5 + 16) = v58;
      *(_DWORD *)(a5 + 24) = v59;
      *(_DWORD *)a5 = v19 ^ v18;
    }
    else
    {
      *(_DWORD *)a5 = 0;
    }
    goto LABEL_18;
  }
LABEL_12:
  *(void *)(a5 + 8) = v15;
  if (v19 != v18)
  {
    *(void *)(a5 + 16) = v58;
    *(_DWORD *)(a5 + 24) = v59;
  }
LABEL_18:
  int v24 = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v24;
  BOOL result = sub_100278A64(a6, a4, (_DWORD *)a3);
  if (!result) {
    return result;
  }
  int v25 = *(_DWORD *)a3;
  int v26 = *(int *)a3 >> 31;
  int v28 = (void *)(a3 + 8);
  uint64_t v27 = *(void *)(a3 + 8);
  if (v26 == *(_DWORD *)a3)
  {
    int v29 = *(_DWORD *)a4;
    if (v25 == *(_DWORD *)a4)
    {
      int v30 = 0;
      *int v28 = *v16;
      int v31 = 0;
      if (*(_DWORD *)a4) {
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    int v30 = 0;
LABEL_27:
    int v33 = v29 ^ (v29 >> 31);
    if (v33)
    {
      long long v34 = *(_OWORD *)v16;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_OWORD *)int v28 = v34;
      *(_DWORD *)a3 = v33;
      int v31 = v30 >> 31;
      if (*(_DWORD *)a4 != v30) {
        goto LABEL_32;
      }
    }
    else
    {
      *(void *)(a3 + 8) = *v16;
      *(_DWORD *)a3 = 0;
      int v31 = v30 >> 31;
      if (*(_DWORD *)a4 != v30) {
        goto LABEL_32;
      }
    }
    goto LABEL_29;
  }
  uint64_t v58 = *(void *)(a3 + 16);
  int v59 = *(_DWORD *)(a3 + 24);
  int v30 = v26 ^ v25;
  int v29 = *(_DWORD *)a4;
  if (v25 != *(_DWORD *)a4) {
    goto LABEL_27;
  }
  long long v32 = *(_OWORD *)v16;
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
  *(_OWORD *)int v28 = v32;
  int v31 = v30 >> 31;
  if (*(_DWORD *)a4 != v30)
  {
LABEL_32:
    *int v16 = v27;
    if (v31 != v30)
    {
      *(void *)(a4 + 16) = v58;
      *(_DWORD *)(a4 + 24) = v59;
      *(_DWORD *)a4 = v31 ^ v30;
    }
    else
    {
      *(_DWORD *)a4 = 0;
    }
    goto LABEL_35;
  }
LABEL_29:
  *int v16 = v27;
  if (v31 != v30)
  {
    *(void *)(a4 + 16) = v58;
    *(_DWORD *)(a4 + 24) = v59;
  }
LABEL_35:
  int v35 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = v35;
  BOOL result = sub_100278A64(a6, a3, (_DWORD *)a2);
  if (!result) {
    return result;
  }
  int v36 = *(_DWORD *)a2;
  int v37 = *(int *)a2 >> 31;
  int v39 = (void *)(a2 + 8);
  uint64_t v38 = *(void *)(a2 + 8);
  if (v37 == *(_DWORD *)a2)
  {
    int v40 = *(_DWORD *)a3;
    if (v36 == *(_DWORD *)a3)
    {
      int v41 = 0;
      *int v39 = *v28;
      int v42 = 0;
      if (*(_DWORD *)a3) {
        goto LABEL_49;
      }
      goto LABEL_46;
    }
    int v41 = 0;
LABEL_44:
    int v44 = v40 ^ (v40 >> 31);
    if (v44)
    {
      long long v45 = *(_OWORD *)v28;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)int v39 = v45;
      *(_DWORD *)a2 = v44;
      int v42 = v41 >> 31;
      if (*(_DWORD *)a3 != v41) {
        goto LABEL_49;
      }
    }
    else
    {
      *(void *)(a2 + 8) = *v28;
      *(_DWORD *)a2 = 0;
      int v42 = v41 >> 31;
      if (*(_DWORD *)a3 != v41) {
        goto LABEL_49;
      }
    }
    goto LABEL_46;
  }
  uint64_t v58 = *(void *)(a2 + 16);
  int v59 = *(_DWORD *)(a2 + 24);
  int v41 = v37 ^ v36;
  int v40 = *(_DWORD *)a3;
  if (v36 != *(_DWORD *)a3) {
    goto LABEL_44;
  }
  long long v43 = *(_OWORD *)v28;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
  *(_OWORD *)int v39 = v43;
  int v42 = v41 >> 31;
  if (*(_DWORD *)a3 != v41)
  {
LABEL_49:
    *int v28 = v38;
    if (v42 != v41)
    {
      *(void *)(a3 + 16) = v58;
      *(_DWORD *)(a3 + 24) = v59;
      *(_DWORD *)a3 = v42 ^ v41;
    }
    else
    {
      *(_DWORD *)a3 = 0;
    }
    goto LABEL_52;
  }
LABEL_46:
  *int v28 = v38;
  if (v42 != v41)
  {
    *(void *)(a3 + 16) = v58;
    *(_DWORD *)(a3 + 24) = v59;
  }
LABEL_52:
  int v46 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = v46;
  BOOL result = sub_100278A64(a6, a2, (_DWORD *)a1);
  if (!result) {
    return result;
  }
  int v47 = *(_DWORD *)a1;
  int v48 = *(int *)a1 >> 31;
  unsigned int v50 = (void *)(a1 + 8);
  uint64_t v49 = *(void *)(a1 + 8);
  if (v48 == *(_DWORD *)a1)
  {
    int v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      int v52 = 0;
      void *v50 = *v39;
      goto LABEL_62;
    }
    int v52 = 0;
  }
  else
  {
    uint64_t v58 = *(void *)(a1 + 16);
    int v59 = *(_DWORD *)(a1 + 24);
    int v52 = v48 ^ v47;
    int v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      long long v53 = *(_OWORD *)v39;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)unsigned int v50 = v53;
      goto LABEL_62;
    }
  }
  int v54 = v51 ^ (v51 >> 31);
  if (v54)
  {
    long long v55 = *(_OWORD *)v39;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)unsigned int v50 = v55;
    *(_DWORD *)a1 = v54;
  }
  else
  {
    *(void *)(a1 + 8) = *v39;
    *(_DWORD *)a1 = 0;
  }
LABEL_62:
  int v56 = v52 >> 31;
  if (*(_DWORD *)a2 == v52)
  {
    *int v39 = v49;
    if (v56 != v52)
    {
      *(void *)(a2 + 16) = v58;
      *(_DWORD *)(a2 + 24) = v59;
    }
  }
  else
  {
    *int v39 = v49;
    if (v56 != v52)
    {
      *(void *)(a2 + 16) = v58;
      *(_DWORD *)(a2 + 24) = v59;
      *(_DWORD *)a2 = v56 ^ v52;
    }
    else
    {
      *(_DWORD *)a2 = 0;
    }
  }
  int v57 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v57;
  return result;
}

BOOL sub_10027C530(BOOL result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = a4;
    BOOL v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 3)))
    {
      int64_t v10 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 3)) | 1;
      int v11 = (_DWORD *)(result + 40 * v10);
      int64_t v12 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 3) + 2;
      if (v12 < a3 && sub_100278A64(a2, result + 40 * v10, v11 + 10))
      {
        v11 += 10;
        int64_t v10 = v12;
      }
      BOOL result = sub_100278A64(a2, (uint64_t)v11, v5);
      if (!result)
      {
        int v14 = v5 + 2;
        int v13 = *v5;
        int v15 = *v5 >> 31;
        if (v13 >> 31 == v13)
        {
          *(void *)&long long v31 = *v14;
          int v15 = v13;
        }
        else
        {
          long long v31 = *(_OWORD *)v14;
          int v32 = v5[6];
        }
        int v16 = v15 ^ v13;
        int v17 = v5[8];
        int v30 = v16;
        int v33 = v17;
        do
        {
          int v18 = v11;
          if (*v5 == *v11)
          {
            int v19 = v11 + 2;
            long long v20 = v5 + 2;
            if (*v5 == *v5 >> 31)
            {
              *long long v20 = *v19;
              v5[8] = v11[8];
              if (v7 < v10) {
                break;
              }
            }
            else
            {
              long long v24 = *(_OWORD *)v19;
              v5[6] = v11[6];
              *(_OWORD *)long long v20 = v24;
              v5[8] = v11[8];
              if (v7 < v10) {
                break;
              }
            }
          }
          else
          {
            int v21 = *v11 ^ ((int)*v11 >> 31);
            int v22 = (long long *)(v11 + 2);
            if (v21)
            {
              long long v23 = *v22;
              v5[6] = v11[6];
              *(_OWORD *)(v5 + 2) = v23;
              *unint64_t v5 = v21;
              v5[8] = v11[8];
              if (v7 < v10) {
                break;
              }
            }
            else
            {
              *((void *)v5 + 1) = *(void *)v22;
              *unint64_t v5 = 0;
              v5[8] = v11[8];
              if (v7 < v10) {
                break;
              }
            }
          }
          uint64_t v25 = (2 * v10) | 1;
          int v11 = (_DWORD *)(v6 + 40 * v25);
          int64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            int64_t v10 = v25;
          }
          else if (sub_100278A64(a2, v6 + 40 * v25, v11 + 10))
          {
            v11 += 10;
          }
          else
          {
            int64_t v10 = v25;
          }
          BOOL result = sub_100278A64(a2, (uint64_t)v11, &v30);
          unint64_t v5 = v18;
        }
        while (!result);
        if (*v18 == v30)
        {
          int v26 = v18 + 2;
          if (*v18 == *v18 >> 31)
          {
            *int v26 = v31;
          }
          else
          {
            long long v29 = v31;
            v18[6] = v32;
            *(_OWORD *)int v26 = v29;
          }
        }
        else
        {
          int v27 = v30 ^ (v30 >> 31);
          if (v27)
          {
            long long v28 = v31;
            v18[6] = v32;
            *(_OWORD *)(v18 + 2) = v28;
            *int v18 = v27;
          }
          else
          {
            *((void *)v18 + 1) = v31;
            *int v18 = 0;
          }
        }
        v18[8] = v33;
      }
    }
  }
  return result;
}

uint64_t sub_10027C814(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    int v6 = *(_DWORD *)result;
    int v7 = *(_DWORD *)result;
    if (*(int *)result >> 31 != *(_DWORD *)result)
    {
      uint64_t v39 = *(void *)(result + 16);
      int v40 = *(_DWORD *)(result + 24);
      int v7 = v6 >> 31;
    }
    int v35 = v7;
    uint64_t v8 = 0;
    uint64_t v36 = *(void *)(result + 8);
    int v38 = *(_DWORD *)(result + 32);
    int64_t v9 = (unint64_t)(a4 - 2) >> 1;
    BOOL v34 = result;
    uint64_t v10 = result;
    do
    {
      uint64_t v12 = v10;
      v10 += 40 * v8 + 40;
      uint64_t v13 = 2 * v8;
      uint64_t v8 = (2 * v8) | 1;
      uint64_t v14 = v13 + 2;
      if (v13 + 2 < a4)
      {
        BOOL result = sub_100278A64(a3, v10, (_DWORD *)(v10 + 40));
        if (result)
        {
          v10 += 40;
          uint64_t v8 = v14;
        }
      }
      if (*(_DWORD *)v12 == *(_DWORD *)v10)
      {
        int v15 = (void *)(v10 + 8);
        int v16 = (void *)(v12 + 8);
        if (*(_DWORD *)v12 == *(int *)v12 >> 31)
        {
          *int v16 = *v15;
        }
        else
        {
          long long v11 = *(_OWORD *)v15;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
          *(_OWORD *)int v16 = v11;
        }
      }
      else
      {
        int v17 = *(_DWORD *)v10 ^ (*(int *)v10 >> 31);
        int v18 = (long long *)(v10 + 8);
        if (v17)
        {
          long long v19 = *v18;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
          *(_OWORD *)(v12 + 8) = v19;
          *(_DWORD *)uint64_t v12 = v17;
        }
        else
        {
          *(void *)(v12 + 8) = *(void *)v18;
          *(_DWORD *)uint64_t v12 = 0;
        }
      }
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v10 + 32);
    }
    while (v8 <= v9);
    int v20 = v35 ^ v6;
    int v21 = *(_DWORD *)v10;
    if (v10 == a2 - 40)
    {
      int v25 = v20 >> 31;
      if (v21 == v20)
      {
        *(void *)(v10 + 8) = v36;
        if (v25 != v20)
        {
          *(void *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 24) = v40;
        }
      }
      else
      {
        int v29 = v25 ^ v20;
        *(void *)(v10 + 8) = v36;
        if (v29)
        {
          *(void *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 24) = v40;
          *(_DWORD *)uint64_t v10 = v29;
        }
        else
        {
          *(_DWORD *)uint64_t v10 = 0;
        }
      }
      *(_DWORD *)(v10 + 32) = v38;
    }
    else
    {
      int v22 = *(_DWORD *)(a2 - 40);
      if (v21 == v22)
      {
        long long v23 = (void *)(a2 - 32);
        long long v24 = (void *)(v10 + 8);
        if (v21 == v21 >> 31)
        {
          *long long v24 = *v23;
        }
        else
        {
          long long v30 = *(_OWORD *)v23;
          *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 - 16);
          *(_OWORD *)long long v24 = v30;
        }
      }
      else
      {
        int v26 = v22 ^ (v22 >> 31);
        int v27 = (long long *)(a2 - 32);
        if (v26)
        {
          long long v28 = *v27;
          *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 - 16);
          *(_OWORD *)(v10 + 8) = v28;
          *(_DWORD *)uint64_t v10 = v26;
        }
        else
        {
          *(void *)(v10 + 8) = *(void *)v27;
          *(_DWORD *)uint64_t v10 = 0;
        }
      }
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(a2 - 8);
      int v31 = v20 >> 31;
      if (*(_DWORD *)(a2 - 40) == v20)
      {
        BOOL v32 = v34;
        *(void *)(a2 - 32) = v36;
        if (v31 != v20)
        {
          *(void *)(a2 - 24) = v39;
          *(_DWORD *)(a2 - 16) = v40;
        }
      }
      else
      {
        int v33 = v31 ^ v20;
        BOOL v32 = v34;
        *(void *)(a2 - 32) = v36;
        if (v33)
        {
          *(void *)(a2 - 24) = v39;
          *(_DWORD *)(a2 - 16) = v40;
          *(_DWORD *)(a2 - 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v33;
        }
        else
        {
          *(_DWORD *)(a2 - 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
        }
      }
      *(_DWORD *)(a2 - 8) = v38;
      return sub_10027CB70(v32, v10 + 40, a3, 0xCCCCCCCCCCCCCCCDLL * ((v10 + 40 - v32) >> 3));
    }
  }
  return result;
}

BOOL sub_10027CB70(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = (_DWORD *)(result + 40 * v7);
    int64_t v9 = (int *)(a2 - 40);
    BOOL result = sub_100278A64(a3, (uint64_t)v8, (_DWORD *)(a2 - 40));
    if (result)
    {
      int v10 = *(_DWORD *)(a2 - 40);
      int v11 = v10 >> 31;
      uint64_t v12 = (void *)(a2 - 32);
      if (v10 >> 31 == v10)
      {
        *(void *)&long long v25 = *v12;
        int v11 = v10;
      }
      else
      {
        long long v25 = *(_OWORD *)v12;
        int v26 = *(_DWORD *)(a2 - 16);
      }
      int v13 = v11 ^ v10;
      int v14 = *(_DWORD *)(a2 - 8);
      int v24 = v13;
      int v27 = v14;
      do
      {
        int v15 = v8;
        if (*v9 == *v8)
        {
          int v16 = v8 + 2;
          int v17 = v9 + 2;
          if (*v9 == *v9 >> 31)
          {
            *int v17 = *v16;
            v9[8] = v8[8];
            if (!v7) {
              break;
            }
          }
          else
          {
            long long v21 = *(_OWORD *)v16;
            v9[6] = v8[6];
            *(_OWORD *)int v17 = v21;
            v9[8] = v8[8];
            if (!v7) {
              break;
            }
          }
        }
        else
        {
          int v18 = *v8 ^ ((int)*v8 >> 31);
          long long v19 = (long long *)(v8 + 2);
          if (v18)
          {
            long long v20 = *v19;
            v9[6] = v8[6];
            *(_OWORD *)(v9 + 2) = v20;
            *int64_t v9 = v18;
            v9[8] = v8[8];
            if (!v7) {
              break;
            }
          }
          else
          {
            *((void *)v9 + 1) = *(void *)v19;
            *int64_t v9 = 0;
            v9[8] = v8[8];
            if (!v7) {
              break;
            }
          }
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (_DWORD *)(v6 + 40 * v7);
        BOOL result = sub_100278A64(a3, (uint64_t)v8, &v24);
        int64_t v9 = v15;
      }
      while (result);
      if (*v15 == v24)
      {
        int v22 = v15 + 2;
        if (*v15 == *v15 >> 31)
        {
          *int v22 = v25;
        }
        else
        {
          *(_OWORD *)int v22 = v25;
          void v15[6] = v26;
        }
      }
      else
      {
        int v23 = v24 ^ (v24 >> 31);
        if (v23)
        {
          *(_OWORD *)(v15 + 2) = v25;
          void v15[6] = v26;
          *int v15 = v23;
        }
        else
        {
          *((void *)v15 + 1) = v25;
          *int v15 = 0;
        }
      }
      v15[8] = v27;
    }
  }
  return result;
}

void sub_10027CDA4(void *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  if (0x333333333333333 - v7 < a3 - v7 + v6) {
    goto LABEL_14;
  }
  unint64_t v9 = v7 >> 61;
  unint64_t v10 = 8 * v7;
  if (v9 > 4) {
    uint64_t v11 = -1;
  }
  else {
    uint64_t v11 = v10;
  }
  unint64_t v12 = v10 / 5;
  if (v9) {
    unint64_t v12 = v11;
  }
  unint64_t v13 = v6 + a3;
  if (v12 >= 0x333333333333333) {
    unint64_t v12 = 0x333333333333333;
  }
  unint64_t v14 = v13 <= v12 ? v12 : v13;
  if (v14 > 0x333333333333333) {
LABEL_14:
  }
    sub_1002782B4((uint64_t)"get_next_capacity, allocator's max size reached");
  int v18 = (char *)a2 - *a1;
  long long v19 = (int *)operator new(40 * v14);
  sub_10027CE98((uint64_t)a1, v19, v14, a2, a3, a4);
  *a5 = &v18[*a1];
}

void sub_10027CE98(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  unint64_t v10 = *(_DWORD **)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = a2;
  if (*(_DWORD **)a1 != a4)
  {
    unint64_t v13 = *(_DWORD **)a1;
    unint64_t v12 = a2;
    do
    {
      int v17 = v12 + 2;
      int v18 = v13 + 2;
      int v16 = *v13;
      if (v16 == v16 >> 31)
      {
        *int v17 = *v18;
        int v15 = v16;
      }
      else
      {
        long long v14 = *(_OWORD *)v18;
        v12[6] = v13[6];
        *(_OWORD *)int v17 = v14;
        int v15 = *v13;
        int v16 = (int)*v13 >> 31;
      }
      *unint64_t v12 = v15 ^ v16;
      unsigned char v12[8] = v13[8];
      v13 += 10;
      v12 += 10;
    }
    while (v13 != a4);
  }
  long long v19 = &v10[10 * v11];
  if (a5)
  {
    long long v20 = v12 + 2;
    uint64_t v21 = a5;
    do
    {
      long long v25 = a6 + 2;
      int v24 = *a6;
      if (v24 == v24 >> 31)
      {
        *(void *)long long v20 = *v25;
        int v23 = v24;
      }
      else
      {
        long long v22 = *(_OWORD *)v25;
        v20[4] = a6[6];
        *(_OWORD *)long long v20 = v22;
        int v23 = *a6;
        int v24 = (int)*a6 >> 31;
      }
      *(v20 - 2) = v23 ^ v24;
      v20[6] = a6[8];
      a6 += 10;
      v20 += 10;
      --v21;
    }
    while (v21);
  }
  if (v19 != a4)
  {
    uint64_t v26 = (uint64_t)&v12[10 * a5 + 2];
    do
    {
      long long v30 = a4 + 2;
      int v29 = *a4;
      if (v29 == v29 >> 31)
      {
        *(void *)uint64_t v26 = *v30;
        int v28 = v29;
      }
      else
      {
        long long v27 = *(_OWORD *)v30;
        *(_DWORD *)(v26 + 16) = a4[6];
        *(_OWORD *)uint64_t v26 = v27;
        int v28 = *a4;
        int v29 = (int)*a4 >> 31;
      }
      *(_DWORD *)(v26 - 8) = v28 ^ v29;
      *(_DWORD *)(v26 + 24) = a4[8];
      a4 += 10;
      v26 += 40;
    }
    while (a4 != v19);
  }
  if (v10) {
    operator delete(*(void **)a1);
  }
  uint64_t v31 = *(void *)(a1 + 8) + a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v31;
  *(void *)(a1 + 16) = a3;
}

void sub_10027D040(char **a1)
{
  unint64_t v1 = (unint64_t)a1[2];
  if (v1)
  {
    unint64_t v3 = (unint64_t)a1[1];
    if (v3)
    {
      if (v3 >= v1) {
        return;
      }
      if (v3 >= 0x333333333333334) {
        sub_1002782B4((uint64_t)"get_next_capacity, allocator's max size reached");
      }
      unint64_t v4 = (char *)operator new(40 * v3);
      unint64_t v5 = *a1;
      uint64_t v6 = a1[1];
      if (v6)
      {
        unint64_t v7 = &v5[40 * (void)v6];
        uint64_t v8 = v5 + 8;
        unint64_t v9 = v4 + 8;
        do
        {
          uint64_t v11 = v8 - 8;
          int v12 = *((_DWORD *)v8 - 2);
          int v13 = v12 >> 31;
          if (v12 >> 31 == v12)
          {
            *(void *)unint64_t v9 = *(void *)v8;
            int v13 = v12;
          }
          else
          {
            long long v10 = *(_OWORD *)v8;
            *((_DWORD *)v9 + 4) = *((_DWORD *)v8 + 4);
            *(_OWORD *)unint64_t v9 = v10;
          }
          *((_DWORD *)v9 - 2) = v13 ^ v12;
          *((_DWORD *)v9 + 6) = *((_DWORD *)v8 + 6);
          v8 += 40;
          v9 += 40;
        }
        while (v11 + 40 != v7);
      }
      if (!v5) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v4 = 0;
      unint64_t v5 = *a1;
      if (!*a1)
      {
LABEL_13:
        *a1 = v4;
        a1[2] = (char *)v3;
        return;
      }
    }
    operator delete(v5);
    goto LABEL_13;
  }
}

int **sub_10027D144@<X0>(int **result@<X0>, _DWORD *a2@<X1>, int **a3@<X8>)
{
  unint64_t v5 = (unint64_t)result[1];
  if (!v5)
  {
    *a3 = *result;
    return result;
  }
  uint64_t v6 = result;
  unint64_t v7 = a2 + 2;
  uint64_t v8 = *result;
  do
  {
    int v10 = *a2;
    int v11 = (int)*a2 >> 31;
    if (v10 >> 31 == v10)
    {
      *(void *)&long long v29 = *v7;
      int v11 = v10;
    }
    else
    {
      long long v29 = *(_OWORD *)v7;
      int v30 = a2[6];
    }
    unint64_t v9 = v5 >> 1;
    int v12 = v11 ^ v10;
    int v13 = &v8[10 * (v5 >> 1)];
    int v14 = *v13;
    BOOL result = (int **)(v13 + 2);
    int v15 = v12 >> 31;
    if (v14 == v14 >> 31)
    {
      if (v15 != v12 || (unint64_t)*result < (unint64_t)v29) {
        goto LABEL_3;
      }
    }
    else if (v15 != v12)
    {
      BOOL result = (int **)sub_1001E6FAC((unsigned __int8 *)result, (unsigned __int8 *)&v29);
      if (result)
      {
LABEL_3:
        v8 += 10 * (v5 >> 1) + 10;
        unint64_t v9 = v5 + ~v9;
      }
    }
    unint64_t v5 = v9;
  }
  while (v9);
  int v16 = *v6;
  int v17 = v6[1];
  *a3 = v8;
  int v18 = &v16[10 * (void)v17];
  if (v8 == v18) {
    return result;
  }
  int v21 = *v8;
  long long v20 = v8 + 2;
  int v19 = v21;
  int v22 = v21 >> 31;
  if (v21 >> 31 == v21)
  {
    *(void *)&long long v29 = *(void *)v20;
    int v23 = 0;
    int v25 = *a2;
    int v24 = (unsigned __int8 *)(a2 + 2);
    int v26 = 0;
    if (v25 != v25 >> 31)
    {
LABEL_20:
      if (v26 == v23) {
        return result;
      }
      BOOL result = (int **)sub_1001E6FAC(v24, (unsigned __int8 *)&v29);
      if (!result) {
        return result;
      }
LABEL_26:
      *a3 = v18;
      return result;
    }
  }
  else
  {
    long long v27 = *(_OWORD *)v20;
    int v30 = v20[4];
    long long v29 = v27;
    int v23 = v22 ^ v19;
    int v28 = *a2;
    int v24 = (unsigned __int8 *)(a2 + 2);
    int v26 = v23 >> 31;
    if (v28 != v28 >> 31) {
      goto LABEL_20;
    }
  }
  if (v26 != v23 || *(void *)v24 < (unint64_t)v29) {
    goto LABEL_26;
  }
  return result;
}

_DWORD *sub_10027D354(void **a1, int *a2, _DWORD *a3)
{
  unint64_t v5 = (char *)*a1;
  unint64_t v4 = (char *)a1[1];
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v5) >> 3) > v7) {
    unint64_t v7 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v5) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v5) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v7;
  }
  if (v10)
  {
    if (v10 > 0x666666666666666) {
      sub_1000A6A10();
    }
    int v11 = operator new(40 * v10);
  }
  else
  {
    int v11 = 0;
  }
  int v12 = &v11[10 * v6];
  int v13 = v12 + 2;
  int v16 = *a2;
  int v15 = a2 + 2;
  int v14 = v16;
  int v17 = v16 >> 31;
  if (v16 >> 31 == v16)
  {
    *int v13 = *(void *)v15;
    int v17 = v14;
  }
  else
  {
    *(_OWORD *)int v13 = *(_OWORD *)v15;
    v12[6] = v15[4];
  }
  *int v12 = v17 ^ v14;
  int v18 = v12 + 10;
  v11[10 * v6 + 8] = *a3;
  if (v4 != v5)
  {
    unint64_t v19 = 0;
    do
    {
      int v23 = &v12[v19 / 4 - 8];
      int v22 = *(_DWORD *)&v4[v19 - 40];
      int v24 = &v4[v19 - 32];
      if (v22 == v22 >> 31)
      {
        *(void *)int v23 = *(void *)v24;
        int v21 = v22;
      }
      else
      {
        long long v20 = *(_OWORD *)v24;
        v12[v19 / 4 - 4] = *(_DWORD *)&v4[v19 - 16];
        *(_OWORD *)int v23 = v20;
        int v21 = *(_DWORD *)&v4[v19 - 40];
        int v22 = v21 >> 31;
      }
      v12[v19 / 4 - 10] = v21 ^ v22;
      v12[v19 / 4 - 2] = *(_DWORD *)&v4[v19 - 8];
      v19 -= 40;
    }
    while (&v4[v19] != v5);
    unint64_t v4 = (char *)*a1;
    int v12 = (int *)((char *)v12 + v19);
  }
  *a1 = v12;
  a1[1] = v18;
  a1[2] = &v11[10 * v10];
  if (v4) {
    operator delete(v4);
  }
  return v18;
}

uint64_t sub_10027D510(uint64_t result, int *a2, unsigned int ***a3, uint64_t a4, char a5)
{
  uint64_t v9 = result;
LABEL_2:
  uint64_t v239 = a2 - 8;
  unint64_t v10 = v9;
  while (1)
  {
    uint64_t v9 = v10;
    uint64_t v11 = (uint64_t)a2 - v10;
    unint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 5;
    if (v6 || !v5)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int v103 = sub_100276B54(*a3, (uint64_t)v239);
          BOOL result = sub_100276B54(*a3, v9);
          if (v103 >= (int)result) {
            return result;
          }
          int v104 = *(_DWORD *)v9;
          int v105 = *(int *)v9 >> 31;
          long long v107 = (void *)(v9 + 8);
          uint64_t v106 = *(void *)(v9 + 8);
          if (v105 == *(_DWORD *)v9)
          {
            long long v108 = a2;
            int v109 = *v239;
            int v110 = 0;
            if (v104 == *v239)
            {
              void *v107 = *((void *)a2 - 3);
              goto LABEL_304;
            }
          }
          else
          {
            uint64_t v246 = *(void *)(v9 + 16);
            LODWORD(v247) = *(_DWORD *)(v9 + 24);
            int v110 = v105 ^ v104;
            long long v108 = a2;
            int v109 = *v239;
            if (v104 == *v239)
            {
              long long v227 = *(_OWORD *)(a2 - 6);
              *(_DWORD *)(v9 + 24) = *(a2 - 2);
              *(_OWORD *)long long v107 = v227;
              goto LABEL_304;
            }
          }
          int v228 = v109 ^ (v109 >> 31);
          uint64_t v229 = (long long *)(v108 - 6);
          if (v228)
          {
            long long v230 = *v229;
            *(_DWORD *)(v9 + 24) = *(v108 - 2);
            *(_OWORD *)long long v107 = v230;
            *(_DWORD *)uint64_t v9 = v228;
          }
          else
          {
            *(void *)(v9 + 8) = *(void *)v229;
            *(_DWORD *)uint64_t v9 = 0;
          }
LABEL_304:
          int v231 = v110 >> 31;
          if (*v239 == v110)
          {
            *((void *)v108 - 3) = v106;
            if (v231 != v110)
            {
              uint64_t v232 = v246;
              *(v108 - 2) = v247;
              *((void *)v108 - 2) = v232;
            }
          }
          else
          {
            *((void *)v108 - 3) = v106;
            int v233 = v231 ^ v110;
            if (v231 != v110)
            {
              uint64_t v234 = v246;
              *(v108 - 2) = v247;
              *((void *)v108 - 2) = v234;
              *(v108 - 8) = v233;
            }
            else
            {
              *uint64_t v239 = 0;
            }
          }
          break;
        case 3uLL:
          return sub_10027F170(v9, v9 + 32, (uint64_t)v239, a3);
        case 4uLL:
          return sub_10027FCFC(v9, v9 + 32, v9 + 64, (uint64_t)v239, a3);
        case 5uLL:
          return sub_10027EC10(v9, v9 + 32, v9 + 64, v9 + 96, (uint64_t)v239, a3);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 767) {
      break;
    }
    if (!a4)
    {
      if ((int *)v9 == a2) {
        return result;
      }
      int64_t v240 = (v12 - 2) >> 1;
      int64_t v114 = v240;
      do
      {
        int64_t v116 = v114;
        if (v240 >= v114)
        {
          int64_t v237 = v114;
          uint64_t v117 = (2 * v114) | 1;
          unsigned __int8 v118 = (_DWORD *)(v9 + 32 * v117);
          uint64_t v119 = 2 * v114 + 2;
          if (v119 < (uint64_t)v12)
          {
            int v120 = sub_100276B54(*a3, v9 + 32 * v117);
            if (v120 < (int)sub_100276B54(*a3, (uint64_t)(v118 + 8)))
            {
              v118 += 8;
              uint64_t v117 = v119;
            }
          }
          int v121 = sub_100276B54(*a3, (uint64_t)v118);
          uint64_t v122 = v9 + 32 * v237;
          BOOL result = sub_100276B54(*a3, v122);
          int64_t v116 = v237;
          if (v121 >= (int)result)
          {
            unsigned __int8 v124 = (void *)(v122 + 8);
            int v123 = *(_DWORD *)v122;
            int v125 = *(int *)v122 >> 31;
            if (v123 >> 31 == v123)
            {
              *(void *)&long long v247 = *v124;
              int v125 = v123;
            }
            else
            {
              long long v126 = *(_OWORD *)v124;
              int v248 = *(_DWORD *)(v122 + 24);
              long long v247 = v126;
            }
            LODWORD(v246) = v125 ^ v123;
            do
            {
              unsigned __int8 v127 = v118;
              if (*(_DWORD *)v122 == *v118)
              {
                unsigned __int8 v128 = v118 + 2;
                unsigned __int8 v129 = (void *)(v122 + 8);
                if (*(_DWORD *)v122 == *(int *)v122 >> 31)
                {
                  void *v129 = *v128;
                  if (v240 < v117) {
                    break;
                  }
                }
                else
                {
                  long long v133 = *(_OWORD *)v128;
                  *(_DWORD *)(v122 + 24) = v118[6];
                  *(_OWORD *)unsigned __int8 v129 = v133;
                  if (v240 < v117) {
                    break;
                  }
                }
              }
              else
              {
                int v130 = *v118 ^ ((int)*v118 >> 31);
                unsigned __int8 v131 = (long long *)(v118 + 2);
                if (v130)
                {
                  long long v132 = *v131;
                  *(_DWORD *)(v122 + 24) = v118[6];
                  *(_OWORD *)(v122 + 8) = v132;
                  *(_DWORD *)uint64_t v122 = v130;
                  if (v240 < v117) {
                    break;
                  }
                }
                else
                {
                  *(void *)(v122 + 8) = *(void *)v131;
                  *(_DWORD *)uint64_t v122 = 0;
                  if (v240 < v117) {
                    break;
                  }
                }
              }
              uint64_t v134 = (2 * v117) | 1;
              unsigned __int8 v118 = (_DWORD *)(v9 + 32 * v134);
              uint64_t v117 = 2 * v117 + 2;
              if (v117 < (uint64_t)v12)
              {
                int v135 = sub_100276B54(*a3, v9 + 32 * v134);
                if (v135 >= (int)sub_100276B54(*a3, (uint64_t)(v118 + 8))) {
                  uint64_t v117 = v134;
                }
                else {
                  v118 += 8;
                }
              }
              else
              {
                uint64_t v117 = v134;
              }
              int v136 = sub_100276B54(*a3, (uint64_t)v118);
              BOOL result = sub_100276B54(*a3, (uint64_t)&v246);
              uint64_t v122 = (uint64_t)v127;
            }
            while (v136 >= (int)result);
            if (*v127 == v246)
            {
              unsigned __int8 v137 = v127 + 2;
              if (*v127 == (int)*v127 >> 31)
              {
                *unsigned __int8 v137 = v247;
              }
              else
              {
                long long v115 = v247;
                v127[6] = v248;
                *(_OWORD *)unsigned __int8 v137 = v115;
              }
            }
            else
            {
              int v138 = v246 ^ ((int)v246 >> 31);
              if (v138)
              {
                long long v139 = v247;
                v127[6] = v248;
                *(_OWORD *)(v127 + 2) = v139;
                _DWORD *v127 = v138;
              }
              else
              {
                *((void *)v127 + 1) = v247;
                _DWORD *v127 = 0;
              }
            }
            int64_t v116 = v237;
          }
        }
        int64_t v114 = v116 - 1;
      }
      while (v116);
      uint64_t v163 = (unint64_t)v11 >> 5;
      while (1)
      {
        uint64_t v235 = *(void *)(v9 + 8);
        int v241 = a2;
        int v243 = *(_DWORD *)v9;
        if (*(int *)v9 >> 31 == *(_DWORD *)v9)
        {
          int v238 = *(_DWORD *)v9;
        }
        else
        {
          int v238 = *(int *)v9 >> 31;
          uint64_t v244 = *(void *)(v9 + 16);
          int v245 = *(_DWORD *)(v9 + 24);
        }
        uint64_t v165 = 0;
        uint64_t v166 = v9;
        do
        {
          uint64_t v168 = v166;
          v166 += 32 * v165 + 32;
          uint64_t v169 = 2 * v165;
          uint64_t v165 = (2 * v165) | 1;
          uint64_t v170 = v169 + 2;
          if (v169 + 2 < v163)
          {
            int v171 = sub_100276B54(*a3, v166);
            BOOL result = sub_100276B54(*a3, v166 + 32);
            if (v171 < (int)result)
            {
              v166 += 32;
              uint64_t v165 = v170;
            }
          }
          if (*(_DWORD *)v168 == *(_DWORD *)v166)
          {
            v172 = (void *)(v166 + 8);
            v173 = (void *)(v168 + 8);
            if (*(_DWORD *)v168 == *(int *)v168 >> 31)
            {
              void *v173 = *v172;
            }
            else
            {
              long long v167 = *(_OWORD *)v172;
              *(_DWORD *)(v168 + 24) = *(_DWORD *)(v166 + 24);
              *(_OWORD *)v173 = v167;
            }
          }
          else
          {
            int v174 = *(_DWORD *)v166 ^ (*(int *)v166 >> 31);
            int v175 = (long long *)(v166 + 8);
            if (v174)
            {
              long long v176 = *v175;
              *(_DWORD *)(v168 + 24) = *(_DWORD *)(v166 + 24);
              *(_OWORD *)(v168 + 8) = v176;
              *(_DWORD *)uint64_t v168 = v174;
            }
            else
            {
              *(void *)(v168 + 8) = *(void *)v175;
              *(_DWORD *)uint64_t v168 = 0;
            }
          }
        }
        while (v165 <= (uint64_t)((unint64_t)(v163 - 2) >> 1));
        int v177 = v238 ^ v243;
        v178 = v241 - 8;
        int v179 = *(_DWORD *)v166;
        int v180 = (v238 ^ v243) >> 31;
        a2 = v241 - 8;
        if ((int *)v166 == v241 - 8)
        {
          if (v179 == v177)
          {
            *(void *)(v166 + 8) = v235;
            if (v180 != v177)
            {
              *(void *)(v166 + 16) = v244;
              *(_DWORD *)(v166 + 24) = v245;
            }
          }
          else
          {
            int v186 = v180 ^ v177;
            *(void *)(v166 + 8) = v235;
            if (v186)
            {
              *(void *)(v166 + 16) = v244;
              *(_DWORD *)(v166 + 24) = v245;
              *(_DWORD *)uint64_t v166 = v186;
            }
            else
            {
              *(_DWORD *)uint64_t v166 = 0;
            }
          }
          goto LABEL_211;
        }
        if (v179 == *v178)
        {
          v181 = v241 - 6;
          v182 = (void *)(v166 + 8);
          if (v179 == v179 >> 31)
          {
            void *v182 = *(void *)v181;
            if (*v178 == v177) {
              goto LABEL_241;
            }
          }
          else
          {
            long long v187 = *(_OWORD *)v181;
            *(_DWORD *)(v166 + 24) = *(v241 - 2);
            *(_OWORD *)v182 = v187;
            if (*v178 == v177) {
              goto LABEL_241;
            }
          }
        }
        else
        {
          int v183 = *v178 ^ (*v178 >> 31);
          v184 = (long long *)(v241 - 6);
          if (v183)
          {
            long long v185 = *v184;
            *(_DWORD *)(v166 + 24) = *(v241 - 2);
            *(_OWORD *)(v166 + 8) = v185;
            *(_DWORD *)uint64_t v166 = v183;
            if (*v178 == v177) {
              goto LABEL_241;
            }
          }
          else
          {
            *(void *)(v166 + 8) = *(void *)v184;
            *(_DWORD *)uint64_t v166 = 0;
            if (*v178 == v177)
            {
LABEL_241:
              if (v180 == v177)
              {
                *((void *)v241 - 3) = v235;
                uint64_t v188 = v166 + 32 - v9;
                if (v188 >= 33) {
                  goto LABEL_251;
                }
              }
              else
              {
                *((void *)v241 - 3) = v235;
                *(v241 - 2) = v245;
                *((void *)v241 - 2) = v244;
                uint64_t v188 = v166 + 32 - v9;
                if (v188 >= 33) {
                  goto LABEL_251;
                }
              }
              goto LABEL_211;
            }
          }
        }
        int v189 = v180 ^ v177;
        if (v189)
        {
          *((void *)v241 - 3) = v235;
          *(v241 - 2) = v245;
          *((void *)v241 - 2) = v244;
          *(v241 - 8) = v189;
          uint64_t v188 = v166 + 32 - v9;
          if (v188 >= 33) {
            goto LABEL_251;
          }
        }
        else
        {
          *((void *)v241 - 3) = v235;
          *(v241 - 8) = 0;
          uint64_t v188 = v166 + 32 - v9;
          if (v188 >= 33)
          {
LABEL_251:
            unint64_t v190 = (((unint64_t)v188 >> 5) - 2) >> 1;
            v191 = (_DWORD *)(v9 + 32 * v190);
            int v192 = sub_100276B54(*a3, (uint64_t)v191);
            BOOL result = sub_100276B54(*a3, v166);
            if (v192 < (int)result)
            {
              v194 = (void *)(v166 + 8);
              int v193 = *(_DWORD *)v166;
              int v195 = *(int *)v166 >> 31;
              if (v193 >> 31 == v193)
              {
                *(void *)&long long v247 = *v194;
                int v195 = v193;
              }
              else
              {
                long long v196 = *(_OWORD *)v194;
                int v248 = *(_DWORD *)(v166 + 24);
                long long v247 = v196;
              }
              LODWORD(v246) = v195 ^ v193;
              do
              {
                uint32_t v197 = v191;
                if (*(_DWORD *)v166 == *v191)
                {
                  unint64_t v198 = v191 + 2;
                  uint64_t v199 = (void *)(v166 + 8);
                  if (*(_DWORD *)v166 == *(int *)v166 >> 31)
                  {
                    *uint64_t v199 = *v198;
                    if (!v190) {
                      break;
                    }
                  }
                  else
                  {
                    long long v203 = *(_OWORD *)v198;
                    *(_DWORD *)(v166 + 24) = v191[6];
                    *(_OWORD *)uint64_t v199 = v203;
                    if (!v190) {
                      break;
                    }
                  }
                }
                else
                {
                  int v200 = *v191 ^ ((int)*v191 >> 31);
                  uint64_t v201 = (long long *)(v191 + 2);
                  if (v200)
                  {
                    long long v202 = *v201;
                    *(_DWORD *)(v166 + 24) = v191[6];
                    *(_OWORD *)(v166 + 8) = v202;
                    *(_DWORD *)uint64_t v166 = v200;
                    if (!v190) {
                      break;
                    }
                  }
                  else
                  {
                    *(void *)(v166 + 8) = *(void *)v201;
                    *(_DWORD *)uint64_t v166 = 0;
                    if (!v190) {
                      break;
                    }
                  }
                }
                unint64_t v190 = (v190 - 1) >> 1;
                v191 = (_DWORD *)(v9 + 32 * v190);
                int v204 = sub_100276B54(*a3, (uint64_t)v191);
                BOOL result = sub_100276B54(*a3, (uint64_t)&v246);
                uint64_t v166 = (uint64_t)v197;
              }
              while (v204 < (int)result);
              if (*v197 == v246)
              {
                uint64_t v205 = v197 + 2;
                if (*v197 == (int)*v197 >> 31)
                {
                  *uint64_t v205 = v247;
                }
                else
                {
                  long long v208 = v247;
                  v197[6] = v248;
                  *(_OWORD *)uint64_t v205 = v208;
                }
              }
              else
              {
                int v206 = v246 ^ ((int)v246 >> 31);
                if (v206)
                {
                  long long v207 = v247;
                  v197[6] = v248;
                  *(_OWORD *)(v197 + 2) = v207;
                  _DWORD *v197 = v206;
                }
                else
                {
                  *((void *)v197 + 1) = v247;
                  _DWORD *v197 = 0;
                }
              }
            }
          }
        }
LABEL_211:
        if (v163-- <= 2) {
          return result;
        }
      }
    }
    uint64_t v13 = v9 + 32 * (v12 >> 1);
    if ((unint64_t)v11 <= 0x1000)
    {
      sub_10027F170(v9 + 32 * (v12 >> 1), v9, (uint64_t)v239, a3);
      goto LABEL_25;
    }
    sub_10027F170(v9, v9 + 32 * (v12 >> 1), (uint64_t)v239, a3);
    unint64_t v14 = v9 + 32 * (v12 >> 1);
    sub_10027F170(v9 + 32, v14 - 32, (uint64_t)(a2 - 16), a3);
    sub_10027F170(v9 + 64, v14 + 32, (uint64_t)(a2 - 24), a3);
    sub_10027F170(v14 - 32, v13, v14 + 32, a3);
    int v15 = *(_DWORD *)v9;
    int v16 = *(int *)v9 >> 31;
    int v18 = (_OWORD *)(v9 + 8);
    uint64_t v17 = *(void *)(v9 + 8);
    if (v16 == *(_DWORD *)v9)
    {
      int v19 = *(_DWORD *)v13;
      if (v15 != *(_DWORD *)v13)
      {
        int v20 = 0;
LABEL_17:
        int v23 = v19 ^ (v19 >> 31);
        int v24 = (long long *)(v13 + 8);
        if (v23)
        {
          long long v25 = *v24;
          *(_DWORD *)(v9 + 24) = *(_DWORD *)(v13 + 24);
          *int v18 = v25;
          *(_DWORD *)uint64_t v9 = v23;
          int v21 = v20 >> 31;
          if (*(_DWORD *)v13 != v20) {
            goto LABEL_23;
          }
        }
        else
        {
          *(void *)(v9 + 8) = *(void *)v24;
          *(_DWORD *)uint64_t v9 = 0;
          int v21 = v20 >> 31;
          if (*(_DWORD *)v13 != v20) {
            goto LABEL_23;
          }
        }
        goto LABEL_19;
      }
      int v20 = 0;
      *(void *)int v18 = *(void *)(v13 + 8);
      int v21 = 0;
      if (*(_DWORD *)v13) {
        goto LABEL_23;
      }
LABEL_19:
      *(void *)(v13 + 8) = v17;
      if (v21 == v20) {
        goto LABEL_25;
      }
      uint64_t v26 = v246;
      *(_DWORD *)(v13 + 24) = v247;
      *(void *)(v13 + 16) = v26;
      --a4;
      if (a5) {
        goto LABEL_27;
      }
LABEL_26:
      int v29 = sub_100276B54(*a3, v9 - 32);
      if (v29 < (int)sub_100276B54(*a3, v9)) {
        goto LABEL_27;
      }
      int v69 = (void *)(v9 + 8);
      int v68 = *(_DWORD *)v9;
      int v70 = *(int *)v9 >> 31;
      if (v68 >> 31 == v68)
      {
        *(void *)&long long v247 = *v69;
        int v70 = v68;
      }
      else
      {
        long long v71 = *(_OWORD *)v69;
        int v248 = *(_DWORD *)(v9 + 24);
        long long v247 = v71;
      }
      LODWORD(v246) = v70 ^ v68;
      int v72 = sub_100276B54(*a3, (uint64_t)&v246);
      BOOL result = sub_100276B54(*a3, (uint64_t)v239);
      if (v72 < (int)result)
      {
        unint64_t v10 = v9;
        do
        {
          int v73 = sub_100276B54(*a3, (uint64_t)&v246);
          v10 += 32;
          BOOL result = sub_100276B54(*a3, v10);
        }
        while (v73 >= (int)result);
      }
      else
      {
        unint64_t v74 = v9 + 32;
        do
        {
          unint64_t v10 = v74;
          if (v74 >= (unint64_t)a2) {
            break;
          }
          int v75 = sub_100276B54(*a3, (uint64_t)&v246);
          BOOL result = sub_100276B54(*a3, v10);
          unint64_t v74 = v10 + 32;
        }
        while (v75 >= (int)result);
      }
      unint64_t v76 = (unint64_t)a2;
      if (v10 < (unint64_t)a2)
      {
        unint64_t v76 = (unint64_t)a2;
        do
        {
          int v77 = sub_100276B54(*a3, (uint64_t)&v246);
          v76 -= 32;
          BOOL result = sub_100276B54(*a3, v76);
        }
        while (v77 < (int)result);
      }
      while (v10 < v76)
      {
        int v78 = *(_DWORD *)v10;
        int v79 = *(int *)v10 >> 31;
        unsigned int v81 = (void *)(v10 + 8);
        uint64_t v80 = *(void *)(v10 + 8);
        if (v79 == *(_DWORD *)v10)
        {
          int v82 = *(_DWORD *)v76;
          if (v78 == *(_DWORD *)v76)
          {
            int v83 = 0;
            *unsigned int v81 = *(void *)(v76 + 8);
            int v84 = 0;
            if (*(_DWORD *)v76) {
              goto LABEL_111;
            }
            goto LABEL_108;
          }
          int v83 = 0;
        }
        else
        {
          uint64_t v244 = *(void *)(v10 + 16);
          int v245 = *(_DWORD *)(v10 + 24);
          int v83 = v79 ^ v78;
          int v82 = *(_DWORD *)v76;
          if (v78 == *(_DWORD *)v76)
          {
            long long v85 = *(_OWORD *)(v76 + 8);
            *(_DWORD *)(v10 + 24) = *(_DWORD *)(v76 + 24);
            *(_OWORD *)unsigned int v81 = v85;
            int v84 = v83 >> 31;
            if (*(_DWORD *)v76 != v83) {
              goto LABEL_111;
            }
            goto LABEL_108;
          }
        }
        int v86 = v82 ^ (v82 >> 31);
        unsigned int v87 = (long long *)(v76 + 8);
        if (v86)
        {
          long long v88 = *v87;
          *(_DWORD *)(v10 + 24) = *(_DWORD *)(v76 + 24);
          *(_OWORD *)unsigned int v81 = v88;
          *(_DWORD *)unint64_t v10 = v86;
          int v84 = v83 >> 31;
          if (*(_DWORD *)v76 != v83) {
            goto LABEL_111;
          }
        }
        else
        {
          *(void *)(v10 + 8) = *(void *)v87;
          *(_DWORD *)unint64_t v10 = 0;
          int v84 = v83 >> 31;
          if (*(_DWORD *)v76 != v83)
          {
LABEL_111:
            *(void *)(v76 + 8) = v80;
            if (v84 != v83)
            {
              *(void *)(v76 + 16) = v244;
              *(_DWORD *)(v76 + 24) = v245;
              *(_DWORD *)unint64_t v76 = v84 ^ v83;
            }
            else
            {
              *(_DWORD *)unint64_t v76 = 0;
            }
            goto LABEL_114;
          }
        }
LABEL_108:
        *(void *)(v76 + 8) = v80;
        if (v84 != v83)
        {
          *(void *)(v76 + 16) = v244;
          *(_DWORD *)(v76 + 24) = v245;
        }
        do
        {
LABEL_114:
          int v89 = sub_100276B54(*a3, (uint64_t)&v246);
          v10 += 32;
        }
        while (v89 >= (int)sub_100276B54(*a3, v10));
        do
        {
          int v90 = sub_100276B54(*a3, (uint64_t)&v246);
          v76 -= 32;
          BOOL result = sub_100276B54(*a3, v76);
        }
        while (v90 < (int)result);
      }
      unsigned int v91 = (int *)(v10 - 32);
      if (v10 - 32 != v9)
      {
        if (*(_DWORD *)v9 == *v91)
        {
          unsigned int v92 = (void *)(v10 - 24);
          if (*(_DWORD *)v9 == *(int *)v9 >> 31)
          {
            void *v69 = *v92;
          }
          else
          {
            long long v96 = *(_OWORD *)v92;
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 - 8);
            *(_OWORD *)int v69 = v96;
          }
        }
        else
        {
          int v93 = *v91 ^ (*v91 >> 31);
          unsigned int v94 = (long long *)(v10 - 24);
          if (v93)
          {
            long long v95 = *v94;
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 - 8);
            *(_OWORD *)int v69 = v95;
            *(_DWORD *)uint64_t v9 = v93;
          }
          else
          {
            *(void *)(v9 + 8) = *(void *)v94;
            *(_DWORD *)uint64_t v9 = 0;
          }
        }
      }
      int v97 = *v91;
      BOOL v5 = *v91 >= v246;
      BOOL v6 = *v91 == v246;
      if (*v91 == v246)
      {
        unsigned int v98 = (void *)(v10 - 24);
        BOOL v5 = v97 >= (v97 >> 31);
        BOOL v6 = v97 == v97 >> 31;
        if (v97 == v97 >> 31)
        {
          void *v98 = v247;
        }
        else
        {
          long long v102 = v247;
          *(_DWORD *)(v10 - 8) = v248;
          *(_OWORD *)unsigned int v98 = v102;
        }
        a5 = 0;
      }
      else
      {
        int v99 = v246 ^ ((int)v246 >> 31);
        int v100 = (_OWORD *)(v10 - 24);
        if (v99)
        {
          long long v101 = v247;
          *(_DWORD *)(v10 - 8) = v248;
          *int v100 = v101;
          int *v91 = v99;
        }
        else
        {
          *(void *)int v100 = v247;
          int *v91 = 0;
        }
        a5 = 0;
      }
    }
    else
    {
      uint64_t v246 = *(void *)(v9 + 16);
      LODWORD(v247) = *(_DWORD *)(v9 + 24);
      int v20 = v16 ^ v15;
      int v19 = *(_DWORD *)v13;
      if (v15 != *(_DWORD *)v13) {
        goto LABEL_17;
      }
      long long v22 = *(_OWORD *)(v13 + 8);
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v13 + 24);
      *int v18 = v22;
      int v21 = v20 >> 31;
      if (*(_DWORD *)v13 == v20) {
        goto LABEL_19;
      }
LABEL_23:
      *(void *)(v13 + 8) = v17;
      int v27 = v21 ^ v20;
      if (v21 != v20)
      {
        uint64_t v28 = v246;
        *(_DWORD *)(v13 + 24) = v247;
        *(void *)(v13 + 16) = v28;
        *(_DWORD *)uint64_t v13 = v27;
LABEL_25:
        --a4;
        if (a5) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      *(_DWORD *)uint64_t v13 = 0;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_26;
      }
LABEL_27:
      uint64_t v31 = (void *)(v9 + 8);
      int v30 = *(_DWORD *)v9;
      int v32 = *(int *)v9 >> 31;
      if (v30 >> 31 == v30)
      {
        *(void *)&long long v247 = *v31;
        int v32 = v30;
      }
      else
      {
        long long v33 = *(_OWORD *)v31;
        int v248 = *(_DWORD *)(v9 + 24);
        long long v247 = v33;
      }
      uint64_t v34 = 0;
      LODWORD(v246) = v32 ^ v30;
      do
      {
        int v35 = sub_100276B54(*a3, v9 + v34 + 32);
        v34 += 32;
      }
      while (v35 < (int)sub_100276B54(*a3, (uint64_t)&v246));
      unint64_t v36 = v9 + v34;
      unint64_t v37 = (unint64_t)a2;
      if (v34 == 32)
      {
        unint64_t v37 = (unint64_t)a2;
        do
        {
          if (v36 >= v37) {
            break;
          }
          v37 -= 32;
          int v39 = sub_100276B54(*a3, v37);
        }
        while (v39 >= (int)sub_100276B54(*a3, (uint64_t)&v246));
      }
      else
      {
        do
        {
          v37 -= 32;
          int v38 = sub_100276B54(*a3, v37);
        }
        while (v38 >= (int)sub_100276B54(*a3, (uint64_t)&v246));
      }
      unint64_t v10 = v9 + v34;
      if (v36 < v37)
      {
        unint64_t v40 = v37;
        do
        {
          int v41 = *(_DWORD *)v10;
          int v42 = *(int *)v10 >> 31;
          int v44 = (void *)(v10 + 8);
          uint64_t v43 = *(void *)(v10 + 8);
          if (v42 == *(_DWORD *)v10)
          {
            int v45 = *(_DWORD *)v40;
            if (v41 == *(_DWORD *)v40)
            {
              int v46 = 0;
              *int v44 = *(void *)(v40 + 8);
              int v47 = 0;
              if (!*(_DWORD *)v40) {
                goto LABEL_50;
              }
              goto LABEL_53;
            }
            int v46 = 0;
          }
          else
          {
            uint64_t v244 = *(void *)(v10 + 16);
            int v245 = *(_DWORD *)(v10 + 24);
            int v46 = v42 ^ v41;
            int v45 = *(_DWORD *)v40;
            if (v41 == *(_DWORD *)v40)
            {
              long long v48 = *(_OWORD *)(v40 + 8);
              *(_DWORD *)(v10 + 24) = *(_DWORD *)(v40 + 24);
              *(_OWORD *)int v44 = v48;
              int v47 = v46 >> 31;
              if (*(_DWORD *)v40 == v46) {
                goto LABEL_50;
              }
              goto LABEL_53;
            }
          }
          int v49 = v45 ^ (v45 >> 31);
          unsigned int v50 = (long long *)(v40 + 8);
          if (v49)
          {
            long long v51 = *v50;
            *(_DWORD *)(v10 + 24) = *(_DWORD *)(v40 + 24);
            *(_OWORD *)int v44 = v51;
            *(_DWORD *)unint64_t v10 = v49;
            int v47 = v46 >> 31;
            if (*(_DWORD *)v40 == v46) {
              goto LABEL_50;
            }
          }
          else
          {
            *(void *)(v10 + 8) = *(void *)v50;
            *(_DWORD *)unint64_t v10 = 0;
            int v47 = v46 >> 31;
            if (*(_DWORD *)v40 == v46)
            {
LABEL_50:
              *(void *)(v40 + 8) = v43;
              if (v47 != v46)
              {
                *(void *)(v40 + 16) = v244;
                *(_DWORD *)(v40 + 24) = v245;
              }
              goto LABEL_56;
            }
          }
LABEL_53:
          *(void *)(v40 + 8) = v43;
          if (v47 != v46)
          {
            *(void *)(v40 + 16) = v244;
            *(_DWORD *)(v40 + 24) = v245;
            *(_DWORD *)unint64_t v40 = v47 ^ v46;
          }
          else
          {
            *(_DWORD *)unint64_t v40 = 0;
          }
          do
          {
LABEL_56:
            v10 += 32;
            int v52 = sub_100276B54(*a3, v10);
          }
          while (v52 < (int)sub_100276B54(*a3, (uint64_t)&v246));
          do
          {
            v40 -= 32;
            int v53 = sub_100276B54(*a3, v40);
          }
          while (v53 >= (int)sub_100276B54(*a3, (uint64_t)&v246));
        }
        while (v10 < v40);
      }
      int v54 = (int *)(v10 - 32);
      if (v10 - 32 == v9) {
        goto LABEL_68;
      }
      if (*(_DWORD *)v9 == *v54)
      {
        long long v55 = (long long *)(v10 - 24);
        if (*(_DWORD *)v9 != *(int *)v9 >> 31)
        {
          long long v61 = *v55;
          *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 - 8);
          *(_OWORD *)uint64_t v31 = v61;
LABEL_68:
          int v56 = *v54;
          int v57 = v246;
          if (*v54 != v246) {
            goto LABEL_75;
          }
          goto LABEL_69;
        }
        void *v31 = *(void *)v55;
        int v56 = *v54;
        int v57 = v246;
        if (*v54 != v246) {
          goto LABEL_75;
        }
LABEL_69:
        unsigned int v62 = (void *)(v10 - 24);
        if (v56 == v56 >> 31)
        {
          *unsigned int v62 = v247;
          if (v36 < v37) {
            goto LABEL_81;
          }
        }
        else
        {
          long long v63 = v247;
          *(_DWORD *)(v10 - 8) = v248;
          *(_OWORD *)unsigned int v62 = v63;
          if (v36 < v37) {
            goto LABEL_81;
          }
        }
LABEL_79:
        BOOL v67 = sub_10027F864(v9, (_DWORD *)(v10 - 32), a3);
        BOOL result = sub_10027F864(v10, a2, a3);
        if (result)
        {
          a2 = (int *)(v10 - 32);
          if (v67) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v67) {
          goto LABEL_81;
        }
      }
      else
      {
        int v58 = *v54 ^ (*v54 >> 31);
        int v59 = (void *)(v10 - 24);
        if (!v58)
        {
          *(void *)(v9 + 8) = *v59;
          *(_DWORD *)uint64_t v9 = 0;
          int v56 = *v54;
          int v57 = v246;
          if (*v54 != v246) {
            goto LABEL_75;
          }
          goto LABEL_69;
        }
        long long v60 = *(_OWORD *)v59;
        *(_DWORD *)(v9 + 24) = *(_DWORD *)(v10 - 8);
        *(_OWORD *)uint64_t v31 = v60;
        *(_DWORD *)uint64_t v9 = v58;
        int v56 = *v54;
        int v57 = v246;
        if (*v54 == v246) {
          goto LABEL_69;
        }
LABEL_75:
        int v64 = v57 ^ (v57 >> 31);
        int v65 = (void *)(v10 - 24);
        if (!v64)
        {
          *int v65 = v247;
          *int v54 = 0;
          if (v36 < v37) {
            goto LABEL_81;
          }
          goto LABEL_79;
        }
        long long v66 = v247;
        *(_DWORD *)(v10 - 8) = v248;
        *(_OWORD *)int v65 = v66;
        *int v54 = v64;
        if (v36 >= v37) {
          goto LABEL_79;
        }
LABEL_81:
        BOOL result = sub_10027D510(v9, v10 - 32, a3, a4, a5 & 1);
        a5 = 0;
      }
    }
  }
  if ((a5 & 1) == 0)
  {
    if ((int *)v9 != a2)
    {
      uint64_t v209 = v9 + 32;
      if ((int *)(v9 + 32) != a2)
      {
        uint64_t v210 = v9 - 32;
        do
        {
          v211 = (int *)v209;
          int v212 = sub_100276B54(*a3, v209);
          BOOL result = sub_100276B54(*a3, v9);
          if (v212 < (int)result)
          {
            int v213 = *v211;
            int v214 = *v211 >> 31;
            uint64_t v215 = (void *)(v9 + 40);
            if (v213 >> 31 == v213)
            {
              *(void *)&long long v247 = *v215;
              int v214 = v213;
            }
            else
            {
              long long v247 = *(_OWORD *)v215;
              int v248 = *(_DWORD *)(v9 + 56);
            }
            LODWORD(v246) = v214 ^ v213;
            uint64_t v216 = v210;
            do
            {
              int v217 = *(_DWORD *)(v216 + 64);
              int v218 = *(_DWORD *)(v216 + 32);
              if (v217 == v218)
              {
                v219 = (void *)(v216 + 40);
                int v220 = (void *)(v216 + 72);
                if (v217 == v217 >> 31)
                {
                  *int v220 = *v219;
                }
                else
                {
                  *(_OWORD *)int v220 = *(_OWORD *)v219;
                  *(_DWORD *)(v216 + 88) = *(_DWORD *)(v216 + 56);
                }
              }
              else
              {
                int v221 = v218 ^ (v218 >> 31);
                if (v221)
                {
                  *(_OWORD *)(v216 + 72) = *(_OWORD *)(v216 + 40);
                  *(_DWORD *)(v216 + 88) = *(_DWORD *)(v216 + 56);
                  *(_DWORD *)(v216 + 64) = v221;
                }
                else
                {
                  *(void *)(v216 + 72) = *(void *)(v216 + 40);
                  *(_DWORD *)(v216 + 64) = 0;
                }
              }
              int v222 = sub_100276B54(*a3, (uint64_t)&v246);
              BOOL result = sub_100276B54(*a3, v216);
              v216 -= 32;
            }
            while (v222 < (int)result);
            int v223 = *(_DWORD *)(v216 + 64);
            if (v223 == v246)
            {
              if (v223 == v223 >> 31)
              {
                *(void *)(v216 + 72) = v247;
              }
              else
              {
                long long v224 = v247;
                *(_DWORD *)(v216 + 88) = v248;
                *(_OWORD *)(v216 + 72) = v224;
              }
            }
            else
            {
              int v225 = v246 ^ ((int)v246 >> 31);
              if (v225)
              {
                long long v226 = v247;
                *(_DWORD *)(v216 + 88) = v248;
                *(_OWORD *)(v216 + 72) = v226;
                *(_DWORD *)(v216 + 64) = v225;
              }
              else
              {
                *(void *)(v216 + 72) = v247;
                *(_DWORD *)(v216 + 64) = 0;
              }
            }
          }
          uint64_t v209 = (uint64_t)(v211 + 8);
          v210 += 32;
          uint64_t v9 = (uint64_t)v211;
        }
        while (v211 + 8 != a2);
      }
    }
    return result;
  }
  if ((int *)v9 == a2) {
    return result;
  }
  uint64_t v111 = v9 + 32;
  if ((int *)(v9 + 32) == a2) {
    return result;
  }
  uint64_t v112 = 0;
  uint64_t v113 = v9;
  while (2)
  {
    int v140 = (int *)v111;
    int v141 = sub_100276B54(*a3, v111);
    BOOL result = sub_100276B54(*a3, v113);
    int v142 = a2;
    if (v141 >= (int)result) {
      goto LABEL_184;
    }
    int v143 = *v140;
    int v144 = *v140 >> 31;
    int v145 = (void *)(v113 + 40);
    if (v143 >> 31 == v143)
    {
      *(void *)&long long v247 = *v145;
      int v144 = v143;
    }
    else
    {
      long long v247 = *(_OWORD *)v145;
      int v248 = *(_DWORD *)(v113 + 56);
    }
    LODWORD(v246) = v144 ^ v143;
    uint64_t v146 = v112;
    while (2)
    {
      int v147 = (_DWORD *)(v9 + v146);
      int v148 = *(_DWORD *)(v9 + v146 + 32);
      int v149 = *(_DWORD *)(v9 + v146);
      if (v148 != v149)
      {
        int v152 = v149 ^ (v149 >> 31);
        int v153 = v147 + 2;
        long long v154 = v147 + 10;
        if (v152)
        {
          _OWORD *v154 = *v153;
          v147[14] = v147[6];
          v147[8] = v152;
          if (!v146) {
            goto LABEL_204;
          }
          goto LABEL_200;
        }
        *(void *)long long v154 = *(void *)v153;
        v147[8] = 0;
        if (v146) {
          goto LABEL_200;
        }
LABEL_204:
        uint64_t v156 = v9;
        int v157 = *(_DWORD *)v9;
        int v158 = v246;
        int v142 = a2;
        if (*(_DWORD *)v9 != v246) {
          goto LABEL_202;
        }
LABEL_205:
        uint64_t v161 = v156 + 8;
        if (v157 == v157 >> 31)
        {
          *(void *)uint64_t v161 = v247;
        }
        else
        {
          long long v162 = v247;
          *(_DWORD *)(v161 + 16) = v248;
          *(_OWORD *)uint64_t v161 = v162;
        }
        goto LABEL_184;
      }
      int v150 = v147 + 2;
      int v151 = v147 + 10;
      if (v148 == v148 >> 31)
      {
        *(void *)int v151 = *(void *)v150;
        if (!v146) {
          goto LABEL_204;
        }
      }
      else
      {
        *(_OWORD *)int v151 = *(_OWORD *)v150;
        v151[4] = v150[4];
        if (!v146) {
          goto LABEL_204;
        }
      }
LABEL_200:
      int v155 = sub_100276B54(*a3, (uint64_t)&v246);
      BOOL result = sub_100276B54(*a3, v9 + v146 - 32);
      v146 -= 32;
      if (v155 < (int)result) {
        continue;
      }
      break;
    }
    uint64_t v156 = v9 + v146 + 32;
    int v157 = *(_DWORD *)v156;
    int v158 = v246;
    int v142 = a2;
    if (*(_DWORD *)v156 == v246) {
      goto LABEL_205;
    }
LABEL_202:
    int v159 = v158 ^ (v158 >> 31);
    if (v159)
    {
      long long v160 = v247;
      *(_DWORD *)(v156 + 24) = v248;
      *(_OWORD *)(v156 + 8) = v160;
      *(_DWORD *)uint64_t v156 = v159;
    }
    else
    {
      *(void *)(v156 + 8) = v247;
      *(_DWORD *)uint64_t v156 = 0;
    }
LABEL_184:
    uint64_t v111 = (uint64_t)(v140 + 8);
    v112 += 32;
    uint64_t v113 = (uint64_t)v140;
    if (v140 + 8 != v142) {
      continue;
    }
    return result;
  }
}

uint64_t sub_10027EC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int ***a6)
{
  sub_10027FCFC(a1, a2, a3, a4, a6);
  int v12 = sub_100276B54(*a6, a5);
  uint64_t result = sub_100276B54(*a6, a4);
  if (v12 < (int)result)
  {
    int v14 = *(_DWORD *)a4;
    int v15 = *(int *)a4 >> 31;
    uint64_t v17 = (void *)(a4 + 8);
    uint64_t v16 = *(void *)(a4 + 8);
    if (v15 == *(_DWORD *)a4)
    {
      int v18 = *(_DWORD *)a5;
      if (v14 == *(_DWORD *)a5)
      {
        int v19 = 0;
        *uint64_t v17 = *(void *)(a5 + 8);
        int v20 = 0;
        if (*(_DWORD *)a5) {
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      int v19 = 0;
    }
    else
    {
      uint64_t v58 = *(void *)(a4 + 16);
      int v59 = *(_DWORD *)(a4 + 24);
      int v19 = v15 ^ v14;
      int v18 = *(_DWORD *)a5;
      if (v14 == *(_DWORD *)a5)
      {
        long long v21 = *(_OWORD *)(a5 + 8);
        *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
        *(_OWORD *)uint64_t v17 = v21;
        int v20 = v19 >> 31;
        if (*(_DWORD *)a5 != v19)
        {
LABEL_15:
          *(void *)(a5 + 8) = v16;
          if (v20 != v19)
          {
            *(void *)(a5 + 16) = v58;
            *(_DWORD *)(a5 + 24) = v59;
            *(_DWORD *)a5 = v20 ^ v19;
          }
          else
          {
            *(_DWORD *)a5 = 0;
          }
          goto LABEL_18;
        }
LABEL_12:
        *(void *)(a5 + 8) = v16;
        if (v20 != v19)
        {
          *(void *)(a5 + 16) = v58;
          *(_DWORD *)(a5 + 24) = v59;
        }
LABEL_18:
        int v25 = sub_100276B54(*a6, a4);
        uint64_t result = sub_100276B54(*a6, a3);
        if (v25 >= (int)result) {
          return result;
        }
        int v26 = *(_DWORD *)a3;
        int v27 = *(int *)a3 >> 31;
        int v29 = (void *)(a3 + 8);
        uint64_t v28 = *(void *)(a3 + 8);
        if (v27 == *(_DWORD *)a3)
        {
          int v30 = *(_DWORD *)a4;
          if (v26 == *(_DWORD *)a4)
          {
            int v31 = 0;
            *int v29 = *v17;
            int v32 = 0;
            if (*(_DWORD *)a4) {
              goto LABEL_32;
            }
            goto LABEL_29;
          }
          int v31 = 0;
        }
        else
        {
          uint64_t v58 = *(void *)(a3 + 16);
          int v59 = *(_DWORD *)(a3 + 24);
          int v31 = v27 ^ v26;
          int v30 = *(_DWORD *)a4;
          if (v26 == *(_DWORD *)a4)
          {
            long long v33 = *(_OWORD *)v17;
            *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
            *(_OWORD *)int v29 = v33;
            int v32 = v31 >> 31;
            if (*(_DWORD *)a4 != v31)
            {
LABEL_32:
              *uint64_t v17 = v28;
              if (v32 != v31)
              {
                *(void *)(a4 + 16) = v58;
                *(_DWORD *)(a4 + 24) = v59;
                *(_DWORD *)a4 = v32 ^ v31;
              }
              else
              {
                *(_DWORD *)a4 = 0;
              }
              goto LABEL_35;
            }
LABEL_29:
            *uint64_t v17 = v28;
            if (v32 != v31)
            {
              *(void *)(a4 + 16) = v58;
              *(_DWORD *)(a4 + 24) = v59;
            }
LABEL_35:
            int v36 = sub_100276B54(*a6, a3);
            uint64_t result = sub_100276B54(*a6, a2);
            if (v36 >= (int)result) {
              return result;
            }
            int v37 = *(_DWORD *)a2;
            int v38 = *(int *)a2 >> 31;
            unint64_t v40 = (void *)(a2 + 8);
            uint64_t v39 = *(void *)(a2 + 8);
            if (v38 == *(_DWORD *)a2)
            {
              int v41 = *(_DWORD *)a3;
              if (v37 == *(_DWORD *)a3)
              {
                int v42 = 0;
                void *v40 = *v29;
                int v43 = 0;
                if (*(_DWORD *)a3) {
                  goto LABEL_49;
                }
                goto LABEL_46;
              }
              int v42 = 0;
            }
            else
            {
              uint64_t v58 = *(void *)(a2 + 16);
              int v59 = *(_DWORD *)(a2 + 24);
              int v42 = v38 ^ v37;
              int v41 = *(_DWORD *)a3;
              if (v37 == *(_DWORD *)a3)
              {
                long long v44 = *(_OWORD *)v29;
                *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
                *(_OWORD *)unint64_t v40 = v44;
                int v43 = v42 >> 31;
                if (*(_DWORD *)a3 != v42)
                {
LABEL_49:
                  *int v29 = v39;
                  if (v43 != v42)
                  {
                    *(void *)(a3 + 16) = v58;
                    *(_DWORD *)(a3 + 24) = v59;
                    *(_DWORD *)a3 = v43 ^ v42;
                  }
                  else
                  {
                    *(_DWORD *)a3 = 0;
                  }
                  goto LABEL_52;
                }
LABEL_46:
                *int v29 = v39;
                if (v43 != v42)
                {
                  *(void *)(a3 + 16) = v58;
                  *(_DWORD *)(a3 + 24) = v59;
                }
LABEL_52:
                int v47 = sub_100276B54(*a6, a2);
                uint64_t result = sub_100276B54(*a6, a1);
                if (v47 >= (int)result) {
                  return result;
                }
                int v48 = *(_DWORD *)a1;
                int v49 = *(int *)a1 >> 31;
                long long v51 = (void *)(a1 + 8);
                uint64_t v50 = *(void *)(a1 + 8);
                if (v49 == *(_DWORD *)a1)
                {
                  int v52 = *(_DWORD *)a2;
                  if (v48 == *(_DWORD *)a2)
                  {
                    int v53 = 0;
                    *long long v51 = *v40;
                    goto LABEL_62;
                  }
                  int v53 = 0;
                }
                else
                {
                  uint64_t v58 = *(void *)(a1 + 16);
                  int v59 = *(_DWORD *)(a1 + 24);
                  int v53 = v49 ^ v48;
                  int v52 = *(_DWORD *)a2;
                  if (v48 == *(_DWORD *)a2)
                  {
                    long long v54 = *(_OWORD *)v40;
                    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
                    *(_OWORD *)long long v51 = v54;
LABEL_62:
                    int v57 = v53 >> 31;
                    if (*(_DWORD *)a2 == v53)
                    {
                      void *v40 = v50;
                      if (v57 != v53)
                      {
                        *(void *)(a2 + 16) = v58;
                        *(_DWORD *)(a2 + 24) = v59;
                      }
                    }
                    else
                    {
                      void *v40 = v50;
                      if (v57 != v53)
                      {
                        *(void *)(a2 + 16) = v58;
                        *(_DWORD *)(a2 + 24) = v59;
                        *(_DWORD *)a2 = v57 ^ v53;
                      }
                      else
                      {
                        *(_DWORD *)a2 = 0;
                      }
                    }
                    return result;
                  }
                }
                int v55 = v52 ^ (v52 >> 31);
                if (v55)
                {
                  long long v56 = *(_OWORD *)v40;
                  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
                  *(_OWORD *)long long v51 = v56;
                  *(_DWORD *)a1 = v55;
                }
                else
                {
                  *(void *)(a1 + 8) = *v40;
                  *(_DWORD *)a1 = 0;
                }
                goto LABEL_62;
              }
            }
            int v45 = v41 ^ (v41 >> 31);
            if (v45)
            {
              long long v46 = *(_OWORD *)v29;
              *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
              *(_OWORD *)unint64_t v40 = v46;
              *(_DWORD *)a2 = v45;
              int v43 = v42 >> 31;
              if (*(_DWORD *)a3 != v42) {
                goto LABEL_49;
              }
            }
            else
            {
              *(void *)(a2 + 8) = *v29;
              *(_DWORD *)a2 = 0;
              int v43 = v42 >> 31;
              if (*(_DWORD *)a3 != v42) {
                goto LABEL_49;
              }
            }
            goto LABEL_46;
          }
        }
        int v34 = v30 ^ (v30 >> 31);
        if (v34)
        {
          long long v35 = *(_OWORD *)v17;
          *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
          *(_OWORD *)int v29 = v35;
          *(_DWORD *)a3 = v34;
          int v32 = v31 >> 31;
          if (*(_DWORD *)a4 != v31) {
            goto LABEL_32;
          }
        }
        else
        {
          *(void *)(a3 + 8) = *v17;
          *(_DWORD *)a3 = 0;
          int v32 = v31 >> 31;
          if (*(_DWORD *)a4 != v31) {
            goto LABEL_32;
          }
        }
        goto LABEL_29;
      }
    }
    int v22 = v18 ^ (v18 >> 31);
    int v23 = (long long *)(a5 + 8);
    if (v22)
    {
      long long v24 = *v23;
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
      *(_OWORD *)uint64_t v17 = v24;
      *(_DWORD *)a4 = v22;
      int v20 = v19 >> 31;
      if (*(_DWORD *)a5 != v19) {
        goto LABEL_15;
      }
    }
    else
    {
      *(void *)(a4 + 8) = *(void *)v23;
      *(_DWORD *)a4 = 0;
      int v20 = v19 >> 31;
      if (*(_DWORD *)a5 != v19) {
        goto LABEL_15;
      }
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10027F170(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int ***a4)
{
  int v8 = sub_100276B54(*a4, a2);
  int v9 = sub_100276B54(*a4, a1);
  int v10 = sub_100276B54(*a4, a3);
  uint64_t result = sub_100276B54(*a4, a2);
  if (v8 < v9)
  {
    int v12 = (void *)(a1 + 8);
    if (v10 < (int)result)
    {
      int v13 = *(_DWORD *)a1;
      int v14 = *(int *)a1 >> 31;
      uint64_t v15 = *(void *)(a1 + 8);
      if (v14 == *(_DWORD *)a1)
      {
        int v16 = *(_DWORD *)a3;
        if (v13 == *(_DWORD *)a3)
        {
          int v17 = 0;
          *int v12 = *(void *)(a3 + 8);
          int v18 = 0;
          if (*(_DWORD *)a3) {
            goto LABEL_18;
          }
          goto LABEL_31;
        }
        int v17 = 0;
      }
      else
      {
        uint64_t v69 = *(void *)(a1 + 16);
        int v70 = *(_DWORD *)(a1 + 24);
        int v17 = v14 ^ v13;
        int v16 = *(_DWORD *)a3;
        if (v13 == *(_DWORD *)a3)
        {
          long long v32 = *(_OWORD *)(a3 + 8);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 24);
          *(_OWORD *)int v12 = v32;
          int v18 = v17 >> 31;
          if (*(_DWORD *)a3 != v17) {
            goto LABEL_18;
          }
          goto LABEL_31;
        }
      }
      int v37 = v16 ^ (v16 >> 31);
      int v38 = (long long *)(a3 + 8);
      if (v37)
      {
        long long v39 = *v38;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)int v12 = v39;
        *(_DWORD *)a1 = v37;
        int v18 = v17 >> 31;
        if (*(_DWORD *)a3 != v17) {
          goto LABEL_18;
        }
      }
      else
      {
        *(void *)(a1 + 8) = *(void *)v38;
        *(_DWORD *)a1 = 0;
        int v18 = v17 >> 31;
        if (*(_DWORD *)a3 != v17)
        {
LABEL_18:
          *(void *)(a3 + 8) = v15;
          int v33 = v18 ^ v17;
          if (v33)
          {
LABEL_19:
            *(void *)(a3 + 16) = v69;
            *(_DWORD *)(a3 + 24) = v70;
            *(_DWORD *)a3 = v33;
            return result;
          }
          goto LABEL_62;
        }
      }
LABEL_31:
      *(void *)(a3 + 8) = v15;
      if (v18 == v17) {
        return result;
      }
LABEL_78:
      *(void *)(a3 + 16) = v69;
      *(_DWORD *)(a3 + 24) = v70;
      return result;
    }
    int v26 = *(_DWORD *)a1;
    int v27 = *(int *)a1 >> 31;
    uint64_t v28 = *(void *)(a1 + 8);
    if (v27 == *(_DWORD *)a1)
    {
      int v29 = *(_DWORD *)a2;
      if (v26 == *(_DWORD *)a2)
      {
        int v30 = 0;
        *int v12 = *(void *)(a2 + 8);
        int v31 = 0;
        if (*(_DWORD *)a2) {
          goto LABEL_26;
        }
        goto LABEL_41;
      }
      int v30 = 0;
    }
    else
    {
      uint64_t v69 = *(void *)(a1 + 16);
      int v70 = *(_DWORD *)(a1 + 24);
      int v30 = v27 ^ v26;
      int v29 = *(_DWORD *)a2;
      if (v26 == *(_DWORD *)a2)
      {
        long long v35 = *(_OWORD *)(a2 + 8);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_OWORD *)int v12 = v35;
        int v31 = v30 >> 31;
        if (*(_DWORD *)a2 != v30) {
          goto LABEL_26;
        }
        goto LABEL_41;
      }
    }
    int v43 = v29 ^ (v29 >> 31);
    long long v44 = (long long *)(a2 + 8);
    if (v43)
    {
      long long v45 = *v44;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)int v12 = v45;
      *(_DWORD *)a1 = v43;
      int v31 = v30 >> 31;
      if (*(_DWORD *)a2 != v30) {
        goto LABEL_26;
      }
    }
    else
    {
      *(void *)(a1 + 8) = *(void *)v44;
      *(_DWORD *)a1 = 0;
      int v31 = v30 >> 31;
      if (*(_DWORD *)a2 != v30)
      {
LABEL_26:
        *(void *)(a2 + 8) = v28;
        int v36 = v31 ^ v30;
        if (v36)
        {
          *(void *)(a2 + 16) = v69;
          *(_DWORD *)(a2 + 24) = v70;
          *(_DWORD *)a2 = v36;
        }
        else
        {
          *(_DWORD *)a2 = 0;
        }
        goto LABEL_54;
      }
    }
LABEL_41:
    *(void *)(a2 + 8) = v28;
    if (v31 != v30)
    {
      *(void *)(a2 + 16) = v69;
      *(_DWORD *)(a2 + 24) = v70;
    }
LABEL_54:
    int v55 = sub_100276B54(*a4, a3);
    uint64_t result = sub_100276B54(*a4, a2);
    if (v55 >= (int)result) {
      return result;
    }
    int v56 = *(_DWORD *)a2;
    int v57 = *(int *)a2 >> 31;
    int v59 = (void *)(a2 + 8);
    uint64_t v58 = *(void *)(a2 + 8);
    if (v57 == *(_DWORD *)a2)
    {
      int v60 = *(_DWORD *)a3;
      if (v56 == *(_DWORD *)a3)
      {
        int v61 = 0;
        *int v59 = *(void *)(a3 + 8);
        int v62 = 0;
        if (*(_DWORD *)a3) {
          goto LABEL_61;
        }
        goto LABEL_77;
      }
      int v61 = 0;
    }
    else
    {
      uint64_t v69 = *(void *)(a2 + 16);
      int v70 = *(_DWORD *)(a2 + 24);
      int v61 = v57 ^ v56;
      int v60 = *(_DWORD *)a3;
      if (v56 == *(_DWORD *)a3)
      {
        long long v63 = *(_OWORD *)(a3 + 8);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)int v59 = v63;
        int v62 = v61 >> 31;
        if (*(_DWORD *)a3 != v61) {
          goto LABEL_61;
        }
        goto LABEL_77;
      }
    }
    int v66 = v60 ^ (v60 >> 31);
    BOOL v67 = (long long *)(a3 + 8);
    if (v66)
    {
      long long v68 = *v67;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)int v59 = v68;
      *(_DWORD *)a2 = v66;
      int v62 = v61 >> 31;
      if (*(_DWORD *)a3 != v61) {
        goto LABEL_61;
      }
    }
    else
    {
      *(void *)(a2 + 8) = *(void *)v67;
      *(_DWORD *)a2 = 0;
      int v62 = v61 >> 31;
      if (*(_DWORD *)a3 != v61)
      {
LABEL_61:
        *(void *)(a3 + 8) = v58;
        int v33 = v62 ^ v61;
        if (v62 != v61) {
          goto LABEL_19;
        }
LABEL_62:
        *(_DWORD *)a3 = 0;
        return result;
      }
    }
LABEL_77:
    *(void *)(a3 + 8) = v58;
    if (v62 == v61) {
      return result;
    }
    goto LABEL_78;
  }
  if (v10 >= (int)result) {
    return result;
  }
  int v19 = *(_DWORD *)a2;
  int v20 = *(int *)a2 >> 31;
  int v22 = (void *)(a2 + 8);
  uint64_t v21 = *(void *)(a2 + 8);
  if (v20 == *(_DWORD *)a2)
  {
    int v23 = *(_DWORD *)a3;
    if (v19 == *(_DWORD *)a3)
    {
      int v24 = 0;
      *int v22 = *(void *)(a3 + 8);
      int v25 = 0;
      if (*(_DWORD *)a3) {
        goto LABEL_22;
      }
      goto LABEL_36;
    }
    int v24 = 0;
  }
  else
  {
    uint64_t v69 = *(void *)(a2 + 16);
    int v70 = *(_DWORD *)(a2 + 24);
    int v24 = v20 ^ v19;
    int v23 = *(_DWORD *)a3;
    if (v19 == *(_DWORD *)a3)
    {
      long long v34 = *(_OWORD *)(a3 + 8);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)int v22 = v34;
      int v25 = v24 >> 31;
      if (*(_DWORD *)a3 != v24) {
        goto LABEL_22;
      }
      goto LABEL_36;
    }
  }
  int v40 = v23 ^ (v23 >> 31);
  int v41 = (long long *)(a3 + 8);
  if (v40)
  {
    long long v42 = *v41;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
    *(_OWORD *)int v22 = v42;
    *(_DWORD *)a2 = v40;
    int v25 = v24 >> 31;
    if (*(_DWORD *)a3 != v24) {
      goto LABEL_22;
    }
  }
  else
  {
    *(void *)(a2 + 8) = *(void *)v41;
    *(_DWORD *)a2 = 0;
    int v25 = v24 >> 31;
    if (*(_DWORD *)a3 != v24)
    {
LABEL_22:
      *(void *)(a3 + 8) = v21;
      if (v25 != v24)
      {
        *(void *)(a3 + 16) = v69;
        *(_DWORD *)(a3 + 24) = v70;
        *(_DWORD *)a3 = v25 ^ v24;
      }
      else
      {
        *(_DWORD *)a3 = 0;
      }
      goto LABEL_44;
    }
  }
LABEL_36:
  *(void *)(a3 + 8) = v21;
  if (v25 != v24)
  {
    *(void *)(a3 + 16) = v69;
    *(_DWORD *)(a3 + 24) = v70;
  }
LABEL_44:
  int v46 = sub_100276B54(*a4, a2);
  uint64_t result = sub_100276B54(*a4, a1);
  if (v46 >= (int)result) {
    return result;
  }
  int v47 = *(_DWORD *)a1;
  int v48 = *(int *)a1 >> 31;
  uint64_t v50 = (void *)(a1 + 8);
  uint64_t v49 = *(void *)(a1 + 8);
  if (v48 == *(_DWORD *)a1)
  {
    int v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      int v52 = 0;
      void *v50 = *v22;
      int v53 = 0;
      if (*(_DWORD *)a2) {
        goto LABEL_51;
      }
      goto LABEL_72;
    }
    int v52 = 0;
  }
  else
  {
    uint64_t v69 = *(void *)(a1 + 16);
    int v70 = *(_DWORD *)(a1 + 24);
    int v52 = v48 ^ v47;
    int v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      long long v54 = *(_OWORD *)v22;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)uint64_t v50 = v54;
      int v53 = v52 >> 31;
      if (*(_DWORD *)a2 != v52) {
        goto LABEL_51;
      }
      goto LABEL_72;
    }
  }
  int v64 = v51 ^ (v51 >> 31);
  if (v64)
  {
    long long v65 = *(_OWORD *)v22;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)uint64_t v50 = v65;
    *(_DWORD *)a1 = v64;
    int v53 = v52 >> 31;
    if (*(_DWORD *)a2 != v52) {
      goto LABEL_51;
    }
  }
  else
  {
    *(void *)(a1 + 8) = *v22;
    *(_DWORD *)a1 = 0;
    int v53 = v52 >> 31;
    if (*(_DWORD *)a2 != v52)
    {
LABEL_51:
      *int v22 = v49;
      if (v53 != v52)
      {
        *(void *)(a2 + 16) = v69;
        *(_DWORD *)(a2 + 24) = v70;
        *(_DWORD *)a2 = v53 ^ v52;
      }
      else
      {
        *(_DWORD *)a2 = 0;
      }
      return result;
    }
  }
LABEL_72:
  *int v22 = v49;
  if (v53 != v52)
  {
    *(void *)(a2 + 16) = v69;
    *(_DWORD *)(a2 + 24) = v70;
  }
  return result;
}

BOOL sub_10027F864(uint64_t a1, _DWORD *a2, unsigned int ***a3)
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 5;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 8;
      int v9 = sub_100276B54(*a3, (uint64_t)(a2 - 8));
      if (v9 >= (int)sub_100276B54(*a3, a1)) {
        return 1;
      }
      int v10 = *(_DWORD *)a1;
      int v11 = *(int *)a1 >> 31;
      int v13 = (void *)(a1 + 8);
      uint64_t v12 = *(void *)(a1 + 8);
      if (v11 == *(_DWORD *)a1)
      {
        int v14 = *v8;
        if (v10 == *v8)
        {
          int v15 = 0;
          *int v13 = *((void *)a2 - 3);
          int v16 = 0;
          if (*v8) {
            goto LABEL_49;
          }
LABEL_46:
          *((void *)a2 - 3) = v12;
          if (v16 != v15)
          {
            *((void *)a2 - 2) = v45;
            *(a2 - 2) = v46;
          }
          return 1;
        }
        int v15 = 0;
      }
      else
      {
        uint64_t v45 = *(void *)(a1 + 16);
        LODWORD(v46) = *(_DWORD *)(a1 + 24);
        int v15 = v11 ^ v10;
        int v14 = *v8;
        if (v10 == *v8)
        {
          long long v41 = *(_OWORD *)(a2 - 6);
          *(_DWORD *)(a1 + 24) = *(a2 - 2);
          *(_OWORD *)int v13 = v41;
          int v16 = v15 >> 31;
          if (*v8 != v15)
          {
LABEL_49:
            *((void *)a2 - 3) = v12;
            if (v16 != v15)
            {
              *((void *)a2 - 2) = v45;
              *(a2 - 2) = v46;
              *(a2 - 8) = v16 ^ v15;
            }
            else
            {
              *int v8 = 0;
            }
            return 1;
          }
          goto LABEL_46;
        }
      }
      int v42 = v14 ^ (v14 >> 31);
      int v43 = (long long *)(a2 - 6);
      if (v42)
      {
        long long v44 = *v43;
        *(_DWORD *)(a1 + 24) = *(a2 - 2);
        *(_OWORD *)int v13 = v44;
        *(_DWORD *)a1 = v42;
        int v16 = v15 >> 31;
        if (*v8 != v15) {
          goto LABEL_49;
        }
      }
      else
      {
        *(void *)(a1 + 8) = *(void *)v43;
        *(_DWORD *)a1 = 0;
        int v16 = v15 >> 31;
        if (*v8 != v15) {
          goto LABEL_49;
        }
      }
      goto LABEL_46;
    case 3:
      sub_10027F170(a1, a1 + 32, (uint64_t)(a2 - 8), a3);
      return 1;
    case 4:
      sub_10027FCFC(a1, a1 + 32, a1 + 64, (uint64_t)(a2 - 8), a3);
      return 1;
    case 5:
      sub_10027EC10(a1, a1 + 32, a1 + 64, a1 + 96, (uint64_t)(a2 - 8), a3);
      return 1;
    default:
      uint64_t v17 = a1 + 64;
      sub_10027F170(a1, a1 + 32, a1 + 64, a3);
      int v18 = (_DWORD *)(a1 + 96);
      if ((_DWORD *)(a1 + 96) == a2) {
        return 1;
      }
      uint64_t v19 = 0;
      int v20 = 0;
      while (2)
      {
        int v21 = sub_100276B54(*a3, (uint64_t)v18);
        if (v21 >= (int)sub_100276B54(*a3, v17)) {
          goto LABEL_11;
        }
        int v23 = v18 + 2;
        int v22 = *v18;
        int v24 = (int)*v18 >> 31;
        if (v22 >> 31 == v22)
        {
          *(void *)&long long v46 = *v23;
          int v24 = v22;
        }
        else
        {
          long long v46 = *(_OWORD *)v23;
          int v47 = v18[6];
        }
        LODWORD(v45) = v24 ^ v22;
        uint64_t v25 = v19;
        while (2)
        {
          int v26 = (_DWORD *)(a1 + v25);
          int v27 = *(_DWORD *)(a1 + v25 + 96);
          int v28 = *(_DWORD *)(a1 + v25 + 64);
          if (v27 == v28)
          {
            int v29 = v26 + 18;
            int v30 = v26 + 26;
            if (v27 == v27 >> 31)
            {
              *(void *)int v30 = *(void *)v29;
              if (v25 == -64) {
                goto LABEL_31;
              }
            }
            else
            {
              *(_OWORD *)int v30 = *(_OWORD *)v29;
              v30[4] = v29[4];
              if (v25 == -64) {
                goto LABEL_31;
              }
            }
LABEL_27:
            int v34 = sub_100276B54(*a3, (uint64_t)&v45);
            int v35 = sub_100276B54(*a3, a1 + v25 + 32);
            v25 -= 32;
            if (v34 >= v35)
            {
              uint64_t v36 = a1 + v25 + 96;
              int v37 = *(_DWORD *)v36;
              int v38 = v45;
              if (*(_DWORD *)v36 != v45) {
                goto LABEL_29;
              }
LABEL_32:
              uint64_t v40 = v36 + 8;
              if (v37 == v37 >> 31)
              {
                *(void *)uint64_t v40 = v46;
              }
              else
              {
                *(_OWORD *)uint64_t v40 = v46;
                *(_DWORD *)(v40 + 16) = v47;
              }
              goto LABEL_10;
            }
            continue;
          }
          break;
        }
        int v31 = v28 ^ (v28 >> 31);
        long long v32 = v26 + 18;
        int v33 = v26 + 26;
        if (v31)
        {
          *int v33 = *v32;
          v26[30] = v26[22];
          v26[24] = v31;
          if (v25 == -64) {
            goto LABEL_31;
          }
          goto LABEL_27;
        }
        *(void *)int v33 = *(void *)v32;
        v26[24] = 0;
        if (v25 != -64) {
          goto LABEL_27;
        }
LABEL_31:
        uint64_t v36 = a1;
        int v37 = *(_DWORD *)a1;
        int v38 = v45;
        if (*(_DWORD *)a1 == v45) {
          goto LABEL_32;
        }
LABEL_29:
        int v39 = v38 ^ (v38 >> 31);
        if (v39)
        {
          *(_OWORD *)(v36 + 8) = v46;
          *(_DWORD *)(v36 + 24) = v47;
          *(_DWORD *)uint64_t v36 = v39;
        }
        else
        {
          *(void *)(v36 + 8) = v46;
          *(_DWORD *)uint64_t v36 = 0;
        }
LABEL_10:
        if (++v20 != 8)
        {
LABEL_11:
          uint64_t v17 = (uint64_t)v18;
          v19 += 32;
          v18 += 8;
          if (v18 != a2) {
            continue;
          }
          return 1;
        }
        return v18 + 8 == a2;
      }
  }
}

uint64_t sub_10027FCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int ***a5)
{
  sub_10027F170(a1, a2, a3, a5);
  int v10 = sub_100276B54(*a5, a4);
  uint64_t result = sub_100276B54(*a5, a3);
  if (v10 >= (int)result) {
    return result;
  }
  int v12 = *(_DWORD *)a3;
  int v13 = *(int *)a3 >> 31;
  int v15 = (void *)(a3 + 8);
  uint64_t v14 = *(void *)(a3 + 8);
  if (v13 == *(_DWORD *)a3)
  {
    int v16 = *(_DWORD *)a4;
    if (v12 == *(_DWORD *)a4)
    {
      int v17 = 0;
      *int v15 = *(void *)(a4 + 8);
      int v18 = 0;
      if (*(_DWORD *)a4) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
    int v17 = 0;
LABEL_10:
    int v20 = v16 ^ (v16 >> 31);
    int v21 = (long long *)(a4 + 8);
    if (v20)
    {
      long long v22 = *v21;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_OWORD *)int v15 = v22;
      *(_DWORD *)a3 = v20;
      int v18 = v17 >> 31;
      if (*(_DWORD *)a4 != v17) {
        goto LABEL_15;
      }
    }
    else
    {
      *(void *)(a3 + 8) = *(void *)v21;
      *(_DWORD *)a3 = 0;
      int v18 = v17 >> 31;
      if (*(_DWORD *)a4 != v17) {
        goto LABEL_15;
      }
    }
    goto LABEL_12;
  }
  uint64_t v45 = *(void *)(a3 + 16);
  int v46 = *(_DWORD *)(a3 + 24);
  int v17 = v13 ^ v12;
  int v16 = *(_DWORD *)a4;
  if (v12 != *(_DWORD *)a4) {
    goto LABEL_10;
  }
  long long v19 = *(_OWORD *)(a4 + 8);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
  *(_OWORD *)int v15 = v19;
  int v18 = v17 >> 31;
  if (*(_DWORD *)a4 != v17)
  {
LABEL_15:
    *(void *)(a4 + 8) = v14;
    if (v18 != v17)
    {
      *(void *)(a4 + 16) = v45;
      *(_DWORD *)(a4 + 24) = v46;
      *(_DWORD *)a4 = v18 ^ v17;
    }
    else
    {
      *(_DWORD *)a4 = 0;
    }
    goto LABEL_18;
  }
LABEL_12:
  *(void *)(a4 + 8) = v14;
  if (v18 != v17)
  {
    *(void *)(a4 + 16) = v45;
    *(_DWORD *)(a4 + 24) = v46;
  }
LABEL_18:
  int v23 = sub_100276B54(*a5, a3);
  uint64_t result = sub_100276B54(*a5, a2);
  if (v23 >= (int)result) {
    return result;
  }
  int v24 = *(_DWORD *)a2;
  int v25 = *(int *)a2 >> 31;
  int v27 = (void *)(a2 + 8);
  uint64_t v26 = *(void *)(a2 + 8);
  if (v25 == *(_DWORD *)a2)
  {
    int v28 = *(_DWORD *)a3;
    if (v24 == *(_DWORD *)a3)
    {
      int v29 = 0;
      *int v27 = *v15;
      int v30 = 0;
      if (*(_DWORD *)a3) {
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    int v29 = 0;
LABEL_27:
    int v32 = v28 ^ (v28 >> 31);
    if (v32)
    {
      long long v33 = *(_OWORD *)v15;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)int v27 = v33;
      *(_DWORD *)a2 = v32;
      int v30 = v29 >> 31;
      if (*(_DWORD *)a3 != v29) {
        goto LABEL_32;
      }
    }
    else
    {
      *(void *)(a2 + 8) = *v15;
      *(_DWORD *)a2 = 0;
      int v30 = v29 >> 31;
      if (*(_DWORD *)a3 != v29) {
        goto LABEL_32;
      }
    }
    goto LABEL_29;
  }
  uint64_t v45 = *(void *)(a2 + 16);
  int v46 = *(_DWORD *)(a2 + 24);
  int v29 = v25 ^ v24;
  int v28 = *(_DWORD *)a3;
  if (v24 != *(_DWORD *)a3) {
    goto LABEL_27;
  }
  long long v31 = *(_OWORD *)v15;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
  *(_OWORD *)int v27 = v31;
  int v30 = v29 >> 31;
  if (*(_DWORD *)a3 != v29)
  {
LABEL_32:
    *int v15 = v26;
    if (v30 != v29)
    {
      *(void *)(a3 + 16) = v45;
      *(_DWORD *)(a3 + 24) = v46;
      *(_DWORD *)a3 = v30 ^ v29;
    }
    else
    {
      *(_DWORD *)a3 = 0;
    }
    goto LABEL_35;
  }
LABEL_29:
  *int v15 = v26;
  if (v30 != v29)
  {
    *(void *)(a3 + 16) = v45;
    *(_DWORD *)(a3 + 24) = v46;
  }
LABEL_35:
  int v34 = sub_100276B54(*a5, a2);
  uint64_t result = sub_100276B54(*a5, a1);
  if (v34 >= (int)result) {
    return result;
  }
  int v35 = *(_DWORD *)a1;
  int v36 = *(int *)a1 >> 31;
  int v38 = (void *)(a1 + 8);
  uint64_t v37 = *(void *)(a1 + 8);
  if (v36 == *(_DWORD *)a1)
  {
    int v39 = *(_DWORD *)a2;
    if (v35 == *(_DWORD *)a2)
    {
      int v40 = 0;
      *int v38 = *v27;
      int v41 = 0;
      if (*(_DWORD *)a2) {
        goto LABEL_49;
      }
      goto LABEL_46;
    }
    int v40 = 0;
  }
  else
  {
    uint64_t v45 = *(void *)(a1 + 16);
    int v46 = *(_DWORD *)(a1 + 24);
    int v40 = v36 ^ v35;
    int v39 = *(_DWORD *)a2;
    if (v35 == *(_DWORD *)a2)
    {
      long long v42 = *(_OWORD *)v27;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)int v38 = v42;
      int v41 = v40 >> 31;
      if (*(_DWORD *)a2 != v40)
      {
LABEL_49:
        *int v27 = v37;
        if (v41 != v40)
        {
          *(void *)(a2 + 16) = v45;
          *(_DWORD *)(a2 + 24) = v46;
          *(_DWORD *)a2 = v41 ^ v40;
        }
        else
        {
          *(_DWORD *)a2 = 0;
        }
        return result;
      }
      goto LABEL_46;
    }
  }
  int v43 = v39 ^ (v39 >> 31);
  if (v43)
  {
    long long v44 = *(_OWORD *)v27;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)int v38 = v44;
    *(_DWORD *)a1 = v43;
    int v41 = v40 >> 31;
    if (*(_DWORD *)a2 != v40) {
      goto LABEL_49;
    }
  }
  else
  {
    *(void *)(a1 + 8) = *v27;
    *(_DWORD *)a1 = 0;
    int v41 = v40 >> 31;
    if (*(_DWORD *)a2 != v40) {
      goto LABEL_49;
    }
  }
LABEL_46:
  *int v27 = v37;
  if (v41 != v40)
  {
    *(void *)(a2 + 16) = v45;
    *(_DWORD *)(a2 + 24) = v46;
  }
  return result;
}

unsigned int *sub_10028013C(int *a1, int *a2)
{
  if (a1 == a2 || a1 + 8 == a2) {
    return (unsigned int *)a2;
  }
  uint64_t v2 = 0;
  int v3 = *a1;
  while (1)
  {
    unint64_t v4 = &a1[v2];
    int v5 = v3 ^ (v3 >> 31);
    int v3 = a1[v2 + 8];
    if (v5 == ((v3 >> 31) ^ v3))
    {
      if (v3 >> 31 == v3)
      {
        if (*((void *)v4 + 1) == *((void *)v4 + 5)) {
          break;
        }
        goto LABEL_5;
      }
      uint64_t v6 = *((void *)v4 + 1);
      uint64_t v7 = *((void *)v4 + 2);
      uint64_t v8 = *((void *)v4 + 5);
      uint64_t v9 = *((void *)v4 + 6);
      uint64_t v10 = v4[6];
      uint64_t v11 = v4[14];
      BOOL v12 = v6 == v8 && v7 == v9;
      if (v12 && v10 == v11) {
        break;
      }
    }
LABEL_5:
    v2 += 8;
    if (&a1[v2 + 8] == a2) {
      return (unsigned int *)a2;
    }
  }
  uint64_t result = (unsigned int *)&a1[v2];
  if (result != (unsigned int *)a2)
  {
    if (result + 16 != (unsigned int *)a2)
    {
      int v15 = result + 18;
      uint64_t v16 = *result;
      while (1)
      {
        uint64_t v17 = *(v15 - 2);
        int v20 = (int)v17 >> 31;
        unsigned int v21 = ((int)v17 >> 31) ^ v17;
        if ((v16 ^ ((int)v16 >> 31)) != v21) {
          break;
        }
        if (v20 == v17)
        {
          if (*((void *)result + 1) != *(void *)v15) {
            break;
          }
        }
        else if (*((void *)result + 1) != *(void *)v15 {
               || *((void *)result + 2) != *((void *)v15 + 1)
        }
               || result[6] != (unint64_t)v15[4])
        {
          break;
        }
        uint64_t v17 = v16;
        int v18 = result;
LABEL_21:
        long long v19 = v15 + 6;
        v15 += 8;
        uint64_t v16 = v17;
        uint64_t result = v18;
        if (v19 == (unsigned int *)a2) {
          return v18 + 8;
        }
      }
      int v18 = result + 8;
      if (result[8] == v17)
      {
        int v24 = result + 10;
        if (v20 == v17)
        {
          *int v24 = *(void *)v15;
        }
        else
        {
          long long v27 = *(_OWORD *)v15;
          result[14] = v15[4];
          *(_OWORD *)int v24 = v27;
        }
      }
      else
      {
        int v25 = result + 10;
        if (v21)
        {
          long long v26 = *(_OWORD *)v15;
          result[14] = v15[4];
          *int v25 = v26;
          *int v18 = v21;
          uint64_t v17 = v20 ^ v17;
        }
        else
        {
          uint64_t v17 = 0;
          *(void *)int v25 = *(void *)v15;
          *int v18 = 0;
        }
      }
      goto LABEL_21;
    }
    result += 8;
  }
  return result;
}

void sub_1002802F0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002802F0(a1, *a2);
    sub_1002802F0(a1, a2[1]);
    unint64_t v4 = (std::__shared_weak_count *)a2[9];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      int v5 = a2;
    }
    else
    {
      int v5 = a2;
    }
    operator delete(v5);
  }
}

std::string *sub_1002803AC@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002803E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002803FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100463218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10028041C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100463218;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100280470(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t *sub_1002804F0(uint64_t a1, void *a2, int *a3)
{
  int v5 = (uint64_t *)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = (unsigned __int8 *)(a3 + 2);
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        int v9 = *((_DWORD *)v4 + 8);
        int v10 = v9 >> 31;
        uint64_t v11 = v8 + 5;
        if (v9 >> 31 == v9)
        {
          *(void *)&long long v19 = *v11;
          int v10 = v9;
        }
        else
        {
          long long v19 = *(_OWORD *)v11;
          int v20 = *((_DWORD *)v8 + 14);
        }
        int v12 = v10 ^ v9;
        int v13 = *a3;
        int v14 = *a3 >> 31;
        int v15 = v12 >> 31;
        if (v14 == *a3) {
          break;
        }
        if (v15 == v12) {
          goto LABEL_14;
        }
        if (!sub_1001E6FAC(v7, (unsigned __int8 *)&v19))
        {
          int v13 = *a3;
          int v14 = *a3 >> 31;
          goto LABEL_14;
        }
LABEL_3:
        unint64_t v4 = (uint64_t *)*v8;
        int v5 = v8;
        if (!*v8) {
          goto LABEL_25;
        }
      }
      if (v15 != v12 || *(void *)v7 < (unint64_t)v19) {
        goto LABEL_3;
      }
LABEL_14:
      if (v14 == v13)
      {
        *(void *)&long long v19 = *(void *)v7;
        int v16 = 0;
        int v17 = 0;
        if (*((_DWORD *)v8 + 8) != *((int *)v8 + 8) >> 31) {
          goto LABEL_16;
        }
      }
      else
      {
        long long v19 = *(_OWORD *)v7;
        int v20 = *((_DWORD *)v7 + 4);
        int v16 = v14 ^ v13;
        int v17 = v16 >> 31;
        if (*((_DWORD *)v8 + 8) != *((int *)v8 + 8) >> 31)
        {
LABEL_16:
          if (v17 == v16 || !sub_1001E6FAC((unsigned __int8 *)v8 + 40, (unsigned __int8 *)&v19)) {
            goto LABEL_25;
          }
          goto LABEL_22;
        }
      }
      if (v17 == v16 && *v11 >= (unint64_t)v19) {
        goto LABEL_25;
      }
LABEL_22:
      int v5 = v8 + 1;
      unint64_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_25:
  *a2 = v8;
  return v5;
}

uint64_t *sub_1002806C0(uint64_t a1, int *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  int v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v5 = (unsigned __int8 *)(a2 + 2);
  uint64_t v6 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      int v7 = *a2;
      int v8 = *a2 >> 31;
      if (v7 >> 31 == v7)
      {
        *(void *)&long long v17 = *(void *)v5;
        int v8 = v7;
      }
      else
      {
        long long v17 = *(_OWORD *)v5;
        int v18 = *((_DWORD *)v5 + 4);
      }
      int v9 = v8 ^ v7;
      int v10 = (unsigned __int8 *)(v3 + 5);
      int v11 = v9 >> 31;
      if (*((_DWORD *)v3 + 8) != *((int *)v3 + 8) >> 31) {
        break;
      }
      if (v11 == v9 && *(void *)v10 >= (unint64_t)v17) {
        goto LABEL_13;
      }
LABEL_3:
      int v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_14;
      }
    }
    if (v11 != v9 && sub_1001E6FAC(v10, (unsigned __int8 *)&v17)) {
      goto LABEL_3;
    }
LABEL_13:
    uint64_t v6 = v3;
    int v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_14:
  if (v6 == v2) {
    return v2;
  }
  int v12 = *((_DWORD *)v6 + 8);
  int v13 = v6 + 5;
  if (v12 >> 31 == v12)
  {
    *(void *)&long long v17 = *v13;
    int v14 = 0;
    int v15 = 0;
    if (*a2 != *a2 >> 31)
    {
LABEL_17:
      if (v15 == v14 || !sub_1001E6FAC(v5, (unsigned __int8 *)&v17)) {
        return v6;
      }
      return v2;
    }
  }
  else
  {
    long long v17 = *(_OWORD *)v13;
    int v18 = *((_DWORD *)v6 + 14);
    int v14 = (v12 >> 31) ^ v12;
    int v15 = v14 >> 31;
    if (*a2 != *a2 >> 31) {
      goto LABEL_17;
    }
  }
  if (v15 != v14 || *(void *)v5 < (unint64_t)v17) {
    return v2;
  }
  return v6;
}

void sub_100280884()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002808FC()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_100280974(uint64_t a1)
{
  *(void *)a1 = off_100463268;
  std::mutex::~mutex((std::mutex *)(a1 + 224));
  uint64_t v2 = *(void *)(a1 + 200);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 208);
    unint64_t v4 = *(void **)(a1 + 200);
    if (v3 != v2)
    {
      do
      {
        int v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      unint64_t v4 = *(void **)(a1 + 200);
    }
    *(void *)(a1 + 208) = v2;
    operator delete(v4);
  }
  if (*(unsigned char *)(a1 + 160)) {
    *(unsigned char *)(a1 + 16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 136);
  if (v6)
  {
    *(void *)(a1 + 144) = v6;
    operator delete(v6);
  }
  int v7 = *(std::__shared_weak_count **)(a1 + 128);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 96)) {
LABEL_16:
  }
    *(unsigned char *)(a1 + 96) = 0;
LABEL_17:
  int v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    int v9 = *(uint64_t **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v9)
    {
LABEL_20:
      sub_1000D6DB4(v9);
      operator delete();
    }
  }
  else
  {
    int v9 = *(uint64_t **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v9) {
      goto LABEL_20;
    }
  }
  uint64_t v10 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v10) {
    sub_100281618(a1 + 64, v10);
  }
  int v11 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v11 || atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_100280B70(uint64_t a1)
{
  sub_100280974(a1);

  operator delete();
}

void sub_100280BA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1003A296C(*(void *)(a1 + 48));
  if (v4)
  {
    uint64_t v5 = *a2;
    if (!*(unsigned char *)(a1 + 96))
    {
      *(unsigned char *)(a1 + 96) = 1;
      *(void *)(a1 + 104) = v5;
      return;
    }
    uint64_t v6 = *(void *)(a1 + 104);
    if (v5 != v6)
    {
      if (v5 < v6)
      {
        if (qword_10047BED8 == -1)
        {
          int v7 = qword_10047BEE0;
          if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
            return;
          }
        }
        else
        {
          dispatch_once(&qword_10047BED8, &stru_100463398);
          int v7 = qword_10047BEE0;
          if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
            return;
          }
        }
        uint64_t v8 = *a2;
        *(_DWORD *)std::string buf = 134218240;
        *(void *)&uint8_t buf[4] = v8;
        __int16 v27 = 2048;
        uint64_t v28 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "WARNING: Event timestamp of %lld is before heading filter's last tnanos %lld: ~=!no stack trace!.\n\nEvent log =", buf, 0x16u);
        return;
      }
      uint64_t v9 = v4;
      int v10 = 2;
      int v25 = 2;
      int v11 = *(void ***)(a1 + 72);
      uint64_t v12 = sub_100085D38((uint64_t)a2);
      int v13 = sub_1000D70FC(v11, v12);
      if ((v13 - 1) >= 2)
      {
        int v14 = 0;
        if (!v13)
        {
          int v10 = 0;
          int v25 = 0;
        }
      }
      else
      {
        int v14 = 1;
        int v25 = 1;
        int v10 = 1;
      }
      int v15 = *(_DWORD *)(a1 + 112);
      int v16 = v10;
      if (v15 != 2)
      {
        if (v15 || !v14) {
          goto LABEL_19;
        }
        int v16 = 1;
      }
      *(_DWORD *)(a1 + 112) = v16;
LABEL_19:
      double v17 = *(double *)(v9 + 8);
      *(double *)std::string buf = v17;
      unint64_t v18 = *(void *)(a1 + 144);
      if (v18 >= *(void *)(a1 + 152))
      {
        uint64_t v19 = sub_100281740((uint64_t *)(a1 + 136), (void *)(a1 + 104), a2, (double *)buf, &v25);
      }
      else
      {
        sub_100310E7C(*(void *)(a1 + 144), (void *)(a1 + 104), a2, v10, v17);
        uint64_t v19 = v18 + 32;
        *(void *)(a1 + 144) = v18 + 32;
      }
      *(void *)(a1 + 144) = v19;
      int v20 = (long long *)(v19 - 32);
      unsigned int v21 = (long long *)(a1 + 168);
      if (*(unsigned char *)(a1 + 160))
      {
        long long v22 = *v20;
        *(_OWORD *)(a1 + 18sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_OWORD *)(v19 - 20);
        *unsigned int v21 = v22;
        uint64_t v23 = *a2;
        if (*(unsigned char *)(a1 + 96))
        {
LABEL_25:
          *(void *)(a1 + 104) = v23;
          return;
        }
      }
      else
      {
        long long v24 = *(_OWORD *)(v19 - 16);
        *unsigned int v21 = *v20;
        *(_OWORD *)(a1 + 184) = v24;
        *(unsigned char *)(a1 + 16sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
        uint64_t v23 = *a2;
        if (*(unsigned char *)(a1 + 96)) {
          goto LABEL_25;
        }
      }
      *(unsigned char *)(a1 + 96) = 1;
      goto LABEL_25;
    }
  }
}

void sub_100280E08(_Unwind_Exception *a1)
{
  *(void *)(v1 + 144) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100280E10(uint64_t a1, uint64_t a2)
{
  sub_10035D9CC(&v5, a2);
  sub_100280BA8(a1, &v5);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 104))(*(void *)(a1 + 48), a2);
}

void sub_100280E7C(uint64_t a1, uint64_t a2)
{
  sub_10035D9CC(&v7, a2);
  sub_100280BA8(a1, &v7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 96))(*(void *)(a1 + 48), a2);
  sub_1003A298C(*(void *)(a1 + 48), &v5);
  uint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t sub_100280F4C(uint64_t a1, int a2)
{
  return sub_1003A1620(*(void *)(a1 + 64), a2);
}

double sub_100280F54(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 32);
  if (result == 0.0)
  {
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    double result = result * -1.83787707;
    *(double *)(a2 + 24) = result
                         * (double)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  return result;
}

void sub_100280FA0(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_100280FA8(uint64_t a1, uint64_t *a2)
{
  sub_100280BA8(a1, a2);
  if (!*(unsigned char *)(a1 + 40) || !*(void *)(a1 + 80)) {
    return 0.0;
  }
  uint64_t v3 = sub_1003A2984(*(void *)(a1 + 48));
  uint64_t v4 = *(void *)(a1 + 64);
  int v5 = sub_1003A1628(v4);
  sub_1003A167C(v4);
  uint64_t v6 = *(void *)(a1 + 80);

  return sub_1002FEE64(v3, v5, v6);
}

BOOL sub_100281038(uint64_t a1)
{
  return *(void *)(a1 + 120) != 0;
}

long double sub_100281048(uint64_t a1, uint64_t a2)
{
  return sub_100275E80(*(void *)(a1 + 120), a2);
}

void sub_100281050(uint64_t *a1, uint64_t a2)
{
  sub_10035D9CC(&v11, a2);
  sub_100280BA8((uint64_t)a1, &v11);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1[6] + 24))(a1[6], a2);
  sub_1003A28E0(a1[6], (uint64_t)v12);
  if (v12[0])
  {
    uint64_t v4 = (uint64_t *)a1[9];
    uint64_t v5 = sub_100085D38((uint64_t)&v11);
    float v6 = v13;
    float v7 = v14;
    float v8 = v15;
    sub_1000D6E28(v4, v5, v6, v7, v8);
  }
  uint64_t v9 = a1[8];
  double v10 = sub_1003A297C(a1[6]);
  sub_1003A1138(v9, a2, v10);
}

float sub_100281150(uint64_t a1, uint64_t a2)
{
  sub_10035D9CC(&v10, a2);
  if (v10 < 0)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v11);
  }
  sub_100280BA8(a1, &v10);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 144))(*(void *)(a1 + 48), a2);
  sub_1003A28E0(*(void *)(a1 + 48), (uint64_t)__p);
  if (LOBYTE(__p[0]))
  {
    uint64_t v5 = *(uint64_t **)(a1 + 72);
    uint64_t v6 = sub_100085D38((uint64_t)&v10);
    float v7 = *(double *)&__p[1];
    float v8 = v13;
    float v9 = v14;
    sub_1000D6E28(v5, v6, v7, v8, v9);
  }
  return result;
}

void sub_10028128C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002812B8(uint64_t a1, uint64_t a2)
{
  sub_1003A1610(*(void *)(a1 + 64), a2);
  if (*(unsigned char *)(a2 + 80))
  {
    int v4 = *(_DWORD *)(a2 + 24);
    if (v4 >= 10) {
      sub_1003A1618(*(void *)(a1 + 64), *(double *)(a2 + 32) / (double)v4);
    }
  }
}

void sub_1002813BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100281408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 64);
  int v7 = sub_1003A1628(v6);
  double v8 = sub_1003A167C(v6);
  float v9 = operator new(0x70uLL);
  v9[1] = 0;
  double v9[2] = 0;
  *float v9 = off_100463418;
  void v9[5] = a2;
  *((unsigned char *)v9 + 48) = 0;
  int v10 = *(_DWORD *)(a1 + 112);
  a3[1] = v9;
  *((double *)v9 + 4) = v8;
  *((_DWORD *)v9 + 7) = v7;
  *((_DWORD *)v9 + 6) = v10;
  *a3 = v9 + 3;
  uint64_t result = sub_1000D70FC(*(void ***)(a1 + 72), a2);
  *(_DWORD *)(a1 + 112) = result;
  return result;
}

void sub_1002814BC(_Unwind_Exception *a1)
{
  sub_1000BA884(v1);
  _Unwind_Resume(a1);
}

void sub_1002814D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2;
  sub_100280BA8(a1, &v5);
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144))
  {
    sub_100310E98(a3);
  }
  else
  {
    sub_100310EC0((uint64_t *)(a1 + 136), a3);
    *(void *)(a1 + 144) = *(void *)(a1 + 136);
  }
}

void sub_10028154C(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_10028157C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1004633C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10028159C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1004633C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002815F0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100281618(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 120)) {
      *(unsigned char *)(a2 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
    }
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 104);
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    int v4 = *(void (****)(void))(a2 + 64);
    if (v4)
    {
      uint64_t v5 = *(void (****)(void))(a2 + 72);
      uint64_t v6 = *(void **)(a2 + 64);
      if (v5 != v4)
      {
        int v7 = v5 - 12;
        double v8 = v5 - 12;
        float v9 = v5 - 12;
        do
        {
          int v10 = *v9;
          v9 -= 12;
          (*v10)(v8);
          v7 -= 12;
          BOOL v11 = v8 == v4;
          double v8 = v9;
        }
        while (!v11);
        uint64_t v6 = *(void **)(a2 + 64);
      }
      *(void *)(a2 + 72) = v4;
      operator delete(v6);
    }
    uint64_t v12 = *(void **)(a2 + 24);
    if (v12)
    {
      *(void *)(a2 + 32) = v12;
      operator delete(v12);
    }
    operator delete();
  }
}

uint64_t sub_100281740(uint64_t *a1, void *a2, void *a3, double *a4, int *a5)
{
  uint64_t v6 = (a1[1] - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_1000A9108();
  }
  uint64_t v12 = a1[2] - *a1;
  if (v12 >> 4 > v7) {
    unint64_t v7 = v12 >> 4;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v7;
  }
  if (v13)
  {
    if (v13 >> 59) {
      sub_1000A6A10();
    }
    double v14 = (char *)operator new(32 * v13);
  }
  else
  {
    double v14 = 0;
  }
  uint64_t v15 = sub_100310E7C((uint64_t)&v14[32 * v6], a2, a3, *a5, *a4);
  uint64_t v16 = v15 + 32;
  unint64_t v18 = (char *)*a1;
  double v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      long long v19 = *((_OWORD *)v17 - 2);
      *(_OWORD *)(v15 - 2sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(_OWORD *)(v17 - 20);
      *(_OWORD *)(v15 - 32) = v19;
      v15 -= 32;
      v17 -= 32;
    }
    while (v17 != v18);
    double v17 = (char *)*a1;
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = (uint64_t)&v14[32 * v13];
  if (v17) {
    operator delete(v17);
  }
  return v16;
}

void sub_10028185C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100281874(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_100463418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100281894(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_100463418;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002818E8(uint64_t result)
{
  if (*(unsigned char *)(result + 48)) {
    *(unsigned char *)(result + 48) = 0;
  }
  return result;
}

void sub_1002818FC()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100281974()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_1002819EC(uint64_t result, uint64_t a2, char a3, double a4)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(result + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(result + 48) = v4;
  *(double *)(result + 56) = a4;
  *(unsigned char *)(result + 64) = a3;
  return result;
}

void sub_100281A3C()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100281AB4()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_100281B2C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void *sub_100281BA8(void *a1)
{
  *a1 = off_100463468;
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t, void *))(*(void *)v2 + 40))(v2, a1 + 1);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_100281D08(void *a1)
{
  sub_100281BA8(a1);

  operator delete();
}

void sub_100281D40(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  int v6 = *(_DWORD *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 40);
  v14.n128_u64[0] = *(void *)(a1 + 32);
  v14.n128_u64[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 v8 = sub_1002A7278((uint64_t)v15, v6, &v14);
  float v9 = (std::__shared_weak_count *)v14.n128_u64[1];
  if (v14.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v14.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  (*(void (**)(void, uint64_t, void *, unsigned char *, __n128))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a1 + 8, a2, v15, v8);
  uint64_t v10 = (uint64_t)(a3[1] - *a3) >> 4;
  uint64_t v12 = (uint64_t)(a2[1] - *a2) >> 5;
  uint64_t v13 = v10;
  if (v10 != v12)
  {
    sub_1000AE4B0(v18, "");
    sub_100282374("unexpected number of radio map entries returned, ", &v20);
    sub_1001F3080(&v13, &v21);
    sub_1002823C4(" expecting, ", &v22);
    sub_1001F3080(&v12, &v23);
    sub_10016A2C4((uint64_t)v18, (uint64_t)&v20, 4);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v23.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_13:
        if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_19;
      }
    }
    else if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v22.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_20;
    }
LABEL_19:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_16;
      }
LABEL_21:
      operator delete(v18[0]);
LABEL_16:
      sub_1000D11E0((uint64_t)&__p);
    }
LABEL_20:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  BOOL v11 = v16;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_100281FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_1000D8DD8(v27);
  sub_100281B2C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_10028200C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  while (1)
  {
    if (*((char *)v22 - 1) < 0) {
      operator delete(*(v22 - 3));
    }
    v22 -= 3;
    if (v22 == (void **)&a22) {
      JUMPOUT(0x100281FDCLL);
    }
  }
}

void sub_100282038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100281B2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100282060(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 40);
  v11.n128_u64[0] = *(void *)(a1 + 32);
  v11.n128_u64[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 v6 = sub_1002A7278((uint64_t)v12, v4, &v11);
  unint64_t v7 = (std::__shared_weak_count *)v11.n128_u64[1];
  if (v11.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v11.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v6);
    std::__shared_weak_count::__release_weak(v7);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = a2[3];
    if (!v9) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = a2[3];
    if (!v9)
    {
LABEL_8:
      uint64_t v15 = (void *)v9;
      goto LABEL_12;
    }
  }
  if ((void *)v9 != a2)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v9 + 16))(v9, v6);
    goto LABEL_8;
  }
  uint64_t v15 = v14;
  (*(void (**)(void *, void *, __n128))(*a2 + 24))(a2, v14, v6);
LABEL_12:
  (*(void (**)(uint64_t, uint64_t, unsigned char *, void *, __n128))(*(void *)v8 + 24))(v8, a1 + 8, v12, v14, v6);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
    uint64_t v10 = v13;
    if (!v13) {
      return;
    }
    goto LABEL_18;
  }
  if (v15) {
    (*(void (**)(void *))(*v15 + 40))(v15);
  }
  uint64_t v10 = v13;
  if (v13)
  {
LABEL_18:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1002822A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100281B2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002822B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1002822E4((uint64_t *)va1);
  sub_100281B2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002822D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1002822E4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

std::string *sub_100282374@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002823A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1002823C4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002823F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100282414()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10028248C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_100282504(uint64_t a1@<X0>, uint64_t ***a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = a1 + 64;
  if (sub_10006F318(a1 + 64, a2))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_100282900((uint64_t)a4, (uint64_t)(a3[1] - *a3) >> 5);
    int v9 = sub_10028C9FC(v8, a2);
    uint64_t v10 = (_DWORD *)*a3;
    __n128 v11 = (_DWORD *)a3[1];
    if ((_DWORD *)*a3 != v11)
    {
      int v12 = v9;
      uint64_t v13 = a1 + 8;
      do
      {
        uint64_t v15 = v10 + 2;
        int v14 = *v10;
        int v16 = (int)*v10 >> 31;
        if (v14 >> 31 == v14)
        {
          *(void *)&long long v26 = *v15;
          int v16 = v14;
        }
        else
        {
          long long v17 = *(_OWORD *)v15;
          int v27 = v10[6];
          long long v26 = v17;
        }
        int v25 = v16 ^ v14;
        int v28 = v12;
        sub_100282A94(v13, &v25, (uint64_t)v23);
        unint64_t v18 = a4[1];
        if (v18 >= a4[2])
        {
          uint64_t v19 = sub_1002842BC((uint64_t)a4, (uint64_t)v23);
        }
        else
        {
          *(unsigned char *)unint64_t v18 = 0;
          if (v23[0])
          {
            *(_OWORD *)(v18 + 8) = v24;
            long long v24 = 0uLL;
            *(unsigned char *)unint64_t v18 = 1;
          }
          uint64_t v19 = v18 + 24;
        }
        a4[1] = v19;
        if (v23[0])
        {
          std::string v20 = (std::__shared_weak_count *)*((void *)&v24 + 1);
          if (*((void *)&v24 + 1))
          {
            if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }
        v10 += 8;
      }
      while (v10 != v11);
    }
  }
  else
  {
    unint64_t v21 = (uint64_t)(a3[1] - *a3) >> 5;
    LOBYTE(v25) = 0;
    sub_1002827B0(a4, v21, (unsigned __int8 *)&v25);
    if ((_BYTE)v25)
    {
      std::string v22 = (std::__shared_weak_count *)*((void *)&v26 + 1);
      if (*((void *)&v26 + 1))
      {
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
}

void sub_100282744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001FAD1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100282758(_Unwind_Exception *a1)
{
  sub_1001F2BD0(v1);
  _Unwind_Resume(a1);
}

void sub_10028276C(_Unwind_Exception *a1)
{
  sub_1001F2BD0(v1);
  _Unwind_Resume(a1);
}

void sub_100282780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001FAD1C((uint64_t)va);
  sub_1001F2BD0(v2);
  _Unwind_Resume(a1);
}

void sub_10028279C(_Unwind_Exception *a1)
{
  sub_1001F2BD0(v1);
  _Unwind_Resume(a1);
}

void *sub_1002827B0(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_1000A9108();
    }
    uint64_t v6 = 24 * a2;
    uint64_t v7 = operator new(24 * a2);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[3 * a2];
    a1[2] = v8;
    if (*a3)
    {
      uint64_t v9 = v6 - 24;
      *(unsigned char *)uint64_t v7 = 0;
LABEL_5:
      uint64_t v10 = *((void *)a3 + 2);
      v7[1] = *((void *)a3 + 1);
      void v7[2] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)uint64_t v7 = 1;
      while (v9)
      {
        int v11 = *a3;
        v9 -= 24;
        *((unsigned char *)v7 + 24) = 0;
        v7 += 3;
        if (v11) {
          goto LABEL_5;
        }
      }
      goto LABEL_17;
    }
    if ((unint64_t)(v6 - 24) >= 0x18)
    {
      unint64_t v13 = (v6 - 24) / 0x18uLL + 1;
      int v12 = &v7[3 * (v13 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v14 = v13 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(unsigned char *)uint64_t v7 = 0;
        *((unsigned char *)v7 + 24) = 0;
        v7 += 6;
        v14 -= 2;
      }
      while (v14);
      if (v13 == (v13 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v12 = v7;
    }
    do
    {
      *int v12 = 0;
      v12 += 24;
    }
    while (v12 != v8);
LABEL_17:
    a1[1] = v8;
  }
  return a1;
}

void sub_1002828E0(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    sub_1003A6578((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100282900(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1000A9108();
  }
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = 24 * a2;
  uint64_t v6 = (char *)operator new(24 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_18;
  }
  uint64_t v9 = &v6[v4 - v2];
  uint64_t v10 = v9;
  int v11 = v4;
  do
  {
    *(v10 - 24) = 0;
    v10 -= 24;
    int v12 = *(v11 - 24);
    v11 -= 24;
    if (v12)
    {
      *((_OWORD *)v9 - 1) = *((_OWORD *)v4 - 1);
      *((void *)v4 - 2) = 0;
      *((void *)v4 - 1) = 0;
      *(v9 - 24) = 1;
    }
    uint64_t v9 = v10;
    uint64_t v4 = v11;
  }
  while (v11 != v2);
  unint64_t v13 = *(char **)a1;
  uint64_t v2 = *(char **)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v13)
  {
    uint64_t v14 = v2;
    do
    {
      int v15 = *(v14 - 24);
      v14 -= 24;
      if (v15)
      {
        int v16 = (std::__shared_weak_count *)*((void *)v2 - 1);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        *(v2 - 24) = 0;
      }
      uint64_t v2 = v14;
    }
    while (v14 != v13);
    uint64_t v2 = v13;
  }
  if (v2)
  {
LABEL_18:
    operator delete(v2);
  }
}

void sub_100282A94(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v8 = a1 + 16;
  uint64_t v9 = (void *)(a1 + 8);
  do
  {
    BOOL v10 = sub_100283F90(v8, (uint64_t)(v5 + 4), a2);
    int v11 = v5 + 1;
    if (!v10)
    {
      int v11 = v5;
      uint64_t v9 = v5;
    }
    uint64_t v5 = (void *)*v11;
  }
  while (*v11);
  if (v9 == v4 || sub_100283F90(v8, (uint64_t)a2, (_DWORD *)v9 + 8))
  {
LABEL_8:
    char v12 = 0;
  }
  else
  {
    unint64_t v13 = (uint64_t *)v9[11];
    if (*(uint64_t **)(a1 + 32) != v13)
    {
      uint64_t v14 = *v13;
      *(void *)(v14 + 8) = v13[1];
      *(void *)v13[1] = v14;
      --*(void *)(a1 + 40);
      operator delete(v13);
      int v15 = (char *)operator new(0x38uLL);
      int v16 = v15 + 24;
      unint64_t v18 = a2 + 2;
      int v17 = *a2;
      int v19 = (int)*a2 >> 31;
      if (v17 >> 31 == v17)
      {
        *int v16 = *v18;
        int v19 = v17;
      }
      else
      {
        *(_OWORD *)int v16 = *(_OWORD *)v18;
        *((_DWORD *)v15 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = a2[6];
      }
      *((_DWORD *)v15 + 4) = v19 ^ v17;
      *((_DWORD *)v15 + 12) = a2[8];
      std::string v20 = *(void **)(a1 + 32);
      *(void *)int v15 = a1 + 24;
      *((void *)v15 + 1) = v20;
      *std::string v20 = v15;
      uint64_t v21 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 32) = v15;
      *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v21;
      uint64_t v22 = v9[9];
      uint64_t v23 = v9[10];
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      int v28 = v15;
      int v29 = a2;
      long long v24 = sub_100284164((uint64_t **)a1, a2, (uint64_t)&unk_1003FAE80, &v29);
      int v25 = (std::__shared_weak_count *)v24[10];
      v24[9] = v22;
      unsigned char v24[10] = v23;
      if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      v24[11] = (uint64_t)v28;
    }
    *(unsigned char *)a3 = 0;
    uint64_t v26 = v9[10];
    *(void *)(a3 + 8) = v9[9];
    *(void *)(a3 + 16) = v26;
    if (v26)
    {
      int v27 = (atomic_ullong *)(v26 + 8);
      char v12 = 1;
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    else
    {
      char v12 = 1;
    }
  }
  *(unsigned char *)a3 = v12;
}

void sub_100282CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100282CF0(uint64_t a1, uint64_t ***a2, uint64_t *a3, void *a4)
{
  uint64_t v6 = (a3[1] - *a3) >> 5;
  uint64_t v71 = (uint64_t)(a4[1] - *a4) >> 4;
  uint64_t v72 = v6;
  if (v6 != v71)
  {
    sub_1000AE4B0(buf, "");
    sub_10014C790("macs and radioMaps do not match 1-to-1, macs,", &v76);
    sub_1001F3080(&v72, &v77);
    sub_1002823C4(",radiomaps, ", &v78);
    sub_1001F3080(&v71, &v79);
    sub_10016A2C4((uint64_t)buf, (uint64_t)&v76, 4);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v79.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_119:
        if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_120;
        }
        goto LABEL_125;
      }
    }
    else if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_119;
    }
    operator delete(v78.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_120:
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_121;
      }
      goto LABEL_126;
    }
LABEL_125:
    operator delete(v77.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_121:
      if ((v75 & 0x80000000) == 0) {
        goto LABEL_122;
      }
LABEL_127:
      operator delete(*(void **)buf);
LABEL_122:
      sub_10014B3FC((uint64_t)&__p);
    }
LABEL_126:
    operator delete(v76.__r_.__value_.__l.__data_);
    if ((v75 & 0x80000000) == 0) {
      goto LABEL_122;
    }
    goto LABEL_127;
  }
  int v57 = sub_10028CB14(a1 + 64, a2);
  uint64_t v7 = *a3;
  if (a3[1] != *a3)
  {
    unsigned int v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    unsigned int v67 = 0;
    unsigned int v8 = 0;
    unint64_t v9 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    uint64_t v55 = a1 + 8;
    int v60 = (void *)(a1 + 16);
    uint64_t v54 = a1 + 24;
    do
    {
      unsigned int v68 = v8;
      int v17 = (int *)(v7 + 32 * v9);
      int v20 = *v17;
      int v19 = v17 + 2;
      int v18 = v20;
      int v21 = v20 >> 31;
      if (v20 >> 31 == v20)
      {
        v76.__r_.__value_.__l.__size_ = *(void *)v19;
        int v21 = v18;
      }
      else
      {
        long long v22 = *(_OWORD *)v19;
        LODWORD(v77.__r_.__value_.__l.__data_) = v19[4];
        *(_OWORD *)&v76.__r_.__value_.__r.__words[1] = v22;
      }
      LODWORD(v76.__r_.__value_.__l.__data_) = v21 ^ v18;
      LODWORD(v77.__r_.__value_.__r.__words[1]) = v57;
      uint64_t v23 = (uint64_t *)*v60;
      if (!*v60)
      {
LABEL_110:
        if (v9 >= (uint64_t)(a4[1] - *a4) >> 4) {
          sub_1001F352C();
        }
        sub_100283588(v55, &v76, (uint64_t *)(*a4 + 16 * v9));
        goto LABEL_4;
      }
      unint64_t v59 = v9;
      long long v24 = v60;
      do
      {
        int v25 = SLODWORD(v76.__r_.__value_.__l.__data_) >> 31;
        int data = (int)v76.__r_.__value_.__l.__data_;
        if (SLODWORD(v76.__r_.__value_.__l.__data_) >> 31 != LODWORD(v76.__r_.__value_.__l.__data_))
        {
          LODWORD(v7sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v76.__r_.__value_.__s.__data_[17];
          HIDWORD(v7sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v76.__r_.__value_.__s.__data_[16];
          LODWORD(v69) = v76.__r_.__value_.__s.__data_[19];
          HIDWORD(v69) = v76.__r_.__value_.__s.__data_[18];
          unsigned int v10 = v76.__r_.__value_.__s.__data_[20];
          unsigned int v11 = v76.__r_.__value_.__s.__data_[21];
          unsigned int v12 = v76.__r_.__value_.__s.__data_[22];
          unsigned int v13 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
          unsigned int v14 = v77.__r_.__value_.__s.__data_[0];
          unsigned int v15 = v77.__r_.__value_.__s.__data_[1];
          unsigned int v16 = v77.__r_.__value_.__s.__data_[2];
          int data = SLODWORD(v76.__r_.__value_.__l.__data_) >> 31;
          unsigned __int8 v4 = v77.__r_.__value_.__s.__data_[3];
        }
        std::string::size_type size_high = HIBYTE(v76.__r_.__value_.__l.__size_);
        int v28 = data ^ LODWORD(v76.__r_.__value_.__l.__data_);
        int v29 = *((_DWORD *)v23 + 8);
        int v30 = v28 >> 31;
        if (v29 >> 31 == v29)
        {
          if (v30 != v28) {
            goto LABEL_10;
          }
          std::string::size_type v31 = v23[5];
          if (v31 < v76.__r_.__value_.__l.__size_) {
            goto LABEL_10;
          }
          int v32 = 0;
          int v33 = 0;
          if (v25 != LODWORD(v76.__r_.__value_.__l.__data_)) {
            goto LABEL_18;
          }
        }
        else
        {
          if (v30 != v28)
          {
            unsigned int v34 = *((unsigned __int8 *)v23 + 40);
            if (v34 < v76.__r_.__value_.__s.__data_[8]) {
              goto LABEL_10;
            }
            if (v34 <= v76.__r_.__value_.__s.__data_[8])
            {
              unsigned int v35 = *((unsigned __int8 *)v23 + 41);
              if (v35 < v76.__r_.__value_.__s.__data_[9]) {
                goto LABEL_10;
              }
              if (v35 <= v76.__r_.__value_.__s.__data_[9])
              {
                unsigned int v36 = *((unsigned __int8 *)v23 + 42);
                if (v36 < v76.__r_.__value_.__s.__data_[10]) {
                  goto LABEL_10;
                }
                if (v36 <= v76.__r_.__value_.__s.__data_[10])
                {
                  unsigned int v37 = *((unsigned __int8 *)v23 + 43);
                  if (v37 < v76.__r_.__value_.__s.__data_[11]) {
                    goto LABEL_10;
                  }
                  if (v37 <= v76.__r_.__value_.__s.__data_[11])
                  {
                    unsigned int v38 = *((unsigned __int8 *)v23 + 44);
                    if (v38 < v76.__r_.__value_.__s.__data_[12]) {
                      goto LABEL_10;
                    }
                    if (v38 <= v76.__r_.__value_.__s.__data_[12])
                    {
                      unsigned int v39 = *((unsigned __int8 *)v23 + 45);
                      if (v39 < v76.__r_.__value_.__s.__data_[13]) {
                        goto LABEL_10;
                      }
                      if (v39 <= v76.__r_.__value_.__s.__data_[13])
                      {
                        unsigned int v40 = *((unsigned __int8 *)v23 + 46);
                        if (v40 < v76.__r_.__value_.__s.__data_[14]) {
                          goto LABEL_10;
                        }
                        if (v40 <= v76.__r_.__value_.__s.__data_[14])
                        {
                          unsigned int v41 = *((unsigned __int8 *)v23 + 47);
                          if (v41 < size_high) {
                            goto LABEL_10;
                          }
                          if (v41 <= size_high)
                          {
                            unsigned int v42 = *((unsigned __int8 *)v23 + 48);
                            if (v42 < HIDWORD(v70)) {
                              goto LABEL_10;
                            }
                            if (HIDWORD(v70) >= v42)
                            {
                              unsigned int v43 = *((unsigned __int8 *)v23 + 49);
                              if (v43 < v70) {
                                goto LABEL_10;
                              }
                              if (v70 >= v43)
                              {
                                unsigned int v44 = *((unsigned __int8 *)v23 + 50);
                                if (v44 < HIDWORD(v69)) {
                                  goto LABEL_10;
                                }
                                if (HIDWORD(v69) >= v44)
                                {
                                  unsigned int v45 = *((unsigned __int8 *)v23 + 51);
                                  if (v45 < v69
                                    || v69 >= v45
                                    && ((unsigned int v46 = *((unsigned __int8 *)v23 + 52), v46 < v10)
                                     || v10 >= v46
                                     && ((unsigned int v47 = *((unsigned __int8 *)v23 + 53), v47 < v11)
                                      || v11 >= v47
                                      && ((unsigned int v48 = *((unsigned __int8 *)v23 + 54), v48 < v12)
                                       || v12 >= v48
                                       && ((unsigned int v49 = *((unsigned __int8 *)v23 + 55), v49 < v13)
                                        || v13 >= v49
                                        && ((unsigned int v50 = *((unsigned __int8 *)v23 + 56), v50 < v14)
                                         || v14 >= v50
                                         && ((unsigned int v51 = *((unsigned __int8 *)v23 + 57), v51 < v15)
                                          || v15 >= v51
                                          && ((unsigned int v52 = *((unsigned __int8 *)v23 + 58), v52 < v16)
                                           || v16 >= v52 && *((unsigned __int8 *)v23 + 59) < v4))))))))
                                  {
LABEL_10:
                                    ++v23;
                                    goto LABEL_11;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          std::string::size_type v31 = v23[5];
          unsigned int v67 = *((unsigned __int8 *)v23 + 49);
          unsigned int v68 = *((unsigned __int8 *)v23 + 48);
          LODWORD(v66) = *((unsigned __int8 *)v23 + 51);
          HIDWORD(v66) = *((unsigned __int8 *)v23 + 50);
          LODWORD(v65) = *((unsigned __int8 *)v23 + 53);
          HIDWORD(v65) = *((unsigned __int8 *)v23 + 52);
          LODWORD(v64) = *((unsigned __int8 *)v23 + 55);
          HIDWORD(v64) = *((unsigned __int8 *)v23 + 54);
          LODWORD(v63) = *((unsigned __int8 *)v23 + 57);
          HIDWORD(v63) = *((unsigned __int8 *)v23 + 56);
          unsigned __int8 v61 = *((unsigned char *)v23 + 59);
          unsigned int v62 = *((unsigned __int8 *)v23 + 58);
          int v32 = (v29 >> 31) ^ v29;
          int v33 = v32 >> 31;
          if (v25 != LODWORD(v76.__r_.__value_.__l.__data_))
          {
LABEL_18:
            if (v33 != v32
              && (v31 > v76.__r_.__value_.__s.__data_[8]
               || v31 >= v76.__r_.__value_.__s.__data_[8]
               && (BYTE1(v31) > v76.__r_.__value_.__s.__data_[9]
                || BYTE1(v31) >= v76.__r_.__value_.__s.__data_[9]
                && (BYTE2(v31) > v76.__r_.__value_.__s.__data_[10]
                 || BYTE2(v31) >= v76.__r_.__value_.__s.__data_[10]
                 && (BYTE3(v31) > v76.__r_.__value_.__s.__data_[11]
                  || BYTE3(v31) >= v76.__r_.__value_.__s.__data_[11]
                  && (BYTE4(v31) > v76.__r_.__value_.__s.__data_[12]
                   || BYTE4(v31) >= v76.__r_.__value_.__s.__data_[12]
                   && (BYTE5(v31) > v76.__r_.__value_.__s.__data_[13]
                    || BYTE5(v31) >= v76.__r_.__value_.__s.__data_[13]
                    && (BYTE6(v31) > v76.__r_.__value_.__s.__data_[14]
                     || BYTE6(v31) >= v76.__r_.__value_.__s.__data_[14]
                     && (HIBYTE(v31) > size_high
                      || HIBYTE(v31) >= size_high
                      && (v76.__r_.__value_.__s.__data_[16] < v68
                       || v68 >= v76.__r_.__value_.__s.__data_[16]
                       && (v76.__r_.__value_.__s.__data_[17] < v67
                        || v67 >= v76.__r_.__value_.__s.__data_[17]
                        && (v76.__r_.__value_.__s.__data_[18] < HIDWORD(v66)
                         || HIDWORD(v66) >= v76.__r_.__value_.__s.__data_[18]
                         && (v76.__r_.__value_.__s.__data_[19] < v66
                          || v66 >= v76.__r_.__value_.__s.__data_[19]
                          && (v76.__r_.__value_.__s.__data_[20] < HIDWORD(v65)
                           || HIDWORD(v65) >= v76.__r_.__value_.__s.__data_[20]
                           && (v76.__r_.__value_.__s.__data_[21] < v65
                            || v65 >= v76.__r_.__value_.__s.__data_[21]
                            && (v76.__r_.__value_.__s.__data_[22] < HIDWORD(v64)
                             || HIDWORD(v64) >= v76.__r_.__value_.__s.__data_[22]
                             && (HIBYTE(v76.__r_.__value_.__r.__words[2]) < v64
                              || v64 >= HIBYTE(v76.__r_.__value_.__r.__words[2])
                              && (v77.__r_.__value_.__s.__data_[0] < HIDWORD(v63)
                               || HIDWORD(v63) >= v77.__r_.__value_.__s.__data_[0]
                               && (v77.__r_.__value_.__s.__data_[1] < v63
                                || v63 >= v77.__r_.__value_.__s.__data_[1]
                                && (v77.__r_.__value_.__s.__data_[2] < v62
                                 || v62 >= v77.__r_.__value_.__s.__data_[2]
                                 && v77.__r_.__value_.__s.__data_[3] < v61))))))))))))))))))))
            {
              goto LABEL_106;
            }
            goto LABEL_63;
          }
        }
        if (v33 != v32 || v76.__r_.__value_.__l.__size_ < v31)
        {
LABEL_106:
          long long v24 = v23;
          goto LABEL_11;
        }
LABEL_63:
        if (sub_100095774((_DWORD *)v23 + 16, &v77.__r_.__value_.__r.__words[1])) {
          ++v23;
        }
        else {
          long long v24 = v23;
        }
LABEL_11:
        uint64_t v23 = (uint64_t *)*v23;
      }
      while (v23);
      if (v24 == v60 || sub_100283F90(v54, (uint64_t)&v76, (_DWORD *)v24 + 8))
      {
        unint64_t v9 = v59;
        goto LABEL_110;
      }
      if (qword_10047BF08 != -1) {
        dispatch_once(&qword_10047BF08, &stru_100463540);
      }
      int v53 = qword_10047BF10;
      unint64_t v9 = v59;
      if (os_log_type_enabled((os_log_t)qword_10047BF10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "attempting to insert a mac,locationId pair that already exists in the cache", buf, 2u);
      }
LABEL_4:
      unsigned int v8 = v68;
      ++v9;
      uint64_t v7 = *a3;
    }
    while (v9 < (a3[1] - *a3) >> 5);
  }
}

void sub_100283518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100283588(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6 = (void *)(a1 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  if (!v7) {
    goto LABEL_8;
  }
  unsigned int v8 = (void *)(a1 + 8);
  do
  {
    BOOL v9 = sub_100283F90(a1 + 16, (uint64_t)(v7 + 4), a2);
    unsigned int v10 = v7 + 1;
    if (!v9)
    {
      unsigned int v10 = v7;
      unsigned int v8 = v7;
    }
    uint64_t v7 = (void *)*v10;
  }
  while (*v10);
  if (v8 == v6 || sub_100283F90(a1 + 16, (uint64_t)a2, (_DWORD *)v8 + 8))
  {
LABEL_8:
    if (*(void *)(a1 + 16) >= *(void *)(a1 + 48))
    {
      unsigned int v11 = *(_DWORD **)(a1 + 24);
      sub_1002844A8((uint64_t **)a1, v11 + 4);
      uint64_t v12 = *(void *)v11;
      *(void *)(v12 + 8) = *((void *)v11 + 1);
      **((void **)v11 + 1) = v12;
      --*(void *)(a1 + 40);
      operator delete(v11);
    }
    unsigned int v13 = (char *)operator new(0x38uLL);
    unsigned int v14 = v13 + 24;
    unsigned int v16 = a2 + 2;
    int v15 = *a2;
    int v17 = (int)*a2 >> 31;
    if (v15 >> 31 == v15)
    {
      *unsigned int v14 = *v16;
      int v17 = v15;
    }
    else
    {
      *(_OWORD *)unsigned int v14 = *(_OWORD *)v16;
      *((_DWORD *)v13 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = a2[6];
    }
    *((_DWORD *)v13 + 4) = v17 ^ v15;
    *((_DWORD *)v13 + 12) = a2[8];
    int v18 = *(void **)(a1 + 32);
    *(void *)unsigned int v13 = a1 + 24;
    *((void *)v13 + 1) = v18;
    *int v18 = v13;
    uint64_t v19 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v19;
    uint64_t v21 = *a3;
    uint64_t v20 = a3[1];
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    long long v24 = v13;
    int v25 = a2;
    long long v22 = sub_100284164((uint64_t **)a1, a2, (uint64_t)&unk_1003FAE80, &v25);
    uint64_t v23 = (std::__shared_weak_count *)v22[10];
    v22[9] = v21;
    v22[10] = v20;
    if (v23)
    {
      if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v22[11] = (uint64_t)v24;
  }
}

void sub_1002837B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002837C8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = (uint64_t)(a3[1] - *a3) >> 5;
  unint64_t v9 = (a4[1] - *a4) >> 4;
  unint64_t v34 = v9;
  uint64_t v35 = v8;
  if (v8 != v9)
  {
    sub_1000AE4B0(&__p, "");
    sub_10014C790("macs and radioMaps do not match 1-to-1, macs,", &v40);
    sub_1001F3080(&v35, &v41);
    sub_1002823C4(",radiomaps, ", &v42);
    sub_1001F3080(&v34, &v43);
    sub_10016A2C4((uint64_t)&__p, (uint64_t)&v40, 4);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v43.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_36:
        if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_37;
        }
        goto LABEL_42;
      }
    }
    else if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_36;
    }
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_43;
    }
LABEL_42:
    operator delete(v41.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v39) & 0x80000000) == 0) {
        goto LABEL_39;
      }
LABEL_44:
      operator delete(__p);
LABEL_39:
      sub_10014B3FC((uint64_t)&v36);
    }
LABEL_43:
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v39) & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_44;
  }
  memset(&v40, 0, sizeof(v40));
  std::string __p = 0;
  unsigned int v38 = 0;
  unsigned int v39 = 0;
  sub_100097908((uint64_t)&v40, v9);
  uint64_t v10 = *a4;
  uint64_t v11 = a4[1];
  uint64_t v12 = v11 - *a4;
  uint64_t v13 = v12 >> 4;
  if (v12 >> 4)
  {
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF1) {
      sub_1000A9108();
    }
    unsigned int v14 = operator new(2 * v12);
    std::string __p = &v38[(void)v14];
    unsigned int v38 = &v38[(void)v14];
    unsigned int v39 = (char *)v14 + 32 * v13;
  }
  if (v11 != v10)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    do
    {
      uint64_t v19 = *(void *)(v10 + v16);
      if (v19)
      {
        std::string::size_type size = v40.__r_.__value_.__l.__size_;
        if (v40.__r_.__value_.__l.__size_ >= v40.__r_.__value_.__r.__words[2])
        {
          long long v22 = sub_1001F4898((uint64_t)&v40, (long long *)(v10 + v16));
        }
        else
        {
          *(void *)v40.__r_.__value_.__l.__size_ = v19;
          uint64_t v21 = *(void *)(v10 + v16 + 8);
          *(void *)(size + 8) = v21;
          if (v21) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
          }
          long long v22 = (_OWORD *)(size + 16);
        }
        v40.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
        if (v17 >= (uint64_t)(a3[1] - *a3) >> 5) {
          sub_1001F352C();
        }
        uint64_t v23 = (int *)(*a3 + v15);
        long long v24 = (int *)v38;
        if (v38 >= v39)
        {
          int v18 = (char *)sub_1001E77C4(&__p, v23);
        }
        else
        {
          int v25 = v38 + 8;
          int v27 = v23 + 2;
          int v26 = *v23;
          if (v26 == v26 >> 31)
          {
            *int v25 = *v27;
            int v28 = v26;
          }
          else
          {
            long long v29 = *(_OWORD *)v27;
            *((_DWORD *)v38 + 6) = v23[6];
            *(_OWORD *)int v25 = v29;
            int v28 = *v23;
            int v26 = *v23 >> 31;
          }
          *long long v24 = v28 ^ v26;
          int v18 = (char *)(v24 + 8);
        }
        unsigned int v38 = v18;
        uint64_t v10 = *a4;
        uint64_t v11 = a4[1];
      }
      ++v17;
      v16 += 16;
      v15 += 32;
    }
    while (v17 < (v11 - v10) >> 4);
  }
  (*(void (**)(uint64_t, uint64_t, void **, std::string *))(*(void *)a1 + 32))(a1, a2, &__p, &v40);
  if (__p)
  {
    unsigned int v38 = (char *)__p;
    operator delete(__p);
  }
  std::string::size_type v30 = v40.__r_.__value_.__r.__words[0];
  if (v40.__r_.__value_.__r.__words[0])
  {
    std::string::size_type v31 = v40.__r_.__value_.__l.__size_;
    int v32 = (void *)v40.__r_.__value_.__r.__words[0];
    if (v40.__r_.__value_.__l.__size_ != v40.__r_.__value_.__r.__words[0])
    {
      do
      {
        int v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33)
        {
          if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v31 -= 16;
      }
      while (v31 != v30);
      int v32 = (void *)v40.__r_.__value_.__r.__words[0];
    }
    v40.__r_.__value_.__l.__size_ = v30;
    operator delete(v32);
  }
}

void sub_100283C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100283C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  while (1)
  {
    if (*((char *)v17 - 1) < 0) {
      operator delete(*(v17 - 3));
    }
    v17 -= 3;
    if (v17 == (void **)&a17) {
      JUMPOUT(0x100283C54);
    }
  }
}

void sub_100283CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000D8DD8(&a17);
  _Unwind_Resume(a1);
}

void sub_100283CD0(void *a1)
{
  uint64_t v2 = a1 + 2;
  sub_100283ED4((uint64_t)(a1 + 1), (void *)a1[2]);
  *(v2 - 1) = v2;
  *uint64_t v2 = 0;
  v2[1] = 0;
  if (v2[4])
  {
    uint64_t v3 = v2 + 2;
    uint64_t v5 = a1[4];
    unsigned __int8 v4 = (uint64_t *)a1[5];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    a1[6] = 0;
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v4[1];
        operator delete(v4);
        unsigned __int8 v4 = v7;
      }
      while (v7 != v3);
    }
  }
}

uint64_t sub_100283D4C(uint64_t a1)
{
  *(void *)a1 = off_1004634C8;
  sub_1000A0968((void *)(a1 + 64));
  if (*(void *)(a1 + 48))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v2 = *(uint64_t **)(a1 + 40);
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v4;
    *(void *)(a1 + 48) = 0;
    if (v2 != (uint64_t *)(a1 + 32))
    {
      do
      {
        uint64_t v5 = (uint64_t *)v2[1];
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 32));
    }
  }
  sub_100283ED4(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_100283DE8(uint64_t a1)
{
  *(void *)a1 = off_1004634C8;
  sub_1000A0968((void *)(a1 + 64));
  if (*(void *)(a1 + 48))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v2 = *(uint64_t **)(a1 + 40);
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v4;
    *(void *)(a1 + 48) = 0;
    if (v2 != (uint64_t *)(a1 + 32))
    {
      do
      {
        uint64_t v5 = (uint64_t *)v2[1];
        operator delete(v2);
        uint64_t v2 = v5;
      }
      while (v5 != (uint64_t *)(a1 + 32));
    }
  }
  sub_100283ED4(a1 + 8, *(void **)(a1 + 16));

  operator delete();
}

void sub_100283EA4(id a1)
{
  qword_10047BF10 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Database");
}

void sub_100283ED4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100283ED4(a1, *a2);
    sub_100283ED4(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[10];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v5 = a2;
    }
    else
    {
      uint64_t v5 = a2;
    }
    operator delete(v5);
  }
}

BOOL sub_100283F90(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = (unsigned __int8 *)(a3 + 2);
  int v5 = *a3;
  int v7 = (int)*a3 >> 31;
  if (v5 >> 31 == v5)
  {
    *(void *)&long long v19 = *(void *)v6;
    int v7 = v5;
  }
  else
  {
    long long v19 = *(_OWORD *)v6;
    int v20 = a3[6];
  }
  int v8 = v7 ^ v5;
  int v18 = v8;
  uint64_t v10 = (void *)(a2 + 8);
  int v9 = *(_DWORD *)a2;
  int v11 = *(int *)a2 >> 31;
  int v12 = v8 >> 31;
  if (v11 == *(_DWORD *)a2)
  {
    if (v12 == v8 && *v10 >= (unint64_t)v19)
    {
      int v11 = *(_DWORD *)a2;
      goto LABEL_13;
    }
    return 1;
  }
  if (v12 != v8)
  {
    if (sub_1001E6FAC((unsigned __int8 *)(a2 + 8), (unsigned __int8 *)&v19)) {
      return 1;
    }
    int v9 = *(_DWORD *)a2;
    int v11 = *(int *)a2 >> 31;
  }
  if (v11 != v9)
  {
    long long v16 = *(_OWORD *)v10;
    int v17 = *(_DWORD *)(a2 + 24);
    int v14 = v11 ^ v9;
    int v15 = v14 >> 31;
    if (*a3 == (int)*a3 >> 31) {
      goto LABEL_14;
    }
LABEL_18:
    if (v15 != v14 && sub_1001E6FAC(v6, (unsigned __int8 *)&v16)) {
      return 0;
    }
    return sub_100095774((_DWORD *)(a2 + 32), a3 + 8);
  }
LABEL_13:
  *(void *)&long long v16 = *v10;
  int v14 = v11 ^ v9;
  int v15 = v14 >> 31;
  if (*a3 != (int)*a3 >> 31) {
    goto LABEL_18;
  }
LABEL_14:
  if (v15 != v14 || *(void *)v6 < (unint64_t)v16) {
    return 0;
  }
  return sub_100095774((_DWORD *)(a2 + 32), a3 + 8);
}

uint64_t *sub_100284164(uint64_t **a1, _DWORD *a2, uint64_t a3, int **a4)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (!v6)
  {
    int v9 = a1 + 1;
LABEL_9:
    int v11 = (uint64_t *)operator new(0x60uLL);
    int v12 = v11;
    uint64_t v13 = *a4;
    int v14 = v11 + 5;
    long long v16 = *a4 + 2;
    int v15 = **a4;
    if (v15 == v15 >> 31)
    {
      *int v14 = *v16;
      int v17 = v15;
    }
    else
    {
      long long v18 = *(_OWORD *)v16;
      *((_DWORD *)v11 + 14) = (*a4)[6];
      *(_OWORD *)int v14 = v18;
      int v17 = *v13;
      int v15 = *v13 >> 31;
    }
    *((_DWORD *)v11 + 8) = v17 ^ v15;
    *((_DWORD *)v11 + 16) = v13[8];
    v11[10] = 0;
    v11[11] = 0;
    v11[9] = 0;
    *int v11 = 0;
    v11[1] = 0;
    _DWORD v11[2] = (uint64_t)v9;
    *int v7 = v11;
    long long v19 = (uint64_t *)**a1;
    int v20 = v11;
    if (v19)
    {
      *a1 = v19;
      int v20 = *v7;
    }
    sub_1000619B8(a1[1], v20);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v12;
  }
  while (1)
  {
    while (1)
    {
      int v9 = (uint64_t **)v6;
      uint64_t v10 = (uint64_t)(v6 + 4);
      if (!sub_100283F90((uint64_t)(a1 + 2), (uint64_t)a2, (_DWORD *)v6 + 8)) {
        break;
      }
      uint64_t v6 = *v9;
      int v7 = v9;
      if (!*v9) {
        goto LABEL_9;
      }
    }
    if (!sub_100283F90((uint64_t)(a1 + 2), v10, a2)) {
      break;
    }
    int v7 = v9 + 1;
    uint64_t v6 = v9[1];
    if (!v6) {
      goto LABEL_9;
    }
  }
  int v12 = *v7;
  if (!*v7) {
    goto LABEL_9;
  }
  return v12;
}

uint64_t sub_1002842BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)a1;
  uint64_t v4 = *(char **)(a1 + 8);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-*(void *)a1] >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1000A9108();
  }
  if (0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - (void)v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v3) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000A6A10();
    }
    int v9 = (char *)operator new(24 * v8);
    uint64_t v10 = (uint64_t)&v9[24 * v5];
    *(unsigned char *)uint64_t v10 = 0;
    if (*(unsigned char *)a2) {
      goto LABEL_10;
    }
  }
  else
  {
    int v9 = 0;
    uint64_t v10 = 24 * v5;
    *(unsigned char *)(24 * v5) = 0;
    if (*(unsigned char *)a2)
    {
LABEL_10:
      *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(unsigned char *)uint64_t v10 = 1;
      uint64_t v3 = *(char **)a1;
      uint64_t v4 = *(char **)(a1 + 8);
    }
  }
  int v11 = &v9[24 * v8];
  uint64_t v12 = v10 + 24;
  if (v4 == v3)
  {
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v11;
    if (!v3) {
      return v12;
    }
    goto LABEL_26;
  }
  uint64_t v13 = v10;
  int v14 = v4;
  do
  {
    *(unsigned char *)(v13 - 24) = 0;
    v13 -= 24;
    int v15 = *(v14 - 24);
    v14 -= 24;
    if (v15)
    {
      *(_OWORD *)(v10 - 16) = *((_OWORD *)v4 - 1);
      *((void *)v4 - 2) = 0;
      *((void *)v4 - 1) = 0;
      *(unsigned char *)(v10 - 24) = 1;
    }
    uint64_t v10 = v13;
    uint64_t v4 = v14;
  }
  while (v14 != v3);
  long long v16 = *(char **)a1;
  uint64_t v3 = *(char **)(a1 + 8);
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = v11;
  if (v3 != v16)
  {
    int v17 = v3;
    do
    {
      int v18 = *(v17 - 24);
      v17 -= 24;
      if (v18)
      {
        long long v19 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        *(v3 - 24) = 0;
      }
      uint64_t v3 = v17;
    }
    while (v17 != v16);
    uint64_t v3 = v16;
  }
  if (v3) {
LABEL_26:
  }
    operator delete(v3);
  return v12;
}

uint64_t sub_1002844A8(uint64_t **a1, _DWORD *a2)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = a1[1];
  if (!v3) {
    return 0;
  }
  unint64_t v6 = a1 + 2;
  int v7 = a1 + 1;
  do
  {
    BOOL v8 = sub_100283F90((uint64_t)v6, (uint64_t)(v3 + 4), a2);
    int v9 = (uint64_t **)(v3 + 1);
    if (!v8)
    {
      int v9 = (uint64_t **)v3;
      int v7 = (uint64_t **)v3;
    }
    uint64_t v3 = *v9;
  }
  while (*v9);
  if (v7 == v2 || sub_100283F90((uint64_t)v6, (uint64_t)a2, (_DWORD *)v7 + 8)) {
    return 0;
  }
  int v11 = v7[1];
  if (v11)
  {
    do
    {
      uint64_t v12 = v11;
      int v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    uint64_t v13 = v7;
    do
    {
      uint64_t v12 = v13[2];
      BOOL v14 = *v12 == (void)v13;
      uint64_t v13 = (uint64_t **)v12;
    }
    while (!v14);
  }
  if (*a1 == (uint64_t *)v7) {
    *a1 = v12;
  }
  --*v6;
  sub_1002845F8(*v2, (uint64_t *)v7);
  int v15 = (std::__shared_weak_count *)v7[10];
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v7);
  return 1;
}

uint64_t *sub_1002845F8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_10;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (!v2)
  {
    int v5 = 1;
    unint64_t v6 = (uint64_t **)v3[2];
    int v7 = *v6;
    if (*v6 == v3) {
      goto LABEL_6;
    }
LABEL_11:
    v6[1] = (uint64_t *)v2;
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
LABEL_10:
  int v5 = 0;
  *(void *)(v2 + 16) = v3[2];
  unint64_t v6 = (uint64_t **)v3[2];
  int v7 = *v6;
  if (*v6 != v3) {
    goto LABEL_11;
  }
LABEL_6:
  *unint64_t v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    int v7 = v6[1];
    int v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
    goto LABEL_16;
  }
  int v7 = 0;
  uint64_t result = (uint64_t *)v2;
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2) {
    goto LABEL_12;
  }
LABEL_16:
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    BOOL v14 = (uint64_t **)v7[2];
    if (*v14 == v7) {
      break;
    }
    if (*((unsigned char *)v7 + 24))
    {
      int v15 = (void *)*v7;
      if (!*v7) {
        goto LABEL_38;
      }
    }
    else
    {
      *((unsigned char *)v7 + 24) = 1;
      *((unsigned char *)v14 + 24) = 0;
      int v17 = v14[1];
      int v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18) {
        v18[2] = (uint64_t)v14;
      }
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (void)v14] = (uint64_t)v17;
      *int v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      int v7 = *(uint64_t **)(*v7 + 8);
      int v15 = (void *)*v7;
      if (!*v7) {
        goto LABEL_38;
      }
    }
    if (!*((unsigned char *)v15 + 24))
    {
      long long v19 = (uint64_t *)v7[1];
      if (!v19) {
        goto LABEL_64;
      }
LABEL_63:
      if (*((unsigned char *)v19 + 24))
      {
LABEL_64:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v23 = v15[1];
        *int v7 = v23;
        if (v23) {
          *(void *)(v23 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        void v7[2] = (uint64_t)v15;
        long long v19 = v7;
      }
      else
      {
        int v15 = v7;
      }
      uint64_t v27 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v27 + 24);
      *(unsigned char *)(v27 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      int v28 = *(uint64_t **)(v27 + 8);
      uint64_t v29 = *v28;
      *(void *)(v27 + 8) = *v28;
      if (v29) {
        *(void *)(v29 + 16) = v27;
      }
      v28[2] = *(void *)(v27 + 16);
      *(void *)(*(void *)(v27 + 16) + 8 * (**(void **)(v27 + 16) != v27)) = v28;
      *int v28 = v27;
      *(void *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    long long v19 = (uint64_t *)v7[1];
    if (v19 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_63;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      uint64_t v12 = result;
LABEL_61:
      *((unsigned char *)v12 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v12 + 24)) {
      goto LABEL_61;
    }
LABEL_24:
    int v7 = *(uint64_t **)(v12[2] + 8 * (*(void *)v12[2] == (void)v12));
  }
  if (*((unsigned char *)v7 + 24))
  {
    long long v16 = (void *)*v7;
    if (!*v7) {
      goto LABEL_49;
    }
LABEL_48:
    if (!*((unsigned char *)v16 + 24)) {
      goto LABEL_67;
    }
  }
  else
  {
    *((unsigned char *)v7 + 24) = 1;
    *((unsigned char *)v14 + 24) = 0;
    int v20 = (uint64_t *)v7[1];
    *BOOL v14 = v20;
    if (v20) {
      v20[2] = (uint64_t)v14;
    }
    void v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (void)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14) {
      uint64_t result = v7;
    }
    int v7 = *v14;
    long long v16 = (void *)**v14;
    if (v16) {
      goto LABEL_48;
    }
  }
LABEL_49:
  uint64_t v21 = (uint64_t *)v7[1];
  if (!v21 || *((unsigned char *)v21 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v12 = (uint64_t *)v7[2];
    if (*((unsigned char *)v12 + 24)) {
      BOOL v13 = v12 == result;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_61;
    }
    goto LABEL_24;
  }
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_67:
    uint64_t v21 = v7;
  }
  else
  {
    *((unsigned char *)v21 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = *v21;
    v7[1] = *v21;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v21[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v21;
    *uint64_t v21 = (uint64_t)v7;
    void v7[2] = (uint64_t)v21;
    long long v16 = v7;
  }
  long long v24 = (uint64_t *)v21[2];
  *((unsigned char *)v21 + 24) = *((unsigned char *)v24 + 24);
  *((unsigned char *)v24 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v25 = *v24;
  uint64_t v26 = *(void *)(*v24 + 8);
  *long long v24 = v26;
  if (v26) {
    *(void *)(v26 + 16) = v24;
  }
  *(void *)(v25 + 16) = v24[2];
  *(void *)(v24[2] + 8 * (*(void *)v24[2] != (void)v24)) = v25;
  *(void *)(v25 + 8) = v24;
  _OWORD v24[2] = v25;
  return result;
}

void sub_1002849BC()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100284A34()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_100284AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_100463570;
  uint64_t v6 = a1 + 8;
  int v24 = sub_1001E0EE0(a2);
  int v23 = sub_10031B5EC(a2);
  int v22 = sub_10031B5F8(a2);
  int v21 = sub_10031B604(a2);
  sub_1000741D0(__p, &v22, &v21);
  sub_1002A6200(v6, &v24, &v23, __p);
  *(double *)(a1 + 24) = sub_100270918(a3, a2);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = sub_1000D7EFC(a2);
  if (*(char *)(v10 + 23) < 0)
  {
    sub_1000559FC((unsigned char *)(a1 + 56), *(void **)v10, *(void *)(v10 + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)v10;
    *(void *)(a1 + 72) = *(void *)(v10 + 16);
    *(_OWORD *)(a1 + 56) = v11;
  }
  *(void *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  uint64_t v12 = sub_100065654();
  BOOL v13 = v12;
  unsigned __int8 v14 = atomic_load((unsigned __int8 *)v12 + 20);
  if ((v14 & 1) != 0 || *((unsigned char *)v12 + 16))
  {
    if (*((unsigned char *)v12 + 17)) {
      goto LABEL_12;
    }
  }
  else
  {
    BOOL v15 = sub_100059C20((uint64_t)v12, (unsigned char *)v12 + 9);
    *((unsigned char *)v13 + 17) = v15;
    *((unsigned char *)v13 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v13 + 20);
    if (v15) {
      goto LABEL_12;
    }
  }
  if (*(_DWORD *)(sub_100064294(a2) + 24) == 1)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v25);
  }
LABEL_12:
  long long v16 = sub_1000656E4();
  int v17 = v16;
  unsigned __int8 v18 = atomic_load((unsigned __int8 *)v16 + 20);
  if ((v18 & 1) != 0 || *((unsigned char *)v16 + 16))
  {
    if (*((unsigned char *)v16 + 17)) {
      return a1;
    }
  }
  else
  {
    BOOL v19 = sub_100059C20((uint64_t)v16, (unsigned char *)v16 + 9);
    *((unsigned char *)v17 + 17) = v19;
    *((unsigned char *)v17 + 16) = 1;
    atomic_store(1u, (unsigned __int8 *)v17 + 20);
    if (v19) {
      return a1;
    }
  }
  if (*(_DWORD *)(sub_100064294(a2) + 24) == 2)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v25);
  }
  return a1;
}

void sub_100284D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 + 79) < 0)
  {
    operator delete(*v17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100284D9C(uint64_t a1)
{
  *(void *)a1 = off_100463570;
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    sub_10028C9F0(v2);
    *(void *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

void sub_100284E10(uint64_t a1)
{
  *(void *)a1 = off_100463570;
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    sub_10028C9F0(v2);
    *(void *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }

  operator delete();
}

BOOL sub_100284E94(uint64_t a1)
{
  uint64_t v1 = (int **)(a1 + 80);
  if (*(void *)(a1 + 80)) {
    return 1;
  }
  uint64_t v4 = (unint64_t *)(a1 + 56);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    int v5 = sub_1002A8080((unsigned __int8 *)(a1 + 56), (unsigned __int8 *)*(unsigned __int8 *)(a1 + 79), v1);
    if (v5) {
      goto LABEL_6;
    }
LABEL_10:
    if (*(char *)(a1 + 79) < 0)
    {
      **(unsigned char **)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 56) = 0;
      *(unsigned char *)(a1 + 79) = 0;
    }
    sub_100284FF8(v4);
    *(double *)(a1 + 88) = sub_1002A9AA0(*(void *)(a1 + 80));
    return 1;
  }
  int v5 = sub_1002A8080(*(unsigned __int8 **)(a1 + 56), *(unsigned __int8 **)(a1 + 64), v1);
  if (!v5) {
    goto LABEL_10;
  }
LABEL_6:
  int v6 = v5;
  if (qword_10047BED8 == -1)
  {
    uint64_t v7 = qword_10047BEE0;
    BOOL result = os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_8:
      v8[0] = 67109120;
      v8[1] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Couldn't deserialize rssi data: %d", (uint8_t *)v8, 8u);
      return 0;
    }
  }
  else
  {
    dispatch_once(&qword_10047BED8, &stru_1004635E0);
    uint64_t v7 = qword_10047BEE0;
    BOOL result = os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_ERROR);
    if (result) {
      goto LABEL_8;
    }
  }
  return result;
}

void sub_100284FF8(unint64_t *__dst)
{
  uint64_t v2 = *((unsigned __int8 *)__dst + 23);
  if ((*((char *)__dst + 23) & 0x80000000) == 0)
  {
    if (v2 < 0x17) {
      return;
    }
    uint64_t v3 = v2 | 7;
    if ((v2 | 7) == 0x17)
    {
      unint64_t v4 = v2 & 0xF8;
      if (v4 <= 0xE)
      {
        size_t v5 = v4 + 9;
        int v6 = (unsigned __int8 *)*__dst;
        char v7 = 1;
        unint64_t v8 = *((unsigned __int8 *)__dst + 23);
        uint64_t v9 = __dst;
        int v10 = 1;
        size_t v11 = v2 + 1;
LABEL_21:
        memmove(v9, v6, v11);
LABEL_22:
        if (v10)
        {
          operator delete(v6);
          if (v7) {
            goto LABEL_24;
          }
        }
        else if (v7)
        {
LABEL_24:
          *((unsigned char *)__dst + 23) = v8 & 0x7F;
          return;
        }
        __dst[1] = v8;
        __dst[2] = v5 | 0x8000000000000000;
        *std::string __dst = (unint64_t)v9;
        return;
      }
      uint64_t v3 = v4 + 8;
    }
    unint64_t v8 = *((unsigned __int8 *)__dst + 23);
    size_t v5 = v3 + 1;
    goto LABEL_17;
  }
  unint64_t v12 = __dst[1];
  if (v12 < 0x17)
  {
    if ((__dst[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x17) {
      return;
    }
    unint64_t v13 = 22;
    goto LABEL_13;
  }
  unint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v12 | 7) != 0x17) {
    unint64_t v13 = v12 | 7;
  }
  if (v13 != (__dst[2] & 0x7FFFFFFFFFFFFFFFLL) - 1)
  {
    if (v13 >= 0x17)
    {
      unint64_t v8 = __dst[1];
      size_t v5 = v13 + 1;
LABEL_17:
      uint64_t v9 = operator new(v5);
      char v7 = 0;
      if ((v2 & 0x80) == 0)
      {
        int v10 = 0;
        int v6 = (unsigned __int8 *)__dst;
        size_t v11 = v2 + 1;
        goto LABEL_21;
      }
      unint64_t v12 = __dst[1];
LABEL_20:
      int v6 = (unsigned __int8 *)*__dst;
      int v10 = 1;
      size_t v11 = v12 + 1;
      if (v12 == -1) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
LABEL_13:
    size_t v5 = v13 + 1;
    char v7 = 1;
    unint64_t v8 = __dst[1];
    uint64_t v9 = __dst;
    goto LABEL_20;
  }
}

void sub_1002851A8(void *a1)
{
}

BOOL sub_1002851B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = sub_1002A6204((_DWORD *)(a1 + 8), a2);
  if (v5 == -1) {
    return 0;
  }
  int v6 = v5;
  BOOL result = sub_100284E94(a1);
  if (result)
  {
    int v8 = *(_DWORD *)(a1 + 20);
    int v9 = v6 / v8;
    int v10 = v6 % v8;
    double v11 = sub_1002A9A00(*(_DWORD **)(a1 + 80), v10, v9);
    v12.n64_u64[0] = sub_1002A9A5C(*(_DWORD **)(a1 + 80), v10, v9).n64_u64[0];
    BOOL result = v12.n64_f64[0] > 0.0;
    if (a3)
    {
      double v13 = NAN;
      if (v12.n64_f64[0] > 0.0) {
        double v13 = v11;
      }
      *(double *)(a3 + 8) = v13;
      *(double *)(a3 + 16) = v12.n64_f64[0];
    }
  }
  return result;
}

BOOL sub_100285274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = sub_100284E94(a1);
  if (result)
  {
    sub_1001E331C(a2, (_DWORD *)(a1 + 8), &v27);
    double v7 = *((double *)&v27 + 1);
    double v8 = 0.0;
    if (*((double *)&v27 + 1) == 0.0 || v27 == -1)
    {
      double v9 = 0.0;
      double v10 = 0.0;
    }
    else
    {
      int v15 = *(_DWORD *)(a1 + 20);
      int v16 = (int)v27 / v15;
      int v17 = (int)v27 % v15;
      double v9 = 0.0;
      double v10 = 0.0;
      if (sub_1002A9A5C(*(_DWORD **)(a1 + 80), (int)v27 % v15, (int)v27 / v15).n64_f64[0] != 0.0)
      {
        double v9 = v7 * sub_1002A9A00(*(_DWORD **)(a1 + 80), v17, v16) + 0.0;
        double v10 = v7 * sub_1002A9A5C(*(_DWORD **)(a1 + 80), v17, v16).n64_f64[0] + 0.0;
        double v8 = v7 + 0.0;
      }
    }
    double v11 = v29;
    if (v29 != 0.0 && v28 != -1)
    {
      int v18 = *(_DWORD *)(a1 + 20);
      int v19 = v28 / v18;
      int v20 = v28 % v18;
      if (sub_1002A9A5C(*(_DWORD **)(a1 + 80), v28 % v18, v28 / v18).n64_f64[0] != 0.0)
      {
        double v9 = v9 + v11 * sub_1002A9A00(*(_DWORD **)(a1 + 80), v20, v19);
        double v10 = v10 + v11 * sub_1002A9A5C(*(_DWORD **)(a1 + 80), v20, v19).n64_f64[0];
        double v8 = v8 + v11;
      }
    }
    double v12 = v31;
    if (v31 != 0.0 && v30 != -1)
    {
      int v21 = *(_DWORD *)(a1 + 20);
      int v22 = v30 / v21;
      int v23 = v30 % v21;
      if (sub_1002A9A5C(*(_DWORD **)(a1 + 80), v30 % v21, v30 / v21).n64_f64[0] != 0.0)
      {
        double v9 = v9 + v12 * sub_1002A9A00(*(_DWORD **)(a1 + 80), v23, v22);
        double v10 = v10 + v12 * sub_1002A9A5C(*(_DWORD **)(a1 + 80), v23, v22).n64_f64[0];
        double v8 = v8 + v12;
      }
    }
    double v13 = v33;
    if (v33 != 0.0 && v32 != -1)
    {
      int v24 = *(_DWORD *)(a1 + 20);
      int v25 = v32 / v24;
      int v26 = v32 % v24;
      if (sub_1002A9A5C(*(_DWORD **)(a1 + 80), v32 % v24, v32 / v24).n64_f64[0] != 0.0)
      {
        double v9 = v9 + v13 * sub_1002A9A00(*(_DWORD **)(a1 + 80), v26, v25);
        double v10 = v10 + v13 * sub_1002A9A5C(*(_DWORD **)(a1 + 80), v26, v25).n64_f64[0];
        double v8 = v8 + v13;
      }
    }
    BOOL result = v8 > 0.0;
    if (a3)
    {
      if (v8 <= 0.0)
      {
        *(void *)(a3 + 8) = 0x7FF4000000000000;
        double v14 = 0.0;
      }
      else
      {
        *(double *)(a3 + 8) = v9 / v8;
        double v14 = v10 / v8;
      }
      *(double *)(a3 + 16) = v14;
    }
  }
  return result;
}

float sub_1002854C8(uint64_t a1, int a2)
{
  return sub_1002A9A00(*(_DWORD **)(a1 + 80), a2 % *(_DWORD *)(a1 + 20), a2 / *(_DWORD *)(a1 + 20));
}

float sub_100285508(uint64_t a1, int a2)
{
  return sub_1002A9A5C(*(_DWORD **)(a1 + 80), a2 % *(_DWORD *)(a1 + 20), a2 / *(_DWORD *)(a1 + 20)).n64_f64[0];
}

uint64_t sub_100285548(uint64_t a1)
{
  return a1 + 24;
}

void sub_100285550(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_100285580()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002855F8()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

BOOL sub_100285670(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (***a5)(void, uint64_t, uint64_t *, uint64_t, uint64_t), uint64_t a6)
{
  int v6 = *a1;
  if (*a1)
  {
    *a1 = 0;
    uint64_t v7 = *(void *)(a4 + 24);
    if (!v7) {
      sub_10008F39C();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 48))(&v14);
    (**a5)(a5, a2, &v14, a3, a6);
    double v12 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return v6 != 0;
}

void sub_100285790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002857A4()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10028581C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_100285894(int8x8_t *a1@<X0>, _DWORD *a2@<X1>, char **a3@<X8>)
{
  if (*a2 == (int)*a2 >> 31) {
    sub_1002858A8(a1, a2, a3);
  }
  else {
    sub_100285C38((uint64_t)a1, a2, a3);
  }
}

void sub_1002858A8(int8x8_t *a1@<X0>, _DWORD *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(void *)int v53 = &v52;
  int v6 = *a2;
  int v5 = (unint64_t *)(a2 + 2);
  if (v6 != v6 >> 31) {
    sub_1001E7354();
  }
  sub_10006F1A8((uint64_t)v53, *v5);
  int8x8_t v7 = a1[1];
  if (!*(void *)&v7) {
    return;
  }
  double v8 = (unsigned int *)*a1;
  unint64_t v9 = *(unsigned int *)v53 | ((unint64_t)*(unsigned __int16 *)&v53[4] << 32);
  while (1)
  {
    int8x8_t v10 = (int8x8_t)(*(void *)&v7 >> 1);
    double v11 = (unsigned int *)((char *)v8 + 10 * (*(void *)&v7 >> 1));
    unint64_t v12 = *v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32);
    if (v9 <= v12) {
      break;
    }
    double v8 = (unsigned int *)((char *)v11 + 10);
    int8x8_t v10 = (int8x8_t)(*(void *)&v7 + ~*(void *)&v10);
LABEL_7:
    int8x8_t v7 = v10;
    if (!*(void *)&v10) {
      return;
    }
  }
  if (v12 > v9) {
    goto LABEL_7;
  }
  double v13 = (char *)v8 + 10 * *(void *)&v7;
  if (v11 != v8)
  {
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((10 * (*(void *)&v7 >> 1)) >> 1);
    do
    {
      unint64_t v15 = v14 >> 1;
      int v16 = (char *)v8 + 10 * (v14 >> 1);
      uint64_t v17 = *((unsigned __int16 *)v16 + 2);
      unsigned int v19 = *(_DWORD *)v16;
      int v18 = (unsigned int *)(v16 + 10);
      v14 += ~(v14 >> 1);
      if (v9 <= (v19 | (unint64_t)(v17 << 32))) {
        unint64_t v14 = v15;
      }
      else {
        double v8 = v18;
      }
    }
    while (v14);
  }
  int v20 = (char *)v11 + 10;
  uint64_t v21 = v13 - ((char *)v11 + 10);
  if (v21)
  {
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * (v21 >> 1);
    double v13 = v20;
    do
    {
      unint64_t v23 = v22 >> 1;
      int v24 = &v13[10 * (v22 >> 1)];
      uint64_t v25 = *((unsigned __int16 *)v24 + 2);
      unsigned int v27 = *(_DWORD *)v24;
      int v26 = v24 + 10;
      v22 += ~(v22 >> 1);
      if ((v27 | (unint64_t)(v25 << 32)) > v9) {
        unint64_t v22 = v23;
      }
      else {
        double v13 = v26;
      }
    }
    while (v22);
  }
  if (v8 != (unsigned int *)v13)
  {
    int v28 = 0;
    unsigned int v51 = a1 + 6;
    while (1)
    {
      unsigned int v30 = *v8;
      *(_WORD *)&v53[4] = *((_WORD *)v8 + 2);
      *(_DWORD *)int v53 = v30;
      *(_DWORD *)&v53[6] = *(unsigned int *)((char *)v8 + 6);
      double v31 = sub_10028CB80(v51, (unsigned int *)&v53[6]);
      int v32 = v31;
      unint64_t v33 = (unint64_t)a3[2];
      if ((unint64_t)v28 < v33)
      {
        *(void *)int v28 = v31;
        uint64_t v29 = (uint64_t)(v28 + 8);
        goto LABEL_25;
      }
      unint64_t v34 = *a3;
      uint64_t v35 = v28 - *a3;
      uint64_t v36 = v35 >> 3;
      unint64_t v37 = (v35 >> 3) + 1;
      if (v37 >> 61) {
        sub_1000A9108();
      }
      uint64_t v38 = v33 - (void)v34;
      if (v38 >> 2 > v37) {
        unint64_t v37 = v38 >> 2;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        if (v39 >> 61) {
          sub_1000A6A10();
        }
        std::string v40 = operator new(8 * v39);
        std::string v41 = (uint64_t **)&v40[8 * v36];
        *std::string v41 = v32;
        uint64_t v29 = (uint64_t)(v41 + 1);
        if (v28 == v34)
        {
LABEL_36:
          *a3 = (char *)v41;
          a3[1] = (char *)v29;
          a3[2] = &v40[8 * v39];
          if (!v28) {
            goto LABEL_25;
          }
LABEL_43:
          operator delete(v28);
          goto LABEL_25;
        }
      }
      else
      {
        std::string v40 = 0;
        std::string v41 = (uint64_t **)(8 * v36);
        *(void *)(8 * v36) = v32;
        uint64_t v29 = 8 * v36 + 8;
        if (v28 == v34) {
          goto LABEL_36;
        }
      }
      unint64_t v42 = v28 - 8 - v34;
      if (v42 < 0x168)
      {
        std::string v43 = v28;
        goto LABEL_41;
      }
      if (&v40[v35 - 8 - (v42 & 0xFFFFFFFFFFFFFFF8)] > &v40[v35 - 8]) {
        break;
      }
      if (&v28[-(v42 & 0xFFFFFFFFFFFFFFF8) - 8] > v28 - 8)
      {
        std::string v43 = v28;
        goto LABEL_41;
      }
      if ((unint64_t)(v28 - v40 - v35) < 0x20)
      {
        std::string v43 = v28;
        goto LABEL_41;
      }
      uint64_t v45 = (v42 >> 3) + 1;
      uint64_t v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
      std::string v43 = &v28[-v46];
      std::string v41 = (uint64_t **)((char *)v41 - v46);
      unsigned int v47 = &v40[8 * v36 - 16];
      unsigned int v48 = (long long *)(v28 - 16);
      uint64_t v49 = v45 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v50 = *v48;
        *(v47 - 1) = *(v48 - 1);
        *unsigned int v47 = v50;
        v47 -= 2;
        v48 -= 2;
        v49 -= 4;
      }
      while (v49);
      if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_41;
      }
LABEL_42:
      int v28 = *a3;
      *a3 = (char *)v41;
      a3[1] = (char *)v29;
      a3[2] = &v40[8 * v39];
      if (v28) {
        goto LABEL_43;
      }
LABEL_25:
      a3[1] = (char *)v29;
      double v8 = (unsigned int *)((char *)v8 + 10);
      int v28 = (char *)v29;
      if (v8 == (unsigned int *)v13) {
        return;
      }
    }
    std::string v43 = v28;
    do
    {
LABEL_41:
      unsigned int v44 = (uint64_t *)*((void *)v43 - 1);
      v43 -= 8;
      *--std::string v41 = v44;
    }
    while (v43 != v34);
    goto LABEL_42;
  }
}

void sub_100285C14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100285C38(uint64_t a1@<X0>, int *a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  a3[2] = 0;
  uint64_t v39 = v5;
  uint64_t v38 = v5 + 40 * v6;
  sub_10028B000(&v39, &v38, a2, (uint64_t *)&v40);
  int8x8_t v7 = v40;
  double v8 = (_DWORD *)v41;
  if (v40 != (_DWORD *)v41)
  {
    unint64_t v9 = 0;
    unint64_t v37 = (int8x8_t *)(a1 + 48);
    while (1)
    {
      unint64_t v12 = v7 + 2;
      int v11 = *v7;
      int v13 = (int)*v7 >> 31;
      if (v11 >> 31 == v11)
      {
        *(void *)&long long v41 = *v12;
        int v13 = v11;
      }
      else
      {
        long long v14 = *(_OWORD *)v12;
        int v42 = v7[6];
        long long v41 = v14;
      }
      int v15 = v13 ^ v11;
      unsigned int v16 = v7[8];
      LODWORD(v4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v15;
      unsigned int v43 = v16;
      uint64_t v17 = sub_10028CB80(v37, &v43);
      int v18 = v17;
      unint64_t v19 = (unint64_t)a3[2];
      if ((unint64_t)v9 < v19)
      {
        *(void *)unint64_t v9 = v17;
        uint64_t v10 = (uint64_t)(v9 + 8);
        goto LABEL_4;
      }
      int v20 = *a3;
      uint64_t v21 = v9 - *a3;
      uint64_t v22 = v21 >> 3;
      unint64_t v23 = (v21 >> 3) + 1;
      if (v23 >> 61) {
        sub_1000A9108();
      }
      uint64_t v24 = v19 - (void)v20;
      if (v24 >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 >> 61) {
          sub_1000A6A10();
        }
        int v26 = operator new(8 * v25);
        unsigned int v27 = (uint64_t **)&v26[8 * v22];
        *unsigned int v27 = v18;
        uint64_t v10 = (uint64_t)(v27 + 1);
        if (v9 == v20)
        {
LABEL_18:
          *a3 = (char *)v27;
          a3[1] = (char *)v10;
          a3[2] = &v26[8 * v25];
          if (!v9) {
            goto LABEL_4;
          }
LABEL_25:
          operator delete(v9);
          goto LABEL_4;
        }
      }
      else
      {
        int v26 = 0;
        unsigned int v27 = (uint64_t **)(8 * v22);
        *(void *)(8 * v22) = v18;
        uint64_t v10 = 8 * v22 + 8;
        if (v9 == v20) {
          goto LABEL_18;
        }
      }
      unint64_t v28 = v9 - 8 - v20;
      if (v28 < 0x168)
      {
        uint64_t v29 = v9;
        goto LABEL_23;
      }
      if (&v26[v21 - 8 - (v28 & 0xFFFFFFFFFFFFFFF8)] > &v26[v21 - 8]) {
        break;
      }
      if (&v9[-(v28 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
      {
        uint64_t v29 = v9;
        goto LABEL_23;
      }
      if ((unint64_t)(v9 - v26 - v21) < 0x20)
      {
        uint64_t v29 = v9;
        goto LABEL_23;
      }
      uint64_t v31 = (v28 >> 3) + 1;
      uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v29 = &v9[-v32];
      unsigned int v27 = (uint64_t **)((char *)v27 - v32);
      unint64_t v33 = &v26[8 * v22 - 16];
      unint64_t v34 = (long long *)(v9 - 16);
      uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v36 = *v34;
        *(v33 - 1) = *(v34 - 1);
        *unint64_t v33 = v36;
        v33 -= 2;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_23;
      }
LABEL_24:
      unint64_t v9 = *a3;
      *a3 = (char *)v27;
      a3[1] = (char *)v10;
      a3[2] = &v26[8 * v25];
      if (v9) {
        goto LABEL_25;
      }
LABEL_4:
      a3[1] = (char *)v10;
      v7 += 10;
      unint64_t v9 = (char *)v10;
      if (v7 == v8) {
        return;
      }
    }
    uint64_t v29 = v9;
    do
    {
LABEL_23:
      unsigned int v30 = (uint64_t *)*((void *)v29 - 1);
      v29 -= 8;
      *--unsigned int v27 = v30;
    }
    while (v29 != v20);
    goto LABEL_24;
  }
}

void sub_100285F08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100285F28(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

unsigned int *sub_100285F70(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = a2;
  uint64_t v26 = *a1;
  __int16 v27 = *((_WORD *)a1 + 4);
  unint64_t v4 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
  unint64_t v5 = v26 & 0xFFFFFFFFFFFFLL;
  if (v4 <= (v26 & 0xFFFFFFFFFFFFuLL))
  {
    if (v5 > v4 || !sub_100095774((uint64_t *)((char *)&v26 + 6), a2 - 1))
    {
      uint64_t v6 = (unsigned int *)((char *)a1 + 10);
      if ((char *)a1 + 10 < (char *)v2)
      {
        do
        {
          unint64_t v9 = *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
          unint64_t v10 = v26 | ((unint64_t)WORD2(v26) << 32);
          if (v9 > v10 || v10 <= v9 && sub_100095774((uint64_t *)((char *)&v26 + 6), (unsigned int *)((char *)v6 + 6))) {
            break;
          }
          uint64_t v6 = (unsigned int *)((char *)v6 + 10);
        }
        while (v6 < v2);
      }
      goto LABEL_17;
    }
    unint64_t v5 = v26 | ((unint64_t)WORD2(v26) << 32);
  }
  uint64_t v6 = (unsigned int *)((char *)a1 + 10);
  for (unint64_t i = *(unsigned int *)((char *)a1 + 10) | ((unint64_t)*((unsigned __int16 *)a1 + 7) << 32);
        i <= v5;
        unint64_t i = v8 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32))
  {
    if (v5 <= i)
    {
      if (sub_100095774((uint64_t *)((char *)&v26 + 6), (unsigned int *)((char *)v6 + 6))) {
        break;
      }
      unint64_t v5 = v26 | ((unint64_t)WORD2(v26) << 32);
    }
    unsigned int v8 = *(unsigned int *)((char *)v6 + 10);
    uint64_t v6 = (unsigned int *)((char *)v6 + 10);
  }
LABEL_17:
  if (v6 < v2)
  {
    do
    {
      do
      {
        uint64_t v2 = (unsigned int *)((char *)v2 - 10);
        unint64_t v11 = *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
        unint64_t v12 = v26 | ((unint64_t)WORD2(v26) << 32);
      }
      while (v11 > v12);
    }
    while (v12 <= v11 && sub_100095774((uint64_t *)((char *)&v26 + 6), (unsigned int *)((char *)v2 + 6)));
  }
  while (v6 < v2)
  {
    uint64_t v13 = *(void *)v6;
    __int16 v29 = *((_WORD *)v6 + 4);
    uint64_t v28 = v13;
    uint64_t v14 = *(void *)v2;
    *((_WORD *)v6 + 4) = *((_WORD *)v2 + 4);
    *(void *)uint64_t v6 = v14;
    uint64_t v15 = v28;
    *((_WORD *)v2 + 4) = v29;
    *(void *)uint64_t v2 = v15;
    unsigned int v16 = *(unsigned int *)((char *)v6 + 10);
    uint64_t v6 = (unsigned int *)((char *)v6 + 10);
    unint64_t v17 = v16 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
    unint64_t v18 = v26 | ((unint64_t)WORD2(v26) << 32);
    while (v17 <= v18)
    {
      if (v18 <= v17)
      {
        if (sub_100095774((uint64_t *)((char *)&v26 + 6), (unsigned int *)((char *)v6 + 6))) {
          goto LABEL_30;
        }
        unint64_t v18 = v26 | ((unint64_t)WORD2(v26) << 32);
      }
      unsigned int v19 = *(unsigned int *)((char *)v6 + 10);
      uint64_t v6 = (unsigned int *)((char *)v6 + 10);
      unint64_t v17 = v19 | ((unint64_t)*((unsigned __int16 *)v6 + 2) << 32);
    }
    do
    {
      do
      {
LABEL_30:
        uint64_t v2 = (unsigned int *)((char *)v2 - 10);
        unint64_t v20 = *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 2) << 32);
        unint64_t v21 = v26 | ((unint64_t)WORD2(v26) << 32);
      }
      while (v20 > v21);
    }
    while (v21 <= v20 && sub_100095774((uint64_t *)((char *)&v26 + 6), (unsigned int *)((char *)v2 + 6)));
  }
  uint64_t v22 = (uint64_t *)((char *)v6 - 10);
  if ((uint64_t *)((char *)v6 - 10) != a1)
  {
    uint64_t v23 = *v22;
    *((_WORD *)a1 + 4) = *((_WORD *)v6 - 1);
    *a1 = v23;
  }
  uint64_t v24 = v26;
  *((_WORD *)v6 - 1) = v27;
  *uint64_t v22 = v24;
  return v6;
}

BOOL sub_100286210(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 1;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (void *)((char *)a2 - 10);
      unint64_t v7 = *a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32);
      unint64_t v8 = *(unsigned int *)((char *)a2 - 10) | ((unint64_t)*((unsigned __int16 *)a2 - 3) << 32);
      if (v7 > v8) {
        goto LABEL_5;
      }
      if (v8 <= v7)
      {
        if (!sub_100095774(a2 - 1, (unsigned int *)((char *)a1 + 6))) {
          return 1;
        }
LABEL_5:
        __int16 v9 = *((_WORD *)a1 + 4);
        uint64_t v10 = *(void *)a1;
        __int16 v11 = *((_WORD *)a2 - 1);
        *(void *)a1 = *v6;
        *((_WORD *)a1 + 4) = v11;
        *uint64_t v6 = v10;
        *((_WORD *)a2 - 1) = v9;
        return 1;
      }
      return result;
    case 3uLL:
      sub_100095788(a1, (unsigned int *)((char *)a1 + 10), (unsigned int *)((char *)a2 - 10));
      return 1;
    case 4uLL:
      sub_100094FD4(a1, (unsigned int *)((char *)a1 + 10), a1 + 5, (unsigned int *)((char *)a2 - 10));
      return 1;
    case 5uLL:
      sub_100095C18(a1, (unsigned int *)((char *)a1 + 10), a1 + 5, (unsigned int *)((char *)a1 + 30), (unsigned int *)((char *)a2 - 10));
      return 1;
    default:
      unint64_t v12 = a1 + 5;
      sub_100095788(a1, (unsigned int *)((char *)a1 + 10), a1 + 5);
      uint64_t v13 = (unsigned int *)((char *)a1 + 30);
      if ((unsigned int *)((char *)a1 + 30) == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (2)
  {
    unint64_t v18 = *v12 | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 32);
    unint64_t v19 = *v13 | ((unint64_t)*((unsigned __int16 *)v13 + 2) << 32);
    if (v18 <= v19
      && (v19 > v18 || !sub_100095774((unsigned int *)((char *)v13 + 6), (unsigned int *)((char *)v12 + 6))))
    {
      goto LABEL_10;
    }
    uint64_t v23 = *(void *)v13;
    __int16 v24 = *((_WORD *)v13 + 4);
    *(void *)uint64_t v13 = *(void *)v12;
    *((_WORD *)v13 + 4) = *((_WORD *)v12 + 4);
    uint64_t v16 = (uint64_t)a1;
    if (v12 == a1) {
      goto LABEL_9;
    }
    uint64_t v20 = v14;
    while (1)
    {
      unint64_t v21 = *(unsigned int *)((char *)a1 + v20 + 10) | ((unint64_t)*(unsigned __int16 *)((char *)a1 + v20 + 14) << 32);
      unint64_t v22 = v23 | ((unint64_t)WORD2(v23) << 32);
      if (v21 > v22) {
        goto LABEL_16;
      }
      if (v22 > v21) {
        break;
      }
      if (!sub_100095774((uint64_t *)((char *)&v23 + 6), (unsigned int *)((char *)a1 + v20 + 16)))
      {
        uint64_t v16 = (uint64_t)a1 + v20 + 20;
        goto LABEL_9;
      }
LABEL_16:
      unint64_t v12 = (unsigned int *)((char *)v12 - 10);
      *(void *)((char *)a1 + v20 + 2sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(void *)((char *)a1 + v20 + 10);
      *(_WORD *)((char *)a1 + v20 + 28) = *(_WORD *)((char *)a1 + v20 + 18);
      v20 -= 10;
      if (v20 == -20)
      {
        uint64_t v16 = (uint64_t)a1;
        goto LABEL_9;
      }
    }
    uint64_t v16 = (uint64_t)v12;
LABEL_9:
    uint64_t v17 = v23;
    *(_WORD *)(v16 + 8) = v24;
    *(void *)uint64_t v16 = v17;
    if (++v15 == 8) {
      return (unsigned int *)((char *)v13 + 10) == a2;
    }
LABEL_10:
    unint64_t v12 = v13;
    v14 += 10;
    uint64_t v13 = (unsigned int *)((char *)v13 + 10);
    if (v13 != a2) {
      continue;
    }
    return 1;
  }
}

BOOL sub_1002864C8(BOOL result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v30 = v4;
    uint64_t v31 = v5;
    BOOL v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 1)))
    {
      int64_t v11 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 1)) | 1;
      unint64_t v12 = (unsigned int *)(result + 10 * v11);
      int64_t v13 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 1) + 2;
      if (v13 < a3)
      {
        unint64_t v14 = *(unsigned int *)((char *)v12 + 10) | ((unint64_t)*((unsigned __int16 *)v12 + 7) << 32);
        unint64_t v15 = *v12 | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 32);
        if (v14 > v15 || v15 <= v14 && (BOOL result = sub_100095774((_DWORD *)(result + 10 * v11 + 6), v12 + 4)))
        {
          unint64_t v12 = (unsigned int *)((char *)v12 + 10);
          int64_t v11 = v13;
        }
      }
      unint64_t v16 = *a4 | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 32);
      unint64_t v17 = *v12 | ((unint64_t)*((unsigned __int16 *)v12 + 2) << 32);
      if (v16 <= v17
        && (v17 > v16 || !(BOOL result = sub_100095774((unsigned int *)((char *)v12 + 6), (unsigned int *)((char *)a4 + 6)))))
      {
        uint64_t v28 = *(void *)a4;
        __int16 v29 = *((_WORD *)a4 + 4);
        __int16 v18 = *((_WORD *)v12 + 4);
        *(void *)a4 = *(void *)v12;
        *((_WORD *)a4 + 4) = v18;
        if (v9 >= v11)
        {
          while (1)
          {
            uint64_t v22 = 2 * v11;
            int64_t v11 = (2 * v11) | 1;
            unint64_t v19 = (unsigned int *)(v8 + 10 * v11);
            int64_t v23 = v22 + 2;
            if (v22 + 2 < a3)
            {
              unint64_t v24 = *(unsigned int *)((char *)v19 + 10) | ((unint64_t)*((unsigned __int16 *)v19 + 7) << 32);
              unint64_t v25 = *v19 | ((unint64_t)*((unsigned __int16 *)v19 + 2) << 32);
              if (v24 > v25 || v25 <= v24 && (BOOL result = sub_100095774((_DWORD *)(v8 + 10 * v11 + 6), v19 + 4)))
              {
                unint64_t v19 = (unsigned int *)((char *)v19 + 10);
                int64_t v11 = v23;
              }
            }
            unint64_t v26 = v28 | ((unint64_t)WORD2(v28) << 32);
            unint64_t v27 = *v19 | ((unint64_t)*((unsigned __int16 *)v19 + 2) << 32);
            if (v26 > v27) {
              break;
            }
            if (v27 <= v26)
            {
              BOOL result = sub_100095774((unsigned int *)((char *)v19 + 6), (uint64_t *)((char *)&v28 + 6));
              if (result) {
                break;
              }
            }
            uint64_t v21 = *(void *)v19;
            *((_WORD *)v12 + 4) = *((_WORD *)v19 + 4);
            *(void *)unint64_t v12 = v21;
            unint64_t v12 = v19;
            if (v9 < v11) {
              goto LABEL_13;
            }
          }
        }
        unint64_t v19 = v12;
LABEL_13:
        uint64_t v20 = v28;
        *((_WORD *)v19 + 4) = v29;
        *(void *)unint64_t v19 = v20;
      }
    }
  }
  return result;
}

char *sub_1002866F4(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v39 = v4;
    uint64_t v40 = v5;
    BOOL v8 = result;
    uint64_t v9 = 0;
    uint64_t v35 = *(void *)result;
    __int16 v36 = *((_WORD *)result + 4);
    int64_t v10 = (unint64_t)(a4 - 2) >> 1;
    int64_t v11 = (unsigned int *)result;
    do
    {
      int64_t v13 = v11;
      uint64_t v14 = v9 + 1;
      int64_t v11 = (unsigned int *)((char *)v11 + 10 * v9 + 10);
      uint64_t v15 = 2 * v9;
      uint64_t v9 = (2 * v9) | 1;
      uint64_t v16 = v15 + 2;
      if (v15 + 2 < a4)
      {
        unint64_t v17 = *(unsigned int *)((char *)v11 + 10) | ((unint64_t)*((unsigned __int16 *)v11 + 7) << 32);
        unint64_t v18 = *v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32);
        if (v17 > v18
          || v18 <= v17
          && (BOOL result = (char *)sub_100095774((unsigned int *)((char *)v13 + 10 * v14 + 6), v11 + 4), result))
        {
          int64_t v11 = (unsigned int *)((char *)v11 + 10);
          uint64_t v9 = v16;
        }
      }
      uint64_t v12 = *(void *)v11;
      *((_WORD *)v13 + 4) = *((_WORD *)v11 + 4);
      *(void *)int64_t v13 = v12;
    }
    while (v9 <= v10);
    unint64_t v19 = (uint64_t *)(a2 - 10);
    if (v11 == (unsigned int *)(a2 - 10))
    {
      uint64_t v29 = v35;
      __int16 v30 = v36;
    }
    else
    {
      uint64_t v20 = *v19;
      *((_WORD *)v11 + 4) = *(_WORD *)(a2 - 2);
      *(void *)int64_t v11 = v20;
      *unint64_t v19 = v35;
      *(_WORD *)(a2 - 2) = v36;
      uint64_t v21 = (char *)v11 - v8 + 10;
      if (v21 < 11) {
        return result;
      }
      unint64_t v22 = v21 / 0xAuLL - 2;
      unint64_t v23 = v22 >> 1;
      unint64_t v24 = &v8[10 * (v22 >> 1)];
      unint64_t v25 = *v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32);
      unint64_t v26 = *(unsigned int *)v24 | ((unint64_t)*((unsigned __int16 *)v24 + 2) << 32);
      if (v25 <= v26)
      {
        if (v26 > v25) {
          return result;
        }
        BOOL result = (char *)sub_100095774(&v8[10 * v23 + 6], (unsigned int *)((char *)v11 + 6));
        if (!result) {
          return result;
        }
      }
      uint64_t v27 = *(void *)v11;
      __int16 v38 = *((_WORD *)v11 + 4);
      uint64_t v37 = v27;
      uint64_t v28 = *(void *)v24;
      *((_WORD *)v11 + 4) = *((_WORD *)v24 + 4);
      *(void *)int64_t v11 = v28;
      if (v22 >= 2)
      {
        while (1)
        {
          unint64_t v32 = v23 - 1;
          unint64_t v23 = (v23 - 1) >> 1;
          int64_t v11 = (unsigned int *)&v8[10 * v23];
          unint64_t v33 = v37 | ((unint64_t)WORD2(v37) << 32);
          unint64_t v34 = *v11 | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 32);
          if (v33 <= v34)
          {
            if (v34 > v33) {
              break;
            }
            BOOL result = (char *)sub_100095774(&v8[10 * v23 + 6], (uint64_t *)((char *)&v37 + 6));
            if (!result) {
              break;
            }
          }
          uint64_t v31 = *(void *)v11;
          *((_WORD *)v24 + 4) = *((_WORD *)v11 + 4);
          *(void *)unint64_t v24 = v31;
          unint64_t v24 = &v8[10 * v23];
          if (v32 <= 1) {
            goto LABEL_15;
          }
        }
      }
      int64_t v11 = (unsigned int *)v24;
LABEL_15:
      uint64_t v29 = v37;
      __int16 v30 = v38;
    }
    *((_WORD *)v11 + 4) = v30;
    *(void *)int64_t v11 = v29;
  }
  return result;
}

uint64_t sub_100286960(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = result;
LABEL_2:
  int64_t v10 = a2 - 10;
  int64_t v11 = (int *)v9;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v9 = (uint64_t)v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          BOOL result = sub_100287068(a3, (uint64_t)(a2 - 10), (_DWORD *)v9);
          if (!result) {
            return result;
          }
          int v34 = *(_DWORD *)v9;
          int v35 = *(int *)v9 >> 31;
          uint64_t v37 = (void *)(v9 + 8);
          uint64_t v36 = *(void *)(v9 + 8);
          if (v35 == *(_DWORD *)v9)
          {
            int v38 = *v10;
            if (v34 == *v10)
            {
              int v39 = 0;
              *uint64_t v37 = *((void *)a2 - 4);
              goto LABEL_70;
            }
            int v39 = 0;
          }
          else
          {
            uint64_t v52 = *(void *)(v9 + 16);
            int v53 = *(_DWORD *)(v9 + 24);
            int v39 = v35 ^ v34;
            int v38 = *v10;
            if (v34 == *v10)
            {
              long long v45 = *((_OWORD *)a2 - 2);
              *(_DWORD *)(v9 + 24) = *(a2 - 4);
              *(_OWORD *)uint64_t v37 = v45;
              goto LABEL_70;
            }
          }
          int v46 = v38 ^ (v38 >> 31);
          unsigned int v47 = a2 - 8;
          if (v46)
          {
            long long v48 = *(_OWORD *)v47;
            *(_DWORD *)(v9 + 24) = *(a2 - 4);
            *(_OWORD *)uint64_t v37 = v48;
            *(_DWORD *)uint64_t v9 = v46;
          }
          else
          {
            *(void *)(v9 + 8) = *(void *)v47;
            *(_DWORD *)uint64_t v9 = 0;
          }
LABEL_70:
          int v49 = v39 >> 31;
          if (*v10 == v39)
          {
            *((void *)a2 - 4) = v36;
            if (v49 != v39)
            {
              *((void *)a2 - 3) = v52;
              *(a2 - 4) = v53;
            }
          }
          else
          {
            *((void *)a2 - 4) = v36;
            if (v49 != v39)
            {
              *((void *)a2 - 3) = v52;
              *(a2 - 4) = v53;
              *(a2 - 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v49 ^ v39;
            }
            else
            {
              *int64_t v10 = 0;
            }
          }
          int v50 = *(_DWORD *)(v9 + 32);
          *(_DWORD *)(v9 + 32) = *(a2 - 2);
          *(a2 - 2) = v50;
          break;
        case 3uLL:
          return sub_100287B04((int *)v9, v9 + 40, (uint64_t)(a2 - 10), a3);
        case 4uLL:
          return sub_100289DEC(v9, v9 + 40, v9 + 80, (uint64_t)(a2 - 10), a3);
        case 5uLL:
          return sub_10028A22C(v9, v9 + 40, v9 + 80, v9 + 120, (uint64_t)(a2 - 10), a3);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 959) {
      break;
    }
    if (v12 == 1)
    {
      if ((int *)v9 != a2)
      {
        unint64_t v40 = (v15 - 2) >> 1;
        unint64_t v41 = v40 + 1;
        int v42 = (int *)(v9 + 40 * v40);
        do
        {
          sub_10028A78C(v9, a3, v15, v42);
          v42 -= 10;
          --v41;
        }
        while (v41);
        unint64_t v43 = v14 / 0x28uLL;
        do
        {
          BOOL result = sub_10028AA70(v9, (uint64_t)a2, a3, v43);
          a2 -= 10;
        }
        while (v43-- > 2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = v9 + 40 * (v15 >> 1);
    if ((unint64_t)v14 < 0x1401)
    {
      sub_100287B04((int *)v17, v9, (uint64_t)(a2 - 10), a3);
      if (a5) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    sub_100287B04((int *)v9, v17, (uint64_t)(a2 - 10), a3);
    sub_100287B04((int *)(v9 + 40), 40 * v16 + v9 - 40, (uint64_t)(a2 - 20), a3);
    sub_100287B04((int *)(v9 + 80), v9 + 40 + 40 * v16, (uint64_t)(a2 - 30), a3);
    sub_100287B04((int *)(40 * v16 + v9 - 40), v17, v9 + 40 + 40 * v16, a3);
    int v18 = *(_DWORD *)v9;
    int v19 = *(int *)v9 >> 31;
    uint64_t v21 = (void *)(v9 + 8);
    uint64_t v20 = *(void *)(v9 + 8);
    if (v19 == *(_DWORD *)v9)
    {
      int v22 = *(_DWORD *)v17;
      if (v18 == *(_DWORD *)v17)
      {
        int v23 = 0;
        *uint64_t v21 = *(void *)(v17 + 8);
        goto LABEL_16;
      }
      int v23 = 0;
    }
    else
    {
      uint64_t v52 = *(void *)(v9 + 16);
      int v53 = *(_DWORD *)(v9 + 24);
      int v23 = v19 ^ v18;
      int v22 = *(_DWORD *)v17;
      if (v18 == *(_DWORD *)v17)
      {
        long long v24 = *(_OWORD *)(v17 + 8);
        *(_DWORD *)(v9 + 24) = *(_DWORD *)(v17 + 24);
        *(_OWORD *)uint64_t v21 = v24;
LABEL_16:
        int v25 = v23 >> 31;
        if (*(_DWORD *)v17 != v23) {
          goto LABEL_22;
        }
        goto LABEL_17;
      }
    }
    int v26 = v22 ^ (v22 >> 31);
    uint64_t v27 = (long long *)(v17 + 8);
    if (v26)
    {
      long long v28 = *v27;
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v17 + 24);
      *(_OWORD *)uint64_t v21 = v28;
      *(_DWORD *)uint64_t v9 = v26;
      int v25 = v23 >> 31;
      if (*(_DWORD *)v17 != v23) {
        goto LABEL_22;
      }
    }
    else
    {
      *(void *)(v9 + 8) = *(void *)v27;
      *(_DWORD *)uint64_t v9 = 0;
      int v25 = v23 >> 31;
      if (*(_DWORD *)v17 != v23)
      {
LABEL_22:
        *(void *)(v17 + 8) = v20;
        if (v25 != v23)
        {
          *(_DWORD *)(v17 + 24) = v53;
          *(void *)(v17 + 16) = v52;
          *(_DWORD *)uint64_t v17 = v25 ^ v23;
        }
        else
        {
          *(_DWORD *)uint64_t v17 = 0;
        }
        goto LABEL_27;
      }
    }
LABEL_17:
    *(void *)(v17 + 8) = v20;
    if (v25 != v23)
    {
      *(_DWORD *)(v17 + 24) = v53;
      *(void *)(v17 + 16) = v52;
    }
LABEL_27:
    uint64_t v29 = v9 + 40 * v16;
    int v30 = *(_DWORD *)(v9 + 32);
    *(_DWORD *)(v9 + 32) = *(_DWORD *)(v29 + 32);
    *(_DWORD *)(v29 + 32) = v30;
    if (a5) {
      goto LABEL_29;
    }
LABEL_28:
    if (!sub_100287068(a3, v9 - 40, (_DWORD *)v9))
    {
      BOOL result = (uint64_t)sub_1002881CC(v9, (unint64_t)a2, a3);
      int64_t v11 = (int *)result;
      goto LABEL_34;
    }
LABEL_29:
    uint64_t v31 = sub_100288B8C((int *)v9, (unint64_t)a2, a3);
    if ((v32 & 1) == 0) {
      goto LABEL_32;
    }
    BOOL v33 = sub_100289948(v9, v31, a3);
    int64_t v11 = v31 + 10;
    BOOL result = sub_100289948((uint64_t)(v31 + 10), a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v31;
      if (v33) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v33)
    {
LABEL_32:
      BOOL result = sub_100286960(v9, v31, a3, -v13, a5 & 1);
      int64_t v11 = v31 + 10;
LABEL_34:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_10028723C((int *)v9, a2, a3);
  }
  else
  {
    return (uint64_t)sub_1002875F0((unsigned __int8 *)v9, (unsigned __int8 *)a2, a3);
  }
}

BOOL sub_100287068(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char v6 = (unsigned __int8 *)(a3 + 2);
  int v5 = *a3;
  int v7 = (int)*a3 >> 31;
  if (v5 >> 31 == v5)
  {
    *(void *)&long long v19 = *(void *)v6;
    int v7 = v5;
  }
  else
  {
    long long v19 = *(_OWORD *)v6;
    int v20 = a3[6];
  }
  int v8 = v7 ^ v5;
  int v18 = v8;
  int64_t v10 = (void *)(a2 + 8);
  int v9 = *(_DWORD *)a2;
  int v11 = *(int *)a2 >> 31;
  int v12 = v8 >> 31;
  if (v11 == *(_DWORD *)a2)
  {
    if (v12 == v8 && *v10 >= (unint64_t)v19)
    {
      int v11 = *(_DWORD *)a2;
      goto LABEL_13;
    }
    return 1;
  }
  if (v12 != v8)
  {
    if (sub_1001E6FAC((unsigned __int8 *)(a2 + 8), (unsigned __int8 *)&v19)) {
      return 1;
    }
    int v9 = *(_DWORD *)a2;
    int v11 = *(int *)a2 >> 31;
  }
  if (v11 != v9)
  {
    long long v16 = *(_OWORD *)v10;
    int v17 = *(_DWORD *)(a2 + 24);
    int v14 = v11 ^ v9;
    int v15 = v14 >> 31;
    if (*a3 == (int)*a3 >> 31) {
      goto LABEL_14;
    }
LABEL_18:
    if (v15 != v14 && sub_1001E6FAC(v6, (unsigned __int8 *)&v16)) {
      return 0;
    }
    return sub_100095774((_DWORD *)(a2 + 32), a3 + 8);
  }
LABEL_13:
  *(void *)&long long v16 = *v10;
  int v14 = v11 ^ v9;
  int v15 = v14 >> 31;
  if (*a3 != (int)*a3 >> 31) {
    goto LABEL_18;
  }
LABEL_14:
  if (v15 != v14 || *(void *)v6 < (unint64_t)v16) {
    return 0;
  }
  return sub_100095774((_DWORD *)(a2 + 32), a3 + 8);
}

int *sub_10028723C(int *result, int *a2, uint64_t a3)
{
  if (result == a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t v4 = (uint64_t)(result + 10);
  if (result + 10 == a2) {
    return result;
  }
  uint64_t v5 = 0;
  char v6 = result;
  while (2)
  {
    int v7 = (int *)v4;
    BOOL result = (int *)sub_100287068(a3, v4, v6);
    if (!result) {
      goto LABEL_6;
    }
    int v8 = *v7;
    int v9 = *v7 >> 31;
    int64_t v10 = v6 + 12;
    if (v8 >> 31 == v8)
    {
      *(void *)&long long v38 = *v10;
      int v9 = v8;
    }
    else
    {
      long long v38 = *(_OWORD *)v10;
      int v39 = v6[16];
    }
    int v37 = v9 ^ v8;
    int v40 = v6[18];
    for (uint64_t i = v5; ; i -= 40)
    {
      int v12 = (int *)((char *)v3 + i);
      int v13 = *(int *)((char *)v3 + i);
      if (v8 != v13) {
        break;
      }
      int v14 = v12 + 2;
      int v15 = v12 + 12;
      if (v8 == v8 >> 31)
      {
        *int v15 = *v14;
        long long v16 = (char *)v3 + i;
        *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
        if (!i) {
          goto LABEL_46;
        }
      }
      else
      {
        *(_OWORD *)int v15 = *(_OWORD *)v14;
        unsigned char v12[16] = v12[6];
        long long v16 = (char *)v3 + i;
        *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
        if (!i) {
          goto LABEL_46;
        }
      }
LABEL_23:
      int v20 = *((_DWORD *)v16 - 10);
      int v21 = v20 >> 31;
      int v22 = v16 - 32;
      if (v20 >> 31 == v20)
      {
        *(void *)&long long v45 = *(void *)v22;
        int v21 = v20;
      }
      else
      {
        long long v45 = *(_OWORD *)v22;
        int v46 = *((_DWORD *)v16 - 4);
      }
      int v23 = v21 ^ v20;
      int v44 = v23;
      int v24 = v37;
      int v25 = v37 >> 31;
      int v26 = v23 >> 31;
      if (v37 >> 31 == v37)
      {
        if (v26 != v23) {
          goto LABEL_12;
        }
        uint64_t v27 = v38;
        if ((unint64_t)v38 < (unint64_t)v45) {
          goto LABEL_12;
        }
LABEL_35:
        *(void *)&long long v42 = v27;
        int v28 = 0;
        int v41 = 0;
        int v29 = 0;
        if (*((_DWORD *)v16 - 10) != *((int *)v16 - 10) >> 31) {
          goto LABEL_40;
        }
        goto LABEL_36;
      }
      if (v26 != v23)
      {
        BOOL result = (int *)sub_1001E6FAC((unsigned __int8 *)&v38, (unsigned __int8 *)&v45);
        if (result) {
          goto LABEL_12;
        }
        int v24 = v37;
        int v25 = v37 >> 31;
      }
      if (v25 == v24)
      {
        uint64_t v27 = v38;
        goto LABEL_35;
      }
      long long v42 = v38;
      int v43 = v39;
      int v28 = v25 ^ v24;
      int v41 = v28;
      int v29 = v28 >> 31;
      if (*((_DWORD *)v16 - 10) != *((int *)v16 - 10) >> 31)
      {
LABEL_40:
        if (v29 != v28)
        {
          BOOL result = (int *)sub_1001E6FAC((unsigned __int8 *)v16 - 32, (unsigned __int8 *)&v42);
          if (result)
          {
LABEL_43:
            int v30 = (int *)((char *)v3 + i);
            int v31 = *(int *)((char *)v3 + i);
            int v32 = v37;
            if (v31 == v37) {
              goto LABEL_44;
            }
LABEL_47:
            int v34 = v32 ^ (v32 >> 31);
            if (v34)
            {
              *(_OWORD *)(v30 + 2) = v38;
              v30[6] = v39;
              *int v30 = v34;
            }
            else
            {
              *((void *)v30 + 1) = v38;
              *int v30 = 0;
            }
            goto LABEL_5;
          }
        }
        goto LABEL_42;
      }
LABEL_36:
      if (v29 != v28 || *(void *)v22 < (unint64_t)v42) {
        goto LABEL_43;
      }
LABEL_42:
      BOOL result = (int *)sub_100095774(&v40, (int *)((char *)v3 + i - 8));
      if (!result) {
        goto LABEL_43;
      }
LABEL_12:
      int v8 = *v12;
    }
    int v17 = v13 ^ (v13 >> 31);
    int v18 = v12 + 2;
    long long v19 = v12 + 12;
    if (v17)
    {
      *long long v19 = *v18;
      unsigned char v12[16] = v12[6];
      v12[10] = v17;
      long long v16 = (char *)v3 + i;
      *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
      if (!i) {
        goto LABEL_46;
      }
      goto LABEL_23;
    }
    *(void *)long long v19 = *(void *)v18;
    v12[10] = 0;
    long long v16 = (char *)v3 + i;
    *(int *)((char *)v3 + i + 72) = *(int *)((char *)v3 + i + 32);
    if (i) {
      goto LABEL_23;
    }
LABEL_46:
    int v30 = v3;
    int v31 = *v3;
    int v32 = v37;
    if (*v3 != v37) {
      goto LABEL_47;
    }
LABEL_44:
    BOOL v33 = v30 + 2;
    if (v31 == v31 >> 31)
    {
      *BOOL v33 = v38;
    }
    else
    {
      *(_OWORD *)BOOL v33 = v38;
      v30[6] = v39;
    }
LABEL_5:
    v30[8] = v40;
LABEL_6:
    uint64_t v4 = (uint64_t)(v7 + 10);
    v5 += 40;
    char v6 = v7;
    if (v7 + 10 != a2) {
      continue;
    }
    return result;
  }
}

unsigned __int8 *sub_1002875F0(unsigned __int8 *result, unsigned __int8 *a2, uint64_t a3)
{
  if (result == a2) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = (uint64_t)(result + 40);
  if (result + 40 == a2) {
    return result;
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  unsigned int v8 = 0;
  while (2)
  {
    int v9 = (int *)v5;
    BOOL result = (unsigned __int8 *)sub_100287068(a3, v5, v4);
    if (!result) {
      goto LABEL_6;
    }
    int v10 = *v9;
    int v11 = *v9 >> 31;
    int v12 = v4 + 48;
    if (v10 >> 31 == v10)
    {
      *(void *)&long long v35 = *v12;
      int v11 = *v9;
    }
    else
    {
      long long v35 = *(_OWORD *)v12;
      int v36 = *((_DWORD *)v4 + 16);
    }
    int v34 = v11 ^ v10;
    int v37 = *((_DWORD *)v4 + 18);
    while (1)
    {
      if (v10 == *(_DWORD *)v4)
      {
        int v13 = v4 + 8;
        int v14 = v4 + 48;
        if (v10 == v10 >> 31)
        {
          *int v14 = *v13;
        }
        else
        {
          *(_OWORD *)int v14 = *(_OWORD *)v13;
          *((_DWORD *)v4 + 16) = *((_DWORD *)v4 + 6);
        }
      }
      else
      {
        int v15 = *(_DWORD *)v4 ^ (*(int *)v4 >> 31);
        if (v15)
        {
          *((_OWORD *)v4 + 3) = *(_OWORD *)(v4 + 8);
          *((_DWORD *)v4 + 16) = *((_DWORD *)v4 + 6);
          *((_DWORD *)v4 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v15;
        }
        else
        {
          *((void *)v4 + 6) = *((void *)v4 + 1);
          *((_DWORD *)v4 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
        }
      }
      *((_DWORD *)v4 + 18) = *((_DWORD *)v4 + 8);
      int v16 = *((_DWORD *)v4 - 10);
      int v17 = v16 >> 31;
      int v18 = v16;
      if (v16 >> 31 != v16)
      {
        LODWORD(v33) = *(v4 - 23);
        HIDWORD(v33) = *(v4 - 24);
        LODWORD(v32) = *(v4 - 21);
        HIDWORD(v32) = *(v4 - 22);
        LODWORD(v31) = *(v4 - 19);
        HIDWORD(v31) = *(v4 - 20);
        LODWORD(v3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(v4 - 17);
        HIDWORD(v3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(v4 - 18);
        unsigned int v6 = *(v4 - 16);
        unsigned int v7 = *(v4 - 15);
        unsigned int v8 = *(v4 - 14);
        int v18 = v16 >> 31;
        unsigned __int8 v3 = *(v4 - 13);
      }
      BOOL result = v4 - 32;
      unint64_t v19 = *((void *)v4 - 4);
      int v20 = v18 ^ v16;
      int v21 = v34 >> 31;
      int v22 = (v18 ^ v16) >> 31;
      if (v34 >> 31 == v34)
      {
        if (v22 != v20 || (unint64_t)v35 < v19) {
          goto LABEL_12;
        }
        *(void *)&long long v39 = v35;
        int v23 = 0;
        int v38 = 0;
        int v24 = 0;
        if (v17 != v16) {
          goto LABEL_26;
        }
      }
      else
      {
        if (v22 != v20)
        {
          if (v35 < *((void *)v4 - 4)) {
            goto LABEL_12;
          }
          if (v35 <= *((void *)v4 - 4))
          {
            if (BYTE1(v35) < BYTE1(v19)) {
              goto LABEL_12;
            }
            if (BYTE1(v35) <= BYTE1(v19))
            {
              if (BYTE2(v35) < BYTE2(v19)) {
                goto LABEL_12;
              }
              if (BYTE2(v35) <= BYTE2(v19))
              {
                if (BYTE3(v35) < BYTE3(v19)) {
                  goto LABEL_12;
                }
                if (BYTE3(v35) <= BYTE3(v19))
                {
                  if (BYTE4(v35) < BYTE4(v19)) {
                    goto LABEL_12;
                  }
                  if (BYTE4(v35) <= BYTE4(v19))
                  {
                    if (BYTE5(v35) < BYTE5(v19)) {
                      goto LABEL_12;
                    }
                    if (BYTE5(v35) <= BYTE5(v19))
                    {
                      if (BYTE6(v35) < BYTE6(v19)) {
                        goto LABEL_12;
                      }
                      if (BYTE6(v35) <= BYTE6(v19))
                      {
                        unint64_t v25 = HIBYTE(v19);
                        if (BYTE7(v35) < v25
                          || BYTE7(v35) <= v25
                          && (BYTE8(v35) < HIDWORD(v33)
                           || HIDWORD(v33) >= BYTE8(v35)
                           && (BYTE9(v35) < v33
                            || v33 >= BYTE9(v35)
                            && (BYTE10(v35) < HIDWORD(v32)
                             || HIDWORD(v32) >= BYTE10(v35)
                             && (BYTE11(v35) < v32
                              || v32 >= BYTE11(v35)
                              && (BYTE12(v35) < HIDWORD(v31)
                               || HIDWORD(v31) >= BYTE12(v35)
                               && (BYTE13(v35) < v31
                                || v31 >= BYTE13(v35)
                                && (BYTE14(v35) < HIDWORD(v30)
                                 || HIDWORD(v30) >= BYTE14(v35)
                                 && (HIBYTE(v35) < v30
                                  || v30 >= HIBYTE(v35)
                                  && (v36 < v6
                                   || v6 >= v36
                                   && (BYTE1(v36) < v7
                                    || v7 >= BYTE1(v36)
                                    && (BYTE2(v36) < v8 || v8 >= BYTE2(v36) && HIBYTE(v36) < v3))))))))))))
                        {
                          goto LABEL_12;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        long long v39 = v35;
        int v40 = v36;
        int v23 = v21 ^ v34;
        int v38 = v21 ^ v34;
        int v24 = (v21 ^ v34) >> 31;
        if (v17 != v16)
        {
LABEL_26:
          if (v24 != v23)
          {
            BOOL result = (unsigned __int8 *)sub_1001E6FAC(result, (unsigned __int8 *)&v39);
            if (result) {
              break;
            }
          }
          goto LABEL_35;
        }
      }
      if (v24 != v23 || *(void *)result < (unint64_t)v39) {
        break;
      }
LABEL_35:
      BOOL result = (unsigned __int8 *)sub_100095774(&v37, (_DWORD *)v4 - 2);
      if (!result) {
        break;
      }
LABEL_12:
      int v10 = *(_DWORD *)v4;
      v4 -= 40;
    }
    if (*(_DWORD *)v4 == v34)
    {
      int v26 = v4 + 8;
      if (*(_DWORD *)v4 == *(int *)v4 >> 31)
      {
        *int v26 = v35;
      }
      else
      {
        *((_DWORD *)v4 + 6) = v36;
        *(_OWORD *)int v26 = v35;
      }
    }
    else
    {
      int v27 = v34 ^ (v34 >> 31);
      if (v27)
      {
        *((_DWORD *)v4 + 6) = v36;
        *(_OWORD *)(v4 + 8) = v35;
        *(_DWORD *)uint64_t v4 = v27;
      }
      else
      {
        *((void *)v4 + 1) = v35;
        *(_DWORD *)uint64_t v4 = 0;
      }
    }
    *((_DWORD *)v4 + 8) = v37;
LABEL_6:
    uint64_t v5 = (uint64_t)(v9 + 10);
    uint64_t v4 = (unsigned __int8 *)v9;
    if (v9 + 10 != (int *)a2) {
      continue;
    }
    return result;
  }
}

uint64_t sub_100287B04(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = sub_100287068(a4, a2, a1);
  uint64_t result = sub_100287068(a4, a3, (_DWORD *)a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    int v17 = *(_DWORD *)a2;
    int v18 = *(int *)a2 >> 31;
    int v20 = (void *)(a2 + 8);
    uint64_t v19 = *(void *)(a2 + 8);
    if (v18 == *(_DWORD *)a2)
    {
      int v21 = *(_DWORD *)a3;
      if (v17 == *(_DWORD *)a3)
      {
        int v22 = 0;
        *int v20 = *(void *)(a3 + 8);
        int v23 = 0;
        if (*(_DWORD *)a3) {
          goto LABEL_22;
        }
        goto LABEL_36;
      }
      int v22 = 0;
    }
    else
    {
      uint64_t v70 = *(void *)(a2 + 16);
      int v71 = *(_DWORD *)(a2 + 24);
      int v22 = v18 ^ v17;
      int v21 = *(_DWORD *)a3;
      if (v17 == *(_DWORD *)a3)
      {
        long long v32 = *(_OWORD *)(a3 + 8);
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)int v20 = v32;
        int v23 = v22 >> 31;
        if (*(_DWORD *)a3 != v22) {
          goto LABEL_22;
        }
        goto LABEL_36;
      }
    }
    int v38 = v21 ^ (v21 >> 31);
    long long v39 = (long long *)(a3 + 8);
    if (v38)
    {
      long long v40 = *v39;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)int v20 = v40;
      *(_DWORD *)a2 = v38;
      int v23 = v22 >> 31;
      if (*(_DWORD *)a3 != v22) {
        goto LABEL_22;
      }
    }
    else
    {
      *(void *)(a2 + 8) = *(void *)v39;
      *(_DWORD *)a2 = 0;
      int v23 = v22 >> 31;
      if (*(_DWORD *)a3 != v22)
      {
LABEL_22:
        *(void *)(a3 + 8) = v19;
        if (v23 != v22)
        {
          *(void *)(a3 + 16) = v70;
          *(_DWORD *)(a3 + 24) = v71;
          *(_DWORD *)a3 = v23 ^ v22;
        }
        else
        {
          *(_DWORD *)a3 = 0;
        }
        goto LABEL_46;
      }
    }
LABEL_36:
    *(void *)(a3 + 8) = v19;
    if (v23 != v22)
    {
      *(void *)(a3 + 16) = v70;
      *(_DWORD *)(a3 + 24) = v71;
    }
LABEL_46:
    long long v45 = (int *)(a2 + 32);
    int v46 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(a3 + 32) = v46;
    if (!sub_100287068(a4, a2, a1)) {
      return 1;
    }
    int v47 = *a1;
    int v48 = *a1 >> 31;
    int v50 = a1 + 2;
    uint64_t v49 = *((void *)a1 + 1);
    if (v48 == *a1)
    {
      int v51 = *(_DWORD *)a2;
      if (v47 == *(_DWORD *)a2)
      {
        int v52 = 0;
        void *v50 = *v20;
        int v53 = 0;
        if (*(_DWORD *)a2) {
          goto LABEL_53;
        }
LABEL_75:
        *int v20 = v49;
        if (v53 != v52)
        {
          *(void *)(a2 + 16) = v70;
          *(_DWORD *)(a2 + 24) = v71;
          int v44 = a1 + 8;
          goto LABEL_86;
        }
LABEL_76:
        int v44 = a1 + 8;
LABEL_86:
        uint64_t result = 2;
        goto LABEL_87;
      }
      int v52 = 0;
    }
    else
    {
      uint64_t v70 = *((void *)a1 + 2);
      int v71 = a1[6];
      int v52 = v48 ^ v47;
      int v51 = *(_DWORD *)a2;
      if (v47 == *(_DWORD *)a2)
      {
        long long v54 = *(_OWORD *)v20;
        a1[6] = *(_DWORD *)(a2 + 24);
        *(_OWORD *)int v50 = v54;
        int v53 = v52 >> 31;
        if (*(_DWORD *)a2 == v52) {
          goto LABEL_75;
        }
        goto LABEL_53;
      }
    }
    int v64 = v51 ^ (v51 >> 31);
    if (!v64)
    {
      *((void *)a1 + 1) = *v20;
      *a1 = 0;
      int v53 = v52 >> 31;
      if (*(_DWORD *)a2 != v52) {
        goto LABEL_53;
      }
      goto LABEL_75;
    }
    long long v65 = *(_OWORD *)v20;
    a1[6] = *(_DWORD *)(a2 + 24);
    *(_OWORD *)int v50 = v65;
    *a1 = v64;
    int v53 = v52 >> 31;
    if (*(_DWORD *)a2 == v52) {
      goto LABEL_75;
    }
LABEL_53:
    *int v20 = v49;
    if (v53 == v52)
    {
      *(_DWORD *)a2 = 0;
      int v44 = a1 + 8;
      goto LABEL_86;
    }
    *(void *)(a2 + 16) = v70;
    *(_DWORD *)(a2 + 24) = v71;
    *(_DWORD *)a2 = v53 ^ v52;
    goto LABEL_76;
  }
  int v10 = a1 + 2;
  if (!result)
  {
    int v24 = *a1;
    int v25 = *a1 >> 31;
    uint64_t v26 = *((void *)a1 + 1);
    if (v25 == *a1)
    {
      int v27 = *(_DWORD *)a2;
      if (v24 == *(_DWORD *)a2)
      {
        int v28 = 0;
        *int v10 = *(void *)(a2 + 8);
        int v29 = 0;
        if (*(_DWORD *)a2) {
          goto LABEL_26;
        }
        goto LABEL_41;
      }
      int v28 = 0;
    }
    else
    {
      uint64_t v70 = *((void *)a1 + 2);
      int v71 = a1[6];
      int v28 = v25 ^ v24;
      int v27 = *(_DWORD *)a2;
      if (v24 == *(_DWORD *)a2)
      {
        long long v33 = *(_OWORD *)(a2 + 8);
        a1[6] = *(_DWORD *)(a2 + 24);
        *(_OWORD *)int v10 = v33;
        int v29 = v28 >> 31;
        if (*(_DWORD *)a2 != v28) {
          goto LABEL_26;
        }
        goto LABEL_41;
      }
    }
    int v41 = v27 ^ (v27 >> 31);
    long long v42 = (long long *)(a2 + 8);
    if (v41)
    {
      long long v43 = *v42;
      a1[6] = *(_DWORD *)(a2 + 24);
      *(_OWORD *)int v10 = v43;
      *a1 = v41;
      int v29 = v28 >> 31;
      if (*(_DWORD *)a2 != v28) {
        goto LABEL_26;
      }
    }
    else
    {
      *((void *)a1 + 1) = *(void *)v42;
      *a1 = 0;
      int v29 = v28 >> 31;
      if (*(_DWORD *)a2 != v28)
      {
LABEL_26:
        *(void *)(a2 + 8) = v26;
        int v34 = v29 ^ v28;
        if (v34)
        {
          *(void *)(a2 + 16) = v70;
          *(_DWORD *)(a2 + 24) = v71;
          *(_DWORD *)a2 = v34;
        }
        else
        {
          *(_DWORD *)a2 = 0;
        }
        goto LABEL_56;
      }
    }
LABEL_41:
    *(void *)(a2 + 8) = v26;
    if (v29 != v28)
    {
      *(void *)(a2 + 16) = v70;
      *(_DWORD *)(a2 + 24) = v71;
    }
LABEL_56:
    int v44 = (int *)(a2 + 32);
    int v55 = a1[8];
    a1[8] = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = v55;
    if (sub_100287068(a4, a3, (_DWORD *)a2))
    {
      int v56 = *(_DWORD *)a2;
      int v57 = *(int *)a2 >> 31;
      unint64_t v59 = (void *)(a2 + 8);
      uint64_t v58 = *(void *)(a2 + 8);
      if (v57 == *(_DWORD *)a2)
      {
        int v60 = *(_DWORD *)a3;
        if (v56 == *(_DWORD *)a3)
        {
          int v61 = 0;
          *unint64_t v59 = *(void *)(a3 + 8);
          int v62 = 0;
          if (*(_DWORD *)a3) {
            goto LABEL_64;
          }
          goto LABEL_80;
        }
        int v61 = 0;
      }
      else
      {
        uint64_t v70 = *(void *)(a2 + 16);
        int v71 = *(_DWORD *)(a2 + 24);
        int v61 = v57 ^ v56;
        int v60 = *(_DWORD *)a3;
        if (v56 == *(_DWORD *)a3)
        {
          long long v63 = *(_OWORD *)(a3 + 8);
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
          *(_OWORD *)unint64_t v59 = v63;
          int v62 = v61 >> 31;
          if (*(_DWORD *)a3 != v61) {
            goto LABEL_64;
          }
          goto LABEL_80;
        }
      }
      int v66 = v60 ^ (v60 >> 31);
      unsigned int v67 = (long long *)(a3 + 8);
      if (v66)
      {
        long long v68 = *v67;
        *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
        *(_OWORD *)unint64_t v59 = v68;
        *(_DWORD *)a2 = v66;
        int v62 = v61 >> 31;
        if (*(_DWORD *)a3 != v61) {
          goto LABEL_64;
        }
      }
      else
      {
        *(void *)(a2 + 8) = *(void *)v67;
        *(_DWORD *)a2 = 0;
        int v62 = v61 >> 31;
        if (*(_DWORD *)a3 != v61)
        {
LABEL_64:
          *(void *)(a3 + 8) = v58;
          if (v62 != v61)
          {
            *(void *)(a3 + 16) = v70;
            *(_DWORD *)(a3 + 24) = v71;
            *(_DWORD *)a3 = v62 ^ v61;
          }
          else
          {
            *(_DWORD *)a3 = 0;
          }
LABEL_85:
          long long v45 = (int *)(a3 + 32);
          goto LABEL_86;
        }
      }
LABEL_80:
      *(void *)(a3 + 8) = v58;
      if (v62 != v61)
      {
        *(void *)(a3 + 16) = v70;
        *(_DWORD *)(a3 + 24) = v71;
      }
      goto LABEL_85;
    }
    return 1;
  }
  int v11 = *a1;
  int v12 = *a1 >> 31;
  uint64_t v13 = *((void *)a1 + 1);
  if (v12 == *a1)
  {
    int v14 = *(_DWORD *)a3;
    if (v11 == *(_DWORD *)a3)
    {
      int v15 = 0;
      *int v10 = *(void *)(a3 + 8);
      int v16 = 0;
      if (*(_DWORD *)a3) {
        goto LABEL_18;
      }
LABEL_31:
      *(void *)(a3 + 8) = v13;
      if (v16 != v15)
      {
        *(void *)(a3 + 16) = v70;
        *(_DWORD *)(a3 + 24) = v71;
      }
      goto LABEL_44;
    }
    int v15 = 0;
  }
  else
  {
    uint64_t v70 = *((void *)a1 + 2);
    int v71 = a1[6];
    int v15 = v12 ^ v11;
    int v14 = *(_DWORD *)a3;
    if (v11 == *(_DWORD *)a3)
    {
      long long v30 = *(_OWORD *)(a3 + 8);
      a1[6] = *(_DWORD *)(a3 + 24);
      *(_OWORD *)int v10 = v30;
      int v16 = v15 >> 31;
      if (*(_DWORD *)a3 != v15) {
        goto LABEL_18;
      }
      goto LABEL_31;
    }
  }
  int v35 = v14 ^ (v14 >> 31);
  int v36 = (long long *)(a3 + 8);
  if (v35)
  {
    long long v37 = *v36;
    a1[6] = *(_DWORD *)(a3 + 24);
    *(_OWORD *)int v10 = v37;
    *a1 = v35;
    int v16 = v15 >> 31;
    if (*(_DWORD *)a3 != v15) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
  *((void *)a1 + 1) = *(void *)v36;
  *a1 = 0;
  int v16 = v15 >> 31;
  if (*(_DWORD *)a3 == v15) {
    goto LABEL_31;
  }
LABEL_18:
  *(void *)(a3 + 8) = v13;
  int v31 = v16 ^ v15;
  if (v31)
  {
    *(void *)(a3 + 16) = v70;
    *(_DWORD *)(a3 + 24) = v71;
    *(_DWORD *)a3 = v31;
  }
  else
  {
    *(_DWORD *)a3 = 0;
  }
LABEL_44:
  int v44 = a1 + 8;
  long long v45 = (int *)(a3 + 32);
  uint64_t result = 1;
LABEL_87:
  int v69 = *v44;
  *int v44 = *v45;
  int *v45 = v69;
  return result;
}

int *sub_1002881CC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  unsigned int v6 = (void *)(a1 + 8);
  int v5 = *(_DWORD *)a1;
  int v7 = *(int *)a1 >> 31;
  uint64_t v65 = a1 + 8;
  if (v5 >> 31 == v5)
  {
    *(void *)&long long v78 = *v6;
    int v7 = v5;
  }
  else
  {
    long long v78 = *(_OWORD *)v6;
    int v79 = *(_DWORD *)(a1 + 24);
  }
  int v8 = v7 ^ v5;
  int v9 = *(_DWORD *)(a1 + 32);
  int v10 = &v77;
  int v77 = v8;
  int v80 = v9;
  if (sub_100287068(a3, (uint64_t)&v77, (_DWORD *)(a2 - 40)))
  {
    int v11 = (int *)a1;
    do
      v11 += 10;
    while (!sub_100287068(a3, (uint64_t)&v77, v11));
  }
  else
  {
    int v12 = (int *)(a1 + 40);
    do
    {
      int v11 = v12;
      if ((unint64_t)v12 >= v4) {
        break;
      }
      BOOL v13 = sub_100287068(a3, (uint64_t)&v77, v12);
      int v12 = v11 + 10;
    }
    while (!v13);
  }
  if ((unint64_t)v11 < v4)
  {
    do
      v4 -= 40;
    while (sub_100287068(a3, (uint64_t)&v77, (_DWORD *)v4));
  }
  if ((unint64_t)v11 < v4)
  {
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v74 = 0;
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    unsigned int v16 = 0;
    unsigned int v17 = 0;
    do
    {
      int v18 = *v11;
      int v19 = *v11 >> 31;
      int v21 = v11 + 2;
      uint64_t v20 = *((void *)v11 + 1);
      if (v19 == *v11)
      {
        int v22 = *(_DWORD *)v4;
        if (v18 == *(_DWORD *)v4)
        {
          int v23 = 0;
          *int v21 = *(void *)(v4 + 8);
          int v24 = 0;
          if (!*(_DWORD *)v4) {
            goto LABEL_26;
          }
          goto LABEL_29;
        }
        int v23 = 0;
      }
      else
      {
        uint64_t v81 = *((void *)v11 + 2);
        LODWORD(v82) = v11[6];
        int v23 = v19 ^ v18;
        int v22 = *(_DWORD *)v4;
        if (v18 == *(_DWORD *)v4)
        {
          long long v25 = *(_OWORD *)(v4 + 8);
          void v11[6] = *(_DWORD *)(v4 + 24);
          *(_OWORD *)int v21 = v25;
          int v24 = v23 >> 31;
          if (*(_DWORD *)v4 == v23) {
            goto LABEL_26;
          }
          goto LABEL_29;
        }
      }
      int v26 = v22 ^ (v22 >> 31);
      int v27 = (long long *)(v4 + 8);
      if (v26)
      {
        long long v28 = *v27;
        void v11[6] = *(_DWORD *)(v4 + 24);
        *(_OWORD *)int v21 = v28;
        *int v11 = v26;
        int v24 = v23 >> 31;
        if (*(_DWORD *)v4 == v23) {
          goto LABEL_26;
        }
      }
      else
      {
        *((void *)v11 + 1) = *(void *)v27;
        *int v11 = 0;
        int v24 = v23 >> 31;
        if (*(_DWORD *)v4 == v23)
        {
LABEL_26:
          *(void *)(v4 + 8) = v20;
          if (v24 != v23)
          {
            *(void *)(v4 + 16) = v81;
            *(_DWORD *)(v4 + 24) = v82;
          }
          goto LABEL_32;
        }
      }
LABEL_29:
      *(void *)(v4 + 8) = v20;
      if (v24 != v23)
      {
        *(void *)(v4 + 16) = v81;
        *(_DWORD *)(v4 + 24) = v82;
        *(_DWORD *)unint64_t v4 = v24 ^ v23;
      }
      else
      {
        *(_DWORD *)unint64_t v4 = 0;
      }
LABEL_32:
      int v29 = v11[8];
      v11[8] = *(_DWORD *)(v4 + 32);
      *(_DWORD *)(v4 + 32) = v29;
      for (uint64_t i = v11 + 18; ; i += 10)
      {
        int v31 = *(i - 8);
        int v32 = v31 >> 31;
        int v33 = v31;
        if (v31 >> 31 != v31)
        {
          HIDWORD(v72) = *((unsigned __int8 *)i - 15);
          LODWORD(v73) = *((unsigned __int8 *)i - 16);
          HIDWORD(v71) = *((unsigned __int8 *)i - 13);
          LODWORD(v72) = *((unsigned __int8 *)i - 14);
          HIDWORD(v7sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *((unsigned __int8 *)i - 11);
          LODWORD(v71) = *((unsigned __int8 *)i - 12);
          HIDWORD(v69) = *((unsigned __int8 *)i - 9);
          LODWORD(v7sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *((unsigned __int8 *)i - 10);
          HIDWORD(v68) = *((unsigned __int8 *)i - 7);
          LODWORD(v69) = *((unsigned __int8 *)i - 8);
          LODWORD(v68) = *((unsigned __int8 *)i - 6);
          int v33 = v31 >> 31;
          unsigned __int8 v67 = *((unsigned char *)i - 5);
        }
        unint64_t v34 = *((void *)i - 3);
        int v35 = v33 ^ v31;
        int v36 = v77 >> 31;
        int v37 = (v33 ^ v31) >> 31;
        if (v77 >> 31 == v77) {
          break;
        }
        if (v37 != v35
          && (v78 < *((void *)i - 3)
           || v78 <= *((void *)i - 3)
           && (BYTE1(v78) < BYTE1(v34)
            || BYTE1(v78) <= BYTE1(v34)
            && (BYTE2(v78) < BYTE2(v34)
             || BYTE2(v78) <= BYTE2(v34)
             && (BYTE3(v78) < BYTE3(v34)
              || BYTE3(v78) <= BYTE3(v34)
              && (BYTE4(v78) < BYTE4(v34)
               || BYTE4(v78) <= BYTE4(v34)
               && (BYTE5(v78) < BYTE5(v34)
                || BYTE5(v78) <= BYTE5(v34)
                && (BYTE6(v78) < BYTE6(v34)
                 || BYTE6(v78) <= BYTE6(v34)
                 && (BYTE7(v78) < HIBYTE(v34)
                  || BYTE7(v78) <= HIBYTE(v34)
                  && (BYTE8(v78) < v73
                   || v73 >= BYTE8(v78)
                   && (BYTE9(v78) < HIDWORD(v72)
                    || HIDWORD(v72) >= BYTE9(v78)
                    && (BYTE10(v78) < v72
                     || v72 >= BYTE10(v78)
                     && (BYTE11(v78) < HIDWORD(v71)
                      || HIDWORD(v71) >= BYTE11(v78)
                      && (BYTE12(v78) < v71
                       || v71 >= BYTE12(v78)
                       && (BYTE13(v78) < HIDWORD(v70)
                        || HIDWORD(v70) >= BYTE13(v78)
                        && (BYTE14(v78) < v70
                         || v70 >= BYTE14(v78)
                         && (HIBYTE(v78) < HIDWORD(v69)
                          || HIDWORD(v69) >= HIBYTE(v78)
                          && (v79 < v69
                           || v69 >= v79
                           && (BYTE1(v79) < HIDWORD(v68)
                            || HIDWORD(v68) >= BYTE1(v79)
                            && (BYTE2(v79) < v68
                             || v68 >= BYTE2(v79) && HIBYTE(v79) < v67))))))))))))))))))))
        {
          goto LABEL_90;
        }
        long long v82 = v78;
        int v83 = v79;
        int v39 = v36 ^ v77;
        LODWORD(v81) = v36 ^ v77;
        int v40 = (v36 ^ v77) >> 31;
        if (v32 == v31)
        {
LABEL_87:
          if (v40 != v39 || v34 < (unint64_t)v82) {
            continue;
          }
          goto LABEL_89;
        }
LABEL_43:
        if (v40 != v39 && sub_1001E6FAC((unsigned __int8 *)i - 24, (unsigned __int8 *)&v82)) {
          continue;
        }
LABEL_89:
        if (sub_100095774(&v80, i)) {
          goto LABEL_90;
        }
      }
      if (v37 == v35 && (unint64_t)v78 >= v34)
      {
        *(void *)&long long v82 = v78;
        int v39 = 0;
        LODWORD(v81) = 0;
        int v40 = 0;
        if (v32 == v31) {
          goto LABEL_87;
        }
        goto LABEL_43;
      }
LABEL_90:
      int v11 = i - 8;
      while (1)
      {
        while (1)
        {
          v4 -= 40;
          int v41 = (unsigned __int8 *)(v4 + 8);
          int v42 = *(_DWORD *)v4;
          int v43 = *(_DWORD *)v4;
          if (*(int *)v4 >> 31 != *(_DWORD *)v4)
          {
            LODWORD(v76) = *(unsigned __int8 *)(v4 + 17);
            HIDWORD(v76) = *(unsigned __int8 *)(v4 + 16);
            LODWORD(v75) = *(unsigned __int8 *)(v4 + 19);
            HIDWORD(v75) = *(unsigned __int8 *)(v4 + 18);
            LODWORD(v74) = *(unsigned __int8 *)(v4 + 21);
            HIDWORD(v74) = *(unsigned __int8 *)(v4 + 20);
            HIDWORD(v73) = *(unsigned __int8 *)(v4 + 22);
            unsigned int v14 = *(unsigned __int8 *)(v4 + 23);
            unsigned int v15 = *(unsigned __int8 *)(v4 + 24);
            unsigned int v16 = *(unsigned __int8 *)(v4 + 25);
            unsigned int v17 = *(unsigned __int8 *)(v4 + 26);
            int v43 = v42 >> 31;
            LOBYTE(v1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *(unsigned char *)(v4 + 27);
          }
          unint64_t v44 = *(void *)v41;
          int v45 = v43 ^ v42;
          int v46 = v77 >> 31;
          int v47 = v45 >> 31;
          if (v77 >> 31 != v77) {
            break;
          }
          if (v47 == v45 && (unint64_t)v78 >= v44)
          {
            *(void *)&long long v82 = v78;
            int v49 = 0;
            LODWORD(v81) = 0;
            int v50 = 0;
            if (*(_DWORD *)v4 == *(int *)v4 >> 31) {
              goto LABEL_107;
            }
LABEL_100:
            if (v50 != v49 && sub_1001E6FAC(v41, (unsigned __int8 *)&v82)) {
              goto LABEL_15;
            }
LABEL_109:
            if (!sub_100095774(&v80, (_DWORD *)(v4 + 32))) {
              goto LABEL_15;
            }
          }
        }
        if (v47 == v45) {
          break;
        }
        if (v78 >= *(void *)v41)
        {
          if (v78 > *(void *)v41) {
            break;
          }
          if (BYTE1(v78) >= BYTE1(v44))
          {
            if (BYTE1(v78) > BYTE1(v44)) {
              break;
            }
            if (BYTE2(v78) >= BYTE2(v44))
            {
              if (BYTE2(v78) > BYTE2(v44)) {
                break;
              }
              if (BYTE3(v78) >= BYTE3(v44))
              {
                if (BYTE3(v78) > BYTE3(v44)) {
                  break;
                }
                if (BYTE4(v78) >= BYTE4(v44))
                {
                  if (BYTE4(v78) > BYTE4(v44)) {
                    break;
                  }
                  if (BYTE5(v78) >= BYTE5(v44))
                  {
                    if (BYTE5(v78) > BYTE5(v44)) {
                      break;
                    }
                    if (BYTE6(v78) >= BYTE6(v44))
                    {
                      if (BYTE6(v78) > BYTE6(v44)) {
                        break;
                      }
                      unint64_t v51 = HIBYTE(v44);
                      if (BYTE7(v78) >= v51
                        && (BYTE7(v78) > v51
                         || BYTE8(v78) >= HIDWORD(v76)
                         && (HIDWORD(v76) < BYTE8(v78)
                          || BYTE9(v78) >= v76
                          && (v76 < BYTE9(v78)
                           || BYTE10(v78) >= HIDWORD(v75)
                           && (HIDWORD(v75) < BYTE10(v78)
                            || BYTE11(v78) >= v75
                            && (v75 < BYTE11(v78)
                             || BYTE12(v78) >= HIDWORD(v74)
                             && (HIDWORD(v74) < BYTE12(v78)
                              || BYTE13(v78) >= v74
                              && (v74 < BYTE13(v78)
                               || BYTE14(v78) >= HIDWORD(v73)
                               && (HIDWORD(v73) < BYTE14(v78)
                                || HIBYTE(v78) >= v14
                                && (v14 < HIBYTE(v78)
                                 || v79 >= v15
                                 && (v15 < v79
                                  || BYTE1(v79) >= v16
                                  && (v16 < BYTE1(v79)
                                   || BYTE2(v79) >= v17
                                   && (v17 < BYTE2(v79) || HIBYTE(v79) >= v10)))))))))))))
                      {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      long long v82 = v78;
      int v83 = v79;
      int v49 = v46 ^ v77;
      LODWORD(v81) = v46 ^ v77;
      int v50 = (v46 ^ v77) >> 31;
      if (*(_DWORD *)v4 != *(int *)v4 >> 31) {
        goto LABEL_100;
      }
LABEL_107:
      if (v50 == v49 && *(void *)v41 >= (unint64_t)v82) {
        goto LABEL_109;
      }
LABEL_15:
      ;
    }
    while ((unint64_t)v11 < v4);
  }
  int v52 = v11 - 10;
  if (v11 - 10 != (int *)a1)
  {
    if (*(_DWORD *)a1 == *v52)
    {
      int v53 = v11 - 8;
      if (*(_DWORD *)a1 == *(int *)a1 >> 31)
      {
        *(void *)uint64_t v65 = *(void *)v53;
      }
      else
      {
        long long v57 = *(_OWORD *)v53;
        *(_DWORD *)(v65 + 16) = *(v11 - 4);
        *(_OWORD *)uint64_t v65 = v57;
      }
    }
    else
    {
      int v54 = *v52 ^ (*v52 >> 31);
      int v55 = v11 - 8;
      if (v54)
      {
        long long v56 = *(_OWORD *)v55;
        *(_DWORD *)(v65 + 16) = *(v11 - 4);
        *(_OWORD *)uint64_t v65 = v56;
        *(_DWORD *)a1 = v54;
      }
      else
      {
        *(void *)(a1 + 8) = *(void *)v55;
        *(_DWORD *)a1 = 0;
      }
    }
    *(_DWORD *)(a1 + 32) = *(v11 - 2);
  }
  int v58 = *v52;
  if (*v52 == v77)
  {
    unint64_t v59 = v11 - 8;
    if (v58 == v58 >> 31)
    {
      *(void *)unint64_t v59 = v78;
    }
    else
    {
      long long v63 = v78;
      *(v11 - 4) = v79;
      *(_OWORD *)unint64_t v59 = v63;
    }
  }
  else
  {
    int v60 = v77 ^ (v77 >> 31);
    int v61 = v11 - 8;
    if (v60)
    {
      long long v62 = v78;
      *(v11 - 4) = v79;
      *(_OWORD *)int v61 = v62;
      *int v52 = v60;
    }
    else
    {
      *(void *)int v61 = v78;
      *int v52 = 0;
    }
  }
  *(v11 - 2) = v80;
  return v11;
}

int *sub_100288B8C(int *a1, unint64_t a2, uint64_t a3)
{
  unsigned int v6 = a1 + 2;
  int v5 = *a1;
  int v7 = *a1 >> 31;
  int v109 = a1 + 2;
  if (v5 >> 31 == v5)
  {
    *(void *)&long long v137 = *v6;
    int v7 = v5;
  }
  else
  {
    long long v137 = *(_OWORD *)v6;
    int v138 = a1[6];
  }
  uint64_t v9 = 0;
  int v10 = v7 ^ v5;
  int v11 = a1[8];
  int v136 = v10;
  int v139 = v11;
  do
  {
    BOOL v12 = sub_100287068(a3, (uint64_t)&a1[v9 + 10], &v136);
    v9 += 10;
  }
  while (v12);
  int v110 = &a1[v9];
  unint64_t v13 = a2;
  if (v9 == 10)
  {
    do
    {
      if ((unint64_t)v110 >= v13) {
        break;
      }
      unint64_t v16 = v13 - 40;
      BOOL v17 = sub_100287068(a3, v13 - 40, &v136);
      unint64_t v13 = v16;
    }
    while (!v17);
  }
  else
  {
    do
    {
      unint64_t v14 = v13 - 40;
      BOOL v15 = sub_100287068(a3, v13 - 40, &v136);
      unint64_t v13 = v14;
    }
    while (!v15);
  }
  if ((unint64_t)v110 >= v13)
  {
    long long v25 = v110;
    uint64_t result = v110 - 10;
    long long v96 = a1;
    if (v110 - 10 != a1) {
      goto LABEL_224;
    }
LABEL_220:
    int v97 = *result;
    int v98 = v136;
    if (*result != v136) {
      goto LABEL_233;
    }
    goto LABEL_221;
  }
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  uint64_t v116 = 0;
  uint64_t v117 = 0;
  unsigned int v118 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  unsigned int v131 = 0;
  uint64_t v132 = 0;
  unsigned int v18 = 0;
  unsigned int v19 = 0;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  unsigned int v133 = 0;
  unsigned int v20 = 0;
  unsigned int v21 = 0;
  unsigned int v22 = 0;
  unsigned int v23 = 0;
  unsigned int v125 = 0;
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  uint64_t v120 = 0;
  unint64_t v24 = v13;
  long long v25 = v110;
  do
  {
    int v26 = *v25;
    int v27 = *v25 >> 31;
    int v29 = v25 + 2;
    uint64_t v28 = *((void *)v25 + 1);
    if (v27 == *v25)
    {
      int v30 = *(_DWORD *)v24;
      if (v26 == *(_DWORD *)v24)
      {
        int v31 = 0;
        *int v29 = *(void *)(v24 + 8);
        int v32 = 0;
        if (*(_DWORD *)v24) {
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      int v31 = 0;
    }
    else
    {
      uint64_t v140 = *((void *)v25 + 2);
      int v141 = v25[6];
      int v31 = v27 ^ v26;
      int v30 = *(_DWORD *)v24;
      if (v26 == *(_DWORD *)v24)
      {
        long long v33 = *(_OWORD *)(v24 + 8);
        v25[6] = *(_DWORD *)(v24 + 24);
        *(_OWORD *)int v29 = v33;
        int v32 = v31 >> 31;
        if (*(_DWORD *)v24 != v31) {
          goto LABEL_27;
        }
        goto LABEL_24;
      }
    }
    int v34 = v30 ^ (v30 >> 31);
    int v35 = (long long *)(v24 + 8);
    if (v34)
    {
      long long v36 = *v35;
      v25[6] = *(_DWORD *)(v24 + 24);
      *(_OWORD *)int v29 = v36;
      *long long v25 = v34;
      int v32 = v31 >> 31;
      if (*(_DWORD *)v24 != v31) {
        goto LABEL_27;
      }
    }
    else
    {
      *((void *)v25 + 1) = *(void *)v35;
      *long long v25 = 0;
      int v32 = v31 >> 31;
      if (*(_DWORD *)v24 != v31)
      {
LABEL_27:
        *(void *)(v24 + 8) = v28;
        if (v32 != v31)
        {
          *(void *)(v24 + 16) = v140;
          *(_DWORD *)(v24 + 24) = v141;
          *(_DWORD *)unint64_t v24 = v32 ^ v31;
        }
        else
        {
          *(_DWORD *)unint64_t v24 = 0;
        }
        goto LABEL_30;
      }
    }
LABEL_24:
    *(void *)(v24 + 8) = v28;
    if (v32 != v31)
    {
      *(void *)(v24 + 16) = v140;
      *(_DWORD *)(v24 + 24) = v141;
    }
LABEL_30:
    int v37 = v25[8];
    v25[8] = *(_DWORD *)(v24 + 32);
    *(_DWORD *)(v24 + 32) = v37;
    for (uint64_t i = v25 + 18; ; i += 10)
    {
      int v39 = v136 >> 31;
      if (v136 >> 31 == v136)
      {
        int v40 = v136;
      }
      else
      {
        unsigned int v18 = BYTE8(v137);
        unsigned int v19 = BYTE9(v137);
        HIDWORD(v135) = BYTE10(v137);
        LODWORD(v135) = BYTE11(v137);
        HIDWORD(v134) = BYTE12(v137);
        LODWORD(v134) = BYTE13(v137);
        unsigned int v133 = BYTE14(v137);
        unsigned int v20 = HIBYTE(v137);
        unsigned int v21 = v138;
        unsigned int v22 = BYTE1(v138);
        unsigned int v23 = BYTE2(v138);
        int v40 = v136 >> 31;
        unsigned __int8 v3 = HIBYTE(v138);
      }
      unint64_t v41 = BYTE7(v137);
      int v42 = v40 ^ v136;
      int v43 = *(i - 8);
      int v44 = v42 >> 31;
      if (v43 >> 31 == v43)
      {
        if (v44 != v42) {
          continue;
        }
        unint64_t v45 = *((void *)i - 3);
        if (v45 < (unint64_t)v137) {
          continue;
        }
        int v46 = 0;
        int v47 = 0;
        if (v39 != v136) {
          goto LABEL_39;
        }
      }
      else
      {
        if (v44 != v42)
        {
          unsigned int v48 = *((unsigned __int8 *)i - 24);
          if (v48 < v137) {
            continue;
          }
          if (v48 <= v137)
          {
            unsigned int v49 = *((unsigned __int8 *)i - 23);
            if (v49 < BYTE1(v137)) {
              continue;
            }
            if (v49 <= BYTE1(v137))
            {
              unsigned int v50 = *((unsigned __int8 *)i - 22);
              if (v50 < BYTE2(v137)) {
                continue;
              }
              if (v50 <= BYTE2(v137))
              {
                unsigned int v51 = *((unsigned __int8 *)i - 21);
                if (v51 < BYTE3(v137)) {
                  continue;
                }
                if (v51 <= BYTE3(v137))
                {
                  unsigned int v52 = *((unsigned __int8 *)i - 20);
                  if (v52 < BYTE4(v137)) {
                    continue;
                  }
                  if (v52 <= BYTE4(v137))
                  {
                    unsigned int v53 = *((unsigned __int8 *)i - 19);
                    if (v53 < BYTE5(v137)) {
                      continue;
                    }
                    if (v53 <= BYTE5(v137))
                    {
                      unsigned int v54 = *((unsigned __int8 *)i - 18);
                      if (v54 < BYTE6(v137)) {
                        continue;
                      }
                      if (v54 <= BYTE6(v137))
                      {
                        unsigned int v55 = *((unsigned __int8 *)i - 17);
                        if (v55 < v41) {
                          continue;
                        }
                        if (v55 <= v41)
                        {
                          unsigned int v56 = *((unsigned __int8 *)i - 16);
                          if (v56 < v18) {
                            continue;
                          }
                          if (v18 >= v56)
                          {
                            unsigned int v57 = *((unsigned __int8 *)i - 15);
                            if (v57 < v19) {
                              continue;
                            }
                            if (v19 >= v57)
                            {
                              unsigned int v58 = *((unsigned __int8 *)i - 14);
                              if (v58 < HIDWORD(v135)) {
                                continue;
                              }
                              if (HIDWORD(v135) >= v58)
                              {
                                unsigned int v59 = *((unsigned __int8 *)i - 13);
                                if (v59 < v135) {
                                  continue;
                                }
                                if (v135 >= v59)
                                {
                                  unsigned int v60 = *((unsigned __int8 *)i - 12);
                                  if (v60 < HIDWORD(v134)) {
                                    continue;
                                  }
                                  if (HIDWORD(v134) >= v60)
                                  {
                                    unsigned int v61 = *((unsigned __int8 *)i - 11);
                                    if (v61 < v134) {
                                      continue;
                                    }
                                    if (v134 >= v61)
                                    {
                                      unsigned int v62 = *((unsigned __int8 *)i - 10);
                                      if (v62 < v133) {
                                        continue;
                                      }
                                      if (v133 >= v62)
                                      {
                                        unsigned int v63 = *((unsigned __int8 *)i - 9);
                                        if (v63 < v20) {
                                          continue;
                                        }
                                        if (v20 >= v63)
                                        {
                                          unsigned int v64 = *((unsigned __int8 *)i - 8);
                                          if (v64 < v21) {
                                            continue;
                                          }
                                          if (v21 >= v64)
                                          {
                                            unsigned int v65 = *((unsigned __int8 *)i - 7);
                                            if (v65 < v22) {
                                              continue;
                                            }
                                            if (v22 >= v65)
                                            {
                                              unsigned int v66 = *((unsigned __int8 *)i - 6);
                                              if (v66 < v23
                                                || v23 >= v66 && *((unsigned __int8 *)i - 5) < v3)
                                              {
                                                continue;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        unint64_t v45 = *((void *)i - 3);
        LODWORD(v132) = *((unsigned __int8 *)i - 15);
        HIDWORD(v132) = *((unsigned __int8 *)i - 16);
        HIDWORD(v13sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *((unsigned __int8 *)i - 13);
        unsigned int v131 = *((unsigned __int8 *)i - 14);
        HIDWORD(v129) = *((unsigned __int8 *)i - 11);
        LODWORD(v13sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *((unsigned __int8 *)i - 12);
        HIDWORD(v128) = *((unsigned __int8 *)i - 9);
        LODWORD(v129) = *((unsigned __int8 *)i - 10);
        HIDWORD(v127) = *((unsigned __int8 *)i - 7);
        LODWORD(v128) = *((unsigned __int8 *)i - 8);
        unsigned __int8 v126 = *((unsigned char *)i - 5);
        LODWORD(v127) = *((unsigned __int8 *)i - 6);
        int v46 = (v43 >> 31) ^ v43;
        int v47 = v46 >> 31;
        if (v39 != v136)
        {
LABEL_39:
          if (v47 != v46
            && (v45 > v137
             || v45 >= v137
             && (BYTE1(v45) > BYTE1(v137)
              || BYTE1(v45) >= BYTE1(v137)
              && (BYTE2(v45) > BYTE2(v137)
               || BYTE2(v45) >= BYTE2(v137)
               && (BYTE3(v45) > BYTE3(v137)
                || BYTE3(v45) >= BYTE3(v137)
                && (BYTE4(v45) > BYTE4(v137)
                 || BYTE4(v45) >= BYTE4(v137)
                 && (BYTE5(v45) > BYTE5(v137)
                  || BYTE5(v45) >= BYTE5(v137)
                  && (BYTE6(v45) > BYTE6(v137)
                   || BYTE6(v45) >= BYTE6(v137)
                   && (HIBYTE(v45) > v41
                    || HIBYTE(v45) >= v41
                    && (BYTE8(v137) < HIDWORD(v132)
                     || HIDWORD(v132) >= BYTE8(v137)
                     && (BYTE9(v137) < v132
                      || v132 >= BYTE9(v137)
                      && (BYTE10(v137) < v131
                       || v131 >= BYTE10(v137)
                       && (BYTE11(v137) < HIDWORD(v130)
                        || HIDWORD(v130) >= BYTE11(v137)
                        && (BYTE12(v137) < v130
                         || v130 >= BYTE12(v137)
                         && (BYTE13(v137) < HIDWORD(v129)
                          || HIDWORD(v129) >= BYTE13(v137)
                          && (BYTE14(v137) < v129
                           || v129 >= BYTE14(v137)
                           && (HIBYTE(v137) < HIDWORD(v128)
                            || HIDWORD(v128) >= HIBYTE(v137)
                            && (v138 < v128
                             || v128 >= v138
                             && (BYTE1(v138) < HIDWORD(v127)
                              || HIDWORD(v127) >= BYTE1(v138)
                              && (BYTE2(v138) < v127
                               || v127 >= BYTE2(v138) && HIBYTE(v138) < v126))))))))))))))))))))
          {
            break;
          }
          goto LABEL_84;
        }
      }
      if (v47 != v46 || (unint64_t)v137 < v45) {
        break;
      }
LABEL_84:
      if (!sub_100095774(i, &v139)) {
        break;
      }
    }
    long long v25 = i - 8;
    while (1)
    {
      while (1)
      {
        v24 -= 40;
        int v67 = v136 >> 31;
        int v68 = v136;
        if (v136 >> 31 != v136)
        {
          HIDWORD(v124) = BYTE9(v137);
          unsigned int v125 = BYTE8(v137);
          HIDWORD(v123) = BYTE11(v137);
          LODWORD(v124) = BYTE10(v137);
          HIDWORD(v122) = BYTE13(v137);
          LODWORD(v123) = BYTE12(v137);
          HIDWORD(v121) = HIBYTE(v137);
          LODWORD(v122) = BYTE14(v137);
          HIDWORD(v12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = BYTE1(v138);
          LODWORD(v121) = v138;
          int v68 = v136 >> 31;
          unsigned __int8 v119 = HIBYTE(v138);
          LODWORD(v12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = BYTE2(v138);
        }
        unint64_t v69 = BYTE7(v137);
        int v70 = v68 ^ v136;
        int v71 = *(int *)v24 >> 31;
        int v72 = (v68 ^ v136) >> 31;
        if (v71 != *(_DWORD *)v24) {
          break;
        }
        if (v72 != v70) {
          goto LABEL_13;
        }
        unint64_t v73 = *(void *)(v24 + 8);
        if (v73 < (unint64_t)v137) {
          goto LABEL_13;
        }
        int v74 = 0;
        int v75 = 0;
        if (v67 != v136) {
          goto LABEL_133;
        }
LABEL_215:
        if (v75 == v74 && (unint64_t)v137 >= v73) {
          goto LABEL_217;
        }
      }
      if (v72 != v70)
      {
        unsigned int v76 = *(unsigned __int8 *)(v24 + 8);
        if (v76 < v137) {
          break;
        }
        if (v76 <= v137)
        {
          unsigned int v77 = *(unsigned __int8 *)(v24 + 9);
          if (v77 < BYTE1(v137)) {
            break;
          }
          if (v77 <= BYTE1(v137))
          {
            unsigned int v78 = *(unsigned __int8 *)(v24 + 10);
            if (v78 < BYTE2(v137)) {
              break;
            }
            if (v78 <= BYTE2(v137))
            {
              unsigned int v79 = *(unsigned __int8 *)(v24 + 11);
              if (v79 < BYTE3(v137)) {
                break;
              }
              if (v79 <= BYTE3(v137))
              {
                unsigned int v80 = *(unsigned __int8 *)(v24 + 12);
                if (v80 < BYTE4(v137)) {
                  break;
                }
                if (v80 <= BYTE4(v137))
                {
                  unsigned int v81 = *(unsigned __int8 *)(v24 + 13);
                  if (v81 < BYTE5(v137)) {
                    break;
                  }
                  if (v81 <= BYTE5(v137))
                  {
                    unsigned int v82 = *(unsigned __int8 *)(v24 + 14);
                    if (v82 < BYTE6(v137)) {
                      break;
                    }
                    if (v82 <= BYTE6(v137))
                    {
                      unsigned int v83 = *(unsigned __int8 *)(v24 + 15);
                      if (v83 < v69) {
                        break;
                      }
                      if (v83 <= v69)
                      {
                        unsigned int v84 = *(unsigned __int8 *)(v24 + 16);
                        if (v84 < v125) {
                          break;
                        }
                        if (v125 >= v84)
                        {
                          unsigned int v85 = *(unsigned __int8 *)(v24 + 17);
                          if (v85 < HIDWORD(v124)) {
                            break;
                          }
                          if (HIDWORD(v124) >= v85)
                          {
                            unsigned int v86 = *(unsigned __int8 *)(v24 + 18);
                            if (v86 < v124) {
                              break;
                            }
                            if (v124 >= v86)
                            {
                              unsigned int v87 = *(unsigned __int8 *)(v24 + 19);
                              if (v87 < HIDWORD(v123)) {
                                break;
                              }
                              if (HIDWORD(v123) >= v87)
                              {
                                unsigned int v88 = *(unsigned __int8 *)(v24 + 20);
                                if (v88 < v123) {
                                  break;
                                }
                                if (v123 >= v88)
                                {
                                  unsigned int v89 = *(unsigned __int8 *)(v24 + 21);
                                  if (v89 < HIDWORD(v122)) {
                                    break;
                                  }
                                  if (HIDWORD(v122) >= v89)
                                  {
                                    unsigned int v90 = *(unsigned __int8 *)(v24 + 22);
                                    if (v90 < v122) {
                                      break;
                                    }
                                    if (v122 >= v90)
                                    {
                                      unsigned int v91 = *(unsigned __int8 *)(v24 + 23);
                                      if (v91 < HIDWORD(v121)) {
                                        break;
                                      }
                                      if (HIDWORD(v121) >= v91)
                                      {
                                        unsigned int v92 = *(unsigned __int8 *)(v24 + 24);
                                        if (v92 < v121) {
                                          break;
                                        }
                                        if (v121 >= v92)
                                        {
                                          unsigned int v93 = *(unsigned __int8 *)(v24 + 25);
                                          if (v93 < HIDWORD(v120)) {
                                            break;
                                          }
                                          if (HIDWORD(v120) >= v93)
                                          {
                                            unsigned int v94 = *(unsigned __int8 *)(v24 + 26);
                                            if (v94 < v120
                                              || v120 >= v94
                                              && *(unsigned __int8 *)(v24 + 27) < v119)
                                            {
                                              break;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      unint64_t v73 = *(void *)(v24 + 8);
      HIDWORD(v117) = *(unsigned __int8 *)(v24 + 17);
      unsigned int v118 = *(unsigned __int8 *)(v24 + 16);
      HIDWORD(v116) = *(unsigned __int8 *)(v24 + 19);
      LODWORD(v117) = *(unsigned __int8 *)(v24 + 18);
      HIDWORD(v115) = *(unsigned __int8 *)(v24 + 21);
      LODWORD(v116) = *(unsigned __int8 *)(v24 + 20);
      HIDWORD(v114) = *(unsigned __int8 *)(v24 + 23);
      LODWORD(v115) = *(unsigned __int8 *)(v24 + 22);
      HIDWORD(v113) = *(unsigned __int8 *)(v24 + 25);
      LODWORD(v114) = *(unsigned __int8 *)(v24 + 24);
      unsigned __int8 v112 = *(unsigned char *)(v24 + 27);
      LODWORD(v113) = *(unsigned __int8 *)(v24 + 26);
      int v74 = v71 ^ *(_DWORD *)v24;
      int v75 = v74 >> 31;
      if (v67 == v136) {
        goto LABEL_215;
      }
LABEL_133:
      if (v75 == v74
        || v73 <= v137
        && (v73 < v137
         || BYTE1(v73) <= BYTE1(v137)
         && (BYTE1(v73) < BYTE1(v137)
          || BYTE2(v73) <= BYTE2(v137)
          && (BYTE2(v73) < BYTE2(v137)
           || BYTE3(v73) <= BYTE3(v137)
           && (BYTE3(v73) < BYTE3(v137)
            || BYTE4(v73) <= BYTE4(v137)
            && (BYTE4(v73) < BYTE4(v137)
             || BYTE5(v73) <= BYTE5(v137)
             && (BYTE5(v73) < BYTE5(v137)
              || BYTE6(v73) <= BYTE6(v137)
              && (BYTE6(v73) < BYTE6(v137)
               || HIBYTE(v73) <= v69
               && (HIBYTE(v73) < v69
                || BYTE8(v137) >= v118
                && (v118 < BYTE8(v137)
                 || BYTE9(v137) >= HIDWORD(v117)
                 && (HIDWORD(v117) < BYTE9(v137)
                  || BYTE10(v137) >= v117
                  && (v117 < BYTE10(v137)
                   || BYTE11(v137) >= HIDWORD(v116)
                   && (HIDWORD(v116) < BYTE11(v137)
                    || BYTE12(v137) >= v116
                    && (v116 < BYTE12(v137)
                     || BYTE13(v137) >= HIDWORD(v115)
                     && (HIDWORD(v115) < BYTE13(v137)
                      || BYTE14(v137) >= v115
                      && (v115 < BYTE14(v137)
                       || HIBYTE(v137) >= HIDWORD(v114)
                       && (HIDWORD(v114) < HIBYTE(v137)
                        || v138 >= v114
                        && (v114 < v138
                         || BYTE1(v138) >= HIDWORD(v113)
                         && (HIDWORD(v113) < BYTE1(v138)
                          || BYTE2(v138) >= v113
                          && (v113 < BYTE2(v138) || HIBYTE(v138) >= v112))))))))))))))))))))
      {
LABEL_217:
        if (sub_100095774((_DWORD *)(v24 + 32), &v139)) {
          break;
        }
      }
    }
LABEL_13:
    ;
  }
  while ((unint64_t)v25 < v24);
  long long v96 = a1;
  uint64_t result = v25 - 10;
  if (v25 - 10 == a1) {
    goto LABEL_220;
  }
LABEL_224:
  if (*v96 == *result)
  {
    int v100 = v25 - 8;
    if (*v96 == *v96 >> 31)
    {
      *(void *)int v109 = *(void *)v100;
    }
    else
    {
      long long v105 = *(_OWORD *)v100;
      v109[4] = *(v25 - 4);
      *(_OWORD *)int v109 = v105;
    }
  }
  else
  {
    int v101 = *result ^ (*result >> 31);
    long long v102 = v25 - 8;
    if (v101)
    {
      long long v103 = *(_OWORD *)v102;
      v109[4] = *(v25 - 4);
      *(_OWORD *)int v109 = v103;
      int *v96 = v101;
    }
    else
    {
      *((void *)v96 + 1) = *(void *)v102;
      int *v96 = 0;
    }
  }
  v96[8] = *(v25 - 2);
  int v97 = *result;
  int v98 = v136;
  if (*result != v136)
  {
LABEL_233:
    int v106 = v98 ^ (v98 >> 31);
    long long v107 = v25 - 8;
    if (v106)
    {
      long long v108 = v137;
      *(v25 - 4) = v138;
      *(_OWORD *)long long v107 = v108;
      int *result = v106;
    }
    else
    {
      *(void *)long long v107 = v137;
      int *result = 0;
    }
    goto LABEL_236;
  }
LABEL_221:
  int v99 = v25 - 8;
  if (v97 == v97 >> 31)
  {
    *(void *)int v99 = v137;
  }
  else
  {
    long long v104 = v137;
    *(v25 - 4) = v138;
    *(_OWORD *)int v99 = v104;
  }
LABEL_236:
  *(v25 - 2) = v139;
  return result;
}

BOOL sub_100289948(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v8 = a2 - 10;
      if (!sub_100287068(a3, (uint64_t)(a2 - 10), (_DWORD *)a1)) {
        return 1;
      }
      int v9 = *(_DWORD *)a1;
      int v10 = *(int *)a1 >> 31;
      BOOL v12 = (void *)(a1 + 8);
      uint64_t v11 = *(void *)(a1 + 8);
      if (v10 == *(_DWORD *)a1)
      {
        int v13 = *v8;
        if (v9 == *v8)
        {
          int v14 = 0;
          *BOOL v12 = *((void *)a2 - 4);
          int v15 = 0;
          if (*v8) {
            goto LABEL_48;
          }
          goto LABEL_45;
        }
        int v14 = 0;
      }
      else
      {
        uint64_t v45 = *(void *)(a1 + 16);
        LODWORD(v46) = *(_DWORD *)(a1 + 24);
        int v14 = v10 ^ v9;
        int v13 = *v8;
        if (v9 == *v8)
        {
          long long v40 = *((_OWORD *)a2 - 2);
          *(_DWORD *)(a1 + 24) = *(a2 - 4);
          *(_OWORD *)BOOL v12 = v40;
          int v15 = v14 >> 31;
          if (*v8 != v14)
          {
LABEL_48:
            *((void *)a2 - 4) = v11;
            if (v15 != v14)
            {
              *((void *)a2 - 3) = v45;
              *(a2 - 4) = v46;
              *(a2 - 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v15 ^ v14;
            }
            else
            {
              *int v8 = 0;
            }
LABEL_51:
            int v44 = *(_DWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = *(a2 - 2);
            *(a2 - 2) = v44;
            return 1;
          }
LABEL_45:
          *((void *)a2 - 4) = v11;
          if (v15 != v14)
          {
            *((void *)a2 - 3) = v45;
            *(a2 - 4) = v46;
          }
          goto LABEL_51;
        }
      }
      int v41 = v13 ^ (v13 >> 31);
      int v42 = (long long *)(a2 - 8);
      if (v41)
      {
        long long v43 = *v42;
        *(_DWORD *)(a1 + 24) = *(a2 - 4);
        *(_OWORD *)BOOL v12 = v43;
        *(_DWORD *)a1 = v41;
        int v15 = v14 >> 31;
        if (*v8 != v14) {
          goto LABEL_48;
        }
      }
      else
      {
        *(void *)(a1 + 8) = *(void *)v42;
        *(_DWORD *)a1 = 0;
        int v15 = v14 >> 31;
        if (*v8 != v14) {
          goto LABEL_48;
        }
      }
      goto LABEL_45;
    case 3uLL:
      sub_100287B04((int *)a1, a1 + 40, (uint64_t)(a2 - 10), a3);
      return 1;
    case 4uLL:
      sub_100289DEC(a1, a1 + 40, a1 + 80, (uint64_t)(a2 - 10), a3);
      return 1;
    case 5uLL:
      sub_10028A22C(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)(a2 - 10), a3);
      return 1;
    default:
      unint64_t v16 = (_DWORD *)(a1 + 80);
      sub_100287B04((int *)a1, a1 + 40, a1 + 80, a3);
      BOOL v17 = (_DWORD *)(a1 + 120);
      if ((_DWORD *)(a1 + 120) == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      while (2)
      {
        if (!sub_100287068(a3, (uint64_t)v17, v16)) {
          goto LABEL_11;
        }
        unsigned int v21 = v17 + 2;
        int v20 = *v17;
        int v22 = (int)*v17 >> 31;
        if (v20 >> 31 == v20)
        {
          *(void *)&long long v46 = *v21;
          int v22 = v20;
        }
        else
        {
          long long v46 = *(_OWORD *)v21;
          int v47 = v17[6];
        }
        int v23 = v22 ^ v20;
        int v24 = v17[8];
        LODWORD(v45) = v23;
        int v48 = v24;
        uint64_t v25 = v18;
        while (2)
        {
          int v26 = (_DWORD *)(a1 + v25);
          int v27 = *(_DWORD *)(a1 + v25 + 120);
          int v28 = *(_DWORD *)(a1 + v25 + 80);
          if (v27 == v28)
          {
            int v29 = v26 + 22;
            int v30 = v26 + 32;
            if (v27 == v27 >> 31)
            {
              *(void *)int v30 = *(void *)v29;
              uint64_t v31 = a1 + v25;
              *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
              if (v25 == -80) {
                goto LABEL_31;
              }
            }
            else
            {
              *(_OWORD *)int v30 = *(_OWORD *)v29;
              v30[4] = v29[4];
              uint64_t v31 = a1 + v25;
              *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
              if (v25 == -80) {
                goto LABEL_31;
              }
            }
LABEL_27:
            v25 -= 40;
            if (!sub_100287068(a3, (uint64_t)&v45, (_DWORD *)(v31 + 40)))
            {
              uint64_t v35 = a1 + v25 + 120;
              int v36 = *(_DWORD *)v35;
              int v37 = v45;
              if (*(_DWORD *)v35 != v45) {
                goto LABEL_29;
              }
LABEL_32:
              int v39 = (void *)(v35 + 8);
              if (v36 == v36 >> 31)
              {
                *int v39 = v46;
              }
              else
              {
                *(_OWORD *)int v39 = v46;
                *(_DWORD *)(v35 + 24) = v47;
              }
              goto LABEL_10;
            }
            continue;
          }
          break;
        }
        int v32 = v28 ^ (v28 >> 31);
        long long v33 = v26 + 22;
        int v34 = v26 + 32;
        if (v32)
        {
          *int v34 = *v33;
          v26[36] = v26[26];
          v26[30] = v32;
          uint64_t v31 = a1 + v25;
          *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
          if (v25 == -80) {
            goto LABEL_31;
          }
          goto LABEL_27;
        }
        *(void *)int v34 = *(void *)v33;
        v26[30] = 0;
        uint64_t v31 = a1 + v25;
        *(_DWORD *)(a1 + v25 + 152) = *(_DWORD *)(a1 + v25 + 112);
        if (v25 != -80) {
          goto LABEL_27;
        }
LABEL_31:
        uint64_t v35 = a1;
        int v36 = *(_DWORD *)a1;
        int v37 = v45;
        if (*(_DWORD *)a1 == v45) {
          goto LABEL_32;
        }
LABEL_29:
        int v38 = v37 ^ (v37 >> 31);
        if (v38)
        {
          *(_OWORD *)(v35 + 8) = v46;
          *(_DWORD *)(v35 + 24) = v47;
          *(_DWORD *)uint64_t v35 = v38;
        }
        else
        {
          *(void *)(v35 + 8) = v46;
          *(_DWORD *)uint64_t v35 = 0;
        }
LABEL_10:
        *(_DWORD *)(v35 + 32) = v48;
        if (++v19 == 8) {
          return v17 + 10 == a2;
        }
LABEL_11:
        unint64_t v16 = v17;
        v18 += 40;
        v17 += 10;
        if (v17 != a2) {
          continue;
        }
        return 1;
      }
  }
}

BOOL sub_100289DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100287B04((int *)a1, a2, a3, a5);
  BOOL result = sub_100287068(a5, a4, (_DWORD *)a3);
  if (result)
  {
    int v11 = *(_DWORD *)a3;
    int v12 = *(int *)a3 >> 31;
    int v14 = (void *)(a3 + 8);
    uint64_t v13 = *(void *)(a3 + 8);
    if (v12 == *(_DWORD *)a3)
    {
      int v15 = *(_DWORD *)a4;
      if (v11 == *(_DWORD *)a4)
      {
        int v16 = 0;
        *int v14 = *(void *)(a4 + 8);
        int v17 = 0;
        if (*(_DWORD *)a4) {
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      int v16 = 0;
    }
    else
    {
      uint64_t v45 = *(void *)(a3 + 16);
      int v46 = *(_DWORD *)(a3 + 24);
      int v16 = v12 ^ v11;
      int v15 = *(_DWORD *)a4;
      if (v11 == *(_DWORD *)a4)
      {
        long long v18 = *(_OWORD *)(a4 + 8);
        *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
        *(_OWORD *)int v14 = v18;
        int v17 = v16 >> 31;
        if (*(_DWORD *)a4 != v16)
        {
LABEL_15:
          *(void *)(a4 + 8) = v13;
          if (v17 != v16)
          {
            *(void *)(a4 + 16) = v45;
            *(_DWORD *)(a4 + 24) = v46;
            *(_DWORD *)a4 = v17 ^ v16;
          }
          else
          {
            *(_DWORD *)a4 = 0;
          }
          goto LABEL_18;
        }
LABEL_12:
        *(void *)(a4 + 8) = v13;
        if (v17 != v16)
        {
          *(void *)(a4 + 16) = v45;
          *(_DWORD *)(a4 + 24) = v46;
        }
LABEL_18:
        int v22 = *(_DWORD *)(a3 + 32);
        *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
        *(_DWORD *)(a4 + 32) = v22;
        BOOL result = sub_100287068(a5, a3, (_DWORD *)a2);
        if (!result) {
          return result;
        }
        int v23 = *(_DWORD *)a2;
        int v24 = *(int *)a2 >> 31;
        int v26 = (void *)(a2 + 8);
        uint64_t v25 = *(void *)(a2 + 8);
        if (v24 == *(_DWORD *)a2)
        {
          int v27 = *(_DWORD *)a3;
          if (v23 == *(_DWORD *)a3)
          {
            int v28 = 0;
            *int v26 = *v14;
            int v29 = 0;
            if (*(_DWORD *)a3) {
              goto LABEL_32;
            }
            goto LABEL_29;
          }
          int v28 = 0;
        }
        else
        {
          uint64_t v45 = *(void *)(a2 + 16);
          int v46 = *(_DWORD *)(a2 + 24);
          int v28 = v24 ^ v23;
          int v27 = *(_DWORD *)a3;
          if (v23 == *(_DWORD *)a3)
          {
            long long v30 = *(_OWORD *)v14;
            *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
            *(_OWORD *)int v26 = v30;
            int v29 = v28 >> 31;
            if (*(_DWORD *)a3 != v28)
            {
LABEL_32:
              *int v14 = v25;
              if (v29 != v28)
              {
                *(void *)(a3 + 16) = v45;
                *(_DWORD *)(a3 + 24) = v46;
                *(_DWORD *)a3 = v29 ^ v28;
              }
              else
              {
                *(_DWORD *)a3 = 0;
              }
              goto LABEL_35;
            }
LABEL_29:
            *int v14 = v25;
            if (v29 != v28)
            {
              *(void *)(a3 + 16) = v45;
              *(_DWORD *)(a3 + 24) = v46;
            }
LABEL_35:
            int v33 = *(_DWORD *)(a2 + 32);
            *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
            *(_DWORD *)(a3 + 32) = v33;
            BOOL result = sub_100287068(a5, a2, (_DWORD *)a1);
            if (!result) {
              return result;
            }
            int v34 = *(_DWORD *)a1;
            int v35 = *(int *)a1 >> 31;
            int v37 = (void *)(a1 + 8);
            uint64_t v36 = *(void *)(a1 + 8);
            if (v35 == *(_DWORD *)a1)
            {
              int v38 = *(_DWORD *)a2;
              if (v34 == *(_DWORD *)a2)
              {
                int v39 = 0;
                *int v37 = *v26;
                int v40 = 0;
                if (*(_DWORD *)a2) {
                  goto LABEL_49;
                }
                goto LABEL_46;
              }
              int v39 = 0;
            }
            else
            {
              uint64_t v45 = *(void *)(a1 + 16);
              int v46 = *(_DWORD *)(a1 + 24);
              int v39 = v35 ^ v34;
              int v38 = *(_DWORD *)a2;
              if (v34 == *(_DWORD *)a2)
              {
                long long v41 = *(_OWORD *)v26;
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
                *(_OWORD *)int v37 = v41;
                int v40 = v39 >> 31;
                if (*(_DWORD *)a2 != v39)
                {
LABEL_49:
                  *int v26 = v36;
                  if (v40 != v39)
                  {
                    *(void *)(a2 + 16) = v45;
                    *(_DWORD *)(a2 + 24) = v46;
                    *(_DWORD *)a2 = v40 ^ v39;
                  }
                  else
                  {
                    *(_DWORD *)a2 = 0;
                  }
LABEL_52:
                  int v44 = *(_DWORD *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
                  *(_DWORD *)(a2 + 32) = v44;
                  return result;
                }
LABEL_46:
                *int v26 = v36;
                if (v40 != v39)
                {
                  *(void *)(a2 + 16) = v45;
                  *(_DWORD *)(a2 + 24) = v46;
                }
                goto LABEL_52;
              }
            }
            int v42 = v38 ^ (v38 >> 31);
            if (v42)
            {
              long long v43 = *(_OWORD *)v26;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
              *(_OWORD *)int v37 = v43;
              *(_DWORD *)a1 = v42;
              int v40 = v39 >> 31;
              if (*(_DWORD *)a2 != v39) {
                goto LABEL_49;
              }
            }
            else
            {
              *(void *)(a1 + 8) = *v26;
              *(_DWORD *)a1 = 0;
              int v40 = v39 >> 31;
              if (*(_DWORD *)a2 != v39) {
                goto LABEL_49;
              }
            }
            goto LABEL_46;
          }
        }
        int v31 = v27 ^ (v27 >> 31);
        if (v31)
        {
          long long v32 = *(_OWORD *)v14;
          *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
          *(_OWORD *)int v26 = v32;
          *(_DWORD *)a2 = v31;
          int v29 = v28 >> 31;
          if (*(_DWORD *)a3 != v28) {
            goto LABEL_32;
          }
        }
        else
        {
          *(void *)(a2 + 8) = *v14;
          *(_DWORD *)a2 = 0;
          int v29 = v28 >> 31;
          if (*(_DWORD *)a3 != v28) {
            goto LABEL_32;
          }
        }
        goto LABEL_29;
      }
    }
    int v19 = v15 ^ (v15 >> 31);
    int v20 = (long long *)(a4 + 8);
    if (v19)
    {
      long long v21 = *v20;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_OWORD *)int v14 = v21;
      *(_DWORD *)a3 = v19;
      int v17 = v16 >> 31;
      if (*(_DWORD *)a4 != v16) {
        goto LABEL_15;
      }
    }
    else
    {
      *(void *)(a3 + 8) = *(void *)v20;
      *(_DWORD *)a3 = 0;
      int v17 = v16 >> 31;
      if (*(_DWORD *)a4 != v16) {
        goto LABEL_15;
      }
    }
    goto LABEL_12;
  }
  return result;
}

BOOL sub_10028A22C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100289DEC(a1, a2, a3, a4, a6);
  BOOL result = sub_100287068(a6, a5, (_DWORD *)a4);
  if (!result) {
    return result;
  }
  int v13 = *(_DWORD *)a4;
  int v14 = *(int *)a4 >> 31;
  int v16 = (void *)(a4 + 8);
  uint64_t v15 = *(void *)(a4 + 8);
  if (v14 == *(_DWORD *)a4)
  {
    int v17 = *(_DWORD *)a5;
    if (v13 == *(_DWORD *)a5)
    {
      int v18 = 0;
      *int v16 = *(void *)(a5 + 8);
      int v19 = 0;
      if (*(_DWORD *)a5) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
    int v18 = 0;
LABEL_10:
    int v21 = v17 ^ (v17 >> 31);
    int v22 = (long long *)(a5 + 8);
    if (v21)
    {
      long long v23 = *v22;
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
      *(_OWORD *)int v16 = v23;
      *(_DWORD *)a4 = v21;
      int v19 = v18 >> 31;
      if (*(_DWORD *)a5 != v18) {
        goto LABEL_15;
      }
    }
    else
    {
      *(void *)(a4 + 8) = *(void *)v22;
      *(_DWORD *)a4 = 0;
      int v19 = v18 >> 31;
      if (*(_DWORD *)a5 != v18) {
        goto LABEL_15;
      }
    }
    goto LABEL_12;
  }
  uint64_t v58 = *(void *)(a4 + 16);
  int v59 = *(_DWORD *)(a4 + 24);
  int v18 = v14 ^ v13;
  int v17 = *(_DWORD *)a5;
  if (v13 != *(_DWORD *)a5) {
    goto LABEL_10;
  }
  long long v20 = *(_OWORD *)(a5 + 8);
  *(_DWORD *)(a4 + 24) = *(_DWORD *)(a5 + 24);
  *(_OWORD *)int v16 = v20;
  int v19 = v18 >> 31;
  if (*(_DWORD *)a5 != v18)
  {
LABEL_15:
    *(void *)(a5 + 8) = v15;
    if (v19 != v18)
    {
      *(void *)(a5 + 16) = v58;
      *(_DWORD *)(a5 + 24) = v59;
      *(_DWORD *)a5 = v19 ^ v18;
    }
    else
    {
      *(_DWORD *)a5 = 0;
    }
    goto LABEL_18;
  }
LABEL_12:
  *(void *)(a5 + 8) = v15;
  if (v19 != v18)
  {
    *(void *)(a5 + 16) = v58;
    *(_DWORD *)(a5 + 24) = v59;
  }
LABEL_18:
  int v24 = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v24;
  BOOL result = sub_100287068(a6, a4, (_DWORD *)a3);
  if (!result) {
    return result;
  }
  int v25 = *(_DWORD *)a3;
  int v26 = *(int *)a3 >> 31;
  int v28 = (void *)(a3 + 8);
  uint64_t v27 = *(void *)(a3 + 8);
  if (v26 == *(_DWORD *)a3)
  {
    int v29 = *(_DWORD *)a4;
    if (v25 == *(_DWORD *)a4)
    {
      int v30 = 0;
      *int v28 = *v16;
      int v31 = 0;
      if (*(_DWORD *)a4) {
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    int v30 = 0;
LABEL_27:
    int v33 = v29 ^ (v29 >> 31);
    if (v33)
    {
      long long v34 = *(_OWORD *)v16;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
      *(_OWORD *)int v28 = v34;
      *(_DWORD *)a3 = v33;
      int v31 = v30 >> 31;
      if (*(_DWORD *)a4 != v30) {
        goto LABEL_32;
      }
    }
    else
    {
      *(void *)(a3 + 8) = *v16;
      *(_DWORD *)a3 = 0;
      int v31 = v30 >> 31;
      if (*(_DWORD *)a4 != v30) {
        goto LABEL_32;
      }
    }
    goto LABEL_29;
  }
  uint64_t v58 = *(void *)(a3 + 16);
  int v59 = *(_DWORD *)(a3 + 24);
  int v30 = v26 ^ v25;
  int v29 = *(_DWORD *)a4;
  if (v25 != *(_DWORD *)a4) {
    goto LABEL_27;
  }
  long long v32 = *(_OWORD *)v16;
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
  *(_OWORD *)int v28 = v32;
  int v31 = v30 >> 31;
  if (*(_DWORD *)a4 != v30)
  {
LABEL_32:
    *int v16 = v27;
    if (v31 != v30)
    {
      *(void *)(a4 + 16) = v58;
      *(_DWORD *)(a4 + 24) = v59;
      *(_DWORD *)a4 = v31 ^ v30;
    }
    else
    {
      *(_DWORD *)a4 = 0;
    }
    goto LABEL_35;
  }
LABEL_29:
  *int v16 = v27;
  if (v31 != v30)
  {
    *(void *)(a4 + 16) = v58;
    *(_DWORD *)(a4 + 24) = v59;
  }
LABEL_35:
  int v35 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = v35;
  BOOL result = sub_100287068(a6, a3, (_DWORD *)a2);
  if (!result) {
    return result;
  }
  int v36 = *(_DWORD *)a2;
  int v37 = *(int *)a2 >> 31;
  int v39 = (void *)(a2 + 8);
  uint64_t v38 = *(void *)(a2 + 8);
  if (v37 == *(_DWORD *)a2)
  {
    int v40 = *(_DWORD *)a3;
    if (v36 == *(_DWORD *)a3)
    {
      int v41 = 0;
      *int v39 = *v28;
      int v42 = 0;
      if (*(_DWORD *)a3) {
        goto LABEL_49;
      }
      goto LABEL_46;
    }
    int v41 = 0;
LABEL_44:
    int v44 = v40 ^ (v40 >> 31);
    if (v44)
    {
      long long v45 = *(_OWORD *)v28;
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_OWORD *)int v39 = v45;
      *(_DWORD *)a2 = v44;
      int v42 = v41 >> 31;
      if (*(_DWORD *)a3 != v41) {
        goto LABEL_49;
      }
    }
    else
    {
      *(void *)(a2 + 8) = *v28;
      *(_DWORD *)a2 = 0;
      int v42 = v41 >> 31;
      if (*(_DWORD *)a3 != v41) {
        goto LABEL_49;
      }
    }
    goto LABEL_46;
  }
  uint64_t v58 = *(void *)(a2 + 16);
  int v59 = *(_DWORD *)(a2 + 24);
  int v41 = v37 ^ v36;
  int v40 = *(_DWORD *)a3;
  if (v36 != *(_DWORD *)a3) {
    goto LABEL_44;
  }
  long long v43 = *(_OWORD *)v28;
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
  *(_OWORD *)int v39 = v43;
  int v42 = v41 >> 31;
  if (*(_DWORD *)a3 != v41)
  {
LABEL_49:
    *int v28 = v38;
    if (v42 != v41)
    {
      *(void *)(a3 + 16) = v58;
      *(_DWORD *)(a3 + 24) = v59;
      *(_DWORD *)a3 = v42 ^ v41;
    }
    else
    {
      *(_DWORD *)a3 = 0;
    }
    goto LABEL_52;
  }
LABEL_46:
  *int v28 = v38;
  if (v42 != v41)
  {
    *(void *)(a3 + 16) = v58;
    *(_DWORD *)(a3 + 24) = v59;
  }
LABEL_52:
  int v46 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = v46;
  BOOL result = sub_100287068(a6, a2, (_DWORD *)a1);
  if (!result) {
    return result;
  }
  int v47 = *(_DWORD *)a1;
  int v48 = *(int *)a1 >> 31;
  unsigned int v50 = (void *)(a1 + 8);
  uint64_t v49 = *(void *)(a1 + 8);
  if (v48 == *(_DWORD *)a1)
  {
    int v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      int v52 = 0;
      void *v50 = *v39;
      goto LABEL_62;
    }
    int v52 = 0;
  }
  else
  {
    uint64_t v58 = *(void *)(a1 + 16);
    int v59 = *(_DWORD *)(a1 + 24);
    int v52 = v48 ^ v47;
    int v51 = *(_DWORD *)a2;
    if (v47 == *(_DWORD *)a2)
    {
      long long v53 = *(_OWORD *)v39;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_OWORD *)unsigned int v50 = v53;
      goto LABEL_62;
    }
  }
  int v54 = v51 ^ (v51 >> 31);
  if (v54)
  {
    long long v55 = *(_OWORD *)v39;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(_OWORD *)unsigned int v50 = v55;
    *(_DWORD *)a1 = v54;
  }
  else
  {
    *(void *)(a1 + 8) = *v39;
    *(_DWORD *)a1 = 0;
  }
LABEL_62:
  int v56 = v52 >> 31;
  if (*(_DWORD *)a2 == v52)
  {
    *int v39 = v49;
    if (v56 != v52)
    {
      *(void *)(a2 + 16) = v58;
      *(_DWORD *)(a2 + 24) = v59;
    }
  }
  else
  {
    *int v39 = v49;
    if (v56 != v52)
    {
      *(void *)(a2 + 16) = v58;
      *(_DWORD *)(a2 + 24) = v59;
      *(_DWORD *)a2 = v56 ^ v52;
    }
    else
    {
      *(_DWORD *)a2 = 0;
    }
  }
  int v57 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v57;
  return result;
}

BOOL sub_10028A78C(BOOL result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    int v5 = a4;
    BOOL v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 3)))
    {
      int64_t v10 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 3)) | 1;
      int v11 = (_DWORD *)(result + 40 * v10);
      int64_t v12 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 3) + 2;
      if (v12 < a3 && sub_100287068(a2, result + 40 * v10, v11 + 10))
      {
        v11 += 10;
        int64_t v10 = v12;
      }
      BOOL result = sub_100287068(a2, (uint64_t)v11, v5);
      if (!result)
      {
        int v14 = v5 + 2;
        int v13 = *v5;
        int v15 = *v5 >> 31;
        if (v13 >> 31 == v13)
        {
          *(void *)&long long v31 = *v14;
          int v15 = v13;
        }
        else
        {
          long long v31 = *(_OWORD *)v14;
          int v32 = v5[6];
        }
        int v16 = v15 ^ v13;
        int v17 = v5[8];
        int v30 = v16;
        int v33 = v17;
        do
        {
          int v18 = v11;
          if (*v5 == *v11)
          {
            int v19 = v11 + 2;
            long long v20 = v5 + 2;
            if (*v5 == *v5 >> 31)
            {
              *long long v20 = *v19;
              v5[8] = v11[8];
              if (v7 < v10) {
                break;
              }
            }
            else
            {
              long long v24 = *(_OWORD *)v19;
              v5[6] = v11[6];
              *(_OWORD *)long long v20 = v24;
              v5[8] = v11[8];
              if (v7 < v10) {
                break;
              }
            }
          }
          else
          {
            int v21 = *v11 ^ ((int)*v11 >> 31);
            int v22 = (long long *)(v11 + 2);
            if (v21)
            {
              long long v23 = *v22;
              v5[6] = v11[6];
              *(_OWORD *)(v5 + 2) = v23;
              *int v5 = v21;
              v5[8] = v11[8];
              if (v7 < v10) {
                break;
              }
            }
            else
            {
              *((void *)v5 + 1) = *(void *)v22;
              *int v5 = 0;
              v5[8] = v11[8];
              if (v7 < v10) {
                break;
              }
            }
          }
          uint64_t v25 = (2 * v10) | 1;
          int v11 = (_DWORD *)(v6 + 40 * v25);
          int64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            int64_t v10 = v25;
          }
          else if (sub_100287068(a2, v6 + 40 * v25, v11 + 10))
          {
            v11 += 10;
          }
          else
          {
            int64_t v10 = v25;
          }
          BOOL result = sub_100287068(a2, (uint64_t)v11, &v30);
          int v5 = v18;
        }
        while (!result);
        if (*v18 == v30)
        {
          int v26 = v18 + 2;
          if (*v18 == *v18 >> 31)
          {
            *int v26 = v31;
          }
          else
          {
            long long v29 = v31;
            v18[6] = v32;
            *(_OWORD *)int v26 = v29;
          }
        }
        else
        {
          int v27 = v30 ^ (v30 >> 31);
          if (v27)
          {
            long long v28 = v31;
            v18[6] = v32;
            *(_OWORD *)(v18 + 2) = v28;
            *int v18 = v27;
          }
          else
          {
            *((void *)v18 + 1) = v31;
            *int v18 = 0;
          }
        }
        v18[8] = v33;
      }
    }
  }
  return result;
}

uint64_t sub_10028AA70(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    int v6 = *(_DWORD *)result;
    int v7 = *(_DWORD *)result;
    if (*(int *)result >> 31 != *(_DWORD *)result)
    {
      uint64_t v39 = *(void *)(result + 16);
      int v40 = *(_DWORD *)(result + 24);
      int v7 = v6 >> 31;
    }
    int v35 = v7;
    uint64_t v8 = 0;
    uint64_t v36 = *(void *)(result + 8);
    int v38 = *(_DWORD *)(result + 32);
    int64_t v9 = (unint64_t)(a4 - 2) >> 1;
    BOOL v34 = result;
    uint64_t v10 = result;
    do
    {
      uint64_t v12 = v10;
      v10 += 40 * v8 + 40;
      uint64_t v13 = 2 * v8;
      uint64_t v8 = (2 * v8) | 1;
      uint64_t v14 = v13 + 2;
      if (v13 + 2 < a4)
      {
        BOOL result = sub_100287068(a3, v10, (_DWORD *)(v10 + 40));
        if (result)
        {
          v10 += 40;
          uint64_t v8 = v14;
        }
      }
      if (*(_DWORD *)v12 == *(_DWORD *)v10)
      {
        int v15 = (void *)(v10 + 8);
        int v16 = (void *)(v12 + 8);
        if (*(_DWORD *)v12 == *(int *)v12 >> 31)
        {
          *int v16 = *v15;
        }
        else
        {
          long long v11 = *(_OWORD *)v15;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
          *(_OWORD *)int v16 = v11;
        }
      }
      else
      {
        int v17 = *(_DWORD *)v10 ^ (*(int *)v10 >> 31);
        int v18 = (long long *)(v10 + 8);
        if (v17)
        {
          long long v19 = *v18;
          *(_DWORD *)(v12 + 24) = *(_DWORD *)(v10 + 24);
          *(_OWORD *)(v12 + 8) = v19;
          *(_DWORD *)uint64_t v12 = v17;
        }
        else
        {
          *(void *)(v12 + 8) = *(void *)v18;
          *(_DWORD *)uint64_t v12 = 0;
        }
      }
      *(_DWORD *)(v12 + 32) = *(_DWORD *)(v10 + 32);
    }
    while (v8 <= v9);
    int v20 = v35 ^ v6;
    int v21 = *(_DWORD *)v10;
    if (v10 == a2 - 40)
    {
      int v25 = v20 >> 31;
      if (v21 == v20)
      {
        *(void *)(v10 + 8) = v36;
        if (v25 != v20)
        {
          *(void *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 24) = v40;
        }
      }
      else
      {
        int v29 = v25 ^ v20;
        *(void *)(v10 + 8) = v36;
        if (v29)
        {
          *(void *)(v10 + 16) = v39;
          *(_DWORD *)(v10 + 24) = v40;
          *(_DWORD *)uint64_t v10 = v29;
        }
        else
        {
          *(_DWORD *)uint64_t v10 = 0;
        }
      }
      *(_DWORD *)(v10 + 32) = v38;
    }
    else
    {
      int v22 = *(_DWORD *)(a2 - 40);
      if (v21 == v22)
      {
        long long v23 = (void *)(a2 - 32);
        long long v24 = (void *)(v10 + 8);
        if (v21 == v21 >> 31)
        {
          *long long v24 = *v23;
        }
        else
        {
          long long v30 = *(_OWORD *)v23;
          *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 - 16);
          *(_OWORD *)long long v24 = v30;
        }
      }
      else
      {
        int v26 = v22 ^ (v22 >> 31);
        int v27 = (long long *)(a2 - 32);
        if (v26)
        {
          long long v28 = *v27;
          *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 - 16);
          *(_OWORD *)(v10 + 8) = v28;
          *(_DWORD *)uint64_t v10 = v26;
        }
        else
        {
          *(void *)(v10 + 8) = *(void *)v27;
          *(_DWORD *)uint64_t v10 = 0;
        }
      }
      *(_DWORD *)(v10 + 32) = *(_DWORD *)(a2 - 8);
      int v31 = v20 >> 31;
      if (*(_DWORD *)(a2 - 40) == v20)
      {
        BOOL v32 = v34;
        *(void *)(a2 - 32) = v36;
        if (v31 != v20)
        {
          *(void *)(a2 - 24) = v39;
          *(_DWORD *)(a2 - 16) = v40;
        }
      }
      else
      {
        int v33 = v31 ^ v20;
        BOOL v32 = v34;
        *(void *)(a2 - 32) = v36;
        if (v33)
        {
          *(void *)(a2 - 24) = v39;
          *(_DWORD *)(a2 - 16) = v40;
          *(_DWORD *)(a2 - 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v33;
        }
        else
        {
          *(_DWORD *)(a2 - 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
        }
      }
      *(_DWORD *)(a2 - 8) = v38;
      return sub_10028ADCC(v32, v10 + 40, a3, 0xCCCCCCCCCCCCCCCDLL * ((v10 + 40 - v32) >> 3));
    }
  }
  return result;
}

BOOL sub_10028ADCC(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v8 = (_DWORD *)(result + 40 * v7);
    int64_t v9 = (int *)(a2 - 40);
    BOOL result = sub_100287068(a3, (uint64_t)v8, (_DWORD *)(a2 - 40));
    if (result)
    {
      int v10 = *(_DWORD *)(a2 - 40);
      int v11 = v10 >> 31;
      uint64_t v12 = (void *)(a2 - 32);
      if (v10 >> 31 == v10)
      {
        *(void *)&long long v25 = *v12;
        int v11 = v10;
      }
      else
      {
        long long v25 = *(_OWORD *)v12;
        int v26 = *(_DWORD *)(a2 - 16);
      }
      int v13 = v11 ^ v10;
      int v14 = *(_DWORD *)(a2 - 8);
      int v24 = v13;
      int v27 = v14;
      do
      {
        int v15 = v8;
        if (*v9 == *v8)
        {
          int v16 = v8 + 2;
          int v17 = v9 + 2;
          if (*v9 == *v9 >> 31)
          {
            *int v17 = *v16;
            v9[8] = v8[8];
            if (!v7) {
              break;
            }
          }
          else
          {
            long long v21 = *(_OWORD *)v16;
            v9[6] = v8[6];
            *(_OWORD *)int v17 = v21;
            v9[8] = v8[8];
            if (!v7) {
              break;
            }
          }
        }
        else
        {
          int v18 = *v8 ^ ((int)*v8 >> 31);
          long long v19 = (long long *)(v8 + 2);
          if (v18)
          {
            long long v20 = *v19;
            v9[6] = v8[6];
            *(_OWORD *)(v9 + 2) = v20;
            *int64_t v9 = v18;
            v9[8] = v8[8];
            if (!v7) {
              break;
            }
          }
          else
          {
            *((void *)v9 + 1) = *(void *)v19;
            *int64_t v9 = 0;
            v9[8] = v8[8];
            if (!v7) {
              break;
            }
          }
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (_DWORD *)(v6 + 40 * v7);
        BOOL result = sub_100287068(a3, (uint64_t)v8, &v24);
        int64_t v9 = v15;
      }
      while (result);
      if (*v15 == v24)
      {
        int v22 = v15 + 2;
        if (*v15 == *v15 >> 31)
        {
          *int v22 = v25;
        }
        else
        {
          *(_OWORD *)int v22 = v25;
          void v15[6] = v26;
        }
      }
      else
      {
        int v23 = v24 ^ (v24 >> 31);
        if (v23)
        {
          *(_OWORD *)(v15 + 2) = v25;
          void v15[6] = v26;
          *int v15 = v23;
        }
        else
        {
          *((void *)v15 + 1) = v25;
          *int v15 = 0;
        }
      }
      v15[8] = v27;
    }
  }
  return result;
}

void sub_10028B000(uint64_t *a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v4 = *a2;
  if (*a2 == *a1)
  {
    uint64_t v22 = *a2;
    goto LABEL_39;
  }
  int v44 = a4;
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((*a2 - *a1) >> 3);
  int64_t v9 = (unsigned __int8 *)(a3 + 2);
  while (1)
  {
    int v11 = *a3;
    int v12 = *a3 >> 31;
    if (v11 >> 31 == v11)
    {
      *(void *)&long long v45 = *(void *)v9;
      int v12 = v11;
    }
    else
    {
      long long v45 = *(_OWORD *)v9;
      int v46 = *((_DWORD *)v9 + 4);
    }
    unint64_t v10 = v8 >> 1;
    uint64_t v13 = *a1 + 40 * (v8 >> 1);
    int v14 = v12 ^ v11;
    int v15 = (void *)(v13 + 8);
    int v16 = v14 >> 31;
    if (*(_DWORD *)v13 == *(int *)v13 >> 31)
    {
      if (v16 != v14 || *v15 < (unint64_t)v45) {
        goto LABEL_3;
      }
    }
    else if (v16 != v14 && sub_1001E6FAC((unsigned __int8 *)(v13 + 8), (unsigned __int8 *)&v45))
    {
LABEL_3:
      *a1 = v13 + 40;
      unint64_t v10 = v8 + ~v10;
      goto LABEL_4;
    }
    int v17 = *(_DWORD *)v13;
    int v18 = *(int *)v13 >> 31;
    if (v18 == *(_DWORD *)v13)
    {
      *(void *)&long long v45 = *v15;
      int v19 = 0;
      int v20 = 0;
      if (*a3 == *a3 >> 31) {
        break;
      }
      goto LABEL_16;
    }
    long long v21 = *(_OWORD *)v15;
    int v46 = *(_DWORD *)(v13 + 24);
    long long v45 = v21;
    int v19 = v18 ^ v17;
    int v20 = v19 >> 31;
    if (*a3 == *a3 >> 31) {
      break;
    }
LABEL_16:
    if (v20 == v19 || !sub_1001E6FAC(v9, (unsigned __int8 *)&v45)) {
      goto LABEL_22;
    }
LABEL_4:
    unint64_t v8 = v10;
    if (!v10)
    {
      uint64_t v4 = *a1;
      uint64_t v22 = *a1;
      goto LABEL_37;
    }
  }
  if (v20 != v19 || *(void *)v9 < (unint64_t)v45) {
    goto LABEL_4;
  }
LABEL_22:
  uint64_t v22 = *a1 + 40 * v8;
  *a2 = v22;
  uint64_t v4 = *a1;
  if (v13 == *a1)
  {
    uint64_t v4 = v13;
    uint64_t v32 = v13 + 40;
    uint64_t v33 = v22 - (v13 + 40);
    if (v22 == v13 + 40) {
      goto LABEL_37;
    }
    goto LABEL_43;
  }
  unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - *a1) >> 3);
  do
  {
    int v25 = *a3;
    int v26 = *a3 >> 31;
    if (v25 >> 31 == v25)
    {
      *(void *)&long long v45 = *(void *)v9;
      int v26 = v25;
    }
    else
    {
      long long v45 = *(_OWORD *)v9;
      int v46 = *((_DWORD *)v9 + 4);
    }
    unint64_t v24 = v23 >> 1;
    int v27 = v26 ^ v25;
    long long v28 = (_DWORD *)(v4 + 40 * (v23 >> 1));
    int v30 = *v28;
    int v29 = (unsigned __int8 *)(v28 + 2);
    int v31 = v27 >> 31;
    if (v30 == v30 >> 31)
    {
      if (v31 != v27 || *(void *)v29 < (unint64_t)v45) {
        goto LABEL_24;
      }
    }
    else if (v31 != v27 && sub_1001E6FAC(v29, (unsigned __int8 *)&v45))
    {
LABEL_24:
      v4 += 40 * (v23 >> 1) + 40;
      unint64_t v24 = v23 + ~v24;
    }
    unint64_t v23 = v24;
  }
  while (v24);
  uint64_t v22 = *a2;
  uint64_t v32 = v13 + 40;
  uint64_t v33 = *a2 - (v13 + 40);
  if (*a2 != v13 + 40)
  {
LABEL_43:
    unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * (v33 >> 3);
    uint64_t v22 = v32;
    do
    {
      unint64_t v35 = v34 >> 1;
      uint64_t v36 = (int *)(v22 + 40 * (v34 >> 1));
      int v39 = *v36;
      int v38 = v36 + 2;
      int v37 = v39;
      int v40 = v39 >> 31;
      if (v39 >> 31 == v39)
      {
        *(void *)&long long v45 = *(void *)v38;
        int v41 = 0;
        int v42 = 0;
        if (*a3 != *a3 >> 31) {
          goto LABEL_48;
        }
      }
      else
      {
        long long v43 = *(_OWORD *)v38;
        int v46 = v38[4];
        long long v45 = v43;
        int v41 = v40 ^ v37;
        int v42 = v41 >> 31;
        if (*a3 != *a3 >> 31)
        {
LABEL_48:
          if (v42 != v41 && sub_1001E6FAC(v9, (unsigned __int8 *)&v45)) {
            goto LABEL_45;
          }
          goto LABEL_44;
        }
      }
      if (v42 != v41 || *(void *)v9 < (unint64_t)v45) {
        goto LABEL_45;
      }
LABEL_44:
      v22 += 40 * (v34 >> 1) + 40;
      unint64_t v35 = v34 + ~v35;
LABEL_45:
      unint64_t v34 = v35;
    }
    while (v35);
  }
LABEL_37:
  a4 = v44;
LABEL_39:
  *a4 = v4;
  a4[1] = v22;
}

void sub_10028B3D8()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10028B450()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_10028B5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028B600(uint64_t a1)
{
  uint64_t v1 = (void (**)(void))objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 8));
  if (v1) {
    v1[2]();
  }
}

void sub_10028B65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10028B6E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10028B728()
{
}

uint64_t sub_10028B750(unsigned __int8 *a1, uint64_t a2, int **a3)
{
  int v5 = 0;
  uint64_t v195 = 0;
  uint64_t result = 1;
  memset(v194, 0, sizeof(v194));
  if (!a1 || !a2 || (int v5 = 0, v191 = (unint64_t)&a1[a2], result = setjmp((int *)v194 + 1), result))
  {
LABEL_4:
    *a3 = v5;
    return result;
  }
  if (LODWORD(v194[0])) {
    return 5;
  }
  if ((unint64_t)a1 >= v191) {
    goto LABEL_205;
  }
  unint64_t v190 = a1 + 1;
  if ((*a1 & 0x80) == 0) {
    return 5;
  }
  unint64_t v8 = (unint64_t)*a1 << 57 >> 60;
  unsigned int v9 = (*a1 << 25) >> 28;
  if (v9 <= 3)
  {
    unint64_t v10 = (unint64_t)*a1 << 61;
    int v11 = 3;
  }
  else
  {
    if ((unint64_t)v190 >= v191) {
      goto LABEL_205;
    }
    unint64_t v190 = a1 + 2;
    unint64_t v10 = (((unint64_t)a1[1] << 53) & 0x1FFFFFFFFFFFFFFFLL) + ((unint64_t)*a1 << 61);
    int v11 = 11;
    if (v8 > 0xB)
    {
      if ((unint64_t)(a1 + 2) >= v191) {
        goto LABEL_205;
      }
      unint64_t v190 = a1 + 3;
      unint64_t v10 = (((unint64_t)a1[2] << 45) & 0x1FFFFFFFFFFFFFLL)
          + (((unint64_t)a1[1] << 53) & 0x1FFFFFFFFFFFFFFFLL)
          + ((unint64_t)*a1 << 61);
      int v11 = 19;
    }
  }
  unint64_t v12 = v10;
  uint64_t v13 = v11 - ((*a1 << 25) >> 28);
  if (v13 >= (*a1 << 25) >> 28)
  {
    unint64_t v17 = v10 << v8;
LABEL_22:
    int v19 = v13;
    goto LABEL_23;
  }
  int v14 = v190;
  if ((unint64_t)v190 >= v191) {
    goto LABEL_205;
  }
  unint64_t v15 = (unint64_t)++v190;
  unint64_t v16 = ((unint64_t)*v14 << 56 >> (v11 - v8)) + (v10 << v8);
  unint64_t v17 = v16;
  char v18 = v13 + 8;
  int v19 = v13 + 8;
  if (v13 + 8 < v8)
  {
    if (v15 >= v191) {
      goto LABEL_205;
    }
    unint64_t v190 = v14 + 2;
    LODWORD(v13) = v13 + 16;
    unint64_t v17 = ((unint64_t)v14[1] << 56 >> v18) + v16;
    goto LABEL_22;
  }
LABEL_23:
  unsigned int v20 = v19 - ((*a1 << 25) >> 28);
  if (v20 > 1)
  {
    unint64_t v22 = v17 << v8;
    unsigned int v23 = v19 - ((*a1 << 25) >> 28);
  }
  else
  {
    long long v21 = v190;
    if ((unint64_t)v190 >= v191) {
      goto LABEL_205;
    }
    ++v190;
    unint64_t v22 = ((unint64_t)*v21 << 56 >> v20) + (v17 << v8);
    unsigned int v23 = v20 + 8;
  }
  unsigned int v24 = v23 - 2;
  if (v23 - 2 > 7)
  {
    unint64_t v26 = 4 * v22;
    goto LABEL_31;
  }
  int v25 = v190;
  if ((unint64_t)v190 >= v191) {
LABEL_205:
  }
    longjmp((int *)v194 + 1, 3);
  ++v190;
  unint64_t v26 = ((unint64_t)*v25 << 56 >> (v23 - 2)) + 4 * v22;
  unsigned int v24 = v23 + 6;
LABEL_31:
  unint64_t v27 = v12 >> -(char)v8;
  LODWORD(v194[0]) = v24 - 8;
  uint64_t result = 8;
  if (v27 >= 2)
  {
    unint64_t v28 = v17 >> (64 - v8);
    if (v28 >= 2)
    {
      int v29 = v27;
      int v30 = v28;
      int v31 = v28 * v27;
      if ((v28 * v27) <= 0x100000)
      {
        int v187 = v28;
        unsigned int v189 = v27;
        uint64_t __len = 2 * (v28 * v27);
        uint64_t v32 = (int *)malloc_type_malloc(__len + 20, 0x7D204DCuLL);
        if (!v32)
        {
          uint64_t result = 7;
          *a3 = 0;
          return result;
        }
        uint64_t v33 = v32;
        unint64_t v34 = v22 >> 62;
        int v5 = v32;
        *uint64_t v32 = v29;
        v32[1] = v30;
        void v32[3] = v34;
        v32[4] = HIBYTE(v26);
        void v32[2] = v9;
        if (v31) {
          memset_pattern16(v32 + 5, &unk_1003F8E20, __len);
        }
        unsigned int v35 = v194[0];
        uint64_t v36 = v26 << 8;
        int v37 = v190;
LABEL_39:
        if (v35)
        {
          int v38 = v37;
          uint64_t v39 = 2 * v36;
          uint64_t v192 = 2 * v36;
          unsigned int v40 = v35 - 1;
          LODWORD(v194[0]) = v35 - 1;
          if ((v36 & 0x8000000000000000) == 0) {
            goto LABEL_91;
          }
        }
        else
        {
          if ((unint64_t)v37 >= v191) {
            goto LABEL_204;
          }
          unint64_t v190 = v37 + 1;
          unint64_t v41 = v36 + ((unint64_t)*v37 << 56);
          int v38 = v37 + 1;
          uint64_t v39 = 2 * v41;
          uint64_t v192 = 2 * v41;
          unsigned int v40 = 7;
          LODWORD(v194[0]) = 7;
          if ((v41 & 0x8000000000000000) == 0)
          {
LABEL_91:
            sub_10028C7EC(v5);
            unsigned int v76 = v189;
            unsigned int v77 = v190;
            uint64_t v78 = v192;
            uint64_t v79 = LODWORD(v194[0]);
            uint64_t v188 = v33 + 5;
            uint64_t v80 = 0;
LABEL_93:
            unsigned int v81 = v77;
            int v82 = v80 * v76;
            uint64_t v83 = (uint64_t)v188 + 2 * v189 * (v80 - 1);
            uint64_t v84 = 0;
            uint64_t v85 = v79;
            uint64_t v86 = v79;
            uint64_t v87 = v78;
            uint64_t v88 = v78;
            unsigned int v89 = v81;
LABEL_96:
            uint64_t v91 = v85;
            unsigned int v92 = v81;
            if (!*((_WORD *)v33 + (v82 + v84) + 10))
            {
              uint64_t v79 = v86;
              unsigned int v90 = v81;
              goto LABEL_95;
            }
            if (v84)
            {
              int v93 = *((unsigned __int16 *)v188 + v189 * v80 + v84 - 1);
              if (v80) {
                goto LABEL_99;
              }
            }
            else
            {
              int v93 = 0;
              if (v80)
              {
LABEL_99:
                int v94 = *(unsigned __int16 *)(v83 + 2 * v84);
                if (v93) {
                  int v95 = v93;
                }
                else {
                  int v95 = *(unsigned __int16 *)(v83 + 2 * v84);
                }
                if (v93 && *(_WORD *)(v83 + 2 * v84))
                {
                  if (v95 - v94 >= 0) {
                    unsigned int v96 = v95 - v94;
                  }
                  else {
                    unsigned int v96 = v94 - v95;
                  }
                  unsigned int v97 = v94 + v95;
                  if (v97 < 2) {
                    goto LABEL_125;
                  }
                  goto LABEL_134;
                }
                if (v84 + 1 >= (unint64_t)v189)
                {
                  int v99 = 0;
                  if (!v84)
                  {
LABEL_116:
                    int v100 = v99;
LABEL_120:
                    int v98 = v95;
                    if (v100)
                    {
                      if (v95 - v100 >= 0) {
                        unsigned int v96 = v95 - v100;
                      }
                      else {
                        unsigned int v96 = v100 - v95;
                      }
                      unsigned int v97 = v100 + v95;
                      if (v97 < 2)
                      {
LABEL_125:
                        int v101 = v92;
                        long long v102 = v89;
                        long long v103 = v89;
                        uint64_t v104 = v87;
                        unsigned int v105 = v91;
                        int v106 = 0;
                        while (1)
                        {
                          uint64_t v107 = v104;
                          long long v108 = v103;
                          if (v105)
                          {
                            unsigned int v109 = v105;
                            int v110 = v101;
                            uint64_t v111 = v102;
                          }
                          else
                          {
                            if ((unint64_t)v103 >= v191) {
                              goto LABEL_204;
                            }
                            uint64_t v107 = v104 + ((unint64_t)*v103 << 56);
                            unsigned int v109 = 8;
                            uint64_t v111 = ++v103;
                            int v110 = v108 + 1;
                          }
                          uint64_t v112 = v107;
                          uint64_t v113 = v111;
                          uint64_t v114 = 2 * v107;
                          unint64_t v115 = v114;
                          unsigned int v116 = v109 - 1;
                          if (v112 < 0) {
                            break;
                          }
                          ++v106;
                          int v101 = v110;
                          long long v102 = v113;
                          uint64_t v104 = v114;
                          unsigned int v105 = v109 - 1;
                          if (v106 == 256)
                          {
                            __int16 v117 = 256;
                            goto LABEL_145;
                          }
                        }
                        __int16 v117 = v106;
                        if (v106)
                        {
LABEL_145:
                          if (v109 <= 2)
                          {
                            if ((unint64_t)v113 >= v191) {
                              goto LABEL_204;
                            }
                            unint64_t v115 = ((unint64_t)*v113 << 56 >> (v109 - 1)) + v114;
                            unsigned int v116 = v109 + 7;
                            int v110 = ++v113;
                          }
                          int v139 = v113;
                          uint64_t v91 = v116 - 2;
                          LOWORD(v14sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = (4 * v117) | (v115 >> 62);
                          uint64_t v87 = 4 * v115;
                          uint64_t v132 = v110;
                          goto LABEL_149;
                        }
                        if (v109 == 1)
                        {
                          if ((unint64_t)v113 >= v191) {
                            goto LABEL_204;
                          }
                          unint64_t v181 = v114 + ((unint64_t)*v113 << 56);
                          int v139 = v113 + 1;
                          uint64_t v132 = v113 + 1;
                          uint64_t v180 = 2 * v181;
                          uint64_t v87 = 2 * v181;
                          uint64_t v91 = 7;
                          if ((v181 & 0x8000000000000000) == 0) {
                            goto LABEL_186;
                          }
                        }
                        else
                        {
                          uint64_t v132 = v110;
                          int v139 = v113;
                          uint64_t v180 = 2 * v115;
                          uint64_t v87 = 2 * v115;
                          uint64_t v91 = v116 - 1;
                          if ((v115 & 0x8000000000000000) == 0)
                          {
LABEL_186:
                            LOWORD(v14sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 1;
LABEL_149:
                            long long v137 = v139;
                            goto LABEL_172;
                          }
                        }
                        if (!v91)
                        {
                          if ((unint64_t)v139 >= v191) {
                            goto LABEL_204;
                          }
                          uint64_t v87 = v180 + ((unint64_t)*v139 << 56);
                          LODWORD(v91) = 8;
                          uint64_t v132 = ++v139;
                        }
                        uint64_t v182 = v87;
                        uint64_t v183 = 2 * v87;
                        v87 *= 2;
                        uint64_t v91 = (v91 - 1);
                        if (v182 < 0)
                        {
                          if (!v91)
                          {
                            if ((unint64_t)v139 >= v191) {
                              goto LABEL_204;
                            }
                            uint64_t v87 = v183 + ((unint64_t)*v139 << 56);
                            LODWORD(v91) = 8;
                            uint64_t v132 = ++v139;
                          }
                          unsigned int v140 = ~(v87 >> 63) & 3;
                          uint64_t v91 = (v91 - 1);
                          v87 *= 2;
                        }
                        else
                        {
                          LOWORD(v14sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 2;
                        }
                        goto LABEL_149;
                      }
LABEL_134:
                      if (v96 < 2)
                      {
                        uint64_t v120 = v92;
                        uint64_t v121 = v89;
                        uint64_t v122 = v89;
                        uint64_t v123 = v87;
                        int v124 = v91;
                        int v125 = 0;
                        while (1)
                        {
                          uint64_t v126 = v123;
                          uint64_t v127 = v122;
                          if (v124)
                          {
                            uint64_t v128 = v120;
                            uint64_t v129 = v121;
                          }
                          else
                          {
                            if ((unint64_t)v122 >= v191) {
                              goto LABEL_204;
                            }
                            uint64_t v126 = v123 + ((unint64_t)*v122 << 56);
                            int v124 = 8;
                            uint64_t v129 = ++v122;
                            uint64_t v128 = v127 + 1;
                          }
                          uint64_t v130 = v126;
                          unsigned int v131 = v129;
                          uint64_t v132 = v128;
                          uint64_t v133 = 2 * v130;
                          uint64_t v134 = (v124 - 1);
                          if (v130 < 0) {
                            break;
                          }
                          ++v125;
                          uint64_t v120 = v132;
                          uint64_t v121 = v131;
                          uint64_t v123 = 2 * v130;
                          --v124;
                          if (v125 == 256)
                          {
                            BOOL v135 = (v96 & 1) == 0;
                            int v136 = 256;
                            long long v137 = v131;
                            uint64_t v138 = 2 * v130;
                            if (v134) {
                              goto LABEL_165;
                            }
LABEL_163:
                            if ((unint64_t)v137 < v191)
                            {
                              v138 += (unint64_t)*v137 << 56;
                              LODWORD(v134) = 8;
                              uint64_t v132 = ++v137;
                              goto LABEL_165;
                            }
LABEL_204:
                            longjmp((int *)v194 + 1, 3);
                          }
                        }
                        v164 = v131;
                        int v158 = v125;
                        int v159 = v164;
                        BOOL v160 = (v96 & 1) == 0;
                        if (!(v158 | v96 & 1)) {
                          goto LABEL_170;
                        }
LABEL_162:
                        long long v137 = v159;
                        BOOL v135 = v160;
                        int v136 = v158;
                        uint64_t v138 = v133;
                        if (!v134) {
                          goto LABEL_163;
                        }
LABEL_165:
                        int v161 = v136 + !v135;
                        if (v138 < 0) {
                          int v161 = -v136;
                        }
                        uint64_t v162 = (v134 - 1);
                        uint64_t v133 = 2 * v138;
                        int v163 = v161 + (v97 >> 1);
                        if (v163 >= 0) {
                          goto LABEL_171;
                        }
                        uint64_t v184 = 4;
                        goto LABEL_198;
                      }
                      if (v96 < 9)
                      {
                        int v141 = v92;
                        int v142 = v89;
                        int v143 = v89;
                        uint64_t v144 = v87;
                        int v145 = v91;
                        int v146 = 0;
                        do
                        {
                          uint64_t v147 = v144;
                          int v148 = v143;
                          if (v145)
                          {
                            int v149 = v145;
                            int v150 = v141;
                            int v151 = v142;
                          }
                          else
                          {
                            if ((unint64_t)v143 >= v191) {
                              goto LABEL_204;
                            }
                            uint64_t v147 = v144 + ((unint64_t)*v143 << 56);
                            int v149 = 8;
                            int v151 = ++v143;
                            int v150 = v148 + 1;
                          }
                          uint64_t v152 = v147;
                          int v153 = v151;
                          unint64_t v154 = 2 * v152;
                          int v155 = v149 - 1;
                          if (v152 < 0) {
                            break;
                          }
                          ++v146;
                          int v141 = v150;
                          int v142 = v153;
                          uint64_t v144 = 2 * v152;
                          int v145 = v155;
                        }
                        while (v146 != 256);
                        if (!v155)
                        {
                          if ((unint64_t)v153 >= v191) {
                            goto LABEL_204;
                          }
                          unint64_t v154 = 2 * v152 + ((unint64_t)*v153 << 56);
                          int v155 = 8;
                          int v150 = ++v153;
                        }
                        uint64_t v132 = v150;
                        uint64_t v193 = 2 * v154;
                        int v156 = (2 * v146) | (v154 >> 63);
                        uint64_t v134 = (v155 - 1);
                        uint64_t v133 = v193;
                        int v157 = v153;
                        int v158 = v156;
                        int v159 = v157;
                        BOOL v160 = (v96 & 1) == 0;
                        if (v156 | v96 & 1) {
                          goto LABEL_162;
                        }
                        goto LABEL_170;
                      }
                      uint64_t v165 = v92;
                      uint64_t v166 = v89;
                      long long v167 = v89;
                      unint64_t v168 = v87;
                      unsigned int v169 = v91;
                      int v170 = 0;
                      while (1)
                      {
                        int v177 = v167;
                        if (v169)
                        {
                          int v171 = v165;
                          v172 = v166;
                          unsigned int v173 = v169;
                          uint64_t v174 = 2 * v168;
                          unint64_t v175 = 2 * v168;
                          int v176 = v169 - 1;
                          if ((v168 & 0x8000000000000000) != 0) {
                            goto LABEL_179;
                          }
                        }
                        else
                        {
                          if ((unint64_t)v167 >= v191) {
                            goto LABEL_204;
                          }
                          unint64_t v178 = v168 + ((unint64_t)*v167 << 56);
                          unsigned int v173 = 8;
                          v172 = ++v167;
                          int v171 = v177 + 1;
                          uint64_t v174 = 2 * v178;
                          unint64_t v175 = 2 * v178;
                          int v176 = 7;
                          if ((v178 & 0x8000000000000000) != 0)
                          {
LABEL_179:
                            if (v173 <= 2)
                            {
                              if ((unint64_t)v172 >= v191) {
                                goto LABEL_204;
                              }
                              unint64_t v175 = ((unint64_t)*v172++ << 56 >> v176) + v174;
                              int v171 = v172;
                              int v176 = v173 + 7;
                            }
                            int v179 = v172;
                            int v158 = (4 * v170) | (v175 >> 62);
                            uint64_t v134 = (v176 - 2);
                            uint64_t v133 = 4 * v175;
                            uint64_t v132 = v171;
                            int v159 = v179;
                            BOOL v160 = (v96 & 1) == 0;
                            if (v158 | v96 & 1) {
                              goto LABEL_162;
                            }
LABEL_170:
                            uint64_t v162 = v134;
                            long long v137 = v159;
                            int v163 = v97 >> 1;
LABEL_171:
                            LOWORD(v14sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v163;
                            uint64_t v91 = v162;
                            uint64_t v87 = v133;
LABEL_172:
                            uint64_t v88 = v87;
                            uint64_t v79 = v91;
                            *((_WORD *)v188 + v189 * v80 + v84) = v140;
                            unsigned int v90 = v132;
                            unsigned int v89 = v137;
LABEL_95:
                            uint64_t v85 = v91;
                            ++v84;
                            uint64_t v86 = v79;
                            unsigned int v81 = v90;
                            if (v84 != v189) {
                              goto LABEL_96;
                            }
                            uint64_t v78 = v88;
                            ++v80;
                            unsigned int v77 = v90;
                            unsigned int v76 = v189;
                            if (v80 != v187) {
                              goto LABEL_93;
                            }
                            if (v90 - a1 == a2)
                            {
                              uint64_t result = 0;
                              goto LABEL_4;
                            }
                            uint64_t v184 = 2;
LABEL_198:
                            uint64_t v185 = v184;
                            free(v5);
                            int v5 = 0;
                            uint64_t result = v185;
                            goto LABEL_4;
                          }
                        }
                        ++v170;
                        uint64_t v165 = v171;
                        uint64_t v166 = v172;
                        unint64_t v168 = v175;
                        unsigned int v169 = v176;
                        if (v170 == 256) {
                          goto LABEL_179;
                        }
                      }
                    }
LABEL_133:
                    int v118 = v98;
                    int v119 = v98;
                    unsigned int v96 = 0;
                    unsigned int v97 = v118 + v119;
                    if (v97 < 2) {
                      goto LABEL_125;
                    }
                    goto LABEL_134;
                  }
                }
                else
                {
                  if (v95)
                  {
                    int v99 = *(unsigned __int16 *)(v83 + 2 * (v84 + 1));
                  }
                  else
                  {
                    int v95 = *(unsigned __int16 *)(v83 + 2 * (v84 + 1));
                    int v99 = 0;
                  }
                  if (!v84) {
                    goto LABEL_116;
                  }
                }
                int v100 = v99;
                if (!v99)
                {
                  int v98 = *(unsigned __int16 *)(v83 + 2 * (v84 - 1));
                  int v100 = v98;
                  if (!v95) {
                    goto LABEL_133;
                  }
                }
                goto LABEL_120;
              }
            }
            int v98 = v93;
            goto LABEL_133;
          }
        }
        unsigned int v42 = v40;
        unsigned int v43 = v5[2];
        if (v40 < v43)
        {
          uint64_t v44 = v39;
          long long v45 = v38;
          unsigned int v46 = v42;
          do
          {
            if ((unint64_t)v45 >= v191) {
              goto LABEL_204;
            }
            unint64_t v190 = v45 + 1;
            v44 += (unint64_t)*v45 << 56 >> v46;
            uint64_t v39 = v44;
            int v38 = ++v45;
            unsigned int v42 = v46 + 8;
            v46 += 8;
          }
          while (v46 < v43);
        }
        unsigned int v47 = v42;
        unint64_t v48 = v39;
        unint64_t v49 = v39 << v43;
        unsigned int v50 = v47 - v43;
        unsigned int v51 = v50;
        unsigned int v52 = v5[2];
        if (v50 < v52)
        {
          unint64_t v53 = v49;
          int v54 = v38;
          do
          {
            if ((unint64_t)v54 >= v191) {
              goto LABEL_204;
            }
            unint64_t v190 = v54 + 1;
            v53 += (unint64_t)*v54 << 56 >> v50;
            v50 += 8;
            unint64_t v49 = v53;
            int v38 = ++v54;
            unsigned int v51 = v50;
          }
          while (v50 < v52);
        }
        unint64_t v55 = v49 >> -(char)v52;
        uint64_t v56 = v49 << v52;
        if ((v55 & 0x80000000) != 0) {
LABEL_203:
        }
          longjmp((int *)v194 + 1, 6);
        int v57 = v38;
        unsigned int v58 = v51 - v5[2];
        char v59 = 0;
        uint64_t v60 = v56;
        int v61 = v48 >> -(char)v5[2];
        while (1)
        {
          unint64_t v62 = v55;
          if ((int)v55 >= v5[1] || v61 < 0 || v61 >= *v5) {
            goto LABEL_203;
          }
          char v63 = v59;
          *((_WORD *)v33 + v61 + *v5 * (int)v62 + 1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 2;
          if (v58 > 1)
          {
            unsigned int v64 = v38;
            unsigned int v65 = v58;
          }
          else
          {
            if ((unint64_t)v57 >= v191) {
              goto LABEL_204;
            }
            v60 += (unint64_t)*v57++ << 56 >> v58;
            unint64_t v190 = v57;
            unsigned int v64 = v57;
            unsigned int v65 = v58 + 8;
          }
          unint64_t v66 = v60;
          int v67 = v57;
          unint64_t v68 = v66 >> 62;
          uint64_t v69 = 4 * v66;
          unint64_t v70 = 4 * v66;
          unsigned int v71 = v65 - 2;
          if (v68 == 3) {
            break;
          }
          if (v68 == 1)
          {
            --v63;
LABEL_72:
            int v38 = v64;
            unint64_t v73 = v67;
            uint64_t v60 = v70;
LABEL_73:
            unsigned int v58 = v71;
            goto LABEL_74;
          }
          if (v68) {
            goto LABEL_72;
          }
          if (v65 - 2 > 1)
          {
            int v38 = v64;
            unint64_t v73 = v67;
          }
          else
          {
            if ((unint64_t)v67 >= v191) {
              goto LABEL_204;
            }
            unint64_t v190 = v67 + 1;
            unint64_t v72 = ((unint64_t)*v67 << 56 >> v71) + v69;
            unint64_t v73 = v67 + 1;
            int v38 = v67 + 1;
            unint64_t v70 = v72;
            unsigned int v71 = v65 + 6;
          }
          v71 -= 2;
          uint64_t v60 = 4 * v70;
          switch(v70 >> 62)
          {
            case 1uLL:
              v63 += 2;
              goto LABEL_73;
            case 2uLL:
              v63 -= 2;
              goto LABEL_73;
            case 3uLL:
              int v37 = v38;
              uint64_t v36 = 4 * v70;
              unsigned int v35 = v71;
              goto LABEL_39;
            default:
              if (v71)
              {
                uint64_t v60 = 8 * v70;
                unsigned int v58 = v71 - 1;
                if (((4 * v70) & 0x8000000000000000) != 0) {
                  goto LABEL_90;
                }
              }
              else
              {
                if ((unint64_t)v73 >= v191) {
                  goto LABEL_204;
                }
                unint64_t v74 = 4 * v70 + ((unint64_t)*v73++ << 56);
                unint64_t v190 = v73;
                int v38 = v73;
                unint64_t v75 = v74;
                uint64_t v60 = 2 * v74;
                unsigned int v58 = 7;
                if ((v75 & 0x8000000000000000) != 0)
                {
LABEL_90:
                  v63 += 3;
                  goto LABEL_74;
                }
              }
              v63 += 4;
LABEL_74:
              int v57 = v73;
              char v59 = v63 & 7;
              switch(v63 & 7)
              {
                case 1:
                  ++v61;
                  goto LABEL_82;
                case 2:
LABEL_82:
                  unint64_t v62 = (v62 + 1);
                  break;
                case 3:
                  --v61;
                  unint64_t v62 = (v62 + 1);
                  break;
                case 4:
                  --v61;
                  break;
                case 5:
                  --v61;
                  goto LABEL_55;
                case 6:
                  goto LABEL_55;
                case 7:
                  ++v61;
LABEL_55:
                  unint64_t v62 = (v62 - 1);
                  break;
                default:
                  ++v61;
                  break;
              }
              unint64_t v55 = v62;
              if ((v62 & 0x80000000) != 0) {
                goto LABEL_203;
              }
              break;
          }
        }
        ++v63;
        goto LABEL_72;
      }
    }
  }
  return result;
}

int *sub_10028C7EC(int *result)
{
  uint64_t v1 = *result;
  if ((int)v1 >= 1)
  {
    uint64_t v2 = result[1];
    if ((int)v2 >= 1)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      uint64_t v5 = *result;
      uint64_t v6 = 2 * v1;
      while (1)
      {
        if (v3)
        {
          if (v3 == v1 - 1)
          {
            unint64_t v7 = (_WORD *)result + v3 + 10;
            uint64_t v8 = v2;
            uint64_t v9 = v4;
            do
            {
              if (*v7 == 1)
              {
                *unint64_t v7 = 0;
                uint64_t v9 = 1;
              }
              unint64_t v7 = (_WORD *)((char *)v7 + v6);
              --v8;
            }
            while (v8);
          }
          else
          {
            unint64_t v12 = (char *)result + 2 * v3;
            int v14 = *((unsigned __int16 *)v12 + 10);
            uint64_t v13 = v12 + 20;
            if (v14 == 1)
            {
              *uint64_t v13 = 0;
              uint64_t v4 = 1;
            }
            if (v2 == 1)
            {
              uint64_t v9 = v4;
            }
            else
            {
              uint64_t v15 = 2 * (v1 + v3) + 18;
              unint64_t v16 = result;
              uint64_t v17 = v2 - 1;
              uint64_t v18 = (v2 - 1) - 1;
              uint64_t v9 = v4;
              do
              {
                if (*(_WORD *)((char *)v16 + v15 + 2) == 1
                  && (!v18
                   || !*(_WORD *)((char *)v16 + v15)
                   || !*(_WORD *)((char *)v16 + v15 + 4)
                   || !*((_WORD *)v16 + v3 + 10)
                   || !*((_WORD *)&v16[v1 + 5] + v3)))
                {
                  *(_WORD *)((char *)v16 + v15 + 2) = 0;
                  uint64_t v9 = 1;
                }
                --v18;
                unint64_t v16 = (int *)((char *)v16 + v6);
                --v17;
              }
              while (v17);
            }
          }
        }
        else
        {
          uint64_t v10 = v2;
          int v11 = result + 5;
          uint64_t v9 = v4;
          do
          {
            if (*v11 == 1)
            {
              *int v11 = 0;
              uint64_t v9 = 1;
            }
            int v11 = (_WORD *)((char *)v11 + v6);
            --v10;
          }
          while (v10);
        }
        ++v3;
        uint64_t v4 = v9;
        if (v3 == v5)
        {
          uint64_t v3 = 0;
          uint64_t v4 = 0;
          if (!v9) {
            break;
          }
        }
      }
    }
  }
  return result;
}

double sub_10028C970(_DWORD *a1, int a2, int a3)
{
  int v3 = 0;
  if ((a2 & 0x80000000) == 0 && (a3 & 0x80000000) == 0 && *a1 > a2)
  {
    if (a1[1] <= a3) {
      int v3 = 0;
    }
    else {
      int v3 = *((unsigned __int16 *)a1 + a2 + *a1 * a3 + 10);
    }
  }
  return dbl_1003F8E00[a1[3]] * (double)(v3 - a1[4]);
}

double sub_10028C9CC(uint64_t a1)
{
  return dbl_1003F8E00[*(int *)(a1 + 12)] * (double)-*(_DWORD *)(a1 + 16);
}

void sub_10028C9F0(void *a1)
{
  if (a1) {
    free(a1);
  }
}

uint64_t sub_10028C9FC(uint64_t a1, uint64_t ***a2)
{
  uint64_t v2 = sub_10006F50C((void *)(a1 + 8), a2);
  if (!v2)
  {
    sub_1000AE4B0(v5, "");
    sub_10028CDF4("Missing entry for string location id", &__p);
    sub_10016A2C4((uint64_t)v5, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    sub_1000D11E0((uint64_t)&v4);
  }
  return *((unsigned int *)v2 + 8);
}

void sub_10028CAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10028CB14(uint64_t a1, uint64_t ***a2)
{
  if (sub_10006F50C((void *)(a1 + 8), a2))
  {
    return sub_10028C9FC(a1, a2);
  }
  else
  {
    return sub_10006F33C(a1, (uint64_t)a2);
  }
}

uint64_t *sub_10028CB80(int8x8_t *a1, unsigned int *a2)
{
  int8x8_t v2 = a1[7];
  if (!*(void *)&v2) {
    goto LABEL_21;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  char v6 = *(uint64_t ***)(*(void *)&a1[6] + 8 * v5);
  if (!v6 || (unint64_t v7 = *v6) == 0)
  {
LABEL_21:
    sub_1000AE4B0(v13, "");
    sub_10025F478("No valid string representation for location id", &v15);
    sub_10016A2C4((uint64_t)v13, (uint64_t)&v15, 1);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v15.__r_.__value_.__l.__data_);
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v13[0]);
LABEL_23:
    sub_1000D11E0((uint64_t)&__p);
  }
  if (v4.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v2 - 1;
    while (1)
    {
      uint64_t v10 = v7[1];
      if (v10 == v3)
      {
        if (*((_DWORD *)v7 + 4) == v3) {
          return v7 + 3;
        }
      }
      else if ((v10 & v8) != v5)
      {
        goto LABEL_21;
      }
      unint64_t v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v9 = v7[1];
    if (v9 == v3) {
      break;
    }
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
    if (v9 != v5) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v7 = (uint64_t *)*v7;
    if (!v7) {
      goto LABEL_21;
    }
  }
  if (*((_DWORD *)v7 + 4) != v3) {
    goto LABEL_11;
  }
  return v7 + 3;
}

void sub_10028CD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10028CD64(uint64_t a1)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

std::string *sub_10028CDF4@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10028CE28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10028CE44()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10028CEBC()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_10028CF34(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_10028CF40(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  uint64_t v5 = *(void *)a1;
  if (*(char *)(v5 + 23) < 0)
  {
    uint64_t v7 = v5;
    uint64_t v5 = *(void *)v5;
    uint64_t v6 = *(void *)(v7 + 8);
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  uint64_t result = sub_1002711EC(v5, v6, v4, v4 + a2);
  *(_DWORD *)(a1 + 8) += a2;
  return result;
}

uint64_t sub_10028CF94(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)a1;
  if (*(char *)(v3 + 23) < 0) {
    return sub_1002711EC(*(void *)v3, *(void *)(v3 + 8), v2, v2 + a2);
  }
  else {
    return sub_1002711EC(v3, *(unsigned __int8 *)(v3 + 23), v2, v2 + a2);
  }
}

uint64_t sub_10028CFE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) += a2;
  return result;
}

BOOL sub_10028CFF0(int *a1)
{
  unint64_t v1 = a1[2];
  if (*(char *)(*(void *)a1 + 23) < 0) {
    return v1 < 8 * *(void *)(*(void *)a1 + 8);
  }
  else {
    return v1 < 8 * (unint64_t)*(unsigned __int8 *)(*(void *)a1 + 23);
  }
}

uint64_t sub_10028D020(int *a1)
{
  if (*(char *)(*(void *)a1 + 23) < 0) {
    uint64_t v1 = 8 * *(void *)(*(void *)a1 + 8);
  }
  else {
    uint64_t v1 = 8 * *(unsigned __int8 *)(*(void *)a1 + 23);
  }
  return v1 - a1[2];
}

void sub_10028D054()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10028D0CC()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

BOOL sub_10028D144(uint64_t a1)
{
  uint64_t v1 = sub_100085D38(a1);
  if (*(char *)(v1 + 23) >= 0) {
    int v2 = (unsigned __int8 *)v1;
  }
  else {
    int v2 = *(unsigned __int8 **)v1;
  }
  return *v2 == 82;
}

BOOL sub_10028D178(uint64_t a1)
{
  return sub_100082814(a1) == 0;
}

BOOL sub_10028D198(uint64_t a1)
{
  return sub_10028D1B8(a1) != 0;
}

uint64_t sub_10028D1B8(uint64_t a1)
{
  int v2 = (void *)nullsub_22(a1);
  if (*v2 == v2[1]) {
    return 0;
  }
  uint64_t v3 = nullsub_22(a1);
  uint64_t v5 = *(const void **)v3;
  uint64_t v4 = *(void *)(v3 + 8);
  int64_t v6 = v4 - *(void *)v3;
  if (v4 == *(void *)v3) {
    return 1;
  }
  if (v6 < 0) {
    sub_1000A9108();
  }
  uint64_t v7 = (char *)operator new(v4 - *(void *)v3);
  memcpy(v7, v5, v6);
  uint64_t v8 = 0;
  uint64_t v9 = 8 * (v6 >> 3) - 8;
  do
  {
    int v10 = sub_100082814(*(void *)&v7[v8]);
    if (v10) {
      BOOL v11 = v9 == v8;
    }
    else {
      BOOL v11 = 1;
    }
    v8 += 8;
  }
  while (!v11);
  BOOL v12 = v10 != 0;
  operator delete(v7);
  return v12;
}

void sub_10028D2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10028D2D8(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  uint64_t v2 = *a1 + 80;
  do
  {
    int v3 = (*(uint64_t (**)(void))(**(void **)(v2 - 24) + 72))(*(void *)(v2 - 24));
    if (v3) {
      BOOL v4 = v2 == v1;
    }
    else {
      BOOL v4 = 1;
    }
    v2 += 80;
  }
  while (!v4);
  return v3 != 0;
}

void sub_10028D354(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_10028D384()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10028D3FC()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_10028D474(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    *(unsigned char *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)a1;
  *(void *)a1 = 0;
  if (v3)
  {
    sub_10028F4E0(v3);
    operator delete();
  }
  return a1;
}

void sub_10028D510(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    sub_1000AE4B0(&v14, "");
    sub_1001661BC("The previous floor should be defined.", (std::string *)v10);
    sub_10016A2C4((uint64_t)&v14, (uint64_t)v10, 1);
    if (SBYTE7(v11) < 0) {
      operator delete(v10[0]);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v14);
    }
    sub_1000D11E0((uint64_t)v8);
  }
  BOOL v4 = *(unsigned char **)a1;
  if (!*(void *)a1)
  {
    sub_1000AE4B0(&v14, "");
    sub_10028CDF4("The previous mode should be defined.", (std::string *)v10);
    sub_10016A2C4((uint64_t)&v14, (uint64_t)v10, 1);
    if (SBYTE7(v11) < 0) {
      operator delete(v10[0]);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v14);
    }
    sub_1000D11E0((uint64_t)v8);
  }
  LOBYTE(v14) = 0;
  if (*v4)
  {
    sub_100267358((uint64_t)&v15, (uint64_t)(v4 + 8));
    LOBYTE(v14) = 1;
    *(_OWORD *)int v10 = 0u;
    long long v11 = 0u;
    int v12 = 1065353216;
    char v13 = 0;
    unint64_t v5 = sub_1002AA5A0(&v15);
    sub_1002AA4A0(__p, v5);
    sub_1001E4CDC((uint64_t)v10, *(void *)(a1 + 16), *(void *)(a2 + 48), (uint64_t)v8);
    int64_t v6 = v8[1];
    *(void *)sub_1002AA5B0(__p, sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v6;
    uint64_t v7 = v8[2];
    *(void *)sub_1002AA5B0(__p, 1) = v7;
    sub_10028F06C((unint64_t *)&v15, (unint64_t *)__p);
    sub_1002652AC(*(unsigned char **)a1, (uint64_t)&v15);
    nullsub_17(v8);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    sub_1002424DC((uint64_t)v10);
    if ((_BYTE)v14)
    {
      if (v17)
      {
        uint64_t v18 = v17;
        operator delete(v17);
      }
      if (v15)
      {
        unint64_t v16 = v15;
        operator delete(v15);
      }
    }
  }
}

void sub_10028D764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10028D7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1002424DC((uint64_t)va);
  sub_100264F04(v9 - 128);
  _Unwind_Resume(a1);
}

void sub_10028D7D4(uint64_t a1, ...)
{
  va_start(va, a1);
  nullsub_17(va);
  JUMPOUT(0x10028D7E0);
}

uint64_t sub_10028D808(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 8)
    || !*(void *)a1
    || (uint64_t v3 = (const void ***)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16)),
        BOOL v4 = (unsigned __int8 ***)(*(uint64_t (**)(void))(**(void **)(a2 + 48) + 64))(*(void *)(a2 + 48)),
        uint64_t result = sub_1001982CC(v3, v4),
        result))
  {
    operator new();
  }
  return result;
}

void sub_10028D90C()
{
}

void sub_10028D930(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 8) || !*(void *)a1) {
    operator new();
  }
  BOOL v4 = (const void ***)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))(*(void *)(a1 + 16));
  unint64_t v5 = (unsigned __int8 ***)(*(uint64_t (**)(void))(**(void **)(a2 + 48) + 64))(*(void *)(a2 + 48));
  if (sub_1001982CC(v4, v5))
  {
    sub_10028D510(a1, a2);
  }
}

void sub_10028DA5C()
{
}

void sub_10028DA80(unsigned char **a1, uint64_t a2)
{
  BOOL v4 = (const void ***)(*(uint64_t (**)(void))(**(void **)(a2 + 48) + 64))(*(void *)(a2 + 48));
  if ((sub_1000706F4(v4, (unsigned __int8 ***)&qword_10047ED40) & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(**(void **)(a2 + 48) + 72))(*(void *)(a2 + 48)) == 1) {
      sub_10028D930((uint64_t)a1, a2);
    }
    else {
      sub_10028D808((uint64_t)a1, a2);
    }
    if ((*(unsigned int (**)(void))(**(void **)(a2 + 48) + 72))(*(void *)(a2 + 48)) == 1
      || (int v5 = *((_DWORD *)a1 + 26), v5 == 2))
    {
      if (!*a1)
      {
        sub_1000AE4B0(v11, "");
        sub_10014AEE4("Because the first call to receiveModeEstimate must have triggered the above if block which should have instantiated a new ParticleMode()", &__p);
        sub_10016A2C4((uint64_t)v11, (uint64_t)&__p, 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v12 < 0) {
          operator delete(v11[0]);
        }
        sub_1000D11E0((uint64_t)v10);
      }
      sub_100265298((uint64_t)*a1);
      sub_10028DD9C(2, *a1, (uint64_t *)a2, (uint64_t)(a1 + 4));
    }
    else
    {
      sub_10028DD9C(v5, *a1, (uint64_t *)a2, (uint64_t)(a1 + 4));
    }
    if (sub_1002671D8((uint64_t)*a1))
    {
      sub_1000AE4B0(v11, "");
      sub_100231068("The primary estimate should never have a logpdf", &__p);
      sub_10016A2C4((uint64_t)v11, (uint64_t)&__p, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v12 < 0) {
        operator delete(v11[0]);
      }
      sub_1000D11E0((uint64_t)v10);
    }
    int64_t v6 = *(unsigned char **)(a2 + 48);
    if (*((unsigned char *)a1 + 8))
    {
      uint64_t v7 = *(void *)(a2 + 56);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a1[3];
      a1[2] = v6;
      a1[3] = (unsigned char *)v7;
      if (v8)
      {
        if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
      a1[2] = v6;
      uint64_t v9 = *(void *)(a2 + 56);
      a1[3] = (unsigned char *)v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      *((unsigned char *)a1 + 8) = 1;
    }
  }
}

void sub_10028DD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10028DD9C(int a1, unsigned char *a2, uint64_t *a3, uint64_t a4)
{
  sub_1002655AC((uint64_t)a2, a3[8], a3, v21);
  if (a1 && a1 != 2)
  {
    if (a1 != 1)
    {
      __cxa_allocate_exception(0x40uLL);
      LODWORD(v18[0]) = a1;
      char v14 = sub_1002724A8((uint64_t)&qword_10047EE60, (int *)v18);
      sub_1000AE4B0(&v16, (char *)*v14);
      std::runtime_error::runtime_error(&v17, &v16);
      v17.__vftable = (std::runtime_error_vtbl *)&off_100453630;
      sub_10018E868((uint64_t)v15);
      sub_1000CC8F4(&v17, (uint64_t)"static void MultiModeTracker::updateKalmanModeWithNewParticleState(ModeEstimator, ParticleMode *, const ModeParticleSet &, const MultiphoneSpec &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/multi_mode_tracker.cpp", 302, (uint64_t)v15);
    }
    if (!sub_1003177A8((uint64_t)v21))
    {
      uint64_t v8 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(*a3 + 56) + 40))(*(void *)(*a3 + 56));
      uint64_t v9 = *v8;
      int v10 = (std::__shared_weak_count *)v8[1];
      uint64_t v25 = *v8;
      unint64_t v26 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9)
      {
        double v11 = (*(double (**)(uint64_t))(*(void *)v9 + 120))(v9);
        uint64_t v12 = sub_1002AA5A0(v21);
        sub_100300D10((uint64_t)v18, v12);
        double v13 = v11 * v11 / 12.0;
        *(double *)sub_100300DC4((uint64_t)v18, 0, sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v13;
        *(double *)sub_100300DC4((uint64_t)v18, 1uLL, 1uLL) = v13;
        sub_10028F5B0(&v22, v18);
        if (__p)
        {
          unsigned int v20 = __p;
          operator delete(__p);
        }
      }
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  sub_1002652AC(a2, (uint64_t)v21);
  sub_10028E9A0((uint64_t)a2, a3, a4);
  if (v23)
  {
    unsigned int v24 = v23;
    operator delete(v23);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
}

void sub_10028E01C(void *__p, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, __int16 a7, char a8, char __pa, std::runtime_error a10, std::string *a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_10028E144(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  unsigned int v23 = *(void **)(v22 - 104);
  if (v23)
  {
    *(void *)(v22 - 96) = v23;
    operator delete(v23);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)(v22 - 80));
  if (a22 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x10028E1B8);
}

void sub_10028E1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000BA884(v22 - 104);
  sub_100266E68((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_10028E214(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(void))(**(void **)(a2 + 48) + 72))(*(void *)(a2 + 48)) != 1)
  {
    int v4 = *(_DWORD *)(a1 + 104);
    if (v4 && v4 != 2)
    {
      if (v4 != 1)
      {
        __cxa_allocate_exception(0x40uLL);
        LODWORD(v14.__r_.__value_.__l.__data_) = v4;
        uint64_t v8 = sub_1002724A8((uint64_t)&qword_10047EE60, (int *)&v14);
        sub_1000AE4B0(&v11, (char *)*v8);
        std::runtime_error::runtime_error(&v10, &v11);
        v10.__vftable = (std::runtime_error_vtbl *)&off_100453630;
        sub_10018E868((uint64_t)v9);
        sub_1000CC8F4(&v10, (uint64_t)"void MultiModeTracker::searchForAlternativeMode(const ModeParticleSet &)", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/purpleslam/common/localize/multi_mode_tracker.cpp", 146, (uint64_t)v9);
      }
      sub_10028E618(a1, *(void *)a1, a2, &v14);
      if (v14.__r_.__value_.__r.__words[0])
      {
        uint64_t v7 = *(void *)a1;
        *(void *)a1 = v14.__r_.__value_.__r.__words[0];
        if (v7)
        {
          sub_10028F4E0(v7);
          operator delete();
        }
      }
    }
  }
  uint64_t result = sub_1002671D8(*(void *)a1);
  if (result)
  {
    sub_1000AE4B0(__p, "");
    sub_100231068("The primary estimate should never have a logpdf", &v14);
    sub_10016A2C4((uint64_t)__p, (uint64_t)&v14, 1);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)&v11);
  }
  return result;
}

void sub_10028E420(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, std::runtime_error a13, std::runtime_error a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void sub_10028E578(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::runtime_error a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  std::runtime_error::~runtime_error(&a15);
  if (*(char *)(v20 - 41) < 0) {
    operator delete(*(void **)(v20 - 64));
  }
  __cxa_end_catch();
  JUMPOUT(0x10028E5ECLL);
}

void sub_10028E5FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1000A6954(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10028E618(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (sub_1002654BC(a2) == 0.0)
  {
    *a4 = 0;
    return;
  }
  sub_100265DC4(a2, (uint64_t *)a3, a1 + 32, v23);
  sub_100265110(v28, *(void *)(a1 + 112), v23);
  if ((*(unsigned int (**)(void))(**(void **)(a3 + 48) + 72))(*(void *)(a3 + 48)) == 1) {
    int v8 = 2;
  }
  else {
    int v8 = *(_DWORD *)(a1 + 104);
  }
  sub_10028DD9C(v8, v28, (uint64_t *)a3, a1 + 32);
  double v9 = sub_1002654BC(a2);
  if (v9 < sub_1002654BC((uint64_t)v28))
  {
    if (qword_10047BED8 == -1)
    {
      std::runtime_error v10 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_18;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_1004636A0);
      std::runtime_error v10 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_18;
      }
    }
    sub_10028F27C((double **)(a2 + 8), &v22);
    int v11 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
    std::string::size_type v12 = v22.__r_.__value_.__r.__words[0];
    sub_10028F27C((double **)v29, &__p);
    char v13 = &v22;
    if (v11 < 0) {
      char v13 = (std::string *)v12;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v25 = v13;
    __int16 v26 = 2080;
    unint64_t v27 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "WARNING: Abandon current mode %s, an alternative mode %s has formed that is globally more concentrated!", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
LABEL_18:
    operator new();
  }
  *a4 = 0;
  if (v37)
  {
    int v38 = v37;
    operator delete(v37);
  }
  std::string v15 = (char *)v35;
  if (v35)
  {
    std::string v16 = v36;
    std::runtime_error v17 = v35;
    if (v36 != v35)
    {
      uint64_t v18 = v36;
      do
      {
        uint64_t v20 = (void *)*((void *)v18 - 3);
        v18 -= 24;
        int v19 = v20;
        if (v20)
        {
          *((void *)v16 - 2) = v19;
          operator delete(v19);
        }
        std::string v16 = v18;
      }
      while (v18 != v15);
      std::runtime_error v17 = v35;
    }
    uint64_t v36 = v15;
    operator delete(v17);
  }
  if (v32)
  {
    if (v33)
    {
      unint64_t v34 = v33;
      operator delete(v33);
    }
    char v32 = 0;
  }
  if (v28[0])
  {
    if (v30)
    {
      int v31 = v30;
      operator delete(v30);
    }
    if (v29[0])
    {
      v29[1] = v29[0];
      operator delete(v29[0]);
    }
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
}

void sub_10028E92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10028F4E0((uint64_t)&a25);
  if (!a19) {
    _Unwind_Resume(a1);
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

void sub_10028E9A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_1002652FC(a1, 2.0);
  double v6 = sub_100266018(a1, a2, a3);
  sub_1001A0BBC(a1, v6);
  if (sub_1002654AC(a1))
  {
    if (qword_10047BED8 == -1)
    {
      uint64_t v7 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO))
      {
LABEL_5:
        sub_100265298(a1);
        return;
      }
    }
    else
    {
      dispatch_once(&qword_10047BED8, &stru_1004636A0);
      uint64_t v7 = qword_10047BEE0;
      if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_INFO)) {
        goto LABEL_5;
      }
    }
    *(_WORD *)int v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "WARNING: Inliers did not have enough weight to maintain the current mode. Resetting mode estimator!", v8, 2u);
    goto LABEL_5;
  }
}

double sub_10028EA8C@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100266B4C(*a1, a2);
}

void sub_10028EA94(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (uint64_t)a1;
  uint64_t v6 = a2[1];
  uint64_t v65 = *a2;
  unint64_t v66 = (std::__shared_weak_count *)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10025D088(a1, &v65, (uint64_t)&v67);
  uint64_t v7 = v66;
  if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v62 = 0;
  char v63 = 0;
  unint64_t v64 = 0;
  std::string __p = 0;
  uint64_t v60 = 0;
  int v61 = 0;
  sub_100274CB8((char **)&v62, 0xCCCCCCCCCCCCCCCDLL * ((v70 - (unsigned char *)v69) >> 4));
  double v9 = v69;
  uint64_t v8 = (uint64_t)v70;
  if (v70 == v69)
  {
    size_t v42 = 0xCCCCCCCCCCCCCCCDLL * ((v70 - (unsigned char *)v69) >> 4);
    double v12 = 0.0;
    double v11 = 0.0;
    double v9 = v70;
    unsigned int v43 = v62;
    uint64_t v44 = v63;
    if (v63 == v62) {
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  uint64_t v58 = v4;
  size_t v10 = 0;
  double v11 = 0.0;
  double v12 = 0.0;
  do
  {
    char v13 = (__n128 *)&v9[10 * v10];
    if (v13[3].n128_u8[0]) {
      goto LABEL_36;
    }
    std::string v14 = v63;
    if ((unint64_t)v63 >= v64)
    {
      int v19 = (__n128 *)sub_10028F77C(&v62, v13);
    }
    else
    {
      sub_100033728(v63, v13);
      std::string v15 = (__n128 *)&v9[10 * v10];
      __n128 v16 = v15[1];
      __n128 v17 = v15[2];
      v14[3].n128_u16[0] = v15[3].n128_u16[0];
      v14[1] = v16;
      v14[2] = v17;
      v14[3].n128_u64[1] = v15[3].n128_u64[1];
      unint64_t v18 = v15[4].n128_u64[0];
      v14[4].n128_u64[0] = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      v14[4].n128_u64[1] = v9[10 * v10 + 9];
      int v19 = v14 + 5;
    }
    char v63 = v19;
    uint64_t v20 = v67;
    long long v21 = v60;
    if (v60 >= v61)
    {
      unsigned int v23 = (char *)__p;
      int64_t v24 = v60 - (unsigned char *)__p;
      uint64_t v25 = (v60 - (unsigned char *)__p) >> 3;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61) {
        sub_1000A9108();
      }
      uint64_t v27 = v61 - (unsigned char *)__p;
      if ((v61 - (unsigned char *)__p) >> 2 > v26) {
        unint64_t v26 = v27 >> 2;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        if (v28 >> 61) {
          sub_1000A6A10();
        }
        int v29 = (char *)operator new(8 * v28);
        int v30 = &v29[8 * v25];
        *(void *)int v30 = v20[v10];
        uint64_t v22 = (uint64_t)(v30 + 8);
        if (v21 == v23) {
          goto LABEL_33;
        }
      }
      else
      {
        int v29 = 0;
        int v30 = (char *)(8 * v25);
        *(void *)(8 * v25) = *((void *)v67 + v10);
        uint64_t v22 = 8 * v25 + 8;
        if (v21 == v23)
        {
LABEL_33:
          std::string __p = v30;
          uint64_t v60 = (char *)v22;
          int v61 = &v29[8 * v28];
          if (v23) {
            operator delete(v23);
          }
          goto LABEL_35;
        }
      }
      unint64_t v31 = v21 - 8 - v23;
      if (v31 < 0x58) {
        goto LABEL_74;
      }
      if ((unint64_t)(v21 - &v29[v24]) < 0x20) {
        goto LABEL_74;
      }
      uint64_t v32 = (v31 >> 3) + 1;
      uint64_t v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v34 = &v21[-v33];
      v30 -= v33;
      unsigned int v35 = &v29[8 * v25 - 16];
      uint64_t v36 = v21 - 16;
      uint64_t v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v38 = *(_OWORD *)v36;
        *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
        *(_OWORD *)unsigned int v35 = v38;
        v35 -= 32;
        v36 -= 32;
        v37 -= 4;
      }
      while (v37);
      long long v21 = v34;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_74:
        do
        {
          uint64_t v39 = *((void *)v21 - 1);
          v21 -= 8;
          *((void *)v30 - 1) = v39;
          v30 -= 8;
        }
        while (v21 != v23);
      }
      goto LABEL_33;
    }
    *(void *)uint64_t v60 = *((void *)v67 + v10);
    uint64_t v22 = (uint64_t)(v21 + 8);
LABEL_35:
    uint64_t v60 = (char *)v22;
    double v40 = sub_100273560((uint64_t)v69 + 80 * v10);
    double v11 = v11 + exp(v40);
    double v9 = v69;
LABEL_36:
    double v41 = sub_100273560((uint64_t)&v9[10 * v10]);
    double v12 = v12 + exp(v41);
    ++v10;
    double v9 = v69;
    uint64_t v8 = (uint64_t)v70;
    size_t v42 = 0xCCCCCCCCCCCCCCCDLL * ((v70 - (unsigned char *)v69) >> 4);
  }
  while (v10 < v42);
  uint64_t v4 = v58;
  unsigned int v43 = v62;
  uint64_t v44 = v63;
  if (v63 == v62)
  {
LABEL_40:
    sub_10024D850(&v62, (uint64_t)v9, v8, v42);
    sub_10007C388(&__p, (char *)v67, v68, (v68 - (unsigned char *)v67) >> 3);
    unsigned int v43 = v62;
    uint64_t v44 = v63;
    double v11 = v12;
  }
LABEL_41:
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_1001F3E0C((void *)a3, (uint64_t)v43, (uint64_t)v44, 0xCCCCCCCCCCCCCCCDLL * (((char *)v44 - v43) >> 4));
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  long long v45 = __p;
  int64_t v46 = v60 - (unsigned char *)__p;
  if (v60 != __p)
  {
    if (v46 < 0) {
      sub_1000A9108();
    }
    unsigned int v47 = (char *)operator new(v60 - (unsigned char *)__p);
    *(void *)(a3 + 24) = v47;
    *(void *)(a3 + 32) = v47;
    unint64_t v48 = &v47[8 * (v46 >> 3)];
    *(void *)(a3 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v48;
    memcpy(v47, v45, v46);
    *(void *)(a3 + 32) = v48;
  }
  uint64_t v49 = a2[1];
  *(void *)(a3 + 48) = *a2;
  *(void *)(a3 + 56) = v49;
  if (v49) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a3 + 64) = sub_10025D080(v4);
  *(double *)(a3 + 72) = v11 / v12;
  if (__p)
  {
    uint64_t v60 = (char *)__p;
    operator delete(__p);
  }
  unsigned int v50 = (__n128 *)v62;
  if (v62)
  {
    unsigned int v51 = v63;
    unsigned int v52 = v62;
    if (v63 != v62)
    {
      do
      {
        unint64_t v53 = (std::__shared_weak_count *)v51[-1].n128_u64[0];
        if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
        v51 -= 5;
      }
      while (v51 != v50);
      unsigned int v52 = v62;
    }
    char v63 = v50;
    operator delete(v52);
  }
  int v54 = v69;
  if (v69)
  {
    unint64_t v55 = v70;
    uint64_t v56 = v69;
    if (v70 != v69)
    {
      do
      {
        int v57 = (std::__shared_weak_count *)*((void *)v55 - 2);
        if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
        v55 -= 80;
      }
      while (v55 != v54);
      uint64_t v56 = v69;
    }
    unint64_t v70 = v54;
    operator delete(v56);
  }
  if (v67)
  {
    unint64_t v68 = (char *)v67;
    operator delete(v67);
  }
}

void sub_10028EFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  sub_1000BA884(v21);
  unsigned int v23 = *v20;
  if (*v20)
  {
    *(void *)(v19 + 32) = v23;
    operator delete(v23);
  }
  sub_100246424((void **)v19);
  if (__p) {
    operator delete(__p);
  }
  sub_100246424(&a14);
  sub_10025CB70((uint64_t)&a19);
  _Unwind_Resume(a1);
}

unint64_t *sub_10028F06C(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = sub_1002AA5A0(a2);
  if (v4 != sub_1002AA5A0(a1))
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    sub_10014B3FC((uint64_t)v22);
  }
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = v6 - *a1;
  if (a2[1] - *a2 != v7)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v22);
  }
  if (v6 != v5)
  {
    unint64_t v8 = v7 >> 3;
    unint64_t v9 = *a2;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    if (v8 < 6 || (v5 < v9 + 8 * v8 ? (BOOL v10 = v9 >= v5 + 8 * v8) : (BOOL v10 = 1), !v10))
    {
      unint64_t v11 = 0;
LABEL_17:
      unint64_t v16 = v8 - v11;
      uint64_t v17 = 8 * v11;
      unint64_t v18 = (double *)(v9 + v17);
      uint64_t v19 = (double *)(v5 + v17);
      do
      {
        double v20 = *v18++;
        *uint64_t v19 = v20 + *v19;
        ++v19;
        --v16;
      }
      while (v16);
      return a1;
    }
    unint64_t v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    double v12 = (float64x2_t *)(v9 + 16);
    char v13 = (float64x2_t *)(v5 + 16);
    unint64_t v14 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v15 = vaddq_f64(*v12, *v13);
      v13[-1] = vaddq_f64(v12[-1], v13[-1]);
      *char v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v8 != v11) {
      goto LABEL_17;
    }
  }
  return a1;
}

void sub_10028F22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10028F24C(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_10028F27C(double **a1@<X0>, std::string *a2@<X8>)
{
  if (sub_1003177A8((uint64_t)a1))
  {
    char v18 = 4;
    strcpy((char *)v17, "null");
  }
  else
  {
    sub_1003016CC((uint64_t)(a1 + 3));
  }
  sub_1002AA868(a1, (uint64_t)&v13);
  uint64_t v4 = std::string::insert(&v13, 0, "MultivariateGaussian(mean:");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  unint64_t v6 = std::string::append(&v14, ", cov:");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v18 >= 0) {
    unint64_t v8 = (const std::string::value_type *)v17;
  }
  else {
    unint64_t v8 = (const std::string::value_type *)v17[0];
  }
  if (v18 >= 0) {
    std::string::size_type v9 = v18;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)v17[1];
  }
  BOOL v10 = std::string::append(&v15, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  double v12 = std::string::append(&v16, ")");
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
  }
  else if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v15.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_14:
    if ((v18 & 0x80000000) == 0) {
      return;
    }
LABEL_20:
    operator delete(v17[0]);
    return;
  }
LABEL_19:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (v18 < 0) {
    goto LABEL_20;
  }
}

void sub_10028F41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0)
  {
    operator delete(*(void **)(v28 - 64));
    if ((a28 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a15 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v28 - 17) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a10);
  if ((*(char *)(v28 - 17) & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_10028F4E0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 120);
    long long v5 = *(void **)(a1 + 112);
    if (v4 != v3)
    {
      uint64_t v6 = *(void *)(a1 + 120);
      do
      {
        unint64_t v8 = *(void **)(v6 - 24);
        v6 -= 24;
        long long v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 16) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      long long v5 = *(void **)(a1 + 112);
    }
    *(void *)(a1 + 12sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v3;
    operator delete(v5);
  }
  if (*(unsigned char *)(a1 + 80))
  {
    std::string::size_type v9 = *(void **)(a1 + 88);
    if (v9)
    {
      *(void *)(a1 + 96) = v9;
      operator delete(v9);
    }
    *(unsigned char *)(a1 + 8sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
  }
  if (*(unsigned char *)a1)
  {
    BOOL v10 = *(void **)(a1 + 48);
    if (v10)
    {
      *(void *)(a1 + 56) = v10;
      operator delete(v10);
    }
    long long v11 = *(void **)(a1 + 8);
    if (v11)
    {
      *(void *)(a1 + 16) = v11;
      operator delete(v11);
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void *sub_10028F5B0(void *result, void *a2)
{
  if (a2[1] != result[1])
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    sub_10014B3FC((uint64_t)v17);
  }
  unint64_t v2 = result[2];
  uint64_t v3 = result[3];
  if (a2[3] - a2[2] != v3 - v2)
  {
    sub_1000AE4B0(__p, "");
    sub_10016A2C4((uint64_t)__p, 0, 0);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    sub_1000D11E0((uint64_t)v17);
  }
  if (v3 != v2)
  {
    unint64_t v4 = (uint64_t)(v3 - v2) >> 3;
    unint64_t v5 = a2[2];
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    if (v4 < 6 || (v2 < v5 + 8 * v4 ? (BOOL v6 = v5 >= v2 + 8 * v4) : (BOOL v6 = 1), !v6))
    {
      unint64_t v7 = 0;
LABEL_17:
      unint64_t v12 = v4 - v7;
      uint64_t v13 = 8 * v7;
      std::string v14 = (double *)(v5 + v13);
      std::string v15 = (double *)(v2 + v13);
      do
      {
        double v16 = *v14++;
        *std::string v15 = v16 + *v15;
        ++v15;
        --v12;
      }
      while (v12);
      return result;
    }
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v8 = (float64x2_t *)(v5 + 16);
    std::string::size_type v9 = (float64x2_t *)(v2 + 16);
    unint64_t v10 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v11 = vaddq_f64(*v8, *v9);
      v9[-1] = vaddq_f64(v8[-1], v9[-1]);
      *std::string::size_type v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v4 != v7) {
      goto LABEL_17;
    }
  }
  return result;
}

void sub_10028F75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10028F77C(void **a1, __n128 *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_1000A9108();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x333333333333333) {
      sub_1000A6A10();
    }
    unint64_t v7 = operator new(80 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v22 = (__n128 *)&v7[10 * v3];
  char v24 = (char *)&v7[10 * v6];
  sub_100033728(v22, a2);
  __n128 v8 = a2[2];
  v22[1] = a2[1];
  v22[2] = v8;
  v22[3].n128_u16[0] = a2[3].n128_u16[0];
  unint64_t v9 = a2[4].n128_u64[0];
  v22[3].n128_u64[1] = a2[3].n128_u64[1];
  v22[4].n128_u64[0] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  v7[10 * v3 + 9] = a2[4].n128_u64[1];
  unint64_t v10 = (char *)&v7[10 * v3];
  float64x2_t v11 = (char *)&v22[5];
  uint64_t v13 = (char *)*a1;
  unint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    char v19 = (char *)a1[1];
  }
  else
  {
    unint64_t v14 = 0;
    do
    {
      std::string v15 = (char *)&v22[v14 / 0x10];
      sub_100033728(&v22[v14 / 0x10 - 5], (__n128 *)&v12[v14 - 80]);
      long long v16 = *(_OWORD *)&v12[v14 - 64];
      long long v17 = *(_OWORD *)&v12[v14 - 48];
      *((_WORD *)v15 - 16) = *(_WORD *)&v12[v14 - 32];
      *((_OWORD *)v15 - 4) = v16;
      *((_OWORD *)v15 - 3) = v17;
      *((void *)v15 - 3) = *(void *)&v12[v14 - 24];
      uint64_t v18 = *(void *)&v12[v14 - 16];
      *((void *)v15 - 2) = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      v22[v14 / 0x10 - 1].n128_u64[1] = *(void *)&v12[v14 - 8];
      v14 -= 80;
    }
    while (&v12[v14] != v13);
    char v19 = (char *)*a1;
    unint64_t v12 = (char *)a1[1];
    unint64_t v10 = (char *)&v22[v14 / 0x10];
    float64x2_t v11 = (char *)&v22[5];
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v24;
  if (v12 != v19)
  {
    do
    {
      unsigned int v23 = v12 - 80;
      double v20 = (std::__shared_weak_count *)*((void *)v12 - 2);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      v12 -= 80;
    }
    while (v23 != v19);
    unint64_t v12 = v19;
  }
  if (v12) {
    operator delete(v12);
  }
  return v11;
}

void sub_10028F9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10024A760((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028F9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_1003A6700();
  }
  sub_10024A760((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028FA18()
{
  atomic_fetch_add((atomic_ullong *volatile)(v0 + 8), v1);
}

void sub_10028FA24()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_10028FA9C()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_10028FB14(uint64_t *a1, uint64_t a2, double a3)
{
  if (!*(void *)(a2 + 24))
  {
    uint64_t v10 = a1[5];
    uint64_t v9 = a1[6];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    float64x2_t v11 = *(std::__shared_weak_count **)(a2 + 32);
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = v9;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  uint64_t v6 = *a1;
  unint64_t v7 = (std::__shared_weak_count *)a1[4];
  uint64_t v12 = a1[3];
  uint64_t v13 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1002586BC((uint64_t)v14, a2);
  (*(void (**)(uint64_t, uint64_t *, unsigned char *, double))(*(void *)v6 + 24))(v6, &v12, v14, a3);
  sub_1002583D8((uint64_t)v14);
  __n128 v8 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_10028FCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10028FCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10028FCD8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = *(void *)a1;
  std::string::size_type v10 = *(void *)(a1 + 40);
  sub_10023BDF4(&v24, a3);
  double v11 = sub_1001E1E04(a4, *(_DWORD *)(a1 + 56));
  sub_1002819EC((uint64_t)&v28, (uint64_t)&v24, a5, v11);
  sub_10024AD84(v9, a2, v10, (uint64_t *)&v28);
  if (__p)
  {
    unint64_t v31 = __p;
    operator delete(__p);
  }
  uint64_t v12 = (char *)v28;
  if (v28)
  {
    uint64_t v13 = v29;
    unint64_t v14 = v28;
    if (v29 != v28)
    {
      std::string v15 = v29 - 168;
      do
      {
        int v17 = *((_DWORD *)v13 - 44);
        if (v17 == v17 >> 31)
        {
          if (*(v13 - 128)) {
            *(v13 - 128) = 0;
          }
        }
        else
        {
          uint64_t v16 = *((void *)v13 - 21);
          if (v17 < 0)
          {
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
            }
          }
          else
          {
            (*(void (**)(char *))v16)(v13 - 168);
          }
        }
        v13 -= 208;
        v15 -= 208;
      }
      while (v13 != v12);
      unint64_t v14 = v28;
    }
    int v29 = v12;
    operator delete(v14);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  uint64_t v18 = (char *)v24;
  if (v24)
  {
    char v19 = v25;
    double v20 = v24;
    if (v25 != v24)
    {
      uint64_t v21 = v25 - 168;
      do
      {
        int v23 = *((_DWORD *)v19 - 44);
        if (v23 == v23 >> 31)
        {
          if (*(v19 - 128)) {
            *(v19 - 128) = 0;
          }
        }
        else
        {
          uint64_t v22 = *((void *)v19 - 21);
          if (v23 < 0)
          {
            if (v22) {
              (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
            }
          }
          else
          {
            (*(void (**)(char *))v22)(v19 - 168);
          }
        }
        v19 -= 208;
        v21 -= 208;
      }
      while (v19 != v18);
      double v20 = v24;
    }
    uint64_t v25 = v18;
    operator delete(v20);
  }
}

void sub_10028FEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_10028FF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_10028FF20(uint64_t *a1, uint64_t a2)
{
}

uint64_t sub_10028FF28(uint64_t *a1, void *a2, uint64_t a3)
{
  return sub_10024C4A4(*a1, a2, a1[1], a3);
}

BOOL sub_10028FF38(uint64_t a1, uint64_t a2)
{
  return sub_10024C5B0(*(void *)a1, a2, *(float **)(a1 + 8));
}

uint64_t sub_10028FF44(uint64_t *a1, uint64_t a2)
{
  return sub_10024C53C(*a1, a1[2], a2);
}

uint64_t sub_10028FF58(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10028FF98(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void sub_10028FFA0()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100290018()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

uint64_t sub_100290090(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *a2);
}

uint64_t sub_1002900BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

void sub_1002900E4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(char **)(*(void *)a1 + 56);
  unint64_t v4 = *(char **)(*(void *)a1 + 64);
  uint64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    __n128 v8 = *(char **)(*(void *)a1 + 64);
  }
  else
  {
    unint64_t v7 = v6 >> 3;
    __n128 v8 = *(char **)(*(void *)a1 + 56);
    do
    {
      unint64_t v9 = v7 >> 1;
      std::string::size_type v10 = (uint64_t *)&v8[8 * (v7 >> 1)];
      uint64_t v12 = *v10;
      double v11 = (char *)(v10 + 1);
      v7 += ~(v7 >> 1);
      if (v12 < a2) {
        __n128 v8 = v11;
      }
      else {
        unint64_t v7 = v9;
      }
    }
    while (v7);
  }
  uint64_t v13 = v8 - v5;
  unint64_t v14 = (unint64_t)v13 >> 3;
  if ((int)((unint64_t)v13 >> 3) <= 1) {
    LODWORD(v14) = 1;
  }
  uint64_t v15 = (v14 - 1);
  uint64_t v16 = (int)(v13 >> 3);
  uint64_t v17 = (v6 >> 3) - 1;
  BOOL v18 = v4 == v8;
  if (v4 == v8) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v15;
  }
  if (!v18) {
    uint64_t v17 = v16;
  }
  uint64_t v20 = *(void *)(*(void *)a1 + 112);
  uint64_t v21 = (long long *)(v20 + 24 * v19);
  uint64_t v22 = (long long *)(v20 + 24 * v17);
  if (*((char *)v21 + 23) < 0)
  {
    sub_1000559FC(v25, *(void **)v21, *((void *)v21 + 1));
    if ((*((char *)v22 + 23) & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    long long v23 = *v21;
    uint64_t v26 = *((void *)v21 + 2);
    *(_OWORD *)uint64_t v25 = v23;
    if ((*((char *)v22 + 23) & 0x80000000) == 0)
    {
LABEL_18:
      long long v24 = *v22;
      uint64_t v28 = *((void *)v22 + 2);
      long long __p = v24;
      goto LABEL_21;
    }
  }
  sub_1000559FC(&__p, *(void **)v22, *((void *)v22 + 1));
LABEL_21:
  sub_100085B24(a3, (uint64_t)v25);
  sub_100085B24(a3 + 2, (uint64_t)&__p);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(v25[0]);
    return;
  }
  operator delete((void *)__p);
  if (SHIBYTE(v26) < 0) {
    goto LABEL_25;
  }
}

void sub_10029024C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100290268(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15)
{
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 8);
  if (v17)
  {
    sub_1003A6768(v17, (uint64_t)a1, a2, (uint64_t)&a15);
    BOOL v18 = a15;
    sub_1000D8BF8((uint64_t)&a9);
    _Unwind_Resume(v18);
  }
  sub_1000D8BF8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002902AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void **)a1;
  unint64_t v7 = (char *)v5[7];
  uint64_t v6 = (char *)v5[8];
  uint64_t v8 = v6 - v7;
  if (v6 == v7)
  {
    std::string::size_type v10 = (char *)v5[8];
  }
  else
  {
    unint64_t v9 = v8 >> 3;
    std::string::size_type v10 = (char *)v5[7];
    do
    {
      unint64_t v11 = v9 >> 1;
      uint64_t v12 = (uint64_t *)&v10[8 * (v9 >> 1)];
      uint64_t v14 = *v12;
      uint64_t v13 = (char *)(v12 + 1);
      v9 += ~(v9 >> 1);
      if (v14 < a2) {
        std::string::size_type v10 = v13;
      }
      else {
        unint64_t v9 = v11;
      }
    }
    while (v9);
  }
  unint64_t v15 = (unint64_t)(v10 - v7) >> 3;
  if ((int)v15 <= 1) {
    LODWORD(v15) = 1;
  }
  unint64_t v16 = (v15 - 1);
  uint64_t v17 = (v8 >> 3) - 1;
  if (v6 == v10) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = v16;
  }
  uint64_t v19 = v5[14];
  if (0xAAAAAAAAAAAAAAABLL * ((v5[15] - v19) >> 3) <= v18) {
    sub_1001F352C();
  }
  uint64_t v20 = *(void *)(a1 + 176);
  sub_100085B24(&v28, v19 + 24 * v18);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)v20 + 16))(v25, v20, &v28);
  uint64_t v21 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 24))(&v28);
  sub_1001485B8((uint64_t)v25, (uint64_t)&v28, a3);
  nullsub_17(&v28);
  uint64_t v22 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  long long v23 = v26;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  return nullsub_15(v25);
}

void sub_1002904DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_1002904F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10029050C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100198250((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100290520()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_100290598()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_100290610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (qword_10047BED8 == -1)
  {
    unint64_t v7 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BED8, &stru_1004638B0);
  unint64_t v7 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    uint64_t v8 = a4[1] - *a4;
    *(_DWORD *)std::string buf = 134217984;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "UniformGeneratorBase::setParticleState, for #outputParticles=%zu", buf, 0xCu);
  }
LABEL_4:
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  *(void *)&uint8_t buf[8] = 0;
  *(void *)&uint8_t buf[16] = 0;
  *(void *)std::string buf = off_10045DA98;
  char v29 = 0;
  unint64_t v9 = *a4;
  std::string::size_type v10 = a4[1];
  if (*a4 == v10)
  {
    nullsub_17(buf);
  }
  else
  {
    do
    {
      uint64_t v12 = (uint64_t *)sub_1002ADBD0(*(uint64_t **)(a3 + 40), a2, 1);
      unint64_t v14 = *v12;
      uint64_t v13 = (std::__shared_weak_count *)v12[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v15 = v27;
      unint64_t v26 = v14;
      uint64_t v27 = v13;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      unint64_t v16 = v26;
      v24[0] = (*(double (**)(unint64_t))(*(void *)v26 + 24))(v26);
      v24[1] = v17;
      _OWORD v24[2] = v18;
      void v24[3] = v19;
      sub_100358954(v24, a2, (uint64_t)v25);
      sub_10007B704((uint64_t)buf, (uint64_t)v25);
      nullsub_17(v25);
      uint64_t v20 = *v9;
      unsigned long long v23 = __PAIR128__((unint64_t)v27, v16);
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_10024A158(v20, (long long *)&v23);
      uint64_t v21 = (std::__shared_weak_count *)*((void *)&v23 + 1);
      if (*((void *)&v23 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      uint64_t v11 = *v9++;
      *(_OWORD *)(v11 + 16) = *(_OWORD *)&buf[8];
      *(unsigned char *)(v11 + 48) = 0;
    }
    while (v9 != v10);
    uint64_t v22 = v27;
    nullsub_17(buf);
    if (v22)
    {
      if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
}

void sub_1002908FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
}

void sub_100290920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  nullsub_17((uint64_t *)va);
  nullsub_17(va2);
  sub_1000BA884((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100290944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  nullsub_17(va1);
  sub_1000BA884((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100290964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (qword_10047BED8 != -1)
  {
    dispatch_once(&qword_10047BED8, &stru_1004638B0);
    unint64_t v7 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v7 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    uint64_t v8 = a4[1] - *a4;
    buf.n128_u32[0] = 134217984;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WifiHistoryWeight::setParticleState, for #outputParticles=%zu", (uint8_t *)&buf, 0xCu);
  }
LABEL_4:
  sub_1002B0898(a3, &v223);
  int v220 = 0;
  int v221 = 0;
  int v222 = 0;
  unint64_t v9 = v223;
  long long v207 = a4;
  if (v224 != v223)
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = v221;
      if (v221 >= v222)
      {
        uint64_t v13 = (char *)v220;
        int64_t v14 = v221 - (unsigned char *)v220;
        uint64_t v15 = (v221 - (unsigned char *)v220) >> 3;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61) {
          sub_1000A9108();
        }
        uint64_t v17 = v222 - (unsigned char *)v220;
        if ((v222 - (unsigned char *)v220) >> 2 > v16) {
          unint64_t v16 = v17 >> 2;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 >> 61) {
            sub_1000A6A10();
          }
          double v19 = (char *)operator new(8 * v18);
        }
        else
        {
          double v19 = 0;
        }
        uint64_t v20 = &v19[8 * v15];
        *(void *)uint64_t v20 = 0x3F947AE147AE147BLL;
        uint64_t v12 = v20 + 8;
        if (v11 != v13)
        {
          unint64_t v21 = v11 - 8 - v13;
          if (v21 < 0x58) {
            goto LABEL_222;
          }
          if ((unint64_t)(v11 - &v19[v14]) < 0x20) {
            goto LABEL_222;
          }
          uint64_t v22 = (v21 >> 3) + 1;
          uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
          long long v24 = &v11[-v23];
          v20 -= v23;
          uint64_t v25 = &v19[8 * v15 - 16];
          unint64_t v26 = v11 - 16;
          uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v28 = *(_OWORD *)v26;
            *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
            *(_OWORD *)uint64_t v25 = v28;
            v25 -= 32;
            v26 -= 32;
            v27 -= 4;
          }
          while (v27);
          uint64_t v11 = v24;
          if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_222:
            do
            {
              uint64_t v29 = *((void *)v11 - 1);
              v11 -= 8;
              *((void *)v20 - 1) = v29;
              v20 -= 8;
            }
            while (v11 != v13);
          }
        }
        int v220 = v20;
        int v221 = v12;
        int v222 = &v19[8 * v18];
        if (v13)
        {
          operator delete(v13);
          unint64_t v9 = v223;
        }
      }
      else
      {
        *(void *)int v221 = 0x3F947AE147AE147BLL;
        uint64_t v12 = v11 + 8;
      }
      int v221 = v12;
      int v30 = v9[52 * v10 + 8];
      if (v30 == v30 >> 31)
      {
        double v31 = *(double *)&v9[52 * v10 + 18];
      }
      else
      {
        uint64_t v32 = (char *)&v9[52 * v10];
        unsigned int v35 = (char *)*((void *)v32 + 5);
        uint64_t v33 = v32 + 40;
        unint64_t v34 = v35;
        if (v30 >= 0) {
          uint64_t v36 = v33;
        }
        else {
          uint64_t v36 = v34;
        }
        double v31 = (double)*((int *)v36 + 23);
      }
      a4 = v207;
      if (sub_100233D08(v31)) {
        *((void *)v225 + v1sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = 0;
      }
      ++v10;
      unint64_t v9 = v223;
    }
    while (v10 < 0x4EC4EC4EC4EC4EC5 * ((v224 - (unsigned char *)v223) >> 4));
  }
  sub_10023BDF4(&v212, (uint64_t *)&v223);
  sub_1002819EC((uint64_t)&v216, (uint64_t)&v212, 0, 1.0);
  if (__p)
  {
    uint64_t v215 = __p;
    operator delete(__p);
  }
  uint64_t v37 = (char *)v212;
  if (v212)
  {
    long long v38 = v213;
    uint64_t v39 = v212;
    if (v213 != v212)
    {
      double v40 = v213 - 168;
      do
      {
        int v42 = *((_DWORD *)v38 - 44);
        if (v42 == v42 >> 31)
        {
          if (*(v38 - 128)) {
            *(v38 - 128) = 0;
          }
        }
        else
        {
          uint64_t v41 = *((void *)v38 - 21);
          if (v42 < 0)
          {
            if (v41) {
              (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
            }
          }
          else
          {
            (*(void (**)(char *))v41)(v38 - 168);
          }
        }
        v38 -= 208;
        v40 -= 208;
      }
      while (v38 != v37);
      uint64_t v39 = v212;
    }
    int v213 = v37;
    operator delete(v39);
  }
  uint64_t v209 = 0;
  uint64_t v210 = 0;
  unint64_t v211 = 0;
  unsigned int v43 = *a4;
  uint64_t v44 = a4[1];
  if (*a4 != v44)
  {
    for (uint64_t i = v43 + 1; i != v44; ++i)
    {
      uint64_t v46 = *i;
      double v47 = sub_100273560(*v43);
      if (v47 > sub_100273560(v46)) {
        unsigned int v43 = i;
      }
    }
  }
  double v48 = sub_100273560(*v43);
  unsigned int v50 = *a4;
  uint64_t v49 = a4[1];
  long double v51 = 0.0;
  if (v48 == -INFINITY)
  {
    unsigned int v52 = *a4;
  }
  else
  {
    unsigned int v52 = a4[1];
    if (v50 != v49)
    {
      do
      {
        double v53 = sub_100273560(*v50);
        long double v51 = v51 + exp(v53 - v48);
        ++v50;
      }
      while (v50 != v49);
      unsigned int v52 = *a4;
      uint64_t v49 = a4[1];
    }
  }
  double v54 = log(v51);
  sub_100274CB8((char **)&v209, (((char *)v49 - (char *)v52) >> 1) + v49 - v52);
  unint64_t v55 = (__n128 **)*a4;
  uint64_t v56 = (__n128 **)a4[1];
  if (*a4 == (uint64_t *)v56) {
    goto LABEL_81;
  }
  while (2)
  {
    int v57 = 5;
    do
    {
      uint64_t v58 = *v55;
      char v59 = v210;
      if ((unint64_t)v210 >= v211)
      {
        char v63 = (__n128 *)sub_10025E480(&v209, *v55);
        uint64_t v210 = v63;
        if (v57 == 5) {
          goto LABEL_66;
        }
      }
      else
      {
        sub_100033728(v210, *v55);
        __n128 v60 = v58[1];
        __n128 v61 = v58[2];
        v59[3].n128_u16[0] = v58[3].n128_u16[0];
        v59[1] = v60;
        void v59[2] = v61;
        v59[3].n128_u64[1] = v58[3].n128_u64[1];
        unint64_t v62 = v58[4].n128_u64[0];
        v59[4].n128_u64[0] = v62;
        if (v62) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
        }
        v59[4].n128_u64[1] = v58[4].n128_u64[1];
        char v63 = v59 + 5;
        uint64_t v210 = v59 + 5;
        if (v57 == 5) {
          goto LABEL_66;
        }
      }
      v63[-3].n128_f64[1] = (*(double (**)(uint64_t, double, double))(*(void *)a2 + 24))(a2, -2.0, 2.0)
                          + v63[-3].n128_f64[1];
      uint64_t v64 = (*(uint64_t (**)(unint64_t))(*(void *)v63[-2].n128_u64[1] + 16))(v63[-2].n128_u64[1]);
      uint64_t v65 = *(double (**)(uint64_t, double, double))(*(void *)a2 + 24);
      if (!v64)
      {
        double v93 = v65(a2, 0.0, 20.0);
        double v94 = (*(double (**)(uint64_t))(*(void *)a2 + 48))(a2);
        double v95 = v93 + 5.0;
        double v96 = v63[-4].n128_f64[0];
        __double2 v97 = __sincos_stret(v94);
        double v71 = v96 + v95 * v97.__cosval;
        double v72 = v63[-4].n128_f64[1] + v95 * v97.__sinval;
LABEL_65:
        v63[-4].n128_f64[0] = v71;
        v63[-4].n128_f64[1] = v72;
        goto LABEL_66;
      }
      double v66 = v65(a2, 0.0, 20.0);
      double v67 = (*(double (**)(uint64_t))(*(void *)a2 + 48))(a2);
      double v68 = v66 + 5.0;
      double v69 = v63[-4].n128_f64[0];
      __double2 v70 = __sincos_stret(v67);
      double v71 = v69 + v68 * v70.__cosval;
      double v72 = v63[-4].n128_f64[1] + v68 * v70.__sinval;
      if ((*(unsigned __int8 (**)(uint64_t, double, double))(*(void *)v64 + 16))(v64, v71, v72)) {
        goto LABEL_65;
      }
      double v73 = (*(double (**)(uint64_t, double, double))(*(void *)a2 + 24))(a2, 0.0, 20.0);
      double v74 = (*(double (**)(uint64_t))(*(void *)a2 + 48))(a2);
      double v75 = v73 + 5.0;
      double v76 = v63[-4].n128_f64[0];
      __double2 v77 = __sincos_stret(v74);
      double v71 = v76 + v75 * v77.__cosval;
      double v72 = v63[-4].n128_f64[1] + v75 * v77.__sinval;
      if ((*(unsigned __int8 (**)(uint64_t, double, double))(*(void *)v64 + 16))(v64, v71, v72)) {
        goto LABEL_65;
      }
      double v78 = (*(double (**)(uint64_t, double, double))(*(void *)a2 + 24))(a2, 0.0, 20.0);
      double v79 = (*(double (**)(uint64_t))(*(void *)a2 + 48))(a2);
      double v80 = v78 + 5.0;
      double v81 = v63[-4].n128_f64[0];
      __double2 v82 = __sincos_stret(v79);
      double v71 = v81 + v80 * v82.__cosval;
      double v72 = v63[-4].n128_f64[1] + v80 * v82.__sinval;
      if ((*(unsigned __int8 (**)(uint64_t, double, double))(*(void *)v64 + 16))(v64, v71, v72)) {
        goto LABEL_65;
      }
      double v83 = (*(double (**)(uint64_t, double, double))(*(void *)a2 + 24))(a2, 0.0, 20.0);
      double v84 = (*(double (**)(uint64_t))(*(void *)a2 + 48))(a2);
      double v85 = v83 + 5.0;
      double v86 = v63[-4].n128_f64[0];
      __double2 v87 = __sincos_stret(v84);
      double v71 = v86 + v85 * v87.__cosval;
      double v72 = v63[-4].n128_f64[1] + v85 * v87.__sinval;
      if ((*(unsigned __int8 (**)(uint64_t, double, double))(*(void *)v64 + 16))(v64, v71, v72)) {
        goto LABEL_65;
      }
      double v88 = (*(double (**)(uint64_t, double, double))(*(void *)a2 + 24))(a2, 0.0, 20.0);
      double v89 = (*(double (**)(uint64_t))(*(void *)a2 + 48))(a2);
      double v90 = v88 + 5.0;
      double v91 = v63[-4].n128_f64[0];
      __double2 v92 = __sincos_stret(v89);
      double v71 = v91 + v90 * v92.__cosval;
      double v72 = v63[-4].n128_f64[1] + v90 * v92.__sinval;
      if ((*(unsigned __int8 (**)(uint64_t, double, double))(*(void *)v64 + 16))(v64, v71, v72)) {
        goto LABEL_65;
      }
LABEL_66:
      --v57;
    }
    while (v57);
    if (++v55 != v56) {
      continue;
    }
    break;
  }
LABEL_81:
  sub_10026C150((double *)(a1 + 8), (uint64_t *)&v209, &v220, (double *)&v216, (uint64_t *)v208);
  int v99 = (__n128 *)v209;
  int v98 = v210;
  if (v210 == v209)
  {
    int v99 = v210;
    uint64_t v105 = (char *)a4[1] - (char *)*a4;
    if (0xCCCCCCCCCCCCCCCDLL * (((char *)v210 - (unsigned char *)v209) >> 4) >= v105 >> 3) {
      goto LABEL_87;
    }
LABEL_137:
    sub_1000AE4B0(&v228, "");
    sub_10014C790("Didn't generate enough hypotheses for output!", (std::string *)&buf);
    sub_10016A2C4((uint64_t)&v228, (uint64_t)&buf, 1);
    if (v235.n128_i8[7] < 0) {
      operator delete((void *)buf.n128_u64[0]);
    }
    if (v229.n128_i8[7] < 0) {
      operator delete((void *)v228.n128_u64[0]);
    }
    sub_1000D11E0((uint64_t)v227);
  }
  uint64_t v100 = 0;
  unint64_t v101 = 0;
  do
  {
    if (fabs(*((double *)v208[0] + v101)) == INFINITY) {
      *((void *)v208[0] + v101) = 0xC202A05F20000000;
    }
    n128_f64 = v99[v100].n128_f64;
    double v103 = sub_100273560((uint64_t)n128_f64);
    sub_1002753A8(n128_f64, *((double *)v208[0] + v101++) - v103);
    int v99 = (__n128 *)v209;
    int v98 = v210;
    unint64_t v104 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v210 - (unsigned char *)v209) >> 4);
    v100 += 5;
  }
  while (v101 < v104);
  uint64_t v105 = (char *)a4[1] - (char *)*a4;
  if (v104 < v105 >> 3) {
    goto LABEL_137;
  }
LABEL_87:
  uint64_t v106 = v105 << 29;
  if (v105 << 29)
  {
    uint64_t v107 = (int)(v105 >> 3);
    if (v106 >= 0x100000001)
    {
      unint64_t v108 = (unint64_t)(v107 - 2) >> 1;
      unint64_t v109 = v108 + 1;
      uint64_t v110 = (uint64_t)&v99[5 * v108];
      do
      {
        sub_100294D74((uint64_t)v99, (int)(v105 >> 3), v110);
        v110 -= 80;
        --v109;
      }
      while (v109);
    }
    uint64_t v111 = &v99[5 * (int)((unint64_t)v105 >> 3)];
    if (v111 != v98)
    {
      uint64_t v112 = (uint64_t)&v99[5 * (int)((unint64_t)v105 >> 3)];
      do
      {
        double v113 = sub_100273560(v112);
        if (v113 > sub_100273560((uint64_t)v99))
        {
          sub_10024F090(v112, (uint64_t)v99);
          sub_100294D74((uint64_t)v99, v107, (uint64_t)v99);
        }
        v112 += 80;
      }
      while ((__n128 *)v112 != v98);
    }
    if (v106 >= 0x100000001)
    {
      uint64_t v114 = v111;
      int64_t v115 = 80 * v107 / 0x50uLL;
      do
      {
        __int16 v117 = v114;
        sub_100033728(&v228, v99);
        uint64_t v118 = 0;
        __n128 v119 = v99[1];
        __n128 v120 = v99[2];
        unsigned __int16 v121 = v99[3].n128_u16[0];
        __n128 v232 = *(__n128 *)((char *)v99 + 56);
        unsigned __int16 v231 = v121;
        v99[3].n128_u64[1] = 0;
        v99[4].n128_u64[0] = 0;
        unint64_t v233 = v99[4].n128_u64[1];
        uint64_t v122 = (uint64_t)v99;
        __n128 v229 = v119;
        __n128 v230 = v120;
        do
        {
          uint64_t v123 = v122;
          v122 += 80 * v118 + 80;
          uint64_t v124 = 2 * v118;
          uint64_t v118 = (2 * v118) | 1;
          uint64_t v125 = v124 + 2;
          if (v124 + 2 < v115)
          {
            double v126 = sub_100273560(v122);
            if (v126 > sub_100273560(v122 + 80))
            {
              v122 += 80;
              uint64_t v118 = v125;
            }
          }
          sub_100033728((__n128 *)v123, (__n128 *)v122);
          long long v127 = *(_OWORD *)(v122 + 16);
          long long v128 = *(_OWORD *)(v122 + 32);
          *(_WORD *)(v123 + 48) = *(_WORD *)(v122 + 48);
          *(_OWORD *)(v123 + 16) = v127;
          *(_OWORD *)(v123 + 32) = v128;
          long long v129 = *(_OWORD *)(v122 + 56);
          *(void *)(v122 + 56) = 0;
          *(void *)(v122 + 64) = 0;
          uint64_t v130 = *(std::__shared_weak_count **)(v123 + 64);
          *(_OWORD *)(v123 + 56) = v129;
          if (v130 && !atomic_fetch_add(&v130->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
          *(void *)(v123 + 72) = *(void *)(v122 + 72);
        }
        while (v118 <= (uint64_t)((unint64_t)(v115 - 2) >> 1));
        unsigned int v131 = (__n128 *)(v122 + 16);
        v114 -= 5;
        if ((__n128 *)v122 == &v117[-5])
        {
          sub_100033728((__n128 *)v122, &v228);
          __n128 v158 = v229;
          __n128 v159 = v230;
          *(_WORD *)(v122 + 48) = v231;
          __n128 *v131 = v158;
          *(__n128 *)(v122 + 32) = v159;
          __n128 v160 = v232;
          __n128 v232 = 0uLL;
          int v161 = *(std::__shared_weak_count **)(v122 + 64);
          *(__n128 *)(v122 + 56) = v160;
          if (v161 && !atomic_fetch_add(&v161->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
          *(void *)(v122 + 72) = v233;
          goto LABEL_131;
        }
        sub_100033728((__n128 *)v122, v117 - 5);
        __n128 v132 = v117[-4];
        __n128 v133 = v117[-3];
        *(_WORD *)(v122 + 48) = v117[-2].n128_u16[0];
        __n128 *v131 = v132;
        *(__n128 *)(v122 + 32) = v133;
        long long v134 = *(long long *)((char *)&v117[-2] + 8);
        v117[-2].n128_u64[1] = 0;
        v117[-1].n128_u64[0] = 0;
        BOOL v135 = *(std::__shared_weak_count **)(v122 + 64);
        *(_OWORD *)(v122 + 56) = v134;
        if (v135 && !atomic_fetch_add(&v135->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
        *(void *)(v122 + 72) = v117[-1].n128_u64[1];
        sub_100033728(v117 - 5, &v228);
        int v136 = v117 - 4;
        __n128 v137 = v229;
        __n128 v138 = v230;
        v136[2].n128_u16[0] = v231;
        *int v136 = v137;
        v136[1] = v138;
        __n128 v139 = v232;
        __n128 v232 = 0uLL;
        unsigned int v140 = (std::__shared_weak_count *)v117[-1].n128_u64[0];
        *(__n128 *)((char *)v117 - 24) = v139;
        if (v140 && !atomic_fetch_add(&v140->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
          v117[-1].n128_u64[1] = v233;
          uint64_t v141 = v122 + 80 - (void)v99;
          if (v141 >= 81)
          {
LABEL_114:
            unint64_t v142 = (v141 / 0x50uLL - 2) >> 1;
            uint64_t v143 = (uint64_t)&v99[5 * v142];
            double v144 = sub_100273560(v143);
            if (v144 > sub_100273560(v122))
            {
              sub_100033728(&buf, (__n128 *)v122);
              __n128 v145 = *v131;
              long long v146 = *(_OWORD *)(v122 + 32);
              __int16 v237 = *(_WORD *)(v122 + 48);
              __n128 v235 = v145;
              long long v236 = v146;
              long long v238 = *(_OWORD *)(v122 + 56);
              *(void *)(v122 + 56) = 0;
              *(void *)(v122 + 64) = 0;
              uint64_t v239 = *(void *)(v122 + 72);
              do
              {
                uint64_t v147 = v143;
                sub_100033728((__n128 *)v122, (__n128 *)v143);
                long long v148 = *(_OWORD *)(v143 + 16);
                long long v149 = *(_OWORD *)(v143 + 32);
                *(_WORD *)(v122 + 48) = *(_WORD *)(v143 + 48);
                *(_OWORD *)(v122 + 16) = v148;
                *(_OWORD *)(v122 + 32) = v149;
                long long v150 = *(_OWORD *)(v143 + 56);
                *(void *)(v143 + 56) = 0;
                *(void *)(v143 + 64) = 0;
                int v151 = *(std::__shared_weak_count **)(v122 + 64);
                *(_OWORD *)(v122 + 56) = v150;
                if (v151 && !atomic_fetch_add(&v151->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                  std::__shared_weak_count::__release_weak(v151);
                }
                *(void *)(v122 + 72) = *(void *)(v147 + 72);
                if (!v142) {
                  break;
                }
                unint64_t v142 = (v142 - 1) >> 1;
                uint64_t v143 = (uint64_t)&v99[5 * v142];
                double v152 = sub_100273560(v143);
                uint64_t v122 = v147;
              }
              while (v152 > sub_100273560((uint64_t)&buf));
              sub_100033728((__n128 *)v147, &buf);
              __n128 v153 = v235;
              long long v154 = v236;
              *(_WORD *)(v147 + 48) = v237;
              *(__n128 *)(v147 + 16) = v153;
              *(_OWORD *)(v147 + 32) = v154;
              long long v155 = v238;
              long long v238 = 0uLL;
              int v156 = *(std::__shared_weak_count **)(v147 + 64);
              *(_OWORD *)(v147 + 56) = v155;
              if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
                std::__shared_weak_count::__release_weak(v156);
              }
              int v157 = (std::__shared_weak_count *)*((void *)&v238 + 1);
              *(void *)(v147 + 72) = v239;
              if (v157 && !atomic_fetch_add(&v157->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
          }
        }
        else
        {
          v117[-1].n128_u64[1] = v233;
          uint64_t v141 = v122 + 80 - (void)v99;
          if (v141 >= 81) {
            goto LABEL_114;
          }
        }
LABEL_131:
        uint64_t v162 = (std::__shared_weak_count *)v232.n128_u64[1];
        if (v232.n128_u64[1]
          && !atomic_fetch_add((atomic_ullong *volatile)(v232.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      while (v115-- > 2);
    }
  }
  int v163 = v207[1];
  if (v163 != *v207)
  {
    uint64_t v164 = 0;
    unint64_t v165 = 0;
    int v163 = *v207;
    do
    {
      long long v167 = (char *)v209;
      unint64_t v168 = (char *)v209 + v164;
      uint64_t v169 = v163[v165];
      sub_100033728((__n128 *)v169, (__n128 *)((char *)v209 + v164));
      long long v170 = *((_OWORD *)v168 + 1);
      long long v171 = *((_OWORD *)v168 + 2);
      *(_WORD *)(v169 + 48) = *((_WORD *)v168 + 24);
      *(_OWORD *)(v169 + 16) = v170;
      *(_OWORD *)(v169 + 32) = v171;
      long long v172 = *(_OWORD *)(v168 + 56);
      *((void *)v168 + 7) = 0;
      *((void *)v168 + 8) = 0;
      unsigned int v173 = *(std::__shared_weak_count **)(v169 + 64);
      *(_OWORD *)(v169 + 56) = v172;
      if (v173 && !atomic_fetch_add(&v173->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
      *(void *)(v169 + 72) = *(void *)&v167[v164 + 72];
      ++v165;
      int v163 = *v207;
      uint64_t v166 = v207[1];
      v164 += 80;
    }
    while (v165 < v166 - *v207);
    if (v163 != v166)
    {
      for (uint64_t j = v163 + 1; j != v166; ++j)
      {
        uint64_t v175 = *j;
        double v176 = sub_100273560(*v163);
        if (v176 > sub_100273560(v175)) {
          int v163 = j;
        }
      }
    }
  }
  double v177 = sub_100273560(*v163);
  int v179 = *v207;
  unint64_t v178 = v207[1];
  v180.n128_u64[0] = 0xFFF0000000000000;
  if (v177 == -INFINITY)
  {
    v180.n128_f64[0] = log(0.0);
    if (v178 == v179) {
      goto LABEL_172;
    }
  }
  else
  {
    if (v179 == v178) {
      goto LABEL_172;
    }
    long double v181 = 0.0;
    do
    {
      double v182 = sub_100273560(*v179);
      long double v181 = v181 + exp(v182 - v177);
      ++v179;
    }
    while (v179 != v178);
    int v179 = *v207;
    uint64_t v183 = v207[1];
    v180.n128_f64[0] = log(v181);
    if (v183 == v179) {
      goto LABEL_172;
    }
  }
  unint64_t v184 = 0;
  double v185 = v48 + v54;
  double v186 = v185 - (v177 + v180.n128_f64[0]);
  BOOL v187 = COERCE__INT64(fabs(v186)) < 0x7FF0000000000000;
  do
  {
    if (v187)
    {
      double v188 = v186;
    }
    else
    {
      double v189 = sub_100273560(v179[v184]);
      int v179 = *v207;
      double v188 = v185 - log((double)(unint64_t)(v207[1] - *v207)) - v189;
    }
    sub_1002753A8((double *)v179[v184], v188);
    v180.n128_f64[0] = sub_100273560((*v207)[v184]);
    if ((v180.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
    {
      sub_1000AE4B0(&v228, "");
      sub_100295088("Should be no NaNs", (std::string *)&buf);
      sub_10016A2C4((uint64_t)&v228, (uint64_t)&buf, 1);
      if (v235.n128_i8[7] < 0) {
        operator delete((void *)buf.n128_u64[0]);
      }
      if (v229.n128_i8[7] < 0) {
        operator delete((void *)v228.n128_u64[0]);
      }
      sub_1000D11E0((uint64_t)v227);
    }
    ++v184;
    int v179 = *v207;
  }
  while (v184 < v207[1] - *v207);
LABEL_172:
  if (v208[0])
  {
    v208[1] = v208[0];
    operator delete(v208[0]);
  }
  unint64_t v190 = (__n128 *)v209;
  if (v209)
  {
    unint64_t v191 = v210;
    uint64_t v192 = v209;
    if (v210 != v209)
    {
      do
      {
        uint64_t v193 = (std::__shared_weak_count *)v191[-1].n128_u64[0];
        if (v193 && !atomic_fetch_add(&v193->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v193->__on_zero_shared)(v193, v180);
          std::__shared_weak_count::__release_weak(v193);
        }
        v191 -= 5;
      }
      while (v191 != v190);
      uint64_t v192 = v209;
    }
    uint64_t v210 = v190;
    operator delete(v192);
  }
  if (v218)
  {
    v219 = v218;
    operator delete(v218);
  }
  v194 = (char *)v216;
  if (v216)
  {
    uint64_t v195 = v217;
    long long v196 = v216;
    if (v217 != v216)
    {
      uint32_t v197 = v217 - 168;
      do
      {
        int v199 = *((_DWORD *)v195 - 44);
        if (v199 == v199 >> 31)
        {
          if (*(v195 - 128)) {
            *(v195 - 128) = 0;
          }
        }
        else
        {
          uint64_t v198 = *((void *)v195 - 21);
          if (v199 < 0)
          {
            if (v198) {
              (*(void (**)(uint64_t, __n128))(*(void *)v198 + 8))(v198, v180);
            }
          }
          else
          {
            (*(void (**)(char *))v198)(v195 - 168);
          }
        }
        v195 -= 208;
        v197 -= 208;
      }
      while (v195 != v194);
      long long v196 = v216;
    }
    int v217 = v194;
    operator delete(v196);
  }
  if (v220)
  {
    int v221 = (char *)v220;
    operator delete(v220);
  }
  if (v225)
  {
    long long v226 = v225;
    operator delete(v225);
  }
  int v200 = (char *)v223;
  if (v223)
  {
    uint64_t v201 = v224;
    long long v202 = v223;
    if (v224 != v223)
    {
      long long v203 = v224 - 168;
      do
      {
        int v205 = *((_DWORD *)v201 - 44);
        if (v205 == v205 >> 31)
        {
          if (*(v201 - 128)) {
            *(v201 - 128) = 0;
          }
        }
        else
        {
          uint64_t v204 = *((void *)v201 - 21);
          if (v205 < 0)
          {
            if (v204) {
              (*(void (**)(uint64_t, __n128))(*(void *)v204 + 8))(v204, v180);
            }
          }
          else
          {
            (*(void (**)(char *))v204)(v201 - 168);
          }
        }
        v201 -= 208;
        v203 -= 208;
      }
      while (v201 != v200);
      long long v202 = v223;
    }
    long long v224 = v200;
    operator delete(v202);
  }
}

void sub_100291F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  sub_100246424(&a19);
  sub_10023357C(&a29);
  if (a38)
  {
    a39 = (uint64_t)a38;
    operator delete(a38);
    double v54 = a44;
    if (!a44)
    {
LABEL_7:
      unint64_t v55 = a41;
      if (!a41) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  else
  {
    double v54 = a44;
    if (!a44) {
      goto LABEL_7;
    }
  }
  a45 = (uint64_t)v54;
  operator delete(v54);
  unint64_t v55 = a41;
  if (!a41) {
LABEL_8:
  }
    _Unwind_Resume(a1);
LABEL_11:
  uint64_t v56 = a42;
  int v57 = v55;
  if ((void *)a42 != v55)
  {
    uint64_t v58 = a42 - 168;
    do
    {
      int v60 = *(_DWORD *)(v56 - 176);
      if (v60 == v60 >> 31)
      {
        if (*(unsigned char *)(v56 - 128)) {
          *(unsigned char *)(v56 - 128) = 0;
        }
      }
      else
      {
        uint64_t v59 = *(void *)(v56 - 168);
        if (v60 < 0)
        {
          if (v59) {
            (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
          }
        }
        else
        {
          (*(void (**)(uint64_t))v59)(v56 - 168);
        }
      }
      v56 -= 208;
      v58 -= 208;
    }
    while ((void *)v56 != v55);
    int v57 = a41;
  }
  a42 = (uint64_t)v55;
  operator delete(v57);
  _Unwind_Resume(a1);
}

void sub_10029222C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int64x2_t *a5)
{
  if (qword_10047BED8 != -1) {
    dispatch_once(&qword_10047BED8, &stru_1004638B0);
  }
  unint64_t v7 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = (uint64_t)(a4[1] - *a4) >> 3;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WifiBoundsGeneratorBase::setParticleState, for #outputParticles=%zu", (uint8_t *)&buf, 0xCu);
  }
  long long buf = 0u;
  long long v111 = 0u;
  int v112 = 1065353216;
  unint64_t v9 = (void *)*a4;
  unint64_t v10 = (void *)a4[1];
  if ((void *)*a4 == v10)
  {
    uint64_t v11 = 0;
    goto LABEL_31;
  }
  do
  {
    uint64_t v13 = (void *)sub_1002ADBD0(*(uint64_t **)(a3 + 40), a2, *(unsigned __int8 *)(a1 + 64));
    int64_t v14 = sub_100292D44((uint64_t *)&buf, v13);
    uint64_t v15 = (char **)v14;
    uint64_t v17 = (char *)v14[1];
    unint64_t v16 = v14[2];
    if ((unint64_t)v17 < v16)
    {
      *(void *)uint64_t v17 = *v9;
      uint64_t v12 = (uint64_t)(v17 + 8);
      goto LABEL_8;
    }
    unint64_t v18 = (char *)*v14;
    uint64_t v19 = (uint64_t)&v17[-*v14];
    uint64_t v20 = v19 >> 3;
    unint64_t v21 = (v19 >> 3) + 1;
    if (v21 >> 61) {
      sub_1000A9108();
    }
    uint64_t v22 = v16 - (void)v18;
    if (v22 >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      if (v23 >> 61) {
        sub_1000A6A10();
      }
      long long v24 = operator new(8 * v23);
      uint64_t v25 = &v24[8 * v20];
      *(void *)uint64_t v25 = *v9;
      uint64_t v12 = (uint64_t)(v25 + 8);
      if (v17 == v18)
      {
LABEL_28:
        *uint64_t v15 = v25;
        v15[1] = (char *)v12;
        v15[2] = &v24[8 * v23];
        if (!v17) {
          goto LABEL_8;
        }
LABEL_29:
        operator delete(v17);
        goto LABEL_8;
      }
    }
    else
    {
      long long v24 = 0;
      uint64_t v25 = (char *)(8 * v20);
      *(void *)(8 * v2sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = *v9;
      uint64_t v12 = 8 * v20 + 8;
      if (v17 == v18) {
        goto LABEL_28;
      }
    }
    unint64_t v26 = v17 - 8 - v18;
    if (v26 < 0x58) {
      goto LABEL_138;
    }
    if ((unint64_t)(v17 - &v24[v19]) < 0x20) {
      goto LABEL_138;
    }
    uint64_t v27 = (v26 >> 3) + 1;
    uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v29 = &v17[-v28];
    v25 -= v28;
    int v30 = &v24[8 * v20 - 16];
    double v31 = (long long *)(v17 - 16);
    uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v33 = *v31;
      *(v30 - 1) = *(v31 - 1);
      *int v30 = v33;
      v30 -= 2;
      v31 -= 2;
      v32 -= 4;
    }
    while (v32);
    uint64_t v17 = v29;
    if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_138:
      do
      {
        uint64_t v34 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v25 - 1) = v34;
        v25 -= 8;
      }
      while (v17 != v18);
    }
    uint64_t v17 = *v15;
    *uint64_t v15 = v25;
    v15[1] = (char *)v12;
    v15[2] = &v24[8 * v23];
    if (v17) {
      goto LABEL_29;
    }
LABEL_8:
    v15[1] = (char *)v12;
    ++v9;
  }
  while (v9 != v10);
  uint64_t v11 = (uint64_t **)v111;
LABEL_31:
  long long v104 = 0uLL;
  double v103 = off_10045DA98;
  v105 &= 0xFCu;
  if (v11)
  {
    while (2)
    {
      unint64_t v101 = 0;
      uint64_t v102 = 0;
      long long __p = 0;
      if (*(void *)(*(uint64_t (**)(uint64_t *))(*v11[2] + 40))(v11[2]))
      {
        uint64_t v36 = (*(uint64_t (**)(uint64_t *))(*v11[2] + 40))(v11[2]);
        (*(void (**)(void **__return_ptr))(**(void **)v36 + 56))(v106);
        uint64_t v37 = v106[0];
        long long v38 = v106[1];
        *(void *)&long long v109 = 0;
        long long v108 = 0uLL;
        if (v106[0] == v106[1])
        {
          uint64_t v39 = 0;
        }
        else
        {
          uint64_t v39 = 0;
          do
          {
            if (*v37)
            {
              if ((unint64_t)v39 >= (unint64_t)v109)
              {
                int v42 = (void *)v108;
                uint64_t v43 = (uint64_t)((uint64_t)v39 - v108) >> 4;
                unint64_t v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 60) {
                  sub_1000A9108();
                }
                uint64_t v45 = v109 - v108;
                if ((uint64_t)(v109 - v108) >> 3 > v44) {
                  unint64_t v44 = v45 >> 3;
                }
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v46 = v44;
                }
                if (v46 >> 60) {
                  sub_1000A6A10();
                }
                double v47 = (char *)operator new(16 * v46);
                double v48 = &v47[16 * v43];
                long long v49 = *(_OWORD *)v37;
                *(_OWORD *)double v48 = *(_OWORD *)v37;
                if (*((void *)&v49 + 1))
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v49 + 1) + 8), 1uLL, memory_order_relaxed);
                  uint64_t v39 = (void *)*((void *)&v108 + 1);
                }
                unsigned int v50 = &v47[16 * v46];
                double v40 = v48 + 16;
                if (v39 == v42)
                {
                  *(void *)&long long v108 = &v47[16 * v43];
                  *((void *)&v108 + 1) = v48 + 16;
                  *(void *)&long long v109 = &v47[16 * v46];
                }
                else
                {
                  do
                  {
                    long long v51 = *((_OWORD *)v39 - 1);
                    v39 -= 2;
                    *((_OWORD *)v48 - 1) = v51;
                    v48 -= 16;
                    *uint64_t v39 = 0;
                    v39[1] = 0;
                  }
                  while (v39 != v42);
                  unsigned int v52 = (void *)*((void *)&v108 + 1);
                  int v42 = (void *)v108;
                  *(void *)&long long v108 = v48;
                  *((void *)&v108 + 1) = v40;
                  *(void *)&long long v109 = v50;
                  while (v52 != v42)
                  {
                    double v53 = (std::__shared_weak_count *)*(v52 - 1);
                    if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                      std::__shared_weak_count::__release_weak(v53);
                    }
                    v52 -= 2;
                  }
                }
                if (v42) {
                  operator delete(v42);
                }
              }
              else
              {
                *uint64_t v39 = *v37;
                uint64_t v41 = v37[1];
                v39[1] = v41;
                if (v41) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
                }
                double v40 = v39 + 2;
              }
              *((void *)&v108 + 1) = v40;
              uint64_t v39 = v40;
            }
            v37 += 2;
          }
          while (v37 != v38);
          double v54 = (char *)__p;
          if (__p)
          {
            unint64_t v55 = v101;
            uint64_t v56 = __p;
            if (v101 != __p)
            {
              do
              {
                int v57 = (std::__shared_weak_count *)*((void *)v55 - 1);
                if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
                v55 -= 16;
              }
              while (v55 != v54);
              uint64_t v56 = __p;
            }
            unint64_t v101 = v54;
            operator delete(v56);
            uint64_t v39 = (void *)*((void *)&v108 + 1);
          }
        }
        long long __p = (void *)v108;
        unint64_t v101 = (char *)v39;
        uint64_t v102 = v109;
        *(void *)&long long v109 = 0;
        long long v108 = 0uLL;
        uint64_t v58 = (char *)v106[0];
        if (v106[0])
        {
          uint64_t v59 = (char *)v106[1];
          int v60 = v106[0];
          if (v106[1] != v106[0])
          {
            do
            {
              __n128 v61 = (std::__shared_weak_count *)*((void *)v59 - 1);
              if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
              v59 -= 16;
            }
            while (v59 != v58);
            int v60 = v106[0];
          }
          v106[1] = v58;
          operator delete(v60);
        }
      }
      else
      {
        long long __p = 0;
        unint64_t v101 = 0;
        uint64_t v102 = 0;
      }
      unint64_t v62 = v11[4];
      char v63 = v11[5];
LABEL_88:
      if (v62 == v63)
      {
        unsigned int v35 = (char *)__p;
        if (__p)
        {
          double v84 = v101;
          if (v101 != __p)
          {
            do
            {
              double v85 = (std::__shared_weak_count *)*((void *)v84 - 1);
              if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                std::__shared_weak_count::__release_weak(v85);
              }
              v84 -= 16;
            }
            while (v84 != v35);
            unsigned int v35 = (char *)__p;
          }
          operator delete(v35);
        }
        uint64_t v11 = (uint64_t **)*v11;
        if (!v11) {
          goto LABEL_121;
        }
        continue;
      }
      break;
    }
    double v66 = (char *)__p;
    uint64_t v65 = v101;
    if (__p == v101)
    {
      *(void *)&long long v108 = (*(double (**)(uint64_t *))(*v11[2] + 24))(v11[2]);
      *((void *)&v108 + 1) = v78;
      *(void *)&long long v109 = v79;
      *((void *)&v109 + 1) = v80;
      sub_100358954((double *)&v108, a2, (uint64_t)v106);
      sub_10007B704((uint64_t)&v103, (uint64_t)v106);
      nullsub_17(v106);
      uint64_t v81 = *v62;
      __double2 v82 = v11[3];
      *(void *)&long long v95 = v11[2];
      *((void *)&v95 + 1) = v82;
      if (v82) {
        goto LABEL_110;
      }
    }
    else
    {
      uint64_t v67 = (*(uint64_t (**)(uint64_t *))(*v11[2] + 16))(v11[2]);
      float v68 = *(float *)(a1 + 48);
      uint64_t v70 = *(unsigned int *)(a1 + 40);
      unint64_t v69 = *(unsigned int *)(a1 + 44);
      long long v108 = xmmword_1003FDF70;
      long long v109 = unk_1003FDF80;
      unint64_t v71 = (v65 - v66) >> 4;
      if (v71 >= v69) {
        unint64_t v72 = v69;
      }
      else {
        unint64_t v72 = (v65 - v66) >> 4;
      }
      if (v72)
      {
        unint64_t v73 = 1;
        do
        {
          uint64_t v74 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a2 + 88))(a2, v71);
          double v75 = (_OWORD *)(*(uint64_t (**)(void *))(**(void **)&v66[16 * v74] + 32))(*(void **)&v66[16 * v74]);
          long long v76 = v75[1];
          *(_OWORD *)uint64_t v106 = *v75;
          long long v107 = v76;
          if (sub_100358348((double *)v106, (double *)&v108)) {
            sub_100358128((double *)&v108, (double *)v106);
          }
        }
        while ((*(float (**)(uint64_t))(*(void *)a2 + 32))(a2) >= v68 && v73++ < v72);
      }
      double v96 = off_10045DA98;
      double v97 = 0.0;
      double v98 = 0.0;
      v99 &= 0xFCu;
      if (v70)
      {
        while (1)
        {
          sub_100358954((double *)&v108, a2, (uint64_t)v106);
          sub_10007B704((uint64_t)&v96, (uint64_t)v106);
          nullsub_17(v106);
          if ((*(uint64_t (**)(uint64_t, double, double))(*(void *)v67 + 16))(v67, v97, v98)) {
            break;
          }
          if (!--v70) {
            goto LABEL_105;
          }
        }
        sub_100314EB4((uint64_t)a5);
      }
      else
      {
LABEL_105:
        sub_100314EC4(a5);
      }
      sub_10007B704((uint64_t)&v103, (uint64_t)&v96);
      nullsub_17(&v96);
      uint64_t v81 = *v62;
      __double2 v82 = v11[3];
      *(void *)&long long v95 = v11[2];
      *((void *)&v95 + 1) = v82;
      if (v82) {
LABEL_110:
      }
        atomic_fetch_add_explicit(v82 + 1, 1uLL, memory_order_relaxed);
    }
    sub_10024A158(v81, &v95);
    double v83 = (std::__shared_weak_count *)*((void *)&v95 + 1);
    if (*((void *)&v95 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v95 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    uint64_t v64 = *v62++;
    *(_OWORD *)(v64 + 16) = v104;
    *(unsigned char *)(v64 + 48) = 0;
    goto LABEL_88;
  }
LABEL_121:
  __n128 v86 = nullsub_17(&v103);
  __double2 v87 = (void *)v111;
  while (v87)
  {
    double v88 = v87;
    __double2 v87 = (void *)*v87;
    double v89 = (void *)v88[4];
    if (v89)
    {
      v88[5] = v89;
      operator delete(v89);
    }
    double v90 = (std::__shared_weak_count *)v88[3];
    if (v90 && !atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v90->__on_zero_shared)(v90, v86);
      std::__shared_weak_count::__release_weak(v90);
    }
    operator delete(v88);
  }
  double v91 = (void *)buf;
  *(void *)&long long buf = 0;
  if (v91) {
    operator delete(v91);
  }
}

void sub_100292C7C(_Unwind_Exception *a1)
{
  sub_100293264(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_100292C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  int64_t v14 = va_arg(va1, void *);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_1000D8DD8((void **)va);
  nullsub_17(va1);
  sub_100293264(v12 - 160);
  _Unwind_Resume(a1);
}

void *sub_100292D44(uint64_t *a1, void *a2)
{
  unint64_t v5 = (uint64_t ***)(*(uint64_t (**)(void))(*(void *)*a2 + 64))();
  unint64_t v6 = sub_100077F68((uint64_t)&v46, v5);
  unint64_t v7 = v6;
  unint64_t v8 = a1[1];
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v2 = v6;
      if (v6 >= v8) {
        unint64_t v2 = v6 % v8;
      }
    }
    else
    {
      unint64_t v2 = (v8 - 1) & v6;
    }
    unint64_t v10 = *(void ***)(*a1 + 8 * v2);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        uint64_t v12 = *a2;
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v11[1];
            if (v14 == v6)
            {
              if (v11[2] == v12) {
                return v11 + 4;
              }
            }
            else if ((v14 & (v8 - 1)) != v2)
            {
              goto LABEL_22;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v13 = v11[1];
          if (v13 == v6)
          {
            if (v11[2] == v12) {
              return v11 + 4;
            }
          }
          else
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
            if (v13 != v2) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_22:
  uint64_t v15 = a1 + 2;
  uint64_t v16 = operator new(0x38uLL);
  uint64_t v11 = v16;
  *uint64_t v16 = 0;
  v16[1] = v7;
  uint64_t v17 = a2[1];
  v16[2] = *a2;
  v16[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  v16[4] = 0;
  v16[5] = 0;
  v16[6] = 0;
  float v18 = (float)(unint64_t)(a1[3] + 1);
  float v19 = *((float *)a1 + 8);
  if (!v8 || (float)(v19 * (float)v8) < v18)
  {
    BOOL v22 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3) {
      BOOL v22 = 0;
    }
    unint64_t v23 = (2 * v8) | !v22;
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v8 = a1[1];
    if (prime > v8)
    {
LABEL_38:
      if (prime >> 61) {
        sub_1000A6A10();
      }
      unint64_t v26 = operator new(8 * prime);
      uint64_t v27 = (void *)*a1;
      *a1 = (uint64_t)v26;
      if (v27) {
        operator delete(v27);
      }
      uint64_t v28 = 0;
      a1[1] = prime;
      do
        *(void *)(*a1 + 8 * v28++) = 0;
      while (prime != v28);
      uint64_t v29 = (void *)*v15;
      if (!*v15) {
        goto LABEL_70;
      }
      size_t v30 = v29[1];
      size_t v31 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v32 = v30 & v31;
        *(void *)(*a1 + 8 * v32) = v15;
        for (uint64_t i = (void *)*v29; *v29; uint64_t i = (void *)*v29)
        {
          size_t v34 = i[1] & v31;
          if (v34 == v32)
          {
            uint64_t v29 = i;
          }
          else if (*(void *)(*a1 + 8 * v34))
          {
            *uint64_t v29 = *i;
            uint64_t v35 = 8 * v34;
            *uint64_t i = **(void **)(*a1 + v35);
            **(void **)(*a1 + v35) = i;
          }
          else
          {
            *(void *)(*a1 + 8 * v34) = v29;
            uint64_t v29 = i;
            size_t v32 = v34;
          }
        }
        goto LABEL_70;
      }
      if (v30 >= prime) {
        v30 %= prime;
      }
      *(void *)(*a1 + 8 * v3sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v15;
      uint64_t v39 = (void *)*v29;
      if (!*v29)
      {
LABEL_70:
        unint64_t v8 = prime;
        uint64_t v42 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_71;
        }
        goto LABEL_86;
      }
      while (1)
      {
        size_t v41 = v39[1];
        if (v41 >= prime) {
          v41 %= prime;
        }
        if (v41 == v30) {
          goto LABEL_64;
        }
        if (*(void *)(*a1 + 8 * v41))
        {
          *uint64_t v29 = *v39;
          uint64_t v40 = 8 * v41;
          *uint64_t v39 = **(void **)(*a1 + v40);
          **(void **)(*a1 + v4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v39;
          uint64_t v39 = v29;
LABEL_64:
          uint64_t v29 = v39;
          uint64_t v39 = (void *)*v39;
          if (!v39) {
            goto LABEL_70;
          }
        }
        else
        {
          *(void *)(*a1 + 8 * v41) = v29;
          uint64_t v29 = v39;
          uint64_t v39 = (void *)*v39;
          size_t v30 = v41;
          if (!v39) {
            goto LABEL_70;
          }
        }
      }
    }
    if (prime < v8)
    {
      unint64_t v36 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v8 < 3 || (uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < v8)
      {
        if (!prime)
        {
          uint64_t v43 = (void *)*a1;
          *a1 = 0;
          if (v43) {
            operator delete(v43);
          }
          unint64_t v8 = 0;
          a1[1] = 0;
          uint64_t v42 = -1;
          goto LABEL_86;
        }
        goto LABEL_38;
      }
      unint64_t v8 = a1[1];
    }
    uint64_t v42 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
LABEL_71:
      if (v7 >= v8)
      {
        unint64_t v2 = v7 % v8;
        uint64_t v20 = *a1;
        unint64_t v21 = *(void **)(*a1 + 8 * (v7 % v8));
        if (v21) {
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v2 = v7;
        uint64_t v20 = *a1;
        unint64_t v21 = *(void **)(*a1 + 8 * v7);
        if (v21) {
          goto LABEL_27;
        }
      }
      goto LABEL_87;
    }
LABEL_86:
    unint64_t v2 = v42 & v7;
    uint64_t v20 = *a1;
    unint64_t v21 = *(void **)(*a1 + 8 * (v42 & v7));
    if (v21) {
      goto LABEL_27;
    }
    goto LABEL_87;
  }
  uint64_t v20 = *a1;
  unint64_t v21 = *(void **)(*a1 + 8 * v2);
  if (v21)
  {
LABEL_27:
    *uint64_t v11 = *v21;
LABEL_93:
    *unint64_t v21 = v11;
    goto LABEL_94;
  }
LABEL_87:
  *uint64_t v11 = *v15;
  *uint64_t v15 = v11;
  *(void *)(v20 + 8 * v2) = v15;
  if (*v11)
  {
    unint64_t v44 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v44 >= v8) {
        v44 %= v8;
      }
    }
    else
    {
      v44 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*a1 + 8 * v44);
    goto LABEL_93;
  }
LABEL_94:
  ++a1[3];
  return v11 + 4;
}

void sub_100293238(_Unwind_Exception *a1)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v4;
    operator delete(v4);
  }
  sub_1003A67E0((std::__shared_weak_count **)(v1 + 24));
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100293264(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    uint64_t v3 = v2;
    unint64_t v2 = (void *)*v2;
    unint64_t v4 = (void *)v3[4];
    if (v4)
    {
      void v3[5] = v4;
      operator delete(v4);
    }
    unint64_t v5 = (std::__shared_weak_count *)v3[3];
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete(v3);
  }
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_100293324(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(uint64_t **)(result + 8);
  for (uint64_t i = *(uint64_t **)(result + 16);
        v5 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2, a3, a4, a5))
  {
    uint64_t v11 = *v5++;
  }
  return result;
}

void sub_1002933AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (*(unsigned char *)(a3 + 80) && (sub_1001E2094(a3 + 88) & 1) == 0 && (*(_WORD *)(a3 + 280) & 0x8080) == 0x8080)
  {
    unint64_t v7 = *a4;
    unint64_t v8 = a4[1];
    if (*a4 != v8)
    {
      do
      {
        double v9 = sub_10014B024(*(double *)(a3 + 248));
        double v10 = *(double *)(a3 + 192);
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(*v7 + 56) + 48))(&v17);
        double v11 = sub_10014B3C4((uint64_t)&v17, v10);
        *(double *)(*v7 + 32) = v11
                              + (*(double (**)(uint64_t, double, double))(*(void *)a2 + 64))(a2, 0.0, v9);
        uint64_t v12 = v18;
        if (v18)
        {
          if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        ++v7;
      }
      while (v7 != v8);
    }
  }
  else
  {
    unint64_t v13 = *a4;
    for (uint64_t i = a4[1]; v13 != i; *(double *)(v16 + 32) = v15)
    {
      double v15 = (*(double (**)(uint64_t))(*(void *)a2 + 48))(a2);
      uint64_t v16 = *v13++;
    }
  }
}

void sub_100293554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100293568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int64x2_t *a5)
{
  if (qword_10047BED8 == -1)
  {
    unint64_t v8 = qword_10047BEE0;
    if (!os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  dispatch_once(&qword_10047BED8, &stru_1004638B0);
  unint64_t v8 = qword_10047BEE0;
  if (os_log_type_enabled((os_log_t)qword_10047BEE0, OS_LOG_TYPE_DEBUG))
  {
LABEL_3:
    uint64_t v9 = (a4[1] - *a4) >> 3;
    buf.n128_u32[0] = 134217984;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Multiphone::setParticleState, for #outputParticles=%zu", (uint8_t *)&buf, 0xCu);
  }
LABEL_4:
  *(_OWORD *)unint64_t v71 = 0u;
  *(_OWORD *)unint64_t v72 = 0u;
  int v73 = 1065353216;
  uint64_t v10 = *a4;
  uint64_t v62 = a4[1];
  if (*a4 == v62) {
    goto LABEL_74;
  }
  do
  {
    uint64_t v12 = sub_100292D44((uint64_t *)v71, (void *)(*(void *)v10 + 56));
    unint64_t v13 = (char **)v12;
    double v15 = (char *)v12[1];
    unint64_t v14 = v12[2];
    if ((unint64_t)v15 < v14)
    {
      *(void *)double v15 = *(void *)v10;
      uint64_t v11 = (uint64_t)(v15 + 8);
      goto LABEL_7;
    }
    uint64_t v16 = (char *)*v12;
    uint64_t v17 = (uint64_t)&v15[-*v12];
    uint64_t v18 = v17 >> 3;
    unint64_t v19 = (v17 >> 3) + 1;
    if (v19 >> 61) {
      sub_1000A9108();
    }
    uint64_t v20 = v14 - (void)v16;
    if (v20 >> 2 > v19) {
      unint64_t v19 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21)
    {
      if (v21 >> 61) {
        sub_1000A6A10();
      }
      BOOL v22 = operator new(8 * v21);
      unint64_t v23 = &v22[8 * v18];
      *(void *)unint64_t v23 = *(void *)v10;
      uint64_t v11 = (uint64_t)(v23 + 8);
      if (v15 == v16)
      {
LABEL_18:
        *unint64_t v13 = v23;
        v13[1] = (char *)v11;
        v13[2] = &v22[8 * v21];
        if (v15) {
          goto LABEL_28;
        }
        goto LABEL_7;
      }
    }
    else
    {
      BOOL v22 = 0;
      unint64_t v23 = (char *)(8 * v18);
      *(void *)(8 * v18) = *(void *)v10;
      uint64_t v11 = 8 * v18 + 8;
      if (v15 == v16) {
        goto LABEL_18;
      }
    }
    unint64_t v24 = v15 - 8 - v16;
    if (v24 < 0x58) {
      goto LABEL_83;
    }
    if ((unint64_t)(v15 - &v22[v17]) < 0x20) {
      goto LABEL_83;
    }
    uint64_t v25 = (v24 >> 3) + 1;
    uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v27 = &v15[-v26];
    v23 -= v26;
    uint64_t v28 = &v22[8 * v18 - 16];
    uint64_t v29 = v15 - 16;
    uint64_t v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *uint64_t v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    double v15 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_83:
      do
      {
        uint64_t v32 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v23 - 1) = v32;
        v23 -= 8;
      }
      while (v15 != v16);
    }
    double v15 = *v13;
    *unint64_t v13 = v23;
    v13[1] = (char *)v11;
    v13[2] = &v22[8 * v21];
    if (v15) {
LABEL_28:
    }
      operator delete(v15);
LABEL_7:
    v13[1] = (char *)v11;
    v10 += 8;
  }
  while (v10 != v62);
  long long v33 = (void **)v72[0];
  if (!v72[0]) {
    goto LABEL_74;
  }
  uint64_t v34 = a1 + 8;
  while (2)
  {
    (*(void (**)(void **__return_ptr))(**(void **)(a3 + 64) + 16))(&__p);
    uint64_t v36 = (*(uint64_t (**)(void *))(*v33[2] + 40))(v33[2]);
    (*(void (**)(__n128 *__return_ptr))(**(void **)v36 + 48))(&buf);
    __n128 v37 = buf;
    *(__n128 *)uint64_t v67 = buf;
    uint64_t v68 = v75;
    uint64_t v39 = v33[4];
    uint64_t v38 = v33[5];
    if (v39 != v38)
    {
      while (2)
      {
        uint64_t v64 = off_10045DA98;
        long long v65 = 0uLL;
        v66 &= 0xFCu;
        long long v65 = *(_OWORD *)(*v39 + 16);
        uint64_t v40 = (*(uint64_t (**)(void *))(*v33[2] + 40))(v33[2]);
        (*(void (**)(__n128 *__return_ptr))(**(void **)v40 + 16))(&buf);
        v63[0] = sub_1002AAD74(v34, (uint64_t)&buf, (uint64_t *)v67, &__p);
        v63[1] = v41;
        v63[2] = v42;
        sub_1002AB1A4(v34, (uint64_t)v63, a2, a2, a5);
        *(void *)(*v39 + 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v43;
        unint64_t v44 = v76;
        if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
          uint64_t v45 = (std::__shared_weak_count *)buf.n128_u64[1];
          if (buf.n128_u64[1]) {
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v45 = (std::__shared_weak_count *)buf.n128_u64[1];
          if (buf.n128_u64[1])
          {
LABEL_40:
            if (!atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
        }
        __n128 v37 = nullsub_17(&v64);
        if (++v39 == v38)
        {
          char v46 = (char *)v67[0];
          if (!v67[0]) {
            goto LABEL_55;
          }
          goto LABEL_47;
        }
        continue;
      }
    }
    char v46 = (char *)buf.n128_u64[0];
    if (!buf.n128_u64[0]) {
      goto LABEL_55;
    }
LABEL_47:
    double v47 = (char *)v67[1];
    double v48 = v46;
    if (v67[1] != v46)
    {
      do
      {
        long long v49 = (std::__shared_weak_count *)*((void *)v47 - 1);
        if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v49->__on_zero_shared)(v49, v37);
          std::__shared_weak_count::__release_weak(v49);
        }
        v47 -= 16;
      }
      while (v47 != v46);
      double v48 = (char *)v67[0];
    }
    v67[1] = v46;
    operator delete(v48);
LABEL_55:
    unsigned int v50 = (char *)__p;
    if (__p)
    {
      long long v51 = v70;
      uint64_t v35 = __p;
      if (v70 != __p)
      {
        unsigned int v52 = v70 - 168;
        do
        {
          int v54 = *((_DWORD *)v51 - 44);
          if (v54 == v54 >> 31)
          {
            if (*(v51 - 128)) {
              *(v51 - 128) = 0;
            }
          }
          else
          {
            uint64_t v53 = *((void *)v51 - 21);
            if (v54 < 0)
            {
              if (v53) {
                (*(void (**)(uint64_t, __n128))(*(void *)v53 + 8))(v53, v37);
              }
            }
            else
            {
              (*(void (**)(char *))v53)(v51 - 168);
            }
          }
          v51 -= 208;
          v52 -= 208;
        }
        while (v51 != v50);
        uint64_t v35 = __p;
      }
      uint64_t v70 = v50;
      operator delete(v35);
    }
    long long v33 = (void **)*v33;
    if (v33) {
      continue;
    }
    break;
  }
  unint64_t v55 = v72[0];
  if (v72[0])
  {
    do
    {
      uint64_t v56 = v55;
      unint64_t v55 = (void *)*v55;
      int v57 = (void *)v56[4];
      if (v57)
      {
        v56[5] = v57;
        operator delete(v57);
      }
      uint64_t v58 = (std::__shared_weak_count *)v56[3];
      if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      operator delete(v56);
    }
    while (v55);
  }
LABEL_74:
  uint64_t v59 = v71[0];
  v71[0] = 0;
  if (v59) {
    operator delete(v59);
  }
}

void sub_100293C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_100293264((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100293C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_100293264((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100293C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va1, a14);
  va_start(va, a14);
  double v15 = va_arg(va1, void *);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_1002329B0((void **)va);
  sub_100293264((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100293C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_100293264((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100293CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v14 = va_arg(va2, void *);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v18 = va_arg(va3, void *);
  uint64_t v20 = va_arg(va3, void);
  uint64_t v21 = va_arg(va3, void);
  sub_1001E28D0(v7 - 160);
  nullsub_17((uint64_t *)va);
  sub_1000D8DD8((void **)va1);
  sub_1002329B0((void **)va2);
  sub_100293264((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t sub_100293CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, int64x2_t *a5)
{
  if (!*(unsigned char *)(a3 + 80))
  {
    sub_1000AE4B0(v84, "");
    sub_1002950D8("Trying to inject particles from a non-existent external (GPS-like) measurement!", &v89);
    sub_10016A2C4((uint64_t)v84, (uint64_t)&v89, 1);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v85) < 0) {
      operator delete(v84[0]);
    }
    sub_1000D11E0((uint64_t)v76);
  }
  sub_1001AB5F8(&v89, a3 + 88);
  sub_10014E4B0(a3, (uint64_t)&v89, &v82);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 56))(v82);
  sub_1000776C4(v78, v9);
  sub_100148A04((uint64_t)v78, v84);
  sub_1001AA12C((uint64_t)v77, (uint64_t)&v90);
  sub_1001486EC((uint64_t)v84, (uint64_t)v77, (uint64_t)v76);
  sub_100148878((uint64_t)v76, (uint64_t)v79);
  nullsub_15(v77);
  uint64_t v10 = v88;
  if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = v87;
  if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  nullsub_15(v84);
  sub_100074A24(v78);
  if (v93 <= 0.0) {
    double v12 = v91;
  }
  else {
    double v12 = v93 * 0.577230025;
  }
  double v13 = v95;
  if (v94 <= 0.0) {
    double v14 = v91;
  }
  else {
    double v14 = v94 * 0.577230025;
  }
  (*(void (**)(void **__return_ptr))(*(void *)v82 + 48))(v84);
  double v15 = sub_10014B3C4((uint64_t)v84, v13);
  uint64_t v16 = (std::__shared_weak_count *)v84[1];
  if (v84[1] && !atomic_fetch_add((atomic_ullong *volatile)v84[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v82 + 40))(v82);
  uint64_t v19 = *v17;
  uint64_t v18 = (std::__shared_weak_count *)v17[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v59 = v18;
  if (sub_1001E2094((uint64_t)&v89))
  {
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 96))(v19);
    sub_100072438(v84, v20);
    double v12 = sub_10014E47C((uint64_t)v84, v12);
    double v14 = sub_10014E47C((uint64_t)v84, v14);
    sub_100320B04((uint64_t)v84);
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 104))(v19);
  sub_100072438(v76, v21);
  double v22 = sub_10014E47C((uint64_t)v76, v15);
  __double2 v23 = __sincos_stret(v22);
  long long v85 = 0u;
  *(_OWORD *)double v84 = 0u;
  int v86 = 1065353216;
  LOBYTE(v87) = 0;
  __n128 v61 = *a4;
  int v60 = a4[1];
  if (*a4 == v60) {
    goto LABEL_67;
  }
  while (2)
  {
    unsigned int v24 = 0;
    do
    {
      unint64_t v72 = off_10045DA98;
      double v73 = 0.0;
      double v74 = 0.0;
      v75 &= 0xFCu;
      double v28 = (*(double (**)(uint64_t, double, double))(*(void *)a2 + 64))(a2, 0.0, v12);
      double v29 = (*(double (**)(uint64_t, double, double))(*(void *)a2 + 64))(a2, 0.0, v14);
      double v73 = v29 * -v23.__sinval + v23.__cosval * v28 + v80;
      double v74 = v23.__cosval * v29 + v23.__sinval * v28 + v81;
      uint64_t v70 = 0;
      unint64_t v71 = 0;
      long long __p = 0;
      uint64_t v30 = **(void **)(a3 + 40);
      if (*(void *)(*(void *)(a3 + 40) + 8) == v30) {
        goto LABEL_57;
      }
      unint64_t v31 = 0;
      do
      {
        long long v32 = *(_OWORD *)(v30 + 16 * v31);
        long long v68 = v32;
        if (*((void *)&v32 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        sub_1001E4CDC((uint64_t)v84, v82, v32, (uint64_t)&v66);
        sub_1001A9C7C((uint64_t)v64, (uint64_t)&v72);
        float64x2_t v65 = vaddq_f64(v67, v65);
        v63[0] = (*(double (**)(void))(*(void *)v68 + 24))(v68);
        v63[1] = v33;
        v63[2] = v34;
        void v63[3] = v35;
        if (sub_1003584B8(v63, (uint64_t)v64))
        {
          uint64_t v36 = (*(uint64_t (**)(void))(*(void *)v68 + 16))(v68);
          if ((*(uint64_t (**)(uint64_t, float64_t, float64_t))(*(void *)v36 + 16))(v36, v65.f64[0], v65.f64[1]))
          {
            sub_100314EB4((uint64_t)a5);
            __n128 v37 = v70;
            if ((unint64_t)v70 >= v71)
            {
              uint64_t v39 = sub_100295128((uint64_t *)&__p, &v68, (uint64_t)v64);
            }
            else
            {
              *(void *)uint64_t v70 = v68;
              uint64_t v38 = *((void *)&v68 + 1);
              *((void *)v37 + 1) = *((void *)&v68 + 1);
              if (v38) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
              }
              sub_1001A9C7C((uint64_t)(v37 + 16), (uint64_t)v64);
              uint64_t v39 = v37 + 48;
            }
            uint64_t v70 = v39;
          }
        }
        nullsub_17(v64);
        __n128 v40 = nullsub_17(&v66);
        uint64_t v41 = (std::__shared_weak_count *)*((void *)&v68 + 1);
        if (*((void *)&v68 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v68 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v41->__on_zero_shared)(v41, v40);
          std::__shared_weak_count::__release_weak(v41);
        }
        ++v31;
        uint64_t v30 = **(void **)(a3 + 40);
      }
      while (v31 < (*(void *)(*(void *)(a3 + 40) + 8) - v30) >> 4);
      if (__p == v70)
      {
LABEL_57:
        sub_100314EC4(a5);
        char v51 = 1;
        unsigned int v52 = (char *)__p;
        if (!__p) {
          goto LABEL_27;
        }
        goto LABEL_61;
      }
      int v42 = (*(uint64_t (**)(uint64_t, void, __n128))(*(void *)a2 + 80))(a2, -1431655765 * ((unint64_t)(v70 - (unsigned char *)__p) >> 4), v40);
      if (0xAAAAAAAAAAAAAAABLL * ((v70 - (unsigned char *)__p) >> 4) <= v42) {
        sub_1001F352C();
      }
      uint64_t v43 = (char *)__p + 48 * v42;
      uint64_t v44 = *v61;
      *(_OWORD *)(*v61 + 16) = *(_OWORD *)(v43 + 24);
      *(void *)&long long v62 = *(void *)v43;
      uint64_t v45 = *((void *)v43 + 1);
      *((void *)&v62 + 1) = v45;
      if (v45) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
      }
      sub_10024A158(v44, &v62);
      char v46 = (std::__shared_weak_count *)*((void *)&v62 + 1);
      if (*((void *)&v62 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v62 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
        if ((~v97 & 0x8080) != 0) {
          goto LABEL_60;
        }
      }
      else if ((~v97 & 0x8080) != 0)
      {
        goto LABEL_60;
      }
      double v47 = sub_10014B024(v96);
      double v48 = v92;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)v43 + 48))(&v66);
      double v49 = sub_10014B3C4((uint64_t)&v66, v48);
      *(double *)(*v61 + 32) = v49
                             + (*(double (**)(uint64_t, double, double))(*(void *)a2 + 64))(a2, 0.0, v47);
      float64_t v50 = v67.f64[0];
      if (*(void *)&v67.f64[0]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v67.f64[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(float64_t))(**(void **)&v50 + 16))(COERCE_FLOAT64_T(*(void *)&v50));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v50);
      }
LABEL_60:
      char v51 = 0;
      *(unsigned char *)(*v61 + 48) = 0;
      unsigned int v52 = (char *)__p;
      if (!__p) {
        goto LABEL_27;
      }
LABEL_61:
      uint64_t v53 = v70;
      uint64_t v25 = v52;
      if (v70 != v52)
      {
        do
        {
          __n128 v54 = nullsub_17(v53 - 32);
          unint64_t v55 = (std::__shared_weak_count *)*((void *)v53 - 5);
          if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, __n128))v55->__on_zero_shared)(v55, v54);
            std::__shared_weak_count::__release_weak(v55);
          }
          v53 -= 48;
        }
        while (v53 != v52);
        uint64_t v25 = __p;
      }
      uint64_t v70 = v52;
      operator delete(v25);
LABEL_27:
      nullsub_17(&v72);
      if (v24++ >= 4) {
        char v27 = 0;
      }
      else {
        char v27 = v51;
      }
    }
    while ((v27 & 1) != 0);
    if (++v61 != v60) {
      continue;
    }
    break;
  }
LABEL_67:
  sub_1002424DC((uint64_t)v84);
  sub_100320B04((uint64_t)v76);
  if (v59 && !atomic_fetch_add(&v59->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
    std::__shared_weak_count::__release_weak(v59);
  }
  __n128 v56 = nullsub_17(v79);
  int v57 = v83;
  if (v83 && !atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *, __n128))v57->__on_zero_shared)(v57, v56);
    std::__shared_weak_count::__release_weak(v57);
  }
  return sub_1000A45A0((uint64_t)&v89);
}

void sub_100294720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100294860()
{
}

void sub_100294A20()
{
}

void sub_100294A38()
{
}

void *sub_100294A4C(void *a1)
{
  *a1 = off_1004636F8;
  sub_100033230((uint64_t)(a1 + 1));
  return a1;
}

void sub_100294A90(void *a1)
{
  *a1 = off_1004636F8;
  sub_100033230((uint64_t)(a1 + 1));

  operator delete();
}

void *sub_100294AF4(void *a1)
{
  *a1 = off_1004637F0;
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    uint64_t v3 = (void *)a1[2];
    unint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_100294BA0(void *a1)
{
  *a1 = off_1004637F0;
  unint64_t v2 = (void *)a1[1];
  if (v2)
  {
    uint64_t v3 = (void *)a1[2];
    unint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      unint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }

  operator delete();
}

void sub_100294C70()
{
}

void sub_100294C88()
{
}

void *sub_100294C9C(void *a1)
{
  *a1 = off_100463748;
  sub_100033230((uint64_t)(a1 + 1));
  return a1;
}

void sub_100294CE0(void *a1)
{
  *a1 = off_100463748;
  sub_100033230((uint64_t)(a1 + 1));

  operator delete();
}

void sub_100294D44(id a1)
{
  qword_10047BEE0 = (uint64_t)os_log_create("com.apple.locationd.Pipeline", "Generic");
}

void sub_100294D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 - 2;
  if (a2 >= 2)
  {
    uint64_t v4 = a3;
    int64_t v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((a3 - a1) >> 4)))
    {
      int64_t v8 = (0x999999999999999ALL * ((a3 - a1) >> 4)) | 1;
      uint64_t v9 = a1 + 80 * v8;
      int64_t v10 = 0x999999999999999ALL * ((a3 - a1) >> 4) + 2;
      if (v10 < a2)
      {
        double v11 = sub_100273560(a1 + 80 * v8);
        if (v11 > sub_100273560(v9 + 80))
        {
          v9 += 80;
          int64_t v8 = v10;
        }
      }
      double v12 = sub_100273560(v9);
      if (v12 <= sub_100273560(v4))
      {
        sub_100033728(&v29, (__n128 *)v4);
        long long v13 = *(_OWORD *)(v4 + 16);
        long long v14 = *(_OWORD *)(v4 + 32);
        __int16 v15 = *(_WORD *)(v4 + 48);
        long long v33 = *(_OWORD *)(v4 + 56);
        __int16 v32 = v15;
        *(void *)(v4 + 56) = 0;
        *(void *)(v4 + 64) = 0;
        uint64_t v34 = *(void *)(v4 + 72);
        long long v30 = v13;
        long long v31 = v14;
        do
        {
          uint64_t v16 = v9;
          sub_100033728((__n128 *)v4, (__n128 *)v9);
          long long v17 = *(_OWORD *)(v9 + 16);
          long long v18 = *(_OWORD *)(v9 + 32);
          *(_WORD *)(v4 + 48) = *(_WORD *)(v9 + 48);
          *(_OWORD *)(v4 + 16) = v17;
          *(_OWORD *)(v4 + 32) = v18;
          long long v19 = *(_OWORD *)(v9 + 56);
          *(void *)(v9 + 56) = 0;
          *(void *)(v9 + 64) = 0;
          uint64_t v20 = *(std::__shared_weak_count **)(v4 + 64);
          *(_OWORD *)(v4 + 56) = v19;
          if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
          *(void *)(v4 + 72) = *(void *)(v16 + 72);
          if (v6 < v8) {
            break;
          }
          uint64_t v21 = (2 * v8) | 1;
          uint64_t v9 = a1 + 80 * v21;
          int64_t v8 = 2 * v8 + 2;
          if (v8 >= a2)
          {
            int64_t v8 = v21;
          }
          else
          {
            double v22 = sub_100273560(a1 + 80 * v21);
            if (v22 <= sub_100273560(v9 + 80)) {
              int64_t v8 = v21;
            }
            else {
              v9 += 80;
            }
          }
          double v23 = sub_100273560(v9);
          uint64_t v4 = v16;
        }
        while (v23 <= sub_100273560((uint64_t)&v29));
        sub_100033728((__n128 *)v16, &v29);
        long long v24 = v30;
        long long v25 = v31;
        *(_WORD *)(v16 + 48) = v32;
        *(_OWORD *)(v16 + 16) = v24;
        *(_OWORD *)(v16 + 32) = v25;
        long long v26 = v33;
        long long v33 = 0uLL;
        char v27 = *(std::__shared_weak_count **)(v16 + 64);
        *(_OWORD *)(v16 + 56) = v26;
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
        double v28 = (std::__shared_weak_count *)*((void *)&v33 + 1);
        *(void *)(v16 + 72) = v34;
        if (v28)
        {
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
    }
  }
}

void sub_10029504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100249D18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100295060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100249D18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100295074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100249D18((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_100295088@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_1002950BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1002950D8@<X0>(std::string::value_type *__s@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::string::assign(a2, __s);
}

void sub_10029510C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100295128(uint64_t *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_1000A9108();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1000A6A10();
    }
    uint64_t v9 = (char *)operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  long long v17 = &v9[48 * v4];
  long long v19 = &v9[48 * v8];
  uint64_t v10 = a2[1];
  *(void *)long long v17 = *a2;
  *((void *)v17 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1001A9C7C((uint64_t)&v9[48 * v4 + 16], a3);
  sub_1002953F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, (uint64_t)v17, (uint64_t)v17);
  double v11 = (char *)*a1;
  double v12 = (char *)a1[1];
  *a1 = v13;
  a1[1] = (uint64_t)(v17 + 48);
  a1[2] = (uint64_t)v19;
  if (v12 != v11)
  {
    do
    {
      long long v18 = v12 - 48;
      __n128 v14 = nullsub_17(v12 - 32);
      __int16 v15 = (std::__shared_weak_count *)*((void *)v12 - 5);
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v14);
        std::__shared_weak_count::__release_weak(v15);
      }
      v12 -= 48;
    }
    while (v18 != v11);
  }
  if (v11) {
    operator delete(v11);
  }
  return v17 + 48;
}

void sub_100295304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100295348((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100295318(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15)
{
  uint64_t v17 = *(void *)(v15 + 8);
  if (v17)
  {
    sub_1003A6894(v17, (uint64_t)a1, a2, (uint64_t)&a15);
    a1 = a15;
  }
  sub_100295348((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100295348(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    __n128 v4 = nullsub_17(i - 32);
    unint64_t v5 = *(std::__shared_weak_count **)(i - 40);
    if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v5->__on_zero_shared)(v5, v4);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1002953F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v13 = a6;
  uint64_t v14 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = *(void *)(v9 - 48);
      v9 -= 48;
      *(void *)(v7 - 48) = v10;
      uint64_t v11 = *(void *)(v9 + 8);
      *(void *)(v7 - 4sub_10021FA6C((uint64_t)&unk_10047F0E8, "(.*)X[0-9]+Y[0-9]+", 0) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      sub_1001A9C7C(v7 - 32, a3 - 32);
      uint64_t v7 = v14 - 48;
      v14 -= 48;
      a3 = v9;
    }
    while (v9 != a5);
    return v13;
  }
  return a6;
}

void sub_1002954A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(v9 - 40);
  if (v11) {
    sub_1003A6844(v11);
  }
  sub_1002954C8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002954C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    if (v3 != v4)
    {
      uint64_t v5 = v3 + 16;
      do
      {
        __n128 v7 = nullsub_17(v5);
        unint64_t v8 = *(std::__shared_weak_count **)(v5 - 8);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
          std::__shared_weak_count::__release_weak(v8);
        }
        uint64_t v6 = v5 + 32;
        v5 += 48;
      }
      while (v6 != v4);
    }
  }
  return a1;
}

void sub_100295584()
{
  if ((byte_10047BF40 & 1) == 0)
  {
    byte_10047BF40 = 1;
    sub_1000A6120(qword_10047BF30);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF30, (void *)&_mh_execute_header);
  }
}

void sub_1002955FC()
{
  if ((byte_10047BF58 & 1) == 0)
  {
    byte_10047BF58 = 1;
    sub_1000A6530(qword_10047BF48);
    __cxa_atexit((void (*)(void *))sub_1000A6488, qword_10047BF48, (void *)&_mh_execute_header);
  }
}

void sub_100295674(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v4 = strerror(a1);
  size_t v5 = strlen(v4);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_1000A6968();
  }
  std::string::size_type v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v6;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
  p_dst = &__dst;
  if (v5) {
LABEL_8:
  }
    memmove(p_dst, v4, v6);
  p_dst->__r_.__value_.__s.__data_[v6] = 0;
  uint64_t v10 = std::string::insert(&__dst, 0, "ERRNO: ");
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  double v12 = std::string::append(&v21, " (");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  long long v18 = std::string::append(&v23, ")");
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(v22.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
LABEL_24:
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_25;
  }
}

void sub_10029587C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 57) < 0)
  {
    operator delete(*(void **)(v33 - 80));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

std::string *sub_100295940@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (a1 > 1545)
  {
    if (a1 > 3593)
    {
      if (a1 <= 5385)
      {
        if (a1 <= 4105)
        {
          if (a1 == 3594)
          {
            unint64_t v2 = "I/O error within the xCheckReservedLock method on the sqlite3_io_methods object";
            return std::string::assign(a2, v2);
          }
          if (a1 == 3850)
          {
            unint64_t v2 = "I/O error in the advisory file locking logic";
            return std::string::assign(a2, v2);
          }
        }
        else
        {
          switch(a1)
          {
            case 4106:
              unint64_t v2 = "I/O error within the xClose method on the sqlite3_io_methods object";
              return std::string::assign(a2, v2);
            case 4618:
              unint64_t v2 = "I/O error within the xShmMap method on the sqlite3_io_methods object while trying to open a new share"
                   "d memory segment";
              return std::string::assign(a2, v2);
            case 4874:
              unint64_t v2 = "I/O error within the xShmMap method on the sqlite3_io_methods object while trying to resize an existi"
                   "ng shared memory segment";
              return std::string::assign(a2, v2);
          }
        }
      }
      else if (a1 > 6153)
      {
        switch(a1)
        {
          case 6154:
            unint64_t v2 = "I/O error within the xFetch or xUnfetch methods on the sqlite3_io_methods object while trying to map or"
                 " unmap part of the database file into the process address space";
            return std::string::assign(a2, v2);
          case 6410:
            unint64_t v2 = "the VFS is unable to determine a suitable directory in which to place temporary files";
            return std::string::assign(a2, v2);
          case 6922:
            unint64_t v2 = "a file relevant to the call was invalidated by a dispatch vnode source event";
            return std::string::assign(a2, v2);
        }
      }
      else
      {
        switch(a1)
        {
          case 5386:
            unint64_t v2 = "I/O error within the xShmMap method on the sqlite3_io_methods object while trying to map a shared memor"
                 "y segment into the process address space";
            return std::string::assign(a2, v2);
          case 5642:
            unint64_t v2 = "I/O error within the xRead or xWrite methods on the sqlite3_io_methods object while trying to seek a fi"
                 "le descriptor to the beginning point of the file where the read or write is to occur";
            return std::string::assign(a2, v2);
          case 5898:
            unint64_t v2 = "the xDelete method on the sqlite3_vfs object failed because the file being deleted does not exist";
            return std::string::assign(a2, v2);
        }
      }
    }
    else if (a1 <= 2066)
    {
      if (a1 <= 1801)
      {
        if (a1 == 1546)
        {
          unint64_t v2 = "I/O error in the VFS layer while trying to truncate a file to a smaller size";
          return std::string::assign(a2, v2);
        }
        if (a1 == 1555)
        {
          unint64_t v2 = "PRIMARY KEY constraint failed";
          return std::string::assign(a2, v2);
        }
      }
      else
      {
        switch(a1)
        {
          case 1802:
            unint64_t v2 = "I/O error in the VFS layer while trying to invoke fstat() (or the equivalent) on a file in order to det"
                 "ermine information such as the file size or access permissions";
            return std::string::assign(a2, v2);
          case 1811:
            unint64_t v2 = "a RAISE function within a trigger fired, causing the SQL statement to abort";
            return std::string::assign(a2, v2);
          case 2058:
            unint64_t v2 = "an I/O error within xUnlock method on the sqlite3_io_methods object";
            return std::string::assign(a2, v2);
        }
      }
    }
    else if (a1 > 2578)
    {
      switch(a1)
      {
        case 2579:
          unint64_t v2 = "a rowid is not unique";
          return std::string::assign(a2, v2);
        case 3082:
          unint64_t v2 = "an operation could not be completed due to the inability to allocate sufficient memory";
          return std::string::assign(a2, v2);
        case 3338:
          unint64_t v2 = "I/O error within the xAccess method on the sqlite3_vfs object";
          return std::string::assign(a2, v2);
      }
    }
    else
    {
      switch(a1)
      {
        case 2067:
          unint64_t v2 = "UNIQUE constraint failed";
          return std::string::assign(a2, v2);
        case 2314:
          unint64_t v2 = "I/O error within xLock method on the sqlite3_io_methods object while trying to obtain a read lock";
          return std::string::assign(a2, v2);
        case 2570:
          unint64_t v2 = "I/O error within xDelete method on the sqlite3_vfs object";
          return std::string::assign(a2, v2);
      }
    }
LABEL_83:
    unint64_t v2 = "unhandled message. please check documentation";
    return std::string::assign(a2, v2);
  }
  if (a1 > 775)
  {
    if (a1 > 1031)
    {
      if (a1 > 1289)
      {
        if (a1 == 1290)
        {
          unint64_t v2 = "I/O error in the VFS layer while trying to invoke fsync() on a directory. The unix VFS attempts to fsync("
               ") directories after creating or deleting certain files to ensure that those files will still appear in th"
               "e filesystem following a power loss or system crash. This error code indicates a problem attempting to pe"
               "rform that fsync()";
          return std::string::assign(a2, v2);
        }
        if (a1 == 1299)
        {
          unint64_t v2 = "NOT NULL constraint failed";
          return std::string::assign(a2, v2);
        }
      }
      else
      {
        if (a1 == 1032)
        {
          unint64_t v2 = "database cannot be modified because the database file has been moved since it was opened";
          return std::string::assign(a2, v2);
        }
        if (a1 == 1034)
        {
          unint64_t v2 = "I/O error in the VFS layer while trying to flush previously written content out of OS and/or disk-control"
               " buffers and into persistent storage";
          return std::string::assign(a2, v2);
        }
      }
      goto LABEL_83;
    }
    switch(a1)
    {
      case 776:
        unint64_t v2 = "database cannot be opened because it has a hot journal that needs to be rolled back but cannot because the "
             "database is readonly";
        break;
      case 778:
        unint64_t v2 = "I/O error in the VFS layer while trying to write into a file on disk. This error might result from a hardwa"
             "re malfunction or because a filesystem came unmounted while the file was open. This error should not occur "
             "if the filesystem is full as there is a separate error code (SQLITE_FULL) for that purpose";
        break;
      case 782:
        unint64_t v2 = "file open operation failed because the operating system was unable to convert the filename into a full pathname";
        break;
      case 787:
        unint64_t v2 = "foreign key constraint failed";
        break;
      default:
        goto LABEL_83;
    }
  }
  else
  {
    unint64_t v2 = "operation could not continue because another process is busy recovering a WAL mode database file following a crash";
    switch(a1)
    {
      case 261:
        return std::string::assign(a2, v2);
      case 262:
        unint64_t v2 = "locking conflict has occurred due to contention with a different database connection that happens to hold a"
             " shared cache with the database connection to which the error was returned";
        break;
      case 263:
      case 265:
      case 268:
      case 269:
      case 270:
      case 271:
      case 272:
      case 273:
      case 274:
      case 276:
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
        goto LABEL_83;
      case 264:
        unint64_t v2 = "WAL mode database cannot be opened because the database file needs to be recovered and recovery requires wr"
             "ite access but only read access is available";
        break;
      case 266:
        unint64_t v2 = "I/O error in the VFS layer while trying to read from a file on disk. This error might result from a hardwar"
             "e malfunction or because a filesystem came unmounted while the file was open.";
        break;
      case 267:
        unint64_t v2 = "content in the virtual table may be corrupt";
        break;
      case 275:
        unint64_t v2 = "CHECK constraint failed";
        break;
      case 283:
        unint64_t v2 = "WAL mode database file is recovered";
        break;
      default:
        switch(a1)
        {
          case 516:
            unint64_t v2 = "statement aborted because the transaction that was active when the SQL statement first started was rolled back";
            break;
          case 517:
            unint64_t v2 = "database connection tried to promote a read transaction into a write transaction but finds that another"
                 " database connection has already written to the database and thus invalidated prior reads";
            break;
          case 520:
            unint64_t v2 = "SQLite is unable to obtain a read lock on a WAL mode database because the shared-memory file associated"
                 " with that database is read-only";
            break;
          case 522:
            unint64_t v2 = "read attempt in the VFS layer was unable to obtain as many bytes as was requested. This might be due to"
                 " a truncated file";
            break;
          case 526:
            unint64_t v2 = "a file open operation failed because the file is really a directory";
            break;
          case 531:
            unint64_t v2 = "a commit hook callback returned non-zero that thus caused the SQL statement to be rolled back";
            break;
          default:
            goto LABEL_83;
        }
        break;
    }
  }
  return std::string::assign(a2, v2);
}