id *sub_1000044B0(id *a1, char a2, char a3, void *a4)
{
  id v8;
  id *v9;
  id v11;
  int IsLevelEnabled;
  id v13;
  uint64_t v14;
  objc_super v15;

  v8 = a4;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)NRToken;
    v9 = (id *)[super init];
    if (!v9)
    {
      v11 = sub_100004628();
      IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        v13 = sub_100004628();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      v14 = _os_log_pack_fill();
      *(_DWORD *)v14 = 136446210;
      *(void *)(v14 + 4) = "-[NRToken initWithType:action:value:]";
      sub_100004628();
      _NRLogAbortWithPack();
    }
    a1 = v9;
    *((unsigned char *)v9 + 8) = a2;
    *((unsigned char *)v9 + 9) = a3;
    objc_storeStrong(v9 + 2, a4);
  }

  return a1;
}

id sub_100004628()
{
  if (qword_1001F47C8 != -1) {
    dispatch_once(&qword_1001F47C8, &stru_1001C5D88);
  }
  v0 = (void *)qword_1001F47C0;

  return v0;
}

void sub_10000467C(id a1)
{
  qword_1001F47C0 = (uint64_t)os_log_create("com.apple.networkrelay", "");

  _objc_release_x1();
}

id sub_1000046C0(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = objc_alloc_init((Class)NSMutableData);
  NRTLVAdd();
  if (*(void *)(a1 + 16)) {
    NRTLVAddData();
  }
  NRTLVAdd();
  return v2;
}

uint64_t sub_100004748(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100004758(uint64_t a1)
{
}

uint64_t sub_100004760(void *a1, unsigned __int8 *a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a2 + 1);
  uint64_t v4 = __rev16(v3);
  int v5 = *a2;
  switch(v5)
  {
    case 3:
      if (v3 == 256)
      {
        unsigned __int8 v6 = a2[3];
        uint64_t v7 = a1[7];
        goto LABEL_8;
      }
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
      if (qword_1001F47C8 != -1) {
        dispatch_once(&qword_1001F47C8, &stru_1001C5D88);
      }
      uint64_t result = _NRLogIsLevelEnabled();
      if (result)
      {
        if (qword_1001F47C8 == -1)
        {
LABEL_21:
          _NRLogWithArgs();
          return 0;
        }
LABEL_22:
        dispatch_once(&qword_1001F47C8, &stru_1001C5D88);
        goto LABEL_21;
      }
      break;
    case 2:
      id v8 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v4];
      uint64_t v9 = *(void *)(a1[6] + 8);
      v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;

      return 1;
    case 1:
      if (v3 == 256)
      {
        unsigned __int8 v6 = a2[3];
        uint64_t v7 = a1[5];
LABEL_8:
        *(unsigned char *)(*(void *)(v7 + 8) + 24) = v6;
        return 1;
      }
      *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
      if (qword_1001F47C8 != -1) {
        dispatch_once(&qword_1001F47C8, &stru_1001C5D88);
      }
      uint64_t result = _NRLogIsLevelEnabled();
      if (result)
      {
        if (qword_1001F47C8 == -1) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }
      break;
    default:
      return 1;
  }
  return result;
}

id sub_100005C90()
{
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  v0 = (void *)qword_1001F47D0;

  return v0;
}

void sub_100005CE4(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v11 = a3;
    id v12 = [objc_alloc((Class)NSString) initWithFormat:v11 arguments:&a9];

    v13 = (void *)a1[3];
    id v14 = v12;
    id v15 = v13;
    v16 = [a1 description];
    sub_10012F648(v15, a2, v16, v14);
  }
}

void sub_100005D9C(uint64_t a1, id *a2)
{
  if (a1 && *a2)
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      uint64_t v8 = a1;
      id v9 = *a2;
      uint64_t v7 = 914;
      int v5 = "";
      unsigned __int8 v6 = "-[NRPairingClient invalidateIKESession:]";
      _NRLogWithArgs();
    }
    [*a2 setStateUpdateBlock:0, v5, v6, v7, v8, v9];
    [*a2 setChildStateUpdateBlock:0];
    [*a2 setConfigurationUpdateBlock:0];
    [*a2 setTrafficSelectorUpdateBlock:0];
    [*a2 setAdditionalAddressesUpdateBlock:0];
    [*a2 setShortDPDEventBlock:0];
    [*a2 setRedirectEventBlock:0];
    [*a2 setPrivateNotifyStatusEvent:0];
    [*a2 disconnect];
    [*a2 invalidate];
    id v4 = *a2;
    *a2 = 0;
  }
}

void sub_100005F10(uint64_t a1)
{
  if (a1 && (*(unsigned char *)(a1 + 8) & 0xFE) != 6)
  {
    id v2 = *(void **)(a1 + 80);
    if (v2)
    {
      unsigned int v3 = [v2 description];
      [*(id *)(a1 + 80) setClientQueue:*(void *)(a1 + 32)];
      objc_initWeak(location, (id)a1);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_1000093F0;
      v35[3] = &unk_1001C6C78;
      objc_copyWeak(&v37, location);
      id v4 = v3;
      id v36 = v4;
      [*(id *)(a1 + 80) setStateUpdateBlock:v35];
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_100009930;
      v32[3] = &unk_1001C6CA0;
      objc_copyWeak(&v34, location);
      id v5 = v4;
      id v33 = v5;
      [*(id *)(a1 + 80) setChildStateUpdateBlock:v32];
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_100009B0C;
      v29[3] = &unk_1001C6CC8;
      objc_copyWeak(&v31, location);
      id v6 = v5;
      id v30 = v6;
      [*(id *)(a1 + 80) setConfigurationUpdateBlock:v29];
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_100009C08;
      v26[3] = &unk_1001C6CF0;
      objc_copyWeak(&v28, location);
      id v7 = v6;
      id v27 = v7;
      [*(id *)(a1 + 80) setTrafficSelectorUpdateBlock:v26];
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_100009D28;
      v23[3] = &unk_1001C6D18;
      objc_copyWeak(&v25, location);
      id v8 = v7;
      id v24 = v8;
      [*(id *)(a1 + 80) setAdditionalAddressesUpdateBlock:v23];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100009E24;
      v20[3] = &unk_1001C88B8;
      objc_copyWeak(&v22, location);
      id v9 = v8;
      id v21 = v9;
      [*(id *)(a1 + 80) setShortDPDEventBlock:v20];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100009F1C;
      v17[3] = &unk_1001C6D18;
      objc_copyWeak(&v19, location);
      id v10 = v9;
      id v18 = v10;
      [*(id *)(a1 + 80) setPrivateNotifyStatusEvent:v17];
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      id v11 = (id)qword_1001F47D0;
      char IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        id v13 = (id)qword_1001F47D0;
        _NRLogWithArgs();
      }
      objc_destroyWeak(&v19);

      objc_destroyWeak(&v22);
      objc_destroyWeak(&v25);

      objc_destroyWeak(&v28);
      objc_destroyWeak(&v31);

      objc_destroyWeak(&v34);
      objc_destroyWeak(&v37);
      objc_destroyWeak(location);
    }
    else
    {
      id v14 = sub_100005C90();
      int v15 = _NRLogIsLevelEnabled();

      if (v15)
      {
        id v16 = sub_100005C90();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_10000640C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, id *a15, id *a16)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(location);
  objc_destroyWeak(v16);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak((id *)(v20 - 112));
  _Unwind_Resume(a1);
}

void sub_1000064A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v40 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v9 + 8) & 0xFE) != 6)
  {
    id v10 = sub_100006814(v9, 0);
    if (_os_feature_enabled_impl())
    {
      uint64_t v11 = *(void *)(a1 + 32);
      if (v11) {
        id v12 = *(void **)(v11 + 24);
      }
      else {
        id v12 = 0;
      }
      id v13 = sub_100146410((uint64_t)NRDLocalDevice, v12);
      if (v13)
      {
        id v14 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50351 notifyData:v13];
        [v10 addObject:v14];
      }
    }
    if (v40)
    {
      id v15 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50411 notifyData:v40];
      [v10 addObject:v15];
    }
    if (v7)
    {
      id v16 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50412 notifyData:v7];
      [v10 addObject:v16];
    }
    if (v8)
    {
      id v17 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50413 notifyData:v8];
      [v10 addObject:v17];
    }
    [*(id *)(a1 + 40) setCustomIKEAuthPrivateNotifies:v10];
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      uint64_t v38 = 1708;
      uint64_t v39 = *(void *)(a1 + 32);
      id v36 = "";
      id v37 = "-[NRPairingClient requestConfigurationForListener:session:sessionConfig:childConfig:validateAuthBlock:respon"
            "seBlock:]_block_invoke";
      _NRLogWithArgs();
    }
    id v18 = *(id **)(a1 + 32);
    id v19 = [*(id *)(a1 + 40) sharedSecret:v36, v37, v38, v39];
    LogString = (void *)_NRKeyCreateLogString();
    sub_10000935C(v18, 3014, LogString);

    uint64_t v21 = *(void *)(a1 + 32);
    if (v21) {
      id v22 = *(void **)(v21 + 24);
    }
    else {
      id v22 = 0;
    }
    v23 = sub_10013DC5C((uint64_t)NRDLocalDevice, v22);
    if (*(void *)(a1 + 48))
    {
      uint64_t v24 = *(void *)(a1 + 32);
      if (v24
        && (id v25 = (unsigned __int8 *)*(id *)(v24 + 40)) != 0
        && (int v26 = v25[11], v25, v26))
      {
        id v27 = sub_10011F1E0();
        [v27 setSequencePerTrafficClass:1];
        id v28 = v27;
        uint64_t v29 = 16;
      }
      else
      {
        id v27 = sub_10011F1E0();
        [v27 setMode:2];
        id v28 = v27;
        uint64_t v29 = 4;
      }
      [v28 setReplayWindowSize:v29];
      uint64_t v30 = *(void *)(a1 + 56);
      uint64_t v31 = *(void *)(a1 + 40);
      if (v27)
      {
        uint64_t v32 = *(void *)(a1 + 32);
        if (v32)
        {
          id v33 = *(id *)(v32 + 40);
          id v34 = v33;
          if (v33)
          {
            uint64_t v35 = *((void *)v33 + 5);
LABEL_33:
            (*(void (**)(uint64_t, uint64_t, id, uint64_t))(v30 + 16))(v30, v31, v27, v35);

LABEL_35:
            goto LABEL_36;
          }
        }
        else
        {
          id v34 = 0;
        }
        uint64_t v35 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v30 = *(void *)(a1 + 56);
      uint64_t v31 = *(void *)(a1 + 40);
    }
    (*(void (**)(uint64_t, uint64_t, void, void))(v30 + 16))(v30, v31, 0, 0);
    goto LABEL_35;
  }
LABEL_36:
}

id sub_100006814(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  id v4 = objc_alloc_init((Class)NSMutableArray);
  LOWORD(v51) = 5632;
  id v5 = [objc_alloc((Class)NSMutableData) initWithBytes:&v51 length:2];
  id v6 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48602 notifyData:v5];
  [v4 addObject:v6];

  if (qword_1001F4B70 != -1) {
    dispatch_once(&qword_1001F4B70, &stru_1001C7C18);
  }
  id v7 = (id)qword_1001F4B68;
  id v8 = [v7 dataUsingEncoding:4];

  id v9 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48603 notifyData:v8];
  [v4 addObject:v9];

  if (qword_1001F4B60 != -1) {
    dispatch_once(&qword_1001F4B60, &stru_1001C7BF8);
  }
  id v10 = (id)qword_1001F4B58;
  uint64_t v11 = [v10 dataUsingEncoding:4];

  id v12 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48604 notifyData:v11];
  [v4 addObject:v12];

  if (qword_1001F4BF0 != -1) {
    dispatch_once(&qword_1001F4BF0, &stru_1001C7D68);
  }
  LOBYTE(v51) = byte_1001F4BE8;
  id v13 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:1];
  id v14 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48606 notifyData:v13];
  [v4 addObject:v14];

  id v15 = sub_10011FC08();
  [v4 addObject:v15];

  id v16 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 24));
  if (!v16)
  {
    id v44 = sub_100005C90();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v46 = sub_100005C90();
      _NRLogWithArgs();
    }
LABEL_32:
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v50 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v50 = 136446210;
    *(void *)(v50 + 4) = "-[NRPairingClient copyNotifyPayloadsToSendWithProxy:]";
    sub_100005C90();
    _NRLogAbortWithPack();
    return 0;
  }
  id v17 = v16;
  *(void *)&long long v51 = *((void *)v16 + 17);
  id v18 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:8];
  id v19 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48605 notifyData:v18];

  [v4 addObject:v19];
  uint64_t v20 = (unsigned __int8 *)*(id *)(a1 + 40);
  if (v20)
  {
    int v21 = v20[8];

    if (v21)
    {
      id v22 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 24));
      if (v22)
      {
        v23 = v22;
        long long v51 = 0uLL;
        sub_100141A68(v22, &v51);
        id v24 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:16];
        id v25 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50801 notifyData:v24];
        [v4 addObject:v25];

        long long v51 = 0uLL;
        sub_100142334(v23, &v51);
        id v26 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:16];
        id v27 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50802 notifyData:v26];
        [v4 addObject:v27];

        long long v51 = 0uLL;
        sub_10014B038(v23, &v51);
        id v28 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:16];
        id v29 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50811 notifyData:v28];
        [v4 addObject:v29];

        long long v51 = 0uLL;
        sub_10014AEA4(v23, &v51);
        id v30 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:16];
        id v31 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50812 notifyData:v30];
        [v4 addObject:v31];

        goto LABEL_13;
      }
      id v47 = sub_100005C90();
      int v48 = _NRLogIsLevelEnabled();

      if (v48)
      {
        id v49 = sub_100005C90();
        _NRLogWithArgs();
      }
      goto LABEL_32;
    }
  }
LABEL_13:
  if (a2)
  {
    uint64_t v32 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 24));
    id v33 = v32;
    if (v32) {
      id v34 = (void *)*((void *)v32 + 16);
    }
    else {
      id v34 = 0;
    }
    id v35 = v34;
    id v36 = [v35 proxyCapability];

    if (v36 == (id)1)
    {
      if (v33) {
        id v37 = (void *)v33[16];
      }
      else {
        id v37 = 0;
      }
      id v38 = v37;
      unsigned __int8 v39 = [v38 hasCompanionDatapath];

      if (v39)
      {
        id v40 = 0;
      }
      else
      {
        v41 = *(void **)(a1 + 40);
        if (v41) {
          v41 = (void *)v41[4];
        }
        id v40 = v41;
      }
      id v42 = sub_10011FDA0(v33, v40);
      [v4 addObject:v42];
    }
  }
  return v4;
}

uint64_t sub_100006EBC(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v2 = 104;
      return a1 + v2;
    case 4:
      uint64_t v2 = 88;
      return a1 + v2;
    case 3:
      uint64_t v2 = 96;
      return a1 + v2;
  }
  id v4 = sub_100005C90();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v6 = sub_100005C90();
    String = (void *)NRDataProtectionClassCreateString();
    _NRLogWithArgs();
  }
  _os_log_pack_size();
  __error();
  uint64_t v7 = _os_log_pack_fill();
  uint64_t v8 = NRDataProtectionClassCreateString();
  *(_DWORD *)uint64_t v7 = 136446466;
  *(void *)(v7 + 4) = "-[NRPairingClient ikeSessionPointerForDataProtectionClass:]";
  *(_WORD *)(v7 + 12) = 2112;
  *(void *)(v7 + 14) = v8;
  sub_100005C90();
  uint64_t v9 = _NRLogAbortWithPack();
  return sub_100007030(v9);
}

void sub_100007030(uint64_t a1, int a2)
{
  if ((*(unsigned char *)(a1 + 8) & 0xFE) != 6)
  {
    String = (void *)NRDataProtectionClassCreateString();
    switch(a2)
    {
      case 1:
        id v5 = *(void **)(a1 + 104);
        if (v5)
        {
          uint64_t v6 = 8;
          goto LABEL_11;
        }
        id v11 = sub_100005C90();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (!IsLevelEnabled) {
          goto LABEL_18;
        }
        break;
      case 3:
        id v5 = *(void **)(a1 + 96);
        if (v5)
        {
          uint64_t v6 = 4;
          goto LABEL_11;
        }
        id v13 = sub_100005C90();
        int v14 = _NRLogIsLevelEnabled();

        if (!v14) {
          goto LABEL_18;
        }
        break;
      case 4:
        id v5 = *(void **)(a1 + 88);
        if (v5)
        {
          uint64_t v6 = 2;
LABEL_11:
          id v7 = v5;
          [v7 setClientQueue:*(void *)(a1 + 32)];
          objc_initWeak(&location, (id)a1);
          v16[0] = _NSConcreteStackBlock;
          v16[1] = 3221225472;
          v16[2] = sub_1000072EC;
          v16[3] = &unk_1001C5E40;
          objc_copyWeak(v20, &location);
          char v21 = a2;
          id v17 = String;
          id v8 = v7;
          v20[1] = (id)v6;
          id v18 = v8;
          uint64_t v19 = a1;
          [v8 setStateUpdateBlock:v16];

          objc_destroyWeak(v20);
          objc_destroyWeak(&location);

LABEL_19:
          return;
        }
        id v9 = sub_100005C90();
        int v10 = _NRLogIsLevelEnabled();

        if (v10) {
          break;
        }
LABEL_18:
        id v8 = 0;
        goto LABEL_19;
      default:
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F47D8 != -1) {
            dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
          }
          _NRLogWithArgs();
        }
        goto LABEL_18;
    }
    id v15 = sub_100005C90();
    _NRLogWithArgs();

    goto LABEL_18;
  }
}

void sub_1000072D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000072EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v36 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained) {
    goto LABEL_27;
  }
  if (!v36)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    SessionStateString = (void *)NEIKEv2CreateSessionStateString();
    sub_100005CE4(WeakRetained, 3009, @"IKE session %@ changed state to %@", v13, v14, v15, v16, v17, v12);

    switch(a2)
    {
      case 1:
        goto LABEL_27;
      case 2:
        WeakRetained[6] |= *(void *)(a1 + 64);
        sub_100007ADC((uint64_t)WeakRetained, 4, 0);
        id v23 = (id)WeakRetained[3];
        id v24 = sub_10013DC5C((uint64_t)NRDLocalDevice, v23);
        id v25 = (void *)WeakRetained[14];
        WeakRetained[14] = v24;

        if ((~*((_DWORD *)WeakRetained + 12) & 6) != 0) {
          goto LABEL_24;
        }
        uint64_t v26 = WeakRetained[14];
        if ((WeakRetained[6] & 8) != 0)
        {
          if (!v26) {
            goto LABEL_23;
          }
        }
        else if (!v26 || *(unsigned __int16 *)(v26 + 28) <= 0x12u)
        {
LABEL_24:
          uint64_t v32 = (unsigned __int8 *)(id)WeakRetained[5];
          if (v32)
          {
            int v33 = v32[14];

            if (v33)
            {
              sub_100007F64(*(void *)(a1 + 48), 4);
              sub_100007F64(*(void *)(a1 + 48), 3);
              sub_100007F64(*(void *)(a1 + 48), 1);
            }
          }
          goto LABEL_27;
        }
        if (*(unsigned __int16 *)(v26 + 28) >= 0x10u)
        {
          uint64_t v27 = WeakRetained[5];
          if (!v27 || !*(unsigned char *)(v27 + 8))
          {
            id v28 = objc_alloc_init((Class)NSMutableArray);
            id v29 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:51601 notifyData:0];
            [v28 addObject:v29];
            objc_initWeak(&location, WeakRetained);
            id v30 = (void *)WeakRetained[10];
            uint64_t v31 = WeakRetained[4];
            v37[0] = _NSConcreteStackBlock;
            v37[1] = 3221225472;
            v37[2] = sub_10000821C;
            v37[3] = &unk_1001C7A00;
            objc_copyWeak(&v38, &location);
            [v30 sendPrivateNotifies:v28 maxRetries:10 retryIntervalInMilliseconds:3000 callbackQueue:v31 callback:v37];
            objc_destroyWeak(&v38);
            objc_destroyWeak(&location);
          }
          goto LABEL_24;
        }
LABEL_23:
        sub_1000083B4((uint64_t)WeakRetained);
        goto LABEL_24;
      case 3:
        if (*(unsigned char *)(a1 + 72) == 1) {
          sub_100007660((uint64_t)WeakRetained);
        }
        sub_100005CE4(WeakRetained, 3018, @"%@ session %@ got IKE Disconnected state with no error", v18, v19, v20, v21, v22, *(void *)(a1 + 32));
        goto LABEL_6;
      default:
        sub_100008148((uint64_t)WeakRetained);
        sub_100007ADC((uint64_t)WeakRetained, 6, 0);
        goto LABEL_27;
    }
  }
  if (*(unsigned char *)(a1 + 72) == 1) {
    sub_100007660((uint64_t)WeakRetained);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  id v35 = (void *)NEIKEv2CreateSessionStateString();
  sub_100005CE4(WeakRetained, 3018, @"%@ session %@ got IKE error %@ with state %@", v7, v8, v9, v10, v11, v6);

LABEL_6:
  if ((*(void *)(a1 + 64) & WeakRetained[6]) == 0) {
    sub_100007900(WeakRetained, *(unsigned __int8 *)(a1 + 72));
  }
LABEL_27:
}

void sub_100007634(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100007660(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((!v2 || !*(unsigned char *)(v2 + 8)) && (*(unsigned char *)(a1 + 48) & 8) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 112);
    if (!v3 || *(unsigned __int16 *)(v3 + 28) <= 0x12u)
    {
      if (*(unsigned char *)(a1 + 13))
      {
        *(unsigned char *)(a1 + 12) = 1;
        id v4 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 24));
        if (!v4)
        {
          id v7 = sub_100005C90();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v9 = sub_100005C90();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __error();
          uint64_t v10 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v10 = 136446210;
          *(void *)(v10 + 4) = "-[NRPairingClient scheduleIKESessionClassADueToConnectFailure]";
          sub_100005C90();
          _NRLogAbortWithPack();
          __break(1u);
        }
        id v5 = v4;
        if (!v4[14] && *((unsigned __int16 *)v4 + 14) <= 0x12u)
        {
          objc_initWeak(&location, (id)a1);
          id v6 = sub_100158A70();
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 3221225472;
          v11[2] = sub_1000091C4;
          v11[3] = &unk_1001C88B8;
          objc_copyWeak(&v13, &location);
          id v12 = v5;
          sub_100159AFC((uint64_t)v6, v11);

          objc_destroyWeak(&v13);
          objc_destroyWeak(&location);
        }
      }
      else
      {
        *(unsigned char *)(a1 + 13) = 1;
        sub_100007900(a1, 1);
      }
    }
  }
}

void sub_1000078D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_100007900(uint64_t a1, int a2)
{
  if ((*(unsigned char *)(a1 + 8) & 0xFE) == 6) {
    return;
  }
  id String = (id)NRDataProtectionClassCreateString();
  id v4 = (id *)sub_100006EBC(a1, a2);
  sub_100005D9C(a1, v4);
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    _NRLogWithArgs();
  }
  if (a2 == 1)
  {
    if (*(unsigned char *)(a1 + 12))
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        _NRLogWithArgs();
      }
      goto LABEL_19;
    }
    uint64_t v5 = a1;
    int v6 = 1;
  }
  else
  {
    uint64_t v5 = a1;
    int v6 = a2;
  }
  sub_100008650(v5, v6);
LABEL_19:
}

void sub_100007ADC(uint64_t a1, int a2, char a3)
{
  if (!a1) {
    return;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (*(unsigned __int8 *)(a1 + 8) == a2 && v6 == *(void *)(a1 + 152)) {
    return;
  }
  *(unsigned char *)(a1 + 8) = a2;
  *(void *)(a1 + 152) = v6;
  if (a2 == 7)
  {
    id v7 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 24));
    uint64_t v8 = v7;
    if (!v7)
    {
LABEL_20:
      self;
      if (qword_1001F4808 != -1) {
        dispatch_once(&qword_1001F4808, &stru_1001C5F88);
      }
      uint64_t v11 = (id *)(id)qword_1001F4800;
      if (!v11
        || (id v12 = v11,
            [v11[3] objectForKeyedSubscript:*(void *)(a1 + 24)],
            id v13 = objc_claimAutoreleasedReturnValue(),
            id v14 = [v13 count],
            v13,
            v12,
            !v14))
      {
        id v28 = objc_alloc((Class)NSString);
        if ((a3 - 1) > 7u) {
          CFStringRef v29 = @"None";
        }
        else {
          CFStringRef v29 = *(&off_1001C5E80 + (a3 - 1));
        }
        id v30 = [v28 initWithFormat:@"pairing client failed %@", v29];
        sub_100144A24((uint64_t)NRDLocalDevice, -2017, v30, *(void **)(a1 + 24));

LABEL_30:
        goto LABEL_31;
      }
LABEL_24:
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        _NRLogWithArgs();
      }
      goto LABEL_30;
    }
    if (v7[15])
    {
      char v9 = 1;
      if (!v7[12]) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v7[14]) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = *((unsigned __int16 *)v7 + 14) > 0x12u;
      }
      char v9 = v10;
      if (!v7[12]) {
        goto LABEL_19;
      }
    }
    if (!v7[13]) {
      char v9 = 0;
    }
    if (v9) {
      goto LABEL_24;
    }
LABEL_19:
    if (v7[8]) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }
LABEL_31:
  id v15 = objc_retainBlock(*(id *)(a1 + 144));
  uint64_t v16 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100008634;
  block[3] = &unk_1001C5DC8;
  id v17 = v15;
  id v33 = v17;
  char v34 = a2;
  char v35 = a3;
  dispatch_async(v16, block);
  if ((a2 - 5) <= 2 && !*(unsigned char *)(a1 + 11))
  {
    self;
    if (qword_1001F4808 != -1) {
      dispatch_once(&qword_1001F4808, &stru_1001C5F88);
    }
    uint64_t v18 = (id *)(id)qword_1001F4800;
    id v19 = *(id *)(a1 + 24);
    if (v18)
    {
      [v18[2] setObject:0 forKeyedSubscript:v19];
      id v31 = v19;
      uint64_t v20 = [v18[3] objectForKeyedSubscript:v19];
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      id v21 = v20;
      id v22 = [v21 countByEnumeratingWithState:&v39 objects:v43 count:16];
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = *(void *)v40;
        do
        {
          for (i = 0; i != v23; i = (char *)i + 1)
          {
            if (*(void *)v40 != v24) {
              objc_enumerationMutation(v21);
            }
            uint64_t v26 = *(void *)(*((void *)&v39 + 1) + 8 * i);
            if (v26) {
              uint64_t v27 = *(NSObject **)(v26 + 8);
            }
            else {
              uint64_t v27 = 0;
            }
            v36[0] = _NSConcreteStackBlock;
            v36[1] = 3221225472;
            v36[2] = sub_1000122EC;
            v36[3] = &unk_1001C89D0;
            v36[4] = v26;
            char v37 = a2;
            char v38 = a3;
            dispatch_async(v27, v36);
          }
          id v23 = [v21 countByEnumeratingWithState:&v39 objects:v43 count:16];
        }
        while (v23);
      }

      id v19 = v31;
      [v18[3] setObject:0 forKeyedSubscript:v31];
    }
  }
}

void sub_100007F64(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (!v4 || !*(unsigned char *)(v4 + 8))
    {
      if (*(unsigned char *)(a1 + 14))
      {
        uint64_t v5 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 24));
        if (a2 == 4 && (*(unsigned char *)(a1 + 48) & 2) == 0)
        {
          id v21 = v5;
          if (v5)
          {
            id v6 = v5[9];
            id v7 = v6;
            if (v6) {
              uint64_t v8 = (void *)*((void *)v6 + 1);
            }
            else {
              uint64_t v8 = 0;
            }
          }
          else
          {
            id v7 = 0;
            uint64_t v8 = 0;
          }
          id v9 = v8;

          uint64_t v5 = v21;
          if (!v9) {
            goto LABEL_37;
          }
          int v10 = 4;
          goto LABEL_36;
        }
        uint64_t v11 = *(void *)(a1 + 40);
        if (!v11 || !*(unsigned char *)(v11 + 14) || (*(unsigned char *)(a1 + 48) & 2) != 0)
        {
          if (a2 == 3 && (*(unsigned char *)(a1 + 48) & 4) == 0)
          {
            id v21 = v5;
            if (v5)
            {
              id v12 = v5[10];
              id v13 = v12;
              if (v12) {
                id v14 = (void *)*((void *)v12 + 1);
              }
              else {
                id v14 = 0;
              }
            }
            else
            {
              id v13 = 0;
              id v14 = 0;
            }
            id v15 = v14;

            uint64_t v5 = v21;
            if (!v15) {
              goto LABEL_37;
            }
            int v10 = 3;
            goto LABEL_36;
          }
          if (v11 && *(unsigned char *)(v11 + 14))
          {
            if (a2 != 1) {
              goto LABEL_37;
            }
            uint64_t v16 = *(void *)(a1 + 48);
            if ((v16 & 4) == 0) {
              goto LABEL_37;
            }
          }
          else
          {
            if (a2 != 1) {
              goto LABEL_37;
            }
            uint64_t v16 = *(void *)(a1 + 48);
          }
          if ((v16 & 8) != 0) {
            goto LABEL_37;
          }
          id v21 = v5;
          if (v5)
          {
            id v17 = v5[11];
            uint64_t v18 = v17;
            id v19 = v17 ? (void *)*((void *)v17 + 1) : 0;
          }
          else
          {
            uint64_t v18 = 0;
            id v19 = 0;
          }
          id v20 = v19;

          uint64_t v5 = v21;
          if (!v20) {
            goto LABEL_37;
          }
          int v10 = 1;
LABEL_36:
          sub_100007900(a1, v10);
          uint64_t v5 = v21;
        }
LABEL_37:
      }
    }
  }
}

void sub_100008148(uint64_t a1)
{
  if (a1)
  {
    sub_100005D9C(a1, (id *)(a1 + 88));
    sub_100005D9C(a1, (id *)(a1 + 96));
    sub_100005D9C(a1, (id *)(a1 + 104));
    sub_100005D9C(a1, (id *)(a1 + 80));
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      [v2 cancel];
      uint64_t v3 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = 0;
    }
    self;
    if (qword_1001F47E8 != -1) {
      dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
    }
    id v4 = (id)qword_1001F47E0;
    sub_100011A08((uint64_t)v4, (void *)a1);
  }
}

void sub_10000821C(uint64_t a1, int a2)
{
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && (WeakRetained[8] & 0xFE) != 6)
  {
    uint64_t v4 = (uint64_t)WeakRetained;
    if (a2)
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        _NRLogWithArgs();
      }
      sub_1000083B4(v4);
    }
    else
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        _NRLogWithArgs();
      }
      sub_100007ADC(v4, 7, 7);
    }
    WeakRetained = (unsigned char *)v4;
  }
}

void sub_1000083B4(uint64_t a1)
{
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    _NRLogWithArgs();
  }
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 2) != 0)
  {
    sub_100144350((uint64_t)NRDLocalDevice, 4, *(void **)(a1 + 24));
    uint64_t v2 = *(void *)(a1 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_9:
      if ((v2 & 8) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_9;
  }
  sub_100144350((uint64_t)NRDLocalDevice, 3, *(void **)(a1 + 24));
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 8) != 0)
  {
LABEL_10:
    sub_100144350((uint64_t)NRDLocalDevice, 1, *(void **)(a1 + 24));
    uint64_t v2 = *(void *)(a1 + 48);
  }
LABEL_11:
  *(void *)(a1 + 48) = v2 | 0x10;
  sub_100007ADC(a1, 5, 0);
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    [v3 cancel];
    uint64_t v4 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
  }
  uint64_t v5 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 24));
  id v12 = v5;
  if (!v5 || *((unsigned __int16 *)v5 + 14) < 0x10u) {
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6 || !*(unsigned char *)(v6 + 13))
  {
    self;
    if (qword_1001F47E8 != -1) {
      dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
    }
    id v7 = (id)qword_1001F47E0;
    sub_100011A08((uint64_t)v7, (void *)a1);

LABEL_20:
    sub_100005D9C(a1, (id *)(a1 + 80));
    sub_100005D9C(a1, (id *)(a1 + 88));
    sub_100005D9C(a1, (id *)(a1 + 96));
    sub_100005D9C(a1, (id *)(a1 + 104));
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v8 = (id)qword_1001F4A18;
  id v9 = v8;
  if (v8) {
    int v10 = (void *)*((void *)v8 + 6);
  }
  else {
    int v10 = 0;
  }
  id v11 = v10;
  sub_100155CF0((uint64_t)v11, 0, *(void **)(a1 + 64));
}

uint64_t sub_100008634(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void sub_100008650(uint64_t a1, int a2)
{
  if ((*(unsigned char *)(a1 + 8) & 0xFE) != 6)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (!v4 || !*(unsigned char *)(v4 + 8))
    {
      uint64_t v5 = (id *)sub_100006EBC(a1, a2);
      if (!*v5)
      {
        uint64_t v6 = v5;
        id String = (void *)NRDataProtectionClassCreateString();
        id v8 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 24));
        id v9 = v8;
        if (!v8)
        {
          id v50 = sub_100005C90();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v52 = sub_100005C90();
            _NRLogWithArgs();
          }
          sub_100007ADC(a1, 7, 3);
          goto LABEL_63;
        }
        if (a2 == 1)
        {
          if (*((unsigned __int16 *)v8 + 14) > 0x12u)
          {
            if (qword_1001F47D8 != -1) {
              dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
            }
            if (_NRLogIsLevelEnabled())
            {
              id v10 = sub_100005C90();
              _NRLogWithArgs();
            }
            goto LABEL_63;
          }
          id v11 = v8[11];
        }
        else
        {
          id v11 = sub_10013EF3C(v8, a2);
        }
        id v12 = v11;

        if (!v12)
        {
          if (qword_1001F47D8 != -1) {
            dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
          }
          if (_NRLogIsLevelEnabled())
          {
            id v23 = sub_100005C90();
            _NRLogWithArgs();
          }
          sub_100007ADC(a1, 7, 8);
          goto LABEL_63;
        }
        v80 = sub_10011F560(1, v9, a2);
        if (a2 != 1)
        {
          uint64_t v13 = *(void *)(a1 + 40);
          if (v13)
          {
            if (*(unsigned char *)(v13 + 11))
            {
              id v14 = +[NWAddressEndpoint endpointWithHostname:@"::" port:@"0"];
              id v15 = objc_alloc((Class)NEIKEv2ConfigurationMessage);
              id v16 = [objc_alloc((Class)NEIKEv2InitiatorTransportIPv6Address) initWithAddress:v14];
              v88[0] = v16;
              id v17 = [objc_alloc((Class)NEIKEv2ResponderTransportIPv6Address) initWithAddress:v14];
              v88[1] = v17;
              uint64_t v18 = +[NSArray arrayWithObjects:v88 count:2];
              id v19 = [v15 initWithWithAttributes:v18];
              [v80 setConfigurationRequest:v19];
            }
          }
        }
        id v20 = [v80 customIKEAuthPrivateNotifies];
        BOOL v21 = v20 == 0;

        if (v21)
        {
          id v79 = objc_alloc_init((Class)NSMutableArray);
        }
        else
        {
          id v22 = [v80 customIKEAuthPrivateNotifies];
          id v79 = [v22 mutableCopy];
        }
        if ([v79 count]) {
          [v80 setCustomIKEAuthPrivateNotifies:v79];
        }
        id v78 = [objc_alloc((Class)NSString) initWithFormat:@"terminusIKE-NRPairing-%@", String];
        uint64_t v24 = *(id *)(a1 + 40);
        if (!v24 || (BOOL v25 = v24[9] == 0, v24, v25)) {
          id v77 = 0;
        }
        else {
          id v77 = (id)a1;
        }
        id v26 = sub_10011EF54();
        sub_10011EC44(*(void **)(a1 + 112), v26);
        [v26 setRequestChildlessSA:1];
        v86[0] = 0;
        v86[1] = v86;
        int v87 = 0;
        v86[2] = 0x2020000000;
        uint64_t v27 = *(id *)(a1 + 40);
        if (!v27 || (BOOL v28 = v27[11] == 0, v27, v28))
        {
          id v30 = *(void **)(a1 + 40);
          if (v30) {
            id v30 = (void *)v30[2];
          }
          id v31 = v30;
          [v26 setOutgoingInterfaceName:v31];

          uint64_t v32 = *(void **)(a1 + 40);
          if (v32) {
            uint64_t v32 = (void *)v32[3];
          }
          id v33 = v32;
          [v26 setRemoteEndpoint:v33];

          [v26 setRandomizeLocalPort:1];
          id v29 = sub_10011F1E0();
          [v29 setMode:2];
          [v29 setReplayWindowSize:4];
          v85[0] = _NSConcreteStackBlock;
          v85[1] = 3221225472;
          v85[2] = sub_100009084;
          v85[3] = &unk_1001C6650;
          v85[4] = v86;
          v76 = objc_retainBlock(v85);
        }
        else
        {
          id v29 = sub_10011F1E0();
          [v29 setSequencePerTrafficClass:1];
          [v29 setReplayWindowSize:16];
          v76 = 0;
        }
        id v34 = v26;
        if (qword_1001F4B80 != -1) {
          dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
        }
        if (byte_1001F4B78)
        {
          [v34 setForceUDPEncapsulation:1];
          [v34 setRandomizeLocalPort:1];
        }

        id v35 = objc_alloc((Class)NEIKEv2Session);
        uint64_t v36 = *(void *)(a1 + 40);
        if (v36) {
          uint64_t v37 = *(void *)(v36 + 40);
        }
        else {
          uint64_t v37 = 0;
        }
        id v38 = [v35 initWithIKEConfig:v34 firstChildConfig:v29 sessionConfig:v80 queue:*(void *)(a1 + 32) ipsecInterface:v37 ikeSocketHandler:v76 kernelSASessionName:v78 packetDelegate:v77];
        id v39 = *v6;
        *uint64_t v6 = v38;

        v45 = (const char *)*v6;
        if (*v6)
        {
          switch(a2)
          {
            case 4:
              uint64_t v46 = 17;
              break;
            case 3:
              uint64_t v46 = 18;
              break;
            case 1:
              uint64_t v46 = 19;
              break;
            default:
LABEL_55:
              v71 = v45;
              sub_100005CE4((void *)a1, 3015, @"%@ %@", v40, v41, v42, v43, v44, (uint64_t)String);
              sub_100007030(a1, a2);
              if (qword_1001F47D8 != -1) {
                dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
              }
              id v47 = (id)qword_1001F47D0;
              int v48 = _NRLogIsLevelEnabled();

              if (v48)
              {
                if (qword_1001F47D8 != -1) {
                  dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                }
                id v49 = (id)qword_1001F47D0;
                v74 = String;
                id v75 = *v6;
                uint64_t v72 = 637;
                uint64_t v73 = a1;
                v70 = "";
                v71 = "-[NRPairingClient setupIPsecInitiatorIfNecessary:]";
                _NRLogWithArgs();
              }
              [*v6 connect:v70, v71, v72, v73, v74, v75];
              goto LABEL_62;
          }
          *(unsigned char *)(a1 + v46) = 0;
          v45 = (const char *)*v6;
          goto LABEL_55;
        }
        switch(a2)
        {
          case 3:
            unsigned int v56 = ++*(unsigned char *)(a1 + 18);
            id v57 = sub_100005C90();
            if (v56 >= 3)
            {
              int v58 = _NRLogIsLevelEnabled();

              if (v58) {
                goto LABEL_79;
              }
              goto LABEL_80;
            }
            int v64 = _NRLogIsLevelEnabled();

            if (v64)
            {
LABEL_86:
              id v66 = sub_100005C90();
              _NRLogWithArgs();
            }
            break;
          case 4:
            unsigned int v53 = ++*(unsigned char *)(a1 + 17);
            id v54 = sub_100005C90();
            if (v53 >= 3)
            {
              int v55 = _NRLogIsLevelEnabled();

              if (v55) {
                goto LABEL_79;
              }
              goto LABEL_80;
            }
            int v63 = _NRLogIsLevelEnabled();

            if (v63) {
              goto LABEL_86;
            }
            break;
          case 1:
            unsigned int v59 = ++*(unsigned char *)(a1 + 19);
            id v60 = sub_100005C90();
            if (v59 >= 3)
            {
              int v61 = _NRLogIsLevelEnabled();

              if (v61)
              {
LABEL_79:
                id v62 = sub_100005C90();
                _NRLogWithArgs();
              }
LABEL_80:
              sub_100007ADC(a1, 7, 6);
LABEL_62:
              _Block_object_dispose(v86, 8);

LABEL_63:
              return;
            }
            int v65 = _NRLogIsLevelEnabled();

            if (v65) {
              goto LABEL_86;
            }
            break;
        }
        objc_initWeak(&location, (id)a1);
        dispatch_time_t v67 = dispatch_time(0x8000000000000000, 3000000000);
        v68 = *(void **)(a1 + 32);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000090E8;
        block[3] = &unk_1001C73C0;
        v69 = v68;
        objc_copyWeak(&v82, &location);
        char v83 = a2;
        dispatch_after(v67, v69, block);

        objc_destroyWeak(&v82);
        objc_destroyWeak(&location);
        goto LABEL_62;
      }
    }
  }
}

void sub_100009068(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100009084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = getpid();
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8) + 24;

  return _NEHelperGetIKESocketWithResult(a3, a4, a5, v9, v10);
}

void sub_1000090E8(uint64_t a1)
{
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && (WeakRetained[8] & 0xFE) != 6)
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    if (v3 == 4)
    {
      if ((WeakRetained[48] & 2) != 0 || *((void *)WeakRetained + 11)) {
        goto LABEL_3;
      }
      uint64_t v4 = WeakRetained;
      sub_100007900(WeakRetained, 4);
      WeakRetained = v4;
      int v3 = *(unsigned __int8 *)(a1 + 40);
    }
    if (v3 == 3)
    {
      if ((WeakRetained[48] & 4) != 0 || *((void *)WeakRetained + 12)) {
        goto LABEL_3;
      }
      uint64_t v5 = WeakRetained;
      sub_100007900(WeakRetained, 3);
      WeakRetained = v5;
      int v3 = *(unsigned __int8 *)(a1 + 40);
    }
    if (v3 == 1 && (WeakRetained[48] & 8) == 0 && !*((void *)WeakRetained + 13))
    {
      uint64_t v6 = WeakRetained;
      sub_100007900(WeakRetained, 1);
      WeakRetained = v6;
    }
  }
LABEL_3:
}

uint64_t sub_1000091C4(uint64_t a1)
{
  WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 40));
  int v3 = WeakRetained;
  if (WeakRetained && ((_BYTE)WeakRetained[1] & 0xFE) != 6)
  {
    *((unsigned char *)WeakRetained + 12) = 0;
    id v12 = WeakRetained;
    uint64_t v4 = sub_10013DC5C((uint64_t)NRDLocalDevice, WeakRetained[3]);
    if (!v4)
    {
      id v7 = sub_100005C90();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v9 = sub_100005C90();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 136446210;
      *(void *)(v10 + 4) = "-[NRPairingClient scheduleIKESessionClassADueToConnectFailure]_block_invoke";
      sub_100005C90();
      _NRLogAbortWithPack();
    }
    uint64_t v5 = v4;
    if (!v4[14])
    {
      uint64_t v6 = *(void *)(a1 + 32);
      if (!v6 || *(unsigned __int16 *)(v6 + 28) <= 0x12u) {
        sub_100007900(v12, 1);
      }
    }

    int v3 = v12;
  }

  return _objc_release_x1(WeakRetained, v3);
}

void sub_10000935C(id *a1, int a2, void *a3)
{
  if (a1)
  {
    id v6 = a1[3];
    id v7 = a3;
    id v8 = [a1 description];
    sub_10012F648(v6, a2, v8, v7);
  }
}

void sub_1000093F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    if (v5)
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        id v8 = (id)qword_1001F47D0;
        SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
        _NRLogWithArgs();
      }
      if ((*(unsigned char *)(v7 + 48) & 0x10) == 0 && (*(unsigned char *)(v7 + 8) & 0xFE) != 6)
      {
        sub_100005D9C(v7, (id *)(v7 + 88));
        sub_100005D9C(v7, (id *)(v7 + 96));
        sub_100005D9C(v7, (id *)(v7 + 104));
        unsigned int v9 = ++*(unsigned char *)(v7 + 9);
        if (v9 < 2)
        {
          uint64_t v20 = *(void *)(v7 + 40);
          if (!v20 || !*(unsigned char *)(v20 + 8))
          {
            sub_100005D9C(v7, (id *)(v7 + 80));
            BOOL v21 = *(void **)(v7 + 24);
            location[0] = _NSConcreteStackBlock;
            location[1] = (id)3221225472;
            id location[2] = sub_10000CA00;
            location[3] = &unk_1001C5E18;
            location[4] = (id)v7;
            sub_1001464C8((uint64_t)NRDLocalDevice, v21, 4, location);
          }
        }
        else
        {
          sub_100007ADC(v7, 7, 4);
        }
      }
    }
    else
    {
      switch(a2)
      {
        case 3:
          if (qword_1001F47D8 != -1) {
            dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F47D8 != -1) {
              dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
            }
            _NRLogWithArgs();
          }
          break;
        case 2:
          WeakRetained[6] |= 1uLL;
          sub_100007ADC((uint64_t)WeakRetained, 3, 0);
          uint64_t v10 = *(void *)(v7 + 40);
          if (!v10 || !*(unsigned char *)(v10 + 8))
          {
            id v11 = objc_alloc_init((Class)NSMutableArray);
            if (*(void *)(v7 + 120))
            {
              sub_10000935C((id *)v7, 3400, @"ClassD");
              id v12 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50411 notifyData:*(void *)(v7 + 120)];
              [v11 addObject:v12];
              sub_10000C814(v7);
            }
            if (*(void *)(v7 + 128))
            {
              sub_10000935C((id *)v7, 3400, @"ClassC");
              id v13 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50412 notifyData:*(void *)(v7 + 128)];
              [v11 addObject:v13];
              sub_10000C820(v7);
            }
            if (*(void *)(v7 + 136))
            {
              sub_10000935C((id *)v7, 3400, @"ClassA");
              id v14 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50413 notifyData:*(void *)(v7 + 136)];
              [v11 addObject:v14];
              sub_10000C82C(v7);
            }
            if ([v11 count])
            {
              if (_os_feature_enabled_impl())
              {
                id v15 = sub_100146410((uint64_t)NRDLocalDevice, *(void **)(v7 + 24));
                if (v15)
                {
                  sub_10000935C((id *)v7, 3400, @"Identity");
                  id v16 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50351 notifyData:v15];
                  [v11 addObject:v16];
                }
              }
              id v17 = sub_100006814(v7, 0);
              [v11 addObjectsFromArray:v17];

              objc_initWeak(location, (id)v7);
              uint64_t v18 = *(void **)(v7 + 80);
              uint64_t v19 = *(void *)(v7 + 32);
              v23[0] = _NSConcreteStackBlock;
              v23[1] = 3221225472;
              v23[2] = sub_10000C838;
              v23[3] = &unk_1001C7A00;
              objc_copyWeak(&v24, location);
              [v18 sendPrivateNotifies:v11 maxRetries:10 retryIntervalInMilliseconds:3000 callbackQueue:v19 callback:v23];
              objc_destroyWeak(&v24);
              objc_destroyWeak(location);
            }
          }
          break;
        case 1:
          sub_100007ADC((uint64_t)WeakRetained, 2, 0);
          break;
      }
    }
  }
}

void sub_100009914(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_100009930(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v8)
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47D8 == -1) {
          goto LABEL_12;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47D8 == -1)
        {
LABEL_12:
          id v6 = (id)qword_1001F47D0;
          SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
          _NRLogWithArgs();

          goto LABEL_13;
        }
LABEL_16:
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        goto LABEL_12;
      }
    }
  }
LABEL_13:
}

void sub_100009B0C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100009C08(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100009D28(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      _NRLogWithArgs();
    }
  }
}

uint64_t sub_100009E24(uint64_t a1)
{
  uint64_t WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = WeakRetained;
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    uint64_t WeakRetained = _NRLogIsLevelEnabled();
    uint64_t v2 = v4;
    if (WeakRetained)
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      uint64_t WeakRetained = _NRLogWithArgs();
      uint64_t v2 = v4;
    }
  }

  return _objc_release_x1(WeakRetained, v2);
}

void sub_100009F1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v5 = [v3 sortedArrayUsingComparator:&stru_1001C7DE8];
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v106 = v3;
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      unint64_t v104 = *(void *)(a1 + 32);
      id v105 = v5;
      uint64_t v102 = 1090;
      v103 = WeakRetained;
      v100 = "";
      v101 = "-[NRPairingClient setupIKECallbacksPairing]_block_invoke_8";
      _NRLogWithArgs();
    }
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v115 objects:v121 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v116;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v116 != v9) {
            objc_enumerationMutation(v6);
          }
          id v16 = *(void **)(*((void *)&v115 + 1) + 8 * i);
          if (objc_msgSend(v16, "notifyStatus", v100, v101, v102, v103, v104, v105) == 50351)
          {
            id v11 = WeakRetained[3];
            id v12 = [WeakRetained description];
            sub_10012F648(v11, 3401, v12, @"Identity");

            id v13 = [v16 notifyData];
            id v14 = WeakRetained[3];
            v113[0] = _NSConcreteStackBlock;
            v113[1] = 3221225472;
            v113[2] = sub_10000BA10;
            v113[3] = &unk_1001C6BB0;
            v114 = WeakRetained;
            sub_100147808((uint64_t)NRDLocalDevice, v13, v14, v113);

            id v15 = v114;
            goto LABEL_13;
          }
          if ([v16 notifyStatus] == 50411)
          {
            id v17 = WeakRetained[3];
            uint64_t v18 = [WeakRetained description];
            sub_10012F648(v17, 3401, v18, @"ClassD");

            uint64_t v19 = [v16 notifyData];
            id v20 = WeakRetained[3];
            v111[0] = _NSConcreteStackBlock;
            v111[1] = 3221225472;
            v111[2] = sub_10000BCE4;
            v111[3] = &unk_1001C6BB0;
            v112 = WeakRetained;
            sub_100147B68((uint64_t)NRDLocalDevice, v19, v20, v111);

            id v15 = v112;
            goto LABEL_13;
          }
          if ([v16 notifyStatus] == 50412)
          {
            id v21 = WeakRetained[3];
            id v22 = [WeakRetained description];
            sub_10012F648(v21, 3401, v22, @"ClassC");

            id v23 = [v16 notifyData];
            id v24 = WeakRetained[3];
            v109[0] = _NSConcreteStackBlock;
            v109[1] = 3221225472;
            v109[2] = sub_10000C0A0;
            v109[3] = &unk_1001C6BB0;
            v110 = WeakRetained;
            sub_100147F1C((uint64_t)NRDLocalDevice, v23, v24, v109);

            id v15 = v110;
            goto LABEL_13;
          }
          if ([v16 notifyStatus] == 50413)
          {
            id v25 = WeakRetained[3];
            id v26 = [WeakRetained description];
            sub_10012F648(v25, 3401, v26, @"ClassA");

            uint64_t v27 = [v16 notifyData];
            id v28 = WeakRetained[3];
            v107[0] = _NSConcreteStackBlock;
            v107[1] = 3221225472;
            v107[2] = sub_10000C45C;
            v107[3] = &unk_1001C6BB0;
            v108 = WeakRetained;
            sub_1001483E8((uint64_t)NRDLocalDevice, v27, v28, v107);

            id v15 = v108;
            goto LABEL_13;
          }
          id v29 = (char *)[v16 notifyStatus];
          id v15 = [v16 notifyData];
          if (((_BYTE)WeakRetained[1] & 0xFE) != 6)
          {
            if (qword_1001F47D8 != -1) {
              dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F47D8 != -1) {
                dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
              }
              id v30 = (id)qword_1001F47D0;
              unint64_t v104 = v29;
              id v105 = [v15 length];
              uint64_t v102 = 1336;
              v103 = WeakRetained;
              v100 = "";
              v101 = "-[NRPairingClient handleNotifyCode:payload:]";
              _NRLogWithArgs();
            }
            if ((int)v29 <= 50500)
            {
              if ((int)v29 <= 50350)
              {
                switch((int)v29)
                {
                  case 48601:
                  case 48607:
                    goto LABEL_79;
                  case 48602:
                    LOWORD(v119) = 0;
                    if ((unint64_t)[v15 length] >= 2)
                    {
                      [v15 getBytes:&v119 length:2];
                      unsigned int v31 = (unsigned __int16)v119;
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      uint64_t v32 = (char *)(bswap32(v31) >> 16);
                      id v33 = (id)qword_1001F47D0;
                      int IsLevelEnabled = _NRLogIsLevelEnabled();

                      if (IsLevelEnabled)
                      {
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v35 = (id)qword_1001F47D0;
                        v103 = WeakRetained;
                        unint64_t v104 = (unint64_t)v32;
                        uint64_t v102 = 1349;
                        v100 = "";
                        v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        _NRLogWithArgs();
                      }
                      sub_100149D9C((uint64_t)NRDLocalDevice, v32, WeakRetained[3]);
                    }
                    goto LABEL_85;
                  case 48603:
                    int v58 = (char *)[objc_alloc((Class)NSString) initWithData:v15 encoding:4];
                    if (qword_1001F47D8 != -1) {
                      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                    }
                    id v59 = (id)qword_1001F47D0;
                    int v60 = _NRLogIsLevelEnabled();

                    if (v60)
                    {
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      id v61 = (id)qword_1001F47D0;
                      v103 = WeakRetained;
                      unint64_t v104 = (unint64_t)v58;
                      uint64_t v102 = 1355;
                      v100 = "";
                      v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                      _NRLogWithArgs();
                    }
                    sub_10014A164((uint64_t)NRDLocalDevice, v58, WeakRetained[3]);

                    goto LABEL_85;
                  case 48604:
                    id v62 = (char *)[objc_alloc((Class)NSString) initWithData:v15 encoding:4];
                    if (qword_1001F47D8 != -1) {
                      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                    }
                    id v63 = (id)qword_1001F47D0;
                    int v64 = _NRLogIsLevelEnabled();

                    if (v64)
                    {
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      id v65 = (id)qword_1001F47D0;
                      v103 = WeakRetained;
                      unint64_t v104 = (unint64_t)v62;
                      uint64_t v102 = 1361;
                      v100 = "";
                      v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                      _NRLogWithArgs();
                    }
                    sub_10014A3AC((uint64_t)NRDLocalDevice, v62, WeakRetained[3]);

                    goto LABEL_85;
                  case 48605:
                    v119 = 0;
                    if ([v15 length] == (id)8)
                    {
                      [v15 getBytes:&v119 length:8];
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      id v66 = (id)qword_1001F47D0;
                      int v67 = _NRLogIsLevelEnabled();

                      if (v67)
                      {
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v68 = (id)qword_1001F47D0;
                        v103 = WeakRetained;
                        unint64_t v104 = (unint64_t)v119;
                        uint64_t v102 = 1380;
                        v100 = "";
                        v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        _NRLogWithArgs();
                      }
                      sub_10014ACC0((uint64_t)NRDLocalDevice, v119, WeakRetained[3]);
                      goto LABEL_143;
                    }
                    if (qword_1001F47D8 != -1) {
                      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                    }
                    id v76 = (id)qword_1001F47D0;
                    int v77 = _NRLogIsLevelEnabled();

                    if (!v77) {
                      goto LABEL_85;
                    }
                    if (qword_1001F47D8 != -1) {
                      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                    }
                    id v40 = (id)qword_1001F47D0;
                    v103 = WeakRetained;
                    unint64_t v104 = (unint64_t)[v15 length];
                    uint64_t v102 = 1376;
                    v100 = "";
                    v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                    break;
                  case 48606:
                    LOBYTE(v119) = 0;
                    if ([v15 length] == (id)1)
                    {
                      [v15 getBytes:&v119 length:1];
                      v69 = (void *)_NRCopyLogObjectForNRUUID();
                      int v70 = _NRLogIsLevelEnabled();

                      if (v70)
                      {
                        v71 = (void *)_NRCopyLogObjectForNRUUID();
                        v103 = [WeakRetained description];
                        unint64_t v104 = v119;
                        uint64_t v102 = 1369;
                        v100 = "";
                        v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        _NRLogWithArgs();
                      }
                      sub_100149F80((uint64_t)NRDLocalDevice, (char *)v119, WeakRetained[3]);
                    }
                    goto LABEL_85;
                  default:
                    if (!v29) {
                      goto LABEL_79;
                    }
                    if (v29 != 48701) {
                      goto LABEL_143;
                    }
                    LOBYTE(v119) = 0;
                    if ([v15 length]) {
                      [v15 getBytes:&v119 length:1];
                    }
                    goto LABEL_85;
                }
LABEL_183:
                _NRLogWithArgs();

                goto LABEL_85;
              }
              if ((v29 - 50351) > 0x3E
                || ((1 << (v29 + 81)) & 0x701C000000000003) == 0)
              {
                goto LABEL_143;
              }
              goto LABEL_79;
            }
            if ((int)v29 > 50800)
            {
              if ((int)v29 <= 51300)
              {
                switch((int)v29)
                {
                  case 50801:
                    uint64_t v36 = (unsigned __int8 *)WeakRetained[5];
                    if (v36 && (int v37 = v36[8], v36, v37))
                    {
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      id v38 = (id)qword_1001F47D0;
                      int v39 = _NRLogIsLevelEnabled();

                      if (v39)
                      {
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v40 = (id)qword_1001F47D0;
                        uint64_t v102 = 1416;
                        v103 = WeakRetained;
                        v100 = "";
                        v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        goto LABEL_183;
                      }
                    }
                    else
                    {
                      v119 = 0;
                      uint64_t v120 = 0;
                      if ((unint64_t)objc_msgSend(v15, "length", v100, v101, v102, v103) > 0xF)
                      {
                        [v15 getBytes:&v119 length:16];
                        int v86 = sub_10014B96C((uint64_t)NRDLocalDevice, (uint64_t)&v119, WeakRetained[3]);
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v87 = (id)qword_1001F47D0;
                        int v88 = _NRLogIsLevelEnabled();

                        if (v86)
                        {
                          if (!v88) {
                            goto LABEL_85;
                          }
                          id v89 = sub_100005C90();
                          IPv6Addrid String = (char *)createIPv6AddrString();
                          v103 = WeakRetained;
                          unint64_t v104 = (unint64_t)IPv6AddrString;
                          uint64_t v102 = 1426;
                          v100 = "";
                          v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        }
                        else
                        {
                          if (!v88) {
                            goto LABEL_85;
                          }
                          id v89 = sub_100005C90();
                          IPv6Addrid String = (char *)createIPv6AddrString();
                          v103 = WeakRetained;
                          unint64_t v104 = (unint64_t)IPv6AddrString;
                          uint64_t v102 = 1428;
                          v100 = "";
                          v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        }
                        goto LABEL_212;
                      }
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      id v78 = (id)qword_1001F47D0;
                      int v79 = _NRLogIsLevelEnabled();

                      if (v79)
                      {
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v40 = (id)qword_1001F47D0;
                        v103 = WeakRetained;
                        unint64_t v104 = (unint64_t)v15;
                        uint64_t v102 = 1421;
                        v100 = "";
                        v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        goto LABEL_183;
                      }
                    }
                    goto LABEL_85;
                  case 50802:
                    uint64_t v46 = (unsigned __int8 *)WeakRetained[5];
                    if (v46 && (int v47 = v46[8], v46, v47))
                    {
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      id v48 = (id)qword_1001F47D0;
                      int v49 = _NRLogIsLevelEnabled();

                      if (v49)
                      {
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v40 = (id)qword_1001F47D0;
                        uint64_t v102 = 1452;
                        v103 = WeakRetained;
                        v100 = "";
                        v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        goto LABEL_183;
                      }
                    }
                    else
                    {
                      v119 = 0;
                      uint64_t v120 = 0;
                      if ((unint64_t)objc_msgSend(v15, "length", v100, v101, v102, v103) > 0xF)
                      {
                        [v15 getBytes:&v119 length:16];
                        int v91 = sub_10014C1DC((uint64_t)NRDLocalDevice, (uint64_t)&v119, WeakRetained[3]);
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v92 = (id)qword_1001F47D0;
                        int v93 = _NRLogIsLevelEnabled();

                        if (v91)
                        {
                          if (!v93) {
                            goto LABEL_85;
                          }
                          id v89 = sub_100005C90();
                          IPv6Addrid String = (char *)createIPv6AddrString();
                          v103 = WeakRetained;
                          unint64_t v104 = (unint64_t)IPv6AddrString;
                          uint64_t v102 = 1462;
                          v100 = "";
                          v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        }
                        else
                        {
                          if (!v93) {
                            goto LABEL_85;
                          }
                          id v89 = sub_100005C90();
                          IPv6Addrid String = (char *)createIPv6AddrString();
                          v103 = WeakRetained;
                          unint64_t v104 = (unint64_t)IPv6AddrString;
                          uint64_t v102 = 1464;
                          v100 = "";
                          v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        }
                        goto LABEL_212;
                      }
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      id v80 = (id)qword_1001F47D0;
                      int v81 = _NRLogIsLevelEnabled();

                      if (v81)
                      {
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v40 = (id)qword_1001F47D0;
                        v103 = WeakRetained;
                        unint64_t v104 = (unint64_t)v15;
                        uint64_t v102 = 1457;
                        v100 = "";
                        v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        goto LABEL_183;
                      }
                    }
                    goto LABEL_85;
                  case 50803:
                  case 50804:
                  case 50805:
                  case 50806:
                  case 50807:
                  case 50808:
                  case 50809:
                  case 50810:
                    goto LABEL_143;
                  case 50811:
                    id v50 = (unsigned __int8 *)WeakRetained[5];
                    if (v50 && (int v51 = v50[8], v50, v51))
                    {
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      id v52 = (id)qword_1001F47D0;
                      int v53 = _NRLogIsLevelEnabled();

                      if (v53)
                      {
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v40 = (id)qword_1001F47D0;
                        uint64_t v102 = 1434;
                        v103 = WeakRetained;
                        v100 = "";
                        v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        goto LABEL_183;
                      }
                    }
                    else
                    {
                      v119 = 0;
                      uint64_t v120 = 0;
                      if ((unint64_t)objc_msgSend(v15, "length", v100, v101, v102, v103) > 0xF)
                      {
                        [v15 getBytes:&v119 length:16];
                        int v94 = sub_10014BDA4((uint64_t)NRDLocalDevice, (uint64_t)&v119, WeakRetained[3]);
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v95 = (id)qword_1001F47D0;
                        int v96 = _NRLogIsLevelEnabled();

                        if (v94)
                        {
                          if (!v96) {
                            goto LABEL_85;
                          }
                          id v89 = sub_100005C90();
                          IPv6Addrid String = (char *)createIPv6AddrString();
                          v103 = WeakRetained;
                          unint64_t v104 = (unint64_t)IPv6AddrString;
                          uint64_t v102 = 1444;
                          v100 = "";
                          v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        }
                        else
                        {
                          if (!v96) {
                            goto LABEL_85;
                          }
                          id v89 = sub_100005C90();
                          IPv6Addrid String = (char *)createIPv6AddrString();
                          v103 = WeakRetained;
                          unint64_t v104 = (unint64_t)IPv6AddrString;
                          uint64_t v102 = 1446;
                          v100 = "";
                          v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        }
                        goto LABEL_212;
                      }
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      id v82 = (id)qword_1001F47D0;
                      int v83 = _NRLogIsLevelEnabled();

                      if (v83)
                      {
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v40 = (id)qword_1001F47D0;
                        v103 = WeakRetained;
                        unint64_t v104 = (unint64_t)v15;
                        uint64_t v102 = 1439;
                        v100 = "";
                        v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        goto LABEL_183;
                      }
                    }
                    goto LABEL_85;
                  case 50812:
                    id v54 = (unsigned __int8 *)WeakRetained[5];
                    if (v54 && (int v55 = v54[8], v54, v55))
                    {
                      if (qword_1001F47D8 != -1) {
                        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                      }
                      id v56 = (id)qword_1001F47D0;
                      int v57 = _NRLogIsLevelEnabled();

                      if (v57)
                      {
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v40 = (id)qword_1001F47D0;
                        uint64_t v102 = 1470;
                        v103 = WeakRetained;
                        v100 = "";
                        v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        goto LABEL_183;
                      }
                    }
                    else
                    {
                      v119 = 0;
                      uint64_t v120 = 0;
                      if ((unint64_t)objc_msgSend(v15, "length", v100, v101, v102, v103) > 0xF)
                      {
                        [v15 getBytes:&v119 length:16];
                        int v97 = sub_10014C614((uint64_t)NRDLocalDevice, (uint64_t)&v119, WeakRetained[3]);
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v98 = (id)qword_1001F47D0;
                        int v99 = _NRLogIsLevelEnabled();

                        if (v97)
                        {
                          if (!v99) {
                            goto LABEL_85;
                          }
                          id v89 = sub_100005C90();
                          IPv6Addrid String = (char *)createIPv6AddrString();
                          v103 = WeakRetained;
                          unint64_t v104 = (unint64_t)IPv6AddrString;
                          uint64_t v102 = 1480;
                          v100 = "";
                          v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        }
                        else
                        {
                          if (!v99) {
                            goto LABEL_85;
                          }
                          id v89 = sub_100005C90();
                          IPv6Addrid String = (char *)createIPv6AddrString();
                          v103 = WeakRetained;
                          unint64_t v104 = (unint64_t)IPv6AddrString;
                          uint64_t v102 = 1482;
                          v100 = "";
                          v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                        }
LABEL_212:
                        _NRLogWithArgs();
                      }
                      else
                      {
                        if (qword_1001F47D8 != -1) {
                          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                        }
                        id v84 = (id)qword_1001F47D0;
                        int v85 = _NRLogIsLevelEnabled();

                        if (v85)
                        {
                          if (qword_1001F47D8 != -1) {
                            dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                          }
                          id v40 = (id)qword_1001F47D0;
                          v103 = WeakRetained;
                          unint64_t v104 = (unint64_t)v15;
                          uint64_t v102 = 1475;
                          v100 = "";
                          v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                          goto LABEL_183;
                        }
                      }
                    }
                    break;
                  default:
                    if (v29 == 50901) {
                      goto LABEL_79;
                    }
                    goto LABEL_143;
                }
                goto LABEL_85;
              }
              if ((int)v29 > 51500)
              {
                if (v29 == 51501)
                {
                  if (qword_1001F47D8 != -1) {
                    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                  }
                  id v72 = (id)qword_1001F47D0;
                  int v73 = _NRLogIsLevelEnabled();

                  if (v73)
                  {
                    if (qword_1001F47D8 != -1) {
                      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                    }
                    id v74 = (id)qword_1001F47D0;
                    uint64_t v102 = 1392;
                    v103 = WeakRetained;
                    v100 = "";
                    v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                    _NRLogWithArgs();
                  }
                }
                else if (v29 == 51601)
                {
                  uint64_t v44 = (unsigned __int8 *)WeakRetained[5];
                  if (v44)
                  {
                    int v45 = v44[8];

                    if (v45) {
                      sub_1000083B4((uint64_t)WeakRetained);
                    }
                  }
                  goto LABEL_85;
                }
LABEL_143:
                if (qword_1001F47D8 != -1) {
                  dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F47D8 != -1) {
                    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                  }
                  id v75 = (id)qword_1001F47D0;
                  v103 = WeakRetained;
                  unint64_t v104 = (unint64_t)v29;
                  uint64_t v102 = 1515;
                  v100 = "";
                  v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                  _NRLogWithArgs();
                }
                goto LABEL_85;
              }
              if (v29 != 51301)
              {
                if (v29 == 51401)
                {
                  LOBYTE(v119) = 0;
                  [v15 getBytes:&v119 length:1];
                  if (qword_1001F47D8 != -1) {
                    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                  }
                  id v41 = (id)qword_1001F47D0;
                  int v42 = _NRLogIsLevelEnabled();

                  if (v42)
                  {
                    if (qword_1001F47D8 != -1) {
                      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                    }
                    id v43 = (id)qword_1001F47D0;
                    v103 = WeakRetained;
                    unint64_t v104 = v119;
                    uint64_t v102 = 1387;
                    v100 = "";
                    v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                    _NRLogWithArgs();
                  }
                  sub_10014A5F4((uint64_t)NRDLocalDevice, (char *)(v119 == 1), WeakRetained[3]);
                  goto LABEL_85;
                }
                goto LABEL_143;
              }
              goto LABEL_79;
            }
            if ((v29 - 50501) < 5) {
              goto LABEL_79;
            }
            if (v29 != 50701)
            {
              if (v29 != 50702) {
                goto LABEL_143;
              }
LABEL_79:
              if (qword_1001F47D8 != -1) {
                dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F47D8 != -1) {
                  dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
                }
                v103 = WeakRetained;
                unint64_t v104 = (unint64_t)v29;
                uint64_t v102 = 1511;
                v100 = "";
                v101 = "-[NRPairingClient handleNotifyCode:payload:]";
                _NRLogWithArgs();
              }
              goto LABEL_85;
            }
            sub_10014A7E0((uint64_t)NRDLocalDevice, v15, WeakRetained[3]);
          }
LABEL_85:

LABEL_13:
        }
        id v8 = [v6 countByEnumeratingWithState:&v115 objects:v121 count:16];
      }
      while (v8);
    }

    id v3 = v106;
  }
}

void sub_10000BA10(uint64_t a1, void *a2)
{
  id v14 = a2;
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    _NRLogWithArgs();
  }
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v2 = (id)qword_1001F47D0;
    if (v14)
    {
      id v3 = v14[8];
      uint64_t v4 = v3;
      if (v3) {
        id v5 = (void *)*((void *)v3 + 1);
      }
      else {
        id v5 = 0;
      }
    }
    else
    {
      uint64_t v4 = 0;
      id v5 = 0;
    }
    id v6 = v5;
    id v12 = [v6 UUIDString];
    _NRLogWithArgs();
  }
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v7 = (id)qword_1001F47D0;
    if (v14)
    {
      id v8 = v14[8];
      uint64_t v9 = v8;
      if (v8) {
        uint64_t v10 = (void *)*((void *)v8 + 2);
      }
      else {
        uint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    id v11 = v10;
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
}

void sub_10000BCE4(uint64_t a1, void *a2)
{
  id v21 = a2;
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    _NRLogWithArgs();
  }
  if (v21) {
    id v3 = (void *)v21[9];
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v5 = (id)qword_1001F47D0;
    if (v4) {
      id v6 = (void *)*((void *)v4 + 1);
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;
    id v8 = (void *)sub_100138464((uint64_t)v7);
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v9 = (id)qword_1001F47D0;
    if (v4) {
      uint64_t v10 = (void *)*((void *)v4 + 2);
    }
    else {
      uint64_t v10 = 0;
    }
    id v11 = v10;
    id v12 = (void *)sub_100138464((uint64_t)v11);
    uint64_t v19 = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v13 = (id)qword_1001F47D0;
    if (v4)
    {
      id v14 = *((id *)v4 + 3);
      id v15 = v14;
      if (v14)
      {
        id v16 = (void *)*((void *)v14 + 2);
LABEL_33:
        id v17 = v16;
        id v20 = (void *)_NRKeyCreateLogString();
        _NRLogWithArgs();

        goto LABEL_34;
      }
    }
    else
    {
      id v15 = 0;
    }
    id v16 = 0;
    goto LABEL_33;
  }
LABEL_34:
  sub_100007F64(*(void *)(a1 + 32), 4);
}

void sub_10000C0A0(uint64_t a1, void *a2)
{
  id v21 = a2;
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    _NRLogWithArgs();
  }
  if (v21) {
    id v3 = (void *)v21[10];
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v5 = (id)qword_1001F47D0;
    if (v4) {
      id v6 = (void *)*((void *)v4 + 1);
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;
    id v8 = (void *)sub_100138464((uint64_t)v7);
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v9 = (id)qword_1001F47D0;
    if (v4) {
      uint64_t v10 = (void *)*((void *)v4 + 2);
    }
    else {
      uint64_t v10 = 0;
    }
    id v11 = v10;
    id v12 = (void *)sub_100138464((uint64_t)v11);
    uint64_t v19 = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v13 = (id)qword_1001F47D0;
    if (v4)
    {
      id v14 = *((id *)v4 + 3);
      id v15 = v14;
      if (v14)
      {
        id v16 = (void *)*((void *)v14 + 2);
LABEL_33:
        id v17 = v16;
        id v20 = (void *)_NRKeyCreateLogString();
        _NRLogWithArgs();

        goto LABEL_34;
      }
    }
    else
    {
      id v15 = 0;
    }
    id v16 = 0;
    goto LABEL_33;
  }
LABEL_34:
  sub_100007F64(*(void *)(a1 + 32), 3);
}

void sub_10000C45C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v22 = v3;
  if (v3) {
    id v4 = (void *)*((void *)v3 + 11);
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    _NRLogWithArgs();
  }
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v6 = (id)qword_1001F47D0;
    if (v5) {
      id v7 = (void *)*((void *)v5 + 1);
    }
    else {
      id v7 = 0;
    }
    id v8 = v7;
    id v9 = (void *)sub_100138464((uint64_t)v8);
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v10 = (id)qword_1001F47D0;
    if (v5) {
      id v11 = (void *)*((void *)v5 + 2);
    }
    else {
      id v11 = 0;
    }
    id v12 = v11;
    id v13 = (void *)sub_100138464((uint64_t)v12);
    id v20 = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    id v14 = (id)qword_1001F47D0;
    if (v5)
    {
      id v15 = *((id *)v5 + 3);
      id v16 = v15;
      if (v15)
      {
        id v17 = (void *)*((void *)v15 + 2);
LABEL_33:
        id v18 = v17;
        id v21 = (void *)_NRKeyCreateLogString();
        _NRLogWithArgs();

        goto LABEL_34;
      }
    }
    else
    {
      id v16 = 0;
    }
    id v17 = 0;
    goto LABEL_33;
  }
LABEL_34:
  sub_100007F64(*(void *)(a1 + 32), 1);
}

void sub_10000C814(uint64_t a1)
{
}

void sub_10000C820(uint64_t a1)
{
}

void sub_10000C82C(uint64_t a1)
{
}

void sub_10000C838(uint64_t a1, int a2)
{
  uint64_t WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && (WeakRetained[8] & 0xFE) != 6)
  {
    uint64_t v4 = (uint64_t)WeakRetained;
    if (a2)
    {
      WeakRetained[14] = 1;
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        _NRLogWithArgs();
      }
      sub_100007F64(v4, 4);
      sub_100007F64(v4, 3);
      sub_100007F64(v4, 1);
    }
    else
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        _NRLogWithArgs();
      }
      sub_100007ADC(v4, 7, 7);
    }
    uint64_t WeakRetained = (unsigned char *)v4;
  }
}

void sub_10000CA00(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  uint64_t v83 = a1;
  if (_NRLogIsLevelEnabled())
  {
    int v81 = a4;
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = (id)qword_1001F47D0;
    Logid String = (void *)_NRKeyCreateLogString();
    id v78 = (void *)_NRKeyCreateLogString();
    int v79 = (void *)_NRKeyCreateLogString();
    uint64_t v75 = v11;
    int v77 = LogString;
    v71 = "-[NRPairingClient setupInitiator]_block_invoke";
    uint64_t v73 = 385;
    v69 = "";
    _NRLogWithArgs();

    a4 = v81;
    a1 = v83;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v14 + 8) & 0xFE) != 6)
  {
    objc_storeStrong((id *)(v14 + 120), a2);
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15)
    {
      objc_storeStrong((id *)(v15 + 128), a3);
      uint64_t v16 = *(void *)(a1 + 32);
      if (v16) {
        objc_storeStrong((id *)(v16 + 136), a4);
      }
    }
    id v17 = [objc_alloc((Class)NEIKEv2AuthenticationProtocol) initWithMethod:2];
    id v80 = v10;
    if (qword_1001F4C70 != -1) {
      dispatch_once(&qword_1001F4C70, &stru_1001C7ED0);
    }
    id v18 = (id)qword_1001F4C68;
    id v19 = sub_10011F450(1, v18, v17);

    uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 112);
    if (v20)
    {
      id v21 = *(void **)(v20 + 152);
      if (v21) {
        id v21 = (void *)v21[2];
      }
      id v22 = v21;
    }
    else
    {
      id v22 = 0;
    }
    [v19 setSharedSecret:v22, v69, v71, v73, v75, v77, v78, v79];

    id v23 = [v19 sharedSecret];

    if (v23)
    {
      uint64_t v24 = *(void *)(a1 + 32);
      if (v24
        && (id v25 = (unsigned __int8 *)*(id *)(v24 + 40)) != 0
        && (int v26 = v25[9], v25, v26))
      {
        id v27 = v8;
        id v82 = *(id *)(a1 + 32);
      }
      else
      {
        id v27 = v8;
        id v82 = 0;
      }
      id v28 = sub_10011EF54();
      sub_10011EC44(*(void **)(*(void *)(a1 + 32) + 112), v28);
      [v28 setRequestChildlessSA:1];
      v88[0] = 0;
      v88[1] = v88;
      int v89 = 0;
      void v88[2] = 0x2020000000;
      uint64_t v29 = *(void *)(a1 + 32);
      if (v29
        && (id v30 = (unsigned __int8 *)*(id *)(v29 + 40)) != 0
        && (int v31 = v30[11], v30, v31))
      {
        id v32 = sub_10011F1E0();
        [v32 setSequencePerTrafficClass:1];
        [v32 setReplayWindowSize:16];
        id v33 = 0;
      }
      else
      {
        id v34 = *(void **)(*(void *)(a1 + 32) + 40);
        if (v34) {
          id v34 = (void *)v34[2];
        }
        id v35 = v34;
        [v28 setOutgoingInterfaceName:v35];

        uint64_t v36 = *(void **)(*(void *)(v83 + 32) + 40);
        if (v36) {
          uint64_t v36 = (void *)v36[3];
        }
        int v37 = v36;
        [v28 setRemoteEndpoint:v37];

        [v28 setRandomizeLocalPort:1];
        id v32 = sub_10011F1E0();
        [v32 setMode:2];
        [v32 setReplayWindowSize:4];
        v87[0] = _NSConcreteStackBlock;
        v87[1] = 3221225472;
        v87[2] = sub_10000D2B8;
        v87[3] = &unk_1001C6650;
        v87[4] = v88;
        id v33 = objc_retainBlock(v87);
      }
      uint64_t v38 = *(void *)(v83 + 32);
      id v39 = v28;
      if (v38)
      {
        if (qword_1001F4B80 != -1) {
          dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
        }
        if (byte_1001F4B78)
        {
          [v39 setForceUDPEncapsulation:1];
          [v39 setRandomizeLocalPort:1];
        }
      }

      id v40 = objc_alloc((Class)NEIKEv2Session);
      uint64_t v41 = *(void *)(v83 + 32);
      uint64_t v42 = *(void *)(v41 + 32);
      uint64_t v43 = *(void *)(v41 + 40);
      if (v43) {
        uint64_t v44 = *(void *)(v43 + 40);
      }
      else {
        uint64_t v44 = 0;
      }
      id v45 = [v40 initWithIKEConfig:v39 firstChildConfig:v32 sessionConfig:v19 queue:v42 ipsecInterface:v44 ikeSocketHandler:v33 kernelSASessionName:@"terminusIKEForPairingWithOOBKey" packetDelegate:v82];
      uint64_t v46 = *(void *)(v83 + 32);
      int v47 = *(void **)(v46 + 80);
      *(void *)(v46 + 80) = v45;

      uint64_t v48 = *(void *)(v83 + 32);
      if (*(void *)(v48 + 80))
      {
        *(unsigned char *)(v48 + 16) = 0;
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        id v49 = (id)qword_1001F47D0;
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          if (qword_1001F47D8 != -1) {
            dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
          }
          id v51 = (id)qword_1001F47D0;
          uint64_t v74 = 468;
          uint64_t v76 = *(void *)(v83 + 32);
          int v70 = "";
          id v72 = "-[NRPairingClient setupInitiator]_block_invoke";
          _NRLogWithArgs();
        }
        sub_100005F10(*(void *)(v83 + 32));
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        id v52 = (id)qword_1001F47D0;
        int v53 = _NRLogIsLevelEnabled();

        if (v53)
        {
          if (qword_1001F47D8 != -1) {
            dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
          }
          id v54 = (id)qword_1001F47D0;
          uint64_t v74 = 470;
          uint64_t v76 = *(void *)(v83 + 32);
          int v70 = "";
          id v72 = "-[NRPairingClient setupInitiator]_block_invoke";
          _NRLogWithArgs();
        }
        [*(id *)(*(void *)(v83 + 32) + 80) connect:v70 withCompletionHandler:^(NSError * _Nullable)v72 withProgressHandler:^(NSNumber * _Nullable)v74 withProgress:v76];
        uint64_t v55 = *(void *)(v83 + 32);
        if (v55) {
          *(unsigned char *)(v55 + 14) = 0;
        }
      }
      else
      {
        ++*(unsigned char *)(v48 + 16);
        uint64_t v59 = *(void *)(v83 + 32);
        if (v59 && *(unsigned __int8 *)(v59 + 16) >= 3u)
        {
          id v60 = sub_100005C90();
          int v61 = _NRLogIsLevelEnabled();

          if (v61)
          {
            id v62 = sub_100005C90();
            _NRLogWithArgs();
          }
          sub_100007ADC(*(void *)(v83 + 32), 7, 4);
        }
        else
        {
          id v63 = sub_100005C90();
          int v64 = _NRLogIsLevelEnabled();

          if (v64)
          {
            id v65 = sub_100005C90();
            _NRLogWithArgs();
          }
          objc_initWeak(&location, *(id *)(v83 + 32));
          dispatch_time_t v66 = dispatch_time(0x8000000000000000, 3000000000);
          int v67 = *(void **)(v83 + 32);
          if (v67) {
            int v67 = (void *)v67[4];
          }
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10000D31C;
          block[3] = &unk_1001C7FF0;
          id v68 = v67;
          objc_copyWeak(&v85, &location);
          dispatch_after(v66, v68, block);

          objc_destroyWeak(&v85);
          objc_destroyWeak(&location);
        }
      }
      _Block_object_dispose(v88, 8);

      id v8 = v27;
    }
    else
    {
      id v56 = sub_100005C90();
      int v57 = _NRLogIsLevelEnabled();

      if (v57)
      {
        id v58 = sub_100005C90();
        _NRLogWithArgs();
      }
      sub_100007ADC(*(void *)(a1 + 32), 7, 8);
    }

    id v10 = v80;
  }
}

void sub_10000D2A0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000D2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = getpid();
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8) + 24;

  return _NEHelperGetIKESocketWithResult(a3, a4, a5, v9, v10);
}

void sub_10000D31C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained
    && (*((unsigned char *)WeakRetained + 8) & 0xFE) != 6
    && (*((unsigned char *)WeakRetained + 48) & 0x10) == 0
    && !*((void *)WeakRetained + 10))
  {
    sub_100005D9C((uint64_t)WeakRetained, (id *)WeakRetained + 10);
    id v3 = (void *)v2[3];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10000CA00;
    v4[3] = &unk_1001C5E18;
    v4[4] = v2;
    sub_1001464C8((uint64_t)NRDLocalDevice, v3, 4, v4);
  }
}

void sub_10000D3E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F47D0;
  qword_1001F47D0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id *sub_10000D5AC(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  uint64_t v11 = v10;
  if (!a1) {
    goto LABEL_19;
  }
  if (!v8)
  {
    id v17 = sub_100005C90();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (!v9)
  {
    id v19 = sub_100005C90();
    int v20 = _NRLogIsLevelEnabled();

    if (v20) {
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (!v10)
  {
    id v21 = sub_100005C90();
    int v22 = _NRLogIsLevelEnabled();

    if (v22)
    {
LABEL_18:
      id v23 = sub_100005C90();
      _NRLogWithArgs();

      uint64_t v15 = 0;
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  v29.receiver = a1;
  v29.super_class = (Class)NRPairingClient;
  id v12 = (id *)[super init];
  if (!v12)
  {
    id v24 = sub_100005C90();
    int v25 = _NRLogIsLevelEnabled();

    if (v25)
    {
      id v26 = sub_100005C90();
      _NRLogWithArgs();
    }
    id v8 = (id)_os_log_pack_size();
    uint64_t v9 = (char *)&v28 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v27 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v27 = 136446210;
    *(void *)(v27 + 4) = "-[NRPairingClient initWithQueue:nrUUID:parameters:]";
    sub_100005C90();
    _NRLogAbortWithPack();
    goto LABEL_23;
  }
  a1 = v12;
  v12[7] = (id)atomic_fetch_add_explicit(&qword_1001F3BF8, 1uLL, memory_order_relaxed);
  objc_storeStrong(v12 + 4, a2);
  objc_storeStrong(a1 + 3, a3);
  objc_storeStrong(a1 + 5, a4);
  uint64_t v13 = +[NSUUID UUID];
  id v14 = a1[8];
  a1[8] = (id)v13;

  a4 = &unk_1001F4000;
  if (qword_1001F47D8 != -1) {
LABEL_23:
  }
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  if (_NRLogIsLevelEnabled())
  {
    if (a4[251] != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    _NRLogWithArgs();
  }
  a1 = a1;
  uint64_t v15 = a1;
LABEL_12:

  return v15;
}

void sub_10000D924(uint64_t a1)
{
  if (!a1 || (*(unsigned char *)(a1 + 8) & 0xFE) == 6) {
    return;
  }
  *(unsigned char *)(a1 + 10) = 1;
  uint64_t v2 = sub_10013DD58((uint64_t)NRDLocalDevice, *(void **)(a1 + 24), 0);
  id v3 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v2;

  uint64_t v4 = *(void *)(a1 + 112);
  if (!v4)
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      _NRLogWithArgs();
    }
    uint64_t v6 = a1;
    int v7 = 7;
    char v8 = 3;
    goto LABEL_52;
  }
  if (*(unsigned char *)(v4 + 15))
  {
    int v5 = 1;
    if (!*(unsigned char *)(v4 + 12)) {
      goto LABEL_33;
    }
  }
  else
  {
    if (*(unsigned char *)(v4 + 14)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = *(unsigned __int16 *)(v4 + 28) > 0x12u;
    }
    int v5 = v9;
    if (!*(unsigned char *)(v4 + 12)) {
      goto LABEL_33;
    }
  }
  if (*(unsigned char *)(v4 + 13)) {
    int v10 = v5;
  }
  else {
    int v10 = 0;
  }
  if (v10 == 1)
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      _NRLogWithArgs();
    }
    uint64_t v6 = a1;
    int v7 = 5;
    char v8 = 0;
    goto LABEL_52;
  }
LABEL_33:
  *(unsigned char *)(a1 + 11) = 0;
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11 && *(unsigned char *)(v11 + 8)) {
    goto LABEL_35;
  }
  self;
  if (qword_1001F4808 != -1) {
    dispatch_once(&qword_1001F4808, &stru_1001C5F88);
  }
  id v24 = (id *)(id)qword_1001F4800;
  if (v24)
  {
    int v25 = v24;
    id v26 = [v24[2] objectForKeyedSubscript:*(void *)(a1 + 24)];

    if (!v26)
    {
LABEL_35:
      self;
      if (qword_1001F4808 != -1) {
        dispatch_once(&qword_1001F4808, &stru_1001C5F88);
      }
      id v12 = (id *)(id)qword_1001F4800;
      uint64_t v13 = v12;
      if (v12) {
        [v12[2] setObject:&__kCFBooleanTrue forKeyedSubscript:*(void *)(a1 + 24)];
      }

      uint64_t v14 = *(void *)(a1 + 40);
      if (!v14) {
        goto LABEL_75;
      }
      uint64_t v15 = *(void **)(v14 + 16);
      if (v15)
      {
        id v16 = v15;
        [v16 UTF8String];
        id v17 = nw_interface_create_with_name();
        nw_interface_type_t type = nw_interface_get_type(v17);
        subnw_interface_type_t type = nw_interface_get_subtype();
        if (type == nw_interface_type_wifi || subtype == 1001)
        {
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v20 = (id)qword_1001F4A18;
          id v21 = v20;
          if (v20) {
            int v22 = (void *)*((void *)v20 + 6);
          }
          else {
            int v22 = 0;
          }
          id v23 = v22;
          sub_100155CF0((uint64_t)v23, 1, *(void **)(a1 + 64));
        }
        uint64_t v14 = *(void *)(a1 + 40);
        if (!v14) {
          goto LABEL_75;
        }
      }
      if (*(unsigned char *)(v14 + 8))
      {
        if ((sub_10000E158(a1) & 1) == 0)
        {
          uint64_t v6 = a1;
          int v7 = 7;
          char v8 = 6;
LABEL_52:
          sub_100007ADC(v6, v7, v8);
          return;
        }
      }
      else
      {
LABEL_75:
        sub_100005D9C(a1, (id *)(a1 + 80));
        id v40 = *(void **)(a1 + 24);
        location[0] = _NSConcreteStackBlock;
        location[1] = (id)3221225472;
        id location[2] = sub_10000CA00;
        location[3] = &unk_1001C5E18;
        location[4] = (id)a1;
        sub_1001464C8((uint64_t)NRDLocalDevice, v40, 4, location);
      }
      sub_100007ADC(a1, 1, 0);
      return;
    }
  }
  if (qword_1001F47D8 != -1) {
    dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    uint64_t v43 = 246;
    uint64_t v44 = a1;
    uint64_t v41 = "";
    uint64_t v42 = "-[NRPairingClient start]";
    _NRLogWithArgs();
  }
  *(unsigned char *)(a1 + 11) = 1;
  objc_initWeak(location, (id)a1);
  self;
  if (qword_1001F4808 != -1) {
    dispatch_once(&qword_1001F4808, &stru_1001C5F88);
  }
  uint64_t v27 = (id *)(id)qword_1001F4800;
  uint64_t v28 = *(void **)(a1 + 24);
  objc_super v29 = *(void **)(a1 + 32);
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_10000DFFC;
  v45[3] = &unk_1001C5DF0;
  objc_copyWeak(&v46, location);
  id v30 = v28;
  id v31 = v29;
  id v32 = v45;
  if (v27)
  {
    id v33 = [v27[2] objectForKeyedSubscript:v30];

    if (v33)
    {
      id v34 = [v27[3] objectForKeyedSubscript:v30];
      id v35 = objc_alloc_init((Class)NSMutableArray);
      if ([v34 count])
      {
        id v36 = [objc_alloc((Class)NSMutableArray) initWithArray:v34];

        id v35 = v36;
      }
      int v37 = objc_alloc_init(NRPendingClientForPairing);
      uint64_t v38 = v37;
      if (v37)
      {
        objc_storeStrong((id *)&v37->_queue, v29);
        objc_setProperty_nonatomic_copy(v38, v39, v32, 16);
      }
      [v35 addObject:v38, v41, v42, v43, v44];
      [v27[3] setObject:v35 forKeyedSubscript:v30];
    }
  }

  objc_destroyWeak(&v46);
  objc_destroyWeak(location);
}

void sub_10000DFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_10000DFFC(uint64_t a1, int a2, char a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && (WeakRetained[8] & 0xFE) != 6)
  {
    uint64_t v6 = WeakRetained;
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      _NRLogWithArgs();
    }
    if ((a2 & 0xFE) == 6)
    {
      sub_10000D924(v6);
    }
    else
    {
      id WeakRetained = v6;
      if (a2 != 5) {
        goto LABEL_14;
      }
      sub_100007ADC((uint64_t)v6, 5, a3);
    }
    id WeakRetained = v6;
  }
LABEL_14:
}

uint64_t sub_10000E158(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    [v2 cancel];
    id v3 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
  }
  id v4 = objc_alloc((Class)NSString);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = "Tunnel";
  if (v5 && *(unsigned char *)(v5 + 11)) {
    uint64_t v6 = "Transport";
  }
  id v7 = [v4 initWithFormat:[NSString stringWithFormat:@"NRPairingResponder-%sMode", v6]];
  id v8 = sub_10011EF54();
  [v8 setRequestChildlessSA:1];
  uint64_t v9 = *(void *)(a1 + 40);
  if (!v9)
  {
    uint64_t v12 = 0;
LABEL_16:
    [v8 setOutgoingInterfaceName:v12];
    uint64_t v13 = [v8 outgoingInterfaceName];

    if (!v13)
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47D8 != -1) {
          dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
        }
        _NRLogWithArgs();
      }
      uint64_t v36 = 0;
      goto LABEL_63;
    }
    self;
    if (qword_1001F47E8 != -1) {
      dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
    }
    uint64_t v14 = (id *)(id)qword_1001F47E0;
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      id v16 = *(void **)(v15 + 16);
      id v17 = *(void **)(v15 + 32);
    }
    else
    {
      id v16 = 0;
      id v17 = 0;
    }
    id v18 = v16;
    id v19 = (id *)(id)a1;
    id v20 = v18;
    id v21 = v17;
    int v22 = v21;
    if (!v14) {
      goto LABEL_61;
    }
    if (v20)
    {
      if (v21)
      {
        if (*((unsigned char *)v19 + 8) != 6)
        {
          id obj = v17;
          id v61 = v16;
          id v23 = v19[3];
          id v24 = sub_10000FA68((uint64_t)v14, v20, v22, v23);

          id v25 = v14[4];
          if (!v25)
          {
            id v26 = objc_alloc_init((Class)NSMutableDictionary);
            id v27 = v14[4];
            v14[4] = v26;

            id v25 = v14[4];
          }
          uint64_t v28 = [v25 objectForKeyedSubscript:v24];
          objc_super v29 = (void *)v28;
          id v62 = (id *)v28;
          if (!v28) {
            goto LABEL_43;
          }
          id v30 = *(id *)(v28 + 32);
          id v31 = v30;
          id v58 = v24;
          uint64_t v59 = v22;
          if (v30) {
            id v32 = (void *)*((void *)v30 + 3);
          }
          else {
            id v32 = 0;
          }
          id v33 = v32;
          id v34 = v19[3];
          if ([v33 isEqual:v34])
          {
            id v35 = v62[1];
            if ([v35 isEqualToString:v20])
            {
              unsigned __int8 v57 = [v62[2] isEqual:v59];

              int v22 = v59;
              id v24 = v58;
              objc_super v29 = v62;
              if (v57)
              {
LABEL_59:

LABEL_60:
                goto LABEL_61;
              }
LABEL_43:
              if (sub_100010B8C((uint64_t)v14))
              {
                if (qword_1001F47F8 != -1) {
                  dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F47F8 != -1) {
                    dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
                  }
                  uint64_t v55 = 317;
                  id v56 = v19;
                  int v53 = "";
                  id v54 = "-[NRIKEv2Listener registerPairingClient:localInterfaceName:localEndpoint:]";
                  _NRLogWithArgs();
                }
                int v37 = objc_alloc_init(NRIKEv2ListenerRegistration);
                p_isa = (id *)&v37->super.isa;
                if (v37)
                {
                  objc_storeStrong((id *)&v37->_pairingClient, (id)a1);
                  objc_storeStrong(p_isa + 2, obj);
                  objc_storeStrong(p_isa + 1, v61);
                }
                [v14[4] setObject:p_isa forKeyedSubscript:v24];
                sub_100010D64((uint64_t)v14);
                sub_100011714((uint64_t)v14, v24);

                objc_super v29 = v62;
              }
              else
              {
                if (qword_1001F47F8 != -1) {
                  dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F47F8 != -1) {
                    dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
                  }
                  _NRLogWithArgs();
                }
              }
              goto LABEL_59;
            }
          }
          id v24 = v58;
          int v22 = v59;
          objc_super v29 = v62;
          goto LABEL_43;
        }
LABEL_61:

LABEL_62:
        uint64_t v36 = 1;
        goto LABEL_63;
      }
      id v51 = sub_10000F954();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_61;
      }
    }
    else
    {
      id v49 = sub_10000F954();
      int v50 = _NRLogIsLevelEnabled();

      if (!v50) {
        goto LABEL_61;
      }
    }
    id v24 = sub_10000F954();
    _NRLogWithArgs();
    goto LABEL_60;
  }
  if (!*(unsigned char *)(v9 + 11))
  {
    uint64_t v12 = *(void *)(v9 + 16);
    goto LABEL_16;
  }
  id v10 = [objc_alloc((Class)NEIKEv2Listener) initWithListenerIKEConfig:v8 kernelSASessionName:v7 packetDelegate:a1 listenerQueue:*(void *)(a1 + 32) delegate:a1 delegateQueue:*(void *)(a1 + 32)];
  uint64_t v11 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v10;

  if (*(void *)(a1 + 72))
  {
    *(unsigned char *)(a1 + 15) = 0;
    if (qword_1001F47D8 != -1) {
      dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47D8 != -1) {
        dispatch_once(&qword_1001F47D8, &stru_1001C5E60);
      }
      _NRLogWithArgs();
    }
    goto LABEL_62;
  }
  unsigned int v40 = ++*(unsigned char *)(a1 + 15);
  id v41 = sub_100005C90();
  if (v40 < 3)
  {
    int v44 = _NRLogIsLevelEnabled();

    if (v44)
    {
      id v45 = sub_100005C90();
      _NRLogWithArgs();
    }
    objc_initWeak(&location, (id)a1);
    dispatch_time_t v46 = dispatch_time(0x8000000000000000, 3000000000);
    int v47 = *(void **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000E8CC;
    block[3] = &unk_1001C7FF0;
    uint64_t v48 = v47;
    objc_copyWeak(&v64, &location);
    dispatch_after(v46, v48, block);

    objc_destroyWeak(&v64);
    objc_destroyWeak(&location);
    goto LABEL_62;
  }
  int v42 = _NRLogIsLevelEnabled();

  if (v42)
  {
    id v43 = sub_100005C90();
    _NRLogWithArgs();
  }
  sub_100007ADC(a1, 7, 6);
  uint64_t v36 = 0;
LABEL_63:

  return v36;
}

void sub_10000E8CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained
    && (*((unsigned char *)WeakRetained + 8) & 0xFE) != 6
    && (*((unsigned char *)WeakRetained + 48) & 0x10) == 0
    && !*((void *)WeakRetained + 9))
  {
    id v2 = WeakRetained;
    sub_10000E158();
    id WeakRetained = v2;
  }
}

id sub_10000F954()
{
  if (qword_1001F47F8 != -1) {
    dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
  }
  v0 = (void *)qword_1001F47F0;

  return v0;
}

void sub_10000F9A8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v10 = @"%@";
    id v11 = [objc_alloc((Class)NSString) initWithFormat:@"%@" arguments:&a9];

    id v12 = v11;
    id v13 = [objc_alloc((Class)NSString) initWithFormat:@"NRIKEv2Listener[%@]", @"62743"];
    sub_10012F648(0, a2, v13, v12);
  }
}

id sub_10000FA68(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!a1) {
    goto LABEL_15;
  }
  if (!v7)
  {
    id v15 = sub_10000F954();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_14;
    }
LABEL_15:
    id v13 = 0;
    goto LABEL_8;
  }
  if (!v8)
  {
    id v17 = sub_10000F954();
    int v18 = _NRLogIsLevelEnabled();

    if (v18) {
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  if (v9)
  {
    id v11 = [v8 copyCEndpoint];
    id v12 = nw_endpoint_copy_address_string(v11);
    id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s/%@/%@", v12, v7, v10];
    if (v12) {
      free(v12);
    }
    goto LABEL_7;
  }
  id v19 = sub_10000F954();
  int v20 = _NRLogIsLevelEnabled();

  if (!v20) {
    goto LABEL_15;
  }
LABEL_14:
  id v11 = sub_10000F954();
  _NRLogWithArgs();
  id v13 = 0;
LABEL_7:

LABEL_8:
  return v13;
}

void sub_10000FBF0(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  if (a1)
  {
    id v46 = v16;
    if (!a1[6])
    {
      id v20 = objc_alloc_init((Class)NSMutableDictionary);
      id v21 = a1[6];
      a1[6] = v20;
    }
    int v22 = objc_alloc_init(NRIKEv2PendingSession);
    id v23 = v22;
    if (v22)
    {
      objc_storeStrong((id *)&v22->_session, a2);
      objc_storeStrong((id *)&v23->_sessionConfig, a3);
      objc_storeStrong((id *)&v23->_childConfig, a4);
      objc_setProperty_nonatomic_copy(v23, v24, v17, 32);
      objc_setProperty_nonatomic_copy(v23, v25, v18, 40);
      v23->_sessionReceivedTimestamp = mach_continuous_time();
    }
    else
    {
      mach_continuous_time();
    }
    objc_initWeak(&location, v14);
    id v26 = a1[1];
    [v14 setClientQueue:v26];
    id v45 = v15;

    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_10001017C;
    v47[3] = &unk_1001C5F20;
    objc_copyWeak(&v49, &location);
    v47[4] = a1;
    id v44 = v19;
    id v27 = v19;
    id v48 = v27;
    [v14 setStateUpdateBlock:v47];
    id v28 = a1[6];
    objc_super v29 = [v28 objectForKeyedSubscript:v27];

    if (v29)
    {
      id v30 = v29[5];
      (*((void (**)(id, void, void, void))v30 + 2))(v30, 0, 0, 0);
    }
    if (qword_1001F47F8 != -1) {
      dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
    }
    id v31 = (id)qword_1001F47F0;
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      if (qword_1001F47F8 != -1) {
        dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
      }
      id v33 = (id)qword_1001F47F0;
      if (v23) {
        session = v23->_session;
      }
      else {
        session = 0;
      }
      id v43 = session;
      _NRLogWithArgs();
    }
    id v35 = a1[6];
    [v35 setObject:v23 forKeyedSubscript:v27];

    uint64_t v36 = a1 + 7;
    if (!a1[7])
    {
      int v37 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)a1[1]);
      dispatch_time_t v38 = dispatch_time(0x8000000000000000, 10000000000);
      dispatch_source_set_timer(v37, v38, 0x2540BE400uLL, 0x3A35294400uLL);
      objc_initWeak(from, a1);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1000102DC;
      handler[3] = &unk_1001C6D90;
      objc_copyWeak(v53, from);
      SEL v39 = v37;
      id v52 = v39;
      v53[1] = (id)0x4024000000000000;
      dispatch_source_set_event_handler(v39, handler);
      dispatch_activate(v39);
      objc_storeStrong(v36, v37);
      if (qword_1001F47F8 != -1) {
        dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
      }
      id v40 = (id)qword_1001F47F0;
      char v41 = _NRLogIsLevelEnabled();

      if (v41)
      {
        if (qword_1001F47F8 != -1) {
          dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
        }
        id v42 = (id)qword_1001F47F0;
        _NRLogWithArgs();
      }
      objc_destroyWeak(v53);
      objc_destroyWeak(from);
    }
    objc_destroyWeak(&v49);
    objc_destroyWeak(&location);

    id v15 = v45;
    id v16 = v46;
    id v19 = v44;
  }
}

void sub_1000100DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak((id *)(v27 - 112));
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001011C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if (a2)
  {
    id v4 = *(void **)(a1 + 32);
    sub_10014AAE4((uint64_t)NRDLocalDevice, v4);
  }
}

void sub_10001017C(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (a2 == 3 && WeakRetained)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v17 = WeakRetained;
    if (v5) {
      uint64_t v5 = (void *)v5[6];
    }
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = v5;
    uint64_t v8 = [v7 objectForKeyedSubscript:v6];
    id v9 = (void *)v8;
    if (v8) {
      id v10 = *(id *)(v8 + 8);
    }
    else {
      id v10 = 0;
    }

    id WeakRetained = v17;
    if (v10 == v17)
    {
      if (qword_1001F47F8 != -1) {
        dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47F8 != -1) {
          dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
        }
        uint64_t v15 = 524;
        id v16 = v17;
        id v13 = "";
        id v14 = "-[NRIKEv2Listener addPendingSession:sessionConfig:childConfig:validateAuthBlock:responseBlock:key:]_block_invoke";
        _NRLogWithArgs();
      }
      uint64_t v11 = *(void *)(a1 + 32);
      if (v11) {
        id v12 = *(void **)(v11 + 48);
      }
      else {
        id v12 = 0;
      }
      [v12 setObject:0 forKeyedSubscript:*(void *)(a1 + 40) v13, v14, v15, v16];
      id WeakRetained = v17;
    }
  }
}

void sub_1000102DC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    id v4 = WeakRetained[6];
    if ([v4 count])
    {
      uint64_t v35 = a1;
      uint64_t v5 = *(void *)(v3 + 56);
      uint64_t v6 = *(void *)(v35 + 32);

      BOOL v7 = v5 == v6;
      uint64_t v8 = v35;
      if (v7)
      {
        uint64_t v9 = mach_continuous_time();
        long long v41 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        id obj = *(id *)(v3 + 48);
        id v10 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
        if (v10)
        {
          id v11 = v10;
          id v12 = 0;
          uint64_t v13 = *(void *)v42;
          do
          {
            for (i = 0; i != v11; i = (char *)i + 1)
            {
              if (*(void *)v42 != v13) {
                objc_enumerationMutation(obj);
              }
              uint64_t v15 = *(void *)(*((void *)&v41 + 1) + 8 * i);
              uint64_t v16 = [*(id *)(v3 + 48) objectForKeyedSubscript:v15];
              id v19 = (void *)v16;
              double v20 = 0.0;
              if (v16)
              {
                unint64_t v21 = *(void *)(v16 + 48);
                if (v21 && v9 > v21)
                {
                  if (qword_1001F4BB8 != -1) {
                    dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
                  }
                  LODWORD(v17) = dword_1001F4BC0;
                  LODWORD(v18) = *(_DWORD *)algn_1001F4BC4;
                  double v20 = (double)(v9 - v21) * (0.000000001 * (double)v17) / (double)v18;
                }
              }
              if (v20 > *(double *)(v8 + 48))
              {
                if (qword_1001F47F8 != -1) {
                  dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F47F8 != -1) {
                    dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
                  }
                  if (v19) {
                    uint64_t v23 = v19[1];
                  }
                  else {
                    uint64_t v23 = 0;
                  }
                  id v24 = (id)qword_1001F47F0;
                  uint64_t v33 = 565;
                  uint64_t v34 = v23;
                  id v31 = "";
                  id v32 = "-[NRIKEv2Listener armPendingSessionCleanupTimer]_block_invoke";
                  _NRLogWithArgs();

                  uint64_t v8 = v35;
                }
                if (v19) {
                  uint64_t v25 = v19[5];
                }
                else {
                  uint64_t v25 = 0;
                }
                (*(void (**)(uint64_t, void, void, void))(v25 + 16))(v25, 0, 0, 0);
                if (!v12) {
                  id v12 = objc_alloc_init((Class)NSMutableArray);
                }
                [v12 addObject:v15, v31, v32, v33, v34];
              }
            }
            id v11 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
          }
          while (v11);
        }
        else
        {
          id v12 = 0;
        }

        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        id v26 = v12;
        id v27 = [v26 countByEnumeratingWithState:&v37 objects:v45 count:16];
        if (v27)
        {
          id v28 = v27;
          uint64_t v29 = *(void *)v38;
          do
          {
            for (j = 0; j != v28; j = (char *)j + 1)
            {
              if (*(void *)v38 != v29) {
                objc_enumerationMutation(v26);
              }
              [*(id *)(v3 + 48) setObject:0 forKeyedSubscript:*(void *)(*((void *)&v37 + 1) + 8 * (void)j)];
            }
            id v28 = [v26 countByEnumeratingWithState:&v37 objects:v45 count:16];
          }
          while (v28);
        }

        sub_10001068C(v3);
      }
    }
    else
    {
    }
  }
}

void sub_10001068C(uint64_t a1)
{
  if (![*(id *)(a1 + 48) count] && *(void *)(a1 + 56))
  {
    if (qword_1001F47F8 != -1) {
      dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47F8 != -1) {
        dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
      }
      _NRLogWithArgs();
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 56));
    id v2 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
  }
}

void sub_100010794(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F47F0;
  qword_1001F47F0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100010AF8()
{
  self;
  if (qword_1001F47E8 != -1) {
    dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
  }
  v0 = (void *)qword_1001F47E0;

  return v0;
}

void sub_100010B50(id a1)
{
  os_log_t v1 = objc_alloc_init(NRIKEv2Listener);
  uint64_t v2 = qword_1001F47E0;
  qword_1001F47E0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_100010B8C(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return 1;
  }
  id v3 = sub_10011EF54();
  [v3 setRequestChildlessSA:1];
  if (qword_1001F4B80 != -1) {
    dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
  }
  if (byte_1001F4B78) {
    [v3 setForceUDPEncapsulation:1];
  }
  id v4 = objc_alloc((Class)NEIKEv2Listener);
  id v5 = *(id *)(a1 + 8);
  LOBYTE(v13) = 1;
  id v6 = [v4 initWithListenerIKEConfig:v3 kernelSASessionName:@"terminusIKE-Shared-Listener" listenerUDPPort:@"62743" listenerQueue:v5 delegate:a1 delegateQueue:v5 includeP2P:v13];
  BOOL v7 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v6;

  uint64_t v8 = *(void *)(a1 + 16);
  BOOL v1 = v8 != 0;
  if (v8)
  {
    if (qword_1001F47F8 != -1) {
      dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47F8 != -1) {
        dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
      }
      _NRLogWithArgs();
    }
  }
  else
  {
    id v10 = sub_10000F954();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = sub_10000F954();
      _NRLogWithArgs();
    }
  }

  return v1;
}

void sub_100010D64(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (qword_1001F47F8 != -1) {
      dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47F8 != -1) {
        dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
      }
      id v58 = "";
      _NRLogWithArgs();
    }
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v1 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v1, @"NRIKEv2Listener");

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v63 = (id)qword_1001F4D20;
    if (v63)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v63 + 1));
      if (([*((id *)v63 + 2) apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v2, v3, v4, (uint64_t)v58);
      }
    }
  }
  else
  {
    id v5 = (id *)a1;
    id v6 = objc_alloc_init((Class)NSMutableArray);
    id v61 = +[NEPolicyRouteRule routeRuleWithAction:2 forType:0];
    [v6 addObject:];
    id v7 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v8 = +[NWAddressEndpoint endpointWithHostname:@"::" port:@"62743"];
    uint64_t v9 = +[NEPolicyCondition allInterfaces];
    [v7 addObject:v9];

    id v60 = (void *)v8;
    id v10 = +[NEPolicyCondition flowLocalAddress:v8 prefix:0];
    [v7 addObject:v10];

    id v11 = [v5[3] allValues];
    id v62 = v7;
    if ([v11 count])
    {
      id v64 = v5;
      id v12 = objc_alloc_init((Class)NSMutableSet);
      long long v78 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      id v13 = v11;
      id v14 = [v13 countByEnumeratingWithState:&v78 objects:v85 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v79;
        do
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(void *)v79 != v16) {
              objc_enumerationMutation(v13);
            }
            uint64_t v19 = *(void *)(*((void *)&v78 + 1) + 8 * i);
            if (v19 && (id v20 = *(id *)(v19 + 8)) != 0)
            {
              unint64_t v18 = v20;
              [v12 addObject:v20];
            }
            else
            {
              if (qword_1001F47F8 != -1) {
                dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F47F8 != -1) {
                  dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
                }
                id v58 = (const char *)v19;
                _NRLogWithArgs();
              }
            }
          }
          id v15 = [v13 countByEnumeratingWithState:&v78 objects:v85 count:16];
        }
        while (v15);
      }

      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      id v21 = v12;
      id v22 = [v21 countByEnumeratingWithState:&v74 objects:v84 count:16];
      id v7 = v62;
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = *(void *)v75;
        do
        {
          for (j = 0; j != v23; j = (char *)j + 1)
          {
            if (*(void *)v75 != v24) {
              objc_enumerationMutation(v21);
            }
            id v26 = +[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", 1, *(void *)(*((void *)&v74 + 1) + 8 * (void)j), v58);
            [v6 addObject:v26];
          }
          id v23 = [v21 countByEnumeratingWithState:&v74 objects:v84 count:16];
        }
        while (v23);
      }

      id v5 = v64;
    }
    [v5[4] allValues:v58];
    id v65 = (id)objc_claimAutoreleasedReturnValue();
    if ([v65 count])
    {
      id v27 = objc_alloc_init((Class)NSMutableSet);
      long long v70 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      id v28 = v65;
      id v29 = [v28 countByEnumeratingWithState:&v70 objects:v83 count:16];
      if (v29)
      {
        id v30 = v29;
        uint64_t v31 = *(void *)v71;
        do
        {
          for (k = 0; k != v30; k = (char *)k + 1)
          {
            if (*(void *)v71 != v31) {
              objc_enumerationMutation(v28);
            }
            uint64_t v34 = *(void *)(*((void *)&v70 + 1) + 8 * (void)k);
            if (v34 && (id v35 = *(id *)(v34 + 8)) != 0)
            {
              uint64_t v33 = v35;
              [v27 addObject:v35];
            }
            else
            {
              if (qword_1001F47F8 != -1) {
                dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F47F8 != -1) {
                  dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
                }
                uint64_t v59 = (const char *)v34;
                _NRLogWithArgs();
              }
            }
          }
          id v30 = [v28 countByEnumeratingWithState:&v70 objects:v83 count:16];
        }
        while (v30);
      }

      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      id v36 = v27;
      id v37 = [v36 countByEnumeratingWithState:&v66 objects:v82 count:16];
      id v7 = v62;
      if (v37)
      {
        id v38 = v37;
        uint64_t v39 = *(void *)v67;
        do
        {
          for (m = 0; m != v38; m = (char *)m + 1)
          {
            if (*(void *)v67 != v39) {
              objc_enumerationMutation(v36);
            }
            long long v41 = +[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:](NEPolicyRouteRule, "routeRuleWithAction:forInterfaceName:", 1, *(void *)(*((void *)&v66 + 1) + 8 * (void)m), v59);
            [v6 addObject:v41];
          }
          id v38 = [v36 countByEnumeratingWithState:&v66 objects:v82 count:16];
        }
        while (v38);
      }
    }
    if (qword_1001F47F8 != -1) {
      dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F47F8 != -1) {
        dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
      }
      uint64_t v59 = "";
      _NRLogWithArgs();
    }
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v42 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v42, @"NRIKEv2Listener");

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v43 = (id)qword_1001F4D20;
    long long v44 = (id *)v43;
    if (v43)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v43 + 1));
      if (([v44[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v45, v46, v47, (uint64_t)v59);
      }
    }

    id v48 = objc_alloc((Class)NEPolicy);
    id v49 = +[NEPolicyResult routeRules:v6];
    id v50 = [v48 initWithOrder:6 result:v49 conditions:v7];

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v51 = (id)qword_1001F4D20;
    id v52 = sub_100134CFC((uint64_t)v51, @"NRIKEv2Listener", v50);

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v53 = (id)qword_1001F4D20;
    id v54 = (id *)v53;
    if (v53)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v53 + 1));
      if (([v54[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v55, v56, v57, (uint64_t)v59);
      }
    }
  }
}

void sub_100011714(uint64_t a1, void *a2)
{
  id v17 = a2;
  id v3 = *(id *)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [*(id *)(a1 + 48) objectForKeyedSubscript:v17];

    if (v5)
    {
      uint64_t v6 = [*(id *)(a1 + 48) objectForKeyedSubscript:v17];
      [*(id *)(a1 + 48) setObject:0 forKeyedSubscript:v17];
      if (v6)
      {
        [*(id *)(v6 + 8) setStateUpdateBlock:0];
        [*(id *)(v6 + 8) setClientQueue:0];
        id v7 = *(void **)(v6 + 8);
      }
      else
      {
        [0 setStateUpdateBlock:0];
        [0 setClientQueue:0];
        id v7 = 0;
      }
      if ([v7 state] == (id)3)
      {
        if (qword_1001F47F8 != -1) {
          dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F47F8 != -1) {
            dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
          }
          id v8 = (id)qword_1001F47F0;
          _NRLogWithArgs();
        }
      }
      else
      {
        if (qword_1001F47F8 != -1) {
          dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F47F8 != -1) {
            dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
          }
          id v9 = (id)qword_1001F47F0;
          _NRLogWithArgs();
        }
        id v10 = *(void **)(a1 + 16);
        if (v6)
        {
          id v11 = *(id *)(v6 + 8);
          id v12 = *(id *)(v6 + 16);
          id v13 = *(id *)(v6 + 24);
          id v14 = *(id *)(v6 + 32);
          uint64_t v15 = *(void *)(v6 + 40);
        }
        else
        {
          id v14 = 0;
          id v12 = 0;
          id v11 = 0;
          id v13 = 0;
          uint64_t v15 = 0;
        }
        id v16 = v10;
        [(id)a1 requestConfigurationForListener:v16 session:v11 sessionConfig:v12 childConfig:v13 validateAuthBlock:v14 responseBlock:v15];

        sub_10001068C(a1);
      }
    }
  }
}

void sub_100011A08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v4 = *(id *)(a1 + 32);
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (!v5)
    {
LABEL_19:
      id v12 = v4;
LABEL_20:

      goto LABEL_21;
    }
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
LABEL_5:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v14 != v7) {
        objc_enumerationMutation(v4);
      }
      id v9 = *(void **)(*((void *)&v13 + 1) + 8 * v8);
      id v10 = [*(id *)(a1 + 32) objectForKeyedSubscript:v9];
      id v11 = v10;
      if (v10)
      {
        if ((id)v10[4] == v3) {
          break;
        }
      }

      if (v6 == (id)++v8)
      {
        id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (!v6) {
          goto LABEL_19;
        }
        goto LABEL_5;
      }
    }
    id v12 = v9;

    if (v12)
    {
      [*(id *)(a1 + 32) setObject:0 forKeyedSubscript:v12];
      if (qword_1001F47F8 != -1) {
        dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F47F8 != -1) {
          dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
        }
        _NRLogWithArgs();
      }
      sub_100010D64(a1);
      goto LABEL_20;
    }
  }
LABEL_21:
}

uint64_t sub_100011C08(uint64_t IsLevelEnabled, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = v10;
  if (!IsLevelEnabled) {
    goto LABEL_32;
  }
  if (!v8)
  {
    id v32 = sub_10000F954();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_32;
    }
    goto LABEL_38;
  }
  if (!v9)
  {
    id v33 = sub_10000F954();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_32;
    }
    goto LABEL_38;
  }
  if (!v10)
  {
    id v34 = sub_10000F954();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_32;
    }
LABEL_38:
    id v13 = sub_10000F954();
    _NRLogWithArgs();
    int IsLevelEnabled = 0;
LABEL_31:

    goto LABEL_32;
  }
  if ([v8 state] != 255)
  {
    id obj = a2;
    id v12 = [v8 nrUUID];
    id v13 = sub_10000FA68(IsLevelEnabled, v9, v11, v12);

    long long v14 = *(void **)(IsLevelEnabled + 24);
    if (!v14)
    {
      id v15 = objc_alloc_init((Class)NSMutableDictionary);
      long long v16 = *(void **)(IsLevelEnabled + 24);
      *(void *)(IsLevelEnabled + 24) = v15;

      long long v14 = *(void **)(IsLevelEnabled + 24);
    }
    uint64_t v17 = [v14 objectForKeyedSubscript:v13];
    unint64_t v18 = (void *)v17;
    if (!v17) {
      goto LABEL_12;
    }
    uint64_t v39 = v11;
    id v19 = v9;
    id v20 = *(id *)(v17 + 24);
    id v21 = a4;
    id v22 = a3;
    id v23 = v18;
    id v24 = v13;
    id v25 = [v20 identifier];
    id v26 = [v8 identifier];

    id v9 = v19;
    id v11 = v39;
    BOOL v27 = v25 == v26;
    id v13 = v24;
    unint64_t v18 = v23;
    a3 = v22;
    a4 = v21;
    if (v27)
    {
      int IsLevelEnabled = 1;
    }
    else
    {
LABEL_12:
      if (sub_100010B8C(IsLevelEnabled))
      {
        if (qword_1001F47F8 != -1) {
          dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F47F8 != -1) {
            dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
          }
          uint64_t v37 = 428;
          id v38 = v8;
          id v35 = "";
          id v36 = "-[NRIKEv2Listener registerLink:localInterfaceName:localEndpoint:]";
          _NRLogWithArgs();
        }
        id v28 = v9;
        id v29 = objc_alloc_init(NRIKEv2ListenerRegistration);
        p_isa = (id *)&v29->super.isa;
        if (v29)
        {
          objc_storeStrong((id *)&v29->_link, obj);
          objc_storeStrong(p_isa + 2, a4);
          objc_storeStrong(p_isa + 1, a3);
        }
        [*(id *)(IsLevelEnabled + 24) setObject:p_isa forKeyedSubscript:v13, v35, v36, v37, v38];
        sub_100010D64(IsLevelEnabled);
        sub_100011714(IsLevelEnabled, v13);

        int IsLevelEnabled = 1;
        id v9 = v28;
      }
      else
      {
        if (qword_1001F47F8 != -1) {
          dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F47F8 != -1) {
            dispatch_once(&qword_1001F47F8, &stru_1001C5F68);
          }
          _NRLogWithArgs();
        }
        int IsLevelEnabled = 0;
      }
    }

    goto LABEL_31;
  }
  int IsLevelEnabled = 0;
LABEL_32:

  return IsLevelEnabled;
}

void sub_10001205C(id a1)
{
  id v1 = [NRPairingClientManager alloc];
  id v4 = sub_10015BD9C();
  uint64_t v2 = sub_1000120C8(v1, v4);
  id v3 = (void *)qword_1001F4800;
  qword_1001F4800 = (uint64_t)v2;
}

void *sub_1000120C8(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)NRPairingClientManager;
    id v5 = [super init];
    if (!v5)
    {
      id v11 = sub_100012254();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v13 = sub_100012254();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136446210;
      *(void *)(v14 + 4) = "-[NRPairingClientManager initWithQueue:]";
      sub_100012254();
      _NRLogAbortWithPack();
    }
    a1 = v5;
    objc_storeStrong((id *)v5 + 1, a2);
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v7 = (void *)a1[2];
    a1[2] = v6;

    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    id v9 = (void *)a1[3];
    a1[3] = v8;
  }
  return a1;
}

id sub_100012254()
{
  if (qword_1001F4818 != -1) {
    dispatch_once(&qword_1001F4818, &stru_1001C5FA8);
  }
  v0 = (void *)qword_1001F4810;

  return v0;
}

void sub_1000122A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4810;
  qword_1001F4810 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000122EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    uint64_t v1 = *(void *)(v1 + 16);
  }
  return (*(uint64_t (**)(uint64_t, void, void))(v1 + 16))(v1, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void sub_1000129A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_1000129DC(uint64_t a1)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && !*((unsigned char *)WeakRetained + 9) && !*((unsigned char *)WeakRetained + 11) && !*((unsigned char *)WeakRetained + 12))
  {
    id v10 = WeakRetained;
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    uint64_t v2 = (id *)(id)qword_1001F4A18;
    id v3 = v2;
    if (v2)
    {
      uint64_t v4 = (id *)v2[6];
      id v5 = v4;
      if (v4) {
        [v4[33] removeObject:v10];
      }
    }
    else
    {
      id v5 = 0;
    }

    id v6 = (id *)v10;
    *((unsigned char *)v10 + 10) = 0;
    uint64_t v7 = v10[5];
    if (v7)
    {
      dispatch_source_cancel(v7);
      id v8 = v10[5];
      v10[5] = 0;

      id v6 = (id *)v10;
    }
    [v6[11] removeAllObjects];
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      _NRLogWithArgs();
    }
    sub_1000151B0((uint64_t)v10);
    if (!*((unsigned char *)v10 + 11) && !*((unsigned char *)v10 + 12)) {
      sub_1000153B8((uint64_t)v10);
    }
    id v9 = sub_10015BD9C();
    dispatch_async(v9, &stru_1001C6A58);

    id WeakRetained = v10;
  }
}

void sub_100012BB4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = [*(id *)(a1 + 56) activeDevices];

    if (v2)
    {
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      id v3 = [*(id *)(a1 + 56) activeDevices];
      id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4)
      {
        id v5 = v4;
        uint64_t v6 = *(void *)v9;
        do
        {
          for (i = 0; i != v5; i = (char *)i + 1)
          {
            if (*(void *)v9 != v6) {
              objc_enumerationMutation(v3);
            }
            sub_10001411C(a1, *(void **)(*((void *)&v8 + 1) + 8 * i));
          }
          id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
        }
        while (v5);
      }
    }
  }
}

void sub_100012CD8(uint64_t a1)
{
  uint64_t v1 = a1;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id obj = [*(id *)(a1 + 72) copy];
  id v2 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v40 = *(void *)v42;
    uint64_t v38 = v1;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v42 != v40) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v41 + 1) + 8 * i);
        if (v6) {
          uint64_t v7 = *(void **)(v6 + 8);
        }
        else {
          uint64_t v7 = 0;
        }
        long long v8 = [v7 objectForKeyedSubscript:@"relay-req"];
        if ([v8 count])
        {
          id v9 = objc_alloc_init((Class)NSMutableDictionary);
          [v9 setObject:&off_1001D4780 forKeyedSubscript:@"v"];
          [v9 setObject:&off_1001D4798 forKeyedSubscript:@"nrv"];
          long long v10 = [v8 objectForKeyedSubscript:@"rid"];
          [v9 setObject:v10 forKeyedSubscript:@"rid"];

          long long v11 = [v8 objectForKeyedSubscript:@"id"];
          id v12 = v11;
          if (v11)
          {
            id v13 = v11;
            if (nrSupportsPHSProxy() && *(unsigned char *)(v1 + 15) && *(unsigned char *)(v1 + 13))
            {
              uint64_t v14 = sub_100142D18((uint64_t)NRDLocalDevice, v13, 0);
              objc_super v15 = v14;
              if (v14) {
                long long v16 = (void *)*((void *)v14 + 16);
              }
              else {
                long long v16 = 0;
              }
              id v17 = v16;
              id v18 = [v17 proxyCapability];

              BOOL v19 = v18 == (id)2;
              uint64_t v1 = v38;
              if (!v19)
              {
                [v9 setObject:&off_1001D47C8 forKeyedSubscript:@"rspc"];
                if (qword_1001F4BF0 != -1) {
                  dispatch_once(&qword_1001F4BF0, &stru_1001C7D68);
                }
                id v20 = +[NSNumber numberWithUnsignedChar:byte_1001F4BE8];
                [v9 setObject:v20 forKeyedSubscript:@"t"];

                [v9 setObject:&off_1001D47E0 forKeyedSubscript:@"fl"];
                id v21 = [v8 objectForKeyedSubscript:@"reg"];
                id v22 = sub_100142D18((uint64_t)NRDLocalDevice, v13, 0);
                id v36 = v21;
                uint64_t v37 = v22;
                if ([v21 BOOLValue] && v22 && v22[8])
                {
                  [v9 setObject:&__kCFBooleanTrue forKeyedSubscript:@"reg"];
                }
                else
                {
                  [v9 setObject:&__kCFBooleanFalse forKeyedSubscript:@"reg"];
                  id v24 = v13;
                  id v25 = [*(id *)(v38 + 80) objectForKeyedSubscript:v24];

                  if (!v25)
                  {
                    memset(bytes, 0, sizeof(bytes));
                    while (SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, bytes))
                      ;
                    id v26 = +[NSData _newZeroingDataWithBytes:bytes length:32];
                    [*(id *)(v38 + 80) setObject:v26 forKeyedSubscript:v24];
                  }
                  BOOL v27 = [*(id *)(v38 + 80) objectForKeyedSubscript:v24];

                  [v9 setObject:v27 forKeyedSubscript:@"psk"];
                  if (v37 && v37[8])
                  {
                    if (qword_1001F4828 != -1) {
                      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
                    }
                    if (_NRLogIsLevelEnabled())
                    {
                      if (qword_1001F4828 != -1) {
                        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
                      }
                      uint64_t v34 = 568;
                      id v35 = v37;
                      id v32 = "";
                      id v33 = "-[NROnDemandLinkSetupManager sendReplyForInternetRelayRequest]";
                      _NRLogWithArgs();
                    }
                    id v28 = *((id *)v37 + 4);
                    sub_100144F64((uint64_t)NRDLocalDevice, v28, &stru_1001C60D8);
                  }
                }
                id v29 = [NRValidPeer alloc];
                id v30 = [v8 objectForKeyedSubscript:@"nrv"];
                uint64_t v31 = sub_100013458((id *)&v29->super.isa, v30);
                uint64_t v1 = v38;
                [*(id *)(v38 + 88) setObject:v31 forKeyedSubscript:v13];

LABEL_34:
                CFStringRef v45 = @"relay-res";
                id v46 = v9;
                id v23 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1, v32, v33, v34);
                if (v6) {
                  uint64_t v5 = *(void *)(v6 + 24);
                }
                else {
                  uint64_t v5 = 0;
                }
                (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v23);
                [*(id *)(v1 + 72) removeObject:v6];

                goto LABEL_7;
              }
            }
            else
            {
            }
          }
          if (qword_1001F4828 != -1) {
            dispatch_once(&qword_1001F4828, &stru_1001C61C8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4828 != -1) {
              dispatch_once(&qword_1001F4828, &stru_1001C61C8);
            }
            uint64_t v34 = 553;
            id v35 = (char *)v12;
            id v32 = "";
            id v33 = "-[NROnDemandLinkSetupManager sendReplyForInternetRelayRequest]";
            _NRLogWithArgs();
          }
          [v9 setObject:&off_1001D47B0 forKeyedSubscript:@"rspc" v32, v33, v34, v35];
          goto LABEL_34;
        }
LABEL_7:
      }
      id v3 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
    }
    while (v3);
  }

  if ([*(id *)(v1 + 88) count])
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      _NRLogWithArgs();
    }
    sub_1000135B8(v1);
  }
  else
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      _NRLogWithArgs();
    }
  }
}

id *sub_100013458(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)NRValidPeer;
    uint64_t v5 = (id *)[super init];
    if (!v5)
    {
      id v7 = sub_1000140C4();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v9 = sub_1000140C4();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 136446210;
      *(void *)(v10 + 4) = "-[NRValidPeer initWithInnerLinkVersion:]";
      sub_1000140C4();
      _NRLogAbortWithPack();
    }
    a1 = v5;
    objc_storeStrong(v5 + 1, a2);
  }

  return a1;
}

void sub_1000135B8(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)a1;
  if ([*(id *)(a1 + 88) count])
  {
    id v2 = *((void *)v1 + 5);
    if (v2)
    {
      dispatch_source_cancel(v2);
      id v3 = (void *)*((void *)v1 + 5);
      *((void *)v1 + 5) = 0;
    }
  }
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id obj = *((id *)v1 + 11);
  id v56 = [obj countByEnumeratingWithState:&v64 objects:v69 count:16];
  if (v56)
  {
    uint64_t v4 = 0x1001F3000;
    uint64_t v55 = *(void *)v65;
    uint64_t v57 = v1;
    do
    {
      for (i = 0; i != v56; i = (char *)i + 1)
      {
        if (*(void *)v65 != v55) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v64 + 1) + 8 * i);
        id v7 = *((id *)v1 + 11);
        uint64_t v8 = [v7 objectForKeyedSubscript:v6];
        id v9 = (void *)v8;
        if (v8) {
          uint64_t v10 = *(void **)(v8 + 8);
        }
        else {
          uint64_t v10 = 0;
        }
        id v11 = v10;

        if (v11) {
          unsigned int v12 = [v11 unsignedShortValue];
        }
        else {
          unsigned int v12 = 0;
        }
        unsigned int v59 = v12;
        id v13 = sub_100142D18(v4 + 2984, v6, 0);
        id v58 = v11;
        if (v13)
        {
          uint64_t v14 = v13;
          if (qword_1001F4828 != -1) {
            dispatch_once(&qword_1001F4828, &stru_1001C61C8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4828 != -1) {
              dispatch_once(&qword_1001F4828, &stru_1001C61C8);
            }
            uint64_t v51 = 816;
            id v53 = v14;
            uint64_t v47 = "";
            id v49 = "-[NROnDemandLinkSetupManager activateValidPHSPeers]";
LABEL_31:
            _NRLogWithArgs();
          }
        }
        else
        {
          id v15 = v6;
          uint64_t v16 = self;
          uint64_t v14 = sub_100142D18(v16, v15, 1);

          if (qword_1001F4828 != -1) {
            dispatch_once(&qword_1001F4828, &stru_1001C61C8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4828 != -1) {
              dispatch_once(&qword_1001F4828, &stru_1001C61C8);
            }
            uint64_t v51 = 819;
            id v53 = v14;
            uint64_t v47 = "";
            id v49 = "-[NROnDemandLinkSetupManager activateValidPHSPeers]";
            goto LABEL_31;
          }
        }
        id v17 = objc_alloc_init((Class)NSMutableArray);
        id v18 = objc_alloc_init((Class)NSMutableArray);
        if (v1[13]) {
          [v17 addObject:&off_1001D4810];
        }
        if (v1[14])
        {
          [v17 addObject:&off_1001D4828];
          [v18 addObject:&off_1001D4840];
          [v18 addObject:&off_1001D4858];
        }
        if (!v14)
        {
          id v28 = 0;
          id v30 = 0;
LABEL_72:
          uint64_t v34 = v28;
          id v28 = objc_alloc_init((Class)NRDeviceOperationalProperties);

          id v35 = *((id *)v1 + 10);
          if (v14) {
            id v36 = (void *)*((void *)v14 + 6);
          }
          else {
            id v36 = 0;
          }
          id v37 = v36;
          uint64_t v38 = [v35 objectForKeyedSubscript:v37];

          if (v1[13])
          {
            uint64_t v39 = 1;
            p_cache = (void **)(&OBJC_METACLASS___NRDiscoveryManager + 16);
            goto LABEL_78;
          }
          int v40 = v1[14];
          p_cache = &OBJC_METACLASS___NRDiscoveryManager.cache;
          if (v40)
          {
            uint64_t v39 = 2;
LABEL_78:
            [v28 setProxyCapability:v39, v47, v49, v51];
          }
          [v28 setAllowedLinkTypes:v17, v47, v49, v51];
          [v28 setAllowedLinkSubtypes:v18];
          [v28 setUsesTLS:1];
          id v30 = (void *)v38;
          if (!v38)
          {
LABEL_80:
            uint64_t v4 = (uint64_t)p_cache;
            if (qword_1001F4828 != -1) {
              dispatch_once(&qword_1001F4828, &stru_1001C61C8);
            }
            uint64_t v1 = v57;
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4828 != -1) {
                dispatch_once(&qword_1001F4828, &stru_1001C61C8);
              }
              uint64_t v51 = 884;
              uint64_t v47 = "";
              id v49 = "-[NROnDemandLinkSetupManager activateValidPHSPeers]";
              _NRLogWithArgs();
            }
            goto LABEL_9;
          }
LABEL_68:
          uint64_t v4 = (uint64_t)p_cache;
          uint64_t v1 = v57;
          if (objc_msgSend(v28, "proxyCapability", v47, v49, v51) == (id)1)
          {
            if (v57[15]) {
              id v33 = +[NRDeviceProxyProviderCriteria copyCriteriaForCellularSlicing];
            }
            else {
              id v33 = objc_alloc_init((Class)NRDeviceProxyProviderCriteria);
            }
            long long v41 = v33;
            [v28 setProxyProviderCriteria:v33];
          }
          if (_os_feature_enabled_impl())
          {
            if (qword_1001F4828 != -1) {
              dispatch_once(&qword_1001F4828, &stru_1001C61C8);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4828 != -1) {
                dispatch_once(&qword_1001F4828, &stru_1001C61C8);
              }
              _NRLogWithArgs();
              [v28 setAllowedPeerDeviceType:255, "", "-[NROnDemandLinkSetupManager activateValidPHSPeers]", 898];
              goto LABEL_100;
            }
            uint64_t v42 = 255;
LABEL_99:
            [v28 setAllowedPeerDeviceType:v42, v48, v50, v52];
          }
          else
          {
            if (v57[13])
            {
              uint64_t v42 = 6;
              goto LABEL_99;
            }
            if (v57[14])
            {
              uint64_t v42 = 1;
              goto LABEL_99;
            }
          }
LABEL_100:
          [v28 setAllowsDeviceDiscovery:1];
          [v28 setAllowsDeadPeerDetection:1];
          if (v14) {
            long long v43 = (void *)*((void *)v14 + 16);
          }
          else {
            long long v43 = 0;
          }
          id v44 = v43;
          [v28 setOperationalScope:(objc_msgSend(v44, "operationalScope") | objc_msgSend(v28, "operationalScope") | 1)];

          [v28 setActiveOperationalScope:((unint64_t)[v28 activeOperationalScope] | 1)];
          sub_100117DF0(v28);
          if (qword_1001F4828 != -1) {
            dispatch_once(&qword_1001F4828, &stru_1001C61C8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4828 != -1) {
              dispatch_once(&qword_1001F4828, &stru_1001C61C8);
            }
            _NRLogWithArgs();
          }
          if (v14) {
            CFStringRef v45 = (void *)*((void *)v14 + 4);
          }
          else {
            CFStringRef v45 = 0;
          }
          id v46 = v45;
          sub_10014314C(v4 + 2984, v46, 0, v59, 0, v30, 0, 0, 0, v28, 0, @"relay-req", &stru_1001C6168);

LABEL_9:
          goto LABEL_10;
        }
        if (!v14[8] || (id v19 = *((id *)v14 + 16), v19, !v19))
        {
LABEL_62:
          id v28 = *((id *)v14 + 16);
          id v29 = (void *)*((void *)v14 + 19);
          if (v29) {
            id v29 = (void *)v29[2];
          }
          id v30 = v29;
          if (!v14[8])
          {
            uint64_t v1 = v57;
            goto LABEL_72;
          }
          p_cache = (void **)v4;
          if (v59)
          {
            id v32 = *((id *)v14 + 4);
            sub_100149D9C(v4 + 2984, (char *)v59, v32);
          }
          if (!v30) {
            goto LABEL_80;
          }
          goto LABEL_68;
        }
        if (v1[14]
          && (id v20 = *((id *)v14 + 16),
              id v21 = [v20 proxyCapability],
              v20,
              v21 == (id)1))
        {
          if (qword_1001F4828 != -1) {
            dispatch_once(&qword_1001F4828, &stru_1001C61C8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4828 != -1) {
              dispatch_once(&qword_1001F4828, &stru_1001C61C8);
            }
            uint64_t v51 = 840;
            uint64_t v47 = "";
            id v49 = "-[NROnDemandLinkSetupManager activateValidPHSPeers]";
            _NRLogWithArgs();
          }
        }
        else
        {
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          id v22 = *((id *)v14 + 16);
          id v23 = [v22 allowedLinkTypes];

          id v24 = [v23 countByEnumeratingWithState:&v60 objects:v68 count:16];
          if (v24)
          {
            id v25 = v24;
            uint64_t v26 = *(void *)v61;
            while (2)
            {
              for (j = 0; j != v25; j = (char *)j + 1)
              {
                if (*(void *)v61 != v26) {
                  objc_enumerationMutation(v23);
                }
                if (objc_msgSend(v17, "containsObject:", *(void *)(*((void *)&v60 + 1) + 8 * (void)j), v47, v49, v51, v53))
                {

                  goto LABEL_62;
                }
              }
              id v25 = [v23 countByEnumeratingWithState:&v60 objects:v68 count:16];
              if (v25) {
                continue;
              }
              break;
            }
          }

          if (qword_1001F4828 != -1) {
            dispatch_once(&qword_1001F4828, &stru_1001C61C8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4828 != -1) {
              dispatch_once(&qword_1001F4828, &stru_1001C61C8);
            }
            uint64_t v51 = 852;
            uint64_t v47 = "";
            id v49 = "-[NROnDemandLinkSetupManager activateValidPHSPeers]";
            _NRLogWithArgs();
          }
        }
LABEL_10:
      }
      id v56 = [obj countByEnumeratingWithState:&v64 objects:v69 count:16];
    }
    while (v56);
  }
}

void sub_100013FE0(id a1, int64_t a2, NSString *a3)
{
  id v3 = a3;
  if (qword_1001F4828 != -1) {
    dispatch_once(&qword_1001F4828, &stru_1001C61C8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    _NRLogWithArgs();
  }
}

id sub_1000140C4()
{
  if (qword_1001F4828 != -1) {
    dispatch_once(&qword_1001F4828, &stru_1001C61C8);
  }
  v0 = (void *)qword_1001F4820;

  return v0;
}

void sub_10001411C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && (*(unsigned char *)(a1 + 11) || *(unsigned char *)(a1 + 12)))
  {
    if (*(unsigned char *)(a1 + 14))
    {
      id v31 = v3;
      uint64_t v4 = [v3 model];
      id v3 = v31;
      if (!v4
        || ([v31 model],
            uint64_t v5 = objc_claimAutoreleasedReturnValue(),
            unsigned int v6 = [v5 localizedCaseInsensitiveContainsString:@"phone"],
            v5,
            v4,
            id v3 = v31,
            v6))
      {
        id v7 = v3;
        ++*(_DWORD *)(a1 + 24);
        uint64_t v8 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
        id v9 = objc_alloc_init((Class)NSMutableDictionary);
        [v9 setObject:&off_1001D4780 forKeyedSubscript:@"v"];
        [v9 setObject:&off_1001D4798 forKeyedSubscript:@"nrv"];
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        uint64_t v10 = (id)qword_1001F4A18;
        id v11 = sub_1000B92A4(v10, 0);
        [v9 setObject:v11 forKeyedSubscript:@"id"];

        unsigned int v12 = [v7 idsDeviceIdentifier];

        if (v12)
        {
          id v13 = [v7 idsDeviceIdentifier];
          uint64_t v14 = sub_100142D18((uint64_t)NRDLocalDevice, v13, 0);

          if (v14) {
            BOOL v15 = v14[8] != 0;
          }
          else {
            BOOL v15 = 0;
          }
          uint64_t v16 = +[NSNumber numberWithBool:v15];
          [v9 setObject:v16 forKeyedSubscript:@"reg"];
        }
        [v9 setObject:&off_1001D47F8 forKeyedSubscript:@"r"];
        [v9 setObject:v8 forKeyedSubscript:@"rid"];
        if (qword_1001F4BF0 != -1) {
          dispatch_once(&qword_1001F4BF0, &stru_1001C7D68);
        }
        id v17 = +[NSNumber numberWithUnsignedChar:byte_1001F4BE8];
        [v9 setObject:v17 forKeyedSubscript:@"t"];

        [v9 setObject:&off_1001D47E0 forKeyedSubscript:@"fl"];
        CFStringRef v40 = @"relay-req";
        id v41 = v9;
        id v18 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
        id v19 = objc_alloc_init((Class)RPCompanionLinkClient);
        [v19 setDispatchQueue:*(void *)(a1 + 32)];
        [v19 setServiceType:@"com.apple.networkrelay.on-demand-setup"];
        [v19 setControlFlags:4];
        [v19 setDestinationDevice:v7];
        objc_initWeak(&location, (id)a1);
        id v20 = *(id *)(a1 + 56);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_1000145D8;
        v32[3] = &unk_1001C6128;
        objc_copyWeak(&v38, &location);
        id v21 = v20;
        id v33 = v21;
        id v22 = v7;
        id v34 = v22;
        id v23 = v8;
        id v35 = v23;
        id v24 = v19;
        id v36 = v24;
        id v25 = v18;
        id v37 = v25;
        [v24 activateWithCompletion:v32];
        uint64_t v26 = *(void **)(a1 + 64);
        if (!v26)
        {
          id v27 = objc_alloc_init((Class)NSMutableDictionary);
          id v29 = *(void **)(a1 + 64);
          id v28 = (void **)(a1 + 64);
          *id v28 = v27;

          uint64_t v26 = *v28;
        }
        id v30 = v26;
        [v30 setObject:v24 forKeyedSubscript:v23];

        objc_destroyWeak(&v38);
        objc_destroyWeak(&location);

        id v3 = v31;
      }
    }
  }
}

void sub_1000145B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000145D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v5 = WeakRetained;
  if (WeakRetained
    && !*((unsigned char *)WeakRetained + 9)
    && WeakRetained[7] == *(id *)(a1 + 32)
    && *((unsigned char *)WeakRetained + 16))
  {
    if (v3)
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4828 != -1) {
          dispatch_once(&qword_1001F4828, &stru_1001C61C8);
        }
        id v12 = v3;
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v11 = 657;
        id v9 = "";
        uint64_t v10 = "-[NROnDemandLinkSetupManager requestInternetRelayFromPeer:]_block_invoke";
        _NRLogWithArgs();
      }
      unsigned int v6 = [v5[8] objectForKeyedSubscript:*(void *)(a1 + 48), v9, v10, v11, v12, v13];
      [v6 invalidate];

      [v5[8] setObject:0 forKeyedSubscript:*(void *)(a1 + 48)];
    }
    else
    {
      id v7 = *(void **)(a1 + 56);
      uint64_t v8 = *(void *)(a1 + 64);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100014810;
      v14[3] = &unk_1001C6100;
      objc_copyWeak(&v20, (id *)(a1 + 72));
      id v15 = *(id *)(a1 + 32);
      id v16 = 0;
      id v17 = *(id *)(a1 + 40);
      id v18 = v5;
      id v19 = *(id *)(a1 + 48);
      [v7 sendRequestID:@"com.apple.networkrelay.on-demand-setup" request:v8 options:0 responseHandler:v14];

      objc_destroyWeak(&v20);
    }
  }
}

void sub_1000147FC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100014810(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v45 = a2;
  id v7 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 72));
  id v9 = WeakRetained;
  if (!WeakRetained
    || *((unsigned char *)WeakRetained + 9)
    || WeakRetained[7] != *(id *)(a1 + 32)
    || !*((unsigned char *)WeakRetained + 16))
  {
    goto LABEL_4;
  }
  if (!a4)
  {
    id v15 = *(id *)(a1 + 48);
    id v16 = v45;
    id v17 = v7;
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      id v18 = (id)qword_1001F4820;
      CFStringRef v40 = [v16 allKeys];
      id v41 = v15;
      uint64_t v39 = 690;
      id v37 = "";
      id v38 = "-[NROnDemandLinkSetupManager processInternetRelayResponseFromPeer:response:options:]";
      _NRLogWithArgs();
    }
    id v19 = [v16 objectForKeyedSubscript:@"relay-res" v37, v38, v39, v40, v41];
    if (![v19 count]) {
      goto LABEL_53;
    }
    id v20 = [v19 objectForKeyedSubscript:@"rspc"];
    if ([v20 unsignedShortValue] != 1)
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4828 != -1) {
          dispatch_once(&qword_1001F4828, &stru_1001C61C8);
        }
        _NRLogWithArgs();
      }
      goto LABEL_52;
    }
    id v43 = v17;
    id v44 = v20;
    id v21 = [v19 objectForKeyedSubscript:@"reg"];
    id v22 = [v15 idsDeviceIdentifier];
    id v23 = sub_100142D18((uint64_t)NRDLocalDevice, v22, 0);

    uint64_t v42 = v21;
    if ([v21 BOOLValue])
    {
      if (!v23) {
        goto LABEL_41;
      }
      if (v23[8]) {
        goto LABEL_43;
      }
    }
    else
    {
      if (!v23) {
        goto LABEL_41;
      }
      if (v23[8])
      {
LABEL_40:
        id v24 = *((id *)v23 + 4);
        sub_100144F64((uint64_t)NRDLocalDevice, v24, &stru_1001C6148);

        goto LABEL_41;
      }
    }
    if (v23[9]) {
      goto LABEL_40;
    }
LABEL_41:
    uint64_t v25 = [v19 objectForKeyedSubscript:@"psk"];
    if (!v25)
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      id v36 = v42;
      id v17 = v43;
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4828 != -1) {
          dispatch_once(&qword_1001F4828, &stru_1001C61C8);
        }
        _NRLogWithArgs();
      }
      goto LABEL_44;
    }
    uint64_t v26 = (void *)v25;
    id v27 = v9[10];
    id v28 = [v15 idsDeviceIdentifier];
    [v27 setObject:v26 forKeyedSubscript:v28];

LABEL_43:
    id v29 = [v19 objectForKeyedSubscript:@"rid"];
    id v30 = [v9[8] objectForKeyedSubscript:v29];
    [v30 invalidate];

    [v9[8] setObject:0 forKeyedSubscript:v29];
    id v31 = [NRValidPeer alloc];
    id v32 = [v19 objectForKeyedSubscript:@"nrv"];
    id v33 = sub_100013458((id *)&v31->super.isa, v32);

    id v34 = v9[11];
    id v35 = [v15 idsDeviceIdentifier];
    [v34 setObject:v33 forKeyedSubscript:v35];

    sub_1000135B8((uint64_t)v9);
    id v36 = v42;
    id v17 = v43;
LABEL_44:

    id v20 = v44;
LABEL_52:

LABEL_53:
    goto LABEL_4;
  }
  if (qword_1001F4828 != -1) {
    dispatch_once(&qword_1001F4828, &stru_1001C61C8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    CFStringRef v40 = *(void **)(a1 + 40);
    id v41 = *(id *)(a1 + 48);
    uint64_t v39 = 674;
    id v37 = "";
    id v38 = "-[NROnDemandLinkSetupManager requestInternetRelayFromPeer:]_block_invoke_2";
    _NRLogWithArgs();
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10) {
    uint64_t v11 = *(void **)(v10 + 64);
  }
  else {
    uint64_t v11 = 0;
  }
  id v12 = [v11 objectForKeyedSubscript:*(void *)(a1 + 64), v37, v38, v39, v40, v41];
  [v12 invalidate];

  uint64_t v13 = *(void *)(a1 + 56);
  if (v13) {
    uint64_t v14 = *(void **)(v13 + 64);
  }
  else {
    uint64_t v14 = 0;
  }
  [v14 setObject:0 forKeyedSubscript:*(void *)(a1 + 64)];
LABEL_4:
}

void sub_100014E04(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = WeakRetained;
  if (WeakRetained && *((void *)WeakRetained + 7) == *(void *)(a1 + 32))
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      _NRLogWithArgs();
    }
    sub_10001411C(*(void *)(a1 + 40), v5);
  }
}

void sub_100014F14(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = WeakRetained;
  if (WeakRetained && *((void *)WeakRetained + 7) == *(void *)(a1 + 32))
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100015018(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = (uint64_t)WeakRetained;
  if (WeakRetained && WeakRetained[7] == *(void *)(a1 + 32))
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      _NRLogWithArgs();
    }
    if (v5)
    {
      [*(id *)(v4 + 56) invalidate];
    }
    else
    {
      *(unsigned char *)(v4 + 16) = 1;
      sub_100012BB4(v4);
    }
  }
}

void sub_100015140(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && !*((unsigned char *)WeakRetained + 9) && *((void *)WeakRetained + 5) == *(void *)(a1 + 32))
  {
    id v3 = WeakRetained;
    [WeakRetained didUpdatePHSState:0 llphsActive:0];
    id WeakRetained = v3;
  }
}

void sub_1000151B0(uint64_t a1)
{
  if (a1)
  {
    id v1 = sub_1000154E0(a1);
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      _NRLogWithArgs();
    }
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v2 = v1;
    id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v12;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(void *)v12 != v5) {
            objc_enumerationMutation(v2);
          }
          uint64_t v8 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(*((void *)&v11 + 1) + 8 * i));
          id v9 = v8;
          if (!v8)
          {
            id v7 = 0;
LABEL_13:
            sub_100144F64((uint64_t)NRDLocalDevice, v7, &stru_1001C61A8);
            goto LABEL_14;
          }
          int v10 = *((unsigned __int8 *)v8 + 8);
          id v7 = v8[4];
          if (!v10) {
            goto LABEL_13;
          }
          sub_1001453D0((uint64_t)NRDLocalDevice, v7, &stru_1001C6188);
LABEL_14:
        }
        id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v4);
    }
  }
}

void sub_1000153B8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  if (v2)
  {
    [v2 invalidate];
    id v3 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;

    *(unsigned char *)(a1 + 16) = 0;
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = [*(id *)(a1 + 64) allValues];
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*((void *)&v10 + 1) + 8 * (void)v8) invalidate];
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }

  id v9 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = 0;
}

id sub_1000154E0(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v22 = objc_alloc_init((Class)NSMutableArray);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v2 = sub_100145898();
  id v3 = [v2 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v24;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v24 != v5) {
          objc_enumerationMutation(v2);
        }
        long long v10 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(*((void *)&v23 + 1) + 8 * i));
        long long v11 = v10;
        if (v10)
        {
          id v12 = v10[16];
          if (v12)
          {
            long long v13 = v12;
            id v14 = v11[16];
            id v15 = [v14 operationalScope];

            if (v15)
            {
              id v16 = v11[16];
              unint64_t v17 = (unint64_t)[v16 activeOperationalScope];

              id v18 = v11[16];
              unsigned __int8 v19 = [v18 operationalScope];

              if ((v19 & 1) != 0 && !*(unsigned char *)(a1 + 11) && !*(unsigned char *)(a1 + 12)) {
                v17 &= ~1uLL;
              }
              id v7 = v11[16];
              [v7 setActiveOperationalScope:v17];

              id v8 = v11[16];
              id v9 = [v8 activeOperationalScope];

              if (!v9)
              {
                id v20 = v11[4];
                [v22 addObject:v20];
              }
            }
          }
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v4);
  }

  return v22;
}

void sub_1000156F8(id a1, int64_t a2, NSString *a3)
{
  id v3 = a3;
  if (qword_1001F4828 != -1) {
    dispatch_once(&qword_1001F4828, &stru_1001C61C8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    _NRLogWithArgs();
  }
}

void sub_1000157DC(id a1, int64_t a2, NSString *a3)
{
  id v3 = a3;
  if (qword_1001F4828 != -1) {
    dispatch_once(&qword_1001F4828, &stru_1001C61C8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    _NRLogWithArgs();
  }
}

void sub_1000158C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4820;
  qword_1001F4820 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id *sub_100015904(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)NROnDemandLinkSetupManager;
    uint64_t v5 = (id *)[super init];
    if (!v5)
    {
      id v13 = sub_1000140C4();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v15 = sub_1000140C4();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 136446210;
      *(void *)(v16 + 4) = "-[NROnDemandLinkSetupManager initWithQueue:]";
      sub_1000140C4();
      _NRLogAbortWithPack();
    }
    a1 = v5;
    objc_storeStrong(v5 + 4, a2);
    id v6 = objc_alloc_init((Class)NSMutableArray);
    id v7 = a1[9];
    a1[9] = v6;

    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    id v9 = a1[10];
    a1[10] = v8;

    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    id v11 = a1[11];
    a1[11] = v10;

    *((_DWORD *)a1 + 5) = -1;
  }

  return a1;
}

void sub_100015AB0(uint64_t a1)
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  uint64_t v2 = (id)qword_1001F4A18;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100015BA8;
  v3[3] = &unk_1001C5FF0;
  objc_copyWeak(&v4, (id *)(a1 + 32));

  objc_destroyWeak(&v4);
}

void sub_100015B94(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100015BA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v4 = (id)qword_1001F4DD8;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100015CA8;
  v5[3] = &unk_1001C7FF0;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  sub_10015969C((uint64_t)v4, v5);

  objc_destroyWeak(&v6);
}

void sub_100015C94(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100015CA8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained && !*((unsigned char *)WeakRetained + 9))
  {
    id val = WeakRetained;
    if (!*((void *)WeakRetained + 6))
    {
      id v3 = objc_alloc_init((Class)RPCompanionLinkClient);
      [v3 setDispatchQueue:*((void *)val + 4)];
      objc_initWeak(&location, val);
      handler = _NSConcreteStackBlock;
      uint64_t v28 = 3221225472;
      id v29 = sub_100016B50;
      id v30 = &unk_1001C6040;
      objc_copyWeak(&v32, &location);
      id v4 = v3;
      id v31 = v4;
      [v4 registerRequestID:@"com.apple.networkrelay.on-demand-setup" options:0 handler:&handler];
      id v21 = _NSConcreteStackBlock;
      uint64_t v22 = 3221225472;
      long long v23 = sub_100016FDC;
      long long v24 = &unk_1001C88B8;
      objc_copyWeak(&v26, &location);
      id v5 = v4;
      id v25 = v5;
      [v5 setInterruptionHandler:&v21];
      from[0] = _NSConcreteStackBlock;
      from[1] = (id)3221225472;
      id from[2] = sub_1000170D0;
      from[3] = &unk_1001C88B8;
      objc_copyWeak(&v20, &location);
      id v6 = v5;
      id v19 = v6;
      [v6 setInvalidationHandler:from];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1000171C4;
      v15[3] = &unk_1001C7AC8;
      objc_copyWeak(&v17, &location);
      id v7 = v6;
      id v16 = v7;
      [v7 activateWithCompletion:v15];
      id v8 = (void *)*((void *)val + 6);
      *((void *)val + 6) = v7;
      id v9 = v7;

      objc_destroyWeak(&v17);
      objc_destroyWeak(&v20);

      objc_destroyWeak(&v26);
      objc_destroyWeak(&v32);
      objc_destroyWeak(&location);
      uint64_t v2 = val;
    }
    objc_initWeak(from, v2);
    id v10 = *((id *)val + 4);
    handler = _NSConcreteStackBlock;
    uint64_t v28 = 3221225472;
    id v29 = sub_1000160EC;
    id v30 = &unk_1001C60B8;
    objc_copyWeak(&v31, from);
    xpc_set_event_stream_handler("com.apple.notifyd.matching", v10, &handler);

    id v11 = *((id *)val + 4);
    id v21 = _NSConcreteStackBlock;
    uint64_t v22 = 3221225472;
    long long v23 = sub_100016190;
    long long v24 = &unk_1001C60B8;
    objc_copyWeak(&v25, from);
    xpc_set_event_stream_handler("com.apple.rapport.matching", v11, &v21);

    objc_destroyWeak(&v25);
    objc_destroyWeak(&v31);
    objc_destroyWeak(from);
    dispatch_time_t v12 = dispatch_time(0, 1000000000);
    dispatch_after(v12, *((dispatch_queue_t *)val + 4), &stru_1001C5FC8);
    uint64_t v2 = val;
  }

  return _objc_release_x1(WeakRetained, v2);
}

void sub_10001606C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id v21 = v19;
  objc_destroyWeak(v21);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v20 - 88));
  _Unwind_Resume(a1);
}

void sub_1000160E0(id a1)
{
}

void sub_1000160EC(uint64_t a1, void *a2)
{
  xpc_object_t xdict = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    if (!WeakRetained[9])
    {
      string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
      sub_100016434((uint64_t)string, v6, @"notify(%s)", v7, v8, v9, v10, v11, (uint64_t)string);
      if (!strcmp(string, "com.apple.networkrelay.launch.phs")) {
        sub_1000164A8(v4);
      }
    }
  }
}

void sub_100016190(uint64_t a1, void *a2)
{
  id v24 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    if (!*((unsigned char *)WeakRetained + 9))
    {
      string = xpc_dictionary_get_string(v24, _xpc_event_key_name);
      sub_100016434((uint64_t)string, v6, @"rapport(%s)", v7, v8, v9, v10, v11, (uint64_t)string);
      if (xpc_dictionary_get_BOOL(v24, "replyRequired"))
      {
        id v12 = v24;
        if (v12)
        {
          id v13 = v12;
          xpc_object_t reply = xpc_dictionary_create_reply(v12);
          if (reply)
          {
            id v15 = reply;

            xpc_dictionary_send_reply();
            goto LABEL_7;
          }
          id v19 = sub_1000140C4();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v21 = sub_1000140C4();
            _NRLogWithArgs();
          }
        }
        else
        {
          id v16 = sub_1000140C4();
          int v17 = _NRLogIsLevelEnabled();

          if (v17)
          {
            id v18 = sub_1000140C4();
            _NRLogWithArgs();
          }
        }
        uint64_t v22 = _os_log_pack_size();
        __chkstk_darwin(v22);
        __error();
        uint64_t v23 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v23 = 136446210;
        *(void *)(v23 + 4) = "nr_xpc_dictionary_create_reply";
        sub_1000140C4();
        _NRLogAbortWithPack();
      }
    }
  }
LABEL_7:
}

void sub_100016434(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v9 = a3;
  id v10 = [objc_alloc((Class)NSString) initWithFormat:v9 arguments:&a9];

  sub_10012F648(0, 30101, &stru_1001C9648, v10);
}

void sub_1000164A8(unsigned char *a1)
{
  if (!a1) {
    return;
  }
  if (nrSupportsPHSProxy())
  {
    self;
    if (qword_1001F4DE0 != -1) {
      dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
    }
    id v2 = (id)qword_1001F4DD8;
    if (v2)
    {
      id v3 = v2;
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v2 + 2));
      if (!v3[10])
      {
        v3[10] = 1;
        if (v3[8] == 4)
        {
          sub_100158FD0((uint64_t)v3);
          if (v3[9])
          {
            v3[8] = 3;
            sub_100159248((uint64_t)v3);
          }
        }
      }
      int v4 = v3[8] & 0xFD;

      if (v4 == 1)
      {
        if (!a1[10])
        {
          if (qword_1001F4828 != -1) {
            dispatch_once(&qword_1001F4828, &stru_1001C61C8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4828 != -1) {
              dispatch_once(&qword_1001F4828, &stru_1001C61C8);
            }
            uint64_t v32 = 426;
            id v30 = "";
            id v31 = "-[NROnDemandLinkSetupManager handleLaunchEventForPHS]";
            _NRLogWithArgs();
          }
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v5 = (id)qword_1001F4A18;
          uint64_t v6 = v5;
          if (v5) {
            uint64_t v7 = (void *)*((void *)v5 + 6);
          }
          else {
            uint64_t v7 = 0;
          }
          id v8 = v7;
          id v9 = a1;
          if (v8)
          {
            id v10 = (void *)*((void *)v8 + 33);
            if (!v10)
            {
              id v11 = objc_alloc_init((Class)NSMutableSet);
              id v12 = (void *)*((void *)v8 + 33);
              *((void *)v8 + 33) = v11;

              id v10 = (void *)*((void *)v8 + 33);
            }
            [v10 addObject:v9, v30, v31, v32];
            id v13 = sub_10015BD9C();
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100157BF8;
            block[3] = &unk_1001C8840;
            id v34 = v9;
            id v35 = v8;
            dispatch_async(v13, block);

            uint64_t v39 = 0;
            CFStringRef v40 = &v39;
            uint64_t v41 = 0x3032000000;
            uint64_t v42 = sub_100151DC4;
            id v43 = sub_100151DD4;
            id v44 = 0;
            id v14 = *((id *)v8 + 22);
            v36[0] = _NSConcreteStackBlock;
            v36[1] = 3221225472;
            v36[2] = sub_100157C40;
            v36[3] = &unk_1001C8908;
            id v15 = v14;
            id v37 = v15;
            id v38 = &v39;
            if (sub_100151CF0((uint64_t)NRLinkManagerWiFi, v36))
            {
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              id v27 = (id)qword_1001F4DB8;
              char IsLevelEnabled = _NRLogIsLevelEnabled();

              if (IsLevelEnabled)
              {
                if (qword_1001F4DC0 != -1) {
                  dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                }
                id v29 = (id)qword_1001F4DB8;
                _NRLogWithArgs();
              }
            }
            else
            {
              if (!v40[5])
              {
                v40[5] = @"ir0";
                if (qword_1001F4DC0 != -1) {
                  dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                }
                id v16 = (id)qword_1001F4DB8;
                int v17 = _NRLogIsLevelEnabled();

                if (v17)
                {
                  if (qword_1001F4DC0 != -1) {
                    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                  }
                  id v18 = (id)qword_1001F4DB8;
                  _NRLogWithArgs();
                }
              }
              id v19 = *((id *)v8 + 16);
              if (!v19) {
                goto LABEL_37;
              }
              uint64_t v20 = v19;
              id v21 = (void *)*((void *)v8 + 16);
              if (v21) {
                id v21 = (void *)v21[3];
              }
              uint64_t v22 = v21;
              unsigned __int8 v23 = [v22 isEqualToString:v40[5]];

              if ((v23 & 1) == 0)
              {
LABEL_37:
                id v24 = [NRSCDInterfaceConfig alloc];
                id v25 = sub_10002100C((id *)&v24->super.isa, (void *)v40[5], 0);
                id v26 = (void *)*((void *)v8 + 16);
                *((void *)v8 + 16) = v25;

                if (*((void *)v8 + 16)) {
                  sub_100151ECC((uint64_t)v8);
                }
              }
            }

            _Block_object_dispose(&v39, 8);
          }

          a1[10] = 1;
        }
        return;
      }
    }
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 == -1) {
        goto LABEL_56;
      }
      goto LABEL_45;
    }
  }
  else
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 == -1)
      {
LABEL_56:
        _NRLogWithArgs();
        return;
      }
LABEL_45:
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      goto LABEL_56;
    }
  }
}

void sub_100016B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100016B50(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v12 = (uint64_t)WeakRetained;
  if (WeakRetained && WeakRetained[6] == *(void *)(a1 + 32))
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      id v29 = v8;
      id v30 = v9;
      uint64_t v28 = 285;
      id v26 = "";
      id v27 = "-[NROnDemandLinkSetupManager startReceiver]_block_invoke";
      _NRLogWithArgs();
    }
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_1000172D8;
    v36[3] = &unk_1001C6018;
    id v37 = v10;
    id v13 = objc_retainBlock(v36);
    id v14 = v8;
    id v35 = v9;
    id v15 = v13;
    id v16 = [v14 objectForKeyedSubscript:@"relay-req"];
    if (![v16 count]) {
      goto LABEL_35;
    }
    id v31 = [v16 objectForKeyedSubscript:@"r"];
    unsigned __int8 v33 = [v31 unsignedLongValue];
    id v34 = [v16 objectForKeyedSubscript:@"reg"];
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    id v32 = v14;
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      id v17 = (id)qword_1001F4820;
      id v18 = objc_alloc_init((Class)NSMutableString);
      id v19 = v18;
      if (v33) {
        [v18 appendString:@"PHS,"];
      }
      unsigned int v20 = [v34 BOOLValue:v26, v27, v28, v29, v30];
      id v29 = v19;
      id v30 = (id)v20;
      uint64_t v28 = 600;
      id v26 = "";
      id v27 = "-[NROnDemandLinkSetupManager processIncomingRequest:options:response:]";
      _NRLogWithArgs();
    }
    id v21 = [v16 objectForKeyedSubscript:@"t" v26, v27, v28, v29, v30];
    if [v21 unsignedCharValue] == 6 || (_os_feature_enabled_impl())
    {
      if ((v33 & 1) == 0)
      {
LABEL_34:

        id v14 = v32;
LABEL_35:

        goto LABEL_36;
      }
      uint64_t v22 = objc_alloc_init(NRPendingIncomingRequest);
      p_isa = (id *)&v22->super.isa;
      if (v22)
      {
        objc_storeStrong((id *)&v22->_request, a2);
        objc_storeStrong(p_isa + 2, a3);
        objc_setProperty_nonatomic_copy(p_isa, v24, v15, 24);
      }
      [*(id *)(v12 + 72) addObject:p_isa];
      sub_1000164A8((unsigned char *)v12);
      if (*(unsigned char *)(v12 + 11) || *(unsigned char *)(v12 + 12))
      {
        if (*(unsigned char *)(v12 + 13)) {
          sub_100012CD8(v12);
        }
      }
    }
    else
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_34;
      }
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      id v25 = (id)qword_1001F4820;
      [v21 unsignedCharValue];
      p_isa = (id *)createStringFromNRDeviceEndpointType();
      _NRLogWithArgs();
    }
    goto LABEL_34;
  }
LABEL_36:
}

uint64_t sub_100016FDC(uint64_t a1)
{
  uint64_t WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *(void *)(WeakRetained + 48) == *(void *)(a1 + 32))
  {
    uint64_t v5 = WeakRetained;
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    uint64_t WeakRetained = _NRLogIsLevelEnabled();
    uint64_t v3 = v5;
    if (WeakRetained)
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      uint64_t WeakRetained = _NRLogWithArgs();
      uint64_t v3 = v5;
    }
  }

  return _objc_release_x1(WeakRetained, v3);
}

uint64_t sub_1000170D0(uint64_t a1)
{
  uint64_t WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && *(void *)(WeakRetained + 48) == *(void *)(a1 + 32))
  {
    uint64_t v5 = WeakRetained;
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    uint64_t WeakRetained = _NRLogIsLevelEnabled();
    uint64_t v3 = v5;
    if (WeakRetained)
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      uint64_t WeakRetained = _NRLogWithArgs();
      uint64_t v3 = v5;
    }
  }

  return _objc_release_x1(WeakRetained, v3);
}

void sub_1000171C4(uint64_t a1, void *a2)
{
  id v5 = a2;
  uint64_t WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  int v4 = WeakRetained;
  if (WeakRetained && WeakRetained[6] == *(id *)(a1 + 32))
  {
    if (qword_1001F4828 != -1) {
      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      _NRLogWithArgs();
    }
    if (v5) {
      [v4[6] invalidate];
    }
  }
}

uint64_t sub_1000172D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000172F0(uint64_t a1, int a2)
{
  uint64_t WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v4 = WeakRetained;
  if (WeakRetained && *((_DWORD *)WeakRetained + 5) == a2)
  {
    uint64_t state64 = 0;
    if (notify_get_state(a2, &state64))
    {
      id v5 = sub_1000140C4();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v7 = sub_1000140C4();
        _NRLogWithArgs();
      }
      v4[15] = 0;
    }
    else
    {
      v4[15] = state64 == 2;
      if (qword_1001F4828 != -1) {
        dispatch_once(&qword_1001F4828, &stru_1001C61C8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4828 != -1) {
          dispatch_once(&qword_1001F4828, &stru_1001C61C8);
        }
        _NRLogWithArgs();
      }
      if (!v4[15] && v4[13]) {
        [v4 didUpdatePHSState:0 llphsActive:0];
      }
    }
  }
}

void sub_100017488(uint64_t a1)
{
  id v2 = sub_1000154E0(*(void *)(a1 + 32));
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v26;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(*((void *)&v25 + 1) + 8 * (void)v6));
        id v8 = v7;
        if (v7)
        {
          id v9 = v7[16];
          if (v9)
          {
            id v10 = v9;
            id v11 = v8[16];
            BOOL v12 = [v11 operationalScope:v25] == 0;

            if (!v12)
            {
              if (*((unsigned char *)v8 + 8))
              {
                if (*((unsigned char *)v8 + 9))
                {
                  id v13 = v8[16];
                  BOOL v14 = ((unint64_t)[v13 operationalScope] & 1) == 0;

                  if (!v14)
                  {
                    id v15 = *(unsigned char **)(a1 + 32);
                    if (v15)
                    {
                      if (v15[11] || v15[12]) {
                        goto LABEL_20;
                      }
                      sub_1000164A8(v15);
                    }
                    id v16 = v8[6];
                    BOOL v17 = v16 == 0;

                    if (!v17)
                    {
                      id v18 = [NRValidPeer alloc];
                      id v19 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)v8 + 14)];
                      unsigned int v20 = sub_100013458((id *)&v18->super.isa, v19);

                      id v21 = *(void **)(a1 + 32);
                      if (v21) {
                        id v21 = (void *)v21[11];
                      }
                      uint64_t v22 = v21;
                      id v23 = v8[6];
                      [v22 setObject:v20 forKeyedSubscript:v23];
                    }
                  }
                }
              }
            }
          }
        }
LABEL_20:

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v24 = [v3 countByEnumeratingWithState:&v25 objects:v29 count:16];
      id v4 = v24;
    }
    while (v24);
  }

  sub_1000151B0(*(void *)(a1 + 32));
}

void sub_100017CAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4830;
  qword_1001F4830 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

unsigned char *sub_100017CF0(unsigned char *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)NRNetInfo;
    id v5 = [super init];
    if (!v5)
    {
      id v7 = sub_100017E58();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v9 = sub_100017E58();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 136446210;
      *(void *)(v10 + 4) = "-[NRNetInfo initWithQueue:]";
      sub_100017E58();
      _NRLogAbortWithPack();
    }
    a1 = v5;
    objc_storeStrong((id *)v5 + 6, a2);
    a1[14] = 1;
  }

  return a1;
}

id sub_100017E58()
{
  if (qword_1001F4838 != -1) {
    dispatch_once(&qword_1001F4838, &stru_1001C62D0);
  }
  v0 = (void *)qword_1001F4830;

  return v0;
}

char *sub_100017EAC(char *a1, void *a2)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_24;
  }
  v20.receiver = a1;
  v20.super_class = (Class)NRNetInfo;
  uint64_t v6 = (char *)[super init];
  a1 = v6;
  if (!v6)
  {
    id v16 = sub_100017E58();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v18 = sub_100017E58();
      _NRLogWithArgs();
    }
    a1 = (char *)_os_log_pack_size();
    id v5 = (char *)&v20 - ((__chkstk_darwin(a1) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v19 = 136446210;
    *(void *)(v19 + 4) = "-[NRNetInfo initWithIncomingData:]";
    sub_100017E58();
    _NRLogAbortWithPack();
    __break(1u);
LABEL_39:
    dispatch_once(&qword_1001F4838, &stru_1001C62D0);
LABEL_7:
    if (_NRLogIsLevelEnabled())
    {
      if (v3[263] != -1) {
        dispatch_once(&qword_1001F4838, &stru_1001C62D0);
      }
      id v8 = (id)qword_1001F4830;
      [v2 length];
      _NRLogWithArgs();
    }
    goto LABEL_23;
  }
  v6[11] = 1;
  id v7 = v5;
  uint64_t v2 = v7;
  if (a1[10])
  {

    goto LABEL_24;
  }
  unsigned __int16 v35 = 0;
  uint64_t v34 = 0;
  if ((unint64_t)[v7 length] <= 9)
  {
    id v3 = &unk_1001F4000;
    if (qword_1001F4838 == -1) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
  unsigned __int8 v33 = 0;
  [v2 getBytes:&v33 length:1];
  int v9 = v33;
  if (v33 >= 2u)
  {
    if (qword_1001F4838 != -1) {
      dispatch_once(&qword_1001F4838, &stru_1001C62D0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4838 != -1) {
        dispatch_once(&qword_1001F4838, &stru_1001C62D0);
      }
      _NRLogWithArgs();
    }
    goto LABEL_23;
  }
  a1[14] = v33;
  if (v9 != 1)
  {
LABEL_23:

    goto LABEL_24;
  }
  [v2 getBytes:&v34 range:0, 10];
  uint64_t v10 = bswap32(v35) >> 16;
  if ([v2 length] != (id)(v10 + 10))
  {
    if (qword_1001F4838 != -1) {
      dispatch_once(&qword_1001F4838, &stru_1001C62D0);
    }
    if (_NRLogIsLevelEnabled())
    {
      id v14 = sub_100017E58();
      [v2 length];
      _NRLogWithArgs();
    }
    goto LABEL_23;
  }
  if (v10 < 4)
  {
    objc_super v11 = 0;
  }
  else
  {
    objc_super v11 = [v2 subdataWithRange:10, v10];
  }
  *(_WORD *)(a1 + 15) = WORD1(v34);
  *((_DWORD *)a1 + 7) = bswap32(HIDWORD(v34));
  uint64_t v27 = 0;
  long long v28 = &v27;
  uint64_t v29 = 0x3032000000;
  id v30 = sub_100018418;
  id v31 = sub_100018428;
  id v32 = 0;
  id v15 = (void *)*((void *)a1 + 5);
  *((void *)a1 + 5) = 0;

  if (!v11
    || (id v21 = _NSConcreteStackBlock,
        uint64_t v22 = 3221225472,
        id v23 = sub_100018430,
        id v24 = &unk_1001C62B0,
        long long v25 = a1,
        long long v26 = &v27,
        (NRTLVParse() & 1) != 0))
  {
    objc_storeStrong((id *)a1 + 16, (id)v28[5]);
    _Block_object_dispose(&v27, 8);

    a1 = a1;
    BOOL v12 = a1;
    goto LABEL_25;
  }
  _Block_object_dispose(&v27, 8);

LABEL_24:
  BOOL v12 = 0;
LABEL_25:

  return v12;
}

void sub_1000183FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100018418(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100018428(uint64_t a1)
{
}

uint64_t sub_100018430(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 1);
  uint64_t v5 = __rev16(v4);
  unsigned int v6 = sub_100018910(*(void *)(a1 + 32), *a2);
  if (v6) {
    BOOL v7 = v6 >= v5;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    uint64_t result = 1;
    switch(*a2)
    {
      case 1u:
        id v9 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16];
        id v10 = *(id *)(a1 + 32);
        id v11 = v9;
        id v12 = v11;
        if (v10)
        {
          uint64_t v23 = 0;
          id v24 = &v23;
          uint64_t v25 = 0x3032000000;
          long long v26 = sub_100018418;
          uint64_t v27 = sub_100018428;
          id v28 = 0;
          if (NRTLVParse()) {
            id v13 = (void *)v24[5];
          }
          else {
            id v13 = 0;
          }
          id v10 = v13;
          _Block_object_dispose(&v23, 8);

          if (v10)
          {
            uint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
            if (!v19)
            {
              id v20 = objc_alloc_init((Class)NSMutableArray);
              uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
              uint64_t v22 = *(void **)(v21 + 40);
              *(void *)(v21 + 40) = v20;

              uint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
            }
            [v19 addObject:v10];
          }
        }
        else
        {
        }
        goto LABEL_50;
      case 2u:
        id v12 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v5];
        uint64_t v16 = *(void *)(a1 + 32);
        if (v16) {
          objc_storeStrong((id *)(v16 + 40), v12);
        }
LABEL_50:

        goto LABEL_51;
      case 3u:
        if (v4 == 2048)
        {
          *(void *)(*(void *)(a1 + 32) + 112) = *(void *)(a2 + 3);
          uint64_t v14 = *(void *)(a1 + 32);
          if (v14) {
            *(void *)(v14 + 112) = bswap64(*(void *)(v14 + 112));
          }
          return result;
        }
        if (qword_1001F4838 != -1) {
          dispatch_once(&qword_1001F4838, &stru_1001C62D0);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_51;
        }
        if (qword_1001F4838 != -1) {
          goto LABEL_53;
        }
        goto LABEL_43;
      case 4u:
        if (v4 == 2048)
        {
          *(void *)(*(void *)(a1 + 32) + 120) = *(void *)(a2 + 3);
          uint64_t v17 = *(void *)(a1 + 32);
          if (v17) {
            *(void *)(v17 + 120) = bswap64(*(void *)(v17 + 120));
          }
          return result;
        }
        if (qword_1001F4838 != -1) {
          dispatch_once(&qword_1001F4838, &stru_1001C62D0);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_51;
        }
        if (qword_1001F4838 != -1) {
          goto LABEL_53;
        }
        goto LABEL_43;
      case 5u:
        if (v4 == 1024)
        {
          uint64_t v18 = *(void *)(a1 + 32);
          if (v18) {
            *(_DWORD *)(v18 + 20) = bswap32(*(_DWORD *)(a2 + 3));
          }
        }
        else
        {
          if (qword_1001F4838 != -1) {
            dispatch_once(&qword_1001F4838, &stru_1001C62D0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4838 != -1) {
LABEL_53:
            }
              dispatch_once(&qword_1001F4838, &stru_1001C62D0);
LABEL_43:
            _NRLogWithArgs();
          }
LABEL_51:
          uint64_t result = 1;
        }
        break;
      case 7u:
        uint64_t v15 = *(void *)(a1 + 32);
        if (v15) {
          *(unsigned char *)(v15 + 9) = 1;
        }
        return result;
      default:
        return result;
    }
  }
  else
  {
    if (qword_1001F4838 != -1) {
      dispatch_once(&qword_1001F4838, &stru_1001C62D0);
    }
    uint64_t result = _NRLogIsLevelEnabled();
    if (result)
    {
      if (qword_1001F4838 != -1) {
        dispatch_once(&qword_1001F4838, &stru_1001C62D0);
      }
      _NRLogWithArgs();
      return 0;
    }
  }
  return result;
}

void sub_1000188DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100018910(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t result = 0x8000;
    switch(a2)
    {
      case 0:
        goto LABEL_13;
      case 1:
        return result;
      case 2:
        uint64_t result = 1024;
        break;
      case 3:
      case 4:
      case 6:
        uint64_t result = 8;
        break;
      case 5:
        uint64_t result = 4;
        break;
      case 41:
      case 42:
      case 43:
        uint64_t result = 0x2000;
        break;
      default:
        if (qword_1001F4838 != -1) {
          dispatch_once(&qword_1001F4838, &stru_1001C62D0);
        }
        uint64_t result = _NRLogIsLevelEnabled();
        if (result)
        {
          if (qword_1001F4838 != -1) {
            dispatch_once(&qword_1001F4838, &stru_1001C62D0);
          }
          _NRLogWithArgs();
LABEL_13:
          uint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

uint64_t sub_100018AD8(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 1);
  uint64_t v5 = __rev16(v4);
  unsigned int v6 = sub_100018910(*(void *)(a1 + 32), *a2);
  if (v6) {
    BOOL v7 = v6 >= v5;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (qword_1001F4838 != -1) {
      dispatch_once(&qword_1001F4838, &stru_1001C62D0);
    }
    uint64_t result = _NRLogIsLevelEnabled();
    if (result)
    {
      if (qword_1001F4838 == -1) {
        goto LABEL_33;
      }
      goto LABEL_35;
    }
    return result;
  }
  int v8 = *a2;
  if (v8 == 43)
  {
    id v13 = [objc_alloc((Class)NSString) initWithBytes:a2 + 3 length:v5 encoding:4];
    if (v13)
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
      {
        uint64_t v14 = nw_resolver_config_create();
        uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v16 = *(void **)(v15 + 40);
        *(void *)(v15 + 40) = v14;
      }
      [v13 UTF8String];
      nw_resolver_config_add_search_domain();
    }
    goto LABEL_27;
  }
  if (v8 == 42)
  {
    id v13 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v5];
    uint64_t v17 = sub_100116F6C(v13, 1, 0, 0);
    if (v17)
    {
      if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
      {
        uint64_t v18 = nw_resolver_config_create();
        uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 8);
        id v20 = *(void **)(v19 + 40);
        *(void *)(v19 + 40) = v18;
      }
      uint64_t v21 = [v17 hostname];
      [v21 UTF8String];
      nw_resolver_config_add_name_server();
    }
LABEL_27:

    return 1;
  }
  if (v8 != 41) {
    return 1;
  }
  if (v4 == 512)
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
    {
      uint64_t v9 = nw_resolver_config_create();
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;
    }
    nw_resolver_config_set_class();
    return 1;
  }
  if (qword_1001F4838 != -1) {
    dispatch_once(&qword_1001F4838, &stru_1001C62D0);
  }
  uint64_t result = _NRLogIsLevelEnabled();
  if (result)
  {
    if (qword_1001F4838 == -1)
    {
LABEL_33:
      _NRLogWithArgs();
      return 0;
    }
LABEL_35:
    dispatch_once(&qword_1001F4838, &stru_1001C62D0);
    goto LABEL_33;
  }
  return result;
}

void sub_100018DE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1001F4838 != -1) {
    dispatch_once(&qword_1001F4838, &stru_1001C62D0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4838 != -1) {
      dispatch_once(&qword_1001F4838, &stru_1001C62D0);
    }
    uint64_t v25 = 144;
    id v26 = v3;
    uint64_t v23 = "";
    id v24 = "-[NRNetInfo start]_block_invoke";
    _NRLogWithArgs();
  }
  uint64_t WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = WeakRetained;
  if (WeakRetained && !*((unsigned char *)WeakRetained + 10) && WeakRetained[9] == *(id *)(a1 + 32))
  {
    id v6 = v3;
    if (*((unsigned char *)v5 + 12)) {
      goto LABEL_53;
    }
    BOOL v7 = nw_path_copy_interface();
    int v8 = v7;
    if (v7)
    {
      if (nw_interface_get_type(v7) == *((unsigned __int8 *)v5 + 16))
      {
        id location = 0;
        id v31 = 0;
        id v9 = +[NSString stringWithUTF8String:nw_interface_get_name(v8)];

        id v10 = location;
        if (location)
        {
          int v11 = 0;
          goto LABEL_26;
        }
LABEL_24:
        id v9 = v5[12];
        id v10 = 0;
        if (!v9)
        {
          unsigned int v12 = 0;
LABEL_29:

LABEL_30:
          id v13 = v31;
          if (v31 || (id v9 = v5[13]) != 0)
          {
            unsigned int v14 = [v13 intersectsSet:v5[13] inRect:v23, v24, v25, v26] ^ 1;
            if (v13)
            {
LABEL_36:
              if ((v12 | v14) == 1)
              {
                *((unsigned char *)v5 + 12) = 1;
                if (v12)
                {
                  unsigned int v27 = v14;
                  if (qword_1001F4838 != -1) {
                    dispatch_once(&qword_1001F4838, &stru_1001C62D0);
                  }
                  int IsLevelEnabled = _NRLogIsLevelEnabled();
                  unsigned int v14 = v27;
                  if (IsLevelEnabled)
                  {
                    if (qword_1001F4838 != -1) {
                      dispatch_once(&qword_1001F4838, &stru_1001C62D0);
                    }
                    id v17 = (id)qword_1001F4830;
                    _NRLogWithArgs();

                    unsigned int v14 = v27;
                  }
                }
                if (v14)
                {
                  if (qword_1001F4838 != -1) {
                    dispatch_once(&qword_1001F4838, &stru_1001C62D0);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4838 != -1) {
                      dispatch_once(&qword_1001F4838, &stru_1001C62D0);
                    }
                    id v18 = (id)qword_1001F4830;
                    _NRLogWithArgs();
                  }
                }
              }

LABEL_52:
LABEL_53:

              if (!*((unsigned char *)v5 + 8))
              {
                objc_initWeak(&location, v5);
                *((unsigned char *)v5 + 8) = 1;
                if (*((unsigned char *)v5 + 17)) {
                  int64_t v19 = 500000000;
                }
                else {
                  int64_t v19 = 10000000000;
                }
                dispatch_time_t v20 = dispatch_time(0x8000000000000000, v19);
                uint64_t v21 = *(void **)(a1 + 40);
                if (v21) {
                  uint64_t v21 = (void *)v21[6];
                }
                block[0] = _NSConcreteStackBlock;
                block[1] = 3221225472;
                block[2] = sub_100019ED8;
                block[3] = &unk_1001C88B8;
                uint64_t v22 = v21;
                objc_copyWeak(&v30, &location);
                id v29 = *(id *)(a1 + 32);
                dispatch_after(v20, v22, block);

                objc_destroyWeak(&v30);
                objc_destroyWeak(&location);
              }
              goto LABEL_60;
            }
          }
          else
          {
            unsigned int v14 = 0;
          }
          unsigned int v15 = v14;

          unsigned int v14 = v15;
          goto LABEL_36;
        }
        int v11 = 1;
LABEL_26:
        unsigned int v12 = [v10 intersectsSet:v5[12] inRect:v23, v24, v25, v26] ^ 1;
        id v10 = v9;
        if (!v11) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
    }
    else if (!*((unsigned char *)v5 + 16))
    {
      id location = 0;
      id v31 = 0;
      goto LABEL_24;
    }
    if (qword_1001F4838 != -1) {
      dispatch_once(&qword_1001F4838, &stru_1001C62D0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4838 != -1) {
        dispatch_once(&qword_1001F4838, &stru_1001C62D0);
      }
      _NRLogWithArgs();
    }
    *((unsigned char *)v5 + 12) = 1;
    goto LABEL_52;
  }
LABEL_60:
}

void sub_100019308(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 48));
  *(unsigned char *)(a1 + 8) = 0;
  id v2 = *(id *)(a1 + 72);
  uint64_t v3 = nw_path_evaluator_copy_path();
  unsigned int v4 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v3;

  unsigned __int8 status = nw_path_get_status(*(nw_path_t *)(a1 + 64));
  id v6 = nw_path_copy_interface();
  id obj = 0;
  v69[0] = 0;
  uint64_t v57 = v6;
  if (v6)
  {
    BOOL v7 = v6;
    int type = nw_interface_get_type(v6);
    int v8 = +[NSString stringWithUTF8String:nw_interface_get_name(v7)];

    id v9 = v69[0];
  }
  else
  {
    id v9 = 0;
    int type = 0;
  }
  objc_storeStrong((id *)(a1 + 96), v9);
  objc_storeStrong((id *)(a1 + 104), obj);
  if (nw_path_is_expensive(*(nw_path_t *)(a1 + 64))) {
    int v10 = 8;
  }
  else {
    int v10 = 0;
  }
  if (nw_path_is_constrained(*(nw_path_t *)(a1 + 64))) {
    v10 |= 0x10u;
  }
  int v11 = v10 | nw_path_has_dns(*(nw_path_t *)(a1 + 64));
  if (nw_path_has_ipv4(*(nw_path_t *)(a1 + 64))) {
    v11 |= 2u;
  }
  if (nw_path_has_ipv6(*(nw_path_t *)(a1 + 64))) {
    v11 |= 4u;
  }
  if (nw_path_is_roaming()) {
    int v12 = v11 | 0x20;
  }
  else {
    int v12 = v11;
  }
  if (*(unsigned char *)(a1 + 13))
  {
    uint64_t estimated_upload_throughput = nw_path_get_estimated_upload_throughput();
    uint64_t estimated_download_throughput = nw_path_get_estimated_download_throughput();
  }
  else
  {
    uint64_t estimated_upload_throughput = 0;
    uint64_t estimated_download_throughput = 0;
  }
  if (*(unsigned __int8 *)(a1 + 15) == status
    && *(unsigned __int8 *)(a1 + 16) == type
    && *(_DWORD *)(a1 + 28) == v12
    && *(void *)(a1 + 112) == estimated_upload_throughput
    && *(void *)(a1 + 120) == estimated_download_throughput)
  {
    char v58 = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 15) = status;
    *(unsigned char *)(a1 + 16) = type;
    *(_DWORD *)(a1 + 28) = v12;
    char v58 = 1;
    *(void *)(a1 + 112) = estimated_upload_throughput;
    *(void *)(a1 + 120) = estimated_download_throughput;
  }
  uint64_t v62 = 0;
  long long v63 = &v62;
  uint64_t v64 = 0x3032000000;
  long long v65 = sub_100018418;
  long long v66 = sub_100018428;
  id v67 = 0;
  id v15 = *(id *)(a1 + 64);
  block[5] = _NSConcreteStackBlock;
  block[6] = 3221225472;
  block[7] = sub_100019D08;
  block[8] = &unk_1001C6238;
  block[9] = &v62;
  nw_path_enumerate_resolver_configs();

  unint64_t v16 = (unint64_t)(id)v63[5];
  unint64_t v17 = (unint64_t)*(id *)(a1 + 128);
  id v18 = (void *)v17;
  long long v60 = (void *)v16;
  if (!(v16 | v17)) {
    goto LABEL_27;
  }
  id v19 = [(id)v17 count];
  if (v19 == [v60 count])
  {
    if (![v18 count])
    {
LABEL_27:

      goto LABEL_45;
    }
    uint64_t v20 = 0;
    int v21 = 0;
    while (1)
    {
      uint64_t v22 = [v18 objectAtIndex:v20];
      uint64_t v23 = [v60 objectAtIndex:v20];
      int v24 = nw_resolver_config_get_class();
      if (v24 != nw_resolver_config_get_class()) {
        break;
      }
      id v25 = objc_alloc_init((Class)NSMutableArray);
      id v26 = objc_alloc_init((Class)NSMutableArray);
      long long v76 = _NSConcreteStackBlock;
      uint64_t v77 = 3221225472;
      long long v78 = sub_100019DA8;
      long long v79 = &unk_1001C6260;
      id v27 = v25;
      id v80 = v27;
      nw_resolver_config_enumerate_name_servers();
      uint64_t v83 = _NSConcreteStackBlock;
      uint64_t v84 = 3221225472;
      uint64_t v85 = (uint64_t)sub_100019DF4;
      int v86 = (uint64_t (*)(uint64_t, uint64_t))&unk_1001C6260;
      id v28 = (void (*)(uint64_t))v26;
      id v87 = v28;
      nw_resolver_config_enumerate_name_servers();
      id v29 = [v27 count];
      if (v29 == [v28 count] && objc_msgSend(v27, "isEqualToArray:", v28))
      {
        id v30 = objc_alloc_init((Class)NSMutableArray);
        id v31 = objc_alloc_init((Class)NSMutableArray);
        long long v71 = _NSConcreteStackBlock;
        uint64_t v72 = 3221225472;
        long long v73 = sub_100019E40;
        long long v74 = &unk_1001C6260;
        id v32 = v30;
        id v75 = v32;
        nw_resolver_config_enumerate_search_domains();
        v69[1] = _NSConcreteStackBlock;
        v69[2] = (void *)3221225472;
        v69[3] = sub_100019E8C;
        v69[4] = &unk_1001C6260;
        id v33 = v31;
        id v70 = v33;
        nw_resolver_config_enumerate_search_domains();
        id v34 = [v32 count];
        BOOL v35 = v34 != [v33 count] || ![v32 isEqualToArray:v33];
      }
      else
      {
        BOOL v35 = 1;
      }

      if (v35) {
        goto LABEL_44;
      }
      uint64_t v20 = (unsigned __int16)++v21;
      if ((unint64_t)[v18 count] <= (unsigned __int16)v21) {
        goto LABEL_27;
      }
    }
  }
LABEL_44:

  objc_storeStrong((id *)(a1 + 128), (id)v63[5]);
  char v58 = 1;
LABEL_45:
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v36 = (id *)(id)qword_1001F4A18;
  id v37 = v36;
  if (v36 && (id v38 = (id *)v36[6]) != 0)
  {
    uint64_t v39 = v38;
    CFStringRef v40 = v38[3];
    dispatch_assert_queue_V2(v40);

    uint64_t v83 = 0;
    uint64_t v84 = (uint64_t)&v83;
    uint64_t v85 = 0x3032000000;
    int v86 = sub_100151DC4;
    id v87 = sub_100151DD4;
    id v88 = 0;
    id v41 = v39[22];
    uint64_t v42 = v39[13];
    if (v42) {
      uint64_t v42 = (void *)v42[3];
    }
    id v43 = v42;
    long long v76 = _NSConcreteStackBlock;
    uint64_t v77 = 3221225472;
    long long v78 = sub_1001579D8;
    long long v79 = &unk_1001C8930;
    id v44 = v41;
    id v80 = v44;
    id v45 = v43;
    id v81 = v45;
    id v82 = &v83;
    if (sub_100151CF0((uint64_t)NRLinkManagerWiFi, &v76))
    {
      id v41 = sub_10014E0F0();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v41 = sub_10014E0F0();
        _NRLogWithArgs();
      }
      id v46 = 0;
    }
    else
    {
      id v46 = *(id *)(v84 + 40);
    }

    _Block_object_dispose(&v83, 8);
    if (v46)
    {
      int v47 = 0;
      goto LABEL_61;
    }
  }
  else
  {
  }
  id v49 = *(id *)(a1 + 40);
  id v46 = 0;
  if (!v49) {
    goto LABEL_65;
  }
  id v41 = v49;
  int v47 = 1;
LABEL_61:
  id v50 = *(id *)(a1 + 40);
  unsigned __int8 v51 = [v46 isEqualToData:v50];

  if (v47) {
  if ((v51 & 1) == 0)
  }
  {
    objc_storeStrong((id *)(a1 + 40), v46);
    char v58 = 1;
  }
LABEL_65:
  if (type != 1)
  {
    uint64_t v52 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
  }
  if (v58) {
    goto LABEL_68;
  }
  if (*(unsigned char *)(a1 + 15) != 2 && *(unsigned char *)(a1 + 12))
  {
    ++*(_DWORD *)(a1 + 20);
    if (qword_1001F4838 != -1) {
      dispatch_once(&qword_1001F4838, &stru_1001C62D0);
    }
    id v54 = (id)qword_1001F4830;
    int v55 = _NRLogIsLevelEnabled();

    if (v55)
    {
      if (qword_1001F4838 != -1) {
        dispatch_once(&qword_1001F4838, &stru_1001C62D0);
      }
      id v56 = (id)qword_1001F4830;
      _NRLogWithArgs();
    }
LABEL_68:
    ++*(void *)(a1 + 32);
    id v53 = *(NSObject **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100019D7C;
    block[3] = &unk_1001C8BA8;
    void block[4] = a1;
    dispatch_async(v53, block);
  }
  *(unsigned char *)(a1 + 12) = 0;

  _Block_object_dispose(&v62, 8);
}

void sub_100019CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose((const void *)(v31 - 152), 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100019D08(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (!v4)
  {
    id v5 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    BOOL v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    unsigned int v4 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  }
  [v4 addObject:v3];

  return 1;
}

uint64_t sub_100019D7C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 10)) {
      return result;
    }
    uint64_t v2 = *(void *)(v1 + 56);
  }
  else
  {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(void))(v2 + 16))();
}

uint64_t sub_100019DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSString stringWithUTF8String:a2];
  [v2 addObject:v3];

  return 1;
}

uint64_t sub_100019DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSString stringWithUTF8String:a2];
  [v2 addObject:v3];

  return 1;
}

uint64_t sub_100019E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSString stringWithUTF8String:a2];
  [v2 addObject:v3];

  return 1;
}

uint64_t sub_100019E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSString stringWithUTF8String:a2];
  [v2 addObject:v3];

  return 1;
}

void sub_100019ED8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && !*((unsigned char *)WeakRetained + 10) && *((void *)WeakRetained + 9) == *(void *)(a1 + 32))
  {
    id v3 = WeakRetained;
    sub_100019308((uint64_t)WeakRetained);
    id WeakRetained = v3;
  }
}

uint64_t sub_100019F40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = +[NSString stringWithUTF8String:a2];
  id v3 = +[NWAddressEndpoint endpointWithHostname:v2 port:@"0"];

  unsigned int v4 = sub_100116B0C(v3, 0, 0);
  if (v4) {
    NRTLVAddData();
  }

  return 1;
}

uint64_t sub_100019FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = +[NSString stringWithUTF8String:a2];
  id v3 = [v2 dataUsingEncoding:4];

  NRTLVAddData();
  return 1;
}

dispatch_queue_t *sub_10001A05C(dispatch_queue_t *a1)
{
  uint64_t v1 = a1;
  if (!a1) {
    return v1;
  }
  dispatch_assert_queue_V2(a1[6]);
  if (*((unsigned char *)v1 + 10)) {
    return 0;
  }
  if (*((unsigned char *)v1 + 8)) {
    sub_100019308((uint64_t)v1);
  }
  uint64_t v2 = v1[10];
  if (!v2 || v2 != v1[4] || !v1[11])
  {
    memset((char *)v28 + 1, 0, 9);
    LOBYTE(v28[0]) = *((unsigned char *)v1 + 14);
    v28[1] = *(_WORD *)((char *)v1 + 15);
    *(_DWORD *)&v28[2] = bswap32(*((_DWORD *)v1 + 7));
    id v22 = objc_alloc_init((Class)NSMutableData);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v20 = v1;
    id obj = v1[16];
    id v5 = [obj countByEnumeratingWithState:&v24 objects:v46 count:16];
    if (v5)
    {
      uint64_t v23 = *(void *)v25;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v25 != v23) {
            objc_enumerationMutation(obj);
          }
          id v7 = *(id *)(*((void *)&v24 + 1) + 8 * (void)v6);
          if (v7)
          {
            int v8 = v7;
            unint64_t v40 = 0;
            id v41 = &v40;
            uint64_t v42 = 0x3032000000;
            id v43 = sub_100018418;
            id v44 = sub_100018428;
            id v45 = objc_alloc_init((Class)NSMutableData);
            __int16 v39 = bswap32(nw_resolver_config_get_class()) >> 16;
            NRTLVAdd();
            id v34 = _NSConcreteStackBlock;
            uint64_t v35 = 3221225472;
            id v36 = sub_100019F40;
            id v37 = &unk_1001C6288;
            id v38 = &v40;
            nw_resolver_config_enumerate_name_servers();
            id v29 = _NSConcreteStackBlock;
            uint64_t v30 = 3221225472;
            uint64_t v31 = sub_100019FE8;
            id v32 = &unk_1001C6288;
            id v33 = &v40;
            nw_resolver_config_enumerate_search_domains();
            id v9 = (id)v41[5];
            _Block_object_dispose(&v40, 8);

            if (v9) {
              NRTLVAddData();
            }
          }
          else
          {
            if (qword_1001F4838 != -1) {
              dispatch_once(&qword_1001F4838, &stru_1001C62D0);
            }
            id v10 = (id)qword_1001F4830;
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              if (qword_1001F4838 != -1) {
                dispatch_once(&qword_1001F4838, &stru_1001C62D0);
              }
              id v12 = (id)qword_1001F4830;
              _NRLogWithArgs();
            }
            id v9 = 0;
          }

          uint64_t v6 = (char *)v6 + 1;
        }
        while (v5 != v6);
        id v13 = [obj countByEnumeratingWithState:&v24 objects:v46 count:16];
        id v5 = v13;
      }
      while (v13);
    }

    unsigned int v14 = v1[5];
    if ([v14 length])
    {
      BOOL v15 = (unint64_t)[v20[5] length] < 0xFF;

      if (v15) {
        NRTLVAddData();
      }
    }
    else
    {
    }
    unint64_t v16 = v20;
    unint64_t v17 = (unint64_t)v20[14];
    if (v17)
    {
      unint64_t v40 = bswap64(v17);
      NRTLVAdd();
      unint64_t v16 = v20;
    }
    unint64_t v18 = (unint64_t)v16[15];
    if (v18)
    {
      unint64_t v40 = bswap64(v18);
      NRTLVAdd();
      unint64_t v16 = v20;
    }
    unsigned int v19 = *((_DWORD *)v16 + 5);
    if (*((_DWORD *)v16 + 6) != v19)
    {
      LODWORD(v40) = bswap32(v19);
      NRTLVAdd();
      unint64_t v16 = v20;
      *((_DWORD *)v20 + 6) = *((_DWORD *)v20 + 5);
    }
    if (*((unsigned char *)v16 + 17)) {
      NRTLVAdd();
    }
    if (qword_1001F4BE0 != -1) {
      dispatch_once(&qword_1001F4BE0, &stru_1001C7D48);
    }
    unint64_t v40 = bswap64(qword_1001F4BD8);
    NRTLVAdd();
    v28[4] = bswap32([v22 length]) >> 16;
    uint64_t v1 = (dispatch_queue_t *)[objc_alloc((Class)NSMutableData) initWithBytes:v28 length:10];
    [(dispatch_queue_t *)v1 appendData:v22];
    v20[10] = v20[4];
    objc_storeStrong((id *)v20 + 11, v1);

    return v1;
  }
  if (qword_1001F4838 != -1) {
    dispatch_once(&qword_1001F4838, &stru_1001C62D0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4838 != -1) {
      dispatch_once(&qword_1001F4838, &stru_1001C62D0);
    }
    _NRLogWithArgs();
  }
  dispatch_queue_t v3 = v1[11];

  return (dispatch_queue_t *)v3;
}

void sub_10001A680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

id sub_10001A9CC()
{
  if (qword_1001F4858 != -1) {
    dispatch_once(&qword_1001F4858, &stru_1001C6358);
  }
  v0 = (void *)qword_1001F4850;

  return v0;
}

uint64_t sub_10001C600(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_10001D5C4(id a1)
{
  uint64_t v1 = objc_alloc_init(NRBluetoothPairingManager);
  uint64_t v2 = qword_1001F4840;
  qword_1001F4840 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10001D600(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4850;
  qword_1001F4850 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10001E14C()
{
  if (qword_1001F4870 != -1) {
    dispatch_once(&qword_1001F4870, &stru_1001C6418);
  }
  v0 = (void *)qword_1001F4868;

  return v0;
}

void sub_10001E1A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4868;
  qword_1001F4868 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10001E8D4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10001E8F4(unsigned char *val, int a2)
{
  if (val)
  {
    char v2 = a2;
    if (val[8] != a2)
    {
      val[8] = a2;
      val[9] = (a2 - 1) < 3;
      objc_initWeak(&location, val);
      unsigned int v4 = (void *)*((void *)val + 5);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10001EC34;
      block[3] = &unk_1001C73C0;
      id v5 = v4;
      objc_copyWeak(&v7, &location);
      char v8 = v2;
      dispatch_async(v5, block);

      objc_destroyWeak(&v7);
      objc_destroyWeak(&location);
    }
  }
}

void sub_10001E9E0(uint64_t a1, int a2, int a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && !WeakRetained[12] && *((void *)WeakRetained + 10) == *(void *)(a1 + 32))
  {
    id val = WeakRetained;
    if (a3)
    {
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = val;
      if (IsLevelEnabled)
      {
        id v9 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();

        id WeakRetained = val;
      }
    }
    switch(a2)
    {
      case -1:
        unsigned int v14 = (void *)_NRCopyLogObjectForNRUUID();
        int v15 = _NRLogIsLevelEnabled();

        if (v15)
        {
          unint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        id WeakRetained = val;
        if (!val[12])
        {
          int v13 = 4;
          goto LABEL_20;
        }
        break;
      case 2:
        unint64_t v17 = (void *)_NRCopyLogObjectForNRUUID();
        int v18 = _NRLogIsLevelEnabled();

        if (v18)
        {
          unsigned int v19 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        id WeakRetained = val;
        int v13 = val[8];
        if (val[8])
        {
LABEL_20:
          sub_10001E8F4(val, v13);
          id WeakRetained = val;
        }
        break;
      case 1:
        id v10 = (void *)_NRCopyLogObjectForNRUUID();
        int v11 = _NRLogIsLevelEnabled();

        if (v11)
        {
          id v12 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        int v13 = 2;
        goto LABEL_20;
      default:
        break;
    }
  }
}

void sub_10001EC34(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && *((unsigned __int8 *)WeakRetained + 8) == *(unsigned __int8 *)(a1 + 40))
  {
    unsigned int v4 = WeakRetained;
    id v3 = objc_loadWeakRetained(WeakRetained + 8);
    [v3 didUpdateDNSProxyState:v4 state:*(unsigned __int8 *)(a1 + 40)];

    id WeakRetained = v4;
  }
}

void sub_10001EE6C(unsigned char *a1)
{
  if (a1)
  {
    int v3 = -1;
    char v2 = (void *)mrc_dns_proxy_parameters_create();
    if (qword_1001F4870 != -1) {
      dispatch_once(&qword_1001F4870, &stru_1001C6418);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4870 != -1) {
        dispatch_once(&qword_1001F4870, &stru_1001C6418);
      }
      _NRLogWithArgs();
    }
    sub_10001E8F4(a1, 4);
  }
}

void sub_10001F244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10001F26C(uint64_t a1, int a2, int a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v7 = WeakRetained;
  if (WeakRetained && !WeakRetained[12] && *((void *)WeakRetained + 10) == *(void *)(a1 + 32))
  {
    id val = WeakRetained;
    if (a3)
    {
      char v8 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id v7 = val;
      if (IsLevelEnabled)
      {
        id v10 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();

        id v7 = val;
      }
    }
    if (a2 != -1)
    {
      if (a2 == 2)
      {
        uint64_t v20 = (void *)_NRCopyLogObjectForNRUUID();
        int v21 = _NRLogIsLevelEnabled();

        if (!v21)
        {
          int v16 = 4;
          goto LABEL_21;
        }
        int v15 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
        int v16 = 4;
      }
      else
      {
        if (a2 != 1) {
          goto LABEL_23;
        }
        int v11 = (void *)_NRCopyLogObjectForNRUUID();
        int v12 = _NRLogIsLevelEnabled();

        if (v12)
        {
          int v13 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        id v14 = *(id *)(a1 + 40);
        int v15 = (void *)*((void *)val + 3);
        *((void *)val + 3) = v14;
        int v16 = 2;
      }

LABEL_21:
      id v7 = val;
      goto LABEL_22;
    }
    unint64_t v17 = (void *)_NRCopyLogObjectForNRUUID();
    int v18 = _NRLogIsLevelEnabled();

    if (v18)
    {
      unsigned int v19 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    id v7 = val;
    if (!val[12])
    {
      int v16 = 4;
LABEL_22:
      sub_10001E8F4(v7, v16);
      id v7 = val;
    }
  }
LABEL_23:

  return _objc_release_x1(WeakRetained, v7);
}

void sub_10001F7A0(uint64_t a1)
{
  if (!a1) {
    return;
  }
  *(_DWORD *)(a1 + 16) = 1;
  sub_10001E8F4((unsigned char *)a1, 1);
  char v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    unsigned int v4 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  unsigned __int8 v5 = [*(id *)(a1 + 96) count];
  if (v5)
  {
    if (v5 >= 9u)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7) {
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    uint64_t v11 = v5;
    int v12 = malloc_type_calloc(v5, 8uLL, 0xF1748037uLL);
    if (!v12)
    {
      id v31 = sub_10001E14C();
      int v32 = _NRLogIsLevelEnabled();

      if (v32)
      {
        id v33 = sub_10001E14C();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v34 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v34 = 136446722;
      *(void *)(v34 + 4) = "strict_calloc";
      *(_WORD *)(v34 + 12) = 2048;
      *(void *)(v34 + 14) = v11;
      *(_WORD *)(v34 + 22) = 2048;
      *(void *)(v34 + 24) = 8;
      sub_10001E14C();
      _NRLogAbortWithPack();
    }
    int v13 = v12;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    long long v35 = 0u;
    id v14 = *(id *)(a1 + 96);
    id v15 = [v14 countByEnumeratingWithState:&v35 objects:v39 count:16];
    if (v15)
    {
      id v16 = v15;
      int v17 = 0;
      uint64_t v18 = *(void *)v36;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(void *)v36 != v18) {
            objc_enumerationMutation(v14);
          }
          uint64_t v20 = *(void **)(*((void *)&v35 + 1) + 8 * i);
          if (objc_msgSend(v20, "length", (void)v35))
          {
            v13[v17++] = [v20 UTF8String];
          }
          else
          {
            int v21 = (void *)_NRCopyLogObjectForNRUUID();
            int v22 = _NRLogIsLevelEnabled();

            if (v22)
            {
              uint64_t v23 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
          }
        }
        id v16 = [v14 countByEnumeratingWithState:&v35 objects:v39 count:16];
      }
      while (v16);

      if (v17)
      {
        if (advertising_proxy_enable_with_interfaces())
        {
          sub_10001FD04(a1);
        }
        else
        {
          long long v27 = (void *)qword_1001F4860;
          if (!qword_1001F4860)
          {
            id v28 = objc_alloc_init((Class)NSMutableDictionary);
            id v29 = (void *)qword_1001F4860;
            qword_1001F4860 = (uint64_t)v28;

            long long v27 = (void *)qword_1001F4860;
          }
          uint64_t v30 = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 80)];
          [v27 setObject:a1 forKeyedSubscript:v30];
        }
LABEL_32:
        free(v13);
        return;
      }
    }
    else
    {
    }
    long long v24 = (void *)_NRCopyLogObjectForNRUUID();
    int v25 = _NRLogIsLevelEnabled();

    if (v25)
    {
      long long v26 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    sub_10001E8F4((unsigned char *)a1, 4);
    goto LABEL_32;
  }
  char v8 = (void *)_NRCopyLogObjectForNRUUID();
  int v9 = _NRLogIsLevelEnabled();

  if (v9)
  {
LABEL_9:
    id v10 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
LABEL_10:

  sub_10001E8F4((unsigned char *)a1, 4);
}

void sub_10001FD04(uint64_t a1)
{
  char v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    unsigned int v4 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  unsigned __int8 v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  sub_10001E8F4((unsigned char *)a1, 4);
}

void sub_10001FDB8(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1)
  {
    id v20 = sub_10001E14C();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      return;
    }
    id val = sub_10001E14C();
    uint64_t v6 = _NRLogWithArgs();
    goto LABEL_5;
  }
  unsigned int v4 = (void *)qword_1001F4860;
  unsigned __int8 v5 = +[NSNumber numberWithUnsignedLong:a1];
  id val = [v4 objectForKeyedSubscript:v5];

  if (!val)
  {
    id v22 = sub_10001E14C();
    int v23 = _NRLogIsLevelEnabled();

    if (v23)
    {
      id v24 = sub_10001E14C();
      _NRLogWithArgs();
    }
    id v7 = 0;
    goto LABEL_9;
  }
  if (!a3)
  {
    char v8 = (void *)_NRCopyLogObjectForNRUUID();
    int v9 = _NRLogIsLevelEnabled();

    if (v9)
    {
      id v10 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    sub_10002019C((uint64_t)val);
    id v7 = val;
    if (*((_DWORD *)val + 19) != -1) {
      goto LABEL_9;
    }
    objc_initWeak(&location, val);
    uint64_t v11 = *((id *)val + 5);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100020424;
    handler[3] = &unk_1001C8A58;
    objc_copyWeak(&v27, &location);
    uint32_t v12 = notify_register_dispatch("com.apple.srp-mdns-proxy.tls-key-update", (int *)val + 19, v11, handler);

    if (v12)
    {
      if (qword_1001F4870 != -1) {
        dispatch_once(&qword_1001F4870, &stru_1001C6418);
      }
      id v13 = (id)qword_1001F4868;
      char v14 = _NRLogIsLevelEnabled();

      if ((v14 & 1) == 0) {
        goto LABEL_22;
      }
      if (qword_1001F4870 != -1) {
        dispatch_once(&qword_1001F4870, &stru_1001C6418);
      }
      id v15 = (id)qword_1001F4868;
      _NRLogWithArgs();
    }
    else
    {
      id v16 = *((id *)val + 6);
      int v17 = (void *)_NRCopyLogObjectForNRUUID();
      int v18 = _NRLogIsLevelEnabled();

      if (!v18)
      {
LABEL_22:
        objc_destroyWeak(&v27);
        objc_destroyWeak(&location);
        goto LABEL_5;
      }
      id v15 = *((id *)val + 6);
      unsigned int v19 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    goto LABEL_22;
  }
  sub_10001FD04((uint64_t)val);
LABEL_5:
  id v7 = val;
LABEL_9:

  _objc_release_x1(v6, v7);
}

void sub_10002017C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10002019C(uint64_t a1)
{
  uint64_t v2 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 48));
  int v3 = sub_100140FAC(v2, @"853");
  unsigned int v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v3;

  objc_initWeak(&location, (id)a1);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  id v10 = sub_1000204A8;
  uint64_t v11 = &unk_1001C63F8;
  objc_copyWeak(&v12, &location);
  unsigned __int8 v5 = v9;
  uint64_t v19 = 0;
  id v20 = &v19;
  uint64_t v21 = 0x3032000000;
  id v22 = sub_10002054C;
  int v23 = sub_10002055C;
  CFDataRef v24 = sub_100020564(a1);
  if (v20[5])
  {
    ((void (*)(void *))v10)(v5);
  }
  else
  {
    objc_initWeak(&from, (id)a1);
    uint64_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 40));
    dispatch_source_set_timer(v6, 0, 0x2540BE400uLL, 0x3B9ACA00uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100020AB4;
    handler[3] = &unk_1001C63D0;
    objc_copyWeak(&v17, &from);
    id v16 = &v19;
    id v15 = v5;
    dispatch_source_set_event_handler(v6, handler);
    dispatch_activate(v6);
    id v7 = *(void **)(a1 + 88);
    *(void *)(a1 + 88) = v6;
    char v8 = v6;

    objc_destroyWeak(&v17);
    objc_destroyWeak(&from);
  }
  _Block_object_dispose(&v19, 8);

  objc_destroyWeak(&v12);
  objc_destroyWeak(&location);
}

void sub_1000203F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  _Block_object_dispose(&a23, 8);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100020424(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && !WeakRetained[12] && *((_DWORD *)WeakRetained + 19) == a2 && WeakRetained[8] == 2)
  {
    unsigned int v4 = WeakRetained;
    sub_10001E8F4(WeakRetained, 3);
    sub_10002019C((uint64_t)v4);
    id WeakRetained = v4;
  }
}

void sub_1000204A8(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v5 = WeakRetained;
  if (WeakRetained && (WeakRetained[8] | 2) == 3 && !WeakRetained[12])
  {
    objc_storeStrong((id *)WeakRetained + 4, a2);
    if (v6) {
      sub_10001E8F4(v5, 2);
    }
    else {
      sub_10001FD04((uint64_t)v5);
    }
  }
}

uint64_t sub_10002054C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002055C(uint64_t a1)
{
}

CFDataRef sub_100020564(uint64_t a1)
{
  v41[0] = kSecClass;
  v41[1] = kSecMatchLimit;
  v42[0] = kSecClassCertificate;
  v42[1] = kSecMatchLimitAll;
  v41[2] = kSecAttrAccessGroup;
  v41[3] = kSecAttrSynchronizable;
  v42[2] = @"com.apple.srp-mdns-proxy";
  v42[3] = &__kCFBooleanTrue;
  v41[4] = kSecReturnAttributes;
  v41[5] = kSecReturnRef;
  v42[4] = &__kCFBooleanTrue;
  v42[5] = &__kCFBooleanTrue;
  CFDictionaryRef v2 = +[NSDictionary dictionaryWithObjects:v42 forKeys:v41 count:6];
  CFTypeRef result = 0;
  OSStatus v3 = SecItemCopyMatching(v2, &result);
  if (v3 || !result)
  {
    if (result)
    {
      CFRelease(result);
      CFTypeRef result = 0;
    }
    if (v3 == -25308)
    {
      int v18 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled) {
        goto LABEL_22;
      }
    }
    else if (v3 == -25300)
    {
      char v14 = (void *)_NRCopyLogObjectForNRUUID();
      int v15 = _NRLogIsLevelEnabled();

      if (v15) {
        goto LABEL_22;
      }
    }
    else
    {
      id v20 = (void *)_NRCopyLogObjectForNRUUID();
      int v21 = _NRLogIsLevelEnabled();

      if (v21)
      {
LABEL_22:
        id v22 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();

        CFDataRef v10 = 0;
        goto LABEL_30;
      }
    }
    CFDataRef v10 = 0;
    goto LABEL_30;
  }
  CFTypeID v4 = CFGetTypeID(result);
  if (v4 != CFArrayGetTypeID())
  {
    id v27 = (void *)_NRCopyLogObjectForNRUUID();
    int v28 = _NRLogIsLevelEnabled();

    if (!v28) {
      goto LABEL_41;
    }
    id v29 = *(id *)(a1 + 48);
    id v13 = (void *)_NRCopyLogObjectForNRUUID();
    CFTypeID v30 = CFGetTypeID(result);

    CFTypeID v31 = v30;
LABEL_39:
    long long v35 = (__CFString *)CFCopyTypeIDDescription(v31);
    goto LABEL_40;
  }
  if (!CFArrayGetCount((CFArrayRef)result))
  {
    id v16 = (void *)_NRCopyLogObjectForNRUUID();
    int v17 = _NRLogIsLevelEnabled();

    if (v17) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)result, 0);
  CFTypeID v6 = CFGetTypeID(ValueAtIndex);
  if (v6 != CFDictionaryGetTypeID())
  {
    int v32 = (void *)_NRCopyLogObjectForNRUUID();
    int v33 = _NRLogIsLevelEnabled();

    if (!v33) {
      goto LABEL_41;
    }
    id v13 = (void *)_NRCopyLogObjectForNRUUID();
    CFTypeID v34 = CFGetTypeID(ValueAtIndex);
    long long v35 = (__CFString *)CFCopyTypeIDDescription(v34);
LABEL_40:
    _NRLogWithArgs();

    goto LABEL_26;
  }
  Value = (void *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, kSecValueRef);
  if (!Value)
  {
    long long v36 = (void *)_NRCopyLogObjectForNRUUID();
    int v37 = _NRLogIsLevelEnabled();

    if (v37) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }
  char v8 = Value;
  CFTypeID v9 = CFGetTypeID(Value);
  if (v9 != SecCertificateGetTypeID())
  {
    long long v38 = (void *)_NRCopyLogObjectForNRUUID();
    int v39 = _NRLogIsLevelEnabled();

    if (!v39) {
      goto LABEL_41;
    }
    id v13 = (void *)_NRCopyLogObjectForNRUUID();
    CFTypeID v31 = CFGetTypeID(v8);
    goto LABEL_39;
  }
  CFAbsoluteTimeGetCurrent();
  if ((SecCertificateIsValid() & 1) == 0)
  {
    int v23 = (void *)_NRCopyLogObjectForNRUUID();
    int v24 = _NRLogIsLevelEnabled();

    if (v24)
    {
LABEL_25:
      id v13 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
LABEL_26:
      CFDataRef v10 = 0;
      goto LABEL_27;
    }
LABEL_41:
    CFDataRef v10 = 0;
    CFTypeRef v25 = result;
    if (!result) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  CFDataRef v10 = SecCertificateCopyData((SecCertificateRef)v8);
  uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
  int v12 = _NRLogIsLevelEnabled();

  if (!v12) {
    goto LABEL_28;
  }
  id v13 = (void *)_NRCopyLogObjectForNRUUID();
  [(__CFData *)v10 length];
  _NRLogWithArgs();
LABEL_27:

LABEL_28:
  CFTypeRef v25 = result;
  if (result)
  {
LABEL_29:
    CFRelease(v25);
    CFTypeRef result = 0;
  }
LABEL_30:

  return v10;
}

void sub_100020AB4(uint64_t a1)
{
  id WeakRetained = (dispatch_source_t *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained && !*((unsigned char *)WeakRetained + 12))
  {
    ++*((unsigned char *)WeakRetained + 72);
    CFDataRef v10 = WeakRetained;
    CFDataRef v3 = sub_100020564((uint64_t)WeakRetained);
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned __int8 v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) || *((unsigned __int8 *)v10 + 72) >= 5u)
    {
      dispatch_source_cancel(v10[11]);
      dispatch_source_t v6 = v10[11];
      v10[11] = 0;

      if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
        *((unsigned char *)v10 + 72) = 0;
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      goto LABEL_8;
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    id WeakRetained = v10;
    if (IsLevelEnabled)
    {
      CFTypeID v9 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();

LABEL_8:
      id WeakRetained = v10;
    }
  }
}

id *sub_100020D58(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6, int a7, char a8)
{
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a5;
  id v20 = a6;
  if (a1)
  {
    v26.receiver = a1;
    v26.super_class = (Class)NRDNSProxyClient;
    int v21 = (id *)[super initWithQueue:v17 nrUUID:v18 delegate:v19];
    if (v21)
    {
      a1 = v21;
      objc_storeStrong(v21 + 3, a2);
      objc_storeStrong(a1 + 4, a6);
      *((_DWORD *)a1 + 4) = a7;
      *((unsigned char *)a1 + 13) = a8;
    }
    else
    {
      id v23 = sub_10001E14C();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v25 = sub_10001E14C();
        _NRLogWithArgs();
      }
      a1 = 0;
    }
  }

  return a1;
}

id *sub_10002100C(id *a1, void *a2, char a3)
{
  id v7 = a2;
  char v8 = v7;
  if (!a1) {
    goto LABEL_24;
  }
  if (!v7)
  {
    id v25 = sub_100021444();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_24;
    }
    id v16 = (char *)sub_100021444();
    goto LABEL_22;
  }
  v32.receiver = a1;
  v32.super_class = (Class)NRSCDInterfaceConfig;
  CFTypeID v9 = (id *)[super init];
  if (!v9)
  {
    id v27 = sub_100021444();
    int v28 = _NRLogIsLevelEnabled();

    id v16 = "-[NRSCDInterfaceConfig initWithInterfaceName:allowsLinkLocalAddresses:]";
    if (v28)
    {
      id v29 = sub_100021444();
      _NRLogWithArgs();
    }
    char v8 = (void *)_os_log_pack_size();
    a1 = (id *)((char *)&v31 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
    __error();
    uint64_t v30 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v30 = 136446210;
    *(void *)(v30 + 4) = "-[NRSCDInterfaceConfig initWithInterfaceName:allowsLinkLocalAddresses:]";
    sub_100021444();
    _NRLogAbortWithPack();
    goto LABEL_31;
  }
  a1 = v9;
  objc_storeStrong(v9 + 3, a2);
  id v10 = objc_alloc_init((Class)NSMutableArray);
  id v11 = a1[7];
  a1[7] = v10;

  id v12 = objc_alloc_init((Class)NSMutableArray);
  id v13 = a1[8];
  a1[8] = v12;

  id v14 = objc_alloc_init((Class)NSMutableDictionary);
  id v15 = a1[9];
  a1[9] = v14;

  *((unsigned char *)a1 + 8) = a3;
  sub_100021498((uint64_t)a1);
  id v16 = (char *)a1[3];
  [v16 UTF8String];
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, (CFStringRef)a1[3], kSCEntNetIPv4);
  id v18 = a1[4];
  a1[4] = (id)NetworkInterfaceEntity;

  if (!a1[4])
  {
    CFDataRef v3 = &unk_1001F4000;
    if (qword_1001F4880 == -1)
    {
LABEL_9:
      if (!_NRLogIsLevelEnabled())
      {
LABEL_23:

LABEL_24:
        id v23 = 0;
        goto LABEL_25;
      }
      if (v3[272] != -1) {
        dispatch_once(&qword_1001F4880, &stru_1001C6460);
      }
LABEL_22:
      _NRLogWithArgs();
      goto LABEL_23;
    }
LABEL_31:
    dispatch_once(&qword_1001F4880, &stru_1001C6460);
    goto LABEL_9;
  }
  CFStringRef v19 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, (CFStringRef)a1[3], kSCEntNetIPv6);
  id v20 = a1[5];
  a1[5] = (id)v19;

  if (!a1[5])
  {
    if (qword_1001F4880 != -1) {
      dispatch_once(&qword_1001F4880, &stru_1001C6460);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_23;
    }
    if (qword_1001F4880 == -1) {
      goto LABEL_22;
    }
    goto LABEL_32;
  }
  CFStringRef v21 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, (CFStringRef)a1[3], kSCEntNetLink);
  id v22 = a1[6];
  a1[6] = (id)v21;

  if (!a1[6])
  {
    if (qword_1001F4880 != -1) {
      dispatch_once(&qword_1001F4880, &stru_1001C6460);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_23;
    }
    if (qword_1001F4880 == -1) {
      goto LABEL_22;
    }
LABEL_32:
    dispatch_once(&qword_1001F4880, &stru_1001C6460);
    goto LABEL_22;
  }

  a1 = a1;
  id v23 = a1;
LABEL_25:

  return v23;
}

id sub_100021444()
{
  if (qword_1001F4880 != -1) {
    dispatch_once(&qword_1001F4880, &stru_1001C6460);
  }
  v0 = (void *)qword_1001F4878;

  return v0;
}

void sub_100021498(uint64_t a1)
{
  id v3 = *(id *)(a1 + 24);
  unsigned int v2 = if_nametoindex((const char *)[v3 UTF8String]);
  *(_DWORD *)(a1 + 12) = v2;
  if (!v2)
  {
    if (qword_1001F4880 != -1) {
      dispatch_once(&qword_1001F4880, &stru_1001C6460);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4880 != -1) {
        dispatch_once(&qword_1001F4880, &stru_1001C6460);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_10002158C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4878;
  qword_1001F4878 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000215D0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(_DWORD *)(result + 12) || !*(unsigned char *)(result + 9)) {
      return 0;
    }
    id v2 = *(id *)(result + 56);
    if ([v2 count])
    {

      return 1;
    }
    id v3 = [*(id *)(v1 + 64) count];

    return v3 != 0;
  }
  return result;
}

void sub_1000223AC(id a1)
{
  uint64_t v1 = _NRCopySerialQueueAttr();
  dispatch_queue_t v2 = dispatch_queue_create("terminusd_awdl_browse", v1);

  if (!v2)
  {
    id v4 = sub_10002252C();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = sub_10002252C();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v7 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v7 = 136446466;
    *(void *)(v7 + 4) = "nr_dispatch_queue_create";
    *(_WORD *)(v7 + 12) = 2080;
    *(void *)(v7 + 14) = "terminusd_awdl_browse";
    sub_10002252C();
    _NRLogAbortWithPack();
  }
  id v3 = (void *)qword_1001F4898;
  qword_1001F4898 = (uint64_t)v2;
}

id sub_10002252C()
{
  if (qword_1001F4890 != -1) {
    dispatch_once(&qword_1001F4890, &stru_1001C6480);
  }
  v0 = (void *)qword_1001F4888;

  return v0;
}

void sub_100022C30(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, void *a10)
{
  if (a4)
  {
    if (qword_1001F4890 != -1) {
      dispatch_once(&qword_1001F4890, &stru_1001C6480);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4890 == -1)
      {
LABEL_6:
        _NRLogWithArgs();
        return;
      }
LABEL_40:
      dispatch_once(&qword_1001F4890, &stru_1001C6480);
      goto LABEL_6;
    }
  }
  else if (a5)
  {
    if (a6)
    {
      if (a10)
      {
        id v18 = a10;
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v15 = 0;
          if (a8 && a9)
          {
            id v15 = +[NSData dataWithBytes:a9 length:a8];
          }
          id v16 = [objc_alloc((Class)NSString) initWithUTF8String:a5];
          id v17 = [objc_alloc((Class)NSString) initWithUTF8String:a6];
          [v18 handleReplyFullName:v16 hostTarget:v17 port:a7 txtRecord:v15 ifIndex:a3];
        }
        else
        {
          if (qword_1001F4890 != -1) {
            dispatch_once(&qword_1001F4890, &stru_1001C6480);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4890 != -1) {
              dispatch_once(&qword_1001F4890, &stru_1001C6480);
            }
            _NRLogWithArgs();
          }
        }
      }
      else
      {
        if (qword_1001F4890 != -1) {
          dispatch_once(&qword_1001F4890, &stru_1001C6480);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4890 == -1) {
            goto LABEL_6;
          }
          goto LABEL_40;
        }
      }
    }
    else
    {
      if (qword_1001F4890 != -1) {
        dispatch_once(&qword_1001F4890, &stru_1001C6480);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4890 == -1) {
          goto LABEL_6;
        }
        goto LABEL_40;
      }
    }
  }
  else
  {
    if (qword_1001F4890 != -1) {
      dispatch_once(&qword_1001F4890, &stru_1001C6480);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4890 == -1) {
        goto LABEL_6;
      }
      goto LABEL_40;
    }
  }
}

void sub_1000231C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4888;
  qword_1001F4888 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000236D4(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  if (a4)
  {
    if (qword_1001F4890 != -1) {
      dispatch_once(&qword_1001F4890, &stru_1001C6480);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4890 == -1)
      {
LABEL_6:
        _NRLogWithArgs();
        return;
      }
LABEL_41:
      dispatch_once(&qword_1001F4890, &stru_1001C6480);
      goto LABEL_6;
    }
    return;
  }
  if (!a5)
  {
    if (qword_1001F4890 != -1) {
      dispatch_once(&qword_1001F4890, &stru_1001C6480);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4890 == -1) {
        goto LABEL_6;
      }
      goto LABEL_41;
    }
    return;
  }
  if (!a6)
  {
    if (qword_1001F4890 != -1) {
      dispatch_once(&qword_1001F4890, &stru_1001C6480);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4890 == -1) {
        goto LABEL_6;
      }
      goto LABEL_41;
    }
    return;
  }
  if (a7)
  {
    if (a8)
    {
      id v16 = a8;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v13 = [objc_alloc((Class)NSString) initWithUTF8String:a5];
        id v14 = [objc_alloc((Class)NSString) initWithUTF8String:a6];
        id v15 = [objc_alloc((Class)NSString) initWithUTF8String:a7];
        [v16 handleReplyName:v13 type:v14 domain:v15 ifIndex:a3 add:(a2 >> 1) & 1];
      }
      else
      {
        if (qword_1001F4890 != -1) {
          dispatch_once(&qword_1001F4890, &stru_1001C6480);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_38;
        }
        id v13 = sub_10002252C();
        _NRLogWithArgs();
      }
    }
    else
    {
      if (qword_1001F4890 != -1) {
        dispatch_once(&qword_1001F4890, &stru_1001C6480);
      }
      if (!_NRLogIsLevelEnabled()) {
        return;
      }
      id v16 = sub_10002252C();
      _NRLogWithArgs();
    }
LABEL_38:

    return;
  }
  if (qword_1001F4890 != -1) {
    dispatch_once(&qword_1001F4890, &stru_1001C6480);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4890 == -1) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
}

id sub_100024018(unsigned int a1)
{
  switch(a1)
  {
    case 0u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "Invalid";
      goto LABEL_28;
    case 1u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "Hello";
      goto LABEL_28;
    case 2u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "UpdateWiFiAddressIPv6";
      goto LABEL_28;
    case 3u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "UpdateWiFiAddressIPv4";
      goto LABEL_28;
    case 4u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "UpdateWiFiSignature";
      goto LABEL_28;
    case 5u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "PreferWiFi";
      goto LABEL_28;
    case 6u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "DeviceLinkState";
      goto LABEL_28;
    case 7u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "PreferWiFiAck";
      goto LABEL_28;
    case 8u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "ForceWoW";
      goto LABEL_28;
    case 9u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "UpdateAWDLAddressIPv6";
      goto LABEL_28;
    case 0xAu:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "AWDLReachable";
      goto LABEL_28;
    case 0xBu:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "RequestFlags";
      goto LABEL_28;
    case 0xCu:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "NetInfo";
      goto LABEL_28;
    case 0xDu:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "LinkUpgrade";
      goto LABEL_28;
    case 0xEu:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "DeviceThermalPressureLevel";
      goto LABEL_28;
    case 0xFu:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "CountryCode";
      goto LABEL_28;
    case 0x10u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "DNSProxy";
      goto LABEL_28;
    case 0x11u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "DNSProxyUpdate";
      goto LABEL_28;
    case 0x12u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "DiscoveryProxy";
      goto LABEL_28;
    case 0x13u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "DiscoveryProxyUpdate";
      goto LABEL_28;
    case 0x14u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "ApplicationServiceEndpointsRequest";
      goto LABEL_28;
    case 0x15u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "ApplicationServiceEndpointsResponse";
      goto LABEL_28;
    case 0x16u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "DevicePluggedIn";
      goto LABEL_28;
    case 0x17u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "TLSIdentitySPKI";
      goto LABEL_28;
    default:
      if (a1 != 255) {
        return [objc_alloc((Class)NSString) initWithFormat:@"Unknown(%lld)", a1];
      }
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "Test";
LABEL_28:
      return [v1 initWithUTF8String:v2];
  }
}

unint64_t sub_100024424(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v1 = *(void *)(a1 + 40);
  if (!v1)
  {
    int v2 = *(unsigned __int8 *)(a1 + 10);
    if (*(unsigned char *)(a1 + 10))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      if (v3)
      {
        if (v2 == 2)
        {
          unint64_t v1 = bswap64(*(void *)(v3 + 8));
          goto LABEL_10;
        }
        if (v2 == 1)
        {
          unint64_t v1 = bswap32(*(unsigned __int16 *)(v3 + 4)) >> 16;
LABEL_10:
          *(void *)(a1 + 40) = v1;
          return v1;
        }
        return 0;
      }
      id v8 = sub_100024670();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v10 = sub_100024670();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v5 = sub_100024670();
      int v6 = _NRLogIsLevelEnabled();

      if (v6)
      {
        id v7 = sub_100024670();
        _NRLogWithArgs();
      }
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 136446210;
    *(void *)(v11 + 4) = "-[NRLinkDirectorMessage identifier]";
    sub_100024670();
    _NRLogAbortWithPack();
  }
  return v1;
}

id sub_100024670()
{
  if (qword_1001F48C0 != -1) {
    dispatch_once(&qword_1001F48C0, &stru_1001C6500);
  }
  v0 = (void *)qword_1001F48B8;

  return v0;
}

void sub_1000246C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F48B8;
  qword_1001F48B8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100024764(id a1)
{
  os_log_t v1 = sub_1000247A4([NRLinkDirectorMessageManager alloc]);
  uint64_t v2 = qword_1001F48A8;
  qword_1001F48A8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void *sub_1000247A4(void *a1)
{
  if (!a1) {
    return 0;
  }
  v12.receiver = a1;
  v12.super_class = (Class)NRLinkDirectorMessageManager;
  os_log_t v1 = [super init];
  if (!v1)
  {
    id v8 = sub_100024670();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = sub_100024670();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 136446210;
    *(void *)(v11 + 4) = "-[NRLinkDirectorMessageManager initManager]";
    sub_100024670();
    _NRLogAbortWithPack();
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = sub_10015BD9C();
  id v4 = (void *)v2[1];
  v2[1] = v3;

  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  int v6 = (void *)v2[2];
  v2[2] = v5;

  return v2;
}

unint64_t sub_100024914(unint64_t a1, void *a2, unsigned int a3, char a4)
{
  id v8 = a2;
  CFTypeID v9 = v8;
  if (!a1) {
    goto LABEL_20;
  }
  if (!v8)
  {
    id v17 = sub_100024670();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v19 = sub_100024670();
      _NRLogWithArgs();

      unint64_t v15 = 0;
      goto LABEL_11;
    }
LABEL_20:
    unint64_t v15 = 0;
    goto LABEL_11;
  }
  v29.receiver = (id)a1;
  v29.super_class = (Class)NRLinkDirectorMessage;
  id v10 = (id *)[super init];
  if (!v10)
  {
    id v20 = sub_100024670();
    int v21 = _NRLogIsLevelEnabled();

    if (v21)
    {
      id v22 = sub_100024670();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    a1 = (unint64_t)&v28 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v23 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v23 = 136446210;
    *(void *)(v23 + 4) = "-[NRLinkDirectorMessage initDirectorMessageWithNRUUID:messageLen:messageVersion:]";
    sub_100024670();
    _NRLogAbortWithPack();
    goto LABEL_17;
  }
  uint64_t v11 = v10;
  objc_storeStrong(v10 + 4, a2);
  *((_DWORD *)v11 + 4) = a3;
  *((unsigned char *)v11 + 10) = a4;
  a1 = a3;
  objc_super v12 = malloc_type_calloc(1uLL, a3, 0xF1748037uLL);
  if (!v12)
  {
LABEL_17:
    id v24 = sub_100024670();
    int v25 = _NRLogIsLevelEnabled();

    if (v25)
    {
      id v26 = sub_100024670();
      _NRLogWithArgs();
    }
    CFTypeID v9 = (void *)_os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v27 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v27 = 136446722;
    *(void *)(v27 + 4) = "strict_calloc";
    *(_WORD *)(v27 + 12) = 2048;
    *(void *)(v27 + 14) = 1;
    *(_WORD *)(v27 + 22) = 2048;
    *(void *)(v27 + 24) = a1;
    sub_100024670();
    _NRLogAbortWithPack();
    goto LABEL_20;
  }
  v11[6] = v12;
  int v13 = *((unsigned __int8 *)v11 + 10);
  if (v13 == 1)
  {
    __int16 v14 = 8;
    goto LABEL_9;
  }
  if (v13 == 2)
  {
    __int16 v14 = 16;
LABEL_9:
    *((_WORD *)v11 + 6) = v14;
  }
  a1 = v11;
  unint64_t v15 = a1;
LABEL_11:

  return v15;
}

uint64_t sub_100024C48(uint64_t result, char a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 10))
    {
      uint64_t v2 = *(unsigned char **)(result + 48);
      if (v2)
      {
        if (*(unsigned __int8 *)(result + 10) <= 2u) {
          *uint64_t v2 = a2;
        }
        return result;
      }
      id v6 = sub_100024670();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v8 = sub_100024670();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v3 = sub_100024670();
      int v4 = _NRLogIsLevelEnabled();

      if (v4)
      {
        id v5 = sub_100024670();
        _NRLogWithArgs();
      }
    }
    _os_log_pack_size();
    __error();
    uint64_t v9 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v9 = 136446210;
    *(void *)(v9 + 4) = "-[NRLinkDirectorMessage writeMessageVersionToSendBuffer:]";
    sub_100024670();
    _NRLogAbortWithPack();
  }
  return result;
}

void sub_100024E38(uint64_t a1, _WORD *a2, size_t __n)
{
  if (!a1) {
    return;
  }
  int v3 = *(unsigned __int8 *)(a1 + 10);
  if (!*(unsigned char *)(a1 + 10))
  {
    id v7 = sub_100024670();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = sub_100024670();
      _NRLogWithArgs();
    }
LABEL_21:
    _os_log_pack_size();
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 136446210;
    *(void *)(v13 + 4) = "-[NRLinkDirectorMessage writeMessageIdentifierNBOToSendBuffer:len:]";
    sub_100024670();
    _NRLogAbortWithPack();
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4)
  {
    id v10 = sub_100024670();
    int v11 = _NRLogIsLevelEnabled();

    if (v11)
    {
      id v12 = sub_100024670();
      _NRLogWithArgs();
    }
    goto LABEL_21;
  }
  if (v3 == 2)
  {
    memcpy((void *)(v4 + 8), a2, __n);
  }
  else if (v3 == 1)
  {
    if (__n >= 3)
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      int v6 = _NRLogIsLevelEnabled();

      if (v6)
      {
        __int16 v14 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      *(_WORD *)(v4 + 4) = *a2;
    }
  }
}

uint64_t sub_100025114(uint64_t result, __int16 a2)
{
  int v2 = *(unsigned __int8 *)(result + 10);
  if (!*(unsigned char *)(result + 10))
  {
    id v5 = sub_100024670();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v7 = sub_100024670();
      _NRLogWithArgs();
    }
LABEL_14:
    _os_log_pack_size();
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 136446210;
    *(void *)(v11 + 4) = "-[NRLinkDirectorMessage writeMessagePayloadLengthNBOToSendBuffer:len:]";
    sub_100024670();
    _NRLogAbortWithPack();
  }
  uint64_t v3 = *(void *)(result + 48);
  if (!v3)
  {
    id v8 = sub_100024670();
    int v9 = _NRLogIsLevelEnabled();

    if (v9)
    {
      id v10 = sub_100024670();
      _NRLogWithArgs();
    }
    goto LABEL_14;
  }
  if (v2 == 1)
  {
    uint64_t v4 = 6;
  }
  else
  {
    if (v2 != 2) {
      return result;
    }
    uint64_t v4 = 2;
  }
  *(_WORD *)(v3 + v4) = a2;
  return result;
}

void *sub_100025314(void *a1, void *a2, int a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_12;
  }
  if (a3 != 1)
  {
    if (a3 == 2)
    {
      int v6 = (void *)sub_100024914((unint64_t)a1, v5, 0x10u, 2);
      sub_100024C48((uint64_t)v6, 2);
      unint64_t v7 = sub_100113F18();
      if (v6)
      {
        v6[5] = v7;
        unint64_t v18 = bswap64(sub_100024424((uint64_t)v6));
        id v8 = &v18;
        uint64_t v9 = (uint64_t)v6;
        size_t v10 = 8;
LABEL_8:
        sub_100024E38(v9, v8, v10);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      unint64_t v15 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
LABEL_12:
    id v12 = 0;
    goto LABEL_13;
  }
  int v6 = (void *)sub_100024914((unint64_t)a1, v5, 8u, 1);
  sub_100024C48((uint64_t)v6, 1);
  uint64_t add_explicit = atomic_fetch_add_explicit(word_1001F3C70, 1u, memory_order_relaxed);
  if (v6)
  {
    v6[5] = add_explicit;
    __int16 v17 = bswap32(sub_100024424((uint64_t)v6)) >> 16;
    id v8 = (unint64_t *)&v17;
    uint64_t v9 = (uint64_t)v6;
    size_t v10 = 2;
    goto LABEL_8;
  }
LABEL_9:
  a1 = v6;
  id v12 = a1;
LABEL_13:

  return v12;
}

void *sub_100025474(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!a1)
  {
LABEL_7:
    id v5 = 0;
    goto LABEL_4;
  }
  if (!v3)
  {
    id v7 = sub_100024670();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = sub_100024670();
      _NRLogWithArgs();
    }
    goto LABEL_7;
  }
  a1 = sub_100025314(a1, v3, 2);
  id v5 = a1;
LABEL_4:

  return v5;
}

void *sub_100025528(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!a1)
  {
LABEL_9:
    int v6 = 0;
    goto LABEL_6;
  }
  if (!v3)
  {
    id v8 = sub_100024670();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = sub_100024670();
      _NRLogWithArgs();
    }
    goto LABEL_9;
  }
  id v5 = sub_100025314(a1, v3, 2);
  if (v5) {
    v5[8] = 1;
  }
  a1 = v5;
  int v6 = a1;
LABEL_6:

  return v6;
}

unint64_t sub_1000255E8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  unsigned int v6 = [v4 length];
  unsigned __int8 v48 = 0;
  if (!v6)
  {
    id v9 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
LABEL_20:
      _NRLogWithArgs();

      goto LABEL_21;
    }
    goto LABEL_21;
  }
  [v4 getBytes:&v48 length:1];
  if (v48 == 2)
  {
    v47[0] = 0;
    v47[1] = 0;
    if (v6 <= 0xF)
    {
      id v12 = (void *)_NRCopyLogObjectForNRUUID();
      int v13 = _NRLogIsLevelEnabled();

      if (v13)
      {
LABEL_11:
        uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
        goto LABEL_20;
      }
LABEL_21:
      unint64_t v25 = 0;
      goto LABEL_22;
    }
    [v4 getBytes:v47 length:16];
    __int16 v21 = WORD1(v47[0]);
    unsigned int v22 = __rev16(WORD1(v47[0]));
    uint64_t v23 = (void *)_NRCopyLogObjectForNRUUID();
    if (v22 + 16 > v6)
    {
      int v24 = _NRLogIsLevelEnabled();

      if (!v24) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
    int v34 = _NRLogIsLevelEnabled();

    if (v34)
    {
      long long v35 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    long long v36 = [NRLinkDirectorMessage alloc];
    unint64_t v37 = sub_100024914((unint64_t)v36, v5, v22 + 16, v48);
    unint64_t v25 = v37;
    if (v37)
    {
      *(_WORD *)(v37 + 14) = v22;
      sub_100025114(v37, v21);
      [v4 getBytes:*(void *)(v25 + 48) length:v22 + 16];
      *(void *)(v25 + 56) = atomic_fetch_add_explicit(&qword_1001F3C78, 1uLL, memory_order_relaxed);
    }
    else
    {
      [v4 getBytes:0 length:v22 + 16];
      atomic_fetch_add_explicit(&qword_1001F3C78, 1uLL, memory_order_relaxed);
    }
    long long v38 = (void *)_NRCopyLogObjectForNRUUID();
    int v39 = _NRLogIsLevelEnabled();

    if (v39)
    {
LABEL_34:
      unint64_t v40 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
  else
  {
    if (v48 != 1)
    {
      __int16 v14 = (void *)_NRCopyLogObjectForNRUUID();
      int v15 = _NRLogIsLevelEnabled();

      if (v15)
      {
        id v16 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      goto LABEL_21;
    }
    v47[0] = 0;
    if (v6 <= 7)
    {
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      if (v8) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
    [v4 getBytes:v47 length:8];
    __int16 v17 = HIWORD(v47[0]);
    uint64_t v18 = __rev16(HIWORD(v47[0]));
    id v19 = (void *)_NRCopyLogObjectForNRUUID();
    if ((int)v18 + 8 > v6)
    {
      int v20 = _NRLogIsLevelEnabled();

      if (!v20) {
        goto LABEL_21;
      }
LABEL_19:
      uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
      goto LABEL_20;
    }
    int v27 = _NRLogIsLevelEnabled();

    if (v27)
    {
      uint64_t v28 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v43 = 604;
      uint64_t v44 = v48;
      id v41 = "";
      uint64_t v42 = "+[NRLinkDirectorMessage createMessageWithData:nrUUID:]";
      uint64_t v45 = bswap32(WORD2(v47[0])) >> 16;
      uint64_t v46 = v18;
      _NRLogWithArgs();
    }
    objc_super v29 = [NRLinkDirectorMessage alloc];
    unint64_t v30 = sub_100024914((unint64_t)v29, v5, (int)v18 + 8, v48);
    unint64_t v25 = v30;
    if (v30)
    {
      *(_WORD *)(v30 + 14) = v18;
      sub_100025114(v30, v17);
      uint64_t v31 = *(void *)(v25 + 48);
    }
    else
    {
      uint64_t v31 = 0;
    }
    [v4 getBytes:v31 length:(v18 + 8) bytes:(v41, v42, v43, v44, v45, v46)];
    objc_super v32 = (void *)_NRCopyLogObjectForNRUUID();
    int v33 = _NRLogIsLevelEnabled();

    if (v33) {
      goto LABEL_34;
    }
  }
LABEL_22:

  return v25;
}

void sub_100025B00(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (!a1) {
    goto LABEL_21;
  }
  unint64_t v37 = v5;
  if (v5)
  {
    id v6 = [v5 length];
    if ((unint64_t)v6 >= 0x10000)
    {
      id v19 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id v5 = v37;
      if (IsLevelEnabled)
      {
        __int16 v21 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();

        goto LABEL_20;
      }
LABEL_21:

      return;
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  uint64_t v7 = *(unsigned __int16 *)(a1 + 14);
  int v8 = *(_DWORD *)(a1 + 16);
  if (v8 != *(unsigned __int16 *)(a1 + 12) + v7)
  {
    int v15 = (void *)_NRCopyLogObjectForNRUUID();
    int v16 = _NRLogIsLevelEnabled();

    id v5 = v37;
    if (v16)
    {
      id v17 = *(id *)(a1 + 32);
      uint64_t v18 = (void *)_NRCopyLogObjectForNRUUID();

      _NRLogWithArgs();
LABEL_20:
      id v5 = v37;
      goto LABEL_21;
    }
    goto LABEL_21;
  }
  uint64_t v9 = (unsigned __int16)v6;
  int v10 = (unsigned __int16)v6 + 3;
  size_t v11 = v8 + (unsigned __int16)((_WORD)v6 + 3);
  *(_DWORD *)(a1 + 16) = v11;
  if (!v11)
  {
    id v23 = sub_100024670();
    int v24 = _NRLogIsLevelEnabled();

    if (v24)
    {
      id v25 = sub_100024670();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v26 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v26 = 136446210;
    *(void *)(v26 + 4) = "_strict_reallocf";
LABEL_30:
    sub_100024670();
    _NRLogAbortWithPack();
  }
  id v12 = (char *)reallocf(*(void **)(a1 + 48), v11);
  if (!v12)
  {
    id v27 = sub_100024670();
    int v28 = _NRLogIsLevelEnabled();

    if (v28)
    {
      id v29 = sub_100024670();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v30 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v30 = 136446466;
    *(void *)(v30 + 4) = "_strict_reallocf";
    *(_WORD *)(v30 + 12) = 2048;
    *(void *)(v30 + 14) = v11;
    goto LABEL_30;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 48) = v12;
  int v13 = *(unsigned __int8 *)(a1 + 10);
  if (v13 == 1)
  {
    uint64_t v14 = 8;
    goto LABEL_17;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 16;
LABEL_17:
    unsigned int v22 = &v12[v14 + v7];
    *unsigned int v22 = a2;
    *(_WORD *)(v22 + 1) = __rev16(v9);
    if (v9) {
      [v37 getBytes:v22 + 3 length:v9];
    }
    *(_WORD *)(a1 + 14) = v7 + v10;
    sub_100025114(a1, bswap32(v7 + v10) >> 16);
    goto LABEL_20;
  }
  id v31 = sub_100024670();
  int v32 = _NRLogIsLevelEnabled();

  if (v32)
  {
    id v33 = sub_100024670();
    _NRLogWithArgs();
  }
  _os_log_pack_size();
  __chkstk_darwin();
  __error();
  uint64_t v34 = _os_log_pack_fill();
  int v35 = *(unsigned __int8 *)(a1 + 10);
  *(_DWORD *)uint64_t v34 = 136446466;
  *(void *)(v34 + 4) = "-[NRLinkDirectorMessage addType:data:]";
  *(_WORD *)(v34 + 12) = 1024;
  *(_DWORD *)(v34 + 14) = v35;
  sub_100024670();
  uint64_t v36 = _NRLogAbortWithPack();
  sub_100025FA0(v36);
}

void sub_100025FA0(uint64_t a1, char a2, char a3)
{
  if (a1)
  {
    char v6 = a3;
    id v5 = [objc_alloc((Class)NSData) initWithBytes:&v6 length:1];
    sub_100025B00(a1, a2, v5);
  }
}

void sub_100026010(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  id v7 = a2;
  id v17 = v7;
  if (v7)
  {
    uint64_t v8 = sub_100116B0C(v7, a3, 1);
    if (!v8)
    {
      if (qword_1001F48C0 != -1) {
        dispatch_once(&qword_1001F48C0, &stru_1001C6500);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48C0 != -1) {
          dispatch_once(&qword_1001F48C0, &stru_1001C6500);
        }
        _NRLogWithArgs();
        id v9 = 0;
      }
      else
      {
        id v9 = 0;
      }
      goto LABEL_23;
    }
    id v9 = (id)v8;
    if ([v17 addressFamily] == (id)30)
    {
      if (a4) {
        char v10 = 9;
      }
      else {
        char v10 = 2;
      }
      goto LABEL_7;
    }
    id v11 = [v17 addressFamily];
    if (v11 == (id)2 && a4)
    {
      id v12 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v14 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      goto LABEL_23;
    }
    if (v11 == (id)2)
    {
      char v10 = 3;
LABEL_7:
      sub_100025B00(a1, v10, v9);
    }
  }
  else
  {
    id v15 = sub_100024670();
    int v16 = _NRLogIsLevelEnabled();

    if (!v16) {
      goto LABEL_24;
    }
    id v9 = sub_100024670();
    _NRLogWithArgs();
  }
LABEL_23:

LABEL_24:
}

unsigned __int16 *sub_1000261E8(void *a1, uint64_t a2)
{
  if (a1)
  {
    if (a1[6])
    {
      self;
      if (qword_1001F48B0 != -1) {
        dispatch_once(&qword_1001F48B0, &stru_1001C64C0);
      }
      uint64_t v5 = qword_1001F48A8;
      char v6 = a1;
      if (!v5) {
        goto LABEL_56;
      }
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v5 + 8));
      id v7 = *(void **)(v5 + 16);
      uint64_t v8 = *((void *)v6 + 4);
      id v9 = v7;
      char v10 = [v9 objectForKeyedSubscript:v8];

      if (!v10)
      {
        id v23 = (void *)_NRCopyLogObjectForNRUUID();
        char IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v25 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();

          unsigned int v22 = 0;
          goto LABEL_83;
        }
LABEL_56:
        unsigned int v22 = 0;
        goto LABEL_83;
      }
      id v11 = +[NSNumber numberWithUnsignedChar:a2];
      id v12 = [v10 objectForKeyedSubscript:v11];
      if (v12)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
LABEL_55:

          goto LABEL_56;
        }
        id v13 = v12[1];
        uint64_t v14 = v13;
        if (v13)
        {
          int v2 = (NRLinkDirectorMessageState *)[v13 unsignedLongLongValue];
          if ((unint64_t)v2 >= sub_100024424((uint64_t)v6))
          {
            id v15 = v12[2];
            id v16 = [v14 unsignedLongLongValue];
            if (v16 == (id)sub_100024424((uint64_t)v6) && [v15 unsignedLongLongValue] == *((id *)v6 + 7))
            {
              id v17 = v15;
              uint64_t v18 = (void *)_NRCopyLogObjectForNRUUID();
              int v2 = (NRLinkDirectorMessageState *)_NRLogIsLevelEnabled();

              if (v2)
              {
                id v19 = (void *)_NRCopyLogObjectForNRUUID();
                sub_100024424((uint64_t)v6);
                _NRLogWithArgs();
              }
              goto LABEL_22;
            }
            id v56 = (void *)_NRCopyLogObjectForNRUUID();
            int v57 = _NRLogIsLevelEnabled();

            if (v57)
            {
              id v58 = *((id *)v6 + 4);
              unsigned int v59 = (void *)_NRCopyLogObjectForNRUUID();
              [v14 unsignedLongLongValue];

              sub_100024424((uint64_t)v6);
              _NRLogWithArgs();
            }
            goto LABEL_55;
          }
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
LABEL_22:

      uint64_t v26 = (unsigned __int16 *)objc_alloc_init((Class)NSMutableArray);
      uint64_t v27 = v6[7];
      if (*((_DWORD *)v6 + 4) == v6[6] + v27)
      {
        int v28 = *((unsigned __int8 *)v6 + 10);
        unsigned int v91 = a2;
        if (v28 == 1)
        {
          uint64_t v29 = 8;
          if (!v6[7]) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v28 != 2)
          {
            id v82 = sub_100024670();
            int v83 = _NRLogIsLevelEnabled();

            uint64_t v52 = "-[NRLinkDirectorMessage copyAllDataForType:]";
            if (v83)
            {
              id v84 = sub_100024670();
              _NRLogWithArgs();
            }
            uint64_t v51 = _os_log_pack_size();
            __chkstk_darwin(v51);
            __error();
            uint64_t v85 = _os_log_pack_fill();
            int v86 = *((unsigned __int8 *)v6 + 10);
            *(_DWORD *)uint64_t v85 = 136446466;
            *(void *)(v85 + 4) = "-[NRLinkDirectorMessage copyAllDataForType:]";
            *(_WORD *)(v85 + 12) = 1024;
            *(_DWORD *)(v85 + 14) = v86;
            sub_100024670();
            _NRLogAbortWithPack();
            goto LABEL_88;
          }
          uint64_t v29 = 16;
          if (!v6[7])
          {
LABEL_44:
            if (![v26 count])
            {
LABEL_82:
              char v6 = v26;
              unsigned int v22 = v6;
              goto LABEL_83;
            }
            self;
            if (qword_1001F48B0 != -1) {
              dispatch_once(&qword_1001F48B0, &stru_1001C64C0);
            }
            uint64_t v51 = qword_1001F48A8;
            uint64_t v52 = v6;
            if (!v51)
            {
LABEL_81:

              goto LABEL_82;
            }
            dispatch_assert_queue_V2(*(dispatch_queue_t *)(v51 + 8));
            uint64_t v53 = *((void *)v6 + 4);
            id v54 = *(id *)(v51 + 16);
            uint64_t v27 = [v54 objectForKeyedSubscript:v53];

            if (!v27)
            {
              long long v66 = (void *)_NRCopyLogObjectForNRUUID();
              int v67 = _NRLogIsLevelEnabled();

              if (!v67)
              {
LABEL_80:

                goto LABEL_81;
              }
              id v12 = (id *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
LABEL_79:

              goto LABEL_80;
            }
            id v12 = +[NSNumber numberWithUnsignedChar:v91];
            uint64_t v55 = +[NSNumber numberWithUnsignedLongLong:sub_100024424((uint64_t)v52)];
            int v2 = [(id)v27 objectForKeyedSubscript:v12];
            id v88 = v26;
            if (v2)
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                long long v79 = (void *)_NRCopyLogObjectForNRUUID();
                int v80 = _NRLogIsLevelEnabled();

                if (!v80)
                {
                  id v75 = (void *)v55;
LABEL_78:

                  uint64_t v26 = v88;
                  goto LABEL_79;
                }
                long long v69 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
                id v75 = (void *)v55;
LABEL_77:

                goto LABEL_78;
              }
              int v89 = (void *)v55;
              goto LABEL_64;
            }
            int v89 = (void *)v55;
            int v2 = objc_alloc_init(NRLinkDirectorMessageState);
            if (v2)
            {
LABEL_64:
              long long v68 = v2->_sequenceNum;
              long long v69 = v68;
              if (v68)
              {
                unint64_t v70 = [(NSNumber *)v68 unsignedLongLongValue];
                if (v70 > sub_100024424((uint64_t)v52))
                {
                  long long v71 = (void *)_NRCopyLogObjectForNRUUID();
                  int v72 = _NRLogIsLevelEnabled();

                  if (!v72)
                  {
                    id v75 = v89;
                    goto LABEL_77;
                  }
                  id v73 = *((id *)v6 + 4);
                  id v74 = (id)_NRCopyLogObjectForNRUUID();
                  [v69 unsignedLongLongValue];

                  sub_100024424((uint64_t)v52);
                  _NRLogWithArgs();
                  id v75 = v89;
                  goto LABEL_72;
                }
              }
              id v75 = v89;
              objc_storeStrong((id *)&v2->_sequenceNum, v89);
              char v76 = 0;
LABEL_69:
              uint64_t v77 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *((void *)v52 + 7), v88);
              if ((v76 & 1) == 0) {
                objc_storeStrong((id *)&v2->_localReceiveID, v77);
              }

              [(id)v27 setObject:v2 forKeyedSubscript:v12];
              uint64_t v78 = *((void *)v6 + 4);
              id v74 = *(id *)(v51 + 16);
              [v74 setObject:v27 forKeyedSubscript:v78];
LABEL_72:

              goto LABEL_77;
            }
LABEL_88:
            long long v69 = 0;
            char v76 = 1;
            id v75 = v89;
            goto LABEL_69;
          }
        }
        unsigned __int16 v34 = 0;
        uint64_t v35 = a1[6] + v29;
        unint64_t v36 = v35 + v6[7];
        int v90 = v6[7];
        while (1)
        {
          unint64_t v40 = (void *)_NRCopyLogObjectForNRUUID();
          int v41 = _NRLogIsLevelEnabled();

          if (v41)
          {
            uint64_t v42 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
          uint64_t v43 = (unsigned __int8 *)(v35 + v34);
          uint64_t v44 = v43 + 3;
          if ((unint64_t)(v43 + 3) > v36)
          {
            long long v60 = (void *)_NRCopyLogObjectForNRUUID();
            int v61 = _NRLogIsLevelEnabled();

            if (!v61) {
              goto LABEL_29;
            }
            goto LABEL_58;
          }
          unsigned int v45 = *(unsigned __int16 *)(v43 + 1);
          uint64_t v46 = __rev16(v45);
          if ((unint64_t)&v44[v46] > v36) {
            break;
          }
          if (*v43 == v91)
          {
            uint64_t v27 = v35;
            int v47 = v26;
            unsigned __int8 v48 = (void *)_NRCopyLogObjectForNRUUID();
            int v49 = _NRLogIsLevelEnabled();

            if (v49)
            {
              id v50 = (void *)_NRCopyLogObjectForNRUUID();
              id v87 = sub_100024018(v91);
              _NRLogWithArgs();
            }
            if (v45)
            {
              id v37 = [objc_alloc((Class)NSData) initWithBytes:v44 length:v46];
            }
            else
            {
              id v37 = +[NSData data];
            }
            long long v38 = v37;
            uint64_t v26 = v47;
            [v47 addObject:v37];

            uint64_t v35 = v27;
            LODWORD(v27) = v90;
          }
          __int16 v39 = v34 + v46;
          v34 += v46 + 3;
          if ((unsigned __int16)(v39 + 3) >= v27) {
            goto LABEL_44;
          }
        }
        uint64_t v64 = (void *)_NRCopyLogObjectForNRUUID();
        int v65 = _NRLogIsLevelEnabled();

        if (v65)
        {
LABEL_58:
          id v62 = *((id *)v6 + 4);
          long long v63 = (void *)_NRCopyLogObjectForNRUUID();

          _NRLogWithArgs();
        }
      }
      else
      {
        uint64_t v30 = (void *)_NRCopyLogObjectForNRUUID();
        int v31 = _NRLogIsLevelEnabled();

        if (v31)
        {
          id v32 = *((id *)v6 + 4);
          id v33 = (void *)_NRCopyLogObjectForNRUUID();

          _NRLogWithArgs();
        }
      }
LABEL_29:
      unsigned int v22 = 0;
      char v6 = v26;
LABEL_83:

      return v22;
    }
    int v20 = (void *)_NRCopyLogObjectForNRUUID();
    int v21 = _NRLogIsLevelEnabled();

    if (v21)
    {
      char v6 = (unsigned __int16 *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
      unsigned int v22 = 0;
      goto LABEL_83;
    }
  }
  return 0;
}

int64_t sub_100026CB0(id a1, id a2, id a3)
{
  id v4 = a3;
  uint64_t v5 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [a2 metric]);
  id v6 = [v4 metric];

  id v7 = +[NSNumber numberWithUnsignedShort:v6];
  id v8 = [v5 compare:v7];

  return (int64_t)v8;
}

id sub_100026D48(void *a1, int a2, int a3)
{
  id v6 = objc_alloc_init((Class)NSMutableArray);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  if (a3) {
    uint64_t v7 = 9;
  }
  else {
    uint64_t v7 = 2;
  }
  id v8 = sub_1000261E8(a1, v7);
  id v9 = [v8 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v26;
    do
    {
      id v12 = 0;
      do
      {
        if (*(void *)v26 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = sub_100116F6C(*(void **)(*((void *)&v25 + 1) + 8 * (void)v12), 0, 30, a2);
        if (v13) {
          [v6 addObject:v13];
        }

        id v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v10);
  }

  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v14 = sub_1000261E8(a1, 3);
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v22;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v22 != v17) {
          objc_enumerationMutation(v14);
        }
        id v19 = sub_100116F6C(*(void **)(*((void *)&v21 + 1) + 8 * (void)v18), 0, 2, a2);
        if (v19) {
          [v6 addObject:v19];
        }

        uint64_t v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }
    while (v16);
  }

  return v6;
}

id sub_100026F70(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 48) || !*(_WORD *)(a1 + 14))
  {
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 16) != *(unsigned __int16 *)(a1 + 14) + *(unsigned __int16 *)(a1 + 12))
  {
    id v9 = (void *)_NRCopyLogObjectForNRUUID();
    int v10 = _NRLogIsLevelEnabled();

    if (v10)
    {
      uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    return 0;
  }
  id v2 = objc_alloc((Class)NSData);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 16);

  return [v2 initWithBytes:v3 length:v4];
}

uint64_t sub_100027090(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v2 = (id *)(id)qword_1001F4A18;
    uint64_t v3 = *(void **)(v1 + 24);
    if (v3)
    {
      id v4 = v3;
      goto LABEL_14;
    }
    id v5 = *(id *)(v1 + 32);
    id v6 = v5;
    if (v2)
    {
      if (v5)
      {
        uint64_t v7 = [v2[27] objectForKeyedSubscript:v5];
        if (v7)
        {
          id v8 = (id *)v7;
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v7 + 104));
          id v4 = v8[16];
LABEL_12:

          goto LABEL_13;
        }
        id v9 = [v6 UUIDString];
        sub_1000A9E64((uint64_t)v2, 1014, @"copyPrimaryLink %@", v10, v11, v12, v13, v14, (uint64_t)v9);

        id v8 = 0;
LABEL_11:
        id v4 = 0;
        goto LABEL_12;
      }
      id v47 = sub_1000AA13C();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v8 = (id *)sub_1000AA13C();
        uint64_t v51 = "-[NRLinkDirector copyPrimaryLinkForNRUUID:]";
        _NRLogWithArgs();
        goto LABEL_11;
      }
    }
    id v4 = 0;
LABEL_13:

    if ([v4 state] != 8)
    {
      long long v24 = (void *)_NRCopyLogObjectForNRUUID();
      int v25 = _NRLogIsLevelEnabled();

      if (v25)
      {
        id v26 = *(id *)(v1 + 32);
        long long v27 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      unsigned __int8 v64 = 0;
      goto LABEL_51;
    }
LABEL_14:
    id v15 = sub_100026F70(v1);
    if (!v15)
    {
      unsigned __int8 v64 = 0;
LABEL_50:

LABEL_51:
      return v64;
    }
    id v16 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(v1 + 32));
    uint64_t v17 = v16;
    if (!v16 || *((unsigned __int16 *)v16 + 14) <= 0x11u) {
      *(unsigned char *)(v1 + 8) = 0;
    }
    id v58 = v4;
    id v66 = v4;
    uint64_t v18 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v66, 1, v51);
    int v57 = v17;
    if (!*(unsigned char *)(v1 + 8))
    {
LABEL_31:
      unsigned int v59 = v2;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      id v34 = v18;
      id v35 = [v34 countByEnumeratingWithState:&v60 objects:v65 count:16];
      if (v35)
      {
        id v36 = v35;
        char v37 = 0;
        uint64_t v38 = *(void *)v61;
        while (1)
        {
          for (i = 0; i != v36; i = (char *)i + 1)
          {
            if (*(void *)v61 != v38) {
              objc_enumerationMutation(v34);
            }
            uint64_t v42 = *(void **)(*((void *)&v60 + 1) + 8 * i);
            if (objc_msgSend(v42, "ikeClassDEstablished", v52, v53, v54, v55, v56, v57)
              && (!*(unsigned char *)(v1 + 9) || [v42 type] != 4))
            {
              unsigned int v43 = [v42 sendControlData:v15];
              uint64_t v44 = (void *)_NRCopyLogObjectForNRUUID();
              if (v43)
              {
                int v45 = _NRLogIsLevelEnabled();

                if (v45)
                {
                  id v40 = *(id *)(v1 + 32);
                  int v41 = (void *)_NRCopyLogObjectForNRUUID();
                  uint64_t v55 = v1;
                  id v56 = v42;
                  uint64_t v54 = 1065;
                  uint64_t v52 = "";
                  uint64_t v53 = "-[NRLinkDirectorMessage send]";
                  _NRLogWithArgs();
                  char v37 = 1;
LABEL_36:

                  continue;
                }
                char v37 = 1;
              }
              else
              {
                int v46 = _NRLogIsLevelEnabled();

                if (v46)
                {
                  id v40 = *(id *)(v1 + 32);
                  int v41 = (void *)_NRCopyLogObjectForNRUUID();
                  uint64_t v55 = v1;
                  id v56 = v42;
                  uint64_t v54 = 1067;
                  uint64_t v52 = "";
                  uint64_t v53 = "-[NRLinkDirectorMessage send]";
                  _NRLogWithArgs();
                  goto LABEL_36;
                }
              }
            }
          }
          id v36 = [v34 countByEnumeratingWithState:&v60 objects:v65 count:16];
          if (!v36) {
            goto LABEL_49;
          }
        }
      }
      char v37 = 0;
LABEL_49:

      unsigned __int8 v64 = v37 & 1;
      id v4 = v58;
      id v2 = v59;
      goto LABEL_50;
    }
    id v19 = *(id *)(v1 + 32);
    int v20 = v19;
    if (v2)
    {
      if (v19)
      {
        uint64_t v21 = [v2[27] objectForKeyedSubscript:v19];
        if (v21)
        {
          long long v22 = (id *)v21;
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v21 + 104));
          uint64_t v23 = [v22[14] allObjects];
LABEL_29:

LABEL_30:
          uint64_t v18 = (void *)v23;
          goto LABEL_31;
        }
        long long v28 = [v20 UUIDString];
        sub_1000A9E64((uint64_t)v2, 1014, @"copyPrimaryLink %@", v29, v30, v31, v32, v33, (uint64_t)v28);

        long long v22 = 0;
LABEL_28:
        uint64_t v23 = 0;
        goto LABEL_29;
      }
      id v49 = sub_1000AA13C();
      int v50 = _NRLogIsLevelEnabled();

      if (v50)
      {
        long long v22 = (id *)sub_1000AA13C();
        uint64_t v52 = "-[NRLinkDirector copyAllLinksForNRUUID:]";
        _NRLogWithArgs();
        goto LABEL_28;
      }
    }
    uint64_t v23 = 0;
    goto LABEL_30;
  }
  return result;
}

id sub_1000275C0()
{
  self;
  uint32_t v0 = arc4random_uniform(0x1770u);
  size_t v1 = v0 + 3000;
  if (v0 == -3000)
  {
    id v6 = sub_100024670();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = sub_100024670();
      _NRLogWithArgs();
    }
    size_t v1 = _os_log_pack_size();
    __chkstk_darwin(v1);
    __error();
    uint64_t v9 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v9 = 136446210;
    *(void *)(v9 + 4) = "strict_malloc";
    sub_100024670();
    _NRLogAbortWithPack();
LABEL_9:
    id v10 = sub_100024670();
    int v11 = _NRLogIsLevelEnabled();

    if (v11)
    {
      id v12 = sub_100024670();
      _NRLogWithArgs();
    }
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v14 = 136446466;
    *(void *)(v14 + 4) = "strict_malloc";
    *(_WORD *)(v14 + 12) = 2048;
    *(void *)(v14 + 14) = v1;
    sub_100024670();
    _NRLogAbortWithPack();
  }
  id v2 = malloc_type_malloc(v0 + 3000, 0xA172743EuLL);
  if (!v2) {
    goto LABEL_9;
  }
  uint64_t v3 = v2;
  arc4random_buf(v2, v1);
  id v4 = [objc_alloc((Class)NSData) initWithBytes:v3 length:v1];
  free(v3);

  return v4;
}

uint64_t sub_100027840(uint64_t a1, void *a2)
{
  unsigned int v91 = a2;
  self;
  id v2 = sub_1000275C0();
  self;
  unsigned __int8 v3 = arc4random_uniform(0x100u);
  unsigned __int8 v4 = arc4random_uniform(0x100u);
  unsigned __int8 v5 = arc4random_uniform(0x100u);
  id v6 = [objc_alloc((Class)NSString) initWithFormat:@"%u.%u.%u.%u", arc4random_uniform(0x100u), v5, v4, v3];
  self;
  if (qword_1001F47E8 != -1) {
    dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
  }
  id v7 = (id)qword_1001F47E0;
  if (v7) {
    id v8 = @"62743";
  }
  else {
    id v8 = 0;
  }
  uint64_t v9 = v8;
  int v96 = +[NWAddressEndpoint endpointWithHostname:v6 port:v9];

  self;
  unsigned __int8 v10 = arc4random_uniform(0x100u);
  unsigned __int8 v11 = arc4random_uniform(0x100u);
  unsigned __int8 v12 = arc4random_uniform(0x100u);
  id v13 = [objc_alloc((Class)NSString) initWithFormat:@"fd74::%u.%u.%u.%u", arc4random_uniform(0x100u), v12, v11, v10];
  self;
  if (qword_1001F47E8 != -1) {
    dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
  }
  id v14 = (id)qword_1001F47E0;
  if (v14) {
    id v15 = @"62743";
  }
  else {
    id v15 = 0;
  }
  id v16 = v15;
  id v95 = +[NWAddressEndpoint endpointWithHostname:v13 port:v16];

  uint32_t v86 = arc4random() & 1;
  id v17 = v2;
  self;
  id v93 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v18 = (char *)[v17 bytes];
  id v92 = v17;
  unsigned int v19 = [v17 length];
  unsigned int v20 = 0;
  do
  {
    do
      uint32_t v22 = arc4random() % 0x64;
    while (!v22);
    unsigned int v23 = v22 + v20;
    if (v22 + v20 <= v19) {
      uint64_t v24 = v22;
    }
    else {
      uint64_t v24 = v19 - v20;
    }
    if (v24)
    {
      id v21 = [objc_alloc((Class)NSData) initWithBytes:v18 length:v24];
      [v93 addObject:v21];
    }
    else
    {
      uint64_t v24 = 0;
    }
    v18 += v24;
    unsigned int v20 = v23;
  }
  while (v23 <= v19);

  long long v103 = 0u;
  long long v104 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  id v25 = [v93 countByEnumeratingWithState:&v101 objects:v110 count:16];
  if (v25)
  {
    id v26 = v25;
    uint64_t v27 = *(void *)v102;
    do
    {
      for (i = 0; i != v26; i = (char *)i + 1)
      {
        if (*(void *)v102 != v27) {
          objc_enumerationMutation(v93);
        }
        sub_100025B00((uint64_t)v91, 255, *(void **)(*((void *)&v101 + 1) + 8 * i));
      }
      id v26 = [v93 countByEnumeratingWithState:&v101 objects:v110 count:16];
    }
    while (v26);
  }
  self;
  if (qword_1001F47E8 != -1) {
    dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
  }
  id v29 = (id)qword_1001F47E0;
  uint64_t v30 = v29;
  if (v91)
  {
    if (v29) {
      unsigned int v31 = 62743;
    }
    else {
      unsigned int v31 = 0;
    }
    sub_100026010((uint64_t)v91, v96, v31, 0);
  }

  self;
  if (qword_1001F47E8 != -1) {
    dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
  }
  id v32 = (id)qword_1001F47E0;
  uint64_t v33 = v32;
  if (v91)
  {
    if (v32) {
      unsigned int v34 = 62743;
    }
    else {
      unsigned int v34 = 0;
    }
    sub_100026010((uint64_t)v91, v95, v34, 0);

    v111[0] = v86 == 0;
    id v35 = [objc_alloc((Class)NSData) initWithBytes:v111 length:1];
    sub_100025B00((uint64_t)v91, 5, v35);

    sub_100025B00((uint64_t)v91, 1, 0);
    int v89 = *((unsigned __int8 *)v91 + 10);
    unint64_t v88 = sub_100024424((uint64_t)v91);
    id v36 = sub_100026F70((uint64_t)v91);
    char v37 = (void *)v91[4];
  }
  else
  {

    unint64_t v88 = 0;
    int v89 = 0;
    id v36 = 0;
    char v37 = 0;
  }
  uint64_t v38 = (void *)sub_1000255E8((uint64_t)NRLinkDirectorMessage, v36, v37);
  __int16 v39 = sub_1000261E8(v38, 255);
  self;
  id v40 = objc_alloc_init((Class)NSMutableData);
  long long v105 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v108 = 0u;
  int v41 = v39;
  id v42 = [v41 countByEnumeratingWithState:&v105 objects:v111 count:16];
  if (v42)
  {
    id v43 = v42;
    uint64_t v44 = *(void *)v106;
    do
    {
      for (j = 0; j != v43; j = (char *)j + 1)
      {
        if (*(void *)v106 != v44) {
          objc_enumerationMutation(v41);
        }
        [v40 appendData:*(void *)(*((void *)&v105 + 1) + 8 * (void)j)];
      }
      id v43 = [v41 countByEnumeratingWithState:&v105 objects:v111 count:16];
    }
    while (v43);
  }

  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  int v46 = (id *)(id)qword_1001F4A18;
  id v47 = v46;
  if (v46)
  {
    id v48 = v46[6];
    id v49 = v48;
    if (v48 && (uint64_t v50 = *((void *)v48 + 13)) != 0) {
      int v51 = *(_DWORD *)(v50 + 12);
    }
    else {
      int v51 = 0;
    }
  }
  else
  {
    id v49 = 0;
    int v51 = 0;
  }
  id v82 = v41;
  int v83 = v36;
  if (v38) {
    id v52 = sub_100026D48(v38, v51, 0);
  }
  else {
    id v52 = 0;
  }
  uint64_t v90 = (uint64_t)v38;

  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  id v53 = v52;
  id v54 = [v53 countByEnumeratingWithState:&v97 objects:v109 count:16];
  if (v54)
  {
    id v55 = v54;
    unsigned int v56 = 0;
    unsigned int v94 = 0;
    int v57 = 0;
    id v58 = 0;
    uint64_t v59 = *(void *)v98;
    while (1)
    {
      for (k = 0; k != v55; k = (char *)k + 1)
      {
        if (*(void *)v98 != v59) {
          objc_enumerationMutation(v53);
        }
        long long v63 = *(void **)(*((void *)&v97 + 1) + 8 * (void)k);
        if ([v63 addressFamily] == (id)2)
        {
          unsigned int v56 = [v63 isEqual:v96];
          long long v61 = v57;
          int v57 = v63;
LABEL_61:
          id v62 = v63;

          continue;
        }
        if ([v63 addressFamily] == (id)30)
        {
          unsigned int v94 = [v63 isEqual:v95];
          long long v61 = v58;
          id v58 = v63;
          goto LABEL_61;
        }
      }
      id v55 = [v53 countByEnumeratingWithState:&v97 objects:v109 count:16];
      if (!v55) {
        goto LABEL_69;
      }
    }
  }
  unsigned int v56 = 0;
  unsigned int v94 = 0;
  int v57 = 0;
  id v58 = 0;
LABEL_69:

  BOOL v64 = v90;
  if (v90)
  {
    int v65 = sub_1000261E8((void *)v90, 5);
    id v66 = [v65 firstObject];

    if (v66 && [v66 length])
    {
      v111[0] = 0;
      [v66 getBytes:v111 length:1];
      if (v111[0]) {
        int v67 = &__kCFBooleanTrue;
      }
      else {
        int v67 = &__kCFBooleanFalse;
      }
    }
    else
    {
      int v67 = 0;
    }
  }
  else
  {
    int v67 = 0;
  }
  unsigned int v85 = [v67 BOOLValue];

  int v87 = v86 ^ 1;
  if (v90)
  {
    int v68 = *(unsigned __int8 *)(v90 + 10);
    unint64_t v69 = sub_100024424(v90);
    unint64_t v70 = sub_1000261E8((void *)v90, 1);
    long long v71 = [v70 firstObject];

    BOOL v64 = v71 != 0;
  }
  else
  {
    unint64_t v69 = 0;
    int v68 = 0;
  }
  unsigned int v72 = [v40 isEqualToData:v92];
  if (v68 == v89 && v69 == v88) {
    unsigned int v74 = v72;
  }
  else {
    unsigned int v74 = 0;
  }
  int v75 = v74 & v56 & v94 & v64;
  if (v87 != v85) {
    int v75 = 0;
  }
  unsigned int v84 = v75;
  if (qword_1001F48C0 != -1) {
    dispatch_once(&qword_1001F48C0, &stru_1001C6500);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F48C0 != -1) {
      dispatch_once(&qword_1001F48C0, &stru_1001C6500);
    }
    id v81 = (id)qword_1001F48B8;
    [v92 length];
    [v40 length];
    int v80 = [v96 hostname];
    char v76 = [v57 hostname];
    uint64_t v77 = [v95 hostname];
    uint64_t v78 = [v58 hostname];
    _NRLogWithArgs();
  }
  return v84;
}

void sub_100028370(uint64_t a1, void *a2)
{
  id v4 = a2;
  self;
  self;
  if (qword_1001F48B0 != -1) {
    dispatch_once(&qword_1001F48B0, &stru_1001C64C0);
  }
  id v2 = v4;
  if (qword_1001F48A8)
  {
    unsigned __int8 v3 = [*(id *)(qword_1001F48A8 + 16) objectForKeyedSubscript:v4];
    [v3 removeAllObjects];

    id v2 = v4;
  }
}

id sub_1000286EC()
{
  if (qword_1001F48D0 != -1) {
    dispatch_once(&qword_1001F48D0, &stru_1001C6548);
  }
  uint32_t v0 = (void *)qword_1001F48C8;

  return v0;
}

void sub_100028740(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F48C8;
  qword_1001F48C8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10002896C(id *a1)
{
  if (a1) {
    id v2 = a1[3];
  }
  else {
    id v2 = 0;
  }
  unsigned __int8 v3 = v2;
  dispatch_assert_queue_V2(v3);

  if (a1[8])
  {
    id v4 = sub_100145FDC();
    if ([v4 count])
    {
      unsigned __int8 v5 = sub_100132278(v4);
      [a1 reportEvent:4009 details:v5];

      id v6 = a1[8];
      id v7 = a1[3];
      if (qword_1001F4BF8 != -1) {
        dispatch_once(&qword_1001F4BF8, &stru_1001C7D88);
      }
      id v8 = (id)qword_1001F4C00;
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100028B10;
      v11[3] = &unk_1001C7920;
      id v12 = v6;
      id v13 = v4;
      id v14 = v7;
      id v15 = a1;
      id v9 = v7;
      id v10 = v6;
      dispatch_async(v8, v11);
    }
    else
    {
      [a1 reportEvent:4011];
      sub_100028BB4((uint64_t)a1);
    }
  }
}

void sub_100028B10(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) retrievePeripheralsWithIdentifiers:*(void *)(a1 + 40)];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100028E00;
  v5[3] = &unk_1001C8840;
  unsigned __int8 v3 = *(NSObject **)(a1 + 48);
  void v5[4] = *(void *)(a1 + 56);
  id v6 = v2;
  id v4 = v2;
  dispatch_async(v3, v5);
}

void sub_100028BB4(uint64_t a1)
{
  if (a1) {
    id v2 = *(void **)(a1 + 24);
  }
  else {
    id v2 = 0;
  }
  unsigned __int8 v3 = v2;
  dispatch_assert_queue_V2(v3);

  if (*(void *)(a1 + 64))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v4 = *(id *)(a1 + 72);
    id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v13;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          sub_100028D2C((id *)a1, v9);
          id v10 = [v9 description:v12];
          [(id)a1 reportEvent:4008 details:v10];
        }
        id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v6);
    }

    unsigned __int8 v11 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
  }
}

void sub_100028D2C(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v7 = v3;
    id v4 = a1[3];
    dispatch_assert_queue_V2(v4);

    id v3 = v7;
    if (v7)
    {
      if (a1[8])
      {
        if ([v7 state] == (id)1 || (v5 = objc_msgSend(v7, "state") == (id)2, id v3 = v7, v5))
        {
          id v6 = [v7 description];
          [a1 reportEvent:4003 details:v6];

          [a1[8] cancelPeripheralConnection:v7];
          id v3 = v7;
        }
      }
    }
  }
}

void sub_100028E00(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v2 = (void *)v2[3];
  }
  id v3 = v2;
  dispatch_assert_queue_V2(v3);

  id v4 = sub_100145FDC();
  BOOL v5 = *(void **)(a1 + 32);
  id v6 = &selRef_setSharedSecret_;
  if (v5) {
    BOOL v5 = (void *)v5[9];
  }
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = v5;
  id v7 = [obj countByEnumeratingWithState:&v48 objects:v53 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v49;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v49 != v9) {
          objc_enumerationMutation(obj);
        }
        unsigned __int8 v11 = *(void **)(*((void *)&v48 + 1) + 8 * i);
        long long v12 = [v11 identifier];
        unsigned __int8 v13 = [v4 containsObject:v12];

        if ((v13 & 1) == 0) {
          sub_100028D2C(*(id **)(a1 + 32), v11);
        }
      }
      id v8 = [obj countByEnumeratingWithState:&v48 objects:v53 count:16];
    }
    while (v8);
  }
  long long v14 = *(id **)(a1 + 32);
  if (v14)
  {
    objc_storeStrong(v14 + 9, *(id *)(a1 + 40));
    long long v15 = *(void **)(a1 + 32);
    if (v15) {
      long long v14 = (id *)v15[9];
    }
    else {
      long long v14 = 0;
    }
  }
  else
  {
    long long v15 = 0;
  }
  id v16 = v14;
  id v17 = sub_100132278(v16);
  [v15 reportEvent:4010 details:v17];

  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v18 = *(void **)(a1 + 32);
  if (v18) {
    uint64_t v18 = (void *)v18[9];
  }
  unsigned int v19 = v18;
  id v20 = [v19 countByEnumeratingWithState:&v44 objects:v52 count:16];
  if (v20)
  {
    id v21 = v20;
    char v22 = 0;
    uint64_t v23 = *(void *)v45;
    while (1)
    {
      for (j = 0; j != v21; j = (char *)j + 1)
      {
        if (*(void *)v45 != v23) {
          objc_enumerationMutation(v19);
        }
        id v25 = *(void **)(*((void *)&v44 + 1) + 8 * (void)j);
        id v26 = [v25 identifier];
        unsigned __int8 v27 = [v4 containsObject:v26];

        if (v27)
        {
          if ([v25 state] == (id)1 || objc_msgSend(v25, "state") == (id)2)
          {
            char v22 = 1;
            continue;
          }
          long long v28 = *(void **)(a1 + 32);
          id v29 = [v25 description];
          [v28 reportEvent:4000 details:v29];

          uint64_t v30 = *(void *)(a1 + 32);
          if (v30) {
            unsigned int v31 = *(void **)(v30 + 64);
          }
          else {
            unsigned int v31 = 0;
          }
          [v31 connectPeripheral:v25 options:0];
          id v32 = +[NSDate date];
          uint64_t v33 = *(void *)(a1 + 32);
          if (v33) {
            objc_storeStrong((id *)(v33 + 144), v32);
          }
          char v22 = 1;
        }
        else
        {
          if (qword_1001F48D0 != -1) {
            dispatch_once(&qword_1001F48D0, &stru_1001C6548);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F48D0 != -1) {
              dispatch_once(&qword_1001F48D0, &stru_1001C6548);
            }
            id v34 = (id)qword_1001F48C8;
            [v25 description];
            id v42 = v41 = 570;
            __int16 v39 = "";
            id v40 = "-[NRLinkManagerBluetooth connectToPeripherals]_block_invoke_2";
            _NRLogWithArgs();
          }
          id v35 = *(void **)(a1 + 32);
          id v32 = [v25 description:v39, v40, v41, v42];
          [v35 reportEvent:4006 details:v32];
        }
      }
      id v21 = [v19 countByEnumeratingWithState:&v44 objects:v52 count:16];
      if (!v21)
      {

        id v6 = &selRef_setSharedSecret_;
        if (v22) {
          goto LABEL_49;
        }
        goto LABEL_47;
      }
    }
  }

LABEL_47:
  uint64_t v36 = *(void *)(a1 + 32);
  if (v36)
  {
    uint64_t v37 = *((int *)v6 + 946);
    uint64_t v38 = *(void **)(v36 + v37);
    *(void *)(v36 + v37) = 0;
  }
LABEL_49:
}

void sub_10002947C(uint64_t a1)
{
  if (a1) {
    id v4 = *(void **)(a1 + 24);
  }
  else {
    id v4 = 0;
  }
  BOOL v5 = v4;
  dispatch_assert_queue_V2(v5);

  if (!*(void *)(a1 + 64) || !sub_100029668(a1)) {
    return;
  }
  id v14 = *(id *)(a1 + 80);
  uint64_t v6 = [v14 objectForKeyedSubscript:&off_1001D4870];
  id v7 = (void *)v6;
  if (v6 && *(unsigned char *)(v6 + 8) == 2)
  {
    int v8 = 0;
LABEL_11:
    id v10 = [*(id *)(a1 + 40) count];
    if (v8)
    {
    }
    if (!v10)
    {
      uint64_t v11 = *(void *)(a1 + 96) + 1;
      *(void *)(a1 + 96) = v11;
      dispatch_time_t v12 = dispatch_time(0x8000000000000000, 5000000000);
      unsigned __int8 v13 = *(id *)(a1 + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100029794;
      block[3] = &unk_1001C7580;
      void block[4] = a1;
      block[5] = v11;
      dispatch_after(v12, v13, block);
    }
    return;
  }
  id v1 = *(id *)(a1 + 88);
  uint64_t v9 = [v1 objectForKeyedSubscript:&off_1001D4870];
  id v2 = v9;
  if (v9 && v9[8] == 2)
  {
    int v8 = 1;
    goto LABEL_11;
  }
}

uint64_t sub_100029668(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = *(id *)(a1 + 24);
  dispatch_assert_queue_V2(v2);

  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v3 = *(id *)(a1 + 72);
  uint64_t v4 = (uint64_t)[v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * i), "state", (void)v8) == (id)2)
        {
          uint64_t v4 = 1;
          goto LABEL_12;
        }
      }
      uint64_t v4 = (uint64_t)[v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v4;
}

void sub_100029794(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 96);
  if (v3) {
    BOOL v4 = *(void *)(a1 + 40) == v3;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4 || !sub_100029668(v2)) {
    return;
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5) {
    uint64_t v5 = (void *)v5[10];
  }
  uint64_t v30 = v5;
  uint64_t v6 = [v30 objectForKeyedSubscript:&off_1001D4870];
  id v7 = (void *)v6;
  if (v6 && *(unsigned char *)(v6 + 8) == 2) {
    goto LABEL_16;
  }
  long long v8 = *(void **)(a1 + 32);
  if (v8) {
    long long v8 = (void *)v8[11];
  }
  long long v9 = v8;
  long long v10 = [v9 objectForKeyedSubscript:&off_1001D4870];
  long long v11 = v10;
  if (v10 && v10[8] == 2)
  {

LABEL_16:

    return;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12) {
    unsigned __int8 v13 = *(void **)(v12 + 40);
  }
  else {
    unsigned __int8 v13 = 0;
  }
  id v14 = [v13 count];

  if (!v14)
  {
    Boolean keyExistsAndHasValidFormat = 0;
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"EnableNRBTLMBackwardsCompatibility", @"Apple Global Domain", &keyExistsAndHasValidFormat);
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      uint64_t v24 = "";
      id v26 = "-[NRLinkManagerBluetooth startBluetoothWatchdog]_block_invoke";
      uint64_t v27 = 690;
      BOOL v28 = AppIntegerValue == 1;
      _NRLogWithArgs();
    }
    if (AppIntegerValue == 1)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      id v17 = "LEGACY";
      if (v16)
      {
        int v18 = *(unsigned __int8 *)(v16 + 36);
        *(unsigned char *)(v16 + 36) = v18 ^ 1;
        if (v18) {
          id v17 = "NEW";
        }
      }
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        uint64_t v19 = *(void *)(a1 + 32);
        id v20 = "LEGACY";
        if (v19 && *(unsigned char *)(v19 + 36)) {
          id v20 = "NEW";
        }
        BOOL v28 = (BOOL)v17;
        id v29 = v20;
        uint64_t v27 = 697;
        uint64_t v24 = "";
        id v26 = "-[NRLinkManagerBluetooth startBluetoothWatchdog]_block_invoke";
        _NRLogWithArgs();
      }
      sub_100029C08(*(char **)(a1 + 32), 0);
    }
    *(void *)(*(void *)(a1 + 32) + 96) = 0;
    [*(id *)(a1 + 32) reportEvent:4900, v24, v26, v27, v28, v29];
    uint64_t v21 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v21 + 35))
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        _NRLogWithArgs();
      }
    }
    else
    {
      *(unsigned char *)(v21 + 35) = 1;
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        uint64_t v25 = 5;
        _NRLogWithArgs();
      }
      char v22 = objc_alloc_init(NRAnalyticsLinkManagerBluetooth);
      uint64_t v23 = v22;
      if (v22) {
        v22->_noBTPipeCallbacks = 1;
      }
      [(NRAnalyticsLinkManagerBluetooth *)v22 submit];
    }
  }
}

void sub_100029C08(char *a1, int a2)
{
  if (a1)
  {
    BOOL v4 = &OBJC_IVAR___NRLinkManagerBluetooth__pipeRegistrations;
    if (a2) {
      BOOL v4 = &OBJC_IVAR___NRLinkManagerBluetooth__p2pPipeRegistrations;
    }
    id v5 = *(id *)&a1[*v4];
    uint64_t v6 = +[NSNumber numberWithInteger:1];
    id v9 = [v5 objectForKeyedSubscript:v6];

    id v7 = v9;
    if (v9 && (*((unsigned char *)v9 + 9) & 8) == 0)
    {
      if (a2) {
        CFStringRef v8 = @"p2p";
      }
      else {
        CFStringRef v8 = 0;
      }
      [a1 reportEvent:4214 details:v8];
      *((unsigned char *)v9 + 9) = 8;
      sub_100029D00((uint64_t)a1, 1, a2);
      id v7 = v9;
    }
  }
}

void sub_100029D00(uint64_t a1, uint64_t a2, int a3)
{
  if (a1) {
    uint64_t v6 = *(void **)(a1 + 24);
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = v6;
  dispatch_assert_queue_V2(v7);

  if (a2 == 3)
  {
    if (a3)
    {
      id v20 = *(id *)(a1 + 88);
      uint64_t v21 = +[NSNumber numberWithInteger:3];
      id v34 = [v20 objectForKeyedSubscript:v21];

      uint64_t v16 = v34;
      if (!v34) {
        goto LABEL_39;
      }
      goto LABEL_21;
    }
    id v32 = *(id *)(a1 + 80);
    uint64_t v33 = +[NSNumber numberWithInteger:3];
    id v34 = [v32 objectForKeyedSubscript:v33];

    uint64_t v16 = v34;
    if (!v34) {
      goto LABEL_39;
    }
LABEL_36:
    v16[9] &= ~2u;
    if (v16[8] - 3 >= 0xFFFFFFFE)
    {
      [a1 reportEvent:4206 detailsFormat:@"%s %s", "Isochronous", "pipe"];
      CFStringRef v19 = @"com.apple.terminusLink.datagram";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  if (a2 != 2)
  {
    if (a2 != 1) {
      return;
    }
    if (a3)
    {
      id v8 = *(id *)(a1 + 88);
      id v9 = +[NSNumber numberWithInteger:1];
      long long v10 = [v8 objectForKeyedSubscript:v9];

      if (v10)
      {
        v10[9] &= ~2u;
        if (v10[8] - 3 >= 0xFFFFFFFE)
        {
          [a1 reportEvent:4206 detailsFormat:@"%s %s" arguments:("Medium", "p2pPipe")];
          [*(id *)(a1 + 48) unregisterEndpoint:@"com.apple.terminusLink.p2p"];
          v10[8] = 3;
        }
      }

      id v11 = *(id *)(a1 + 88);
      uint64_t v12 = +[NSNumber numberWithInteger:2];
      unsigned __int8 v13 = [v11 objectForKeyedSubscript:v12];

      if (v13)
      {
        v13[9] &= ~2u;
        if (v13[8] - 3 >= 0xFFFFFFFE)
        {
          [a1 reportEvent:4206 detailsFormat:@"%s %s", "High", "p2pPipe"];
          [*(id *)(a1 + 48) unregisterEndpoint:@"com.apple.terminusLink.urgent.p2p"];
          v13[8] = 3;
        }
      }

      id v14 = *(id *)(a1 + 88);
      long long v15 = +[NSNumber numberWithInteger:3];
      id v34 = [v14 objectForKeyedSubscript:v15];

      uint64_t v16 = v34;
      if (!v34) {
        goto LABEL_39;
      }
LABEL_21:
      v16[9] &= ~2u;
      if (v16[8] - 3 >= 0xFFFFFFFE)
      {
        [a1 reportEvent:4206 detailsFormat:@"%s %s", "Isochronous", "p2pPipe"];
        CFStringRef v19 = @"com.apple.terminusLink.datagram.p2p";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    id v24 = *(id *)(a1 + 80);
    uint64_t v25 = +[NSNumber numberWithInteger:1];
    id v26 = [v24 objectForKeyedSubscript:v25];

    if (v26)
    {
      v26[9] &= ~2u;
      if (v26[8] - 3 >= 0xFFFFFFFE)
      {
        [a1 reportEvent:4206 detailsFormat:@"%s %s", "Medium", "pipe"];
        [*(id *)(a1 + 48) unregisterEndpoint:@"com.apple.terminusLink"];
        v26[8] = 3;
      }
    }

    id v27 = *(id *)(a1 + 80);
    BOOL v28 = +[NSNumber numberWithInteger:2];
    id v29 = [v27 objectForKeyedSubscript:v28];

    if (v29)
    {
      v29[9] &= ~2u;
      if (v29[8] - 3 >= 0xFFFFFFFE)
      {
        [a1 reportEvent:4206 detailsFormat:@"%s %s", "High", "pipe"];
        [*(id *)(a1 + 48) unregisterEndpoint:@"com.apple.terminusLink.urgent"];
        v29[8] = 3;
      }
    }

    id v30 = *(id *)(a1 + 80);
    unsigned int v31 = +[NSNumber numberWithInteger:3];
    id v34 = [v30 objectForKeyedSubscript:v31];

    uint64_t v16 = v34;
    if (!v34) {
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  if (a3)
  {
    id v17 = *(id *)(a1 + 88);
    int v18 = +[NSNumber numberWithInteger:2];
    id v34 = [v17 objectForKeyedSubscript:v18];

    uint64_t v16 = v34;
    if (v34)
    {
      v34[9] &= ~2u;
      if (v34[8] - 3 >= 0xFFFFFFFE)
      {
        [a1 reportEvent:4206 detailsFormat:@"%s %s" arguments:("High", "p2pPipe")];
        CFStringRef v19 = @"com.apple.terminusLink.urgent.p2p";
LABEL_38:
        [*(id *)(a1 + 48) unregisterEndpoint:v19];
        uint64_t v16 = v34;
        v34[8] = 3;
      }
    }
  }
  else
  {
    id v22 = *(id *)(a1 + 80);
    uint64_t v23 = +[NSNumber numberWithInteger:2];
    id v34 = [v22 objectForKeyedSubscript:v23];

    uint64_t v16 = v34;
    if (v34)
    {
      v34[9] &= ~2u;
      if (v34[8] - 3 >= 0xFFFFFFFE)
      {
        [a1 reportEvent:4206 detailsFormat:@"%s %s", "High", "pipe"];
        CFStringRef v19 = @"com.apple.terminusLink.urgent";
        goto LABEL_38;
      }
    }
  }
LABEL_39:
}

void sub_10002A434(void *a1, uint64_t a2)
{
  if (a1[8])
  {
    if ((unint64_t)a2 >= 6) {
      id v4 = [[objc_alloc((Class)NSString) initWithFormat:@"UnknownState(%lld)", a2];
    }
    else {
      id v4 = *(&off_1001C65A8 + a2);
    }
    [a1 reportEvent:4100 details:v4];

    if (a2 == 5)
    {
      sub_10002896C((id *)a1);
    }
    else if (a2 <= 3)
    {
      sub_100028BB4((uint64_t)a1);
    }
  }
}

uint64_t sub_10002AD34(char *a1, uint64_t a2, int a3)
{
  uint64_t v6 = &OBJC_IVAR___NRLinkManagerBluetooth__pipeRegistrations;
  if (a3) {
    uint64_t v6 = &OBJC_IVAR___NRLinkManagerBluetooth__p2pPipeRegistrations;
  }
  id v7 = *(id *)&a1[*v6];
  id v8 = +[NSNumber numberWithInteger:a2];
  uint64_t v12 = [v7 objectForKeyedSubscript:v8];

  uint64_t v10 = v12;
  if (v12)
  {
    if ((*(unsigned char *)(v12 + 9) & 0xA) != 0 && !*(unsigned char *)(v12 + 8))
    {
      id v9 = [*(id *)(v12 + 16) count];
      uint64_t v10 = v12;
      if (!v9)
      {
        if ((*(unsigned char *)(v12 + 9) & 8) != 0)
        {
          *(unsigned char *)(v12 + 9) &= ~8u;
          [a1 reportEvent:4215];
        }
        sub_10002B498((uint64_t)a1, a2, a3);
        uint64_t v10 = v12;
      }
    }
  }

  return _objc_release_x1(v9, v10);
}

uint64_t sub_10002AE48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(a1 + 136);
    if (!v4) {
      goto LABEL_27;
    }
    id v20 = v3;
    uint64_t v5 = [v4 objectForKeyedSubscript:v3];
    if (v5)
    {
      uint64_t v6 = (NRCBScalablePipeConnectionState *)v5;
      if (*(unsigned char *)(v5 + 8) == 1)
      {
        uint64_t v7 = *(void *)(v5 + 16);
        uint64_t v8 = mach_continuous_time();
        if (v7) {
          BOOL v11 = v8 > v7;
        }
        else {
          BOOL v11 = 0;
        }
        if (v11)
        {
          if (qword_1001F4BB8 != -1)
          {
            uint64_t v17 = v8;
            dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
            uint64_t v8 = v17;
          }
          LODWORD(v9) = dword_1001F4BC0;
          LODWORD(v10) = *(_DWORD *)algn_1001F4BC4;
          unint64_t v12 = (unint64_t)((double)(v8 - v7) * (0.000000001 * (double)v9) / (double)v10);
        }
        else
        {
          unint64_t v12 = 0;
        }
        unsigned __int8 v13 = objc_alloc_init(NRAnalyticsLinkManagerBluetooth);
        id v14 = v13;
        if (v13) {
          v13->_pipeConnectedDuration = v12;
        }
        [(NRAnalyticsLinkManagerBluetooth *)v13 submit];
      }
      else
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F48D0 != -1) {
            dispatch_once(&qword_1001F48D0, &stru_1001C6548);
          }
          CFStringRef v19 = v6;
          _NRLogWithArgs();
        }
      }
    }
    else
    {
      uint64_t v6 = objc_alloc_init(NRCBScalablePipeConnectionState);
      if (!v6)
      {
        mach_continuous_time();
LABEL_25:
        [*(id *)(a1 + 136) setObject:v6 forKeyedSubscript:v20];
LABEL_26:

        goto LABEL_27;
      }
    }
    v6->_state = 2;
    v6->_timeOfDisconnect = mach_continuous_time();
    goto LABEL_25;
  }
  id v15 = sub_1000286EC();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    uint64_t v6 = (NRCBScalablePipeConnectionState *)sub_1000286EC();
    _NRLogWithArgs();
    goto LABEL_26;
  }
LABEL_27:

  return _objc_release_x1();
}

void sub_10002B090(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 32);
    if (v3 == 3)
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 == -1)
        {
LABEL_13:
          _NRLogWithArgs();
          return;
        }
LABEL_37:
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        goto LABEL_13;
      }
    }
    else if (v3 == 4)
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 == -1) {
          goto LABEL_13;
        }
        goto LABEL_37;
      }
    }
    else if ([v2 state] == (id)5 && (sub_100146140() & 1) != 0)
    {
      *(unsigned char *)(a1 + 33) = 0;
      uint64_t v4 = *(unsigned __int8 *)(a1 + 33);
      if (*(unsigned char *)(a1 + 33))
      {
        if (v4 == 1) {
          uint64_t v5 = @"1 sec";
        }
        else {
          uint64_t v5 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"UnknownType(%lld)", v4];
        }
      }
      else
      {
        uint64_t v5 = @"Default";
      }
      [(id)a1 reportEvent:3501 details:v5];

      id v10 = *(id *)(a1 + 56);
      if (*(unsigned char *)(a1 + 33) == 1)
      {
        uint64_t v13 = CBPeripheralManagerAdvertisingInterval;
        id v14 = &off_1001D48B8;
        BOOL v11 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
      }
      else
      {
        BOOL v11 = 0;
      }
      [v10 startAdvertising:v11];

      *(unsigned char *)(a1 + 32) = 1;
    }
    else
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        uint64_t v6 = (void *)qword_1001F48C8;
        id v7 = *(id *)(a1 + 56);
        id v12 = v6;
        id v8 = [v7 state];
        if ((unint64_t)v8 >= 6) {
          id v9 = [objc_alloc((Class)NSString) initWithFormat:@"UnknownState(%lld)", v8];
        }
        else {
          id v9 = *(&off_1001C65A8 + (void)v8);
        }
        sub_100146140();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_10002B498(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return;
  }
  uint64_t v5 = a1;
  uint64_t v6 = *(id *)(a1 + 24);
  dispatch_assert_queue_V2(v6);

  if (a2 == 3)
  {
    id v7 = &OBJC_IVAR___NRLinkManagerBluetooth__pipeRegistrations;
    if (a3) {
      id v7 = &OBJC_IVAR___NRLinkManagerBluetooth__p2pPipeRegistrations;
    }
    id v8 = *(id *)(v5 + *v7);
    id v9 = +[NSNumber numberWithInteger:3];
    id v10 = [v8 objectForKeyedSubscript:v9];

    if (!v10) {
      return;
    }
    char v11 = v10[9];

    if ((v11 & 4) == 0) {
      return;
    }
  }
  if (a3)
  {
    if (!*(unsigned char *)(v5 + 38)) {
      return;
    }
    goto LABEL_9;
  }
  if (!*(unsigned char *)(v5 + 37)) {
    return;
  }
  uint64_t v94 = v5;
  int v17 = *(unsigned __int8 *)(v5 + 36);
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  id v18 = sub_100145A04();
  id v19 = [v18 countByEnumeratingWithState:&v99 objects:v116 count:16];
  if (!v19) {
    goto LABEL_36;
  }
  id v20 = v19;
  uint64_t v21 = *(void *)v100;
  int v93 = v17;
  do
  {
    id v22 = 0;
    do
    {
      if (*(void *)v100 != v21) {
        objc_enumerationMutation(v18);
      }
      uint64_t v23 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(*((void *)&v99 + 1) + 8 * (void)v22));
      id v24 = v23;
      if (v23) {
        uint64_t v25 = (void *)*((void *)v23 + 16);
      }
      else {
        uint64_t v25 = 0;
      }
      id v26 = v25;
      id v27 = [v26 bluetoothEndpointType];

      if (v27 == (id)1)
      {

        uint64_t v13 = 0;
        id v12 = @"Client";
        goto LABEL_58;
      }
      if (v24) {
        BOOL v28 = (void *)v24[16];
      }
      else {
        BOOL v28 = 0;
      }
      id v29 = v28;
      id v30 = [v29 bluetoothEndpointType];

      if (v30 == (id)2)
      {

        id v12 = @"Server";
        uint64_t v13 = 1;
LABEL_58:
        uint64_t v5 = v94;
        if (a2 != 2) {
          goto LABEL_10;
        }
LABEL_59:
        if (a3)
        {
          uint64_t v38 = sub_10002C700(v5, 2, 1);
          id v15 = v38;
          if (v38)
          {
            int state = v38->_state;
            if (state == 1)
            {
              if (qword_1001F48D0 != -1) {
                dispatch_once(&qword_1001F48D0, &stru_1001C6548);
              }
              if (!_NRLogIsLevelEnabled()) {
                goto LABEL_163;
              }
              goto LABEL_73;
            }
            if (state == 2)
            {
              if (qword_1001F48D0 != -1) {
                dispatch_once(&qword_1001F48D0, &stru_1001C6548);
              }
              if (!_NRLogIsLevelEnabled()) {
                goto LABEL_163;
              }
              goto LABEL_73;
            }
          }
          else
          {
            int state = 0;
          }
          if ([*(id *)(v5 + 48) state] != (id)5) {
            goto LABEL_163;
          }
          if (state == 3)
          {
            id v63 = sub_1000286EC();
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled) {
              goto LABEL_137;
            }
LABEL_161:
            if (v15) {
              v15->_flags |= 2u;
            }
            goto LABEL_163;
          }
          if (v15)
          {
            if ([(NSMutableSet *)v15->_connectedPipes count])
            {
LABEL_131:
              id v65 = sub_1000286EC();
              int v66 = _NRLogIsLevelEnabled();

              if (!v66) {
                goto LABEL_161;
              }
              goto LABEL_137;
            }
          }
          else if ([0 count])
          {
            goto LABEL_131;
          }
          if (v15)
          {
            v15->_int state = 1;
            v15->_flags &= ~2u;
          }
          [(id)v5 reportEvent:4201, @"%s %s %@", "High", "p2pPipe", v12 detailsFormat];
          int v89 = *(void **)(v5 + 48);
          v110[0] = CBScalablePipeOptionTransport;
          id v81 = v89;
          id v82 = +[NSNumber numberWithInteger:sub_10002C7AC()];
          v110[1] = CBScalablePipeOptionStayConnectedWhenIdle;
          v111[0] = v82;
          v111[1] = &__kCFBooleanTrue;
          int v83 = +[NSDictionary dictionaryWithObjects:v111 forKeys:v110 count:2];
          CFStringRef v84 = @"com.apple.terminusLink.urgent.p2p";
LABEL_183:
          uint32_t v86 = v81;
          uint64_t v87 = v13;
          uint64_t v88 = 2;
LABEL_193:
          [v86 registerEndpoint:v84 type:v87 priority:v88 options:v83];

          goto LABEL_163;
        }
        id v40 = sub_10002C700(v5, 2, 0);
        id v15 = v40;
        if (v40)
        {
          int v41 = v40->_state;
          if (v41 == 1)
          {
            if (qword_1001F48D0 != -1) {
              dispatch_once(&qword_1001F48D0, &stru_1001C6548);
            }
            if (!_NRLogIsLevelEnabled()) {
              goto LABEL_163;
            }
            goto LABEL_73;
          }
          if (v41 == 2)
          {
            if (qword_1001F48D0 != -1) {
              dispatch_once(&qword_1001F48D0, &stru_1001C6548);
            }
            if (!_NRLogIsLevelEnabled()) {
              goto LABEL_163;
            }
            goto LABEL_73;
          }
        }
        else
        {
          int v41 = 0;
        }
        if ([*(id *)(v5 + 48) state] != (id)5) {
          goto LABEL_163;
        }
        if (v41 == 3)
        {
          id v67 = sub_1000286EC();
          int v68 = _NRLogIsLevelEnabled();

          if (v68) {
            goto LABEL_137;
          }
          goto LABEL_161;
        }
        if (v15)
        {
          if ([(NSMutableSet *)v15->_connectedPipes count]) {
            goto LABEL_140;
          }
LABEL_180:
          if (v15)
          {
            v15->_int state = 1;
            v15->_flags &= ~2u;
          }
          [(id)v5 reportEvent:4201, @"%s %s %@", "High", "pipe", v12 detailsFormat];
          uint64_t v90 = *(void **)(v5 + 48);
          v108[0] = CBScalablePipeOptionTransport;
          id v81 = v90;
          id v82 = +[NSNumber numberWithInteger:sub_10002C7AC()];
          v108[1] = CBScalablePipeOptionStayConnectedWhenIdle;
          v109[0] = v82;
          v109[1] = &__kCFBooleanTrue;
          int v83 = +[NSDictionary dictionaryWithObjects:v109 forKeys:v108 count:2];
          CFStringRef v84 = @"com.apple.terminusLink.urgent";
          goto LABEL_183;
        }
        if (![0 count]) {
          goto LABEL_180;
        }
LABEL_140:
        id v70 = sub_1000286EC();
        int v71 = _NRLogIsLevelEnabled();

        if (!v71) {
          goto LABEL_161;
        }
LABEL_137:
        id v69 = sub_1000286EC();
LABEL_160:
        _NRLogWithArgs();

        goto LABEL_161;
      }
      id v22 = (char *)v22 + 1;
    }
    while (v20 != v22);
    id v31 = [v18 countByEnumeratingWithState:&v99 objects:v116 count:16];
    id v20 = v31;
    int v17 = v93;
  }
  while (v31);
LABEL_36:

  uint64_t v5 = v94;
  if (!v17)
  {
LABEL_9:
    id v12 = @"PeerToPeer";
    uint64_t v13 = 2;
    if (a2 == 2) {
      goto LABEL_59;
    }
    goto LABEL_10;
  }
  id v12 = @"Server";
  uint64_t v13 = 1;
  if (a2 == 2) {
    goto LABEL_59;
  }
LABEL_10:
  if (a2 != 1)
  {
    if (a2 != 3) {
      goto LABEL_164;
    }
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    id v15 = (NRCBScalablePipeRegistrationState *)*(id *)(v5 + 40);
    id v32 = [(NRCBScalablePipeRegistrationState *)v15 countByEnumeratingWithState:&v95 objects:v107 count:16];
    if (!v32) {
      goto LABEL_163;
    }
    id v33 = v32;
    uint64_t v34 = *(void *)v96;
LABEL_42:
    uint64_t v35 = 0;
    while (1)
    {
      if (*(void *)v96 != v34) {
        objc_enumerationMutation(v15);
      }
      if ([*(id *)(*((void *)&v95 + 1) + 8 * v35) state] == 8) {
        break;
      }
      if (v33 == (id)++v35)
      {
        id v33 = [(NRCBScalablePipeRegistrationState *)v15 countByEnumeratingWithState:&v95 objects:v107 count:16];
        if (v33) {
          goto LABEL_42;
        }
        goto LABEL_163;
      }
    }

    if (a3)
    {
      id v43 = sub_10002C700(v5, 3, 1);
      id v15 = v43;
      if (v43)
      {
        int v44 = v43->_state;
        if (v44 == 1)
        {
          id v51 = sub_1000286EC();
          int v52 = _NRLogIsLevelEnabled();

          if (!v52) {
            goto LABEL_163;
          }
          goto LABEL_104;
        }
        if (v44 == 2)
        {
          id v45 = sub_1000286EC();
          int v46 = _NRLogIsLevelEnabled();

          if (!v46) {
            goto LABEL_163;
          }
LABEL_104:
          id v42 = sub_1000286EC();
          goto LABEL_105;
        }
      }
      else
      {
        int v44 = 0;
      }
      if ([*(id *)(v5 + 48) state] != (id)5) {
        goto LABEL_163;
      }
      if (v44 == 3)
      {
        id v72 = sub_1000286EC();
        int v73 = _NRLogIsLevelEnabled();

        if (!v73) {
          goto LABEL_161;
        }
LABEL_159:
        id v69 = sub_1000286EC();
        goto LABEL_160;
      }
      if (v15)
      {
        if ([(NSMutableSet *)v15->_connectedPipes count]) {
          goto LABEL_149;
        }
      }
      else if ([0 count])
      {
LABEL_149:
        id v74 = sub_1000286EC();
        int v75 = _NRLogIsLevelEnabled();

        if (!v75) {
          goto LABEL_161;
        }
        goto LABEL_159;
      }
      if (v15)
      {
        v15->_int state = 1;
        v15->_flags &= ~2u;
      }
      [(id)v5 reportEvent:4201, @"%s %s %@", "Isochronous", "p2pPipe", v12 detailsFormat];
      unsigned int v91 = *(void **)(v5 + 48);
      v105[0] = CBScalablePipeOptionTransport;
      id v81 = v91;
      id v82 = +[NSNumber numberWithInteger:sub_10002C7AC()];
      v105[1] = CBScalablePipeOptionStayConnectedWhenIdle;
      v106[0] = v82;
      v106[1] = &__kCFBooleanTrue;
      int v83 = +[NSDictionary dictionaryWithObjects:v106 forKeys:v105 count:2];
      CFStringRef v84 = @"com.apple.terminusLink.datagram.p2p";
LABEL_192:
      uint32_t v86 = v81;
      uint64_t v87 = v13;
      uint64_t v88 = 3;
      goto LABEL_193;
    }
    long long v47 = sub_10002C700(v5, 3, 0);
    id v15 = v47;
    if (v47)
    {
      int v48 = v47->_state;
      if (v48 == 1)
      {
        id v53 = sub_1000286EC();
        int v54 = _NRLogIsLevelEnabled();

        if (!v54) {
          goto LABEL_163;
        }
        goto LABEL_104;
      }
      if (v48 == 2)
      {
        id v49 = sub_1000286EC();
        int v50 = _NRLogIsLevelEnabled();

        if (!v50) {
          goto LABEL_163;
        }
        goto LABEL_104;
      }
    }
    else
    {
      int v48 = 0;
    }
    if ([*(id *)(v5 + 48) state] != (id)5) {
      goto LABEL_163;
    }
    if (v48 == 3)
    {
      id v76 = sub_1000286EC();
      int v77 = _NRLogIsLevelEnabled();

      if (!v77) {
        goto LABEL_161;
      }
      goto LABEL_159;
    }
    if (v15)
    {
      if ([(NSMutableSet *)v15->_connectedPipes count]) {
        goto LABEL_158;
      }
    }
    else if ([0 count])
    {
LABEL_158:
      id v78 = sub_1000286EC();
      int v79 = _NRLogIsLevelEnabled();

      if (!v79) {
        goto LABEL_161;
      }
      goto LABEL_159;
    }
    if (v15)
    {
      v15->_int state = 1;
      v15->_flags &= ~2u;
    }
    [(id)v5 reportEvent:4201, @"%s %s %@", "Isochronous", "pipe", v12 detailsFormat];
    id v92 = *(void **)(v5 + 48);
    v103[0] = CBScalablePipeOptionTransport;
    id v81 = v92;
    id v82 = +[NSNumber numberWithInteger:sub_10002C7AC()];
    v103[1] = CBScalablePipeOptionStayConnectedWhenIdle;
    v104[0] = v82;
    v104[1] = &__kCFBooleanTrue;
    int v83 = +[NSDictionary dictionaryWithObjects:v104 forKeys:v103 count:2];
    CFStringRef v84 = @"com.apple.terminusLink.datagram";
    goto LABEL_192;
  }
  if (!a3)
  {
    uint64_t v36 = sub_10002C700(v5, 1, 0);
    id v15 = v36;
    if (v36)
    {
      int v37 = v36->_state;
      if (v37 == 1)
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_163;
        }
        goto LABEL_73;
      }
      if (v37 == 2)
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_163;
        }
        goto LABEL_73;
      }
    }
    else
    {
      int v37 = 0;
    }
    if ([*(id *)(v5 + 48) state] != (id)5) {
      goto LABEL_163;
    }
    if (v37 == 3)
    {
      id v59 = sub_1000286EC();
      int v60 = _NRLogIsLevelEnabled();

      if (v60) {
        goto LABEL_137;
      }
      goto LABEL_161;
    }
    if (v15)
    {
      if ([(NSMutableSet *)v15->_connectedPipes count]) {
        goto LABEL_122;
      }
    }
    else if ([0 count])
    {
LABEL_122:
      id v61 = sub_1000286EC();
      int v62 = _NRLogIsLevelEnabled();

      if (v62) {
        goto LABEL_137;
      }
      goto LABEL_161;
    }
    if (v15)
    {
      v15->_int state = 1;
      v15->_flags &= ~2u;
    }
    [(id)v5 reportEvent:4201, @"%s %s %@", "Medium", "pipe", v12 detailsFormat];
    unsigned int v85 = *(void **)(v5 + 48);
    v112[0] = CBScalablePipeOptionTransport;
    id v81 = v85;
    id v82 = +[NSNumber numberWithInteger:sub_10002C7AC()];
    v112[1] = CBScalablePipeOptionStayConnectedWhenIdle;
    v113[0] = v82;
    v113[1] = &__kCFBooleanTrue;
    int v83 = +[NSDictionary dictionaryWithObjects:v113 forKeys:v112 count:2];
    CFStringRef v84 = @"com.apple.terminusLink";
    goto LABEL_174;
  }
  id v14 = sub_10002C700(v5, 1, 1);
  id v15 = v14;
  if (!v14)
  {
    int v16 = 0;
LABEL_107:
    if ([*(id *)(v5 + 48) state] != (id)5) {
      goto LABEL_163;
    }
    if (v16 == 3)
    {
      id v55 = sub_1000286EC();
      int v56 = _NRLogIsLevelEnabled();

      if (v56) {
        goto LABEL_137;
      }
      goto LABEL_161;
    }
    if (v15)
    {
      if ([(NSMutableSet *)v15->_connectedPipes count]) {
        goto LABEL_113;
      }
    }
    else if ([0 count])
    {
LABEL_113:
      id v57 = sub_1000286EC();
      int v58 = _NRLogIsLevelEnabled();

      if (v58) {
        goto LABEL_137;
      }
      goto LABEL_161;
    }
    if (v15)
    {
      v15->_int state = 1;
      v15->_flags &= ~2u;
    }
    [(id)v5 reportEvent:4201, @"%s %s %@", "Medium", "p2pPipe", v12 detailsFormat];
    int v80 = *(void **)(v5 + 48);
    v114[0] = CBScalablePipeOptionTransport;
    id v81 = v80;
    id v82 = +[NSNumber numberWithInteger:sub_10002C7AC()];
    v114[1] = CBScalablePipeOptionStayConnectedWhenIdle;
    v115[0] = v82;
    v115[1] = &__kCFBooleanTrue;
    int v83 = +[NSDictionary dictionaryWithObjects:v115 forKeys:v114 count:2];
    CFStringRef v84 = @"com.apple.terminusLink.p2p";
LABEL_174:
    uint32_t v86 = v81;
    uint64_t v87 = v13;
    uint64_t v88 = 1;
    goto LABEL_193;
  }
  int v16 = v14->_state;
  if (v16 == 1)
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_163;
    }
    goto LABEL_73;
  }
  if (v16 != 2) {
    goto LABEL_107;
  }
  if (qword_1001F48D0 != -1) {
    dispatch_once(&qword_1001F48D0, &stru_1001C6548);
  }
  if (!_NRLogIsLevelEnabled()) {
    goto LABEL_163;
  }
LABEL_73:
  id v42 = sub_1000286EC();
LABEL_105:
  _NRLogWithArgs();

LABEL_163:
LABEL_164:
}

NRCBScalablePipeRegistrationState *sub_10002C700(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = &OBJC_IVAR___NRLinkManagerBluetooth__pipeRegistrations;
  if (a3) {
    uint64_t v4 = &OBJC_IVAR___NRLinkManagerBluetooth__p2pPipeRegistrations;
  }
  id v5 = *(id *)(a1 + *v4);
  uint64_t v6 = +[NSNumber numberWithInteger:a2];
  id v7 = [v5 objectForKeyedSubscript:v6];
  if (!v7)
  {
    id v7 = objc_alloc_init(NRCBScalablePipeRegistrationState);
    [v5 setObject:v7 forKeyedSubscript:v6];
  }

  return v7;
}

uint64_t sub_10002C7AC()
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  uint32_t v0 = (id)qword_1001F4A18;
  if (v0)
  {
    if (v0[10]) {
      uint64_t v1 = 2;
    }
    else {
      uint64_t v1 = 1;
    }
  }
  else
  {
    uint64_t v1 = 1;
  }

  return v1;
}

void sub_10002CB6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  int v3 = WeakRetained;
  if (WeakRetained) {
    id WeakRetained = (void *)WeakRetained[2];
  }
  unsigned int v4 = [WeakRetained containsObject:*(void *)(a1 + 32)];

  if (v4)
  {
    id v5 = *(id **)(a1 + 40);
    id v6 = *(id *)(a1 + 32);
    id v7 = v6;
    if (!v5)
    {
LABEL_97:

      return;
    }
    if (!v6)
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      id v76 = (id)qword_1001F48C8;
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_97;
      }
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      id v13 = (id)qword_1001F48C8;
      _NRLogWithArgs();
      goto LABEL_96;
    }
    id v8 = v5[3];
    dispatch_assert_queue_V2(v8);

    id v9 = [v7 peer];
    id v10 = [v9 identifier];

    id v11 = [v7 priority];
    id v12 = [v7 priority];
    id v13 = v10;
    self;
    id v14 = sub_100142940((uint64_t)NRDLocalDevice, v13, 1);

    if (!v14 || !v14[9])
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      id v78 = (id)qword_1001F48C8;
      int v79 = _NRLogIsLevelEnabled();

      if (v79)
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        id v80 = (id)qword_1001F48C8;
        uint64_t v87 = v14;
        uint64_t v88 = v7;
        uint64_t v86 = 911;
        _NRLogWithArgs();
      }
      [v5 reportEvent:3101, @"%@ is disabled for pipe %@", v14, v7, v86, v87, v88 detailsFormat];
      goto LABEL_95;
    }
    id v15 = *((id *)v14 + 4);
    unsigned __int8 v16 = [v5 shouldCreateLinkForNRUUID:v15];

    if ((v16 & 1) == 0)
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        uint64_t v87 = v14;
        uint64_t v88 = v7;
        uint64_t v86 = 916;
        _NRLogWithArgs();
      }
      [v5 reportEvent:3101, @"%@ is unsupported for pipe %@", v14, v7, v86, v87, v88 detailsFormat];
      goto LABEL_95;
    }
    uint64_t v90 = v7;
    if (v11 == (id)3)
    {
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      id v17 = v5[5];
      id v18 = [v17 countByEnumeratingWithState:&v91 objects:v95 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v92;
LABEL_20:
        uint64_t v21 = 0;
        while (1)
        {
          if (*(void *)v92 != v20) {
            objc_enumerationMutation(v17);
          }
          uint64_t v22 = *(void *)(*((void *)&v91 + 1) + 8 * v21);
          if (v22) {
            uint64_t v23 = *(void **)(v22 + 327);
          }
          else {
            uint64_t v23 = 0;
          }
          id v24 = v23;
          if ([v24 isEqual:v13])
          {
            unsigned int v25 = [(id)v22 state];

            if (v25 != 255)
            {
              id v7 = v90;
              sub_100083B0C(v22, v90);

              goto LABEL_95;
            }
          }
          else
          {
          }
          if (v19 == (id)++v21)
          {
            id v19 = [v17 countByEnumeratingWithState:&v91 objects:v95 count:16];
            if (!v19) {
              break;
            }
            goto LABEL_20;
          }
        }
      }
LABEL_46:

LABEL_94:
      id v7 = v90;
LABEL_95:

LABEL_96:
      goto LABEL_97;
    }
    if (v12 == (id)2)
    {
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      id v17 = v5[5];
      id v26 = [v17 countByEnumeratingWithState:&v91 objects:v95 count:16];
      if (v26)
      {
        id v27 = v26;
        uint64_t v28 = *(void *)v92;
LABEL_35:
        uint64_t v29 = 0;
        while (1)
        {
          if (*(void *)v92 != v28) {
            objc_enumerationMutation(v17);
          }
          uint64_t v30 = *(void *)(*((void *)&v91 + 1) + 8 * v29);
          if (v30) {
            id v31 = *(void **)(v30 + 327);
          }
          else {
            id v31 = 0;
          }
          id v32 = v31;
          if ([v32 isEqual:v13])
          {
            unsigned int v33 = [(id)v30 state];

            if (v33 != 255)
            {
              id v7 = v90;
              sub_100084BC8((char *)v30, (char *)v90);

              goto LABEL_95;
            }
          }
          else
          {
          }
          if (v27 == (id)++v29)
          {
            id v27 = [v17 countByEnumeratingWithState:&v91 objects:v95 count:16];
            if (!v27) {
              goto LABEL_46;
            }
            goto LABEL_35;
          }
        }
      }
      goto LABEL_46;
    }
    id v34 = v5[8];
    if (v34)
    {
      int v89 = v14;
      id v35 = v5[9];

      if (v35)
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        id v36 = v5[9];
        id v37 = [v36 countByEnumeratingWithState:&v91 objects:v95 count:16];
        if (v37)
        {
          id v38 = v37;
          __int16 v39 = 0;
          uint64_t v40 = *(void *)v92;
LABEL_52:
          uint64_t v42 = 0;
          while (1)
          {
            if (*(void *)v92 != v40) {
              objc_enumerationMutation(v36);
            }
            id v43 = *(void **)(*((void *)&v91 + 1) + 8 * v42);
            int v44 = [v43 identifier];
            unsigned int v45 = [v13 isEqual:v44];

            if (v45)
            {
              int v41 = [v43 name];

              __int16 v39 = v41;
              if ([v41 length]) {
                break;
              }
            }
            if (v38 == (id)++v42)
            {
              id v38 = [v36 countByEnumeratingWithState:&v91 objects:v95 count:16];
              int v41 = v39;
              if (!v38) {
                break;
              }
              goto LABEL_52;
            }
          }
        }
        else
        {
          int v41 = 0;
        }

        id v7 = v90;
      }
      else
      {
        int v41 = 0;
      }
      id v14 = v89;
    }
    else
    {
      int v41 = 0;
    }
    if (![v41 length])
    {
      id v46 = objc_alloc((Class)NSString);
      int8x16_t v96 = 0uLL;
      [v13 getUUIDBytes:&v96];
      int8x16_t v97 = v96;
      int8x8_t v47 = veor_s8(*(int8x8_t *)v96.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL));
      v97.i32[0] = v47.i32[0] ^ v47.i32[1];
      id v48 = [objc_alloc((Class)NSData) initWithBytes:&v97 length:16];
      id v49 = [v48 base64EncodedStringWithOptions:0];
      int v50 = [v49 substringToIndex:6];

      id v51 = [v46 initWithFormat:@"?%@", v50];
      int v41 = v51;
    }
    id v52 = objc_loadWeakRetained(v5 + 15);
    id v53 = *((id *)v14 + 4);
    [v52 pipeDidConnectForNRUUID:1 nrUUID:v53];

    int v54 = [NRLinkBluetooth alloc];
    id v55 = v5[3];
    id v56 = *((id *)v14 + 4);
    id v57 = sub_1000A69F4((char *)v54, v55, v5, v56, v7, v41);

    if (!v57)
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      id v81 = (id)qword_1001F48C8;
      int v82 = _NRLogIsLevelEnabled();

      if (v82)
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        id v83 = (id)qword_1001F48C8;
        uint64_t v87 = v14;
        uint64_t v88 = v90;
        uint64_t v86 = 969;
        CFStringRef v84 = "";
        unsigned int v85 = "-[NRLinkManagerBluetooth pipeisAvailable:]";
        _NRLogWithArgs();
      }
      [v90 description:v84, v85, v86, v87, v88];
      id v63 = (NRCBScalablePipeConnectionState *)objc_claimAutoreleasedReturnValue();
      [v5 reportEvent:3101 details:v63];
      goto LABEL_93;
    }
    if (!sub_10002D684((uint64_t)v5)) {
      sub_10002D9D8(v5);
    }
    id v58 = v5[17];
    if (!v58)
    {
      id v59 = objc_alloc_init((Class)NSMutableDictionary);
      id v60 = v5[17];
      v5[17] = v59;

      id v58 = v5[17];
    }
    id v61 = v58;
    id v62 = *((id *)v14 + 4);
    id v63 = [v61 objectForKeyedSubscript:v62];

    if (v63)
    {
      BOOL v64 = v14;
      if (v63->_state == 2)
      {
        uint64_t timeOfDisconnect = v63->_timeOfDisconnect;
        uint64_t v66 = mach_continuous_time();
        unint64_t v69 = 0;
        if (timeOfDisconnect)
        {
          BOOL v70 = v66 >= timeOfDisconnect;
          unint64_t v71 = v66 - timeOfDisconnect;
          if (v71 != 0 && v70)
          {
            if (qword_1001F4BB8 != -1) {
              dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
            }
            LODWORD(v67) = dword_1001F4BC0;
            LODWORD(v68) = *(_DWORD *)algn_1001F4BC4;
            unint64_t v69 = (unint64_t)((double)v71 * (0.000000001 * (double)v67) / (double)v68);
          }
        }
        id v72 = objc_alloc_init(NRAnalyticsLinkManagerBluetooth);
        int v73 = v72;
        if (v72) {
          v72->_pipeDisconnectedDuration = v69;
        }
        [(NRAnalyticsLinkManagerBluetooth *)v72 submit];
      }
      else
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_91;
        }
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        int v73 = (NRAnalyticsLinkManagerBluetooth *)(id)qword_1001F48C8;
        _NRLogWithArgs();
      }
      id v14 = v64;
    }
    else
    {
      id v63 = objc_alloc_init(NRCBScalablePipeConnectionState);
      if (!v63)
      {
        mach_continuous_time();
LABEL_92:
        id v74 = v5[17];
        id v75 = *((id *)v14 + 4);
        [v74 setObject:v63 forKeyedSubscript:v75];

LABEL_93:
        goto LABEL_94;
      }
    }
LABEL_91:
    v63->_int state = 1;
    v63->_timeOfConnect = mach_continuous_time();
    goto LABEL_92;
  }
}

BOOL sub_10002D684(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableSet);
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v3 = *(id *)(a1 + 80);
  uint64_t v4 = [v3 objectForKeyedSubscript:&off_1001D4870];
  id v5 = (void *)v4;
  if (v4) {
    id v6 = *(void **)(v4 + 16);
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  id v8 = [v7 countByEnumeratingWithState:&v42 objects:v48 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = [*(id *)(*((void *)&v42 + 1) + 8 * i) peer];
        id v13 = [v12 identifier];
        [v2 addObject:v13];
      }
      id v9 = [v7 countByEnumeratingWithState:&v42 objects:v48 count:16];
    }
    while (v9);
  }

  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v14 = *(id *)(a1 + 88);
  uint64_t v15 = [v14 objectForKeyedSubscript:&off_1001D4870];
  unsigned __int8 v16 = (void *)v15;
  if (v15) {
    id v17 = *(void **)(v15 + 16);
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;

  id v19 = [v18 countByEnumeratingWithState:&v38 objects:v47 count:16];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = *(void *)v39;
    do
    {
      for (j = 0; j != v20; j = (char *)j + 1)
      {
        if (*(void *)v39 != v21) {
          objc_enumerationMutation(v18);
        }
        uint64_t v23 = [*(id *)(*((void *)&v38 + 1) + 8 * (void)j) peer];
        id v24 = [v23 identifier];
        [v2 addObject:v24];
      }
      id v20 = [v18 countByEnumeratingWithState:&v38 objects:v47 count:16];
    }
    while (v20);
  }

  id v25 = sub_100145FDC();
  id v26 = [v25 mutableCopy];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v27 = v2;
  id v28 = [v27 countByEnumeratingWithState:&v34 objects:v46 count:16];
  if (v28)
  {
    id v29 = v28;
    uint64_t v30 = *(void *)v35;
    do
    {
      for (k = 0; k != v29; k = (char *)k + 1)
      {
        if (*(void *)v35 != v30) {
          objc_enumerationMutation(v27);
        }
        [v26 removeObject:k];
      }
      id v29 = [v27 countByEnumeratingWithState:&v34 objects:v46 count:16];
    }
    while (v29);
  }

  id v32 = [v26 count];
  return v32 != 0;
}

id *sub_10002D9D8(id *result)
{
  if (result[7])
  {
    uint64_t v1 = result;
    switch(*((unsigned char *)result + 32))
    {
      case 0:
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        CFTypeRef result = (id *)_NRLogIsLevelEnabled();
        if (result)
        {
          if (qword_1001F48D0 != -1) {
            goto LABEL_16;
          }
          goto LABEL_14;
        }
        break;
      case 1:
      case 4:
        [result reportEvent:3504];
        CFTypeRef result = (id *)[v1[7] stopAdvertising];
        goto LABEL_4;
      case 2:
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        CFTypeRef result = (id *)_NRLogIsLevelEnabled();
        if (result)
        {
          if (qword_1001F48D0 != -1) {
LABEL_16:
          }
            dispatch_once(&qword_1001F48D0, &stru_1001C6548);
LABEL_14:
          CFTypeRef result = (id *)_NRLogWithArgs();
        }
        break;
      default:
LABEL_4:
        *((unsigned char *)v1 + 32) = 2;
        *((unsigned char *)v1 + 33) = 0;
        break;
    }
  }
  return result;
}

void sub_10002E518(uint64_t a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v4);

    if (a2)
    {
      if (a2 == 5 && sub_100146140())
      {
        sub_10002B498(a1, 1, 0);
        sub_10002B498(a1, 1, 1);
      }
      else
      {
        if ((sub_100146140() & 1) == 0) {
          *(unsigned char *)(a1 + 36) = 1;
        }
        sub_100029D00(a1, 1, 0);
        sub_100029D00(a1, 1, 1);
        id v5 = [*(id *)(a1 + 40) copy];
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        id obj = v5;
        id v6 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
        if (v6)
        {
          id v7 = v6;
          uint64_t v8 = *(void *)v31;
          do
          {
            for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v31 != v8) {
                objc_enumerationMutation(obj);
              }
              id v12 = *(void **)(*((void *)&v30 + 1) + 8 * i);
              [v12 setNoTransport:1];
              id v13 = [v12 nrUUID];
              if (a2 < 6) {
                id v10 = *(&off_1001C65A8 + a2);
              }
              else {
                id v10 = [objc_alloc((Class)NSString) initWithFormat:@"UnknownState(%lld)", a2];
              }
              [v12 cancelWithReason:@"pipe manager state %@", v10];

              id WeakRetained = objc_loadWeakRetained((id *)(a1 + 120));
              [WeakRetained pipeDidConnectForNRUUID:0 nrUUID:v13];

              sub_10002AE48(a1, v13);
            }
            id v7 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
          }
          while (v7);
        }

        if (a2 == 5)
        {
          id v14 = *(id *)(a1 + 80);
          uint64_t v15 = [v14 objectForKeyedSubscript:&off_1001D4870];
          if (v15) {
            v15[9] &= ~8u;
          }

          id v16 = *(id *)(a1 + 80);
          id v17 = [v16 objectForKeyedSubscript:&off_1001D4888];
          if (v17) {
            v17[9] &= ~8u;
          }

          id v18 = *(id *)(a1 + 80);
          id v19 = [v18 objectForKeyedSubscript:&off_1001D48A0];
          if (v19) {
            v19[9] &= ~8u;
          }

          id v20 = *(id *)(a1 + 88);
          uint64_t v21 = [v20 objectForKeyedSubscript:&off_1001D4870];
          if (v21) {
            v21[9] &= ~8u;
          }

          id v22 = *(id *)(a1 + 88);
          uint64_t v23 = [v22 objectForKeyedSubscript:&off_1001D4888];
          if (v23) {
            v23[9] &= ~8u;
          }

          id v24 = *(id *)(a1 + 88);
          id v25 = [v24 objectForKeyedSubscript:&off_1001D48A0];
          if (v25) {
            v25[9] &= ~8u;
          }
        }
        else
        {
          if (qword_1001F48D0 != -1) {
            dispatch_once(&qword_1001F48D0, &stru_1001C6548);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F48D0 != -1) {
              dispatch_once(&qword_1001F48D0, &stru_1001C6548);
            }
            uint64_t v28 = 1530;
            id v26 = "";
            id v27 = "-[NRLinkManagerBluetooth handleSPMStateChange:]";
            _NRLogWithArgs();
          }
          [*(id *)(a1 + 80) removeAllObjects:v26, v27, v28];
          [*(id *)(a1 + 88) removeAllObjects];
        }
      }
    }
  }
}

void sub_10002EC58(void *a1, unint64_t a2)
{
  if (!a1[7]) {
    return;
  }
  if (a2 >= 6) {
    id v3 = [objc_alloc((Class)NSString) initWithFormat:@"UnknownState(%lld)", a2];
  }
  else {
    id v3 = *(&off_1001C65A8 + a2);
  }
  [a1 reportEvent:3500 details:v3];

  uint64_t v4 = (void *)a1[7];
  if (v4 && [v4 state] == (id)5 && sub_100146140())
  {
    if (sub_10002D684((uint64_t)a1))
    {
      sub_10002B090((uint64_t)a1);
      return;
    }
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
  }

  sub_10002D9D8((id *)a1);
}

void sub_10002F1BC(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  id v4 = WeakRetained;
  [WeakRetained linkDidReceiveData:a1[5] data:a1[6]];
}

void sub_10002F71C(id *a1, void *a2, void *a3)
{
  unint64_t v36 = a2;
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = [a1[14] objectForKeyedSubscript:v5];
    if (v36 | v6 && ![(id)v36 isEqual:v6])
    {
      [a1[14] setObject:v36 forKeyedSubscript:v5];
      id v7 = [(id)v36 inputBytesPerSecond];
      id v8 = [v7 unsignedIntValue];

      id v9 = [(id)v36 outputBytesPerSecond];
      id v10 = [v9 unsignedIntValue];

      id v11 = [(id)v36 packetsPerSecond];
      id v12 = [v11 unsignedIntValue];

      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        id v34 = v10;
        id v35 = v12;
        id v32 = v5;
        id v33 = v8;
        long long v30 = "-[NRLinkManagerBluetooth applyLinkRequirements:forBTUUID:]";
        uint64_t v31 = 800;
        id v29 = "";
        _NRLogWithArgs();
      }
      [a1[6] setLinkRequirementsForPeer:v5 withClientName:@"com.apple.terminusLink" packetsPerSecond:v12 inputBytesPerSecond:v8 outputBytesPerSecond:v10 packetsPerSecond:v29 inputBytesPerSecond:v30 outputBytesPerSecond:v31 packetsPerSecond:v32 inputBytesPerSecond:v33 outputBytesPerSecond:v34 packetsPerSecond:v35];
      unsigned int v13 = [(id)v36 isNotEmpty];
      unsigned int v14 = [(id)v6 isNotEmpty];
      if (v13)
      {
        if (v14)
        {
          [v36 setStartTime:[v6 startTime]];
          [v36 setReportedToABC:[v6 reportedToABC]];
        }
        else
        {
          [(id)v36 setStartTime:mach_continuous_time()];
        }
      }
      else if (v14)
      {
        uint64_t v15 = mach_continuous_time();
        id v16 = objc_alloc_init(NRAnalyticsBluetoothAssertion);
        id v17 = [(id)v6 startTime];
        double v20 = 0.0;
        if (v17)
        {
          unint64_t v21 = v15 - (void)v17;
          if (v15 > (unint64_t)v17)
          {
            if (qword_1001F4BB8 != -1) {
              dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
            }
            LODWORD(v18) = dword_1001F4BC0;
            LODWORD(v19) = *(_DWORD *)algn_1001F4BC4;
            double v20 = (double)v21 * (0.000000001 * (double)v18) / (double)v19;
          }
        }
        if (v16) {
          v16->_durationInSec = v20;
        }
        id v22 = [a1[14] count:v20];
        if (v16) {
          v16->_multipleAssertions = v22 != 0;
        }
        [(NRAnalyticsBluetoothAssertion *)v16 submit];
        sub_10002FCFC((void *)v6, 1, v15);
      }
      if ([a1[14] count])
      {
        if (!a1[16])
        {
          uint64_t v23 = a1[3];
          id v24 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v23);

          dispatch_source_set_timer(v24, 0x8000000000000000, 0x8BB2C97000uLL, 0x12A05F200uLL);
          objc_initWeak(&location, a1);
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3221225472;
          handler[2] = sub_10002FFBC;
          handler[3] = &unk_1001C88B8;
          objc_copyWeak(&v39, &location);
          id v25 = v24;
          long long v38 = v25;
          dispatch_source_set_event_handler(v25, handler);
          dispatch_resume(v25);
          objc_storeStrong(a1 + 16, v24);
          if (qword_1001F48D0 != -1) {
            dispatch_once(&qword_1001F48D0, &stru_1001C6548);
          }
          id v26 = (id)qword_1001F48C8;
          char IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            if (qword_1001F48D0 != -1) {
              dispatch_once(&qword_1001F48D0, &stru_1001C6548);
            }
            id v28 = (id)qword_1001F48C8;
            _NRLogWithArgs();
          }
          objc_destroyWeak(&v39);
          objc_destroyWeak(&location);
        }
      }
      else
      {
        sub_10002FEB0((uint64_t)a1);
      }
    }
    else
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        _NRLogWithArgs();
      }
    }
  }
}

void sub_10002FC80(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_10002FC9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  id v4 = WeakRetained;
  [WeakRetained linkIsUnavailable:*(void *)(a1 + 40)];
}

uint64_t sub_10002FCFC(void *a1, int a2, unint64_t a3)
{
  id v21 = a1;
  id v5 = [v21 reportedToABC];
  id v6 = v21;
  if ((v5 & 1) == 0)
  {
    id v5 = [v21 startTime];
    id v6 = v21;
    if (v5)
    {
      BOOL v9 = a3 > (unint64_t)v5;
      unint64_t v10 = a3 - (void)v5;
      if (v9)
      {
        if (qword_1001F4BB8 != -1) {
          dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
        }
        LODWORD(v7) = dword_1001F4BC0;
        LODWORD(v8) = *(_DWORD *)algn_1001F4BC4;
        double v11 = (double)v10 * (0.000000001 * (double)v7) / (double)v8;
        id v6 = v21;
        if (v11 > 599.0)
        {
          if (qword_1001F48D0 != -1) {
            dispatch_once(&qword_1001F48D0, &stru_1001C6548);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F48D0 != -1) {
              dispatch_once(&qword_1001F48D0, &stru_1001C6548);
            }
            double v20 = v11;
            uint64_t v19 = 843;
            id v16 = "";
            unint64_t v18 = "-[NRLinkManagerBluetooth triggerLinkRequirementsABCIfNeeded:shouldTrigger:now:]";
            _NRLogWithArgs();
          }
          id v5 = [v21 setReportedToABC:1 v16 v18 v19 v20];
          id v6 = v21;
          if (a2)
          {
            sub_100115AB0(@"NRLinkManagerBluetooth", @"Bluetooth Assertion", @"exceeded threshold", 0, 0, v12, v13, v14, v17);
            id v6 = v21;
          }
        }
      }
    }
  }

  return _objc_release_x1(v5, v6);
}

void sub_10002FEB0(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 128));
    uint64_t v2 = *(void **)(a1 + 128);
    *(void *)(a1 + 128) = 0;
  }
}

void sub_10002FFBC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained && WeakRetained[16] == *(id *)(a1 + 32))
  {
    uint64_t v4 = mach_continuous_time();
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v5 = v3[14];
    id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v6)
    {
      id v7 = v6;
      int v8 = 0;
      uint64_t v9 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v9) {
            objc_enumerationMutation(v5);
          }
          double v11 = [v3[14] objectForKeyedSubscript:*(void *)(*((void *)&v15 + 1) + 8 * i), (void)v15];
          if (([v11 reportedToABC] & 1) == 0)
          {
            sub_10002FCFC(v11, 0, v4);
            v8 |= [v11 reportedToABC];
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v7);

      if (v8) {
        sub_100115AB0(@"NRLinkManagerBluetooth", @"Bluetooth Assertion", @"exceeded threshold", 0, 0, v12, v13, v14, v15);
      }
    }
    else
    {
    }
  }
}

void sub_100030428(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 9)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsSuspended:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100030B74(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 8)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsReady:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_1000310E0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsAvailable:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100031EF8(uint64_t a1)
{
  uint64_t v2 = &selRef_setSharedSecret_;
  *(unsigned char *)(a1 + 38) = 0;
  id v3 = &selRef_setSharedSecret_;
  *(unsigned char *)(a1 + 37) = 0;
  id v4 = sub_100145A04();
  if (![v4 count]) {
    goto LABEL_68;
  }
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v56 objects:v64 count:16];
  id v7 = &selRef_setSharedSecret_;
  if (!v6)
  {

    char v31 = 0;
    goto LABEL_46;
  }
  id v8 = v6;
  uint64_t v54 = 0;
  id obj = v5;
  id v53 = v4;
  uint64_t v9 = *(void *)v57;
  while (2)
  {
    for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v57 != v9) {
        objc_enumerationMutation(obj);
      }
      double v11 = *(void **)(*((void *)&v56 + 1) + 8 * i);
      uint64_t v12 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, v11);
      if (a1) {
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
      }
      else {
        id WeakRetained = 0;
      }
      unsigned int v14 = [WeakRetained perpetualStandaloneMeadowEnabledForNRUUID:v11, v49, v50, v51, v52];

      if (!v14)
      {
        if (!v12)
        {
          id v19 = 0;
          *(unsigned char *)(a1 + 37) = 1;
LABEL_26:
          id v20 = v19;
          id v21 = [v20 bluetoothRole];

          if (v21 == (id)1)
          {
            BYTE4(v54) = 1;
          }
          else
          {
            if (v12) {
              id v22 = v12[16];
            }
            else {
              id v22 = 0;
            }
            id v23 = v22;
            id v24 = [v23 bluetoothRole];

            if (v24 == (id)2)
            {
              LOBYTE(v54) = 1;
            }
            else
            {
              int v29 = sub_100118D5C(v12);
              LOBYTE(v54) = (v29 == 2) | v54;
              BYTE4(v54) |= v29 != 2;
            }
          }
          goto LABEL_7;
        }
        id v15 = v12[16];
        if (v15)
        {
          long long v16 = v15;
          id v17 = v12[16];
          if ([v17 bluetoothEndpointType] != (id)1)
          {
            id v25 = v12[16];
            id v26 = [v25 bluetoothEndpointType];

            long long v18 = &OBJC_IVAR___NRLinkManagerBluetooth__hasEnabledDevicesUsingClientServer;
            if (v26 != (id)2)
            {
              id v27 = v12[16];
              id v28 = [v27 bluetoothEndpointType];

              long long v18 = &OBJC_IVAR___NRLinkManagerBluetooth__hasEnabledDevicesUsingP2P;
              if (v28 != (id)3) {
                goto LABEL_25;
              }
            }
            goto LABEL_24;
          }
        }
        long long v18 = &OBJC_IVAR___NRLinkManagerBluetooth__hasEnabledDevicesUsingClientServer;
LABEL_24:
        *(unsigned char *)(a1 + *v18) = 1;
LABEL_25:
        id v19 = v12[16];
        goto LABEL_26;
      }
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        uint64_t v51 = 461;
        id v52 = v12;
        id v49 = "";
        int v50 = "-[NRLinkManagerBluetooth setup]";
        _NRLogWithArgs();
      }
LABEL_7:
    }
    id v8 = [obj countByEnumeratingWithState:&v56 objects:v64 count:16];
    if (v8) {
      continue;
    }
    break;
  }

  if ((v54 & 0x100000000) == 0)
  {
    id v4 = v53;
    id v3 = &selRef_setSharedSecret_;
    uint64_t v2 = &selRef_setSharedSecret_;
    char v31 = v54;
    id v7 = &selRef_setSharedSecret_;
LABEL_46:
    if (*(void *)(a1 + *((int *)v7 + 945)))
    {
      sub_100028BB4(a1);
      [*(id *)(a1 + *((int *)v7 + 945)) setDelegate:0];
      uint64_t v32 = *((int *)v7 + 945);
      id v33 = *(void **)(a1 + v32);
      *(void *)(a1 + v32) = 0;
    }
    id v34 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = 0;

    if (v31) {
      goto LABEL_49;
    }
    goto LABEL_41;
  }
  id v4 = v53;
  id v3 = &selRef_setSharedSecret_;
  uint64_t v2 = &selRef_setSharedSecret_;
  if (!*(void *)(a1 + 64))
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
    id v44 = objc_alloc((Class)CBCentralManager);
    id v45 = *(id *)(a1 + 24);
    id v62 = CBCentralManagerOptionShowPowerAlertKey;
    id v63 = &__kCFBooleanTrue;
    id v46 = +[NSDictionary dictionaryWithObjects:&v63 forKeys:&v62 count:1];
    id v47 = [v44 initWithDelegate:a1 queue:v45 options:v46];
    id v48 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v47;

    if (v54) {
      goto LABEL_49;
    }
LABEL_41:
    if (*(void *)(a1 + 56))
    {
      sub_10002D9D8((id *)a1);
      [*(id *)(a1 + 56) setDelegate:0];
      long long v30 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = 0;
    }
    *(unsigned char *)(a1 + 33) = 0;
    goto LABEL_57;
  }
  if ((v54 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_49:
  if (!*(void *)(a1 + 56))
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
    id v35 = objc_alloc((Class)CBPeripheralManager);
    id v36 = *(id *)(a1 + 24);
    id v60 = CBPeripheralManagerOptionShowPowerAlertKey;
    id v61 = &__kCFBooleanTrue;
    long long v37 = +[NSDictionary dictionaryWithObjects:&v61 forKeys:&v60 count:1];
    id v38 = [v35 initWithDelegate:a1 queue:v36 options:v37];
    id v39 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v38;
  }
LABEL_57:
  if (!*(void *)(a1 + 48))
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
    id v40 = objc_alloc((Class)CBScalablePipeManager);
    id v41 = *(id *)(a1 + 24);
    id v42 = [v40 initWithDelegate:a1 queue:v41];
    long long v43 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v42;
  }
  if (!*(unsigned char *)(a1 + *((int *)v2 + 955)) || !*(unsigned char *)(a1 + *((int *)v3 + 954))) {
    sub_100029D00(a1, 1, *(unsigned __int8 *)(a1 + *((int *)v2 + 955)) == 0);
  }
LABEL_68:
}

void sub_1000326B0(uint64_t a1)
{
  if (a1 && _NRIsAppleInternal())
  {
    uint64_t v1 = &unk_1001F4000;
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      uint64_t v38 = 2168;
      id v36 = "";
      long long v37 = "-[NRLinkManagerBluetooth checkBluetoothPairingState]";
      _NRLogWithArgs();
    }
    self;
    uint64_t v2 = sub_10015BD9C();
    dispatch_assert_queue_V2(v2);

    sub_10013BB9C();
    id v3 = objc_alloc_init((Class)NSMutableArray);
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v4 = (id)qword_1001F4D40;
    id v5 = [v4 countByEnumeratingWithState:&v52 objects:v57 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v53;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v53 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v52 + 1) + 8 * i);
          uint64_t v10 = [(id)qword_1001F4D40 objectForKeyedSubscript:v9, v36, v37, v38];
          double v11 = (void *)v10;
          if (v10 && *(unsigned char *)(v10 + 20)) {
            [v3 addObject:v9];
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v52 objects:v57 count:16];
      }
      while (v6);
    }

    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id obj = v3;
    id v12 = [obj countByEnumeratingWithState:&v48 objects:v56 count:16];
    p_cache = (void **)(&OBJC_METACLASS___NRDiscoveryManager + 16);
    if (v12)
    {
      id v14 = v12;
      id v40 = v45;
      id v41 = v47;
      uint64_t v15 = *(void *)v49;
      long long v16 = &OBJC_IVAR___NRDiscoveryClient__deviceFoundBlock;
      do
      {
        for (j = 0; j != v14; j = (char *)j + 1)
        {
          if (*(void *)v49 != v15) {
            objc_enumerationMutation(obj);
          }
          id v26 = *(void **)(*((void *)&v48 + 1) + 8 * (void)j);
          id v27 = (id *)sub_10013DC5C((uint64_t)(p_cache + 373), v26);
          id v28 = v27;
          if (!v27)
          {
            [v16 + 674 removePairerForNRUUID:0];
            if (![v16 + 674 hasPairerForNRUUID:v26]) {
              goto LABEL_26;
            }
LABEL_45:
            if (v1[282] != -1) {
              dispatch_once(&qword_1001F48D0, &stru_1001C6548);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (v1[282] != -1) {
                dispatch_once(&qword_1001F48D0, &stru_1001C6548);
              }
              uint64_t v38 = 2193;
              id v39 = (id *)v26;
              id v36 = "";
              long long v37 = "-[NRLinkManagerBluetooth checkBluetoothPairingState]";
              _NRLogWithArgs();
            }
            goto LABEL_26;
          }
          if (*((unsigned char *)v27 + 9))
          {
            if (!*((unsigned char *)v27 + 20)) {
              goto LABEL_44;
            }
          }
          else
          {
            id v29 = v27[4];
            [v16 + 674 removePairerForNRUUID:v29];

            p_cache = (void **)(&OBJC_METACLASS___NRDiscoveryManager + 16);
            if (!*((unsigned char *)v28 + 20)) {
              goto LABEL_44;
            }
          }
          if (!*((unsigned char *)v28 + 8) && !*((unsigned char *)v28 + 9) && *((unsigned char *)v28 + 10))
          {
            if (v1[282] != -1) {
              dispatch_once(&qword_1001F48D0, &stru_1001C6548);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (v1[282] != -1) {
                dispatch_once(&qword_1001F48D0, &stru_1001C6548);
              }
              uint64_t v38 = 2180;
              id v39 = v28;
              id v36 = "";
              long long v37 = "-[NRLinkManagerBluetooth checkBluetoothPairingState]";
              _NRLogWithArgs();
            }
            id v30 = objc_alloc((Class)(v16 + 674));
            id v31 = v28[4];
            id v32 = [v30 initWithNRUUID:v31];

            id v33 = *(id *)(a1 + 24);
            v46[0] = _NSConcreteStackBlock;
            v46[1] = 3221225472;
            v47[0] = sub_100032E1C;
            v47[1] = &unk_1001C6528;
            void v47[2] = v26;
            [v32 unpairWithCompletionQueue:v33 completionBlock:v46];

            p_cache = &OBJC_METACLASS___NRDiscoveryManager.cache;
          }
LABEL_44:
          if (objc_msgSend(v16 + 674, "hasPairerForNRUUID:", v26, v36, v37, v38, v39, v40, v41)) {
            goto LABEL_45;
          }
          if (*((unsigned char *)v28 + 9) && *((unsigned char *)v28 + 20) && !*((unsigned char *)v28 + 10))
          {
            id v34 = v28[4];
            self;
            id v25 = [(id)qword_1001F4D70 objectForKeyedSubscript:v34];

            uint64_t v35 = v1[282];
            if (v25)
            {
              if (v35 != -1) {
                dispatch_once(&qword_1001F48D0, &stru_1001C6548);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (v1[282] != -1) {
                  dispatch_once(&qword_1001F48D0, &stru_1001C6548);
                }
                uint64_t v38 = 2202;
                id v39 = v28;
                id v36 = "";
                long long v37 = "-[NRLinkManagerBluetooth checkBluetoothPairingState]";
                _NRLogWithArgs();
              }
              long long v18 = objc_alloc_init(NRBluetoothPairerParameters);
              [(NRBluetoothPairerParameters *)v18 setPairingType:0];
              [(NRBluetoothPairerParameters *)v18 setBluetoothUUID:v25];
              id v19 = objc_alloc((Class)(v16 + 674));
              id v20 = v25;
              id v21 = v1;
              id v22 = v28[4];
              id v23 = [v19 initWithNRUUID:v22];

              id v24 = *(id *)(a1 + 24);
              v44[0] = _NSConcreteStackBlock;
              v44[1] = 3221225472;
              v45[0] = sub_100032FEC;
              v45[1] = &unk_1001C6528;
              v45[2] = v26;
              [v23 pairWithParameters:v18 completionQueue:v24 completionBlock:v44];

              uint64_t v1 = v21;
              id v25 = v20;
              long long v16 = &OBJC_IVAR___NRDiscoveryClient__deviceFoundBlock;

              p_cache = &OBJC_METACLASS___NRDiscoveryManager.cache;
            }
            else
            {
              if (v35 != -1) {
                dispatch_once(&qword_1001F48D0, &stru_1001C6548);
              }
              p_cache = (void **)(&OBJC_METACLASS___NRDiscoveryManager + 16);
              if (_NRLogIsLevelEnabled())
              {
                if (v1[282] != -1) {
                  dispatch_once(&qword_1001F48D0, &stru_1001C6548);
                }
                uint64_t v38 = 2199;
                id v39 = v28;
                id v36 = "";
                long long v37 = "-[NRLinkManagerBluetooth checkBluetoothPairingState]";
                _NRLogWithArgs();
              }
            }
          }
LABEL_26:
        }
        id v14 = [obj countByEnumeratingWithState:&v48 objects:v56 count:16];
      }
      while (v14);
    }
  }
}

void sub_100032E1C(uint64_t a1, int a2, void *a3)
{
  id v9 = a3;
  if (a2)
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
    sub_10014CA4C((uint64_t)NRDLocalDevice, 0, *(void **)(a1 + 32));
  }
  else
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v5 = (id)qword_1001F4A18;
  sub_1000AD794(v5, v6, v7, v8);
}

void sub_100032FEC(uint64_t a1, int a2, void *a3)
{
  id v9 = a3;
  if (a2)
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
    sub_10014CA4C((uint64_t)NRDLocalDevice, v9, *(void **)(a1 + 32));
  }
  else
  {
    if (qword_1001F48D0 != -1) {
      dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      _NRLogWithArgs();
    }
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v5 = (id)qword_1001F4A18;
  sub_1000AD794(v5, v6, v7, v8);
}

void sub_1000331BC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v2);

    sub_100031EF8(v1);
    id v3 = [*(id *)(v1 + 40) copy];
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id obj = v3;
    id v4 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v31;
      id location = (id *)(v1 + 16);
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v31 != v6) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v30 + 1) + 8 * i);
          if (v11) {
            id v12 = *(void **)(v11 + 327);
          }
          else {
            id v12 = 0;
          }
          id v13 = v12;
          self;
          id v14 = sub_100142940((uint64_t)NRDLocalDevice, v13, 1);

          id WeakRetained = objc_loadWeakRetained((id *)(v1 + 120));
          if (!v14)
          {
            [(id)v11 cancelWithReason:@"Device has been disabled %@", 0];
            id v9 = 0;
            goto LABEL_8;
          }
          if (!v14[9])
          {
            CFStringRef v8 = @"Device has been disabled %@";
LABEL_7:
            [v11 cancelWithReason:v8, v14];
            id v9 = (void *)*((void *)v14 + 4);
LABEL_8:
            id v10 = v9;
            [WeakRetained pipeDidConnectForNRUUID:0 nrUUID:v10];

            goto LABEL_9;
          }
          uint64_t v16 = v1;
          id v17 = objc_loadWeakRetained(location);
          long long v18 = [(id)v11 nrUUID];
          unsigned __int8 v19 = [v17 perpetualStandaloneMeadowEnabledForNRUUID:v18];

          uint64_t v1 = v16;
          CFStringRef v8 = @"Perpetual standalone Meadow mode enabled for %@";
          if (v19) {
            goto LABEL_7;
          }
LABEL_9:
        }
        id v5 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
      }
      while (v5);
    }

    id v20 = *(void **)(v1 + 48);
    if (v20) {
      sub_10002E518(v1, (unint64_t)[v20 state]);
    }
    id v21 = *(void **)(v1 + 64);
    if (v21) {
      sub_10002A434((void *)v1, (uint64_t)[v21 state]);
    }
    id v22 = *(void **)(v1 + 56);
    if (v22) {
      sub_10002EC58((void *)v1, (unint64_t)[v22 state]);
    }
    id v23 = sub_100145A04();
    if (![v23 count])
    {
      if (*(void *)(v1 + 64))
      {
        sub_100028BB4(v1);
        [*(id *)(v1 + 64) setDelegate:0];
        id v24 = *(void **)(v1 + 64);
        *(void *)(v1 + 64) = 0;
      }
      id v25 = *(void **)(v1 + 72);
      *(void *)(v1 + 72) = 0;

      if (*(void *)(v1 + 56))
      {
        sub_10002D9D8((id *)v1);
        [*(id *)(v1 + 56) setDelegate:0];
        id v26 = *(void **)(v1 + 56);
        *(void *)(v1 + 56) = 0;
      }
      *(unsigned char *)(v1 + 33) = 0;
      sub_10002FEB0(v1);
      id v27 = *(void **)(v1 + 136);
      *(void *)(v1 + 136) = 0;
    }
    sub_1000326B0(v1);
  }
}

void sub_1000336C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (int v3 = *(_DWORD *)(v2 + 16)) != 0)
  {
    *(_DWORD *)(v2 + 16) = v3 - 1;
    if ([*(id *)(a1 + 32) isActive])
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v6 = *(void **)(a1 + 32);
        if (v6) {
          uint64_t v6 = (void *)v6[5];
        }
        uint64_t v7 = v6;
        CFStringRef v8 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v9 = *(void *)(a1 + 32);
        if (v9) {
          uint64_t v9 = *(unsigned int *)(v9 + 16);
        }
        uint64_t v22 = 241;
        uint64_t v23 = v9;
        id v20 = "";
        id v21 = "-[NRQuickRelayAgent unassertAgentWithOptions:]_block_invoke";
        _NRLogWithArgs();
      }
      uint64_t v10 = *(void *)(a1 + 32);
      if (v10)
      {
        if (*(_DWORD *)(v10 + 16)) {
          return;
        }
        id WeakRetained = objc_loadWeakRetained((id *)(v10 + 64));
        uint64_t v12 = *(void *)(a1 + 32);
        if (v12) {
          uint64_t v13 = *(void *)(v12 + 40);
        }
        else {
          uint64_t v13 = 0;
        }
      }
      else
      {
        id WeakRetained = 0;
        uint64_t v13 = 0;
      }
      id v24 = WeakRetained;
      [WeakRetained deviceHasQuickRelayRequest:v13 hasQuickRelayRequest:0 v20 v21 v22 v23];
    }
    else
    {
      uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
      int v17 = _NRLogIsLevelEnabled();

      if (!v17) {
        return;
      }
      long long v18 = *(void **)(a1 + 32);
      if (v18) {
        long long v18 = (void *)v18[5];
      }
      id v24 = v18;
      unsigned __int8 v19 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
  else
  {
    id v14 = (void *)_NRCopyLogObjectForNRUUID();
    int v15 = _NRLogIsLevelEnabled();

    if (!v15) {
      return;
    }
    id v24 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_100033980(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    ++*(_DWORD *)(v2 + 16);
    int v3 = *(void **)(a1 + 32);
  }
  else
  {
    int v3 = 0;
  }
  if ([v3 isActive])
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v6 = *(void **)(a1 + 32);
      if (v6) {
        uint64_t v6 = (void *)v6[5];
      }
      uint64_t v7 = v6;
      CFStringRef v8 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v9 = *(void *)(a1 + 32);
      if (v9) {
        uint64_t v9 = *(unsigned int *)(v9 + 16);
      }
      uint64_t v20 = 219;
      uint64_t v21 = v9;
      long long v18 = "";
      unsigned __int8 v19 = "-[NRQuickRelayAgent assertAgentWithOptions:]_block_invoke";
      _NRLogWithArgs();
    }
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v10 + 64));
      uint64_t v12 = *(void *)(a1 + 32);
      if (v12) {
        uint64_t v13 = *(void *)(v12 + 40);
      }
      else {
        uint64_t v13 = 0;
      }
    }
    else
    {
      id WeakRetained = 0;
      uint64_t v13 = 0;
    }
    uint64_t v22 = WeakRetained;
    [WeakRetained deviceHasQuickRelayRequest:v13 hasQuickRelayRequest:1 v18 v19 v20 v21];
  }
  else
  {
    id v14 = (void *)_NRCopyLogObjectForNRUUID();
    int v15 = _NRLogIsLevelEnabled();

    if (!v15) {
      return;
    }
    uint64_t v16 = *(void **)(a1 + 32);
    if (v16) {
      uint64_t v16 = (void *)v16[5];
    }
    uint64_t v22 = v16;
    int v17 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

id *sub_100033F00(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    if (v8)
    {
      if (v9)
      {
        v43.receiver = a1;
        v43.super_class = (Class)NRQuickRelayAgent;
        uint64_t v11 = (id *)[super init];
        if (v11)
        {
          uint64_t v12 = v11;
          objc_storeStrong(v11 + 6, a3);
          objc_storeStrong(v12 + 5, a2);
          uint64_t v13 = +[NSUUID UUID];
          [v12 setAgentUUID:v13];

          [v12 setUserActivated:1];
          [v12 setSpecificUseOnly:1];
          [v12 setAgentDescription:@"Quick relay netagent"];
          objc_storeWeak(v12 + 8, v10);
          id v14 = objc_alloc((Class)NSString);
          int v15 = [v12 agentUUID];
          uint64_t v16 = [v15 UUIDString];
          id v17 = [v14 initWithFormat:@"NRQuickRelayAgent-%@", v16];
          id v18 = v12[9];
          v12[9] = v17;

          unsigned __int8 v19 = sub_10013DC5C((uint64_t)NRDLocalDevice, v12[5]);
          if (v19)
          {
            uint64_t v20 = v19;
            id v21 = [objc_alloc((Class)NSString) initWithFormat:@"%@", v19];
            id v22 = v12[10];
            v12[10] = v21;

            id v23 = v12[5];
            id v24 = v12[10];
            id v25 = v23;
            id v26 = [v12 agentUUID];
            id v27 = [v26 UUIDString];
            sub_10012F648(v25, 17001, v24, v27);

            a1 = v12;
            goto LABEL_7;
          }
          id v39 = sub_1000343F0();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v41 = sub_1000343F0();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __error();
          uint64_t v42 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v42 = 136446210;
          *(void *)(v42 + 4) = "-[NRQuickRelayAgent initWithNRUUID:queue:delegate:]";
LABEL_21:
          sub_1000343F0();
          _NRLogAbortWithPack();
        }
        id v35 = sub_1000343F0();
        int v36 = _NRLogIsLevelEnabled();

        if (v36)
        {
          id v37 = sub_1000343F0();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __error();
LABEL_17:
        uint64_t v38 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v38 = 136446210;
        *(void *)(v38 + 4) = "-[NRQuickRelayAgent initWithNRUUID:queue:delegate:]";
        goto LABEL_21;
      }
      id v32 = sub_1000343F0();
      int v33 = _NRLogIsLevelEnabled();

      if (v33)
      {
        id v34 = sub_1000343F0();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v29 = sub_1000343F0();
      int v30 = _NRLogIsLevelEnabled();

      if (v30)
      {
        id v31 = sub_1000343F0();
        _NRLogWithArgs();
      }
    }
    _os_log_pack_size();
    __error();
    goto LABEL_17;
  }
LABEL_7:

  return a1;
}

id sub_1000343F0()
{
  if (qword_1001F48E0 != -1) {
    dispatch_once(&qword_1001F48E0, &stru_1001C65D8);
  }
  uint32_t v0 = (void *)qword_1001F48D8;

  return v0;
}

void sub_100034444(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F48D8;
  qword_1001F48D8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100034488(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 48));
    if ([(id)a1 isActive])
    {
      [(id)a1 setActive:0];
      [*(id *)(a1 + 56) updateNetworkAgent:a1];
      uint64_t v2 = *(void **)(a1 + 40);
      id v3 = *(id *)(a1 + 80);
      id v4 = v2;
      id v5 = [(id)a1 agentUUID];
      uint64_t v6 = [v5 UUIDString];
      sub_10012F648(v4, 17004, v3, v6);

      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
      [WeakRetained deviceHasQuickRelayRequest:*(void *)(a1 + 40) hasQuickRelayRequest:0];
    }
  }
}

void sub_10003458C(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 48));
    if (([(id)a1 isActive] & 1) == 0)
    {
      [(id)a1 setActive:1];
      [*(id *)(a1 + 56) updateNetworkAgent:a1];
      if (*(_DWORD *)(a1 + 16))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
        [WeakRetained deviceHasQuickRelayRequest:*(void *)(a1 + 40) hasQuickRelayRequest:1];
      }
      id v3 = *(void **)(a1 + 40);
      id v4 = *(id *)(a1 + 80);
      id v7 = v3;
      id v5 = [(id)a1 agentUUID];
      uint64_t v6 = [v5 UUIDString];
      sub_10012F648(v7, 17005, v4, v6);
    }
  }
}

void sub_100034CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100034CD0()
{
  if (qword_1001F48F0 != -1) {
    dispatch_once(&qword_1001F48F0, &stru_1001C6670);
  }
  uint32_t v0 = (void *)qword_1001F48E8;

  return v0;
}

void sub_100034D24(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v15 = WeakRetained;
    BOOL v4 = [WeakRetained state] == 255;
    id WeakRetained = v15;
    if (!v4)
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      if (a2)
      {
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        id WeakRetained = v15;
        if (!IsLevelEnabled) {
          goto LABEL_10;
        }
        id v7 = (void *)_NRCopyLogObjectForNRUUID();
        id v14 = [v15 copyDescription];
        _NRLogWithArgs();
      }
      else
      {
        int v8 = _NRLogIsLevelEnabled();

        if (v8)
        {
          id v9 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v12 = 1207;
          id v13 = [v15 copyDescription];
          id v10 = "";
          uint64_t v11 = "-[NRLinkWiFi sendControlData:]_block_invoke";
          _NRLogWithArgs();
        }
        [v15 cancelWithReason:@"peer is NOT available (Did not receive response to control notify)"];
      }
      id WeakRetained = v15;
    }
  }
LABEL_10:
}

void sub_100034E78(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F48E8;
  qword_1001F48E8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000356C8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 255);
    if (v2)
    {
      [v2 setClientQueue:*(void *)(a1 + 8)];
      objc_initWeak(location, (id)a1);
      id v3 = *(id *)(a1 + 255);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_100035C10;
      v35[3] = &unk_1001C6C78;
      objc_copyWeak(&v37, location);
      id v4 = v3;
      id v36 = v4;
      [*(id *)(a1 + 255) setStateUpdateBlock:v35];
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_1000363FC;
      v32[3] = &unk_1001C6CA0;
      objc_copyWeak(&v34, location);
      id v5 = v4;
      id v33 = v5;
      [*(id *)(a1 + 255) setChildStateUpdateBlock:v32];
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_1000365CC;
      v29[3] = &unk_1001C6CC8;
      objc_copyWeak(&v31, location);
      id v6 = v5;
      id v30 = v6;
      [*(id *)(a1 + 255) setConfigurationUpdateBlock:v29];
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_1000366A8;
      v26[3] = &unk_1001C6CF0;
      objc_copyWeak(&v28, location);
      id v7 = v6;
      id v27 = v7;
      [*(id *)(a1 + 255) setTrafficSelectorUpdateBlock:v26];
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_1000367A8;
      v23[3] = &unk_1001C6D18;
      objc_copyWeak(&v25, location);
      id v8 = v7;
      id v24 = v8;
      [*(id *)(a1 + 255) setAdditionalAddressesUpdateBlock:v23];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      id v20[2] = sub_100036884;
      v20[3] = &unk_1001C88B8;
      objc_copyWeak(&v22, location);
      id v9 = v8;
      id v21 = v9;
      [*(id *)(a1 + 255) setShortDPDEventBlock:v20];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100036958;
      v17[3] = &unk_1001C6D18;
      objc_copyWeak(&v19, location);
      id v10 = v9;
      id v18 = v10;
      [*(id *)(a1 + 255) setPrivateNotifyStatusEvent:v17];
      uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
      LOBYTE(v3) = _NRLogIsLevelEnabled();

      if (v3)
      {
        uint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
        id v15 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
      objc_destroyWeak(&v19);

      objc_destroyWeak(&v22);
      objc_destroyWeak(&v25);

      objc_destroyWeak(&v28);
      objc_destroyWeak(&v31);

      objc_destroyWeak(&v34);
      objc_destroyWeak(&v37);

      objc_destroyWeak(location);
    }
    else
    {
      id v13 = sub_100034CD0();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v16 = sub_100034CD0();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_100035B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v20 - 112));
  _Unwind_Resume(a1);
}

void sub_100035C10(uint64_t a1, uint64_t a2, void *a3)
{
  id v64 = a3;
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained) {
    goto LABEL_57;
  }
  if (v64)
  {
    if (([WeakRetained ikeClassCEstablished] & 1) == 0)
    {
      uint64_t v6 = mach_absolute_time();
      uint64_t v7 = *(void *)(WeakRetained + 271);
      if (v7) {
        *(void *)(v7 + 40) = v6;
      }
    }
    [WeakRetained setIkeClassDEstablished:0];
    [WeakRetained setIkeClassCEstablished:0];
    WeakRetained[83] = 0;
    uint64_t v8 = NEIKEv2ErrorDomain;
    id v9 = v64;
    if ([v9 code] == (id)4)
    {
      id v10 = [v9 domain];
      unsigned int v11 = [v10 isEqualToString:v8];

      if (v11)
      {
        uint64_t v12 = *(void *)(a1 + 32);
        SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
        [WeakRetained cancelWithReason:@"ClassC session %@ got IKE error %@ with state %@", v12, v9, SessionStateString];
LABEL_56:

        goto LABEL_57;
      }
    }
    else
    {
    }
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = (void *)NEIKEv2CreateSessionStateString();
    [WeakRetained reportEvent:3018, @"ClassC session %@ got IKE error %@ with state %@", v19, v9, v20 detailsFormat];

    [WeakRetained processIKEDisconnection:3 error:v9];
    if ([WeakRetained state] == 255) {
      goto LABEL_57;
    }
    id v21 = v9;
    if ([v21 code] == (id)24)
    {
      uint64_t v22 = NEIKEv2ProtocolErrorDomain;
      id v23 = [v21 domain];
      LOBYTE(v22) = [v23 isEqualToString:v22];

      if (v22) {
        goto LABEL_22;
      }
    }
    else
    {
    }
    id v24 = v21;
    if ([v24 code] == (id)8)
    {
      id v25 = [v24 domain];
      unsigned int v26 = [v25 isEqualToString:v8];

      if (v26)
      {
LABEL_22:
        sub_100036BF4(WeakRetained);
        goto LABEL_57;
      }
    }
    else
    {
    }
    sub_100036D34((uint64_t)WeakRetained);
    goto LABEL_57;
  }
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = (void *)NEIKEv2CreateSessionStateString();
  [WeakRetained reportEvent:3009, @"ClassC session %@ changed state to %@", v14, v15 detailsFormat];

  switch(a2)
  {
    case 1:
      if ([WeakRetained state] == 1)
      {
        id v16 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v18 = (void *)_NRCopyLogObjectForNRUUID();
          id v62 = [WeakRetained copyDescription];
          uint64_t v63 = *(void *)(a1 + 32);
          uint64_t v61 = 836;
          long long v59 = "";
          id v60 = "-[NRLinkWiFi setupIKECallbacksClassC]_block_invoke";
          _NRLogWithArgs();
        }
        [WeakRetained changeStateTo:5 v59 v60 v61 v62 v63];
      }
      else
      {
        unsigned int v33 = [WeakRetained state];
        id v34 = (void *)_NRCopyLogObjectForNRUUID();
        if (v33 == 5)
        {
          int v35 = _NRLogIsLevelEnabled();

          if (!v35) {
            break;
          }
        }
        else
        {
          int v53 = _NRLogIsLevelEnabled();

          if (!v53) {
            break;
          }
        }
        long long v54 = (void *)_NRCopyLogObjectForNRUUID();
        id v55 = [WeakRetained copyDescription];
        _NRLogWithArgs();
      }
      break;
    case 2:
      [WeakRetained setIkeClassDEstablished:1];
      [WeakRetained setIkeClassCEstablished:1];
      unsigned int v27 = [WeakRetained state];
      id v28 = (void *)_NRCopyLogObjectForNRUUID();
      int v29 = _NRLogIsLevelEnabled();

      if (v27 == 8)
      {
        if (v29)
        {
          id v30 = (void *)_NRCopyLogObjectForNRUUID();
          id v62 = [WeakRetained copyDescription];
          uint64_t v63 = *(void *)(a1 + 32);
          uint64_t v61 = 847;
          long long v59 = "";
          id v60 = "-[NRLinkWiFi setupIKECallbacksClassC]_block_invoke";
          _NRLogWithArgs();
        }
      }
      else
      {
        if (v29)
        {
          id v36 = (void *)_NRCopyLogObjectForNRUUID();
          id v62 = [WeakRetained copyDescription];
          uint64_t v63 = *(void *)(a1 + 32);
          uint64_t v61 = 849;
          long long v59 = "";
          id v60 = "-[NRLinkWiFi setupIKECallbacksClassC]_block_invoke";
          _NRLogWithArgs();
        }
        [WeakRetained setPowerAssertionState:0, v59, v60, v61, v62, v63];
        [WeakRetained changeStateTo:8, @"(ClassC IKE %@ connected after received first notify)", *(void *)(a1 + 32) detailsFormat];
        uint64_t v37 = mach_absolute_time();
        uint64_t v38 = *(void *)(WeakRetained + 271);
        if (v38) {
          *(void *)(v38 + 40) = v37;
        }
        *(_DWORD *)(WeakRetained + 223) = 0;
        sub_100037B3C(WeakRetained);
        if ([WeakRetained shouldCreateCompanionProxyAgent])
        {
          id v39 = [WeakRetained companionProxyAgent];

          if (!v39)
          {
            [WeakRetained virtualInterface];
            id v40 = (void *)NEVirtualInterfaceCopyName();
            id v41 = [WeakRetained nrUUID];
            uint64_t v42 = sub_10013DC5C((uint64_t)NRDLocalDevice, v41);
            objc_super v43 = v42;
            if (v42) {
              id v44 = (void *)*((void *)v42 + 14);
            }
            else {
              id v44 = 0;
            }
            id v45 = v44;

            if (v40 && v45)
            {
              id v46 = [NRCompanionProxyAgent alloc];
              id v47 = [WeakRetained queue];
              long long v48 = [WeakRetained nrUUID];
              long long v49 = sub_100064188((id *)&v46->super.isa, v47, v40, v45, v48);
              long long v50 = (void *)*((void *)WeakRetained + 11);
              *((void *)WeakRetained + 11) = v49;

              [WeakRetained reportEvent:12001];
            }
          }
          long long v51 = [WeakRetained companionProxyAgent];
          char v52 = sub_1000644C0((uint64_t)v51);

          if (v52)
          {
            [WeakRetained reportEvent:12002];
          }
          else
          {
            long long v56 = (void *)_NRCopyLogObjectForNRUUID();
            int v57 = _NRLogIsLevelEnabled();

            if (v57)
            {
              long long v58 = (void *)_NRCopyLogObjectForNRUUID();
              uint64_t v61 = 873;
              id v62 = [WeakRetained copyDescription];
              long long v59 = "";
              id v60 = "-[NRLinkWiFi setupIKECallbacksClassC]_block_invoke";
              _NRLogWithArgs();
            }
          }
        }
      }
      SessionStateid String = [WeakRetained linkDelegate:v59, v60, v61, v62, v63];
      [SessionStateString linkIsReady:WeakRetained];
      goto LABEL_56;
    case 3:
      if (([WeakRetained ikeClassCEstablished] & 1) == 0)
      {
        uint64_t v31 = mach_absolute_time();
        uint64_t v32 = *(void *)(WeakRetained + 271);
        if (v32) {
          *(void *)(v32 + 40) = v31;
        }
      }
      [WeakRetained setIkeClassDEstablished:0];
      [WeakRetained setIkeClassCEstablished:0];
      WeakRetained[83] = 0;
      [WeakRetained reportEvent:3018, @"ClassC session %@ cancelled by peer", *(void *)(a1 + 32) detailsFormat];
      [WeakRetained cancelWithReason:@"ClassC session %@ cancelled by peer"];
      break;
    case 4:
      [WeakRetained cancelWithReason:@"ClassC session %@ got unexpected MOBIKE state", *(void *)(a1 + 32)];
      break;
    default:
      SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
      [WeakRetained cancelWithReason:@"ClassC session %@ got bad IKE state %@", SessionStateString, v60, v61];
      goto LABEL_56;
  }
LABEL_57:
}

void sub_1000363FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v18 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v18)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
      [WeakRetained reportEvent:3018, @"ClassC session %@ got child %u state update %@ error %@", v8, a2, SessionStateString, v18 detailsFormat];

      [WeakRetained processIKEDisconnection:3 error:v18];
      if ([WeakRetained state] == 255) {
        goto LABEL_16;
      }
      id v10 = v18;
      if ([v10 code] == (id)24)
      {
        uint64_t v11 = NEIKEv2ProtocolErrorDomain;
        uint64_t v12 = [v10 domain];
        LOBYTE(v11) = [v12 isEqualToString:v11];

        if (v11) {
          goto LABEL_12;
        }
      }
      else
      {
      }
      id v14 = v10;
      if ([v14 code] == (id)8)
      {
        uint64_t v15 = NEIKEv2ErrorDomain;
        id v16 = [v14 domain];
        LODWORD(v15) = [v16 isEqualToString:v15];

        if (v15)
        {
LABEL_12:
          sub_100036BF4((char *)WeakRetained);
          goto LABEL_16;
        }
      }
      else
      {
      }
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 32);
      if (a3 != 3)
      {
        id v17 = (void *)NEIKEv2CreateSessionStateString();
        [WeakRetained reportEvent:3009, @"ClassC session %@ child %u state update %@", v13, a2, v17 detailsFormat];

        goto LABEL_16;
      }
      [WeakRetained reportEvent:3018, @"ClassC session %@ got child %u Disconnected state with no error", v13, a2 detailsFormat];
    }
    sub_100036D34((uint64_t)WeakRetained);
  }
LABEL_16:
}

void sub_1000365CC(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_1000366A8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v12 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = (void *)_NRCopyLogObjectForNRUUID();
      id v11 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_1000367A8(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_100036884(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    id WeakRetained = v6;
    if (IsLevelEnabled)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      id v5 = [v6 copyDescription];
      _NRLogWithArgs();

      id WeakRetained = v6;
    }
  }
}

void sub_100036958(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      id v8 = [WeakRetained copyDescription];
      uint64_t v25 = *(void *)(a1 + 32);
      id v26 = v3;
      uint64_t v23 = 978;
      id v24 = v8;
      id v21 = "";
      uint64_t v22 = "-[NRLinkWiFi setupIKECallbacksClassC]_block_invoke_7";
      _NRLogWithArgs();
    }
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v27 = v3;
    id v9 = v3;
    id v10 = [v9 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v29;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          unsigned int v15 = [v14 notifyStatus:v21, v22, v23, v24, v25, v26];
          id v16 = [v14 notifyData];
          id v17 = (void *)_NRCopyLogObjectForNRUUID();
          int v18 = _NRLogIsLevelEnabled();

          if (v18)
          {
            uint64_t v19 = (void *)_NRCopyLogObjectForNRUUID();
            uint64_t v25 = v15;
            id v26 = v16;
            uint64_t v23 = 1218;
            id v24 = [WeakRetained copyDescription];
            id v21 = "";
            uint64_t v22 = "-[NRLinkWiFi handleNotifyCode:payload:]";
            _NRLogWithArgs();
          }
          if (v15 == 50701)
          {
            sub_10014A7E0((uint64_t)NRDLocalDevice, v16, WeakRetained[4]);
            [WeakRetained checkProxyAgentWithForceUpdate:0];
          }
          else if (v15 == 50702)
          {
            uint64_t v20 = [WeakRetained linkDelegate];
            [v20 linkDidReceiveData:WeakRetained data:v16];
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v28 objects:v32 count:16];
      }
      while (v11);
    }

    id v3 = v27;
  }
}

void sub_100036BF4(char *val)
{
  if (!val[209])
  {
    val[209] = 1;
    int v2 = *(_DWORD *)(val + 223);
    if ((5 * v2) >= 0x1F)
    {
      *(_DWORD *)(val + 223) = 0;
      int v2 = *(_DWORD *)(val + 223);
    }
    *(_DWORD *)(val + 223) = v2 + 1;
    objc_initWeak(&location, val);
    dispatch_time_t v3 = dispatch_time(0x8000000000000000, 1000000000 * (5 * *(_DWORD *)(val + 223)));
    id v4 = [val queue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100037AEC;
    v5[3] = &unk_1001C7FF0;
    objc_copyWeak(&v6, &location);
    dispatch_after(v3, v4, v5);

    objc_destroyWeak(&v6);
    objc_destroyWeak(&location);
  }
}

void sub_100036D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100036D34(uint64_t a1)
{
  if ([(id)a1 state] == 255)
  {
    dispatch_time_t v3 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = (id)_NRCopyLogObjectForNRUUID();
      id v8 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    if ([(id)a1 state] == 8)
    {
      CFStringRef v2 = @"restarting IKE session while link is ready";
    }
    else
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      int v6 = _NRLogIsLevelEnabled();

      if (v6)
      {
        id v7 = (void *)_NRCopyLogObjectForNRUUID();
        id v9 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
      if (++*(_DWORD *)(a1 + 211) < 0xAu)
      {
        v11.receiver = (id)a1;
        v11.super_class = (Class)NRLinkWiFi;
        [super invalidateIKESessionForClass:3];
        [(id)a1 setIkeClassDEstablished:0];
        *(unsigned char *)(a1 + 83) = 0;
        [(id)a1 invalidateIKESession:a1 + 255];
        *(_DWORD *)(a1 + 219) = 0;
        sub_100036F3C((unsigned char *)a1);
        return;
      }
      CFStringRef v2 = @"ClassC session hit max retries";
    }
    [(id)a1 cancelWithReason:v2];
  }
}

void sub_100036F3C(unsigned char *a1)
{
  uint64_t v1 = (uint64_t)a1;
  if (!a1[208])
  {
    if (a1[112] == 2)
    {
      if (![a1 hasCompanionDatapath] || objc_msgSend((id)v1, "virtualInterface"))
      {
        if (*(void *)(v1 + 255)) {
          return;
        }
        id v4 = [(id)v1 nrUUID];
        id v5 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, v4);

        if (v5)
        {
          id v6 = v5[10];

          if (v6)
          {
            id v7 = sub_10011EF54();
            sub_10011EC44(v5, v7);
            id v8 = [(id)v1 localInterfaceName];
            [v7 setOutgoingInterfaceName:v8];

            id v9 = [(id)v1 remoteOuterEndpoint];
            [v7 setRemoteEndpoint:v9];

            [v7 setRequestChildlessSA:[v1 hasCompanionDatapath] ^ 1];
            id v10 = sub_10011F1E0();
            [v10 setMode:2];
            [v10 setReplayWindowSize:4];
            sub_10011EDEC(v5, v10);
            [v7 setRandomizeLocalPort:1];
            objc_super v11 = sub_10011F560(1, v5, 3);
            v35.receiver = (id)v1;
            v35.super_class = (Class)NRLinkWiFi;
            [super invalidateIKESessionForClass:3];
            [(id)v1 setIkeClassDEstablished:0];
            *(unsigned char *)(v1 + 83) = 0;
            [(id)v1 invalidateIKESession:v1 + 255];
            v35.receiver = 0;
            v35.super_class = (Class)&v35;
            int v37 = 0;
            uint64_t v36 = 0x2020000000;
            id v12 = objc_alloc((Class)NEIKEv2Session);
            uint64_t v13 = *(void *)(v1 + 8);
            v34[0] = _NSConcreteStackBlock;
            v34[1] = 3221225472;
            v34[2] = sub_100037614;
            v34[3] = &unk_1001C6650;
            v34[4] = &v35;
            id v14 = [v12 initWithIKEConfig:v7 firstChildConfig:v10 sessionConfig:v11 queue:v13 virtualInterface:objc_msgSend((id)v1, "virtualInterface") ipsecInterface:v34 kernelSASessionName:@"terminusIKE-WiFi-ClassC" packetDelegate:0];
            unsigned int v15 = *(void **)(v1 + 255);
            *(void *)(v1 + 255) = v14;

            if (*(void *)(v1 + 255))
            {
              sub_1000356C8(v1);
              id v16 = *(id *)(v1 + 271);
              if (v16) {
                ++v16[8];
              }

              uint64_t v17 = mach_absolute_time();
              int v18 = *(id *)(v1 + 271);
              if (v18) {
                v18[4] = v17;
              }

              [(id)v1 reportEvent:3015, @"ClassC %@", *(void *)(v1 + 255) detailsFormat];
              [*(id *)(v1 + 255) connect];
            }
            else
            {
              sub_100037678(v1, (const char *)*((unsigned int *)v35.super_class + 6));
            }
            _Block_object_dispose(&v35, 8);

            goto LABEL_23;
          }
          uint64_t v19 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (!IsLevelEnabled)
          {
LABEL_23:

            return;
          }
          id v21 = (void *)_NRCopyLogObjectForNRUUID();
          id v22 = [(id)v1 copyDescription];
          _NRLogWithArgs();
LABEL_22:

          goto LABEL_23;
        }
LABEL_31:
        long long v30 = (void *)_NRCopyLogObjectForNRUUID();
        int v31 = _NRLogIsLevelEnabled();

        if (!v31) {
          goto LABEL_23;
        }
        id v21 = (void *)_NRCopyLogObjectForNRUUID();
        id v22 = [(id)v1 copyDescription];
        _NRLogWithArgs();
        goto LABEL_22;
      }
      id v26 = sub_100034CD0();
      int v27 = _NRLogIsLevelEnabled();

      if (v27)
      {
        id v28 = sub_100034CD0();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v23 = sub_100034CD0();
      int v24 = _NRLogIsLevelEnabled();

      if (v24)
      {
        id v25 = sub_100034CD0();
        _NRLogWithArgs();
      }
    }
    uint64_t v1 = _os_log_pack_size();
    id v5 = (id *)((char *)&v32 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
    __error();
    uint64_t v29 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v29 = 136446210;
    *(void *)(v29 + 4) = "-[NRLinkWiFi setupIPsec]";
    sub_100034CD0();
    _NRLogAbortWithPack();
    __break(1u);
    goto LABEL_31;
  }
  self;
  if (qword_1001F47E8 != -1) {
    dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
  }
  id v33 = (id)qword_1001F47E0;
  CFStringRef v2 = [(id)v1 localInterfaceName];
  dispatch_time_t v3 = [(id)v1 localOuterEndpoint];
  sub_100011C08((uint64_t)v33, (void *)v1, v2, v3);
}

void sub_1000375F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100037614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = getpid();
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8) + 24;

  return _NEHelperGetIKESocketWithResult(a3, a4, a5, v9, v10);
}

void sub_100037678(uint64_t a1, const char *a2)
{
  ++*(_DWORD *)(a1 + 219);
  if ([(id)a1 subtype] == 103
    || [(id)a1 subtype] == 102
    || [(id)a1 subtype] == 104)
  {
    int64_t v4 = 1000000000;
  }
  else
  {
    int64_t v4 = 250000000;
  }
  if (*(_DWORD *)(a1 + 219) > 4u)
  {
    if (strerror_r((int)a2, (char *)__strerrbuf, 0x80uLL)) {
      LOBYTE(__strerrbuf[0]) = 0;
    }
    if (qword_1001F48F0 != -1) {
      dispatch_once(&qword_1001F48F0, &stru_1001C6670);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48F0 != -1) {
        dispatch_once(&qword_1001F48F0, &stru_1001C6670);
      }
      id v6 = (id)qword_1001F48E8;
      objc_super v11 = a2;
      uint64_t v12 = (uint64_t)__strerrbuf;
      uint64_t v10 = (char *)[(id)a1 copyDescription];
      _NRLogWithArgs();
    }
    [a1 cancelWithReason:@"IKE session creation hit max retries" v10, v11, v12];
  }
  else
  {
    if (a2 == 2 || a2 == 51)
    {
      if (strerror_r((int)a2, (char *)__strerrbuf, 0x80uLL)) {
        LOBYTE(__strerrbuf[0]) = 0;
      }
      if (qword_1001F48F0 != -1) {
        dispatch_once(&qword_1001F48F0, &stru_1001C6670);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48F0 != -1) {
          dispatch_once(&qword_1001F48F0, &stru_1001C6670);
        }
        id v5 = (id)qword_1001F48E8;
        unsigned int v15 = a2;
        id v16 = (char *)__strerrbuf;
        uint64_t v13 = (char *)[(id)a1 copyDescription];
        uint64_t v14 = *(unsigned int *)(a1 + 219);
        objc_super v11 = "-[NRLinkWiFi retrySetupIPsec:]";
        uint64_t v12 = 283;
        uint64_t v10 = "";
        _NRLogWithArgs();
      }
    }
    else
    {
      if (strerror_r((int)a2, (char *)__strerrbuf, 0x80uLL)) {
        LOBYTE(__strerrbuf[0]) = 0;
      }
      if (qword_1001F48F0 != -1) {
        dispatch_once(&qword_1001F48F0, &stru_1001C6670);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48F0 != -1) {
          dispatch_once(&qword_1001F48F0, &stru_1001C6670);
        }
        id v7 = (id)qword_1001F48E8;
        uint64_t v12 = (uint64_t)a2;
        uint64_t v13 = (char *)__strerrbuf;
        uint64_t v10 = (char *)[(id)a1 copyDescription];
        objc_super v11 = (const char *)*(unsigned int *)(a1 + 219);
        _NRLogWithArgs();
      }
    }
    [a1 reportEvent:3026 v10, v11, v12, v13, v14, v15, v16];
    objc_initWeak(__strerrbuf, (id)a1);
    dispatch_time_t v8 = dispatch_time(0, v4);
    uint64_t v9 = [(id)a1 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100037A94;
    block[3] = &unk_1001C7FF0;
    objc_copyWeak(&v18, __strerrbuf);
    dispatch_after(v8, v9, block);

    objc_destroyWeak(&v18);
    objc_destroyWeak(__strerrbuf);
  }
}

void sub_100037A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
}

void sub_100037A94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    BOOL v2 = [WeakRetained state] == 255;
    id WeakRetained = v3;
    if (!v2)
    {
      sub_100036F3C(v3);
      id WeakRetained = v3;
    }
  }
}

void sub_100037AEC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    WeakRetained[209] = 0;
    BOOL v2 = WeakRetained;
    sub_100036D34((uint64_t)WeakRetained);
    id WeakRetained = v2;
  }
}

char *sub_100037B3C(char *result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (!objc_opt_class())
  {
    BOOL v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      int64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
      id v14 = [v1 copyDescription];
      _NRLogWithArgs();
    }
  }
  if (*(void *)(v1 + 263)) {
    goto LABEL_8;
  }
  id v5 = objc_alloc_init((Class)NWNetworkOfInterestManager);
  id v6 = *(void **)(v1 + 263);
  *(void *)(v1 + 263) = v5;

  id v7 = *(void **)(v1 + 263);
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = [v1 queue];
    [v8 setQueue:v9];

    [*(id *)(v1 + 263) setDelegate:v1];
LABEL_8:
    uint64_t v10 = mach_absolute_time();
    uint64_t v11 = *(void *)(v1 + 271);
    if (v11)
    {
      *(void *)(v11 + 104) = v10;
      uint64_t v12 = *(id *)(v1 + 271);
      if (v12) {
        ++v12[12];
      }
    }
    else
    {
      uint64_t v12 = 0;
    }

    uint64_t v13 = *(void **)(v1 + 263);
    return (char *)[v13 trackNOIAnyForInterfaceType:1 options:0];
  }
  if (qword_1001F48F0 != -1) {
    dispatch_once(&qword_1001F48F0, &stru_1001C6670);
  }
  CFTypeRef result = (char *)_NRLogIsLevelEnabled();
  if (result)
  {
    if (qword_1001F48F0 != -1) {
      dispatch_once(&qword_1001F48F0, &stru_1001C6670);
    }
    return (char *)_NRLogWithArgs();
  }
  return result;
}

void sub_100037F98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100037FBC(uint64_t a1, int a2)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v17 = WeakRetained;
    BOOL v4 = [WeakRetained state] == 255;
    id WeakRetained = v17;
    if (!v4)
    {
      v17[83] = 0;
      if (!a2)
      {
        uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v14 = 756;
          id v15 = [v17 copyDescription];
          uint64_t v12 = "";
          uint64_t v13 = "-[NRLinkWiFi checkPeerAvailabilityWithForceAggressive:]_block_invoke";
          _NRLogWithArgs();
        }
        [v17 cancelWithReason:@"Dead Peer Detection" v12, v13, v14, v15];
        goto LABEL_11;
      }
      id v5 = *(id *)(v17 + 271);
      if (v5) {
        ++v5[15];
      }

      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      id WeakRetained = v17;
      if (v7)
      {
        id v8 = (void *)_NRCopyLogObjectForNRUUID();
        id v16 = [v17 copyDescription];
        _NRLogWithArgs();

LABEL_11:
        id WeakRetained = v17;
      }
    }
  }
}

void sub_10003822C(uint64_t a1)
{
  if (!a1 || *(_DWORD *)(a1 + 231) == -1) {
    return;
  }
  if (!&_symptom_new)
  {
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      return;
    }
    id v17 = (id)_NRCopyLogObjectForNRUUID();
    id v16 = [(id)a1 copyDescription];
    _NRLogWithArgs();

    goto LABEL_28;
  }
  if ([(id)a1 hasCompanionDatapath])
  {
    [(id)a1 virtualInterface];
    uint64_t v2 = NEVirtualInterfaceCopyName();
    if (v2) {
      goto LABEL_6;
    }
LABEL_16:
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int v9 = _NRLogIsLevelEnabled();

    if (v9)
    {
      uint64_t v10 = (void *)_NRCopyLogObjectForNRUUID();
      id v15 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
    uint64_t v11 = 0;
    goto LABEL_29;
  }
  uint64_t v2 = [(id)a1 localInterfaceName];
  if (!v2) {
    goto LABEL_16;
  }
LABEL_6:
  id v17 = (id)v2;
  if (qword_1001F4BD0 != -1) {
    dispatch_once(&qword_1001F4BD0, &stru_1001C7D28);
  }
  if (!symptom_new())
  {
    if (qword_1001F48F0 != -1) {
      dispatch_once(&qword_1001F48F0, &stru_1001C6670);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48F0 != -1) {
        dispatch_once(&qword_1001F48F0, &stru_1001C6670);
      }
      _NRLogWithArgs();
    }
    goto LABEL_28;
  }
  [v17 length];
  [v17 UTF8String];
  symptom_set_additional_qualifier();
  int v3 = symptom_send();
  notify_cancel(*(_DWORD *)(a1 + 231));
  *(_DWORD *)(a1 + 231) = -1;
  BOOL v4 = (void *)_NRCopyLogObjectForNRUUID();
  if (v3)
  {
    int v5 = _NRLogIsLevelEnabled();

    if (v5) {
      goto LABEL_27;
    }
  }
  else
  {
    int v12 = _NRLogIsLevelEnabled();

    if (v12)
    {
LABEL_27:
      uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
      id v14 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
  }
LABEL_28:
  uint64_t v11 = v17;
LABEL_29:
}

void sub_100038A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100038AA8(uint64_t a1, int a2)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v12 = WeakRetained;
    if ([WeakRetained state] == 255)
    {
      BOOL v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v12;
      if (!IsLevelEnabled) {
        goto LABEL_10;
      }
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v11 = [v12 copyDescription];
      _NRLogWithArgs();
    }
    else if (*(_DWORD *)(v12 + 231) == a2)
    {
      [v12 reportEvent:11004 detailsFormat:@"#%u", ++*(_DWORD *)(v12 + 227)];
      [v12 checkPeerAvailabilityWithForceAggressive:0];
    }
    else
    {
      int v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      id WeakRetained = v12;
      if (!v8) {
        goto LABEL_10;
      }
      int v9 = (void *)_NRCopyLogObjectForNRUUID();
      id v10 = [v12 copyDescription];
      _NRLogWithArgs();
    }
    id WeakRetained = v12;
  }
LABEL_10:
}

void sub_100039334(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 32));
    int v3 = objc_alloc_init(NRPairingParameters);
    BOOL v4 = [(id)a1 localInterfaceName];
    if (v3) {
      objc_storeStrong((id *)&v3->_localInterfaceName, v4);
    }

    int v5 = [(id)a1 localOuterEndpoint];
    if (v3) {
      objc_storeStrong((id *)&v3->_localEndpoint, v5);
    }

    id v6 = [(id)a1 remoteOuterEndpoint];
    int v7 = v6;
    if (v3)
    {
      objc_storeStrong((id *)&v3->_remoteEndpoint, v6);

      v3->_isResponder = *(unsigned char *)(a1 + 208);
      v3->_serializeIKESessions = 1;
      v3->_deferIKESessionInvalidation = *(unsigned char *)(a1 + 208);
    }
    else
    {
    }
    objc_initWeak(&location, (id)a1);
    int v8 = sub_10000D5AC((id *)[NRPairingClient alloc], *(void **)(a1 + 8), *(void **)(a1 + 32), v3);
    objc_initWeak(&from, v8);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100039DBC;
    v17[3] = &unk_1001C72D0;
    objc_copyWeak(&v18, &location);
    objc_copyWeak(&v19, &from);
    int v9 = v17;
    id v10 = v9;
    if (v8 && !*((unsigned char *)v8 + 10))
    {
      id v11 = objc_retainBlock(v9);
      id v12 = v8[18];
      v8[18] = v11;
    }
    sub_10000D924((uint64_t)v8);
    objc_storeStrong((id *)(a1 + 287), v8);
    uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
    char IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v15 = (void *)_NRCopyLogObjectForNRUUID();
      id v16 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
    objc_destroyWeak(&v19);
    objc_destroyWeak(&v18);
    objc_destroyWeak(&from);

    objc_destroyWeak(&location);
  }
}

void sub_1000395B4(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1000395E8(uint64_t a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    BOOL v4 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v16 = 455;
    id v17 = [(id)a1 copyDescription];
    id v14 = "";
    id v15 = "-[NRLinkWiFi initiateConnection]";
    _NRLogWithArgs();
  }
  if (*(unsigned char *)(a1 + 208)) {
    goto LABEL_5;
  }
  int v5 = [(id)a1 remoteOuterEndpoint];

  if (v5)
  {
    if ([(id)a1 setupVirtualInterface])
    {
      [(id)a1 setPowerAssertionState:1];
LABEL_5:
      [a1 reportEvent:3001 v14, v15, v16, v17];
      sub_100036F3C((unsigned char *)a1);
      return;
    }
    if ([(id)a1 state] != 255)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7)
      {
        int v8 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v16 = 238;
        id v17 = [(id)a1 copyDescription];
        id v14 = "";
        id v15 = "-[NRLinkWiFi retrySetupVirtualInterface]";
        _NRLogWithArgs();
      }
      if (++*(_DWORD *)(a1 + 215) > 9u)
      {
        id v11 = (void *)_NRCopyLogObjectForNRUUID();
        int v12 = _NRLogIsLevelEnabled();

        if (v12)
        {
          uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
          id v14 = (char *)[(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        [a1 cancelWithReason:@"IPsec interface setup hit max retries" v14, v15, v16, v17];
      }
      else
      {
        [(id)a1 reportEvent:3025];
        objc_initWeak(&location, (id)a1);
        dispatch_time_t v9 = dispatch_time(0, 250000000);
        id v10 = [(id)a1 queue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100039D58;
        block[3] = &unk_1001C7FF0;
        objc_copyWeak(&v19, &location);
        dispatch_after(v9, v10, block);

        objc_destroyWeak(&v19);
        objc_destroyWeak(&location);
      }
    }
  }
  else
  {
    [(id)a1 cancelWithReason:@"No remote outer endpoint present"];
  }
}

void sub_1000398F8(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10003990C(uint64_t a1)
{
  if (a1 && !*(void *)(a1 + 295))
  {
    bonjour_service = nw_browse_descriptor_create_bonjour_service("_nr._tcp", "local");
    int v3 = nw_parameters_create();
    nw_parameters_set_use_awdl();
    BOOL v4 = [(id)a1 localInterfaceName];
    [v4 UTF8String];
    int v5 = nw_interface_create_with_name();
    nw_parameters_require_interface(v3, v5);
    id v6 = nw_browser_create(bonjour_service, v3);
    objc_initWeak(&location, (id)a1);
    state_changed_handler[0] = _NSConcreteStackBlock;
    state_changed_handler[1] = 3221225472;
    state_changed_handler[2] = sub_100039B98;
    state_changed_handler[3] = &unk_1001C6600;
    objc_copyWeak(&v15, &location);
    nw_browser_set_state_changed_handler(v6, state_changed_handler);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100039C84;
    handler[3] = &unk_1001C6628;
    objc_copyWeak(&v13, &location);
    nw_browser_set_browse_results_changed_handler(v6, handler);
    int v7 = [(id)a1 queue];
    nw_browser_set_queue(v6, v7);

    nw_browser_start(v6);
    objc_storeStrong((id *)(a1 + 295), v6);
    int v8 = (void *)_NRCopyLogObjectForNRUUID();
    char IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = (void *)_NRCopyLogObjectForNRUUID();
      id v11 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
    objc_destroyWeak(&v13);
    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

void sub_100039B68(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_100039B98(uint64_t a1, uint64_t a2, void *a3)
{
  id v10 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v5 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained state] != 255)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        int v8 = (void *)_NRCopyLogObjectForNRUUID();
        id v9 = [v5 copyDescription];
        _NRLogWithArgs();
      }
    }
  }
}

void sub_100039C84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v7 = WeakRetained;
    BOOL v2 = [WeakRetained state] == 255;
    id WeakRetained = v7;
    if (!v2)
    {
      uint64_t v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v7;
      if (IsLevelEnabled)
      {
        int v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [v7 copyDescription];
        _NRLogWithArgs();

        id WeakRetained = v7;
      }
    }
  }
}

void sub_100039D58(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    BOOL v2 = [WeakRetained state] == 255;
    id WeakRetained = v3;
    if (!v2)
    {
      [v3 setStartRequested:0];
      [v3 start];
      id WeakRetained = v3;
    }
  }
}

uint64_t sub_100039DBC(uint64_t a1, int a2, unsigned int a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    uint64_t v18 = (uint64_t)WeakRetained;
    id WeakRetained = [WeakRetained state];
    uint64_t v7 = v18;
    if (WeakRetained != 255)
    {
      int v8 = objc_loadWeakRetained((id *)(a1 + 40));
      if (!v8 || *(void **)(v18 + 287) != v8) {
        goto LABEL_28;
      }
      uint64_t v9 = v8[6];
      id v10 = objc_alloc_init((Class)NSMutableString);
      id v11 = v10;
      if (v9)
      {
        [v10 appendFormat:@"PairingSessionConnected | "];
        if ((v9 & 2) == 0)
        {
LABEL_7:
          if ((v9 & 4) == 0) {
            goto LABEL_8;
          }
          goto LABEL_15;
        }
      }
      else if ((v9 & 2) == 0)
      {
        goto LABEL_7;
      }
      [v11 appendFormat:@"ClassDVerified | "];
      if ((v9 & 4) == 0)
      {
LABEL_8:
        if ((v9 & 8) == 0) {
          goto LABEL_9;
        }
        goto LABEL_16;
      }
LABEL_15:
      [v11 appendFormat:@"ClassCVerified | "];
      if ((v9 & 8) == 0)
      {
LABEL_9:
        if ((v9 & 0x10) == 0) {
          goto LABEL_10;
        }
        goto LABEL_17;
      }
LABEL_16:
      [v11 appendFormat:@"ClassAVerified | "];
      if ((v9 & 0x10) == 0)
      {
LABEL_10:
        if (a3)
        {
LABEL_11:
          if (a3 > 8) {
            int v12 = @"None";
          }
          else {
            int v12 = *(&off_1001C5E80 + (a3 - 1));
          }
          [(id)v18 cancelWithReason:@"pairing client error: %@ mask: %@", v12, v11];
LABEL_27:

LABEL_28:
          uint64_t v7 = v18;
          goto LABEL_29;
        }
LABEL_18:
        if ((a2 - 1) > 6) {
          int v12 = @"Invalid";
        }
        else {
          int v12 = *(&off_1001C5EC0 + (a2 - 1));
        }
        id v13 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v15 = (void *)_NRCopyLogObjectForNRUUID();
          id v17 = [(id)v18 copyDescription];
          _NRLogWithArgs();
        }
        if (a2 == 5) {
          sub_1000395E8(v18);
        }
        goto LABEL_27;
      }
LABEL_17:
      [v11 appendFormat:@"PairingCompleted | "];
      if (a3) {
        goto LABEL_11;
      }
      goto LABEL_18;
    }
  }
LABEL_29:

  return _objc_release_x1(WeakRetained, v7);
}

id sub_10003B168()
{
  if (qword_1001F4900 != -1) {
    dispatch_once(&qword_1001F4900, &stru_1001C6708);
  }
  uint32_t v0 = (void *)qword_1001F48F8;

  return v0;
}

void sub_10003B1BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F48F8;
  qword_1001F48F8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10003BE54(id result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = [result queue];
    dispatch_assert_queue_V2(v2);

    [(id)v1 reportEvent:10017];
    if (gNRPacketLoggingEnabled)
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        int v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [(id)v1 copyDescription];
        _NRLogWithArgs();
      }
    }
    sub_10003BF74(v1);
    if (*(unsigned char *)(v1 + 209))
    {
      dispatch_resume(*(dispatch_object_t *)(v1 + 319));
      *(unsigned char *)(v1 + 209) = 0;
    }
    return [(id)v1 suspend];
  }
  return result;
}

void sub_10003BF74(uint64_t a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    BOOL v4 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v16 = 720;
    id v17 = [(id)a1 copyDescription];
    id v15 = "-[NRLinkQuickRelay invalidateIDSSession]";
    _NRLogWithArgs();
  }
  *(unsigned char *)(a1 + 216) = 0;
  [(id)a1 reportEvent:10014, @"%@", *(void *)(a1 + 231), v15, v16, v17 detailsFormat];
  int v5 = *(void **)(a1 + 231);
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = [(id)a1 queue];
    [v6 setDelegate:0 queue:v7];

    [*(id *)(a1 + 231) endSession];
    int v8 = *(void **)(a1 + 231);
    *(void *)(a1 + 231) = 0;

    uint64_t v9 = *(void **)(a1 + 639);
    if (*(unsigned char *)(a1 + 212))
    {
      if (!v9) {
        goto LABEL_18;
      }
      if (!v9[18]) {
        goto LABEL_18;
      }
      uint64_t v10 = mach_absolute_time();
      uint64_t v11 = *(void *)(a1 + 639);
      if (!v11) {
        goto LABEL_18;
      }
      int v12 = &OBJC_IVAR___NRAnalyticsCmpnLinkQuickRelay__idsSessionEnd;
      goto LABEL_17;
    }
    if (v9)
    {
      if (!v9[14])
      {
        if (!v9[16]) {
          goto LABEL_18;
        }
        uint64_t v10 = mach_absolute_time();
        uint64_t v11 = *(void *)(a1 + 639);
        if (!v11) {
          goto LABEL_18;
        }
        int v12 = &OBJC_IVAR___NRAnalyticsCmpnLinkQuickRelay__idsSessionReceiveInvitationEnd;
        goto LABEL_17;
      }
      uint64_t v10 = mach_absolute_time();
      uint64_t v11 = *(void *)(a1 + 639);
      if (v11)
      {
        int v12 = &OBJC_IVAR___NRAnalyticsCmpnLinkQuickRelay__idsSessionSendInvitationEnd;
LABEL_17:
        *(void *)(v11 + *v12) = v10;
      }
    }
LABEL_18:
    *(unsigned char *)(a1 + 212) = 0;
    *(unsigned char *)(a1 + 208) = 0;
    *(unsigned char *)(a1 + 213) = 0;
  }
  sub_10003C1B8((unsigned char *)a1);
  id v13 = *(NSObject **)(a1 + 607);
  if (v13)
  {
    dispatch_source_cancel(v13);
    id v14 = *(void **)(a1 + 607);
    *(void *)(a1 + 607) = 0;
  }
}

void sub_10003C1B8(unsigned char *a1)
{
  if (a1)
  {
    if (a1[215])
    {
      [a1 removeObserver:a1 forKeyPath:@"_connection.connectionState" context:0];
      a1[215] = 0;
    }
    uint64_t v2 = [a1 connection];

    if (v2)
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        int v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [a1 copyDescription];
        [a1 connection];
        v12 = id v11 = v6;
        uint64_t v10 = 711;
        int v8 = "";
        uint64_t v9 = "-[NRLinkQuickRelay invalidateConnection]";
        _NRLogWithArgs();
      }
      uint64_t v7 = [a1 connection:v8, v9, v10, v11, v12];
      [v7 cancel];

      [a1 setConnection:0];
    }
  }
}

void sub_10003C3A4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) connection];
  unint64_t v3 = (unint64_t)[v2 connectionState];

  BOOL v4 = *(void **)(a1 + 32);
  int v5 = @"Invalid";
  id v6 = v4;
  switch(v3)
  {
    case 0uLL:
      break;
    case 1uLL:
      int v5 = @"Waiting";
      id v6 = *(void **)(a1 + 32);
      break;
    case 2uLL:
      int v5 = @"Preparing";
      id v6 = *(void **)(a1 + 32);
      break;
    case 3uLL:
      int v5 = @"Ready";
      id v6 = *(void **)(a1 + 32);
      break;
    case 4uLL:
      int v5 = @"Failed";
      id v6 = *(void **)(a1 + 32);
      break;
    case 5uLL:
      int v5 = @"Cancelled";
      id v6 = *(void **)(a1 + 32);
      break;
    default:
      int v5 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"Unknown[%lld]", v3];
      id v6 = *(void **)(a1 + 32);
      break;
  }
  uint64_t v7 = [v6 connection];
  [v4 reportEvent:10020, @"%@ %@", v5, v7 detailsFormat];

  if (v3 == 3)
  {
    sub_10003C9FC(*(void *)(a1 + 32));
    unsigned int v8 = [*(id *)(a1 + 32) ikeClassDEstablished];
    uint64_t v9 = *(void *)(a1 + 32);
    if (v8 && v9 && *(void *)(v9 + 263))
    {
      objc_initWeak(location, (id)v9);
      uint64_t v10 = mach_absolute_time();
      uint64_t v11 = *(void *)(a1 + 32);
      if (v11)
      {
        uint64_t v12 = v10;
        id v13 = *(id *)(v11 + 639);
        if (v13) {
          v13[20] = v12;
        }
      }
      else
      {
        id v13 = 0;
      }

      uint64_t v14 = *(void *)(a1 + 32);
      if (v14) {
        uint64_t v14 = *(void *)(v14 + 263);
      }
      id v15 = (id)v14;
      uint64_t v16 = [*(id *)(a1 + 32) queue];
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      void v47[2] = sub_10003CCDC;
      void v47[3] = &unk_1001C7A00;
      objc_copyWeak(&v48, location);
      [v15 sendKeepaliveWithRetries:3 retryIntervalInMilliseconds:3000 callbackQueue:v16 callback:v47];

      objc_destroyWeak(&v48);
      objc_destroyWeak(location);
      uint64_t v9 = *(void *)(a1 + 32);
    }
    unsigned int v17 = [(id)v9 ikeClassCEstablished];
    uint64_t v18 = *(void *)(a1 + 32);
    if (v17 && v18 && *(void *)(v18 + 271))
    {
      objc_initWeak(location, (id)v18);
      uint64_t v19 = mach_absolute_time();
      uint64_t v20 = *(void *)(a1 + 32);
      if (v20)
      {
        uint64_t v21 = v19;
        id v22 = *(id *)(v20 + 639);
        if (v22) {
          v22[22] = v21;
        }
      }
      else
      {
        id v22 = 0;
      }

      uint64_t v23 = *(void *)(a1 + 32);
      if (v23) {
        uint64_t v23 = *(void *)(v23 + 271);
      }
      id v24 = (id)v23;
      id v25 = [*(id *)(a1 + 32) queue];
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      v45[2] = sub_10003CDF4;
      void v45[3] = &unk_1001C7A00;
      objc_copyWeak(&v46, location);
      [v24 sendKeepaliveWithRetries:3 retryIntervalInMilliseconds:3000 callbackQueue:v25 callback:v45];

      objc_destroyWeak(&v46);
      objc_destroyWeak(location);
      uint64_t v18 = *(void *)(a1 + 32);
    }
    if (![(id)v18 ikeClassCEstablished]
      || ([*(id *)(a1 + 32) ikeClassDEstablished] & 1) == 0)
    {
      uint64_t v26 = *(void *)(a1 + 32);
      if (v26 && (*(unsigned char *)(v26 + 218) = 0, (uint64_t v27 = *(void *)(a1 + 32)) != 0))
      {
        *(unsigned char *)(v27 + 219) = 0;
        uint64_t v28 = *(void *)(a1 + 32);
      }
      else
      {
        uint64_t v28 = 0;
      }
      sub_10003CF0C(v28);
      uint64_t v29 = *(void *)(a1 + 32);
      if (!v29) {
        return;
      }
      if (*(unsigned char *)(v29 + 211))
      {
        *(unsigned char *)(v29 + 211) = 0;
        uint64_t v30 = *(void *)(a1 + 32);
        if (!v30) {
          return;
        }
        if (*(unsigned char *)(v30 + 209))
        {
          dispatch_resume(*(dispatch_object_t *)(v30 + 319));
          uint64_t v31 = *(void *)(a1 + 32);
          if (!v31) {
            return;
          }
          *(unsigned char *)(v31 + 209) = 0;
        }
      }
    }
    uint64_t v32 = *(void *)(a1 + 32);
    if (v32)
    {
      id v33 = [(id)v32 queue];
      dispatch_assert_queue_V2(v33);

      id v34 = *(NSObject **)(v32 + 607);
      if (v34)
      {
        dispatch_source_cancel(v34);
        objc_super v35 = *(void **)(v32 + 607);
        *(void *)(v32 + 607) = 0;
      }
      if ([(id)v32 state] == 255)
      {
        id v41 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          objc_super v43 = (void *)_NRCopyLogObjectForNRUUID();
          id v44 = [(id)v32 copyDescription];
          _NRLogWithArgs();
        }
      }
      else if (!*(void *)(v32 + 607))
      {
        uint64_t v36 = [(id)v32 queue];
        int v37 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v36);

        dispatch_time_t v38 = dispatch_time(0x8000000000000000, 10000000000);
        dispatch_source_set_timer(v37, v38, 0x2540BE400uLL, 0);
        objc_initWeak(&from, (id)v32);
        location[0] = _NSConcreteStackBlock;
        location[1] = (id)3221225472;
        id location[2] = sub_10003D65C;
        location[3] = &unk_1001C7FF0;
        objc_copyWeak(&v50, &from);
        dispatch_source_set_event_handler(v37, location);
        dispatch_resume(v37);
        id v39 = *(void **)(v32 + 607);
        *(void *)(v32 + 607) = v37;

        objc_destroyWeak(&v50);
        objc_destroyWeak(&from);
      }
    }
  }
  else if ((v3 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
    uint64_t v40 = *(void *)(a1 + 32);
    sub_10003BF74(v40);
  }
}

void sub_10003C9B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_10003C9FC(uint64_t a1)
{
  if (!a1) {
    return;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    BOOL v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      return;
    }
LABEL_9:
    id v15 = (id)_NRCopyLogObjectForNRUUID();
    id v8 = [(id)a1 copyDescription];
    _NRLogWithArgs();

LABEL_15:

    return;
  }
  uint64_t v2 = *(void **)(a1 + 647);
  if (!v2)
  {
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int v7 = _NRLogIsLevelEnabled();

    if (!v7) {
      return;
    }
    goto LABEL_9;
  }
  if ([v2 connectionState] == (id)3)
  {
    objc_initWeak(&location, (id)a1);
    unint64_t v3 = *(void **)(a1 + 647);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1000426D0;
    v16[3] = &unk_1001C66C0;
    objc_copyWeak(&v17, &location);
    [v3 readDatagramsWithMinimumCount:1 maximumCount:0xFFFFFFFFLL completionHandler:v16];
    objc_destroyWeak(&v17);
    objc_destroyWeak(&location);
    return;
  }
  uint64_t v9 = *(void **)(a1 + 647);
  id v10 = [v9 connectionState];
  if ((unint64_t)v10 >= 6) {
    id v11 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown[%lld]", v10];
  }
  else {
    id v11 = *(&off_1001C6750 + (void)v10);
  }
  [(id)a1 reportEvent:10021, @"cannot read from connection %@ state %@", v9, v11 detailsFormat];

  uint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
  int v13 = _NRLogIsLevelEnabled();

  if (v13)
  {
    id v15 = (id)_NRCopyLogObjectForNRUUID();
    id v14 = [(id)a1 copyDescription];
    [*(id *)(a1 + 647) connectionState];
    _NRLogWithArgs();

    goto LABEL_15;
  }
}

void sub_10003CCC0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10003CCDC(uint64_t a1, int a2)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v10 = WeakRetained;
    BOOL v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [v10 copyDescription];
      _NRLogWithArgs();
    }
    id WeakRetained = v10;
    if (a2)
    {
      uint64_t v8 = mach_absolute_time();
      uint64_t v9 = *(void *)(v10 + 639);
      if (v9) {
        *(void *)(v9 + 168) = v8;
      }
      sub_10003F3BC((uint64_t)v10);
      id WeakRetained = v10;
    }
  }
}

void sub_10003CDF4(uint64_t a1, int a2)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v10 = WeakRetained;
    BOOL v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [v10 copyDescription];
      _NRLogWithArgs();
    }
    id WeakRetained = v10;
    if (a2)
    {
      uint64_t v8 = mach_absolute_time();
      uint64_t v9 = *(void *)(v10 + 639);
      if (v9) {
        *(void *)(v9 + 184) = v8;
      }
      sub_10003F3BC((uint64_t)v10);
      id WeakRetained = v10;
    }
  }
}

void sub_10003CF0C(uint64_t a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = [(id)a1 queue];
  dispatch_assert_queue_V2(v2);

  if (!*(void *)(a1 + 279))
  {
    uint64_t v16 = [*(id *)(a1 + 231) sessionID];
    id v48 = +[NSString stringWithFormat:@"Terminus QuickRelay link <%@>", v16];

    id v17 = sub_100120478(v48, (void *)a1, 1, 0, 0, 0);
    uint64_t v18 = *(void **)(a1 + 279);
    *(void *)(a1 + 279) = v17;

    uint64_t v19 = *(void **)(a1 + 279);
    if (v19)
    {
      [a1 setVirtualInterface:[v19 virtualInterface]];
      if ([(id)a1 setInterfaceSubfamily])
      {
        if ([(id)a1 setNoACKPrioritization])
        {
          uint64_t v20 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 32));
          if (!v20)
          {
            id v42 = sub_10003B168();
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              id v44 = sub_10003B168();
              _NRLogWithArgs();
            }
            _os_log_pack_size();
            __error();
            uint64_t v45 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v45 = 136446210;
            *(void *)(v45 + 4) = "-[NRLinkQuickRelay setupIPsec]";
            sub_10003B168();
            _NRLogAbortWithPack();
          }
          uint64_t v21 = v20;
          id v22 = (void *)sub_10014B844(v20);
          [*(id *)(a1 + 279) setLocalAddresses:v22];

          [(id)a1 virtualInterface];
          uint64_t v23 = sub_10015BD9C();
          dispatch_assert_queue_V2(v23);

          id v24 = sub_10015BD9C();
          dispatch_assert_queue_V2(v24);

          id v25 = sub_1001414DC(v21, @"0");
          uint64_t v26 = [v25 hostname];

          NEVirtualInterfaceAddIPv6Route();
          [(id)a1 virtualInterface];
          uint64_t v27 = sub_10015BD9C();
          dispatch_assert_queue_V2(v27);

          uint64_t v28 = sub_10015BD9C();
          dispatch_assert_queue_V2(v28);

          uint64_t v29 = sub_1001418A8(v21, @"0");
          uint64_t v30 = [v29 hostname];

          NEVirtualInterfaceAddIPv6Route();
          [(id)a1 virtualInterface];
          NEVirtualInterfaceUpdateAdHocService();
          [*(id *)(a1 + 279) setAvailability:0];

          goto LABEL_3;
        }
        int v37 = (void *)_NRCopyLogObjectForNRUUID();
        int v38 = _NRLogIsLevelEnabled();

        if (v38) {
          goto LABEL_29;
        }
LABEL_30:

        return;
      }
      objc_super v35 = (void *)_NRCopyLogObjectForNRUUID();
      int v36 = _NRLogIsLevelEnabled();

      if (!v36) {
        goto LABEL_30;
      }
    }
    else
    {
      id v33 = (void *)_NRCopyLogObjectForNRUUID();
      int v34 = _NRLogIsLevelEnabled();

      if (!v34) {
        goto LABEL_30;
      }
    }
LABEL_29:
    id v39 = (void *)_NRCopyLogObjectForNRUUID();
    id v40 = [(id)a1 copyDescription];
    _NRLogWithArgs();

    goto LABEL_30;
  }
LABEL_3:
  unint64_t v3 = [a1 queue];
  dispatch_assert_queue_V2(v3);

  if (*(unsigned char *)(a1 + 214) && !*(void *)(a1 + 255))
  {
    id v4 = objc_alloc((Class)NEIKEv2Listener);
    id v5 = sub_10011EF54();
    id v6 = [v4 initWithListenerIKEConfig:v5 kernelSASessionName:@"terminusIKE-QuickRelay-Listener" packetDelegate:a1 listenerQueue:*(void *)(a1 + 8) delegate:a1 delegateQueue:*(void *)(a1 + 8)];
    id v7 = *(void **)(a1 + 255);
    *(void *)(a1 + 255) = v6;

    uint64_t v8 = *(void *)(a1 + 255);
    uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
    if (v8)
    {
      int v10 = _NRLogIsLevelEnabled();

      if (!v10) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    int v41 = _NRLogIsLevelEnabled();

    if (v41)
    {
LABEL_7:
      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      id v12 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
  }
LABEL_8:
  if ([(id)a1 ikeClassDEstablished])
  {
    int v13 = (void *)_NRCopyLogObjectForNRUUID();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
      id v15 = (void *)_NRCopyLogObjectForNRUUID();
      id v46 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    sub_10003D854(a1, 4);
  }
  if ([(id)a1 ikeClassCEstablished])
  {
    uint64_t v31 = (void *)_NRCopyLogObjectForNRUUID();
    int v32 = _NRLogIsLevelEnabled();

    if (!v32) {
      return;
    }
    id v48 = (void *)_NRCopyLogObjectForNRUUID();
    id v47 = [(id)a1 copyDescription];
    _NRLogWithArgs();

    goto LABEL_30;
  }

  sub_10003D854(a1, 3);
}

void sub_10003D65C(uint64_t a1)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (*(void *)(WeakRetained + 415) == *(void *)(WeakRetained + 391)
      && *(void *)(WeakRetained + 423) == *(void *)(WeakRetained + 407)
      && *(void *)(WeakRetained + 375) == *(void *)(WeakRetained + 367))
    {
      uint64_t v8 = WeakRetained;
      uint64_t v2 = [*(id *)(WeakRetained + 231) sessionID];
      id v3 = objc_alloc_init((Class)NSMutableDictionary);
      [v3 setObject:&off_1001D4930 forKeyedSubscript:@"State"];
      [v3 setObject:v2 forKeyedSubscript:@"SessionID"];
      sub_100114390(@"IDS Session", v3);

      sub_10003BE54(v8);
      id WeakRetained = v8;
    }
    else
    {
      if (gNRPacketLoggingEnabled)
      {
        uint64_t v9 = WeakRetained;
        id v4 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        id WeakRetained = v9;
        if (IsLevelEnabled)
        {
          id v6 = (void *)_NRCopyLogObjectForNRUUID();
          id v7 = [v9 copyDescription];
          _NRLogWithArgs();

          id WeakRetained = v9;
        }
      }
      *(void *)(WeakRetained + 423) = *(void *)(WeakRetained + 407);
      *(void *)(WeakRetained + 415) = *(void *)(WeakRetained + 391);
      *(void *)(WeakRetained + 375) = *(void *)(WeakRetained + 367);
    }
  }
}

void sub_10003D854(uint64_t a1, int a2)
{
  id v4 = [(id)a1 queue];
  dispatch_assert_queue_V2(v4);

  if (!*(unsigned char *)(a1 + 214))
  {
    id v5 = (id *)sub_10003DCEC(a1, a2);
    if (!*v5)
    {
      id v6 = v5;
      id String = (void *)NRDataProtectionClassCreateString();
      uint64_t v8 = [(id)a1 nrUUID];
      uint64_t v9 = sub_10013DC5C((uint64_t)NRDLocalDevice, v8);

      if (v9)
      {
        id v10 = sub_10013EF3C(v9, a2);

        if (v10)
        {
          id v48 = v9;
          id v11 = sub_10011F560(1, v9, a2);
          uint64_t v12 = +[NWAddressEndpoint endpointWithHostname:@"::" port:@"0"];
          int v13 = String;
          id v14 = objc_alloc((Class)NEIKEv2ConfigurationMessage);
          id v15 = [objc_alloc((Class)NEIKEv2InitiatorTransportIPv6Address) initWithAddress:v12];
          v49[0] = v15;
          id v47 = (void *)v12;
          id v16 = [objc_alloc((Class)NEIKEv2ResponderTransportIPv6Address) initWithAddress:v12];
          v49[1] = v16;
          id v17 = +[NSArray arrayWithObjects:v49 count:2];
          id v18 = [v14 initWithWithAttributes:v17];
          [v11 setConfigurationRequest:v18];

          id v19 = [objc_alloc((Class)NSString) initWithFormat:@"terminusIKE-QuickRelay-%@", v13];
          id v20 = objc_alloc((Class)NEIKEv2Session);
          id v21 = sub_10011EF54();
          id v22 = sub_10011F1E0();
          uint64_t v23 = *(void *)(a1 + 8);
          id v24 = [(id)a1 virtualInterface];
          id v25 = v20;
          uint64_t v26 = v11;
          id v27 = [v25 initWithIKEConfig:v21 firstChildConfig:v22 sessionConfig:v11 queue:v23 ipsecInterface:v24 ikeSocketHandler:0 kernelSASessionName:v19 packetDelegate:a1];
          id v28 = *v6;
          *id v6 = v27;

          if (!*v6)
          {
            objc_super v43 = (void *)_NRCopyLogObjectForNRUUID();
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            uint64_t v26 = v11;
            id String = v13;
            uint64_t v30 = v47;
            uint64_t v9 = v48;
            if (IsLevelEnabled)
            {
              uint64_t v45 = (void *)_NRCopyLogObjectForNRUUID();
              id v46 = [(id)a1 copyDescription];
              _NRLogWithArgs();

              uint64_t v26 = v11;
            }
            goto LABEL_20;
          }
          [(id)a1 reportEvent:3015, @"%@ %@", v13, *v6 detailsFormat];
          sub_10003DE60((void *)a1, a2);
          id String = v13;
          if (a2 == 3)
          {
            uint64_t v39 = mach_absolute_time();
            uint64_t v40 = *(void *)(a1 + 639);
            uint64_t v9 = v48;
            if (!v40)
            {
              id v33 = 0;
              uint64_t v30 = v47;
              goto LABEL_18;
            }
            *(void *)(v40 + 32) = v39;
            id v33 = (char *)*(id *)(a1 + 639);
            uint64_t v30 = v47;
            if (v33)
            {
              int v34 = &OBJC_IVAR___NRAnalyticsCmpnLink__ikeClassCAttempts;
              goto LABEL_17;
            }
          }
          else
          {
            BOOL v29 = a2 == 4;
            uint64_t v30 = v47;
            uint64_t v9 = v48;
            if (!v29) {
              goto LABEL_19;
            }
            uint64_t v31 = mach_absolute_time();
            uint64_t v32 = *(void *)(a1 + 639);
            if (!v32)
            {
              id v33 = 0;
              goto LABEL_18;
            }
            *(void *)(v32 + 48) = v31;
            id v33 = (char *)*(id *)(a1 + 639);
            if (v33)
            {
              int v34 = &OBJC_IVAR___NRAnalyticsCmpnLink__ikeClassDAttempts;
LABEL_17:
              ++*(void *)&v33[*v34];
            }
          }
LABEL_18:

LABEL_19:
          [*v6 connect];
LABEL_20:

          goto LABEL_21;
        }
        objc_super v35 = (void *)_NRCopyLogObjectForNRUUID();
        int v36 = _NRLogIsLevelEnabled();

        if (!v36)
        {
LABEL_21:

          return;
        }
      }
      else
      {
        int v41 = (void *)_NRCopyLogObjectForNRUUID();
        int v42 = _NRLogIsLevelEnabled();

        if (!v42) {
          goto LABEL_21;
        }
      }
      int v37 = (void *)_NRCopyLogObjectForNRUUID();
      id v38 = [(id)a1 copyDescription];
      _NRLogWithArgs();

      goto LABEL_21;
    }
  }
}

uint64_t sub_10003DCEC(uint64_t result, int a2)
{
  if (result)
  {
    if (a2 == 4)
    {
      uint64_t v2 = &OBJC_IVAR___NRLinkQuickRelay__ikeSessionClassD;
      goto LABEL_6;
    }
    if (a2 == 3)
    {
      uint64_t v2 = &OBJC_IVAR___NRLinkQuickRelay__ikeSessionClassC;
LABEL_6:
      result += *v2;
      return result;
    }
    id v3 = sub_10003B168();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = sub_10003B168();
      id String = (void *)NRDataProtectionClassCreateString();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v6 = _os_log_pack_fill();
    uint64_t v7 = NRDataProtectionClassCreateString();
    *(_DWORD *)uint64_t v6 = 136446466;
    *(void *)(v6 + 4) = "-[NRLinkQuickRelay ikeSessionPointerForDataProtectionClass:]";
    *(_WORD *)(v6 + 12) = 2112;
    *(void *)(v6 + 14) = v7;
    sub_10003B168();
    uint64_t v8 = _NRLogAbortWithPack();
    return sub_10003DE60(v8);
  }
  return result;
}

void sub_10003DE60(void *a1, int a2)
{
  if (a1)
  {
    id v4 = [a1 queue];
    dispatch_assert_queue_V2(v4);

    id String = (void *)NRDataProtectionClassCreateString();
    id v6 = *(id *)sub_10003DCEC((uint64_t)a1, a2);
    uint64_t v7 = v6;
    if (v6)
    {
      id v8 = v6;
      [v8 setClientQueue:a1[1]];
      objc_initWeak(location, a1);
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472;
      v55[2] = sub_10003E40C;
      v55[3] = &unk_1001C72F8;
      objc_copyWeak(&v58, location);
      id v9 = String;
      id v56 = v9;
      id v10 = v8;
      id v57 = v10;
      char v59 = a2;
      [v10 setStateUpdateBlock:v55];
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472;
      v50[2] = sub_10003EA54;
      v50[3] = &unk_1001C7320;
      objc_copyWeak(&v53, location);
      id v11 = v9;
      id v51 = v11;
      id v12 = v10;
      id v52 = v12;
      char v54 = a2;
      [v12 setChildStateUpdateBlock:v50];
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472;
      void v46[2] = sub_10003EBB8;
      v46[3] = &unk_1001C7348;
      objc_copyWeak(&v49, location);
      id v13 = v11;
      id v47 = v13;
      id v14 = v12;
      id v48 = v14;
      [v14 setConfigurationUpdateBlock:v46];
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      v42[2] = sub_10003EC98;
      v42[3] = &unk_1001C7370;
      objc_copyWeak(&v45, location);
      id v15 = v13;
      id v43 = v15;
      id v16 = v14;
      id v44 = v16;
      [v16 setTrafficSelectorUpdateBlock:v42];
      BOOL v29 = String;
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_10003ED98;
      v38[3] = &unk_1001C7398;
      objc_copyWeak(&v41, location);
      id v17 = v15;
      id v39 = v17;
      id v18 = v16;
      id v40 = v18;
      [v18 setAdditionalAddressesUpdateBlock:v38];
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_10003EE78;
      v34[3] = &unk_1001C79B0;
      objc_copyWeak(&v37, location);
      id v19 = v17;
      id v35 = v19;
      id v20 = v18;
      id v36 = v20;
      [v20 setShortDPDEventBlock:v34];
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_10003EF4C;
      v30[3] = &unk_1001C7398;
      objc_copyWeak(&v33, location);
      id v31 = v19;
      id v21 = v20;
      id v32 = v21;
      [v21 setPrivateNotifyStatusEvent:v30];
      id v22 = (void *)_NRCopyLogObjectForNRUUID();
      char IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v24 = (void *)_NRCopyLogObjectForNRUUID();
        id v28 = [a1 copyDescription];
        _NRLogWithArgs();
      }
      objc_destroyWeak(&v33);

      objc_destroyWeak(&v37);
      objc_destroyWeak(&v41);

      objc_destroyWeak(&v45);
      objc_destroyWeak(&v49);

      objc_destroyWeak(&v53);
      objc_destroyWeak(&v58);
      objc_destroyWeak(location);

      id String = v29;
    }
    else
    {
      id v25 = sub_10003B168();
      int v26 = _NRLogIsLevelEnabled();

      if (v26)
      {
        id v27 = sub_10003B168();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_10003E38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id *location, id *a18, id *a19)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(location);
  objc_destroyWeak(a18);
  objc_destroyWeak(a19);
  objc_destroyWeak((id *)(v23 - 112));
  _Unwind_Resume(a1);
}

void sub_10003E40C(uint64_t a1, uint64_t a2, void *a3)
{
  id v50 = a3;
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained) {
    goto LABEL_52;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
  if (!v50)
  {
    [WeakRetained reportEvent:3009, @"%@ session %@ changed state to %@", v6, v7, SessionStateString detailsFormat];

    switch(a2)
    {
      case 1:
        if ([WeakRetained state] == 1)
        {
          id v10 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v12 = (void *)_NRCopyLogObjectForNRUUID();
            id v13 = [WeakRetained copyDescription];
            uint64_t v48 = *(void *)(a1 + 32);
            uint64_t v49 = *(void *)(a1 + 40);
            uint64_t v46 = 1204;
            id v47 = v13;
            id v44 = "";
            id v45 = "-[NRLinkQuickRelay setupIKECallbacksForClass:]_block_invoke";
            _NRLogWithArgs();
          }
          [WeakRetained changeStateTo:5 v44, v45, v46, v47, v48, v49];
        }
        else
        {
          unsigned int v27 = [WeakRetained state];
          id v28 = (void *)_NRCopyLogObjectForNRUUID();
          if (v27 == 5)
          {
            int v29 = _NRLogIsLevelEnabled();

            if (v29) {
              goto LABEL_51;
            }
          }
          else
          {
            int v39 = _NRLogIsLevelEnabled();

            if (v39) {
              goto LABEL_51;
            }
          }
        }
        goto LABEL_52;
      case 2:
        int v23 = *(unsigned __int8 *)(a1 + 56);
        if (v23 == 3)
        {
          uint64_t v30 = mach_absolute_time();
          uint64_t v31 = *(void *)(WeakRetained + 639);
          if (v31) {
            *(void *)(v31 + 40) = v30;
          }
          [WeakRetained setIkeClassCEstablished:1];
          WeakRetained[219] = 0;
          id v26 = objc_alloc_init((Class)NSDate);
          sub_10003F3AC((uint64_t)WeakRetained, v26);
        }
        else
        {
          if (v23 != 4) {
            goto LABEL_41;
          }
          uint64_t v24 = mach_absolute_time();
          uint64_t v25 = *(void *)(WeakRetained + 639);
          if (v25) {
            *(void *)(v25 + 56) = v24;
          }
          [WeakRetained setIkeClassDEstablished:1];
          WeakRetained[218] = 0;
          id v26 = objc_alloc_init((Class)NSDate);
          sub_10003F39C((uint64_t)WeakRetained, v26);
        }

LABEL_41:
        int v32 = WeakRetained[16];
        if ((v32 - 8) >= 2)
        {
          if (v32 != 5)
          {
            id v40 = (void *)_NRCopyLogObjectForNRUUID();
            int v41 = _NRLogIsLevelEnabled();

            if (v41)
            {
LABEL_51:
              int v42 = (void *)_NRCopyLogObjectForNRUUID();
              id v43 = [WeakRetained copyDescription];
              _NRLogWithArgs();
            }
            goto LABEL_52;
          }
          id v35 = (void *)_NRCopyLogObjectForNRUUID();
          int v36 = _NRLogIsLevelEnabled();

          if (v36) {
            goto LABEL_46;
          }
        }
        else
        {
          id v33 = (void *)_NRCopyLogObjectForNRUUID();
          int v34 = _NRLogIsLevelEnabled();

          if (v34)
          {
LABEL_46:
            id v37 = (void *)_NRCopyLogObjectForNRUUID();
            id v38 = [WeakRetained copyDescription];
            _NRLogWithArgs();
          }
        }
        sub_10003F3BC((uint64_t)WeakRetained);
        goto LABEL_52;
      case 3:
        id v15 = (void *)_NRCopyLogObjectForNRUUID();
        int v16 = _NRLogIsLevelEnabled();

        if (v16)
        {
          id v17 = (void *)_NRCopyLogObjectForNRUUID();
          id v18 = [WeakRetained copyDescription];
          _NRLogWithArgs();
        }
        int v19 = *(unsigned __int8 *)(a1 + 56);
        if (v19 == 4)
        {
          [WeakRetained setIkeClassDEstablished:0];
        }
        else if (v19 == 3)
        {
          [WeakRetained setIkeClassCEstablished:0];
        }
        if (WeakRetained[212]) {
          sub_10003F1C0(WeakRetained, *(unsigned __int8 *)(a1 + 56));
        }
        else {
          [WeakRetained invalidateIKESessionForClass:*(unsigned __int8 *)(a1 + 56)];
        }
        goto LABEL_52;
      case 4:
        [WeakRetained cancelWithReason:@"%@ session %@ got unexpected MOBIKE state", *(void *)(a1 + 32), *(void *)(a1 + 40)];
        goto LABEL_52;
      default:
        uint64_t v20 = *(void *)(a1 + 32);
        uint64_t v21 = *(void *)(a1 + 40);
        id v22 = (void *)NEIKEv2CreateSessionStateString();
        [WeakRetained cancelWithReason:@"%@ session %@ got bad IKE state %@", v20, v21, v22];

        goto LABEL_52;
    }
  }
  [WeakRetained reportEvent:3018, @"%@ session %@ got IKE error %@ with state %@", v6, v7, v50, SessionStateString detailsFormat];

  int v9 = *(unsigned __int8 *)(a1 + 56);
  if (v9 == 3)
  {
    [WeakRetained setIkeClassCEstablished:0];
  }
  else if (v9 == 4)
  {
    [WeakRetained setIkeClassDEstablished:0];
  }
  uint64_t v14 = *(unsigned __int8 *)(a1 + 56);
  if (!WeakRetained[208])
  {
    [WeakRetained processIKEDisconnection:v14 error:v50];
    if ([WeakRetained state] == 255) {
      goto LABEL_52;
    }
    uint64_t v14 = *(unsigned __int8 *)(a1 + 56);
  }
  if (WeakRetained[212]) {
    sub_10003F1C0(WeakRetained, v14);
  }
  else {
    [WeakRetained invalidateIKESessionForClass:v14];
  }
LABEL_52:
}

void sub_10003EA54(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v14 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v14)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
      [WeakRetained reportEvent:3018, @"%@ session %@ got child %u state update %@ error %@", v8, v9, a2, SessionStateString, v14 detailsFormat];

      if (!WeakRetained[208])
      {
        [WeakRetained processIKEDisconnection:*(unsigned __int8 *)(a1 + 56) error:v14];
        if ([WeakRetained state] == 255) {
          goto LABEL_12;
        }
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      if (a3 != 3)
      {
        id v13 = (void *)NEIKEv2CreateSessionStateString();
        [WeakRetained reportEvent:3009, @"%@ session %@ child %u state update %@", v11, v12, a2, v13 detailsFormat];

        goto LABEL_12;
      }
      [WeakRetained reportEvent:3018, @"%@ session %@ got child %u Disconnected state with no error", v11, *(void *)(a1 + 40), a2 detailsFormat];
    }
    if (WeakRetained[212]) {
      sub_10003F1C0(WeakRetained, *(unsigned __int8 *)(a1 + 56));
    }
    else {
      [WeakRetained invalidateIKESessionForClass:*(unsigned __int8 *)(a1 + 56)];
    }
  }
LABEL_12:
}

void sub_10003EBB8(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10003EC98(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v12 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = (void *)_NRCopyLogObjectForNRUUID();
      id v11 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10003ED98(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10003EE78(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    id WeakRetained = v6;
    if (IsLevelEnabled)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      id v5 = [v6 copyDescription];
      _NRLogWithArgs();

      id WeakRetained = v6;
    }
  }
}

void sub_10003EF4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      id v8 = [WeakRetained copyDescription];
      id v26 = *(id *)(a1 + 40);
      id v27 = v3;
      id v24 = v8;
      uint64_t v25 = *(void *)(a1 + 32);
      id v22 = "-[NRLinkQuickRelay setupIKECallbacksForClass:]_block_invoke_7";
      uint64_t v23 = 1335;
      uint64_t v21 = "";
      _NRLogWithArgs();
    }
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v28 = v3;
    id v9 = v3;
    id v10 = [v9 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v30;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v30 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          unsigned int v15 = [v14 notifyStatus:v21, v22, v23, v24, v25, v26, v27];
          id v16 = [v14 notifyData];
          id v17 = (void *)_NRCopyLogObjectForNRUUID();
          int v18 = _NRLogIsLevelEnabled();

          if (v18)
          {
            int v19 = (void *)_NRCopyLogObjectForNRUUID();
            uint64_t v25 = v15;
            id v26 = v16;
            uint64_t v23 = 1346;
            id v24 = [WeakRetained copyDescription];
            uint64_t v21 = "";
            id v22 = "-[NRLinkQuickRelay handleNotifyCode:payload:]";
            _NRLogWithArgs();
          }
          if (v15 == 50702)
          {
            uint64_t v20 = [WeakRetained linkDelegate];
            [v20 linkDidReceiveData:WeakRetained data:v16];
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v29 objects:v33 count:16];
      }
      while (v11);
    }

    id v3 = v28;
  }
}

id sub_10003F1C0(unsigned char *a1, uint64_t a2)
{
  id v4 = [a1 queue];
  dispatch_assert_queue_V2(v4);

  [a1 invalidateIKESessionForClass:a2];
  if (a2 == 4)
  {
    if (++a1[218] >= 3u)
    {
      id v10 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
        id v15 = [a1 copyDescription];
        _NRLogWithArgs();
      }
      id v8 = a1;
      uint64_t v9 = 10023;
      goto LABEL_11;
    }
  }
  else if (a2 == 3 && ++a1[219] >= 3u)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    int v6 = _NRLogIsLevelEnabled();

    if (v6)
    {
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      id v14 = [a1 copyDescription];
      _NRLogWithArgs();
    }
    id v8 = a1;
    uint64_t v9 = 10024;
LABEL_11:
    return [v8 reportEvent:v9];
  }

  return (id)sub_10003D854(a1, a2);
}

void sub_10003F39C(uint64_t a1, void *a2)
{
}

void sub_10003F3AC(uint64_t a1, void *a2)
{
}

void sub_10003F3BC(uint64_t a1)
{
  uint64_t v2 = [(id)a1 queue];
  dispatch_assert_queue_V2(v2);

  if ([(id)a1 state] != 255)
  {
    sub_10003F4A8(a1);
    [*(id *)(a1 + 279) setAvailability:1];
    if (*(unsigned char *)(a1 + 211))
    {
      *(unsigned char *)(a1 + 211) = 0;
      if (*(unsigned char *)(a1 + 209))
      {
        dispatch_resume(*(dispatch_object_t *)(a1 + 319));
        *(unsigned char *)(a1 + 209) = 0;
      }
    }
    [(id)a1 changeStateTo:8];
    id v3 = [(id)a1 linkDelegate];
    [v3 linkIsReady:a1];
  }
}

void sub_10003F4A8(uint64_t a1)
{
  uint64_t v2 = [(id)a1 queue];
  dispatch_assert_queue_V2(v2);

  if (!*(void *)(a1 + 295))
  {
    v182[0] = 0;
    v182[1] = 0;
    id v3 = [*(id *)(a1 + 279) nexusInstances];
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    if (v3)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        int v6 = (void *)_NRCopyLogObjectForNRUUID();
        id v151 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
      if ([v3 count] == 1)
      {
        id v7 = [v3 firstObject];
        [v7 getUUIDBytes:v182];
        if (!os_channel_attr_create())
        {
          int v18 = (void *)_NRCopyLogObjectForNRUUID();
          int v19 = _NRLogIsLevelEnabled();

          if (v19) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        os_channel_attr_set();
        uint64_t extended = os_channel_create_extended();
        uint64_t v9 = extended;
        if (!extended)
        {
          uint64_t v20 = __error();
          if (strerror_r(*v20, (char *)v181, 0x80uLL)) {
            LOBYTE(v181[0]) = 0;
          }
          if (qword_1001F4900 != -1) {
            dispatch_once(&qword_1001F4900, &stru_1001C6708);
          }
          if (_NRLogIsLevelEnabled())
          {
            id v21 = sub_10003B168();
            _NRLogWithArgs();
          }
          [(id)a1 virtualInterface];
          NEVirtualInterfaceDisableChannel();
          os_channel_attr_destroy();
          goto LABEL_24;
        }
        *(void *)(a1 + 295) = extended;
        v181[0] = 0;
        int v10 = os_channel_attr_get();
        id v11 = (void *)_NRCopyLogObjectForNRUUID();
        if (v10)
        {
          int v12 = _NRLogIsLevelEnabled();

          if (v12) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v22 = _NRLogIsLevelEnabled();

        if (v22)
        {
          uint64_t v23 = (void *)_NRCopyLogObjectForNRUUID();
          id v152 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v24 = os_channel_attr_get();
        uint64_t v25 = (void *)_NRCopyLogObjectForNRUUID();
        if (v24)
        {
          int v26 = _NRLogIsLevelEnabled();

          if (v26) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v27 = _NRLogIsLevelEnabled();

        if (v27)
        {
          id v28 = (void *)_NRCopyLogObjectForNRUUID();
          id v153 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v29 = os_channel_attr_get();
        long long v30 = (void *)_NRCopyLogObjectForNRUUID();
        if (v29)
        {
          int v31 = _NRLogIsLevelEnabled();

          if (v31) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v32 = _NRLogIsLevelEnabled();

        if (v32)
        {
          id v33 = (void *)_NRCopyLogObjectForNRUUID();
          id v154 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v34 = os_channel_attr_get();
        id v35 = (void *)_NRCopyLogObjectForNRUUID();
        if (v34)
        {
          int v36 = _NRLogIsLevelEnabled();

          if (v36) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v37 = _NRLogIsLevelEnabled();

        if (v37)
        {
          id v38 = (void *)_NRCopyLogObjectForNRUUID();
          id v155 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v39 = os_channel_attr_get();
        id v40 = (void *)_NRCopyLogObjectForNRUUID();
        if (v39)
        {
          int v41 = _NRLogIsLevelEnabled();

          if (v41) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v42 = _NRLogIsLevelEnabled();

        if (v42)
        {
          id v43 = (void *)_NRCopyLogObjectForNRUUID();
          id v156 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v44 = os_channel_attr_get();
        id v45 = (void *)_NRCopyLogObjectForNRUUID();
        if (v44)
        {
          int v46 = _NRLogIsLevelEnabled();

          if (v46) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v47 = _NRLogIsLevelEnabled();

        if (v47)
        {
          uint64_t v48 = (void *)_NRCopyLogObjectForNRUUID();
          id v157 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v49 = os_channel_attr_get();
        id v50 = (void *)_NRCopyLogObjectForNRUUID();
        if (v49)
        {
          int v51 = _NRLogIsLevelEnabled();

          if (v51) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v52 = _NRLogIsLevelEnabled();

        if (v52)
        {
          id v53 = (void *)_NRCopyLogObjectForNRUUID();
          id v158 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v54 = os_channel_attr_get();
        id v55 = (void *)_NRCopyLogObjectForNRUUID();
        if (v54)
        {
          int v56 = _NRLogIsLevelEnabled();

          if (v56) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v57 = _NRLogIsLevelEnabled();

        if (v57)
        {
          id v58 = (void *)_NRCopyLogObjectForNRUUID();
          id v159 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v59 = os_channel_attr_get();
        id v60 = (void *)_NRCopyLogObjectForNRUUID();
        if (v59)
        {
          int v61 = _NRLogIsLevelEnabled();

          if (v61) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v62 = _NRLogIsLevelEnabled();

        if (v62)
        {
          uint64_t v63 = (void *)_NRCopyLogObjectForNRUUID();
          id v160 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v64 = os_channel_attr_get();
        id v65 = (void *)_NRCopyLogObjectForNRUUID();
        if (v64)
        {
          int v66 = _NRLogIsLevelEnabled();

          if (v66) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v67 = _NRLogIsLevelEnabled();

        if (v67)
        {
          unint64_t v68 = (void *)_NRCopyLogObjectForNRUUID();
          id v161 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v69 = os_channel_attr_get();
        BOOL v70 = (void *)_NRCopyLogObjectForNRUUID();
        if (v69)
        {
          int v71 = _NRLogIsLevelEnabled();

          if (v71) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v72 = _NRLogIsLevelEnabled();

        if (v72)
        {
          int v73 = (void *)_NRCopyLogObjectForNRUUID();
          id v162 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v74 = os_channel_attr_get();
        id v75 = (void *)_NRCopyLogObjectForNRUUID();
        if (v74)
        {
          int v76 = _NRLogIsLevelEnabled();

          if (v76) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v77 = _NRLogIsLevelEnabled();

        if (v77)
        {
          id v78 = (void *)_NRCopyLogObjectForNRUUID();
          id v163 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v79 = os_channel_attr_get();
        id v80 = (void *)_NRCopyLogObjectForNRUUID();
        if (v79)
        {
          int v81 = _NRLogIsLevelEnabled();

          if (v81) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v82 = _NRLogIsLevelEnabled();

        if (v82)
        {
          id v83 = (void *)_NRCopyLogObjectForNRUUID();
          id v164 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v84 = os_channel_attr_get();
        unsigned int v85 = (void *)_NRCopyLogObjectForNRUUID();
        if (v84)
        {
          int v86 = _NRLogIsLevelEnabled();

          if (v86) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v87 = _NRLogIsLevelEnabled();

        if (v87)
        {
          uint64_t v88 = (void *)_NRCopyLogObjectForNRUUID();
          id v165 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v89 = os_channel_attr_get();
        uint64_t v90 = (void *)_NRCopyLogObjectForNRUUID();
        if (v89)
        {
          int v91 = _NRLogIsLevelEnabled();

          if (v91) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v92 = _NRLogIsLevelEnabled();

        if (v92)
        {
          long long v93 = (void *)_NRCopyLogObjectForNRUUID();
          id v166 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v94 = os_channel_attr_get();
        long long v95 = (void *)_NRCopyLogObjectForNRUUID();
        if (v94)
        {
          int v96 = _NRLogIsLevelEnabled();

          if (v96) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v97 = _NRLogIsLevelEnabled();

        if (v97)
        {
          long long v98 = (void *)_NRCopyLogObjectForNRUUID();
          id v167 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v99 = os_channel_attr_get();
        long long v100 = (void *)_NRCopyLogObjectForNRUUID();
        if (v99)
        {
          int v101 = _NRLogIsLevelEnabled();

          if (v101) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v102 = _NRLogIsLevelEnabled();

        if (v102)
        {
          long long v103 = (void *)_NRCopyLogObjectForNRUUID();
          id v168 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v104 = os_channel_attr_get();
        long long v105 = (void *)_NRCopyLogObjectForNRUUID();
        if (v104)
        {
          int v106 = _NRLogIsLevelEnabled();

          if (v106) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v107 = _NRLogIsLevelEnabled();

        if (v107)
        {
          long long v108 = (void *)_NRCopyLogObjectForNRUUID();
          id v169 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        v181[0] = 0;
        int v109 = os_channel_attr_get();
        v110 = (void *)_NRCopyLogObjectForNRUUID();
        if (v109)
        {
          int v111 = _NRLogIsLevelEnabled();

          if (v111) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        int v112 = _NRLogIsLevelEnabled();

        if (v112)
        {
          v113 = (void *)_NRCopyLogObjectForNRUUID();
          id v170 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        os_channel_attr_destroy();
        os_channel_ring_id();
        uint64_t v114 = os_channel_rx_ring();
        *(void *)(a1 + 303) = v114;
        if (!v114)
        {
          v132 = (void *)_NRCopyLogObjectForNRUUID();
          int v133 = _NRLogIsLevelEnabled();

          if (v133) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        os_channel_ring_id();
        uint64_t v115 = os_channel_tx_ring();
        *(void *)(a1 + 311) = v115;
        if (!v115)
        {
          v134 = (void *)_NRCopyLogObjectForNRUUID();
          int v135 = _NRLogIsLevelEnabled();

          if (v135) {
            goto LABEL_131;
          }
          goto LABEL_24;
        }
        unsigned int fd = os_channel_get_fd();
        if ((fd & 0x80000000) != 0)
        {
          v136 = (void *)_NRCopyLogObjectForNRUUID();
          int v137 = _NRLogIsLevelEnabled();

          if (v137)
          {
LABEL_131:
            v138 = (void *)_NRCopyLogObjectForNRUUID();
            id v171 = [(id)a1 copyDescription];
            _NRLogWithArgs();
          }
LABEL_24:

          goto LABEL_25;
        }
        dispatch_group_t v117 = dispatch_group_create();
        if (v117)
        {
          long long v118 = v117;
          dispatch_source_t v119 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, fd, 0, *(dispatch_queue_t *)(a1 + 8));
          uint64_t v120 = *(void **)(a1 + 319);
          *(void *)(a1 + 319) = v119;

          if (*(void *)(a1 + 319))
          {
            objc_initWeak(v181, (id)a1);
            v121 = *(NSObject **)(a1 + 319);
            v179[0] = _NSConcreteStackBlock;
            v179[1] = 3221225472;
            v179[2] = sub_100041210;
            v179[3] = &unk_1001C7FF0;
            objc_copyWeak(&v180, v181);
            dispatch_source_set_event_handler(v121, v179);
            dispatch_group_enter(v118);
            v122 = *(NSObject **)(a1 + 319);
            v177[0] = _NSConcreteStackBlock;
            v177[1] = 3221225472;
            v177[2] = sub_10004174C;
            v177[3] = &unk_1001C8BA8;
            v123 = v118;
            v178 = v123;
            dispatch_source_set_cancel_handler(v122, v177);
            dispatch_activate(*(dispatch_object_t *)(a1 + 319));
            dispatch_source_t v124 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, fd, 0, *(dispatch_queue_t *)(a1 + 8));
            v125 = *(void **)(a1 + 327);
            *(void *)(a1 + 327) = v124;

            v126 = *(NSObject **)(a1 + 327);
            if (v126)
            {
              v175[0] = _NSConcreteStackBlock;
              v175[1] = 3221225472;
              v175[2] = sub_100041754;
              v175[3] = &unk_1001C7FF0;
              objc_copyWeak(&v176, v181);
              dispatch_source_set_event_handler(v126, v175);
              dispatch_group_enter(v123);
              v127 = *(NSObject **)(a1 + 327);
              v173[0] = _NSConcreteStackBlock;
              v173[1] = 3221225472;
              v173[2] = sub_100041D68;
              v173[3] = &unk_1001C8BA8;
              v128 = v123;
              v174 = v128;
              dispatch_source_set_cancel_handler(v127, v173);
              *(unsigned char *)(a1 + 210) = 1;
              v129 = *(NSObject **)(a1 + 8);
              v172[0] = _NSConcreteStackBlock;
              v172[1] = 3221225472;
              v172[2] = sub_100041D70;
              v172[3] = &unk_1001C8698;
              v172[4] = v9;
              dispatch_group_notify(v128, v129, v172);
              v130 = *(void **)(a1 + 335);
              *(void *)(a1 + 335) = v128;
              v131 = v128;

              objc_destroyWeak(&v176);
              objc_destroyWeak(&v180);
              objc_destroyWeak(v181);
              goto LABEL_24;
            }
            id v146 = sub_10003B168();
            char v147 = _NRLogIsLevelEnabled();

            if (v147)
            {
              id v148 = sub_10003B168();
              _NRLogWithArgs();
            }
            uint64_t v149 = _os_log_pack_size();
            __chkstk_darwin(v149);
            __error();
            uint64_t v150 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v150 = 136446210;
            *(void *)(v150 + 4) = "-[NRLinkQuickRelay setupNexus]";
            sub_10003B168();
            _NRLogAbortWithPack();
LABEL_141:
            __break(1u);
            return;
          }
          id v143 = sub_10003B168();
          int v144 = _NRLogIsLevelEnabled();

          if (v144)
          {
            id v145 = sub_10003B168();
            _NRLogWithArgs();
          }
        }
        else
        {
          id v139 = sub_10003B168();
          int v140 = _NRLogIsLevelEnabled();

          if (v140)
          {
            id v141 = sub_10003B168();
            _NRLogWithArgs();
          }
        }
        _os_log_pack_size();
        ((void (*)(void))__chkstk_darwin)();
        __error();
        uint64_t v142 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v142 = 136446210;
        *(void *)(v142 + 4) = "-[NRLinkQuickRelay setupNexus]";
        sub_10003B168();
        _NRLogAbortWithPack();
        goto LABEL_141;
      }
      id v14 = (void *)_NRCopyLogObjectForNRUUID();
      int v15 = _NRLogIsLevelEnabled();

      if (v15) {
        goto LABEL_14;
      }
    }
    else
    {
      int v13 = _NRLogIsLevelEnabled();

      if (v13)
      {
LABEL_14:
        id v16 = (void *)_NRCopyLogObjectForNRUUID();
        id v17 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
LABEL_25:
  }
}

void sub_1000411E8(_Unwind_Exception *a1)
{
  objc_destroyWeak(*(id **)v1);
  objc_destroyWeak((id *)(v1 + 208));
  _Unwind_Resume(a1);
}

void sub_100041210(uint64_t a1)
{
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    if (WeakRetained[16] == 255)
    {
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v3 = (unsigned __int8 *)_NRCopyLogObjectForNRUUID();
        id v10 = [v2 copyDescription];
        _NRLogWithArgs();
LABEL_25:

        goto LABEL_26;
      }
    }
    else
    {
      if (gNRPacketLoggingEnabled)
      {
        int v22 = (void *)_NRCopyLogObjectForNRUUID();
        int v23 = _NRLogIsLevelEnabled();

        if (v23)
        {
          int v24 = (void *)_NRCopyLogObjectForNRUUID();
          id v27 = [v2 copyDescription];
          _NRLogWithArgs();
        }
      }
      ++*(void *)(v2 + 447);
      if (*(void *)(v2 + 231))
      {
        id v3 = v2;
        id v4 = [v3 queue];
        dispatch_assert_queue_V2(v4);

        int v5 = v2[16];
        if (v5 == 255)
        {
          int v6 = (void *)_NRCopyLogObjectForNRUUID();
          int v7 = _NRLogIsLevelEnabled();

          if (v7) {
            goto LABEL_23;
          }
LABEL_26:

          goto LABEL_27;
        }
        if (v5 == 1)
        {
          uint64_t v25 = (void *)_NRCopyLogObjectForNRUUID();
          int v26 = _NRLogIsLevelEnabled();

          if (!v26) {
            goto LABEL_26;
          }
          goto LABEL_23;
        }
        if (*(void *)(v3 + 295))
        {
          id v11 = *(void **)(v3 + 647);
          if (!v11 || [v11 connectionState] != (id)3)
          {
            if (!gNRPacketLoggingEnabled) {
              goto LABEL_26;
            }
            id v14 = (void *)_NRCopyLogObjectForNRUUID();
            int v15 = _NRLogIsLevelEnabled();

            if (!v15) {
              goto LABEL_26;
            }
            id v10 = (id)_NRCopyLogObjectForNRUUID();
            id v16 = [v3 copyDescription];
            id v28 = sub_100041D78((unint64_t)[*(id *)(v3 + 647) connectionState]);
            _NRLogWithArgs();

            goto LABEL_24;
          }
          if (!v3[209])
          {
            id v33 = 0;
            int v19 = sub_100041DD4(v3, &v33);
            objc_initWeak(&location, v3);
            *(void *)(v3 + 383) += v33;
            uint64_t v20 = [v3 connection];
            v29[0] = _NSConcreteStackBlock;
            v29[1] = 3221225472;
            v29[2] = sub_100042400;
            v29[3] = &unk_1001C6730;
            objc_copyWeak(v31, &location);
            id v21 = v19;
            id v30 = v21;
            v31[1] = v33;
            [v20 writeDatagrams:v21 completionHandler:v29];

            dispatch_suspend(*(dispatch_object_t *)(v3 + 319));
            v3[209] = 1;

            objc_destroyWeak(v31);
            objc_destroyWeak(&location);

            goto LABEL_26;
          }
          if (!gNRPacketLoggingEnabled) {
            goto LABEL_26;
          }
          int v12 = (void *)_NRCopyLogObjectForNRUUID();
          int v13 = _NRLogIsLevelEnabled();

          if (!v13) {
            goto LABEL_26;
          }
        }
        else
        {
          id v17 = (void *)_NRCopyLogObjectForNRUUID();
          int v18 = _NRLogIsLevelEnabled();

          if (!v18) {
            goto LABEL_26;
          }
        }
LABEL_23:
        id v10 = (id)_NRCopyLogObjectForNRUUID();
        id v16 = [v3 copyDescription];
        _NRLogWithArgs();
LABEL_24:

        goto LABEL_25;
      }
      v2[211] = 1;
      dispatch_suspend(*(dispatch_object_t *)(v2 + 319));
      v2[209] = 1;
    }
  }
LABEL_27:
}

void sub_100041728(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_10004174C(uint64_t a1)
{
}

void sub_100041754(uint64_t a1)
{
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    if (WeakRetained[16] != 255)
    {
      if (gNRPacketLoggingEnabled)
      {
        int v26 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v28 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v37 = 931;
          id v38 = [v2 copyDescription];
          id v35 = "";
          int v36 = "-[NRLinkQuickRelay setupNexus]_block_invoke";
          _NRLogWithArgs();
        }
      }
      ++*(void *)(v2 + 455);
      id v3 = v2;
      id v4 = [v3 queue];
      dispatch_assert_queue_V2(v4);

      if (v2[16] == 255)
      {
        int v23 = (void *)_NRCopyLogObjectForNRUUID();
        int v24 = _NRLogIsLevelEnabled();

        if (v24)
        {
          uint64_t v25 = (void *)_NRCopyLogObjectForNRUUID();
          id v40 = [v3 copyDescription];
          _NRLogWithArgs();
        }
      }
      else if ([*(id *)(v3 + 343) count])
      {
        os_channel_ring_id();
        os_channel_tx_ring();
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        *(_OWORD *)__dst = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        id v5 = *(id *)(v3 + 343);
        id v46 = [v5 countByEnumeratingWithState:&v49 objects:v57 count:16];
        uint64_t i = 0;
        uint64_t v7 = 0;
        int v8 = 0;
        if (v46)
        {
          id v44 = v5;
          uint64_t v45 = *(void *)v50;
          while (2)
          {
            uint64_t v9 = 0;
            int v10 = v8;
            v8 += (int)v46;
            do
            {
              if (*(void *)v50 != v45) {
                objc_enumerationMutation(v5);
              }
              uint64_t v47 = v9;
              id v11 = *(void **)(*((void *)&v49 + 1) + 8 * v9);
              id v12 = [v11 length:v35, v36, v37, v38];
              int v13 = (char *)[v11 bytes];
              uint64_t next_slot = os_channel_get_next_slot();
              if (!next_slot)
              {
                int v8 = v10;
                goto LABEL_35;
              }
              int v48 = v10;
              int v15 = (int)v12;
              if ((int)v12 >= 1)
              {
                id v43 = v12;
                for (uint64_t i = next_slot; ; uint64_t i = v18)
                {
                  if (v15 >= WORD1(v53)) {
                    unsigned int v16 = WORD1(v53);
                  }
                  else {
                    unsigned int v16 = v15;
                  }
                  WORD1(v53) = v16;
                  memcpy(__dst[0], v13, (unsigned __int16)v16);
                  os_channel_set_slot_properties();
                  v15 -= v16;
                  if (v15 < 1)
                  {
                    uint64_t v7 = v16 + v7;
                    id v12 = v43;
                    id v5 = v44;
                    goto LABEL_24;
                  }
                  uint64_t v17 = os_channel_get_next_slot();
                  if (!v17) {
                    break;
                  }
                  uint64_t v18 = v17;
                  if (gNRPacketLoggingEnabled)
                  {
                    int v19 = (void *)_NRCopyLogObjectForNRUUID();
                    int v42 = _NRLogIsLevelEnabled();

                    if (v42)
                    {
                      uint64_t v20 = (void *)_NRCopyLogObjectForNRUUID();
                      uint64_t v37 = 2005;
                      id v38 = [v3 copyDescription];
                      id v35 = "";
                      int v36 = "NRLinkLoopQRToInterface";
                      _NRLogWithArgs();
                    }
                  }
                  v13 += v16;
                  uint64_t v7 = v16 + v7;
                }
                if (gNRPacketLoggingEnabled)
                {
                  int v32 = (void *)_NRCopyLogObjectForNRUUID();
                  int v33 = _NRLogIsLevelEnabled();

                  if (v33)
                  {
                    int v34 = (void *)_NRCopyLogObjectForNRUUID();
                    uint64_t v37 = 2002;
                    id v38 = [v3 copyDescription];
                    id v35 = "";
                    int v36 = "NRLinkLoopQRToInterface";
                    _NRLogWithArgs();
                  }
                }
                int v8 = v48;
                id v5 = v44;
                goto LABEL_35;
              }
LABEL_24:
              if (v15)
              {
                int v8 = v48;
                goto LABEL_35;
              }
              *(void *)(v3 + 439) += v12;
              int v10 = v48 + 1;
              uint64_t v9 = v47 + 1;
            }
            while ((id)(v47 + 1) != v46);
            id v46 = [v5 countByEnumeratingWithState:&v49 objects:v57 count:16];
            if (v46) {
              continue;
            }
            break;
          }
        }
LABEL_35:

        if (gNRPacketLoggingEnabled)
        {
          int v29 = (void *)_NRCopyLogObjectForNRUUID();
          int v30 = _NRLogIsLevelEnabled();

          if (v30)
          {
            int v31 = (void *)_NRCopyLogObjectForNRUUID();
            id v38 = [v3 copyDescription];
            uint64_t v41 = v7;
            uint64_t v37 = 2020;
            id v35 = "";
            int v36 = "NRLinkLoopQRToInterface";
            _NRLogWithArgs();
          }
        }
        if (i)
        {
          os_channel_advance_slot();
          os_channel_sync();
          if (v8 >= 1)
          {
            do
            {
              [*(id *)(v3 + 343) removeFirstObject:v35, v36, v37, v38, v41];
              --v8;
            }
            while (v8);
          }
        }
      }
      else
      {
        dispatch_suspend(*(dispatch_object_t *)(v3 + 327));
        v3[210] = 1;
      }
      goto LABEL_39;
    }
    id v21 = (void *)_NRCopyLogObjectForNRUUID();
    int v22 = _NRLogIsLevelEnabled();

    if (v22)
    {
      id v3 = (unsigned __int8 *)_NRCopyLogObjectForNRUUID();
      id v39 = [v2 copyDescription];
      _NRLogWithArgs();

LABEL_39:
    }
  }
}

void sub_100041D68(uint64_t a1)
{
}

uint64_t sub_100041D70()
{
  return os_channel_destroy();
}

id sub_100041D78(unint64_t a1)
{
  if (a1 >= 6) {
    return [objc_alloc((Class)NSString) initWithFormat:@"Unknown[%lld]", a1];
  }
  else {
    return *(&off_1001C6750 + a1);
  }
}

id sub_100041DD4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = (char *)v3;
  if (v3[16] == 255)
  {
    int v15 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  if (!*(void *)(v3 + 295))
  {
    uint64_t v18 = (void *)_NRCopyLogObjectForNRUUID();
    int v19 = _NRLogIsLevelEnabled();

    if (v19)
    {
LABEL_27:
      uint64_t v20 = (void *)_NRCopyLogObjectForNRUUID();
      id v21 = [v4 copyDescription];
      _NRLogWithArgs();
    }
LABEL_28:
    id v17 = 0;
    goto LABEL_33;
  }
  os_channel_ring_id();
  os_channel_rx_ring();
  id v5 = objc_alloc_init((Class)NSMutableArray);
  if (os_channel_get_next_slot())
  {
    id v28 = a2;
    while (2)
    {
      int v6 = v5;
      *(void *)(v4 + 431) = *(void *)(v4 + 431);
      id v7 = objc_alloc_init((Class)NSMutableData);
      bzero(v29, 0x800uLL);
      unsigned __int16 v8 = nrPacketToTLV();
      switch(v29[0])
      {
        case 'd':
          uint64_t v9 = &OBJC_IVAR___NRLinkQuickRelay__sentKnownIPv6Hdr_ESP;
          goto LABEL_17;
        case 'e':
          uint64_t v9 = &OBJC_IVAR___NRLinkQuickRelay__sentKnownIPv6Hdr_ESP_ECT0;
          goto LABEL_17;
        case 'f':
          uint64_t v9 = &OBJC_IVAR___NRLinkQuickRelay__sentKnownIPv6Hdr_TCP;
          goto LABEL_17;
        case 'g':
          uint64_t v9 = &OBJC_IVAR___NRLinkQuickRelay__sentKnownIPv6Hdr_TCP_ECT0;
          goto LABEL_17;
        case 'h':
          uint64_t v9 = &OBJC_IVAR___NRLinkQuickRelay__sentKnownIPv6Hdr_ESP_ClassC;
          goto LABEL_17;
        case 'i':
          uint64_t v9 = &OBJC_IVAR___NRLinkQuickRelay__sentKnownIPv6Hdr_ESP_ClassC_ECT0;
          goto LABEL_17;
        default:
          if (v29[0] == 2)
          {
            uint64_t v9 = &OBJC_IVAR___NRLinkQuickRelay__sentUncompressedIP;
          }
          else
          {
            if (v29[0] != 3) {
              goto LABEL_18;
            }
            uint64_t v9 = &OBJC_IVAR___NRLinkQuickRelay__sentEncapsulated6LoWPAN;
          }
LABEL_17:
          ++*(void *)&v4[*v9];
LABEL_18:
          [v7 appendBytes:length:];
          if (gNRPacketLoggingEnabled)
          {
            id v11 = (void *)_NRCopyLogObjectForNRUUID();
            int v27 = _NRLogIsLevelEnabled();

            if (v27)
            {
              id v12 = (void *)_NRCopyLogObjectForNRUUID();
              id v13 = [v4 copyDescription];
              StringFromNRTLVType = (void *)createStringFromNRTLVType();
              [v7 length];
              _NRLogWithArgs();
            }
          }
          id v5 = v6;
          [v6 addObject:v7];
          uint64_t next_slot = os_channel_get_next_slot();
          if (v28) {
            *v28 += v8;
          }

          if (next_slot) {
            continue;
          }
          os_channel_advance_slot();
          os_channel_sync();
          id v17 = v6;
          break;
      }
      break;
    }
  }
  else
  {
    int v22 = (void *)_NRCopyLogObjectForNRUUID();
    int v23 = _NRLogIsLevelEnabled();

    if (v23)
    {
      int v24 = (void *)_NRCopyLogObjectForNRUUID();
      id v26 = [v4 copyDescription];
      _NRLogWithArgs();
    }
    id v17 = 0;
  }

LABEL_33:

  return v17;
}

void sub_100042400(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    if (v3)
    {
      int v6 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        unsigned __int16 v8 = (void *)_NRCopyLogObjectForNRUUID();
        id v22 = [v5 copyDescription];
        id v23 = [*(id *)(a1 + 32) count];
        uint64_t v21 = 1934;
        int v19 = "";
        uint64_t v20 = "NRLinkLoopInterfaceToQR_block_invoke";
        _NRLogWithArgs();
      }
      *(void *)(v5 + 399) += *(void *)(a1 + 48);
      uint64_t v9 = [v5 connection:v19, v20, v21, v22, v23];
      int v10 = [v5 connection];
      id v11 = [v10 connectionState];
      if ((unint64_t)v11 >= 6) {
        id v12 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown[%lld]", v11];
      }
      else {
        id v12 = *(&off_1001C6750 + (void)v11);
      }
      [v5 reportEvent:10022, @"connection %@ state %@ error %@", v9, v12, v3 detailsFormat];
    }
    else
    {
      *(void *)(WeakRetained + 391) += *(void *)(a1 + 48);
    }
    id v13 = [v5 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000426A0;
    block[3] = &unk_1001C8BA8;
    id v14 = v5;
    uint64_t v25 = v14;
    dispatch_async(v13, block);

    if (gNRPacketLoggingEnabled)
    {
      int v15 = (void *)_NRCopyLogObjectForNRUUID();
      int v16 = _NRLogIsLevelEnabled();

      if (v16)
      {
        id v17 = (void *)_NRCopyLogObjectForNRUUID();
        id v18 = [v14 copyDescription];
        [*(id *)(a1 + 32) count];
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1000426A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 209))
  {
    *(unsigned char *)(v1 + 209) = 0;
    dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 319));
  }
}

void sub_1000426D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int16 v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000427C4;
    block[3] = &unk_1001C8868;
    id v11 = v6;
    id v12 = v8;
    id v13 = v5;
    dispatch_async(v9, block);
  }
}

void sub_1000427C4(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  if (!v3)
  {
    long long v129 = 0u;
    long long v130 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    id v120 = *(id *)(a1 + 48);
    id v121 = [v120 countByEnumeratingWithState:&v127 objects:v132 count:16];
    if (!v121) {
      goto LABEL_88;
    }
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)v128;
    uint64_t v119 = *(void *)v128;
    while (1)
    {
      if (v10 != v119) {
        objc_enumerationMutation(v120);
      }
      uint64_t v122 = v9;
      id v11 = *(void **)(*((void *)&v127 + 1) + 8 * v9);
      if ((unint64_t)[v11 length] <= 2)
      {
        id v12 = v11;
        id v13 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (!IsLevelEnabled) {
          goto LABEL_86;
        }
        int v15 = (void *)_NRCopyLogObjectForNRUUID();
        id v16 = [*(id *)(a1 + 40) copyDescription];
        [v12 length];
        _NRLogWithArgs();
        goto LABEL_15;
      }
      id v17 = [v11 length];
      id v116 = v11;
      id v117 = v17;
      long long v118 = (unsigned __int8 *)[v11 bytes];
      *(void *)(*(void *)(a1 + 40) + 407) += v17;
      if (!v17) {
        goto LABEL_86;
      }
      id v18 = v118;
      int v19 = &v118[v17];
      dispatch_source_t v124 = v19;
      while (1)
      {
        if (v18 + 3 > v19)
        {
          int v59 = (void *)_NRCopyLogObjectForNRUUID();
          int v60 = _NRLogIsLevelEnabled();

          if (!v60) {
            goto LABEL_86;
          }
          int v15 = (void *)_NRCopyLogObjectForNRUUID();
          id v16 = [*(id *)(a1 + 40) copyDescription];
          _NRLogWithArgs();
LABEL_15:

          goto LABEL_16;
        }
        v125 = v18;
        uint64_t v126 = 0;
        unsigned int v20 = *v18;
        unsigned int v21 = *(unsigned __int16 *)(v18 + 1);
        uint64_t v22 = __rev16(v21);
        uint64_t v23 = (v22 + 5);
        uint64_t v126 = v23;
        if (&v18[v23] > v19)
        {
          int v61 = (void *)_NRCopyLogObjectForNRUUID();
          int v62 = _NRLogIsLevelEnabled();

          if (v62)
          {
            int v15 = (void *)_NRCopyLogObjectForNRUUID();
            uint64_t v1 = [*(id *)(a1 + 40) copyDescription];
            _NRLogWithArgs();
            goto LABEL_85;
          }
          goto LABEL_86;
        }
        if ((char)v20 >= 100)
        {
          v131[0] = 0;
          LODWORD(v1) = v22 + 3;
          unsigned int v24 = v126 - (v22 + 3);
          if (v126 <= (int)v22 + 3) {
            goto LABEL_120;
          }
          if (v24 >= 2) {
            int v25 = 2;
          }
          else {
            int v25 = v126 - (v22 + 3);
          }
          __memcpy_chk();
          if (v24 <= 1) {
            goto LABEL_121;
          }
          if (v131[0] != (unsigned __int16)((v21 ^ (v20 >> 4)) | (unsigned __int16)(((unsigned __int16)(16 * v20) ^ (unsigned __int16)(v21 >> 8)) << 8))) {
            goto LABEL_83;
          }
          goto LABEL_40;
        }
        if (v126 >= (int)v22 + 3) {
          unsigned int v26 = v22 + 3;
        }
        else {
          unsigned int v26 = v126;
        }
        if (!v26)
        {
          if (qword_1001F4900 != -1) {
            dispatch_once(&qword_1001F4900, &stru_1001C6708);
          }
          int v81 = "nrChecksumUpdate";
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4900 != -1) {
              dispatch_once(&qword_1001F4900, &stru_1001C6708);
            }
            _NRLogWithArgs();
          }
LABEL_111:
          _os_log_pack_size();
          size_t v39 = (size_t)&v115 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v85 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v85 = 136446210;
          *(void *)(v85 + 4) = v81;
          goto LABEL_115;
        }
        v123 = (unsigned __int8 *)(v22 + 3);
        __int16 v27 = os_inet_checksum();
        LODWORD(v1) = v22 + 3;
        if ((int)v22 + 3 > v126)
        {
          id v82 = sub_10003B168();
          int v83 = _NRLogIsLevelEnabled();

          int v81 = "nrChecksumIOVecInner";
          if (v83)
          {
            id v84 = sub_10003B168();
            _NRLogWithArgs();
          }
          goto LABEL_111;
        }
        if (v126 < v23)
        {
          BOOL v99 = v26 >= v126;
          id v100 = sub_10003B168();
          int v101 = _NRLogIsLevelEnabled();

          if (v126 < (int)v22 + 4)
          {
            if (v101)
            {
              id v105 = sub_10003B168();
              IOVecid String = (void *)createIOVecString();
              _NRLogWithArgs();
            }
          }
          else if (v101)
          {
            id v102 = sub_10003B168();
            long long v108 = (void *)createIOVecString();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v103 = _os_log_pack_fill();
          uint64_t v104 = createIOVecString();
          sub_100043C30(v103, (uint64_t)"nrChecksumIOVecInner", v104, v99, (int)v123);
          goto LABEL_119;
        }
        if (v123[(void)v125] != ~(_BYTE)v27
          || v123[(void)v125 + 1] != (unsigned __int16)(~v27 & 0xFF00) >> 8)
        {
          break;
        }
LABEL_40:
        switch(v20)
        {
          case 'd':
            id v28 = &OBJC_IVAR___NRLinkQuickRelay__recvKnownIPv6Hdr_ESP;
            break;
          case 'e':
            id v28 = &OBJC_IVAR___NRLinkQuickRelay__recvKnownIPv6Hdr_ESP_ECT0;
            break;
          case 'f':
            id v28 = &OBJC_IVAR___NRLinkQuickRelay__recvKnownIPv6Hdr_TCP;
            break;
          case 'g':
            id v28 = &OBJC_IVAR___NRLinkQuickRelay__recvKnownIPv6Hdr_TCP_ECT0;
            break;
          case 'h':
            id v28 = &OBJC_IVAR___NRLinkQuickRelay__recvKnownIPv6Hdr_ESP_ClassC;
            break;
          case 'i':
            id v28 = &OBJC_IVAR___NRLinkQuickRelay__recvKnownIPv6Hdr_ESP_ClassC_ECT0;
            break;
          default:
            id v28 = &OBJC_IVAR___NRLinkQuickRelay__recvUncompressedIP;
            switch(v20)
            {
              case 1u:
                int v29 = (void *)_NRCopyLogObjectForNRUUID();
                int v30 = _NRLogIsLevelEnabled();

                if (v30)
                {
                  int v31 = (void *)_NRCopyLogObjectForNRUUID();
                  id v106 = [*(id *)(a1 + 40) copyDescription];
                  _NRLogWithArgs();
                }
                goto LABEL_21;
              case 2u:
                goto LABEL_53;
              case 3u:
                id v28 = &OBJC_IVAR___NRLinkQuickRelay__recvEncapsulated6LoWPAN;
                goto LABEL_53;
              case 4u:
                id v32 = [objc_alloc((Class)NSData) initWithBytes:v125 + 3 length:v22];
                uint64_t v1 = *(_WORD **)(a1 + 40);
                uint64_t v33 = *(void *)((char *)v1 + 471);
                IKEv2Packetid String = (void *)createIKEv2PacketString();
                v123 = (unsigned __int8 *)[v32 length];
                id v35 = [*(id *)(a1 + 40) connection];
                int v36 = [*(id *)(a1 + 40) connection];
                id v37 = [v36 connectionState];
                if ((unint64_t)v37 >= 6) {
                  id v38 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown[%lld]", v37];
                }
                else {
                  id v38 = *(&off_1001C6750 + (void)v37);
                }
                [v1 reportEvent:3007, @"Receiving IKEv2 packet #%llu %@ len %llu connection %@ state %@", v33, IKEv2PacketString, v123, v35, v38 detailsFormat];

                ++*(void *)(*(void *)(a1 + 40) + 471);
                uint64_t v47 = *(void **)(*(void *)(a1 + 40) + 287);
                if (v47)
                {
                  [v47 receivePacketData:v32];
                }
                else
                {
                  int v48 = (void *)_NRCopyLogObjectForNRUUID();
                  int v49 = _NRLogIsLevelEnabled();

                  if (v49)
                  {
                    long long v50 = (void *)_NRCopyLogObjectForNRUUID();
                    id v112 = [*(id *)(a1 + 40) copyDescription];
                    _NRLogWithArgs();
                  }
                  [*(id *)(*(void *)(a1 + 40) + 623) addObject:v32];
                }

                goto LABEL_21;
              default:
                goto LABEL_21;
            }
        }
LABEL_53:
        ++*(void *)(*(void *)(a1 + 40) + *v28);
        uint64_t v1 = v131;
        bzero(v131, 0x800uLL);
        if (v22 >= 0x7D9)
        {
          if ((_WORD)v22 == 0xFFD8)
          {
            id v86 = sub_10003B168();
            int v87 = _NRLogIsLevelEnabled();

            if (v87)
            {
              id v88 = sub_10003B168();
              _NRLogWithArgs();
            }
            _os_log_pack_size();
            size_t v39 = (size_t)&v115 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
            uint64_t v89 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v89 = 136446210;
            *(void *)(v89 + 4) = "strict_calloc";
LABEL_115:
            sub_10003B168();
            _NRLogAbortWithPack();
LABEL_116:
            id v90 = sub_10003B168();
            int v91 = _NRLogIsLevelEnabled();

            if (v91)
            {
              id v92 = sub_10003B168();
              _NRLogWithArgs();
            }
            _os_log_pack_size();
            __chkstk_darwin();
            __error();
            uint64_t v93 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v93 = 136446722;
            *(void *)(v93 + 4) = "strict_calloc";
            *(_WORD *)(v93 + 12) = 2048;
            *(void *)(v93 + 14) = 1;
            *(_WORD *)(v93 + 22) = 2048;
            *(void *)(v93 + 24) = v39;
            while (1)
            {
LABEL_119:
              sub_10003B168();
              _NRLogAbortWithPack();
LABEL_120:
              int v25 = 0;
LABEL_121:
              id v94 = sub_10003B168();
              int v95 = _NRLogIsLevelEnabled();

              if (v95)
              {
                id v96 = sub_10003B168();
                v110 = (void *)createIOVecString();
                _NRLogWithArgs();
              }
              _os_log_pack_size();
              __chkstk_darwin();
              __error();
              uint64_t v97 = _os_log_pack_fill();
              uint64_t v98 = createIOVecString();
              sub_100043BF4(v97, (uint64_t)"nrWriteIOVecToBuffer", v25, 2, (int)v1, v98);
            }
          }
          size_t v39 = (unsigned __int16)(v22 + 40);
          id v40 = malloc_type_calloc(1uLL, v39, 0xF1748037uLL);
          if (!v40) {
            goto LABEL_116;
          }
          uint64_t v1 = v40;
        }
        unsigned int v41 = nrTLVToPacket();
        if (gNRPacketLoggingEnabled)
        {
          long long v51 = (void *)_NRCopyLogObjectForNRUUID();
          int v52 = _NRLogIsLevelEnabled();

          if (v52)
          {
            long long v53 = (void *)_NRCopyLogObjectForNRUUID();
            id v54 = [*(id *)(a1 + 40) copyDescription];
            StringFromNRTLVType = (void *)createStringFromNRTLVType();
            [v116 length];
            _NRLogWithArgs();
          }
        }
        if (v41)
        {
          id v42 = objc_alloc_init((Class)NSMutableData);
          [v42 appendBytes:v1 length:v41];
          [*(id *)(*(void *)(a1 + 40) + 343) addObject:v42];
        }
        else
        {
          id v43 = (void *)_NRCopyLogObjectForNRUUID();
          int v44 = _NRLogIsLevelEnabled();

          if (!v44) {
            goto LABEL_63;
          }
          id v42 = (id)_NRCopyLogObjectForNRUUID();
          id v45 = [*(id *)(a1 + 40) copyDescription];
          int v107 = (void *)createStringFromNRTLVType();
          _NRLogWithArgs();
        }
LABEL_63:
        if (v1 != v131) {
          free(v1);
        }
        uint64_t v46 = *(void *)(a1 + 40);
        if (*(unsigned char *)(v46 + 210))
        {
          if (gNRPacketLoggingEnabled)
          {
            long long v56 = (void *)_NRCopyLogObjectForNRUUID();
            int v57 = _NRLogIsLevelEnabled();

            uint64_t v46 = *(void *)(a1 + 40);
            if (v57)
            {
              id v58 = (void *)_NRCopyLogObjectForNRUUID();
              id v113 = [*(id *)(a1 + 40) copyDescription];
              _NRLogWithArgs();

              uint64_t v46 = *(void *)(a1 + 40);
            }
          }
          dispatch_resume(*(dispatch_object_t *)(v46 + 327));
          *(unsigned char *)(*(void *)(a1 + 40) + 210) = 0;
        }
LABEL_21:
        v18 += v126;
        int v19 = v124;
        if (v18 >= v124) {
          goto LABEL_86;
        }
      }
      id v63 = sub_10003B168();
      int v64 = _NRLogIsLevelEnabled();

      if (v64)
      {
        id v65 = sub_10003B168();
        _NRLogWithArgs();
      }
LABEL_83:
      int v66 = (void *)_NRCopyLogObjectForNRUUID();
      int v67 = _NRLogIsLevelEnabled();

      if (v67)
      {
        int v15 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v1 = [*(id *)(a1 + 40) copyDescription];
        unint64_t v68 = (void *)createStringFromNRTLVType();
        uint64_t v114 = (void *)createIOVecString();
        _NRLogWithArgs();

LABEL_85:
LABEL_16:
      }
LABEL_86:
      uint64_t v9 = v122 + 1;
      if (v122 + 1 >= (unint64_t)v121)
      {
        id v121 = [v120 countByEnumeratingWithState:&v127 objects:v132 count:16];
        if (!v121)
        {
LABEL_88:

          sub_10003C9FC(*(void *)(a1 + 40));
          return;
        }
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void *)v128;
    }
  }
  id v4 = v3;
  if ([v4 code] == (id)89)
  {
    id v5 = [v4 domain];
    unsigned int v6 = [v5 isEqualToString:NSPOSIXErrorDomain];

    if (v6)
    {
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      if (!v8) {
        return;
      }
      dispatch_source_t v124 = (unsigned __int8 *)_NRCopyLogObjectForNRUUID();
      id v111 = [*(id *)(a1 + 40) copyDescription];
      _NRLogWithArgs();

      goto LABEL_99;
    }
  }
  else
  {
  }
  int v69 = *(void **)(a1 + 40);
  BOOL v70 = [v69 connection];
  int v71 = [*(id *)(a1 + 40) connection];
  id v72 = [v71 connectionState];
  if ((unint64_t)v72 >= 6) {
    id v73 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown[%lld]", v72];
  }
  else {
    id v73 = *(&off_1001C6750 + (void)v72);
  }
  [v69 reportEvent:10021, @"connection %@ state %@ error %@", v70, v73, *(void *)(a1 + 32) detailsFormat];

  int v74 = (void *)_NRCopyLogObjectForNRUUID();
  int v75 = _NRLogIsLevelEnabled();

  if (v75)
  {
    dispatch_source_t v124 = (unsigned __int8 *)_NRCopyLogObjectForNRUUID();
    id v76 = [*(id *)(a1 + 40) copyDescription];
    int v77 = [*(id *)(a1 + 40) connection];
    id v78 = [*(id *)(a1 + 40) connection];
    id v79 = [v78 connectionState];
    if ((unint64_t)v79 >= 6) {
      id v80 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown[%lld]", v79];
    }
    else {
      id v80 = *(&off_1001C6750 + (void)v79);
    }
    _NRLogWithArgs();

LABEL_99:
  }
}

double sub_100043BF4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6)
{
  *(void *)&double result = 136447234;
  *(_DWORD *)a1 = 136447234;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 24) = 1024;
  *(_DWORD *)(a1 + 26) = a5;
  *(_WORD *)(a1 + 30) = 2112;
  *(void *)(a1 + 32) = a6;
  return result;
}

double sub_100043C30(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  *(void *)&double result = 136446978;
  *(_DWORD *)a1 = 136446978;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(void *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 28) = 1024;
  *(_DWORD *)(a1 + 30) = a5;
  return result;
}

void sub_1000441D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) destination];
  id v14 = 0;
  id v4 = [v2 datagramConnectionForSessionDestination:v3 uid:501 error:&v14];
  id v5 = v14;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1000442F0;
  v9[3] = &unk_1001C66E8;
  unsigned int v6 = *(NSObject **)(a1 + 48);
  v9[4] = *(void *)(a1 + 56);
  id v10 = *(id *)(a1 + 40);
  id v11 = v4;
  id v12 = *(id *)(a1 + 32);
  id v13 = v5;
  id v7 = v5;
  id v8 = v4;
  dispatch_async(v6, v9);
}

void sub_1000442F0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v2);

  if (!*(void *)(a1 + 40)) {
    goto LABEL_18;
  }
  id v3 = *(id *)(*(void *)(a1 + 32) + 231);
  if (!v3) {
    goto LABEL_18;
  }
  id v4 = v3;
  id v5 = [*(id *)(a1 + 40) sessionID];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = v6 ? *(void **)(v6 + 231) : 0;
  id v8 = [v7 sessionID];
  unsigned __int8 v9 = [v5 isEqualToString:v8];

  if (v9)
  {
    [*(id *)(a1 + 32) setConnection:*(void *)(a1 + 48)];
    id v10 = [*(id *)(a1 + 32) connection];

    uint64_t v11 = *(void *)(a1 + 32);
    if (v10)
    {
      if (v11) {
        id v12 = *(void **)(v11 + 231);
      }
      else {
        id v12 = 0;
      }
      id v13 = [v12 sessionID];
      if (v11)
      {
        id v14 = objc_alloc_init((Class)NSMutableDictionary);
        [v14 setObject:&off_1001D4918 forKeyedSubscript:@"State"];
        [v14 setObject:v13 forKeyedSubscript:@"SessionID"];
        sub_100114390(@"IDS Session", v14);
      }
      int v15 = *(void **)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      id v17 = [v15 connection];
      [v15 reportEvent:10008, @"session %@ connection %@", v16, v17 detailsFormat];

      id v18 = *(unsigned char **)(a1 + 32);
      if (!v18 || !v18[215])
      {
        [v18 addObserver:*(void *)(a1 + 32) forKeyPath:@"_connection.connectionState" options:5 context:0];
        *(unsigned char *)(*(void *)(a1 + 32) + 215) = 1;
      }
      int v19 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v32 = (id)_NRCopyLogObjectForNRUUID();
        id v21 = [*(id *)(a1 + 32) copyDescription];
        int v31 = [*(id *)(a1 + 32) connection];
        _NRLogWithArgs();
      }
    }
    else
    {
      [(id)v11 cancelWithReason:@"No datagram connection for session %@ service %@ error %@", *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 64)];
    }
  }
  else
  {
LABEL_18:
    uint64_t v22 = (void *)_NRCopyLogObjectForNRUUID();
    int v23 = _NRLogIsLevelEnabled();

    if (v23)
    {
      unsigned int v24 = (void *)_NRCopyLogObjectForNRUUID();
      id v25 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
    if (*(void *)(a1 + 48))
    {
      unsigned int v26 = (void *)_NRCopyLogObjectForNRUUID();
      int v27 = _NRLogIsLevelEnabled();

      if (v27)
      {
        id v28 = (void *)_NRCopyLogObjectForNRUUID();
        id v30 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
      int v29 = *(void **)(a1 + 48);
      [v29 cancel];
    }
  }
}

void sub_100045DF8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 271), a2);
  }
}

void sub_1000467A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v33 = v3;
  if (!v3)
  {
    if (gNRPacketLoggingEnabled)
    {
      id v21 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        int v23 = (void *)_NRCopyLogObjectForNRUUID();
        id v30 = [*(id *)(a1 + 32) copyDescription];
        id v32 = [*(id *)(a1 + 40) length];
        uint64_t v28 = 1571;
        unsigned int v24 = "";
        unsigned int v26 = "-[NRLinkQuickRelay writeDatagramToSession:]_block_invoke";
        _NRLogWithArgs();
      }
    }
    id v14 = [*(id *)(a1 + 40) length:v24, v26, v28, v30, v32];
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = 391;
    goto LABEL_14;
  }
  if ([v3 code] != (id)89
    || ([v33 domain],
        id v4 = objc_claimAutoreleasedReturnValue(),
        unsigned int v5 = [v4 isEqualToString:NSPOSIXErrorDomain],
        v4,
        !v5))
  {
    unsigned __int8 v9 = *(void **)(a1 + 32);
    id v10 = [v9 connection];
    uint64_t v11 = [*(id *)(a1 + 32) connection];
    id v12 = [v11 connectionState];
    if ((unint64_t)v12 >= 6) {
      id v13 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown[%lld]", v12];
    }
    else {
      id v13 = *(&off_1001C6750 + (void)v12);
    }
    [v9 reportEvent:10022, @"connection %@ state %@ error %@", v10, v13, v33 detailsFormat];

    id v17 = (void *)_NRCopyLogObjectForNRUUID();
    int v18 = _NRLogIsLevelEnabled();

    if (v18)
    {
      int v19 = (void *)_NRCopyLogObjectForNRUUID();
      id v20 = [*(id *)(a1 + 32) copyDescription];
      id v27 = [*(id *)(a1 + 40) length];
      id v29 = v33;
      id v25 = v20;
      _NRLogWithArgs();
    }
    id v14 = [*(id *)(a1 + 40) length:v25, v27, v29];
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = 399;
LABEL_14:
    *(void *)(v15 + v16) += v14;
    goto LABEL_15;
  }
  uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
  int v7 = _NRLogIsLevelEnabled();

  if (v7)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    id v31 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
LABEL_15:
}

void sub_100046D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100046D50(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v10 = WeakRetained;
    if (a2)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v10;
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
    }
    else
    {
      [WeakRetained cancelWithReason:@"Did not receive response to control notify"];
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      id WeakRetained = v10;
      if (!v7) {
        goto LABEL_7;
      }
    }
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    id v9 = [v10 copyDescription];
    _NRLogWithArgs();

    id WeakRetained = v10;
  }
LABEL_7:
}

void sub_1000470EC(uint64_t a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = [(id)a1 queue];
  dispatch_assert_queue_V2(v2);

  if (++*(unsigned char *)(a1 + 217) >= 3u)
  {
    [(id)a1 reportEvent:10025];
    if (!*(unsigned char *)(a1 + 211)) {
      return;
    }
    sub_100041DD4((void *)a1, 0);
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    id v3 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      unsigned int v5 = (void *)_NRCopyLogObjectForNRUUID();
      id v20 = [(id)a1 copyDescription];
      [v21 count];
      _NRLogWithArgs();
    }
    *(unsigned char *)(a1 + 211) = 0;
    if (*(unsigned char *)(a1 + 209))
    {
      dispatch_resume(*(dispatch_object_t *)(a1 + 319));
      *(unsigned char *)(a1 + 209) = 0;
    }
    goto LABEL_15;
  }
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int v9 = _NRLogIsLevelEnabled();

    if (!v9) {
      return;
    }
    goto LABEL_14;
  }
  if (!sub_1000474D4((void *)a1)) {
    return;
  }
  if (*(unsigned char *)(a1 + 216))
  {
    uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
    int v7 = _NRLogIsLevelEnabled();

    if (!v7) {
      return;
    }
LABEL_14:
    id v21 = (id)_NRCopyLogObjectForNRUUID();
    id v10 = [(id)a1 copyDescription];
    _NRLogWithArgs();

LABEL_15:

    return;
  }
  if (*(void *)(a1 + 231))
  {
    uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
    int v12 = _NRLogIsLevelEnabled();

    if (!v12) {
      return;
    }
    goto LABEL_14;
  }
  *(unsigned char *)(a1 + 216) = 1;
  id v13 = *(id *)(a1 + 223);
  id v14 = [(id)a1 queue];
  uint64_t v15 = [(id)a1 description];
  if (qword_1001F4C08 != -1) {
    dispatch_once(&qword_1001F4C08, &stru_1001C7DA8);
  }
  uint64_t v16 = (id)qword_1001F4C10;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000476F8;
  block[3] = &unk_1001C7920;
  id v23 = v15;
  id v24 = v13;
  id v25 = v14;
  uint64_t v26 = a1;
  id v17 = v14;
  id v18 = v13;
  id v19 = v15;
  dispatch_async(v16, block);
}

uint64_t sub_1000474D4(void *a1)
{
  uint64_t v1 = (uint64_t)a1;
  if (a1)
  {
    uint64_t v2 = [a1 queue];
    dispatch_assert_queue_V2(v2);

    uint64_t v3 = *(void *)(v1 + 223);
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!v3)
    {
      if (IsLevelEnabled)
      {
        int v7 = (void *)_NRCopyLogObjectForNRUUID();
        id v12 = [(id)v1 copyDescription];
        _NRLogWithArgs();
      }
      id v8 = [objc_alloc((Class)IDSService) initWithService:@"com.apple.private.alloy.terminus"];
      if (!v8)
      {
        if (qword_1001F4900 != -1) {
          dispatch_once(&qword_1001F4900, &stru_1001C6708);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4900 != -1) {
            dispatch_once(&qword_1001F4900, &stru_1001C6708);
          }
          _NRLogWithArgs();
        }
        uint64_t v6 = 0;
        uint64_t v1 = 0;
        goto LABEL_18;
      }
      uint64_t v6 = v8;
      int v9 = [(id)v1 queue];
      [v6 addDelegate:v1 queue:v9];

      objc_storeStrong((id *)(v1 + 223), v6);
LABEL_9:
      uint64_t v1 = 1;
LABEL_18:

      return v1;
    }
    if (IsLevelEnabled)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v11 = [(id)v1 copyDescription];
      _NRLogWithArgs();

      goto LABEL_9;
    }
    return 1;
  }
  return v1;
}

void sub_1000476F8(uint64_t a1)
{
  if (qword_1001F4900 != -1) {
    dispatch_once(&qword_1001F4900, &stru_1001C6708);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4900 != -1) {
      dispatch_once(&qword_1001F4900, &stru_1001C6708);
    }
    uint64_t v33 = 621;
    uint64_t v35 = *(void *)(a1 + 32);
    id v29 = "";
    id v31 = "-[NRLinkQuickRelay setupIDSSessionAndSendInvitation]_block_invoke";
    _NRLogWithArgs();
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v2 = [[*(id *)(a1 + 40) devices:v29, v31, v33, v35];
  id v3 = [v2 countByEnumeratingWithState:&v50 objects:v57 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v51;
LABEL_9:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v51 != v5) {
        objc_enumerationMutation(v2);
      }
      int v7 = *(void **)(*((void *)&v50 + 1) + 8 * v6);
      if ([v7 isDefaultPairedDevice]) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v50 objects:v57 count:16];
        if (v4) {
          goto LABEL_9;
        }
        goto LABEL_15;
      }
    }
    id v8 = v7;

    if (!v8) {
      goto LABEL_31;
    }
    if (qword_1001F4900 != -1) {
      dispatch_once(&qword_1001F4900, &stru_1001C6708);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4900 != -1) {
        dispatch_once(&qword_1001F4900, &stru_1001C6708);
      }
      uint64_t v36 = *(void *)(a1 + 32);
      id v37 = v8;
      id v32 = "-[NRLinkQuickRelay setupIDSSessionAndSendInvitation]_block_invoke";
      uint64_t v34 = 643;
      id v30 = "";
      _NRLogWithArgs();
    }
    id v39 = [objc_alloc((Class)IDSAccountController) initWithService:@"com.apple.private.alloy.terminus"];
    int v9 = [v39 accounts];
    if (qword_1001F4900 != -1) {
      dispatch_once(&qword_1001F4900, &stru_1001C6708);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4900 != -1) {
        dispatch_once(&qword_1001F4900, &stru_1001C6708);
      }
      uint64_t v36 = *(void *)(a1 + 32);
      id v37 = v9;
      id v32 = "-[NRLinkQuickRelay setupIDSSessionAndSendInvitation]_block_invoke";
      uint64_t v34 = 648;
      id v30 = "";
      _NRLogWithArgs();
    }
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v45 objects:v56 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v46;
LABEL_39:
      uint64_t v15 = 0;
      while (1)
      {
        if (*(void *)v46 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v16 = *(void **)(*((void *)&v45 + 1) + 8 * v15);
        if (v16)
        {
          if ([*(id *)(*((void *)&v45 + 1) + 8 * v15) isActive]) {
            break;
          }
        }
        if (v12 == (id)++v15)
        {
          id v12 = [v10 countByEnumeratingWithState:&v45 objects:v56 count:16];
          if (!v12) {
            goto LABEL_58;
          }
          goto LABEL_39;
        }
      }
      id v40 = v16;

      if (qword_1001F4900 != -1) {
        dispatch_once(&qword_1001F4900, &stru_1001C6708);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4900 != -1) {
          dispatch_once(&qword_1001F4900, &stru_1001C6708);
        }
        uint64_t v36 = *(void *)(a1 + 32);
        id v37 = v40;
        id v32 = "-[NRLinkQuickRelay setupIDSSessionAndSendInvitation]_block_invoke";
        uint64_t v34 = 668;
        id v30 = "";
        _NRLogWithArgs();
      }
      uint64_t v17 = [v8 pushToken:v30, v32, v34, v36, v37];
      id v18 = [v8 identities];
      id v19 = [v8 service];
      id v38 = (void *)v17;
      id v20 = (void *)_IDSCopyIDForPushTokenAndIdentitiesWithService();
      id v21 = objc_alloc((Class)IDSSession);
      uint64_t v22 = +[NSSet setWithObject:v20];
      v54[0] = IDSSessionSingleChannelDirectModeKey;
      v54[1] = IDSSessionForceInternetInvitationKey;
      v55[0] = &__kCFBooleanTrue;
      v55[1] = &__kCFBooleanTrue;
      id v23 = +[NSDictionary dictionaryWithObjects:v55 forKeys:v54 count:2];
      id v24 = [v21 initWithAccount:v40 destinations:v22 options:v23];

      if (qword_1001F4900 != -1) {
        dispatch_once(&qword_1001F4900, &stru_1001C6708);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4900 != -1) {
          dispatch_once(&qword_1001F4900, &stru_1001C6708);
        }
        _NRLogWithArgs();
      }
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472;
      v41[2] = sub_100047F88;
      v41[3] = &unk_1001C8868;
      id v25 = *(NSObject **)(a1 + 48);
      v41[4] = *(void *)(a1 + 56);
      id v42 = v24;
      id v43 = v20;
      id v26 = v20;
      id v27 = v24;
      dispatch_async(v25, v41);
    }
    else
    {
LABEL_58:

      if (qword_1001F4900 != -1) {
        dispatch_once(&qword_1001F4900, &stru_1001C6708);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4900 != -1) {
          dispatch_once(&qword_1001F4900, &stru_1001C6708);
        }
        _NRLogWithArgs();
      }
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      void v44[2] = sub_100047F3C;
      v44[3] = &unk_1001C8BA8;
      uint64_t v28 = *(NSObject **)(a1 + 48);
      v44[4] = *(void *)(a1 + 56);
      dispatch_async(v28, v44);
    }
  }
  else
  {
LABEL_15:

LABEL_31:
    if (qword_1001F4900 != -1) {
      dispatch_once(&qword_1001F4900, &stru_1001C6708);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4900 != -1) {
        dispatch_once(&qword_1001F4900, &stru_1001C6708);
      }
      _NRLogWithArgs();
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100047EF0;
    block[3] = &unk_1001C8BA8;
    id v14 = *(NSObject **)(a1 + 48);
    void block[4] = *(void *)(a1 + 56);
    dispatch_async(v14, block);
  }
}

id sub_100047EF0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v2);

  id v3 = *(void **)(a1 + 32);

  return [v3 suspend];
}

id sub_100047F3C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v2);

  id v3 = *(void **)(a1 + 32);

  return [v3 suspend];
}

void sub_100047F88(id *a1)
{
  uint64_t v2 = [a1[4] queue];
  dispatch_assert_queue_V2(v2);

  *((unsigned char *)a1[4] + 216) = 0;
  id v3 = (unsigned __int8 *)a1[4];
  if (v3[16] == 255)
  {
    uint64_t v17 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v24 = (id)_NRCopyLogObjectForNRUUID();
      id v23 = [a1[4] copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    id v4 = a1[5];
    uint64_t v5 = [a1[4] queue];
    [v4 setDelegate:v3 queue:v5];

    uint64_t v6 = (char *)a1[4];
    if (v6)
    {
      objc_storeStrong((id *)(v6 + 231), a1[5]);
      int v7 = (char *)a1[4];
      if (v7)
      {
        objc_storeStrong((id *)(v7 + 239), a1[6]);
        id v8 = (char *)a1[4];
        if (v8)
        {
          int v9 = [v8 queue];
          dispatch_assert_queue_V2(v9);

          id v10 = (void *)_NRCopyLogObjectForNRUUID();
          int v11 = _NRLogIsLevelEnabled();

          if (v11)
          {
            id v12 = (void *)_NRCopyLogObjectForNRUUID();
            uint64_t v21 = 764;
            id v22 = [v8 copyDescription];
            id v19 = "";
            id v20 = "-[NRLinkQuickRelay sendInvitation]";
            _NRLogWithArgs();
          }
          v8[213] = 1;
          [*(id *)(v8 + 231) sendInvitation:v19, v20, v21, v22];
          uint64_t v13 = [*(id *)(v8 + 231) sessionID];
          id v14 = objc_alloc_init((Class)NSMutableDictionary);
          [v14 setObject:&off_1001D48E8 forKeyedSubscript:@"State"];
          [v14 setObject:v13 forKeyedSubscript:@"SessionID"];
          sub_100114390(@"IDS Session", v14);

          [v8 reportEvent:10003, @"%@", *(void *)(v8 + 231) detailsFormat];
          ++*(void *)(v8 + 367);
          uint64_t v15 = mach_absolute_time();
          uint64_t v16 = *(void *)(v8 + 639);
          if (v16) {
            *(void *)(v16 + 112) = v15;
          }
        }
      }
    }
  }
}

id sub_1000496BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeDelegate:*(void *)(a1 + 40)];
}

char *sub_10004A324(char *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  int v7 = v6;
  if (!a1) {
    goto LABEL_15;
  }
  if (!v6)
  {
    id v18 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v20 = sub_10004A608();
      _NRLogWithArgs();

      uint64_t v16 = 0;
      goto LABEL_6;
    }
LABEL_15:
    uint64_t v16 = 0;
    goto LABEL_6;
  }
  v29.receiver = a1;
  v29.super_class = (Class)TXSContext;
  id v8 = [super init];
  if (!v8)
  {
    id v21 = sub_10004A608();
    int v22 = _NRLogIsLevelEnabled();

    a1 = "-[TXSContext initWithRequest:onConnection:]";
    if (v22)
    {
      id v23 = sub_10004A608();
      _NRLogWithArgs();
    }
    goto LABEL_14;
  }
  id v10 = v8;
  objc_setProperty_atomic(v8, v9, v7, 8);
  objc_setProperty_atomic(v10, v11, v5, 16);
  id v12 = v5;
  xpc_object_t reply = xpc_dictionary_create_reply(v12);
  if (!reply)
  {
    id v24 = sub_10004A608();
    int v25 = _NRLogIsLevelEnabled();

    a1 = "nr_xpc_dictionary_create_reply";
    if (v25)
    {
      id v26 = sub_10004A608();
      _NRLogWithArgs();
    }
LABEL_14:
    id v5 = (id)_os_log_pack_size();
    int v7 = (char *)&v28 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v27 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v27 = 136446210;
    *(void *)(v27 + 4) = a1;
    sub_10004A608();
    _NRLogAbortWithPack();
    goto LABEL_15;
  }
  id v14 = reply;

  objc_setProperty_atomic(v10, v15, v14, 24);
  a1 = v10;
  uint64_t v16 = a1;
LABEL_6:

  return v16;
}

id sub_10004A608()
{
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  uint32_t v0 = (void *)qword_1001F4918;

  return v0;
}

void sub_10004A65C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4918;
  qword_1001F4918 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10004A6A0(void *self, const char *a2)
{
  if (!self) {
    return 0;
  }
  id v3 = (void *)self[4];
  if (!v3)
  {
    Property = (_xpc_connection_s *)objc_getProperty(self, a2, 8, 1);
    uint64_t pid = xpc_connection_get_pid(Property);
    id v6 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
    bzero(buffer, 0x400uLL);
    if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
    {
      id v7 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

      id v6 = v7;
    }
    id v8 = (void *)self[4];
    self[4] = v6;

    id v3 = (void *)self[4];
  }

  return v3;
}

void *sub_10004A7F8(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)TXSHandler;
    id v6 = [super init];
    if (!v6)
    {
      id v9 = sub_10004A608();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v11 = sub_10004A608();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 136446210;
      *(void *)(v12 + 4) = "-[TXSHandler initWithHandlerFunction:allowedEntitlementGroup:]";
      sub_10004A608();
      _NRLogAbortWithPack();
    }
    a1 = v6;
    v6[2] = a2;
    objc_setProperty_atomic(v6, v7, v5, 8);
  }

  return a1;
}

void *sub_10004A95C(void *a1)
{
  if (!a1) {
    return 0;
  }
  v37.receiver = a1;
  v37.super_class = (Class)TerminusdXPCServer;
  id v1 = [super init];
  if (!v1)
  {
    id v29 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v31 = sub_10004A608();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v32 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v32 = 136446210;
    *(void *)(v32 + 4) = "-[TerminusdXPCServer initInternal]";
    sub_10004A608();
    _NRLogAbortWithPack();
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = sub_10015BD9C();
  objc_setProperty_atomic(v2, v4, v3, 8);

  Property = objc_getProperty(v2, v5, 8, 1);
  dispatch_assert_queue_V2(Property);
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  objc_setProperty_atomic(v2, v8, v7, 32);

  id v9 = objc_alloc_init((Class)NSMutableSet);
  objc_setProperty_atomic(v2, v10, v9, 40);

  id v11 = objc_alloc_init((Class)NSMutableSet);
  objc_setProperty_atomic(v2, v12, v11, 24);

  sub_10004ACAC(v2);
  id v13 = objc_alloc_init((Class)NSMutableArray);
  objc_setProperty_atomic(v2, v14, v13, 48);

  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  id v16 = objc_getProperty(v2, v15, 40, 1);
  id v17 = [v16 countByEnumeratingWithState:&v33 objects:v39 count:16];
  if (v17)
  {
    id v19 = v17;
    uint64_t v20 = *(void *)v34;
    do
    {
      for (uint64_t i = 0; i != v19; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v34 != v20) {
          objc_enumerationMutation(v16);
        }
        uint64_t v22 = *(void *)(*((void *)&v33 + 1) + 8 * i);
        id v23 = objc_getProperty(v2, v18, 48, 1);
        uint64_t v38 = v22;
        id v24 = v23;
        int v25 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v38, 1, (void)v33);
        [v24 addObject:v25];
      }
      id v19 = [v16 countByEnumeratingWithState:&v33 objects:v39 count:16];
    }
    while (v19);
  }

  objc_setProperty_atomic(v2, v26, 0, 40);
  sub_10004C524(v2, v27);
  return v2;
}

void sub_10004ACAC(void *a1)
{
  id v2 = objc_alloc((Class)NSString);
  id v3 = [v2 initWithUTF8String:nrXPCEntitlementPing];
  id v270 = v3;
  SEL v4 = +[NSArray arrayWithObjects:&v270 count:1];
  v271 = v4;
  SEL v5 = +[NSArray arrayWithObjects:&v271 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100060848, 1, v5);

  id v6 = objc_alloc((Class)NSString);
  uint64_t v7 = nrXPCEntitlementCompanionLink;
  id v8 = [v6 initWithUTF8String:nrXPCEntitlementCompanionLink];
  id v268 = v8;
  id v9 = +[NSArray arrayWithObjects:&v268 count:1];
  v269 = v9;
  SEL v10 = +[NSArray arrayWithObjects:&v269 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10006066C, 25, v10);

  id v11 = [objc_alloc((Class)NSString) initWithUTF8String:v7];
  id v266 = v11;
  SEL v12 = +[NSArray arrayWithObjects:&v266 count:1];
  v267 = v12;
  id v13 = +[NSArray arrayWithObjects:&v267 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100060490, 2, v13);

  id v14 = [objc_alloc((Class)NSString) initWithUTF8String:v7];
  id v264 = v14;
  SEL v15 = +[NSArray arrayWithObjects:&v264 count:1];
  v265 = v15;
  id v16 = +[NSArray arrayWithObjects:&v265 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_1000602B4, 3, v16);

  id v17 = objc_alloc((Class)NSString);
  id v18 = [v17 initWithUTF8String:nrXPCEntitlementCompanionLinkIsEnabled];
  id v262 = v18;
  id v19 = +[NSArray arrayWithObjects:&v262 count:1];
  v263 = v19;
  uint64_t v20 = +[NSArray arrayWithObjects:&v263 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100060084, 12, v20);

  id v21 = [objc_alloc((Class)NSString) initWithUTF8String:v7];
  id v260 = v21;
  uint64_t v22 = +[NSArray arrayWithObjects:&v260 count:1];
  v261 = v22;
  id v23 = +[NSArray arrayWithObjects:&v261 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005FE44, 4, v23);

  id v24 = objc_alloc((Class)NSString);
  uint64_t v25 = nrXPCEntitlementDiagnostic;
  id v26 = [v24 initWithUTF8String:nrXPCEntitlementDiagnostic];
  id v258 = v26;
  uint64_t v27 = +[NSArray arrayWithObjects:&v258 count:1];
  v259 = v27;
  uint64_t v28 = +[NSArray arrayWithObjects:&v259 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005F904, 21, v28);

  id v29 = [objc_alloc((Class)NSString) initWithUTF8String:v25];
  id v256 = v29;
  id v30 = +[NSArray arrayWithObjects:&v256 count:1];
  v257 = v30;
  id v31 = +[NSArray arrayWithObjects:&v257 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005ECD0, 22, v31);

  id v32 = [objc_alloc((Class)NSString) initWithUTF8String:v25];
  id v254 = v32;
  long long v33 = +[NSArray arrayWithObjects:&v254 count:1];
  v255 = v33;
  long long v34 = +[NSArray arrayWithObjects:&v255 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005D680, 33, v34);

  id v35 = [objc_alloc((Class)NSString) initWithUTF8String:v7];
  id v252 = v35;
  long long v36 = +[NSArray arrayWithObjects:&v252 count:1];
  v253 = v36;
  objc_super v37 = +[NSArray arrayWithObjects:&v253 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005D42C, 5, v37);

  id v38 = [objc_alloc((Class)NSString) initWithUTF8String:v7];
  id v250 = v38;
  id v39 = +[NSArray arrayWithObjects:&v250 count:1];
  v251 = v39;
  id v40 = +[NSArray arrayWithObjects:&v251 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005D0F4, 48, v40);

  id v41 = objc_alloc((Class)NSString);
  uint64_t v42 = nrXPCEntitlementDevicesRead;
  id v43 = [v41 initWithUTF8String:nrXPCEntitlementDevicesRead];
  id v248 = v43;
  int v44 = +[NSArray arrayWithObjects:&v248 count:1];
  v249 = v44;
  long long v45 = +[NSArray arrayWithObjects:&v249 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005C890, 6, v45);

  id v46 = [objc_alloc((Class)NSString) initWithUTF8String:v7];
  id v246 = v46;
  long long v47 = +[NSArray arrayWithObjects:&v246 count:1];
  v247 = v47;
  long long v48 = +[NSArray arrayWithObjects:&v247 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005C154, 7, v48);

  id v49 = [objc_alloc((Class)NSString) initWithUTF8String:v7];
  id v244 = v49;
  long long v50 = +[NSArray arrayWithObjects:&v244 count:1];
  v245 = v50;
  long long v51 = +[NSArray arrayWithObjects:&v245 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005BAD4, 31, v51);

  id v52 = [objc_alloc((Class)NSString) initWithUTF8String:v42];
  id v242 = v52;
  long long v53 = +[NSArray arrayWithObjects:&v242 count:1];
  v243 = v53;
  id v54 = +[NSArray arrayWithObjects:&v243 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005B440, 13, v54);

  id v55 = [objc_alloc((Class)NSString) initWithUTF8String:v42];
  id v240 = v55;
  long long v56 = +[NSArray arrayWithObjects:&v240 count:1];
  v241 = v56;
  int v57 = +[NSArray arrayWithObjects:&v241 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005AD1C, 50, v57);

  id v58 = [objc_alloc((Class)NSString) initWithUTF8String:v42];
  id v238 = v58;
  int v59 = +[NSArray arrayWithObjects:&v238 count:1];
  v239 = v59;
  int v60 = +[NSArray arrayWithObjects:&v239 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005A530, 46, v60);

  id v61 = [objc_alloc((Class)NSString) initWithUTF8String:v42];
  id v236 = v61;
  int v62 = +[NSArray arrayWithObjects:&v236 count:1];
  v237 = v62;
  id v63 = +[NSArray arrayWithObjects:&v237 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005A324, 45, v63);

  id v64 = objc_alloc((Class)NSString);
  uint64_t v65 = nrXPCEntitlementTesting;
  id v66 = [v64 initWithUTF8String:nrXPCEntitlementTesting];
  id v234 = v66;
  int v67 = +[NSArray arrayWithObjects:&v234 count:1];
  v235 = v67;
  unint64_t v68 = +[NSArray arrayWithObjects:&v235 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100059F74, 20, v68);

  id v69 = objc_alloc((Class)NSString);
  uint64_t v70 = nrXPCEntitlementDevicesWrite;
  id v71 = [v69 initWithUTF8String:nrXPCEntitlementDevicesWrite];
  id v232 = v71;
  id v72 = +[NSArray arrayWithObjects:&v232 count:1];
  v233 = v72;
  id v73 = +[NSArray arrayWithObjects:&v233 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100058B8C, 14, v73);

  id v74 = [objc_alloc((Class)NSString) initWithUTF8String:v70];
  id v230 = v74;
  int v75 = +[NSArray arrayWithObjects:&v230 count:1];
  v231 = v75;
  id v76 = +[NSArray arrayWithObjects:&v231 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005847C, 15, v76);

  id v77 = [objc_alloc((Class)NSString) initWithUTF8String:v70];
  id v228 = v77;
  id v78 = +[NSArray arrayWithObjects:&v228 count:1];
  v229 = v78;
  id v79 = +[NSArray arrayWithObjects:&v229 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100057E4C, 19, v79);

  id v80 = [objc_alloc((Class)NSString) initWithUTF8String:v70];
  id v226 = v80;
  int v81 = +[NSArray arrayWithObjects:&v226 count:1];
  v227 = v81;
  id v82 = +[NSArray arrayWithObjects:&v227 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_1000577B4, 16, v82);

  id v83 = [objc_alloc((Class)NSString) initWithUTF8String:v70];
  id v224 = v83;
  id v84 = +[NSArray arrayWithObjects:&v224 count:1];
  v225 = v84;
  uint64_t v85 = +[NSArray arrayWithObjects:&v225 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10005711C, 17, v85);

  id v86 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v222 = v86;
  int v87 = +[NSArray arrayWithObjects:&v222 count:1];
  v223 = v87;
  id v88 = +[NSArray arrayWithObjects:&v223 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100056D6C, 18, v88);

  id v89 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v220 = v89;
  id v90 = +[NSArray arrayWithObjects:&v220 count:1];
  v221 = v90;
  int v91 = +[NSArray arrayWithObjects:&v221 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_1000569E8, 47, v91);

  id v92 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v218 = v92;
  uint64_t v93 = +[NSArray arrayWithObjects:&v218 count:1];
  v219 = v93;
  id v94 = +[NSArray arrayWithObjects:&v219 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_1000567C4, 23, v94);

  id v95 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v216 = v95;
  id v96 = +[NSArray arrayWithObjects:&v216 count:1];
  v217 = v96;
  uint64_t v97 = +[NSArray arrayWithObjects:&v217 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_1000565A0, 24, v97);

  id v98 = objc_alloc((Class)NSString);
  id v99 = [v98 initWithUTF8String:nrXPCEntitlementDeviceMonitor];
  id v214 = v99;
  id v100 = +[NSArray arrayWithObjects:&v214 count:1];
  v215 = v100;
  int v101 = +[NSArray arrayWithObjects:&v215 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100055B3C, 10, v101);

  id v102 = objc_alloc((Class)NSString);
  id v103 = [v102 initWithUTF8String:nrXPCEntitlementDevicePreferences];
  id v212 = v103;
  uint64_t v104 = +[NSArray arrayWithObjects:&v212 count:1];
  v213 = v104;
  id v105 = +[NSArray arrayWithObjects:&v213 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100054414, 11, v105);

  id v106 = objc_alloc((Class)NSString);
  id v107 = [v106 initWithUTF8String:nrXPCEntitlementTestLinkRecommendation];
  id v210 = v107;
  long long v108 = +[NSArray arrayWithObjects:&v210 count:1];
  v211 = v108;
  int v109 = +[NSArray arrayWithObjects:&v211 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100054240, 26, v109);

  id v110 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v208 = v110;
  id v111 = +[NSArray arrayWithObjects:&v208 count:1];
  v209 = v111;
  id v112 = +[NSArray arrayWithObjects:&v209 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100054014, 27, v112);

  id v113 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v206 = v113;
  uint64_t v114 = +[NSArray arrayWithObjects:&v206 count:1];
  v207 = v114;
  uint64_t v115 = +[NSArray arrayWithObjects:&v207 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100053708, 28, v115);

  id v116 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v204 = v116;
  id v117 = +[NSArray arrayWithObjects:&v204 count:1];
  v205 = v117;
  long long v118 = +[NSArray arrayWithObjects:&v205 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100053488, 38, v118);

  id v119 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v202 = v119;
  id v120 = +[NSArray arrayWithObjects:&v202 count:1];
  v203 = v120;
  id v121 = +[NSArray arrayWithObjects:&v203 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100053098, 29, v121);

  id v122 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v200 = v122;
  v123 = +[NSArray arrayWithObjects:&v200 count:1];
  v201 = v123;
  dispatch_source_t v124 = +[NSArray arrayWithObjects:&v201 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100052E10, 37, v124);

  id v125 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v198 = v125;
  uint64_t v126 = +[NSArray arrayWithObjects:&v198 count:1];
  v199 = v126;
  long long v127 = +[NSArray arrayWithObjects:&v199 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100052A20, 30, v127);

  id v128 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v196 = v128;
  long long v129 = +[NSArray arrayWithObjects:&v196 count:1];
  v197 = v129;
  long long v130 = +[NSArray arrayWithObjects:&v197 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100052600, 51, v130);

  id v131 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v194 = v131;
  v132 = +[NSArray arrayWithObjects:&v194 count:1];
  v195 = v132;
  int v133 = +[NSArray arrayWithObjects:&v195 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100052108, 39, v133);

  id v134 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v192 = v134;
  int v135 = +[NSArray arrayWithObjects:&v192 count:1];
  v193 = v135;
  v136 = +[NSArray arrayWithObjects:&v193 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_1000518C0, 40, v136);

  id v137 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v190 = v137;
  v138 = +[NSArray arrayWithObjects:&v190 count:1];
  v191 = v138;
  id v139 = +[NSArray arrayWithObjects:&v191 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100051498, 43, v139);

  id v140 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v188 = v140;
  id v141 = +[NSArray arrayWithObjects:&v188 count:1];
  v189 = v141;
  uint64_t v142 = +[NSArray arrayWithObjects:&v189 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100050F74, 34, v142);

  id v143 = objc_alloc((Class)NSString);
  id v144 = [v143 initWithUTF8String:nrXPCEntitlementFixedInterfaceMode];
  id v186 = v144;
  id v145 = +[NSArray arrayWithObjects:&v186 count:1];
  v187 = v145;
  id v146 = +[NSArray arrayWithObjects:&v187 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_1000509E4, 32, v146);

  id v147 = [objc_alloc((Class)NSString) initWithUTF8String:v42];
  id v184 = v147;
  id v148 = +[NSArray arrayWithObjects:&v184 count:1];
  v185 = v148;
  uint64_t v149 = +[NSArray arrayWithObjects:&v185 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_1000504EC, 35, v149);

  id v150 = objc_alloc((Class)NSString);
  id v151 = [v150 initWithUTF8String:nrXPCEntitlementRetryConnections];
  id v182 = v151;
  id v152 = +[NSArray arrayWithObjects:&v182 count:1];
  v183 = v152;
  id v153 = +[NSArray arrayWithObjects:&v183 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_100050110, 36, v153);

  id v154 = objc_alloc((Class)NSString);
  id v155 = [v154 initWithUTF8String:nrXPCEntitlementXPCComm];
  id v180 = v155;
  id v156 = +[NSArray arrayWithObjects:&v180 count:1];
  v181 = v156;
  id v157 = +[NSArray arrayWithObjects:&v181 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10004F2AC, 41, v157);

  id v158 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v178 = v158;
  id v159 = +[NSArray arrayWithObjects:&v178 count:1];
  v179 = v159;
  id v160 = +[NSArray arrayWithObjects:&v179 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10004EF50, 42, v160);

  id v161 = [objc_alloc((Class)NSString) initWithUTF8String:v65];
  id v176 = v161;
  id v162 = +[NSArray arrayWithObjects:&v176 count:1];
  v177 = v162;
  id v163 = +[NSArray arrayWithObjects:&v177 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10004ED7C, 44, v163);

  id v164 = objc_alloc((Class)NSString);
  id v165 = [v164 initWithUTF8String:nrXPCEntitlementPairing];
  id v174 = v165;
  id v166 = +[NSArray arrayWithObjects:&v174 count:1];
  v175 = v166;
  id v167 = +[NSArray arrayWithObjects:&v175 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10004E9F0, 49, v167);

  id v168 = objc_alloc((Class)NSString);
  id v169 = [v168 initWithUTF8String:nrXPCEntitlementIdentityProxy];
  id v172 = v169;
  id v170 = +[NSArray arrayWithObjects:&v172 count:1];
  v173 = v170;
  id v171 = +[NSArray arrayWithObjects:&v173 count:1];
  sub_10004E0CC(a1, (uint64_t)sub_10004E590, 52, v171);
}

void sub_10004C524(void *a1, const char *a2)
{
  Property = objc_getProperty(a1, a2, 8, 1);
  dispatch_assert_queue_V2(Property);
  SEL v4 = (const char *)nrXPCServiceName;
  id v6 = objc_getProperty(a1, v5, 8, 1);
  xpc_connection_t mach_service = xpc_connection_create_mach_service(v4, v6, 1uLL);
  objc_setProperty_atomic(a1, v8, mach_service, 16);

  if (!objc_getProperty(a1, v9, 16, 1))
  {
    id v16 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v18 = sub_10004A608();
      _NRLogWithArgs();
    }
LABEL_9:
    _os_log_pack_size();
    __error();
    uint64_t v22 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v22 = 136446210;
    *(void *)(v22 + 4) = "-[TerminusdXPCServer startXPCListener]";
    sub_10004A608();
    _NRLogAbortWithPack();
    __break(1u);
  }
  id v11 = objc_getProperty(a1, v10, 16, 1);
  if (xpc_get_type(v11) != (xpc_type_t)&_xpc_type_connection)
  {
    id v19 = sub_10004A608();
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
      id v21 = sub_10004A608();
      _NRLogWithArgs();
    }
    goto LABEL_9;
  }
  objc_initWeak(&location, a1);
  id v13 = (_xpc_connection_s *)objc_getProperty(a1, v12, 16, 1);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10004C88C;
  handler[3] = &unk_1001C67D0;
  objc_copyWeak(&v24, &location);
  void handler[4] = a1;
  xpc_connection_set_event_handler(v13, handler);

  SEL v15 = (_xpc_connection_s *)objc_getProperty(a1, v14, 16, 1);
  xpc_connection_resume(v15);

  objc_destroyWeak(&v24);
  objc_destroyWeak(&location);
}

void sub_10004C850(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_10004C88C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      xpc_type_t type = xpc_get_type(v3);
      if (type == (xpc_type_t)&_xpc_type_connection)
      {
        uint64_t v26 = 0;
        uint64_t v27 = &v26;
        uint64_t v28 = 0x3032000000;
        id v29 = sub_10004CC74;
        id v30 = sub_10004CC84;
        id v7 = v3;
        id v31 = v7;
        id v9 = objc_getProperty(WeakRetained, v8, 48, 1);
        LOBYTE(v7) = sub_10004CC8C(v7, v9);

        if (v7)
        {
          id v11 = (_xpc_connection_s *)v27[5];
          id Property = *(id *)(a1 + 32);
          if (Property) {
            id Property = objc_getProperty(Property, v10, 8, 1);
          }
          id v13 = Property;
          xpc_connection_set_target_queue(v11, v13);

          objc_initWeak(&location, WeakRetained);
          SEL v14 = (_xpc_connection_s *)v27[5];
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3221225472;
          handler[2] = sub_10004CED4;
          handler[3] = &unk_1001C67A8;
          void handler[5] = &v26;
          objc_copyWeak(&v24, &location);
          void handler[4] = *(void *)(a1 + 32);
          xpc_connection_set_event_handler(v14, handler);
          xpc_connection_resume((xpc_connection_t)v27[5]);
          id v16 = *(id *)(a1 + 32);
          if (v16) {
            id v16 = objc_getProperty(v16, v15, 24, 1);
          }
          id v17 = v16;
          [v17 addObject:v27[5]];

          objc_destroyWeak(&v24);
          objc_destroyWeak(&location);
        }
        else
        {
          if (qword_1001F4920 != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          id v18 = (id)qword_1001F4918;
          char IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            if (qword_1001F4920 != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            id v20 = (id)qword_1001F4918;
            xpc_connection_get_pid((xpc_connection_t)v27[5]);
            _NRLogWithArgs();
          }
          xpc_connection_cancel((xpc_connection_t)v27[5]);
        }
        _Block_object_dispose(&v26, 8);
      }
      else if (type == (xpc_type_t)&_xpc_type_error)
      {
        id v6 = xpc_copy_description(v3);
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4920 != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          _NRLogWithArgs();
        }
        if (v6) {
          free(v6);
        }
      }
    }
  }
  else
  {
    id v21 = sub_10004A608();
    int v22 = _NRLogIsLevelEnabled();

    if (!v22) {
      goto LABEL_28;
    }
    id WeakRetained = sub_10004A608();
    _NRLogWithArgs();
  }

LABEL_28:
}

void sub_10004CC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004CC74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004CC84(uint64_t a1)
{
}

uint64_t sub_10004CC8C(void *a1, void *a2)
{
  id v21 = a1;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id obj = a2;
  id v20 = [obj countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v20)
  {
    uint64_t v19 = *(void *)v23;
    while (2)
    {
      uint64_t v3 = 0;
      while (2)
      {
        if (*(void *)v23 != v19) {
          objc_enumerationMutation(obj);
        }
        SEL v4 = *(void **)(*((void *)&v22 + 1) + 8 * v3);
        id v5 = v21;
        id v6 = v4;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        id v7 = v6;
        id v8 = [v7 countByEnumeratingWithState:&v26 objects:v31 count:16];
        if (!v8)
        {
LABEL_21:

          uint64_t v16 = 1;
          goto LABEL_22;
        }
        id v9 = v8;
        uint64_t v10 = *(void *)v27;
LABEL_10:
        uint64_t v11 = 0;
        while (1)
        {
          if (*(void *)v27 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(id *)(*((void *)&v26 + 1) + 8 * v11);
          id v13 = v5;
          [v12 UTF8String];
          SEL v14 = (void *)xpc_connection_copy_entitlement_value();

          if (!v14 || xpc_get_type(v14) != (xpc_type_t)&_xpc_type_BOOL) {
            break;
          }
          BOOL value = xpc_BOOL_get_value(v14);

          if (!value) {
            goto LABEL_5;
          }
          if (v9 == (id)++v11)
          {
            id v9 = [v7 countByEnumeratingWithState:&v26 objects:v31 count:16];
            if (v9) {
              goto LABEL_10;
            }
            goto LABEL_21;
          }
        }

LABEL_5:
        if ((id)++v3 != v20) {
          continue;
        }
        break;
      }
      id v20 = [obj countByEnumeratingWithState:&v22 objects:v30 count:16];
      if (v20) {
        continue;
      }
      break;
    }
  }
  uint64_t v16 = 0;
LABEL_22:

  return v16;
}

void sub_10004CED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_object_t object = v3;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    if (v3)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      if (!WeakRetained)
      {
LABEL_164:

        goto LABEL_165;
      }
      xpc_type_t type = xpc_get_type(object);
      if (type != (xpc_type_t)&_xpc_type_dictionary)
      {
        if (type != (xpc_type_t)&_xpc_type_error)
        {
          id v7 = xpc_copy_description(object);
          if (qword_1001F4920 != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4920 != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            _NRLogWithArgs();
          }
          if (v7) {
            free(v7);
          }
          goto LABEL_164;
        }
        id Property = *(id *)(a1 + 32);
        if (Property) {
          id Property = objc_getProperty(Property, v6, 24, 1);
        }
        [Property removeObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        long long v25 = (id *)(id)qword_1001F4A18;
        id v26 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        uint64_t v140 = a1;
        uint64_t v149 = v25;
        if (v25)
        {
          long long v27 = sub_10015BD9C();
          dispatch_assert_queue_V2(v27);

          if (v26)
          {
            long long v156 = 0u;
            long long v157 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            id v28 = v149[27];
            id v29 = [v28 countByEnumeratingWithState:&v154 objects:buffer count:16];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = *(void *)v155;
              do
              {
                for (uint64_t i = 0; i != v30; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v155 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  uint64_t v33 = [v149[27] objectForKeyedSubscript:*(void *)(*((void *)&v154 + 1) + 8 * i)];
                  id v34 = v26;
                  if (v33)
                  {
                    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v33 + 104));
                    [*(id *)(v33 + 168) removeObject:v34];
                  }
                }
                id v30 = [v28 countByEnumeratingWithState:&v154 objects:buffer count:16];
              }
              while (v30);
            }

            id v35 = [v149[28] copy];
            long long v150 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            id v36 = v35;
            id v37 = [v36 countByEnumeratingWithState:&v150 objects:&v159 count:16];
            if (v37)
            {
              id v38 = v37;
              uint64_t v39 = *(void *)v151;
              do
              {
                for (j = 0; j != v38; j = (char *)j + 1)
                {
                  if (*(void *)v151 != v39) {
                    objc_enumerationMutation(v36);
                  }
                  id v41 = *(void **)(*((void *)&v150 + 1) + 8 * (void)j);
                  if (v41 && (id)v41[2] == v26)
                  {
                    [v149[28] removeObject:*(void *)(*((void *)&v150 + 1) + 8 * (void)j)];
                    uint64_t v42 = [v41 description];
                    sub_10012F648(0, 1017, 0, v42);
                  }
                }
                id v38 = [v36 countByEnumeratingWithState:&v150 objects:&v159 count:16];
              }
              while (v38);
            }

            a1 = v140;
          }
          else
          {
            id v128 = sub_1000AA13C();
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              id v130 = sub_1000AA13C();
              id v134 = "-[NRLinkDirector removeDeviceMonitorConnection:]";
              _NRLogWithArgs();
            }
          }
        }

        id v43 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        if (v149)
        {
          int v44 = sub_10015BD9C();
          dispatch_assert_queue_V2(v44);

          if (v43)
          {
            id v139 = WeakRetained;
            long long v156 = 0u;
            long long v157 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            id obj = v149[27];
            id v148 = [obj countByEnumeratingWithState:&v154 objects:buffer count:16];
            if (v148)
            {
              id v146 = v43;
              uint64_t v147 = *(void *)v155;
              do
              {
                for (k = 0; k != v148; k = (char *)k + 1)
                {
                  if (*(void *)v155 != v147) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v46 = [v149[27] objectForKeyedSubscript:*((void *)&v154 + 1) + 8 * k];
                  id v47 = v43;
                  if (v46)
                  {
                    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v46 + 104));
                    uint64_t v48 = *(void *)(v46 + 184);
                    id v49 = v47;
                    if (v48)
                    {
                      long long v50 = *(NSObject **)(v48 + 24);
                      if (v50) {
                        dispatch_assert_queue_V2(v50);
                      }
                      long long v51 = (_xpc_connection_s *)v49;
                      id v52 = *(NSObject **)(v48 + 24);
                      if (v52) {
                        dispatch_assert_queue_V2(v52);
                      }
                      if ([*(id *)(v48 + 32) count])
                      {
                        context = xpc_connection_get_context(v51);
                        if (context)
                        {
                          id v54 = context;
                          id v55 = [objc_alloc((Class)NSString) initWithUTF8String:context];
                          long long v56 = [*(id *)(v48 + 32) objectForKeyedSubscript:v55];
                          if (v56)
                          {
                            id v57 = v55;
                            id v143 = v55;
                            id v144 = v47;
                            if (v57)
                            {
                              id v58 = +[NSString stringWithUTF8String:"-"];
                              [v57 componentsSeparatedByString:v58];
                              uint64_t v142 = v46;
                              int v59 = v54;
                              id v60 = v49;
                              id v61 = v57;
                              v63 = int v62 = v56;
                              id v64 = [v63 firstObject];

                              long long v56 = v62;
                              id v57 = v61;
                              id v49 = v60;
                              id v54 = v59;
                              uint64_t v46 = v142;

                              if (!v64) {
                                goto LABEL_67;
                              }
                            }
                            else
                            {
                              if (qword_1001F4CA0 != -1) {
                                dispatch_once(&qword_1001F4CA0, &stru_1001C7F80);
                              }
                              id v80 = (id)qword_1001F4C98;
                              int v81 = _NRLogIsLevelEnabled();

                              if (v81)
                              {
                                if (qword_1001F4CA0 != -1) {
                                  dispatch_once(&qword_1001F4CA0, &stru_1001C7F80);
                                }
                                id v82 = (id)qword_1001F4C98;
                                id v134 = "NRDPMCopyClientNameFromContextString";
                                _NRLogWithArgs();
                              }
LABEL_67:
                              uint64_t pid = xpc_connection_get_pid(v51);
                              id v64 = sub_100116370(pid, 0);
                            }
                            sub_100121A98(v48, v64);
                            free(v54);
                            xpc_connection_set_context(v51, 0);
                            id v66 = (void *)_NRCopyLogObjectForNRUUID();
                            int v67 = _NRLogIsLevelEnabled();

                            if (v67)
                            {
                              unint64_t v68 = (void *)_NRCopyLogObjectForNRUUID();
                              id v137 = v57;
                              v138 = v56;
                              uint64_t v136 = 210;
                              id v134 = "";
                              int v135 = "-[NRDevicePreferencesManager removeLinkPreferencesForConnection:]";
                              _NRLogWithArgs();
                            }
                            sub_100121C80(v48, v57);

                            id v55 = v143;
                            id v47 = v144;
                          }
                        }
                      }

                      id v69 = v51;
                      uint64_t v70 = *(NSObject **)(v48 + 24);
                      if (v70) {
                        dispatch_assert_queue_V2(v70);
                      }
                      if (objc_msgSend(*(id *)(v48 + 40), "count", v134, v135, v136, v137, v138))
                      {
                        id v71 = xpc_connection_get_context(v69);
                        if (v71)
                        {
                          id v72 = v71;
                          id v73 = v47;
                          id v74 = [objc_alloc((Class)NSString) initWithUTF8String:v71];
                          int v75 = [*(id *)(v48 + 40) objectForKeyedSubscript:v74];
                          if (v75)
                          {
                            free(v72);
                            xpc_connection_set_context(v69, 0);
                            id v76 = (void *)_NRCopyLogObjectForNRUUID();
                            int v77 = _NRLogIsLevelEnabled();

                            if (v77)
                            {
                              id v78 = (void *)_NRCopyLogObjectForNRUUID();
                              id v137 = v74;
                              v138 = (void *)_NRCopyPolicyTrafficClassifiersDescription();
                              uint64_t v136 = 296;
                              id v134 = "";
                              int v135 = "-[NRDevicePreferencesManager removePolicyTrafficClassifiersForConnection:]";
                              _NRLogWithArgs();
                            }
                            [*(id *)(v48 + 40) setObject:0 forKeyedSubscript:v74];
                            sub_10012179C(v48);
                          }

                          id v47 = v73;
                        }
                      }

                      id v43 = v146;
                    }

                    uint64_t v79 = *(void *)(v46 + 184);
                    if (!v79 || !*(unsigned char *)(v79 + 8)) {
                      sub_1000DCB28(v46, *(void **)(v46 + 616));
                    }
                  }
                }
                id v148 = [obj countByEnumeratingWithState:&v154 objects:buffer count:16];
              }
              while (v148);
            }

            id v83 = [v149[29] copy];
            long long v150 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            id v84 = v83;
            id v85 = [v84 countByEnumeratingWithState:&v150 objects:&v159 count:16];
            id WeakRetained = v139;
            if (v85)
            {
              id v86 = v85;
              uint64_t v87 = *(void *)v151;
              do
              {
                for (m = 0; m != v86; m = (char *)m + 1)
                {
                  if (*(void *)v151 != v87) {
                    objc_enumerationMutation(v84);
                  }
                  id v89 = *(void **)(*((void *)&v150 + 1) + 8 * (void)m);
                  if (v89 && (id)v89[2] == v43)
                  {
                    [v149[29] removeObject:*(void *)(*((void *)&v150 + 1) + 8 * (void)m), v134];
                    id v90 = [v89 description];
                    sub_10012F648(0, 1024, 0, v90);
                  }
                }
                id v86 = [v84 countByEnumeratingWithState:&v150 objects:&v159 count:16];
              }
              while (v86);
            }

            a1 = v140;
          }
          else
          {
            id v131 = sub_1000AA13C();
            int v132 = _NRLogIsLevelEnabled();

            if (v132)
            {
              id v133 = sub_1000AA13C();
              id v134 = "-[NRLinkDirector removeDevicePreferencesManagerConnection:]";
              _NRLogWithArgs();
            }
          }
        }

        sub_1000B88BC((uint64_t)v149, *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
        id v91 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        if (v149)
        {
          long long v161 = 0u;
          long long v162 = 0u;
          long long v159 = 0u;
          long long v160 = 0u;
          id v92 = v149[27];
          id v93 = [v92 countByEnumeratingWithState:&v159 objects:buffer count:16];
          if (v93)
          {
            id v94 = v93;
            uint64_t v95 = *(void *)v160;
            do
            {
              for (n = 0; n != v94; n = (char *)n + 1)
              {
                if (*(void *)v160 != v95) {
                  objc_enumerationMutation(v92);
                }
                uint64_t v97 = [v149[27] objectForKeyedSubscript:*(void *)(*((void *)&v159 + 1) + 8 * (void)n), v134];
                id v98 = (void *)v97;
                if (v97) {
                  [*(id *)(v97 + 152) removeObject:v91];
                }
              }
              id v94 = [v92 countByEnumeratingWithState:&v159 objects:buffer count:16];
            }
            while (v94);
          }
        }
        sub_1000B8F18((uint64_t)v149, 0, *(void **)(*(void *)(*(void *)(v140 + 40) + 8) + 40));
        if (object == &_xpc_error_connection_interrupted)
        {
          if (qword_1001F4920 != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4920 != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            _NRLogWithArgs();
          }
        }
        else if (object != &_xpc_error_connection_invalid)
        {
          if (object == &_xpc_error_termination_imminent)
          {
            if (qword_1001F4920 != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            if (_NRLogIsLevelEnabled())
            {
              id v121 = sub_10004A608();
              _NRLogWithArgs();
            }
          }
          else
          {
            id v99 = xpc_copy_description(object);
            if (qword_1001F4920 != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            if (_NRLogIsLevelEnabled())
            {
              id v100 = sub_10004A608();
              _NRLogWithArgs();
            }
            if (v99) {
              free(v99);
            }
          }
        }
        uint64_t v122 = *(void *)(*(void *)(v140 + 40) + 8);
        v123 = *(void **)(v122 + 40);
        *(void *)(v122 + 40) = 0;

        goto LABEL_164;
      }
      id v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      id v9 = object;
      id v10 = v8;
      id v12 = objc_getProperty(WeakRetained, v11, 8, 1);
      dispatch_assert_queue_V2(v12);
      id v13 = sub_10004A324((char *)[TXSContext alloc], v9, v10);
      if (!v13)
      {
LABEL_158:

        goto LABEL_164;
      }
      uint64_t uint64 = xpc_dictionary_get_uint64(v9, nrXPCKeyType);
      id v16 = objc_getProperty(WeakRetained, v15, 32, 1);
      id v17 = +[NSNumber numberWithUnsignedLongLong:uint64];
      id v18 = [v16 objectForKeyedSubscript:v17];

      if (v18)
      {
        id v20 = objc_getProperty(v18, v19, 8, 1);
        if (sub_10004CC8C(v10, v20))
        {
          id v21 = WeakRetained;
          int64_t v23 = ((uint64_t (**)(char *))v18)[2](v13);
          if (v23 == -2000) {
            goto LABEL_157;
          }
          goto LABEL_156;
        }
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        if (!_NRLogIsLevelEnabled())
        {
          id v21 = WeakRetained;
          int64_t v23 = -2002;
          goto LABEL_156;
        }
        id v21 = WeakRetained;
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v102 = (id)qword_1001F4918;
        id v112 = (void *)*((void *)v13 + 4);
        if (!v112)
        {
          id v113 = (_xpc_connection_s *)objc_getProperty(v13, v111, 8, 1);
          uint64_t v114 = xpc_connection_get_pid(v113);
          id v115 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v114];
          bzero(buffer, 0x400uLL);
          if ((int)v114 >= 1 && proc_pidpath(v114, buffer, 0x400u) >= 1 && buffer[0])
          {
            id v116 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v114];

            id v115 = v116;
          }
          id v117 = (void *)*((void *)v13 + 4);
          *((void *)v13 + 4) = v115;

          id v112 = (void *)*((void *)v13 + 4);
        }
        id v109 = v112;
        StringFromNRXPCType = (void *)createStringFromNRXPCType();
        _NRLogWithArgs();
        int64_t v23 = -2002;
      }
      else
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        if (!_NRLogIsLevelEnabled())
        {
          id v21 = WeakRetained;
          int64_t v23 = -2003;
          goto LABEL_156;
        }
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v21 = WeakRetained;
        id v102 = (id)qword_1001F4918;
        id v103 = (void *)*((void *)v13 + 4);
        if (!v103)
        {
          uint64_t v104 = (_xpc_connection_s *)objc_getProperty(v13, v101, 8, 1);
          uint64_t v105 = xpc_connection_get_pid(v104);
          id v106 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v105];
          bzero(buffer, 0x400uLL);
          if ((int)v105 >= 1 && proc_pidpath(v105, buffer, 0x400u) >= 1 && buffer[0])
          {
            id v107 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v105];

            id v106 = v107;
          }
          long long v108 = (void *)*((void *)v13 + 4);
          *((void *)v13 + 4) = v106;

          id v103 = (void *)*((void *)v13 + 4);
        }
        id v109 = v103;
        StringFromNRXPCType = (void *)createStringFromNRXPCType();
        _NRLogWithArgs();
        int64_t v23 = -2003;
      }

LABEL_156:
      id v118 = objc_getProperty(v13, v22, 24, 1);
      xpc_dictionary_set_int64(v118, nrXPCKeyResult, v23);
      id v120 = objc_getProperty(v13, v119, 24, 1);
      xpc_connection_send_message((xpc_connection_t)v10, v120);
LABEL_157:

      id WeakRetained = v21;
      goto LABEL_158;
    }
    id v126 = sub_10004A608();
    int v127 = _NRLogIsLevelEnabled();

    if (v127)
    {
LABEL_169:
      id WeakRetained = sub_10004A608();
      _NRLogWithArgs();
      goto LABEL_164;
    }
  }
  else
  {
    id v124 = sub_10004A608();
    int v125 = _NRLogIsLevelEnabled();

    if (v125) {
      goto LABEL_169;
    }
  }
LABEL_165:
}

void sub_10004E0CC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (a2)
  {
    id v8 = sub_10004A7F8([TXSHandler alloc], a2, v7);
    if (v8)
    {
      id v9 = +[NSNumber numberWithUnsignedLongLong:a3];
      SEL v11 = [objc_getProperty(a1, v10, 32, 1) objectForKeyedSubscript:v9];

      if (v11)
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_47;
        }
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v12 = (id)qword_1001F4918;
        StringFromNRXPCType = (void *)createStringFromNRXPCType();
      }
      else
      {
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        id v14 = v7;
        id v37 = [v14 countByEnumeratingWithState:&v42 objects:v47 count:16];
        if (v37)
        {
          id v35 = v7;
          char v15 = 0;
          uint64_t v16 = *(void *)v43;
          id v36 = v14;
          uint64_t v34 = *(void *)v43;
          do
          {
            for (uint64_t i = 0; i != v37; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v43 != v16) {
                objc_enumerationMutation(v14);
              }
              id v18 = *(void **)(*((void *)&v42 + 1) + 8 * i);
              long long v38 = 0u;
              long long v39 = 0u;
              long long v40 = 0u;
              long long v41 = 0u;
              id v19 = v18;
              id v20 = [v19 countByEnumeratingWithState:&v38 objects:v46 count:16];
              if (v20)
              {
                id v21 = v20;
                uint64_t v22 = *(void *)v39;
                while (2)
                {
                  for (j = 0; j != v21; j = (char *)j + 1)
                  {
                    if (*(void *)v39 != v22) {
                      objc_enumerationMutation(v19);
                    }
                    long long v24 = *(void **)(*((void *)&v38 + 1) + 8 * (void)j);
                    if (([v24 hasPrefix:@"com.apple."] & 1) == 0)
                    {
                      if (qword_1001F4920 != -1) {
                        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
                      }
                      id v7 = v35;
                      if (_NRLogIsLevelEnabled())
                      {
                        if (qword_1001F4920 != -1) {
                          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
                        }
                        id v27 = (id)qword_1001F4918;
                        uint64_t v33 = (void *)createStringFromNRXPCType();
                        _NRLogWithArgs();
                      }
                      goto LABEL_47;
                    }
                    [objc_getProperty(a1, v25, 40, 1) addObject:v24];
                  }
                  id v21 = [v19 countByEnumeratingWithState:&v38 objects:v46 count:16];
                  if (v21) {
                    continue;
                  }
                  break;
                }
                char v15 = 1;
                id v14 = v36;
                uint64_t v16 = v34;
              }
            }
            id v37 = [v14 countByEnumeratingWithState:&v42 objects:v47 count:16];
          }
          while (v37);

          id v7 = v35;
          if (v15)
          {
            [objc_getProperty(a1, v26, 32, 1) setObject:v8 forKeyedSubscript:v9];
            goto LABEL_47;
          }
        }
        else
        {
        }
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_47;
        }
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v12 = (id)qword_1001F4918;
        StringFromNRXPCType = (void *)createStringFromNRXPCType();
      }
      _NRLogWithArgs();
    }
    else
    {
      id v31 = sub_10004A608();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled)
      {
LABEL_48:

        goto LABEL_49;
      }
      id v9 = sub_10004A608();
      _NRLogWithArgs();
    }
LABEL_47:

    goto LABEL_48;
  }
  id v28 = sub_10004A608();
  int v29 = _NRLogIsLevelEnabled();

  if (v29)
  {
    id v30 = sub_10004A608();
    _NRLogWithArgs();
  }
LABEL_49:
}

uint64_t sub_10004E590(void *a1)
{
  id v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      SEL v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        SEL v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v12 = (id)qword_1001F4A18;
  id v13 = v12;
  if (v12) {
    id v14 = (void *)*((void *)v12 + 15);
  }
  else {
    id v14 = 0;
  }
  id v15 = v14;
  [v11 setObject:v15 forKeyedSubscript:@"id-ref"];

  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v16 = (id)qword_1001F4A18;
  id v17 = v16;
  if (v16) {
    id v18 = (void *)*((void *)v16 + 14);
  }
  else {
    id v18 = 0;
  }
  id v19 = v18;
  [v11 setObject:v19 forKeyedSubscript:@"cert-ref"];

  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v20 = (id)qword_1001F4A18;
  id v21 = v20;
  if (v20) {
    uint64_t v22 = (void *)*((void *)v20 + 16);
  }
  else {
    uint64_t v22 = 0;
  }
  id v23 = v22;
  [v11 setObject:v23 forKeyedSubscript:@"key-ref"];

  long long v24 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (v24)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      _NRLogWithArgs();
    }
    if (v1) {
      id v26 = objc_getProperty(v1, v25, 24, 1);
    }
    else {
      id v26 = 0;
    }
    xpc_dictionary_set_value(v26, nrXPCKeyIdentityProxyReferences, v24);
    uint64_t v27 = 0;
  }
  else
  {
    id v29 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v31 = sub_10004A608();
      _NRLogWithArgs();
    }
    uint64_t v27 = -2001;
  }

  return v27;
}

uint64_t sub_10004E9F0(void *a1)
{
  id v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      SEL v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && LOBYTE(buffer[0]))
        {
          id v8 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        SEL v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  self;
  id v11 = (void *)qword_1001F4B20;
  if (!qword_1001F4B20)
  {
    id v12 = objc_alloc_init(NRDevicePairingDirector);
    id v13 = (void *)qword_1001F4B20;
    qword_1001F4B20 = (uint64_t)v12;

    id v11 = (void *)qword_1001F4B20;
  }
  id v15 = v11;
  if (v1)
  {
    id v16 = objc_getProperty(v1, v14, 8, 1);
    if (!v15) {
      goto LABEL_26;
    }
  }
  else
  {
    id v16 = 0;
    if (!v15) {
      goto LABEL_26;
    }
  }
  id v17 = v16;
  id v18 = +[NSUUID UUID];
  id v19 = sub_10010B8C4([NRDevicePairingManagerConnection alloc], v17);
  [v15[2] setObject:v19 forKeyedSubscript:v18];
  buffer[0] = _NSConcreteStackBlock;
  buffer[1] = 3221225472;
  buffer[2] = sub_1001128B0;
  buffer[3] = &unk_1001C7B18;
  buffer[4] = v15;
  id v20 = v18;
  id v23 = v20;
  xpc_connection_set_event_handler((xpc_connection_t)v17, buffer);

  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    _NRLogWithArgs();
  }

LABEL_26:
  return 0;
}

uint64_t sub_10004ED7C(void *a1)
{
  id v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      SEL v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        SEL v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  return 0;
}

uint64_t sub_10004EF50(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  BOOL v4 = xpc_dictionary_get_BOOL(Property, nrXPCKeyEnableBluetoothPacketParser);
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v6 = (id)qword_1001F4918;
    if (v3)
    {
      id v7 = (void *)v3[4];
      if (!v7)
      {
        id v8 = (_xpc_connection_s *)objc_getProperty(v3, v5, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v8);
        id v10 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v11 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v10 = v11;
        }
        id v12 = (void *)v3[4];
        void v3[4] = v10;

        id v7 = (void *)v3[4];
      }
      id v13 = v7;
    }
    else
    {
      id v13 = 0;
    }
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v14 = (id)qword_1001F4A18;
  if (v14)
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
    if (v4)
    {
      id v15 = +[NSNumber numberWithBool:1];
      sub_1000A8214(0, @"EnableBluetoothPacketParser", v15);

      id v21 = "YES";
    }
    else
    {
      sub_1000A8484(0, @"EnableBluetoothPacketParser");
      id v21 = "NO";
    }
    sub_1000A9E64((uint64_t)v14, 1039, @"%s", v16, v17, v18, v19, v20, (uint64_t)v21);
  }

  return 0;
}

uint64_t sub_10004F2AC(void *a1)
{
  id Property = a1;
  BOOL v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyDeviceIdentifier);
  if (uuid)
  {
    id v6 = uuid;
    if (uuid_is_null(uuid))
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v8 = (id)qword_1001F4918;
        if (v4)
        {
          id v9 = (void *)v4[4];
          if (!v9)
          {
            id v10 = (_xpc_connection_s *)objc_getProperty(v4, v7, 8, 1);
            uint64_t pid = xpc_connection_get_pid(v10);
            id v12 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
            bzero(v109, 0x400uLL);
            if ((int)pid >= 1 && proc_pidpath(pid, v109, 0x400u) >= 1 && v109[0])
            {
              id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v109, pid];

              id v12 = v13;
            }
            id v14 = (void *)v4[4];
            v4[4] = v12;

            id v9 = (void *)v4[4];
          }
          id v15 = v9;
        }
        else
        {
          id v15 = 0;
        }
        goto LABEL_18;
      }
LABEL_115:
      uint64_t v16 = -2005;
      goto LABEL_116;
    }
    id v17 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v6];
    if (v17)
    {
      id v1 = v17;
      uint64_t v18 = (char *)&unk_1001F4000;
      if (qword_1001F4920 == -1) {
        goto LABEL_21;
      }
    }
    else
    {
      id v81 = sub_10004A608();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v83 = sub_10004A608();
        _NRLogWithArgs();
      }
      BOOL v4 = (void *)_os_log_pack_size();
      uint64_t v18 = (char *)&v85 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v84 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v84 = 136446210;
      *(void *)(v84 + 4) = "handleXPCComm";
      sub_10004A608();
      _NRLogAbortWithPack();
      __break(1u);
    }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
LABEL_21:
    int v19 = _NRLogIsLevelEnabled();
    id v94 = v1;
    if (v19)
    {
      if (*((void *)v18 + 292) != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v22 = (id)qword_1001F4918;
      if (v4)
      {
        id v23 = (void *)v4[4];
        if (!v23)
        {
          long long v24 = (_xpc_connection_s *)objc_getProperty(v4, v21, 8, 1);
          uint64_t v25 = xpc_connection_get_pid(v24);
          id v26 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v25];
          bzero(v109, 0x400uLL);
          if ((int)v25 >= 1 && proc_pidpath(v25, v109, 0x400u) >= 1 && v109[0])
          {
            id v27 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v109, v25];

            id v26 = v27;
          }
          id v28 = (void *)v4[4];
          v4[4] = v26;

          id v23 = (void *)v4[4];
        }
        id v29 = v23;
      }
      else
      {
        id v29 = 0;
      }
      _NRLogWithArgs();
    }
    if (v4) {
      id v30 = objc_getProperty(v4, v20, 16, 1);
    }
    else {
      id v30 = 0;
    }
    xpc_dictionary_get_dictionary(v30, nrXPCKeyXPCCommNotification);
    id v31 = (id)objc_claimAutoreleasedReturnValue();
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v32 = (id)qword_1001F4A18;
    uint64_t v34 = v32;
    if (v4)
    {
      id v35 = objc_getProperty(v4, v33, 8, 1);
      if (v34)
      {
LABEL_39:
        id v93 = v34;
        id v36 = (void *)v34[27];
        id v37 = v31;
        id v38 = v35;
        uint64_t v39 = [v36 objectForKeyedSubscript:v94];
        id v40 = v38;
        id v41 = v37;
        if (!v39 || !*(unsigned char *)(v39 + 14))
        {
LABEL_102:

          pid_t v74 = xpc_connection_get_pid((xpc_connection_t)v40);
          uint64_t v110 = 0;
          memset(v109, 0, sizeof(v109));
          if (proc_pidinfo(v74, 17, 1uLL, v109, 56) == 56)
          {
            id v75 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v109];
            id v76 = (void *)v93[32];
            v93[32] = v75;
          }
          else
          {
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4A48 != -1) {
                dispatch_once(&qword_1001F4A48, &stru_1001C7178);
              }
              _NRLogWithArgs();
            }
          }
          uint64_t v34 = v93;
          goto LABEL_111;
        }
        [*(id *)(v39 + 152) addObject:v40];
        long long v42 = (void *)_NRCopyLogObjectForNRUUID();
        int v43 = _NRLogIsLevelEnabled();

        if (v43)
        {
          long long v44 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v39 + 104));
        long long v45 = sub_1000DC5BC(v39, 1, 0);
        if (!v45
          || (objc_opt_class(), char isKindOfClass = objc_opt_isKindOfClass(), !v41)
          || (isKindOfClass & 1) == 0
          || [v45 state] == 255)
        {
LABEL_99:
          if ([*(id *)(v39 + 160) count]) {
            sub_1000FACEC(v39, 0);
          }

          goto LABEL_102;
        }
        uint64_t v96 = 0;
        uint64_t v97 = &v96;
        uint64_t v98 = 0x3032000000;
        id v99 = sub_1000E7A80;
        id v100 = sub_1000E7A90;
        id v101 = 0;
        v95[0] = _NSConcreteStackBlock;
        v95[1] = 3221225472;
        v95[2] = sub_1000FAAE8;
        v95[3] = &unk_1001C75A8;
        v95[4] = v39;
        v95[5] = &v96;
        xpc_dictionary_apply(v41, v95);
        id v92 = (id)v97[5];
        unsigned int v47 = [v45 state];
        if (!v92 || v47 == 255)
        {
LABEL_98:

          _Block_object_dispose(&v96, 8);
          goto LABEL_99;
        }
        id v88 = [v92 objectForKeyedSubscript:@"checkin"];
        if ([v88 BOOLValue] && objc_msgSend(v45, "state") == 8)
        {
          sub_100093650(v45, 0, &off_1001D4948);
          if (*(void *)((char *)v45 + 1111) && *((unsigned char *)v45 + 229)) {
            sub_100093650(v45, 0, &off_1001D4960);
          }
          if (*(void *)((char *)v45 + 1031)) {
            sub_100093650(v45, 0, &off_1001D4978);
          }
          uint64_t v48 = [*(id *)((char *)v45 + 1335) nexusInstances];
          sub_100099D00((uint64_t)v45, v48);
        }
        id v90 = [v92 objectForKeyedSubscript:@"message"];
        if (!v90)
        {
LABEL_74:
          id v91 = [v92 objectForKeyedSubscript:@"datapath-report"];
          if (v91)
          {
            id v60 = [v91 objectForKeyedSubscript:@"datapath-report-stall"];
            if ([v60 BOOLValue])
            {
              id v61 = [v91 objectForKeyedSubscript:@"channel-id-list"];
              long long v104 = 0u;
              long long v105 = 0u;
              long long v102 = 0u;
              long long v103 = 0u;
              id v62 = [v61 countByEnumeratingWithState:&v102 objects:v109 count:16];
              id v86 = v60;
              id v87 = v41;
              id v89 = v31;
              if (v62)
              {
                uint64_t v63 = *(void *)v103;
                do
                {
                  for (uint64_t i = 0; i != v62; uint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v103 != v63) {
                      objc_enumerationMutation(v61);
                    }
                    unint64_t v65 = (unint64_t)[*(id *)(*((void *)&v102 + 1) + 8 * i) integerValue]- 1;
                    if (v65 <= 2) {
                      sub_10009B408(v45, (&off_1001C6E38)[v65]);
                    }
                  }
                  id v62 = [v61 countByEnumeratingWithState:&v102 objects:v109 count:16];
                }
                while (v62);
              }

              id v31 = v89;
              id v60 = v86;
              id v41 = v87;
            }
            id v66 = [v91 objectForKeyedSubscript:@"datapath-report-remediate"];
            if ([v66 BOOLValue]) {
              sub_10009BB10((uint64_t)v45);
            }
          }
          uint64_t v67 = [v92 objectForKeyedSubscript:@"error"];
          unint64_t v68 = (void *)v67;
          if (v67) {
            [v45 cancelWithReason:@"parser internal error: %@", v67];
          }
          id v69 = [v92 objectForKeyedSubscript:@"wake-pkt-sn"];
          id v89 = [v92 objectForKeyedSubscript:@"wake-pkt-spi"];
          if (v69)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & (v89 != 0)) == 1)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                unsigned int v70 = [v69 unsignedIntValue];
                unsigned int v71 = [v89 unsignedIntValue];
                LODWORD(v86) = v70;
                id v87 = v68;
                unsigned int v72 = v71;
                if (qword_1001F4BB0 != -1) {
                  dispatch_once(&qword_1001F4BB0, &stru_1001C7C98);
                }
                id v73 = (id)qword_1001F4BA8;
                v106[0] = _NSConcreteStackBlock;
                v106[1] = 3221225472;
                void v106[2] = sub_10008FDC0;
                v106[3] = &unk_1001C8698;
                unsigned int v107 = v72;
                int v108 = (int)v86;
                dispatch_async(v73, v106);

                unint64_t v68 = v87;
              }
            }
          }

          goto LABEL_98;
        }
        id v49 = [v90 objectForKeyedSubscript:@"message-data"];
        if (!v49)
        {
LABEL_73:

          goto LABEL_74;
        }
        id v91 = [v90 objectForKeyedSubscript:@"channel-id"];
        id v89 = [v90 objectForKeyedSubscript:@"message-pre-act"];
        unsigned int v50 = [v89 BOOLValue];
        id v51 = [v91 integerValue];
        if (v51 == (id)1)
        {
          if (v50 && *((unsigned char *)v45 + 247))
          {
            id v54 = (void *)_NRCopyLogObjectForNRUUID();
            int v55 = _NRLogIsLevelEnabled();

            if (v55) {
              goto LABEL_71;
            }
            goto LABEL_72;
          }
        }
        else
        {
          if ([v91 integerValue] != (id)2)
          {
            long long v56 = (void *)_NRCopyLogObjectForNRUUID();
            int v57 = _NRLogIsLevelEnabled();

            if (v57)
            {
LABEL_71:
              id v58 = (void *)_NRCopyLogObjectForNRUUID();
              id v59 = [v45 copyDescription];
              _NRLogWithArgs();
            }
LABEL_72:

            goto LABEL_73;
          }
          if (v50 && *((unsigned char *)v45 + 248))
          {
            id v52 = (void *)_NRCopyLogObjectForNRUUID();
            int v53 = _NRLogIsLevelEnabled();

            if (v53) {
              goto LABEL_71;
            }
            goto LABEL_72;
          }
        }
        sub_1000A74B0((uint64_t)v45, v49, v51 != (id)1);
        goto LABEL_72;
      }
    }
    else
    {
      id v35 = 0;
      if (v32) {
        goto LABEL_39;
      }
    }
LABEL_111:

    id v15 = v31;
    uint64_t v16 = 0;
    id v8 = v94;
    goto LABEL_112;
  }
  id v77 = sub_10004A608();
  int v78 = _NRLogIsLevelEnabled();

  if (!v78) {
    goto LABEL_115;
  }
  id v8 = sub_10004A608();
  id v15 = sub_10004A6A0(v4, v79);
LABEL_18:
  _NRLogWithArgs();
  uint64_t v16 = -2005;
LABEL_112:

LABEL_116:
  return v16;
}

void sub_1000500EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 + 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100050110(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      BOOL v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        BOOL v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    uint64_t v28 = 1339;
    id v29 = v10;
    id v26 = "";
    id v27 = "handleRefreshCompanionProxyAgent";
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v11 = (id *)(id)qword_1001F4A18;
  if (v11)
  {
    id v30 = v11;
    [v11[27] allValues];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    id v13 = [v12 countByEnumeratingWithState:&v31 objects:v40 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v32;
      do
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v32 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void *)(*((void *)&v31 + 1) + 8 * i);
          if (v17)
          {
            if (*(unsigned char *)(v17 + 14))
            {
              long long v37 = 0u;
              long long v38 = 0u;
              long long v35 = 0u;
              long long v36 = 0u;
              id v18 = *(id *)(v17 + 112);
              id v19 = [v18 countByEnumeratingWithState:&v35 objects:buffer count:16];
              if (v19)
              {
                id v20 = v19;
                uint64_t v21 = *(void *)v36;
                do
                {
                  for (j = 0; j != v20; j = (char *)j + 1)
                  {
                    if (*(void *)v36 != v21) {
                      objc_enumerationMutation(v18);
                    }
                    [*(id *)(*((void *)&v35 + 1) + 8 * (void)j) refreshCompanionProxyAgent:v26, v27, v28, v29];
                  }
                  id v20 = [v18 countByEnumeratingWithState:&v35 objects:buffer count:16];
                }
                while (v20);
              }
              goto LABEL_22;
            }
            id v23 = (void *)_NRCopyLogObjectForNRUUID();
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              id v18 = (id)_NRCopyLogObjectForNRUUID();
              id v27 = "-[NRDDeviceConductor refreshCompanionProxyAgent]";
              uint64_t v28 = 2612;
              id v26 = "";
              _NRLogWithArgs();
LABEL_22:

              continue;
            }
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v31 objects:v40 count:16];
      }
      while (v14);
    }

    id v11 = v30;
  }

  return 0;
}

uint64_t sub_1000504EC(void *a1)
{
  id Property = a1;
  BOOL v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyDeviceIdentifier);
  if (uuid)
  {
    id v6 = uuid;
    if (uuid_is_null(uuid))
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v8 = (id)qword_1001F4918;
        if (v4)
        {
          id v9 = (void *)v4[4];
          if (!v9)
          {
            id v10 = (_xpc_connection_s *)objc_getProperty(v4, v7, 8, 1);
            uint64_t pid = xpc_connection_get_pid(v10);
            id v12 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
            bzero(v38, 0x400uLL);
            if ((int)pid >= 1 && proc_pidpath(pid, v38, 0x400u) >= 1 && v38[0])
            {
              id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v38, pid];

              id v12 = v13;
            }
            id v14 = (void *)v4[4];
            v4[4] = v12;

            id v9 = (void *)v4[4];
          }
          id v15 = v9;
        }
        else
        {
          id v15 = 0;
        }
        goto LABEL_18;
      }
LABEL_39:
      uint64_t v16 = -2005;
      goto LABEL_40;
    }
    uint64_t v17 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v6];
    if (v17)
    {
      id v8 = v17;
      uint64_t v1 = &unk_1001F4000;
      if (qword_1001F4920 == -1)
      {
LABEL_21:
        if (_NRLogIsLevelEnabled())
        {
          if (v1[292] != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          id v20 = (id)qword_1001F4918;
          if (v4)
          {
            uint64_t v21 = (void *)v4[4];
            if (!v21)
            {
              id v22 = (_xpc_connection_s *)objc_getProperty(v4, v19, 8, 1);
              uint64_t v23 = xpc_connection_get_pid(v22);
              id v24 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v23];
              bzero(v38, 0x400uLL);
              if ((int)v23 >= 1 && proc_pidpath(v23, v38, 0x400u) >= 1 && v38[0])
              {
                id v25 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v38, v23];

                id v24 = v25;
              }
              id v26 = (void *)v4[4];
              v4[4] = v24;

              uint64_t v21 = (void *)v4[4];
            }
            id v27 = v21;
          }
          else
          {
            id v27 = 0;
          }
          _NRLogWithArgs();
        }
        if (v4) {
          id v28 = objc_getProperty(v4, v18, 24, 1);
        }
        else {
          id v28 = 0;
        }
        xpc_dictionary_set_BOOL(v28, nrXPCKeySupportsRestrictedPorts, 1);
        uint64_t v16 = 0;
        goto LABEL_36;
      }
    }
    else
    {
      id v33 = sub_10004A608();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v35 = sub_10004A608();
        _NRLogWithArgs();
      }
      BOOL v4 = (void *)_os_log_pack_size();
      id v8 = &v38[-((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      __error();
      uint64_t v36 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v36 = 136446210;
      *(void *)(v36 + 4) = "handleSupportsRestrictedPorts";
      sub_10004A608();
      _NRLogAbortWithPack();
    }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    goto LABEL_21;
  }
  id v29 = sub_10004A608();
  int v30 = _NRLogIsLevelEnabled();

  if (!v30) {
    goto LABEL_39;
  }
  id v8 = sub_10004A608();
  id v15 = sub_10004A6A0(v4, v31);
LABEL_18:
  _NRLogWithArgs();

  uint64_t v16 = -2005;
LABEL_36:

LABEL_40:
  return v16;
}

uint64_t sub_1000509E4(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  BOOL v5 = xpc_dictionary_get_BOOL(Property, nrXPCKeyFixedInterfaceModeSetEnabled);
  if (v3) {
    id v6 = objc_getProperty(v3, v4, 16, 1);
  }
  else {
    id v6 = 0;
  }
  string = xpc_dictionary_get_string(v6, nrXPCKeyFixedInterfaceModeInterfaceName);
  if (v3) {
    id v9 = objc_getProperty(v3, v7, 16, 1);
  }
  else {
    id v9 = 0;
  }
  id v11 = xpc_dictionary_get_string(v9, nrXPCKeyFixedInterfaceModePeerAddress);
  if (v3) {
    id v12 = objc_getProperty(v3, v10, 16, 1);
  }
  else {
    id v12 = 0;
  }
  id v13 = xpc_dictionary_get_string(v12, nrXPCKeyIDSDeviceID);
  id v14 = v13;
  if (!v5)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v18 = (id)qword_1001F4918;
      if (v3)
      {
        id v27 = (void *)v3[4];
        if (!v27)
        {
          id v28 = (_xpc_connection_s *)objc_getProperty(v3, v26, 8, 1);
          uint64_t pid = xpc_connection_get_pid(v28);
          id v30 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
          bzero(buffer, 0x400uLL);
          if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
          {
            id v31 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

            id v30 = v31;
          }
          long long v32 = (void *)v3[4];
          void v3[4] = v30;

          id v27 = (void *)v3[4];
        }
        id v25 = v27;
      }
      else
      {
        id v25 = 0;
      }
      uint64_t v41 = 1006;
      id v42 = v25;
      uint64_t v39 = "";
      id v40 = "handleSetFixedInterfaceMode";
      goto LABEL_45;
    }
LABEL_46:
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v33 = (id)qword_1001F4A18;
    if (string)
    {
      long long v34 = +[NSString stringWithUTF8String:string];
      if (v11) {
        goto LABEL_50;
      }
    }
    else
    {
      long long v34 = 0;
      if (v11)
      {
LABEL_50:
        id v35 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11, v39, v40, v41, v42, v43, v44, v45);
        if (v14) {
          goto LABEL_51;
        }
        goto LABEL_58;
      }
    }
    id v35 = 0;
    if (v14)
    {
LABEL_51:
      uint64_t v36 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14, v39);
      sub_1000B8584((uint64_t)v33, v5, v34, v35, v36);

      if (!v11)
      {
LABEL_53:
        if (string) {

        }
        uint64_t v37 = 0;
        goto LABEL_67;
      }
LABEL_52:

      goto LABEL_53;
    }
LABEL_58:
    sub_1000B8584((uint64_t)v33, v5, v34, v35, 0);
    if (!v11) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (string) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = v11 == 0;
  }
  if (!v15 || v13 != 0)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v18 = (id)qword_1001F4918;
      if (v3)
      {
        id v19 = (void *)v3[4];
        if (!v19)
        {
          id v20 = (_xpc_connection_s *)objc_getProperty(v3, v17, 8, 1);
          uint64_t v21 = xpc_connection_get_pid(v20);
          id v22 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v21];
          bzero(buffer, 0x400uLL);
          if ((int)v21 >= 1 && proc_pidpath(v21, buffer, 0x400u) >= 1 && buffer[0])
          {
            id v23 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v21];

            id v22 = v23;
          }
          id v24 = (void *)v3[4];
          void v3[4] = v22;

          id v19 = (void *)v3[4];
        }
        id v25 = v19;
      }
      else
      {
        id v25 = 0;
      }
      uint64_t v43 = 1;
      long long v44 = string;
      uint64_t v41 = 1004;
      id v42 = v25;
      long long v45 = v11;
      uint64_t v39 = "";
      id v40 = "handleSetFixedInterfaceMode";
LABEL_45:
      _NRLogWithArgs();

      goto LABEL_46;
    }
    goto LABEL_46;
  }
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    _NRLogWithArgs();
  }
  uint64_t v37 = -2005;
LABEL_67:

  return v37;
}

uint64_t sub_100050F74(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      BOOL v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        BOOL v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  id v11 = sub_10014628C();
  id v12 = v11;
  if (v11)
  {
    id v13 = v11;
    self;
    if (qword_1001F48C0 != -1) {
      dispatch_once(&qword_1001F48C0, &stru_1001C6500);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F48C0 != -1) {
        dispatch_once(&qword_1001F48C0, &stru_1001C6500);
      }
      _NRLogWithArgs();
    }
    sub_100028370((uint64_t)NRLinkDirectorMessage, v13);
    id v14 = sub_100025474([NRLinkDirectorMessage alloc], v13);
    char v15 = sub_100027840((uint64_t)NRLinkDirectorMessage, v14);
    sub_100028370((uint64_t)NRLinkDirectorMessage, v13);
    uint64_t v16 = sub_100025314([NRLinkDirectorMessage alloc], v13, 1);

    char v17 = sub_100027840((uint64_t)NRLinkDirectorMessage, v16);
    sub_100028370((uint64_t)NRLinkDirectorMessage, v13);
    id v18 = sub_100025314([NRLinkDirectorMessage alloc], v13, 2);

    char v19 = sub_100027840((uint64_t)NRLinkDirectorMessage, v18);
    sub_100028370((uint64_t)NRLinkDirectorMessage, v13);

    if (v1) {
      id v21 = objc_getProperty(v1, v20, 24, 1);
    }
    else {
      id v21 = 0;
    }
    xpc_dictionary_set_BOOL(v21, nrXPCKeyTestNRLinkDirectorMessage, v15 & v17 & v19);
    uint64_t v22 = 0;
  }
  else
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v24 = (id)qword_1001F4918;
      if (v1)
      {
        id v26 = objc_getProperty(v1, v23, 16, 1);
        id v27 = (void *)v1[4];
        if (!v27)
        {
          id v28 = (_xpc_connection_s *)objc_getProperty(v1, v25, 8, 1);
          uint64_t v29 = xpc_connection_get_pid(v28);
          id v30 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v29];
          bzero(buffer, 0x400uLL);
          if ((int)v29 >= 1 && proc_pidpath(v29, buffer, 0x400u) >= 1 && buffer[0])
          {
            id v31 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v29];

            id v30 = v31;
          }
          long long v32 = (void *)v1[4];
          v1[4] = v30;

          id v27 = (void *)v1[4];
        }
        id v33 = v27;
      }
      else
      {
        id v26 = 0;
        id v33 = 0;
      }
      _NRLogWithArgs();
    }
    uint64_t v22 = -2011;
  }

  return v22;
}

uint64_t sub_100051498(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  BOOL v36 = xpc_dictionary_get_BOOL(Property, nrXPCKeySimulateWakePacket);
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v5 = (id)qword_1001F4918;
    if (v3)
    {
      id v6 = (void *)v3[4];
      if (!v6)
      {
        id v7 = (_xpc_connection_s *)objc_getProperty(v3, v4, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v7);
        id v9 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v10 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v9 = v10;
        }
        id v11 = (void *)v3[4];
        void v3[4] = v9;

        id v6 = (void *)v3[4];
      }
      id v12 = v6;
    }
    else
    {
      id v12 = 0;
    }
    id v13 = "stop";
    if (v36) {
      id v13 = "start";
    }
    uint64_t v30 = 965;
    id v31 = v12;
    id v28 = "";
    uint64_t v29 = "handleSimulateWakePacket";
    long long v32 = v13;
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v14 = (id)qword_1001F4A18;
  if (v14 && _NRIsAppleInternal())
  {
    uint64_t v15 = 0;
    v14[9] = v36;
  }
  else
  {
    uint64_t v15 = -2001;
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  uint64_t v16 = (unsigned __int8 *)(id)qword_1001F4A18;
  if (!v16)
  {
    char v19 = 0;
LABEL_43:

    goto LABEL_44;
  }
  int v17 = v16[10];

  if (v17)
  {
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v33 = v14;
    long long v34 = v3;
    id v18 = (id *)(id)qword_1001F4A18;
    char v19 = v18;
    if (v18)
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id obj = v18[27];
      id v20 = [obj countByEnumeratingWithState:&v37 objects:buffer count:16];
      if (v20)
      {
        id v21 = v20;
        uint64_t v22 = *(void *)v38;
        do
        {
          for (uint64_t i = 0; i != v21; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v38 != v22) {
              objc_enumerationMutation(obj);
            }
            id v24 = [v19[27] objectForKeyedSubscript:*(void *)(*((void *)&v37 + 1) + 8 * i), v28, v29, v30, v31, v32];
            if (v24)
            {
              id v25 = objc_alloc_init((Class)NSMutableDictionary);
              id v26 = +[NSNumber numberWithBool:v36];
              [v25 setObject:v26 forKeyedSubscript:@"test-wake-pkt"];

              sub_1000FACEC((uint64_t)v24, v25);
            }
          }
          id v21 = [obj countByEnumeratingWithState:&v37 objects:buffer count:16];
        }
        while (v21);
      }
    }
    id v3 = v34;
    id v14 = v33;
    goto LABEL_43;
  }
LABEL_44:

  return v15;
}

uint64_t sub_1000518C0(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  BOOL v4 = xpc_dictionary_get_BOOL(Property, nrXPCKeyBlockIDSTraffic);
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v6 = (id)qword_1001F4918;
    if (v3)
    {
      id v7 = (void *)v3[4];
      if (!v7)
      {
        id v8 = (_xpc_connection_s *)objc_getProperty(v3, v5, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v8);
        id v10 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && LOBYTE(buffer[0]))
        {
          id v11 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v10 = v11;
        }
        id v12 = (void *)v3[4];
        void v3[4] = v10;

        id v7 = (void *)v3[4];
      }
      id v13 = v7;
    }
    else
    {
      id v13 = 0;
    }
    uint64_t v63 = "";
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v14 = (id)qword_1001F4A18;
  if (v14 && _NRIsAppleInternal())
  {
    if (v4)
    {
      self;
      uint64_t v15 = sub_10015BD9C();
      dispatch_assert_queue_V2(v15);

      buffer[0] = xmmword_10016C8A0;
      id v16 = [objc_alloc((Class)NSData) initWithBytes:buffer length:16];
      int v17 = sub_100141BFC((uint64_t)NRDLocalDevice, v16, @"0");

      uint64_t v67 = v17;
      id v18 = [v17 hostname];
      char v19 = +[NWAddressEndpoint endpointWithHostname:v18 port:@"61314"];

      id v20 = +[NEPolicyCondition localAddress:v19 prefix:64];
      id v21 = +[NEPolicyCondition remoteAddress:v19 prefix:64];
      id v22 = objc_alloc((Class)NEPolicy);
      id v23 = +[NEPolicyResult drop];
      *(void *)&buffer[0] = v21;
      id v24 = +[NEPolicyCondition allInterfaces];
      *((void *)&buffer[0] + 1) = v24;
      id v25 = +[NSArray arrayWithObjects:buffer count:2];
      id v26 = [v22 initWithOrder:10 result:v23 conditions:v25];

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v27 = (id)qword_1001F4D20;
      unint64_t v65 = v26;
      id v28 = sub_100134CFC((uint64_t)v27, @"TESTING-NRDLD-Drop-IDS", v26);

      id v29 = objc_alloc((Class)NEPolicy);
      uint64_t v30 = +[NEPolicyResult drop];
      v71[0] = v20;
      id v31 = +[NEPolicyCondition allInterfaces];
      v71[1] = v31;
      long long v32 = +[NSArray arrayWithObjects:v71 count:2];
      id v33 = [v29 initWithOrder:10 result:v30 conditions:v32];

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v34 = (id)qword_1001F4D20;
      id v66 = v33;
      id v35 = sub_100134CFC((uint64_t)v34, @"TESTING-NRDLD-Drop-IDS", v33);

      BOOL v36 = [v67 hostname];
      long long v37 = +[NWAddressEndpoint endpointWithHostname:v36 port:@"61315"];

      uint64_t v38 = +[NEPolicyCondition localAddress:v37 prefix:64];

      uint64_t v39 = +[NEPolicyCondition remoteAddress:v37 prefix:64];

      id v40 = objc_alloc((Class)NEPolicy);
      uint64_t v41 = +[NEPolicyResult drop];
      id v64 = (void *)v39;
      v70[0] = v39;
      id v42 = +[NEPolicyCondition allInterfaces];
      v70[1] = v42;
      uint64_t v43 = +[NSArray arrayWithObjects:v70 count:2];
      id v44 = [v40 initWithOrder:10 result:v41 conditions:v43];

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v45 = (id)qword_1001F4D20;
      id v46 = sub_100134CFC((uint64_t)v45, @"TESTING-NRDLD-Drop-IDS", v44);

      id v47 = objc_alloc((Class)NEPolicy);
      uint64_t v48 = +[NEPolicyResult drop];
      id v49 = (void *)v38;
      v69[0] = v38;
      unsigned int v50 = +[NEPolicyCondition allInterfaces];
      v69[1] = v50;
      id v51 = +[NSArray arrayWithObjects:v69 count:2];
      id v52 = [v47 initWithOrder:10 result:v48 conditions:v51];

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v53 = (id)qword_1001F4D20;
      id v54 = sub_100134CFC((uint64_t)v53, @"TESTING-NRDLD-Drop-IDS", v52);
    }
    else
    {
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v56 = (id)qword_1001F4D20;
      sub_10013502C((uint64_t)v56, @"TESTING-NRDLD-Drop-IDS");
    }
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v57 = (id)qword_1001F4D20;
    id v58 = (id *)v57;
    if (v57)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v57 + 1));
      if (([v58[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v59, v60, v61, (uint64_t)v63);
      }
    }

    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v55 = -2001;
  }

  return v55;
}

uint64_t sub_100052108(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  BOOL v4 = xpc_dictionary_get_BOOL(Property, nrXPCKeyBlockSHOESTraffic);
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v6 = (id)qword_1001F4918;
    if (v3)
    {
      id v7 = (void *)v3[4];
      if (!v7)
      {
        id v8 = (_xpc_connection_s *)objc_getProperty(v3, v5, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v8);
        id v10 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && LOBYTE(buffer[0]))
        {
          id v11 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v10 = v11;
        }
        id v12 = (void *)v3[4];
        void v3[4] = v10;

        id v7 = (void *)v3[4];
      }
      id v13 = v7;
    }
    else
    {
      id v13 = 0;
    }
    BOOL v36 = "";
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v14 = (id)qword_1001F4A18;
  if (v14 && _NRIsAppleInternal())
  {
    if (v4)
    {
      self;
      uint64_t v15 = sub_10015BD9C();
      dispatch_assert_queue_V2(v15);

      buffer[0] = xmmword_10016C8A0;
      id v16 = [objc_alloc((Class)NSData) initWithBytes:buffer length:16];
      int v17 = sub_100141BFC((uint64_t)NRDLocalDevice, v16, @"0");

      id v18 = [v17 hostname];
      char v19 = +[NWAddressEndpoint endpointWithHostname:v18 port:@"62742"];

      id v20 = +[NEPolicyCondition remoteAddress:v19 prefix:64];
      id v21 = objc_alloc((Class)NEPolicy);
      id v22 = +[NEPolicyResult drop];
      *(void *)&buffer[0] = v20;
      id v23 = +[NEPolicyCondition allInterfaces];
      *((void *)&buffer[0] + 1) = v23;
      id v24 = +[NSArray arrayWithObjects:buffer count:2];
      id v25 = [v21 initWithOrder:10 result:v22 conditions:v24];

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v26 = (id)qword_1001F4D20;
      id v27 = sub_100134CFC((uint64_t)v26, @"TESTING-NRDLD-Drop-SHOES", v25);
    }
    else
    {
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v29 = (id)qword_1001F4D20;
      sub_10013502C((uint64_t)v29, @"TESTING-NRDLD-Drop-SHOES");
    }
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v30 = (id)qword_1001F4D20;
    id v31 = (id *)v30;
    if (v30)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v30 + 1));
      if (([v31[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v32, v33, v34, (uint64_t)v36);
      }
    }

    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = -2001;
  }

  return v28;
}

uint64_t sub_100052600(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  string = xpc_dictionary_get_string(Property, nrXPCKeyTetheringBundleIDs);
  if (string)
  {
    id v5 = +[NSString stringWithUTF8String:string];
    id v6 = [v5 componentsSeparatedByString:@","];
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_33;
    }
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v8 = (id)qword_1001F4918;
    if (v3)
    {
      id v9 = (void *)v3[4];
      if (!v9)
      {
        id v10 = (_xpc_connection_s *)objc_getProperty(v3, v7, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v10);
        id v12 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v12 = v13;
        }
        id v14 = (void *)v3[4];
        void v3[4] = v12;

        id v9 = (void *)v3[4];
      }
      id v15 = v9;
    }
    else
    {
      id v15 = 0;
    }
    _NRLogWithArgs();

LABEL_32:
LABEL_33:

    goto LABEL_34;
  }
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v5 = (id)qword_1001F4918;
    if (v3)
    {
      int v17 = (void *)v3[4];
      if (!v17)
      {
        id v18 = (_xpc_connection_s *)objc_getProperty(v3, v16, 8, 1);
        uint64_t v19 = xpc_connection_get_pid(v18);
        id v20 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v19];
        bzero(buffer, 0x400uLL);
        if ((int)v19 >= 1 && proc_pidpath(v19, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v21 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v19];

          id v20 = v21;
        }
        id v22 = (void *)v3[4];
        void v3[4] = v20;

        int v17 = (void *)v3[4];
      }
      id v8 = v17;
    }
    else
    {
      id v8 = 0;
    }
    _NRLogWithArgs();
    id v6 = 0;
    goto LABEL_32;
  }
  id v6 = 0;
LABEL_34:
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v23 = (id)qword_1001F4A18;
  id v24 = v6;
  if (v23)
  {
    if (v24) {
      sub_1000A8214(0, @"TetheringBundleIDs", v24);
    }
    else {
      sub_1000A8484(0, @"TetheringBundleIDs");
    }
  }

  return 0;
}

uint64_t sub_100052A20(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  BOOL v39 = xpc_dictionary_get_BOOL(Property, nrXPCKeyPreferWiFiAllowed);
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v5 = (id)qword_1001F4918;
    if (v3)
    {
      id v6 = (void *)v3[4];
      if (!v6)
      {
        id v7 = (_xpc_connection_s *)objc_getProperty(v3, v4, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v7);
        id v9 = [[objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v10 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v9 = v10;
        }
        id v11 = (void *)v3[4];
        void v3[4] = v9;

        id v6 = (void *)v3[4];
      }
      id v12 = v6;
    }
    else
    {
      id v12 = 0;
    }
    uint64_t v35 = 936;
    id v36 = v12;
    uint64_t v33 = "";
    uint64_t v34 = "handleSetPreferWiFiAllowed";
    BOOL v37 = v39;
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  uint64_t v38 = v3;
  id v13 = (id *)(id)qword_1001F4A18;
  id v14 = v13;
  if (v13)
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v15 = v13[27];
    id v16 = [v15 countByEnumeratingWithState:&v40 objects:buffer count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v41;
      if (v39) {
        uint64_t v19 = "NO";
      }
      else {
        uint64_t v19 = "YES";
      }
      do
      {
        for (uint64_t i = 0; i != v17; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v41 != v18) {
            objc_enumerationMutation(v15);
          }
          uint64_t v27 = [v14[27] objectForKeyedSubscript:*(void *)(*((void *)&v40 + 1) + 8 * i), v33, v34, v35, v36, v37];
          uint64_t v28 = (void **)v27;
          if (v27)
          {
            dispatch_assert_queue_V2(*(dispatch_queue_t *)(v27 + 104));
            if (_NRIsAppleInternal())
            {
              id v29 = (void *)_NRCopyLogObjectForNRUUID();
              int IsLevelEnabled = _NRLogIsLevelEnabled();

              if (IsLevelEnabled)
              {
                id v31 = (void *)_NRCopyLogObjectForNRUUID();
                uint64_t v35 = 2118;
                id v36 = (id)v39;
                uint64_t v33 = "";
                uint64_t v34 = "-[NRDDeviceConductor setPreferWiFiAllowedForTesting:]";
                _NRLogWithArgs();
              }
              id v21 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v39 ^ 1, v33);
              sub_1000A8214(v28[12], @"DisablePreferWiFi", v21);
              sub_1000D85E8((uint64_t)v28, 1026, @"%s", v22, v23, v24, v25, v26, (uint64_t)v19);
            }
          }
        }
        id v17 = [v15 countByEnumeratingWithState:&v40 objects:buffer count:16];
      }
      while (v17);
    }
  }
  return 0;
}

uint64_t sub_100052E10(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  BOOL v4 = xpc_dictionary_get_BOOL(Property, nrXPCKeySimulateAltAccount);
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v6 = (id)qword_1001F4918;
    if (v3)
    {
      id v7 = (void *)v3[4];
      if (!v7)
      {
        id v8 = (_xpc_connection_s *)objc_getProperty(v3, v5, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v8);
        id v10 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v11 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v10 = v11;
        }
        id v12 = (void *)v3[4];
        void v3[4] = v10;

        id v7 = (void *)v3[4];
      }
      id v13 = v7;
    }
    else
    {
      id v13 = 0;
    }
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v14 = (id)qword_1001F4A18;
  if (v14)
  {
    id v15 = +[NSNumber numberWithBool:v4];
    sub_1000A8214(0, @"SimulateAltAccount", v15);
  }
  return 0;
}

uint64_t sub_100053098(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  BOOL v39 = xpc_dictionary_get_BOOL(Property, nrXPCKeyWiFiRangeExtensionAllowed);
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v5 = (id)qword_1001F4918;
    if (v3)
    {
      id v6 = (void *)v3[4];
      if (!v6)
      {
        id v7 = (_xpc_connection_s *)objc_getProperty(v3, v4, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v7);
        id v9 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v10 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v9 = v10;
        }
        id v11 = (void *)v3[4];
        void v3[4] = v9;

        id v6 = (void *)v3[4];
      }
      id v12 = v6;
    }
    else
    {
      id v12 = 0;
    }
    uint64_t v35 = 901;
    id v36 = v12;
    uint64_t v33 = "";
    uint64_t v34 = "handleSetWiFiRangeExtensionAllowed";
    BOOL v37 = v39;
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  uint64_t v38 = v3;
  id v13 = (id *)(id)qword_1001F4A18;
  id v14 = v13;
  if (v13)
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v15 = v13[27];
    id v16 = [v15 countByEnumeratingWithState:&v40 objects:buffer count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v41;
      if (v39) {
        uint64_t v19 = "NO";
      }
      else {
        uint64_t v19 = "YES";
      }
      do
      {
        for (uint64_t i = 0; i != v17; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v41 != v18) {
            objc_enumerationMutation(v15);
          }
          uint64_t v27 = [v14[27] objectForKeyedSubscript:*(void *)(*((void *)&v40 + 1) + 8 * i), v33, v34, v35, v36, v37];
          uint64_t v28 = (void **)v27;
          if (v27)
          {
            dispatch_assert_queue_V2(*(dispatch_queue_t *)(v27 + 104));
            if (_NRIsAppleInternal())
            {
              id v29 = (void *)_NRCopyLogObjectForNRUUID();
              int IsLevelEnabled = _NRLogIsLevelEnabled();

              if (IsLevelEnabled)
              {
                id v31 = (void *)_NRCopyLogObjectForNRUUID();
                uint64_t v35 = 2107;
                id v36 = (id)v39;
                uint64_t v33 = "";
                uint64_t v34 = "-[NRDDeviceConductor setWiFiRangeExtensionAllowedForTesting:]";
                _NRLogWithArgs();
              }
              id v21 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v39 ^ 1, v33);
              sub_1000A8214(v28[12], @"DisableRangeExtension", v21);
              sub_1000D85E8((uint64_t)v28, 1025, @"%s", v22, v23, v24, v25, v26, (uint64_t)v19);
            }
          }
        }
        id v17 = [v15 countByEnumeratingWithState:&v40 objects:buffer count:16];
      }
      while (v17);
    }
  }
  return 0;
}

uint64_t sub_100053488(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  BOOL v4 = xpc_dictionary_get_BOOL(Property, nrXPCKeyWatchRoleSwitchAllowed);
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v6 = (id)qword_1001F4918;
    if (v3)
    {
      id v7 = (void *)v3[4];
      if (!v7)
      {
        id v8 = (_xpc_connection_s *)objc_getProperty(v3, v5, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v8);
        id v10 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v11 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v10 = v11;
        }
        id v12 = (void *)v3[4];
        void v3[4] = v10;

        id v7 = (void *)v3[4];
      }
      id v13 = v7;
    }
    else
    {
      id v13 = 0;
    }
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v14 = (id)qword_1001F4A18;
  if (v14)
  {
    if (v4) {
      sub_1000A8214(0, @"EnableWatchRoleSwitch", &__kCFBooleanTrue);
    }
    else {
      sub_1000A8484(0, @"EnableWatchRoleSwitch");
    }
  }

  return 0;
}

uint64_t sub_100053708(void *a1)
{
  id Property = a1;
  BOOL v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyNRUUID);
  if (!uuid)
  {
    id v35 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = sub_10004A608();
      id v15 = sub_10004A6A0(v4, v37);
LABEL_18:
      _NRLogWithArgs();

      uint64_t v16 = -2005;
      goto LABEL_48;
    }
LABEL_47:
    uint64_t v16 = -2005;
    goto LABEL_48;
  }
  id v6 = uuid;
  if (uuid_is_null(uuid))
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v8 = (id)qword_1001F4918;
      if (v4)
      {
        id v9 = (void *)v4[4];
        if (!v9)
        {
          id v10 = (_xpc_connection_s *)objc_getProperty(v4, v7, 8, 1);
          uint64_t pid = xpc_connection_get_pid(v10);
          id v12 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
          bzero(v49, 0x400uLL);
          if ((int)pid >= 1 && proc_pidpath(pid, v49, 0x400u) >= 1 && v49[0])
          {
            id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v49, pid];

            id v12 = v13;
          }
          id v14 = (void *)v4[4];
          v4[4] = v12;

          id v9 = (void *)v4[4];
        }
        id v15 = v9;
      }
      else
      {
        id v15 = 0;
      }
      goto LABEL_18;
    }
    goto LABEL_47;
  }
  id v17 = (char *)[objc_alloc((Class)NSUUID) initWithUUIDBytes:v6];
  if (!v17)
  {
    id v39 = sub_10004A608();
    int v40 = _NRLogIsLevelEnabled();

    if (v40)
    {
      id v41 = sub_10004A608();
      _NRLogWithArgs();
    }
    BOOL v4 = (void *)_os_log_pack_size();
    uint64_t v18 = (char *)&v44[-1] - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v42 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v42 = 136446210;
    *(void *)(v42 + 4) = "handleMeasureBTLatency";
    sub_10004A608();
    _NRLogAbortWithPack();
    goto LABEL_52;
  }
  uint64_t v18 = v17;
  uint64_t v1 = &unk_1001F4000;
  if (qword_1001F4920 != -1) {
LABEL_52:
  }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  if (_NRLogIsLevelEnabled())
  {
    if (v1[292] != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v20 = (id)qword_1001F4918;
    if (v4)
    {
      id v21 = (void *)v4[4];
      if (!v21)
      {
        uint64_t v22 = (_xpc_connection_s *)objc_getProperty(v4, v19, 8, 1);
        uint64_t v23 = xpc_connection_get_pid(v22);
        id v24 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v23];
        bzero(v49, 0x400uLL);
        if ((int)v23 >= 1 && proc_pidpath(v23, v49, 0x400u) >= 1 && v49[0])
        {
          id v25 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v49, v23];

          id v24 = v25;
        }
        uint64_t v26 = (void *)v4[4];
        v4[4] = v24;

        id v21 = (void *)v4[4];
      }
      id v27 = v21;
    }
    else
    {
      id v27 = 0;
    }
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  uint64_t v28 = (id *)(id)qword_1001F4A18;
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  id v45 = sub_100053D90;
  id v46 = &unk_1001C6868;
  id v47 = v18;
  uint64_t v48 = v4;
  id v29 = v18;
  id v30 = v44;
  if (v28)
  {
    id v31 = sub_10015BD9C();
    dispatch_assert_queue_V2(v31);

    uint64_t v32 = [v28[27] objectForKeyedSubscript:v29];
    if (v32)
    {
      uint64_t v33 = v30;
      dispatch_assert_queue_V2(v32[13]);
      dispatch_assert_queue_V2(v32[13]);
      id v34 = sub_1000DC5BC((uint64_t)v32, 1, 0);
      if (v34 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
        sub_1000A70F8((uint64_t)v34, v33);
      }
      else {
        v45((uint64_t)v33, 0);
      }
    }
    else
    {
      v45((uint64_t)v30, 0);
    }
  }
  uint64_t v16 = -2000;
LABEL_48:

  return v16;
}

void sub_100053D90(uint64_t a1, uint64_t a2)
{
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v6 = (id)qword_1001F4918;
    id v7 = *(void **)(a1 + 40);
    if (v7)
    {
      id v8 = (void *)v7[4];
      if (!v8)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(*(id *)(a1 + 40), v5, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v11 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v12 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v11 = v12;
        }
        id v13 = (void *)v7[4];
        v7[4] = v11;

        id v8 = (void *)v7[4];
      }
      id v7 = v8;
    }
    _NRLogWithArgs();
  }
  id v14 = *(id *)(a1 + 40);
  if (v14) {
    id v14 = objc_getProperty(v14, v4, 24, 1);
  }
  xpc_dictionary_set_int64(v14, nrXPCKeyResult, 0);
  id v16 = *(id *)(a1 + 40);
  if (v16) {
    id v16 = objc_getProperty(v16, v15, 24, 1);
  }
  xpc_dictionary_set_uint64(v16, nrXPCKeyBTLatency, a2);
  id v18 = *(id *)(a1 + 40);
  if (v18) {
    id v18 = objc_getProperty(v18, v17, 8, 1);
  }
  connection = (_xpc_connection_s *)v18;
  id v20 = *(void **)(a1 + 40);
  if (v20) {
    id v21 = objc_getProperty(v20, v19, 24, 1);
  }
  else {
    id v21 = 0;
  }
  xpc_connection_send_message(connection, v21);
}

uint64_t sub_100054014(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v4 = (id)qword_1001F4918;
    if (v1)
    {
      id v5 = (void *)v1[4];
      if (!v5)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v3, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v8 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v9 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v8 = v9;
        }
        id v10 = (void *)v1[4];
        v1[4] = v8;

        id v5 = (void *)v1[4];
      }
      id v11 = v5;
    }
    else
    {
      id v11 = 0;
    }
    _NRLogWithArgs();
  }
  if (v1) {
    id v12 = objc_getProperty(v1, v2, 24, 1);
  }
  else {
    id v12 = 0;
  }
  id v13 = (const char *)nrXPCKeyBabelRoutes;
  id v14 = v12;
  xpc_dictionary_set_string(v14, v13, (const char *)[@"BABEL_NOT_SUPPORTED" UTF8String]);

  return 0;
}

uint64_t sub_100054240(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  return -2005;
}

uint64_t sub_100054414(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v4 = (id)qword_1001F4918;
    if (v1)
    {
      id v5 = (void *)v1[4];
      if (!v5)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v3, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v8 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v9 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v8 = v9;
        }
        id v10 = (void *)v1[4];
        v1[4] = v8;

        id v5 = (void *)v1[4];
      }
      id v11 = v5;
    }
    else
    {
      id v11 = 0;
    }
    uint64_t v121 = 1063;
    id v123 = v11;
    id v117 = "";
    SEL v119 = "handleDevicePreferences";
    _NRLogWithArgs();
  }
  if (v1) {
    id v12 = objc_getProperty(v1, v2, 16, 1);
  }
  else {
    id v12 = 0;
  }
  uuid = xpc_dictionary_get_uuid(v12, nrXPCKeyDeviceIdentifier);
  if (uuid)
  {
    id v15 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:uuid];
    if (v1) {
      id v16 = objc_getProperty(v1, v14, 16, 1);
    }
    else {
      id v16 = 0;
    }
    id v17 = xpc_dictionary_get_value(v16, nrXPCKeyDevicePreferencesPolicyTrafficClassifiers);
    uint64_t v19 = v17;
    if (v17 && xpc_get_type(v17) == (xpc_type_t)&_xpc_type_array)
    {
      id v85 = objc_alloc_init((Class)NSMutableSet);
      applier[0] = _NSConcreteStackBlock;
      applier[1] = 3221225472;
      applier[2] = sub_10005535C;
      applier[3] = &unk_1001C6840;
      id v139 = v1;
      id v20 = v85;
      id v140 = v20;
      xpc_array_apply(v19, applier);

      if (v1) {
        goto LABEL_23;
      }
    }
    else
    {
      id v20 = 0;
      if (v1)
      {
LABEL_23:
        id v21 = objc_getProperty(v1, v18, 16, 1);
        goto LABEL_24;
      }
    }
    id v21 = 0;
LABEL_24:
    BOOL v135 = xpc_dictionary_get_BOOL(v21, nrXPCKeyDevicePreferencesIsDeviceSetupInProgress);
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v24 = (id)qword_1001F4918;
      if (v1)
      {
        id v25 = (void *)v1[4];
        if (!v25)
        {
          uint64_t v26 = (_xpc_connection_s *)objc_getProperty(v1, v23, 8, 1);
          uint64_t v27 = xpc_connection_get_pid(v26);
          id v28 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v27];
          bzero(buffer, 0x400uLL);
          if ((int)v27 >= 1 && proc_pidpath(v27, buffer, 0x400u) >= 1 && buffer[0])
          {
            id v29 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v27];

            id v28 = v29;
          }
          id v30 = (void *)v1[4];
          v1[4] = v28;

          id v25 = (void *)v1[4];
        }
        id v31 = v25;
      }
      else
      {
        id v31 = 0;
      }
      id v125 = v15;
      int v127 = (void *)_NRCopyPolicyTrafficClassifiersDescription();
      uint64_t v121 = 1105;
      id v123 = v31;
      id v117 = "";
      SEL v119 = "handleDevicePreferences";
      _NRLogWithArgs();
    }
    if (v1) {
      id v32 = objc_getProperty(v1, v22, 16, 1);
    }
    else {
      id v32 = 0;
    }
    uint64_t v33 = xpc_dictionary_get_value(v32, nrXPCKeyDevicePreferencesBTLinkPreferences);
    id v34 = v33;
    if (v33 && xpc_get_type(v33) == (xpc_type_t)&_xpc_type_dictionary)
    {
      id v35 = +[NRLinkPreferences createFromEncodedXPCDict:v34];
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        id v132 = v35;
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v87 = (id)qword_1001F4918;
        if (v1)
        {
          id v88 = (void *)v1[4];
          if (!v88)
          {
            id v89 = (_xpc_connection_s *)objc_getProperty(v1, v86, 8, 1);
            uint64_t v90 = xpc_connection_get_pid(v89);
            id v91 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v90];
            bzero(buffer, 0x400uLL);
            if ((int)v90 >= 1 && proc_pidpath(v90, buffer, 0x400u) >= 1 && buffer[0])
            {
              id v92 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v90];

              id v91 = v92;
            }
            id v93 = (void *)v1[4];
            v1[4] = v91;

            id v88 = (void *)v1[4];
          }
          id v94 = v88;
        }
        else
        {
          id v94 = 0;
        }
        id v125 = v15;
        int v127 = v132;
        uint64_t v121 = 1113;
        id v123 = v94;
        id v117 = "";
        SEL v119 = "handleDevicePreferences";
        _NRLogWithArgs();

        id v35 = v132;
      }
    }
    else
    {
      id v35 = 0;
    }
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v137 = (id *)(id)qword_1001F4A18;
    self;
    if (qword_1001F4910 != -1) {
      dispatch_once(&qword_1001F4910, &stru_1001C6780);
    }
    id v36 = (id)qword_1001F4908;
    uint64_t v136 = v36;
    if (v36) {
      id v36 = objc_getProperty(v36, v37, 24, 1);
    }
    id v39 = v36;
    if (v1) {
      id v40 = objc_getProperty(v1, v38, 8, 1);
    }
    else {
      id v40 = 0;
    }
    unsigned int v41 = [v39 containsObject:v40, v117, v119, v121, v123, v125, v127];

    if (!v41)
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        id v75 = v35;
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v77 = (id)qword_1001F4918;
        if (v1)
        {
          int v78 = (void *)v1[4];
          if (!v78)
          {
            uint64_t v79 = (_xpc_connection_s *)objc_getProperty(v1, v76, 8, 1);
            uint64_t v80 = xpc_connection_get_pid(v79);
            id v81 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v80];
            bzero(buffer, 0x400uLL);
            if ((int)v80 >= 1 && proc_pidpath(v80, buffer, 0x400u) >= 1 && buffer[0])
            {
              id v82 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v80];

              id v81 = v82;
            }
            id v83 = (void *)v1[4];
            v1[4] = v81;

            int v78 = (void *)v1[4];
          }
          id v84 = v78;
        }
        else
        {
          id v84 = 0;
        }
        _NRLogWithArgs();

        id v35 = v75;
      }
      goto LABEL_130;
    }
    if (v1)
    {
      id v43 = objc_getProperty(v1, v42, 8, 1);
      uint64_t v44 = (uint64_t)v137;
      sub_1000B8B70((uint64_t)v137, v35, v43, v15);
      id v46 = objc_getProperty(v1, v45, 8, 1);
    }
    else
    {
      uint64_t v44 = (uint64_t)v137;
      sub_1000B8B70((uint64_t)v137, v35, 0, v15);
      id v46 = 0;
    }
    id v130 = v20;
    id v134 = v20;
    id v47 = v46;
    id v48 = v15;
    id v131 = v35;
    if (v44)
    {
      id v49 = sub_10015BD9C();
      dispatch_assert_queue_V2(v49);

      id v133 = v47;
      if (v47)
      {
        if (v48)
        {
          uint64_t v50 = [*(id *)(v44 + 216) objectForKeyedSubscript:v48];
          if (v50)
          {
            uint64_t v51 = v50;
            id v52 = v134;
            id v53 = v133;
            dispatch_assert_queue_V2(*(dispatch_queue_t *)(v51 + 104));
            uint64_t v54 = *(void *)(v51 + 184);
            id v55 = v52;
            id v56 = v53;
            if (v54)
            {
              id v128 = v19;
              long long v129 = v34;
              id v57 = v15;
              id v58 = *(NSObject **)(v54 + 24);
              if (v58) {
                dispatch_assert_queue_V2(v58);
              }
              id v59 = sub_100121D58(v56);
              uint64_t v60 = (void *)_NRCopyLogObjectForNRUUID();
              int IsLevelEnabled = _NRLogIsLevelEnabled();

              if (IsLevelEnabled)
              {
                id v62 = (void *)_NRCopyLogObjectForNRUUID();
                id v124 = v59;
                id v126 = (void *)_NRCopyPolicyTrafficClassifiersDescription();
                uint64_t v122 = 264;
                id v118 = "";
                id v120 = "-[NRDevicePreferencesManager setPolicyTrafficClassifiers:forConnection:]";
                _NRLogWithArgs();
              }
              [*(id *)(v54 + 40) setObject:v55 forKeyedSubscript:v59, v118, v120, v122, v124, v126];
              sub_10012179C(v54);

              id v15 = v57;
              uint64_t v19 = v128;
              id v34 = v129;
            }

            id v35 = v131;
            uint64_t v44 = (uint64_t)v137;
          }
          else
          {
            uint64_t v95 = objc_alloc_init(NRDOrphanedConnection);
            p_isa = (id *)&v95->super.isa;
            if (v95)
            {
              objc_storeStrong((id *)&v95->_nrUUID, v15);
              objc_storeStrong(p_isa + 2, v46);
            }
            [*(id *)(v44 + 232) addObject:p_isa];
            uint64_t v97 = [p_isa description];
            sub_10012F648(0, 1022, 0, v97);

            uint64_t v51 = 0;
          }
          goto LABEL_113;
        }
        id v112 = sub_1000AA13C();
        int v113 = _NRLogIsLevelEnabled();

        if (v113)
        {
LABEL_135:
          uint64_t v51 = (uint64_t)sub_1000AA13C();
          id v118 = "-[NRLinkDirector setPolicyTrafficClasses:forConnection:nrUUID:]";
          _NRLogWithArgs();
LABEL_113:

          id v47 = v133;
        }
      }
      else
      {
        id v110 = sub_1000AA13C();
        int v111 = _NRLogIsLevelEnabled();

        if (v111) {
          goto LABEL_135;
        }
      }
    }

    if (v135)
    {
      id v99 = v34;
      if (v1) {
        id v100 = objc_getProperty(v1, v98, 8, 1);
      }
      else {
        id v100 = 0;
      }
      id v101 = v100;
      id v102 = v48;
      if (v137)
      {
        long long v103 = sub_10015BD9C();
        dispatch_assert_queue_V2(v103);

        uint64_t v104 = [v137[27] objectForKeyedSubscript:v102];
        if (v104)
        {
          long long v105 = (id *)v101;
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v104 + 104));
          if (v105)
          {
            [*(id *)(v104 + 176) addObject:v105];
            if ([*(id *)(v104 + 176) count]) {
              sub_1000FA864(v104, 1);
            }
          }
          else
          {
            if (qword_1001F4AA8 != -1) {
              dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
            }
            id v114 = (id)qword_1001F4AA0;
            int v115 = _NRLogIsLevelEnabled();

            if (v115)
            {
              if (qword_1001F4AA8 != -1) {
                dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
              }
              id v116 = (id)qword_1001F4AA0;
              _NRLogWithArgs();
            }
          }
        }
        else
        {
          unsigned int v107 = objc_alloc_init(NRDOrphanedConnection);
          long long v105 = (id *)&v107->super.isa;
          if (v107)
          {
            objc_storeStrong((id *)&v107->_nrUUID, v15);
            objc_storeStrong(v105 + 2, v100);
          }
          [v137[29] addObject:v105, v118];
          int v108 = [v105 description];
          sub_10012F648(0, 1022, 0, v108);
        }
      }

      id v20 = v130;
      id v35 = v131;
      id v34 = v99;
    }
    else
    {
      if (v1) {
        id v106 = objc_getProperty(v1, v98, 8, 1);
      }
      else {
        id v106 = 0;
      }
      id v20 = v130;
      sub_1000B88BC(v44, v106);
    }
LABEL_130:

    uint64_t v74 = 0;
    goto LABEL_131;
  }
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v64 = (id)qword_1001F4918;
    if (v1)
    {
      id v66 = objc_getProperty(v1, v63, 16, 1);
      uint64_t v67 = (void *)v1[4];
      if (!v67)
      {
        unint64_t v68 = (_xpc_connection_s *)objc_getProperty(v1, v65, 8, 1);
        uint64_t v69 = xpc_connection_get_pid(v68);
        id v70 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v69];
        bzero(buffer, 0x400uLL);
        if ((int)v69 >= 1 && proc_pidpath(v69, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v71 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v69];

          id v70 = v71;
        }
        unsigned int v72 = (void *)v1[4];
        v1[4] = v70;

        uint64_t v67 = (void *)v1[4];
      }
      id v73 = v67;
    }
    else
    {
      id v66 = 0;
      id v73 = 0;
    }
    _NRLogWithArgs();
  }
  uint64_t v74 = -2005;
LABEL_131:

  return v74;
}

uint64_t sub_10005535C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_string)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v6 = (id)qword_1001F4918;
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v5, 16, 1);
      }
      id v9 = Property;
      id v10 = *(void **)(a1 + 32);
      if (v10)
      {
        id v11 = (void *)v10[4];
        if (!v11)
        {
          id v12 = (_xpc_connection_s *)objc_getProperty(v10, v8, 8, 1);
          uint64_t pid = xpc_connection_get_pid(v12);
          id v14 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
          bzero(buffer, 0x400uLL);
          if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
          {
            id v15 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

            id v14 = v15;
          }
          id v16 = (void *)v10[4];
          v10[4] = v14;

          id v11 = (void *)v10[4];
        }
        id v10 = v11;
      }
LABEL_17:
      _NRLogWithArgs();

      goto LABEL_18;
    }
    goto LABEL_39;
  }
  string_ptr = xpc_string_get_string_ptr(v4);
  if (!string_ptr)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v6 = (id)qword_1001F4918;
      id v21 = *(id *)(a1 + 32);
      if (v21) {
        id v21 = objc_getProperty(v21, v20, 16, 1);
      }
      id v9 = v21;
      id v10 = *(void **)(a1 + 32);
      if (v10)
      {
        uint64_t v23 = (void *)v10[4];
        if (!v23)
        {
          id v24 = (_xpc_connection_s *)objc_getProperty(v10, v22, 8, 1);
          uint64_t v25 = xpc_connection_get_pid(v24);
          id v26 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v25];
          bzero(buffer, 0x400uLL);
          if ((int)v25 >= 1 && proc_pidpath(v25, buffer, 0x400u) >= 1 && buffer[0])
          {
            id v27 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v25];

            id v26 = v27;
          }
          id v28 = (void *)v10[4];
          v10[4] = v26;

          uint64_t v23 = (void *)v10[4];
        }
        id v10 = v23;
      }
      goto LABEL_17;
    }
LABEL_39:
    uint64_t v17 = 0;
    goto LABEL_40;
  }
  id v19 = [objc_alloc((Class)NSString) initWithUTF8String:string_ptr];
  if (v19)
  {
    id v6 = v19;
    [*(id *)(a1 + 40) addObject:v19];
    uint64_t v17 = 1;
    goto LABEL_22;
  }
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v31 = (id)qword_1001F4918;
    id v32 = *(id *)(a1 + 32);
    if (v32) {
      id v32 = objc_getProperty(v32, v30, 16, 1);
    }
    id v34 = v32;
    id v35 = *(void **)(a1 + 32);
    if (v35)
    {
      id v36 = (void *)v35[4];
      if (!v36)
      {
        BOOL v37 = (_xpc_connection_s *)objc_getProperty(v35, v33, 8, 1);
        uint64_t v38 = xpc_connection_get_pid(v37);
        id v39 = sub_100116370(v38, 1);
        id v40 = (void *)v35[4];
        void v35[4] = v39;

        id v36 = (void *)v35[4];
      }
      id v35 = v36;
    }
    _NRLogWithArgs();
  }
  id v6 = 0;
LABEL_18:
  uint64_t v17 = 0;
LABEL_22:

LABEL_40:
  return v17;
}

void sub_100055840(id a1)
{
  uint64_t v1 = sub_10004A95C([TerminusdXPCServer alloc]);
  uint64_t v2 = (void *)qword_1001F4908;
  qword_1001F4908 = (uint64_t)v1;

  sub_100055884();
}

uint64_t sub_100055884()
{
  if (dword_1001F3E00 != -1)
  {
LABEL_2:
    uint64_t v0 = sub_100113F18();
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      _NRLogWithArgs();
    }
    if (notify_set_state(dword_1001F3E00, v0))
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_27;
      }
      if (qword_1001F4920 == -1)
      {
LABEL_26:
        _NRLogWithArgs();
LABEL_27:
        uint64_t result = notify_cancel(dword_1001F3E00);
        dword_1001F3E00 = -1;
        return result;
      }
    }
    else
    {
      uint64_t result = notify_post("com.apple.networkrelay.endpointcache");
      if (!result) {
        return result;
      }
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_27;
      }
      if (qword_1001F4920 == -1) {
        goto LABEL_26;
      }
    }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    goto LABEL_26;
  }
  uint64_t result = notify_register_check("com.apple.networkrelay.endpointcache", &dword_1001F3E00);
  if (result)
  {
    dword_1001F3E00 = -1;
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    uint64_t result = _NRLogIsLevelEnabled();
    if (result)
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      return _NRLogWithArgs();
    }
  }
  else if (dword_1001F3E00 != -1)
  {
    goto LABEL_2;
  }
  return result;
}

uint64_t sub_100055B3C(void *a1)
{
  id Property = a1;
  id v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyDeviceIdentifier);
  if (uuid)
  {
    id v6 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:uuid];
    if (v6)
    {
      id v7 = v6;
      uint64_t v1 = &unk_1001F4000;
      if (qword_1001F4920 == -1) {
        goto LABEL_6;
      }
    }
    else
    {
      id v59 = sub_10004A608();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v61 = sub_10004A608();
        _NRLogWithArgs();
      }
      id v4 = (void *)_os_log_pack_size();
      id v7 = &v76[-((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0)];
      __error();
      uint64_t v62 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v62 = 136446210;
      *(void *)(v62 + 4) = "handleDeviceMonitorStatusQuery";
      sub_10004A608();
      _NRLogAbortWithPack();
    }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
LABEL_6:
    id v8 = (id *)&unk_1001F4000;
    if (_NRLogIsLevelEnabled())
    {
      if (v1[292] != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v9 = (id)qword_1001F4918;
      id v11 = [v7 UUIDString];
      if (v4)
      {
        id v12 = (void *)v4[4];
        if (!v12)
        {
          id v13 = (_xpc_connection_s *)objc_getProperty(v4, v10, 8, 1);
          uint64_t pid = xpc_connection_get_pid(v13);
          id v15 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
          bzero(v76, 0x400uLL);
          if ((int)pid >= 1 && proc_pidpath(pid, v76, 0x400u) >= 1 && v76[0])
          {
            id v16 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v76, pid];

            id v15 = v16;
          }
          uint64_t v17 = (void *)v4[4];
          v4[4] = v15;

          id v12 = (void *)v4[4];
        }
        id v18 = v12;
      }
      else
      {
        id v18 = 0;
      }
      _NRLogWithArgs();
    }
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v19 = (id *)(id)qword_1001F4A18;
    self;
    if (qword_1001F4910 != -1) {
      dispatch_once(&qword_1001F4910, &stru_1001C6780);
    }
    id v20 = (id)qword_1001F4908;
    id v22 = v20;
    if (v20) {
      id v20 = objc_getProperty(v20, v21, 24, 1);
    }
    id v24 = v20;
    if (v4) {
      id v25 = objc_getProperty(v4, v23, 8, 1);
    }
    else {
      id v25 = 0;
    }
    unsigned int v26 = [v24 containsObject:v25];

    if (!v26)
    {
      if (v1[292] != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (!_NRLogIsLevelEnabled())
      {
        uint64_t v45 = -2010;
LABEL_91:

        goto LABEL_92;
      }
      if (v1[292] != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v36 = (id)qword_1001F4918;
      id v47 = [v7 UUIDString];
      if (v4)
      {
        id v48 = (void *)v4[4];
        if (!v48)
        {
          id v49 = (_xpc_connection_s *)objc_getProperty(v4, v46, 8, 1);
          uint64_t v50 = xpc_connection_get_pid(v49);
          id v51 = [[objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v50];
          bzero(v76, 0x400uLL);
          if ((int)v50 >= 1 && proc_pidpath(v50, v76, 0x400u) >= 1 && v76[0])
          {
            id v52 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v76, v50];

            id v51 = v52;
          }
          id v53 = (void *)v4[4];
          v4[4] = v51;

          id v48 = (void *)v4[4];
        }
        id v54 = v48;
      }
      else
      {
        id v54 = 0;
      }
      _NRLogWithArgs();

      uint64_t v45 = -2010;
LABEL_90:

      goto LABEL_91;
    }
    if (v4)
    {
      id v28 = objc_getProperty(v4, v27, 8, 1);
      sub_1000B8748((uint64_t)v19, v28, v7);
      id v30 = objc_getProperty(v4, v29, 24, 1);
    }
    else
    {
      sub_1000B8748((uint64_t)v19, 0, v7);
      id v30 = 0;
    }
    id v31 = v7;
    id v32 = v30;
    uint64_t v33 = v32;
    if (v19)
    {
      if (v32)
      {
        uint64_t v34 = [v19[27] objectForKeyedSubscript:v31];
        if (v34)
        {
          id v35 = (id)v34;
          sub_1000DFFC4(v34, v33);
          id v36 = v33;
        }
        else
        {
          id v36 = v33;
          id v55 = v31;
          uint64_t v56 = self;
          sub_1000E035C(v56, v55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v36);

          id v8 = (id *)&unk_1001F4000;
          id v35 = 0;
        }
LABEL_64:

        if (v36)
        {
          if (v4) {
            id v58 = (_xpc_connection_s *)objc_getProperty(v4, v57, 8, 1);
          }
          else {
            id v58 = 0;
          }
          xpc_connection_send_message(v58, v36);
          uint64_t v45 = -2000;
          goto LABEL_90;
        }
LABEL_75:
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4920 != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          id v65 = v8[291];
          uint64_t v67 = [v31 UUIDString];
          if (v4)
          {
            unint64_t v68 = (void *)v4[4];
            if (!v68)
            {
              uint64_t v69 = (_xpc_connection_s *)objc_getProperty(v4, v66, 8, 1);
              uint64_t v70 = xpc_connection_get_pid(v69);
              id v71 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v70];
              bzero(v76, 0x400uLL);
              if ((int)v70 >= 1 && proc_pidpath(v70, v76, 0x400u) >= 1 && v76[0])
              {
                id v72 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v76, v70];

                id v71 = v72;
              }
              id v73 = (void *)v4[4];
              v4[4] = v71;

              unint64_t v68 = (void *)v4[4];
            }
            id v74 = v68;
          }
          else
          {
            id v74 = 0;
          }
          _NRLogWithArgs();
        }
        id v36 = 0;
        uint64_t v45 = -2008;
        goto LABEL_90;
      }
      id v63 = sub_1000AA13C();
      int v64 = _NRLogIsLevelEnabled();

      if (v64)
      {
        id v35 = sub_1000AA13C();
        _NRLogWithArgs();
        id v36 = 0;
        goto LABEL_64;
      }
    }

    goto LABEL_75;
  }
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v7 = (id)qword_1001F4918;
    if (v4)
    {
      id v19 = (id *)objc_getProperty(v4, v37, 16, 1);
      id v39 = (void *)v4[4];
      if (!v39)
      {
        id v40 = (_xpc_connection_s *)objc_getProperty(v4, v38, 8, 1);
        uint64_t v41 = xpc_connection_get_pid(v40);
        id v42 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v41];
        bzero(v76, 0x400uLL);
        if ((int)v41 >= 1 && proc_pidpath(v41, v76, 0x400u) >= 1 && v76[0])
        {
          id v43 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v76, v41];

          id v42 = v43;
        }
        uint64_t v44 = (void *)v4[4];
        v4[4] = v42;

        id v39 = (void *)v4[4];
      }
      id v22 = v39;
    }
    else
    {
      id v19 = 0;
      id v22 = 0;
    }
    _NRLogWithArgs();
    uint64_t v45 = -2005;
    goto LABEL_91;
  }
  uint64_t v45 = -2005;
LABEL_92:

  return v45;
}

uint64_t sub_1000565A0(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v11 = (id)qword_1001F4A18;
  sub_1000B8344((uint64_t)v11, 0);

  return 0;
}

uint64_t sub_1000567C4(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v11 = (id)qword_1001F4A18;
  sub_1000B8344((uint64_t)v11, 1);

  return 0;
}

uint64_t sub_1000569E8(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v11 = (id)qword_1001F4A18;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100056C6C;
  v14[3] = &unk_1001C6818;
  id v15 = v1;
  id v12 = v1;

  return -2000;
}

void sub_100056C6C(uint64_t a1, void *a2)
{
  id v15 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 24, 1);
  }
  xpc_dictionary_set_int64(Property, nrXPCKeyResult, 0);
  id v6 = *(id *)(a1 + 32);
  if (v6) {
    id v6 = objc_getProperty(v6, v5, 24, 1);
  }
  id v7 = (const char *)nrXPCKeyIDSDeviceID;
  id v8 = v6;
  xpc_dictionary_set_string(v8, v7, (const char *)[v15 UTF8String]);

  id v10 = *(id *)(a1 + 32);
  if (v10) {
    id v10 = objc_getProperty(v10, v9, 8, 1);
  }
  id v12 = (_xpc_connection_s *)v10;
  id v13 = *(void **)(a1 + 32);
  if (v13) {
    id v14 = objc_getProperty(v13, v11, 24, 1);
  }
  else {
    id v14 = 0;
  }
  xpc_connection_send_message(v12, v14);
}

uint64_t sub_100056D6C(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  self;
  id v11 = sub_10015BD9C();
  dispatch_assert_queue_V2(v11);

  sub_10013BB9C();
  id v12 = [(id)qword_1001F4D40 copy];
  id v13 = objc_alloc_init((Class)NSMutableString);
  [v13 appendFormat:@"%llu devices:", [v12 count]];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v14 = v12;
  id v15 = [v14 countByEnumeratingWithState:&v29 objects:buffer count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v17) {
          objc_enumerationMutation(v14);
        }
        id v19 = [v14 objectForKeyedSubscript:*(void *)(*((void *)&v29 + 1) + 8 * i)];
        id v20 = (void *)sub_100140290(v19);
        [v13 appendFormat:@"\n\t%@", v20];
      }
      id v16 = [v14 countByEnumeratingWithState:&v29 objects:buffer count:16];
    }
    while (v16);
  }

  if (v13)
  {
    if (v1) {
      id v22 = objc_getProperty(v1, v21, 24, 1);
    }
    else {
      id v22 = 0;
    }
    uint64_t v23 = (const char *)nrXPCKeyDeviceListString;
    id v24 = v22;
    xpc_dictionary_set_string(v24, v23, (const char *)[v13 UTF8String]);
    uint64_t v25 = 0;
  }
  else
  {
    id v27 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled)
    {
      uint64_t v25 = -2009;
      goto LABEL_27;
    }
    id v24 = sub_10004A608();
    _NRLogWithArgs();
    uint64_t v25 = -2009;
  }

LABEL_27:
  return v25;
}

uint64_t sub_10005711C(void *a1)
{
  id Property = a1;
  id v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyNRUUID);
  if (!uuid)
  {
    id v29 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_19;
    }
    id v8 = sub_10004A608();
    id v15 = sub_10004A6A0(v4, v31);
LABEL_18:
    _NRLogWithArgs();

LABEL_19:
    uint64_t v16 = -2005;
    goto LABEL_35;
  }
  id v6 = uuid;
  if (uuid_is_null(uuid))
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_19;
    }
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v8 = (id)qword_1001F4918;
    if (v4)
    {
      id v9 = (void *)v4[4];
      if (!v9)
      {
        id v10 = (_xpc_connection_s *)objc_getProperty(v4, v7, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v10);
        id v12 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(v39, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, v39, 0x400u) >= 1 && v39[0])
        {
          id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v39, pid];

          id v12 = v13;
        }
        id v14 = (void *)v4[4];
        v4[4] = v12;

        id v9 = (void *)v4[4];
      }
      id v15 = v9;
    }
    else
    {
      id v15 = 0;
    }
    goto LABEL_18;
  }
  uint64_t v17 = (char *)[objc_alloc((Class)NSUUID) initWithUUIDBytes:v6];
  if (!v17)
  {
    id v32 = sub_10004A608();
    int v33 = _NRLogIsLevelEnabled();

    if (v33)
    {
      id v34 = sub_10004A608();
      _NRLogWithArgs();
    }
    id v4 = (void *)_os_log_pack_size();
    id v18 = (char *)v37 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v35 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v35 = 136446210;
    *(void *)(v35 + 4) = "handleDisableDeviceByNRUUID";
    sub_10004A608();
    _NRLogAbortWithPack();
    goto LABEL_41;
  }
  id v18 = v17;
  uint64_t v1 = &unk_1001F4000;
  if (qword_1001F4920 != -1) {
LABEL_41:
  }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  if (_NRLogIsLevelEnabled())
  {
    if (v1[292] != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v20 = (id)qword_1001F4918;
    if (v4)
    {
      id v21 = (void *)v4[4];
      if (!v21)
      {
        id v22 = (_xpc_connection_s *)objc_getProperty(v4, v19, 8, 1);
        uint64_t v23 = xpc_connection_get_pid(v22);
        id v24 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v23];
        bzero(v39, 0x400uLL);
        if ((int)v23 >= 1 && proc_pidpath(v23, v39, 0x400u) >= 1 && v39[0])
        {
          id v25 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v39, v23];

          id v24 = v25;
        }
        unsigned int v26 = (void *)v4[4];
        v4[4] = v24;

        id v21 = (void *)v4[4];
      }
      id v27 = v21;
    }
    else
    {
      id v27 = 0;
    }
    id v36 = [v18 UUIDString];
    _NRLogWithArgs();
  }
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_100057698;
  v37[3] = &unk_1001C7070;
  uint64_t v38 = v4;
  sub_1001453D0((uint64_t)NRDLocalDevice, v18, v37);

  uint64_t v16 = -2000;
LABEL_35:

  return v16;
}

void sub_100057698(uint64_t a1, int64_t a2, void *a3)
{
  id v18 = a3;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v5, 24, 1);
  }
  xpc_dictionary_set_int64(Property, nrXPCKeyResult, a2);
  if (v18)
  {
    id v9 = v18;
    id v10 = *(id *)(a1 + 32);
    if (v10) {
      id v10 = objc_getProperty(v10, v8, 24, 1);
    }
    id v11 = (const char *)nrXPCKeyErrorDescription;
    id v12 = v10;
    xpc_dictionary_set_string(v12, v11, (const char *)[v9 UTF8String]);
  }
  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v7, 8, 1);
  }
  id v15 = (_xpc_connection_s *)v13;
  uint64_t v16 = *(void **)(a1 + 32);
  if (v16) {
    id v17 = objc_getProperty(v16, v14, 24, 1);
  }
  else {
    id v17 = 0;
  }
  xpc_connection_send_message(v15, v17);
}

uint64_t sub_1000577B4(void *a1)
{
  id Property = a1;
  id v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyNRUUID);
  if (!uuid)
  {
    id v29 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_19;
    }
    id v8 = sub_10004A608();
    id v15 = sub_10004A6A0(v4, v31);
LABEL_18:
    _NRLogWithArgs();

LABEL_19:
    uint64_t v16 = -2005;
    goto LABEL_35;
  }
  id v6 = uuid;
  if (uuid_is_null(uuid))
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_19;
    }
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v8 = (id)qword_1001F4918;
    if (v4)
    {
      id v9 = (void *)v4[4];
      if (!v9)
      {
        id v10 = (_xpc_connection_s *)objc_getProperty(v4, v7, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v10);
        id v12 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(v39, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, v39, 0x400u) >= 1 && v39[0])
        {
          id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v39, pid];

          id v12 = v13;
        }
        id v14 = (void *)v4[4];
        v4[4] = v12;

        id v9 = (void *)v4[4];
      }
      id v15 = v9;
    }
    else
    {
      id v15 = 0;
    }
    goto LABEL_18;
  }
  id v17 = (char *)[objc_alloc((Class)NSUUID) initWithUUIDBytes:v6];
  if (!v17)
  {
    id v32 = sub_10004A608();
    int v33 = _NRLogIsLevelEnabled();

    if (v33)
    {
      id v34 = sub_10004A608();
      _NRLogWithArgs();
    }
    id v4 = (void *)_os_log_pack_size();
    id v18 = (char *)v37 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v35 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v35 = 136446210;
    *(void *)(v35 + 4) = "handleEnableDeviceByNRUUID";
    sub_10004A608();
    _NRLogAbortWithPack();
    goto LABEL_41;
  }
  id v18 = v17;
  uint64_t v1 = &unk_1001F4000;
  if (qword_1001F4920 != -1) {
LABEL_41:
  }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  if (_NRLogIsLevelEnabled())
  {
    if (v1[292] != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v20 = (id)qword_1001F4918;
    if (v4)
    {
      id v21 = (void *)v4[4];
      if (!v21)
      {
        id v22 = (_xpc_connection_s *)objc_getProperty(v4, v19, 8, 1);
        uint64_t v23 = xpc_connection_get_pid(v22);
        id v24 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v23];
        bzero(v39, 0x400uLL);
        if ((int)v23 >= 1 && proc_pidpath(v23, v39, 0x400u) >= 1 && v39[0])
        {
          id v25 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v39, v23];

          id v24 = v25;
        }
        unsigned int v26 = (void *)v4[4];
        v4[4] = v24;

        id v21 = (void *)v4[4];
      }
      id v27 = v21;
    }
    else
    {
      id v27 = 0;
    }
    id v36 = [v18 UUIDString];
    _NRLogWithArgs();
  }
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_100057D30;
  v37[3] = &unk_1001C7070;
  uint64_t v38 = v4;
  sub_100144004((uint64_t)NRDLocalDevice, v18, v37);

  uint64_t v16 = -2000;
LABEL_35:

  return v16;
}

void sub_100057D30(uint64_t a1, int64_t a2, void *a3)
{
  id v18 = a3;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v5, 24, 1);
  }
  xpc_dictionary_set_int64(Property, nrXPCKeyResult, a2);
  if (v18)
  {
    id v9 = v18;
    id v10 = *(id *)(a1 + 32);
    if (v10) {
      id v10 = objc_getProperty(v10, v8, 24, 1);
    }
    id v11 = (const char *)nrXPCKeyErrorDescription;
    id v12 = v10;
    xpc_dictionary_set_string(v12, v11, (const char *)[v9 UTF8String]);
  }
  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v7, 8, 1);
  }
  id v15 = (_xpc_connection_s *)v13;
  uint64_t v16 = *(void **)(a1 + 32);
  if (v16) {
    id v17 = objc_getProperty(v16, v14, 24, 1);
  }
  else {
    id v17 = 0;
  }
  xpc_connection_send_message(v15, v17);
}

uint64_t sub_100057E4C(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [[objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  id v32 = sub_10005835C;
  int v33 = &unk_1001C7070;
  id v34 = v1;
  id v29 = v1;
  id v28 = v31;
  self;
  id v11 = sub_10015BD9C();
  dispatch_assert_queue_V2(v11);

  sub_10013BB9C();
  id v12 = [(id)qword_1001F4D40 copy];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id obj = v12;
  id v13 = [obj countByEnumeratingWithState:&v35 objects:buffer count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v36;
    do
    {
      for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v36 != v15) {
          objc_enumerationMutation(obj);
        }
        id v18 = *(void **)(*((void *)&v35 + 1) + 8 * i);
        id v19 = sub_10013DD58((uint64_t)NRDLocalDevice, v18, 0);
        id v20 = v19;
        if (v19)
        {
          id v21 = *((id *)v19 + 4);
          id v22 = [v20 description];
          sub_10012F648(v21, 5002, v22, 0);

          uint64_t v23 = sub_10014019C((uint64_t)NRDLocalDevice, v20);
          [(id)qword_1001F4D40 setObject:v23 forKeyedSubscript:v18];

          if (v20[7]) {
            [qword_1001F4D48 setObject:0 forKeyedSubscript:0];
          }
        }
        else
        {
          id v17 = sub_10014019C((uint64_t)NRDLocalDevice, 0);
          [(id)qword_1001F4D40 setObject:v17 forKeyedSubscript:v18];
        }
        sub_1000A8484(v18, 0);
        sub_10013F05C((uint64_t)v20);
      }
      id v14 = [obj countByEnumeratingWithState:&v35 objects:buffer count:16];
    }
    while (v14);
  }

  uint64_t v24 = self;
  sub_10013C9FC(v24, 0);
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    _NRLogWithArgs();
  }
  v32((uint64_t)v28, 0, 0);
  id v25 = sub_10015BD9C();
  dispatch_async(v25, &stru_1001C6A58);

  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  unsigned int v26 = (char *)(id)qword_1001F4A18;
  sub_1000AD794(v26);

  return -2000;
}

void sub_10005835C(uint64_t a1, int64_t a2, void *a3)
{
  id v18 = a3;
  sub_100055884();
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v5, 24, 1);
  }
  xpc_dictionary_set_int64(Property, nrXPCKeyResult, a2);
  if (v18)
  {
    id v9 = v18;
    id v10 = *(id *)(a1 + 32);
    if (v10) {
      id v10 = objc_getProperty(v10, v8, 24, 1);
    }
    id v11 = (const char *)nrXPCKeyErrorDescription;
    id v12 = v10;
    xpc_dictionary_set_string(v12, v11, (const char *)[v9 UTF8String]);
  }
  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v7, 8, 1);
  }
  uint64_t v15 = (_xpc_connection_s *)v13;
  uint64_t v16 = *(void **)(a1 + 32);
  if (v16) {
    id v17 = objc_getProperty(v16, v14, 24, 1);
  }
  else {
    id v17 = 0;
  }
  xpc_connection_send_message(v15, v17);
}

uint64_t sub_10005847C(void *a1)
{
  id Property = a1;
  id v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyNRUUID);
  if (!uuid)
  {
    id v32 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_19;
    }
    id v8 = sub_10004A608();
    id v15 = sub_10004A6A0(v4, v34);
LABEL_18:
    _NRLogWithArgs();

LABEL_19:
    uint64_t v16 = -2005;
    goto LABEL_39;
  }
  id v6 = uuid;
  if (uuid_is_null(uuid))
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_19;
    }
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v8 = (id)qword_1001F4918;
    if (v4)
    {
      id v9 = (void *)v4[4];
      if (!v9)
      {
        id v10 = (_xpc_connection_s *)objc_getProperty(v4, v7, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v10);
        id v12 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(v42, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, v42, 0x400u) >= 1 && v42[0])
        {
          id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v42, pid];

          id v12 = v13;
        }
        id v14 = (void *)v4[4];
        v4[4] = v12;

        id v9 = (void *)v4[4];
      }
      id v15 = v9;
    }
    else
    {
      id v15 = 0;
    }
    goto LABEL_18;
  }
  id v17 = (char *)[objc_alloc((Class)NSUUID) initWithUUIDBytes:v6];
  if (!v17)
  {
    id v35 = sub_10004A608();
    int v36 = _NRLogIsLevelEnabled();

    if (v36)
    {
      id v37 = sub_10004A608();
      _NRLogWithArgs();
    }
    id v4 = (void *)_os_log_pack_size();
    id v18 = (char *)v40 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v38 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v38 = 136446210;
    *(void *)(v38 + 4) = "handleUnregisterDeviceByNRUUID";
    sub_10004A608();
    _NRLogAbortWithPack();
    goto LABEL_45;
  }
  id v18 = v17;
  uint64_t v1 = &unk_1001F4000;
  if (qword_1001F4920 != -1) {
LABEL_45:
  }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  if (_NRLogIsLevelEnabled())
  {
    if (v1[292] != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v20 = (id)qword_1001F4918;
    if (v4)
    {
      id v21 = (void *)v4[4];
      if (!v21)
      {
        id v22 = (_xpc_connection_s *)objc_getProperty(v4, v19, 8, 1);
        uint64_t v23 = xpc_connection_get_pid(v22);
        id v24 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v23];
        bzero(v42, 0x400uLL);
        if ((int)v23 >= 1 && proc_pidpath(v23, v42, 0x400u) >= 1 && v42[0])
        {
          id v25 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v42, v23];

          id v24 = v25;
        }
        unsigned int v26 = (void *)v4[4];
        v4[4] = v24;

        id v21 = (void *)v4[4];
      }
      id v27 = v21;
    }
    else
    {
      id v27 = 0;
    }
    id v39 = [v18 UUIDString];
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v29 = (id)qword_1001F4A18;
  if (v4) {
    id v30 = objc_getProperty(v4, v28, 8, 1);
  }
  else {
    id v30 = 0;
  }
  sub_1000B8F18((uint64_t)v29, 0, v30);

  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_100058A6C;
  v40[3] = &unk_1001C7070;
  uint64_t v41 = v4;
  sub_100144F64((uint64_t)NRDLocalDevice, v18, v40);

  uint64_t v16 = -2000;
LABEL_39:

  return v16;
}

void sub_100058A6C(uint64_t a1, int64_t a2, void *a3)
{
  id v18 = a3;
  sub_100055884();
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v5, 24, 1);
  }
  xpc_dictionary_set_int64(Property, nrXPCKeyResult, a2);
  if (v18)
  {
    id v9 = v18;
    id v10 = *(id *)(a1 + 32);
    if (v10) {
      id v10 = objc_getProperty(v10, v8, 24, 1);
    }
    id v11 = (const char *)nrXPCKeyErrorDescription;
    id v12 = v10;
    xpc_dictionary_set_string(v12, v11, (const char *)[v9 UTF8String]);
  }
  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v7, 8, 1);
  }
  id v15 = (_xpc_connection_s *)v13;
  uint64_t v16 = *(void **)(a1 + 32);
  if (v16) {
    id v17 = objc_getProperty(v16, v14, 24, 1);
  }
  else {
    id v17 = 0;
  }
  xpc_connection_send_message(v15, v17);
}

uint64_t sub_100058B8C(void *a1)
{
  id Property = a1;
  id v7 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v6, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyNRUUID);
  if (uuid)
  {
    id v9 = uuid;
    if (uuid_is_null(uuid))
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v11 = (id)qword_1001F4918;
        if (v7)
        {
          id v12 = (void *)v7[4];
          if (!v12)
          {
            id v13 = (_xpc_connection_s *)objc_getProperty(v7, v10, 8, 1);
            uint64_t pid = xpc_connection_get_pid(v13);
            id v15 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
            bzero(v147, 0x400uLL);
            if ((int)pid >= 1 && proc_pidpath(pid, v147, 0x400u) >= 1 && LOBYTE(v147[0]))
            {
              id v16 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v147, pid];

              id v15 = v16;
            }
            id v17 = (void *)v7[4];
            v7[4] = v15;

            id v12 = (void *)v7[4];
          }
          id v18 = v12;
        }
        else
        {
          id v18 = 0;
        }
        goto LABEL_18;
      }
LABEL_141:
      uint64_t v19 = -2005;
      goto LABEL_142;
    }
    id v20 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v9];
    if (!v20)
    {
      id v114 = sub_10004A608();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v116 = sub_10004A608();
        _NRLogWithArgs();
      }
      id v7 = (void *)_os_log_pack_size();
      id v71 = (char *)v129 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      goto LABEL_154;
    }
    id v21 = v20;
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v24 = (id)qword_1001F4918;
      if (v7)
      {
        id v25 = (void *)v7[4];
        if (!v25)
        {
          unsigned int v26 = (_xpc_connection_s *)objc_getProperty(v7, v23, 8, 1);
          uint64_t v27 = xpc_connection_get_pid(v26);
          id v28 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v27];
          bzero(v147, 0x400uLL);
          if ((int)v27 >= 1 && proc_pidpath(v27, v147, 0x400u) >= 1 && LOBYTE(v147[0]))
          {
            id v29 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v147, v27];

            id v28 = v29;
          }
          id v30 = (void *)v7[4];
          v7[4] = v28;

          id v25 = (void *)v7[4];
        }
        id v31 = v25;
      }
      else
      {
        id v31 = 0;
      }
      int v127 = [v21 UUIDString];
      _NRLogWithArgs();
    }
    if (v7) {
      id v32 = objc_getProperty(v7, v22, 16, 1);
    }
    else {
      id v32 = 0;
    }
    int64_t int64 = xpc_dictionary_get_int64(v32, nrXPCKeyPairingProtocolVersion);
    if (v7) {
      id v34 = objc_getProperty(v7, v33, 16, 1);
    }
    else {
      id v34 = 0;
    }
    uint64_t uint64 = xpc_dictionary_get_uint64(v34, nrXPCKeyPeerNetworkRelayVersion);
    if (uint64 < 0x10000)
    {
      int v38 = uint64;
    }
    else
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      int v37 = _NRLogIsLevelEnabled();
      int v38 = 0;
      if (v37)
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        _NRLogWithArgs();
        int v38 = 0;
      }
    }
    int v134 = v38;
    if (v7) {
      id v39 = objc_getProperty(v7, v36, 16, 1);
    }
    else {
      id v39 = 0;
    }
    unsigned int v133 = xpc_dictionary_get_BOOL(v39, nrXPCKeyWasInitiallySetupUsingIDSPairing);
    v147[0] = 0;
    id v137 = v21;
    if (v7) {
      id v41 = objc_getProperty(v7, v40, 16, 1);
    }
    else {
      id v41 = 0;
    }
    data = xpc_dictionary_get_data(v41, nrXPCKeyOutOfBandKey, v147);
    if (data)
    {
      id v2 = +[NSData _newZeroingDataWithBytes:data length:v147[0]];
      if (v7)
      {
LABEL_52:
        id v44 = objc_getProperty(v7, v43, 16, 1);
        goto LABEL_53;
      }
    }
    else
    {
      id v2 = 0;
      if (v7) {
        goto LABEL_52;
      }
    }
    id v44 = 0;
LABEL_53:
    BOOL v46 = xpc_dictionary_get_BOOL(v44, nrXPCKeyPairWithSPPLink);
    if (v7) {
      id v47 = objc_getProperty(v7, v45, 16, 1);
    }
    else {
      id v47 = 0;
    }
    BOOL v49 = xpc_dictionary_get_BOOL(v47, nrXPCKeyIsAltAccountPairing);
    size_t v146 = 0;
    if (v7) {
      id v50 = objc_getProperty(v7, v48, 16, 1);
    }
    else {
      id v50 = 0;
    }
    id v51 = xpc_dictionary_get_data(v50, nrXPCKeyRemoteDeviceMACAddress, &v146);
    if (v51)
    {
      id v52 = v51;
      id v53 = objc_alloc((Class)NSData);
      id v138 = [v53 initWithBytes:v52 length:v146];
    }
    else
    {
      id v138 = 0;
    }
    v144[0] = _NSConcreteStackBlock;
    v144[1] = 3221225472;
    v144[2] = sub_100059DC8;
    v144[3] = &unk_1001C7070;
    uint64_t v1 = v7;
    id v145 = v1;
    id v54 = objc_retainBlock(v144);
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v55 = (unsigned __int8 *)(id)qword_1001F4A18;
    if (v55)
    {
      int v57 = v55[8];

      if (v57)
      {
        id v117 = sub_10004A608();
        int v118 = _NRLogIsLevelEnabled();

        id v4 = v137;
        if (v118)
        {
          id v119 = sub_10004A608();
          _NRLogWithArgs();
        }
        ((void (*)(void *, uint64_t, const __CFString *))v54[2])(v54, -2016, @"Pairing was attempted while in fixed interface mode");
        uint64_t v80 = v138;
        goto LABEL_111;
      }
    }
    id v140 = (void (**)(void, uint64_t, const __CFString *))v54;
    BOOL v131 = v49;
    BOOL v132 = v46;
    if (v7) {
      id v58 = objc_getProperty(v1, v56, 16, 1);
    }
    else {
      id v58 = 0;
    }
    id v59 = xpc_dictionary_get_value(v58, nrXPCKeyOperationalPropData);
    id v136 = v59;
    if (!v59 || (uint64_t v60 = v59, xpc_get_type(v59) != (xpc_type_t)&_xpc_type_data))
    {
      id v61 = 0;
      goto LABEL_71;
    }
    id v82 = objc_alloc((Class)NSData);
    bytes_ptr = xpc_data_get_bytes_ptr(v60);
    id v3 = [v82 initWithBytes:bytes_ptr length:xpc_data_get_length(v60)];
    id v143 = 0;
    id v84 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v3 error:&v143];
    id v139 = v143;
    if (v84 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && !v139)
    {
      [v84 allowedLinkTypes];
      v86 = id v85 = v84;
      id v141 = v85;
      if ([v86 count])
      {
LABEL_101:

LABEL_129:
        id v61 = v141;
LABEL_71:
        sub_100117DF0(v61);
        if (v7) {
          id v63 = objc_getProperty(v1, v62, 16, 1);
        }
        else {
          id v63 = 0;
        }
        int v64 = xpc_dictionary_get_value(v63, nrXPCKeyPeerIPAddressData);
        id v141 = v61;
        id v139 = v64;
        if (v64 && (id v66 = v64, xpc_get_type(v64) == (xpc_type_t)&_xpc_type_data))
        {
          id v130 = v2;
          id v87 = objc_alloc((Class)NSData);
          id v88 = xpc_data_get_bytes_ptr(v66);
          id v81 = [v87 initWithBytes:v88 length:xpc_data_get_length(v66)];
          v129[1] = NSSet;
          v129[0] = objc_opt_class();
          uint64_t v89 = objc_opt_class();
          uint64_t v90 = objc_opt_class();
          uint64_t v91 = objc_opt_class();
          uint64_t v92 = objc_opt_class();
          uint64_t v93 = objc_opt_class();
          uint64_t v94 = objc_opt_class();
          uint64_t v95 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v129[0], v89, v90, v91, v92, v93, v94, objc_opt_class(), 0);
          id v142 = 0;
          id v3 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v95 fromData:v81 error:&v142];
          id v79 = v142;
          if (!v3 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0) || v79)
          {
            id v4 = v137;
            id v54 = v140;
            if (qword_1001F4920 != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            uint64_t v80 = v138;
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4920 != -1) {
                dispatch_once(&qword_1001F4920, &stru_1001C67F0);
              }
              _NRLogWithArgs();
            }
            v140[2](v140, -2005, @"Failed to unarchive peer IP properties");

            id v2 = v130;
            goto LABEL_109;
          }

          id v4 = v137;
          id v2 = v130;
          if (v7) {
            goto LABEL_76;
          }
        }
        else
        {
          id v3 = 0;
          id v4 = v137;
          if (v7)
          {
LABEL_76:
            id v67 = objc_getProperty(v1, v65, 16, 1);
LABEL_77:
            id v54 = v140;
            if (!xpc_dictionary_get_BOOL(v67, nrXPCKeyIsEphemeral))
            {
LABEL_92:
              if (v7) {
                id v77 = objc_getProperty(v1, v68, 16, 1);
              }
              else {
                id v77 = 0;
              }
              int v78 = xpc_dictionary_get_value(v77, nrXPCKeyCandidateService);
              id v79 = v78;
              uint64_t v80 = v138;
              if (v78 && xpc_get_type(v78) == (xpc_type_t)&_xpc_type_string)
              {
                string_ptr = xpc_string_get_string_ptr(v79);
                uint64_t v80 = v138;
                id v81 = +[NSString stringWithUTF8String:string_ptr];
              }
              else
              {
                id v81 = 0;
              }
              sub_10014314C((uint64_t)NRDLocalDevice, v4, int64, (unsigned __int16)v134, v133, v2, (void *)v132, v131, v80, v141, v3, v81, v54);
LABEL_109:

              id v84 = v141;
LABEL_110:

LABEL_111:
              uint64_t v19 = -2000;
              goto LABEL_142;
            }
            id v69 = v4;
            self;
            if (_NRIsUUIDNonZero())
            {
              uint64_t v70 = sub_10015BD9C();
              dispatch_assert_queue_V2(v70);

              sub_10013BB9C();
              id v71 = [(id)qword_1001F4D40 objectForKeyedSubscript:v69];
              if (v71) {
                goto LABEL_88;
              }
              if (qword_1001F4DA0 != -1) {
                dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4DA0 != -1) {
                  dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
                }
                id v72 = (id)qword_1001F4D98;
                id v128 = [v69 UUIDString];
                _NRLogWithArgs();
              }
              id v73 = sub_100137298((char *)[NRDLocalDevice alloc], v69);
              id v71 = v73;
              if (v73)
              {
                v73[24] = 1;
                [(id)qword_1001F4D40 setObject:v73 forKeyedSubscript:v69];
LABEL_88:

                self;
                if (qword_1001F4A20 == -1)
                {
LABEL_89:
                  id v54 = v140;
                  id v75 = (id)qword_1001F4A18;
                  if (v7) {
                    id v76 = objc_getProperty(v1, v74, 8, 1);
                  }
                  else {
                    id v76 = 0;
                  }
                  sub_1000B8F18((uint64_t)v75, v71, v76);

                  goto LABEL_92;
                }
LABEL_155:
                dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
                goto LABEL_89;
              }
              [(id)qword_1001F4D40 setObject:0 forKeyedSubscript:v69];
            }
            else
            {
              id v120 = sub_100135DDC();
              int v121 = _NRLogIsLevelEnabled();

              if (v121)
              {
                id v122 = sub_100135DDC();
                _NRLogWithArgs();
              }
            }

            id v123 = sub_10004A608();
            int v124 = _NRLogIsLevelEnabled();

            if (v124)
            {
              id v125 = sub_10004A608();
              _NRLogWithArgs();
            }
            id v7 = (void *)_os_log_pack_size();
            id v71 = (char *)v129 - ((__chkstk_darwin(v7) + 15) & 0xFFFFFFFFFFFFFFF0);
            __error();
LABEL_154:
            uint64_t v126 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v126 = 136446210;
            *(void *)(v126 + 4) = "handleRegisterDeviceByNRUUID";
            sub_10004A608();
            _NRLogAbortWithPack();
            goto LABEL_155;
          }
        }
        id v67 = 0;
        goto LABEL_77;
      }
      id v130 = v2;
      uint64_t v98 = [v85 allowedLinkSubtypes];
      id v99 = [v98 count];

      if (v99)
      {
        id v2 = v130;
        goto LABEL_129;
      }
      if (v7) {
        id v101 = objc_getProperty(v1, v100, 8, 1);
      }
      else {
        id v101 = 0;
      }
      uint64_t v102 = nrXPCEntitlementTesting;
      id v103 = v101;
      uint64_t v104 = +[NSString stringWithUTF8String:v102];
      LODWORD(v102) = sub_100059EE4(v103, v104);

      id v105 = sub_10004A608();
      if (v102)
      {
        int v106 = _NRLogIsLevelEnabled();

        id v2 = v130;
        if (v106)
        {
          id v107 = sub_10004A608();
          _NRLogWithArgs();
        }
        id v86 = v141;
        id v141 = 0;
        goto LABEL_101;
      }
      int v108 = _NRLogIsLevelEnabled();

      id v2 = v130;
      if (v108)
      {
        id v109 = sub_10004A608();
        _NRLogWithArgs();

        id v84 = v141;
        CFStringRef v97 = @"Received invalid operational properties";
        id v4 = v137;
        uint64_t v80 = v138;
        id v54 = v140;
      }
      else
      {
        CFStringRef v97 = @"Received invalid operational properties";
        id v4 = v137;
        uint64_t v80 = v138;
        id v54 = v140;
        id v84 = v141;
      }
    }
    else
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v4 = v137;
      uint64_t v80 = v138;
      id v54 = v140;
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        _NRLogWithArgs();
      }
      CFStringRef v97 = @"Failed to unarchive operational properties";
    }
    ((void (*)(void *, uint64_t, const __CFString *))v54[2])(v54, -2005, v97);
    goto LABEL_110;
  }
  id v110 = sub_10004A608();
  int v111 = _NRLogIsLevelEnabled();

  if (!v111) {
    goto LABEL_141;
  }
  id v11 = sub_10004A608();
  id v18 = sub_10004A6A0(v7, v112);
LABEL_18:
  _NRLogWithArgs();

  uint64_t v19 = -2005;
LABEL_142:

  return v19;
}

void sub_100059DC8(uint64_t a1, int64_t a2, void *a3)
{
  id v18 = a3;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v5, 24, 1);
  }
  xpc_dictionary_set_int64(Property, nrXPCKeyResult, a2);
  if (v18)
  {
    id v9 = v18;
    id v10 = *(id *)(a1 + 32);
    if (v10) {
      id v10 = objc_getProperty(v10, v8, 24, 1);
    }
    id v11 = (const char *)nrXPCKeyErrorDescription;
    id v12 = v10;
    xpc_dictionary_set_string(v12, v11, (const char *)[v9 UTF8String]);
  }
  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v7, 8, 1);
  }
  id v15 = (_xpc_connection_s *)v13;
  id v16 = *(void **)(a1 + 32);
  if (v16) {
    id v17 = objc_getProperty(v16, v14, 24, 1);
  }
  else {
    id v17 = 0;
  }
  xpc_connection_send_message(v15, v17);
}

BOOL sub_100059EE4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 UTF8String];
  id v5 = (void *)xpc_connection_copy_entitlement_value();

  BOOL v6 = v5 && xpc_get_type(v5) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v5);
  return v6;
}

uint64_t sub_100059F74(void *a1)
{
  uint64_t v1 = a1;
  id v2 = sub_10014628C();
  if (v2)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v4 = (id)qword_1001F4918;
      if (v1)
      {
        id v5 = (void *)v1[4];
        if (!v5)
        {
          id Property = (_xpc_connection_s *)objc_getProperty(v1, v3, 8, 1);
          uint64_t pid = xpc_connection_get_pid(Property);
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
          bzero(buffer, 0x400uLL);
          if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && LOBYTE(buffer[0]))
          {
            id v9 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

            id v8 = v9;
          }
          id v10 = (void *)v1[4];
          v1[4] = v8;

          id v5 = (void *)v1[4];
        }
        id v11 = v5;
      }
      else
      {
        id v11 = 0;
      }
      [v2 UUIDString];
      v29 = id v28 = v11;
      uint64_t v27 = 606;
      id v25 = "";
      unsigned int v26 = "handleCompanionLinkCopyBestTestingNRUUID";
      _NRLogWithArgs();
    }
    buffer[0] = 0;
    buffer[1] = 0;
    [v2 getUUIDBytes:buffer, v25, v26, v27, v28, v29];
    if (v1) {
      id v13 = objc_getProperty(v1, v12, 24, 1);
    }
    else {
      id v13 = 0;
    }
    xpc_dictionary_set_uuid(v13, nrXPCKeyNRUUID, (const unsigned __int8 *)buffer);
    uint64_t v14 = 0;
  }
  else
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v16 = (id)qword_1001F4918;
      if (v1)
      {
        id v17 = (void *)v1[4];
        if (!v17)
        {
          id v18 = (_xpc_connection_s *)objc_getProperty(v1, v15, 8, 1);
          uint64_t v19 = xpc_connection_get_pid(v18);
          id v20 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v19];
          bzero(buffer, 0x400uLL);
          if ((int)v19 >= 1 && proc_pidpath(v19, buffer, 0x400u) >= 1 && LOBYTE(buffer[0]))
          {
            id v21 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v19];

            id v20 = v21;
          }
          id v22 = (void *)v1[4];
          v1[4] = v20;

          id v17 = (void *)v1[4];
        }
        id v23 = v17;
      }
      else
      {
        id v23 = 0;
      }
      _NRLogWithArgs();
    }
    uint64_t v14 = -2011;
  }

  return v14;
}

uint64_t sub_10005A324(void *a1)
{
  uint64_t v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v4 = (id)qword_1001F4918;
    if (v1)
    {
      id v5 = (void *)v1[4];
      if (!v5)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v3, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v8 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v9 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v8 = v9;
        }
        id v10 = (void *)v1[4];
        v1[4] = v8;

        id v5 = (void *)v1[4];
      }
      id v11 = v5;
    }
    else
    {
      id v11 = 0;
    }
    _NRLogWithArgs();
  }
  if (v1) {
    id v12 = objc_getProperty(v1, v2, 24, 1);
  }
  else {
    id v12 = 0;
  }
  xpc_dictionary_set_uint64(v12, nrXPCKeyNetworkRelayVersion, 0x16uLL);

  return 0;
}

uint64_t sub_10005A530(void *a1)
{
  id Property = a1;
  id v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  string = xpc_dictionary_get_string(Property, nrXPCKeyIDSDeviceID);
  if (!string)
  {
    id v46 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_45;
    }
    id v28 = sub_10004A608();
    id v35 = sub_10004A6A0(v4, v48);
    goto LABEL_44;
  }
  id v7 = string;
  if (*string)
  {
    if (v4) {
      id v8 = objc_getProperty(v4, v6, 16, 1);
    }
    else {
      id v8 = 0;
    }
    id v9 = (void *)xpc_dictionary_get_BOOL(v8, nrXPCKeyShouldCreateDevice);
    id v10 = +[NSString stringWithUTF8String:v7];
    if (v10)
    {
      id v11 = v10;
      id v12 = sub_100142D18((uint64_t)NRDLocalDevice, v10, (int)v9);
      uint64_t v1 = v12;
      if (v12) {
        char v13 = 1;
      }
      else {
        char v13 = (char)v9;
      }
      if ((v13 & 1) == 0)
      {
        id v9 = &unk_1001F4000;
        if (qword_1001F4920 == -1)
        {
LABEL_47:
          if (!_NRLogIsLevelEnabled())
          {
LABEL_60:

            uint64_t v36 = 0;
            goto LABEL_61;
          }
          if (*((void *)v9 + 292) != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          id v15 = (id)qword_1001F4918;
          if (v4)
          {
            int v38 = (void *)v4[4];
            if (!v38)
            {
              id v39 = (_xpc_connection_s *)objc_getProperty(v4, v37, 8, 1);
              uint64_t pid = xpc_connection_get_pid(v39);
              id v41 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
              bzero(v58, 0x400uLL);
              if ((int)pid >= 1 && proc_pidpath(pid, v58, 0x400u) >= 1 && LOBYTE(v58[0]))
              {
                id v42 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v58, pid];

                id v41 = v42;
              }
              id v43 = (void *)v4[4];
              v4[4] = v41;

              int v38 = (void *)v4[4];
            }
            id v44 = v38;
          }
          else
          {
            id v44 = 0;
          }
          _NRLogWithArgs();

LABEL_59:
          goto LABEL_60;
        }
LABEL_70:
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        goto LABEL_47;
      }
      if (v12)
      {
        id v14 = *((id *)v12 + 4);
        if (v14)
        {
          id v15 = v14;
          if (qword_1001F4920 != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4920 != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            id v17 = (id)qword_1001F4918;
            if (v4)
            {
              id v18 = (void *)v4[4];
              if (!v18)
              {
                uint64_t v19 = (_xpc_connection_s *)objc_getProperty(v4, v16, 8, 1);
                uint64_t v20 = xpc_connection_get_pid(v19);
                id v21 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v20];
                bzero(v58, 0x400uLL);
                if ((int)v20 >= 1 && proc_pidpath(v20, v58, 0x400u) >= 1 && LOBYTE(v58[0]))
                {
                  id v22 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v58, v20];

                  id v21 = v22;
                }
                id v23 = (void *)v4[4];
                v4[4] = v21;

                id v18 = (void *)v4[4];
              }
              id v24 = v18;
            }
            else
            {
              id v24 = 0;
            }
            uint64_t v56 = [v15 UUIDString];
            _NRLogWithArgs();
          }
          v58[0] = 0;
          v58[1] = 0;
          [v15 getUUIDBytes:v58];
          if (v4) {
            id v26 = objc_getProperty(v4, v25, 24, 1);
          }
          else {
            id v26 = 0;
          }
          xpc_dictionary_set_uuid(v26, nrXPCKeyNRUUID, (const unsigned __int8 *)v58);
          goto LABEL_59;
        }
      }
      id v52 = sub_10004A608();
      int v53 = _NRLogIsLevelEnabled();

      if (v53)
      {
        id v54 = sub_10004A608();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v49 = sub_10004A608();
      int v50 = _NRLogIsLevelEnabled();

      if (v50)
      {
        id v51 = sub_10004A608();
        _NRLogWithArgs();
      }
    }
    id v4 = (void *)_os_log_pack_size();
    id v11 = (char *)&v58[-1] - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v55 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v55 = 136446210;
    *(void *)(v55 + 4) = "handleCompanionLinkCopyNRUUIDForIDSDeviceID";
    sub_10004A608();
    _NRLogAbortWithPack();
    goto LABEL_70;
  }
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v28 = (id)qword_1001F4918;
    if (v4)
    {
      id v29 = (void *)v4[4];
      if (!v29)
      {
        id v30 = (_xpc_connection_s *)objc_getProperty(v4, v27, 8, 1);
        uint64_t v31 = xpc_connection_get_pid(v30);
        id v32 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v31];
        bzero(v58, 0x400uLL);
        if ((int)v31 >= 1 && proc_pidpath(v31, v58, 0x400u) >= 1 && LOBYTE(v58[0]))
        {
          id v33 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v58, v31];

          id v32 = v33;
        }
        id v34 = (void *)v4[4];
        v4[4] = v32;

        id v29 = (void *)v4[4];
      }
      id v35 = v29;
    }
    else
    {
      id v35 = 0;
    }
LABEL_44:
    _NRLogWithArgs();
  }
LABEL_45:
  uint64_t v36 = -2005;
LABEL_61:

  return v36;
}

uint64_t sub_10005AD1C(void *a1)
{
  id Property = a1;
  id v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyNRUUID);
  if (!uuid)
  {
    id v43 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = sub_10004A608();
      id v15 = sub_10004A6A0(v4, v45);
LABEL_17:
      _NRLogWithArgs();

      uint64_t v16 = -2005;
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  BOOL v6 = uuid;
  if (uuid_is_null(uuid))
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    uint64_t v1 = (id *)&unk_1001F4000;
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 == -1) {
        goto LABEL_9;
      }
      goto LABEL_60;
    }
LABEL_55:
    uint64_t v16 = -2005;
    goto LABEL_56;
  }
  id v17 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v6];
  if (!v17)
  {
    id v47 = sub_10004A608();
    int v48 = _NRLogIsLevelEnabled();

    if (v48)
    {
      id v49 = sub_10004A608();
      _NRLogWithArgs();
    }
    id v4 = (void *)_os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v50 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v50 = 136446210;
    *(void *)(v50 + 4) = "handleCompanionLinkCopyBluetoothUUIDForNRUUID";
    sub_10004A608();
    _NRLogAbortWithPack();
LABEL_60:
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
LABEL_9:
    id v8 = v1[291];
    if (v4)
    {
      id v9 = (void *)v4[4];
      if (!v9)
      {
        id v10 = (_xpc_connection_s *)objc_getProperty(v4, v7, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v10);
        id v12 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(v52, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, v52, 0x400u) >= 1 && LOBYTE(v52[0]))
        {
          id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v52, pid];

          id v12 = v13;
        }
        id v14 = (void *)v4[4];
        v4[4] = v12;

        id v9 = (void *)v4[4];
      }
      id v15 = v9;
    }
    else
    {
      id v15 = 0;
    }
    goto LABEL_17;
  }
  id v18 = v17;
  uint64_t v19 = (id *)sub_10013DD58((uint64_t)NRDLocalDevice, v17, 0);
  uint64_t v20 = v19;
  if (v19)
  {
    id v21 = v19[5];
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v23 = (id)qword_1001F4918;
      if (v4)
      {
        id v24 = (void *)v4[4];
        if (!v24)
        {
          id v25 = (_xpc_connection_s *)objc_getProperty(v4, v22, 8, 1);
          uint64_t v26 = xpc_connection_get_pid(v25);
          id v27 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v26];
          bzero(v52, 0x400uLL);
          if ((int)v26 >= 1 && proc_pidpath(v26, v52, 0x400u) >= 1 && LOBYTE(v52[0]))
          {
            id v28 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v52, v26];

            id v27 = v28;
          }
          id v29 = (void *)v4[4];
          v4[4] = v27;

          id v24 = (void *)v4[4];
        }
        id v30 = v24;
      }
      else
      {
        id v30 = 0;
      }
      uint64_t v31 = [v18 UUIDString];
      id v51 = [v21 UUIDString];
      _NRLogWithArgs();
    }
    v52[0] = 0;
    v52[1] = 0;
    [v21 getUUIDBytes:v52];
    if (v4) {
      id v33 = objc_getProperty(v4, v32, 24, 1);
    }
    else {
      id v33 = 0;
    }
    xpc_dictionary_set_uuid(v33, nrXPCKeyBluetoothUUID, (const unsigned __int8 *)v52);

    uint64_t v16 = 0;
  }
  else
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v35 = (id)qword_1001F4918;
      if (v4)
      {
        uint64_t v36 = (void *)v4[4];
        if (!v36)
        {
          int v37 = (_xpc_connection_s *)objc_getProperty(v4, v34, 8, 1);
          uint64_t v38 = xpc_connection_get_pid(v37);
          id v39 = [[objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v38];
          bzero(v52, 0x400uLL);
          if ((int)v38 >= 1 && proc_pidpath(v38, v52, 0x400u) >= 1 && LOBYTE(v52[0]))
          {
            id v40 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v52, v38];

            id v39 = v40;
          }
          id v41 = (void *)v4[4];
          v4[4] = v39;

          uint64_t v36 = (void *)v4[4];
        }
        id v42 = v36;
      }
      else
      {
        id v42 = 0;
      }
      _NRLogWithArgs();
    }
    uint64_t v16 = -2008;
  }

LABEL_56:
  return v16;
}

uint64_t sub_10005B440(void *a1)
{
  id Property = a1;
  id v5 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v4, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyBluetoothUUID);
  if (!uuid)
  {
    id v36 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_19;
    }
    id v9 = sub_10004A608();
    id v16 = sub_10004A6A0(v5, v38);
LABEL_18:
    _NRLogWithArgs();

LABEL_19:
    uint64_t v17 = -2005;
    goto LABEL_40;
  }
  id v7 = uuid;
  if (uuid_is_null(uuid))
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_19;
    }
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v9 = (id)qword_1001F4918;
    if (v5)
    {
      id v10 = (void *)v5[4];
      if (!v10)
      {
        id v11 = (_xpc_connection_s *)objc_getProperty(v5, v8, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v11);
        id v13 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(v48, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, v48, 0x400u) >= 1 && LOBYTE(v48[0]))
        {
          id v14 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v48, pid];

          id v13 = v14;
        }
        id v15 = (void *)v5[4];
        void v5[4] = v13;

        id v10 = (void *)v5[4];
      }
      id v16 = v10;
    }
    else
    {
      id v16 = 0;
    }
    goto LABEL_18;
  }
  id v18 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v7];
  if (!v18)
  {
    id v39 = sub_10004A608();
    int v40 = _NRLogIsLevelEnabled();

    if (v40)
    {
      id v41 = sub_10004A608();
      _NRLogWithArgs();
    }
    goto LABEL_48;
  }
  id v19 = v18;
  self;
  uint64_t v20 = sub_10015BD9C();
  dispatch_assert_queue_V2(v20);

  id v21 = (char *)v19;
  self;
  id v2 = sub_100142940((uint64_t)NRDLocalDevice, v21, 1);

  if (v2) {
    id v22 = (void *)*((void *)v2 + 4);
  }
  else {
    id v22 = 0;
  }
  id v1 = v22;

  if (!v1)
  {
    id v42 = sub_10004A608();
    int v43 = _NRLogIsLevelEnabled();

    if (v43)
    {
      id v44 = sub_10004A608();
      _NRLogWithArgs();
    }
LABEL_48:
    id v5 = (void *)_os_log_pack_size();
    id v21 = (char *)&v48[-1] - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v45 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v45 = 136446210;
    *(void *)(v45 + 4) = "handleCompanionLinkCopyNRUUIDForBluetoothUUID";
    sub_10004A608();
    _NRLogAbortWithPack();
    goto LABEL_49;
  }
  id v2 = (char *)&unk_1001F4000;
  if (qword_1001F4920 != -1) {
LABEL_49:
  }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  if (_NRLogIsLevelEnabled())
  {
    if (*((void *)v2 + 292) != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v24 = (id)qword_1001F4918;
    if (v5)
    {
      id v25 = (void *)v5[4];
      if (!v25)
      {
        uint64_t v26 = (_xpc_connection_s *)objc_getProperty(v5, v23, 8, 1);
        uint64_t v27 = xpc_connection_get_pid(v26);
        id v28 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v27];
        bzero(v48, 0x400uLL);
        if ((int)v27 >= 1 && proc_pidpath(v27, v48, 0x400u) >= 1 && LOBYTE(v48[0]))
        {
          id v29 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v48, v27];

          id v28 = v29;
        }
        id v30 = (void *)v5[4];
        void v5[4] = v28;

        id v25 = (void *)v5[4];
      }
      id v31 = v25;
    }
    else
    {
      id v31 = 0;
    }
    id v32 = [v21 UUIDString];
    id v46 = [v1 UUIDString];
    _NRLogWithArgs();
  }
  v48[0] = 0;
  v48[1] = 0;
  [v1 getUUIDBytes:v48];
  if (v5) {
    id v34 = objc_getProperty(v5, v33, 24, 1);
  }
  else {
    id v34 = 0;
  }
  xpc_dictionary_set_uuid(v34, nrXPCKeyNRUUID, (const unsigned __int8 *)v48);

  uint64_t v17 = 0;
LABEL_40:

  return v17;
}

uint64_t sub_10005BAD4(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  id v4 = xpc_dictionary_get_value(Property, nrXPCKeyMPKLLoggingVal);
  if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_BOOL)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      _NRLogWithArgs();
      uint64_t v5 = -2005;
    }
    else
    {
      uint64_t v5 = -2005;
    }
    goto LABEL_72;
  }
  BOOL value = xpc_BOOL_get_value(v4);
  if (qword_1001F4A10 != -1) {
    dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (value) {
      id v7 = "En";
    }
    else {
      id v7 = "Dis";
    }
    if (gNRMPKLLoggingEnabled) {
      id v8 = "en";
    }
    else {
      id v8 = "dis";
    }
    int v37 = v7;
    id v39 = v8;
    uint64_t v35 = 142;
    id v31 = "";
    id v33 = "terminusdSettingsSetMPKLLoggingEnabled";
    _NRLogWithArgs();
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001F49F0);
  gNRMPKLLoggingEnabled = value;
  id v9 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:@"/var/mobile/Library/terminus/com.apple.terminus.plist"];
  if (!v9) {
    id v9 = objc_alloc_init((Class)NSMutableDictionary);
  }
  id v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", value, v31, v33, v35, v37, v39);
  [v9 setObject:v10 forKeyedSubscript:@"MPKLLogging"];

  LODWORD(v10) = sub_100113D08(@"/var/mobile/Library/terminus/com.apple.terminus.plist", v9, 1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001F49F0);
  if (v10)
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_45;
    }
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (gNRMPKLLoggingEnabled) {
      id v11 = "en";
    }
    else {
      id v11 = "dis";
    }
    uint64_t v36 = 153;
    uint64_t v38 = v11;
    id v32 = "";
    id v34 = "terminusdSettingsSetMPKLLoggingEnabled";
  }
  else
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_45;
    }
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (gNRMPKLLoggingEnabled) {
      id v12 = "en";
    }
    else {
      id v12 = "dis";
    }
    uint64_t v36 = 155;
    uint64_t v38 = v12;
    id v32 = "";
    id v34 = "terminusdSettingsSetMPKLLoggingEnabled";
  }
  _NRLogWithArgs();
LABEL_45:

  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v13 = (id)qword_1001F4A18;
  id v14 = v13;
  if (v13)
  {
    uint64_t v15 = *((void *)v13 + 5);
    if (v15)
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      id v16 = *(id *)(v15 + 40);
      id v17 = [v16 countByEnumeratingWithState:&v40 objects:buffer count:16];
      if (v17)
      {
        id v18 = v17;
        uint64_t v19 = *(void *)v41;
        do
        {
          for (uint64_t i = 0; i != v18; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v41 != v19) {
              objc_enumerationMutation(v16);
            }
            [*(id *)(*((void *)&v40 + 1) + 8 * i) virtualInterface:v32 v34:v36 v38];
          }
          id v18 = [v16 countByEnumeratingWithState:&v40 objects:buffer count:16];
        }
        while (v18);
      }
    }
  }

  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v22 = (id)qword_1001F4918;
    if (v3)
    {
      id v23 = (void *)v3[4];
      if (!v23)
      {
        id v24 = (_xpc_connection_s *)objc_getProperty(v3, v21, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v24);
        id v26 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v27 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v26 = v27;
        }
        id v28 = (void *)v3[4];
        void v3[4] = v26;

        id v23 = (void *)v3[4];
      }
      id v29 = v23;
    }
    else
    {
      id v29 = 0;
    }
    _NRLogWithArgs();
  }
  uint64_t v5 = 0;
LABEL_72:

  return v5;
}

uint64_t sub_10005C154(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  id v4 = xpc_dictionary_get_value(Property, nrXPCKeyPacketLoggingVal);
  if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_BOOL)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      _NRLogWithArgs();
      uint64_t v5 = -2005;
    }
    else
    {
      uint64_t v5 = -2005;
    }
    goto LABEL_80;
  }
  BOOL value = xpc_BOOL_get_value(v4);
  if (qword_1001F4A10 != -1) {
    dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    id v7 = "Dis";
    if (value) {
      id v7 = "En";
    }
    if (gNRPacketLoggingEnabled) {
      id v8 = "en";
    }
    else {
      id v8 = "dis";
    }
    long long v41 = v7;
    long long v43 = v8;
    uint64_t v39 = 122;
    uint64_t v35 = "";
    int v37 = "terminusdSettingsSetPacketLoggingEnabled";
    _NRLogWithArgs();
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001F49F0);
  gNRPacketLoggingEnabled = value;
  id v9 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:@"/var/mobile/Library/terminus/com.apple.terminus.plist"];
  if (!v9) {
    id v9 = objc_alloc_init((Class)NSMutableDictionary);
  }
  id v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", value, v35, v37, v39, v41, v43);
  [v9 setObject:v10 forKeyedSubscript:@"PacketLogging"];

  LODWORD(v10) = sub_100113D08(@"/var/mobile/Library/terminus/com.apple.terminus.plist", v9, 1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001F49F0);
  if (v10)
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_44;
    }
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (gNRPacketLoggingEnabled) {
      id v11 = "en";
    }
    else {
      id v11 = "dis";
    }
    uint64_t v40 = 133;
    long long v42 = v11;
    uint64_t v36 = "";
    uint64_t v38 = "terminusdSettingsSetPacketLoggingEnabled";
  }
  else
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_44;
    }
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (gNRPacketLoggingEnabled) {
      id v12 = "en";
    }
    else {
      id v12 = "dis";
    }
    uint64_t v40 = 135;
    long long v42 = v12;
    uint64_t v36 = "";
    uint64_t v38 = "terminusdSettingsSetPacketLoggingEnabled";
  }
  _NRLogWithArgs();
LABEL_44:

  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v14 = (id)qword_1001F4918;
    if (value) {
      uint64_t v15 = "En";
    }
    else {
      uint64_t v15 = "Dis";
    }
    if (v3)
    {
      id v16 = (void *)v3[4];
      if (!v16)
      {
        id v17 = (_xpc_connection_s *)objc_getProperty(v3, v13, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v17);
        id v19 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v20 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v19 = v20;
        }
        id v21 = (void *)v3[4];
        void v3[4] = v19;

        id v16 = (void *)v3[4];
      }
      id v22 = v16;
    }
    else
    {
      id v22 = 0;
    }
    long long v42 = v15;
    id v44 = v22;
    uint64_t v40 = 480;
    uint64_t v36 = "";
    uint64_t v38 = "handleSetPacketLogging";
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v23 = (unsigned __int8 *)(id)qword_1001F4A18;
  if (v23 && (int v24 = v23[10], v23, v24))
  {
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    uint64_t v45 = v4;
    id v46 = v3;
    id v25 = (id *)(id)qword_1001F4A18;
    id v26 = v25;
    if (v25)
    {
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      id obj = v25[27];
      id v27 = [obj countByEnumeratingWithState:&v48 objects:buffer count:16];
      if (v27)
      {
        id v28 = v27;
        uint64_t v29 = *(void *)v49;
        do
        {
          for (uint64_t i = 0; i != v28; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v49 != v29) {
              objc_enumerationMutation(obj);
            }
            id v31 = [v26[27] objectForKeyedSubscript:*(void *)(*((void *)&v48 + 1) + 8 * i), v36, v38, v40, v42, v44];
            if (v31)
            {
              id v32 = objc_alloc_init((Class)NSMutableDictionary);
              id v33 = +[NSNumber numberWithBool:gNRPacketLoggingEnabled];
              [v32 setObject:v33 forKeyedSubscript:@"packet-logging"];

              sub_1000FACEC((uint64_t)v31, v32);
            }
          }
          id v28 = [obj countByEnumeratingWithState:&v48 objects:buffer count:16];
        }
        while (v28);
      }
    }
    uint64_t v5 = 0;
    id v4 = v45;
    id v3 = v46;
  }
  else
  {
    uint64_t v5 = 0;
  }
LABEL_80:

  return v5;
}

uint64_t sub_10005C890(void *a1)
{
  id Property = a1;
  uint64_t v5 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v4, 16, 1);
  }
  uuid = xpc_dictionary_get_uuid(Property, nrXPCKeyNRUUID);
  if (uuid)
  {
    id v7 = uuid;
    if (uuid_is_null(uuid))
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v9 = (id)qword_1001F4918;
        if (v5)
        {
          id v10 = (void *)v5[4];
          if (!v10)
          {
            id v11 = (_xpc_connection_s *)objc_getProperty(v5, v8, 8, 1);
            uint64_t pid = xpc_connection_get_pid(v11);
            id v13 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
            bzero(v62, 0x400uLL);
            if ((int)pid >= 1 && proc_pidpath(pid, v62, 0x400u) >= 1 && LOBYTE(v62[0]))
            {
              id v14 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v62, pid];

              id v13 = v14;
            }
            uint64_t v15 = (void *)v5[4];
            void v5[4] = v13;

            id v10 = (void *)v5[4];
          }
          id v16 = v10;
        }
        else
        {
          id v16 = 0;
        }
        goto LABEL_18;
      }
LABEL_75:
      uint64_t v17 = -2005;
      goto LABEL_76;
    }
    id v18 = (char *)[objc_alloc((Class)NSUUID) initWithUUIDBytes:v7];
    if (v18)
    {
      id v20 = v18;
      if (v5) {
        id v21 = objc_getProperty(v5, v19, 16, 1);
      }
      else {
        id v21 = 0;
      }
      char uint64 = xpc_dictionary_get_uint64(v21, nrXPCKeyDataProtectionClass);
      id v2 = &unk_1001F4000;
      if (qword_1001F4920 == -1)
      {
LABEL_23:
        if (_NRLogIsLevelEnabled())
        {
          if (v2[292] != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          id v22 = (id)qword_1001F4918;
          id String = (void *)NRDataProtectionClassCreateString();
          if (v5)
          {
            id v25 = (void *)v5[4];
            if (!v25)
            {
              id v26 = (_xpc_connection_s *)objc_getProperty(v5, v23, 8, 1);
              uint64_t v27 = xpc_connection_get_pid(v26);
              id v28 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v27];
              bzero(v62, 0x400uLL);
              if ((int)v27 >= 1 && proc_pidpath(v27, v62, 0x400u) >= 1 && LOBYTE(v62[0]))
              {
                id v29 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v62, v27];

                id v28 = v29;
              }
              id v30 = (void *)v5[4];
              void v5[4] = v28;

              id v25 = (void *)v5[4];
            }
            id v31 = v25;
          }
          else
          {
            id v31 = 0;
          }
          _NRLogWithArgs();
        }
        if (uint64 == 1) {
          char v32 = 3;
        }
        else {
          char v32 = uint64;
        }
        id v33 = sub_10013DD58((uint64_t)NRDLocalDevice, v20, 0);
        id v34 = v33;
        if (!v33)
        {
          if (v2[292] != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (v2[292] != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            id v37 = (id)qword_1001F4918;
            if (v5)
            {
              uint64_t v38 = (void *)v5[4];
              if (!v38)
              {
                uint64_t v39 = (_xpc_connection_s *)objc_getProperty(v5, v36, 8, 1);
                uint64_t v40 = xpc_connection_get_pid(v39);
                id v41 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v40];
                bzero(v62, 0x400uLL);
                if ((int)v40 >= 1 && proc_pidpath(v40, v62, 0x400u) >= 1 && LOBYTE(v62[0]))
                {
                  id v42 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v62, v40];

                  id v41 = v42;
                }
                long long v43 = (void *)v5[4];
                void v5[4] = v41;

                uint64_t v38 = (void *)v5[4];
              }
              id v44 = v38;
            }
            else
            {
              id v44 = 0;
            }
            _NRLogWithArgs();

            uint64_t v17 = -2008;
          }
          else
          {
            uint64_t v17 = -2008;
          }
          goto LABEL_72;
        }
        v62[0] = 0uLL;
        if (v32 == 4)
        {
          sub_100141A68(v33, v62);
        }
        else
        {
          if (v32 != 3)
          {
            if (v2[292] != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (v2[292] != -1) {
                dispatch_once(&qword_1001F4920, &stru_1001C67F0);
              }
              id v47 = (id)qword_1001F4918;
              if (v5)
              {
                long long v48 = (void *)v5[4];
                if (!v48)
                {
                  long long v49 = (_xpc_connection_s *)objc_getProperty(v5, v46, 8, 1);
                  uint64_t v50 = xpc_connection_get_pid(v49);
                  id v51 = sub_100116370(v50, 1);
                  id v52 = (void *)v5[4];
                  void v5[4] = v51;

                  long long v48 = (void *)v5[4];
                }
                id v53 = v48;
              }
              else
              {
                id v53 = 0;
              }
              _NRLogWithArgs();
            }
            uint64_t v17 = -2005;
            goto LABEL_72;
          }
          sub_10014B038(v33, v62);
        }
        if (v5) {
          id v45 = objc_getProperty(v5, v35, 24, 1);
        }
        else {
          id v45 = 0;
        }
        xpc_dictionary_set_data(v45, nrXPCKeyIPv6Address, v62, 0x10uLL);
        uint64_t v17 = 0;
LABEL_72:

        goto LABEL_76;
      }
    }
    else
    {
      id v58 = sub_10004A608();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v60 = sub_10004A608();
        _NRLogWithArgs();
      }
      uint64_t v5 = (void *)_os_log_pack_size();
      id v20 = (char *)v62 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v61 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v61 = 136446210;
      *(void *)(v61 + 4) = "handleResolveEndpoint";
      sub_10004A608();
      _NRLogAbortWithPack();
    }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    goto LABEL_23;
  }
  id v54 = sub_10004A608();
  int v55 = _NRLogIsLevelEnabled();

  if (!v55) {
    goto LABEL_75;
  }
  id v9 = sub_10004A608();
  id v16 = sub_10004A6A0(v5, v56);
LABEL_18:
  _NRLogWithArgs();

  uint64_t v17 = -2005;
LABEL_76:

  return v17;
}

uint64_t sub_10005D0F4(void *a1)
{
  id v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [[objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    uint64_t v30 = 418;
    id v31 = v10;
    id v28 = "";
    id v29 = "handleCompanionLinkFlushBTPipe";
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v11 = (id *)(id)qword_1001F4A18;
  id v12 = v11;
  if (v11)
  {
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id v13 = v11[27];
    id v14 = [v13 countByEnumeratingWithState:&v32 objects:buffer count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v33;
      do
      {
        for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v33 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = [v12[27] objectForKeyedSubscript:*(void *)(*((void *)&v32 + 1) + 8 * i) v28, v29, v30, v31, (void)v32];
          id v19 = (void *)v18;
          if (v18)
          {
            dispatch_assert_queue_V2(*(dispatch_queue_t *)(v18 + 104));
            id v20 = sub_1000DC5BC((uint64_t)v19, 1, 0);
          }
          else
          {
            id v20 = 0;
          }

          if ([v20 state] == 8 || objc_msgSend(v20, "state") == 9) {
            sub_100074894(v20, @"Flushing pipe for testing", v21, v22, v23, v24, v25, v26, (uint64_t)v28);
          }
        }
        id v15 = [v13 countByEnumeratingWithState:&v32 objects:buffer count:16];
      }
      while (v15);
    }
  }
  return 0;
}

uint64_t sub_10005D42C(void *a1)
{
  id v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        id v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v11 = (id)qword_1001F4A18;
  unsigned int v12 = sub_1000AD478((uint64_t)v11);

  if (v1) {
    id v14 = objc_getProperty(v1, v13, 24, 1);
  }
  else {
    id v14 = 0;
  }
  xpc_dictionary_set_uint64(v14, nrXPCKeyCompanionLinkCount, v12);

  return 0;
}

uint64_t sub_10005D680(void *a1)
{
  id Property = a1;
  id v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  int v5 = xpc_dictionary_dup_fd(Property, nrXPCKeyCompanionLinkStatusDumpToFileDescriptor);
  if (v5 == -1)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_23;
    }
    if (qword_1001F4920 == -1) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
  if (v3) {
    id v6 = objc_getProperty(v3, v4, 16, 1);
  }
  else {
    id v6 = 0;
  }
  string = xpc_dictionary_get_string(v6, nrXPCKeyCompanionLinkStatusDumpToFilePath);
  if (string)
  {
    id v8 = [objc_alloc((Class)NSString) initWithUTF8String:string];
    id v9 = sub_10005DA8C();
    if (!v9)
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        _NRLogWithArgs();
      }
      uint64_t v14 = -2004;
      goto LABEL_45;
    }
    id v10 = v8;
    id v11 = v9;
    if (v5 < 0)
    {
      id v15 = sub_1001135C4();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_37;
      }
    }
    else
    {
      if (v10)
      {
        if ([v10 length])
        {
          unsigned int v12 = [v11 dataUsingEncoding:4];
          char v13 = sub_100113618(v5, v10, v12);

          if (v13)
          {
            uint64_t v14 = 0;
LABEL_45:

            goto LABEL_46;
          }
LABEL_38:
          if (qword_1001F4920 != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4920 != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            _NRLogWithArgs();
          }
          uint64_t v14 = -2012;
          goto LABEL_45;
        }
        id v19 = sub_1001135C4();
        int v20 = _NRLogIsLevelEnabled();

        if (v20) {
          goto LABEL_36;
        }
LABEL_37:

        goto LABEL_38;
      }
      id v17 = sub_1001135C4();
      int v18 = _NRLogIsLevelEnabled();

      if (!v18) {
        goto LABEL_37;
      }
    }
LABEL_36:
    id v21 = sub_1001135C4();
    _NRLogWithArgs();

    goto LABEL_37;
  }
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 == -1)
    {
LABEL_22:
      _NRLogWithArgs();
      goto LABEL_23;
    }
LABEL_47:
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v14 = -2005;
LABEL_46:
  close(v5);

  return v14;
}

id sub_10005DA8C()
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v109 = (id)qword_1001F4A18;
  if (!v109) {
    goto LABEL_159;
  }
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  id v1 = objc_alloc((Class)NSMutableString);
  if (_NRIsAppleInternal())
  {
    id v2 = objc_alloc_init((Class)NSMutableString);
    os_unfair_lock_lock(&stru_1001F4CE8);
    uint64_t v3 = byte_1001F4CEC;
    id v4 = [(id)qword_1001F4CE0 count];
    if (v4)
    {
      unint64_t v5 = (unint64_t)v4;
      uint64_t v6 = 0;
      int v7 = 0;
      do
      {
        id v8 = [(id)qword_1001F4CE0 objectAtIndexedSubscript:(v6 + v3) % v5];
        [v2 appendString:v8];

        uint64_t v6 = ++v7;
      }
      while (v5 > v7);
    }
    os_unfair_lock_unlock(&stru_1001F4CE8);
    id v9 = (void *)_NRCopyTimeString();
    [v2 appendFormat:@"\n    %@ : time of this status dump", v9];
  }
  else
  {
    id v10 = objc_alloc((Class)NSString);
    id v9 = (void *)_NRCopyTimeString();
    id v2 = [v10 initWithFormat:@"\n    %@ : time of this status dump", v9];
  }

  id v11 = [v1 initWithString:v2];
  self;
  unsigned int v12 = sub_10015BD9C();
  dispatch_assert_queue_V2(v12);

  sub_10013BB9C();
  id v13 = [(id)qword_1001F4D40 copy];
  id v14 = objc_alloc((Class)NSMutableString);
  id v15 = [v13 count];
  id v16 = [v13 count];
  id v17 = "s";
  if (v16 == (id)1) {
    id v17 = "";
  }
  id v18 = [v14 initWithFormat:@"--------- NRD Local Device Database Status (%llu device%s) ---------\n", v15, v17];
  long long v116 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  id v19 = v13;
  id v20 = [v19 countByEnumeratingWithState:&v116 objects:v121 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v117;
    do
    {
      for (uint64_t i = 0; i != v21; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v117 != v22) {
          objc_enumerationMutation(v19);
        }
        uint64_t v24 = [v19 objectForKeyedSubscript:*(void *)(*((void *)&v116 + 1) + 8 * i)];
        uint64_t v25 = (void *)sub_100140290(v24);
        [v18 appendFormat:@"\t%@\n", v25];
      }
      id v21 = [v19 countByEnumeratingWithState:&v116 objects:v121 count:16];
    }
    while (v21);
  }

  if (qword_1001F4D50)
  {
    [v18 appendFormat:@"\n--------- NRD Device Identity ---------"];
    uint64_t v26 = (void *)sub_100138464(qword_1001F4D50);
    Logid String = (void *)_NRKeyCreateLogString();
    [v18 appendFormat:@"\nPublic Key: %@\n", LogString];
  }
  [v11 appendFormat:@"\n\n%@", v18];

  [v11 appendFormat:@"\n--------- Director status ---------"];
  [v11 appendFormat:@"\nName: %@", @"Link Director"];
  if (*((unsigned char *)v109 + 12)) {
    id v28 = "YES";
  }
  else {
    id v28 = "NO";
  }
  [v11 appendFormat:@"\nEnabled: %s", v28];
  if (*((unsigned char *)v109 + 8)) {
    id v29 = "YES";
  }
  else {
    id v29 = "NO";
  }
  [v11 appendFormat:@"\nFixed Interface mode: %s", v29];
  if (*((_DWORD *)v109 + 6) == -1) {
    uint64_t v30 = "NO";
  }
  else {
    uint64_t v30 = "YES";
  }
  [v11 appendFormat:@"\nThermal watcher registered: %s", v30];
  StringFromThermalPressureLevel = (void *)createStringFromThermalPressureLevel();
  [v11 appendFormat:@"\nThermal Pressure: %@", StringFromThermalPressureLevel];

  [v11 appendFormat:@"\nSOCKS port: %u", 62742];
  [v11 appendFormat:@"\nSOCKS server: %@", *((void *)v109 + 18)];
  uint64_t port = *((void *)v109 + 19);
  if (port) {
    uint64_t port = nw_masque_server_get_port();
  }
  [v11 appendFormat:@"\nMASQUE port: %u", port];
  [v11 appendFormat:@"\nMASQUE server: %@", *((void *)v109 + 19)];
  id v33 = objc_alloc_init((Class)NSMutableDictionary);
  sub_1000B39F4(v33);
  id v105 = v33;
  [v11 appendFormat:@"\nFD Usage: %@", v33];
  uint64_t v115 = 0;
  id v34 = *((id *)v109 + 18);
  if (v34)
  {
    long long v35 = v34;
    int v36 = nw_shoes_server_fillout_statistics();

    if (v36) {
      [v11 appendFormat:@"\nSOCKS Server Connections total: %u max simultaneous: %u", HIDWORD(v115), v115];
    }
  }
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v37 = (dispatch_queue_t *)(id)qword_1001F4DD8;
  uint64_t v38 = v37;
  if (v37)
  {
    dispatch_assert_queue_V2(v37[2]);
    sub_100158D90((uint64_t)v38);
    id v39 = objc_alloc((Class)NSString);
    id String = (void *)NRDataProtectionClassCreateString();
    id v41 = [v39 initWithFormat:@"Unlocked data protection: %@", String];
  }
  else
  {
    id v41 = 0;
  }
  [v11 appendFormat:@"\n%@\n", v41];

  [v11 appendFormat:@"\n--------- Manager status ---------"];
  self;
  if (qword_1001F4D28 != -1) {
    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
  }
  id v42 = (id)qword_1001F4D20;
  long long v43 = v42;
  if (v42)
  {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v42 + 1));
    id v44 = objc_alloc_init((Class)NSMutableString);
    [v44 appendFormat:@"\nName: %@", @"Policy Session Manager"];
    [v44 appendFormat:@"\nPolicy Session: %@", v43[2]];
    [v44 appendFormat:@"\nInstalled policies: %@", v43[3]];
  }
  else
  {
    id v44 = 0;
  }
  [v11 appendFormat:@"\n%@", v44];

  id v45 = [*((id *)v109 + 5) copyStatusString];
  [v11 appendFormat:@"\n%@", v45];

  id v46 = (void *)*((void *)v109 + 6);
  if (v46)
  {
    id v47 = [v46 copyStatusString];
    [v11 appendFormat:@"\n%@\n", v47];
  }
  long long v48 = (void *)*((void *)v109 + 23);
  if (v48)
  {
    id v49 = [v48 copyStatusString];
    [v11 appendFormat:@"\n%@\n", v49];
  }
  uint64_t v50 = (void *)*((void *)v109 + 8);
  if (v50)
  {
    id v51 = [v50 copyStatusString];
    [v11 appendFormat:@"\n%@\n", v51];
  }
  uint64_t v52 = *((void *)v109 + 24);
  if (v52)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v52 + 32));
    id v53 = objc_alloc_init((Class)NSMutableString);
    [v53 appendFormat:@"\nName: %@", @"Link Manager - On-demand link setup"];
    if (*(unsigned char *)(v52 + 8)) {
      id v54 = "YES";
    }
    else {
      id v54 = "NO";
    }
    [v53 appendFormat:@"\nstarted: %s", v54];
    if (*(unsigned char *)(v52 + 9)) {
      int v55 = "YES";
    }
    else {
      int v55 = "NO";
    }
    [v53 appendFormat:@"\ncancelled: %s", v55];
    if (*(unsigned char *)(v52 + 10)) {
      uint64_t v56 = "YES";
    }
    else {
      uint64_t v56 = "NO";
    }
    [v53 appendFormat:@"\nsubscribed for PHS updates: %s", v56];
    if (*(unsigned char *)(v52 + 11)) {
      int v57 = "YES";
    }
    else {
      int v57 = "NO";
    }
    [v53 appendFormat:@"\nPHS active: %s", v57];
    if (*(unsigned char *)(v52 + 12)) {
      id v58 = "YES";
    }
    else {
      id v58 = "NO";
    }
    [v53 appendFormat:@"\nLLPHS active: %s", v58];
    if (*(unsigned char *)(v52 + 13)) {
      id v59 = "YES";
    }
    else {
      id v59 = "NO";
    }
    [v53 appendFormat:@"\nPHS provider: %s", v59];
    if (*(unsigned char *)(v52 + 14)) {
      id v60 = "YES";
    }
    else {
      id v60 = "NO";
    }
    [v53 appendFormat:@"\nPHS client: %s", v60];
    if (*(unsigned char *)(v52 + 15)) {
      uint64_t v61 = "YES";
    }
    else {
      uint64_t v61 = "NO";
    }
    [v53 appendFormat:@"\ncellular slicing: %s", v61];
    [v53 appendFormat:@"\nInternet relay valid peers: %@", *(void *)(v52 + 88)];
    [v11 appendFormat:@"\n%@\n", v53];
  }
  self;
  if (qword_1001F4AE8 != -1) {
    dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
  }
  uint64_t v62 = [(id)qword_1001F4AE0 description];
  [v11 appendFormat:@"\n%@\n", v62];

  self;
  if (qword_1001F47E8 != -1) {
    dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
  }
  id v63 = (id)qword_1001F47E0;
  if (v63)
  {
    id v64 = objc_alloc_init((Class)NSMutableString);
    [v64 appendFormat:@"\n---- NRIKEv2Listener ----"];
    [v64 appendFormat:@"\nIKEv2 Listener: %@", v63[2]];
    [v64 appendFormat:@"\nRegistered links: %@", v63[3]];
    [v64 appendFormat:@"\nRegistered pairing clients: %@", v63[4]];
    [v64 appendFormat:@"\nRegistered pairing manager: %@", v63[5]];
    [v64 appendFormat:@"\nPending sessions: %@", v63[6]];
  }
  else
  {
    id v64 = 0;
  }
  [v11 appendFormat:@"\n%@\n", v64];

  [v11 appendFormat:@"\nOrphaned Device Monitor Connections: %@\n", *((void *)v109 + 28)];
  [v11 appendFormat:@"\nOrphaned Device Preferences Connections: %@\n", *((void *)v109 + 29)];
  [v11 appendFormat:@"\nEphemeral Device Connections: %@\n", *((void *)v109 + 30)];
  long long v113 = 0u;
  long long v114 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  id obj = *((id *)v109 + 27);
  id v110 = [obj countByEnumeratingWithState:&v111 objects:v120 count:16];
  if (v110)
  {
    id v107 = v11;
    uint64_t v108 = *(void *)v112;
    do
    {
      for (j = 0; j != v110; j = (char *)j + 1)
      {
        if (*(void *)v112 != v108) {
          objc_enumerationMutation(obj);
        }
        uint64_t v66 = [*((id *)v109 + 27) objectForKeyedSubscript:*(void *)(*((void *)&v111 + 1) + 8 * (void)j)];
        uint64_t v67 = v66;
        if (v66)
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v66 + 104));
          id v68 = objc_alloc((Class)NSMutableString);
          id v69 = [*(id *)(v67 + 96) UUIDString];
          id v70 = [v68 initWithFormat:@"--------- Conductor %@ status ---------", v69];

          [v70 appendFormat:@"\nPrimary Link: %@", *(void *)(v67 + 128)];
          [v70 appendFormat:@"\nLinks: %@", *(void *)(v67 + 112)];
          if (*(void *)(v67 + 448)) {
            id v71 = (__CFString *)NEVirtualInterfaceCopyName();
          }
          else {
            id v71 = @"<nil>";
          }
          [v70 appendFormat:@"\nCatch-All Interface: %@", v71];
          if (*(unsigned char *)(v67 + 23)) {
            id v72 = "YES";
          }
          else {
            id v72 = "NO";
          }
          [v70 appendFormat:@"\nDisable Range Extension: %s", v72];
          if (*(unsigned char *)(v67 + 24)) {
            id v73 = "YES";
          }
          else {
            id v73 = "NO";
          }
          [v70 appendFormat:@"\nDisable Prefer Wi-Fi: %s", v73];
          [v70 appendFormat:@"\nPending requests: %@", *(void *)(v67 + 120)];
          if (*(unsigned char *)(v67 + 15)) {
            id v74 = "YES";
          }
          else {
            id v74 = "NO";
          }
          [v70 appendFormat:@"\nPrefer Wi-Fi request: %s", v74];
          id v75 = "Connected";
          if (!*(unsigned char *)(v67 + 32)) {
            id v75 = "NOT connected";
          }
          [v70 appendFormat:@"\nAPS connection status: %s", v75];
          if (*(unsigned char *)(v67 + 31)) {
            id v76 = "YES";
          }
          else {
            id v76 = "NO";
          }
          [v70 appendFormat:@"\nHas quick relay request: %s", v76];
          if (*(unsigned char *)(v67 + 17)) {
            id v77 = "YES";
          }
          else {
            id v77 = "NO";
          }
          [v70 appendFormat:@"\nDevice setup in progress: %s", v77];
          if (*(unsigned char *)(v67 + 11)) {
            int v78 = "YES";
          }
          else {
            int v78 = "NO";
          }
          [v70 appendFormat:@"\nPerpetual standalone Meadow mode: %s", v78];
          if (*(unsigned char *)(v67 + 30)) {
            id v79 = "YES";
          }
          else {
            id v79 = "NO";
          }
          [v70 appendFormat:@"\nHas phone call relay request: %s", v79];
          if (sub_1000DB9E0(v67)) {
            uint64_t v80 = "YES";
          }
          else {
            uint64_t v80 = "NO";
          }
          [v70 appendFormat:@"\nAlways On Wi-Fi supported by peer: %s", v80];
          [v70 appendFormat:@"\nLast sent WiFi endpoint: %@", *(void *)(v67 + 136)];
          [v70 appendFormat:@"\nLast sent WiFi signature: %@", *(void *)(v67 + 144)];
          if (*(unsigned char *)(v67 + 38)) {
            id v81 = "YES";
          }
          else {
            id v81 = "NO";
          }
          [v70 appendFormat:@"\nPermitted clients policies added: %s", v81];
          if (*(unsigned char *)(v67 + 10)) {
            id v82 = "YES";
          }
          else {
            id v82 = "NO";
          }
          [v70 appendFormat:@"\nAWDL supported: %s", v82];
          [v70 appendFormat:@"\nDevice monitor(s): %@", *(void *)(v67 + 168)];
          [v70 appendFormat:@"\nDevice Preferences Manager(s): %@", *(void *)(v67 + 184)];
          if (*(unsigned char *)(v67 + 42)) {
            id v83 = "YES";
          }
          else {
            id v83 = "NO";
          }
          [v70 appendFormat:@"\nBuffer limits set: %s", v83];
          self;
          if (qword_1001F48B0 != -1) {
            dispatch_once(&qword_1001F48B0, &stru_1001C64C0);
          }
          id v84 = (id)qword_1001F48A8;
          [v70 appendFormat:@"\nNRLinkDirectorMessage Manager: %@", v84];

          [v70 appendFormat:@"\nALU Monitor: %@", *(void *)(v67 + 584)];
          [v70 appendFormat:@"\nAS Client: %@", *(void *)(v67 + 632)];
          if (*(unsigned char *)(v67 + 49)) {
            id v85 = "YES";
          }
          else {
            id v85 = "NO";
          }
          [v70 appendFormat:@"\nMonitoring LS: %s", v85];
          id v86 = [*(id *)(v67 + 96) UUIDString];
          [v70 appendFormat:@"\n\n--------- Links to %@ status ---------", v86];

          long long v118 = 0u;
          long long v119 = 0u;
          long long v116 = 0u;
          long long v117 = 0u;
          id v87 = *(id *)(v67 + 112);
          id v88 = [v87 countByEnumeratingWithState:&v116 objects:v121 count:16];
          if (v88)
          {
            id v89 = v88;
            uint64_t v90 = *(void *)v117;
            do
            {
              for (k = 0; k != v89; k = (char *)k + 1)
              {
                if (*(void *)v117 != v90) {
                  objc_enumerationMutation(v87);
                }
                id v92 = [*(id *)(*((void *)&v116 + 1) + 8 * (void)k) copyStatusString];
                [v70 appendFormat:@"\n%@", v92];
              }
              id v89 = [v87 countByEnumeratingWithState:&v116 objects:v121 count:16];
            }
            while (v89);
          }

          id v11 = v107;
        }
        else
        {
          id v70 = 0;
        }
        [v11 appendFormat:@"\n\n%@", v70];
      }
      id v110 = [obj countByEnumeratingWithState:&v111 objects:v120 count:16];
    }
    while (v110);
  }

  if (qword_1001F4A48 != -1) {
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    id v93 = (id)qword_1001F4A40;
    uint64_t v103 = 713;
    id v104 = [v11 length];
    uint64_t v102 = "-[NRLinkDirector copyStatusString]";
    _NRLogWithArgs();
  }
  if (v11)
  {
    if (qword_1001F4A00 != -1) {
      dispatch_once(&qword_1001F4A00, &stru_1001C6E70);
    }
    id v94 = (id)qword_1001F49F8;
    if (v94)
    {
      id v95 = objc_alloc((Class)NSString);
      if (sub_1000A7EEC()) {
        uint64_t v96 = "en";
      }
      else {
        uint64_t v96 = "dis";
      }
      id v97 = [v95 initWithFormat:v96, v102, v103, v104];
      id v98 = objc_alloc((Class)NSString);
      if (gNRPacketLoggingEnabled) {
        id v99 = "en";
      }
      else {
        id v99 = "dis";
      }
      id v100 = [v98 initWithFormat:@"%@, packet logging %sabled\n%@\n%@", v94, v99, v97, v11];
    }
    else
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        _NRLogWithArgs();
      }
      id v100 = 0;
    }
  }
  else
  {
LABEL_159:
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      _NRLogWithArgs();
    }
    id v11 = 0;
    id v100 = 0;
  }

  return v100;
}

uint64_t sub_10005ECD0(void *a1)
{
  id v1 = a1;
  id v2 = &unk_1001F4000;
  if (qword_1001F4920 != -1) {
    goto LABEL_39;
  }
  while (1)
  {
    if (_NRLogIsLevelEnabled())
    {
      if (v2[292] != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v4 = (id)qword_1001F4918;
      if (v1)
      {
        unint64_t v5 = (void *)*((void *)v1 + 4);
        if (!v5)
        {
          id Property = (_xpc_connection_s *)objc_getProperty(v1, v3, 8, 1);
          uint64_t pid = xpc_connection_get_pid(Property);
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
          bzero(v45, 0x400uLL);
          if ((int)pid >= 1 && proc_pidpath(pid, v45, 0x400u) >= 1 && v45[0])
          {
            id v9 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", v45, pid];

            id v8 = v9;
          }
          id v10 = (void *)*((void *)v1 + 4);
          *((void *)v1 + 4) = v8;

          unint64_t v5 = (void *)*((void *)v1 + 4);
        }
        id v11 = v5;
      }
      else
      {
        id v11 = 0;
      }
      _NRLogWithArgs();
    }
    id v12 = objc_alloc((Class)NSString);
    id v13 = +[NSUUID UUID];
    id v14 = [v13 UUIDString];
    id v15 = [v12 initWithFormat:@"/tmp/terminusd/%@", v14];

    id v16 = sub_10005F260(v15);
    if (![v16 count])
    {
      uint64_t v29 = -2012;
      goto LABEL_30;
    }
    xpc_object_t v17 = xpc_array_create(0, 0);
    if (v17) {
      break;
    }
    id v35 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v37 = sub_10004A608();
      _NRLogWithArgs();
    }
    id v2 = (void *)_os_log_pack_size();
    __chkstk_darwin(v2);
    __error();
    uint64_t v38 = _os_log_pack_fill();
    sub_10005F8D8(v38, (uint64_t)"nr_xpc_array_create");
LABEL_38:
    sub_10004A608();
    _NRLogAbortWithPack();
LABEL_39:
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  id v18 = v17;
  id v39 = v1;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v19 = v16;
  id v20 = [v19 countByEnumeratingWithState:&v40 objects:v44 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v41;
LABEL_19:
    uint64_t v23 = 0;
    while (1)
    {
      if (*(void *)v41 != v22) {
        objc_enumerationMutation(v19);
      }
      uint64_t v24 = (const char *)[*(id *)(*((void *)&v40 + 1) + 8 * v23) UTF8String];
      if (v24)
      {
        id v1 = (char *)v24;
        xpc_object_t v25 = xpc_string_create(v24);
        if (!v25)
        {
          if (qword_1001F4920 != -1) {
            dispatch_once(&qword_1001F4920, &stru_1001C67F0);
          }
          id v31 = (id)qword_1001F4918;
          int v32 = _NRLogIsLevelEnabled();

          if (v32)
          {
            if (qword_1001F4920 != -1) {
              dispatch_once(&qword_1001F4920, &stru_1001C67F0);
            }
            id v33 = (id)qword_1001F4918;
            _NRLogWithArgs();
          }
          id v2 = (void *)_os_log_pack_size();
          __chkstk_darwin(v2);
          __error();
          uint64_t v34 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v34 = 136446466;
          *(void *)(v34 + 4) = "nr_xpc_string_create";
          *(_WORD *)(v34 + 12) = 2080;
          *(void *)(v34 + 14) = v1;
          goto LABEL_38;
        }
        uint64_t v26 = v25;
        xpc_array_append_value(v18, v25);
      }
      if (v21 == (id)++v23)
      {
        id v21 = [v19 countByEnumeratingWithState:&v40 objects:v44 count:16];
        if (!v21) {
          break;
        }
        goto LABEL_19;
      }
    }
  }

  id v1 = v39;
  if (v39) {
    id v28 = objc_getProperty(v39, v27, 24, 1);
  }
  else {
    id v28 = 0;
  }
  xpc_dictionary_set_value(v28, nrXPCKeyCompanionLinkStatusDumpFilePaths, v18);

  uint64_t v29 = 0;
LABEL_30:

  return v29;
}

id sub_10005F260(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    id v13 = sub_10004A608();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_51;
    }
    goto LABEL_52;
  }
  if (![v1 length])
  {
    id v15 = sub_10004A608();
    int v16 = _NRLogIsLevelEnabled();

    if (v16)
    {
LABEL_51:
      id v17 = sub_10004A608();
      _NRLogWithArgs();
    }
LABEL_52:
    id v11 = 0;
    goto LABEL_66;
  }
  uint64_t v3 = sub_10005DA8C();
  if (!v3)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      _NRLogWithArgs();
      id v11 = 0;
    }
    else
    {
      id v11 = 0;
    }
    goto LABEL_65;
  }
  id v4 = +[NSFileManager defaultManager];
  char v32 = 0;
  if (![v4 fileExistsAtPath:v2 isDirectory:&v32] || !v32)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      uint64_t v27 = 264;
      uint64_t v29 = v2;
      uint64_t v23 = "";
      xpc_object_t v25 = "dumpLinkStatusToDirectoryAt";
      _NRLogWithArgs();
    }
    id v31 = 0;
    [v4 createDirectoryAtPath:v2 withIntermediateDirectories:1 attributes:0 error:&v31];
    id v12 = v31;
    if (v12)
    {
      id v6 = v12;
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_63;
      }
      if (qword_1001F4920 == -1) {
        goto LABEL_62;
      }
      goto LABEL_69;
    }
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      uint64_t v27 = 274;
      uint64_t v29 = v2;
      uint64_t v23 = "";
      xpc_object_t v25 = "dumpLinkStatusToDirectoryAt";
      _NRLogWithArgs();
    }
  }
  unint64_t v5 = [[v2 stringByAppendingPathComponent:@"companion_link_status_phone.txt", v23, v25, v27, v29];
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    uint64_t v28 = 281;
    id v30 = v5;
    uint64_t v24 = "";
    uint64_t v26 = "dumpLinkStatusToDirectoryAt";
    _NRLogWithArgs();
  }
  id v6 = v5;
  id v7 = v3;
  if (!v6)
  {
    id v18 = sub_1001135C4();
    int v19 = _NRLogIsLevelEnabled();

    if (v19) {
      goto LABEL_56;
    }
LABEL_57:

    uint64_t v10 = qword_1001F4920;
    goto LABEL_58;
  }
  if ([v6 length])
  {
    id v8 = [v7 dataUsingEncoding:4];
    char v9 = sub_100113A48(v6, v8, 0);
    goto LABEL_15;
  }
  id v20 = sub_1001135C4();
  int v21 = _NRLogIsLevelEnabled();

  if (!v21) {
    goto LABEL_57;
  }
LABEL_56:
  id v8 = sub_1001135C4();
  uint64_t v24 = "NRDSafeWriteStringToFile";
  _NRLogWithArgs();
  char v9 = 0;
LABEL_15:

  uint64_t v10 = qword_1001F4920;
  if (v9)
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      uint64_t v28 = 288;
      id v30 = v6;
      uint64_t v24 = "";
      uint64_t v26 = "dumpLinkStatusToDirectoryAt";
      _NRLogWithArgs();
    }
    id v33 = v6;
    id v11 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v33, 1, v24, v26, v28, v30);
    goto LABEL_64;
  }
LABEL_58:
  if (v10 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (!_NRLogIsLevelEnabled()) {
    goto LABEL_63;
  }
  if (qword_1001F4920 != -1) {
LABEL_69:
  }
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
LABEL_62:
  _NRLogWithArgs();
LABEL_63:
  id v11 = 0;
LABEL_64:

LABEL_65:
LABEL_66:

  return v11;
}

double sub_10005F8D8(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 136446722;
  *(_DWORD *)a1 = 136446722;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(void *)(a1 + 14) = 0;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_10005F904(void *a1)
{
  id Property = a1;
  uint64_t v3 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v2, 16, 1);
  }
  string = xpc_dictionary_get_string(Property, nrXPCKeyCompanionLinkStatusDumpToDirectoryPath);
  if (string)
  {
    id v5 = [objc_alloc((Class)NSString) initWithUTF8String:string];
    if (([v5 hasPrefix:@"/var/mobile/Library/Logs/"] & 1) != 0
      || ([v5 hasPrefix:@"/private/var/mobile/Library/Logs/"] & 1) != 0
      || ([v5 hasPrefix:@"/tmp/"] & 1) != 0
      || ([v5 hasPrefix:@"/private/var/tmp/"] & 1) != 0)
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4920 != -1) {
          dispatch_once(&qword_1001F4920, &stru_1001C67F0);
        }
        id v8 = (id)qword_1001F4918;
        if (v3)
        {
          char v9 = (void *)v3[4];
          if (!v9)
          {
            uint64_t v10 = (_xpc_connection_s *)objc_getProperty(v3, v7, 8, 1);
            uint64_t pid = xpc_connection_get_pid(v10);
            id v12 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
            bzero(buffer, 0x400uLL);
            if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
            {
              id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

              id v12 = v13;
            }
            id v14 = (void *)v3[4];
            void v3[4] = v12;

            char v9 = (void *)v3[4];
          }
          id v15 = v9;
        }
        else
        {
          id v15 = 0;
        }
        id v39 = v5;
        id v40 = v15;
        uint64_t v38 = 309;
        int v36 = "";
        id v37 = "handleCompanionLinkStatusToDirectory";
        _NRLogWithArgs();
      }
      if (v3) {
        id v16 = objc_getProperty(v3, v6, 16, 1);
      }
      else {
        id v16 = 0;
      }
      id v17 = xpc_dictionary_get_string(v16, nrXPCKeyCompanionLinkStatusSandboxExtensionToken);
      if (v17) {
        uint64_t v18 = sandbox_extension_consume();
      }
      else {
        uint64_t v18 = -1;
      }
      sub_10005F260(v5);
      id v26 = (id)objc_claimAutoreleasedReturnValue();
      if (v17 && (v18 & 0x8000000000000000) == 0) {
        sandbox_extension_release();
      }
      if (objc_msgSend(v26, "count", v36, v37, v38, v39, v40)) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = -2012;
      }
    }
    else
    {
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      if (!_NRLogIsLevelEnabled())
      {
        uint64_t v27 = -2005;
        goto LABEL_48;
      }
      if (qword_1001F4920 != -1) {
        dispatch_once(&qword_1001F4920, &stru_1001C67F0);
      }
      id v26 = (id)qword_1001F4918;
      if (v3)
      {
        id v30 = (void *)v3[4];
        if (!v30)
        {
          id v31 = (_xpc_connection_s *)objc_getProperty(v3, v29, 8, 1);
          uint64_t v32 = xpc_connection_get_pid(v31);
          id v33 = sub_100116370(v32, 1);
          uint64_t v34 = (void *)v3[4];
          void v3[4] = v33;

          id v30 = (void *)v3[4];
        }
        id v35 = v30;
      }
      else
      {
        id v35 = 0;
      }
      _NRLogWithArgs();

      uint64_t v27 = -2005;
    }
  }
  else
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    if (!_NRLogIsLevelEnabled())
    {
      uint64_t v27 = -2005;
      goto LABEL_49;
    }
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v5 = (id)qword_1001F4918;
    if (v3)
    {
      id v20 = (void *)v3[4];
      if (!v20)
      {
        int v21 = (_xpc_connection_s *)objc_getProperty(v3, v19, 8, 1);
        uint64_t v22 = xpc_connection_get_pid(v21);
        id v23 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", v22];
        bzero(buffer, 0x400uLL);
        if ((int)v22 >= 1 && proc_pidpath(v22, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v24 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, v22];

          id v23 = v24;
        }
        xpc_object_t v25 = (void *)v3[4];
        void v3[4] = v23;

        id v20 = (void *)v3[4];
      }
      id v26 = v20;
    }
    else
    {
      id v26 = 0;
    }
    _NRLogWithArgs();
    uint64_t v27 = -2005;
  }

LABEL_48:
LABEL_49:

  return v27;
}

uint64_t sub_10005FE44(void *a1)
{
  id v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        char v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  id v12 = sub_10005DA8C();
  if (v12)
  {
    if (v1) {
      id v13 = objc_getProperty(v1, v11, 24, 1);
    }
    else {
      id v13 = 0;
    }
    id v14 = (const char *)nrXPCKeyCompanionLinkStatusMessage;
    id v15 = v13;
    xpc_dictionary_set_string(v15, v14, (const char *)[v12 UTF8String]);

    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = -2004;
  }

  return v16;
}

uint64_t sub_100060084(void *a1)
{
  id v1 = a1;
  char v3 = sub_1000A7EEC();
  if (v1) {
    id Property = objc_getProperty(v1, v2, 24, 1);
  }
  else {
    id Property = 0;
  }
  xpc_dictionary_set_BOOL(Property, nrXPCKeyCompanionLinkIsEnabled, v3);
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v6 = (id)qword_1001F4918;
    if (v1)
    {
      id v7 = (void *)v1[4];
      if (!v7)
      {
        id v8 = (_xpc_connection_s *)objc_getProperty(v1, v5, 8, 1);
        uint64_t pid = xpc_connection_get_pid(v8);
        id v10 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v11 = [[objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v10 = v11;
        }
        id v12 = (void *)v1[4];
        v1[4] = v10;

        id v7 = (void *)v1[4];
      }
      id v13 = v7;
    }
    else
    {
      id v13 = 0;
    }
    _NRLogWithArgs();
  }
  return 0;
}

uint64_t sub_1000602B4(void *a1)
{
  id v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        char v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  sub_1000A7FC0(2);

  return 0;
}

uint64_t sub_100060490(void *a1)
{
  id v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        char v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  sub_1000A7FC0(1);

  return 0;
}

uint64_t sub_10006066C(void *a1)
{
  id v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        char v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  sub_1000A7FC0(0);

  return 0;
}

uint64_t sub_100060848(void *a1)
{
  id v1 = a1;
  if (qword_1001F4920 != -1) {
    dispatch_once(&qword_1001F4920, &stru_1001C67F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4920 != -1) {
      dispatch_once(&qword_1001F4920, &stru_1001C67F0);
    }
    id v3 = (id)qword_1001F4918;
    if (v1)
    {
      id v4 = (void *)v1[4];
      if (!v4)
      {
        id Property = (_xpc_connection_s *)objc_getProperty(v1, v2, 8, 1);
        uint64_t pid = xpc_connection_get_pid(Property);
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", pid];
        bzero(buffer, 0x400uLL);
        if ((int)pid >= 1 && proc_pidpath(pid, buffer, 0x400u) >= 1 && buffer[0])
        {
          id v8 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, pid];

          id v7 = v8;
        }
        char v9 = (void *)v1[4];
        v1[4] = v7;

        id v4 = (void *)v1[4];
      }
      id v10 = v4;
    }
    else
    {
      id v10 = 0;
    }
    _NRLogWithArgs();
  }
  pid_t v11 = getpid();
  xpc_object_t v13 = xpc_string_create_with_format("PingReply(%d)", v11);
  if (v1) {
    id v14 = objc_getProperty(v1, v12, 24, 1);
  }
  else {
    id v14 = 0;
  }
  xpc_dictionary_set_value(v14, nrXPCKeyPingMessage, v13);

  return 0;
}

void sub_100060BF8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4928;
  qword_1001F4928 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

char *sub_100060C3C(id *a1, void *a2)
{
  id v4 = a2;
  if (!a1)
  {
LABEL_10:
    pid_t v11 = 0;
    goto LABEL_11;
  }
  if ((_NRIsAppleInternal() & 1) == 0)
  {
    id v12 = (const char *)&unk_1001F4000;
    if (qword_1001F4930 == -1) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  v19.receiver = a1;
  v19.super_class = (Class)NRDTestServer;
  id v5 = (id *)[super init];
  if (!v5)
  {
    id v14 = sub_100060E90();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    id v12 = "-[NRDTestServer initTestServerWithQueue:]";
    if (IsLevelEnabled)
    {
      id v16 = sub_100060E90();
      _NRLogWithArgs();
    }
    id v4 = (id)_os_log_pack_size();
    a1 = (id *)((char *)&v18 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0));
    __error();
    uint64_t v17 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v17 = 136446210;
    *(void *)(v17 + 4) = "-[NRDTestServer initTestServerWithQueue:]";
    sub_100060E90();
    _NRLogAbortWithPack();
LABEL_15:
    dispatch_once(&qword_1001F4930, &stru_1001C6978);
LABEL_6:
    if (_NRLogIsLevelEnabled())
    {
      if (*((void *)v12 + 294) != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      _NRLogWithArgs();
    }
    goto LABEL_10;
  }
  id v6 = v5;
  objc_storeStrong(v5 + 2, a2);
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  id v8 = v6[5];
  v6[5] = v7;

  id v9 = objc_alloc_init((Class)NSMutableDictionary);
  id v10 = v6[8];
  v6[8] = v9;

  sub_100060EE4((dispatch_source_t *)v6 + 6, v6[2], 0x464Fu);
  sub_100060EE4((dispatch_source_t *)v6 + 7, v6[2], 0x4A37u);
  a1 = v6;
  pid_t v11 = a1;
LABEL_11:

  return (char *)v11;
}

id sub_100060E90()
{
  if (qword_1001F4930 != -1) {
    dispatch_once(&qword_1001F4930, &stru_1001C6978);
  }
  uint64_t v0 = (void *)qword_1001F4928;

  return v0;
}

void sub_100060EE4(dispatch_source_t *a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (a1)
  {
    if (*a1)
    {
      dispatch_source_cancel(*a1);
      dispatch_source_t v6 = *a1;
      *a1 = 0;
    }
    int v7 = socket(30, 2, 0);
    if ((v7 & 0x80000000) == 0)
    {
      unsigned int v8 = v7;
      int v9 = fcntl(v7, 3, 0);
      if (v9 < 0)
      {
        pid_t v11 = __error();
        if (strerror_r(*v11, __strerrbuf, 0x80uLL)) {
          __strerrbuf[0] = 0;
        }
        if (qword_1001F4930 != -1) {
          dispatch_once(&qword_1001F4930, &stru_1001C6978);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_35;
        }
        if (qword_1001F4930 == -1) {
          goto LABEL_34;
        }
        goto LABEL_76;
      }
      if (fcntl(v8, 4, v9 | 4u))
      {
        id v10 = __error();
        if (strerror_r(*v10, __strerrbuf, 0x80uLL)) {
          __strerrbuf[0] = 0;
        }
        if (qword_1001F4930 != -1) {
          dispatch_once(&qword_1001F4930, &stru_1001C6978);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_35;
        }
        if (qword_1001F4930 == -1) {
          goto LABEL_34;
        }
LABEL_76:
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
LABEL_34:
        _NRLogWithArgs();
        goto LABEL_35;
      }
      if (setsockopt(v8, 0xFFFF, 4, &unk_10016C9D0, 4u))
      {
        id v12 = __error();
        if (strerror_r(*v12, __strerrbuf, 0x80uLL)) {
          __strerrbuf[0] = 0;
        }
        if (qword_1001F4930 != -1) {
          dispatch_once(&qword_1001F4930, &stru_1001C6978);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_35;
        }
        if (qword_1001F4930 == -1) {
          goto LABEL_34;
        }
        goto LABEL_76;
      }
      if (setsockopt(v8, 0xFFFF, 512, &unk_10016C9D0, 4u))
      {
        id v14 = __error();
        if (strerror_r(*v14, __strerrbuf, 0x80uLL)) {
          __strerrbuf[0] = 0;
        }
        if (qword_1001F4930 != -1) {
          dispatch_once(&qword_1001F4930, &stru_1001C6978);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_35;
        }
      }
      else if (setsockopt(v8, 0xFFFF, 4356, &unk_10016C9D0, 4u))
      {
        id v15 = __error();
        if (strerror_r(*v15, __strerrbuf, 0x80uLL)) {
          __strerrbuf[0] = 0;
        }
        id v16 = sub_100060E90();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (!IsLevelEnabled) {
          goto LABEL_35;
        }
      }
      else if (setsockopt(v8, 41, 27, &unk_10016C9D0, 4u))
      {
        uint64_t v18 = __error();
        if (strerror_r(*v18, __strerrbuf, 0x80uLL)) {
          __strerrbuf[0] = 0;
        }
        id v19 = sub_100060E90();
        int v20 = _NRLogIsLevelEnabled();

        if (!v20) {
          goto LABEL_35;
        }
      }
      else if (setsockopt(v8, 0xFFFF, 4130, &unk_10016C9D0, 4u))
      {
        int v21 = __error();
        if (strerror_r(*v21, __strerrbuf, 0x80uLL)) {
          __strerrbuf[0] = 0;
        }
        id v22 = sub_100060E90();
        int v23 = _NRLogIsLevelEnabled();

        if (!v23) {
          goto LABEL_35;
        }
      }
      else
      {
        if (!setsockopt(v8, 41, 61, &unk_10016C9D0, 4u))
        {
          *(void *)&void v45[4] = 0;
          *(void *)&v45[12] = 0;
          uint64_t v46 = 0;
          *(_WORD *)id v45 = 7708;
          *(_WORD *)&v45[2] = __rev16(a3);
          if (!bind(v8, (const sockaddr *)v45, 0x1Cu))
          {
            dispatch_source_t v34 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v8, 0, v5);
            dispatch_source_t v35 = *a1;
            *a1 = v34;

            int v36 = *a1;
            if (*a1)
            {
              handler[0] = _NSConcreteStackBlock;
              handler[1] = 3221225472;
              handler[2] = sub_1000616B0;
              handler[3] = &unk_1001C6998;
              unsigned int v44 = v8;
              dispatch_source_set_event_handler(v36, handler);
              id v37 = *a1;
              v41[0] = _NSConcreteStackBlock;
              v41[1] = 3221225472;
              v41[2] = sub_100061D0C;
              v41[3] = &unk_1001C6998;
              unsigned int v42 = v8;
              dispatch_source_set_cancel_handler(v37, v41);
              dispatch_activate(*a1);
              goto LABEL_38;
            }
            id v38 = sub_100060E90();
            int v39 = _NRLogIsLevelEnabled();

            if (v39)
            {
              id v40 = sub_100060E90();
              _NRLogWithArgs();
            }
            goto LABEL_35;
          }
          id v31 = __error();
          if (strerror_r(*v31, __strerrbuf, 0x80uLL)) {
            __strerrbuf[0] = 0;
          }
          id v32 = sub_100060E90();
          int v33 = _NRLogIsLevelEnabled();

          if (!v33)
          {
LABEL_35:
            if (*a1)
            {
              dispatch_source_cancel(*a1);
              dispatch_source_t v13 = *a1;
              *a1 = 0;
            }
            else
            {
              close(v8);
            }
            goto LABEL_38;
          }
          id v27 = sub_100060E90();
LABEL_73:
          _NRLogWithArgs();

          goto LABEL_35;
        }
        id v24 = __error();
        if (strerror_r(*v24, __strerrbuf, 0x80uLL)) {
          __strerrbuf[0] = 0;
        }
        id v25 = sub_100060E90();
        int v26 = _NRLogIsLevelEnabled();

        if (!v26) {
          goto LABEL_35;
        }
      }
      id v27 = sub_100060E90();
      goto LABEL_73;
    }
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      _NRLogWithArgs();
    }
  }
  else
  {
    id v28 = sub_100060E90();
    int v29 = _NRLogIsLevelEnabled();

    if (v29)
    {
      id v30 = sub_100060E90();
      _NRLogWithArgs();
    }
  }
LABEL_38:
}

int *sub_1000616B0(uint64_t a1)
{
  while (1)
  {
    memset(v13, 0, sizeof(v13));
    memset(v9, 0, sizeof(v9));
    int v10 = 0;
    v8[0] = v12;
    v8[1] = 2000;
    *(void *)&v7.msg_namelen = 28;
    *(void *)&v7.msg_iovlen = 1;
    v7.msg_name = v9;
    v7.msg_iov = (iovec *)v8;
    v7.msg_control = v13;
    *(void *)&v7.msg_controllen = 32;
    ssize_t v2 = recvmsg(*(_DWORD *)(a1 + 32), &v7, 0);
    if (v2 < 0) {
      break;
    }
    if (!v2)
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      double result = (int *)_NRLogIsLevelEnabled();
      if (result)
      {
        if (qword_1001F4930 == -1) {
          return (int *)_NRLogWithArgs();
        }
LABEL_59:
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
        return (int *)_NRLogWithArgs();
      }
      return result;
    }
    if (v7.msg_namelen >= 0x1C && v7.msg_name)
    {
      if (*((unsigned char *)v7.msg_name + 1) == 30)
      {
        if (*(unsigned __int8 *)v7.msg_name > 0x1Bu)
        {
          if (v7.msg_controllen - 33 >= 0xFFFFFFF3 && v7.msg_control == v13)
          {
            if (DWORD2(v13[0]) == 46)
            {
              v6[0] = v12;
              v6[1] = v2;
              *(void *)&v5.msg_controllen = 0;
              memset(&v5.msg_namelen, 0, 32);
              v5.msg_name = v7.msg_name;
              v5.msg_namelen = *(unsigned __int8 *)v7.msg_name;
              v5.msg_iov = (iovec *)v6;
              v5.msg_iovlen = 1;
              v5.msg_control = v13;
              v5.msg_controllen = 32;
              if (sendmsg(*(_DWORD *)(a1 + 32), &v5, 0) <= 0)
              {
                id v3 = __error();
                if (strerror_r(*v3, __strerrbuf, 0x80uLL)) {
                  __strerrbuf[0] = 0;
                }
                if (qword_1001F4930 != -1) {
                  dispatch_once(&qword_1001F4930, &stru_1001C6978);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4930 != -1) {
                    goto LABEL_43;
                  }
                  goto LABEL_42;
                }
              }
            }
            else
            {
              if (qword_1001F4930 != -1) {
                dispatch_once(&qword_1001F4930, &stru_1001C6978);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4930 == -1) {
                  goto LABEL_42;
                }
LABEL_43:
                dispatch_once(&qword_1001F4930, &stru_1001C6978);
                goto LABEL_42;
              }
            }
          }
          else
          {
            if (qword_1001F4930 != -1) {
              dispatch_once(&qword_1001F4930, &stru_1001C6978);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4930 != -1) {
                goto LABEL_43;
              }
LABEL_42:
              _NRLogWithArgs();
            }
          }
        }
        else
        {
          if (qword_1001F4930 != -1) {
            dispatch_once(&qword_1001F4930, &stru_1001C6978);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4930 != -1) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }
        }
      }
      else
      {
        if (qword_1001F4930 != -1) {
          dispatch_once(&qword_1001F4930, &stru_1001C6978);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4930 != -1) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }
      }
    }
    else
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4930 != -1) {
          goto LABEL_43;
        }
        goto LABEL_42;
      }
    }
  }
  double result = __error();
  if (*result != 35)
  {
    if (strerror_r(*result, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    double result = (int *)_NRLogIsLevelEnabled();
    if (result)
    {
      if (qword_1001F4930 == -1) {
        return (int *)_NRLogWithArgs();
      }
      goto LABEL_59;
    }
  }
  return result;
}

uint64_t sub_100061D0C(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

id sub_100061D14(uint64_t a1)
{
  nw_parameters_t v2 = nw_parameters_create();
  nw_parameters_set_required_interface_subtype();
  id v3 = *(id *)(a1 + 16);
  id v4 = nw_service_connector_create();

  id v7 = v4;
  nw_service_connector_set_service_available_block();
  nw_service_connector_start();
  id v5 = v7;

  return v5;
}

void sub_100061E08(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (qword_1001F4930 != -1) {
    dispatch_once(&qword_1001F4930, &stru_1001C6978);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    _NRLogWithArgs();
  }
  unsigned int v8 = v5;
  id v9 = [objc_alloc((Class)NSString) initWithUTF8String:a3];
  id v10 = *(id *)(a1 + 32);
  id v6 = v9;
  id v7 = v5;
  nw_service_connector_start_request();
}

void sub_100061FA0(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v41 = v5;
  if (a3)
  {
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      _NRLogWithArgs();
    }
  }
  else
  {
    uint64_t v7 = a1[4];
    id v6 = (void *)a1[5];
    id v9 = (void *)a1[6];
    unsigned int v8 = (void *)a1[7];
    id v10 = v5;
    pid_t v11 = v6;
    id v12 = v9;
    id v13 = v8;
    if (v7)
    {
      nw_path_t v14 = nw_connection_copy_current_path(v10);
      uint64_t v15 = nw_path_copy_interface();
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4930 != -1) {
          dispatch_once(&qword_1001F4930, &stru_1001C6978);
        }
        uint64_t v32 = v15;
        id v33 = v12;
        uint64_t v31 = 333;
        int v29 = "";
        id v30 = "-[NRDTestServer handleNewConnection:forPeerEndpoint:forService:forServiceConnector:]";
        _NRLogWithArgs();
      }
      [*(id *)(v7 + 40) setObject:v10 forKeyedSubscript:v12, v29, v30, v31, v32, v33];
      if ([v12 containsString:@"-urgent"])
      {
        nw_connection_reset_traffic_class();
        uint64_t v16 = 2;
      }
      else
      {
        uint64_t v16 = 5;
      }
      int v39 = (void *)v15;
      nw_path_t v40 = v14;
      if ([v12 containsString:@"-awdl"])
      {
        id v38 = v10;
        id v17 = [objc_alloc((Class)NRCompanionLinkPreferences) initForHighThroughputWithServiceClass:v16 includeP2P:1];
        id v37 = v11;
        uint64_t v18 = nw_endpoint_copy_address_string(v11);
        id v19 = +[NSString stringWithUTF8String:v18];
        if (v18) {
          free(v18);
        }
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        id v20 = sub_100145898();
        id v21 = [v20 countByEnumeratingWithState:&v48 objects:v52 count:16];
        if (v21)
        {
          id v34 = v17;
          id v35 = v13;
          id v36 = v12;
          uint64_t v22 = *(void *)v49;
LABEL_23:
          uint64_t v23 = 0;
          while (1)
          {
            if (*(void *)v49 != v22) {
              objc_enumerationMutation(v20);
            }
            id v24 = *(void **)(*((void *)&v48 + 1) + 8 * v23);
            id v25 = sub_10013DC5C((uint64_t)NRDLocalDevice, v24);
            int v26 = sub_10014B60C(v25);
            if ([v26 containsObject:v19]) {
              break;
            }

            if (v21 == (id)++v23)
            {
              id v21 = [v20 countByEnumeratingWithState:&v48 objects:v52 count:16];
              if (v21) {
                goto LABEL_23;
              }
              id v13 = v35;
              id v12 = v36;
              id v17 = v34;
              goto LABEL_35;
            }
          }
          id v21 = v24;

          if (!v21)
          {
            id v13 = v35;
            id v12 = v36;
            id v17 = v34;
            goto LABEL_37;
          }
          id v20 = [*(id *)(v7 + 64) objectForKeyedSubscript:v21];
          id v12 = v36;
          id v17 = v34;
          if (!v20)
          {
            id v27 = [objc_alloc((Class)NRDeviceIdentifier) initWithUUID:v21];
            id v20 = [objc_alloc((Class)NRDevicePreferences) initWithDeviceIdentifier:v27];
          }
          [v20 setIsNRDTestServer:1];
          [v20 setCompanionLinkPreferences:v34];
          [*(id *)(v7 + 64) setObject:v20 forKeyedSubscript:v21];
          id v13 = v35;
        }
LABEL_35:

LABEL_37:
        pid_t v11 = v37;
        id v10 = v38;
      }
      else
      {
        id v21 = 0;
      }
      nw_connection_set_queue(v10, *(dispatch_queue_t *)(v7 + 16));
      id v44 = v12;
      id v45 = v13;
      uint64_t v46 = v11;
      id v47 = v10;
      id v28 = v21;
      nw_connection_set_event_handler();
      id v42 = v44;
      long long v43 = v47;
      nw_connection_set_read_close_handler();
      nw_connection_start(v43);
    }
  }
}

void sub_100062534(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (qword_1001F4930 != -1) {
    dispatch_once(&qword_1001F4930, &stru_1001C6978);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = (id)qword_1001F4928;
    uint64_t v19 = nw_connection_state_to_string();
    id v20 = v5;
    uint64_t v17 = 376;
    uint64_t v18 = v6;
    uint64_t v15 = "";
    uint64_t v16 = "-[NRDTestServer handleNewConnection:forPeerEndpoint:forService:forServiceConnector:]_block_invoke";
    _NRLogWithArgs();
  }
  if ((a2 & 0xFFFFFFFE) == 4)
  {
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      uint64_t v17 = 378;
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v15 = "";
      uint64_t v16 = "-[NRDTestServer handleNewConnection:forPeerEndpoint:forService:forServiceConnector:]_block_invoke";
      _NRLogWithArgs();
    }
    if (*(void *)(a1 + 40))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      if (v8) {
        id v9 = *(void **)(v8 + 64);
      }
      else {
        id v9 = 0;
      }
      id v10 = [v9 objectForKeyedSubscript:v15, v16, v17, v18, v19, v20];
      pid_t v11 = v10;
      if (v10) {
        [v10 setCompanionLinkPreferences:0];
      }
    }
    [*(id *)(a1 + 32) UTF8String:v15, v16, v17, v18];
    id v21 = *(id *)(a1 + 32);
    nw_service_connector_cancel_active_connection();
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      id v13 = *(void **)(v12 + 40);
    }
    else {
      id v13 = 0;
    }
    [v13 removeObjectForKey:*(void *)(a1 + 32)];
  }
  else if (a2 == 3)
  {
    sub_10006299C(*(void *)(a1 + 48), *(void **)(a1 + 72), *(void **)(a1 + 32));
    if ([*(id *)(a1 + 32) hasPrefix:@"Terminus download service"])
    {
      uint64_t v14 = *(void *)(a1 + 48);
      if (v14) {
        sub_100062A68(v14, 0, *(void **)(a1 + 72));
      }
    }
  }
}

id sub_1000627E4(uint64_t a1)
{
  if (qword_1001F4930 != -1) {
    dispatch_once(&qword_1001F4930, &stru_1001C6978);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    _NRLogWithArgs();
  }
  nw_connection_cancel(*(nw_connection_t *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    id v3 = *(void **)(v2 + 40);
  }
  else {
    id v3 = 0;
  }
  uint64_t v4 = *(void *)(a1 + 32);

  return [v3 removeObjectForKey:v4];
}

uint64_t sub_1000628D8()
{
  if (qword_1001F4930 != -1) {
    dispatch_once(&qword_1001F4930, &stru_1001C6978);
  }
  uint64_t result = _NRLogIsLevelEnabled();
  if (result)
  {
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    return _NRLogWithArgs();
  }
  return result;
}

void sub_10006299C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    completion[0] = _NSConcreteStackBlock;
    completion[1] = 3221225472;
    completion[2] = sub_100062E08;
    completion[3] = &unk_1001C6930;
    uint64_t v8 = v5;
    id v9 = v6;
    uint64_t v10 = a1;
    nw_connection_receive(v8, 1u, 0xFFFFFFFF, completion);
  }
}

void sub_100062A68(uint64_t a1, void *a2, void *a3)
{
  dispatch_data_t v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if (!v5)
    {
      id v7 = (char *)malloc_type_malloc(0x40000uLL, 0xA172743EuLL);
      if (!v7)
      {
        id v14 = sub_100060E90();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v16 = sub_100060E90();
          _NRLogWithArgs();
        }
        uint64_t v17 = _os_log_pack_size();
        __chkstk_darwin(v17);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v18 = 136446466;
        *(void *)(v18 + 4) = "strict_malloc";
        *(_WORD *)(v18 + 12) = 2048;
        *(void *)(v18 + 14) = 0x40000;
        sub_100060E90();
        _NRLogAbortWithPack();
      }
      uint64_t v8 = v7;
      uint64_t v9 = 0;
      int8x16_t v10 = (int8x16_t)xmmword_10016C8B0;
      v11.i64[0] = 0x1010101010101010;
      v11.i64[1] = 0x1010101010101010;
      v12.i64[0] = 0x2020202020202020;
      v12.i64[1] = 0x2020202020202020;
      do
      {
        id v13 = (int8x16_t *)&v7[v9];
        int8x16_t *v13 = v10;
        v13[1] = vaddq_s8(v10, v11);
        v9 += 32;
        int8x16_t v10 = vaddq_s8(v10, v12);
      }
      while (v9 != 0x40000);
      dispatch_data_t v5 = dispatch_data_create(v7, 0x40000uLL, *(dispatch_queue_t *)(a1 + 16), 0);
      free(v8);
    }
    completion[0] = _NSConcreteStackBlock;
    completion[1] = 3221225472;
    completion[2] = sub_100062CC4;
    completion[3] = &unk_1001C6958;
    dispatch_data_t v5 = v5;
    dispatch_data_t v20 = v5;
    uint64_t v21 = a1;
    uint64_t v22 = v6;
    nw_connection_send(v22, v5, _nw_content_context_default_stream, 0, completion);
  }
}

void sub_100062CC4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && (int error_code = nw_error_get_error_code(v3)) != 0)
  {
    if (strerror_r(error_code, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      _NRLogWithArgs();
    }
  }
  else
  {
    sub_100062A68(a1[5], a1[4], a1[6]);
  }
}

void sub_100062E08(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  int8x16_t v10 = a5;
  int8x16_t v11 = v10;
  if (v10)
  {
    int error_code = nw_error_get_error_code(v10);
    if (!v8) {
      goto LABEL_14;
    }
  }
  else
  {
    int error_code = 0;
    if (!v8) {
      goto LABEL_14;
    }
  }
  if (!error_code)
  {
    id v13 = v8;
    if ([*(id *)(a1 + 40) hasPrefix:@"Terminus ping service"])
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4930 != -1) {
          dispatch_once(&qword_1001F4930, &stru_1001C6978);
        }
        dispatch_data_get_size(v13);
        _NRLogWithArgs();
      }
      id v14 = *(NSObject **)(a1 + 32);
      completion[0] = _NSConcreteStackBlock;
      completion[1] = 3221225472;
      completion[2] = sub_1000633BC;
      completion[3] = &unk_1001C6908;
      int v31 = 0;
      dispatch_data_t v27 = v13;
      id v28 = *(id *)(a1 + 40);
      id v15 = *(id *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 48);
      id v29 = v15;
      uint64_t v30 = v16;
      nw_connection_send(v14, v27, _nw_content_context_default_stream, 0, completion);

      goto LABEL_45;
    }
    if ([*(id *)(a1 + 40) hasPrefix:@"Terminus read write service"])
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4930 != -1) {
          dispatch_once(&qword_1001F4930, &stru_1001C6978);
        }
        dispatch_data_get_size(v13);
        _NRLogWithArgs();
      }
      uint64_t v17 = *(NSObject **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      id v20[2] = sub_100063510;
      v20[3] = &unk_1001C6908;
      int v25 = 0;
      dispatch_data_t v21 = v13;
      id v22 = *(id *)(a1 + 40);
      id v18 = *(id *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 48);
      id v23 = v18;
      uint64_t v24 = v19;
      nw_connection_send(v17, v21, _nw_content_context_default_stream, 0, v20);

      goto LABEL_45;
    }
    if ([*(id *)(a1 + 40) hasPrefix:@"Terminus download service"])
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_44;
      }
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      dispatch_data_get_size(v13);
    }
    else
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_44;
      }
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
    }
    _NRLogWithArgs();
LABEL_44:
    sub_10006299C(*(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 40));
LABEL_45:

    goto LABEL_46;
  }
LABEL_14:
  if (strerror_r(error_code, __strerrbuf, 0x80uLL)) {
    __strerrbuf[0] = 0;
  }
  if (qword_1001F4930 != -1) {
    dispatch_once(&qword_1001F4930, &stru_1001C6978);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    _NRLogWithArgs();
  }
  nw_connection_cancel(*(nw_connection_t *)(a1 + 32));
LABEL_46:
}

void sub_1000633BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && nw_error_get_error_code(v3))
  {
    if (strerror_r(*(_DWORD *)(a1 + 64), __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      _NRLogWithArgs();
    }
    nw_connection_cancel(*(nw_connection_t *)(a1 + 48));
  }
  else
  {
    sub_10006299C(*(void *)(a1 + 56), *(void *)(a1 + 48), *(void *)(a1 + 40));
  }
}

void sub_100063510(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3 && nw_error_get_error_code(v3))
  {
    if (strerror_r(*(_DWORD *)(a1 + 64), __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4930 != -1) {
      dispatch_once(&qword_1001F4930, &stru_1001C6978);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      _NRLogWithArgs();
    }
    nw_connection_cancel(*(nw_connection_t *)(a1 + 48));
  }
  else
  {
    sub_10006299C(*(void *)(a1 + 56), *(void *)(a1 + 48), *(void *)(a1 + 40));
  }
}

uint64_t sub_1000638F4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 15))
  {
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
      dispatch_data_t v21 = [(id)a1 agentDescription];
      dispatch_data_t v20 = "";
      _NRLogWithArgs();
    }
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v5 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v5, *(void **)(a1 + 88));

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v6 = (id)qword_1001F4D20;
    id v7 = (id *)v6;
    if (v6)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v6 + 1));
      if (([v7[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v8, v9, v10, (uint64_t)v20);
      }
    }

    id v11 = [*(id *)(a1 + 48) unregisterNetworkAgent];
    if (v11)
    {
      *(unsigned char *)(a1 + 15) = 0;
      [(id)a1 setActive:0];
      id v12 = *(id *)(a1 + 32);
      id v13 = [(id)a1 agentUUID];
      id v14 = [v13 UUIDString];
      sub_10012F648(v12, 12003, 0, v14);

      [*(id *)(a1 + 72) unregisterNetworkAgent];
      [*(id *)(a1 + 64) setActive:0];
      id v15 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = 0;

      uint64_t v16 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = 0;
LABEL_17:

      return (uint64_t)v11;
    }
    uint64_t v17 = (void *)_NRCopyLogObjectForNRUUID();
    int v18 = _NRLogIsLevelEnabled();

    if (v18)
    {
      uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
      goto LABEL_17;
    }
    return 0;
  }
  return 1;
}

void sub_100063E88(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 14))
  {
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
      id v15 = [(id)a1 agentDescription];
      id v14 = "";
      _NRLogWithArgs();
    }
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v5 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v5, *(void **)(a1 + 64));

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v6 = (id)qword_1001F4D20;
    id v7 = (id *)v6;
    if (v6)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v6 + 1));
      if (([v7[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v8, v9, v10, (uint64_t)v14);
      }
    }

    if ([*(id *)(a1 + 48) unregisterNetworkAgent])
    {
      *(unsigned char *)(a1 + 14) = 0;
      [(id)a1 setActive:0];
      id v11 = *(id *)(a1 + 32);
      id v16 = [(id)a1 agentDescription];
      sub_10012F648(v11, 20003, 0, v16);
    }
    else
    {
      id v12 = (void *)_NRCopyLogObjectForNRUUID();
      int v13 = _NRLogIsLevelEnabled();

      if (!v13) {
        return;
      }
      id v16 = (id)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
}

id *sub_100064188(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    v26.receiver = a1;
    v26.super_class = (Class)NRCompanionProxyAgent;
    id v14 = (id *)[super init];
    if (!v14)
    {
      id v22 = sub_100064428();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v24 = sub_100064428();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v25 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v25 = 136446210;
      *(void *)(v25 + 4) = "-[NRCompanionProxyAgent initWithQueue:interfaceName:remoteDeviceName:nrUUID:]";
      sub_100064428();
      _NRLogAbortWithPack();
    }
    a1 = v14;
    objc_storeStrong(v14 + 4, a5);
    [a1 setActive:0];
    [a1 setKernelActivated:1];
    [a1 setUserActivated:1];
    [a1 setVoluntary:1];
    [a1 setNetworkProvider:1];
    id v15 = +[NSUUID UUID];
    [a1 setAgentUUID:v15];

    objc_storeStrong(a1 + 7, a3);
    id v16 = [objc_alloc((Class)NSString) initWithFormat:@"CompanionProxy via %@", v12];
    [a1 setAgentDescription:v16];

    objc_storeStrong(a1 + 5, a2);
    a1[10] = (id)1;
    id v17 = objc_alloc((Class)NSString);
    int v18 = [a1 agentUUID];
    id v19 = [v17 initWithFormat:@"CmpnProxy-%@", v18];
    id v20 = a1[11];
    a1[11] = v19;
  }
  return a1;
}

id sub_100064428()
{
  if (qword_1001F4940 != -1) {
    dispatch_once(&qword_1001F4940, &stru_1001C69B8);
  }
  uint64_t v0 = (void *)qword_1001F4938;

  return v0;
}

void sub_10006447C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4938;
  qword_1001F4938 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000644C0(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 15)) {
    return 1;
  }
  uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    id v84 = [(id)v1 agentDescription];
    _NRLogWithArgs();
  }
  id v5 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
  id v6 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = v5;

  id v7 = *(void **)(v1 + 48);
  if (v7)
  {
    if ([v7 registerNetworkAgent:v1])
    {
      uint64_t v8 = *(void *)(v1 + 56);
      id v9 = *(id *)(v1 + 48);
      LOBYTE(v8) = [v9 addNetworkAgentToInterfaceNamed:v8];

      if ((v8 & 1) == 0)
      {
        uint64_t v25 = (void *)_NRCopyLogObjectForNRUUID();
        int v26 = _NRLogIsLevelEnabled();

        if (v26)
        {
          id v27 = *(id *)(v1 + 32);
          id v28 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        goto LABEL_20;
      }
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v10 = (unsigned __int8 *)(id)qword_1001F4A18;
      if (v10)
      {
        int v11 = v10[8];

        if (v11)
        {
          id v12 = (void *)_NRCopyLogObjectForNRUUID();
          int v13 = _NRLogIsLevelEnabled();

          if (v13)
          {
            id v14 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
          *(unsigned char *)(v1 + 15) = 1;
          [(id)v1 setActive:1];
          [*(id *)(v1 + 48) updateNetworkAgent:v1];
          goto LABEL_20;
        }
      }
      *(unsigned char *)(v1 + 15) = 1;
      [(id)v1 setActive:1];
      [*(id *)(v1 + 48) updateNetworkAgent:v1];
      id v29 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(v1 + 32));
      if (v29)
      {
        id v19 = v29;
        id v30 = v29[16];
        if (v30)
        {
          int v31 = v30;
          id v32 = v19[16];
          unsigned int v33 = [v32 allowsDirectToCloud];

          if (!v33) {
            goto LABEL_70;
          }
        }
        self;
        if (qword_1001F4A20 == -1)
        {
LABEL_34:
          id v34 = (id *)(id)qword_1001F4A18;
          id v35 = *(id *)(v1 + 32);
          if (v34)
          {
            id v36 = sub_10015BD9C();
            dispatch_assert_queue_V2(v36);

            if (v35)
            {
              id v37 = [v34[27] objectForKeyedSubscript:v35];

              if (v37)
              {
                uint64_t v38 = [v34[27] objectForKeyedSubscript:v35];
                id v39 = (id)v38;
                if (v38 && *(void *)(v38 + 448))
                {
                  nw_path_t v40 = (void *)NEVirtualInterfaceCopyName();
                  goto LABEL_47;
                }
LABEL_46:
                nw_path_t v40 = 0;
LABEL_47:

                if (v40)
                {
                  id v47 = objc_alloc((Class)NEPathControllerNetworkAgent);
                  id v48 = [objc_alloc((Class)NWInterface) initWithInterfaceName:v40];
                  id v49 = [v47 initWithAdvisoryInterface:v48 advisoryMode:2];
                  long long v50 = *(void **)(v1 + 64);
                  *(void *)(v1 + 64) = v49;

                  long long v51 = +[NSUUID UUID];
                  [*(id *)(v1 + 64) setAgentUUID:v51];

                  [*(id *)(v1 + 64) setAgentDescription:@"Fallback from any interface to CompanionProxy"];
                  [*(id *)(v1 + 64) setActive:1];
                  [*(id *)(v1 + 64) setVoluntary:0];
                  [*(id *)(v1 + 64) setUserActivated:0];
                  [*(id *)(v1 + 64) setKernelActivated:0];
                  id v52 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
                  id v53 = *(void **)(v1 + 72);
                  *(void *)(v1 + 72) = v52;

                  if ([*(id *)(v1 + 72) registerNetworkAgent:*(void *)(v1 + 64)])
                  {
                    id v54 = +[NEPolicyRouteRule routeRuleWithAction:5 forType:0];
                    int v55 = [*(id *)(v1 + 64) agentUUID];
                    [v54 setNetworkAgentUUID:v55];

                    uint64_t v56 = +[NEPolicyRouteRule routeRuleWithAction:6 forType:6];
                    int v57 = [*(id *)(v1 + 64) agentUUID];
                    [v56 setNetworkAgentUUID:v57];

                    id v87 = v54;
                    v89[0] = v54;
                    v89[1] = v56;
                    id v58 = +[NSArray arrayWithObjects:v89 count:2];
                    id v59 = +[NEPolicyResult routeRules:v58];

                    id v60 = objc_alloc((Class)NEPolicy);
                    uint64_t v61 = +[NEPolicyCondition allInterfaces];
                    id v88 = v61;
                    uint64_t v62 = +[NSArray arrayWithObjects:&v88 count:1];
                    id v63 = [v60 initWithOrder:10 result:v59 conditions:v62];

                    self;
                    if (qword_1001F4D28 != -1) {
                      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                    }
                    id v64 = (id)qword_1001F4D20;
                    id v65 = sub_100134CFC((uint64_t)v64, *(void **)(v1 + 88), v63);

                    self;
                    if (qword_1001F4D28 != -1) {
                      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                    }
                    uint64_t v66 = v87;
                    id v67 = (id)qword_1001F4D20;
                    id v68 = (id *)v67;
                    if (v67)
                    {
                      dispatch_assert_queue_V2(*((dispatch_queue_t *)v67 + 1));
                      if (([v68[2] apply] & 1) == 0) {
                        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v69, v70, v71, v86);
                      }
                    }

                    LOBYTE(v66) = 1;
                  }
                  else
                  {
                    id v74 = (void *)_NRCopyLogObjectForNRUUID();
                    int v75 = _NRLogIsLevelEnabled();

                    if (v75)
                    {
                      id v76 = (void *)_NRCopyLogObjectForNRUUID();
                      _NRLogWithArgs();
                    }
                    LOBYTE(v66) = 0;
                  }
LABEL_64:

                  id v77 = (void *)_NRCopyLogObjectForNRUUID();
                  if (v66)
                  {
                    int v78 = _NRLogIsLevelEnabled();

                    if (v78)
                    {
                      id v79 = (void *)_NRCopyLogObjectForNRUUID();
                      id v85 = [(id)v1 agentUUID];
                      _NRLogWithArgs();

LABEL_69:
                    }
                  }
                  else
                  {
                    int v80 = _NRLogIsLevelEnabled();

                    if (v80)
                    {
                      id v79 = (void *)_NRCopyLogObjectForNRUUID();
                      _NRLogWithArgs();
                      goto LABEL_69;
                    }
                  }
LABEL_70:
                  id v81 = *(id *)(v1 + 32);
                  id v82 = [(id)v1 agentUUID];
                  id v83 = [v82 UUIDString];
                  sub_10012F648(v81, 12002, 0, v83);

                  goto LABEL_19;
                }
LABEL_58:
                id v72 = (void *)_NRCopyLogObjectForNRUUID();
                LODWORD(v66) = _NRLogIsLevelEnabled();

                if (v66)
                {
                  id v73 = (void *)_NRCopyLogObjectForNRUUID();
                  _NRLogWithArgs();

                  nw_path_t v40 = 0;
                  LOBYTE(v66) = 0;
                }
                else
                {
                  nw_path_t v40 = 0;
                }
                goto LABEL_64;
              }
            }
            else
            {
              id v45 = sub_1000AA13C();
              int v46 = _NRLogIsLevelEnabled();

              if (v46)
              {
                id v39 = sub_1000AA13C();
                _NRLogWithArgs();
                goto LABEL_46;
              }
            }
          }

          goto LABEL_58;
        }
      }
      else
      {
        id v41 = sub_100064428();
        int v42 = _NRLogIsLevelEnabled();

        if (v42)
        {
          id v43 = sub_100064428();
          _NRLogWithArgs();
        }
        uint64_t v1 = _os_log_pack_size();
        id v19 = (id *)((char *)&v86 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
        __error();
        uint64_t v44 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v44 = 136446210;
        *(void *)(v44 + 4) = "-[NRCompanionProxyAgent registerAgent]";
        sub_100064428();
        _NRLogAbortWithPack();
      }
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      goto LABEL_34;
    }
    id v17 = (void *)_NRCopyLogObjectForNRUUID();
    int v18 = _NRLogIsLevelEnabled();

    if (v18)
    {
LABEL_18:
      id v19 = (id *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
LABEL_19:
    }
  }
  else
  {
    id v15 = (void *)_NRCopyLogObjectForNRUUID();
    int v16 = _NRLogIsLevelEnabled();

    if (v16) {
      goto LABEL_18;
    }
  }
LABEL_20:
  if (*(unsigned char *)(v1 + 15)) {
    return 1;
  }
  id v20 = *(void **)(v1 + 48);
  if (v20)
  {
    [v20 unregisterNetworkAgent];
    dispatch_data_t v21 = *(void **)(v1 + 48);
    *(void *)(v1 + 48) = 0;
  }
  id v22 = *(void **)(v1 + 72);
  if (v22) {
    [v22 unregisterNetworkAgent];
  }
  id v23 = *(void **)(v1 + 64);
  *(void *)(v1 + 64) = 0;

  id v24 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = 0;

  return *(unsigned char *)(v1 + 15) != 0;
}

void sub_100064F74(uint64_t a1)
{
  if (a1)
  {
    ++*(void *)(a1 + 80);
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v4 = *(id *)(a1 + 32);
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      id v6 = [(id)a1 agentDescription];

      _NRLogWithArgs();
    }
    if (*(unsigned char *)(a1 + 15))
    {
      if (([*(id *)(a1 + 48) updateNetworkAgent:a1] & 1) == 0)
      {
        id v7 = (void *)_NRCopyLogObjectForNRUUID();
        int v8 = _NRLogIsLevelEnabled();

        if (v8)
        {
          id v9 = (id)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
      }
    }
  }
}

id *sub_1000650E0(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v25.receiver = a1;
    v25.super_class = (Class)NRCompanionProxyConfigAgent;
    int v11 = (id *)[super init];
    if (!v11)
    {
      id v21 = sub_100064428();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v23 = sub_100064428();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v24 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v24 = 136446210;
      *(void *)(v24 + 4) = "-[NRCompanionProxyConfigAgent initWithQueue:parameters:nrUUID:]";
      sub_100064428();
      _NRLogAbortWithPack();
    }
    a1 = v11;
    objc_storeStrong(v11 + 4, a4);
    objc_storeStrong(a1 + 7, a3);
    [a1 setKernelActivated:1];
    [a1 setUserActivated:1];
    [a1 setVoluntary:1];
    id v12 = +[NSUUID UUID];
    [a1 setAgentUUID:v12];

    id v13 = [objc_alloc((Class)NSString) initWithFormat:@"CompanionProxyConfig for %@", v10];
    [a1 setAgentDescription:v13];

    id v14 = objc_alloc((Class)NSString);
    id v15 = a1[4];
    id v16 = [v14 initWithFormat:@"NRCompanionProxyConfigAgent-%@", v15];
    id v17 = a1[8];
    a1[8] = v16;

    objc_storeStrong(a1 + 5, a2);
    id v18 = a1[4];
    id v19 = [a1 agentDescription];
    sub_10012F648(v18, 20001, 0, v19);
  }
  return a1;
}

uint64_t sub_10006537C(uint64_t result)
{
  if (result)
  {
    uint64_t v5 = result;
    int v6 = *(unsigned __int8 *)(result + 14);
    if (*(unsigned char *)(result + 14)) {
      return v6 != 0;
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = (void *)_NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = [(id)v5 agentDescription];
      _NRLogWithArgs();
    }
    id v10 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
    int v11 = *(void **)(v5 + 48);
    *(void *)(v5 + 48) = v10;

    id v12 = *(void **)(v5 + 48);
    if (v12)
    {
      if ([v12 registerNetworkAgent:v5])
      {
        *(unsigned char *)(v5 + 14) = 1;
        [(id)v5 setActive:1];
        [*(id *)(v5 + 48) updateNetworkAgent:v5];
        id v13 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(v5 + 32));
        if (v13)
        {
          id v14 = v13;
          id v15 = [(id)v5 agentUUID];
          int IsLevelEnabled = +[NEPolicyResult netAgentUUID:v15];

          id v16 = sub_10015BD9C();
          dispatch_assert_queue_V2(v16);

          id v17 = sub_1001414DC(v14, @"0");
          uint64_t v1 = +[NEPolicyCondition flowRemoteAddress:v17 prefix:128];

          id v18 = sub_100140FAC(v14, @"62742");
          uint64_t v2 = +[NEPolicyCondition flowLocalAddress:v18 prefix:128];

          id v19 = objc_alloc((Class)NEPolicy);
          v41[0] = (uint64_t)v1;
          v41[1] = (uint64_t)v2;
          id v20 = +[NEPolicyCondition allInterfaces];
          v41[2] = (uint64_t)v20;
          id v21 = +[NSArray arrayWithObjects:v41 count:3];
          id v3 = [v19 initWithOrder:10 result:IsLevelEnabled conditions:v21];

          self;
          id v4 = &unk_1001F4000;
          if (qword_1001F4D28 == -1)
          {
LABEL_9:
            id v22 = (id)qword_1001F4D20;
            id v23 = sub_100134CFC((uint64_t)v22, *(void **)(v5 + 64), v3);

            self;
            if (v4[421] != -1) {
              dispatch_once(&qword_1001F4D28, &stru_1001C8658);
            }
            id v24 = (id)qword_1001F4D20;
            objc_super v25 = (id *)v24;
            if (v24)
            {
              dispatch_assert_queue_V2(*((dispatch_queue_t *)v24 + 1));
              if (([v25[2] apply] & 1) == 0) {
                sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v26, v27, v28, v41[0]);
              }
            }

            id v29 = *(id *)(v5 + 32);
            id v30 = [(id)v5 agentDescription];
            sub_10012F648(v29, 20002, 0, v30);

            goto LABEL_19;
          }
        }
        else
        {
          id v37 = sub_100064428();
          int v38 = _NRLogIsLevelEnabled();

          if (v38)
          {
            id v39 = sub_100064428();
            _NRLogWithArgs();
          }
          uint64_t v5 = _os_log_pack_size();
          id v14 = (uint64_t *)((char *)v41 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
          __error();
          uint64_t v40 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v40 = 136446210;
          *(void *)(v40 + 4) = "-[NRCompanionProxyConfigAgent registerAgent]";
          sub_100064428();
          _NRLogAbortWithPack();
        }
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        goto LABEL_9;
      }
      unsigned int v33 = (void *)_NRCopyLogObjectForNRUUID();
      int v34 = _NRLogIsLevelEnabled();

      if (!v34) {
        goto LABEL_20;
      }
    }
    else
    {
      int v31 = (void *)_NRCopyLogObjectForNRUUID();
      int v32 = _NRLogIsLevelEnabled();

      if (!v32) {
        goto LABEL_20;
      }
    }
    id v14 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
LABEL_19:

LABEL_20:
    int v6 = *(unsigned __int8 *)(v5 + 14);
    if (!*(unsigned char *)(v5 + 14))
    {
      id v35 = *(void **)(v5 + 48);
      if (v35)
      {
        [v35 unregisterNetworkAgent];
        id v36 = *(void **)(v5 + 48);
        *(void *)(v5 + 48) = 0;

        int v6 = *(unsigned __int8 *)(v5 + 14);
      }
      else
      {
        int v6 = 0;
      }
    }
    return v6 != 0;
  }
  return result;
}

void sub_100065AB4(uint64_t a1)
{
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v2 = (id)qword_1001F4DD8;
  if (v2)
  {
    id v3 = v2;
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v2 + 2));
    if (!v3[10])
    {
      v3[10] = 1;
      if (v3[8] == 4)
      {
        sub_100158FD0((uint64_t)v3);
        if (v3[9])
        {
          v3[8] = 3;
          sub_100159248((uint64_t)v3);
        }
      }
    }
    int v4 = v3[8] & 0xFD;

    if (v4 == 1)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        int v6 = *(void **)(a1 + 40);
        id v7 = *(NSObject **)(v5 + 40);
        id v8 = v6;
        dispatch_assert_queue_V2(v7);
        id v9 = [v8 objectForKeyedSubscript:NWNetworkAgentStartOptionClientUUID];

        if (v9)
        {
          [*(id *)(v5 + 64) setObject:0 forKeyedSubscript:v9];
          if (qword_1001F4950 != -1) {
            dispatch_once(&qword_1001F4950, &stru_1001C69D8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4950 != -1) {
              dispatch_once(&qword_1001F4950, &stru_1001C69D8);
            }
            id v10 = (id)qword_1001F4948;
            id v18 = sub_100065F6C(v5);
            _NRLogWithArgs();
          }
        }
        else
        {
          if (qword_1001F4950 != -1) {
            dispatch_once(&qword_1001F4950, &stru_1001C69D8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4950 != -1) {
              dispatch_once(&qword_1001F4950, &stru_1001C69D8);
            }
            _NRLogWithArgs();
          }
        }
      }
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      int v11 = (id *)(id)qword_1001F4A18;
      id v19 = v11;
      if (v11)
      {
        id v12 = (id *)v11[6];
        uint64_t v13 = (uint64_t)v12;
        if (v12)
        {
          id v14 = v12[3];
          dispatch_assert_queue_V2(v14);

          if (qword_1001F4DC0 != -1) {
            dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DC0 != -1) {
              dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
            }
            _NRLogWithArgs();
          }
          int v15 = *(_DWORD *)(v13 + 48);
          if (v15 > 0)
          {
            *(_DWORD *)(v13 + 48) = v15 - 1;
LABEL_36:
            if (!*(_DWORD *)(v13 + 40))
            {
              id WeakRetained = objc_loadWeakRetained((id *)(v13 + 160));
              [WeakRetained preferWiFiRequestUnavailable];
            }
            goto LABEL_51;
          }
          int v17 = *(_DWORD *)(v13 + 40);
          if (v17 > 0)
          {
            sub_10015172C(v13, v17 - 1);
            if (*(int *)(v13 + 40) >= 1) {
              sub_100157CA8(v13);
            }
            goto LABEL_36;
          }
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
LABEL_51:

      return;
    }
  }
  if (qword_1001F4950 != -1) {
    dispatch_once(&qword_1001F4950, &stru_1001C69D8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4950 != -1) {
      dispatch_once(&qword_1001F4950, &stru_1001C69D8);
    }
    _NRLogWithArgs();
  }
}

id sub_100065F6C(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 15) || !*(void *)(a1 + 64)) {
    return 0;
  }
  id v2 = objc_alloc_init((Class)NSMutableArray);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = [[*(id *)(a1 + 64) allValues];
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = [*(id *)(*((void *)&v14 + 1) + 8 * i) parameters];
        id v9 = [v8 copyCParameters];

        uint64_t account_id = nw_parameters_get_account_id();
        if (account_id)
        {
          int v11 = +[NSString stringWithUTF8String:account_id];
LABEL_11:
          [v2 addObject:v11];
LABEL_12:

          goto LABEL_13;
        }
        uint64_t pid = nw_parameters_get_pid();
        if ((int)pid >= 1)
        {
          int v11 = sub_100116370(pid, 0);
          if (!v11) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
LABEL_13:
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }

  return v2;
}

void sub_10006611C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4948;
  qword_1001F4948 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10006622C(uint64_t a1)
{
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v2 = (id)qword_1001F4DD8;
  if (!v2) {
    goto LABEL_36;
  }
  id v3 = v2;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v2 + 2));
  if (!v3[10])
  {
    v3[10] = 1;
    if (v3[8] == 4)
    {
      sub_100158FD0((uint64_t)v3);
      if (v3[9])
      {
        v3[8] = 3;
        sub_100159248((uint64_t)v3);
      }
    }
  }
  int v4 = v3[8] & 0xFD;

  if (v4 == 1)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      uint64_t v6 = *(void **)(a1 + 40);
      id v7 = *(NSObject **)(v5 + 40);
      id v8 = v6;
      dispatch_assert_queue_V2(v7);
      id v9 = [v8 objectForKeyedSubscript:NWNetworkAgentStartOptionClientUUID];

      if (v9)
      {
        id v10 = +[NWPath pathForClientID:v9];
        [*(id *)(v5 + 64) setObject:v10 forKeyedSubscript:v9];

        if (qword_1001F4950 != -1) {
          dispatch_once(&qword_1001F4950, &stru_1001C69D8);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4950 != -1) {
            dispatch_once(&qword_1001F4950, &stru_1001C69D8);
          }
          id v11 = (id)qword_1001F4948;
          id v19 = sub_100065F6C(v5);
          _NRLogWithArgs();
        }
      }
      else
      {
        if (qword_1001F4950 != -1) {
          dispatch_once(&qword_1001F4950, &stru_1001C69D8);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4950 != -1) {
            dispatch_once(&qword_1001F4950, &stru_1001C69D8);
          }
          _NRLogWithArgs();
        }
      }
    }
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v12 = (id *)(id)qword_1001F4A18;
    id v20 = v12;
    if (v12)
    {
      uint64_t v13 = (id *)v12[6];
      uint64_t v14 = (uint64_t)v13;
      if (v13)
      {
        long long v15 = v13[3];
        dispatch_assert_queue_V2(v15);

        int v16 = *(_DWORD *)(v14 + 40);
        if (v16)
        {
          sub_10015172C(v14, v16 + 1);
          sub_100157CA8(v14);
        }
        else
        {
          id WeakRetained = objc_loadWeakRetained((id *)(v14 + 160));
          unsigned int v18 = [WeakRetained preferWiFiRequestAvailable];

          if (v18) {
            sub_10015172C(v14, *(_DWORD *)(v14 + 40) + 1);
          }
          else {
            ++*(_DWORD *)(v14 + 48);
          }
        }
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
  }
  else
  {
LABEL_36:
    if (qword_1001F4950 != -1) {
      dispatch_once(&qword_1001F4950, &stru_1001C69D8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4950 != -1) {
        dispatch_once(&qword_1001F4950, &stru_1001C69D8);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100066750(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100066BF8()
{
  if (qword_1001F4950 != -1) {
    dispatch_once(&qword_1001F4950, &stru_1001C69D8);
  }
  uint64_t v0 = (void *)qword_1001F4948;

  return v0;
}

void sub_100066CF4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (!WeakRetained)
  {
    if (qword_1001F4950 != -1) {
      dispatch_once(&qword_1001F4950, &stru_1001C69D8);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_13;
    }
    if (qword_1001F4950 == -1)
    {
LABEL_12:
      _NRLogWithArgs();
      goto LABEL_13;
    }
LABEL_36:
    dispatch_once(&qword_1001F4950, &stru_1001C69D8);
    goto LABEL_12;
  }
  if (WeakRetained[15])
  {
    if (qword_1001F4950 != -1) {
      dispatch_once(&qword_1001F4950, &stru_1001C69D8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4950 == -1) {
        goto LABEL_12;
      }
      goto LABEL_36;
    }
    goto LABEL_13;
  }
  id v3 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
  int v4 = (void *)*((void *)v2 + 6);
  *((void *)v2 + 6) = v3;

  uint64_t v5 = (void *)*((void *)v2 + 6);
  if (!v5)
  {
    if (qword_1001F4950 != -1) {
      dispatch_once(&qword_1001F4950, &stru_1001C69D8);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_13;
    }
    if (qword_1001F4950 == -1) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
  if ([v5 registerNetworkAgent:v2])
  {
    uint64_t v6 = +[NRPreferWiFiAgent agentDomain];
    id v7 = +[NRPreferWiFiAgent agentType];
    id v8 = +[NEPolicyCondition requiredAgentDomain:v6 agentType:v7];

    id v9 = [v2 agentUUID];
    id v10 = +[NEPolicyResult netAgentUUID:v9];

    id v11 = objc_alloc((Class)NEPolicy);
    v29[0] = v8;
    id v12 = +[NEPolicyCondition allInterfaces];
    v29[1] = v12;
    uint64_t v13 = +[NSArray arrayWithObjects:v29 count:2];
    id v14 = [v11 initWithOrder:10 result:v10 conditions:v13];

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v15 = (id)qword_1001F4D20;
    id v16 = sub_100134CFC((uint64_t)v15, *((void **)v2 + 7), v14);

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v17 = (id)qword_1001F4D20;
    unsigned int v18 = (id *)v17;
    if (v17)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v17 + 1));
      if (([v18[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v19, v20, v21, v25);
      }
    }

    *((unsigned char *)v2 + 14) = 1;
    id v22 = [v2 agentUUID];
    id v23 = [v22 UUIDString];
    sub_10012F648(0, 15002, 0, v23);

    objc_initWeak(&location, v2);
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v24 = (id)qword_1001F4A18;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1000672B4;
    v26[3] = &unk_1001C7FF0;
    objc_copyWeak(&v27, &location);
    sub_1000B7F50((uint64_t)v24, v26);

    objc_destroyWeak(&v27);
    objc_destroyWeak(&location);

    goto LABEL_13;
  }
  if (qword_1001F4950 != -1) {
    dispatch_once(&qword_1001F4950, &stru_1001C69D8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4950 == -1) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_13:
}

void sub_100067288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000672B4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  int v4 = WeakRetained;
  if (WeakRetained)
  {
    if (*((unsigned char *)WeakRetained + 15))
    {
      if (qword_1001F4950 != -1) {
        dispatch_once(&qword_1001F4950, &stru_1001C69D8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4950 == -1) {
          goto LABEL_12;
        }
        goto LABEL_18;
      }
    }
    else if (([WeakRetained isActive] & 1) == 0)
    {
      [v4 setActive:1];
      [v4[6] updateNetworkAgent:];
      id v2 = [v4 agentUUID];
      id v3 = [v2 UUIDString];
      sub_10012F648(0, 15004, 0, v3);
    }
  }
  else
  {
    if (qword_1001F4950 != -1) {
      dispatch_once(&qword_1001F4950, &stru_1001C69D8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4950 == -1)
      {
LABEL_12:
        _NRLogWithArgs();
        goto LABEL_15;
      }
LABEL_18:
      dispatch_once(&qword_1001F4950, &stru_1001C69D8);
      goto LABEL_12;
    }
  }
LABEL_15:
}

void sub_10006747C(uint64_t a1)
{
  *(unsigned char *)(a1 + 15) = 1;
  if (*(unsigned char *)(a1 + 14))
  {
    *(unsigned char *)(a1 + 14) = 0;
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v2 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v2, *(void **)(a1 + 56));

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v3 = (id)qword_1001F4D20;
    int v4 = (id *)v3;
    if (v3)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 1));
      if (([v4[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v5, v6, v7, v10);
      }
    }

    id v8 = *(void **)(a1 + 48);
    if (v8 && [v8 unregisterNetworkAgent])
    {
      [(id)a1 setActive:0];
      id v11 = [(id)a1 agentUUID];
      id v9 = [v11 UUIDString];
      sub_10012F648(0, 15003, 0, v9);
    }
  }
}

uint64_t sub_10006760C(uint64_t a1, BOOL *a2)
{
  if (a1)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v3 = [*(id *)(a1 + 64) allValues];
    id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v4)
    {
      id v5 = v4;
      BOOL v6 = 0;
      char v7 = 0;
      uint64_t v8 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v3);
          }
          uint64_t v10 = [*(id *)(*((void *)&v14 + 1) + 8 * i) parameters];
          id v11 = [v10 copyCParameters];

          char use_p2p = nw_parameters_get_use_p2p();
          BOOL v6 = v6 || nw_parameters_get_traffic_class() > 0x12B;
          v7 |= use_p2p;
        }
        id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v5);
    }
    else
    {
      BOOL v6 = 0;
      char v7 = 0;
    }

    if (a2) {
      *a2 = v6;
    }
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

void sub_100067D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100067D7C()
{
  if (qword_1001F4960 != -1) {
    dispatch_once(&qword_1001F4960, &stru_1001C69F8);
  }
  uint64_t v0 = (void *)qword_1001F4958;

  return v0;
}

void sub_100067DD0(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    if (a2)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
    }
    else
    {
      int v6 = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!v6) {
        goto LABEL_7;
      }
    }
    char v7 = (void *)_NRCopyLogObjectForNRUUID();
    id v8 = [v9 copyDescription];
    _NRLogWithArgs();

    id WeakRetained = v9;
  }
LABEL_7:
}

void sub_100067EF4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4958;
  qword_1001F4958 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100068604(void *a1)
{
  if (a1)
  {
    id String = (void *)NRDataProtectionClassCreateString();
    id v3 = *(void **)((char *)a1 + 231);
    if (v3)
    {
      id v4 = v3;
      [v4 setClientQueue:a1[1]];
      objc_initWeak(location, a1);
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472;
      v50[2] = sub_100068B9C;
      v50[3] = &unk_1001C72F8;
      objc_copyWeak(&v53, location);
      char v54 = 4;
      id v5 = String;
      id v51 = v5;
      id v6 = v4;
      id v52 = v6;
      [v6 setStateUpdateBlock:v50];
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472;
      v45[2] = sub_100069384;
      void v45[3] = &unk_1001C7320;
      objc_copyWeak(&v48, location);
      id v7 = v5;
      id v46 = v7;
      id v8 = v6;
      id v47 = v8;
      char v49 = 4;
      [v8 setChildStateUpdateBlock:v45];
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472;
      v41[2] = sub_1000694BC;
      uint64_t v41[3] = &unk_1001C7348;
      objc_copyWeak(&v44, location);
      id v9 = v7;
      id v42 = v9;
      id v10 = v8;
      id v43 = v10;
      [v10 setConfigurationUpdateBlock:v41];
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_10006959C;
      v37[3] = &unk_1001C7370;
      objc_copyWeak(&v40, location);
      id v11 = v9;
      id v38 = v11;
      id v12 = v10;
      id v39 = v12;
      [v12 setTrafficSelectorUpdateBlock:v37];
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_10006969C;
      v33[3] = &unk_1001C7398;
      objc_copyWeak(&v36, location);
      id v13 = v11;
      id v34 = v13;
      id v14 = v12;
      id v35 = v14;
      [v14 setAdditionalAddressesUpdateBlock:v33];
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      void v29[2] = sub_10006977C;
      v29[3] = &unk_1001C79B0;
      objc_copyWeak(&v32, location);
      id v15 = v13;
      id v30 = v15;
      id v16 = v14;
      id v31 = v16;
      [v16 setShortDPDEventBlock:v29];
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100069850;
      v25[3] = &unk_1001C7398;
      objc_copyWeak(&v28, location);
      id v26 = v15;
      id v17 = v16;
      id v27 = v17;
      [v17 setPrivateNotifyStatusEvent:v25];
      unsigned int v18 = (void *)_NRCopyLogObjectForNRUUID();
      char IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v20 = (void *)_NRCopyLogObjectForNRUUID();
        id v24 = [a1 copyDescription];
        _NRLogWithArgs();
      }
      objc_destroyWeak(&v28);

      objc_destroyWeak(&v32);
      objc_destroyWeak(&v36);

      objc_destroyWeak(&v40);
      objc_destroyWeak(&v44);

      objc_destroyWeak(&v48);
      objc_destroyWeak(&v53);
      objc_destroyWeak(location);
    }
    else
    {
      id v21 = sub_100067D7C();
      int v22 = _NRLogIsLevelEnabled();

      if (v22)
      {
        id v23 = sub_100067D7C();
        _NRLogWithArgs();
      }
      id v17 = 0;
    }
  }
}

void sub_100068B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *location, id *a17)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(location);
  objc_destroyWeak(a17);
  objc_destroyWeak((id *)(v22 - 112));
  _Unwind_Resume(a1);
}

void sub_100068B9C(uint64_t a1, uint64_t a2, void *a3)
{
  id v80 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    id v7 = [WeakRetained linkDelegate];
    id v8 = v80;
    if (!v80)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
      [v6 reportEvent:3009, @"%@ session %@ changed state to %@", v16, v17, SessionStateString detailsFormat];

      switch(a2)
      {
        case 1:
          if ([v6 state] == 1)
          {
            uint64_t v19 = (void *)_NRCopyLogObjectForNRUUID();
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              id v21 = (void *)_NRCopyLogObjectForNRUUID();
              id v22 = [v6 copyDescription];
              uint64_t v76 = *(void *)(a1 + 32);
              uint64_t v78 = *(void *)(a1 + 40);
              uint64_t v70 = 313;
              id v73 = v22;
              id v64 = "";
              id v67 = "-[NRLinkFixedInterface setupIKECallbacks:]_block_invoke";
              _NRLogWithArgs();
            }
            [v6 changeStateTo:5 v64 v67 v70 v73 v76 v78];
          }
          else
          {
            unsigned int v35 = [v6 state];
            id v36 = (void *)_NRCopyLogObjectForNRUUID();
            if (v35 == 5)
            {
              int v37 = _NRLogIsLevelEnabled();

              if (!v37) {
                goto LABEL_31;
              }
            }
            else
            {
              int v59 = _NRLogIsLevelEnabled();

              if (!v59) {
                goto LABEL_31;
              }
            }
            id v60 = (void *)_NRCopyLogObjectForNRUUID();
            id v61 = [v6 copyDescription];
            _NRLogWithArgs();
          }
          goto LABEL_31;
        case 2:
          id v26 = (void *)_NRCopyLogObjectForNRUUID();
          int v27 = _NRLogIsLevelEnabled();

          if (v27)
          {
            id v28 = (void *)_NRCopyLogObjectForNRUUID();
            id v29 = [v6 copyDescription];
            uint64_t v76 = *(void *)(a1 + 32);
            uint64_t v78 = *(void *)(a1 + 40);
            uint64_t v70 = 321;
            id v73 = v29;
            id v64 = "";
            id v67 = "-[NRLinkFixedInterface setupIKECallbacks:]_block_invoke";
            _NRLogWithArgs();
          }
          if (objc_msgSend(v6, "state", v64, v67, v70, v73, v76, v78) == 8)
          {
            id v30 = (void *)_NRCopyLogObjectForNRUUID();
            int v31 = _NRLogIsLevelEnabled();

            if (v31)
            {
              id v32 = (void *)_NRCopyLogObjectForNRUUID();
              id v33 = [v6 copyDescription];
              uint64_t v77 = *(void *)(a1 + 32);
              uint64_t v79 = *(void *)(a1 + 40);
              uint64_t v71 = 323;
              id v74 = v33;
              id v65 = "";
              id v68 = "-[NRLinkFixedInterface setupIKECallbacks:]_block_invoke";
              _NRLogWithArgs();
            }
            if (*(unsigned char *)(a1 + 56) == 4)
            {
              [v6 setIkeClassDEstablished:1];
              [v6 setIkeClassCEstablished:1];
            }
            [v7 linkIsReady:v6, v65, v68, v71, v74, v77, v79];
          }
          else
          {
            if ([v6 state] != 5)
            {
              id v38 = (void *)_NRCopyLogObjectForNRUUID();
              int v39 = _NRLogIsLevelEnabled();

              if (v39)
              {
                id v40 = (void *)_NRCopyLogObjectForNRUUID();
                id v41 = [v6 copyDescription];
                uint64_t v77 = *(void *)(a1 + 32);
                uint64_t v79 = *(void *)(a1 + 40);
                uint64_t v71 = 331;
                id v74 = v41;
                id v65 = "";
                id v68 = "-[NRLinkFixedInterface setupIKECallbacks:]_block_invoke";
                _NRLogWithArgs();
              }
            }
            [v6 changeStateTo:8 v65 v68 v71 v74 v77 v79];
            if (*(unsigned char *)(a1 + 56) == 4)
            {
              [v6 setIkeClassDEstablished:1];
              [v6 setIkeClassCEstablished:1];
            }
            [v7 linkIsReady:v6];
            if ([v6 shouldCreateCompanionProxyAgent])
            {
              id v42 = [v6 companionProxyAgent];

              if (!v42)
              {
                id v43 = sub_100067D7C();
                int v44 = _NRLogIsLevelEnabled();

                if (v44)
                {
                  id v45 = sub_100067D7C();
                  uint64_t v72 = 341;
                  uint64_t v66 = "";
                  uint64_t v69 = "-[NRLinkFixedInterface setupIKECallbacks:]_block_invoke";
                  _NRLogWithArgs();
                }
                [v6 virtualInterface:v66 v69:v72];
                id v46 = (void *)NEVirtualInterfaceCopyName();
                id v47 = [v6 nrUUID];
                id v48 = sub_10013DC5C((uint64_t)NRDLocalDevice, v47);
                char v49 = v48;
                if (v48) {
                  long long v50 = (void *)*((void *)v48 + 14);
                }
                else {
                  long long v50 = 0;
                }
                id v51 = v50;

                if (v46 && v51)
                {
                  id v52 = [NRCompanionProxyAgent alloc];
                  id v53 = [v6 queue];
                  char v54 = [v6 nrUUID];
                  int v55 = sub_100064188((id *)&v52->super.isa, v53, v46, v51, v54);
                  uint64_t v56 = (void *)v6[11];
                  v6[11] = v55;

                  [v6 reportEvent:12001];
                }
              }
              int v57 = [v6 companionProxyAgent];
              char v58 = sub_1000644C0((uint64_t)v57);

              if (v58)
              {
                [v6 reportEvent:12002];
                goto LABEL_31;
              }
              uint64_t v62 = (void *)_NRCopyLogObjectForNRUUID();
              int v63 = _NRLogIsLevelEnabled();

              if (v63)
              {
                id v15 = (void *)_NRCopyLogObjectForNRUUID();
                id v75 = [v6 copyDescription];
                _NRLogWithArgs();

                goto LABEL_30;
              }
            }
          }
          break;
        case 3:
          if (*(unsigned char *)(a1 + 56) == 4)
          {
            [v6 setIkeClassDEstablished:0];
            [v6 setIkeClassCEstablished:0];
          }
          [v6 reportEvent:3018, @"%@ session %@ cancelled by peer", *(void *)(a1 + 32), *(void *)(a1 + 40) detailsFormat];
          goto LABEL_27;
        case 4:
          [v6 cancelWithReason:@"%@ session %@ got unexpected MOBIKE state", *(void *)(a1 + 32), *(void *)(a1 + 40)];
          goto LABEL_31;
        default:
          uint64_t v34 = *(void *)(a1 + 32);
          id v15 = (void *)NEIKEv2CreateSessionStateString();
          [v6 cancelWithReason:@"%@ session %@ got bad IKE state %@", v34, v15, v70, v73];
          goto LABEL_30;
      }
      goto LABEL_31;
    }
    uint64_t v9 = *(unsigned __int8 *)(a1 + 56);
    if (v9 == 4)
    {
      [v6 setIkeClassDEstablished:0];
      [v6 setIkeClassCEstablished:0];
      id v8 = v80;
      uint64_t v9 = *(unsigned __int8 *)(a1 + 56);
    }
    [v6 processIKEDisconnection:v9 error:v8];
    if ([v6 state] != 255)
    {
      id v10 = v80;
      if ([v10 code] == (id)4)
      {
        uint64_t v11 = NEIKEv2ErrorDomain;
        id v12 = [v10 domain];
        LODWORD(v11) = [v12 isEqualToString:v11];

        if (v11)
        {
          uint64_t v13 = *(void *)(a1 + 32);
          uint64_t v14 = *(void *)(a1 + 40);
          id v15 = (void *)NEIKEv2CreateSessionStateString();
          [v6 cancelWithReason:@"%@ session %@ got IKE error %@ with state %@", v13, v14, v10, v15];
LABEL_30:

          goto LABEL_31;
        }
      }
      else
      {
      }
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v24 = *(void *)(a1 + 40);
      uint64_t v25 = (void *)NEIKEv2CreateSessionStateString();
      [v6 reportEvent:3018, @"%@ session %@ got IKE error %@ with state %@", v23, v24, v10, v25 detailsFormat];

LABEL_27:
      sub_100069B0C((unsigned __int8 *)v6, *(unsigned __int8 *)(a1 + 56));
    }
LABEL_31:
  }
}

void sub_100069384(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v14 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v14)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
      [WeakRetained reportEvent:3018, @"%@ session %@ got child %u state update %@ error %@", v8, v9, a2, SessionStateString, v14 detailsFormat];

      [WeakRetained processIKEDisconnection:*(unsigned __int8 *)(a1 + 56) error:v14];
      if ([WeakRetained state] == 255) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      if (a3 != 3)
      {
        uint64_t v13 = (void *)NEIKEv2CreateSessionStateString();
        [WeakRetained reportEvent:3009, @"%@ session %@ child %u state update %@", v11, v12, a2, v13 detailsFormat];

        goto LABEL_9;
      }
      [WeakRetained reportEvent:3018, @"%@ session %@ got child %u Disconnected state with no error", v11, *(void *)(a1 + 40), a2 detailsFormat];
    }
    sub_100069B0C((unsigned __int8 *)WeakRetained, *(unsigned __int8 *)(a1 + 56));
  }
LABEL_9:
}

void sub_1000694BC(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10006959C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v12 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = (void *)_NRCopyLogObjectForNRUUID();
      id v11 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10006969C(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10006977C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    id WeakRetained = v6;
    if (IsLevelEnabled)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      id v5 = [v6 copyDescription];
      _NRLogWithArgs();

      id WeakRetained = v6;
    }
  }
}

void sub_100069850(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v29 = v3;
    id v5 = [v3 sortedArrayUsingComparator:&stru_1001C7DE8];
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      id v9 = [WeakRetained copyDescription];
      id v27 = *(id *)(a1 + 40);
      id v28 = v5;
      id v25 = v9;
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v23 = "-[NRLinkFixedInterface setupIKECallbacks:]_block_invoke_7";
      uint64_t v24 = 451;
      id v22 = "";
      _NRLogWithArgs();
    }
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v10 = v5;
    id v11 = [v10 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v31 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          unsigned int v16 = [v15 notifyStatus:v22, v23, v24, v25, v26, v27, v28];
          id v17 = [v15 notifyData];
          unsigned int v18 = (void *)_NRCopyLogObjectForNRUUID();
          int v19 = _NRLogIsLevelEnabled();

          if (v19)
          {
            uint64_t v20 = (void *)_NRCopyLogObjectForNRUUID();
            uint64_t v26 = v16;
            id v27 = v17;
            uint64_t v24 = 635;
            id v25 = [WeakRetained copyDescription];
            id v22 = "";
            uint64_t v23 = "-[NRLinkFixedInterface handleNotifyCode:payload:]";
            _NRLogWithArgs();
          }
          if (v16 == 50701)
          {
            sub_10014A7E0((uint64_t)NRDLocalDevice, v17, WeakRetained[4]);
            [WeakRetained checkProxyAgentWithForceUpdate:0];
          }
          else if (v16 == 50702)
          {
            id v21 = [WeakRetained linkDelegate];
            [v21 linkDidReceiveData:WeakRetained data:v17];
          }
        }
        id v12 = [v10 countByEnumeratingWithState:&v30 objects:v34 count:16];
      }
      while (v12);
    }

    id v3 = v29;
  }
}

void sub_100069B0C(unsigned __int8 *a1, uint64_t a2)
{
  id String = (id)NRDataProtectionClassCreateString();
  if (a1[16] == 255)
  {
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_10;
    }
LABEL_9:
    id v10 = (void *)_NRCopyLogObjectForNRUUID();
    id v11 = [a1 copyDescription];
    _NRLogWithArgs();

    goto LABEL_10;
  }
  [a1 invalidateIKESessionForClass:a2];
  id v4 = (void *)_NRCopyLogObjectForNRUUID();
  if (a2 != 4)
  {
    int v9 = _NRLogIsLevelEnabled();

    if (!v9) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  int v5 = _NRLogIsLevelEnabled();

  if (v5)
  {
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    id v12 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  sub_100069CC4((char *)a1);
LABEL_10:
}

void sub_100069CC4(char *a1)
{
  if (!a1) {
    return;
  }
  os_log_t v1 = (void **)a1;
  int v2 = a1[112];
  if ((v2 - 1) >= 2)
  {
    int v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      return;
    }
    id String = (id)_NRCopyLogObjectForNRUUID();
    id v3 = [v1 copyDescription];
    _NRLogWithArgs();
    goto LABEL_10;
  }
  if (v2 == 1)
  {
    self;
    if (qword_1001F47E8 != -1) {
      dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
    }
    id String = (id)qword_1001F47E0;
    id v3 = [v1 localInterfaceName];
    id v4 = [v1 localOuterEndpoint];
    sub_100011C08((uint64_t)String, v1, v3, v4);
    goto LABEL_7;
  }
  if (v2 == 2)
  {
    if (*(void *)(a1 + 231)) {
      return;
    }
    id String = (id)NRDataProtectionClassCreateString();
    if (*((unsigned __int8 *)v1 + 16) == 255)
    {
      id v22 = (void *)_NRCopyLogObjectForNRUUID();
      int v23 = _NRLogIsLevelEnabled();

      if (!v23) {
        goto LABEL_11;
      }
      id v3 = (id)_NRCopyLogObjectForNRUUID();
      id v4 = [v1 copyDescription];
      _NRLogWithArgs();
      goto LABEL_7;
    }
    id v8 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, v1[4]);
    id v3 = v8;
    if (v8)
    {
      id v9 = v8[9];

      if (v9)
      {
        id v4 = sub_10011EF54();
        [v4 setRandomizeLocalPort:1];
        id v10 = [v1 localInterfaceName];
        [v4 setOutgoingInterfaceName:v10];

        id v11 = [v1 remoteOuterEndpoint];
        [v4 setRemoteEndpoint:v11];

        [v4 setRequestChildlessSA:[v1 hasCompanionDatapath] ^ 1];
        id v12 = sub_10011F560(1, v3, 4);
        [v1 invalidateIKESessionForClass:4];
        id v13 = [objc_alloc((Class)NSString) initWithFormat:@"terminus-FixedInterface-%@", String];
        id v14 = objc_alloc((Class)NEIKEv2Session);
        id v15 = sub_10011F1E0();
        [v15 setMode:2];
        [v15 setReplayWindowSize:4];
        id v16 = [v14 initWithIKEConfig:v4 firstChildConfig:v15 sessionConfig:v12 queue:v1[1] ipsecInterface:objc_msgSend(v1, "virtualInterface") kernelSASessionName:0 packetDelegate:v13];
        id v17 = *(void **)((char *)v1 + 231);
        *(void **)((char *)v1 + 231) = v16;

        if (*(void **)((char *)v1 + 231))
        {
          [v1 reportEvent:3015, @"%@ %@", String, *(void **)((char *)v1 + 231) detailsFormat];
          sub_100068604(v1);
          unsigned int v18 = (void *)_NRCopyLogObjectForNRUUID();
          int v19 = _NRLogIsLevelEnabled();

          if (v19)
          {
            uint64_t v20 = (void *)_NRCopyLogObjectForNRUUID();
            id v21 = [v1 copyDescription];
            _NRLogWithArgs();
          }
          [*(void **)((char *)v1 + 231) connect:String];
        }
        else
        {
          long long v32 = (void *)_NRCopyLogObjectForNRUUID();
          int v33 = _NRLogIsLevelEnabled();

          if (v33)
          {
            uint64_t v34 = (void *)_NRCopyLogObjectForNRUUID();
            id v35 = [v1 copyDescription];
            _NRLogWithArgs();
          }
        }
      }
      else
      {
        uint64_t v24 = (void *)_NRCopyLogObjectForNRUUID();
        int v25 = _NRLogIsLevelEnabled();

        if (!v25) {
          goto LABEL_10;
        }
        id v4 = (id)_NRCopyLogObjectForNRUUID();
        id v12 = [v1 copyDescription];
        _NRLogWithArgs();
      }
      goto LABEL_29;
    }
  }
  else
  {
    id v26 = sub_100067D7C();
    int v27 = _NRLogIsLevelEnabled();

    if (v27)
    {
      id v28 = sub_100067D7C();
      _NRLogWithArgs();
    }
    id v3 = (id)_os_log_pack_size();
    os_log_t v1 = (id *)((char *)&String - ((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0));
    __error();
    uint64_t v29 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v29 = 136446210;
    *(void *)(v29 + 4) = "-[NRLinkFixedInterface setupIPsecIfNecessary:]";
    sub_100067D7C();
    _NRLogAbortWithPack();
  }
  long long v30 = (void *)_NRCopyLogObjectForNRUUID();
  int v31 = _NRLogIsLevelEnabled();

  if (!v31)
  {
    id v3 = 0;
    goto LABEL_10;
  }
  id v4 = (id)_NRCopyLogObjectForNRUUID();
  id v12 = [v1 copyDescription];
  _NRLogWithArgs();
LABEL_29:

LABEL_7:
LABEL_10:

LABEL_11:
  id v7 = String;
}

uint64_t sub_10006A35C(uint64_t result, int a2)
{
  if (result)
  {
    if (a2 != 4)
    {
      id v2 = sub_100067D7C();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v4 = sub_100067D7C();
        id String = (void *)NRDataProtectionClassCreateString();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v5 = _os_log_pack_fill();
      uint64_t v6 = NRDataProtectionClassCreateString();
      *(_DWORD *)uint64_t v5 = 136446466;
      *(void *)(v5 + 4) = "-[NRLinkFixedInterface ikeSessionPointerForDataProtectionClass:]";
      *(_WORD *)(v5 + 12) = 2112;
      *(void *)(v5 + 14) = v6;
      sub_100067D7C();
      _NRLogAbortWithPack();
    }
    result += 231;
  }
  return result;
}

void sub_10006AB7C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_10006ABB8(uint64_t a1, void *a2)
{
  path = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v5 = [WeakRetained state];
    if (path)
    {
      if (v5 != 255 && nw_path_get_status(path) == nw_path_status_satisfied)
      {
        uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v8 = (void *)_NRCopyLogObjectForNRUUID();
          id v9 = [v4 copyDescription];
          _NRLogWithArgs();
        }
        sub_100069CC4((char *)v4);
      }
    }
  }
}

void sub_10006B120(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1 || !*(unsigned char *)(v1 + 14)) {
    return;
  }
  if (!*(_DWORD *)(v1 + 16))
  {
    id v28 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      return;
    }
    id WeakRetained = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
    goto LABEL_55;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v1 + 64));
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    --*(_DWORD *)(v3 + 16);
  }
  id v4 = (void *)_NRCopyLogObjectForNRUUID();
  int v5 = _NRLogIsLevelEnabled();

  if (v5)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    if (v6) {
      uint64_t v6 = (void *)v6[5];
    }
    id v7 = v6;
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      uint64_t v9 = *(unsigned int *)(v9 + 16);
    }
    uint64_t v47 = 220;
    uint64_t v48 = v9;
    id v45 = "";
    id v46 = "-[NRBTLinkPreferencesAgent unassertAgentWithOptions:]_block_invoke";
    _NRLogWithArgs();
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (!v10 || !*(_DWORD *)(v10 + 16)) {
    [WeakRetained deviceHasBTLinkUpgradeRequest:0, v45, v46, v47, v48];
  }
  id v11 = [*(id *)(a1 + 40) objectForKeyedSubscript:NWNetworkAgentStartOptionClientUUID, v45, v46, v47, v48];
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = v12 ? *(void **)(v12 + 80) : 0;
    id v14 = [v13 objectForKeyedSubscript:v11];

    if (v14)
    {
      uint64_t v15 = *(void *)(a1 + 32);
      if (v15) {
        id v16 = *(void **)(v15 + 80);
      }
      else {
        id v16 = 0;
      }
      id v17 = [v16 objectForKeyedSubscript:v11];
      uint64_t v18 = *(void *)(a1 + 32);
      if (v18) {
        int v19 = *(void **)(v18 + 88);
      }
      else {
        int v19 = 0;
      }
      if ([v19 countForObject:v11])
      {
        uint64_t v20 = *(void *)(a1 + 32);
        id v21 = v20 ? *(void **)(v20 + 88) : 0;
        [v21 removeObject:v11];
        uint64_t v22 = *(void *)(a1 + 32);
        int v23 = v22 ? *(void **)(v22 + 88) : 0;
        if (![v23 countForObject:v11])
        {
          uint64_t v24 = *(void *)(a1 + 32);
          if (v24) {
            int v25 = *(void **)(v24 + 80);
          }
          else {
            int v25 = 0;
          }
          [v25 setObject:0 forKeyedSubscript:v11];
          [WeakRetained reportBTLinkUpgradeClientRemoved:v17];
        }
      }
    }
  }
  uint64_t v26 = *(void *)(a1 + 32);
  if (v26)
  {
    if (*(_DWORD *)(v26 + 16)) {
      goto LABEL_54;
    }
    uint64_t v26 = *(void *)(v26 + 88);
  }
  id v27 = (id)v26;
  if ([v27 count])
  {

LABEL_44:
    int v33 = (void *)_NRCopyLogObjectForNRUUID();
    int v34 = _NRLogIsLevelEnabled();

    if (v34)
    {
      id v35 = *(void **)(a1 + 32);
      if (v35) {
        id v35 = (void *)v35[5];
      }
      id v36 = v35;
      int v37 = (void *)_NRCopyLogObjectForNRUUID();
      id v38 = *(void **)(a1 + 32);
      if (v38) {
        id v38 = (void *)v38[11];
      }
      int v39 = v38;
      [v39 count];
      uint64_t v40 = *(void *)(a1 + 32);
      if (v40) {
        id v41 = *(void **)(v40 + 80);
      }
      else {
        id v41 = 0;
      }
      [v41 count];
      _NRLogWithArgs();
    }
    id v42 = (void *)_NRCopyLogObjectForNRUUID();
    int v43 = _NRLogIsLevelEnabled();

    if (v43)
    {
      int v44 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    goto LABEL_54;
  }
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30) {
    int v31 = *(void **)(v30 + 80);
  }
  else {
    int v31 = 0;
  }
  id v32 = [v31 count];

  if (v32) {
    goto LABEL_44;
  }
LABEL_54:

LABEL_55:
}

void sub_10006B5D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1 || !*(unsigned char *)(v1 + 14)) {
    return;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(v1 + 64));
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 16);
    if (v4) {
      goto LABEL_7;
    }
  }
  [WeakRetained deviceHasBTLinkUpgradeRequest:1];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    int v4 = *(_DWORD *)(v3 + 16);
LABEL_7:
    *(_DWORD *)(v3 + 16) = v4 + 1;
  }
  int v5 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v7 = *(void **)(a1 + 32);
    if (v7) {
      id v7 = (void *)v7[5];
    }
    id v8 = v7;
    uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10) {
      uint64_t v10 = *(unsigned int *)(v10 + 16);
    }
    uint64_t v36 = 186;
    uint64_t v37 = v10;
    int v33 = "";
    id v35 = "-[NRBTLinkPreferencesAgent assertAgentWithOptions:]_block_invoke";
    _NRLogWithArgs();
  }
  uint64_t v11 = NWNetworkAgentStartOptionClientUUID;
  uint64_t v12 = [[*(id *)(a1 + 40) objectForKeyedSubscript:NWNetworkAgentStartOptionClientUUID] v33, v35, v36, v37];
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  uint64_t v15 = v14;
  if (v13)
  {
    if (v14)
    {
      id v16 = [v14 objectForKeyedSubscript:NWNetworkAgentStartOptionPID];
      if (v16) {
        goto LABEL_17;
      }
      id v17 = [v15 objectForKeyedSubscript:v11];
      if (!v17)
      {
        id v16 = 0;
        goto LABEL_18;
      }
      id v27 = +[NWPath pathForClientID:v17];
      id v28 = [v27 parameters];
      id v29 = [v28 copyCParameters];

      if (v29 && (uint64_t pid = nw_parameters_get_pid(), (int)pid >= 1))
      {
        id v16 = +[NSNumber numberWithInt:pid];
      }
      else
      {
        id v16 = 0;
      }

      if (v16) {
LABEL_17:
      }
        id v17 = sub_100116370((uint64_t)[v16 intValue], 0);
      else {
        id v17 = 0;
      }
LABEL_18:

      if (v17 && v12)
      {
        uint64_t v18 = *(void *)(a1 + 32);
        if (v18) {
          int v19 = *(void **)(v18 + 80);
        }
        else {
          int v19 = 0;
        }
        uint64_t v20 = [v19 objectForKeyedSubscript:v12, v34];

        if (!v20)
        {
          uint64_t v21 = *(void *)(a1 + 32);
          if (v21) {
            uint64_t v22 = *(void **)(v21 + 80);
          }
          else {
            uint64_t v22 = 0;
          }
          [v22 setObject:v17 forKeyedSubscript:v12];
        }
        uint64_t v23 = *(void *)(a1 + 32);
        if (v23) {
          uint64_t v24 = *(void **)(v23 + 88);
        }
        else {
          uint64_t v24 = 0;
        }
        if (![v24 countForObject:v12]) {
          [WeakRetained reportBTLinkUpgradeClientAdded:v17];
        }
        uint64_t v25 = *(void *)(a1 + 32);
        if (v25) {
          uint64_t v26 = *(void **)(v25 + 88);
        }
        else {
          uint64_t v26 = 0;
        }
        [v26 addObject:v12];
      }
      goto LABEL_33;
    }
    id v31 = sub_10006B924();
    int v32 = _NRLogIsLevelEnabled();

    if (v32)
    {
      id v16 = sub_10006B924();
      int v34 = "-[NRBTLinkPreferencesAgent retrieveClientNameFromOptions:]";
      _NRLogWithArgs();
      id v17 = 0;
      goto LABEL_18;
    }
  }
  id v17 = 0;

LABEL_33:
}

id sub_10006B924()
{
  if (qword_1001F4970 != -1) {
    dispatch_once(&qword_1001F4970, &stru_1001C6A18);
  }
  uint64_t v0 = (void *)qword_1001F4968;

  return v0;
}

void sub_10006B978(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4968;
  qword_1001F4968 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10006BA14(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 14))
  {
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v2 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v2, *(void **)(a1 + 72));

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v3 = (id)qword_1001F4D20;
    int v4 = (id *)v3;
    if (v3)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 1));
      if (([v4[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v5, v6, v7, v14);
      }
    }

    if (([*(id *)(a1 + 56) unregisterNetworkAgent] & 1) == 0)
    {
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v10 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    uint64_t v11 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;

    *(unsigned char *)(a1 + 14) = 0;
    id v12 = *(id *)(a1 + 40);
    id v15 = [(id)a1 agentUUID];
    uint64_t v13 = [v15 UUIDString];
    sub_10012F648(v12, 18003, 0, v13);
  }
}

id *sub_10006BC80(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v30.receiver = a1;
    v30.super_class = (Class)NRBTLinkPreferencesAgent;
    uint64_t v11 = (id *)[super init];
    if (!v11)
    {
      id v26 = sub_10006B924();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v28 = sub_10006B924();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v29 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v29 = 136446210;
      *(void *)(v29 + 4) = "-[NRBTLinkPreferencesAgent initWithNRUUID:queue:delegate:]";
      sub_10006B924();
      _NRLogAbortWithPack();
    }
    a1 = v11;
    objc_storeStrong(v11 + 6, a3);
    objc_storeStrong(a1 + 5, a2);
    id v12 = +[NSUUID UUID];
    [a1 setAgentUUID:v12];

    [a1 setUserActivated:1];
    [a1 setAgentDescription:@"Link preferences netagent"];
    objc_storeWeak(a1 + 8, v10);
    id v13 = objc_alloc((Class)NSString);
    uint64_t v14 = [a1 agentUUID];
    id v15 = [v14 UUIDString];
    id v16 = [v13 initWithFormat:@"NRBTLinkPreferencesAgent-%@", v15];
    id v17 = a1[9];
    a1[9] = v16;

    id v18 = objc_alloc_init((Class)NSMutableDictionary);
    id v19 = a1[10];
    a1[10] = v18;

    id v20 = objc_alloc_init((Class)NSCountedSet);
    id v21 = a1[11];
    a1[11] = v20;

    id v22 = a1[5];
    uint64_t v23 = [a1 agentUUID];
    uint64_t v24 = [v23 UUIDString];
    sub_10012F648(v22, 18001, 0, v24);
  }
  return a1;
}

void sub_10006BF3C()
{
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  if (!qword_1001F4978)
  {
    uint64_t v1 = os_transaction_create();
    id v2 = (void *)qword_1001F4978;
    qword_1001F4978 = v1;
  }
  id v3 = +[NSFileManager defaultManager];
  unsigned __int8 v4 = [v3 fileExistsAtPath:@"/var/mobile/Library/terminus/com.apple.terminusd.keepalive"];

  if ((v4 & 1) == 0)
  {
    sub_100113A48(@"/var/mobile/Library/terminus/com.apple.terminusd.keepalive", 0, 0);
    if (qword_1001F4988 != -1) {
      dispatch_once(&qword_1001F4988, &stru_1001C6A98);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4988 != -1) {
        dispatch_once(&qword_1001F4988, &stru_1001C6A98);
      }
      _NRLogWithArgs();
    }
  }
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v5 = (id)qword_1001F4DD8;
  sub_10015969C((uint64_t)v5, &stru_1001C6A78);
}

void sub_10006C0C8(id a1)
{
}

void sub_10006C0D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4980;
  qword_1001F4980 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10006C118(id a1)
{
  if (sub_1000A7EEC() && sub_10014575C())
  {
    sub_10006BF3C();
  }
  else
  {
    os_log_t v1 = sub_10015BD9C();
    dispatch_assert_queue_V2(v1);

    if ((byte_1001F4990 & 1) == 0)
    {
      byte_1001F4990 = 1;
      dispatch_time_t v2 = dispatch_time(0, 2000000000);
      id v3 = sub_10015BD9C();
      dispatch_after(v2, v3, &stru_1001C6AB8);
    }
  }
}

void sub_10006C1EC(id a1)
{
  os_log_t v1 = sub_10015BD9C();
  dispatch_assert_queue_V2(v1);

  byte_1001F4990 = 0;
  if (!sub_1000A7EEC() || (sub_10014575C() & 1) == 0)
  {
    id v2 = (id)qword_1001F4978;
    id v3 = (void *)qword_1001F4978;
    qword_1001F4978 = 0;

    ne_session_clear_caches();
    unsigned __int8 v4 = +[NSFileManager defaultManager];
    id v11 = 0;
    unsigned __int8 v5 = [v4 removeItemAtPath:@"/var/mobile/Library/terminus/com.apple.terminusd.keepalive" error:&v11];
    id v6 = v11;

    if ((v5 & 1) == 0)
    {
      id v7 = v6;
      id v8 = v7;
      if (v7 && [v7 code] == (id)4)
      {
        id v9 = [v8 domain];
        unsigned __int8 v10 = [v9 isEqualToString:NSCocoaErrorDomain];

        if (v10) {
          goto LABEL_15;
        }
      }
      else
      {
      }
      if (qword_1001F4988 != -1) {
        dispatch_once(&qword_1001F4988, &stru_1001C6A98);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4988 != -1) {
          dispatch_once(&qword_1001F4988, &stru_1001C6A98);
        }
        _NRLogWithArgs();
      }
    }
LABEL_15:
  }
}

uint64_t sub_10006CCF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v21 = WeakRetained;
    id WeakRetained = [WeakRetained cancelled];
    id v3 = v21;
    if ((WeakRetained & 1) == 0)
    {
      unsigned __int8 v4 = [v21 aggregateStatsTimerSource];
      unsigned __int8 v5 = *(void **)(a1 + 32);

      id v3 = v21;
      if (v4 == v5)
      {
        id WeakRetained = [v21 totalReceivedUpdates];
        id v3 = v21;
        if (WeakRetained)
        {
          id v6 = objc_alloc_init(NRAnalyticsALUAdviceAggregateStats);
          id v7 = [v21 totalReceivedUpdates];
          if (v6)
          {
            v6->_totalAdviceCount = (unint64_t)v7;
            v6->_totalAdviceCountForWiFuint64_t i = (unint64_t)[v21 totalCountForWiFiAdvice];
            v6->_totalAdviceCountForBTClassic = (unint64_t)[v21 totalCountForBTClassicAdvice];
          }
          else
          {
            [v21 totalCountForWiFiAdvice];
            [v21 totalCountForBTClassicAdvice];
          }
          [v21 totalDurationForWiFiAdvice];
          if (v8 > 0.0)
          {
            if ([v21 totalCountForWiFiAdvice])
            {
              [v21 totalDurationForWiFiAdvice];
              double v10 = v9;
              id v11 = [v21 totalCountForWiFiAdvice];
              if (v6) {
                v6->_avgDurationForWiFiAdvice = v10 / (double)(unint64_t)v11;
              }
            }
          }
          [v21 totalDurationForBTClassicAdvice];
          if (v12 > 0.0)
          {
            if ([v21 totalCountForBTClassicAdvice])
            {
              [v21 totalDurationForBTClassicAdvice];
              double v14 = v13;
              id v15 = [v21 totalCountForBTClassicAdvice];
              if (v6) {
                v6->_avgDurationForBTClassicAdvice = v14 / (double)(unint64_t)v15;
              }
            }
          }
          [v21 totalIntervalForNonDefaultAdvice];
          if (v16 > 0.0)
          {
            if ([v21 totalCountForNonDefaultAdvice])
            {
              [v21 totalIntervalForNonDefaultAdvice];
              double v18 = v17;
              id v19 = [v21 totalCountForNonDefaultAdvice];
              if (v6) {
                v6->_avgIntervalForNonDefaultAdvice = v18 / (double)(unint64_t)v19;
              }
            }
          }
          [(NRAnalyticsALUAdviceAggregateStats *)v6 submit];
          [v21 setTotalReceivedUpdates:0];
          [v21 setTotalCountForWiFiAdvice:0];
          [v21 setTotalDurationForWiFiAdvice:0.0];
          [v21 setTotalCountForBTClassicAdvice:0];
          [v21 setTotalDurationForBTClassicAdvice:0.0];
          [v21 setTotalCountForNonDefaultAdvice:0];
          [v21 setTotalIntervalForNonDefaultAdvice:0.0];

          id v3 = v21;
        }
      }
    }
  }

  return _objc_release_x1(WeakRetained, v3);
}

uint64_t sub_10006D0B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v11 = WeakRetained;
    id WeakRetained = [WeakRetained cancelled];
    id v3 = v11;
    if ((WeakRetained & 1) == 0)
    {
      unsigned __int8 v4 = [v11 wifiAdviceMonitorTimerSource];
      unsigned __int8 v5 = *(void **)(a1 + 32);

      id v3 = v11;
      if (v4 == v5)
      {
        id v6 = [objc_alloc((Class)NSString) initWithFormat:@"Advice exceeds %u seconds"];
        sub_100115AB0(@"NRAutoLinkUpgrade", @"WiFiAdvice", v6, 0, 0, v7, v8, v9, 1800);

        id v3 = v11;
      }
    }
  }

  return _objc_release_x1(WeakRetained, v3);
}

uint64_t sub_10006D3DC(void *a1, char a2)
{
  if (!a1) {
    return 0;
  }
  v21.receiver = a1;
  v21.super_class = (Class)NRLinkUpgradeReport;
  id v3 = [super init];
  if (!v3)
  {
    id v17 = sub_10006D654();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    unsigned __int8 v5 = "-[NRLinkUpgradeReport initWithUpgradeType:]";
    if (IsLevelEnabled)
    {
      id v19 = sub_10006D654();
      _NRLogWithArgs();
    }
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v20 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v20 = 136446210;
    *(void *)(v20 + 4) = "-[NRLinkUpgradeReport initWithUpgradeType:]";
    sub_10006D654();
    _NRLogAbortWithPack();
    goto LABEL_30;
  }
  uint64_t v4 = (uint64_t)v3;
  v3[8] = a2;
  self;
  unsigned __int8 v5 = (const char *)&unk_1001F4000;
  if (qword_1001F4A20 != -1) {
LABEL_30:
  }
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  id v6 = (id)qword_1001F4A18;
  if (v6)
  {
    unsigned int v7 = v6[5];

    if (v7 >= 0x29) {
      char v8 = 50;
    }
    else {
      char v8 = 40;
    }
    if (v7 >= 0x1F) {
      char v9 = v8;
    }
    else {
      char v9 = 30;
    }
    if (v7 >= 0x15) {
      char v10 = v9;
    }
    else {
      char v10 = 20;
    }
    if (v7 >= 0xB) {
      char v11 = v10;
    }
    else {
      char v11 = 10;
    }
    if (!v7) {
      char v11 = 0;
    }
  }
  else
  {
    char v11 = 0;
  }
  *(unsigned char *)(v4 + 9) = v11;
  int v22 = 0;
  int v12 = IOPSGetPercentRemaining();
  char v13 = v22;
  if (v12) {
    char v13 = 0;
  }
  *(unsigned char *)(v4 + 10) = v13;
  self;
  if (*((void *)v5 + 324) != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  double v14 = (unsigned __int8 *)(id)qword_1001F4A18;
  if (v14)
  {
    int v15 = v14[11];

    if (v15) {
      *(_DWORD *)(v4 + 16) |= 0x20u;
    }
  }
  return v4;
}

id sub_10006D654()
{
  if (qword_1001F49A0 != -1) {
    dispatch_once(&qword_1001F49A0, &stru_1001C6AD8);
  }
  uint64_t v0 = (void *)qword_1001F4998;

  return v0;
}

void sub_10006D6A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4998;
  qword_1001F4998 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

__CFString *sub_10006D6EC(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v3 = v2;
  if ((a1 & 0x100) != 0)
  {
    [v2 addObject:@"TxSml"];
    if ((a1 & 0x200) == 0)
    {
LABEL_3:
      if ((a1 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((a1 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  [v3 addObject:@"TxMed"];
  if ((a1 & 0x400) == 0)
  {
LABEL_4:
    if ((a1 & 0x4000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  [v3 addObject:@"TxLrg"];
  if ((a1 & 0x4000) == 0)
  {
LABEL_5:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  [v3 addObject:@"SvcVo"];
  if ((a1 & 0x8000) == 0)
  {
LABEL_6:
    if ((a1 & 0x40000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  [v3 addObject:@"SvcVi"];
  if ((a1 & 0x40000) == 0)
  {
LABEL_7:
    if ((a1 & 0x80000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  [v3 addObject:@"RdPoor"];
  if ((a1 & 0x80000) == 0)
  {
LABEL_8:
    if ((a1 & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  [v3 addObject:@"RdFair"];
  if ((a1 & 0x100000) == 0)
  {
LABEL_9:
    if ((a1 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  [v3 addObject:@"RdGood"];
  if ((a1 & 0x200000) == 0)
  {
LABEL_10:
    if ((a1 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  [v3 addObject:@"RdBest"];
  if ((a1 & 0x400000) == 0)
  {
LABEL_11:
    if ((a1 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  [v3 addObject:@"CngHi"];
  if ((a1 & 0x800000) == 0)
  {
LABEL_12:
    if ((a1 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  [v3 addObject:@"NotCngHi"];
  if ((a1 & 0x1000000) == 0)
  {
LABEL_13:
    if ((a1 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  [v3 addObject:@"Plgd"];
  if ((a1 & 0x2000000) == 0)
  {
LABEL_14:
    if ((a1 & 0x4000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  [v3 addObject:@"NotPlgd"];
  if ((a1 & 0x4000000) == 0)
  {
LABEL_15:
    if ((a1 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  [v3 addObject:@"BtryPoor"];
  if ((a1 & 0x8000000) == 0)
  {
LABEL_16:
    if ((a1 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  [v3 addObject:@"BtryFair"];
  if ((a1 & 0x10000000) == 0)
  {
LABEL_17:
    if ((a1 & 0x20000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  [v3 addObject:@"BtryGood"];
  if ((a1 & 0x20000000) == 0)
  {
LABEL_18:
    if ((a1 & 0x100000000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  [v3 addObject:@"BtryBest"];
  if ((a1 & 0x100000000000000) == 0)
  {
LABEL_19:
    if ((a1 & 0x200000000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  [v3 addObject:@"TxDone"];
  if ((a1 & 0x200000000000000) == 0)
  {
LABEL_20:
    if ((a1 & 0x400000000000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  [v3 addObject:@"Rst"];
  if ((a1 & 0x400000000000000) == 0)
  {
LABEL_21:
    if ((a1 & 0x800000000000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  [v3 addObject:@"UnexpLnkSwtch"];
  if ((a1 & 0x800000000000000) == 0)
  {
LABEL_22:
    if ((a1 & 0x1000000000000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  [v3 addObject:@"Inactv"];
  if ((a1 & 0x1000000000000000) == 0)
  {
LABEL_23:
    if ((a1 & 0x2000000000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  [v3 addObject:@"RdDtr"];
  if ((a1 & 0x2000000000000000) == 0)
  {
LABEL_24:
    if ((a1 & 0x4000000000000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_50:
  [v3 addObject:@"BtryDtr"];
  if ((a1 & 0x4000000000000000) != 0) {
LABEL_25:
  }
    [v3 addObject:@"LnkSwtchFlr"];
LABEL_26:
  if ([v3 count])
  {
    uint64_t v4 = [v3 componentsJoinedByString:@"_"];
  }
  else
  {
    uint64_t v4 = @"<none>";
  }

  return v4;
}

id *sub_10006D9A4(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)NRAutoLinkUpgradeMonitor;
    char v8 = (id *)[super init];
    if (!v8)
    {
      id v10 = sub_10006D654();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v12 = sub_10006D654();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v13 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v13 = 136446210;
      *(void *)(v13 + 4) = "-[NRAutoLinkUpgradeMonitor initWithQueue:nrUUID:]";
      sub_10006D654();
      _NRLogAbortWithPack();
    }
    a1 = v8;
    v8[4] = (id)atomic_fetch_add_explicit(&qword_1001F3E08, 1uLL, memory_order_relaxed);
    objc_storeStrong(v8 + 5, a2);
    objc_storeStrong(a1 + 2, a3);
    [a1 reportEvent:30001];
  }

  return a1;
}

void sub_10006DB48(void *a1, void *a2)
{
  id v8 = a2;
  if (a1)
  {
    if ([a1 cancelled])
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_9;
      }
LABEL_7:
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();

      goto LABEL_9;
    }
    if ([a1 hasReportedUpgradeStatusToSymptoms])
    {
      unsigned __int8 v5 = (void *)_NRCopyLogObjectForNRUUID();
      int v6 = _NRLogIsLevelEnabled();

      if (!v6) {
        goto LABEL_9;
      }
      goto LABEL_7;
    }
    [a1 setHasReportedUpgradeStatusToSymptoms:1];
  }
LABEL_9:
}

void sub_10006DDF4()
{
  uint64_t v0 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v2 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_10006DF2C()
{
  uint64_t v0 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v2 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

id *sub_10006E294(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = v7;
  if (a1)
  {
    if (v6)
    {
      if (v7)
      {
        v41.receiver = a1;
        v41.super_class = (Class)NRCompanionLinkViabilityAgent;
        char v9 = (id *)[super init];
        if (v9)
        {
          id v10 = v9;
          objc_storeStrong(v9 + 5, a3);
          objc_storeStrong(v10 + 4, a2);
          char v11 = +[NSUUID UUID];
          [v10 setAgentUUID:v11];

          [v10 setAgentDescription:@"Companion link viability netagent"];
          id v12 = objc_alloc((Class)NSString);
          uint64_t v13 = [v10 agentUUID];
          objc_super v14 = [v13 UUIDString];
          id v15 = [v12 initWithFormat:@"NRCompanionLinkViabilityAgent-%@", v14];
          id v16 = v10[7];
          v10[7] = v15;

          id v17 = sub_10013DC5C((uint64_t)NRDLocalDevice, v10[4]);
          if (v17)
          {
            double v18 = v17;
            id v19 = [objc_alloc((Class)NSString) initWithFormat:@"%@", v17];
            id v20 = v10[8];
            v10[8] = v19;

            id v21 = v10[4];
            id v22 = v10[8];
            id v23 = v21;
            uint64_t v24 = [v10 agentUUID];
            uint64_t v25 = [v24 UUIDString];
            sub_10012F648(v23, 19001, v22, v25);

            a1 = v10;
            goto LABEL_7;
          }
          id v37 = sub_10006E748();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v39 = sub_10006E748();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __error();
          uint64_t v40 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v40 = 136446210;
          *(void *)(v40 + 4) = "-[NRCompanionLinkViabilityAgent initWithNRUUID:queue:]";
LABEL_21:
          sub_10006E748();
          _NRLogAbortWithPack();
        }
        id v33 = sub_10006E748();
        int v34 = _NRLogIsLevelEnabled();

        if (v34)
        {
          id v35 = sub_10006E748();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __error();
LABEL_17:
        uint64_t v36 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v36 = 136446210;
        *(void *)(v36 + 4) = "-[NRCompanionLinkViabilityAgent initWithNRUUID:queue:]";
        goto LABEL_21;
      }
      id v30 = sub_10006E748();
      int v31 = _NRLogIsLevelEnabled();

      if (v31)
      {
        id v32 = sub_10006E748();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v27 = sub_10006E748();
      int v28 = _NRLogIsLevelEnabled();

      if (v28)
      {
        id v29 = sub_10006E748();
        _NRLogWithArgs();
      }
    }
    _os_log_pack_size();
    __error();
    goto LABEL_17;
  }
LABEL_7:

  return a1;
}

id sub_10006E748()
{
  if (qword_1001F49B0 != -1) {
    dispatch_once(&qword_1001F49B0, &stru_1001C6AF8);
  }
  uint64_t v0 = (void *)qword_1001F49A8;

  return v0;
}

void sub_10006E79C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F49A8;
  qword_1001F49A8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10006E7E0(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 40));
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v2 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v2, *(void **)(a1 + 56));

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v3 = (id)qword_1001F4D20;
    uint64_t v4 = (id *)v3;
    if (v3)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 1));
      if (([v4[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v5, v6, v7, v18);
      }
    }

    id v8 = *(void **)(a1 + 48);
    if (v8)
    {
      if (([v8 unregisterNetworkAgent] & 1) == 0)
      {
        char v9 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          char v11 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
      }
      id v12 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = 0;

      uint64_t v13 = *(void **)(a1 + 32);
      id v14 = *(id *)(a1 + 64);
      id v15 = v13;
      id v16 = [(id)a1 agentUUID];
      id v17 = [v16 UUIDString];
      sub_10012F648(v15, 19003, v14, v17);
    }
    *(unsigned char *)(a1 + 14) = 0;
  }
}

void sub_10006EB44(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:NWNetworkAgentStartOptionClientUUID];
  id v40 = (id)v2;
  if (!v2)
  {
    if (qword_1001F49C0 != -1) {
      dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_72;
    }
    if (qword_1001F49C0 == -1)
    {
LABEL_32:
      _NRLogWithArgs();
      goto LABEL_72;
    }
LABEL_46:
    dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
    goto LABEL_32;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    uint64_t v5 = *(void **)(v4 + 56);
  }
  else {
    uint64_t v5 = 0;
  }
  if (![v5 containsObject:v3]) {
    goto LABEL_72;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    uint64_t v7 = *(void **)(v6 + 56);
  }
  else {
    uint64_t v7 = 0;
  }
  if (![v7 count])
  {
    if (qword_1001F49C0 != -1) {
      dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_72;
    }
    if (qword_1001F49C0 == -1) {
      goto LABEL_32;
    }
    goto LABEL_46;
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    char v9 = *(void **)(v8 + 56);
  }
  else {
    char v9 = 0;
  }
  [v9 removeObject:v40];
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    char v11 = *(void **)(v10 + 64);
    if (v11) {
      [v11 removeObjectForKey:v40];
    }
  }
  if (qword_1001F49C0 != -1) {
    dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
  }
  if (!_NRLogIsLevelEnabled()) {
    goto LABEL_37;
  }
  if (qword_1001F49C0 != -1) {
    dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
  }
  id v12 = (id)qword_1001F49B8;
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13)
  {
    id v14 = *(id *)(v13 + 64);
    uint64_t v13 = *(void *)(a1 + 40);
    if (v14)
    {
      id v15 = v14;
      if (v13) {
        uint64_t v13 = *(void *)(v13 + 64);
      }
      uint64_t v38 = 274;
      uint64_t v39 = v13;
      uint64_t v36 = "";
      id v37 = "-[NRDirectToCloudAgent unassertAgentWithOptions:]_block_invoke";
      _NRLogWithArgs();

      goto LABEL_36;
    }
    if (v13) {
      uint64_t v13 = *(void *)(v13 + 56);
    }
  }
  uint64_t v38 = 274;
  uint64_t v39 = v13;
  uint64_t v36 = "";
  id v37 = "-[NRDirectToCloudAgent unassertAgentWithOptions:]_block_invoke";
  _NRLogWithArgs();
LABEL_36:

LABEL_37:
  uint64_t v16 = *(void *)(a1 + 40);
  if (v16)
  {
    if ([*(id *)(v16 + 56) count])
    {
LABEL_39:
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v17 = (id)qword_1001F4A18;
      uint64_t v18 = v17;
      if (v17) {
        id v19 = (void *)*((void *)v17 + 6);
      }
      else {
        id v19 = 0;
      }
      id v20 = v19;
      id v21 = [*(id *)(a1 + 40) agentUUID];
      uint64_t v22 = *(void *)(a1 + 40);
      if (v22) {
        id v23 = *(void **)(v22 + 64);
      }
      else {
        id v23 = 0;
      }
      uint64_t v24 = [v23 allValues:v36, v37, v38, v39];
      sub_1001573C0(v20, 64, v21, v24);

      goto LABEL_72;
    }
  }
  else if ([0 count])
  {
    goto LABEL_39;
  }
  if (qword_1001F49C0 != -1) {
    dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F49C0 != -1) {
      dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
    }
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v25 = (id)qword_1001F4A18;
  id v26 = v25;
  if (v25) {
    id v27 = (void *)*((void *)v25 + 6);
  }
  else {
    id v27 = 0;
  }
  id v28 = v27;
  sub_10015754C((uint64_t)v28, 0);

  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v29 = (id)qword_1001F4A18;
  id v30 = v29;
  if (v29) {
    int v31 = (void *)*((void *)v29 + 6);
  }
  else {
    int v31 = 0;
  }
  id v32 = v31;
  id v33 = [*(id *)(a1 + 40) agentUUID];
  sub_1001572E8(v32, v33);

  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v34 = (id)qword_1001F4A18;
  [v34 directToCloudRequestUnavailable];

  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v35 = (id)qword_1001F4A18;
  if (v35) {
    sub_10012F648(0, 14005, 0, 0);
  }

LABEL_72:
}

void sub_10006F0DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F49B8;
  qword_1001F49B8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10006F1C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  if (!v2) {
    goto LABEL_52;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 32));
  uint64_t v4 = [v3 objectForKeyedSubscript:NWNetworkAgentStartOptionClientUUID];
  if (!v4)
  {
    if (qword_1001F49C0 != -1) {
      dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F49C0 != -1) {
        dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
      }
      _NRLogWithArgs();
    }
    goto LABEL_52;
  }
  uint64_t v5 = (void *)v4;
  if ([*(id *)(v2 + 56) containsObject:v4])
  {

LABEL_5:
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      uint64_t v7 = *(void **)(v6 + 56);
    }
    else {
      uint64_t v7 = 0;
    }
    if ([v7 count] == (id)1)
    {
      if (qword_1001F49C0 != -1) {
        dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F49C0 != -1) {
          dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
        }
        uint64_t v42 = 235;
        id v40 = "";
        objc_super v41 = "-[NRDirectToCloudAgent assertAgentWithOptions:]_block_invoke";
        _NRLogWithArgs();
      }
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v8 = (id)qword_1001F4A18;
      char v9 = v8;
      if (v8) {
        uint64_t v10 = (void *)*((void *)v8 + 6);
      }
      else {
        uint64_t v10 = 0;
      }
      id v11 = v10;
      sub_10015754C((uint64_t)v11, 1);
    }
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v12 = (id)qword_1001F4A18;
    uint64_t v13 = v12;
    if (v12) {
      id v14 = (void *)*((void *)v12 + 6);
    }
    else {
      id v14 = 0;
    }
    id v15 = v14;
    uint64_t v16 = [*(id *)(a1 + 32) agentUUID];
    uint64_t v17 = *(void *)(a1 + 32);
    if (v17) {
      uint64_t v18 = *(void **)(v17 + 64);
    }
    else {
      uint64_t v18 = 0;
    }
    id v19 = [v18 allValues:v40, v41, v42];
    sub_1001573C0(v15, 64, v16, v19);

    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v20 = (id)qword_1001F4A18;
    [v20 directToCloudRequestAvailable];

    if (qword_1001F49C0 != -1) {
      dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F49C0 != -1) {
        dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
      }
      id v21 = (id)qword_1001F49B8;
      uint64_t v22 = *(void *)(a1 + 32);
      if (v22 && (id v23 = *(id *)(v22 + 64)) != 0)
      {
        uint64_t v24 = v23;
        _NRLogWithArgs();
      }
      else
      {
        _NRLogWithArgs();
      }
    }
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v43 = (id)qword_1001F4A18;
    if (v43) {
      sub_10012F648(0, 14004, 0, 0);
    }

    return;
  }
  uint64_t v45 = 0;
  id v46 = &v45;
  uint64_t v47 = 0x2020000000;
  char v48 = 0;
  id v25 = +[NWPath pathForClientID:v5];
  id v26 = [v25 parameters];
  id v27 = [v26 copyCParameters];

  if (!v27)
  {
LABEL_51:

    _Block_object_dispose(&v45, 8);
LABEL_52:

    return;
  }
  id v28 = (void *)nw_parameters_copy_avoided_netagent_types();
  id v29 = v28;
  if (!v28)
  {

    goto LABEL_51;
  }
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472;
  applier[2] = sub_10006F86C;
  applier[3] = &unk_1001C6B20;
  void applier[4] = &v45;
  xpc_array_apply(v28, applier);
  if (*((unsigned char *)v46 + 24))
  {
    id v30 = *(id *)(v2 + 56);
    [v30 addObject:v5];

    if (_NRIsAppleInternal())
    {
      if (!*(void *)(v2 + 64))
      {
        id v31 = objc_alloc_init((Class)NSMutableDictionary);
        id v32 = *(void **)(v2 + 64);
        *(void *)(v2 + 64) = v31;
      }
      uint64_t pid = nw_parameters_get_pid();
      id v34 = sub_100116370(pid, 0);
      id v35 = [v25 effectiveRemoteEndpoint];

      if (v35)
      {
        id v36 = [objc_alloc((Class)NSMutableString) initWithString:v34];
        id v37 = [v25 effectiveRemoteEndpoint];
        [v36 appendFormat:@" (%@)", v37];
      }
      else
      {
        id v36 = v34;
      }
      id v38 = *(id *)(v2 + 64);
      [v38 setObject:v36 forKeyedSubscript:v5];
    }
  }
  int v39 = *((unsigned __int8 *)v46 + 24);

  _Block_object_dispose(&v45, 8);
  if (v39) {
    goto LABEL_5;
  }
}

void sub_10006F840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006F86C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_string)
  {
    string_ptr = xpc_string_get_string_ptr(v4);
    uint64_t v5 = 1;
    if (!strcmp("CompanionProxy", string_ptr))
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 1;
  }

  return v5;
}

uint64_t sub_10006FA08(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 14)) {
      return 1;
    }
    if (qword_1001F49C0 != -1) {
      dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F49C0 != -1) {
        dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
      }
      id v2 = (id)qword_1001F49B8;
      [(id)v1 agentDescription];
      v19 = uint64_t v18 = 139;
      uint64_t v16 = "";
      uint64_t v17 = "-[NRDirectToCloudAgent invalidateAgent]";
      _NRLogWithArgs();
    }
    [v1 setActive:0 v16 v17 v18 v19];
    uint64_t v3 = *(void *)(v1 + 48);
    id v4 = *(id *)(v1 + 40);
    [v4 removeNetworkAgentFromInterfaceNamed:v3];

    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v5 = (id)qword_1001F4A18;
    uint64_t v6 = v5;
    if (v5) {
      uint64_t v7 = (void *)*((void *)v5 + 6);
    }
    else {
      uint64_t v7 = 0;
    }
    id v8 = v7;
    sub_10015754C((uint64_t)v8, 0);

    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v9 = (id)qword_1001F4A18;
    uint64_t v10 = v9;
    if (v9) {
      id v11 = (void *)*((void *)v9 + 6);
    }
    else {
      id v11 = 0;
    }
    id v12 = v11;
    uint64_t v13 = [(id)v1 agentUUID];
    sub_1001572E8(v12, v13);

    if ([*(id *)(v1 + 40) unregisterNetworkAgent])
    {
      *(unsigned char *)(v1 + 14) = 0;
      id v14 = *(void **)(v1 + 40);
      *(void *)(v1 + 40) = 0;

      id v15 = *(void **)(v1 + 56);
      *(void *)(v1 + 56) = 0;

      sub_10012F648(0, 14003, 0, 0);
      return 1;
    }
    if (qword_1001F49C0 != -1) {
      dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
    }
    uint64_t result = _NRLogIsLevelEnabled();
    if (result)
    {
      if (qword_1001F49C0 != -1) {
        dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
      }
      _NRLogWithArgs();
      return 0;
    }
  }
  return result;
}

id *sub_10006FD70(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)NRDirectToCloudAgent;
    id v5 = (id)[super init];
    if (v5)
    {
      if (v4)
      {
        a1 = v5;
        dispatch_assert_queue_V2(v4);
        [a1 setActive:0];
        [a1 setKernelActivated:1];
        [a1 setUserActivated:1];
        [a1 setVoluntary:1];
        [a1 setNetworkProvider:0];
        [a1 setSpecificUseOnly:0];
        uint64_t v6 = +[NSUUID UUID];
        [a1 setAgentUUID:v6];

        uint64_t v7 = +[NSString stringWithFormat:@"Direct-To-Cloud agent"];
        [a1 setAgentDescription:v7];

        objc_storeStrong(a1 + 4, a2);
        id v8 = objc_alloc_init((Class)NSMutableSet);
        id v9 = a1[7];
        a1[7] = v8;

        goto LABEL_5;
      }
      id v14 = sub_100070048();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v16 = sub_100070048();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v11 = sub_100070048();
      int v12 = _NRLogIsLevelEnabled();

      if (v12)
      {
        id v13 = sub_100070048();
        _NRLogWithArgs();
      }
    }
    _os_log_pack_size();
    __error();
    uint64_t v17 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v17 = 136446210;
    *(void *)(v17 + 4) = "-[NRDirectToCloudAgent initWithQueue:]";
    sub_100070048();
    _NRLogAbortWithPack();
  }
LABEL_5:

  return a1;
}

id sub_100070048()
{
  if (qword_1001F49C0 != -1) {
    dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
  }
  uint64_t v0 = (void *)qword_1001F49B8;

  return v0;
}

id sub_100070988()
{
  if (qword_1001F49E8 != -1) {
    dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
  }
  uint64_t v0 = (void *)qword_1001F49E0;

  return v0;
}

void sub_1000709DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F49E0;
  qword_1001F49E0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_100070BB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 16) == 255) {
      goto LABEL_22;
    }
    id v5 = [v3 length];
    uint64_t v6 = *(void *)(a1 + 1583);
    IKEv2Packetid String = (void *)createIKEv2PacketString();
    size_t v8 = (unsigned __int16)v5;
    [(id)a1 reportEvent:3006, @"Sending IKEv2 packet #%llu %@ len %llu", v6, IKEv2PacketString, (unsigned __int16)v5 detailsFormat];

    ++*(void *)(a1 + 1583);
    id v9 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      size_t v41 = (unsigned __int16)v5;
      id v39 = (id)_NRCopyLogObjectForNRUUID();
      id v11 = [(id)a1 copyDescription];
      v37[2] = *(id *)(a1 + 1583);
      id v38 = v11;
      id v40 = v5;
      v37[1] = (id)(unsigned __int16)v5;
      uint64_t v42 = v4;
      id v12 = v4;
      unsigned int v13 = [v12 length];
      v37[0] = v12;
      id v14 = (unsigned __int8 *)[v12 bytes];
      id v15 = objc_alloc_init((Class)NSMutableString);
      if (v13)
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          [v15 appendFormat:@"%02X", v14[i]];
          if ((~i & 0xF) == 0 || (~i & 3) == 0) {
            [v15 appendString:];
          }
        }
      }

      _NRLogWithArgs();
      size_t v8 = v41;
      id v4 = v42;
      LODWORD(v5) = v40;
    }
    if (*(unsigned char *)(a1 + 246))
    {
      __int16 v44 = bswap32(v5) >> 16;
      id v17 = [objc_alloc((Class)NSMutableData) initWithCapacity:v8 + 5];
      [v17 appendBytes:&unk_10016C9DC length:1];
      [v17 appendBytes:&v44 length:2];
      [v17 appendData:v4];
      [v17 bytes];
      if ([v17 length])
      {
        __int16 v43 = ~(unsigned __int16)os_inet_checksum();
        [v17 appendBytes:&v43 length:2];
        if (*(unsigned __int16 *)(a1 + 261) >= 0x15u && *(unsigned char *)(a1 + 229)) {
          objc_super v18 = &off_1001D4960;
        }
        else {
          objc_super v18 = &off_1001D4948;
        }
        sub_10007120C(a1, v17, v18);

        goto LABEL_25;
      }
      id v28 = sub_100070988();
      int v29 = _NRLogIsLevelEnabled();

      if (v29)
      {
        id v30 = sub_100070988();
        _NRLogWithArgs();
      }
      uint64_t v31 = _os_log_pack_size();
      a1 = (uint64_t)v37 - ((__chkstk_darwin(v31) + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v32 = 136446210;
      *(void *)(v32 + 4) = "nrChecksumFull";
      sub_100070988();
      _NRLogAbortWithPack();
      goto LABEL_30;
    }
    uint64_t v19 = *(unsigned int *)(a1 + 287);
    if (*(_DWORD *)(a1 + 279) >= (unsigned __int16)v5 + 5 + v19)
    {
      uint64_t v24 = *(void *)(a1 + 447) + v19;
      *(unsigned char *)uint64_t v24 = 4;
      *(_WORD *)(v24 + 1) = bswap32(v5) >> 16;
      memcpy((void *)(*(void *)(a1 + 447) + (*(_DWORD *)(a1 + 287) + 3)), [v4 bytes], v8);
      uint64_t v25 = *(void *)(a1 + 447);
      unsigned int v26 = (unsigned __int16)v5 + 3 + *(_DWORD *)(a1 + 287);
      *(_WORD *)(v25 + v26) = ~(unsigned __int16)os_inet_checksum();
      *(_DWORD *)(a1 + 287) += (unsigned __int16)v5 + 5;
      if (!gNRPacketLoggingEnabled)
      {
LABEL_24:
        sub_100071414((void *)a1, *(void *)(a1 + 367));
LABEL_25:
        a1 = 1;
        goto LABEL_26;
      }
LABEL_30:
      id v33 = (void *)_NRCopyLogObjectForNRUUID();
      int v34 = _NRLogIsLevelEnabled();

      if (v34)
      {
        id v35 = (void *)_NRCopyLogObjectForNRUUID();
        id v36 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
      goto LABEL_24;
    }
    id v20 = (void *)_NRCopyLogObjectForNRUUID();
    int v21 = _NRLogIsLevelEnabled();

    if (!v21)
    {
LABEL_22:
      a1 = 0;
    }
    else
    {
      uint64_t v22 = (void *)_NRCopyLogObjectForNRUUID();
      id v23 = [(id)a1 copyDescription];
      _NRLogWithArgs();

      a1 = 0;
    }
  }
LABEL_26:

  return a1;
}

void sub_10007120C(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v19 = objc_alloc_init((Class)NSMutableDictionary);
    [v19 setObject:v6 forKeyedSubscript:@"message-data"];

    [v19 setObject:v5 forKeyedSubscript:@"channel-id"];
    id v7 = objc_alloc_init((Class)NSMutableDictionary);
    [v7 setObject:v19 forKeyedSubscript:@"message"];
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v8 = (id)qword_1001F4A18;
    id v9 = v8;
    if (v8) {
      BOOL v10 = *((unsigned char *)v8 + 9) != 0;
    }
    else {
      BOOL v10 = 0;
    }
    id v11 = +[NSNumber numberWithBool:v10];
    [v7 setObject:v11 forKeyedSubscript:@"test-wake-pkt"];

    id v12 = +[NSNumber numberWithBool:gNRPacketLoggingEnabled];
    [v7 setObject:v12 forKeyedSubscript:@"packet-logging"];

    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v13 = (id)qword_1001F4A18;
    id v14 = v13;
    if (v13)
    {
      uint64_t v15 = *(void *)(a1 + 32);
      id v16 = (void *)*((void *)v13 + 27);
      id v17 = v7;
      objc_super v18 = [v16 objectForKeyedSubscript:v15];
      sub_1000FACEC((uint64_t)v18, v17);
    }
  }
}

void sub_100071414(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (uint64_t)v3;
  if (v3[16] == 255)
  {
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_261;
    }
    goto LABEL_9;
  }
  if (!*(void *)(v3 + 975))
  {
    if (v3[246]) {
      goto LABEL_261;
    }
    BOOL v10 = (void *)_NRCopyLogObjectForNRUUID();
    int v11 = _NRLogIsLevelEnabled();

    if (!v11) {
      goto LABEL_261;
    }
LABEL_9:
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    id v9 = [(id)v4 copyDescription];
    _NRLogWithArgs();

    goto LABEL_261;
  }
  uint64_t v265 = *(void *)(v3 + 527);
  uint64_t v266 = a2;
  v272 = (char *)v3;
  if (v265 == a2)
  {
    v259 = sub_100074918;
    id v254 = sub_100074D88;
    if (gNRPacketLoggingEnabled)
    {
      id v192 = (void *)_NRCopyLogObjectForNRUUID();
      int v193 = _NRLogIsLevelEnabled();

      v259 = sub_100074918;
      id v254 = sub_100074D88;
      if (v193)
      {
        id v194 = (void *)_NRCopyLogObjectForNRUUID();
        id v195 = [(id)v4 copyDescription];
        _NRLogWithArgs();
        v259 = sub_100074918;
        id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusVOInput;
        id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusVO;
        id v254 = sub_100074D88;
        id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusVO;
        uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusVOInputRing;
        goto LABEL_332;
      }
    }
    id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusVOInput;
    id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusVO;
    id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusVO;
    uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusVOInputRing;
  }
  else if (*(void *)(v3 + 671) == a2)
  {
    v259 = sub_100074A34;
    id v254 = sub_100074EA0;
    if (gNRPacketLoggingEnabled)
    {
      id v196 = (void *)_NRCopyLogObjectForNRUUID();
      int v197 = _NRLogIsLevelEnabled();

      v259 = sub_100074A34;
      id v254 = sub_100074EA0;
      if (!v197)
      {
        id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusVIInput;
        id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusVI;
        id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusVI;
        uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusVIInputRing;
        uint64_t v4 = (uint64_t)v272;
        goto LABEL_21;
      }
      uint64_t v4 = (uint64_t)v272;
      id v194 = (void *)_NRCopyLogObjectForNRUUID();
      id v195 = [v272 copyDescription];
      _NRLogWithArgs();
      v259 = sub_100074A34;
      id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusVIInput;
      id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusVI;
      id v254 = sub_100074EA0;
      id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusVI;
      uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusVIInputRing;
      goto LABEL_332;
    }
    id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusVIInput;
    id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusVI;
    id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusVI;
    uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusVIInputRing;
  }
  else
  {
    if (*(void *)(v3 + 815) != a2)
    {
      if (*(void *)(v3 + 367) != a2)
      {
        v253 = 0;
        id v254 = 0;
        v259 = 0;
        v251 = 0;
        id v252 = 0;
        uint64_t v5 = 0;
        goto LABEL_22;
      }
      v259 = sub_100074C6C;
      id v254 = sub_1000750D0;
      if (!gNRPacketLoggingEnabled)
      {
        id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusInput;
        id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexus;
        id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexus;
        uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusInputRing;
        goto LABEL_21;
      }
      v211 = (void *)_NRCopyLogObjectForNRUUID();
      int v212 = _NRLogIsLevelEnabled();

      v259 = sub_100074C6C;
      id v254 = sub_1000750D0;
      if (!v212)
      {
        id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusInput;
        id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexus;
        id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexus;
        uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusInputRing;
        uint64_t v4 = (uint64_t)v272;
        goto LABEL_21;
      }
      uint64_t v4 = (uint64_t)v272;
      id v194 = (void *)_NRCopyLogObjectForNRUUID();
      id v195 = [v272 copyDescription];
      _NRLogWithArgs();
      v259 = sub_100074C6C;
      id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusInput;
      id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexus;
      id v254 = sub_1000750D0;
      id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexus;
      uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusInputRing;
LABEL_332:

      goto LABEL_21;
    }
    v259 = sub_100074B50;
    id v254 = sub_100074FB8;
    if (gNRPacketLoggingEnabled)
    {
      id v198 = (void *)_NRCopyLogObjectForNRUUID();
      int v199 = _NRLogIsLevelEnabled();

      v259 = sub_100074B50;
      id v254 = sub_100074FB8;
      if (!v199)
      {
        id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusBKInput;
        id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusBK;
        id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusBK;
        uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusBKInputRing;
        uint64_t v4 = (uint64_t)v272;
        goto LABEL_21;
      }
      uint64_t v4 = (uint64_t)v272;
      id v194 = (void *)_NRCopyLogObjectForNRUUID();
      id v195 = [v272 copyDescription];
      _NRLogWithArgs();
      v259 = sub_100074B50;
      id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusBKInput;
      id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusBK;
      id v254 = sub_100074FB8;
      id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusBK;
      uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusBKInputRing;
      goto LABEL_332;
    }
    id v12 = &OBJC_IVAR___NRLinkBluetooth__syncNexusBKInput;
    id v13 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusBK;
    id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusBK;
    uint64_t v15 = &OBJC_IVAR___NRLinkBluetooth__nexusBKInputRing;
  }
LABEL_21:
  uint64_t v5 = *(void *)(v4 + *v15);
  id v252 = (void *)(v4 + *v14);
  v253 = (void *)(v4 + *v12);
  v251 = (void *)(v4 + *v13);
LABEL_22:
  char v255 = 0;
  id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  uint64_t v273 = v5;
  while (2)
  {
    uint64_t v17 = 0;
    uint64_t v263 = 0;
    uint64_t v18 = 0;
    object_address = 0;
    uint64_t v19 = 0;
    uint64_t v269 = 0;
    uint64_t v20 = 0;
    uint64_t v294 = 0;
    uint64_t v295 = 0;
    uint64_t v275 = *(void *)(v4 + 951);
LABEL_26:
    uint64_t v21 = v273;
    while (1)
    {
      uint64_t v22 = v17;
      *(void *)(v4 + 1919) = 2;
      long long v280 = 0u;
      long long v281 = 0u;
      long long v278 = 0u;
      long long v279 = 0u;
      if (v21)
      {
        uint64_t v23 = v18;
        uint64_t next_slot = os_channel_get_next_slot();
        if (next_slot && v265 == v266)
        {
          LODWORD(v18) = v23;
          if (*(unsigned char *)(v4 + 225))
          {
            uint64_t v25 = next_slot;
            uint64_t v267 = v19;
            uint64_t v26 = v20;
            if ((void)v279)
            {
              BOOL v27 = 0;
              if (WORD1(v278))
              {
                if (isPacketValidIPv6()) {
                  BOOL v27 = getDSCPFromPacket() == 46 && WORD1(v278) < 0x2A4u;
                }
                else {
                  BOOL v27 = 0;
                }
                LODWORD(v18) = v23;
              }
            }
            else
            {
              BOOL v27 = 0;
            }
            if (gNRPacketLoggingEnabled)
            {
              getESPSequenceNumberFromPacket();
              if (gNRPacketLoggingEnabled) {
                getESPSPIFromPacket();
              }
              LODWORD(v18) = v23;
              if (v27)
              {
LABEL_70:
                uint64_t v47 = os_channel_get_next_slot();
                if (!v47)
                {
                  uint64_t v20 = v26;
                  uint64_t v19 = v267;
                  if (*(unsigned char *)(v4 + 224) && *(void *)(v4 + 1071))
                  {
                    *(unsigned char *)(v4 + 224) = 0;
                    ++*(void *)(v4 + 1087);
                    if (gNRPacketLoggingEnabled)
                    {
                      id v105 = (void *)_NRCopyLogObjectForNRUUID();
                      int v106 = _NRLogIsLevelEnabled();

                      id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                      if (v106)
                      {
                        id v107 = (void *)_NRCopyLogObjectForNRUUID();
                        id v243 = [(id)v4 copyDescription];
                        _NRLogWithArgs();

                        id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                      }
                    }
                    dispatch_resume(*(dispatch_object_t *)(v4 + 1071));
                  }
                  v259(v4);
                  *(void *)(v4 + 1919) |= 4uLL;
                  LODWORD(v51) = 31;
                  id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                  uint64_t v18 = v23;
                  uint64_t v17 = v22;
                  goto LABEL_150;
                }
                uint64_t v48 = v47;
                uint64_t v20 = v26;
                if (!*(unsigned char *)(v4 + 224) && *(void *)(v4 + 1071))
                {
                  uint64_t v49 = v47;
                  *(unsigned char *)(v4 + 224) = 1;
                  ++*(void *)(v4 + 1087);
                  if (gNRPacketLoggingEnabled)
                  {
                    uint64_t v102 = (void *)_NRCopyLogObjectForNRUUID();
                    int v103 = _NRLogIsLevelEnabled();

                    if (v103)
                    {
                      id v104 = (void *)_NRCopyLogObjectForNRUUID();
                      id v242 = [(id)v4 copyDescription];
                      _NRLogWithArgs();
                    }
                  }
                  dispatch_suspend(*(dispatch_object_t *)(v4 + 1071));
                  uint64_t v48 = v49;
                }
                uint64_t v277 = v48;
                os_channel_slot_get_packet();
                os_packet_get_next_buflet();
                os_buflet_get_object_address();
                if (os_buflet_get_data_limit() < 0x10000)
                {
                  *(void *)(v4 + 1399) += nrPacketToTLV();
                  *v251 += WORD1(v278);
                  ++*v252;
                  *(void *)(v4 + 1919) |= 0x10uLL;
                  if (gNRPacketLoggingEnabled)
                  {
                    id v101 = (void *)_NRCopyLogObjectForNRUUID();
                    int v270 = _NRLogIsLevelEnabled();

                    if (v270)
                    {
                      v271 = (void *)_NRCopyLogObjectForNRUUID();
                      id v228 = [(id)v4 copyDescription];
                      _NRLogWithArgs();
                    }
                  }
                  os_buflet_set_data_length();
                  uint64_t v295 = ++v275;
                  os_packet_set_flow_uuid();
                  int v50 = os_packet_finalize();
                  if (!v50)
                  {
                    LODWORD(v51) = 30;
                    uint64_t v263 = v277;
                    uint64_t v269 = v25;
                    id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                    id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                    uint64_t v19 = v267;
                    uint64_t v18 = v23;
                    uint64_t v17 = v22;
                    goto LABEL_150;
                  }
                  int v187 = v50;
                  id v225 = sub_100070988();
                  int v226 = _NRLogIsLevelEnabled();

                  if (v226)
                  {
                    id v227 = sub_100070988();
                    _NRLogWithArgs();
                  }
LABEL_315:
                  _os_log_pack_size();
                  __chkstk_darwin();
                  __error();
                  uint64_t v191 = _os_log_pack_fill();
                  *(_DWORD *)uint64_t v191 = 136446466;
                  *(void *)(v191 + 4) = "NRLinkNexusToLinkLoop";
                  *(_WORD *)(v191 + 12) = 1024;
                  *(_DWORD *)(v191 + 14) = v187;
                  goto LABEL_300;
                }
                id v184 = sub_100070988();
                int v185 = _NRLogIsLevelEnabled();

                if (v185)
                {
                  id v186 = sub_100070988();
                  _NRLogWithArgs();
                }
                while (1)
                {
LABEL_299:
                  _os_log_pack_size();
                  __chkstk_darwin();
                  __error();
                  uint64_t v172 = _os_log_pack_fill();
                  *(_DWORD *)uint64_t v172 = 136446210;
                  *(void *)(v172 + 4) = "NRLinkNexusToLinkLoop";
LABEL_300:
                  sub_100070988();
                  _NRLogAbortWithPack();
LABEL_301:
                  id v173 = sub_100070988();
                  int v174 = _NRLogIsLevelEnabled();

                  if (v174)
                  {
                    id v175 = sub_100070988();
                    _NRLogWithArgs();
                  }
                }
              }
            }
            else if (v27)
            {
              goto LABEL_70;
            }
            uint64_t v20 = v26;
            uint64_t v19 = v267;
          }
        }
        else
        {
          LODWORD(v18) = v23;
        }
      }
      uint64_t v17 = v22;
      if ((_WORD)v22)
      {
        *(void *)(v4 + 1919) |= 0x40uLL;
        if (!v20) {
          goto LABEL_173;
        }
        goto LABEL_48;
      }
      int v28 = v18;
      uint64_t v29 = os_channel_get_next_slot();
      if (!v29) {
        break;
      }
      uint64_t v20 = v29;
      *(void *)(v4 + 1919) |= 0x20uLL;
      os_channel_slot_get_packet();
      os_packet_get_next_buflet();
      object_address = (char *)os_buflet_get_object_address();
      unsigned int data_limit = os_buflet_get_data_limit();
      if (data_limit >= 0x10000)
      {
        id v165 = sub_100070988();
        int v166 = _NRLogIsLevelEnabled();

        if (v166)
        {
          id v167 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_299;
      }
      LODWORD(v18) = data_limit;
LABEL_48:
      unsigned int v276 = v18;
      if (!*(unsigned char *)(v4 + 222) && *(void *)(v4 + 991))
      {
        *(unsigned char *)(v4 + 222) = 1;
        ++*(void *)(v4 + 1007);
        if (gNRPacketLoggingEnabled)
        {
          __int16 v44 = (void *)_NRCopyLogObjectForNRUUID();
          int v45 = _NRLogIsLevelEnabled();

          id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          if (v45)
          {
            id v46 = (void *)_NRCopyLogObjectForNRUUID();
            id v240 = [(id)v4 copyDescription];
            _NRLogWithArgs();

            id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          }
        }
        dispatch_suspend(*(dispatch_object_t *)(v4 + 991));
        LODWORD(v18) = v276;
      }
      uint64_t next_buflet = (unsigned __int16)v18;
      unsigned int v32 = *(_DWORD *)(v4 + 287);
      uint64_t v33 = *(unsigned int *)(v4 + v16[268]);
      if (v32 <= v33) {
        goto LABEL_80;
      }
      unsigned int v34 = v32 - v33;
      if (v34 >= (unsigned __int16)(v18 - v22)) {
        unsigned int v35 = v18 - v22;
      }
      else {
        unsigned int v35 = v34;
      }
      int v36 = v18;
      memcpy(object_address, (const void *)(*(void *)(v4 + 447) + v33), (unsigned __int16)v35);
      *(_DWORD *)(v4 + v16[268]) += (unsigned __int16)v35;
      *(void *)(v4 + 1383) += (unsigned __int16)v35;
      ++*(_DWORD *)(v4 + 295);
      uint64_t v37 = v19;
      uint64_t v19 = v20;
      uint64_t v38 = v275;
      if (v37 != v20) {
        uint64_t v38 = v275 + 1;
      }
      *(void *)(v4 + 1919) |= 0x100uLL;
      uint64_t v275 = v38;
      if (gNRPacketLoggingEnabled)
      {
        id v40 = (void *)_NRCopyLogObjectForNRUUID();
        int v41 = _NRLogIsLevelEnabled();

        uint64_t v38 = v275;
        if (v41)
        {
          uint64_t v42 = (void *)_NRCopyLogObjectForNRUUID();
          id v43 = [v272 copyDescription];
          _NRLogWithArgs();

          uint64_t v38 = v275;
        }
      }
      uint64_t v17 = v35 + v17;
      if ((unsigned __int16)v17 < (unsigned __int16)v36)
      {
        LODWORD(v18) = v36;
        uint64_t v4 = (uint64_t)v272;
        uint64_t v21 = v273;
        id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_80:
        if (!v21)
        {
          uint64_t v261 = v20;
          if (*(unsigned char *)(v4 + 16) == 8)
          {
            id v120 = (void *)_NRCopyLogObjectForNRUUID();
            int v121 = _NRLogIsLevelEnabled();

            if (v121)
            {
              id v122 = (void *)_NRCopyLogObjectForNRUUID();
              id v239 = [(id)v4 copyDescription];
              _NRLogWithArgs();
            }
            id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            uint64_t v109 = v263;
            LODWORD(v18) = v276;
          }
          else
          {
            *(void *)(v4 + 1919) |= 0x400uLL;
            id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_221:
            uint64_t v109 = v263;
          }
          goto LABEL_180;
        }
        uint64_t v53 = os_channel_get_next_slot();
        if (!v53)
        {
          v254(v4);
          *(void *)(v4 + 1919) |= 0x800uLL;
          LODWORD(v51) = 31;
          char v255 = 1;
          id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          uint64_t v18 = v276;
          goto LABEL_150;
        }
        int v54 = (unsigned __int16)v17;
        BOOL v256 = (unsigned __int16)v17 == 0;
        uint64_t v257 = v53;
        uint64_t v55 = v275;
        if (!(_WORD)v17) {
          uint64_t v55 = v275 + 1;
        }
        uint64_t v260 = v55;
        v259(v4);
        uint64_t v258 = v17;
        if (gNRPacketLoggingEnabled)
        {
          getESPSequenceNumberFromPacket();
          if (gNRPacketLoggingEnabled)
          {
            getESPSPIFromPacket();
            if (gNRPacketLoggingEnabled)
            {
              uint64_t v4 = (uint64_t)v272;
              id v89 = (void *)_NRCopyLogObjectForNRUUID();
              int v90 = _NRLogIsLevelEnabled();

              if (v90)
              {
                uint64_t v91 = (void *)_NRCopyLogObjectForNRUUID();
                id v230 = [v272 copyDescription];
                _NRLogWithArgs();
              }
              id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
              goto LABEL_85;
            }
            id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          }
          uint64_t v4 = (uint64_t)v272;
        }
LABEL_85:
        unsigned int v262 = nrMaxTLVLengthForPacket();
        long long v292 = 0u;
        long long v293 = 0u;
        long long v290 = 0u;
        long long v291 = 0u;
        long long v288 = 0u;
        long long v289 = 0u;
        long long v286 = 0u;
        long long v287 = 0u;
        long long v284 = 0u;
        long long v285 = 0u;
        long long v282 = 0u;
        long long v283 = 0u;
        long long v280 = 0u;
        long long v281 = 0u;
        uint64_t v18 = v276;
        long long v278 = 0u;
        long long v279 = 0u;
        if ((unsigned __int16)v276 <= (unsigned __int16)v17)
        {
          unsigned int v56 = 0;
          unsigned int v57 = 0;
        }
        else
        {
          *(void *)&long long v278 = &object_address[(unsigned __int16)v17];
          unsigned int v56 = next_buflet - (unsigned __int16)v17;
          DWORD2(v278) = next_buflet - v54;
          unsigned int v57 = 1;
        }
        if (v56 < v262)
        {
          uint64_t v268 = v19;
          uint64_t v58 = v20;
          uint64_t v59 = v57;
          id v60 = (unsigned int *)&v278 + 4 * v57 + 2;
          while (os_channel_get_next_slot())
          {
            os_channel_slot_get_packet();
            os_packet_get_next_buflet();
            uint64_t v61 = os_buflet_get_object_address();
            unsigned int v62 = os_buflet_get_data_limit();
            if (v62 >= 0x10000)
            {
              if (qword_1001F49E8 != -1) {
                dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
              }
              if (_NRLogIsLevelEnabled())
              {
                id v170 = sub_100070988();
                _NRLogWithArgs();
              }
              goto LABEL_299;
            }
            *((void *)v60 - 1) = v61;
            if (!v62)
            {
              if (qword_1001F49E8 != -1) {
                dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
              }
              if (_NRLogIsLevelEnabled())
              {
                id v171 = sub_100070988();
                _NRLogWithArgs();
              }
              goto LABEL_299;
            }
            *id v60 = v62;
            *(void *)(v4 + 1919) |= 0x1000uLL;
            if (v59 == 15)
            {
              IOVecid String = (void *)createIOVecString();
              sub_100074894((void *)v4, @"NtL not enough ioVecs %@ for %u", v69, v70, v71, v72, v73, v74, (uint64_t)IOVecString);

              LODWORD(v51) = 1;
              id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
              id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
              uint64_t v20 = v58;
              uint64_t v19 = v268;
              uint64_t v18 = v276;
              uint64_t v17 = v258;
              goto LABEL_149;
            }
            ++v59;
            v56 += v62;
            v60 += 4;
            if (v56 >= v262) {
              break;
            }
          }
          id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          uint64_t v20 = v58;
          uint64_t v19 = v268;
          uint64_t v18 = v276;
        }
        if (v56 < v262)
        {
          *(void *)(v4 + 1919) |= 0x2000uLL;
          if (*(unsigned char *)(v4 + 222))
          {
            id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            uint64_t v17 = v258;
            if (*(void *)(v4 + 991))
            {
              *(unsigned char *)(v4 + 222) = 0;
              ++*(void *)(v4 + 1007);
              if (gNRPacketLoggingEnabled)
              {
                id v98 = (void *)_NRCopyLogObjectForNRUUID();
                int v99 = _NRLogIsLevelEnabled();

                id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                if (v99)
                {
                  id v100 = (void *)_NRCopyLogObjectForNRUUID();
                  id v241 = [(id)v4 copyDescription];
                  _NRLogWithArgs();

                  id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                }
              }
              dispatch_resume(*(dispatch_object_t *)(v4 + 991));
              LODWORD(v51) = 31;
              uint64_t v18 = v276;
            }
            else
            {
              LODWORD(v51) = 31;
            }
          }
          else
          {
            LODWORD(v51) = 31;
            id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            uint64_t v17 = v258;
          }
          goto LABEL_149;
        }
        if (!(void)v278)
        {
          id v176 = sub_100070988();
          int v177 = _NRLogIsLevelEnabled();

          if (v177)
          {
            id v178 = sub_100070988();
            id v246 = (void *)createIOVecString();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v179 = _os_log_pack_fill();
          uint64_t v180 = createIOVecString();
          *(_DWORD *)uint64_t v179 = 136446466;
          *(void *)(v179 + 4) = "NRLinkNexusToLinkLoop";
          *(_WORD *)(v179 + 12) = 2112;
          *(void *)(v179 + 14) = v180;
          goto LABEL_300;
        }
        if (gNRPacketLoggingEnabled)
        {
          id v92 = (void *)_NRCopyLogObjectForNRUUID();
          int v93 = _NRLogIsLevelEnabled();

          if (v93)
          {
            id v94 = (void *)_NRCopyLogObjectForNRUUID();
            id v231 = [(id)v4 copyDescription];
            getDSCPFromPacket();
            _NRLogWithArgs();
          }
        }
        unsigned int v63 = nrPacketToTLV();
        unsigned int v64 = v63;
        int v65 = *(unsigned __int8 *)v278;
        uint64_t v66 = v260;
        switch(*(unsigned char *)v278)
        {
          case 'd':
            id v67 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_ESP;
            goto LABEL_123;
          case 'e':
            id v67 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_ESP_ECT0;
            goto LABEL_123;
          case 'f':
            id v67 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_TCP;
            goto LABEL_123;
          case 'g':
            id v67 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_TCP_ECT0;
            goto LABEL_123;
          case 'h':
            id v67 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_ESP_ClassC;
            goto LABEL_123;
          case 'i':
            id v67 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_ESP_ClassC_ECT0;
            goto LABEL_123;
          default:
            if (v65 == 2)
            {
              id v67 = &OBJC_IVAR___NRLinkBluetooth__sentUncompressedIP;
LABEL_123:
              uint64_t v18 = v276;
            }
            else
            {
              uint64_t v18 = v276;
              if (v65 != 3) {
                goto LABEL_125;
              }
              id v67 = &OBJC_IVAR___NRLinkBluetooth__sentEncapsulated6LoWPAN;
            }
            ++*(void *)(v4 + *v67);
LABEL_125:
            *(void *)(v4 + 1383) += v63;
            unsigned int v75 = (unsigned __int16)(v18 - v258);
            if (v63 <= v75)
            {
              uint64_t v82 = v258 + v63;
              goto LABEL_139;
            }
            *(void *)(v4 + 1919) |= 0x4000uLL;
            if (gNRPacketLoggingEnabled)
            {
              id v95 = (void *)_NRCopyLogObjectForNRUUID();
              int v96 = _NRLogIsLevelEnabled();

              if (v96)
              {
                id v97 = (void *)_NRCopyLogObjectForNRUUID();
                id v232 = [(id)v4 copyDescription];
                _NRLogWithArgs();
              }
            }
            uint64_t v295 = v260;
            os_buflet_set_data_length();
            os_packet_set_flow_uuid();
            int v76 = os_packet_finalize();
            if (v76)
            {
              int v200 = v76;
              id v222 = sub_100070988();
              int v223 = _NRLogIsLevelEnabled();

              if (v223)
              {
                id v224 = sub_100070988();
                _NRLogWithArgs();
              }
LABEL_325:
              uint64_t v4 = _os_log_pack_size();
              __chkstk_darwin();
              __error();
              uint64_t v204 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v204 = 136446466;
              *(void *)(v204 + 4) = "NRLinkNexusToLinkLoop";
              *(_WORD *)(v204 + 12) = 1024;
              *(_DWORD *)(v204 + 14) = v200;
              sub_100070988();
              _NRLogAbortWithPack();
LABEL_326:
              v205 = (void *)_NRCopyLogObjectForNRUUID();
              int v206 = _NRLogIsLevelEnabled();

              if (v206)
              {
                v207 = (void *)_NRCopyLogObjectForNRUUID();
                id v247 = [(id)v4 copyDescription];
                _NRLogWithArgs();
              }
LABEL_256:
              dispatch_resume(*(dispatch_object_t *)(v4 + *(int *)(next_buflet + 1404)));
              goto LABEL_257;
            }
            uint64_t v66 = v275 + v256 + 1;
            while (1)
            {
              uint64_t v77 = os_channel_get_next_slot();
              if (!v77)
              {
                if (qword_1001F49E8 != -1) {
                  dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
                }
                if (_NRLogIsLevelEnabled())
                {
                  id v168 = sub_100070988();
                  _NRLogWithArgs();
                }
                goto LABEL_299;
              }
              uint64_t v20 = v77;
              os_channel_slot_get_packet();
              uint64_t next_buflet = os_packet_get_next_buflet();
              object_address = (char *)os_buflet_get_object_address();
              uint64_t v78 = os_buflet_get_data_limit();
              if (v78 >= 0x10000)
              {
                if (qword_1001F49E8 != -1) {
                  dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
                }
                if (_NRLogIsLevelEnabled())
                {
                  id v169 = sub_100070988();
                  _NRLogWithArgs();
                }
                goto LABEL_299;
              }
              uint64_t v18 = v78;
              unsigned int v79 = v78 + v75;
              if (v78 + v75 >= v64) {
                break;
              }
              *(void *)(v4 + 1919) |= 0x8000uLL;
              if (gNRPacketLoggingEnabled)
              {
                uint64_t next_buflet = _NRCopyLogObjectForNRUUID();
                int v81 = _NRLogIsLevelEnabled();

                if (v81)
                {
                  uint64_t next_buflet = _NRCopyLogObjectForNRUUID();
                  id v229 = [(id)v4 copyDescription];
                  _NRLogWithArgs();
                }
              }
              uint64_t v295 = v66;
              os_buflet_set_data_length();
              os_packet_set_flow_uuid();
              int v80 = os_packet_finalize();
              ++v66;
              unsigned int v75 = v79;
              if (v80)
              {
                int v200 = v80;
                id v201 = sub_100070988();
                int v202 = _NRLogIsLevelEnabled();

                if (v202)
                {
                  id v203 = sub_100070988();
                  _NRLogWithArgs();
                }
                goto LABEL_325;
              }
            }
            uint64_t v82 = v64 - v75;
LABEL_139:
            uint64_t v260 = v66;
            ++*v252;
            void *v251 = *v251;
            *(void *)(v4 + 1919) |= 0x10000uLL;
            uint64_t v51 = *(void *)(v4 + 1919);
            id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            if (!v51)
            {
              uint64_t v19 = v20;
              uint64_t v269 = v257;
              id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
              uint64_t v17 = v82;
              goto LABEL_149;
            }
            id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            uint64_t v51 = *(void *)(v4 + 1927);
            uint64_t v17 = v82;
            if (!v51) {
              goto LABEL_148;
            }
            *(unsigned char *)(v4 + 257) %= *(unsigned char *)(v4 + 256);
            uint64_t v83 = *(void *)(v4 + 1927);
            id v84 = (void *)(v83 + 8 * *(unsigned __int8 *)(v4 + 257));
            if ((unint64_t)(v84 + 1) <= v83 + 8 * (unint64_t)*(unsigned __int8 *)(v4 + 256))
            {
              LODWORD(v51) = 0;
              if ((v84 & 7) == 0)
              {
                *id v84 = *(void *)(v4 + 1919);
                ++*(unsigned char *)(v4 + 257);
                *(void *)(v4 + 1919) = 0;
              }
LABEL_148:
              uint64_t v19 = v20;
              uint64_t v269 = v257;
              goto LABEL_149;
            }
            uint64_t v85 = v18;
            uint64_t v86 = (void *)_NRCopyLogObjectForNRUUID();
            int v87 = _NRLogIsLevelEnabled();

            if (v87)
            {
              id v88 = (void *)_NRCopyLogObjectForNRUUID();
              id v237 = [(id)v4 copyDescription];
              _NRLogWithArgs();
            }
            LODWORD(v51) = 0;
            uint64_t v19 = v20;
            uint64_t v269 = v257;
            id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            uint64_t v18 = v85;
            uint64_t v17 = v82;
LABEL_149:
            uint64_t v275 = v260;
LABEL_150:
            if (v51 && v51 != 30)
            {
              if (v51 == 31)
              {
                uint64_t v261 = v20;
                goto LABEL_221;
              }
              goto LABEL_24;
            }
            break;
        }
        goto LABEL_26;
      }
      uint64_t v4 = (uint64_t)v272;
      uint64_t v21 = v273;
      if ((unsigned __int16)v17 != (unsigned __int16)v36)
      {
        if (qword_1001F49E8 != -1) {
          dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
        }
        id v162 = (id)qword_1001F49E0;
        int v163 = _NRLogIsLevelEnabled();

        if (v163)
        {
          if (qword_1001F49E8 != -1) {
            dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
          }
          id v164 = (id)qword_1001F49E0;
          _NRLogWithArgs();
        }
        goto LABEL_299;
      }
      os_buflet_set_data_length();
      uint64_t v295 = v38;
      os_packet_set_flow_uuid();
      int v39 = os_packet_finalize();
      if (v39)
      {
        int v187 = v39;
        id v188 = sub_100070988();
        int v189 = _NRLogIsLevelEnabled();

        if (v189)
        {
          id v190 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_315;
      }
      uint64_t v17 = 0;
      *(void *)(v272 + 1919) |= 0x200uLL;
      id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      uint64_t v18 = v276;
    }
    LODWORD(v22) = 0;
    LODWORD(v18) = v28;
LABEL_173:
    int v108 = v18;
    uint64_t v109 = v263;
    if (*(unsigned char *)(v4 + 222) && *(void *)(v4 + 991))
    {
      *(unsigned char *)(v4 + 222) = 0;
      ++*(void *)(v4 + 1007);
      if (gNRPacketLoggingEnabled)
      {
        long long v151 = (void *)_NRCopyLogObjectForNRUUID();
        int v152 = _NRLogIsLevelEnabled();

        uint64_t v109 = v263;
        if (v152)
        {
          long long v153 = (void *)_NRCopyLogObjectForNRUUID();
          id v245 = [(id)v4 copyDescription];
          _NRLogWithArgs();

          uint64_t v109 = v263;
        }
      }
      dispatch_resume(*(dispatch_object_t *)(v4 + 991));
    }
    v259(v4);
    *(void *)(v4 + 1919) |= 0x80uLL;
    if (gNRPacketLoggingEnabled)
    {
      id v123 = (void *)_NRCopyLogObjectForNRUUID();
      int v124 = _NRLogIsLevelEnabled();

      id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      if (v124)
      {
        id v125 = (void *)_NRCopyLogObjectForNRUUID();
        id v244 = [(id)v4 copyDescription];
        _NRLogWithArgs();
      }
      uint64_t v261 = 0;
      uint64_t v109 = v263;
    }
    else
    {
      uint64_t v261 = 0;
      id v52 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    }
    LODWORD(v18) = v108;
    LODWORD(v17) = v22;
LABEL_180:
    if (v19)
    {
      if (v261 != v19) {
        goto LABEL_301;
      }
      uint64_t v264 = v109;
      uint64_t v110 = 0x40000;
      if ((unsigned __int16)v17 != (unsigned __int16)v18 && (unsigned __int16)v17 != 0)
      {
        uint64_t v110 = 0x20000;
        uint64_t next_buflet = v17;
      }
      else
      {
        uint64_t next_buflet = v18;
      }
      *(void *)(v4 + 1919) |= v110;
      if (gNRPacketLoggingEnabled)
      {
        int v134 = (void *)_NRCopyLogObjectForNRUUID();
        int v135 = _NRLogIsLevelEnabled();

        if (v135)
        {
          id v136 = (void *)_NRCopyLogObjectForNRUUID();
          id v234 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
      }
      uint64_t v295 = v275;
      os_buflet_set_data_length();
      os_packet_set_flow_uuid();
      int v111 = os_packet_finalize();
      if (v111)
      {
        int v200 = v111;
        id v219 = sub_100070988();
        int v220 = _NRLogIsLevelEnabled();

        if (v220)
        {
          id v221 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_325;
      }
      unsigned int v112 = *(_DWORD *)(v4 + 287);
      unsigned int v113 = *(_DWORD *)(v4 + 291);
      if (v112 <= v113)
      {
        if (v112 != v113)
        {
          id v181 = sub_100070988();
          int v182 = _NRLogIsLevelEnabled();

          if (v182)
          {
            id v183 = sub_100070988();
            _NRLogWithArgs();
          }
          goto LABEL_299;
        }
        if (gNRPacketLoggingEnabled)
        {
          if (v112)
          {
            *(void *)(v4 + 1919) |= 0x100000uLL;
            id v158 = (void *)_NRCopyLogObjectForNRUUID();
            int v159 = _NRLogIsLevelEnabled();

            if (v159)
            {
              long long v160 = (void *)_NRCopyLogObjectForNRUUID();
              id v161 = [(id)v4 copyDescription];
              _NRLogWithArgs();
            }
          }
        }
        *(_DWORD *)(v4 + 287) = 0;
      }
      else
      {
        *(void *)(v4 + 1919) |= 0x80000uLL;
        if (gNRPacketLoggingEnabled)
        {
          long long v154 = (void *)_NRCopyLogObjectForNRUUID();
          int v155 = _NRLogIsLevelEnabled();

          if (v155)
          {
            long long v156 = (void *)_NRCopyLogObjectForNRUUID();
            id v157 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
        }
        memmove(*(void **)(v4 + 447), (const void *)(*(void *)(v4 + 447) + *(unsigned int *)(v4 + 291)), (*(_DWORD *)(v4 + 287) - *(_DWORD *)(v4 + 291)));
        *(_DWORD *)(v4 + 287) -= *(_DWORD *)(v4 + 291);
      }
      *(_DWORD *)(v4 + 291) = 0;
      *(void *)(v4 + 1919) |= 0x200000uLL;
      if (gNRPacketLoggingEnabled)
      {
        id v137 = (void *)_NRCopyLogObjectForNRUUID();
        int v138 = _NRLogIsLevelEnabled();

        if (v138)
        {
          id v139 = (void *)_NRCopyLogObjectForNRUUID();
          id v235 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
        if (gNRPacketLoggingEnabled)
        {
          uint64_t v140 = +[NSDate date];
          id v141 = *(void **)(v4 + 1687);
          *(void *)(v4 + 1687) = v140;
        }
      }
      os_channel_advance_slot();
      os_channel_sync();
      ++*(void *)(v4 + 1431);
      uint64_t v109 = v264;
    }
    if (v109)
    {
      *(void *)(v4 + 1919) |= 0x800000uLL;
      if (gNRPacketLoggingEnabled)
      {
        uint64_t v126 = v109;
        int v127 = (void *)_NRCopyLogObjectForNRUUID();
        int v128 = _NRLogIsLevelEnabled();

        if (v128)
        {
          long long v129 = (void *)_NRCopyLogObjectForNRUUID();
          id v233 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
        uint64_t v109 = v126;
        if (gNRPacketLoggingEnabled)
        {
          uint64_t v130 = +[NSDate date];
          BOOL v131 = *(void **)(v4 + 1703);
          *(void *)(v4 + 1703) = v130;
        }
      }
      os_channel_advance_slot();
      os_channel_sync();
      ++*(void *)(v4 + 1447);
    }
    uint64_t v114 = v109;
    if (v269)
    {
      if (v273)
      {
        *(void *)(v4 + 1919) |= 0x1000000uLL;
        if (gNRPacketLoggingEnabled)
        {
          id v142 = (void *)_NRCopyLogObjectForNRUUID();
          int v143 = _NRLogIsLevelEnabled();

          if (v143)
          {
            id v144 = (void *)_NRCopyLogObjectForNRUUID();
            id v236 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
          if (gNRPacketLoggingEnabled)
          {
            uint64_t v145 = +[NSDate date];
            size_t v146 = *(void **)(v4 + 1663);
            *(void *)(v4 + 1663) = v145;
          }
        }
        os_channel_advance_slot();
        os_channel_sync();
        ++*v253;
        if (gNRPacketLoggingEnabled)
        {
          uint64_t v147 = (void *)_NRCopyLogObjectForNRUUID();
          int v148 = _NRLogIsLevelEnabled();

          if (v148)
          {
LABEL_242:
            uint64_t v149 = (void *)_NRCopyLogObjectForNRUUID();
            id v150 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
        }
      }
      else
      {
        BOOL v132 = (void *)_NRCopyLogObjectForNRUUID();
        int v133 = _NRLogIsLevelEnabled();

        if (v133) {
          goto LABEL_242;
        }
      }
    }
    *(void *)(v4 + 951) = v275;
    if (*(void *)(v4 + 1919) && *(void *)(v4 + v52[344]))
    {
      *(unsigned char *)(v4 + 257) %= *(unsigned char *)(v4 + 256);
      uint64_t v115 = *(void *)(v4 + v52[344]);
      long long v116 = (void *)(v115 + 8 * *(unsigned __int8 *)(v4 + 257));
      if ((unint64_t)(v116 + 1) <= v115 + 8 * (unint64_t)*(unsigned __int8 *)(v4 + 256))
      {
        if ((v116 & 7) == 0)
        {
          *long long v116 = *(void *)(v4 + 1919);
          ++*(unsigned char *)(v4 + 257);
          *(void *)(v4 + 1919) = 0;
        }
      }
      else
      {
        long long v117 = (void *)_NRCopyLogObjectForNRUUID();
        int v118 = _NRLogIsLevelEnabled();

        if (v118)
        {
          long long v119 = (void *)_NRCopyLogObjectForNRUUID();
          id v238 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
      }
    }
    LODWORD(v51) = 0;
    if (v269)
    {
      id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      goto LABEL_24;
    }
    id v16 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    if (v19 || v114)
    {
LABEL_24:
      if (v51) {
        goto LABEL_261;
      }
      continue;
    }
    break;
  }
  if (v255)
  {
    if (!*(void *)(v4 + 1111))
    {
      if (*(unsigned char *)(v4 + 214) && *(void *)(v4 + 551))
      {
        *(unsigned char *)(v4 + 214) = 0;
        ++*(void *)(v4 + 567);
        if (gNRPacketLoggingEnabled)
        {
          v213 = (void *)_NRCopyLogObjectForNRUUID();
          int v214 = _NRLogIsLevelEnabled();

          if (v214)
          {
            v215 = (void *)_NRCopyLogObjectForNRUUID();
            id v249 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
        }
        dispatch_resume(*(dispatch_object_t *)(v4 + 551));
      }
      if (*(unsigned char *)(v4 + 216) && *(void *)(v4 + 695))
      {
        *(unsigned char *)(v4 + 216) = 0;
        ++*(void *)(v4 + 711);
        if (gNRPacketLoggingEnabled)
        {
          id v216 = (void *)_NRCopyLogObjectForNRUUID();
          int v217 = _NRLogIsLevelEnabled();

          if (v217)
          {
            id v218 = (void *)_NRCopyLogObjectForNRUUID();
            id v250 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
        }
        dispatch_resume(*(dispatch_object_t *)(v4 + 695));
      }
    }
    if (*(unsigned char *)(v4 + 212))
    {
      uint64_t next_buflet = (uint64_t)&OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      if (*(void *)(v4 + 391))
      {
        *(unsigned char *)(v4 + 212) = 0;
        ++*(void *)(v4 + 415);
        if (gNRPacketLoggingEnabled) {
          goto LABEL_326;
        }
        goto LABEL_256;
      }
    }
LABEL_257:
    if (*(unsigned char *)(v4 + 218) && *(void *)(v4 + 839))
    {
      *(unsigned char *)(v4 + 218) = 0;
      ++*(void *)(v4 + 855);
      if (gNRPacketLoggingEnabled)
      {
        id v208 = (void *)_NRCopyLogObjectForNRUUID();
        int v209 = _NRLogIsLevelEnabled();

        if (v209)
        {
          id v210 = (void *)_NRCopyLogObjectForNRUUID();
          id v248 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(v4 + 839));
    }
  }
LABEL_261:
}

void sub_100074894(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v10 = a2;
    id v11 = [objc_alloc((Class)NSString) initWithFormat:v10 arguments:&a9];

    [a1 cancelWithReason:@"flushing pipe: %@", v11];
  }
}

void sub_100074918(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 214) && *(void *)(a1 + 551))
  {
    *(unsigned char *)(a1 + 214) = 1;
    ++*(void *)(a1 + 567);
    if (gNRPacketLoggingEnabled)
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v2 = *(NSObject **)(a1 + 551);
    dispatch_suspend(v2);
  }
}

void sub_100074A34(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 216) && *(void *)(a1 + 695))
  {
    *(unsigned char *)(a1 + 216) = 1;
    ++*(void *)(a1 + 711);
    if (gNRPacketLoggingEnabled)
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v2 = *(NSObject **)(a1 + 695);
    dispatch_suspend(v2);
  }
}

void sub_100074B50(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 218) && *(void *)(a1 + 839))
  {
    *(unsigned char *)(a1 + 218) = 1;
    ++*(void *)(a1 + 855);
    if (gNRPacketLoggingEnabled)
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v2 = *(NSObject **)(a1 + 839);
    dispatch_suspend(v2);
  }
}

void sub_100074C6C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 212) && *(void *)(a1 + 391))
  {
    *(unsigned char *)(a1 + 212) = 1;
    ++*(void *)(a1 + 415);
    if (gNRPacketLoggingEnabled)
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v2 = *(NSObject **)(a1 + 391);
    dispatch_suspend(v2);
  }
}

void sub_100074D88(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 214) && *(void *)(a1 + 551))
  {
    *(unsigned char *)(a1 + 214) = 0;
    ++*(void *)(a1 + 567);
    if (gNRPacketLoggingEnabled)
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v2 = *(NSObject **)(a1 + 551);
    dispatch_resume(v2);
  }
}

void sub_100074EA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 216) && *(void *)(a1 + 695))
  {
    *(unsigned char *)(a1 + 216) = 0;
    ++*(void *)(a1 + 711);
    if (gNRPacketLoggingEnabled)
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v2 = *(NSObject **)(a1 + 695);
    dispatch_resume(v2);
  }
}

void sub_100074FB8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 218) && *(void *)(a1 + 839))
  {
    *(unsigned char *)(a1 + 218) = 0;
    ++*(void *)(a1 + 855);
    if (gNRPacketLoggingEnabled)
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v2 = *(NSObject **)(a1 + 839);
    dispatch_resume(v2);
  }
}

void sub_1000750D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 212) && *(void *)(a1 + 391))
  {
    *(unsigned char *)(a1 + 212) = 0;
    ++*(void *)(a1 + 415);
    if (gNRPacketLoggingEnabled)
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
        id v6 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v2 = *(NSObject **)(a1 + 391);
    dispatch_resume(v2);
  }
}

void **sub_1000761A0(void **a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a1)
  {
    uint64_t String = NRDataProtectionClassCreateString();
    id v12 = sub_10013DC5C((uint64_t)NRDLocalDevice, a1[4]);
    id v13 = sub_10013EF3C(v12, a4);
    id v14 = sub_10011F560(0, v12, a4);
    if (v13) {
      uint64_t v15 = (void *)v13[1];
    }
    else {
      uint64_t v15 = 0;
    }
    id v16 = v15;

    if (!v16)
    {
      uint64_t v20 = (void *)String;
      [a1 reportEvent:3019, @"%@ %@ %@", String, v9, v12, v66, v67 detailsFormat];
LABEL_24:
      a1 = 0;
      goto LABEL_38;
    }
    uint64_t v74 = v11;
    unsigned int v75 = v14;
    uint64_t v17 = [v10 localIdentifier];
    uint64_t v18 = [v10 remoteIdentifier];
    unsigned __int8 v19 = [v17 isEqual:v18];

    if (v19)
    {
      if (v12 && _os_feature_enabled_impl() && v12[11])
      {
        uint64_t v20 = (void *)String;
        [a1 reportEvent:3022, @"%@ %@ %@", String, v9, v12 detailsFormat];
LABEL_10:
        a1 = 0;
        id v11 = v74;
        id v14 = v75;
LABEL_38:

        goto LABEL_39;
      }
      id v11 = v74;
      id v14 = v75;
      if (v74[2](v74, v75))
      {
LABEL_20:
        if (a4 == 4)
        {
          if (v12)
          {
            unsigned int v34 = sub_10015BD9C();
            dispatch_assert_queue_V2(v34);

            unsigned int v35 = sub_100140FAC(v12, @"0");
            int v36 = sub_10015BD9C();
            dispatch_assert_queue_V2(v36);

            uint64_t v37 = sub_1001414DC(v12, @"0");
LABEL_28:
            id v40 = v37;
            uint64_t v72 = v37;
            if (v35 && v37)
            {
              id v41 = objc_alloc((Class)NEIKEv2ConfigurationMessage);
              id v70 = [objc_alloc((Class)NEIKEv2InitiatorTransportIPv6Address) initWithAddress:v40];
              v77[0] = v70;
              id v42 = [objc_alloc((Class)NEIKEv2ResponderTransportIPv6Address) initWithAddress:v35];
              v77[1] = v42;
              +[NSArray arrayWithObjects:v77 count:2];
              id v43 = v35;
              v45 = id v44 = v9;
              id v46 = [v41 initWithWithAttributes:v45];
              [v75 setConfigurationReply:v46];

              id v9 = v44;
              unsigned int v35 = v43;
            }
            goto LABEL_32;
          }
          unsigned int v35 = 0;
          uint64_t v72 = 0;
        }
        else
        {
          unsigned int v35 = 0;
          if (a4 == 3)
          {
            uint64_t v72 = 0;
            if (v12)
            {
              uint64_t v38 = sub_10015BD9C();
              dispatch_assert_queue_V2(v38);

              unsigned int v35 = (void *)sub_1001416EC(v12, @"0");
              int v39 = sub_10015BD9C();
              dispatch_assert_queue_V2(v39);

              uint64_t v37 = sub_1001418A8(v12, @"0");
              goto LABEL_28;
            }
          }
          else
          {
            uint64_t v72 = 0;
          }
        }
LABEL_32:
        BOOL v47 = sub_10011FD1C(v12);
        uint64_t v48 = sub_1000775AC((char *)a1, v47);
        uint64_t v49 = sub_10007DF30(a1);
        if (v49) {
          [v48 addObject:v49];
        }
        unsigned int v50 = [a1 suspendWhenReady:v63, v64, v65, v66, v67];
        if (a4 == 4 && v50)
        {
          id v51 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50901 notifyData:0];
          [v48 addObject:v51];
        }
        [v75 setCustomIKEAuthPrivateNotifies:v48];
        [a1 invalidateIKESessionForClass:a4];
        id v52 = (id *)sub_1000790B8((uint64_t)a1, a4);
        objc_storeStrong(v52, a2);
        sub_100079240(a1, a4);
        uint64_t v20 = (void *)String;
        [a1 reportEvent:3016, @"%@ %@", String, v9 detailsFormat];
        a1 = v75;

        id v14 = v75;
        id v11 = v74;
        goto LABEL_38;
      }
LABEL_23:
      uint64_t v20 = (void *)String;
      [a1 reportEvent:3021, @"%@ %@", String, v9, v65, v66, v67 detailsFormat];
      goto LABEL_24;
    }
    uint64_t v21 = [v10 remoteIdentifier];
    uint64_t v22 = [v10 localIdentifier];
    uint64_t v23 = v9;
    uint64_t v24 = v22;
    uint64_t v71 = v23;
    uint64_t v25 = sub_10013E8A4((uint64_t)NRDLocalDevice, v21, v22, v23);

    uint64_t v26 = (void *)_NRCopyLogObjectForNRUUID();
    if (v25)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        int v28 = (void *)_NRCopyLogObjectForNRUUID();
        id v66 = [a1 copyDescription];
        id v67 = v25->_identity;
        uint64_t v65 = 9140;
        unsigned int v63 = "";
        unsigned int v64 = "-[NRLinkBluetooth respondToIKESession:sessionConfig:dataProtectionClass:validateAuthBlock:]";
        _NRLogWithArgs();
      }
      uint64_t v29 = v25->_nrUUID;

      if (v29)
      {
        id v30 = v25->_nrUUID;
        uint64_t v31 = [a1 nrUUID];
        unsigned __int8 v32 = [(NSUUID *)v30 isEqual:v31];

        if (v32)
        {

          id v11 = v74;
          id v14 = v75;
          id v9 = v71;
          if (v74[2](v74, v75))
          {
            uint64_t v33 = [a1 nrUUID];
            sub_10014AAE4((uint64_t)NRDLocalDevice, v33);

            goto LABEL_20;
          }
          goto LABEL_23;
        }
        id v60 = (void *)_NRCopyLogObjectForNRUUID();
        int v61 = _NRLogIsLevelEnabled();

        id v9 = v71;
        if (v61)
        {
          uint64_t v55 = (void *)_NRCopyLogObjectForNRUUID();
          id v56 = [a1 copyDescription];
          uint64_t v59 = v25->_identity;
          unsigned int v62 = v25->_nrUUID;
          [a1 nrUUID];
          v69 = id v68 = v62;
          id v66 = v56;
          id v67 = v59;
          _NRLogWithArgs();

          id v9 = v71;
          goto LABEL_48;
        }
      }
      else
      {
        unsigned int v57 = (void *)_NRCopyLogObjectForNRUUID();
        int v58 = _NRLogIsLevelEnabled();

        id v9 = v71;
        if (v58)
        {
          uint64_t v55 = (void *)_NRCopyLogObjectForNRUUID();
          id v56 = [a1 copyDescription];
          uint64_t v59 = v25->_identity;
          id v66 = v56;
          id v67 = v59;
          _NRLogWithArgs();
LABEL_48:

          goto LABEL_49;
        }
      }
    }
    else
    {
      int v54 = _NRLogIsLevelEnabled();

      id v9 = v71;
      if (v54)
      {
        uint64_t v55 = (void *)_NRCopyLogObjectForNRUUID();
        id v56 = [a1 copyDescription];
        id v66 = v56;
        _NRLogWithArgs();
LABEL_49:
      }
    }
    uint64_t v20 = (void *)String;
    [a1 reportEvent:3023, @"%@ %@ %@", String, v9, v12, v66, v67, v68, v69 detailsFormat];

    goto LABEL_10;
  }
LABEL_39:

  return a1;
}

void sub_100076950(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 1247);
    if (v2)
    {
      uint64_t v3 = [v2 description];
      [*(id *)(a1 + 1247) setClientQueue:*(void *)(a1 + 8)];
      objc_initWeak(location, (id)a1);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_10007EBA4;
      v35[3] = &unk_1001C6C78;
      objc_copyWeak(&v37, location);
      id v4 = (id)v3;
      id v36 = v4;
      [*(id *)(a1 + 1247) setStateUpdateBlock:v35];
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_10007F174;
      v32[3] = &unk_1001C6CA0;
      objc_copyWeak(&v34, location);
      id v5 = v4;
      id v33 = v5;
      [*(id *)(a1 + 1247) setChildStateUpdateBlock:v32];
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      void v29[2] = sub_10007F2D8;
      v29[3] = &unk_1001C6CC8;
      objc_copyWeak(&v31, location);
      id v6 = v5;
      id v30 = v6;
      [*(id *)(a1 + 1247) setConfigurationUpdateBlock:v29];
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_10007F3B4;
      v26[3] = &unk_1001C6CF0;
      objc_copyWeak(&v28, location);
      id v7 = v6;
      id v27 = v7;
      [*(id *)(a1 + 1247) setTrafficSelectorUpdateBlock:v26];
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_10007F4B4;
      v23[3] = &unk_1001C6D18;
      objc_copyWeak(&v25, location);
      id v8 = v7;
      id v24 = v8;
      [*(id *)(a1 + 1247) setAdditionalAddressesUpdateBlock:v23];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      id v20[2] = sub_10007F590;
      v20[3] = &unk_1001C88B8;
      objc_copyWeak(&v22, location);
      id v9 = v8;
      id v21 = v9;
      [*(id *)(a1 + 1247) setShortDPDEventBlock:v20];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10007F664;
      v17[3] = &unk_1001C6D18;
      objc_copyWeak(&v19, location);
      id v10 = v9;
      id v18 = v10;
      [*(id *)(a1 + 1247) setPrivateNotifyStatusEvent:v17];
      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      LOBYTE(v3) = _NRLogIsLevelEnabled();

      if (v3)
      {
        id v12 = (void *)_NRCopyLogObjectForNRUUID();
        id v15 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
      objc_destroyWeak(&v19);

      objc_destroyWeak(&v22);
      objc_destroyWeak(&v25);

      objc_destroyWeak(&v28);
      objc_destroyWeak(&v31);

      objc_destroyWeak(&v34);
      objc_destroyWeak(&v37);
      objc_destroyWeak(location);
    }
    else
    {
      id v13 = sub_100070988();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v16 = sub_100070988();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_100076E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v20 - 112));
  _Unwind_Resume(a1);
}

void sub_100076E9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v29 = a2;
  id v7 = a3;
  id v8 = a4;
  if ([*(id *)(a1 + 32) state] == 255)
  {
    id v24 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_24;
    }
    id v9 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v20 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  else
  {
    id v9 = sub_1000775AC(*(char **)(a1 + 32), 0);
    if (_os_feature_enabled_impl())
    {
      id v10 = [*(id *)(a1 + 32) nrUUID];
      id v11 = sub_100146410((uint64_t)NRDLocalDevice, v10);

      if (v11)
      {
        id v12 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50351 notifyData:v11];
        [v9 addObject:v12];
      }
    }
    if (v29)
    {
      id v13 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50411 notifyData:v29];
      [v9 addObject:v13];
    }
    if (v7)
    {
      id v14 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50412 notifyData:v7];
      [v9 addObject:v14];
    }
    if (v8)
    {
      id v15 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50413 notifyData:v8];
      [v9 addObject:v15];
    }
    [*(id *)(a1 + 40) setCustomIKEAuthPrivateNotifies:v9];
    if (qword_1001F49E8 != -1) {
      dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      uint64_t v28 = 9397;
      uint64_t v26 = "";
      id v27 = "-[NRLinkBluetooth requestConfigurationForListener:session:sessionConfig:childConfig:validateAuthBlock:respon"
            "seBlock:]_block_invoke";
      _NRLogWithArgs();
    }
    id v16 = *(void **)(a1 + 32);
    uint64_t v17 = [*(id *)(a1 + 40) sharedSecret:v26, v27, v28];
    Loguint64_t String = (void *)_NRKeyCreateLogString();
    [v16 reportEvent:3014 details:LogString];

    id v19 = [*(id *)(a1 + 32) nrUUID];
    uint64_t v20 = sub_10013DC5C((uint64_t)NRDLocalDevice, v19);

    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 48))
    {
      id v23 = sub_10011F1E0();
      [v23 setSequencePerTrafficClass:1];
      [v23 setReplayWindowSize:16];
      (*(void (**)(uint64_t, uint64_t, id, void))(v21 + 16))(v21, v22, v23, 0);
    }
    else
    {
      (*(void (**)(void, void, void, void))(v21 + 16))(*(void *)(a1 + 56), *(void *)(a1 + 40), 0, 0);
    }
  }

LABEL_24:
}

void sub_10007720C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v36 = a4;
  id v11 = a5;
  id v12 = a6;
  if ([*(id *)(a1 + 32) state] == 255)
  {
    id v23 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_23;
    }
    id v16 = (void *)_NRCopyLogObjectForNRUUID();
    id v34 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();

    goto LABEL_22;
  }
  if (a2 && a3 && v36)
  {
    id v13 = (void *)_NRCopyLogObjectForNRUUID();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
      id v15 = (void *)_NRCopyLogObjectForNRUUID();
      id v33 = [*(id *)(a1 + 32) copyDescription];
      uint64_t v35 = *(void *)(a1 + 40);
      uint64_t v32 = 9428;
      id v30 = "";
      id v31 = "-[NRLinkBluetooth requestConfigurationForListener:session:sessionConfig:childConfig:validateAuthBlock:respon"
            "seBlock:]_block_invoke_2";
      _NRLogWithArgs();
    }
    [*(id *)(a1 + 48) setLocalPrivateKeyRef:a3 v30 v31 v32 v33 v35];
    [*(id *)(a1 + 48) setRemotePublicKeyRef:a2];
    id v16 = sub_1000775AC(*(char **)(a1 + 32), 0);
    if (_os_feature_enabled_impl())
    {
      uint64_t v17 = [*(id *)(a1 + 32) nrUUID];
      id v18 = sub_100146410((uint64_t)NRDLocalDevice, v17);

      if (v18)
      {
        id v19 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50351 notifyData:v18];
        [v16 addObject:v19];
      }
    }
    id v20 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50401 notifyData:v36];
    [v16 addObject:v20];

    if (v11)
    {
      id v21 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50402 notifyData:v11];
      [v16 addObject:v21];

      if (v12)
      {
LABEL_13:
        id v22 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50403 notifyData:v12];
        [v16 addObject:v22];

LABEL_18:
        [*(id *)(a1 + 48) setCustomIKEAuthPrivateNotifies:v16];
        [*(id *)(a1 + 32) reportEvent:3012];
        id v25 = [*(id *)(a1 + 32) nrUUID];
        uint64_t v26 = sub_10013DC5C((uint64_t)NRDLocalDevice, v25);

        uint64_t v27 = *(void *)(a1 + 64);
        uint64_t v28 = *(void *)(a1 + 48);
        if (*(void *)(a1 + 56))
        {
          id v29 = sub_10011F1E0();
          [v29 setSequencePerTrafficClass:1];
          [v29 setReplayWindowSize:16];
          (*(void (**)(uint64_t, uint64_t, id, void))(v27 + 16))(v27, v28, v29, 0);
        }
        else
        {
          (*(void (**)(void, void, void, void))(v27 + 16))(*(void *)(a1 + 64), *(void *)(a1 + 48), 0, 0);
        }

LABEL_22:
        goto LABEL_23;
      }
    }
    else
    {
      sub_100077DA8(*(void *)(a1 + 32));
      if (v12) {
        goto LABEL_13;
      }
    }
    sub_100077FDC(*(void *)(a1 + 32));
    goto LABEL_18;
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
LABEL_23:
}

char *sub_1000775AC(char *a1, int a2)
{
  uint64_t v2 = a1;
  if (!a1) {
    return v2;
  }
  LODWORD(v3) = a2;
  id v4 = objc_alloc_init((Class)NSMutableArray);
  LOWORD(v51) = 5632;
  id v5 = [objc_alloc((Class)NSMutableData) initWithBytes:&v51 length:2];
  id v6 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48602 notifyData:v5];
  [v4 addObject:v6];

  if (qword_1001F4B70 != -1) {
    dispatch_once(&qword_1001F4B70, &stru_1001C7C18);
  }
  id v7 = (id)qword_1001F4B68;
  id v8 = [v7 dataUsingEncoding:4];

  id v9 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48603 notifyData:v8];
  [v4 addObject:v9];

  if (qword_1001F4B60 != -1) {
    dispatch_once(&qword_1001F4B60, &stru_1001C7BF8);
  }
  id v10 = (id)qword_1001F4B58;
  id v11 = [v10 dataUsingEncoding:4];

  id v12 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48604 notifyData:v11];
  [v4 addObject:v12];

  if (qword_1001F4BF0 != -1) {
    dispatch_once(&qword_1001F4BF0, &stru_1001C7D68);
  }
  LOBYTE(v51) = byte_1001F4BE8;
  id v13 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:1];
  id v14 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48606 notifyData:v13];
  [v4 addObject:v14];

  id v15 = sub_10011FC08();
  [v4 addObject:v15];

  id v16 = sub_10013DC5C((uint64_t)NRDLocalDevice, *((void **)v2 + 4));
  if (!v16)
  {
    id v39 = sub_100070988();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v41 = sub_100070988();
      _NRLogWithArgs();
    }
    id v4 = (id)_os_log_pack_size();
    uint64_t v2 = (char *)&v50 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    goto LABEL_31;
  }
  uint64_t v17 = v16;
  *(void *)&long long v51 = *((void *)v16 + 17);
  id v18 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:8];
  id v19 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48605 notifyData:v18];

  [v4 addObject:v19];
  self;
  LOBYTE(v51) = 1;
  id v20 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:1];
  id v21 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:51401 notifyData:v20];
  [v4 addObject:v21];

  id v22 = sub_10013DC5C((uint64_t)NRDLocalDevice, *((void **)v2 + 4));
  id v15 = v22;
  if (!v22) {
    goto LABEL_33;
  }
  for (BOOL i = v22[16] != 0; ; BOOL i = 0)
  {
    LOBYTE(v51) = i;
    id v24 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:1];
    id v25 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:51501 notifyData:v24];
    [v4 addObject:v25];

    if (!*(void *)(v2 + 351)) {
      break;
    }
    id v15 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48601 notifyData:*(void *)(v2 + 351)];
    [v4 addObject:v15];

    if (v3)
    {
      uint64_t v26 = sub_10013DC5C((uint64_t)NRDLocalDevice, *((void **)v2 + 4));
      if (!v26)
      {
        id v46 = sub_100070988();
        int v47 = _NRLogIsLevelEnabled();

        if (v47)
        {
          id v48 = sub_100070988();
          _NRLogWithArgs();
        }
        id v4 = (id)_os_log_pack_size();
        uint64_t v2 = (char *)&v50 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
LABEL_31:
        uint64_t v49 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v49 = 136446210;
        *(void *)(v49 + 4) = "-[NRLinkBluetooth copyNotifyPayloadsToSendWithProxy:]";
        goto LABEL_32;
      }
      uint64_t v27 = v26;
      id v15 = sub_10011FDA0(v26, 0);
      [v4 addObject:v15];
    }
    if (!v2[242]) {
      goto LABEL_18;
    }
    uint64_t v28 = sub_10013DC5C((uint64_t)NRDLocalDevice, *((void **)v2 + 4));
    if (v28)
    {
      id v29 = v28;
      long long v51 = 0uLL;
      sub_100141A68(v28, &v51);
      id v30 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:16];
      id v31 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50801 notifyData:v30];
      [v4 addObject:v31];

      long long v51 = 0uLL;
      sub_100142334(v29, &v51);
      id v32 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:16];
      id v33 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50802 notifyData:v32];
      [v4 addObject:v33];

      long long v51 = 0uLL;
      sub_10014B038(v29, &v51);
      id v34 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:16];
      id v35 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50811 notifyData:v34];
      [v4 addObject:v35];

      long long v51 = 0uLL;
      sub_10014AEA4(v29, &v51);
      id v36 = [objc_alloc((Class)NSData) initWithBytes:&v51 length:16];
      id v37 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50812 notifyData:v36];
      [v4 addObject:v37];

LABEL_18:
      uint64_t v2 = (char *)v4;
      goto LABEL_20;
    }
    id v42 = sub_100070988();
    int v43 = _NRLogIsLevelEnabled();

    uint64_t v3 = "-[NRLinkBluetooth copyNotifyPayloadsToSendWithProxy:]";
    if (v43)
    {
      id v44 = sub_100070988();
      _NRLogWithArgs();
    }
    id v4 = (id)_os_log_pack_size();
    uint64_t v2 = (char *)&v50 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v45 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v45 = 136446210;
    *(void *)(v45 + 4) = "-[NRLinkBluetooth copyNotifyPayloadsToSendWithProxy:]";
LABEL_32:
    sub_100070988();
    _NRLogAbortWithPack();
LABEL_33:
    ;
  }
  [v2 cancelWithReason:@"Trying to generate notify payloads but sentPrelude is nil"];
  uint64_t v2 = 0;
LABEL_20:

  return v2;
}

void sub_100077DA8(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 16) == 255)
    {
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v11 = (id)_NRCopyLogObjectForNRUUID();
        id v10 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    else if (*(void *)(a1 + 1295))
    {
      [(id)a1 reportEvent:3402 details:@"ClassC"];
      uint64_t v2 = sub_1000775AC((char *)a1, 0);
      id v3 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50402 notifyData:*(void *)(a1 + 1295)];
      [v2 addObject:v3];
      id v4 = *(void **)(a1 + 1295);
      *(void *)(a1 + 1295) = 0;

      id v5 = *(void **)(a1 + 1247);
      uint64_t v6 = *(void *)(a1 + 8);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10007EA30;
      v12[3] = &unk_1001C6EF0;
      v12[4] = a1;
      [v5 sendPrivateNotifies:v2 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v6 callback:v12];
    }
    else if (!*(unsigned char *)(a1 + 240))
    {
      *(unsigned char *)(a1 + 240) = 1;
      id v9 = *(void **)(a1 + 32);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      _OWORD v13[2] = sub_10007E8D8;
      v13[3] = &unk_1001C6C28;
      v13[4] = a1;
      sub_100147034((uint64_t)NRDLocalDevice, v9, 3, v13);
    }
  }
}

void sub_100077FDC(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 16) != 255)
    {
      uint64_t v2 = [(id)a1 nrUUID];
      id v3 = (unsigned __int16 *)sub_10013DC5C((uint64_t)NRDLocalDevice, v2);

      if (v3 && v3[14] >= 0x13u)
      {
        id v4 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (!IsLevelEnabled)
        {
LABEL_14:

          return;
        }
        uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
        id v14 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
      else
      {
        if (!*(void *)(a1 + 1303))
        {
          if (!*(unsigned char *)(a1 + 241))
          {
            *(unsigned char *)(a1 + 241) = 1;
            id v13 = *(void **)(a1 + 32);
            v18[0] = _NSConcreteStackBlock;
            v18[1] = 3221225472;
            v18[2] = sub_1000782C8;
            v18[3] = &unk_1001C6C28;
            v18[4] = a1;
            sub_100147034((uint64_t)NRDLocalDevice, v13, 1, v18);
          }
          goto LABEL_14;
        }
        [(id)a1 reportEvent:3402 details:@"ClassA"];
        uint64_t v6 = sub_1000775AC((char *)a1, 0);
        id v9 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50403 notifyData:*(void *)(a1 + 1303)];
        [v6 addObject:v9];
        id v10 = *(void **)(a1 + 1303);
        *(void *)(a1 + 1303) = 0;

        id v11 = *(void **)(a1 + 1247);
        uint64_t v12 = *(void *)(a1 + 8);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_100078420;
        v17[3] = &unk_1001C6EF0;
        void v17[4] = a1;
        [v11 sendPrivateNotifies:v6 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v12 callback:v17];
      }
      goto LABEL_14;
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    int v8 = _NRLogIsLevelEnabled();

    if (v8)
    {
      id v16 = (id)_NRCopyLogObjectForNRUUID();
      id v15 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_1000782C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v17 = a6;
  if ([*(id *)(a1 + 32) state] == 255)
  {
    id v10 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
      id v16 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else if (v17)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      objc_storeStrong((id *)(v8 + 1303), a6);
      uint64_t v9 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v9 = 0;
    }
    sub_100077FDC(v9);
  }
  else
  {
    id v13 = sub_100070988();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
      id v15 = sub_100070988();
      _NRLogWithArgs();
    }
  }
}

void sub_100078420(uint64_t a1, int a2)
{
  id v4 = (void *)_NRCopyLogObjectForNRUUID();
  if (a2)
  {
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v9 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
    id v7 = *(unsigned __int8 **)(a1 + 32);
    if (v7)
    {
      sub_100078594(v7, 1, 0, 0);
    }
  }
  else
  {
    int v8 = _NRLogIsLevelEnabled();

    if (v8)
    {
      id v11 = (id)_NRCopyLogObjectForNRUUID();
      id v10 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_100078594(unsigned __int8 *a1, uint64_t a2, int a3, int a4)
{
  id String = (id)NRDataProtectionClassCreateString();
  if (a1[16] == 255)
  {
    id v10 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  [a1 invalidateIKESessionForClass:a2];
  if (a2 != 4 && a3 && !a1[236])
  {
    id v16 = (void *)_NRCopyLogObjectForNRUUID();
    int v17 = _NRLogIsLevelEnabled();

    if (!v17) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (a2 == 1 && a1[235])
  {
    int v8 = (void *)_NRCopyLogObjectForNRUUID();
    int v9 = _NRLogIsLevelEnabled();

    if (!v9) {
      goto LABEL_20;
    }
LABEL_19:
    id v18 = (void *)_NRCopyLogObjectForNRUUID();
    id v19 = [a1 copyDescription];
    _NRLogWithArgs();

    goto LABEL_20;
  }
  uint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
  int v13 = _NRLogIsLevelEnabled();

  if (v13)
  {
    int v14 = (void *)_NRCopyLogObjectForNRUUID();
    id v31 = [a1 copyDescription];
    id v32 = String;
    uint64_t v30 = 9023;
    uint64_t v28 = "";
    id v29 = "-[NRLinkBluetooth restartIKESessionForDataProtectionClass:authFailure:afterDisconnection:]";
    _NRLogWithArgs();
  }
  sub_1000789C4(a1, a2);
  if (a4 && a1[242])
  {
    if (a2 == 4)
    {
      id v15 = &OBJC_IVAR___NRLinkBluetooth__reconnectionTimerStartedClassD;
    }
    else
    {
      if (a2 != 3) {
        goto LABEL_20;
      }
      id v15 = &OBJC_IVAR___NRLinkBluetooth__reconnectionTimerStartedClassC;
    }
    id v20 = &a1[*v15];
    if (!*v20)
    {
      id v21 = (void *)NRDataProtectionClassCreateString();
      id v22 = (void *)_NRCopyLogObjectForNRUUID();
      int v23 = _NRLogIsLevelEnabled();

      if (v23)
      {
        id v24 = (void *)_NRCopyLogObjectForNRUUID();
        id v31 = [a1 copyDescription];
        id v32 = v21;
        uint64_t v30 = 9049;
        uint64_t v28 = "";
        id v29 = "-[NRLinkBluetooth startReconnectionTimer:]";
        _NRLogWithArgs();
      }
      *id v20 = 1;
      [a1 setPowerAssertionState:1, v28, v29, v30, v31, v32];
      objc_initWeak(&location, a1);
      dispatch_time_t v25 = dispatch_time(0x8000000000000000, 10000000000);
      uint64_t v26 = [a1 queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100079038;
      block[3] = &unk_1001C6D90;
      objc_copyWeak(v36, &location);
      v36[1] = v20;
      id v35 = v21;
      id v27 = v21;
      dispatch_after(v25, v26, block);

      objc_destroyWeak(v36);
      objc_destroyWeak(&location);
    }
  }
LABEL_20:
}

void sub_1000789B0(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_1000789C4(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 242))
  {
    id v4 = (id *)sub_1000790B8(a1, a2);
    if (!*v4)
    {
      id v5 = v4;
      id String = (void *)NRDataProtectionClassCreateString();
      if (*(unsigned __int8 *)(a1 + 16) == 255)
      {
        id v11 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (!IsLevelEnabled)
        {
LABEL_42:

          return;
        }
        int v8 = (void *)_NRCopyLogObjectForNRUUID();
        id v57 = [(id)a1 copyDescription];
        _NRLogWithArgs();

        goto LABEL_41;
      }
      id v7 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 32));
      int v8 = v7;
      if (!v7)
      {
        int v47 = (void *)_NRCopyLogObjectForNRUUID();
        int v48 = _NRLogIsLevelEnabled();

        if (!v48) {
          goto LABEL_41;
        }
        goto LABEL_19;
      }
      if (a2 == 1)
      {
        if (*((unsigned __int16 *)v7 + 14) > 0x12u)
        {
          int v9 = (void *)_NRCopyLogObjectForNRUUID();
          int v10 = _NRLogIsLevelEnabled();

          if (v10) {
            goto LABEL_19;
          }
          goto LABEL_41;
        }
        id v13 = v7[11];
      }
      else
      {
        id v13 = sub_10013EF3C(v7, a2);
      }
      id v14 = v13;

      if (!v14)
      {
        dispatch_time_t v25 = (void *)_NRCopyLogObjectForNRUUID();
        int v26 = _NRLogIsLevelEnabled();

        if (v26)
        {
LABEL_19:
          id v27 = (void *)_NRCopyLogObjectForNRUUID();
          id v28 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
LABEL_41:

        goto LABEL_42;
      }
      id v15 = sub_10011F560(1, v8, a2);
      id v60 = v15;
      if (a2 != 1)
      {
        id v16 = +[NWAddressEndpoint endpointWithHostname:@"::" port:@"0"];
        id v17 = objc_alloc((Class)NEIKEv2ConfigurationMessage);
        id v18 = [objc_alloc((Class)NEIKEv2InitiatorTransportIPv6Address) initWithAddress:v16];
        v61[0] = v18;
        id v19 = [objc_alloc((Class)NEIKEv2ResponderTransportIPv6Address) initWithAddress:v16];
        v61[1] = v19;
        id v20 = +[NSArray arrayWithObjects:v61 count:2];
        id v21 = [v17 initWithWithAttributes:v20];
        [v60 setConfigurationRequest:v21];

        id v15 = v60;
      }
      id v22 = [v15 customIKEAuthPrivateNotifies];

      if (v22)
      {
        int v23 = [v15 customIKEAuthPrivateNotifies];
        id v24 = [v23 mutableCopy];
      }
      else
      {
        id v24 = objc_alloc_init((Class)NSMutableArray);
      }
      unsigned int v29 = [(id)a1 suspendWhenReady];
      if (a2 == 4 && v29)
      {
        id v30 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50901 notifyData:0];
        [v24 addObject:v30];
      }
      if ([v24 count]) {
        [v15 setCustomIKEAuthPrivateNotifies:v24];
      }
      id v31 = v15;
      id v32 = [objc_alloc((Class)NSString) initWithFormat:@"terminusIKE-Bluetooth-%@", String];
      id v33 = sub_10011EF54();
      sub_10011EC44(v8, v33);
      id v34 = sub_10011F1E0();
      [v34 setSequencePerTrafficClass:1];
      [v34 setReplayWindowSize:16];
      sub_10011EDEC(v8, v34);
      id v35 = [objc_alloc((Class)NEIKEv2Session) initWithIKEConfig:v33 firstChildConfig:v34 sessionConfig:v31 queue:*(void *)(a1 + 8) ipsecInterface:*(void *)(a1 + 56) ikeSocketHandler:0 kernelSASessionName:v32 packetDelegate:a1];
      id v36 = *v5;
      *id v5 = v35;

      if (!*v5)
      {
        uint64_t v49 = (void *)_NRCopyLogObjectForNRUUID();
        int v50 = _NRLogIsLevelEnabled();

        if (v50)
        {
          long long v51 = (void *)_NRCopyLogObjectForNRUUID();
          id v53 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        goto LABEL_40;
      }
      [(id)a1 reportEvent:3015, @"%@ %@", String, *v5 detailsFormat];
      sub_100079240((void *)a1, a2);
      if (a2 == 4)
      {
        uint64_t v37 = mach_absolute_time();
        uint64_t v38 = *(void *)(a1 + 1863);
        if (v38)
        {
          *(void *)(v38 + 48) = v37;
          id v39 = (char *)*(id *)(a1 + 1863);
          if (v39)
          {
            id v40 = &OBJC_IVAR___NRAnalyticsCmpnLink__ikeClassDAttempts;
LABEL_35:
            ++*(void *)&v39[*v40];
            goto LABEL_36;
          }
          goto LABEL_36;
        }
      }
      else
      {
        if (a2 != 3)
        {
LABEL_37:
          int v43 = (void *)_NRCopyLogObjectForNRUUID();
          int v44 = _NRLogIsLevelEnabled();

          if (v44)
          {
            uint64_t v45 = (void *)_NRCopyLogObjectForNRUUID();
            id v46 = [(id)a1 copyDescription];
            int v58 = String;
            id v59 = *v5;
            uint64_t v55 = 8948;
            id v56 = v46;
            id v52 = "";
            int v54 = "-[NRLinkBluetooth setupIPsecInitiatorIfNecessary:]";
            _NRLogWithArgs();
          }
          [*v5 connect:v52, v54, v55, v56, v58, v59];
LABEL_40:

          goto LABEL_41;
        }
        uint64_t v41 = mach_absolute_time();
        uint64_t v42 = *(void *)(a1 + 1863);
        if (v42)
        {
          *(void *)(v42 + 32) = v41;
          id v39 = (char *)*(id *)(a1 + 1863);
          if (v39)
          {
            id v40 = &OBJC_IVAR___NRAnalyticsCmpnLink__ikeClassCAttempts;
            goto LABEL_35;
          }
LABEL_36:

          goto LABEL_37;
        }
      }
      id v39 = 0;
      goto LABEL_36;
    }
  }
}

void sub_100079038(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v10 = WeakRetained;
    BOOL v3 = [WeakRetained state] == 255;
    id WeakRetained = v10;
    if (!v3)
    {
      if (**(unsigned char **)(a1 + 48))
      {
        sub_100074894(v10, @"%@ reconnection timed out", v4, v5, v6, v7, v8, v9, *(void *)(a1 + 32));
        id WeakRetained = v10;
      }
    }
  }
}

uint64_t sub_1000790B8(uint64_t result, int a2)
{
  if (result)
  {
    switch(a2)
    {
      case 1:
        uint64_t v2 = &OBJC_IVAR___NRLinkBluetooth__ikeSessionClassA;
        goto LABEL_8;
      case 4:
        uint64_t v2 = &OBJC_IVAR___NRLinkBluetooth__ikeSessionClassD;
        goto LABEL_8;
      case 3:
        uint64_t v2 = &OBJC_IVAR___NRLinkBluetooth__ikeSessionClassC;
LABEL_8:
        result += *v2;
        return result;
    }
    id v3 = sub_100070988();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = sub_100070988();
      id String = (void *)NRDataProtectionClassCreateString();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v6 = _os_log_pack_fill();
    uint64_t v7 = NRDataProtectionClassCreateString();
    *(_DWORD *)uint64_t v6 = 136446466;
    *(void *)(v6 + 4) = "-[NRLinkBluetooth ikeSessionPointerForDataProtectionClass:]";
    *(_WORD *)(v6 + 12) = 2112;
    *(void *)(v6 + 14) = v7;
    sub_100070988();
    uint64_t v8 = _NRLogAbortWithPack();
    return sub_100079240(v8);
  }
  return result;
}

void sub_100079240(void *a1, int a2)
{
  id String = (void *)NRDataProtectionClassCreateString();
  if (a2 == 1)
  {
    id v5 = *(void **)((char *)a1 + 1239);
    if (v5) {
      goto LABEL_11;
    }
    id v8 = sub_100070988();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_23;
    }
LABEL_20:
    id v23 = 0;
    goto LABEL_21;
  }
  if (a2 == 3)
  {
    id v5 = *(void **)((char *)a1 + 1231);
    if (!v5)
    {
      id v27 = sub_100070988();
      int v28 = _NRLogIsLevelEnabled();

      if (v28)
      {
LABEL_23:
        id v29 = sub_100070988();
        _NRLogWithArgs();

        id v23 = 0;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    goto LABEL_11;
  }
  if (a2 != 4)
  {
    if (qword_1001F49E8 != -1) {
      dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      _NRLogWithArgs();
    }
    goto LABEL_20;
  }
  id v5 = *(void **)((char *)a1 + 1223);
  if (!v5)
  {
    id v6 = sub_100070988();
    int v7 = _NRLogIsLevelEnabled();

    if (v7) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }
LABEL_11:
  id v10 = v5;
  [v10 setClientQueue:a1[1]];
  objc_initWeak(location, a1);
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472;
  v58[2] = sub_10007990C;
  v58[3] = &unk_1001C6BD8;
  objc_copyWeak(&v62, location);
  char v63 = a2;
  id v11 = String;
  id v59 = v11;
  id v12 = v10;
  id v60 = v12;
  int v61 = a1;
  [v12 setStateUpdateBlock:v58];
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472;
  id v53[2] = sub_10007A4C4;
  v53[3] = &unk_1001C7320;
  objc_copyWeak(&v56, location);
  id v13 = v11;
  id v54 = v13;
  id v14 = v12;
  id v55 = v14;
  char v57 = a2;
  [v14 setChildStateUpdateBlock:v53];
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  void v49[2] = sub_10007A6B8;
  v49[3] = &unk_1001C7348;
  objc_copyWeak(&v52, location);
  id v15 = v13;
  id v50 = v15;
  id v16 = v14;
  id v51 = v16;
  [v16 setConfigurationUpdateBlock:v49];
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472;
  v45[2] = sub_10007A798;
  void v45[3] = &unk_1001C7370;
  objc_copyWeak(&v48, location);
  id v17 = v15;
  id v46 = v17;
  id v18 = v16;
  id v47 = v18;
  [v18 setTrafficSelectorUpdateBlock:v45];
  id v31 = String;
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_10007A898;
  uint64_t v41[3] = &unk_1001C7398;
  objc_copyWeak(&v44, location);
  id v19 = v17;
  id v42 = v19;
  id v20 = v18;
  id v43 = v20;
  [v20 setAdditionalAddressesUpdateBlock:v41];
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_10007A978;
  id v37[3] = &unk_1001C79B0;
  objc_copyWeak(&v40, location);
  id v21 = v19;
  id v38 = v21;
  id v22 = v20;
  id v39 = v22;
  [v22 setShortDPDEventBlock:v37];
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_10007AA4C;
  v32[3] = &unk_1001C6C00;
  objc_copyWeak(&v35, location);
  id v33 = v21;
  id v23 = v22;
  id v34 = v23;
  char v36 = a2;
  [v23 setPrivateNotifyStatusEvent:v32];
  id v24 = (void *)_NRCopyLogObjectForNRUUID();
  char v25 = _NRLogIsLevelEnabled();

  if (v25)
  {
    int v26 = (void *)_NRCopyLogObjectForNRUUID();
    id v30 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  objc_destroyWeak(&v35);

  objc_destroyWeak(&v40);
  objc_destroyWeak(&v44);

  objc_destroyWeak(&v48);
  objc_destroyWeak(&v52);

  objc_destroyWeak(&v56);
  objc_destroyWeak(&v62);
  objc_destroyWeak(location);

  id String = v31;
LABEL_21:
}

void sub_10007988C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *location, id *a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(location);
  objc_destroyWeak(a17);
  objc_destroyWeak((id *)(v22 - 112));
  _Unwind_Resume(a1);
}

void sub_10007990C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 56));
  int v7 = WeakRetained;
  if (WeakRetained)
  {
    id v8 = [WeakRetained linkDelegate];
    if (v5)
    {
      int v9 = *(unsigned __int8 *)(a1 + 64);
      if (v9 == 1)
      {
        sub_10007DB18(v7);
        goto LABEL_18;
      }
      if (v9 == 3)
      {
        [v7 setIkeClassCEstablished:0];
        uint64_t v10 = mach_absolute_time();
        uint64_t v11 = *(void *)(v7 + 1863);
        if (!v11) {
          goto LABEL_18;
        }
        uint64_t v12 = 40;
      }
      else
      {
        if (v9 != 4
          || ([v7 setIkeClassDEstablished:0],
              uint64_t v10 = mach_absolute_time(),
              (uint64_t v11 = *(void *)(v7 + 1863)) == 0))
        {
LABEL_18:
          uint64_t v21 = *(void *)(a1 + 32);
          uint64_t v22 = *(void *)(a1 + 40);
          SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
          [v7 reportEvent:3018, @"%@ session %@ got IKE error %@ with state %@", v21, v22, v5, SessionStateString detailsFormat];

          [v7 processIKEDisconnection:*(unsigned __int8 *)(a1 + 64) error:v5];
          if ([v7 state] != 255)
          {
            id v24 = v5;
            if ([v24 code] == (id)24)
            {
              uint64_t v25 = NEIKEv2ProtocolErrorDomain;
              int v26 = [v24 domain];
              LOBYTE(v25) = [v26 isEqualToString:v25];

              if (v25) {
                goto LABEL_25;
              }
            }
            else
            {
            }
            id v27 = v24;
            if ([v27 code] == (id)8)
            {
              uint64_t v28 = NEIKEv2ErrorDomain;
              id v29 = [v27 domain];
              LODWORD(v28) = [v29 isEqualToString:v28];

              if (v28)
              {
LABEL_25:
                int v30 = 1;
                goto LABEL_28;
              }
            }
            else
            {
            }
            int v30 = 0;
LABEL_28:
            uint64_t v31 = *(unsigned __int8 *)(a1 + 64);
            id v32 = (unsigned __int8 *)v7;
LABEL_29:
            sub_100078594(v32, v31, v30, 1);
          }
LABEL_30:

          goto LABEL_31;
        }
        uint64_t v12 = 56;
      }
      *(void *)(v11 + v12) = v10;
      goto LABEL_18;
    }
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    id v15 = (void *)NEIKEv2CreateSessionStateString();
    [v7 reportEvent:3009, @"%@ session %@ changed state to %@", v13, v14, v15 detailsFormat];

    switch(a2)
    {
      case 1:
        int v16 = v7[16];
        if (v16 == 5)
        {
          id v46 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (!IsLevelEnabled) {
            goto LABEL_30;
          }
        }
        else
        {
          if (v16 == 4)
          {
            id v17 = (void *)_NRCopyLogObjectForNRUUID();
            int v18 = _NRLogIsLevelEnabled();

            if (v18)
            {
              id v19 = (void *)_NRCopyLogObjectForNRUUID();
              id v20 = [v7 copyDescription];
              uint64_t v87 = *(void *)(a1 + 32);
              uint64_t v88 = *(void *)(a1 + 40);
              uint64_t v85 = 8055;
              id v86 = v20;
              uint64_t v83 = "";
              id v84 = "-[NRLinkBluetooth setupIKECallbacks:]_block_invoke";
              _NRLogWithArgs();
            }
            [v7 changeStateTo:5 v83, v84, v85, v86, v87, v88];
            goto LABEL_30;
          }
          id v48 = (void *)_NRCopyLogObjectForNRUUID();
          int v49 = _NRLogIsLevelEnabled();

          if (!v49) {
            goto LABEL_30;
          }
        }
        id v50 = (void *)_NRCopyLogObjectForNRUUID();
        id v51 = [v7 copyDescription];
        _NRLogWithArgs();

        goto LABEL_30;
      case 2:
        int v40 = *(unsigned __int8 *)(a1 + 64);
        if (v40 == 4)
        {
          [v7 setIkeClassDEstablished:1];
          uint64_t v52 = mach_absolute_time();
          uint64_t v53 = *(void *)(v7 + 1863);
          if (v53) {
            *(void *)(v53 + 56) = v52;
          }
          if (v7[238])
          {
            id v54 = (void *)_NRCopyLogObjectForNRUUID();
            int v55 = _NRLogIsLevelEnabled();

            if (v55)
            {
              id v56 = (void *)_NRCopyLogObjectForNRUUID();
              id v86 = [v7 copyDescription];
              uint64_t v87 = *(void *)(a1 + 32);
              uint64_t v85 = 8077;
              uint64_t v83 = "";
              id v84 = "-[NRLinkBluetooth setupIKECallbacks:]_block_invoke";
              _NRLogWithArgs();
            }
            v7[238] = 0;
            if (!v7[239]) {
              [v7 setPowerAssertionState:0];
            }
          }
          id v57 = sub_100158A70();
          if (!sub_100159620((BOOL)v57) && !v7[237])
          {
            uint64_t v58 = *(void *)(a1 + 48);
            if (v58) {
              *(unsigned char *)(v58 + 237) = 1;
            }
            objc_initWeak(location, v7);
            v89[0] = _NSConcreteStackBlock;
            v89[1] = 3221225472;
            void v89[2] = sub_10007DD9C;
            v89[3] = &unk_1001C7FF0;
            objc_copyWeak(&v90, location);
            sub_10015969C((uint64_t)v57, v89);
            objc_destroyWeak(&v90);
            objc_destroyWeak(location);
          }
        }
        else if (v40 == 3)
        {
          [v7 setIkeClassCEstablished:1];
          uint64_t v41 = mach_absolute_time();
          uint64_t v42 = *(void *)(v7 + 1863);
          if (v42) {
            *(void *)(v42 + 40) = v41;
          }
          if (v7[239])
          {
            id v43 = (void *)_NRCopyLogObjectForNRUUID();
            int v44 = _NRLogIsLevelEnabled();

            if (v44)
            {
              uint64_t v45 = (void *)_NRCopyLogObjectForNRUUID();
              id v86 = [v7 copyDescription];
              uint64_t v87 = *(void *)(a1 + 32);
              uint64_t v85 = 8067;
              uint64_t v83 = "";
              id v84 = "-[NRLinkBluetooth setupIKECallbacks:]_block_invoke";
              _NRLogWithArgs();
            }
            v7[239] = 0;
            if (!v7[238]) {
              [v7 setPowerAssertionState:0];
            }
          }
        }
        switch(v7[16])
        {
          case 5:
            id v59 = (void *)_NRCopyLogObjectForNRUUID();
            int v60 = _NRLogIsLevelEnabled();

            if (v60)
            {
              int v61 = (void *)_NRCopyLogObjectForNRUUID();
              id v62 = [v7 copyDescription];
              uint64_t v87 = *(void *)(a1 + 32);
              uint64_t v88 = *(void *)(a1 + 40);
              uint64_t v85 = 8123;
              id v86 = v62;
              uint64_t v83 = "";
              id v84 = "-[NRLinkBluetooth setupIKECallbacks:]_block_invoke";
              _NRLogWithArgs();
            }
            [v7 changeStateTo:6 v83 v84 v85 v86 v87 v88];
            break;
          case 6:
            char v63 = (void *)_NRCopyLogObjectForNRUUID();
            int v64 = _NRLogIsLevelEnabled();

            if (v64)
            {
              uint64_t v65 = (void *)_NRCopyLogObjectForNRUUID();
              id v66 = [v7 copyDescription];
              uint64_t v87 = *(void *)(a1 + 32);
              uint64_t v88 = *(void *)(a1 + 40);
              uint64_t v85 = 8135;
              id v86 = v66;
              uint64_t v83 = "";
              id v84 = "-[NRLinkBluetooth setupIKECallbacks:]_block_invoke";
              goto LABEL_84;
            }
            break;
          case 7:
            id v67 = (void *)_NRCopyLogObjectForNRUUID();
            int v68 = _NRLogIsLevelEnabled();

            if (v68)
            {
              uint64_t v69 = (void *)_NRCopyLogObjectForNRUUID();
              id v70 = [v7 copyDescription];
              uint64_t v87 = *(void *)(a1 + 32);
              uint64_t v88 = *(void *)(a1 + 40);
              uint64_t v85 = 8127;
              id v86 = v70;
              _NRLogWithArgs();
            }
            [v7 changeStateTo:8, @"(%@ IKE %@ connected after received first notify)", *(void *)(a1 + 32), *(void *)(a1 + 40), v85, v86, v87, v88 detailsFormat];
            [v8 linkIsReady:v7];
            [v7 checkProxyAgentWithForceUpdate:0];
            break;
          case 8:
            uint64_t v71 = (void *)_NRCopyLogObjectForNRUUID();
            int v72 = _NRLogIsLevelEnabled();

            if (v72)
            {
              uint64_t v73 = (void *)_NRCopyLogObjectForNRUUID();
              id v74 = [v7 copyDescription];
              uint64_t v87 = *(void *)(a1 + 32);
              uint64_t v88 = *(void *)(a1 + 40);
              uint64_t v85 = 8137;
              id v86 = v74;
              uint64_t v83 = "";
              id v84 = "-[NRLinkBluetooth setupIKECallbacks:]_block_invoke";
              _NRLogWithArgs();
            }
            [v8 linkIsReady:v7, v83, v84, v85, v86, v87, v88];
            break;
          default:
            unsigned int v75 = (void *)_NRCopyLogObjectForNRUUID();
            int v76 = _NRLogIsLevelEnabled();

            if (v76)
            {
              uint64_t v65 = (void *)_NRCopyLogObjectForNRUUID();
              id v66 = [v7 copyDescription];
              uint64_t v87 = *(void *)(a1 + 32);
              uint64_t v88 = *(void *)(a1 + 40);
              uint64_t v85 = 8140;
              id v86 = v66;
              uint64_t v83 = "";
              id v84 = "-[NRLinkBluetooth setupIKECallbacks:]_block_invoke";
LABEL_84:
              _NRLogWithArgs();
            }
            break;
        }
        if (!v7[242])
        {
          uint64_t v77 = sub_1000775AC(v7, 0);
          uint64_t v78 = sub_10007DF30(v7);
          if (v78) {
            [v77 addObject:v78];
          }
          objc_initWeak(&from, v7);
          unsigned int v79 = *(void **)(v7 + 1223);
          int v80 = [v7 queue];
          location[0] = _NSConcreteStackBlock;
          location[1] = (id)3221225472;
          id location[2] = sub_10007E10C;
          location[3] = &unk_1001C7A00;
          objc_copyWeak(&v92, &from);
          [v79 sendPrivateNotifies:v77 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v80 callback:location];

          objc_destroyWeak(&v92);
          objc_destroyWeak(&from);
        }
        int v81 = *(unsigned __int8 *)(a1 + 64);
        uint64_t v82 = [v7 nrUUID:v83, v84, v85, v86, v87, v88];
        sub_100144350((uint64_t)NRDLocalDevice, v81, v82);

        goto LABEL_30;
      case 3:
        int v33 = *(unsigned __int8 *)(a1 + 64);
        switch(v33)
        {
          case 1:
            sub_10007DB18(v7);
            break;
          case 3:
            [v7 setIkeClassCEstablished:0];
            uint64_t v34 = mach_absolute_time();
            uint64_t v35 = *(void *)(v7 + 1863);
            if (v35)
            {
              uint64_t v36 = 40;
LABEL_72:
              *(void *)(v35 + v36) = v34;
            }
            break;
          case 4:
            [v7 setIkeClassDEstablished:0];
            uint64_t v34 = mach_absolute_time();
            uint64_t v35 = *(void *)(v7 + 1863);
            if (!v35) {
              break;
            }
            uint64_t v36 = 56;
            goto LABEL_72;
          default:
            break;
        }
        [v7 reportEvent:3018, @"%@ session %@ got IKE Disconnected state with no error", *(void *)(a1 + 32), *(void *)(a1 + 40) detailsFormat];
        uint64_t v31 = *(unsigned __int8 *)(a1 + 64);
        id v32 = (unsigned __int8 *)v7;
        int v30 = 0;
        goto LABEL_29;
      case 4:
        [v7 cancelWithReason:@"%@ session %@ got unexpected MOBIKE state", *(void *)(a1 + 32), *(void *)(a1 + 40)];
        goto LABEL_30;
      default:
        uint64_t v37 = *(void *)(a1 + 32);
        uint64_t v38 = *(void *)(a1 + 40);
        id v39 = (void *)NEIKEv2CreateSessionStateString();
        [v7 cancelWithReason:@"%@ session %@ got bad IKE state %@", v37, v38, v39];

        goto LABEL_30;
    }
  }
LABEL_31:
}

void sub_10007A46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007A4C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v23 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (!v23)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      if (a3 != 3)
      {
        SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
        [WeakRetained reportEvent:3009, @"%@ session %@ child %u state update %@", v14, v15, a2, SessionStateString detailsFormat];

        goto LABEL_18;
      }
      [WeakRetained reportEvent:3018, @"%@ session %@ got child %u Disconnected state with no error", v14, *(void *)(a1 + 40), a2 detailsFormat];
      uint64_t v16 = *(unsigned __int8 *)(a1 + 56);
      id v17 = (unsigned __int8 *)WeakRetained;
      int v18 = 0;
      goto LABEL_17;
    }
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = (void *)NEIKEv2CreateSessionStateString();
    [WeakRetained reportEvent:3018, @"%@ session %@ got child %u state update %@ error %@", v8, v9, a2, v10, v23 detailsFormat];

    [WeakRetained processIKEDisconnection:*(unsigned __int8 *)(a1 + 56) error:v23];
    if ([WeakRetained state] == 255) {
      goto LABEL_18;
    }
    id v11 = v23;
    if ([v11 code] == (id)24)
    {
      uint64_t v12 = NEIKEv2ProtocolErrorDomain;
      uint64_t v13 = [v11 domain];
      LOBYTE(v12) = [v13 isEqualToString:v12];

      if (v12) {
        goto LABEL_12;
      }
    }
    else
    {
    }
    id v19 = v11;
    if ([v19 code] == (id)8)
    {
      uint64_t v20 = NEIKEv2ErrorDomain;
      uint64_t v21 = [v19 domain];
      LODWORD(v20) = [v21 isEqualToString:v20];

      if (v20)
      {
LABEL_12:
        int v18 = 1;
LABEL_16:
        uint64_t v16 = *(unsigned __int8 *)(a1 + 56);
        id v17 = (unsigned __int8 *)WeakRetained;
LABEL_17:
        sub_100078594(v17, v16, v18, 1);
        goto LABEL_18;
      }
    }
    else
    {
    }
    int v18 = 0;
    goto LABEL_16;
  }
LABEL_18:
}

void sub_10007A6B8(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10007A798(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v12 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v10 = (void *)_NRCopyLogObjectForNRUUID();
      id v11 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10007A898(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10007A978(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    id WeakRetained = v6;
    if (IsLevelEnabled)
    {
      uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
      id v5 = [v6 copyDescription];
      _NRLogWithArgs();

      id WeakRetained = v6;
    }
  }
}

void sub_10007AA4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v5 = [v3 sortedArrayUsingComparator:&stru_1001C7DE8];
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      id v9 = [WeakRetained copyDescription];
      uint64_t v23 = *(void *)(a1 + 40);
      id v24 = v5;
      id v21 = v9;
      uint64_t v22 = *(void *)(a1 + 32);
      id v19 = "-[NRLinkBluetooth setupIKECallbacks:]_block_invoke_9";
      uint64_t v20 = 8260;
      int v18 = "";
      _NRLogWithArgs();
    }
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v10 = v5;
    id v11 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v26;
      do
      {
        for (BOOL i = 0; i != v12; BOOL i = (char *)i + 1)
        {
          if (*(void *)v26 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          int v16 = [v15 notifyStatus:v18, v19, v20, v21, v22, v23, v24];
          id v17 = [v15 notifyData];
          sub_10007AC3C((uint64_t)WeakRetained, v16, v17, *(unsigned __int8 *)(a1 + 56));
        }
        id v12 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v12);
    }
  }
}

void sub_10007AC3C(uint64_t a1, int a2, void *a3, int a4)
{
  id v8 = a3;
  int v9 = *(unsigned __int8 *)(a1 + 16);
  id p_cache = (id)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (v9 == 255)
  {
    if (IsLevelEnabled)
    {
LABEL_11:
      uint64_t v15 = (void *)_NRCopyLogObjectForNRUUID();
      id v16 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    if (IsLevelEnabled)
    {
      id v12 = (void *)_NRCopyLogObjectForNRUUID();
      id p_cache = [(id)a1 copyDescription];
      id v162 = [v8 length];
      _NRLogWithArgs();
    }
    if (a2 == 50901 && a4 == 4)
    {
      [(id)a1 setSuspendWhenReady:1];
      goto LABEL_12;
    }
    if (a2 != 50000)
    {
LABEL_12:
      id v17 = [(id)a1 linkDelegate];
      int v18 = *(unsigned __int8 *)(a1 + 16);
      if ((v18 - 5) <= 1)
      {
        if (v18 == 5)
        {
          [(id)a1 changeStateTo:7];
        }
        else if (v18 == 6)
        {
          [(id)a1 changeStateTo:8 details:@"(IKE received first notify after connected)"];
          [v17 linkIsReady:a1];
          [(id)a1 checkProxyAgentWithForceUpdate:0];
        }
      }
      if (a2 <= 50500)
      {
        if (a2 <= 50350)
        {
          switch(a2)
          {
            case 48601:
              if (([v8 isEqual:*(void *)(a1 + 359)] & 1) == 0)
              {
                [(id)a1 cancelWithReason:@"Received encrypted payload %@ does not match unencrypted %@", v8, *(void *)(a1 + 359)];
                goto LABEL_129;
              }
              id v19 = (void *)_NRCopyLogObjectForNRUUID();
              int v20 = _NRLogIsLevelEnabled();

              if (!v20) {
                goto LABEL_129;
              }
              goto LABEL_126;
            case 48602:
              LOWORD(location) = 0;
              if ((unint64_t)[v8 length] <= 1)
              {
                [(id)a1 cancelWithReason:@"Private notify Terminus Version too short %@", v8, v162];
                goto LABEL_129;
              }
              [v8 getBytes:&location length:2];
              uint64_t v4 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
              *(_WORD *)(a1 + 261) = bswap32((unsigned __int16)location) >> 16;
              uint64_t v65 = (void *)_NRCopyLogObjectForNRUUID();
              int v66 = _NRLogIsLevelEnabled();

              if (v66)
              {
                id v67 = (void *)_NRCopyLogObjectForNRUUID();
                id v150 = [(id)a1 copyDescription];
                _NRLogWithArgs();
              }
              id p_cache = &OBJC_METACLASS___NRDiscoveryManager.cache;
              int v68 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 32));
              uint64_t v69 = v68;
              if (v68)
              {
                unsigned int v70 = *((unsigned __int16 *)v68 + 14);
                goto LABEL_86;
              }
              goto LABEL_178;
            case 48603:
              id v54 = [objc_alloc((Class)NSString) initWithData:v8 encoding:4];
              sub_10007CEF4(a1, v54);

              int v55 = (void *)_NRCopyLogObjectForNRUUID();
              int v56 = _NRLogIsLevelEnabled();

              if (v56)
              {
                id v57 = (void *)_NRCopyLogObjectForNRUUID();
                id v148 = [(id)a1 copyDescription];
                _NRLogWithArgs();
              }
              id v58 = *(id *)(a1 + 343);
              id v59 = [(id)a1 nrUUID];
              sub_10014A164((uint64_t)NRDLocalDevice, v58, v59);

              goto LABEL_129;
            case 48604:
              id v60 = [objc_alloc((Class)NSString) initWithData:v8 encoding:4];
              int v61 = (void *)_NRCopyLogObjectForNRUUID();
              int v62 = _NRLogIsLevelEnabled();

              if (v62)
              {
                char v63 = (void *)_NRCopyLogObjectForNRUUID();
                id v149 = [(id)a1 copyDescription];
                _NRLogWithArgs();
              }
              id v64 = [(id)a1 nrUUID];
              sub_10014A3AC((uint64_t)NRDLocalDevice, v60, v64);
              goto LABEL_127;
            case 48605:
              id location = 0;
              if ([v8 length] == (id)8)
              {
                [v8 getBytes:&location length:8];
                int v49 = (void *)_NRCopyLogObjectForNRUUID();
                int v50 = _NRLogIsLevelEnabled();

                if (v50)
                {
                  id v51 = (void *)_NRCopyLogObjectForNRUUID();
                  id v147 = [(id)a1 copyDescription];
                  _NRLogWithArgs();
                }
                uint64_t v52 = (char *)location;
                uint64_t v53 = [(id)a1 nrUUID];
                sub_10014ACC0((uint64_t)NRDLocalDevice, v52, v53);

                goto LABEL_129;
              }
              id v89 = sub_100070988();
              int v90 = _NRLogIsLevelEnabled();

              if (!v90) {
                goto LABEL_129;
              }
              id v60 = sub_100070988();
              [v8 length];
              _NRLogWithArgs();
              break;
            case 48606:
              LOBYTE(location) = 0;
              if ([v8 length] == (id)1)
              {
                [v8 getBytes:&location length:1];
                int v81 = (void *)_NRCopyLogObjectForNRUUID();
                int v82 = _NRLogIsLevelEnabled();

                if (v82)
                {
                  uint64_t v83 = (void *)_NRCopyLogObjectForNRUUID();
                  id v151 = [(id)a1 copyDescription];
                  _NRLogWithArgs();
                }
                id v84 = (char *)location;
                uint64_t v85 = [(id)a1 nrUUID];
                sub_100149F80((uint64_t)NRDLocalDevice, v84, v85);
              }
              goto LABEL_129;
            case 48607:
              id v60 = [objc_alloc((Class)NSString) initWithData:v8 encoding:4];
              id v86 = (void *)_NRCopyLogObjectForNRUUID();
              int v87 = _NRLogIsLevelEnabled();

              if (v87)
              {
                uint64_t v88 = (void *)_NRCopyLogObjectForNRUUID();
                id v152 = [(id)a1 copyDescription];
                Logid String = (void *)_NRKeyCreateLogString();
                _NRLogWithArgs();
              }
              id v64 = [(id)a1 nrUUID];
              sub_10014CCE4((uint64_t)NRDLocalDevice, v60, v64);
              goto LABEL_127;
            default:
              if (!a2) {
                goto LABEL_56;
              }
              if (a2 != 48701) {
                goto LABEL_69;
              }
              char v174 = 0;
              if ([v8 length])
              {
                [v8 getBytes:&v174 length:1];
                if (v174 < 0 && !*(unsigned char *)(a1 + 236))
                {
                  *(unsigned char *)(a1 + 236) = 1;
                  objc_initWeak(&location, (id)a1);
                  id v32 = sub_100158A70();
                  v172[0] = _NSConcreteStackBlock;
                  v172[1] = 3221225472;
                  v172[2] = sub_10007CF04;
                  v172[3] = &unk_1001C7FF0;
                  objc_copyWeak(&v173, &location);
                  sub_10015969C((uint64_t)v32, v172);

                  objc_destroyWeak(&v173);
                  objc_destroyWeak(&location);
                }
              }
              goto LABEL_129;
          }
          goto LABEL_128;
        }
        uint64_t v23 = (a2 - 50351);
        if (v23 > 0x3E) {
          goto LABEL_69;
        }
        if (((1 << (a2 + 81)) & 0x701C000000000000) == 0)
        {
          if (a2 == 50351)
          {
            [(id)a1 reportEvent:3401 details:@"Identity"];
            int v80 = *(void **)(a1 + 32);
            v169[0] = _NSConcreteStackBlock;
            v169[1] = 3221225472;
            v169[2] = sub_10007D308;
            v169[3] = &unk_1001C6BB0;
            v169[4] = a1;
            sub_100147808((uint64_t)NRDLocalDevice, v8, v80, v169);
            goto LABEL_129;
          }
          if (v23 == 1)
          {
            id v24 = (void *)_NRCopyLogObjectForNRUUID();
            int v25 = _NRLogIsLevelEnabled();

            if (v25)
            {
              long long v26 = (void *)_NRCopyLogObjectForNRUUID();
              id v163 = [(id)a1 copyDescription];
              _NRLogWithArgs();
            }
            sub_10007D570(a1);
            goto LABEL_129;
          }
LABEL_69:
          id v47 = (void *)_NRCopyLogObjectForNRUUID();
          int v48 = _NRLogIsLevelEnabled();

          if (!v48) {
            goto LABEL_129;
          }
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (a2 <= 50800)
      {
        if ((a2 - 50501) >= 5)
        {
          if (a2 == 50701)
          {
            sub_10014A7E0((uint64_t)NRDLocalDevice, v8, *(void **)(a1 + 32));
            [(id)a1 checkProxyAgentWithForceUpdate:0];
            goto LABEL_129;
          }
          if (a2 != 50702) {
            goto LABEL_69;
          }
          [v17 linkDidReceiveData:a1 data:v8];
LABEL_129:

          goto LABEL_130;
        }
      }
      else
      {
        if (a2 <= 51300)
        {
          switch(a2)
          {
            case 50801:
              if (*(unsigned char *)(a1 + 242))
              {
                id v21 = (void *)_NRCopyLogObjectForNRUUID();
                int v22 = _NRLogIsLevelEnabled();

                if (!v22) {
                  goto LABEL_129;
                }
                goto LABEL_126;
              }
              id location = 0;
              uint64_t v171 = 0;
              if ((unint64_t)[v8 length] <= 0xF)
              {
                id v95 = (void *)_NRCopyLogObjectForNRUUID();
                int v96 = _NRLogIsLevelEnabled();

                if (!v96) {
                  goto LABEL_129;
                }
                goto LABEL_126;
              }
              [v8 getBytes:&location length:16];
              if (!sub_10014B96C((uint64_t)NRDLocalDevice, (uint64_t)&location, *(void **)(a1 + 32)))
              {
                int v128 = (void *)_NRCopyLogObjectForNRUUID();
                int v129 = _NRLogIsLevelEnabled();

                if (!v129) {
                  goto LABEL_129;
                }
                goto LABEL_162;
              }
              uint64_t v69 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 32));
              if (v69)
              {
                unsigned int v112 = (void *)_NRCopyLogObjectForNRUUID();
                int v113 = _NRLogIsLevelEnabled();

                if (v113)
                {
                  uint64_t v114 = (void *)_NRCopyLogObjectForNRUUID();
                  id v115 = [(id)a1 copyDescription];
                  IPv6Addrid String = (void *)createIPv6AddrString();
                  id v167 = (void *)createIPv6AddrString();
                  _NRLogWithArgs();
                }
                sub_100142334(v69, (_OWORD *)(a1 + 1951));
                sub_10007CF4C(a1);
                id v107 = (void *)sub_10014B844(v69);
                [*(id *)(a1 + 1335) setLocalAddresses:v107];
                long long v116 = (void *)_NRCopyLogObjectForNRUUID();
                int v117 = _NRLogIsLevelEnabled();

                if (v117)
                {
                  int v118 = (void *)_NRCopyLogObjectForNRUUID();
                  id v119 = [(id)a1 copyDescription];
                  int v159 = [*(id *)(a1 + 1335) interfaceName];
                  _NRLogWithArgs();
                }
                goto LABEL_142;
              }
              id v139 = sub_100070988();
              int v140 = _NRLogIsLevelEnabled();

              if (v140)
              {
                id v141 = sub_100070988();
                _NRLogWithArgs();
              }
              goto LABEL_177;
            case 50802:
              if (*(unsigned char *)(a1 + 242))
              {
                uint64_t v38 = (void *)_NRCopyLogObjectForNRUUID();
                int v39 = _NRLogIsLevelEnabled();

                if (!v39) {
                  goto LABEL_129;
                }
                goto LABEL_126;
              }
              id location = 0;
              uint64_t v171 = 0;
              if ((unint64_t)[v8 length] <= 0xF)
              {
                uint64_t v91 = (void *)_NRCopyLogObjectForNRUUID();
                int v92 = _NRLogIsLevelEnabled();

                if (!v92) {
                  goto LABEL_129;
                }
                goto LABEL_126;
              }
              [v8 getBytes:&location length:16];
              if (!sub_10014C1DC((uint64_t)NRDLocalDevice, (uint64_t)&location, *(void **)(a1 + 32)))
              {
                int v124 = (void *)_NRCopyLogObjectForNRUUID();
                int v125 = _NRLogIsLevelEnabled();

                if (!v125) {
                  goto LABEL_129;
                }
                goto LABEL_162;
              }
              uint64_t v69 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 32));
              if (v69)
              {
                int v99 = (void *)_NRCopyLogObjectForNRUUID();
                int v100 = _NRLogIsLevelEnabled();

                if (v100)
                {
                  id v101 = (void *)_NRCopyLogObjectForNRUUID();
                  id v102 = [(id)a1 copyDescription];
                  int v155 = (void *)createIPv6AddrString();
                  id v165 = (void *)createIPv6AddrString();
                  _NRLogWithArgs();
                }
                sub_100141A68(v69, (_OWORD *)(a1 + 1967));
                sub_10007CF4C(a1);
                sub_10007D0C8((void **)a1);

                goto LABEL_129;
              }
              id v133 = sub_100070988();
              int v134 = _NRLogIsLevelEnabled();

              if (v134)
              {
                id v135 = sub_100070988();
                _NRLogWithArgs();
              }
              goto LABEL_177;
            case 50803:
            case 50804:
            case 50805:
            case 50806:
            case 50807:
            case 50808:
            case 50809:
            case 50810:
              goto LABEL_69;
            case 50811:
              if (*(unsigned char *)(a1 + 242))
              {
                int v40 = (void *)_NRCopyLogObjectForNRUUID();
                int v41 = _NRLogIsLevelEnabled();

                if (!v41) {
                  goto LABEL_129;
                }
                goto LABEL_126;
              }
              id location = 0;
              uint64_t v171 = 0;
              if ((unint64_t)[v8 length] <= 0xF)
              {
                int v93 = (void *)_NRCopyLogObjectForNRUUID();
                int v94 = _NRLogIsLevelEnabled();

                if (!v94) {
                  goto LABEL_129;
                }
                goto LABEL_126;
              }
              [v8 getBytes:&location length:16];
              if (!sub_10014BDA4((uint64_t)NRDLocalDevice, (uint64_t)&location, *(void **)(a1 + 32)))
              {
                uint64_t v126 = (void *)_NRCopyLogObjectForNRUUID();
                int v127 = _NRLogIsLevelEnabled();

                if (!v127) {
                  goto LABEL_129;
                }
                goto LABEL_162;
              }
              uint64_t v69 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 32));
              if (!v69)
              {
                id v136 = sub_100070988();
                int v137 = _NRLogIsLevelEnabled();

                if (v137)
                {
                  id v138 = sub_100070988();
                  _NRLogWithArgs();
                }
                goto LABEL_177;
              }
              int v103 = (void *)_NRCopyLogObjectForNRUUID();
              int v104 = _NRLogIsLevelEnabled();

              if (v104)
              {
                id v105 = (void *)_NRCopyLogObjectForNRUUID();
                id v106 = [(id)a1 copyDescription];
                long long v156 = (void *)createIPv6AddrString();
                int v166 = (void *)createIPv6AddrString();
                _NRLogWithArgs();
              }
              sub_10014AEA4(v69, (_OWORD *)(a1 + 1983));
              id v107 = (void *)sub_10014B844(v69);
              [*(id *)(a1 + 1335) setLocalAddresses:v107];
              int v108 = (void *)_NRCopyLogObjectForNRUUID();
              int v109 = _NRLogIsLevelEnabled();

              if (v109)
              {
                uint64_t v110 = (void *)_NRCopyLogObjectForNRUUID();
                id v111 = [(id)a1 copyDescription];
                id v157 = [*(id *)(a1 + 1335) interfaceName];
                _NRLogWithArgs();
              }
LABEL_142:

              goto LABEL_129;
            case 50812:
              if (*(unsigned char *)(a1 + 242))
              {
                uint64_t v42 = (void *)_NRCopyLogObjectForNRUUID();
                int v43 = _NRLogIsLevelEnabled();

                if (!v43) {
                  goto LABEL_129;
                }
LABEL_126:
                id v60 = (id)_NRCopyLogObjectForNRUUID();
                id v64 = [(id)a1 copyDescription];
                _NRLogWithArgs();
LABEL_127:

LABEL_128:
                goto LABEL_129;
              }
              id location = 0;
              uint64_t v171 = 0;
              if ((unint64_t)[v8 length] <= 0xF)
              {
                id v97 = (void *)_NRCopyLogObjectForNRUUID();
                int v98 = _NRLogIsLevelEnabled();

                if (!v98) {
                  goto LABEL_129;
                }
                goto LABEL_126;
              }
              [v8 getBytes:&location length:16];
              if (!sub_10014C614((uint64_t)NRDLocalDevice, (uint64_t)&location, *(void **)(a1 + 32)))
              {
                uint64_t v130 = (void *)_NRCopyLogObjectForNRUUID();
                int v131 = _NRLogIsLevelEnabled();

                if (v131)
                {
LABEL_162:
                  BOOL v132 = (void *)_NRCopyLogObjectForNRUUID();
                  id v153 = [(id)a1 copyDescription];
                  id v161 = (void *)createIPv6AddrString();
                  _NRLogWithArgs();
                }
                goto LABEL_129;
              }
              uint64_t v69 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 32));
              if (v69)
              {
                id v120 = (void *)_NRCopyLogObjectForNRUUID();
                int v121 = _NRLogIsLevelEnabled();

                if (v121)
                {
                  id v122 = (void *)_NRCopyLogObjectForNRUUID();
                  id v123 = [(id)a1 copyDescription];
                  long long v160 = (void *)createIPv6AddrString();
                  id v168 = (void *)createIPv6AddrString();
                  _NRLogWithArgs();
                }
                sub_100141A68(v69, (_OWORD *)(a1 + 1999));
                sub_10007D0C8((void **)a1);

                goto LABEL_129;
              }
              id v142 = sub_100070988();
              int v143 = _NRLogIsLevelEnabled();

              if (v143)
              {
                id v144 = sub_100070988();
                _NRLogWithArgs();
              }
LABEL_177:
              id v17 = (void *)_os_log_pack_size();
              id v8 = (char *)v169 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v145 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v145 = 136446210;
              *(void *)(v145 + 4) = "-[NRLinkBluetooth handleNotifyCode:payload:dataProtectionClass:]";
              sub_100070988();
              _NRLogAbortWithPack();
              __break(1u);
LABEL_178:
              unsigned int v70 = 0;
LABEL_86:
              uint64_t v71 = (uint64_t)p_cache + 2984;
              int v72 = (char *)*(unsigned __int16 *)(a1 + v4[447]);
              uint64_t v73 = [(id)a1 nrUUID];
              sub_100149D9C(v71, v72, v73);

              if (v69)
              {
                unsigned int v74 = *((unsigned __int16 *)v69 + 14);
                if (v70 >= v74) {
                  unsigned int v75 = *((unsigned __int16 *)v69 + 14);
                }
                else {
                  unsigned int v75 = v70;
                }
                if (v70 <= v74) {
                  unsigned int v70 = *((unsigned __int16 *)v69 + 14);
                }
                if (a4 != 4) {
                  goto LABEL_165;
                }
              }
              else
              {
                unsigned int v75 = 0;
                if (a4 != 4)
                {
LABEL_165:

                  goto LABEL_129;
                }
              }
              if (v75 <= 0x10 && v70 >= 0x11)
              {
                id v76 = v69 ? v69[16] : 0;
                id v77 = v76;
                BOOL v78 = [v77 proxyCapability] == (id)1;

                if (v78) {
                  sub_10007CAE8(a1);
                }
              }
              if (v69)
              {
                id v79 = v69[8];
                if (v79)
                {
                }
                else if (*((unsigned __int16 *)v69 + 14) >= 0x14u)
                {
                  sub_10007CCEC(a1);
                }
              }
              goto LABEL_165;
            default:
              int v33 = 50901;
              goto LABEL_55;
          }
        }
        if (a2 > 51500)
        {
          if (a2 == 51501)
          {
            int v44 = (void *)_NRCopyLogObjectForNRUUID();
            int v45 = _NRLogIsLevelEnabled();

            if (v45)
            {
              id v46 = (void *)_NRCopyLogObjectForNRUUID();
              id v164 = [(id)a1 copyDescription];
              _NRLogWithArgs();
            }
            goto LABEL_69;
          }
          int v33 = 51601;
LABEL_55:
          if (a2 != v33) {
            goto LABEL_69;
          }
        }
        else if (a2 != 51301)
        {
          if (a2 == 51401)
          {
            LOBYTE(location) = 0;
            [v8 getBytes:&location length:1];
            long long v27 = (void *)_NRCopyLogObjectForNRUUID();
            int v28 = _NRLogIsLevelEnabled();

            if (v28)
            {
              id v29 = (void *)_NRCopyLogObjectForNRUUID();
              id v146 = [(id)a1 copyDescription];
              _NRLogWithArgs();
            }
            BOOL v30 = location == 1;
            uint64_t v31 = [(id)a1 nrUUID];
            sub_10014A5F4((uint64_t)NRDLocalDevice, (char *)v30, v31);

            goto LABEL_129;
          }
          goto LABEL_69;
        }
      }
LABEL_56:
      uint64_t v34 = (void *)_NRCopyLogObjectForNRUUID();
      int v35 = _NRLogIsLevelEnabled();

      if (v35)
      {
LABEL_57:
        uint64_t v36 = (void *)_NRCopyLogObjectForNRUUID();
        id v37 = [(id)a1 copyDescription];
        _NRLogWithArgs();

        goto LABEL_129;
      }
      goto LABEL_129;
    }
    uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
    int v14 = _NRLogIsLevelEnabled();

    if (v14) {
      goto LABEL_11;
    }
  }
LABEL_130:
}

void sub_10007CA70(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Unwind_Resume(a1);
}

void sub_10007CAE8(uint64_t a1)
{
  uint64_t v2 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 32));
  if (sub_10011FD1C(v2))
  {
    id v3 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      id v10 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
    objc_initWeak(&location, (id)a1);
    id v6 = *(void **)(a1 + 1223);
    id v7 = sub_10011FDA0(v2, 0);
    id v14 = v7;
    id v8 = +[NSArray arrayWithObjects:&v14 count:1];
    int v9 = [(id)a1 queue];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10007D9F4;
    v11[3] = &unk_1001C7A00;
    objc_copyWeak(&v12, &location);
    [v6 sendPrivateNotifies:v8 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v9 callback:v11];

    objc_destroyWeak(&v12);
    objc_destroyWeak(&location);
  }
}

void sub_10007CCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007CCEC(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
      id v9 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
    objc_initWeak(&location, (id)a1);
    id v5 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50352 notifyData:0];
    id v6 = *(void **)(a1 + 1223);
    id v13 = v5;
    id v7 = +[NSArray arrayWithObjects:&v13 count:1];
    id v8 = [(id)a1 queue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10007D8D0;
    v10[3] = &unk_1001C7A00;
    objc_copyWeak(&v11, &location);
    [v6 sendPrivateNotifies:v7 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v8 callback:v10];

    objc_destroyWeak(&v11);
    objc_destroyWeak(&location);
  }
}

void sub_10007CEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007CEF4(uint64_t a1, void *a2)
{
}

void sub_10007CF04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    sub_1000789C4(WeakRetained, 3);
    id WeakRetained = v2;
  }
}

void sub_10007CF4C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 246))
  {
    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    id v2 = [objc_alloc((Class)NSData) initWithBytes:a1 + 1951 length:16];
    id v3 = [objc_alloc((Class)NSData) initWithBytes:a1 + 1967 length:16];
    [v10 setObject:v2 forKeyedSubscript:@"source-address-bytes"];
    [v10 setObject:v3 forKeyedSubscript:@"destination-address-bytes"];
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v4 = (id)qword_1001F4A18;
    id v5 = v4;
    if (v4)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = (void *)*((void *)v4 + 27);
      id v8 = v10;
      id v9 = [v7 objectForKeyedSubscript:v6];
      sub_1000FACEC((uint64_t)v9, v8);
    }
  }
}

void sub_10007D0C8(void **a1)
{
  id v14 = sub_10013DC5C((uint64_t)NRDLocalDevice, a1[4]);
  if (!v14)
  {
    id v10 = sub_100070988();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = sub_100070988();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 136446210;
    *(void *)(v13 + 4) = "-[NRLinkBluetooth addVirtualInterfaceRoutes]";
    sub_100070988();
    _NRLogAbortWithPack();
  }
  NEVirtualInterfaceRemoveAllRoutes();
  id v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  id v3 = sub_10015BD9C();
  dispatch_assert_queue_V2(v3);

  id v4 = sub_1001414DC(v14, @"0");
  id v5 = [v4 hostname];

  NEVirtualInterfaceAddIPv6Route();
  uint64_t v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  id v7 = sub_10015BD9C();
  dispatch_assert_queue_V2(v7);

  id v8 = sub_1001418A8(v14, @"0");
  id v9 = [v8 hostname];

  NEVirtualInterfaceAddIPv6Route();
  NEVirtualInterfaceUpdateAdHocService();
  [a1 checkProxyAgentWithForceUpdate:1];
}

void sub_10007D308(uint64_t a1, void *a2)
{
  int v25 = a2;
  id v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    id v22 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
  int v7 = _NRLogIsLevelEnabled();

  if (v7)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    id v9 = [*(id *)(a1 + 32) copyDescription];
    if (v25)
    {
      id v10 = v25[8];
      id v11 = v10;
      if (v10) {
        id v12 = (void *)*((void *)v10 + 1);
      }
      else {
        id v12 = 0;
      }
    }
    else
    {
      id v11 = 0;
      id v12 = 0;
    }
    id v13 = v12;
    uint64_t v23 = [v13 UUIDString];
    _NRLogWithArgs();
  }
  id v14 = (void *)_NRCopyLogObjectForNRUUID();
  int v15 = _NRLogIsLevelEnabled();

  if (v15)
  {
    id v16 = (void *)_NRCopyLogObjectForNRUUID();
    id v17 = [*(id *)(a1 + 32) copyDescription];
    if (v25)
    {
      id v18 = v25[8];
      id v19 = v18;
      if (v18) {
        int v20 = (void *)*((void *)v18 + 2);
      }
      else {
        int v20 = 0;
      }
    }
    else
    {
      id v19 = 0;
      int v20 = 0;
    }
    id v21 = v20;
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
}

void sub_10007D570(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    id v2 = [(id)a1 nrUUID];
    id v3 = sub_100146410((uint64_t)NRDLocalDevice, v2);

    if (v3)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
        id v11 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
      objc_initWeak(&location, (id)a1);
      id v7 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50351 notifyData:v3];
      id v8 = *(void **)(a1 + 1223);
      id v15 = v7;
      id v9 = +[NSArray arrayWithObjects:&v15 count:1];
      id v10 = [(id)a1 queue];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10007D7AC;
      v12[3] = &unk_1001C7A00;
      objc_copyWeak(&v13, &location);
      [v8 sendPrivateNotifies:v9 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v10 callback:v12];

      objc_destroyWeak(&v13);
      objc_destroyWeak(&location);
    }
  }
}

void sub_10007D780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007D7AC(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    if (a2)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
    }
    else
    {
      int v6 = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!v6) {
        goto LABEL_7;
      }
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    id v8 = [v9 copyDescription];
    _NRLogWithArgs();

    id WeakRetained = v9;
  }
LABEL_7:
}

void sub_10007D8D0(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    if (a2)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
    }
    else
    {
      int v6 = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!v6) {
        goto LABEL_7;
      }
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    id v8 = [v9 copyDescription];
    _NRLogWithArgs();

    id WeakRetained = v9;
  }
LABEL_7:
}

void sub_10007D9F4(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    if (a2)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
    }
    else
    {
      int v6 = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!v6) {
        goto LABEL_7;
      }
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    id v8 = [v9 copyDescription];
    _NRLogWithArgs();

    id WeakRetained = v9;
  }
LABEL_7:
}

void sub_10007DB18(unsigned char *a1)
{
  if (!a1[242])
  {
    a1[235] = 1;
    id v2 = [a1 nrUUID];
    uint64_t v3 = (uint64_t)sub_10013DC5C((uint64_t)NRDLocalDevice, v2);

    if (v3)
    {
      if (*(unsigned char *)(v3 + 14) || *(unsigned __int16 *)(v3 + 28) > 0x12u) {
        goto LABEL_7;
      }
      objc_initWeak(&location, a1);
      self;
      if (qword_1001F4DE0 == -1)
      {
LABEL_6:
        id v4 = (id)qword_1001F4DD8;
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        void v9[2] = sub_10007E72C;
        void v9[3] = &unk_1001C7FF0;
        objc_copyWeak(&v10, &location);
        sub_100159AFC((uint64_t)v4, v9);

        objc_destroyWeak(&v10);
        objc_destroyWeak(&location);
LABEL_7:

        return;
      }
    }
    else
    {
      id v5 = sub_100070988();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v7 = sub_100070988();
        _NRLogWithArgs();
      }
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v8 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v8 = 136446210;
      *(void *)(v8 + 4) = "-[NRLinkBluetooth scheduleIKESessionClassADueToConnectFailure]";
      sub_100070988();
      _NRLogAbortWithPack();
      __break(1u);
    }
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
    goto LABEL_6;
  }
}

void sub_10007DD70(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_10007DD9C(uint64_t a1)
{
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (char *)WeakRetained;
  if (WeakRetained && WeakRetained[16] != 255 && *(void *)(WeakRetained + 1223))
  {
    objc_initWeak(&location, WeakRetained);
    uint64_t v3 = *(void **)(v2 + 1223);
    id v4 = sub_10011FC08();
    id v10 = v4;
    id v5 = +[NSArray arrayWithObjects:&v10 count:1];
    int v6 = [v2 queue];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10007E608;
    v7[3] = &unk_1001C7A00;
    objc_copyWeak(&v8, &location);
    [v3 sendPrivateNotifies:v5 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v6 callback:v7];

    objc_destroyWeak(&v8);
    objc_destroyWeak(&location);
  }
}

void sub_10007DF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10007DF30(void *a1)
{
  if ([a1 state] == 255)
  {
    id v5 = 0;
  }
  else
  {
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    uint64_t v2 = (id)qword_1001F4A18;
    uint64_t v3 = sub_1000B92A4(v2, 0);

    if (v3)
    {
      id v4 = [v3 dataUsingEncoding:4];
      id v5 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48607 notifyData:v4];
    }
    else
    {
      objc_initWeak(&location, a1);
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      int v6 = (id)qword_1001F4A18;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      void v8[2] = sub_10007E230;
      v8[3] = &unk_1001C6B88;
      objc_copyWeak(&v9, &location);
      v8[4] = a1;

      objc_destroyWeak(&v9);
      objc_destroyWeak(&location);
      id v5 = 0;
    }
  }

  return v5;
}

void sub_10007E0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007E10C(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    if (a2)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
    }
    else
    {
      int v6 = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!v6) {
        goto LABEL_7;
      }
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    id v8 = [v9 copyDescription];
    _NRLogWithArgs();

    id WeakRetained = v9;
  }
LABEL_7:
}

void sub_10007E230(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 40);
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  int v6 = WeakRetained;
  if (WeakRetained && [WeakRetained state] != 255)
  {
    if (v3)
    {
      id v7 = [v3 dataUsingEncoding:4];
      id v8 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48607 notifyData:v7];
      id v9 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v11 = (void *)_NRCopyLogObjectForNRUUID();
        id v18 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
      id v12 = *(id *)(v6 + 1223);
      id v22 = v8;
      id v13 = +[NSArray arrayWithObjects:&v22 count:1];
      id v14 = [v6 queue];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      id v20[2] = sub_10007E4E4;
      v20[3] = &unk_1001C7A00;
      objc_copyWeak(&v21, v4);
      [v12 sendPrivateNotifies:v13 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v14 callback:v20];

      objc_destroyWeak(&v21);
    }
    else
    {
      id v15 = (void *)_NRCopyLogObjectForNRUUID();
      int v16 = _NRLogIsLevelEnabled();

      if (v16)
      {
        id v17 = (void *)_NRCopyLogObjectForNRUUID();
        id v19 = [v6 copyDescription];
        _NRLogWithArgs();
      }
    }
  }
}

void sub_10007E4C8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10007E4E4(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    if (a2)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
    }
    else
    {
      int v6 = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!v6) {
        goto LABEL_7;
      }
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    id v8 = [v9 copyDescription];
    _NRLogWithArgs();

    id WeakRetained = v9;
  }
LABEL_7:
}

void sub_10007E608(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    if (a2)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
    }
    else
    {
      int v6 = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!v6) {
        goto LABEL_7;
      }
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    id v8 = [v9 copyDescription];
    _NRLogWithArgs();

    id WeakRetained = v9;
  }
LABEL_7:
}

void sub_10007E72C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    BOOL v2 = [WeakRetained state] == 255;
    id WeakRetained = v9;
    if (!v2)
    {
      v9[235] = 0;
      id v3 = [v9 nrUUID];
      id v4 = sub_10013DC5C((uint64_t)NRDLocalDevice, v3);

      if (!v4)
      {
        id v5 = sub_100070988();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v7 = sub_100070988();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __error();
        uint64_t v8 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v8 = 136446210;
        *(void *)(v8 + 4) = "-[NRLinkBluetooth scheduleIKESessionClassADueToConnectFailure]_block_invoke";
        sub_100070988();
        _NRLogAbortWithPack();
      }
      if (!v4[14] && *((unsigned __int16 *)v4 + 14) <= 0x12u) {
        sub_100078594(v9, 1, 0, 0);
      }

      id WeakRetained = v9;
    }
  }
}

void sub_10007E8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v16 = a5;
  if ([*(id *)(a1 + 32) state] == 255)
  {
    id v9 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      id v15 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else if (v16)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7)
    {
      objc_storeStrong((id *)(v7 + 1295), a5);
      uint64_t v8 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v8 = 0;
    }
    sub_100077DA8(v8);
  }
  else
  {
    id v12 = sub_100070988();
    int v13 = _NRLogIsLevelEnabled();

    if (v13)
    {
      id v14 = sub_100070988();
      _NRLogWithArgs();
    }
  }
}

void sub_10007EA30(uint64_t a1, int a2)
{
  id v4 = (void *)_NRCopyLogObjectForNRUUID();
  if (a2)
  {
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      int v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v9 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
    uint64_t v7 = *(unsigned __int8 **)(a1 + 32);
    if (v7)
    {
      sub_100078594(v7, 3, 0, 0);
    }
  }
  else
  {
    int v8 = _NRLogIsLevelEnabled();

    if (v8)
    {
      id v11 = (id)_NRCopyLogObjectForNRUUID();
      id v10 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10007EBA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      id v7 = objc_alloc((Class)NSString);
      uint64_t v8 = *(void *)(a1 + 32);
      SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
      id v10 = [v7 initWithFormat:@"pairing session %@ got IKE error %@ with state %@", v8, v5, SessionStateString];

LABEL_4:
      uint64_t v11 = mach_absolute_time();
      uint64_t v12 = *(void *)(WeakRetained + 1863);
      if (v12) {
        *(void *)(v12 + 120) = v11;
      }
      if (WeakRetained[234])
      {
        [WeakRetained reportEvent:3009 details:v10];
      }
      else
      {
        sub_100144A24((uint64_t)NRDLocalDevice, -2013, v10, *((void **)WeakRetained + 4));
        [WeakRetained cancelWithReason:@"%@", v10];
      }
LABEL_32:

      goto LABEL_33;
    }
    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = (void *)NEIKEv2CreateSessionStateString();
    [WeakRetained reportEvent:3009, @"pairing session %@ changed state to %@", v13, v14 detailsFormat];

    if (a2 == 3)
    {
      id v10 = [objc_alloc((Class)NSString) initWithFormat:@"pairing session IKE %@ disconnected", *(void *)(a1 + 32)];
      goto LABEL_4;
    }
    if (a2 == 2)
    {
      uint64_t v15 = mach_absolute_time();
      uint64_t v16 = *(void *)(WeakRetained + 1863);
      if (v16) {
        *(void *)(v16 + 120) = v15;
      }
      WeakRetained[234] = 1;
      if (!WeakRetained[242])
      {
        if (*(void *)(WeakRetained + 1287))
        {
          id v17 = sub_1000775AC(WeakRetained, 0);
          [WeakRetained reportEvent:3402 details:@"ClassD"];
          id v18 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50401 notifyData:*(void *)(WeakRetained + 1287)];
          [v17 addObject:v18];
          if (_os_feature_enabled_impl())
          {
            id v19 = [WeakRetained nrUUID];
            int v20 = sub_100146410((uint64_t)NRDLocalDevice, v19);

            if (v20)
            {
              [WeakRetained reportEvent:3400 details:@"Identity"];
              id v21 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50351 notifyData:v20];
              [v17 addObject:v21];
            }
          }
          sub_1000812D8((uint64_t)WeakRetained);
          id v22 = [*(id *)(WeakRetained + 1247) description];
          uint64_t v23 = *(void **)(WeakRetained + 1247);
          uint64_t v24 = *((void *)WeakRetained + 1);
          v38[0] = _NSConcreteStackBlock;
          v38[1] = 3221225472;
          v38[2] = sub_1000812EC;
          v38[3] = &unk_1001C6C50;
          int v25 = WeakRetained;
          int v39 = v25;
          id v40 = v22;
          id v26 = v22;
          [v23 sendPrivateNotifies:v17 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v24 callback:v38];
          sub_100077DA8((uint64_t)v25);
          sub_100077FDC((uint64_t)v25);
        }
        id v10 = objc_alloc_init((Class)NSMutableArray);
        if (*(void *)(WeakRetained + 1263))
        {
          [WeakRetained reportEvent:3400 details:@"ClassD"];
          id v27 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50411 notifyData:*(void *)(WeakRetained + 1263)];
          [v10 addObject:v27];
          sub_1000813EC((uint64_t)WeakRetained);
        }
        if (*(void *)(WeakRetained + 1271))
        {
          [WeakRetained reportEvent:3400 details:@"ClassC"];
          id v28 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50412 notifyData:*(void *)(WeakRetained + 1271)];
          [v10 addObject:v28];
          sub_100081400((uint64_t)WeakRetained);
        }
        if (*(void *)(WeakRetained + 1279))
        {
          [WeakRetained reportEvent:3400 details:@"ClassA"];
          id v29 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50413 notifyData:*(void *)(WeakRetained + 1279)];
          [v10 addObject:v29];
          sub_100081414((uint64_t)WeakRetained);
        }
        if ([v10 count])
        {
          if (_os_feature_enabled_impl())
          {
            BOOL v30 = [WeakRetained nrUUID];
            uint64_t v31 = sub_100146410((uint64_t)NRDLocalDevice, v30);

            if (v31)
            {
              [WeakRetained reportEvent:3400 details:@"Identity"];
              id v32 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50351 notifyData:v31];
              [v10 addObject:v32];
            }
          }
          int v33 = sub_1000775AC(WeakRetained, 0);
          [v10 addObjectsFromArray:v33];

          uint64_t v34 = *(void **)(WeakRetained + 1247);
          uint64_t v35 = *((void *)WeakRetained + 1);
          v36[0] = _NSConcreteStackBlock;
          v36[1] = 3221225472;
          id v36[2] = sub_100081428;
          v36[3] = &unk_1001C6EF0;
          id v37 = WeakRetained;
          [v34 sendPrivateNotifies:v10 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v35 callback:v36];
        }
        goto LABEL_32;
      }
    }
  }
LABEL_33:
}

void sub_10007F174(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v11 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    int v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (v11)
    {
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
    }
    else if (!IsLevelEnabled)
    {
      goto LABEL_7;
    }
    uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
    id v9 = [WeakRetained copyDescription];
    SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
    _NRLogWithArgs();
  }
LABEL_7:
}

void sub_10007F2D8(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      int v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10007F3B4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v12 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = (void *)_NRCopyLogObjectForNRUUID();
      id v11 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10007F4B4(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_10007F590(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    BOOL v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    id WeakRetained = v6;
    if (IsLevelEnabled)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      id v5 = [v6 copyDescription];
      _NRLogWithArgs();

      id WeakRetained = v6;
    }
  }
}

void sub_10007F664(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v38 = v3;
    id v5 = [v3 sortedArrayUsingComparator:&stru_1001C7DE8];
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      id v9 = [WeakRetained copyDescription];
      uint64_t v36 = *(void *)(a1 + 32);
      id v37 = v5;
      uint64_t v34 = 8607;
      id v35 = v9;
      id v32 = "";
      int v33 = "-[NRLinkBluetooth setupIKECallbacksPairing]_block_invoke_9";
      _NRLogWithArgs();
    }
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    id v10 = v5;
    id v11 = [v10 countByEnumeratingWithState:&v53 objects:v57 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v54;
      do
      {
        for (BOOL i = 0; i != v12; BOOL i = (char *)i + 1)
        {
          if (*(void *)v54 != v13) {
            objc_enumerationMutation(v10);
          }
          id v18 = *(void **)(*((void *)&v53 + 1) + 8 * i);
          if (objc_msgSend(v18, "notifyStatus", v32, v33, v34, v35, v36, v37) == 50351)
          {
            [WeakRetained reportEvent:3401 details:@"Identity"];
            uint64_t v15 = [v18 notifyData];
            uint64_t v16 = (void *)WeakRetained[4];
            v51[0] = _NSConcreteStackBlock;
            v51[1] = 3221225472;
            v51[2] = sub_10007FD18;
            v51[3] = &unk_1001C6BB0;
            uint64_t v52 = WeakRetained;
            sub_100147808((uint64_t)NRDLocalDevice, v15, v16, v51);

            id v17 = v52;
          }
          else if ([v18 notifyStatus] == 50411)
          {
            [WeakRetained reportEvent:3401 details:@"ClassD"];
            id v19 = [v18 notifyData];
            int v20 = (void *)WeakRetained[4];
            v49[0] = _NSConcreteStackBlock;
            v49[1] = 3221225472;
            void v49[2] = sub_10007FF80;
            v49[3] = &unk_1001C6BB0;
            int v50 = WeakRetained;
            sub_100147B68((uint64_t)NRDLocalDevice, v19, v20, v49);

            id v17 = v50;
          }
          else if ([v18 notifyStatus] == 50412)
          {
            [WeakRetained reportEvent:3401 details:@"ClassC"];
            id v21 = [v18 notifyData];
            id v22 = (void *)WeakRetained[4];
            v47[0] = _NSConcreteStackBlock;
            v47[1] = 3221225472;
            void v47[2] = sub_1000802B8;
            void v47[3] = &unk_1001C6BB0;
            int v48 = WeakRetained;
            sub_100147F1C((uint64_t)NRDLocalDevice, v21, v22, v47);

            id v17 = v48;
          }
          else if ([v18 notifyStatus] == 50413)
          {
            [WeakRetained reportEvent:3401 details:@"ClassA"];
            uint64_t v23 = [v18 notifyData];
            uint64_t v24 = (void *)WeakRetained[4];
            v45[0] = _NSConcreteStackBlock;
            v45[1] = 3221225472;
            v45[2] = sub_1000805EC;
            void v45[3] = &unk_1001C6BB0;
            id v46 = WeakRetained;
            sub_1001483E8((uint64_t)NRDLocalDevice, v23, v24, v45);

            id v17 = v46;
          }
          else if ([v18 notifyStatus] == 50401)
          {
            [WeakRetained reportEvent:3403 details:@"ClassD"];
            int v25 = [v18 notifyData];
            id v26 = (void *)WeakRetained[4];
            v43[0] = _NSConcreteStackBlock;
            v43[1] = 3221225472;
            v43[2] = sub_100080920;
            v43[3] = &unk_1001C6BB0;
            int v44 = WeakRetained;
            sub_1001488B4((uint64_t)NRDLocalDevice, v25, v26, v43);

            id v17 = v44;
          }
          else if ([v18 notifyStatus] == 50402)
          {
            [WeakRetained reportEvent:3403 details:@"ClassC"];
            id v27 = [v18 notifyData];
            id v28 = (void *)WeakRetained[4];
            v41[0] = _NSConcreteStackBlock;
            v41[1] = 3221225472;
            v41[2] = sub_100080C58;
            uint64_t v41[3] = &unk_1001C6BB0;
            uint64_t v42 = WeakRetained;
            sub_100148D90((uint64_t)NRDLocalDevice, v27, v28, v41);

            id v17 = v42;
          }
          else if ([v18 notifyStatus] == 50403)
          {
            [WeakRetained reportEvent:3403 details:@"ClassA"];
            id v29 = [v18 notifyData];
            BOOL v30 = (void *)WeakRetained[4];
            v39[0] = _NSConcreteStackBlock;
            v39[1] = 3221225472;
            v39[2] = sub_100080F90;
            v39[3] = &unk_1001C6BB0;
            id v40 = WeakRetained;
            sub_100149440((uint64_t)NRDLocalDevice, v29, v30, v39);

            id v17 = v40;
          }
          else
          {
            int v31 = [v18 notifyStatus];
            id v17 = [v18 notifyData];
            sub_10007AC3C((uint64_t)WeakRetained, v31, v17, 0);
          }
        }
        id v12 = [v10 countByEnumeratingWithState:&v53 objects:v57 count:16];
      }
      while (v12);
    }

    id v3 = v38;
  }
}

void sub_10007FD18(uint64_t a1, void *a2)
{
  int v25 = a2;
  id v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    id v22 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  id v6 = (void *)_NRCopyLogObjectForNRUUID();
  int v7 = _NRLogIsLevelEnabled();

  if (v7)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    id v9 = [*(id *)(a1 + 32) copyDescription];
    if (v25)
    {
      id v10 = v25[8];
      id v11 = v10;
      if (v10) {
        id v12 = (void *)*((void *)v10 + 1);
      }
      else {
        id v12 = 0;
      }
    }
    else
    {
      id v11 = 0;
      id v12 = 0;
    }
    id v13 = v12;
    uint64_t v23 = [v13 UUIDString];
    _NRLogWithArgs();
  }
  id v14 = (void *)_NRCopyLogObjectForNRUUID();
  int v15 = _NRLogIsLevelEnabled();

  if (v15)
  {
    uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
    id v17 = [*(id *)(a1 + 32) copyDescription];
    if (v25)
    {
      id v18 = v25[8];
      id v19 = v18;
      if (v18) {
        int v20 = (void *)*((void *)v18 + 2);
      }
      else {
        int v20 = 0;
      }
    }
    else
    {
      id v19 = 0;
      int v20 = 0;
    }
    id v21 = v20;
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
}

void sub_10007FF80(uint64_t a1, void *a2)
{
  id v35 = a2;
  id v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    id v31 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  if (v35) {
    id v6 = (void *)v35[9];
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;
  id v8 = (void *)_NRCopyLogObjectForNRUUID();
  int v9 = _NRLogIsLevelEnabled();

  if (v9)
  {
    id v10 = (void *)_NRCopyLogObjectForNRUUID();
    id v11 = [*(id *)(a1 + 32) copyDescription];
    if (v7) {
      id v12 = (void *)*((void *)v7 + 1);
    }
    else {
      id v12 = 0;
    }
    id v13 = v12;
    id v14 = (void *)sub_100138464((uint64_t)v13);
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  int v15 = (void *)_NRCopyLogObjectForNRUUID();
  int v16 = _NRLogIsLevelEnabled();

  if (v16)
  {
    id v17 = (void *)_NRCopyLogObjectForNRUUID();
    id v18 = [*(id *)(a1 + 32) copyDescription];
    if (v7) {
      id v19 = (void *)*((void *)v7 + 2);
    }
    else {
      id v19 = 0;
    }
    id v20 = v19;
    id v21 = (void *)sub_100138464((uint64_t)v20);
    int v33 = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  id v22 = (void *)_NRCopyLogObjectForNRUUID();
  int v23 = _NRLogIsLevelEnabled();

  if (v23)
  {
    uint64_t v24 = (void *)_NRCopyLogObjectForNRUUID();
    id v25 = [*(id *)(a1 + 32) copyDescription];
    if (v7)
    {
      id v26 = *((id *)v7 + 3);
      id v27 = v26;
      if (v26)
      {
        id v28 = (void *)*((void *)v26 + 2);
LABEL_17:
        id v29 = v28;
        uint64_t v34 = (void *)_NRKeyCreateLogString();
        _NRLogWithArgs();

        goto LABEL_18;
      }
    }
    else
    {
      id v27 = 0;
    }
    id v28 = 0;
    goto LABEL_17;
  }
LABEL_18:
  BOOL v30 = *(unsigned __int8 **)(a1 + 32);
  if (v30) {
    sub_100078594(v30, 4, 0, 0);
  }
}

void sub_1000802B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v36 = v3;
  if (v3) {
    id v4 = (void *)*((void *)v3 + 10);
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  id v6 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    id v32 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  int v9 = (void *)_NRCopyLogObjectForNRUUID();
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    id v11 = (void *)_NRCopyLogObjectForNRUUID();
    id v12 = [*(id *)(a1 + 32) copyDescription];
    if (v5) {
      id v13 = (void *)*((void *)v5 + 1);
    }
    else {
      id v13 = 0;
    }
    id v14 = v13;
    int v15 = (void *)sub_100138464((uint64_t)v14);
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  int v16 = (void *)_NRCopyLogObjectForNRUUID();
  int v17 = _NRLogIsLevelEnabled();

  if (v17)
  {
    id v18 = (void *)_NRCopyLogObjectForNRUUID();
    id v19 = [*(id *)(a1 + 32) copyDescription];
    if (v5) {
      id v20 = (void *)*((void *)v5 + 2);
    }
    else {
      id v20 = 0;
    }
    id v21 = v20;
    id v22 = (void *)sub_100138464((uint64_t)v21);
    uint64_t v34 = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  int v23 = (void *)_NRCopyLogObjectForNRUUID();
  int v24 = _NRLogIsLevelEnabled();

  if (v24)
  {
    id v25 = (void *)_NRCopyLogObjectForNRUUID();
    id v26 = [*(id *)(a1 + 32) copyDescription];
    if (v5)
    {
      id v27 = *((id *)v5 + 3);
      id v28 = v27;
      if (v27)
      {
        id v29 = (void *)*((void *)v27 + 2);
LABEL_17:
        id v30 = v29;
        id v35 = (void *)_NRKeyCreateLogString();
        _NRLogWithArgs();

        goto LABEL_18;
      }
    }
    else
    {
      id v28 = 0;
    }
    id v29 = 0;
    goto LABEL_17;
  }
LABEL_18:
  id v31 = *(unsigned __int8 **)(a1 + 32);
  if (v31) {
    sub_100078594(v31, 3, 0, 0);
  }
}

void sub_1000805EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v36 = v3;
  if (v3) {
    id v4 = (void *)*((void *)v3 + 11);
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  id v6 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    id v32 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  int v9 = (void *)_NRCopyLogObjectForNRUUID();
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    id v11 = (void *)_NRCopyLogObjectForNRUUID();
    id v12 = [*(id *)(a1 + 32) copyDescription];
    if (v5) {
      id v13 = (void *)*((void *)v5 + 1);
    }
    else {
      id v13 = 0;
    }
    id v14 = v13;
    int v15 = (void *)sub_100138464((uint64_t)v14);
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  int v16 = (void *)_NRCopyLogObjectForNRUUID();
  int v17 = _NRLogIsLevelEnabled();

  if (v17)
  {
    id v18 = (void *)_NRCopyLogObjectForNRUUID();
    id v19 = [*(id *)(a1 + 32) copyDescription];
    if (v5) {
      id v20 = (void *)*((void *)v5 + 2);
    }
    else {
      id v20 = 0;
    }
    id v21 = v20;
    id v22 = (void *)sub_100138464((uint64_t)v21);
    uint64_t v34 = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  int v23 = (void *)_NRCopyLogObjectForNRUUID();
  int v24 = _NRLogIsLevelEnabled();

  if (v24)
  {
    id v25 = (void *)_NRCopyLogObjectForNRUUID();
    id v26 = [*(id *)(a1 + 32) copyDescription];
    if (v5)
    {
      id v27 = *((id *)v5 + 3);
      id v28 = v27;
      if (v27)
      {
        id v29 = (void *)*((void *)v27 + 2);
LABEL_17:
        id v30 = v29;
        id v35 = (void *)_NRKeyCreateLogString();
        _NRLogWithArgs();

        goto LABEL_18;
      }
    }
    else
    {
      id v28 = 0;
    }
    id v29 = 0;
    goto LABEL_17;
  }
LABEL_18:
  id v31 = *(unsigned __int8 **)(a1 + 32);
  if (v31) {
    sub_100078594(v31, 1, 0, 0);
  }
}

void sub_100080920(uint64_t a1, void *a2)
{
  id v35 = a2;
  id v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    id v31 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  if (v35) {
    id v6 = (void *)v35[9];
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;
  id v8 = (void *)_NRCopyLogObjectForNRUUID();
  int v9 = _NRLogIsLevelEnabled();

  if (v9)
  {
    int v10 = (void *)_NRCopyLogObjectForNRUUID();
    id v11 = [*(id *)(a1 + 32) copyDescription];
    if (v7) {
      id v12 = (void *)*((void *)v7 + 1);
    }
    else {
      id v12 = 0;
    }
    id v13 = v12;
    id v14 = (void *)sub_100138464((uint64_t)v13);
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  int v15 = (void *)_NRCopyLogObjectForNRUUID();
  int v16 = _NRLogIsLevelEnabled();

  if (v16)
  {
    int v17 = (void *)_NRCopyLogObjectForNRUUID();
    id v18 = [*(id *)(a1 + 32) copyDescription];
    if (v7) {
      id v19 = (void *)*((void *)v7 + 2);
    }
    else {
      id v19 = 0;
    }
    id v20 = v19;
    id v21 = (void *)sub_100138464((uint64_t)v20);
    int v33 = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  id v22 = (void *)_NRCopyLogObjectForNRUUID();
  int v23 = _NRLogIsLevelEnabled();

  if (v23)
  {
    int v24 = (void *)_NRCopyLogObjectForNRUUID();
    id v25 = [*(id *)(a1 + 32) copyDescription];
    if (v7)
    {
      id v26 = *((id *)v7 + 3);
      id v27 = v26;
      if (v26)
      {
        id v28 = (void *)*((void *)v26 + 2);
LABEL_17:
        id v29 = v28;
        uint64_t v34 = (void *)_NRKeyCreateLogString();
        _NRLogWithArgs();

        goto LABEL_18;
      }
    }
    else
    {
      id v27 = 0;
    }
    id v28 = 0;
    goto LABEL_17;
  }
LABEL_18:
  id v30 = *(unsigned __int8 **)(a1 + 32);
  if (v30) {
    sub_100078594(v30, 4, 0, 0);
  }
}

void sub_100080C58(uint64_t a1, void *a2)
{
  id v35 = a2;
  id v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    id v31 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  if (v35) {
    id v6 = (void *)v35[10];
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;
  id v8 = (void *)_NRCopyLogObjectForNRUUID();
  int v9 = _NRLogIsLevelEnabled();

  if (v9)
  {
    int v10 = (void *)_NRCopyLogObjectForNRUUID();
    id v11 = [*(id *)(a1 + 32) copyDescription];
    if (v7) {
      id v12 = (void *)*((void *)v7 + 1);
    }
    else {
      id v12 = 0;
    }
    id v13 = v12;
    id v14 = (void *)sub_100138464((uint64_t)v13);
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  int v15 = (void *)_NRCopyLogObjectForNRUUID();
  int v16 = _NRLogIsLevelEnabled();

  if (v16)
  {
    int v17 = (void *)_NRCopyLogObjectForNRUUID();
    id v18 = [*(id *)(a1 + 32) copyDescription];
    if (v7) {
      id v19 = (void *)*((void *)v7 + 2);
    }
    else {
      id v19 = 0;
    }
    id v20 = v19;
    id v21 = (void *)sub_100138464((uint64_t)v20);
    int v33 = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  id v22 = (void *)_NRCopyLogObjectForNRUUID();
  int v23 = _NRLogIsLevelEnabled();

  if (v23)
  {
    int v24 = (void *)_NRCopyLogObjectForNRUUID();
    id v25 = [*(id *)(a1 + 32) copyDescription];
    if (v7)
    {
      id v26 = *((id *)v7 + 3);
      id v27 = v26;
      if (v26)
      {
        id v28 = (void *)*((void *)v26 + 2);
LABEL_17:
        id v29 = v28;
        uint64_t v34 = (void *)_NRKeyCreateLogString();
        _NRLogWithArgs();

        goto LABEL_18;
      }
    }
    else
    {
      id v27 = 0;
    }
    id v28 = 0;
    goto LABEL_17;
  }
LABEL_18:
  id v30 = *(unsigned __int8 **)(a1 + 32);
  if (v30) {
    sub_100078594(v30, 3, 0, 0);
  }
}

void sub_100080F90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v37 = v3;
  if (v3) {
    id v4 = (void *)*((void *)v3 + 11);
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  id v6 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    id v33 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  int v9 = (void *)_NRCopyLogObjectForNRUUID();
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    id v11 = (void *)_NRCopyLogObjectForNRUUID();
    id v12 = [*(id *)(a1 + 32) copyDescription];
    if (v5) {
      id v13 = (void *)*((void *)v5 + 1);
    }
    else {
      id v13 = 0;
    }
    id v14 = v13;
    int v15 = (void *)sub_100138464((uint64_t)v14);
    Logid String = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  int v16 = (void *)_NRCopyLogObjectForNRUUID();
  int v17 = _NRLogIsLevelEnabled();

  if (v17)
  {
    id v18 = (void *)_NRCopyLogObjectForNRUUID();
    id v19 = [*(id *)(a1 + 32) copyDescription];
    if (v5) {
      id v20 = (void *)*((void *)v5 + 2);
    }
    else {
      id v20 = 0;
    }
    id v21 = v20;
    id v22 = (void *)sub_100138464((uint64_t)v21);
    id v35 = (void *)_NRKeyCreateLogString();
    _NRLogWithArgs();
  }
  int v23 = (void *)_NRCopyLogObjectForNRUUID();
  int v24 = _NRLogIsLevelEnabled();

  if (v24)
  {
    id v25 = (void *)_NRCopyLogObjectForNRUUID();
    id v26 = [*(id *)(a1 + 32) copyDescription];
    if (v5)
    {
      id v27 = *((id *)v5 + 3);
      id v28 = v27;
      if (v27)
      {
        id v29 = (void *)*((void *)v27 + 2);
LABEL_17:
        id v30 = v29;
        id v36 = (void *)_NRKeyCreateLogString();
        _NRLogWithArgs();

        goto LABEL_18;
      }
    }
    else
    {
      id v28 = 0;
    }
    id v29 = 0;
    goto LABEL_17;
  }
LABEL_18:
  uint64_t v31 = *(void *)(a1 + 32);
  if (v31)
  {
    *(unsigned char *)(v31 + 235) = 0;
    id v32 = *(unsigned __int8 **)(a1 + 32);
    if (v32) {
      sub_100078594(v32, 1, 0, 0);
    }
  }
}

void sub_1000812D8(uint64_t a1)
{
}

void sub_1000812EC(uint64_t a1, int a2)
{
  id v3 = *(void **)(a1 + 32);
  if (a2)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v8 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
    id v7 = *(unsigned __int8 **)(a1 + 32);
    if (v7)
    {
      sub_100078594(v7, 4, 0, 0);
    }
  }
  else
  {
    [v3 cancelWithReason:@"initiatorLocalPublicClassDKeysEncryptedWithIDS was not received on %@", *(void *)(a1 + 40)];
  }
}

void sub_1000813EC(uint64_t a1)
{
}

void sub_100081400(uint64_t a1)
{
}

void sub_100081414(uint64_t a1)
{
}

void sub_100081428(uint64_t a1, int a2)
{
  id v4 = (void *)_NRCopyLogObjectForNRUUID();
  if (a2)
  {
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v9 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
    id v7 = *(unsigned __int8 **)(a1 + 32);
    if (v7)
    {
      sub_100078594(v7, 4, 0, 0);
    }
  }
  else
  {
    int v8 = _NRLogIsLevelEnabled();

    if (v8)
    {
      id v11 = (id)_NRCopyLogObjectForNRUUID();
      id v10 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_1000817C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000817EC(uint64_t a1, int a2)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    --*(_DWORD *)(WeakRetained + 307);
    int v15 = WeakRetained;
    if ((*(_DWORD *)(WeakRetained + 307) & 0x80000000) != 0)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v6 = (void *)_NRCopyLogObjectForNRUUID();
        id v12 = [v15 copyDescription];
        _NRLogWithArgs();
      }
      *(_DWORD *)(v15 + 307) = 0;
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    if (!a2)
    {
      int v10 = _NRLogIsLevelEnabled();

      id WeakRetained = v15;
      if (!v10) {
        goto LABEL_15;
      }
      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      id v14 = [v15 copyDescription];
      _NRLogWithArgs();

      goto LABEL_14;
    }
    int v8 = _NRLogIsLevelEnabled();

    if (v8)
    {
      id v9 = (void *)_NRCopyLogObjectForNRUUID();
      id v13 = [v15 copyDescription];
      _NRLogWithArgs();
    }
    id WeakRetained = v15;
    if (v15[231] && !*(_DWORD *)(v15 + 307))
    {
      sub_1000819E8(v15, 1);
LABEL_14:
      id WeakRetained = v15;
    }
  }
LABEL_15:
}

void sub_1000819E8(unsigned char *a1, int a2)
{
  if (a1)
  {
    char v2 = a2;
    a1[231] = 0;
    if (a1[232] != a2)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v6 = (void *)_NRCopyLogObjectForNRUUID();
        id v7 = [a1 copyDescription];
        _NRLogWithArgs();
      }
      a1[232] = v2;
      sub_100081AF8((uint64_t)a1);
    }
  }
}

void sub_100081AF8(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 232))
    {
      char v2 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v4 = (void *)_NRCopyLogObjectForNRUUID();
        id v5 = [(id)a1 copyDescription];
        [*(id *)(a1 + 1335) availability];
        _NRLogWithArgs();
      }
      id v6 = *(void **)(a1 + 1335);
      [v6 setAvailability:0];
    }
    else
    {
      uint64_t v7 = [(id)a1 proxyAgentRegistration];
      if (v7)
      {
        int v8 = (void *)v7;
        BOOL v9 = [(id)a1 state] == 8;
      }
      else
      {
        BOOL v9 = 0;
      }
      int v10 = [(id)a1 nrUUID];
      id v25 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, v10);

      if (v25)
      {
        id v11 = v25[16];

        if (v11 && (id v12 = v25[16]) != 0)
        {
          id v13 = v12;
          id v14 = v25[16];
          char v15 = [v14 requiresReachability] & v9;

          if (v15) {
            uint64_t v16 = 2;
          }
          else {
            uint64_t v16 = 1;
          }
        }
        else
        {
          uint64_t v16 = 1;
        }
        int v17 = (void *)_NRCopyLogObjectForNRUUID();
        int v18 = _NRLogIsLevelEnabled();

        if (v18)
        {
          id v19 = (void *)_NRCopyLogObjectForNRUUID();
          id v20 = [(id)a1 copyDescription];
          [*(id *)(a1 + 1335) availability];
          _NRLogWithArgs();
        }
        [*(id *)(a1 + 1335) setAvailability:v16, v25];
      }
      else
      {
        id v21 = sub_100070988();
        int v22 = _NRLogIsLevelEnabled();

        if (v22)
        {
          id v23 = sub_100070988();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __error();
        uint64_t v24 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v24 = 136446210;
        *(void *)(v24 + 4) = "-[NRLinkBluetooth setPacketNexusAvailability]";
        sub_100070988();
        _NRLogAbortWithPack();
      }
    }
  }
}

uint64_t sub_100082C04(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) linkDelegate];
  if (!v2) {
    goto LABEL_13;
  }
  id v3 = *(void **)(a1 + 40);
  BOOL v9 = (void *)v2;
  if (v3)
  {
    id v4 = [v3 hostState];
    BOOL v5 = v4 == (id)1;
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      if ((v4 == (id)1) != (*(unsigned char *)(v6 + 243) != 0))
      {
LABEL_9:
        *(unsigned char *)(v6 + 243) = v5;
        uint64_t v7 = *(void *)(a1 + 32);
        if (v7) {
          *(unsigned char *)(v7 + 244) = 1;
        }
        goto LABEL_11;
      }
LABEL_8:
      if (*(unsigned char *)(v6 + 244)) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      BOOL v5 = 0;
      if (*(unsigned char *)(v6 + 243)) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    BOOL v5 = 0;
  }
LABEL_11:
  if (objc_opt_respondsToSelector()) {
    [v9 linkPeerIsAsleep:*(void *)(a1 + 32) isAsleep:v5];
  }
LABEL_13:

  return _objc_release_x3();
}

void sub_100083B0C(uint64_t a1, void *a2)
{
  id v4 = a2;
  BOOL v5 = v4;
  if (!a1 || *(id *)(a1 + 1031) == v4) {
    goto LABEL_62;
  }
  if (*(unsigned char *)(a1 + 246))
  {
LABEL_4:
    uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      int v8 = (void *)_NRCopyLogObjectForNRUUID();
      id v9 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
    objc_storeStrong((id *)(a1 + 1031), a2);
    *(unsigned char *)(a1 + 225) = *(void *)(a1 + 1031) != 0;
    if (*(unsigned char *)(a1 + 246))
    {
      if (*(unsigned char *)(a1 + 225)) {
        sub_100093650((void *)a1, 0, &off_1001D4978);
      }
      else {
        sub_100087698(a1, &off_1001D4978);
      }
    }
    goto LABEL_62;
  }
  int v10 = *(NSObject **)(a1 + 1063);
  if (!v5)
  {
    if (v10)
    {
      if (*(unsigned char *)(a1 + 223))
      {
        *(unsigned char *)(a1 + 223) = 0;
        ++*(void *)(a1 + 1079);
        if (gNRPacketLoggingEnabled)
        {
          id v60 = (void *)_NRCopyLogObjectForNRUUID();
          int v61 = _NRLogIsLevelEnabled();

          if (v61)
          {
            int v62 = (void *)_NRCopyLogObjectForNRUUID();
            id v89 = [(id)a1 copyDescription];
            _NRLogWithArgs();
          }
        }
        dispatch_resume(*(dispatch_object_t *)(a1 + 1063));
        int v10 = *(NSObject **)(a1 + 1063);
      }
      dispatch_source_cancel(v10);
      int v17 = *(void **)(a1 + 1063);
      *(void *)(a1 + 1063) = 0;
    }
    int v18 = *(NSObject **)(a1 + 1071);
    if (v18)
    {
      if (*(unsigned char *)(a1 + 224))
      {
        *(unsigned char *)(a1 + 224) = 0;
        ++*(void *)(a1 + 1087);
        if (gNRPacketLoggingEnabled)
        {
          char v63 = (void *)_NRCopyLogObjectForNRUUID();
          int v64 = _NRLogIsLevelEnabled();

          if (v64)
          {
            uint64_t v65 = (void *)_NRCopyLogObjectForNRUUID();
            id v90 = [(id)a1 copyDescription];
            _NRLogWithArgs();
          }
        }
        dispatch_resume(*(dispatch_object_t *)(a1 + 1071));
        int v18 = *(NSObject **)(a1 + 1071);
      }
      dispatch_source_cancel(v18);
      id v19 = *(void **)(a1 + 1071);
      *(void *)(a1 + 1071) = 0;
    }
    if (!*(unsigned char *)(a1 + 215) && *(void *)(a1 + 559))
    {
      *(unsigned char *)(a1 + 215) = 1;
      ++*(void *)(a1 + 575);
      if (gNRPacketLoggingEnabled)
      {
        BOOL v78 = (void *)_NRCopyLogObjectForNRUUID();
        int v79 = _NRLogIsLevelEnabled();

        if (v79)
        {
          int v80 = (void *)_NRCopyLogObjectForNRUUID();
          id v95 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_suspend(*(dispatch_object_t *)(a1 + 559));
    }
    if (*(unsigned char *)(a1 + 212) && *(void *)(a1 + 391))
    {
      *(unsigned char *)(a1 + 212) = 0;
      ++*(void *)(a1 + 415);
      if (gNRPacketLoggingEnabled)
      {
        int v66 = (void *)_NRCopyLogObjectForNRUUID();
        int v67 = _NRLogIsLevelEnabled();

        if (v67)
        {
          int v68 = (void *)_NRCopyLogObjectForNRUUID();
          id v91 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(a1 + 391));
    }
    if (*(unsigned char *)(a1 + 216) && *(void *)(a1 + 695))
    {
      *(unsigned char *)(a1 + 216) = 0;
      ++*(void *)(a1 + 711);
      if (gNRPacketLoggingEnabled)
      {
        uint64_t v69 = (void *)_NRCopyLogObjectForNRUUID();
        int v70 = _NRLogIsLevelEnabled();

        if (v70)
        {
          uint64_t v71 = (void *)_NRCopyLogObjectForNRUUID();
          id v92 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(a1 + 695));
    }
    if (*(unsigned char *)(a1 + 218) && *(void *)(a1 + 839))
    {
      *(unsigned char *)(a1 + 218) = 0;
      ++*(void *)(a1 + 855);
      if (gNRPacketLoggingEnabled)
      {
        int v72 = (void *)_NRCopyLogObjectForNRUUID();
        int v73 = _NRLogIsLevelEnabled();

        if (v73)
        {
          unsigned int v74 = (void *)_NRCopyLogObjectForNRUUID();
          id v93 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(a1 + 839));
    }
    if (*(unsigned char *)(a1 + 214) && *(void *)(a1 + 551))
    {
      *(unsigned char *)(a1 + 214) = 0;
      ++*(void *)(a1 + 567);
      if (gNRPacketLoggingEnabled)
      {
        unsigned int v75 = (void *)_NRCopyLogObjectForNRUUID();
        int v76 = _NRLogIsLevelEnabled();

        if (v76)
        {
          id v77 = (void *)_NRCopyLogObjectForNRUUID();
          id v94 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(a1 + 551));
    }
    *(void *)(a1 + 1039) = 0;
    *(void *)(a1 + 1055) = 0;
    *(void *)(a1 + 1047) = 0;
    *(void *)(a1 + 1079) = 0;
    *(void *)(a1 + 1087) = 0;
    id v20 = *(void **)(a1 + 1911);
    if (v20)
    {
      free(v20);
      *(void *)(a1 + 1911) = 0;
    }
    goto LABEL_4;
  }
  if (v10)
  {
    if (*(unsigned char *)(a1 + 223))
    {
      *(unsigned char *)(a1 + 223) = 0;
      ++*(void *)(a1 + 1079);
      if (gNRPacketLoggingEnabled)
      {
        long long v54 = (void *)_NRCopyLogObjectForNRUUID();
        int v55 = _NRLogIsLevelEnabled();

        if (v55)
        {
          long long v56 = (void *)_NRCopyLogObjectForNRUUID();
          id v87 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(a1 + 1063));
      int v10 = *(NSObject **)(a1 + 1063);
    }
    dispatch_source_cancel(v10);
    id v11 = *(void **)(a1 + 1063);
    *(void *)(a1 + 1063) = 0;
  }
  id v12 = *(NSObject **)(a1 + 1071);
  if (v12)
  {
    if (*(unsigned char *)(a1 + 224))
    {
      *(unsigned char *)(a1 + 224) = 0;
      ++*(void *)(a1 + 1087);
      if (gNRPacketLoggingEnabled)
      {
        id v57 = (void *)_NRCopyLogObjectForNRUUID();
        int v58 = _NRLogIsLevelEnabled();

        if (v58)
        {
          id v59 = (void *)_NRCopyLogObjectForNRUUID();
          id v88 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(a1 + 1071));
      id v12 = *(NSObject **)(a1 + 1071);
    }
    dispatch_source_cancel(v12);
    id v13 = *(void **)(a1 + 1071);
    *(void *)(a1 + 1071) = 0;
  }
  *(void *)(a1 + 1039) = 0;
  *(void *)(a1 + 1055) = 0;
  *(void *)(a1 + 1047) = 0;
  id v14 = [v5 channel];
  *(void *)(a1 + 1039) = v14;
  if (!v14)
  {
    id v21 = (void *)_NRCopyLogObjectForNRUUID();
    int v22 = _NRLogIsLevelEnabled();

    if (v22) {
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!os_channel_attr_create())
  {
    id v23 = (void *)_NRCopyLogObjectForNRUUID();
    int v24 = _NRLogIsLevelEnabled();

    if (v24)
    {
LABEL_61:
      id v25 = (void *)_NRCopyLogObjectForNRUUID();
      id v26 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
LABEL_62:

    return;
  }
  if (os_channel_read_attr())
  {
    char v15 = (void *)_NRCopyLogObjectForNRUUID();
    int v16 = _NRLogIsLevelEnabled();

    if (v16) {
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  int v27 = sub_10008613C((void *)a1);
  os_channel_attr_destroy();
  if (!v27) {
    goto LABEL_62;
  }
  os_channel_ring_id();
  uint64_t v28 = os_channel_rx_ring();
  *(void *)(a1 + 1047) = v28;
  if (!v28)
  {
    int v43 = (void *)_NRCopyLogObjectForNRUUID();
    int v44 = _NRLogIsLevelEnabled();

    if (!v44) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  os_channel_ring_id();
  uint64_t v29 = os_channel_tx_ring();
  *(void *)(a1 + 1055) = v29;
  if (!v29)
  {
    int v45 = (void *)_NRCopyLogObjectForNRUUID();
    int v46 = _NRLogIsLevelEnabled();

    if (!v46) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  unsigned int fd = os_channel_get_fd();
  if ((fd & 0x80000000) != 0)
  {
    id v47 = (void *)_NRCopyLogObjectForNRUUID();
    int v48 = _NRLogIsLevelEnabled();

    if (!v48) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  uintptr_t v31 = fd;
  dispatch_source_t v32 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, fd, 0, *(dispatch_queue_t *)(a1 + 8));
  id v33 = *(void **)(a1 + 1063);
  *(void *)(a1 + 1063) = v32;

  uint64_t v34 = *(NSObject **)(a1 + 1063);
  if (!v34)
  {
    int v49 = (void *)_NRCopyLogObjectForNRUUID();
    int v50 = _NRLogIsLevelEnabled();

    if (!v50) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000A2474;
  handler[3] = &unk_1001C8BA8;
  void handler[4] = a1;
  dispatch_source_set_event_handler(v34, handler);
  id v35 = *(NSObject **)(a1 + 1063);
  v99[0] = _NSConcreteStackBlock;
  v99[1] = 3221225472;
  v99[2] = nullsub_8;
  v99[3] = &unk_1001C8BA8;
  id v36 = v5;
  id v100 = v36;
  dispatch_source_set_cancel_handler(v35, v99);
  dispatch_activate(*(dispatch_object_t *)(a1 + 1063));
  dispatch_source_t v37 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, v31, 0, *(dispatch_queue_t *)(a1 + 8));
  id v38 = *(void **)(a1 + 1071);
  *(void *)(a1 + 1071) = v37;

  int v39 = *(NSObject **)(a1 + 1071);
  if (!v39)
  {
    id v51 = (void *)_NRCopyLogObjectForNRUUID();
    int v52 = _NRLogIsLevelEnabled();

    if (v52)
    {
      long long v53 = (void *)_NRCopyLogObjectForNRUUID();
      id v86 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
    goto LABEL_62;
  }
  v98[0] = _NSConcreteStackBlock;
  v98[1] = 3221225472;
  v98[2] = sub_1000A267C;
  v98[3] = &unk_1001C8BA8;
  v98[4] = a1;
  dispatch_source_set_event_handler(v39, v98);
  id v40 = *(NSObject **)(a1 + 1071);
  v96[0] = _NSConcreteStackBlock;
  v96[1] = 3221225472;
  v96[2] = nullsub_9;
  v96[3] = &unk_1001C8BA8;
  id v97 = v36;
  dispatch_source_set_cancel_handler(v40, v96);
  *(unsigned char *)(a1 + 224) = 1;
  *(unsigned char *)(a1 + 254) = 10;
  uint64_t v41 = *(unsigned __int8 *)(a1 + 254);
  if (!*(unsigned char *)(a1 + 254))
  {
LABEL_73:

    goto LABEL_4;
  }
  uint64_t v42 = 8 * v41;
  memptr = 0;
  if (!malloc_type_posix_memalign(&memptr, 8uLL, 8 * v41, 0xD5FEC036uLL) && memptr)
  {
    *(void *)(a1 + 1911) = memptr;
    goto LABEL_73;
  }
  id v81 = sub_100070988();
  int v82 = _NRLogIsLevelEnabled();

  if (v82)
  {
    id v83 = sub_100070988();
    _NRLogWithArgs();
  }
  _os_log_pack_size();
  __chkstk_darwin();
  __error();
  uint64_t v84 = _os_log_pack_fill();
  *(_DWORD *)uint64_t v84 = 136446722;
  *(void *)(v84 + 4) = "strict_memalign";
  *(_WORD *)(v84 + 12) = 2048;
  *(void *)(v84 + 14) = 8;
  *(_WORD *)(v84 + 22) = 2048;
  *(void *)(v84 + 24) = v42;
  sub_100070988();
  uint64_t v85 = _NRLogAbortWithPack();
  sub_100084BC8(v85);
}

void sub_100084BC8(char *a1, char *a2)
{
  id v4 = a2;
  uint64_t v6 = a2;
  uint64_t v7 = v6;
  if (!a1 || *(char **)(a1 + 1111) == v6) {
    goto LABEL_28;
  }
  if (!v6)
  {
    if ([a1 state] != 255)
    {
      int v17 = *(id *)(a1 + 1863);
      if (v17) {
        ++v17[16];
      }
    }
    sub_100085CD0((uint64_t)a1);
    goto LABEL_21;
  }
  sub_100085CD0((uint64_t)a1);
  if ([v7 priority] != (id)2)
  {
    int v22 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_28;
    }
LABEL_27:
    int v24 = (void *)_NRCopyLogObjectForNRUUID();
    id v25 = [a1 copyDescription];
    _NRLogWithArgs();

    goto LABEL_28;
  }
  if (a1[246]) {
    goto LABEL_6;
  }
  id v26 = [v7 channel];
  *(void *)(a1 + 1119) = v26;
  if (!v26)
  {
    uint64_t v29 = (void *)_NRCopyLogObjectForNRUUID();
    int v30 = _NRLogIsLevelEnabled();

    if (!v30) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (!os_channel_attr_create())
  {
    uintptr_t v31 = (void *)_NRCopyLogObjectForNRUUID();
    int v32 = _NRLogIsLevelEnabled();

    if (!v32) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (os_channel_read_attr())
  {
    int v27 = (void *)_NRCopyLogObjectForNRUUID();
    int v28 = _NRLogIsLevelEnabled();

    if (!v28) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v33 = sub_10008613C(a1);
  os_channel_attr_destroy();
  if (!v33) {
    goto LABEL_28;
  }
  os_channel_ring_id();
  uint64_t v34 = os_channel_rx_ring();
  *(void *)(a1 + 1127) = v34;
  if (!v34)
  {
    int v49 = (void *)_NRCopyLogObjectForNRUUID();
    int v50 = _NRLogIsLevelEnabled();

    if (!v50) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  os_channel_ring_id();
  uint64_t v35 = os_channel_tx_ring();
  *(void *)(a1 + 1135) = v35;
  if (!v35)
  {
    id v51 = (void *)_NRCopyLogObjectForNRUUID();
    int v52 = _NRLogIsLevelEnabled();

    if (!v52) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  unsigned int fd = os_channel_get_fd();
  if ((fd & 0x80000000) != 0)
  {
    long long v53 = (void *)_NRCopyLogObjectForNRUUID();
    int v54 = _NRLogIsLevelEnabled();

    if (!v54) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uintptr_t v37 = fd;
  dispatch_source_t v38 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, fd, 0, *((dispatch_queue_t *)a1 + 1));
  id v3 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  int v39 = *(void **)(a1 + 1143);
  *(void *)(a1 + 1143) = v38;

  id v40 = *(NSObject **)(a1 + 1143);
  if (!v40)
  {
    int v55 = (void *)_NRCopyLogObjectForNRUUID();
    int v56 = _NRLogIsLevelEnabled();

    if (!v56) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100087110;
  handler[3] = &unk_1001C8BA8;
  void handler[4] = a1;
  dispatch_source_set_event_handler(v40, handler);
  uint64_t v41 = *(NSObject **)(a1 + 1143);
  v96[0] = _NSConcreteStackBlock;
  v96[1] = 3221225472;
  v96[2] = nullsub_6;
  v96[3] = &unk_1001C8BA8;
  id v42 = v7;
  id v97 = v42;
  dispatch_source_set_cancel_handler(v41, v96);
  dispatch_activate(*(dispatch_object_t *)(a1 + 1143));
  dispatch_source_t v43 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, v37, 0, *((dispatch_queue_t *)a1 + 1));
  int v44 = *(void **)(a1 + 1151);
  *(void *)(a1 + 1151) = v43;

  int v45 = *(NSObject **)(a1 + 1151);
  if (v45)
  {
    v95[0] = _NSConcreteStackBlock;
    v95[1] = 3221225472;
    v95[2] = sub_100087364;
    v95[3] = &unk_1001C8BA8;
    v95[4] = a1;
    dispatch_source_set_event_handler(v45, v95);
    int v46 = *(NSObject **)(a1 + 1151);
    v93[0] = _NSConcreteStackBlock;
    v93[1] = 3221225472;
    v93[2] = nullsub_7;
    v93[3] = &unk_1001C8BA8;
    id v94 = v42;
    dispatch_source_set_cancel_handler(v46, v93);
    a1[228] = 1;
    uint64_t v2 = 10;
    a1[252] = 10;
    uint64_t v47 = a1[252];
    if (a1[252])
    {
      uint64_t v8 = 8 * v47;
      memptr[0] = 0;
      if (malloc_type_posix_memalign(memptr, 8uLL, 8 * v47, 0xD5FEC036uLL) || !memptr[0])
      {
        id v79 = sub_100070988();
        int v80 = _NRLogIsLevelEnabled();

        id v4 = "strict_memalign";
        if (v80)
        {
          id v81 = sub_100070988();
          _NRLogWithArgs();
        }
        uint64_t v7 = (void *)_os_log_pack_size();
        a1 = (char *)block - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v70 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v70 = 136446722;
        *(void *)(v70 + 4) = "strict_memalign";
        goto LABEL_86;
      }
      *(void **)(a1 + 1895) = memptr[0];
    }
    a1[258] = 10;
    uint64_t v48 = a1[258];
    if (!a1[258])
    {
LABEL_52:

LABEL_6:
      uint64_t v8 = *(unsigned int *)(a1 + 267);
      if (v8)
      {
        uint64_t v2 = (uint64_t)block;
        id v9 = malloc_type_calloc(1uLL, *(unsigned int *)(a1 + 267), 0xF1748037uLL);
        if (!v9)
        {
          id v64 = sub_100070988();
          int v65 = _NRLogIsLevelEnabled();

          if (v65)
          {
            id v66 = sub_100070988();
            _NRLogWithArgs();
          }
LABEL_72:
          uint64_t v7 = (void *)_os_log_pack_size();
          a1 = (char *)block - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v70 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v70 = 136446722;
          *(void *)(v70 + 4) = "strict_calloc";
          *(_WORD *)(v70 + 12) = 2048;
          uint64_t v71 = 1;
LABEL_73:
          *(void *)(v70 + 14) = v71;
          *(_WORD *)(v70 + 22) = 2048;
          *(void *)(v70 + 24) = v8;
          goto LABEL_77;
        }
        *(void *)(a1 + 1319) = v9;
        *(_DWORD *)(a1 + 323) = 0;
        *(_DWORD *)(a1 + 319) = 0;
        uint64_t v8 = *(unsigned int *)(a1 + 283);
        if (v8)
        {
          uint64_t v2 = (uint64_t)block;
          int v10 = malloc_type_calloc(1uLL, *(unsigned int *)(a1 + 283), 0xF1748037uLL);
          if (v10)
          {
            id v3 = (int *)block;
            *(void *)(a1 + 1191) = v10;
            *(_DWORD *)(a1 + 299) = 0;
            *(_DWORD *)(a1 + 303) = 0;
            char v11 = a1[208];
            uint64_t v8 = a1;
            id v12 = (char *)malloc_type_malloc(0x21uLL, 0xA172743EuLL);
            if (v12)
            {
              uint64_t v2 = (uint64_t)v12;
              *(void *)id v12 = 0x53554E494D524554;
              v12[8] = 1;
              v12[9] = v11;
              *((_WORD *)v12 + 5) = 4864;
              v12[12] = 4;
              *(_WORD *)(v12 + 13) = 4096;
              memptr[0] = 0;
              memptr[1] = 0;
              [*(id *)(v8 + 1359) getUUIDBytes:memptr];
              *(_OWORD *)(v2 + 15) = *(_OWORD *)memptr;
              *(_WORD *)(v2 + 31) = ~(unsigned __int16)os_inet_checksum();

              if (*(_DWORD *)(v8 + 283) > 0x20u)
              {
                uint64_t v13 = *(void *)(v8 + 1191);
                char v14 = *(unsigned char *)(v2 + 32);
                long long v15 = *(_OWORD *)(v2 + 16);
                *(_OWORD *)uint64_t v13 = *(_OWORD *)v2;
                *(_OWORD *)(v13 + 16) = v15;
                *(unsigned char *)(v13 + 32) = v14;
                free((void *)v2);
                *(_DWORD *)(v8 + 299) += 33;
                uint64_t v2 = (uint64_t)[objc_alloc((Class)NSData) initWithBytes:*(void *)(v8 + 1191) length:33];
                id v3 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                if (!gNRPacketLoggingEnabled)
                {
LABEL_13:
                  if (*(unsigned char *)(v8 + v3[327])) {
                    sub_10007120C(v8, (void *)v2, &off_1001D4960);
                  }
                  int v16 = *(NSObject **)(v8 + 8);
                  block[0] = _NSConcreteStackBlock;
                  block[1] = 3221225472;
                  block[2] = sub_100087528;
                  block[3] = &unk_1001C8840;
                  void block[4] = v8;
                  id v92 = v7;
                  dispatch_async(v16, block);

LABEL_21:
                  int v18 = (void *)_NRCopyLogObjectForNRUUID();
                  int v19 = _NRLogIsLevelEnabled();

                  if (v19)
                  {
                    id v20 = (void *)_NRCopyLogObjectForNRUUID();
                    id v21 = [a1 copyDescription];
                    _NRLogWithArgs();
                  }
                  objc_storeStrong((id *)(a1 + 1111), v4);
                  if (!*(void *)(a1 + 1111) && a1[246]) {
                    sub_100087698((uint64_t)a1, &off_1001D4960);
                  }
                  goto LABEL_28;
                }
LABEL_78:
                int v76 = (void *)_NRCopyLogObjectForNRUUID();
                int v77 = _NRLogIsLevelEnabled();

                if (v77)
                {
                  BOOL v78 = (void *)_NRCopyLogObjectForNRUUID();
                  id v89 = [(id)v8 copyDescription];
                  _NRLogWithArgs();
                }
                goto LABEL_13;
              }
              id v85 = sub_100070988();
              int v86 = _NRLogIsLevelEnabled();

              if (v86)
              {
                id v87 = sub_100070988();
                _NRLogWithArgs();
              }
              uint64_t v7 = (void *)_os_log_pack_size();
              a1 = (char *)block - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v88 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v88 = 136446466;
              *(void *)(v88 + 4) = "-[NRLinkBluetooth updateUrgentPipe:]";
              *(_WORD *)(v88 + 12) = 1024;
              *(_DWORD *)(v88 + 14) = 33;
            }
            else
            {
              id v72 = sub_100070988();
              int v73 = _NRLogIsLevelEnabled();

              id v4 = "strict_malloc";
              if (v73)
              {
                id v74 = sub_100070988();
                _NRLogWithArgs();
              }
              uint64_t v7 = (void *)_os_log_pack_size();
              a1 = (char *)block - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
              __error();
              uint64_t v75 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v75 = 136446466;
              *(void *)(v75 + 4) = "strict_malloc";
              *(_WORD *)(v75 + 12) = 2048;
              *(void *)(v75 + 14) = 33;
            }
LABEL_77:
            sub_100070988();
            _NRLogAbortWithPack();
            goto LABEL_78;
          }
          id v67 = sub_100070988();
          int v68 = _NRLogIsLevelEnabled();

          id v4 = "strict_calloc";
          if (v68)
          {
            id v69 = sub_100070988();
            _NRLogWithArgs();
          }
          goto LABEL_72;
        }
      }
      id v60 = sub_100070988();
      int v61 = _NRLogIsLevelEnabled();

      if (v61)
      {
        id v62 = sub_100070988();
        _NRLogWithArgs();
      }
      uint64_t v7 = (void *)_os_log_pack_size();
      a1 = (char *)block - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v63 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v63 = 136446210;
      *(void *)(v63 + 4) = "strict_calloc";
      goto LABEL_77;
    }
    uint64_t v2 = (uint64_t)block;
    uint64_t v8 = 8 * v48;
    memptr[0] = 0;
    if (!malloc_type_posix_memalign(memptr, 8uLL, 8 * v48, 0xD5FEC036uLL) && memptr[0])
    {
      *(void **)(a1 + 1943) = memptr[0];
      goto LABEL_52;
    }
    id v82 = sub_100070988();
    int v83 = _NRLogIsLevelEnabled();

    if (v83)
    {
      id v84 = sub_100070988();
      _NRLogWithArgs();
    }
    uint64_t v7 = (void *)_os_log_pack_size();
    a1 = (char *)block - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v70 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v70 = 136446722;
    *(void *)(v70 + 4) = "strict_memalign";
LABEL_86:
    *(_WORD *)(v70 + 12) = 2048;
    uint64_t v71 = 8;
    goto LABEL_73;
  }
  id v57 = (void *)_NRCopyLogObjectForNRUUID();
  int v58 = _NRLogIsLevelEnabled();

  if (v58)
  {
    id v59 = (void *)_NRCopyLogObjectForNRUUID();
    id v90 = [a1 copyDescription];
    _NRLogWithArgs();
  }
LABEL_28:
}

void sub_100085CD0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 1143);
  if (v2)
  {
    if (*(unsigned char *)(a1 + 227))
    {
      *(unsigned char *)(a1 + 227) = 0;
      ++*(void *)(a1 + 1159);
      if (gNRPacketLoggingEnabled)
      {
        int v10 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v12 = (void *)_NRCopyLogObjectForNRUUID();
          id v22 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(a1 + 1143));
      uint64_t v2 = *(NSObject **)(a1 + 1143);
    }
    dispatch_source_cancel(v2);
    id v3 = *(void **)(a1 + 1143);
    *(void *)(a1 + 1143) = 0;
  }
  id v4 = *(NSObject **)(a1 + 1151);
  if (v4)
  {
    if (*(unsigned char *)(a1 + 228))
    {
      *(unsigned char *)(a1 + 228) = 0;
      ++*(void *)(a1 + 1167);
      if (gNRPacketLoggingEnabled)
      {
        uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
        int v14 = _NRLogIsLevelEnabled();

        if (v14)
        {
          long long v15 = (void *)_NRCopyLogObjectForNRUUID();
          id v23 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(a1 + 1151));
      id v4 = *(NSObject **)(a1 + 1151);
    }
    dispatch_source_cancel(v4);
    BOOL v5 = *(void **)(a1 + 1151);
    *(void *)(a1 + 1151) = 0;
  }
  if (*(unsigned char *)(a1 + 216) && *(void *)(a1 + 695))
  {
    *(unsigned char *)(a1 + 216) = 0;
    ++*(void *)(a1 + 711);
    if (gNRPacketLoggingEnabled)
    {
      int v16 = (void *)_NRCopyLogObjectForNRUUID();
      int v17 = _NRLogIsLevelEnabled();

      if (v17)
      {
        int v18 = (void *)_NRCopyLogObjectForNRUUID();
        id v24 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    dispatch_resume(*(dispatch_object_t *)(a1 + 695));
  }
  if (*(unsigned char *)(a1 + 214) && *(void *)(a1 + 551))
  {
    *(unsigned char *)(a1 + 214) = 0;
    ++*(void *)(a1 + 567);
    if (gNRPacketLoggingEnabled)
    {
      int v19 = (void *)_NRCopyLogObjectForNRUUID();
      int v20 = _NRLogIsLevelEnabled();

      if (v20)
      {
        id v21 = (void *)_NRCopyLogObjectForNRUUID();
        id v25 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    dispatch_resume(*(dispatch_object_t *)(a1 + 551));
  }
  *(void *)(a1 + 1119) = 0;
  *(void *)(a1 + 1135) = 0;
  *(void *)(a1 + 1127) = 0;
  *(unsigned char *)(a1 + 229) = 0;
  *(void *)(a1 + 1159) = 0;
  *(void *)(a1 + 1167) = 0;
  uint64_t v6 = *(void **)(a1 + 1895);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 1895) = 0;
  }
  uint64_t v7 = *(void **)(a1 + 1943);
  if (v7)
  {
    free(v7);
    *(void *)(a1 + 1943) = 0;
  }
  uint64_t v8 = *(void **)(a1 + 1319);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 1319) = 0;
  }
  *(_DWORD *)(a1 + 323) = 0;
  *(_DWORD *)(a1 + 319) = 0;
  id v9 = *(void **)(a1 + 1191);
  if (v9)
  {
    free(v9);
    *(void *)(a1 + 1191) = 0;
  }
  *(_DWORD *)(a1 + 323) = 0;
  *(_DWORD *)(a1 + 299) = 0;
}

uint64_t sub_10008613C(void *a1)
{
  int v2 = os_channel_attr_get();
  id v3 = (void *)_NRCopyLogObjectForNRUUID();
  if (v2)
  {
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_88;
    }
    return 0;
  }
  int v5 = _NRLogIsLevelEnabled();

  if (v5)
  {
    uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
    id v102 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v7 = os_channel_attr_get();
  uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
  if (v7)
  {
    int v9 = _NRLogIsLevelEnabled();

    if (v9) {
      goto LABEL_88;
    }
    return 0;
  }
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    char v11 = (void *)_NRCopyLogObjectForNRUUID();
    id v103 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v12 = os_channel_attr_get();
  uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
  if (v12)
  {
    int v14 = _NRLogIsLevelEnabled();

    if (v14) {
      goto LABEL_88;
    }
    return 0;
  }
  int v15 = _NRLogIsLevelEnabled();

  if (v15)
  {
    int v16 = (void *)_NRCopyLogObjectForNRUUID();
    id v104 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v17 = os_channel_attr_get();
  int v18 = (void *)_NRCopyLogObjectForNRUUID();
  if (v17)
  {
    int v19 = _NRLogIsLevelEnabled();

    if (v19) {
      goto LABEL_88;
    }
    return 0;
  }
  int v20 = _NRLogIsLevelEnabled();

  if (v20)
  {
    id v21 = (void *)_NRCopyLogObjectForNRUUID();
    id v105 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v22 = os_channel_attr_get();
  id v23 = (void *)_NRCopyLogObjectForNRUUID();
  if (v22)
  {
    int v24 = _NRLogIsLevelEnabled();

    if (v24) {
      goto LABEL_88;
    }
    return 0;
  }
  int v25 = _NRLogIsLevelEnabled();

  if (v25)
  {
    id v26 = (void *)_NRCopyLogObjectForNRUUID();
    id v106 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v27 = os_channel_attr_get();
  int v28 = (void *)_NRCopyLogObjectForNRUUID();
  if (v27)
  {
    int v29 = _NRLogIsLevelEnabled();

    if (v29) {
      goto LABEL_88;
    }
    return 0;
  }
  int v30 = _NRLogIsLevelEnabled();

  if (v30)
  {
    uintptr_t v31 = (void *)_NRCopyLogObjectForNRUUID();
    id v107 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v32 = os_channel_attr_get();
  int v33 = (void *)_NRCopyLogObjectForNRUUID();
  if (v32)
  {
    int v34 = _NRLogIsLevelEnabled();

    if (v34) {
      goto LABEL_88;
    }
    return 0;
  }
  int v35 = _NRLogIsLevelEnabled();

  if (v35)
  {
    id v36 = (void *)_NRCopyLogObjectForNRUUID();
    id v108 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v37 = os_channel_attr_get();
  dispatch_source_t v38 = (void *)_NRCopyLogObjectForNRUUID();
  if (v37)
  {
    int v39 = _NRLogIsLevelEnabled();

    if (v39) {
      goto LABEL_88;
    }
    return 0;
  }
  int v40 = _NRLogIsLevelEnabled();

  if (v40)
  {
    uint64_t v41 = (void *)_NRCopyLogObjectForNRUUID();
    id v109 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v42 = os_channel_attr_get();
  dispatch_source_t v43 = (void *)_NRCopyLogObjectForNRUUID();
  if (v42)
  {
    int v44 = _NRLogIsLevelEnabled();

    if (v44) {
      goto LABEL_88;
    }
    return 0;
  }
  int v45 = _NRLogIsLevelEnabled();

  if (v45)
  {
    int v46 = (void *)_NRCopyLogObjectForNRUUID();
    id v110 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v47 = os_channel_attr_get();
  uint64_t v48 = (void *)_NRCopyLogObjectForNRUUID();
  if (v47)
  {
    int v49 = _NRLogIsLevelEnabled();

    if (v49) {
      goto LABEL_88;
    }
    return 0;
  }
  int v50 = _NRLogIsLevelEnabled();

  if (v50)
  {
    id v51 = (void *)_NRCopyLogObjectForNRUUID();
    id v111 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v52 = os_channel_attr_get();
  long long v53 = (void *)_NRCopyLogObjectForNRUUID();
  if (v52)
  {
    int v54 = _NRLogIsLevelEnabled();

    if (v54) {
      goto LABEL_88;
    }
    return 0;
  }
  int v55 = _NRLogIsLevelEnabled();

  if (v55)
  {
    int v56 = (void *)_NRCopyLogObjectForNRUUID();
    id v112 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v57 = os_channel_attr_get();
  int v58 = (void *)_NRCopyLogObjectForNRUUID();
  if (v57)
  {
    int v59 = _NRLogIsLevelEnabled();

    if (v59) {
      goto LABEL_88;
    }
    return 0;
  }
  int v60 = _NRLogIsLevelEnabled();

  if (v60)
  {
    int v61 = (void *)_NRCopyLogObjectForNRUUID();
    id v113 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v62 = os_channel_attr_get();
  uint64_t v63 = (void *)_NRCopyLogObjectForNRUUID();
  if (v62)
  {
    int v64 = _NRLogIsLevelEnabled();

    if (v64) {
      goto LABEL_88;
    }
    return 0;
  }
  int v65 = _NRLogIsLevelEnabled();

  if (v65)
  {
    id v66 = (void *)_NRCopyLogObjectForNRUUID();
    id v114 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v67 = os_channel_attr_get();
  int v68 = (void *)_NRCopyLogObjectForNRUUID();
  if (v67)
  {
    int v69 = _NRLogIsLevelEnabled();

    if (v69) {
      goto LABEL_88;
    }
    return 0;
  }
  int v70 = _NRLogIsLevelEnabled();

  if (v70)
  {
    uint64_t v71 = (void *)_NRCopyLogObjectForNRUUID();
    id v115 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v72 = os_channel_attr_get();
  int v73 = (void *)_NRCopyLogObjectForNRUUID();
  if (v72)
  {
    int v74 = _NRLogIsLevelEnabled();

    if (v74) {
      goto LABEL_88;
    }
    return 0;
  }
  int v75 = _NRLogIsLevelEnabled();

  if (v75)
  {
    int v76 = (void *)_NRCopyLogObjectForNRUUID();
    id v116 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v77 = os_channel_attr_get();
  BOOL v78 = (void *)_NRCopyLogObjectForNRUUID();
  if (v77)
  {
    int v79 = _NRLogIsLevelEnabled();

    if (v79) {
      goto LABEL_88;
    }
    return 0;
  }
  int v80 = _NRLogIsLevelEnabled();

  if (v80)
  {
    id v81 = (void *)_NRCopyLogObjectForNRUUID();
    id v117 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v82 = os_channel_attr_get();
  int v83 = (void *)_NRCopyLogObjectForNRUUID();
  if (v82)
  {
    int v84 = _NRLogIsLevelEnabled();

    if (v84) {
      goto LABEL_88;
    }
    return 0;
  }
  int v85 = _NRLogIsLevelEnabled();

  if (v85)
  {
    int v86 = (void *)_NRCopyLogObjectForNRUUID();
    id v118 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v87 = os_channel_attr_get();
  uint64_t v88 = (void *)_NRCopyLogObjectForNRUUID();
  if (v87)
  {
    int v89 = _NRLogIsLevelEnabled();

    if (v89)
    {
LABEL_88:
      id v90 = (void *)_NRCopyLogObjectForNRUUID();
      id v91 = [a1 copyDescription];
      _NRLogWithArgs();
    }
    return 0;
  }
  int v93 = _NRLogIsLevelEnabled();

  if (v93)
  {
    id v94 = (void *)_NRCopyLogObjectForNRUUID();
    id v119 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v95 = os_channel_attr_get();
  int v96 = (void *)_NRCopyLogObjectForNRUUID();
  if (v95)
  {
    int v97 = _NRLogIsLevelEnabled();

    if (v97)
    {
      int v98 = (void *)_NRCopyLogObjectForNRUUID();
      id v101 = [a1 copyDescription];
      _NRLogWithArgs();
    }
    return 0;
  }
  int v99 = _NRLogIsLevelEnabled();

  if (v99)
  {
    id v100 = (void *)_NRCopyLogObjectForNRUUID();
    id v120 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  return 1;
}

void sub_100087110(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v16 = (id)_NRCopyLogObjectForNRUUID();
      id v13 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 1503);
    id v3 = *(unsigned char **)(a1 + 32);
    if (v3[229])
    {
      if (gNRPacketLoggingEnabled)
      {
        int v10 = (void *)_NRCopyLogObjectForNRUUID();
        int v11 = _NRLogIsLevelEnabled();

        id v3 = *(unsigned char **)(a1 + 32);
        if (v11)
        {
          int v12 = (void *)_NRCopyLogObjectForNRUUID();
          id v15 = [*(id *)(a1 + 32) copyDescription];
          _NRLogWithArgs();

          id v3 = *(unsigned char **)(a1 + 32);
        }
      }
      sub_10008AAF4(v3);
    }
    else
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7)
      {
        uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
        id v14 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
      int v9 = *(unsigned __int8 **)(a1 + 32);
      sub_10008A830(v9, 1);
    }
  }
}

void sub_100087364(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    int v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = (id)_NRCopyLogObjectForNRUUID();
      id v10 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 1511);
    if (gNRPacketLoggingEnabled)
    {
      int v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      if (v8)
      {
        int v9 = (void *)_NRCopyLogObjectForNRUUID();
        id v11 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    sub_100087864(*(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 527));
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 671);
    sub_100087864((void *)v3, v4);
  }
}

void sub_100087528(uint64_t a1)
{
  uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    id v7 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  sub_100087864(*(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 671));
  objc_initWeak(&location, *(id *)(a1 + 32));
  dispatch_time_t v5 = dispatch_time(0x8000000000000000, 10000000000);
  uint64_t v6 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008A764;
  block[3] = &unk_1001C88B8;
  objc_copyWeak(&v10, &location);
  id v9 = *(id *)(a1 + 40);
  dispatch_after(v5, v6, block);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_100087698(uint64_t a1, void *a2)
{
  id v16 = a2;
  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  [v3 setObject:v16 forKeyedSubscript:@"channel-id"];
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  [v4 setObject:v3 forKeyedSubscript:@"deactivate-datapath"];
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v5 = (id)qword_1001F4A18;
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = (void *)*((void *)v5 + 27);
    id v9 = v4;
    id v10 = [v8 objectForKeyedSubscript:v7];
    sub_1000FACEC((uint64_t)v10, v9);
  }
  id v11 = [v16 integerValue];
  if (v11 == (id)3)
  {
    *(unsigned char *)(a1 + 249) = 0;
  }
  else if (v11 == (id)2)
  {
    *(unsigned char *)(a1 + 248) = 0;
  }
  else if (v11 == (id)1)
  {
    *(unsigned char *)(a1 + 247) = 0;
  }
  else
  {
    id v12 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v14 = (void *)_NRCopyLogObjectForNRUUID();
      id v15 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_100087864(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (uint64_t)v3;
  if (v3[16] == 255)
  {
    uint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = (void *)_NRCopyLogObjectForNRUUID();
      id v10 = [(id)v4 copyDescription];
      goto LABEL_10;
    }
    goto LABEL_252;
  }
  if (!*(void *)(v3 + 1111))
  {
    sub_100071414(v3, a2);
    goto LABEL_252;
  }
  if (!*(void *)(v3 + 1135))
  {
    if (v3[246]) {
      goto LABEL_252;
    }
    id v11 = (void *)_NRCopyLogObjectForNRUUID();
    int v12 = _NRLogIsLevelEnabled();

    if (!v12) {
      goto LABEL_252;
    }
LABEL_14:
    id v9 = (void *)_NRCopyLogObjectForNRUUID();
    id v10 = [(id)v4 copyDescription];
    _NRLogWithArgs();
    goto LABEL_15;
  }
  uint64_t v254 = *(void *)(v3 + 527);
  uint64_t v255 = a2;
  if (v254 == a2)
  {
    v251 = sub_100074918;
    id v245 = sub_100074D88;
    if (!gNRPacketLoggingEnabled
      || (int v187 = (void *)_NRCopyLogObjectForNRUUID(),
          int v188 = _NRLogIsLevelEnabled(),
          v187,
          v251 = sub_100074918,
          id v245 = sub_100074D88,
          !v188))
    {
      id v13 = &OBJC_IVAR___NRLinkBluetooth__nexusVOInputRing;
      id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusVO;
      id v15 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusVO;
      id v16 = &OBJC_IVAR___NRLinkBluetooth__syncNexusVOInput;
      goto LABEL_20;
    }
    int v189 = (void *)_NRCopyLogObjectForNRUUID();
    id v190 = [(id)v4 copyDescription];
    _NRLogWithArgs();
    id v13 = &OBJC_IVAR___NRLinkBluetooth__nexusVOInputRing;
    id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusVO;
    id v15 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusVO;
    id v16 = &OBJC_IVAR___NRLinkBluetooth__syncNexusVOInput;
    v251 = sub_100074918;
    uint64_t v191 = sub_100074D88;
  }
  else
  {
    if (*(void *)(v3 + 671) != a2)
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      int v6 = _NRLogIsLevelEnabled();

      if (!v6) {
        goto LABEL_252;
      }
      goto LABEL_14;
    }
    v251 = sub_100074A34;
    id v245 = sub_100074EA0;
    if (!gNRPacketLoggingEnabled
      || (int v199 = (void *)_NRCopyLogObjectForNRUUID(),
          int v200 = _NRLogIsLevelEnabled(),
          v199,
          v251 = sub_100074A34,
          id v245 = sub_100074EA0,
          !v200))
    {
      id v13 = &OBJC_IVAR___NRLinkBluetooth__nexusVIInputRing;
      id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusVI;
      id v15 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusVI;
      id v16 = &OBJC_IVAR___NRLinkBluetooth__syncNexusVIInput;
      goto LABEL_20;
    }
    int v189 = (void *)_NRCopyLogObjectForNRUUID();
    id v190 = [(id)v4 copyDescription];
    _NRLogWithArgs();
    id v13 = &OBJC_IVAR___NRLinkBluetooth__nexusVIInputRing;
    id v14 = &OBJC_IVAR___NRLinkBluetooth__packetsFromNexusVI;
    id v15 = &OBJC_IVAR___NRLinkBluetooth__bytesFromNexusVI;
    id v16 = &OBJC_IVAR___NRLinkBluetooth__syncNexusVIInput;
    v251 = sub_100074A34;
    uint64_t v191 = sub_100074EA0;
  }
  id v245 = v191;

LABEL_20:
  char v246 = 0;
  uint64_t v243 = *v15;
  uint64_t v242 = *v14;
  uint64_t v244 = *v16;
  uint64_t v17 = *(void *)(v4 + *v13);
  int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  uint64_t v258 = v17;
  while (2)
  {
    uint64_t v19 = 0;
    uint64_t v252 = 0;
    uint64_t v20 = 0;
    object_address = 0;
    uint64_t v260 = 0;
    uint64_t v256 = 0;
    uint64_t v21 = 0;
    uint64_t v279 = 0;
    uint64_t v280 = 0;
    uint64_t v262 = *(void *)(v4 + 951);
    while (1)
    {
      while (1)
      {
        uint64_t v22 = v20;
        *(void *)(v4 + 1935) = 2;
        long long v265 = 0u;
        long long v266 = 0u;
        long long v263 = 0u;
        long long v264 = 0u;
        if (!v17) {
          break;
        }
        uint64_t next_slot = os_channel_get_next_slot();
        if (!next_slot || v254 != v255 || !*(unsigned char *)(v4 + 225)) {
          break;
        }
        uint64_t v24 = next_slot;
        if ((void)v264)
        {
          BOOL v25 = 0;
          if (WORD1(v263))
          {
            if (isPacketValidIPv6()) {
              BOOL v25 = getDSCPFromPacket() == 46 && WORD1(v263) < 0x2A4u;
            }
            else {
              BOOL v25 = 0;
            }
          }
        }
        else
        {
          BOOL v25 = 0;
        }
        if (gNRPacketLoggingEnabled)
        {
          getESPSequenceNumberFromPacket();
          if (gNRPacketLoggingEnabled) {
            getESPSPIFromPacket();
          }
        }
        if (!v25)
        {
          int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          break;
        }
        uint64_t v49 = os_channel_get_next_slot();
        if (v49)
        {
          uint64_t v50 = v49;
          if (!*(unsigned char *)(v4 + 224) && *(void *)(v4 + 1071))
          {
            uint64_t v51 = v49;
            *(unsigned char *)(v4 + 224) = 1;
            ++*(void *)(v4 + 1087);
            if (gNRPacketLoggingEnabled)
            {
              int v95 = (void *)_NRCopyLogObjectForNRUUID();
              int v261 = _NRLogIsLevelEnabled();

              if (v261)
              {
                int v96 = (void *)_NRCopyLogObjectForNRUUID();
                id v234 = [(id)v4 copyDescription];
                _NRLogWithArgs();
              }
            }
            dispatch_suspend(*(dispatch_object_t *)(v4 + 1071));
            uint64_t v50 = v51;
          }
          uint64_t v257 = v50;
          os_channel_slot_get_packet();
          os_packet_get_next_buflet();
          os_buflet_get_object_address();
          if (os_buflet_get_data_limit() < 0x10000)
          {
            *(void *)(v4 + 1399) += nrPacketToTLV();
            *(void *)(v4 + v243) += WORD1(v263);
            ++*(void *)(v4 + v242);
            *(void *)(v4 + 1935) |= 0x10uLL;
            if (gNRPacketLoggingEnabled)
            {
              id v92 = (void *)_NRCopyLogObjectForNRUUID();
              int v93 = _NRLogIsLevelEnabled();

              if (v93)
              {
                id v94 = (void *)_NRCopyLogObjectForNRUUID();
                id v221 = [(id)v4 copyDescription];
                _NRLogWithArgs();
              }
            }
            os_buflet_set_data_length();
            uint64_t v280 = ++v262;
            os_packet_set_flow_uuid();
            int v52 = os_packet_finalize();
            if (!v52)
            {
              LODWORD(v38) = 24;
              uint64_t v17 = v258;
              uint64_t v252 = v257;
              uint64_t v256 = v24;
              int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
              int v44 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
              uint64_t v20 = v22;
              goto LABEL_97;
            }
            int v194 = v52;
            id v218 = sub_100070988();
            int v219 = _NRLogIsLevelEnabled();

            if (v219)
            {
              id v220 = sub_100070988();
              _NRLogWithArgs();
            }
LABEL_290:
            _os_log_pack_size();
            __chkstk_darwin();
            __error();
            uint64_t v198 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v198 = 136446466;
            *(void *)(v198 + 4) = "NRLinkNexusToLinkLoopUrgent";
            *(_WORD *)(v198 + 12) = 1024;
            *(_DWORD *)(v198 + 14) = v194;
            goto LABEL_271;
          }
          id v184 = sub_100070988();
          int v185 = _NRLogIsLevelEnabled();

          if (v185)
          {
            id v186 = sub_100070988();
            _NRLogWithArgs();
          }
          goto LABEL_270;
        }
        int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        uint64_t v20 = v22;
        if (*(unsigned char *)(v4 + 224) && *(void *)(v4 + 1071))
        {
          *(unsigned char *)(v4 + 224) = 0;
          ++*(void *)(v4 + 1087);
          if (gNRPacketLoggingEnabled)
          {
            int v97 = (void *)_NRCopyLogObjectForNRUUID();
            int v98 = _NRLogIsLevelEnabled();

            if (v98)
            {
              int v99 = (void *)_NRCopyLogObjectForNRUUID();
              id v235 = [(id)v4 copyDescription];
              _NRLogWithArgs();
            }
          }
          dispatch_resume(*(dispatch_object_t *)(v4 + 1071));
          int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        }
        v251(v4);
        *(void *)(v4 + 1935) |= 4uLL;
        LODWORD(v38) = 25;
        int v44 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_97:
        if (v38 && v38 != 24)
        {
          if (v38 == 25) {
            goto LABEL_170;
          }
          goto LABEL_22;
        }
      }
      if ((_WORD)v19)
      {
        *(void *)(v4 + 1935) |= 0x40uLL;
        if (!v21) {
          goto LABEL_163;
        }
        uint64_t v20 = v22;
        goto LABEL_45;
      }
      uint64_t v26 = os_channel_get_next_slot();
      if (!v26) {
        break;
      }
      uint64_t v21 = v26;
      *(void *)(v4 + 1935) |= 0x20uLL;
      os_channel_slot_get_packet();
      os_packet_get_next_buflet();
      object_address = (char *)os_buflet_get_object_address();
      uint64_t data_limit = os_buflet_get_data_limit();
      if (data_limit >= 0x10000)
      {
        id v157 = sub_100070988();
        int v158 = _NRLogIsLevelEnabled();

        if (v158)
        {
          id v159 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_270;
      }
      uint64_t v20 = data_limit;
      uint64_t v28 = v262;
      if (v260 != v21) {
        uint64_t v28 = v262 + 1;
      }
      uint64_t v262 = v28;
LABEL_45:
      if (!*(unsigned char *)(v4 + 228) && *(void *)(v4 + 1151))
      {
        *(unsigned char *)(v4 + 228) = 1;
        ++*(void *)(v4 + 1167);
        if (gNRPacketLoggingEnabled)
        {
          int v80 = (void *)_NRCopyLogObjectForNRUUID();
          int v81 = _NRLogIsLevelEnabled();

          if (v81)
          {
            int v82 = (void *)_NRCopyLogObjectForNRUUID();
            id v232 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
        }
        dispatch_suspend(*(dispatch_object_t *)(v4 + 1151));
        int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      }
      unsigned int v29 = *(_DWORD *)(v4 + 299);
      uint64_t v30 = *(unsigned int *)(v4 + v18[270]);
      if (v29 <= v30)
      {
        uint64_t v17 = v258;
        if (!v258)
        {
LABEL_206:
          if (*(unsigned char *)(v4 + 16) != 8)
          {
            *(void *)(v4 + 1935) |= 0x400uLL;
            int v44 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            goto LABEL_170;
          }
          id v110 = (void *)_NRCopyLogObjectForNRUUID();
          int v111 = _NRLogIsLevelEnabled();

          if (v111)
          {
            id v112 = (void *)_NRCopyLogObjectForNRUUID();
            id v231 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
LABEL_169:
          int v44 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          goto LABEL_170;
        }
LABEL_62:
        uint64_t v34 = os_channel_get_next_slot();
        if (!v34)
        {
          v245(v4);
          *(void *)(v4 + 1935) |= 0x800uLL;
          LODWORD(v38) = 25;
          char v246 = 1;
          goto LABEL_96;
        }
        uint64_t v35 = v34;
        v251(v4);
        uint64_t v250 = v19;
        if (gNRPacketLoggingEnabled)
        {
          getESPSequenceNumberFromPacket();
          if (gNRPacketLoggingEnabled)
          {
            getESPSPIFromPacket();
            if (gNRPacketLoggingEnabled)
            {
              int v83 = (void *)_NRCopyLogObjectForNRUUID();
              int v84 = _NRLogIsLevelEnabled();

              if (v84)
              {
                int v85 = (void *)_NRCopyLogObjectForNRUUID();
                id v223 = [(id)v4 copyDescription];
                _NRLogWithArgs();
              }
            }
          }
        }
        unsigned int v253 = nrMaxTLVLengthForPacket();
        long long v277 = 0u;
        long long v278 = 0u;
        long long v275 = 0u;
        long long v276 = 0u;
        long long v273 = 0u;
        long long v274 = 0u;
        long long v271 = 0u;
        long long v272 = 0u;
        long long v269 = 0u;
        long long v270 = 0u;
        long long v267 = 0u;
        long long v268 = 0u;
        long long v265 = 0u;
        long long v266 = 0u;
        long long v263 = 0u;
        long long v264 = 0u;
        if ((unsigned __int16)v20 <= (unsigned __int16)v19)
        {
          unsigned int v36 = 0;
          unsigned int v37 = 0;
        }
        else
        {
          *(void *)&long long v263 = &object_address[(unsigned __int16)v19];
          unsigned int v36 = (unsigned __int16)v20 - (unsigned __int16)v19;
          DWORD2(v263) = v36;
          unsigned int v37 = 1;
        }
        uint64_t v39 = v260;
        if (v36 < v253)
        {
          uint64_t v248 = v35;
          unsigned int v247 = v20;
          uint64_t v40 = v37;
          uint64_t v41 = (unsigned int *)&v263 + 4 * v37 + 2;
          while (os_channel_get_next_slot())
          {
            os_channel_slot_get_packet();
            os_packet_get_next_buflet();
            uint64_t v42 = os_buflet_get_object_address();
            unsigned int v43 = os_buflet_get_data_limit();
            if (v43 >= 0x10000)
            {
              id v166 = sub_100070988();
              int v167 = _NRLogIsLevelEnabled();

              if (v167)
              {
                id v168 = sub_100070988();
                _NRLogWithArgs();
              }
              goto LABEL_270;
            }
            *((void *)v41 - 1) = v42;
            if (!v43)
            {
              id v169 = sub_100070988();
              int v170 = _NRLogIsLevelEnabled();

              if (v170)
              {
                id v171 = sub_100070988();
                _NRLogWithArgs();
              }
              goto LABEL_270;
            }
            unsigned int *v41 = v43;
            *(void *)(v4 + 1935) |= 0x1000uLL;
            if (v40 == 15)
            {
              IOVecid String = (void *)createIOVecString();
              sub_100074894((void *)v4, @"NtL-U not enough ioVecs %@ for %u", v54, v55, v56, v57, v58, v59, (uint64_t)IOVecString);

              LODWORD(v38) = 1;
              uint64_t v17 = v258;
              int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
              int v44 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
              uint64_t v20 = v247;
              uint64_t v19 = v250;
              goto LABEL_97;
            }
            ++v40;
            v36 += v43;
            v41 += 4;
            if (v36 >= v253) {
              break;
            }
          }
          uint64_t v17 = v258;
          uint64_t v39 = v260;
          uint64_t v20 = v247;
          uint64_t v35 = v248;
        }
        uint64_t v260 = v39;
        if (v36 < v253)
        {
          *(void *)(v4 + 1935) |= 0x2000uLL;
          uint64_t v19 = v250;
          if (*(unsigned char *)(v4 + 228))
          {
            int v44 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            if (*(void *)(v4 + 1151))
            {
              *(unsigned char *)(v4 + 228) = 0;
              ++*(void *)(v4 + 1167);
              if (gNRPacketLoggingEnabled)
              {
                int v89 = (void *)_NRCopyLogObjectForNRUUID();
                int v90 = _NRLogIsLevelEnabled();

                if (v90)
                {
                  id v91 = (void *)_NRCopyLogObjectForNRUUID();
                  id v233 = [(id)v4 copyDescription];
                  _NRLogWithArgs();
                }
              }
              dispatch_resume(*(dispatch_object_t *)(v4 + 1151));
            }
            LODWORD(v38) = 25;
            int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            goto LABEL_97;
          }
          LODWORD(v38) = 25;
          int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_96:
          int v44 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          goto LABEL_97;
        }
        if (!(void)v263)
        {
          id v176 = sub_100070988();
          int v177 = _NRLogIsLevelEnabled();

          if (v177)
          {
            id v178 = sub_100070988();
            id v239 = (void *)createIOVecString();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v179 = _os_log_pack_fill();
          uint64_t v180 = createIOVecString();
          *(_DWORD *)uint64_t v179 = 136446466;
          *(void *)(v179 + 4) = "NRLinkNexusToLinkLoopUrgent";
          *(_WORD *)(v179 + 12) = 2112;
          *(void *)(v179 + 14) = v180;
          goto LABEL_271;
        }
        unsigned int v45 = nrPacketToTLV();
        unsigned int v46 = v45;
        int v47 = *(unsigned __int8 *)v263;
        switch(*(unsigned char *)v263)
        {
          case 'd':
            uint64_t v48 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_ESP;
            goto LABEL_114;
          case 'e':
            uint64_t v48 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_ESP_ECT0;
            goto LABEL_114;
          case 'f':
            uint64_t v48 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_TCP;
            goto LABEL_114;
          case 'g':
            uint64_t v48 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_TCP_ECT0;
            goto LABEL_114;
          case 'h':
            uint64_t v48 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_ESP_ClassC;
            goto LABEL_114;
          case 'i':
            uint64_t v48 = &OBJC_IVAR___NRLinkBluetooth__sentKnownIPv6Hdr_ESP_ClassC_ECT0;
            goto LABEL_114;
          default:
            if (v47 == 2)
            {
              uint64_t v48 = &OBJC_IVAR___NRLinkBluetooth__sentUncompressedIP;
            }
            else
            {
              if (v47 != 3) {
                goto LABEL_115;
              }
              uint64_t v48 = &OBJC_IVAR___NRLinkBluetooth__sentEncapsulated6LoWPAN;
            }
LABEL_114:
            ++*(void *)(v4 + *v48);
LABEL_115:
            *(void *)(v4 + 1415) += v45;
            unsigned int v60 = (unsigned __int16)(v20 - v250);
            if (v45 <= v60)
            {
              uint64_t v19 = v250 + v45;
              goto LABEL_130;
            }
            uint64_t v249 = v35;
            *(void *)(v4 + 1935) |= 0x4000uLL;
            if (gNRPacketLoggingEnabled)
            {
              int v86 = (void *)_NRCopyLogObjectForNRUUID();
              int v87 = _NRLogIsLevelEnabled();

              if (v87)
              {
                uint64_t v88 = (void *)_NRCopyLogObjectForNRUUID();
                id v224 = [(id)v4 copyDescription];
                _NRLogWithArgs();
              }
            }
            uint64_t v280 = v262;
            os_buflet_set_data_length();
            os_packet_set_flow_uuid();
            int v61 = os_packet_finalize();
            unint64_t v62 = (unint64_t)&OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            if (v61)
            {
              int v201 = v61;
              id v215 = sub_100070988();
              int v216 = _NRLogIsLevelEnabled();

              if (v216)
              {
                id v217 = sub_100070988();
                _NRLogWithArgs();
              }
LABEL_296:
              uint64_t v4 = _os_log_pack_size();
              __chkstk_darwin();
              __error();
              uint64_t v205 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v205 = 136446466;
              *(void *)(v205 + 4) = "NRLinkNexusToLinkLoopUrgent";
              *(_WORD *)(v205 + 12) = 1024;
              *(_DWORD *)(v205 + 14) = v201;
              sub_100070988();
              _NRLogAbortWithPack();
LABEL_297:
              int v206 = (void *)_NRCopyLogObjectForNRUUID();
              int v207 = _NRLogIsLevelEnabled();

              if (v207)
              {
                id v208 = (void *)_NRCopyLogObjectForNRUUID();
                id v240 = [(id)v4 copyDescription];
                _NRLogWithArgs();
              }
LABEL_246:
              dispatch_resume(*(dispatch_object_t *)(v4 + *(int *)(v62 + 1424)));
              goto LABEL_247;
            }
            while (1)
            {
              uint64_t v63 = os_channel_get_next_slot();
              if (!v63) {
                break;
              }
              uint64_t v21 = v63;
              uint64_t v64 = v262;
              if (v260 != v63) {
                uint64_t v64 = v262 + 1;
              }
              uint64_t v262 = v64;
              os_channel_slot_get_packet();
              os_packet_get_next_buflet();
              object_address = (char *)os_buflet_get_object_address();
              uint64_t v65 = os_buflet_get_data_limit();
              if (v65 >= 0x10000)
              {
                id v163 = sub_100070988();
                int v164 = _NRLogIsLevelEnabled();

                if (v164)
                {
                  id v165 = sub_100070988();
                  _NRLogWithArgs();
                }
                goto LABEL_270;
              }
              uint64_t v20 = v65;
              unsigned int v66 = v65 + v60;
              if (v65 + v60 >= v46)
              {
                uint64_t v19 = v46 - v60;
                uint64_t v35 = v249;
LABEL_130:
                ++*(void *)(v4 + v242);
                *(void *)(v4 + v243) = *(void *)(v4 + v243);
                *(void *)(v4 + 1935) |= 0x10000uLL;
                uint64_t v38 = *(void *)(v4 + 1935);
                uint64_t v17 = v258;
                int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                if (!v38)
                {
                  uint64_t v260 = v21;
                  uint64_t v256 = v35;
                  int v44 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                  goto LABEL_97;
                }
                int v44 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                uint64_t v38 = *(void *)(v4 + 1943);
                if (v38)
                {
                  *(unsigned char *)(v4 + 259) %= *(unsigned char *)(v4 + 258);
                  uint64_t v71 = *(void *)(v4 + 1943);
                  int v72 = (void *)(v71 + 8 * *(unsigned __int8 *)(v4 + 259));
                  if ((unint64_t)(v72 + 1) > v71 + 8 * (unint64_t)*(unsigned __int8 *)(v4 + 258))
                  {
                    int v73 = (void *)_NRCopyLogObjectForNRUUID();
                    int v74 = _NRLogIsLevelEnabled();

                    if (v74)
                    {
                      int v75 = (void *)_NRCopyLogObjectForNRUUID();
                      id v229 = [(id)v4 copyDescription];
                      _NRLogWithArgs();
                    }
                    LODWORD(v38) = 0;
                    uint64_t v260 = v21;
                    uint64_t v256 = v35;
                    int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                    goto LABEL_97;
                  }
                  LODWORD(v38) = 0;
                  if ((v72 & 7) == 0)
                  {
                    *int v72 = *(void *)(v4 + 1935);
                    ++*(unsigned char *)(v4 + 259);
                    *(void *)(v4 + 1935) = 0;
                  }
                }
                uint64_t v260 = v21;
                uint64_t v256 = v35;
                goto LABEL_97;
              }
              *(void *)(v4 + 1935) |= 0x8000uLL;
              if (gNRPacketLoggingEnabled)
              {
                int v68 = (void *)_NRCopyLogObjectForNRUUID();
                int v69 = _NRLogIsLevelEnabled();

                if (v69)
                {
                  int v70 = (void *)_NRCopyLogObjectForNRUUID();
                  id v222 = [(id)v4 copyDescription];
                  _NRLogWithArgs();
                }
              }
              uint64_t v280 = v262;
              os_buflet_set_data_length();
              os_packet_set_flow_uuid();
              int v67 = os_packet_finalize();
              unsigned int v60 = v66;
              unint64_t v62 = 0x1001F0000;
              if (v67)
              {
                int v201 = v67;
                id v202 = sub_100070988();
                int v203 = _NRLogIsLevelEnabled();

                if (v203)
                {
                  id v204 = sub_100070988();
                  _NRLogWithArgs();
                }
                goto LABEL_296;
              }
            }
            id v160 = sub_100070988();
            int v161 = _NRLogIsLevelEnabled();

            if (v161)
            {
              id v162 = sub_100070988();
              _NRLogWithArgs();
            }
            break;
        }
        while (1)
        {
LABEL_270:
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v172 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v172 = 136446210;
          *(void *)(v172 + 4) = "NRLinkNexusToLinkLoopUrgent";
LABEL_271:
          sub_100070988();
          _NRLogAbortWithPack();
LABEL_272:
          id v173 = sub_100070988();
          int v174 = _NRLogIsLevelEnabled();

          if (v174)
          {
            id v175 = sub_100070988();
            _NRLogWithArgs();
          }
        }
      }
      unsigned int v31 = v29 - v30;
      if (v31 >= (unsigned __int16)(v20 - v19)) {
        unsigned int v32 = v20 - v19;
      }
      else {
        unsigned int v32 = v31;
      }
      memcpy(object_address, (const void *)(*(void *)(v4 + 1191) + v30), (unsigned __int16)v32);
      *(_DWORD *)(v4 + v18[270]) += (unsigned __int16)v32;
      *(void *)(v4 + 1415) += (unsigned __int16)v32;
      ++*(_DWORD *)(v4 + 295);
      *(void *)(v4 + 1935) |= 0x100uLL;
      if (gNRPacketLoggingEnabled)
      {
        int v76 = (void *)_NRCopyLogObjectForNRUUID();
        int v77 = _NRLogIsLevelEnabled();

        if (v77)
        {
          BOOL v78 = (void *)_NRCopyLogObjectForNRUUID();
          id v79 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
      }
      uint64_t v19 = v32 + v19;
      uint64_t v17 = v258;
      if ((unsigned __int16)v19 < (unsigned __int16)v20)
      {
        uint64_t v260 = v21;
        int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        if (!v258) {
          goto LABEL_206;
        }
        goto LABEL_62;
      }
      if ((unsigned __int16)v19 != (unsigned __int16)v20)
      {
        id v154 = sub_100070988();
        int v155 = _NRLogIsLevelEnabled();

        if (v155)
        {
          id v156 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_270;
      }
      os_buflet_set_data_length();
      uint64_t v280 = v262;
      os_packet_set_flow_uuid();
      int v33 = os_packet_finalize();
      if (v33)
      {
        int v194 = v33;
        id v195 = sub_100070988();
        int v196 = _NRLogIsLevelEnabled();

        if (v196)
        {
          id v197 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_290;
      }
      uint64_t v19 = 0;
      *(void *)(v4 + 1935) |= 0x200uLL;
      uint64_t v260 = v21;
      int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    }
    LODWORD(v19) = 0;
LABEL_163:
    LODWORD(v20) = v22;
    if (*(unsigned char *)(v4 + 228) && *(void *)(v4 + 1151))
    {
      *(unsigned char *)(v4 + 228) = 0;
      ++*(void *)(v4 + 1167);
      if (gNRPacketLoggingEnabled)
      {
        int v143 = (void *)_NRCopyLogObjectForNRUUID();
        int v144 = _NRLogIsLevelEnabled();

        if (v144)
        {
          uint64_t v145 = (void *)_NRCopyLogObjectForNRUUID();
          id v238 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(v4 + 1151));
    }
    v251(v4);
    *(void *)(v4 + 1935) |= 0x80uLL;
    if (!gNRPacketLoggingEnabled)
    {
      uint64_t v21 = 0;
      goto LABEL_169;
    }
    id v113 = (void *)_NRCopyLogObjectForNRUUID();
    int v114 = _NRLogIsLevelEnabled();

    int v44 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    if (v114)
    {
      id v115 = (void *)_NRCopyLogObjectForNRUUID();
      id v236 = [(id)v4 copyDescription];
      _NRLogWithArgs();
    }
    uint64_t v21 = 0;
LABEL_170:
    uint64_t v100 = v260;
    if (v260)
    {
      if (v21 != v260) {
        goto LABEL_272;
      }
      uint64_t v101 = 0x40000;
      if ((unsigned __int16)v19 != (unsigned __int16)v20 && (unsigned __int16)v19 != 0)
      {
        uint64_t v101 = 0x20000;
        unint64_t v62 = v19;
      }
      else
      {
        unint64_t v62 = v20;
      }
      *(void *)(v4 + 1935) |= v101;
      if (gNRPacketLoggingEnabled)
      {
        id v123 = (void *)_NRCopyLogObjectForNRUUID();
        int v124 = _NRLogIsLevelEnabled();

        if (v124)
        {
          int v125 = (void *)_NRCopyLogObjectForNRUUID();
          id v226 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
      }
      uint64_t v280 = v262;
      os_buflet_set_data_length();
      os_packet_set_flow_uuid();
      int v102 = os_packet_finalize();
      if (v102)
      {
        int v201 = v102;
        id v212 = sub_100070988();
        int v213 = _NRLogIsLevelEnabled();

        if (v213)
        {
          id v214 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_296;
      }
      unsigned int v103 = *(_DWORD *)(v4 + 299);
      unsigned int v104 = *(_DWORD *)(v4 + 303);
      if (v103 <= v104)
      {
        if (v103 != v104)
        {
          id v181 = sub_100070988();
          int v182 = _NRLogIsLevelEnabled();

          if (v182)
          {
            id v183 = sub_100070988();
            _NRLogWithArgs();
          }
          goto LABEL_270;
        }
        if (gNRPacketLoggingEnabled)
        {
          if (v103)
          {
            *(void *)(v4 + 1935) |= 0x100000uLL;
            id v150 = (void *)_NRCopyLogObjectForNRUUID();
            int v151 = _NRLogIsLevelEnabled();

            if (v151)
            {
              id v152 = (void *)_NRCopyLogObjectForNRUUID();
              id v153 = [(id)v4 copyDescription];
              _NRLogWithArgs();
            }
          }
        }
        *(_DWORD *)(v4 + 299) = 0;
      }
      else
      {
        *(void *)(v4 + 1935) |= 0x80000uLL;
        if (gNRPacketLoggingEnabled)
        {
          id v146 = (void *)_NRCopyLogObjectForNRUUID();
          int v147 = _NRLogIsLevelEnabled();

          if (v147)
          {
            id v148 = (void *)_NRCopyLogObjectForNRUUID();
            id v149 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
        }
        memmove(*(void **)(v4 + 1191), (const void *)(*(void *)(v4 + 1191) + *(unsigned int *)(v4 + 303)), (*(_DWORD *)(v4 + 299) - *(_DWORD *)(v4 + 303)));
        *(_DWORD *)(v4 + 299) -= *(_DWORD *)(v4 + 303);
      }
      *(_DWORD *)(v4 + 303) = 0;
      *(void *)(v4 + 1935) |= 0x200000uLL;
      uint64_t v100 = v260;
      if (gNRPacketLoggingEnabled)
      {
        uint64_t v126 = (void *)_NRCopyLogObjectForNRUUID();
        int v127 = _NRLogIsLevelEnabled();

        if (v127)
        {
          int v128 = (void *)_NRCopyLogObjectForNRUUID();
          id v227 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
        if (gNRPacketLoggingEnabled)
        {
          uint64_t v129 = +[NSDate date];
          uint64_t v130 = *(void **)(v4 + 1719);
          *(void *)(v4 + 1719) = v129;
        }
      }
      os_channel_advance_slot();
      os_channel_sync();
      ++*(void *)(v4 + 1463);
      if (gNRPacketLoggingEnabled)
      {
        int v131 = (void *)_NRCopyLogObjectForNRUUID();
        int v132 = _NRLogIsLevelEnabled();

        if (v132)
        {
          id v133 = (void *)_NRCopyLogObjectForNRUUID();
          id v237 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
      }
    }
    if (v252)
    {
      *(void *)(v4 + 1935) |= 0x800000uLL;
      if (gNRPacketLoggingEnabled)
      {
        id v116 = (void *)_NRCopyLogObjectForNRUUID();
        int v117 = _NRLogIsLevelEnabled();

        if (v117)
        {
          id v118 = (void *)_NRCopyLogObjectForNRUUID();
          id v225 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
        if (gNRPacketLoggingEnabled)
        {
          uint64_t v119 = +[NSDate date];
          id v120 = *(void **)(v4 + 1703);
          *(void *)(v4 + 1703) = v119;
        }
      }
      os_channel_advance_slot();
      os_channel_sync();
      ++*(void *)(v4 + 1447);
    }
    if (v256)
    {
      if (v17)
      {
        *(void *)(v4 + 1935) |= 0x1000000uLL;
        if (gNRPacketLoggingEnabled)
        {
          int v134 = (void *)_NRCopyLogObjectForNRUUID();
          int v135 = _NRLogIsLevelEnabled();

          if (v135)
          {
            id v136 = (void *)_NRCopyLogObjectForNRUUID();
            id v228 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
          if (gNRPacketLoggingEnabled)
          {
            uint64_t v137 = +[NSDate date];
            id v138 = *(void **)(v4 + 1663);
            *(void *)(v4 + 1663) = v137;
          }
        }
        os_channel_advance_slot();
        os_channel_sync();
        ++*(void *)(v4 + v244);
        if (gNRPacketLoggingEnabled)
        {
          id v139 = (void *)_NRCopyLogObjectForNRUUID();
          int v140 = _NRLogIsLevelEnabled();

          if (v140)
          {
LABEL_233:
            id v141 = (void *)_NRCopyLogObjectForNRUUID();
            id v142 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
        }
      }
      else
      {
        int v121 = (void *)_NRCopyLogObjectForNRUUID();
        int v122 = _NRLogIsLevelEnabled();

        if (v122) {
          goto LABEL_233;
        }
      }
    }
    *(void *)(v4 + 951) = v262;
    if (*(void *)(v4 + 1935) && *(void *)(v4 + v44[384]))
    {
      *(unsigned char *)(v4 + 259) %= *(unsigned char *)(v4 + 258);
      uint64_t v105 = *(void *)(v4 + v44[384]);
      id v106 = (void *)(v105 + 8 * *(unsigned __int8 *)(v4 + 259));
      if ((unint64_t)(v106 + 1) <= v105 + 8 * (unint64_t)*(unsigned __int8 *)(v4 + 258))
      {
        if ((v106 & 7) == 0)
        {
          *id v106 = *(void *)(v4 + 1935);
          ++*(unsigned char *)(v4 + 259);
          *(void *)(v4 + 1935) = 0;
        }
      }
      else
      {
        id v107 = (void *)_NRCopyLogObjectForNRUUID();
        int v108 = _NRLogIsLevelEnabled();

        if (v108)
        {
          id v109 = (void *)_NRCopyLogObjectForNRUUID();
          id v230 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
      }
    }
    LODWORD(v38) = 0;
    if (v256)
    {
      int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      goto LABEL_22;
    }
    int v18 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    if (v100 || v252)
    {
LABEL_22:
      if (v38) {
        goto LABEL_252;
      }
      continue;
    }
    break;
  }
  if (v246)
  {
    if (*(unsigned char *)(v4 + 216))
    {
      unint64_t v62 = (unint64_t)&OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      if (*(void *)(v4 + 695))
      {
        *(unsigned char *)(v4 + 216) = 0;
        ++*(void *)(v4 + 711);
        if (!gNRPacketLoggingEnabled) {
          goto LABEL_246;
        }
        goto LABEL_297;
      }
    }
LABEL_247:
    if (*(unsigned char *)(v4 + 214) && *(void *)(v4 + 551))
    {
      *(unsigned char *)(v4 + 214) = 0;
      ++*(void *)(v4 + 567);
      if (gNRPacketLoggingEnabled)
      {
        int v209 = (void *)_NRCopyLogObjectForNRUUID();
        int v210 = _NRLogIsLevelEnabled();

        if (v210)
        {
          v211 = (void *)_NRCopyLogObjectForNRUUID();
          id v241 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(v4 + 551));
    }
  }
  if (gNRPacketLoggingEnabled)
  {
    id v192 = (void *)_NRCopyLogObjectForNRUUID();
    int v193 = _NRLogIsLevelEnabled();

    if (v193)
    {
      id v9 = (void *)_NRCopyLogObjectForNRUUID();
      id v10 = [(id)v4 copyDescription];
LABEL_10:
      _NRLogWithArgs();
LABEL_15:
    }
  }
LABEL_252:
}

uint64_t sub_10008A764(uint64_t a1)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v13 = (uint64_t)WeakRetained;
    id v3 = *(id *)(WeakRetained + 1111);
    if (v3)
    {
      uint64_t v4 = *(void *)(v13 + 1111);
      uint64_t v5 = *(void *)(a1 + 32);

      if (v4 == v5 && !*(unsigned char *)(v13 + 229))
      {
        uint64_t v11 = *(void *)(v13 + 1863);
        if (v11) {
          *(unsigned char *)(v11 + 102) = 1;
        }
        sub_100074894((void *)v13, @"Did not receive prelude after %ds on urgent pipe", v13, v6, v7, v8, v9, v10, 10);
      }
    }
  }

  return _objc_release_x2();
}

void sub_10008A830(unsigned __int8 *a1, int a2)
{
  if (!a1) {
    return;
  }
  id v3 = &OBJC_IVAR___NRLinkBluetooth__urgentLinkInputRing;
  if (!a2) {
    id v3 = &OBJC_IVAR___NRLinkBluetooth__linkInputRing;
  }
  uint64_t v4 = &OBJC_IVAR___NRLinkBluetooth__linkChannel;
  if (a2) {
    uint64_t v4 = &OBJC_IVAR___NRLinkBluetooth__urgentLinkChannel;
  }
  if (!*(void *)&a1[*v3])
  {
    uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      return;
    }
LABEL_17:
    id v19 = (id)_NRCopyLogObjectForNRUUID();
    id v12 = [a1 copyDescription];
    _NRLogWithArgs();

    return;
  }
  if (!*(void *)&a1[*v4])
  {
    uint64_t v10 = (void *)_NRCopyLogObjectForNRUUID();
    int v11 = _NRLogIsLevelEnabled();

    if (!v11) {
      return;
    }
    goto LABEL_17;
  }
  if (a2)
  {
    uint64_t i = 0;
    while (1)
    {
      uint64_t next_slot = os_channel_get_next_slot();
      if (!next_slot) {
        break;
      }
      uint64_t v7 = next_slot;
      sub_100090980((uint64_t)a1, 0, 0, 1);
      if (a1[16] == 255) {
        goto LABEL_27;
      }
      uint64_t i = v7;
      if (a1[229]) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    for (uint64_t i = 0; ; uint64_t i = v14)
    {
      uint64_t v13 = os_channel_get_next_slot();
      if (!v13) {
        break;
      }
      uint64_t v14 = v13;
      sub_100090980((uint64_t)a1, 0, 0, 0);
      if (a1[16] == 255)
      {
LABEL_27:
        id v15 = (void *)_NRCopyLogObjectForNRUUID();
        int v16 = _NRLogIsLevelEnabled();

        if (v16)
        {
          uint64_t v17 = (void *)_NRCopyLogObjectForNRUUID();
          id v18 = [a1 copyDescription];
          _NRLogWithArgs();
        }
        return;
      }
    }
  }
  if (i) {
LABEL_25:
  }
    os_channel_advance_slot();
  os_channel_sync();
}

void sub_10008AAF4(void *a1)
{
  uint64_t v1 = a1;
  if (gNRPacketLoggingEnabled)
  {
    v353 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      v355 = (void *)_NRCopyLogObjectForNRUUID();
      id v492 = [(id)v1 copyDescription];
      _NRLogWithArgs();
    }
  }
  int v2 = *(unsigned __int8 *)(v1 + 16);
  if (v2 == 255)
  {
    id v3 = (void *)_NRCopyLogObjectForNRUUID();
    int v4 = _NRLogIsLevelEnabled();

    if (!v4) {
      goto LABEL_454;
    }
    goto LABEL_445;
  }
  if (!*(void *)(v1 + 1127))
  {
    v381 = (void *)_NRCopyLogObjectForNRUUID();
    int v382 = _NRLogIsLevelEnabled();

    if (!v382) {
      goto LABEL_454;
    }
LABEL_445:
    StringFromNRTLVType = (void *)_NRCopyLogObjectForNRUUID();
    id IOVecStringWithContents = [(id)v1 copyDescription];
    _NRLogWithArgs();
    goto LABEL_452;
  }
  if ((v2 - 1) < 2)
  {
    int v5 = *(unsigned __int8 *)(v1 + 229);
    uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
    if (v5)
    {
      int v7 = _NRLogIsLevelEnabled();

      if (!v7) {
        goto LABEL_454;
      }
    }
    else
    {
      int v303 = _NRLogIsLevelEnabled();

      if (!v303) {
        goto LABEL_454;
      }
    }
    goto LABEL_445;
  }
  uint64_t v502 = 0;
  uint64_t v503 = 0;
  v500[0] = v539;
  v500[1] = &v535;
  v501 = (char *)&v541 + 8;
  v505 = (char *)&v540 + 8;
  uint64_t v8 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  unint64_t v9 = 0x1001F0000;
  uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  uint64_t v513 = v1;
LABEL_14:
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v521 = 0;
  uint64_t v508 = 0;
  uint64_t v510 = 0;
  uint64_t v516 = 0;
  long long v531 = 0u;
  long long v532 = 0u;
  long long v529 = 0u;
  long long v530 = 0u;
  uint64_t v527 = 0;
  uint64_t v528 = 0;
  LODWORD(v515) = *(unsigned char *)(v1 + v8[464]) != 0;
  while (1)
  {
    while (1)
    {
LABEL_15:
      uint64_t v13 = 1887;
      *(void *)(v1 + 1887) = 4;
      uint64_t v519 = 1887;
      if ((_WORD)v11 && (unsigned __int16)v11 >= (unsigned __int16)v12)
      {
        if ((unsigned __int16)v11 != (unsigned __int16)v12)
        {
          id v350 = sub_100070988();
          int v351 = _NRLogIsLevelEnabled();

          if (v351)
          {
            id v352 = sub_100070988();
            _NRLogWithArgs();
          }
          goto LABEL_472;
        }
        *(void *)(v1 + 1887) = 12;
      }
      else if ((_WORD)v11)
      {
        *(void *)(v1 + 1887) = 36;
        if (!v516) {
          goto LABEL_361;
        }
        LODWORD(v522) = v12;
        goto LABEL_28;
      }
      uint64_t next_slot = os_channel_get_next_slot();
      uint64_t v13 = v519;
      *(void *)(v1 + v519) |= 0x10uLL;
      if (!next_slot)
      {
LABEL_361:
        if (*(unsigned char *)(v1 + 227) && *(void *)(v1 + 1143))
        {
          *(unsigned char *)(v1 + 227) = 0;
          ++*(void *)(v1 + 1159);
          if (gNRPacketLoggingEnabled)
          {
            long long v290 = (void *)_NRCopyLogObjectForNRUUID();
            int v291 = _NRLogIsLevelEnabled();

            if (v291)
            {
              long long v292 = (void *)_NRCopyLogObjectForNRUUID();
              id v489 = [(id)v1 copyDescription];
              _NRLogWithArgs();
            }
          }
          dispatch_resume(*(dispatch_object_t *)(v1 + 1143));
          uint64_t v13 = v519;
        }
        if (!*(unsigned char *)(v1 + 217) && *(void *)(v1 + 703))
        {
          *(unsigned char *)(v1 + 217) = 1;
          ++*(void *)(v1 + 719);
          if (gNRPacketLoggingEnabled)
          {
            v296 = (void *)_NRCopyLogObjectForNRUUID();
            int v297 = _NRLogIsLevelEnabled();

            if (v297)
            {
              v298 = (void *)_NRCopyLogObjectForNRUUID();
              id v491 = [(id)v1 copyDescription];
              _NRLogWithArgs();
            }
          }
          dispatch_suspend(*(dispatch_object_t *)(v1 + 703));
          uint64_t v13 = v519;
        }
        *(void *)(v1 + v13) |= 0x40uLL;
        goto LABEL_388;
      }
      uint64_t v516 = next_slot;
      os_channel_slot_get_packet();
      os_packet_get_next_buflet();
      uint64_t object_address = os_buflet_get_object_address();
      unsigned int data_offset = os_buflet_get_data_offset();
      unsigned int data_length = os_buflet_get_data_length();
      if (data_length >= 0x10000)
      {
        id v345 = sub_100070988();
        int v346 = _NRLogIsLevelEnabled();

        if (v346)
        {
          id v347 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_472;
      }
      LODWORD(v522) = data_length;
      uint64_t v521 = object_address + data_offset;
      os_packet_get_flow_uuid();
      uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      uint64_t v11 = 0;
      if (*(unsigned char *)(v1 + 245))
      {
        *(unsigned char *)(v1 + 245) = 0;
        LODWORD(v515) = 1;
      }
      else
      {
        LODWORD(v515) = v515 | BYTE2(v527);
      }
LABEL_28:
      if (!*(unsigned char *)(v1 + 227) && *(void *)(v1 + 1143))
      {
        *(unsigned char *)(v1 + 227) = 1;
        ++*(void *)(v1 + 1159);
        if (gNRPacketLoggingEnabled)
        {
          uint64_t v206 = v11;
          int v207 = (void *)_NRCopyLogObjectForNRUUID();
          int v208 = _NRLogIsLevelEnabled();

          uint64_t v11 = v206;
          if (v208)
          {
            int v209 = (void *)_NRCopyLogObjectForNRUUID();
            id v486 = [(id)v1 copyDescription];
            _NRLogWithArgs();

            uint64_t v11 = v206;
          }
        }
        dispatch_suspend(*(dispatch_object_t *)(v1 + 1143));
      }
      unsigned int v18 = *(_DWORD *)(v1 + *(int *)(v9 + 1548));
      if (v18 <= *(_DWORD *)(v1 + v10[386])) {
        break;
      }
      uint64_t v19 = v11;
      uint64_t v20 = *(unsigned int *)(v1 + v10[386]);
      unsigned int v21 = *(unsigned __int8 *)(*(void *)(v1 + 1319) + v20);
      if (*(unsigned char *)(*(void *)(v1 + 1319) + v20)) {
        goto LABEL_45;
      }
      while (1)
      {
        int v27 = (void *)_NRCopyLogObjectForNRUUID();
        int v28 = _NRLogIsLevelEnabled();

        if (v28)
        {
          unsigned int v29 = (void *)_NRCopyLogObjectForNRUUID();
          id v485 = [(id)v1 copyDescription];
          _NRLogWithArgs();
        }
        ++*(_DWORD *)(v1 + v10[386]);
        unsigned int v18 = *(_DWORD *)(v1 + *(int *)(v9 + 1548));
        uint64_t v30 = *(unsigned int *)(v1 + v10[386]);
        if (v18 <= v30) {
          break;
        }
        unsigned int v21 = *(unsigned __int8 *)(*(void *)(v1 + 1319) + v30);
        if (*(unsigned char *)(*(void *)(v1 + 1319) + v30))
        {
          uint64_t v11 = v19;
          uint64_t v20 = *(unsigned int *)(v1 + v10[386]);
          goto LABEL_45;
        }
      }
      if (v18 != v30)
      {
        id v415 = sub_100070988();
        int v416 = _NRLogIsLevelEnabled();

        if (v416)
        {
          id v417 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_472;
      }
      uint64_t v39 = (void *)_NRCopyLogObjectForNRUUID();
      int v40 = _NRLogIsLevelEnabled();

      uint64_t v11 = v19;
      int v12 = v522;
      if (v40)
      {
        uint64_t v41 = (void *)_NRCopyLogObjectForNRUUID();
        id v42 = [(id)v1 copyDescription];
        _NRLogWithArgs();

        int v12 = v522;
        uint64_t v11 = v19;
      }
    }
    while (1)
    {
      unsigned int v21 = *(unsigned __int8 *)(v521 + (unsigned __int16)v11);
      if (*(unsigned char *)(v521 + (unsigned __int16)v11)) {
        break;
      }
      int v23 = v11;
      uint64_t v24 = (void *)_NRCopyLogObjectForNRUUID();
      int v25 = _NRLogIsLevelEnabled();

      if (v25)
      {
        uint64_t v26 = (void *)_NRCopyLogObjectForNRUUID();
        id v470 = [(id)v1 copyDescription];
        _NRLogWithArgs();
      }
      uint64_t v11 = (v23 + 1);
      unsigned int v22 = (unsigned __int16)(v23 + 1);
      if (v22 >= (unsigned __int16)v522)
      {
        if (v22 == (unsigned __int16)v522)
        {
          id v223 = (void *)_NRCopyLogObjectForNRUUID();
          int v224 = _NRLogIsLevelEnabled();

          if (v224)
          {
            id v225 = (void *)_NRCopyLogObjectForNRUUID();
            id v226 = [(id)v1 copyDescription];
            _NRLogWithArgs();
          }
          goto LABEL_388;
        }
        id v378 = sub_100070988();
        int v379 = _NRLogIsLevelEnabled();

        if (v379)
        {
          id v380 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_472;
      }
    }
    uint64_t v20 = *(unsigned int *)(v1 + v10[386]);
    unsigned int v18 = *(_DWORD *)(v1 + *(int *)(v9 + 1548));
LABEL_45:
    unsigned int v512 = v21;
    uint64_t v31 = v519;
    unsigned int v509 = v18;
    if (v18 <= (int)v20 + 2)
    {
      if (v18 == v20 + 2)
      {
        size_t v34 = *(unsigned __int8 *)(*(void *)(v1 + 1319) + (v20 + 1));
        if ((unsigned __int16)v11 >= (unsigned __int16)v522)
        {
          uint64_t v33 = 0;
          int v35 = 0;
          uint64_t v36 = 512;
        }
        else
        {
          uint64_t v33 = *(unsigned __int8 *)(v521 + (unsigned __int16)v11);
          int v35 = 1;
          uint64_t v36 = 256;
        }
      }
      else
      {
        if (v18 == v20 + 1) {
          unsigned __int16 v37 = v11;
        }
        else {
          unsigned __int16 v37 = v11 + 1;
        }
        if (v37 + 2 >= (unsigned __int16)v522)
        {
          size_t v34 = 0;
          uint64_t v33 = 0;
          int v35 = 0;
          uint64_t v36 = 2048;
        }
        else
        {
          unsigned int v38 = bswap32(*(unsigned __int16 *)(v521 + v37));
          uint64_t v33 = BYTE2(v38);
          size_t v34 = HIBYTE(v38);
          int v35 = 1;
          uint64_t v36 = 1024;
        }
      }
    }
    else
    {
      unsigned int v32 = bswap32(*(unsigned __int16 *)(*(void *)(v1 + 1319) + (v20 + 1)));
      uint64_t v33 = BYTE2(v32);
      size_t v34 = HIBYTE(v32);
      int v35 = 1;
      uint64_t v36 = 128;
    }
    uint64_t v43 = *(void *)(v1 + v519) | v36;
    *(void *)(v1 + v519) = v43;
    long long v554 = 0u;
    long long v555 = 0u;
    long long v552 = 0u;
    long long v553 = 0u;
    long long v550 = 0u;
    long long v551 = 0u;
    long long v548 = 0u;
    long long v549 = 0u;
    long long v546 = 0u;
    long long v547 = 0u;
    long long v544 = 0u;
    long long v545 = 0u;
    long long v542 = 0u;
    long long v543 = 0u;
    long long v540 = 0u;
    long long v541 = 0u;
    unint64_t v44 = v509 - v20;
    uint64_t v506 = v20;
    if (v509 > v20)
    {
      uint64_t v45 = v11;
      *(void *)&long long v540 = *(void *)(v1 + 1319) + v20;
      uint64_t v46 = v33 | (v34 << 8);
      if (v46 + 5 < v44) {
        unint64_t v44 = v46 + 5;
      }
      if (!v44)
      {
        id v356 = sub_100070988();
        char v357 = _NRLogIsLevelEnabled();

        if (v357)
        {
          id v358 = sub_100070988();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v359 = _os_log_pack_fill();
        sub_10008FD4C(v359, (uint64_t)"NRLinkLinkToNexusLoopUrgent", v46, *(_DWORD *)(v1 + *(int *)(v9 + 1548)), *(_DWORD *)(v1 + v10[386]));
        goto LABEL_493;
      }
      unint64_t v47 = v44;
      DWORD2(v540) = v44;
      v43 |= 0x1000uLL;
      *(void *)(v1 + v31) = v43;
      unsigned int v48 = 1;
      uint64_t v11 = v45;
    }
    else
    {
      unint64_t v47 = 0;
      unsigned int v48 = 0;
    }
    int v49 = (unsigned __int16)v11;
    int v50 = (unsigned __int16)v522;
    BOOL v51 = (unsigned __int16)v11 < (unsigned __int16)v522;
    if ((unsigned __int16)v11 >= (unsigned __int16)v522)
    {
      if (!v35)
      {
        LODWORD(v511) = (unsigned __int16)v11 < (unsigned __int16)v522;
        size_t v517 = v34;
        uint64_t v518 = v33;
        v520 = (void *)v47;
        uint64_t v55 = v11;
        unsigned int v53 = v48;
        goto LABEL_80;
      }
LABEL_78:
      int v56 = 0;
      goto LABEL_96;
    }
    if (v35 && (v33 | ((unint64_t)v34 << 8)) + 5 <= v47) {
      goto LABEL_78;
    }
    *((void *)&v540 + 2 * v48) = v521 + (unsigned __int16)v11;
    if ((unsigned __int16)v522 == (unsigned __int16)v11)
    {
      id v374 = sub_100070988();
      int v375 = _NRLogIsLevelEnabled();

      if (v375)
      {
        id v376 = sub_100070988();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v377 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v377 = 136446722;
      *(void *)(v377 + 4) = "NRLinkLinkToNexusLoopUrgent";
      *(_WORD *)(v377 + 12) = 1024;
      *(_DWORD *)(v377 + 14) = v50;
      *(_WORD *)(v377 + 18) = 1024;
      *(_DWORD *)(v377 + 20) = v49;
      goto LABEL_474;
    }
    unint64_t v52 = (unint64_t)(&v540 + v48);
    *(_DWORD *)(v52 + 8) = v50 - (unsigned __int16)v11;
    unint64_t v47 = v47 + v50 - (unsigned __int16)v11;
    *(void *)(v1 + v31) = v43 | 0x2000;
    unsigned int v53 = v48 + 1;
    if (v47 < 3) {
      char v54 = 1;
    }
    else {
      char v54 = v35;
    }
    if (v54)
    {
      if (!v35)
      {
        LODWORD(v511) = v51;
        size_t v517 = v34;
        uint64_t v518 = v33;
        v520 = (void *)v47;
        *(void *)(v1 + v31) = v43 | 0xA000;
        uint64_t v55 = v522;
LABEL_80:
        uint64_t v57 = (void *)v516;
        int v58 = 0;
        unint64_t v514 = v53;
        unsigned int v48 = v53;
        uint64_t v11 = v55;
        goto LABEL_102;
      }
      goto LABEL_92;
    }
    if (DWORD2(v540) < 3)
    {
      if (DWORD2(v540) == 2)
      {
        if (v509 <= v506) {
          goto LABEL_545;
        }
        int v60 = *(unsigned __int8 *)(v540 + 1);
        unsigned int v61 = *(unsigned __int8 *)v541;
        goto LABEL_91;
      }
      if (DWORD2(v540) != 1)
      {
        id v430 = sub_100070988();
        int v431 = _NRLogIsLevelEnabled();

        if (v431)
        {
          id v432 = sub_100070988();
          IOVecid String = (void *)createIOVecString();
          _NRLogWithArgs();
        }
        goto LABEL_557;
      }
      if (DWORD2(v541) < 2)
      {
        id v467 = sub_100070988();
        int v468 = _NRLogIsLevelEnabled();

        if (v468)
        {
          id v469 = sub_100070988();
          v499 = (void *)createIOVecString();
          _NRLogWithArgs();
        }
        goto LABEL_557;
      }
      if (v509 <= v506)
      {
        id v433 = sub_100070988();
        int v434 = _NRLogIsLevelEnabled();

        if (v434)
        {
          id v435 = sub_100070988();
          v495 = (void *)createIOVecString();
          _NRLogWithArgs();
        }
LABEL_557:
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v436 = _os_log_pack_fill();
        uint64_t v437 = createIOVecString();
        *(_DWORD *)uint64_t v436 = 136446466;
        *(void *)(v436 + 4) = "nrReadTLVLenHBOFromIOVec";
        *(_WORD *)(v436 + 12) = 2112;
        *(void *)(v436 + 14) = v437;
        goto LABEL_526;
      }
      unsigned int v59 = *(unsigned __int16 *)v541;
    }
    else
    {
      unsigned int v59 = *(unsigned __int16 *)(v540 + 1);
    }
    int v60 = v59;
    unsigned int v61 = v59 >> 8;
LABEL_91:
    unsigned int v62 = bswap32(v60 | (v61 << 8));
    uint64_t v33 = BYTE2(v62);
    size_t v34 = HIBYTE(v62);
LABEL_92:
    unint64_t v63 = (v33 | ((unint64_t)v34 << 8)) + 5;
    if (v63 >= v47)
    {
      uint64_t v43 = *(void *)(v1 + v31) | 0x8000;
      *(void *)(v1 + v31) = v43;
      int v56 = 1;
      ++v48;
      uint64_t v11 = v522;
    }
    else
    {
      uint64_t v64 = (_DWORD *)(v52 | 8);
      uint64_t v65 = v1;
      uint64_t v1 = (v47 - v63);
      uint64_t v43 = *(void *)(v65 + v31) | 0x4000;
      *(void *)(v65 + v31) = v43;
      BOOL v66 = *v64 == v1;
      *v64 -= v1;
      if (v66)
      {
        int v418 = v47;
        id v419 = sub_100070988();
        int v420 = _NRLogIsLevelEnabled();

        if (v420)
        {
          id v421 = sub_100070988();
          v479 = (void *)createIOVecString();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v422 = _os_log_pack_fill();
        uint64_t v423 = createIOVecString();
        sub_10008FD7C(v422, (uint64_t)"NRLinkLinkToNexusLoopUrgent", v48, v1, v423, v418, v50);
        goto LABEL_526;
      }
      int v56 = 1;
      ++v48;
      uint64_t v11 = (v522 - v1);
      unint64_t v47 = (v33 | ((unint64_t)v34 << 8)) + 5;
      uint64_t v1 = v513;
    }
LABEL_96:
    if (v512 - 100 < 6 || v512 - 2 < 4)
    {
      unsigned int v67 = 2000;
      goto LABEL_99;
    }
    if (v512 == 1)
    {
      unsigned int v67 = 255;
LABEL_99:
      uint64_t v68 = v33 | (v34 << 8);
      if (v68 > v67)
      {
        StringFromNRTLVType = (void *)createStringFromNRTLVType();
        id IOVecStringWithContents = (id)createIOVecStringWithContents();
        sub_100074894((void *)v1, @"Received invalid TLV len %u for %@ (max=%u) %@", v306, v307, v308, v309, v310, v311, v68);
        goto LABEL_452;
      }
    }
    unint64_t v514 = v48;
    if ((v33 | ((unint64_t)v34 << 8)) + 5 <= v47)
    {
      int v76 = (void *)v516;
      int v77 = (void *)v516;
      uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      BOOL v78 = v515;
      goto LABEL_107;
    }
    LODWORD(v511) = v56;
    size_t v517 = v34;
    uint64_t v518 = v33;
    v520 = (void *)v47;
    int v58 = 1;
    uint64_t v57 = (void *)v516;
LABEL_102:
    long long v525 = 0uLL;
    long long v526 = 0uLL;
    long long v523 = 0uLL;
    long long v524 = 0uLL;
    uint64_t v1 = v513;
    uint64_t v69 = os_channel_get_next_slot();
    if (!v69)
    {
      id v79 = v57;
      unint64_t v9 = 0x1001F0000;
      BOOL v78 = v515;
      int v77 = v57;
      int v56 = v511;
LABEL_175:
      uint64_t v31 = v519;
      unint64_t v47 = (unint64_t)v520;
      uint64_t v43 = *(void *)(v513 + v519) | 0x10000;
      *(void *)(v513 + v519) = v43;
      uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      LODWORD(v34) = v517;
      LODWORD(v33) = v518;
      if ((v58 & 1) == 0) {
        goto LABEL_375;
      }
      goto LABEL_176;
    }
    int v70 = (void *)v69;
    uint64_t v511 = v11;
    os_channel_slot_get_packet();
    os_packet_get_next_buflet();
    uint64_t v71 = os_buflet_get_object_address();
    unsigned int v72 = os_buflet_get_data_offset();
    unsigned int v73 = os_buflet_get_data_length();
    if (HIWORD(v73))
    {
LABEL_459:
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F49E8 != -1) {
          dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
        }
        _NRLogWithArgs();
      }
      goto LABEL_472;
    }
    unsigned int v74 = v73;
    os_packet_get_flow_uuid();
    if (*(unsigned char *)(v1 + 245))
    {
      *(unsigned char *)(v1 + 245) = 0;
      LOBYTE(v75) = 1;
    }
    else
    {
      LOBYTE(v75) = (v515 | BYTE2(v527)) & 1;
    }
    uint64_t v31 = v519;
    int v80 = (int)v520;
    uint64_t v1 = v513;
    size_t v34 = v517;
    uint64_t v33 = v518;
    uint64_t v81 = v71 + v72;
    *((void *)&v540 + 2 * v514) = v81;
    if (!v74)
    {
LABEL_466:
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F49E8 != -1) {
          dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
        }
        _NRLogWithArgs();
      }
      goto LABEL_472;
    }
    unint64_t v82 = v514;
    *((_DWORD *)&v540 + 4 * v514 + 2) = v74;
    uint64_t v83 = *(void *)(v1 + v31) | 0x20000;
    *(void *)(v1 + v31) = v83;
    unint64_t v47 = v74 + v80;
    if (v47 < 3) {
      char v84 = 1;
    }
    else {
      char v84 = v58;
    }
    if ((v84 & 1) == 0)
    {
      unint64_t v9 = 0x1001F0000;
      if (DWORD2(v540) > 2)
      {
        unsigned int v85 = *(unsigned __int16 *)(v540 + 1);
LABEL_119:
        int v86 = v85;
        unsigned int v87 = v85 >> 8;
        goto LABEL_126;
      }
      if (DWORD2(v540) == 2)
      {
        if (!v48)
        {
LABEL_545:
          id v424 = sub_100070988();
          int v425 = _NRLogIsLevelEnabled();

          if (v425)
          {
            id v426 = sub_100070988();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v331 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v331 = 136446210;
          v332 = "nrReadTLVLenHBOFromIOVec";
          goto LABEL_473;
        }
        int v86 = *(unsigned __int8 *)(v540 + 1);
        unsigned int v87 = *(unsigned __int8 *)v541;
LABEL_126:
        unsigned int v89 = v86 | (v87 << 8);
        unsigned int v90 = bswap32(v89);
        uint64_t v33 = BYTE2(v90);
        size_t v34 = HIBYTE(v90);
        if (v512 - 100 >= 6 && v512 - 2 >= 4)
        {
          if (v512 != 1) {
            goto LABEL_130;
          }
          unsigned int v91 = 255;
        }
        else
        {
          unsigned int v91 = 2000;
        }
        unsigned int v92 = __rev16(v89);
        if (v92 > v91)
        {
          unint64_t v515 = v82 + 1;
LABEL_451:
          StringFromNRTLVType = (void *)createStringFromNRTLVType();
          id IOVecStringWithContents = (id)createIOVecStringWithContents();
          sub_100074894((void *)v1, @"LookAhead received invalid TLV len %u for %@ (max=%u) %@", v314, v315, v316, v317, v318, v319, v92);
LABEL_452:

          goto LABEL_453;
        }
        goto LABEL_130;
      }
      if (DWORD2(v540) == 1)
      {
        if (DWORD2(v541) <= 1)
        {
          if (v48 < 2)
          {
            unint64_t v515 = v82 + 1;
LABEL_568:
            id v447 = sub_100070988();
            int v448 = _NRLogIsLevelEnabled();

            if (v448)
            {
              id v449 = sub_100070988();
              v497 = (void *)createIOVecString();
              _NRLogWithArgs();
            }
          }
          else
          {
            if (DWORD2(v541) == 1)
            {
              int v86 = *(unsigned __int8 *)v541;
              unsigned int v87 = *(unsigned __int8 *)v542;
              goto LABEL_126;
            }
            unint64_t v515 = v82 + 1;
LABEL_572:
            id v450 = sub_100070988();
            int v451 = _NRLogIsLevelEnabled();

            if (v451)
            {
              id v452 = sub_100070988();
              v498 = (void *)createIOVecString();
              _NRLogWithArgs();
            }
          }
        }
        else
        {
          if (v48)
          {
            unsigned int v85 = *(unsigned __int16 *)v541;
            goto LABEL_119;
          }
          id v444 = sub_100070988();
          int v445 = _NRLogIsLevelEnabled();

          if (v445)
          {
            id v446 = sub_100070988();
            v496 = (void *)createIOVecString();
            _NRLogWithArgs();
          }
        }
      }
      else
      {
        unint64_t v515 = v82 + 1;
LABEL_549:
        id v427 = sub_100070988();
        int v428 = _NRLogIsLevelEnabled();

        if (v428)
        {
          id v429 = sub_100070988();
          v493 = (void *)createIOVecString();
          _NRLogWithArgs();
        }
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v453 = _os_log_pack_fill();
      uint64_t v454 = createIOVecString();
      *(_DWORD *)uint64_t v453 = 136446466;
      *(void *)(v453 + 4) = "nrReadTLVLenHBOFromIOVec";
      *(_WORD *)(v453 + 12) = 2112;
      *(void *)(v453 + 14) = v454;
      goto LABEL_474;
    }
    unint64_t v9 = 0x1001F0000;
    if (!v58)
    {
      int v88 = 0;
      goto LABEL_132;
    }
LABEL_130:
    unint64_t v93 = (v33 | ((unint64_t)v34 << 8)) + 5;
    uint64_t v83 = *(void *)(v1 + v31);
    if (v93 <= v47)
    {
      uint64_t v43 = v83 | 0x40000;
      *(void *)(v1 + v31) = v43;
      int v94 = v47 - v93;
      unint64_t v9 = v82;
      int v95 = &v540 + v82;
      int v96 = *((_DWORD *)v95 + 2) - (v47 - v93);
      *((_DWORD *)v95 + 2) = v96;
      if (!v96)
      {
        unint64_t v515 = v82 + 1;
        int v339 = v47;
        goto LABEL_478;
      }
      uint64_t v511 = v74 - v94;
      long long v529 = v523;
      long long v530 = v524;
      int v88 = 1;
      long long v531 = v525;
      long long v532 = v526;
      unint64_t v47 = (v33 | ((unint64_t)v34 << 8)) + 5;
      LODWORD(v522) = v74;
      uint64_t v521 = v81;
      v507 = v70;
      unint64_t v9 = 0x1001F0000;
      int v76 = (void *)v516;
      goto LABEL_135;
    }
    int v88 = 1;
LABEL_132:
    int v76 = (void *)v516;
    uint64_t v43 = v83 | 0x80000;
    *(void *)(v1 + v31) = v43;
    v507 = v76;
LABEL_135:
    unint64_t v97 = v82 + 2;
    for (uint64_t i = &v501[16 * v82]; ; i += 16)
    {
      unint64_t v514 = v97 - 1;
      BOOL v78 = v75 != 0;
      if ((v88 & 1) != 0
        && ((unint64_t)(unsigned __int16)v34 << 8) + (unsigned __int16)v33 + 5 <= v47)
      {
        break;
      }
      LODWORD(v516) = v88;
      char v99 = v75;
      unint64_t v515 = v97;
      size_t v517 = v34;
      uint64_t v518 = v33;
      v520 = (void *)v47;
      long long v525 = 0u;
      long long v526 = 0u;
      long long v523 = 0u;
      long long v524 = 0u;
      uint64_t v100 = v70;
      uint64_t v101 = os_channel_get_next_slot();
      if (!v101)
      {
        int v56 = 1;
        int v77 = v507;
        uint64_t v11 = v511;
        id v79 = v70;
        LOBYTE(v58) = v516;
        goto LABEL_175;
      }
      int v70 = (void *)v101;
      os_channel_slot_get_packet();
      os_packet_get_next_buflet();
      uint64_t v102 = os_buflet_get_object_address();
      unsigned int v103 = os_buflet_get_data_offset();
      unsigned int v104 = os_buflet_get_data_length();
      if (v104 >= 0x10000) {
        goto LABEL_459;
      }
      unsigned int v105 = v104;
      BOOL v106 = v99 != 0;
      os_packet_get_flow_uuid();
      if (*(unsigned char *)(v1 + 245))
      {
        *(unsigned char *)(v1 + 245) = 0;
        int v75 = 1;
      }
      else
      {
        int v75 = (v106 | BYTE2(v527)) & 1;
      }
      uint64_t v31 = v519;
      int v107 = (int)v520;
      size_t v34 = v517;
      uint64_t v33 = v518;
      unint64_t v108 = v515;
      id v79 = v100;
      uint64_t v109 = v102 + v103;
      *((void *)i - 1) = v109;
      uint64_t v1 = v513;
      char v110 = v516;
      if (!v105) {
        goto LABEL_466;
      }
      *(_DWORD *)uint64_t i = v105;
      uint64_t v111 = *(void *)(v1 + v31);
      *(void *)(v1 + v31) = v111 | 0x20000;
      unint64_t v47 = v105 + v107;
      if (v110 & 1 | (v47 < 3))
      {
        unint64_t v9 = 0x1001F0000;
        if ((v110 & 1) == 0)
        {
          uint64_t v43 = v111 | 0xA0000;
          *(void *)(v1 + v31) = v43;
          if (v108 == 16) {
            goto LABEL_476;
          }
          int v88 = 0;
          goto LABEL_138;
        }
        goto LABEL_166;
      }
      unint64_t v9 = (unint64_t)&OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      if (DWORD2(v540) >= 3)
      {
        unsigned int v112 = *(unsigned __int16 *)(v540 + 1);
LABEL_152:
        int v113 = v112;
        unsigned int v114 = v112 >> 8;
        goto LABEL_162;
      }
      if (DWORD2(v540) == 2)
      {
        id v115 = (unsigned __int8 *)v541;
        int v113 = *(unsigned __int8 *)(v540 + 1);
      }
      else
      {
        if (DWORD2(v540) != 1) {
          goto LABEL_549;
        }
        if (DWORD2(v541) > 1)
        {
          unsigned int v112 = *(unsigned __int16 *)v541;
          goto LABEL_152;
        }
        if (v514 <= 1) {
          goto LABEL_568;
        }
        if (DWORD2(v541) != 1) {
          goto LABEL_572;
        }
        id v115 = (unsigned __int8 *)v542;
        int v113 = *(unsigned __int8 *)v541;
      }
      unsigned int v114 = *v115;
LABEL_162:
      unsigned int v116 = v113 | (v114 << 8);
      unsigned int v117 = bswap32(v116);
      uint64_t v33 = BYTE2(v117);
      size_t v34 = HIBYTE(v117);
      if (v512 - 100 >= 6 && v512 - 2 >= 4)
      {
        if (v512 != 1) {
          goto LABEL_166;
        }
        unsigned int v118 = 255;
      }
      else
      {
        unsigned int v118 = 2000;
      }
      unsigned int v92 = __rev16(v116);
      if (v92 > v118) {
        goto LABEL_451;
      }
LABEL_166:
      unint64_t v119 = ((unint64_t)(unsigned __int16)v34 << 8) + (unsigned __int16)v33 + 5;
      uint64_t v120 = *(void *)(v1 + v31);
      if (v119 <= v47)
      {
        uint64_t v43 = v120 | 0x40000;
        *(void *)(v1 + v31) = v43;
        int v94 = v47 - v119;
        int v121 = &v540 + (int)v108 - 1;
        int v122 = *((_DWORD *)v121 + 2) - (v47 - v119);
        *((_DWORD *)v121 + 2) = v122;
        if (!v122)
        {
          int v339 = v47;
          unint64_t v9 = (v108 - 1);
LABEL_478:
          id v340 = sub_100070988();
          char v341 = _NRLogIsLevelEnabled();

          if (v341)
          {
            id v342 = sub_100070988();
            v343 = (void *)createIOVecString();
            int v344 = (unsigned __int16)v511;
            _NRLogWithArgs();
          }
          else
          {
            int v344 = (unsigned __int16)v511;
          }
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v348 = _os_log_pack_fill();
          id v349 = (id)createIOVecString();
          sub_10008FD7C(v348, (uint64_t)"NRLinkLinkToNexusLoopUrgent", v9, v94, (uint64_t)v349, v339, v344);
          goto LABEL_525;
        }
        uint64_t v511 = v105 - v94;
        long long v529 = v523;
        long long v530 = v524;
        long long v531 = v525;
        long long v532 = v526;
        if (v108 == 16)
        {
          uint64_t v521 = v109;
          LODWORD(v522) = v105;
          unint64_t v47 = ((unint64_t)(unsigned __int16)v34 << 8) + (unsigned __int16)v33 + 5;
          goto LABEL_189;
        }
        int v88 = 1;
        v507 = v70;
        uint64_t v521 = v109;
        LODWORD(v522) = v105;
        unint64_t v47 = ((unint64_t)(unsigned __int16)v34 << 8) + (unsigned __int16)v33 + 5;
      }
      else
      {
        uint64_t v43 = v120 | 0x80000;
        *(void *)(v1 + v31) = v43;
        if (v108 == 16)
        {
          BOOL v125 = v119 > v47;
          unint64_t v119 = v47;
          int v70 = v507;
          if (v125) {
            goto LABEL_475;
          }
LABEL_189:
          BOOL v78 = v75 != 0;
          size_t v517 = (unsigned __int16)(v33 | ((_WORD)v34 << 8));
          unint64_t v514 = 16;
          if (v517 + 5 <= v119)
          {
            uint64_t v123 = v33 | (v34 << 8);
            uint64_t v516 = (uint64_t)v70;
            uint64_t v11 = v511;
LABEL_191:
            uint64_t v124 = v43 | 0x200000;
            uint64_t v510 = (uint64_t)v70;
            goto LABEL_192;
          }
          uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_375:
          id v229 = v79;
          LODWORD(v515) = v78;
          if (gNRPacketLoggingEnabled)
          {
            uint64_t v279 = (void *)v47;
            uint64_t v280 = (void *)_NRCopyLogObjectForNRUUID();
            int v281 = _NRLogIsLevelEnabled();

            if (v281)
            {
              long long v282 = (void *)v513;
              v520 = v279;
              uint64_t v522 = _NRCopyLogObjectForNRUUID();
              id v283 = [v282 copyDescription];
              long long v284 = (void *)createStringFromNRTLVType();
              long long v285 = (void *)v522;
              _NRLogWithArgs();
            }
          }
          uint64_t v1 = v513;
          unsigned __int16 v230 = v514;
          unsigned int v231 = v509;
          unsigned int v232 = v506;
          if (*(unsigned char *)(v513 + 227) && *(void *)(v513 + 1143))
          {
            *(unsigned char *)(v513 + 227) = 0;
            ++*(void *)(v1 + 1159);
            if (gNRPacketLoggingEnabled)
            {
              long long v293 = (void *)_NRCopyLogObjectForNRUUID();
              int v294 = _NRLogIsLevelEnabled();

              if (v294)
              {
                uint64_t v295 = (void *)_NRCopyLogObjectForNRUUID();
                id v490 = [(id)v1 copyDescription];
                _NRLogWithArgs();
              }
            }
            dispatch_resume(*(dispatch_object_t *)(v1 + 1143));
            unsigned int v231 = v509;
          }
          if ((v231 > v232) < v230)
          {
            unint64_t v233 = v230 - (unint64_t)(v231 > v232);
            id v234 = (const void **)&v505[16 * (v231 > v232)];
            do
            {
              if (gNRPacketLoggingEnabled)
              {
                id v236 = (void *)_NRCopyLogObjectForNRUUID();
                int v237 = _NRLogIsLevelEnabled();

                if (v237)
                {
                  id v238 = (void *)_NRCopyLogObjectForNRUUID();
                  id v239 = [(id)v1 copyDescription];
                  _NRLogWithArgs();
                }
              }
              memcpy((void *)(*(void *)(v1 + 1319) + *(unsigned int *)(v1 + *(int *)(v9 + 1548))), *(v234 - 1), *(unsigned int *)v234);
              int v235 = *(_DWORD *)v234;
              v234 += 2;
              *(_DWORD *)(v1 + *(int *)(v9 + 1548)) += v235;
              --v233;
            }
            while (v233);
          }
          *(void *)(v1 + v519) |= 0x100000uLL;
          uint64_t v510 = (uint64_t)v229;
LABEL_388:
          if (!v510) {
            goto LABEL_409;
          }
          unsigned int v240 = *(_DWORD *)(v1 + *(int *)(v9 + 1548));
          unsigned int v241 = *(_DWORD *)(v1 + v10[386]);
          if (v240 <= v241)
          {
            if (v241 == v240)
            {
              *(void *)(v1 + 1887) |= 0x400000000uLL;
              if (gNRPacketLoggingEnabled)
              {
                long long v272 = (void *)_NRCopyLogObjectForNRUUID();
                int v273 = _NRLogIsLevelEnabled();

                if (v273)
                {
                  long long v274 = (void *)_NRCopyLogObjectForNRUUID();
                  id v475 = [(id)v1 copyDescription];
                  _NRLogWithArgs();
                }
              }
              *(_DWORD *)(v1 + *(int *)(v9 + 1548)) = 0;
LABEL_396:
              *(_DWORD *)(v1 + v10[386]) = 0;
              goto LABEL_397;
            }
            id v412 = sub_100070988();
            int v413 = _NRLogIsLevelEnabled();

            if (v413)
            {
              id v414 = sub_100070988();
              _NRLogWithArgs();
            }
LABEL_472:
            _os_log_pack_size();
            __chkstk_darwin();
            __error();
            uint64_t v331 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v331 = 136446210;
            v332 = "NRLinkLinkToNexusLoopUrgent";
            goto LABEL_473;
          }
          if (v241 > *(_DWORD *)(v1 + 275))
          {
            *(void *)(v1 + 1887) |= 0x80000000uLL;
            if (gNRPacketLoggingEnabled)
            {
              long long v275 = (void *)_NRCopyLogObjectForNRUUID();
              int v276 = _NRLogIsLevelEnabled();

              if (v276)
              {
                long long v277 = (void *)_NRCopyLogObjectForNRUUID();
                id v278 = [(id)v1 copyDescription];
                _NRLogWithArgs();
              }
            }
            uint64_t v242 = *(unsigned int *)(v1 + v10[386]);
            memmove(*(void **)(v1 + 1319), (const void *)(*(void *)(v1 + 1319) + v242), (*(_DWORD *)(v1 + *(int *)(v9 + 1548)) - v242));
            *(_DWORD *)(v1 + *(int *)(v9 + 1548)) -= *(_DWORD *)(v1 + v10[386]);
            goto LABEL_396;
          }
          uint64_t v247 = *(void *)(v1 + 1887);
          if (!v241)
          {
            unint64_t v248 = v247 | 0x200000000;
            *(void *)(v1 + 1887) = v247 | 0x200000000;
            if (gNRPacketLoggingEnabled)
            {
              long long v286 = (void *)_NRCopyLogObjectForNRUUID();
              int v287 = _NRLogIsLevelEnabled();

              if (v287) {
                goto LABEL_435;
              }
              goto LABEL_397;
            }
LABEL_405:
            *(void *)(v1 + 1887) = v248 | 0x800000000;
            goto LABEL_406;
          }
          unint64_t v248 = v247 | (unint64_t)&_mh_execute_header;
          *(void *)(v1 + 1887) = v247 | (unint64_t)&_mh_execute_header;
          if (!gNRPacketLoggingEnabled) {
            goto LABEL_405;
          }
          uint64_t v249 = (void *)_NRCopyLogObjectForNRUUID();
          int v250 = _NRLogIsLevelEnabled();

          if (v250)
          {
LABEL_435:
            long long v288 = (void *)_NRCopyLogObjectForNRUUID();
            id v289 = [(id)v1 copyDescription];
            _NRLogWithArgs();
          }
LABEL_397:
          int v243 = gNRPacketLoggingEnabled;
          *(void *)(v1 + 1887) |= 0x800000000uLL;
          if (v243)
          {
            uint64_t v244 = (void *)_NRCopyLogObjectForNRUUID();
            int v245 = _NRLogIsLevelEnabled();

            if (v245)
            {
              char v246 = (void *)_NRCopyLogObjectForNRUUID();
              id v473 = [(id)v1 copyDescription];
              _NRLogWithArgs();
            }
          }
LABEL_406:
          if (gNRPacketLoggingEnabled)
          {
            uint64_t v258 = +[NSDate date];
            v259 = *(void **)(v1 + 1711);
            *(void *)(v1 + 1711) = v258;
          }
          os_channel_advance_slot();
          os_channel_sync();
          ++*(void *)(v1 + 1455);
          if (gNRPacketLoggingEnabled)
          {
            uint64_t v260 = (void *)_NRCopyLogObjectForNRUUID();
            int v261 = _NRLogIsLevelEnabled();

            if (v261)
            {
              uint64_t v262 = (void *)_NRCopyLogObjectForNRUUID();
              id v488 = [(id)v1 copyDescription];
              _NRLogWithArgs();
            }
          }
LABEL_409:
          if (v508)
          {
            if (*(void *)(v1 + 687))
            {
              *(void *)(v1 + 1887) |= 0x1000000000uLL;
              if (gNRPacketLoggingEnabled)
              {
                long long v263 = (void *)_NRCopyLogObjectForNRUUID();
                int v264 = _NRLogIsLevelEnabled();

                if (v264)
                {
                  long long v265 = (void *)_NRCopyLogObjectForNRUUID();
                  id v474 = [(id)v1 copyDescription];
                  _NRLogWithArgs();
                }
                if (gNRPacketLoggingEnabled)
                {
                  uint64_t v266 = +[NSDate date];
                  long long v267 = *(void **)(v1 + 1671);
                  *(void *)(v1 + 1671) = v266;
                }
              }
              os_channel_advance_slot();
              os_channel_sync();
              ++*(void *)(v1 + 767);
              if (gNRPacketLoggingEnabled)
              {
                long long v268 = (void *)_NRCopyLogObjectForNRUUID();
                int v269 = _NRLogIsLevelEnabled();

                if (v269)
                {
LABEL_427:
                  long long v270 = (void *)_NRCopyLogObjectForNRUUID();
                  id v271 = [(id)v1 copyDescription];
                  _NRLogWithArgs();
                }
              }
            }
            else
            {
              uint64_t v256 = (void *)_NRCopyLogObjectForNRUUID();
              int v257 = _NRLogIsLevelEnabled();

              if (v257) {
                goto LABEL_427;
              }
            }
          }
          if (*(void *)(v1 + 1887) && *(void *)(v1 + 1895))
          {
            *(unsigned char *)(v1 + 253) %= *(unsigned char *)(v1 + 252);
            uint64_t v251 = *(void *)(v1 + 1895);
            uint64_t v252 = (void *)(v251 + 8 * *(unsigned __int8 *)(v1 + 253));
            if ((unint64_t)(v252 + 1) <= v251 + 8 * (unint64_t)*(unsigned __int8 *)(v1 + 252))
            {
              if ((v252 & 7) == 0)
              {
                *uint64_t v252 = *(void *)(v1 + 1887);
                ++*(unsigned char *)(v1 + 253);
                *(void *)(v1 + 1887) = 0;
              }
            }
            else
            {
              unsigned int v253 = (void *)_NRCopyLogObjectForNRUUID();
              int v254 = _NRLogIsLevelEnabled();

              if (v254)
              {
                uint64_t v255 = (void *)_NRCopyLogObjectForNRUUID();
                id v481 = [(id)v1 copyDescription];
                _NRLogWithArgs();
              }
            }
          }
          uint64_t v8 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          *(unsigned char *)(v1 + 226) = v515 & 1;
          if (!(v510 | v508))
          {
            if (!gNRPacketLoggingEnabled) {
              goto LABEL_454;
            }
            v312 = (void *)_NRCopyLogObjectForNRUUID();
            int v313 = _NRLogIsLevelEnabled();

            if (!v313) {
              goto LABEL_454;
            }
            StringFromNRTLVType = (void *)_NRCopyLogObjectForNRUUID();
            id IOVecStringWithContents = [(id)v1 copyDescription];
            _NRLogWithArgs();
            goto LABEL_452;
          }
          goto LABEL_14;
        }
        int v88 = 1;
      }
LABEL_138:
      unint64_t v97 = v108 + 1;
      int v76 = v79;
    }
    int v56 = 1;
    uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    uint64_t v11 = v511;
    int v77 = v507;
LABEL_107:
    id v79 = v76;
LABEL_176:
    uint64_t v516 = (uint64_t)v77;
    unint64_t v119 = v47;
    uint64_t v123 = v33 | (v34 << 8);
    size_t v517 = (unsigned __int16)(v33 | ((_WORD)v34 << 8));
    if (v517 + 5 > v47) {
      goto LABEL_375;
    }
    if (v56)
    {
      int v70 = (void *)v516;
      uint64_t v1 = v513;
      goto LABEL_191;
    }
    uint64_t v124 = v43 | 0x400000;
    uint64_t v1 = v513;
LABEL_192:
    v520 = (void *)v47;
    uint64_t v511 = v11;
    *(void *)(v1 + v31) = v124;
    *(void *)(v1 + 1407) += v119;
    LODWORD(v515) = v78;
    uint64_t v518 = v123;
    if ((char)v512 < 100)
    {
      if (!(_WORD)v514)
      {
        id v363 = sub_100070988();
        int v364 = _NRLogIsLevelEnabled();

        if (v364)
        {
          id v365 = sub_100070988();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v331 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v331 = 136446210;
        v332 = "nrChecksumIOVecInner";
        goto LABEL_473;
      }
      unsigned int v504 = (unsigned __int16)v514;
      v507 = v500;
      uint64_t v134 = 0;
      unsigned int v135 = 0;
      int v136 = 0;
      __int16 v137 = 0;
      unsigned int v138 = (unsigned __int16)v123 + 3;
      uint64_t v139 = (unsigned __int16)v514;
      uint64_t v1 = (uint64_t)v505;
      while (1)
      {
        if (v138 <= v135)
        {
          unsigned int v140 = 0;
          goto LABEL_227;
        }
        unsigned int v140 = *(_DWORD *)v1 >= v138 - v135 ? v138 - v135 : *(_DWORD *)v1;
        if (!v140) {
          break;
        }
        id v141 = *(unsigned __int8 **)(v1 - 8);
        if (!v136 || (LOWORD(v523) = 0, LOWORD(v523) = *v141 << 8, __int16 v137 = os_inet_checksum(), v140 >= 2)) {
          __int16 v137 = os_inet_checksum();
        }
        if (v140) {
          v136 ^= 1u;
        }
        v135 += v140;
        if (v135 >= v138 && v140 < *(_DWORD *)v1) {
          goto LABEL_227;
        }
        ++v134;
        v1 += 16;
        if (v139 == v134)
        {
          LOWORD(v134) = v514;
LABEL_227:
          uint64_t v1 = v513;
          unint64_t v9 = (unint64_t)&OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          if (v135 == v138)
          {
            int v142 = ~(_BYTE)v137;
            int v143 = ((unsigned __int16)~v137 >> 8);
            int v144 = &v540 + (unsigned __int16)v134;
            unsigned int v145 = *((_DWORD *)v144 + 2);
            if (v145 >= v140 + 2)
            {
              int v147 = (unsigned __int8 *)(*(void *)v144 + v140);
              if (*v147 == v142 && v147[1] == v143) {
                goto LABEL_237;
              }
              id v383 = sub_100070988();
              int v384 = _NRLogIsLevelEnabled();

              if (!v384) {
                goto LABEL_529;
              }
              goto LABEL_528;
            }
            if (v145 < v140 + 1)
            {
              id v385 = sub_100070988();
              int v386 = _NRLogIsLevelEnabled();

              if (v386)
              {
                id v387 = sub_100070988();
                v476 = (void *)createIOVecString();
                _NRLogWithArgs();
              }
            }
            else if ((unsigned __int16)v134 + 1 >= v504)
            {
              id v388 = sub_100070988();
              int v389 = _NRLogIsLevelEnabled();

              if (v389)
              {
                id v390 = sub_100070988();
                v477 = (void *)createIOVecString();
                _NRLogWithArgs();
              }
            }
            else
            {
              id v146 = (unsigned __int8 **)(&v540 + (unsigned __int16)v134 + 1);
              if (*((_DWORD *)v146 + 2))
              {
                if (*(unsigned __int8 *)(*(void *)v144 + v140) == v142 && **v146 == v143) {
                  goto LABEL_237;
                }
LABEL_527:
                id v395 = sub_100070988();
                int v396 = _NRLogIsLevelEnabled();

                if (!v396) {
                  goto LABEL_529;
                }
LABEL_528:
                id v397 = sub_100070988();
                _NRLogWithArgs();

                goto LABEL_529;
              }
              id v391 = sub_100070988();
              int v392 = _NRLogIsLevelEnabled();

              if (v392)
              {
                id v393 = sub_100070988();
                v478 = (void *)createIOVecString();
                _NRLogWithArgs();
              }
            }
            _os_log_pack_size();
            __chkstk_darwin();
            __error();
            uint64_t v394 = _os_log_pack_fill();
            id v349 = (id)createIOVecString();
            sub_100043C30(v394, (uint64_t)"nrChecksumIOVecInner", (uint64_t)v349, (unsigned __int16)v134, v140);
LABEL_525:

LABEL_526:
            sub_100070988();
            _NRLogAbortWithPack();
            goto LABEL_527;
          }
          id v371 = sub_100070988();
          int v372 = _NRLogIsLevelEnabled();

          v322 = "nrChecksumIOVecInner";
          if (v372)
          {
            id v373 = sub_100070988();
            _NRLogWithArgs();
          }
LABEL_457:
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v324 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v324 = 136446210;
          *(void *)(v324 + 4) = v322;
          goto LABEL_474;
        }
      }
      id v320 = sub_100070988();
      int v321 = _NRLogIsLevelEnabled();

      v322 = "nrChecksumUpdate";
      if (v321)
      {
        id v323 = sub_100070988();
        _NRLogWithArgs();
      }
      goto LABEL_457;
    }
    LOWORD(v523) = 0;
    if (!(_WORD)v514) {
      goto LABEL_494;
    }
    unint64_t v9 = 0;
    unsigned int v126 = 0;
    unsigned int v127 = bswap32(v123);
    int v128 = (v512 >> 4) ^ HIWORD(v127);
    uint64_t v1 = (16 * v512) ^ HIBYTE(v127);
    uint64_t v129 = 16 * (unsigned __int16)v514;
    v507 = (void *)((unsigned __int16)v123 + 3);
    unsigned int v130 = (unsigned __int16)v123 + 3;
    while (2)
    {
      unsigned int v131 = *(_DWORD *)((char *)&v540 + v9 + 8);
      if (v130)
      {
        if (v130 > v131)
        {
          v130 -= v131;
        }
        else
        {
          if (v130 < v131) {
            break;
          }
LABEL_204:
          unsigned int v130 = 0;
        }
        v9 += 16;
        if (v129 == v9) {
          goto LABEL_222;
        }
        continue;
      }
      break;
    }
    unsigned int v132 = v131 - v130;
    if (v132 >= 2 - v126) {
      size_t v133 = 2 - v126;
    }
    else {
      size_t v133 = v132;
    }
    memcpy((char *)&v523 + v126, (const void *)(*(void *)((char *)&v540 + v9) + v130), v133);
    v126 += v133;
    if (v126 <= 1) {
      goto LABEL_204;
    }
LABEL_222:
    if (v126 != 2)
    {
      id v366 = sub_100070988();
      int v367 = _NRLogIsLevelEnabled();

      int v368 = (int)v507;
      if (v367)
      {
        id v369 = sub_100070988();
        v482 = (void *)createIOVecString();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v370 = _os_log_pack_fill();
      id v349 = (id)createIOVecString();
      sub_100043BF4(v370, (uint64_t)"nrWriteIOVecToBuffer", v126, 2, v368, (uint64_t)v349);
      goto LABEL_525;
    }
    BOOL v66 = (unsigned __int16)v523 == (unsigned __int16)(v128 | (unsigned __int16)((_WORD)v1 << 8));
    uint64_t v1 = v513;
    unint64_t v9 = 0x1001F0000;
    if (!v66)
    {
LABEL_529:
      v398 = *(id *)(v1 + 1863);
      unsigned __int16 v399 = v518;
      if (v398) {
        v398[96] = 1;
      }

      v400 = (void *)_NRCopyLogObjectForNRUUID();
      char v401 = _NRLogIsLevelEnabled();

      if (v401)
      {
        v402 = (void *)_NRCopyLogObjectForNRUUID();
        id v403 = [(id)v1 copyDescription];
        v404 = (void *)createStringFromNRTLVType();
        uint64_t v521 = v399;
        uint64_t v519 = *(unsigned int *)(v1 + *(int *)(v9 + 1548));
        v405 = (void *)createIOVecString();
        uint64_t v522 = (unsigned __int16)v511;
        uint64_t v1 = v513;
        _NRLogWithArgs();
      }
      else
      {
        uint64_t v522 = (unsigned __int16)v511;
      }
      StringFromNRTLVType = (void *)createStringFromNRTLVType();
      id IOVecStringWithContents = (id)createIOVecString();
      sub_100074894((void *)v1, @"Invalid checksum detected in urgent loop on read type %@ len %u filledIn=%u handled=%u in %@ ioVecContentLen=%u alreadyRead=%u curLinkInputSlot=%p", v406, v407, v408, v409, v410, v411, (uint64_t)StringFromNRTLVType);
      goto LABEL_452;
    }
LABEL_237:
    long long v525 = 0u;
    long long v526 = 0u;
    long long v523 = 0u;
    long long v524 = 0u;
    uint64_t v148 = os_channel_get_next_slot();
    uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    if (v148) {
      break;
    }
    id v156 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    unsigned int v157 = v509;
    unsigned int v158 = v506;
    if (*(unsigned char *)(v1 + 217) && *(void *)(v1 + 703))
    {
      *(unsigned char *)(v1 + 217) = 0;
      ++*(void *)(v1 + 719);
      if (gNRPacketLoggingEnabled)
      {
        id v217 = (void *)_NRCopyLogObjectForNRUUID();
        int v218 = _NRLogIsLevelEnabled();

        id v156 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        if (v218)
        {
          int v219 = (void *)_NRCopyLogObjectForNRUUID();
          id v487 = [(id)v1 copyDescription];
          _NRLogWithArgs();

          id v156 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        }
      }
      dispatch_resume(*(dispatch_object_t *)(v1 + 703));
      unsigned int v157 = v509;
    }
    uint64_t v159 = v519;
    uint64_t v160 = *(void *)(v1 + v519) | 0x800000;
    *(void *)(v1 + v519) = v160;
    if ((v157 > v158) < (unsigned __int16)v514)
    {
      unsigned int v161 = v158;
      uint64_t v162 = v157 > v158;
      uint64_t v163 = (unsigned __int16)v514;
      int v164 = (const void **)&v505[16 * v162];
      do
      {
        if (gNRPacketLoggingEnabled)
        {
          id v168 = (void *)_NRCopyLogObjectForNRUUID();
          LODWORD(v520) = _NRLogIsLevelEnabled();

          id v156 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          if (v520)
          {
            id v169 = (void *)_NRCopyLogObjectForNRUUID();
            v520 = [(id)v1 copyDescription];
            _NRLogWithArgs();

            id v156 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          }
        }
        uint64_t v165 = *(unsigned int *)(v1 + *(int *)(v9 + 1548));
        size_t v166 = *(unsigned int *)v164;
        if ((v166 + v165) >= *(_DWORD *)(v1 + v156[331]))
        {
          *(void *)(v1 + v519) |= 0x1000000uLL;
          StringFromNRTLVType = (void *)createIOVecString();
          sub_100074894((void *)v1, @"no nexusOutputSlot and linkReadBuffer is full %@ filledIn=%u handled=%u", v325, v326, v327, v328, v329, v330, (uint64_t)StringFromNRTLVType);
          goto LABEL_453;
        }
        memcpy((void *)(*(void *)(v1 + 1319) + v165), *(v164 - 1), v166);
        int v167 = *(_DWORD *)v164;
        v164 += 2;
        *(_DWORD *)(v1 + *(int *)(v9 + 1548)) += v167;
        ++v162;
      }
      while (v163 != v162);
      uint64_t v159 = v519;
      uint64_t v160 = *(void *)(v1 + v519);
      unsigned int v157 = v509;
      unsigned int v158 = v161;
    }
    if (v157 > v158 && (unsigned __int16)v514 == 1)
    {
      *(void *)(v1 + v159) = v160 | 0x2000000;
      unsigned __int16 v227 = v511;
      if ((_WORD)v511 && (unsigned __int16)v522 > (unsigned __int16)v511)
      {
        unsigned __int16 v228 = v522 - v511;
        if (gNRPacketLoggingEnabled)
        {
          v299 = (void *)_NRCopyLogObjectForNRUUID();
          int v300 = _NRLogIsLevelEnabled();

          unsigned __int16 v227 = v511;
          if (v300)
          {
            v301 = (void *)_NRCopyLogObjectForNRUUID();
            id v302 = [(id)v1 copyDescription];
            _NRLogWithArgs();

            unsigned __int16 v227 = v511;
          }
        }
        memcpy((void *)(*(void *)(v1 + 1319) + *(unsigned int *)(v1 + *(int *)(v9 + 1548))), (const void *)(v521 + v227), v228);
        *(_DWORD *)(v1 + *(int *)(v9 + 1548)) += v228;
        uint64_t v510 = v516;
      }
      goto LABEL_388;
    }
    *(void *)(v1 + v159) = v160 | 0x4000000;
    uint64_t v510 = v516;
    uint64_t v11 = v511;
    int v12 = v522;
  }
  uint64_t v149 = v148;
  if (v509 > v506)
  {
    if (gNRPacketLoggingEnabled)
    {
      int v210 = (void *)_NRCopyLogObjectForNRUUID();
      int v211 = _NRLogIsLevelEnabled();

      if (v211)
      {
        id v212 = (void *)_NRCopyLogObjectForNRUUID();
        id v213 = [(id)v1 copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    *(_DWORD *)(v1 + 323) += DWORD2(v540);
  }
  uint64_t v150 = v519;
  int v151 = &OBJC_IVAR___NRLinkBluetooth__recvUncompressedIP;
  switch(v512)
  {
    case 1u:
      id v152 = (void *)_NRCopyLogObjectForNRUUID();
      int v153 = _NRLogIsLevelEnabled();

      if (!v153) {
        goto LABEL_299;
      }
      id v154 = (void *)_NRCopyLogObjectForNRUUID();
      id v155 = [(id)v1 copyDescription];
      _NRLogWithArgs();
      goto LABEL_295;
    case 2u:
      goto LABEL_285;
    case 3u:
      int v151 = &OBJC_IVAR___NRLinkBluetooth__recvEncapsulated6LoWPAN;
      goto LABEL_285;
    case 4u:
      if (!(_WORD)v518)
      {
        id v203 = objc_alloc_init((Class)NSData);
LABEL_333:
        if (v515)
        {
          [v203 bytes];
          [v203 length];
          if (qword_1001F4BB0 != -1) {
            dispatch_once(&qword_1001F4BB0, &stru_1001C7C98);
          }
          id v204 = (id)qword_1001F4BA8;
          v533 = _NSConcreteStackBlock;
          uint64_t v534 = 3221225472;
          v535 = sub_10008FDC0;
          v536 = &unk_1001C8698;
          unint64_t v537 = 0;
          dispatch_async(v204, &v533);
        }
        uint64_t v205 = v519;
        *(void *)(v1 + v519) |= 0x20000000uLL;
        sub_10008FE80(v1, v203);

        uint64_t v150 = v205;
        LODWORD(v515) = 0;
        goto LABEL_300;
      }
      int v170 = (char *)malloc_type_malloc(v517, 0xA172743EuLL);
      if (!v170)
      {
        id v438 = sub_100070988();
        int v439 = _NRLogIsLevelEnabled();

        if (v439)
        {
          id v440 = sub_100070988();
          _NRLogWithArgs();
        }
LABEL_580:
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v461 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v461 = 136446466;
        *(void *)(v461 + 4) = "strict_malloc";
        *(_WORD *)(v461 + 12) = 2048;
        *(void *)(v461 + 14) = v517;
        goto LABEL_474;
      }
      if (!(_WORD)v514) {
        goto LABEL_494;
      }
      id v171 = v170;
      v520 = v500;
      uint64_t v172 = 0;
      unsigned int v173 = 0;
      unsigned int v174 = (unsigned __int16)v518;
      uint64_t v1 = 16 * (unsigned __int16)v514;
      unsigned int v175 = 3;
      while (1)
      {
        unsigned int v176 = *(_DWORD *)((char *)&v540 + v172 + 8);
        if (!v175) {
          break;
        }
        if (v175 <= v176)
        {
          if (v175 >= v176)
          {
            unsigned int v175 = 0;
            goto LABEL_265;
          }
          break;
        }
        v175 -= v176;
LABEL_265:
        v172 += 16;
        if (v1 == v172) {
          goto LABEL_331;
        }
      }
      unsigned int v177 = v176 - v175;
      if (v177 >= v174 - v173) {
        size_t v178 = v174 - v173;
      }
      else {
        size_t v178 = v177;
      }
      memcpy(&v171[v173], (const void *)(*(void *)((char *)&v540 + v172) + v175), v178);
      v173 += v178;
      if (v173 < v174)
      {
        unsigned int v175 = 0;
        uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        goto LABEL_265;
      }
      uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_331:
      if (v173 == v174)
      {
        id v202 = objc_alloc((Class)NSData);
        id v203 = [v202 initWithBytesNoCopy:v171 length:v517 freeWhenDone:1];
        uint64_t v1 = v513;
        goto LABEL_333;
      }
      id v441 = sub_100070988();
      int v442 = _NRLogIsLevelEnabled();

      if (v442)
      {
        id v443 = sub_100070988();
        v483 = (void *)createIOVecString();
        _NRLogWithArgs();
      }
LABEL_583:
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v465 = _os_log_pack_fill();
      id v466 = (id)createIOVecString();
      sub_100043BF4(v465, (uint64_t)"nrWriteIOVecToBuffer", v173, v174, 3, (uint64_t)v466);

LABEL_493:
      sub_100070988();
      _NRLogAbortWithPack();
LABEL_494:
      id v360 = sub_100070988();
      int v361 = _NRLogIsLevelEnabled();

      if (v361)
      {
        id v362 = sub_100070988();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v331 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v331 = 136446210;
      v332 = "nrWriteIOVecToBuffer";
LABEL_473:
      *(void *)(v331 + 4) = v332;
LABEL_474:
      sub_100070988();
      _NRLogAbortWithPack();
LABEL_475:
      size_t v517 = v34;
      uint64_t v518 = v33;
LABEL_476:
      StringFromNRTLVType = (void *)createIOVecStringWithContents();
      sub_100074894((void *)v1, @"LtN not enough ioVecs %@ for %u", v333, v334, v335, v336, v337, v338, (uint64_t)StringFromNRTLVType);
LABEL_453:

LABEL_454:
      return;
    case 5u:
      if ((unsigned __int16)v514 == 1 && DWORD2(v540) >= 5 && !HIWORD(DWORD2(v540)))
      {
        sub_1000901E8((void *)v1, (unsigned __int8 *)(v540 + 3), (unsigned __int16)(WORD4(v540) - 5));
        goto LABEL_299;
      }
      if (!v517)
      {
        id v455 = sub_100070988();
        int v456 = _NRLogIsLevelEnabled();

        if (v456)
        {
          id v457 = sub_100070988();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v331 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v331 = 136446210;
        v332 = "strict_malloc";
        goto LABEL_473;
      }
      int v194 = (unsigned __int8 *)malloc_type_malloc(v517, 0xA172743EuLL);
      if (!v194)
      {
        id v458 = sub_100070988();
        int v459 = _NRLogIsLevelEnabled();

        if (v459)
        {
          id v460 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_580;
      }
      id v195 = v194;
      unsigned int v174 = (unsigned __int16)v518;
      if (!(_WORD)v518)
      {

        goto LABEL_341;
      }
      v520 = v500;
      if (!(_WORD)v514) {
        goto LABEL_494;
      }
      uint64_t v196 = 0;
      unsigned int v173 = 0;
      uint64_t v197 = 16 * (unsigned __int16)v514;
      unsigned int v198 = 3;
      break;
    case 0x64u:
      int v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_ESP;
      goto LABEL_285;
    case 0x65u:
      int v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_ESP_ECT0;
      goto LABEL_285;
    case 0x66u:
      int v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_TCP;
      goto LABEL_285;
    case 0x67u:
      int v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_TCP_ECT0;
      goto LABEL_285;
    case 0x68u:
      int v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_ESP_ClassC;
      goto LABEL_285;
    case 0x69u:
      int v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_ESP_ClassC_ECT0;
LABEL_285:
      ++*(void *)(v1 + *v151);
      unsigned int v179 = nrTLVToPacket();
      if (v179)
      {
        unsigned int v180 = v179;
        *(void *)(v1 + v519) |= 0x8000000uLL;
        WORD1(v523) = v179;
        if (gNRPacketLoggingEnabled)
        {
          getESPSequenceNumberFromPacket();
          if (gNRPacketLoggingEnabled)
          {
            getESPSPIFromPacket();
            if (gNRPacketLoggingEnabled)
            {
              id v214 = (void *)_NRCopyLogObjectForNRUUID();
              int v215 = _NRLogIsLevelEnabled();

              if (v215)
              {
                int v216 = (void *)_NRCopyLogObjectForNRUUID();
                id v471 = [(id)v1 copyDescription];
                _NRLogWithArgs();
              }
              uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            }
          }
        }
        uint64_t packet = os_channel_slot_get_packet();
        if (v515)
        {
          int v182 = (void *)v500[0];
          *(void *)(v500[0] + 7) = 0;
          *int v182 = 0;
          char v538 = 1;
          if (packet)
          {
            os_packet_set_flow_uuid();
            *(void *)(v1 + v519) |= 0x10000000uLL;
            if (gNRPacketLoggingEnabled)
            {
              id v220 = (void *)_NRCopyLogObjectForNRUUID();
              int v221 = _NRLogIsLevelEnabled();

              if (v221)
              {
                id v222 = (void *)_NRCopyLogObjectForNRUUID();
                id v472 = [(id)v1 copyDescription];
                _NRLogWithArgs();
              }
            }
          }
          unsigned int ESPSequenceNumberFromPacket = getESPSequenceNumberFromPacket();
          unsigned int ESPSPIFromPacket = getESPSPIFromPacket();
          if (qword_1001F4BB0 != -1) {
            dispatch_once(&qword_1001F4BB0, &stru_1001C7C98);
          }
          int v185 = (id)qword_1001F4BA8;
          v533 = _NSConcreteStackBlock;
          uint64_t v534 = 3221225472;
          v535 = sub_10008FDC0;
          v536 = &unk_1001C8698;
          unint64_t v537 = __PAIR64__(ESPSequenceNumberFromPacket, ESPSPIFromPacket);
          dispatch_async(v185, &v533);

          uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        }
        else if (packet)
        {
          os_packet_clear_flow_uuid();
        }
        os_channel_set_slot_properties();
        LODWORD(v515) = 0;
        ++*(void *)(v1 + 783);
        *(void *)(v1 + 799) += v180;
        v502 += v180;
        ++v503;
        uint64_t v508 = v149;
      }
      else
      {
        id v186 = (void *)_NRCopyLogObjectForNRUUID();
        int v187 = _NRLogIsLevelEnabled();

        if (v187)
        {
          id v154 = (void *)_NRCopyLogObjectForNRUUID();
          id v155 = [(id)v1 copyDescription];
          int v188 = (void *)createStringFromNRTLVType();
          _NRLogWithArgs();

LABEL_295:
        }
      }
      goto LABEL_299;
    default:
      goto LABEL_300;
  }
  while (2)
  {
    unsigned int v199 = *(_DWORD *)((char *)&v540 + v196 + 8);
    if (v198)
    {
      if (v198 > v199)
      {
        v198 -= v199;
      }
      else
      {
        if (v198 < v199) {
          goto LABEL_324;
        }
        unsigned int v198 = 0;
      }
    }
    else
    {
LABEL_324:
      unsigned int v200 = v199 - v198;
      if (v200 >= v174 - v173) {
        size_t v201 = v174 - v173;
      }
      else {
        size_t v201 = v200;
      }
      memcpy(&v195[v173], (const void *)(*(void *)((char *)&v540 + v196) + v198), v201);
      v173 += v201;
      if (v173 >= v174)
      {
        uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_339:
        if (v173 != v174)
        {
          id v462 = sub_100070988();
          int v463 = _NRLogIsLevelEnabled();

          if (v463)
          {
            id v464 = sub_100070988();
            v484 = (void *)createIOVecString();
            _NRLogWithArgs();
          }
          goto LABEL_583;
        }
        sub_1000901E8((void *)v1, v195, (unsigned __int16)v518);
LABEL_341:
        free(v195);
LABEL_299:
        uint64_t v150 = v519;
LABEL_300:
        *(void *)(v1 + v150) |= 0x40000000uLL;
        if (!*(void *)(v1 + 1887)) {
          goto LABEL_305;
        }
        uint64_t v11 = v511;
        if (*(void *)(v1 + 1895))
        {
          *(unsigned char *)(v1 + 253) %= *(unsigned char *)(v1 + 252);
          uint64_t v189 = *(void *)(v1 + 1895);
          id v190 = (void *)(v189 + 8 * *(unsigned __int8 *)(v1 + 253));
          if ((unint64_t)(v190 + 1) > v189 + 8 * (unint64_t)*(unsigned __int8 *)(v1 + 252))
          {
            uint64_t v191 = (void *)_NRCopyLogObjectForNRUUID();
            int v192 = _NRLogIsLevelEnabled();

            if (v192)
            {
              int v193 = (void *)_NRCopyLogObjectForNRUUID();
              id v480 = [(id)v1 copyDescription];
              _NRLogWithArgs();

              uint64_t v11 = v511;
              int v12 = v522;
              goto LABEL_15;
            }
LABEL_305:
            uint64_t v11 = v511;
            int v12 = v522;
            goto LABEL_15;
          }
          if ((v190 & 7) == 0)
          {
            *id v190 = *(void *)(v1 + 1887);
            ++*(unsigned char *)(v1 + 253);
            *(void *)(v1 + 1887) = 0;
          }
        }
        int v12 = v522;
        goto LABEL_15;
      }
      unsigned int v198 = 0;
      uint64_t v10 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    }
    v196 += 16;
    if (v197 == v196) {
      goto LABEL_339;
    }
    continue;
  }
}

double sub_10008FD4C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  *(void *)&double result = 136446978;
  *(_DWORD *)a1 = 136446978;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 24) = 1024;
  *(_DWORD *)(a1 + 26) = a5;
  return result;
}

double sub_10008FD7C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7)
{
  *(void *)&double result = 136447490;
  *(_DWORD *)a1 = 136447490;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 24) = 2112;
  *(void *)(a1 + 26) = a5;
  *(_WORD *)(a1 + 34) = 1024;
  *(_DWORD *)(a1 + 36) = a6;
  *(_WORD *)(a1 + 40) = 1024;
  *(_DWORD *)(a1 + 42) = a7;
  return result;
}

void sub_10008FDC0(uint64_t a1)
{
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  int v2 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 32)];
  [v4 setObject:v2 forKeyedSubscript:@"Packet SPI"];

  id v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 36)];
  [v4 setObject:v3 forKeyedSubscript:@"Packet sequence number"];

  sub_100114390(@"NetworkRelay waking packet", v4);
}

void sub_10008FE80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v33 = v3;
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 1655);
      IKEv2Packetid String = (void *)createIKEv2PacketString();
      [(id)a1 reportEvent:3007, @"Receiving IKEv2 packet #%llu %@ len %llu", v4, IKEv2PacketString, [v33 length] detailsFormat];

      ++*(void *)(a1 + 1655);
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      LODWORD(v4) = _NRLogIsLevelEnabled();

      if (v4)
      {
        unsigned int v32 = (void *)_NRCopyLogObjectForNRUUID();
        id v7 = [(id)a1 copyDescription];
        uint64_t v30 = *(void **)(a1 + 1655);
        uint64_t v31 = v7;
        id v29 = [v33 length];
        id v8 = v33;
        unsigned int v9 = [v8 length];
        uint64_t v10 = (unsigned __int8 *)[v8 bytes];
        id v11 = objc_alloc_init((Class)NSMutableString);
        if (v9)
        {
          uint64_t v12 = 0;
          do
          {
            [v11 appendFormat:@"%02X", v10[v12]];
            if ((~v12 & 0xF) == 0 || (~v12 & 3) == 0) {
              [v11 appendString:];
            }
            ++v12;
          }
          while (v9 != v12);
        }

        id v27 = v29;
        id v28 = v11;
        id v25 = v31;
        id v26 = v30;
        uint64_t v24 = 7254;
        unsigned int v22 = "";
        int v23 = "-[NRLinkBluetooth handleIncomingIKEData:]";
        _NRLogWithArgs();
      }
      uint64_t v13 = *(void *)(a1 + 1255);
      uint64_t v14 = (void *)_NRCopyLogObjectForNRUUID();
      if (v13)
      {
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          int v16 = (void *)_NRCopyLogObjectForNRUUID();
          id v25 = [(id)a1 copyDescription];
          id v26 = [v33 length];
          uint64_t v24 = 7261;
          unsigned int v22 = "";
          int v23 = "-[NRLinkBluetooth handleIncomingIKEData:]";
          _NRLogWithArgs();
        }
        [*(id *)(a1 + 1255) receivePacketData:v33, v22, v23, v24, v25, v26, v27, v28];
      }
      else
      {
        int v17 = _NRLogIsLevelEnabled();

        if (v17)
        {
          unsigned int v18 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v24 = 7257;
          id v25 = [(id)a1 copyDescription];
          unsigned int v22 = "";
          int v23 = "-[NRLinkBluetooth handleIncomingIKEData:]";
          _NRLogWithArgs();
        }
        [*(id *)(a1 + 1199) addObject:v33, v22, v23, v24, v25, v26, v27, v28];
      }
      goto LABEL_19;
    }
    id v19 = sub_100070988();
    int v20 = _NRLogIsLevelEnabled();

    id v3 = 0;
    if (v20)
    {
      id v21 = sub_100070988();
      _NRLogWithArgs();

LABEL_19:
      id v3 = v33;
    }
  }
}

void sub_1000901E8(void *a1, unsigned __int8 *a2, unsigned int a3)
{
  id v5 = a1;
  if (a2 && a3)
  {
    int v6 = *a2;
    id v17 = v5;
    if (v6 == 2)
    {
      uint64_t v7 = mach_absolute_time();
      if (a3 < 9) {
        unint64_t v8 = 0;
      }
      else {
        unint64_t v8 = *(void *)(a2 + 1);
      }
      uint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v14 = (void *)_NRCopyLogObjectForNRUUID();
        id v16 = [v17 copyDescription];
        _NRLogWithArgs();
      }
      sub_1000907A0((uint64_t)v17, bswap64(v8), v7);
    }
    else if (v6 == 1)
    {
      *a2 = 2;
      sub_1000903A0(v5, a2, a3, 0);
    }
    else
    {
      unsigned int v9 = (void *)_NRCopyLogObjectForNRUUID();
      int v10 = _NRLogIsLevelEnabled();

      id v5 = v17;
      if (!v10) {
        goto LABEL_15;
      }
      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      id v15 = [v17 copyDescription];
      _NRLogWithArgs();
    }
    id v5 = v17;
  }
LABEL_15:
}

uint64_t sub_1000903A0(void *a1, const void *a2, unsigned int a3, int a4)
{
  uint64_t v7 = a1;
  unint64_t v8 = (char *)v7;
  if (!a2)
  {
    id v23 = sub_100070988();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v19 = sub_100070988();
      _NRLogWithArgs();
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (v7[16] == 255)
  {
    uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
    int v14 = _NRLogIsLevelEnabled();

    if (v14) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
  if (!*(void *)(v7 + 975))
  {
    id v15 = (void *)_NRCopyLogObjectForNRUUID();
    int v16 = _NRLogIsLevelEnabled();

    if (v16) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
  unsigned int v9 = *(_DWORD *)(v7 + 287);
  if (v9 <= *(_DWORD *)(v7 + 291))
  {
    os_channel_get_next_slot();
    unsigned int v9 = *(_DWORD *)(v8 + 287);
  }
  unsigned int v10 = *(_DWORD *)(v8 + 279) - v9;
  if (v10 <= 4)
  {
    id v11 = (void *)_NRCopyLogObjectForNRUUID();
    int v12 = _NRLogIsLevelEnabled();

    if (v12) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
  if (v10 - 5 < a3)
  {
    id v17 = (void *)_NRCopyLogObjectForNRUUID();
    int v18 = _NRLogIsLevelEnabled();

    if (v18)
    {
LABEL_15:
      id v19 = (void *)_NRCopyLogObjectForNRUUID();
      id v20 = [v8 copyDescription];
      _NRLogWithArgs();

LABEL_16:
      uint64_t v21 = 0;
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v21 = 0;
    goto LABEL_24;
  }
  uint64_t v22 = *(void *)(v8 + 447) + v9;
  *(unsigned char *)uint64_t v22 = 5;
  *(_WORD *)(v22 + 1) = __rev16(a3);
  memcpy((void *)(v22 + 3), a2, a3);
  *(_WORD *)(v22 + a3 + 3) = ~(unsigned __int16)os_inet_checksum();
  *(_DWORD *)(v8 + 287) += a3;
  if (a4) {
    uint64_t v21 = mach_absolute_time();
  }
  else {
    uint64_t v21 = 0;
  }
  sub_100071414(v8, *(void *)(v8 + 367));
LABEL_24:

  return v21;
}

void sub_1000907A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (qword_1001F49D8 != -1) {
      dispatch_once(&qword_1001F49D8, &stru_1001C6B60);
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v6 = [[*(id *)(a1 + 1207) copy];
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v13 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          if (v13)
          {
            if (v13[2] == a2)
            {
              uint64_t v14 = v13[1];
              if (v14)
              {
                if (a3) {
                  unint64_t v11 = (a3 - v13[3])
                }
                      * (unint64_t)dword_1001F49D0
                      / *(unsigned int *)algn_1001F49D4;
                else {
                  unint64_t v11 = 0;
                }
                (*(void (**)(uint64_t, unint64_t))(v14 + 16))(v14, v11);
                objc_setProperty_nonatomic_copy(v13, v12, 0, 8);
              }
LABEL_10:
              [*(id *)(a1 + 1207) removeObject:v13];
              continue;
            }
          }
          else if (!a2)
          {
            goto LABEL_10;
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v8);
    }

    if (![*(id *)(a1 + 1207) count])
    {
      id v15 = *(void **)(a1 + 1207);
      *(void *)(a1 + 1207) = 0;
    }
  }
}

void sub_100090974(id a1)
{
}

void sub_100090980(uint64_t a1, void *__src, size_t __n, int a4)
{
  if (gNRPacketLoggingEnabled)
  {
    uint64_t v10 = +[NSDate date];
    unint64_t v11 = *(void **)(a1 + 1679);
    *(void *)(a1 + 1679) = v10;

    if (!__src) {
      goto LABEL_15;
    }
  }
  else if (!__src)
  {
    goto LABEL_15;
  }
  if (__n)
  {
    if (a4)
    {
      *(void *)(a1 + 1407) += __n;
      if (!gNRPacketLoggingEnabled)
      {
        id v8 = &OBJC_IVAR___NRLinkBluetooth__filledInUrgentLinkReadBufferBytes;
LABEL_7:
        uint64_t v9 = &OBJC_IVAR___NRLinkBluetooth__urgentLinkReadBuffer;
LABEL_11:
        memcpy((void *)(*(void *)(a1 + *v9) + *(unsigned int *)(a1 + *v8)), __src, __n);
        *(_DWORD *)(a1 + *v8) += __n;
        sub_100090C9C(a1, a4);
        return;
      }
      long long v16 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id v8 = &OBJC_IVAR___NRLinkBluetooth__filledInUrgentLinkReadBufferBytes;
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
      long long v18 = (void *)_NRCopyLogObjectForNRUUID();
      id v19 = [(id)a1 copyDescription];
      _NRLogWithArgs();
      uint64_t v9 = &OBJC_IVAR___NRLinkBluetooth__urgentLinkReadBuffer;
LABEL_24:

      goto LABEL_11;
    }
    *(void *)(a1 + 1375) += __n;
    if (gNRPacketLoggingEnabled)
    {
      id v20 = (void *)_NRCopyLogObjectForNRUUID();
      int v21 = _NRLogIsLevelEnabled();

      id v8 = &OBJC_IVAR___NRLinkBluetooth__filledInLinkReadBufferBytes;
      if (v21)
      {
        long long v18 = (void *)_NRCopyLogObjectForNRUUID();
        id v19 = [(id)a1 copyDescription];
        _NRLogWithArgs();
        uint64_t v9 = &OBJC_IVAR___NRLinkBluetooth__linkReadBuffer;
        goto LABEL_24;
      }
    }
    else
    {
      id v8 = &OBJC_IVAR___NRLinkBluetooth__filledInLinkReadBufferBytes;
    }
    uint64_t v9 = &OBJC_IVAR___NRLinkBluetooth__linkReadBuffer;
    goto LABEL_11;
  }
LABEL_15:
  SEL v12 = (void *)_NRCopyLogObjectForNRUUID();
  int v13 = _NRLogIsLevelEnabled();

  if (v13)
  {
    uint64_t v14 = (void *)_NRCopyLogObjectForNRUUID();
    id v15 = [(id)a1 copyDescription];
    _NRLogWithArgs();
  }

  [(id)a1 cancelWithReason:@"pipe received no data"];
}

void sub_100090C9C(uint64_t a1, int a2)
{
  uint64_t v4 = a1;
  id v5 = &OBJC_IVAR___NRLinkBluetooth__filledInUrgentLinkReadBufferBytes;
  if (!a2) {
    id v5 = &OBJC_IVAR___NRLinkBluetooth__filledInLinkReadBufferBytes;
  }
  id v6 = &OBJC_IVAR___NRLinkBluetooth__handledUrgentLinkReadBufferBytes;
  if (!a2) {
    id v6 = &OBJC_IVAR___NRLinkBluetooth__handledLinkReadBufferBytes;
  }
  id v7 = &OBJC_IVAR___NRLinkBluetooth__linkReadBuffer;
  if (a2) {
    id v7 = &OBJC_IVAR___NRLinkBluetooth__urgentLinkReadBuffer;
  }
  unint64_t v8 = *v6;
  uint64_t v9 = (void *)*v5;
  if (*(_DWORD *)(a1 + v8) > *(_DWORD *)((char *)v9 + a1))
  {
    id v162 = sub_100070988();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v164 = sub_100070988();
      _NRLogWithArgs();
    }
    int v10 = _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v165 = _os_log_pack_fill();
    int v166 = *(_DWORD *)(v4 + v8);
    int v167 = *(_DWORD *)((char *)v9 + v4);
    *(_DWORD *)uint64_t v165 = 136446722;
    *(void *)(v165 + 4) = "-[NRLinkBluetooth handleReadData:]";
    *(_WORD *)(v165 + 12) = 1024;
    *(_DWORD *)(v165 + 14) = v166;
    *(_WORD *)(v165 + 18) = 1024;
    *(_DWORD *)(v165 + 20) = v167;
LABEL_257:
    sub_100070988();
    _NRLogAbortWithPack();
  }
  else
  {
    int v10 = a2;
    int v2 = *(char **)(a1 + *v7);
    id v3 = &gNRPacketLoggingEnabled;
    if (!gNRPacketLoggingEnabled) {
      goto LABEL_9;
    }
  }
  id v168 = (void *)_NRCopyLogObjectForNRUUID();
  int v169 = _NRLogIsLevelEnabled();

  if (v169)
  {
    int v170 = (void *)_NRCopyLogObjectForNRUUID();
    id v171 = [(id)v4 copyDescription];
    uint64_t v210 = *(unsigned int *)(v4 + v8);
    _NRLogWithArgs();
  }
LABEL_9:
  if (v10)
  {
    if (*(unsigned char *)(v4 + 229))
    {
      int v11 = *(unsigned __int8 *)(v4 + 16);
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  int v11 = *(unsigned __int8 *)(v4 + 16);
  if ((v11 - 1) <= 1)
  {
LABEL_13:
    uint64_t v12 = *(unsigned int *)(v4 + v8);
    if ((*(_DWORD *)((char *)v9 + v4) - v12) <= 0xB)
    {
      int v13 = (void *)_NRCopyLogObjectForNRUUID();
      int v14 = _NRLogIsLevelEnabled();

      if (!v14) {
        return;
      }
      id v225 = (id)_NRCopyLogObjectForNRUUID();
      id v15 = [(id)v4 copyDescription];
      id v16 = sub_10011A480(*(unsigned __int8 *)(v4 + 16));
      _NRLogWithArgs();

      goto LABEL_28;
    }
    id v25 = &v2[v12];
    if (*(void *)&v2[v12] != 0x53554E494D524554)
    {
      id v225 = [objc_alloc((Class)NSData) initWithBytes:v25 length:8];
      id v26 = [objc_alloc((Class)NSData) initWithBytes:&unk_10016C9D4 length:8];
      id v27 = v26;
      id v28 = "";
      if (v10) {
        id v28 = "urgent ";
      }
      [(id)v4 cancelWithReason:@"invalid %sprelude: received %@, expected %@, filledIn=%u, handled=%u", v28, v225, v26, *(unsigned int *)((char *)v9 + v4), *(unsigned int *)(v4 + v8)];

LABEL_28:

      return;
    }
    unint64_t v29 = (bswap32(*((unsigned __int16 *)v25 + 5)) >> 16) + 14;
    if (v10)
    {
      *(unsigned char *)(v4 + 229) = 1;
      [(id)v4 reportEvent:4217];
      unsigned int v30 = *(_DWORD *)((char *)v9 + v4) - *(_DWORD *)(v4 + v8);
      uint64_t v31 = (unsigned __int16)v29;
      if (v30 > (unsigned __int16)v29)
      {
        if (*v3)
        {
          unsigned int v177 = (void *)_NRCopyLogObjectForNRUUID();
          int v178 = _NRLogIsLevelEnabled();

          if (v178)
          {
            unsigned int v179 = (void *)_NRCopyLogObjectForNRUUID();
            id v180 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
        }
        memmove(v2, &v25[(unsigned __int16)v29], *(_DWORD *)((char *)v9 + v4) - *(_DWORD *)(v4 + v8) - (unsigned __int16)v29);
        int v32 = *(_DWORD *)((char *)v9 + v4) - *(_DWORD *)(v4 + v8) - (unsigned __int16)v29;
        goto LABEL_71;
      }
      if (v30 == (unsigned __int16)v29)
      {
        int v32 = *v3;
        if (!*v3)
        {
LABEL_71:
          *(_DWORD *)((char *)v9 + v4) = v32;
          *(_DWORD *)(v4 + v8) = 0;
          unsigned int v62 = (void *)_NRCopyLogObjectForNRUUID();
          int v63 = _NRLogIsLevelEnabled();

          if (v63)
          {
            uint64_t v64 = (void *)_NRCopyLogObjectForNRUUID();
            id v213 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
          if (*(unsigned char *)(v4 + 246))
          {
            sub_100093650((void *)v4, v31, &off_1001D4960);
          }
          else
          {
            unsigned int v73 = (void *)_NRCopyLogObjectForNRUUID();
            int v74 = _NRLogIsLevelEnabled();

            if (v74)
            {
              int v75 = (void *)_NRCopyLogObjectForNRUUID();
              id v214 = [(id)v4 copyDescription];
              _NRLogWithArgs();
            }
            int v76 = *(NSObject **)(v4 + 8);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100093850;
            block[3] = &unk_1001C8BA8;
            void block[4] = v4;
            dispatch_async(v76, block);
          }
          return;
        }
      }
      else
      {
        id v181 = sub_100070988();
        int v182 = _NRLogIsLevelEnabled();

        if (v182)
        {
          id v183 = sub_100070988();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v184 = _os_log_pack_fill();
        sub_10008FD4C(v184, (uint64_t)"-[NRLinkBluetooth handleReadData:]", (unsigned __int16)v29, *(_DWORD *)((char *)v9 + v4), *(_DWORD *)(v4 + v8));
        sub_100070988();
        _NRLogAbortWithPack();
      }
      unsigned int v90 = (int *)v4;
      int v185 = (void *)_NRCopyLogObjectForNRUUID();
      int v186 = _NRLogIsLevelEnabled();

      if (v186)
      {
        int v187 = (void *)_NRCopyLogObjectForNRUUID();
        id v188 = [(id)v4 copyDescription];
        _NRLogWithArgs();

        int v32 = 0;
        goto LABEL_71;
      }
LABEL_272:
      int v32 = 0;
      uint64_t v4 = (uint64_t)v90;
      goto LABEL_71;
    }
    uint64_t v59 = v25[8];
    if (v59 == 1)
    {
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      if (_NRLogIsLevelEnabled())
      {
        id v60 = sub_100070988();
        uint64_t v210 = 1;
        _NRLogWithArgs();
      }
      id v61 = [objc_alloc((Class)NSString) initWithFormat:@"version %u", 1, v210];
    }
    else
    {
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      if (_NRLogIsLevelEnabled())
      {
        id v65 = sub_100070988();
        _NRLogWithArgs();
      }
      id v61 = [objc_alloc((Class)NSString) initWithFormat:@"localVersion %u remoteVersion %u", 1, v59];
    }
    uint64_t v9 = v61;
    *(unsigned char *)(v4 + 209) = v25[9];
    int v66 = *(unsigned __int8 *)(v4 + 208);
    int v67 = *(unsigned __int8 *)(v4 + 209);
    id v225 = (id)v29;
    if (v66 == v67)
    {
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      if (_NRLogIsLevelEnabled())
      {
        id v68 = sub_100070988();
        uint64_t v210 = (uint64_t)sub_10009390C(*(unsigned __int8 *)(v4 + 209));
        _NRLogWithArgs();
      }
      id v69 = objc_alloc((Class)NSString);
      int v70 = @"Invalid";
      switch(*(unsigned char *)(v4 + 209))
      {
        case 0:
          break;
        case 0xA:
          int v70 = @"PairWithOOBKey";
          break;
        case 0xB:
          int v70 = @"PairWithIDSKeys";
          break;
        case 0xC:
          int v70 = @"PairWithOOBKeyOrIDSKeys";
          break;
        case 0x14:
          int v70 = @"HasCompletedPairing";
          break;
        default:
          int v70 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"Unknown(%lld)", *(unsigned __int8 *)(v4 + 209)];
          break;
      }
      id v84 = [v69 initWithFormat:@"state %@", v70];
    }
    else
    {
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      int v224 = v9;
      if (_NRLogIsLevelEnabled())
      {
        id v71 = sub_100070988();
        int v207 = (__CFString *)sub_10009390C(*(unsigned __int8 *)(v4 + 209));
        int v209 = (__CFString *)sub_10009390C(*(unsigned __int8 *)(v4 + 208));
        _NRLogWithArgs();
      }
      id v72 = objc_alloc((Class)NSString);
      int v70 = @"Invalid";
      switch(*(unsigned char *)(v4 + 208))
      {
        case 0:
          break;
        case 0xA:
          int v70 = @"PairWithOOBKey";
          break;
        case 0xB:
          int v70 = @"PairWithIDSKeys";
          break;
        case 0xC:
          int v70 = @"PairWithOOBKeyOrIDSKeys";
          break;
        case 0x14:
          int v70 = @"HasCompletedPairing";
          break;
        default:
          int v70 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"Unknown(%lld)", *(unsigned __int8 *)(v4 + 208)];
          break;
      }
      unsigned int v85 = @"Invalid";
      switch(*(unsigned char *)(v4 + 209))
      {
        case 0:
          break;
        case 0xA:
          unsigned int v85 = @"PairWithOOBKey";
          break;
        case 0xB:
          unsigned int v85 = @"PairWithIDSKeys";
          break;
        case 0xC:
          unsigned int v85 = @"PairWithOOBKeyOrIDSKeys";
          break;
        case 0x14:
          unsigned int v85 = @"HasCompletedPairing";
          break;
        default:
          unsigned int v85 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"Unknown(%lld)", *(unsigned __int8 *)(v4 + 209)];
          break;
      }
      id v84 = [v72 initWithFormat:@"localState %@ remoteState %@", v70, v85];

      uint64_t v9 = v224;
    }

    unsigned int v86 = *(unsigned __int8 *)(v4 + 209);
    unsigned int v87 = *(unsigned __int8 *)(v4 + 208);
    if (v86 == v87)
    {
      unsigned __int16 v88 = (unsigned __int16)v225;
    }
    else
    {
      unsigned __int16 v88 = (unsigned __int16)v225;
      if (v86 == 10 && v87 != 12 || v86 != 12 && (!*(unsigned char *)(v4 + 209) || v87 == 10))
      {
        [(id)v4 cancelWithReason:@"Incompatible pairing prelude states %@, %@", v84, v9];
        goto LABEL_252;
      }
      if (v87 < v86) {
        LOBYTE(v86) = *(unsigned char *)(v4 + 208);
      }
    }
    *(unsigned char *)(v4 + 210) = v86;
    unsigned int v89 = @"Invalid";
    switch(*(unsigned char *)(v4 + 210))
    {
      case 0:
        break;
      case 0xA:
        unsigned int v89 = @"PairWithOOBKey";
        break;
      case 0xB:
        unsigned int v89 = @"PairWithIDSKeys";
        break;
      case 0xC:
        unsigned int v89 = @"PairWithOOBKeyOrIDSKeys";
        break;
      case 0x14:
        unsigned int v89 = @"HasCompletedPairing";
        break;
      default:
        unsigned int v89 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"Unknown(%lld)", *(unsigned __int8 *)(v4 + 210)];
        break;
    }
    [(id)v4 reportEvent:3010, @"%@, %@, using %@", v9, v84, v89 detailsFormat];

    unsigned int v90 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    uint64_t v91 = v88;
    if (*(_DWORD *)(v4 + 311) - *(_DWORD *)(v4 + 315) < v88)
    {
      unsigned int v92 = (void *)_NRCopyLogObjectForNRUUID();
      int v93 = _NRLogIsLevelEnabled();

      if (v93)
      {
        int v94 = (void *)_NRCopyLogObjectForNRUUID();
        id v95 = [(id)v4 copyDescription];
        id v96 = sub_10011A480(*(unsigned __int8 *)(v4 + 16));
        _NRLogWithArgs();
      }
      goto LABEL_252;
    }
    id v222 = v84;
    int v224 = v9;
    id v97 = [objc_alloc((Class)NSData) initWithBytes:v25 length:v88];
    sub_100093A08(v4, v97);

    unint64_t v8 = v88 - 2;
    if (v88 == 2)
    {
      id v189 = sub_100070988();
      int v190 = _NRLogIsLevelEnabled();

      if (v190)
      {
        id v191 = sub_100070988();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      uint64_t v31 = (uint64_t)&v216 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v192 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v192 = 136446210;
      *(void *)(v192 + 4) = "nrChecksumVerify";
      sub_100070988();
      _NRLogAbortWithPack();
      goto LABEL_272;
    }
    uint64_t v220 = v88 - 2;
    unint64_t v221 = v88;
    id v223 = &v25[v220];
    int v98 = *(unsigned __int16 *)&v25[v220];
    if (v98 != (unsigned __int16)~os_inet_checksum())
    {
      id v136 = sub_100070988();
      int v137 = _NRLogIsLevelEnabled();

      if (v137)
      {
        id v138 = sub_100070988();
        _NRLogWithArgs();
      }
      __int16 v139 = os_inet_checksum();
      uint64_t v140 = *(unsigned __int16 *)v223;
      uint64_t v141 = *(void *)(v4 + 1863);
      if (v141) {
        *(unsigned char *)(v141 + 99) = 1;
      }
      unsigned __int16 v142 = ~v139;
      int v143 = (void *)_NRCopyLogObjectForNRUUID();
      char v144 = _NRLogIsLevelEnabled();

      unsigned int v145 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      if (v144)
      {
        id v225 = (id)_NRCopyLogObjectForNRUUID();
        id v223 = (char *)[(id)v4 copyDescription];
        id v146 = *(id *)(v4 + 359);
        unint64_t v221 = (unint64_t)[v146 length];
        id v147 = *(id *)(v4 + 359);
        uint64_t v148 = (void *)_NRCreateDataString();

        uint64_t v149 = v142;
        unsigned int v145 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        _NRLogWithArgs();
      }
      else
      {
        uint64_t v149 = v142;
      }
      id v84 = v222;
      id v150 = *(id *)(v4 + v145[449]);
      [(id)v4 cancelWithReason:@"prelude checksum failed: received %llu bytes, filledIn=%u, handled=%u, receivedChecksum=0x%04x expectedChecksum=0x%04x", [v150 length], *(unsigned int *)(v4 + 311), *(unsigned int *)(v4 + 315), v140, v149];

      uint64_t v9 = v224;
      goto LABEL_252;
    }
    char v99 = (void *)_NRCopyLogObjectForNRUUID();
    int v100 = _NRLogIsLevelEnabled();

    if (v100)
    {
      uint64_t v101 = (void *)_NRCopyLogObjectForNRUUID();
      id v102 = [(id)v4 copyDescription];
      id v103 = *(id *)(v4 + 359);
      [v103 length];
      uint64_t v210 = _NRCreateDataString();
      _NRLogWithArgs();

      uint64_t v91 = v88;
    }
    unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    unint64_t v8 = (unint64_t)v223;
    if (v88 < 0xFu) {
      goto LABEL_235;
    }
    unint64_t v105 = (unint64_t)(v25 + 12);
    uint64_t v219 = v91;
    while (1)
    {
      if (!*(unsigned char *)v105) {
        goto LABEL_151;
      }
      if (v105 + 2 > v8)
      {
        uint64_t v151 = v91;
        id v152 = (void *)_NRCopyLogObjectForNRUUID();
        unint64_t v8 = _NRLogIsLevelEnabled();

        uint64_t v91 = v151;
        if (!v8) {
          goto LABEL_235;
        }
        goto LABEL_234;
      }
      unsigned int v106 = *(unsigned __int16 *)(v105 + 1);
      uint64_t v107 = __rev16(v106);
      if (v105 + 3 + v107 > v8)
      {
        uint64_t v153 = v91;
        id v154 = (void *)_NRCopyLogObjectForNRUUID();
        unint64_t v8 = _NRLogIsLevelEnabled();

        uint64_t v91 = v153;
        if (!v8) {
          goto LABEL_235;
        }
LABEL_234:
        unint64_t v8 = _NRCopyLogObjectForNRUUID();
        id v155 = [(id)v4 copyDescription];
        uint64_t v210 = v220;
        _NRLogWithArgs();

LABEL_235:
        unsigned int v156 = *(_DWORD *)(v4 + 311) - *(_DWORD *)(v4 + v104[286]);
        if (v156 > v91)
        {
          unsigned int v157 = &v25[v221];
          uint64_t v9 = v224;
          if (*v3)
          {
            int v193 = (void *)_NRCopyLogObjectForNRUUID();
            int v194 = _NRLogIsLevelEnabled();

            if (v194)
            {
              id v195 = (void *)_NRCopyLogObjectForNRUUID();
              id v196 = [(id)v4 copyDescription];
              _NRLogWithArgs();
            }
          }
          memmove(*(void **)(v4 + 1311), v157, (*(_DWORD *)(v4 + 311) - (*(_DWORD *)(v4 + v104[286]) + v91)));
          *(_DWORD *)(v4 + 311) -= *(_DWORD *)(v4 + v104[286]) + v91;
          id v84 = v222;
          goto LABEL_242;
        }
        uint64_t v9 = v224;
        if (v156 != v91)
        {
          int v2 = (char *)v91;
          id v197 = sub_100070988();
          int v198 = _NRLogIsLevelEnabled();

          if (v198)
          {
            id v199 = sub_100070988();
            uint64_t v210 = *(unsigned int *)(v4 + 315);
            _NRLogWithArgs();
          }
          int v10 = _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v200 = _os_log_pack_fill();
          sub_10008FD4C(v200, (uint64_t)"-[NRLinkBluetooth handleReadData:]", v91, *(_DWORD *)(v4 + 311), *(_DWORD *)(v4 + 315));
          goto LABEL_257;
        }
        id v84 = v222;
        if (*v3)
        {
          size_t v201 = (void *)_NRCopyLogObjectForNRUUID();
          int v202 = _NRLogIsLevelEnabled();

          if (v202)
          {
            id v203 = (void *)_NRCopyLogObjectForNRUUID();
            id v204 = [(id)v4 copyDescription];
            _NRLogWithArgs();
          }
        }
        *(_DWORD *)(v4 + 311) = 0;
LABEL_242:
        *(_DWORD *)(v4 + v104[286]) = 0;
        if (*(unsigned char *)(v4 + 16) == 1)
        {
          [(id)v4 changeStateTo:3];
LABEL_245:
          if (*(unsigned char *)(v4 + 246))
          {
            if (*(unsigned char *)(v4 + 16) == 4) {
              sub_100093650((void *)v4, v91, &off_1001D4948);
            }
          }
          else
          {
            unsigned int v158 = (void *)_NRCopyLogObjectForNRUUID();
            int v159 = _NRLogIsLevelEnabled();

            if (v159)
            {
              uint64_t v160 = (void *)_NRCopyLogObjectForNRUUID();
              id v215 = [(id)v4 copyDescription];
              _NRLogWithArgs();
            }
            unsigned int v161 = *(NSObject **)(v4 + 8);
            v226[0] = _NSConcreteStackBlock;
            v226[1] = 3221225472;
            v226[2] = sub_100094634;
            v226[3] = &unk_1001C8BA8;
            v226[4] = v4;
            dispatch_async(v161, v226);
          }
        }
        else
        {
          [(id)v4 changeStateTo:4];
          if (sub_100093A18((char *)v4)) {
            goto LABEL_245;
          }
          [(id)v4 cancelWithReason:@"failed to setup nexus"];
        }
LABEL_252:

        return;
      }
      if (*(unsigned char *)v105 == 4) {
        break;
      }
LABEL_150:
      v105 += (v107 + 3);
LABEL_151:
      if (v105 >= v8) {
        goto LABEL_235;
      }
    }
    if (v106 != 4096)
    {
      uint64_t v124 = (void *)_NRCopyLogObjectForNRUUID();
      int v125 = _NRLogIsLevelEnabled();

      if (v125)
      {
        unsigned int v126 = (void *)_NRCopyLogObjectForNRUUID();
        id v208 = [(id)v4 copyDescription];
        _NRLogWithArgs();
      }
      goto LABEL_150;
    }
    [*(id *)(v4 + 1359) getUUIDBytes:&v228];
    unsigned int v108 = *(unsigned __int8 *)(v105 + 3);
    v244.i8[0] = v108 ^ v228;
    if (v228 == v108)
    {
      unsigned int v109 = *(unsigned __int8 *)(v105 + 4);
      v244.i8[1] = v109 ^ v229;
      if (v229 == v109)
      {
        unsigned int v110 = *(unsigned __int8 *)(v105 + 5);
        v244.i8[2] = v110 ^ v230;
        if (v230 == v110)
        {
          unsigned int v111 = *(unsigned __int8 *)(v105 + 6);
          v244.i8[3] = v111 ^ v231;
          if (v231 == v111)
          {
            unsigned int v112 = *(unsigned __int8 *)(v105 + 7);
            v244.i8[4] = v112 ^ v232;
            if (v232 == v112)
            {
              unsigned int v113 = *(unsigned __int8 *)(v105 + 8);
              v244.i8[5] = v113 ^ v233;
              if (v233 == v113)
              {
                unsigned int v114 = *(unsigned __int8 *)(v105 + 9);
                v244.i8[6] = v114 ^ v234;
                if (v234 == v114)
                {
                  unsigned int v115 = *(unsigned __int8 *)(v105 + 10);
                  v244.i8[7] = v115 ^ v235;
                  if (v235 == v115)
                  {
                    unsigned int v116 = *(unsigned __int8 *)(v105 + 11);
                    v244.i8[8] = v116 ^ v236;
                    if (v236 == v116)
                    {
                      unsigned int v117 = *(unsigned __int8 *)(v105 + 12);
                      v244.i8[9] = v117 ^ v237;
                      if (v237 == v117)
                      {
                        unsigned int v118 = *(unsigned __int8 *)(v105 + 13);
                        v244.i8[10] = v118 ^ v238;
                        if (v238 == v118)
                        {
                          unsigned int v119 = *(unsigned __int8 *)(v105 + 14);
                          v244.i8[11] = v119 ^ v239;
                          if (v239 == v119)
                          {
                            unsigned int v120 = *(unsigned __int8 *)(v105 + 15);
                            v244.i8[12] = v120 ^ v240;
                            if (v240 == v120)
                            {
                              unsigned int v121 = *(unsigned __int8 *)(v105 + 16);
                              v244.i8[13] = v121 ^ v241;
                              if (v241 == v121)
                              {
                                unsigned int v122 = *(unsigned __int8 *)(v105 + 17);
                                v244.i8[14] = v122 ^ v242;
                                if (v242 == v122)
                                {
                                  unsigned int v123 = *(unsigned __int8 *)(v105 + 18);
                                  v244.i8[15] = v123 ^ v243;
                                  unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                                  if (v243 > v123) {
                                    *(unsigned char *)(v4 + 242) = 1;
                                  }
                                  goto LABEL_193;
                                }
                                unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                                if (v242 > v122) {
                                  *(unsigned char *)(v4 + 242) = 1;
                                }
LABEL_192:
                                v244.i8[15] = *(unsigned char *)(v105 + 18) ^ v243;
LABEL_193:
                                id v127 = objc_alloc((Class)NSString);
                                int v128 = (void *)sub_10011E920(&v244);
                                id v129 = [v127 initWithFormat:@" %@", v128];
                                unsigned int v130 = *(void **)(v4 + 1367);
                                *(void *)(v4 + 1367) = v129;

                                unsigned int v131 = (void *)_NRCopyLogObjectForNRUUID();
                                LODWORD(v128) = _NRLogIsLevelEnabled();

                                if (v128)
                                {
                                  id v218 = (id)_NRCopyLogObjectForNRUUID();
                                  id v217 = [(id)v4 copyDescription];
                                  id v225 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v105 + 3];
                                  unsigned int v132 = [v225 UUIDString];
                                  size_t v133 = [*(id *)(v4 + 1359) UUIDString];
                                  id v134 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&v244];
                                  unsigned int v135 = [v134 UUIDString];
                                  _NRLogWithArgs();

                                  unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                                }
                                uint64_t v91 = v219;
                                unint64_t v8 = (unint64_t)v223;
                                goto LABEL_150;
                              }
                              unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                              if (v241 > v121) {
                                *(unsigned char *)(v4 + 242) = 1;
                              }
LABEL_191:
                              v244.i8[14] = *(unsigned char *)(v105 + 17) ^ v242;
                              goto LABEL_192;
                            }
                            unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                            if (v240 > v120) {
                              *(unsigned char *)(v4 + 242) = 1;
                            }
LABEL_190:
                            v244.i8[13] = *(unsigned char *)(v105 + 16) ^ v241;
                            goto LABEL_191;
                          }
                          unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                          if (v239 > v119) {
                            *(unsigned char *)(v4 + 242) = 1;
                          }
LABEL_189:
                          v244.i8[12] = *(unsigned char *)(v105 + 15) ^ v240;
                          goto LABEL_190;
                        }
                        unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                        if (v238 > v118) {
                          *(unsigned char *)(v4 + 242) = 1;
                        }
LABEL_188:
                        v244.i8[11] = *(unsigned char *)(v105 + 14) ^ v239;
                        goto LABEL_189;
                      }
                      unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                      if (v237 > v117) {
                        *(unsigned char *)(v4 + 242) = 1;
                      }
LABEL_187:
                      v244.i8[10] = *(unsigned char *)(v105 + 13) ^ v238;
                      goto LABEL_188;
                    }
                    unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                    if (v236 > v116) {
                      *(unsigned char *)(v4 + 242) = 1;
                    }
LABEL_186:
                    v244.i8[9] = *(unsigned char *)(v105 + 12) ^ v237;
                    goto LABEL_187;
                  }
                  unsigned int v104 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
                  if (v235 > v115) {
                    *(unsigned char *)(v4 + 242) = 1;
                  }
LABEL_185:
                  v244.i8[8] = *(unsigned char *)(v105 + 11) ^ v236;
                  goto LABEL_186;
                }
                if (v234 > v114) {
                  *(unsigned char *)(v4 + 242) = 1;
                }
LABEL_184:
                v244.i8[7] = *(unsigned char *)(v105 + 10) ^ v235;
                goto LABEL_185;
              }
              if (v233 > v113) {
                *(unsigned char *)(v4 + 242) = 1;
              }
LABEL_183:
              v244.i8[6] = *(unsigned char *)(v105 + 9) ^ v234;
              goto LABEL_184;
            }
            if (v232 > v112) {
              *(unsigned char *)(v4 + 242) = 1;
            }
LABEL_182:
            v244.i8[5] = *(unsigned char *)(v105 + 8) ^ v233;
            goto LABEL_183;
          }
          if (v231 > v111) {
            *(unsigned char *)(v4 + 242) = 1;
          }
LABEL_181:
          v244.i8[4] = *(unsigned char *)(v105 + 7) ^ v232;
          goto LABEL_182;
        }
        if (v230 > v110) {
          *(unsigned char *)(v4 + 242) = 1;
        }
LABEL_180:
        v244.i8[3] = *(unsigned char *)(v105 + 6) ^ v231;
        goto LABEL_181;
      }
      if (v229 > v109) {
        *(unsigned char *)(v4 + 242) = 1;
      }
    }
    else
    {
      if (v228 > v108) {
        *(unsigned char *)(v4 + 242) = 1;
      }
      v244.i8[1] = *(unsigned char *)(v105 + 4) ^ v229;
    }
    v244.i8[2] = *(unsigned char *)(v105 + 5) ^ v230;
    goto LABEL_180;
  }
LABEL_16:
  if ((v11 - 4) > 5)
  {
    id v23 = (void *)_NRCopyLogObjectForNRUUID();
    int v24 = _NRLogIsLevelEnabled();

    if (!v24) {
      return;
    }
    id v225 = (id)_NRCopyLogObjectForNRUUID();
    id v211 = [(id)v4 copyDescription];
    _NRLogWithArgs();

    goto LABEL_28;
  }
  unsigned int v17 = *(_DWORD *)(v4 + 311);
  long long v18 = (unsigned int *)(v4 + 315);
  unsigned int v19 = *(_DWORD *)(v4 + 315);
  unsigned int v20 = v19 + 1;
  if (v17 < v19 + 1)
  {
LABEL_18:
    uint64_t v21 = v4;
    unsigned int v22 = 1;
    goto LABEL_19;
  }
  while (1)
  {
    uint64_t v33 = (unsigned __int8 *)(*(void *)(v4 + 1311) + v19);
    int v34 = *v33;
    if (!*v33)
    {
      *long long v18 = v20;
      id v42 = (void *)_NRCopyLogObjectForNRUUID();
      int v43 = _NRLogIsLevelEnabled();

      if (v43)
      {
        unint64_t v44 = (void *)_NRCopyLogObjectForNRUUID();
        id v212 = [(id)v4 copyDescription];
        _NRLogWithArgs();
      }
      goto LABEL_37;
    }
    if (v17 < v19 + 3)
    {
      uint64_t v21 = v4;
      unsigned int v22 = 3;
      goto LABEL_19;
    }
    uint64_t v35 = bswap32(*(unsigned __int16 *)(v33 + 1)) >> 16;
    if (v17 < v19 + v35 + 5) {
      break;
    }
    if (*v3)
    {
      char v54 = (void *)_NRCopyLogObjectForNRUUID();
      int v55 = _NRLogIsLevelEnabled();

      if (v55)
      {
        int v56 = (void *)_NRCopyLogObjectForNRUUID();
        id v57 = [(id)v4 copyDescription];
        StringFromNRTLVType = (void *)createStringFromNRTLVType();
        _NRLogWithArgs();
      }
    }
    uint64_t v36 = *(unsigned int *)(v4 + 315);
    unsigned __int16 v37 = (unsigned __int8 *)(*(void *)(v4 + 1311) + v36);
    unsigned int v38 = v37 + 3;
    if ((char)v34 < 100)
    {
      uint64_t v39 = v37 + 3;
      int v45 = *(unsigned __int16 *)&v38[v35];
      if (v45 != (unsigned __int16)~os_inet_checksum())
      {
        if (qword_1001F49E8 != -1) {
          dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F49E8 != -1) {
            dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
          }
          _NRLogWithArgs();
        }
        *(_DWORD *)(v4 + 315) += v35 + 5;
LABEL_105:
        uint64_t v77 = *(void *)(v4 + 1863);
        if (v77) {
          *(unsigned char *)(v77 + 98) = 1;
        }
        id v225 = (id)createStringFromNRTLVType();
        sub_100074894((void *)v4, @"Invalid checksum detected in buffer on read type %@ len %u filledIn=%u handled=%u", v78, v79, v80, v81, v82, v83, (uint64_t)v225);
        goto LABEL_28;
      }
      *(_DWORD *)(v4 + 315) += v35 + 5;
    }
    else
    {
      uint64_t v39 = v37 + 3;
      int v40 = *(unsigned __int16 *)&v38[v35];
      int v41 = (*v37 << 12) ^ (v37[2] << 8) | v37[1] ^ (*v37 >> 4);
      *(_DWORD *)(v4 + 315) = v35 + v36 + 5;
      if (v40 != (unsigned __int16)v41) {
        goto LABEL_105;
      }
    }
    switch(v34)
    {
      case 1:
        uint64_t v46 = (void *)_NRCopyLogObjectForNRUUID();
        int v47 = _NRLogIsLevelEnabled();

        if (v47)
        {
          unsigned int v48 = (void *)_NRCopyLogObjectForNRUUID();
          id v205 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
        break;
      case 2:
        ++*(void *)(v4 + 1591);
        int v49 = (void *)_NRCopyLogObjectForNRUUID();
        int v50 = _NRLogIsLevelEnabled();

        if (v50)
        {
          BOOL v51 = (void *)_NRCopyLogObjectForNRUUID();
          id v206 = [(id)v4 copyDescription];
          _NRLogWithArgs();
        }
        id v52 = [objc_alloc((Class)NSData) initWithBytes:v39 length:v35];
        sub_1000948EC(v4, v52);

        break;
      case 3:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
        sub_1000949D4((char *)v4, (uint64_t)v37, (unsigned __int16)(v35 + 5), v35, v34);
        break;
      case 4:
        id v53 = [objc_alloc((Class)NSData) initWithBytes:v39 length:v35];
        sub_10008FE80(v4, v53);

        break;
      case 5:
        sub_1000901E8((void *)v4, v39, v35);
        break;
      default:
        break;
    }
LABEL_37:
    unsigned int v17 = *(_DWORD *)(v4 + 311);
    long long v18 = (unsigned int *)(v4 + 315);
    unsigned int v19 = *(_DWORD *)(v4 + 315);
    unsigned int v20 = v19 + 1;
    if (v17 < v19 + 1) {
      goto LABEL_18;
    }
  }
  if (*v3)
  {
    uint64_t v172 = (void *)_NRCopyLogObjectForNRUUID();
    int v173 = _NRLogIsLevelEnabled();

    if (v173)
    {
      unsigned int v174 = (void *)_NRCopyLogObjectForNRUUID();
      id v175 = [(id)v4 copyDescription];
      unsigned int v176 = (void *)createStringFromNRTLVType();
      _NRLogWithArgs();
    }
  }
  unsigned int v22 = v35 + 5;
  uint64_t v21 = v4;
LABEL_19:

  sub_1000946F0(v21, v22);
}

void sub_100093650(void *a1, uint64_t a2, void *a3)
{
  id v20 = a3;
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  id v6 = [objc_alloc((Class)NSNumber) initWithUnsignedInt:a2];
  [v5 setObject:v6 forKeyedSubscript:@"activate-datapath-offset"];

  [v5 setObject:v20 forKeyedSubscript:@"channel-id"];
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  [v7 setObject:v5 forKeyedSubscript:@"activate-datapath"];
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v8 = (id)qword_1001F4A18;
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = a1[4];
    int v11 = (void *)*((void *)v8 + 27);
    id v12 = v7;
    int v13 = [v11 objectForKeyedSubscript:v10];
    sub_1000FACEC((uint64_t)v13, v12);
  }
  id v14 = [v20 integerValue];
  if (v14 == (id)3)
  {
    uint64_t v15 = 249;
    goto LABEL_11;
  }
  if (v14 == (id)2)
  {
    uint64_t v15 = 248;
    goto LABEL_11;
  }
  if (v14 == (id)1)
  {
    uint64_t v15 = 247;
LABEL_11:
    *((unsigned char *)a1 + v15) = 1;
    goto LABEL_12;
  }
  id v16 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    long long v18 = (void *)_NRCopyLogObjectForNRUUID();
    id v19 = [a1 copyDescription];
    _NRLogWithArgs();
  }
LABEL_12:
}

void sub_100093850(uint64_t a1)
{
  int v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    id v6 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  id v5 = *(void **)(a1 + 32);

  sub_10008AAF4(v5);
}

CFStringRef sub_10009390C(unsigned int a1)
{
  uint64_t v1 = a1;
  CFStringRef result = @"Invalid";
  switch(a1)
  {
    case 0u:
      return result;
    case 0xAu:
      CFStringRef result = @"PairWithOOBKey";
      break;
    case 0xBu:
      CFStringRef result = @"PairWithIDSKeys";
      break;
    case 0xCu:
      CFStringRef result = @"PairWithOOBKeyOrIDSKeys";
      break;
    case 0x14u:
      CFStringRef result = @"HasCompletedPairing";
      break;
    default:
      CFStringRef result = (const __CFString *)[objc_alloc((Class)NSString) initWithFormat:@"Unknown(%lld)", v1];
      break;
  }
  return result;
}

void sub_100093A08(uint64_t a1, void *a2)
{
}

uint64_t sub_100093A18(char *a1)
{
  int v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    id v73 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  uint64_t v5 = *(void *)(a1 + 343);
  id v6 = [*(id *)(a1 + 335) peer];
  id v7 = [v6 identifier];
  id v8 = [v7 UUIDString];
  uint64_t v9 = +[NSString stringWithFormat:@"Terminus Bluetooth link to \"%@\" <%@>", v5, v8];

  uint64_t v10 = (void *)_NRCopyLogObjectForNRUUID();
  LODWORD(v7) = _NRLogIsLevelEnabled();

  if (v7)
  {
    int v11 = (void *)_NRCopyLogObjectForNRUUID();
    id v12 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  if (a1[246])
  {
    id v13 = objc_alloc((Class)NEIPsecNexus);
    uint64_t v14 = dword_1001F43D8;
    uint64_t v15 = dword_1001F43DC;
    uint64_t v16 = dword_1001F43E0;
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    unsigned int v17 = (id *)(id)qword_1001F4A18;
    long long v18 = v17;
    if (v17) {
      id v19 = v17[32];
    }
    else {
      id v19 = 0;
    }
    id v20 = [v13 initWithName:v9 delegate:a1 enableWithChannelCount:4 netifRingSize:v14 kernelPipeTxRingSize:v15 kernelPipeRxRingSize:v16 execUUID:v19];
    uint64_t v21 = *(void **)(a1 + 1335);
    *(void *)(a1 + 1335) = v20;

    unsigned int v22 = [*(id *)(a1 + 1335) nexusInstances];
    sub_100099D00((uint64_t)a1, v22);
  }
  else
  {
    id v23 = sub_100120478(v9, a1, 4, dword_1001F43D8, dword_1001F43DC, (const char *)dword_1001F43E0);
    unsigned int v22 = *(void **)(a1 + 1335);
    *(void *)(a1 + 1335) = v23;
  }

  [a1 setVirtualInterface:[*(id *)(a1 + 1335) virtualInterface]];
  if (([a1 setInterfaceSubfamily] & 1) == 0) {
    goto LABEL_28;
  }
  if ((sub_100099EF0(a1) & 1) == 0)
  {
    id v42 = (void *)_NRCopyLogObjectForNRUUID();
    int v43 = _NRLogIsLevelEnabled();

    if (!v43) {
      goto LABEL_66;
    }
    goto LABEL_29;
  }
  if (([a1 setNoACKPrioritization] & 1) == 0)
  {
LABEL_28:
    unsigned __int16 v37 = (void *)_NRCopyLogObjectForNRUUID();
    int v38 = _NRLogIsLevelEnabled();

    if (!v38) {
      goto LABEL_66;
    }
    goto LABEL_29;
  }
  int v24 = *(void **)(a1 + 1335);
  if (!v24)
  {
    unint64_t v44 = (void *)_NRCopyLogObjectForNRUUID();
    int v45 = _NRLogIsLevelEnabled();

    if (!v45) {
      goto LABEL_66;
    }
    goto LABEL_29;
  }
  if (!a1[246])
  {
    id v27 = [v24 nexusInstances];
    uint64_t v46 = (void *)_NRCopyLogObjectForNRUUID();
    if (v27)
    {
      int v47 = _NRLogIsLevelEnabled();

      if (v47)
      {
        unsigned int v48 = (void *)_NRCopyLogObjectForNRUUID();
        id v71 = [a1 copyDescription];
        _NRLogWithArgs();
      }
      if ([v27 count] == 4)
      {
        id v28 = [v27 objectAtIndexedSubscript:0];
        if (sub_10009E4B4((uint64_t)a1, v28))
        {

          id v28 = [v27 objectAtIndexedSubscript:1];
          if (sub_10009EC94((uint64_t)a1, v28))
          {

            id v28 = [v27 objectAtIndexedSubscript:2];
            if (sub_10009F474((uint64_t)a1, v28))
            {

              id v28 = [v27 objectAtIndexedSubscript:3];
              if (sub_10009FC54((uint64_t)a1, v28)) {
                goto LABEL_19;
              }
            }
          }
        }
        goto LABEL_55;
      }
      id v57 = (void *)_NRCopyLogObjectForNRUUID();
      int v58 = _NRLogIsLevelEnabled();

      if (!v58) {
        goto LABEL_57;
      }
      id v28 = (id)_NRCopyLogObjectForNRUUID();
      id v56 = [a1 copyDescription];
      _NRLogWithArgs();
    }
    else
    {
      int v55 = _NRLogIsLevelEnabled();

      if (!v55)
      {
        id v27 = 0;
LABEL_57:

        uint64_t v59 = (void *)_NRCopyLogObjectForNRUUID();
        int v60 = _NRLogIsLevelEnabled();

        if (!v60) {
          goto LABEL_66;
        }
        goto LABEL_29;
      }
      id v28 = (id)_NRCopyLogObjectForNRUUID();
      id v56 = [a1 copyDescription];
      _NRLogWithArgs();
      id v27 = 0;
    }

LABEL_55:
    goto LABEL_57;
  }
  id v25 = (void *)_NRCopyLogObjectForNRUUID();
  int v26 = _NRLogIsLevelEnabled();

  if (v26)
  {
    id v27 = (void *)_NRCopyLogObjectForNRUUID();
    id v28 = [a1 copyDescription];
    _NRLogWithArgs();
LABEL_19:
  }
  int v29 = a1[210];
  if (!a1[242] || *(void *)(a1 + 1215))
  {
LABEL_26:
    if ((v29 - 10) > 9)
    {
      sub_1000789C4((uint64_t)a1, 4);
      objc_initWeak(&location, a1);
      self;
      if (qword_1001F4DE0 != -1) {
        goto LABEL_62;
      }
      goto LABEL_44;
    }
    sub_10009D48C((uint64_t)a1);
    while (1)
    {
      int v50 = sub_10013DC5C((uint64_t)NRDLocalDevice, *((void **)a1 + 4));
      if (v50) {
        break;
      }
      id v61 = sub_100070988();
      int v62 = _NRLogIsLevelEnabled();

      if (v62)
      {
        id v63 = sub_100070988();
        _NRLogWithArgs();
      }
      uint64_t v9 = (void *)_os_log_pack_size();
      a1 = (char *)&v76[-1] - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v64 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v64 = 136446210;
      *(void *)(v64 + 4) = "-[NRLinkBluetooth setupNexus]";
      sub_100070988();
      _NRLogAbortWithPack();
      __break(1u);
LABEL_62:
      dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
LABEL_44:
      id v49 = (id)qword_1001F4DD8;
      v76[0] = _NSConcreteStackBlock;
      v76[1] = 3221225472;
      v76[2] = sub_10009D7D4;
      v76[3] = &unk_1001C7FF0;
      objc_copyWeak(&v77, &location);
      sub_10015969C((uint64_t)v49, v76);

      objc_destroyWeak(&v77);
      objc_destroyWeak(&location);
    }
    uint64_t v39 = v50;
    id v40 = (id)sub_10014B844(v50);
    [*(id *)(a1 + 1335) setLocalAddresses:v40];
    sub_10007D0C8((void **)a1);
    sub_10009A69C((uint64_t)a1, 0);
    BOOL v51 = (void *)_NRCopyLogObjectForNRUUID();
    int v52 = _NRLogIsLevelEnabled();

    if (v52)
    {
      id v53 = (void *)_NRCopyLogObjectForNRUUID();
      id v54 = [a1 copyDescription];
      int v70 = [*(id *)(a1 + 1335) interfaceName];
      _NRLogWithArgs();
    }
    sub_10009A8BC((uint64_t)a1);
    uint64_t v41 = 1;
    goto LABEL_49;
  }
  id v30 = sub_10011EF54();
  [v30 setRequestChildlessSA:1];
  id v31 = [objc_alloc((Class)NEIKEv2Listener) initWithListenerIKEConfig:v30 kernelSASessionName:@"terminusIKE-Bluetooth-Listener" packetDelegate:a1 listenerQueue:*((void *)a1 + 1) delegate:a1 delegateQueue:*((void *)a1 + 1)];
  int v32 = *(void **)(a1 + 1215);
  *(void *)(a1 + 1215) = v31;

  uint64_t v33 = *(void *)(a1 + 1215);
  int v34 = (void *)_NRCopyLogObjectForNRUUID();
  if (v33)
  {
    int v35 = _NRLogIsLevelEnabled();

    if (v35)
    {
      uint64_t v36 = (void *)_NRCopyLogObjectForNRUUID();
      id v74 = [a1 copyDescription];
      _NRLogWithArgs();
    }
    goto LABEL_26;
  }
  int v65 = _NRLogIsLevelEnabled();

  if (v65)
  {
    int v66 = (void *)_NRCopyLogObjectForNRUUID();
    id v72 = [a1 copyDescription];
    _NRLogWithArgs();
  }
  int v67 = (void *)_NRCopyLogObjectForNRUUID();
  int v68 = _NRLogIsLevelEnabled();

  if (!v68)
  {
LABEL_66:
    uint64_t v41 = 0;
    goto LABEL_67;
  }
LABEL_29:
  uint64_t v39 = (void *)_NRCopyLogObjectForNRUUID();
  id v40 = [a1 copyDescription];
  _NRLogWithArgs();
  uint64_t v41 = 0;
LABEL_49:

LABEL_67:
  return v41;
}

void sub_100094608(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_100094634(uint64_t a1)
{
  uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    id v6 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  uint64_t v5 = *(void **)(a1 + 32);

  sub_100094DB0(v5);
}

void sub_1000946F0(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 315);
  if (a2 <= 0x800) {
    int v4 = 2048;
  }
  else {
    int v4 = a2;
  }
  uint64_t v5 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  unsigned int v6 = *(_DWORD *)(a1 + 311);
  if (v3 == v6)
  {
    if (gNRPacketLoggingEnabled)
    {
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v10 = (void *)_NRCopyLogObjectForNRUUID();
        id v14 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
    }
    *(_DWORD *)(a1 + 315) = 0;
    id v7 = &OBJC_IVAR___NRLinkBluetooth__filledInLinkReadBufferBytes;
LABEL_11:
    *(_DWORD *)(a1 + *v7) = 0;
    return;
  }
  if (v6 > v3 && v3 + v4 >= *(_DWORD *)(a1 + 263))
  {
    if (gNRPacketLoggingEnabled)
    {
      int v11 = (void *)_NRCopyLogObjectForNRUUID();
      int v12 = _NRLogIsLevelEnabled();

      uint64_t v5 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      if (v12)
      {
        id v13 = (void *)_NRCopyLogObjectForNRUUID();
        id v15 = [(id)a1 copyDescription];
        _NRLogWithArgs();

        uint64_t v5 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      }
    }
    id v7 = &OBJC_IVAR___NRLinkBluetooth__handledLinkReadBufferBytes;
    memmove(*(void **)(a1 + 1311), (const void *)(*(void *)(a1 + 1311) + *(unsigned int *)(a1 + 315)), (*(_DWORD *)(a1 + v5[285]) - *(_DWORD *)(a1 + 315)));
    *(_DWORD *)(a1 + v5[285]) -= *(_DWORD *)(a1 + 315);
    goto LABEL_11;
  }
}

void sub_1000948EC(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (os_channel_get_next_slot())
  {
    unsigned __int16 v3 = (unsigned __int16)[v2 length];
    unsigned __int16 v4 = v5;
    if (v5 > v3) {
      unsigned __int16 v4 = (unsigned __int16)[v2 length];
    }
    memcpy(0, [v2 bytes], v4);
    os_channel_set_slot_properties();
    os_channel_advance_slot();
    os_channel_sync();
  }
}

void sub_1000949D4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v7 = nrMaxPacketLengthForTLV();
  if (!v7)
  {
    id v17 = sub_100070988();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v19 = sub_100070988();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v20 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v20 = 136446210;
    *(void *)(v20 + 4) = "strict_malloc";
LABEL_24:
    sub_100070988();
    _NRLogAbortWithPack();
  }
  uint64_t v8 = v7;
  uint64_t v9 = malloc_type_malloc(v7, 0xA172743EuLL);
  if (!v9)
  {
    id v21 = sub_100070988();
    int v22 = _NRLogIsLevelEnabled();

    if (v22)
    {
      id v23 = sub_100070988();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v24 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v24 = 136446466;
    *(void *)(v24 + 4) = "strict_malloc";
    *(_WORD *)(v24 + 12) = 2048;
    *(void *)(v24 + 14) = v8;
    goto LABEL_24;
  }
  uint64_t v10 = v9;
  unsigned int v11 = nrTLVToPacket();
  if (v11)
  {
    id v12 = [objc_alloc((Class)NSData) initWithBytes:v10 length:v11];
    switch(a5)
    {
      case 'd':
        uint64_t v13 = 1607;
        goto LABEL_13;
      case 'e':
        uint64_t v13 = 1615;
        goto LABEL_13;
      case 'f':
        uint64_t v13 = 1639;
        goto LABEL_13;
      case 'g':
        uint64_t v13 = 1647;
        goto LABEL_13;
      case 'h':
        uint64_t v13 = 1623;
        goto LABEL_13;
      case 'i':
        uint64_t v13 = 1631;
        goto LABEL_13;
      default:
        if (a5 == 3)
        {
          uint64_t v13 = 1599;
LABEL_13:
          ++*(void *)&a1[v13];
        }
        else
        {
          id v14 = (void *)_NRCopyLogObjectForNRUUID();
          int v15 = _NRLogIsLevelEnabled();

          if (v15)
          {
            uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
            id v25 = [a1 copyDescription];
            StringFromNRTLVType = (void *)createStringFromNRTLVType();
            _NRLogWithArgs();
          }
        }
        sub_1000948EC((uint64_t)a1, v12);

        break;
    }
  }
  free(v10);
}

void sub_100094DB0(void *a1)
{
  uint64_t v1 = a1;
  uint64_t next_buflet = (uint64_t)v1;
  int v3 = v1[16];
  if (v3 == 255)
  {
    unsigned __int16 v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_446;
    }
    StringFromNRTLVType = (void *)_NRCopyLogObjectForNRUUID();
    id IOVecStringWithContents = [(id)next_buflet copyDescription];
    _NRLogWithArgs();
    goto LABEL_444;
  }
  if (!*(void *)(v1 + 967))
  {
    uint64_t v10 = (void *)_NRCopyLogObjectForNRUUID();
    int v11 = _NRLogIsLevelEnabled();

    if (!v11) {
      goto LABEL_446;
    }
    goto LABEL_9;
  }
  if ((v3 - 1) < 2)
  {
    uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
    int v9 = _NRLogIsLevelEnabled();

    if (!v9) {
      goto LABEL_446;
    }
LABEL_9:
    StringFromNRTLVType = (void *)_NRCopyLogObjectForNRUUID();
    id v12 = [(id)next_buflet copyDescription];
    _NRLogWithArgs();

    goto LABEL_445;
  }
  uint64_t v489 = 0;
  uint64_t v490 = 0;
  v487[0] = v526;
  v487[1] = &v522;
  id v488 = (char *)&v528 + 8;
  id v491 = (unsigned int *)&v527 + 2;
  uint64_t v13 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  int v15 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  v499 = (char *)v1;
LABEL_14:
  uint64_t v16 = 0;
  LODWORD(v509) = 0;
  uint64_t v508 = 0;
  uint64_t v494 = 0;
  uint64_t v496 = 0;
  uint64_t v502 = 0;
  long long v518 = 0u;
  long long v519 = 0u;
  long long v516 = 0u;
  long long v517 = 0u;
  uint64_t v514 = 0;
  uint64_t v515 = 0;
  LODWORD(v501) = *(unsigned char *)(next_buflet + v13[460]) != 0;
  while (1)
  {
LABEL_15:
    uint64_t v507 = 1871;
    *(void *)(next_buflet + 1871) = 4;
    if ((_WORD)v16 && (unsigned __int16)v16 >= (unsigned __int16)v509)
    {
      if ((unsigned __int16)v16 != (unsigned __int16)v509) {
        goto LABEL_477;
      }
      uint64_t v17 = v507;
      *(void *)(next_buflet + v507) = 12;
    }
    else
    {
      uint64_t v17 = v507;
      if ((_WORD)v16)
      {
        *(void *)(next_buflet + v507) = 36;
        if (!v502) {
          goto LABEL_375;
        }
        goto LABEL_27;
      }
    }
    uint64_t next_slot = os_channel_get_next_slot();
    *(void *)(next_buflet + v17) |= 0x10uLL;
    if (!next_slot)
    {
LABEL_375:
      char v227 = v501;
      if (*(unsigned char *)(next_buflet + 221) && *(void *)(next_buflet + 983))
      {
        *(unsigned char *)(next_buflet + 221) = 0;
        ++*(void *)(next_buflet + 999);
        if (gNRPacketLoggingEnabled)
        {
          long long v286 = (void *)_NRCopyLogObjectForNRUUID();
          int v287 = _NRLogIsLevelEnabled();

          if (v287)
          {
            long long v288 = (void *)_NRCopyLogObjectForNRUUID();
            id v477 = [(id)next_buflet copyDescription];
            _NRLogWithArgs();
          }
        }
        dispatch_resume(*(dispatch_object_t *)(next_buflet + 983));
      }
      if (!*(unsigned char *)(next_buflet + 213) && *(void *)(next_buflet + 399))
      {
        *(unsigned char *)(next_buflet + 213) = 1;
        ++*(void *)(next_buflet + 423);
        if (gNRPacketLoggingEnabled)
        {
          long long v292 = (void *)_NRCopyLogObjectForNRUUID();
          int v293 = _NRLogIsLevelEnabled();

          if (v293)
          {
            int v294 = (void *)_NRCopyLogObjectForNRUUID();
            id v479 = [(id)next_buflet copyDescription];
            _NRLogWithArgs();
          }
        }
        dispatch_suspend(*(dispatch_object_t *)(next_buflet + 399));
      }
      *(void *)(next_buflet + v507) |= 0x40uLL;
      goto LABEL_359;
    }
    uint64_t v502 = next_slot;
    os_channel_slot_get_packet();
    os_packet_get_next_buflet();
    uint64_t object_address = os_buflet_get_object_address();
    unsigned int data_offset = os_buflet_get_data_offset();
    unsigned int data_length = os_buflet_get_data_length();
    if (data_length >= 0x10000)
    {
      id v336 = sub_100070988();
      int v337 = _NRLogIsLevelEnabled();

      if (v337)
      {
        id v338 = sub_100070988();
        _NRLogWithArgs();
      }
      goto LABEL_464;
    }
    LODWORD(v509) = data_length;
    uint64_t v508 = object_address + data_offset;
    os_packet_get_flow_uuid();
    id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    uint64_t v16 = 0;
    if (*(unsigned char *)(next_buflet + 245))
    {
      *(unsigned char *)(next_buflet + 245) = 0;
      LODWORD(v501) = 1;
    }
    else
    {
      LODWORD(v501) = v501 | BYTE2(v514);
    }
LABEL_27:
    if (!*(unsigned char *)(next_buflet + 221) && *(void *)(next_buflet + 983))
    {
      *(unsigned char *)(next_buflet + 221) = 1;
      ++*(void *)(next_buflet + 999);
      if (gNRPacketLoggingEnabled)
      {
        int v207 = (void *)_NRCopyLogObjectForNRUUID();
        int v208 = _NRLogIsLevelEnabled();

        if (v208)
        {
          int v209 = (void *)_NRCopyLogObjectForNRUUID();
          id v475 = [(id)next_buflet copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_suspend(*(dispatch_object_t *)(next_buflet + 983));
    }
    unsigned int v22 = *(_DWORD *)(next_buflet + v14[285]);
    uint64_t v23 = *(unsigned int *)(next_buflet + v15[286]);
    if (v22 <= v23) {
      break;
    }
    if (*(unsigned char *)(*(void *)(next_buflet + 1311) + v23))
    {
      unsigned int v498 = *(unsigned __int8 *)(*(void *)(next_buflet + 1311) + v23);
      goto LABEL_45;
    }
    while (1)
    {
      uint64_t v24 = (void *)_NRCopyLogObjectForNRUUID();
      int v25 = _NRLogIsLevelEnabled();

      if (v25)
      {
        int v26 = (void *)_NRCopyLogObjectForNRUUID();
        id v474 = [(id)next_buflet copyDescription];
        _NRLogWithArgs();
      }
      ++*(_DWORD *)(next_buflet + v15[286]);
      unsigned int v22 = *(_DWORD *)(next_buflet + v14[285]);
      uint64_t v27 = *(unsigned int *)(next_buflet + v15[286]);
      if (v22 <= v27) {
        break;
      }
      if (*(unsigned char *)(*(void *)(next_buflet + 1311) + v27))
      {
        unsigned int v498 = *(unsigned __int8 *)(*(void *)(next_buflet + 1311) + v27);
        uint64_t v23 = v27;
        goto LABEL_45;
      }
    }
    if (v22 != v27)
    {
      id v414 = sub_100070988();
      int v415 = _NRLogIsLevelEnabled();

      if (v415)
      {
        id v416 = sub_100070988();
        _NRLogWithArgs();
      }
      goto LABEL_464;
    }
    int v38 = (void *)_NRCopyLogObjectForNRUUID();
    int v39 = _NRLogIsLevelEnabled();

    if (v39)
    {
LABEL_307:
      int v194 = (void *)_NRCopyLogObjectForNRUUID();
      id v195 = [(id)next_buflet copyDescription];
      _NRLogWithArgs();
    }
  }
  while (!*(unsigned char *)(v508 + (unsigned __int16)v16))
  {
    id v28 = (void *)_NRCopyLogObjectForNRUUID();
    int v29 = _NRLogIsLevelEnabled();

    if (v29)
    {
      id v30 = (void *)_NRCopyLogObjectForNRUUID();
      id v457 = [(id)next_buflet copyDescription];
      _NRLogWithArgs();
    }
    uint64_t v16 = (v16 + 1);
    if ((unsigned __int16)v16 >= (unsigned __int16)v509)
    {
      if ((unsigned __int16)v16 != (unsigned __int16)v509)
      {
        id v369 = sub_100070988();
        int v370 = _NRLogIsLevelEnabled();

        if (v370)
        {
          id v371 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_464;
      }
      id v223 = (void *)_NRCopyLogObjectForNRUUID();
      int v224 = _NRLogIsLevelEnabled();

      if (v224)
      {
        id v225 = (void *)_NRCopyLogObjectForNRUUID();
        id v226 = [(id)next_buflet copyDescription];
        _NRLogWithArgs();
      }
LABEL_358:
      char v227 = v501;
LABEL_359:
      if (!v496) {
        goto LABEL_389;
      }
      unsigned int v228 = *(_DWORD *)(next_buflet + v14[285]);
      unsigned int v229 = *(_DWORD *)(next_buflet + v15[286]);
      if (v228 <= v229)
      {
        if (v229 == v228)
        {
          *(void *)(next_buflet + 1871) |= 0x400000000uLL;
          if (gNRPacketLoggingEnabled)
          {
            int v269 = (void *)_NRCopyLogObjectForNRUUID();
            int v270 = _NRLogIsLevelEnabled();

            if (v270)
            {
              id v271 = (void *)_NRCopyLogObjectForNRUUID();
              id v463 = [(id)next_buflet copyDescription];
              _NRLogWithArgs();
            }
          }
          *(_DWORD *)(next_buflet + v14[285]) = 0;
LABEL_367:
          *(_DWORD *)(next_buflet + v15[286]) = 0;
          goto LABEL_368;
        }
        id v411 = sub_100070988();
        int v412 = _NRLogIsLevelEnabled();

        if (v412)
        {
          id v413 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_464;
      }
      if (v229 > *(_DWORD *)(next_buflet + 271))
      {
        *(void *)(next_buflet + 1871) |= 0x80000000uLL;
        if (gNRPacketLoggingEnabled)
        {
          long long v272 = (void *)_NRCopyLogObjectForNRUUID();
          int v273 = _NRLogIsLevelEnabled();

          if (v273)
          {
            long long v274 = (void *)_NRCopyLogObjectForNRUUID();
            id v275 = [(id)next_buflet copyDescription];
            _NRLogWithArgs();
          }
        }
        uint64_t v230 = *(unsigned int *)(next_buflet + v15[286]);
        memmove(*(void **)(next_buflet + 1311), (const void *)(*(void *)(next_buflet + 1311) + v230), (*(_DWORD *)(next_buflet + v14[285]) - v230));
        *(_DWORD *)(next_buflet + v14[285]) -= *(_DWORD *)(next_buflet + v15[286]);
        goto LABEL_367;
      }
      uint64_t v235 = *(void *)(next_buflet + 1871);
      if (!v229)
      {
        unint64_t v236 = v235 | 0x200000000;
        *(void *)(next_buflet + 1871) = v235 | 0x200000000;
        if (gNRPacketLoggingEnabled)
        {
          long long v282 = (void *)_NRCopyLogObjectForNRUUID();
          int v283 = _NRLogIsLevelEnabled();

          if (v283) {
            goto LABEL_432;
          }
          goto LABEL_368;
        }
LABEL_385:
        *(void *)(next_buflet + 1871) = v236 | 0x800000000;
        goto LABEL_386;
      }
      unint64_t v236 = v235 | (unint64_t)&_mh_execute_header;
      *(void *)(next_buflet + 1871) = v235 | (unint64_t)&_mh_execute_header;
      if (!gNRPacketLoggingEnabled) {
        goto LABEL_385;
      }
      unsigned __int8 v237 = (void *)_NRCopyLogObjectForNRUUID();
      int v238 = _NRLogIsLevelEnabled();

      if (v238)
      {
LABEL_432:
        long long v284 = (void *)_NRCopyLogObjectForNRUUID();
        id v285 = [(id)next_buflet copyDescription];
        _NRLogWithArgs();
      }
LABEL_368:
      int v231 = gNRPacketLoggingEnabled;
      *(void *)(next_buflet + 1871) |= 0x800000000uLL;
      if (v231)
      {
        unsigned __int8 v232 = (void *)_NRCopyLogObjectForNRUUID();
        int v233 = _NRLogIsLevelEnabled();

        if (v233)
        {
          unsigned __int8 v234 = (void *)_NRCopyLogObjectForNRUUID();
          id v461 = [(id)next_buflet copyDescription];
          _NRLogWithArgs();
        }
      }
LABEL_386:
      if (gNRPacketLoggingEnabled)
      {
        uint64_t v258 = +[NSDate date];
        v259 = *(void **)(next_buflet + 1679);
        *(void *)(next_buflet + 1679) = v258;
      }
      os_channel_advance_slot();
      os_channel_sync();
      ++*(void *)(next_buflet + 1423);
LABEL_389:
      if (v494)
      {
        if (*(void *)(next_buflet + 383))
        {
          *(void *)(next_buflet + 1871) |= 0x1000000000uLL;
          if (gNRPacketLoggingEnabled)
          {
            uint64_t v260 = (void *)_NRCopyLogObjectForNRUUID();
            int v261 = _NRLogIsLevelEnabled();

            if (v261)
            {
              uint64_t v262 = (void *)_NRCopyLogObjectForNRUUID();
              id v462 = [(id)next_buflet copyDescription];
              _NRLogWithArgs();
            }
            if (gNRPacketLoggingEnabled)
            {
              uint64_t v263 = +[NSDate date];
              int v264 = *(void **)(next_buflet + 1671);
              *(void *)(next_buflet + 1671) = v263;
            }
          }
          os_channel_advance_slot();
          os_channel_sync();
          if (gNRPacketLoggingEnabled)
          {
            long long v265 = (void *)_NRCopyLogObjectForNRUUID();
            int v266 = _NRLogIsLevelEnabled();

            if (v266)
            {
              long long v267 = (void *)_NRCopyLogObjectForNRUUID();
              id v268 = [(id)next_buflet copyDescription];
              _NRLogWithArgs();
            }
          }
          ++*(void *)(next_buflet + 479);
        }
        else
        {
          uint64_t v255 = (void *)_NRCopyLogObjectForNRUUID();
          int v256 = _NRLogIsLevelEnabled();

          if (v256)
          {
            int v257 = (void *)_NRCopyLogObjectForNRUUID();
            id v470 = [(id)next_buflet copyDescription];
            _NRLogWithArgs();
          }
        }
      }
      if (*(void *)(next_buflet + 1871) && *(void *)(next_buflet + 1879))
      {
        *(unsigned char *)(next_buflet + 251) %= *(unsigned char *)(next_buflet + 250);
        uint64_t v239 = *(void *)(next_buflet + 1879);
        unsigned __int8 v240 = (void *)(v239 + 8 * *(unsigned __int8 *)(next_buflet + 251));
        if ((unint64_t)(v240 + 1) <= v239 + 8 * (unint64_t)*(unsigned __int8 *)(next_buflet + 250))
        {
          if ((v240 & 7) == 0)
          {
            *unsigned __int8 v240 = *(void *)(next_buflet + 1871);
            ++*(unsigned char *)(next_buflet + 251);
            *(void *)(next_buflet + 1871) = 0;
          }
        }
        else
        {
          unsigned __int8 v241 = (void *)_NRCopyLogObjectForNRUUID();
          int v242 = _NRLogIsLevelEnabled();

          if (v242)
          {
            unsigned __int8 v243 = (void *)_NRCopyLogObjectForNRUUID();
            id v469 = [(id)next_buflet copyDescription];
            _NRLogWithArgs();
          }
        }
      }
      *(unsigned char *)(next_buflet + 220) = v227 & 1;
      uint64_t v13 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      if (!(v496 | v494)) {
        goto LABEL_446;
      }
      goto LABEL_14;
    }
  }
  unsigned int v498 = *(unsigned __int8 *)(v508 + (unsigned __int16)v16);
  uint64_t v23 = *(unsigned int *)(next_buflet + v15[286]);
  unsigned int v22 = *(_DWORD *)(next_buflet + v14[285]);
LABEL_45:
  unsigned int v495 = v22;
  uint64_t v493 = v23;
  if (v22 <= (int)v23 + 2)
  {
    if (v22 == v23 + 2)
    {
      uint64_t v33 = *(unsigned __int8 *)(*(void *)(next_buflet + 1311) + (v23 + 1));
      if ((unsigned __int16)v16 >= (unsigned __int16)v509)
      {
        size_t v32 = 0;
        int v34 = 0;
        uint64_t v35 = 512;
      }
      else
      {
        size_t v32 = *(unsigned __int8 *)(v508 + (unsigned __int16)v16);
        int v34 = 1;
        uint64_t v35 = 256;
      }
    }
    else
    {
      if (v22 == v23 + 1) {
        unsigned __int16 v36 = v16;
      }
      else {
        unsigned __int16 v36 = v16 + 1;
      }
      if (v36 + 2 >= (unsigned __int16)v509)
      {
        uint64_t v33 = 0;
        size_t v32 = 0;
        int v34 = 0;
        uint64_t v35 = 2048;
      }
      else
      {
        unsigned int v37 = bswap32(*(unsigned __int16 *)(v508 + v36));
        size_t v32 = BYTE2(v37);
        uint64_t v33 = HIBYTE(v37);
        int v34 = 1;
        uint64_t v35 = 1024;
      }
    }
    LODWORD(v23) = v493;
  }
  else
  {
    unsigned int v31 = bswap32(*(unsigned __int16 *)(*(void *)(next_buflet + 1311) + (v23 + 1)));
    size_t v32 = BYTE2(v31);
    uint64_t v33 = HIBYTE(v31);
    int v34 = 1;
    uint64_t v35 = 128;
  }
  uint64_t v40 = *(void *)(next_buflet + v507) | v35;
  *(void *)(next_buflet + v507) = v40;
  long long v541 = 0u;
  long long v542 = 0u;
  long long v539 = 0u;
  long long v540 = 0u;
  long long v537 = 0u;
  long long v538 = 0u;
  long long v535 = 0u;
  long long v536 = 0u;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v531 = 0u;
  long long v532 = 0u;
  long long v529 = 0u;
  long long v530 = 0u;
  long long v527 = 0u;
  long long v528 = 0u;
  unint64_t v41 = v495 - v23;
  if (v495 > v23)
  {
    uint64_t v42 = v16;
    *(void *)&long long v527 = *(void *)(next_buflet + 1311) + v23;
    uint64_t v43 = v32 | (v33 << 8);
    if (v43 + 5 < v41) {
      unint64_t v41 = v43 + 5;
    }
    if (!v41)
    {
      id v347 = sub_100070988();
      char v348 = _NRLogIsLevelEnabled();

      if (v348)
      {
        id v349 = sub_100070988();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v350 = _os_log_pack_fill();
      sub_10008FD4C(v350, (uint64_t)"NRLinkLinkToNexusLoop", v43, *(_DWORD *)(next_buflet + v14[285]), *(_DWORD *)(next_buflet + v15[286]));
      goto LABEL_486;
    }
    unint64_t v44 = v41;
    DWORD2(v527) = v41;
    v40 |= 0x1000uLL;
    *(void *)(next_buflet + v507) = v40;
    unsigned int v45 = 1;
    uint64_t v16 = v42;
  }
  else
  {
    unint64_t v44 = 0;
    unsigned int v45 = 0;
  }
  int v46 = (unsigned __int16)v509;
  BOOL v47 = (unsigned __int16)v16 < (unsigned __int16)v509;
  if ((unsigned __int16)v16 < (unsigned __int16)v509)
  {
    if (!v34 || (v32 | ((unint64_t)v33 << 8)) + 5 > v44)
    {
      *((void *)&v527 + 2 * v45) = v508 + (unsigned __int16)v16;
      if ((unsigned __int16)v509 == (unsigned __int16)v16)
      {
        id v365 = sub_100070988();
        int v366 = _NRLogIsLevelEnabled();

        if (v366)
        {
          id v367 = sub_100070988();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v368 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v368 = 136446722;
        *(void *)(v368 + 4) = "NRLinkLinkToNexusLoop";
        *(_WORD *)(v368 + 12) = 1024;
        *(_DWORD *)(v368 + 14) = v46;
        *(_WORD *)(v368 + 18) = 1024;
        *(_DWORD *)(v368 + 20) = (unsigned __int16)v16;
        goto LABEL_466;
      }
      unint64_t v48 = (unint64_t)(&v527 + v45);
      *(_DWORD *)(v48 + 8) = v46 - (unsigned __int16)v16;
      unint64_t v44 = v44 + v46 - (unsigned __int16)v16;
      *(void *)(next_buflet + v507) = v40 | 0x2000;
      unsigned int v49 = v45 + 1;
      if (v44 < 3) {
        char v50 = 1;
      }
      else {
        char v50 = v34;
      }
      if (v50)
      {
        BOOL v51 = (void *)v502;
        if (!v34)
        {
          size_t v504 = v32;
          uint64_t v505 = v33;
          unint64_t v506 = v44;
          *(void *)(next_buflet + v507) = v40 | 0xA000;
          uint64_t v497 = v509;
          goto LABEL_81;
        }
LABEL_93:
        unint64_t v57 = (v32 | ((unint64_t)v33 << 8)) + 5;
        if (v57 >= v44)
        {
          uint64_t v40 = *(void *)(next_buflet + v507) | 0x8000;
          *(void *)(next_buflet + v507) = v40;
          BOOL v47 = 1;
          ++v45;
          uint64_t v16 = v509;
        }
        else
        {
          int v58 = (_DWORD *)(v48 | 8);
          uint64_t v59 = next_buflet;
          uint64_t next_buflet = (v44 - v57);
          uint64_t v40 = *(void *)(v59 + v507) | 0x4000;
          *(void *)(v59 + v507) = v40;
          BOOL v60 = *v58 == next_buflet;
          *v58 -= next_buflet;
          if (v60)
          {
            int v417 = v45;
            int v418 = v44;
            id v419 = sub_100070988();
            int v420 = _NRLogIsLevelEnabled();

            if (v420)
            {
              id v421 = sub_100070988();
              IOVecid String = (void *)createIOVecString();
              _NRLogWithArgs();
            }
            _os_log_pack_size();
            __chkstk_darwin();
            __error();
            uint64_t v422 = _os_log_pack_fill();
            uint64_t v423 = createIOVecString();
            sub_10008FD7C(v422, (uint64_t)"NRLinkLinkToNexusLoop", v417, next_buflet, v423, v418, v46);
            goto LABEL_466;
          }
          BOOL v47 = 1;
          ++v45;
          uint64_t v16 = (v509 - next_buflet);
          unint64_t v44 = (v32 | ((unint64_t)v33 << 8)) + 5;
          uint64_t next_buflet = (uint64_t)v499;
        }
LABEL_97:
        uint64_t v497 = v16;
        if (v498 - 100 < 6 || v498 - 2 < 4)
        {
          unsigned int v61 = 2000;
          goto LABEL_100;
        }
        if (v498 != 1) {
          goto LABEL_101;
        }
        unsigned int v61 = 255;
LABEL_100:
        uint64_t v62 = v32 | (v33 << 8);
        if (v62 <= v61)
        {
LABEL_101:
          uint64_t v63 = v45;
          if ((v32 | ((unint64_t)v33 << 8)) + 5 > v44)
          {
            size_t v504 = v32;
            uint64_t v505 = v33;
            unint64_t v506 = v44;
            unint64_t v503 = v45;
            int v52 = 1;
            goto LABEL_103;
          }
          id v72 = v51;
LABEL_108:
          uint64_t v73 = (uint64_t)v51;
          BOOL v51 = v72;
          goto LABEL_184;
        }
        StringFromNRTLVType = (void *)createStringFromNRTLVType();
        id IOVecStringWithContents = (id)createIOVecStringWithContents();
        sub_100074894((void *)next_buflet, @"Received invalid TLV len %u for %@ (max=%u) %@", v299, v300, v301, v302, v303, v304, v62);
LABEL_444:

        goto LABEL_445;
      }
      BOOL v51 = (void *)v502;
      if (DWORD2(v527) >= 3)
      {
        unsigned int v53 = *(unsigned __int16 *)(v527 + 1);
        goto LABEL_91;
      }
      if (DWORD2(v527) == 2)
      {
        if (v495 <= v493) {
          goto LABEL_540;
        }
        int v54 = *(unsigned __int8 *)(v527 + 1);
        unsigned int v55 = *(unsigned __int8 *)v528;
        goto LABEL_92;
      }
      if (DWORD2(v527) == 1)
      {
        if (DWORD2(v528) < 2)
        {
          id v454 = sub_100070988();
          int v455 = _NRLogIsLevelEnabled();

          if (v455)
          {
            id v456 = sub_100070988();
            id v486 = (void *)createIOVecString();
            _NRLogWithArgs();
          }
        }
        else
        {
          if (v495 > v493)
          {
            unsigned int v53 = *(unsigned __int16 *)v528;
LABEL_91:
            int v54 = v53;
            unsigned int v55 = v53 >> 8;
LABEL_92:
            unsigned int v56 = bswap32(v54 | (v55 << 8));
            size_t v32 = BYTE2(v56);
            uint64_t v33 = HIBYTE(v56);
            goto LABEL_93;
          }
          id v430 = sub_100070988();
          int v431 = _NRLogIsLevelEnabled();

          if (v431)
          {
            id v432 = sub_100070988();
            v484 = (void *)createIOVecString();
            _NRLogWithArgs();
          }
        }
      }
      else
      {
        id v427 = sub_100070988();
        int v428 = _NRLogIsLevelEnabled();

        if (v428)
        {
          id v429 = sub_100070988();
          v483 = (void *)createIOVecString();
          _NRLogWithArgs();
        }
      }
LABEL_510:
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v378 = _os_log_pack_fill();
      uint64_t v379 = createIOVecString();
      *(_DWORD *)uint64_t v378 = 136446466;
      *(void *)(v378 + 4) = "nrReadTLVLenHBOFromIOVec";
      *(_WORD *)(v378 + 12) = 2112;
      *(void *)(v378 + 14) = v379;
      goto LABEL_466;
    }
LABEL_79:
    BOOL v47 = 0;
    BOOL v51 = (void *)v502;
    goto LABEL_97;
  }
  if (v34) {
    goto LABEL_79;
  }
  size_t v504 = v32;
  uint64_t v505 = v33;
  unint64_t v506 = v44;
  uint64_t v497 = v16;
  unsigned int v49 = v45;
  BOOL v51 = (void *)v502;
LABEL_81:
  int v52 = 0;
  unint64_t v503 = v49;
  unsigned int v45 = v49;
LABEL_103:
  long long v512 = 0uLL;
  long long v513 = 0uLL;
  long long v510 = 0uLL;
  long long v511 = 0uLL;
  uint64_t v64 = os_channel_get_next_slot();
  if (!v64)
  {
    uint64_t v73 = (uint64_t)v51;
    id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    goto LABEL_183;
  }
  unsigned int v65 = v45;
  uint64_t v66 = v64;
  os_channel_slot_get_packet();
  uint64_t v67 = next_buflet;
  uint64_t next_buflet = os_packet_get_next_buflet();
  uint64_t v68 = os_buflet_get_object_address();
  unsigned int v69 = os_buflet_get_data_offset();
  uint64_t v70 = os_buflet_get_data_length();
  if (WORD1(v70))
  {
LABEL_451:
    if (qword_1001F49E8 != -1) {
      dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      _NRLogWithArgs();
    }
    goto LABEL_464;
  }
  uint64_t next_buflet = v70;
  os_packet_get_flow_uuid();
  if (*(unsigned char *)(v67 + 245))
  {
    *(unsigned char *)(v67 + 245) = 0;
    LOBYTE(v71) = 1;
  }
  else
  {
    LOBYTE(v71) = (v501 | BYTE2(v514)) & 1;
  }
  int v75 = v506;
  uint64_t v74 = v507;
  size_t v32 = v504;
  uint64_t v33 = v505;
  uint64_t v76 = v68 + v69;
  *((void *)&v527 + 2 * v503) = v76;
  if (!next_buflet)
  {
LABEL_458:
    if (qword_1001F49E8 != -1) {
      dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      _NRLogWithArgs();
    }
    goto LABEL_464;
  }
  unsigned int v77 = v503;
  *((_DWORD *)&v527 + 4 * v503 + 2) = next_buflet;
  uint64_t v78 = *(void *)&v499[v74] | 0x20000;
  *(void *)&v499[v74] = v78;
  unint64_t v44 = (next_buflet + v75);
  if (v44 < 3) {
    char v79 = 1;
  }
  else {
    char v79 = v52;
  }
  if ((v79 & 1) == 0)
  {
    BOOL v51 = (void *)v502;
    if (DWORD2(v527) > 2)
    {
      unsigned int v80 = *(unsigned __int16 *)(v527 + 1);
LABEL_120:
      int v81 = v80;
      unsigned int v82 = v80 >> 8;
LABEL_134:
      unsigned int v84 = v81 | (v82 << 8);
      unsigned int v85 = bswap32(v84);
      size_t v32 = BYTE2(v85);
      uint64_t v33 = HIBYTE(v85);
      if (v498 - 100 >= 6 && v498 - 2 >= 4)
      {
        if (v498 != 1) {
          goto LABEL_138;
        }
        unsigned int v86 = 255;
      }
      else
      {
        unsigned int v86 = 2000;
      }
      unsigned int v87 = __rev16(v84);
      if (v87 > v86)
      {
        uint64_t next_buflet = (uint64_t)v499;
LABEL_443:
        StringFromNRTLVType = (void *)createStringFromNRTLVType();
        id IOVecStringWithContents = (id)createIOVecStringWithContents();
        sub_100074894((void *)next_buflet, @"LookAhead received invalid TLV len %u for %@ (max=%u) %@", v305, v306, v307, v308, v309, v310, v87);
        goto LABEL_444;
      }
      goto LABEL_138;
    }
    if (DWORD2(v527) == 2)
    {
      if (!v65)
      {
LABEL_540:
        id v424 = sub_100070988();
        int v425 = _NRLogIsLevelEnabled();

        if (v425)
        {
          id v426 = sub_100070988();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v322 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v322 = 136446210;
        id v323 = "nrReadTLVLenHBOFromIOVec";
        goto LABEL_465;
      }
      uint64_t v83 = (unsigned __int8 *)v528;
      int v81 = *(unsigned __int8 *)(v527 + 1);
    }
    else
    {
      if (DWORD2(v527) != 1)
      {
LABEL_480:
        id v344 = sub_100070988();
        int v345 = _NRLogIsLevelEnabled();

        if (v345)
        {
          id v346 = sub_100070988();
          id v480 = (void *)createIOVecString();
          _NRLogWithArgs();
        }
        goto LABEL_510;
      }
      if (DWORD2(v528) > 1)
      {
        if (!v65)
        {
          id v439 = sub_100070988();
          int v440 = _NRLogIsLevelEnabled();

          if (v440)
          {
            id v441 = sub_100070988();
            id v485 = (void *)createIOVecString();
            _NRLogWithArgs();
          }
          goto LABEL_510;
        }
        unsigned int v80 = *(unsigned __int16 *)v528;
        goto LABEL_120;
      }
      if (v65 < 2)
      {
LABEL_505:
        id v372 = sub_100070988();
        int v373 = _NRLogIsLevelEnabled();

        if (v373)
        {
          id v374 = sub_100070988();
          id v481 = (void *)createIOVecString();
          _NRLogWithArgs();
        }
        goto LABEL_510;
      }
      if (DWORD2(v528) != 1)
      {
LABEL_508:
        id v375 = sub_100070988();
        int v376 = _NRLogIsLevelEnabled();

        if (v376)
        {
          id v377 = sub_100070988();
          v482 = (void *)createIOVecString();
          _NRLogWithArgs();
        }
        goto LABEL_510;
      }
      uint64_t v83 = (unsigned __int8 *)v529;
      int v81 = *(unsigned __int8 *)v528;
    }
    unsigned int v82 = *v83;
    goto LABEL_134;
  }
  BOOL v51 = (void *)v502;
  if (!v52)
  {
LABEL_140:
    id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    unsigned int v89 = (void *)v66;
    uint64_t v40 = v78 | 0x80000;
    uint64_t next_buflet = (uint64_t)v499;
    *(void *)&v499[v74] = v40;
    id v492 = v51;
    goto LABEL_143;
  }
LABEL_138:
  unint64_t v88 = (v32 | ((unint64_t)v33 << 8)) + 5;
  uint64_t v78 = *(void *)&v499[v74];
  if (v88 > v44)
  {
    LOBYTE(v52) = 1;
    goto LABEL_140;
  }
  uint64_t v40 = v78 | 0x40000;
  *(void *)&v499[v74] = v40;
  int v90 = v44 - v88;
  int v91 = v77;
  unsigned int v92 = &v527 + v77;
  int v93 = *((_DWORD *)v92 + 2) - (v44 - v88);
  *((_DWORD *)v92 + 2) = v93;
  if (!v93)
  {
    int v330 = v44;
LABEL_470:
    id v331 = sub_100070988();
    char v332 = _NRLogIsLevelEnabled();

    unsigned __int16 v333 = v497;
    if (v332)
    {
      id v334 = sub_100070988();
      int v335 = v333;
      id v464 = (void *)createIOVecString();
      _NRLogWithArgs();
    }
    else
    {
      int v335 = (unsigned __int16)v497;
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v339 = _os_log_pack_fill();
    id v340 = (id)createIOVecString();
    sub_10008FD7C(v339, (uint64_t)"NRLinkLinkToNexusLoop", v91, v90, (uint64_t)v340, v330, v335);

    sub_100070988();
    _NRLogAbortWithPack();
LABEL_477:
    id v341 = sub_100070988();
    int v342 = _NRLogIsLevelEnabled();

    if (v342)
    {
      id v343 = sub_100070988();
      _NRLogWithArgs();
    }
LABEL_464:
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v322 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v322 = 136446210;
    id v323 = "NRLinkLinkToNexusLoop";
    goto LABEL_465;
  }
  uint64_t v497 = (next_buflet - v90);
  long long v516 = v510;
  long long v517 = v511;
  LOBYTE(v52) = 1;
  long long v518 = v512;
  long long v519 = v513;
  unint64_t v44 = (v32 | ((unint64_t)v33 << 8)) + 5;
  LODWORD(v509) = next_buflet;
  uint64_t v508 = v76;
  unsigned int v89 = (void *)v66;
  id v492 = (void *)v66;
  uint64_t next_buflet = (uint64_t)v499;
  id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  BOOL v51 = (void *)v502;
LABEL_143:
  unint64_t v94 = v503 + 2;
  id v95 = &v488[16 * v503];
  while (2)
  {
    uint64_t v63 = v94 - 1;
    BOOL v96 = v71 != 0;
    if ((v52 & 1) != 0
      && ((unint64_t)(unsigned __int16)v33 << 8) + (unsigned __int16)v32 + 5 <= v44)
    {
      LODWORD(v501) = v71 != 0;
      BOOL v47 = 1;
      id v72 = v492;
      goto LABEL_108;
    }
    char v97 = v71;
    size_t v504 = v32;
    uint64_t v505 = v33;
    unint64_t v506 = v44;
    uint64_t v502 = (uint64_t)v89;
    unint64_t v503 = v94 - 1;
    long long v512 = 0u;
    long long v513 = 0u;
    long long v510 = 0u;
    long long v511 = 0u;
    uint64_t v98 = os_channel_get_next_slot();
    if (v98)
    {
      v500 = (void *)v98;
      unint64_t v501 = v94;
      os_channel_slot_get_packet();
      os_packet_get_next_buflet();
      uint64_t v99 = os_buflet_get_object_address();
      unsigned int v100 = os_buflet_get_data_offset();
      unsigned int v101 = os_buflet_get_data_length();
      if (v101 >= 0x10000) {
        goto LABEL_451;
      }
      unsigned int v102 = v101;
      os_packet_get_flow_uuid();
      if (*(unsigned char *)(next_buflet + 245))
      {
        *(unsigned char *)(next_buflet + 245) = 0;
        int v71 = 1;
      }
      else
      {
        int v71 = (v97 != 0) | BYTE2(v514) & 1;
      }
      uint64_t v33 = v505;
      int v103 = v506;
      size_t v32 = v504;
      uint64_t v104 = v99 + v100;
      *((void *)v95 - 1) = v104;
      uint64_t v105 = v507;
      if (!v102) {
        goto LABEL_458;
      }
      *(_DWORD *)id v95 = v102;
      uint64_t next_buflet = (uint64_t)v499;
      uint64_t v106 = *(void *)&v499[v105];
      *(void *)&v499[v105] = v106 | 0x20000;
      unint64_t v44 = v102 + v103;
      if (v52 & 1 | (v44 < 3))
      {
        unint64_t v107 = v501;
        if ((v52 & 1) == 0)
        {
          uint64_t v40 = v106 | 0xA0000;
          *(void *)(next_buflet + v105) = v40;
          id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          if (v107 == 16) {
            goto LABEL_468;
          }
          LOBYTE(v52) = 0;
          goto LABEL_146;
        }
        goto LABEL_176;
      }
      unint64_t v107 = v501;
      if (DWORD2(v527) >= 3)
      {
        unsigned int v108 = *(unsigned __int16 *)(v527 + 1);
        goto LABEL_162;
      }
      if (DWORD2(v527) == 2)
      {
        unsigned int v111 = (unsigned __int8 *)v528;
        int v109 = *(unsigned __int8 *)(v527 + 1);
        goto LABEL_171;
      }
      if (DWORD2(v527) != 1) {
        goto LABEL_480;
      }
      if (DWORD2(v528) <= 1)
      {
        if (v503 <= 1) {
          goto LABEL_505;
        }
        if (DWORD2(v528) != 1) {
          goto LABEL_508;
        }
        unsigned int v111 = (unsigned __int8 *)v529;
        int v109 = *(unsigned __int8 *)v528;
LABEL_171:
        unsigned int v110 = *v111;
      }
      else
      {
        unsigned int v108 = *(unsigned __int16 *)v528;
LABEL_162:
        int v109 = v108;
        unsigned int v110 = v108 >> 8;
      }
      unsigned int v112 = v109 | (v110 << 8);
      unsigned int v113 = bswap32(v112);
      size_t v32 = BYTE2(v113);
      uint64_t v33 = HIBYTE(v113);
      if (v498 - 100 >= 6 && v498 - 2 >= 4)
      {
        if (v498 != 1) {
          goto LABEL_176;
        }
        unsigned int v114 = 255;
      }
      else
      {
        unsigned int v114 = 2000;
      }
      unsigned int v87 = __rev16(v112);
      if (v87 > v114) {
        goto LABEL_443;
      }
LABEL_176:
      unint64_t v115 = ((unint64_t)(unsigned __int16)v33 << 8) + (unsigned __int16)v32 + 5;
      uint64_t v116 = *(void *)(next_buflet + v105);
      if (v115 > v44)
      {
        uint64_t v40 = v116 | 0x80000;
        *(void *)(next_buflet + v105) = v40;
        if (v107 == 16)
        {
          BOOL v123 = v115 > v44;
          unint64_t v115 = v44;
          id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          if (v123) {
            goto LABEL_467;
          }
LABEL_193:
          BOOL v121 = v71 != 0;
          size_t v504 = (unsigned __int16)(v32 | ((_WORD)v33 << 8));
          uint64_t v63 = 16;
          if (v504 + 5 <= v115)
          {
            uint64_t v119 = v32 | (v33 << 8);
            unsigned int v120 = v492;
            BOOL v51 = v492;
LABEL_195:
            uint64_t v122 = v40 | 0x200000;
            uint64_t v496 = (uint64_t)v120;
            goto LABEL_196;
          }
          LODWORD(v501) = v71 != 0;
          uint64_t v73 = v502;
LABEL_404:
          uint64_t v245 = v73;
          if (gNRPacketLoggingEnabled)
          {
            __int16 v276 = v63;
            unint64_t v506 = v44;
            long long v277 = (void *)_NRCopyLogObjectForNRUUID();
            int v278 = _NRLogIsLevelEnabled();

            LOWORD(v63) = v276;
            if (v278)
            {
              uint64_t v509 = _NRCopyLogObjectForNRUUID();
              id v279 = [(id)next_buflet copyDescription];
              uint64_t v280 = (void *)createStringFromNRTLVType();
              int v281 = (void *)v509;
              _NRLogWithArgs();

              LOWORD(v63) = v276;
            }
          }
          int v15 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          unsigned int v246 = v495;
          char v227 = v501;
          if (*(unsigned char *)(next_buflet + 221) && *(void *)(next_buflet + 983))
          {
            __int16 v247 = v63;
            *(unsigned char *)(next_buflet + 221) = 0;
            ++*(void *)(next_buflet + 999);
            if (gNRPacketLoggingEnabled)
            {
              id v289 = (void *)_NRCopyLogObjectForNRUUID();
              int v290 = _NRLogIsLevelEnabled();

              if (v290)
              {
                int v291 = (void *)_NRCopyLogObjectForNRUUID();
                id v478 = [(id)next_buflet copyDescription];
                _NRLogWithArgs();
              }
            }
            dispatch_resume(*(dispatch_object_t *)(next_buflet + 983));
            unsigned int v246 = v495;
            LOWORD(v63) = v247;
          }
          if ((v246 > v493) < (unsigned __int16)v63)
          {
            unint64_t v248 = (unsigned __int16)v63 - (unint64_t)(v246 > v493);
            uint64_t v249 = (const void **)&v491[4 * (v246 > v493)];
            do
            {
              if (gNRPacketLoggingEnabled)
              {
                uint64_t v251 = (void *)_NRCopyLogObjectForNRUUID();
                int v252 = _NRLogIsLevelEnabled();

                if (v252)
                {
                  unsigned int v253 = (void *)_NRCopyLogObjectForNRUUID();
                  id v254 = [(id)next_buflet copyDescription];
                  _NRLogWithArgs();
                }
              }
              memcpy((void *)(*(void *)(next_buflet + 1311) + *(unsigned int *)(next_buflet + v14[285])), *(v249 - 1), *(unsigned int *)v249);
              int v250 = *(_DWORD *)v249;
              v249 += 2;
              *(_DWORD *)(next_buflet + v14[285]) += v250;
              --v248;
            }
            while (v248);
          }
          *(void *)(next_buflet + v507) |= 0x100000uLL;
          uint64_t v496 = v245;
          goto LABEL_359;
        }
        LOBYTE(v52) = 1;
        id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_146:
        unsigned int v89 = v500;
      }
      else
      {
        uint64_t v40 = v116 | 0x40000;
        *(void *)(next_buflet + v105) = v40;
        int v90 = v44 - v115;
        unsigned int v117 = &v527 + (int)v107 - 1;
        int v118 = *((_DWORD *)v117 + 2) - (v44 - v115);
        *((_DWORD *)v117 + 2) = v118;
        if (!v118)
        {
          int v330 = v44;
          int v91 = v107 - 1;
          goto LABEL_470;
        }
        uint64_t v497 = v102 - v90;
        long long v516 = v510;
        long long v517 = v511;
        long long v518 = v512;
        long long v519 = v513;
        if (v107 == 16)
        {
          id v492 = v500;
          uint64_t v508 = v104;
          LODWORD(v509) = v102;
          unint64_t v44 = ((unint64_t)(unsigned __int16)v33 << 8) + (unsigned __int16)v32 + 5;
          id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          goto LABEL_193;
        }
        LOBYTE(v52) = 1;
        unsigned int v89 = v500;
        id v492 = v500;
        uint64_t v508 = v104;
        LODWORD(v509) = v102;
        unint64_t v44 = ((unint64_t)(unsigned __int16)v33 << 8) + (unsigned __int16)v32 + 5;
        id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      }
      unint64_t v94 = v107 + 1;
      v95 += 16;
      BOOL v51 = (void *)v502;
      continue;
    }
    break;
  }
  LODWORD(v501) = v96;
  BOOL v47 = 1;
  BOOL v51 = v492;
  uint64_t v73 = v502;
LABEL_183:
  unint64_t v44 = v506;
  uint64_t v40 = *(void *)(next_buflet + v507) | 0x10000;
  *(void *)(next_buflet + v507) = v40;
  uint64_t v63 = v503;
  LODWORD(v32) = v504;
  LODWORD(v33) = v505;
  if ((v52 & 1) == 0) {
    goto LABEL_404;
  }
LABEL_184:
  unint64_t v115 = v44;
  uint64_t v119 = v32 | (v33 << 8);
  size_t v504 = (unsigned __int16)(v32 | ((_WORD)v33 << 8));
  if (v504 + 5 > v44) {
    goto LABEL_404;
  }
  if (v47)
  {
    unsigned int v120 = v51;
    BOOL v121 = v501;
    goto LABEL_195;
  }
  uint64_t v122 = v40 | 0x400000;
  BOOL v121 = v501;
LABEL_196:
  uint64_t v505 = v119;
  unint64_t v506 = v44;
  *(void *)(next_buflet + v507) = v122;
  *(void *)(next_buflet + 1375) += v115;
  LODWORD(v501) = v121;
  uint64_t v502 = (uint64_t)v51;
  unint64_t v503 = v63;
  if ((char)v498 < 100)
  {
    if (!(_WORD)v63)
    {
      id v354 = sub_100070988();
      int v355 = _NRLogIsLevelEnabled();

      if (v355)
      {
        id v356 = sub_100070988();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v322 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v322 = 136446210;
      id v323 = "nrChecksumIOVecInner";
      goto LABEL_465;
    }
    LODWORD(v492) = (unsigned __int16)v63;
    v500 = v487;
    uint64_t v135 = 0;
    unsigned int v136 = 0;
    int v137 = 0;
    __int16 v138 = 0;
    unsigned int v139 = (unsigned __int16)v119 + 3;
    uint64_t next_buflet = (unsigned __int16)v63;
    uint64_t v140 = v491;
    while (1)
    {
      if (v139 <= v136)
      {
        unsigned int v141 = 0;
        goto LABEL_231;
      }
      unsigned int v141 = *v140 >= v139 - v136 ? v139 - v136 : *v140;
      if (!v141) {
        break;
      }
      unsigned __int16 v142 = (unsigned __int8 *)*((void *)v140 - 1);
      if (!v137 || (LOWORD(v510) = 0, LOWORD(v510) = *v142 << 8, __int16 v138 = os_inet_checksum(), v141 >= 2)) {
        __int16 v138 = os_inet_checksum();
      }
      if (v141) {
        v137 ^= 1u;
      }
      v136 += v141;
      if (v136 >= v139 && v141 < *v140) {
        goto LABEL_231;
      }
      ++v135;
      v140 += 4;
      if (next_buflet == v135)
      {
        LOWORD(v135) = v503;
LABEL_231:
        uint64_t next_buflet = (uint64_t)v499;
        if (v136 == v139)
        {
          int v143 = ~(_BYTE)v138;
          int v144 = ((unsigned __int16)~v138 >> 8);
          unsigned int v145 = &v527 + (unsigned __int16)v135;
          unsigned int v146 = *((_DWORD *)v145 + 2);
          if (v146 < v141 + 2)
          {
            if (v146 < v141 + 1)
            {
              id v382 = sub_100070988();
              int v383 = _NRLogIsLevelEnabled();

              if (v383)
              {
                id v384 = sub_100070988();
                uint64_t v465 = (void *)createIOVecString();
                _NRLogWithArgs();
              }
            }
            else if ((unsigned __int16)v135 + 1 >= v492)
            {
              id v385 = sub_100070988();
              int v386 = _NRLogIsLevelEnabled();

              if (v386)
              {
                id v387 = sub_100070988();
                id v466 = (void *)createIOVecString();
                _NRLogWithArgs();
              }
            }
            else
            {
              id v147 = (unsigned __int8 **)(&v527 + (unsigned __int16)v135 + 1);
              if (*((_DWORD *)v147 + 2))
              {
                if (*(unsigned __int8 *)(*(void *)v145 + v141) == v143 && **v147 == v144) {
                  goto LABEL_241;
                }
                id v393 = sub_100070988();
                int v394 = _NRLogIsLevelEnabled();

                if (v394) {
                  goto LABEL_523;
                }
                goto LABEL_524;
              }
              id v388 = sub_100070988();
              int v389 = _NRLogIsLevelEnabled();

              if (v389)
              {
                id v390 = sub_100070988();
                id v467 = (void *)createIOVecString();
                _NRLogWithArgs();
              }
            }
            _os_log_pack_size();
            __chkstk_darwin();
            __error();
            uint64_t v391 = _os_log_pack_fill();
            id v392 = (id)createIOVecString();
            sub_100043C30(v391, (uint64_t)"nrChecksumIOVecInner", (uint64_t)v392, (unsigned __int16)v135, v141);

            goto LABEL_466;
          }
          uint64_t v148 = (unsigned __int8 *)(*(void *)v145 + v141);
          if (*v148 == v143 && v148[1] == v144) {
            goto LABEL_241;
          }
          id v380 = sub_100070988();
          int v381 = _NRLogIsLevelEnabled();

          if (v381)
          {
LABEL_523:
            id v395 = sub_100070988();
            _NRLogWithArgs();
          }
LABEL_524:
          int v396 = *(id *)(next_buflet + 1863);
          if (v396) {
            v396[97] = 1;
          }

          id v397 = (void *)_NRCopyLogObjectForNRUUID();
          char v398 = _NRLogIsLevelEnabled();

          unsigned __int16 v399 = v505;
          if (v398)
          {
            v400 = (void *)_NRCopyLogObjectForNRUUID();
            id v401 = [(id)next_buflet copyDescription];
            v402 = (void *)createStringFromNRTLVType();
            uint64_t v508 = v399;
            id v403 = (void *)createIOVecString();
            uint64_t v509 = (unsigned __int16)v497;
            uint64_t next_buflet = (uint64_t)v499;
            _NRLogWithArgs();
          }
          else
          {
            uint64_t v509 = (unsigned __int16)v497;
          }
          StringFromNRTLVType = (void *)createStringFromNRTLVType();
          v404 = (void *)createIOVecString();
          sub_100074894((void *)next_buflet, @"Invalid checksum detected in loop on read type %@ len %u filledIn=%u handled=%u in %@ ioVecContentLen=%u alreadyRead=%u curLinkInputSlot=%p", v405, v406, v407, v408, v409, v410, (uint64_t)StringFromNRTLVType);

          goto LABEL_445;
        }
        id v362 = sub_100070988();
        int v363 = _NRLogIsLevelEnabled();

        int v313 = "nrChecksumIOVecInner";
        if (v363)
        {
          id v364 = sub_100070988();
          _NRLogWithArgs();
        }
LABEL_449:
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v315 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v315 = 136446210;
        *(void *)(v315 + 4) = v313;
        goto LABEL_466;
      }
    }
    id v311 = sub_100070988();
    int v312 = _NRLogIsLevelEnabled();

    int v313 = "nrChecksumUpdate";
    if (v312)
    {
      id v314 = sub_100070988();
      _NRLogWithArgs();
    }
    goto LABEL_449;
  }
  LOWORD(v510) = 0;
  if (!(_WORD)v63) {
    goto LABEL_487;
  }
  uint64_t v124 = 0;
  unsigned int v125 = 0;
  unsigned int v126 = bswap32(v119);
  int v127 = (v498 >> 4) ^ HIWORD(v126);
  int v128 = (16 * v498) ^ HIBYTE(v126);
  int v129 = (unsigned __int16)v119 + 3;
  uint64_t v130 = 16 * (unsigned __int16)v63;
  unsigned int v131 = v129;
  while (2)
  {
    unsigned int v132 = *(_DWORD *)((char *)&v527 + v124 + 8);
    if (v131)
    {
      if (v131 > v132)
      {
        v131 -= v132;
      }
      else
      {
        if (v131 < v132) {
          break;
        }
LABEL_208:
        unsigned int v131 = 0;
      }
      v124 += 16;
      if (v130 == v124) {
        goto LABEL_226;
      }
      continue;
    }
    break;
  }
  unsigned int v133 = v132 - v131;
  if (v133 >= 2 - v125) {
    size_t v134 = 2 - v125;
  }
  else {
    size_t v134 = v133;
  }
  memcpy((char *)&v510 + v125, (const void *)(*(void *)((char *)&v527 + v124) + v131), v134);
  v125 += v134;
  if (v125 <= 1) {
    goto LABEL_208;
  }
LABEL_226:
  uint64_t next_buflet = (uint64_t)v499;
  if (v125 != 2)
  {
    id v357 = sub_100070988();
    int v358 = _NRLogIsLevelEnabled();

    if (v358)
    {
      id v359 = sub_100070988();
      id v471 = (void *)createIOVecString();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v360 = _os_log_pack_fill();
    id v361 = (id)createIOVecString();
    sub_100043BF4(v360, (uint64_t)"nrWriteIOVecToBuffer", v125, 2, v129, (uint64_t)v361);

    goto LABEL_466;
  }
  if ((unsigned __int16)v510 != (unsigned __int16)(v127 | (unsigned __int16)((_WORD)v128 << 8))) {
    goto LABEL_524;
  }
LABEL_241:
  long long v512 = 0u;
  long long v513 = 0u;
  long long v510 = 0u;
  long long v511 = 0u;
  uint64_t v149 = os_channel_get_next_slot();
  int v15 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  uint64_t v16 = v497;
  if (!v149)
  {
    unsigned int v155 = v495;
    if (*(unsigned char *)(next_buflet + 213) && *(void *)(next_buflet + 399))
    {
      *(unsigned char *)(next_buflet + 213) = 0;
      ++*(void *)(next_buflet + 423);
      if (gNRPacketLoggingEnabled)
      {
        id v217 = (void *)_NRCopyLogObjectForNRUUID();
        int v218 = _NRLogIsLevelEnabled();

        if (v218)
        {
          uint64_t v219 = (void *)_NRCopyLogObjectForNRUUID();
          id v476 = [(id)next_buflet copyDescription];
          _NRLogWithArgs();
        }
      }
      dispatch_resume(*(dispatch_object_t *)(next_buflet + 399));
      unsigned int v155 = v495;
    }
    unsigned int v156 = v493;
    unsigned int v157 = v155 > v493;
    uint64_t v158 = *(void *)(next_buflet + v507) | 0x800000;
    *(void *)(next_buflet + v507) = v158;
    if (v157 < (unsigned __int16)v503)
    {
      uint64_t v159 = v155 > v156;
      uint64_t v160 = (unsigned __int16)v503;
      unsigned int v161 = (const void **)&v491[4 * v159];
      do
      {
        if (gNRPacketLoggingEnabled)
        {
          uint64_t v165 = (void *)_NRCopyLogObjectForNRUUID();
          int v166 = _NRLogIsLevelEnabled();

          if (v166)
          {
            int v167 = (void *)_NRCopyLogObjectForNRUUID();
            id v168 = [(id)next_buflet copyDescription];
            _NRLogWithArgs();
          }
        }
        uint64_t v162 = *(unsigned int *)(next_buflet + 311);
        size_t v163 = *(unsigned int *)v161;
        if ((v163 + v162) >= *(_DWORD *)(next_buflet + 263))
        {
          *(void *)(next_buflet + v507) |= 0x1000000uLL;
          StringFromNRTLVType = (void *)createIOVecString();
          sub_100074894((void *)next_buflet, @"no nexusOutputSlot and linkReadBuffer is full %@ filledIn=%u handled=%u", v316, v317, v318, v319, v320, v321, (uint64_t)StringFromNRTLVType);
          goto LABEL_445;
        }
        memcpy((void *)(*(void *)(next_buflet + 1311) + v162), *(v161 - 1), v163);
        int v164 = *(_DWORD *)v161;
        v161 += 2;
        *(_DWORD *)(next_buflet + 311) += v164;
        ++v159;
      }
      while (v160 != v159);
      uint64_t v158 = *(void *)(next_buflet + v507);
      uint64_t v16 = v497;
      unsigned int v155 = v495;
      unsigned int v156 = v493;
    }
    if (v155 <= v156 || (unsigned __int16)v503 != 1)
    {
      *(void *)(next_buflet + v507) = v158 | 0x4000000;
      uint64_t v496 = v502;
      goto LABEL_15;
    }
    *(void *)(next_buflet + v507) = v158 | 0x2000000;
    if ((_WORD)v16 && (unsigned __int16)v509 > (unsigned __int16)v16)
    {
      unsigned __int16 v244 = v509 - v16;
      if (gNRPacketLoggingEnabled)
      {
        uint64_t v295 = (void *)_NRCopyLogObjectForNRUUID();
        int v296 = _NRLogIsLevelEnabled();

        if (v296)
        {
          int v297 = (void *)_NRCopyLogObjectForNRUUID();
          id v298 = [(id)next_buflet copyDescription];
          _NRLogWithArgs();
        }
      }
      memcpy((void *)(*(void *)(next_buflet + 1311) + *(unsigned int *)(next_buflet + 311)), (const void *)(v508 + (unsigned __int16)v16), v244);
      *(_DWORD *)(next_buflet + 311) += v244;
      uint64_t v496 = v502;
    }
    goto LABEL_358;
  }
  uint64_t v150 = v149;
  if (v495 > v493)
  {
    if (gNRPacketLoggingEnabled)
    {
      uint64_t v210 = (void *)_NRCopyLogObjectForNRUUID();
      int v211 = _NRLogIsLevelEnabled();

      uint64_t v16 = v497;
      if (v211)
      {
        id v212 = (void *)_NRCopyLogObjectForNRUUID();
        id v213 = [(id)next_buflet copyDescription];
        _NRLogWithArgs();

        uint64_t v16 = v497;
      }
    }
    *(_DWORD *)(next_buflet + 315) += DWORD2(v527);
    id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
  }
  uint64_t v151 = &OBJC_IVAR___NRLinkBluetooth__recvUncompressedIP;
  switch(v498)
  {
    case 1u:
      id v152 = (void *)_NRCopyLogObjectForNRUUID();
      int v153 = _NRLogIsLevelEnabled();

      if (v153)
      {
        id v154 = (void *)_NRCopyLogObjectForNRUUID();
        id v458 = [(id)next_buflet copyDescription];
        _NRLogWithArgs();
      }
      goto LABEL_303;
    case 2u:
      goto LABEL_289;
    case 3u:
      uint64_t v151 = &OBJC_IVAR___NRLinkBluetooth__recvEncapsulated6LoWPAN;
      goto LABEL_289;
    case 4u:
      if (!(_WORD)v505)
      {
        id v205 = objc_alloc_init((Class)NSData);
LABEL_331:
        uint64_t v16 = v497;
        if (v501)
        {
          [v205 bytes];
          [v205 length];
          if (qword_1001F4BB0 != -1) {
            dispatch_once(&qword_1001F4BB0, &stru_1001C7C98);
          }
          id v206 = (id)qword_1001F4BA8;
          v520 = _NSConcreteStackBlock;
          uint64_t v521 = 3221225472;
          uint64_t v522 = sub_10008FDC0;
          long long v523 = &unk_1001C8698;
          unint64_t v524 = 0;
          dispatch_async(v206, &v520);
        }
        *(void *)(next_buflet + v507) |= 0x20000000uLL;
        sub_10008FE80(next_buflet, v205);

        LODWORD(v501) = 0;
        goto LABEL_303;
      }
      int v169 = (char *)malloc_type_malloc(v504, 0xA172743EuLL);
      if (!v169)
      {
        id v433 = sub_100070988();
        int v434 = _NRLogIsLevelEnabled();

        if (v434)
        {
          id v435 = sub_100070988();
          _NRLogWithArgs();
        }
LABEL_563:
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v448 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v448 = 136446466;
        *(void *)(v448 + 4) = "strict_malloc";
        *(_WORD *)(v448 + 12) = 2048;
        *(void *)(v448 + 14) = v504;
        goto LABEL_466;
      }
      if (!(_WORD)v503) {
        goto LABEL_487;
      }
      int v170 = v169;
      uint64_t v171 = 0;
      unsigned int v172 = 0;
      unsigned int v173 = (unsigned __int16)v505;
      uint64_t next_buflet = 16 * (unsigned __int16)v503;
      unsigned int v174 = 3;
      while (2)
      {
        unsigned int v175 = *(_DWORD *)((char *)&v527 + v171 + 8);
        if (!v174) {
          break;
        }
        if (v174 > v175)
        {
          v174 -= v175;
          goto LABEL_269;
        }
        if (v174 >= v175)
        {
          unsigned int v174 = 0;
LABEL_269:
          v171 += 16;
          if (next_buflet == v171) {
            goto LABEL_329;
          }
          continue;
        }
        break;
      }
      unsigned int v176 = v175 - v174;
      if (v176 >= v173 - v172) {
        size_t v177 = v173 - v172;
      }
      else {
        size_t v177 = v176;
      }
      memcpy(&v170[v172], (const void *)(*(void *)((char *)&v527 + v171) + v174), v177);
      v172 += v177;
      if (v172 < v173)
      {
        unsigned int v174 = 0;
        id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        goto LABEL_269;
      }
      id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_329:
      int v15 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      if (v172 == v173)
      {
        id v204 = objc_alloc((Class)NSData);
        id v205 = [v204 initWithBytesNoCopy:v170 length:v504 freeWhenDone:1];
        uint64_t next_buflet = (uint64_t)v499;
        goto LABEL_331;
      }
      id v436 = sub_100070988();
      int v437 = _NRLogIsLevelEnabled();

      if (v437)
      {
        id v438 = sub_100070988();
        id v472 = (void *)createIOVecString();
        _NRLogWithArgs();
      }
LABEL_566:
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v452 = _os_log_pack_fill();
      id v453 = (id)createIOVecString();
      sub_100043BF4(v452, (uint64_t)"nrWriteIOVecToBuffer", v172, v173, 3, (uint64_t)v453);

LABEL_486:
      sub_100070988();
      _NRLogAbortWithPack();
LABEL_487:
      id v351 = sub_100070988();
      int v352 = _NRLogIsLevelEnabled();

      if (v352)
      {
        id v353 = sub_100070988();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v322 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v322 = 136446210;
      id v323 = "nrWriteIOVecToBuffer";
LABEL_465:
      *(void *)(v322 + 4) = v323;
LABEL_466:
      sub_100070988();
      _NRLogAbortWithPack();
LABEL_467:
      size_t v504 = v32;
      uint64_t v505 = v33;
LABEL_468:
      StringFromNRTLVType = (void *)createIOVecStringWithContents();
      sub_100074894((void *)next_buflet, @"LtN not enough ioVecs %@ for %u", v324, v325, v326, v327, v328, v329, (uint64_t)StringFromNRTLVType);
LABEL_445:

LABEL_446:
      return;
    case 5u:
      if ((unsigned __int16)v503 == 1 && DWORD2(v527) >= 5 && !HIWORD(DWORD2(v527)))
      {
        sub_1000901E8((void *)next_buflet, (unsigned __int8 *)(v527 + 3), (unsigned __int16)(WORD4(v527) - 5));
        goto LABEL_303;
      }
      if (!v504)
      {
        id v442 = sub_100070988();
        int v443 = _NRLogIsLevelEnabled();

        if (v443)
        {
          id v444 = sub_100070988();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v322 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v322 = 136446210;
        id v323 = "strict_malloc";
        goto LABEL_465;
      }
      id v196 = (unsigned __int8 *)malloc_type_malloc(v504, 0xA172743EuLL);
      if (!v196)
      {
        id v445 = sub_100070988();
        int v446 = _NRLogIsLevelEnabled();

        if (v446)
        {
          id v447 = sub_100070988();
          _NRLogWithArgs();
        }
        goto LABEL_563;
      }
      id v197 = v196;
      unsigned int v173 = (unsigned __int16)v505;
      if (!(_WORD)v505)
      {

        goto LABEL_339;
      }
      if (!(_WORD)v503) {
        goto LABEL_487;
      }
      uint64_t v198 = 0;
      unsigned int v172 = 0;
      uint64_t v199 = 16 * (unsigned __int16)v503;
      unsigned int v200 = 3;
      while (2)
      {
        unsigned int v201 = *(_DWORD *)((char *)&v527 + v198 + 8);
        if (!v200) {
          break;
        }
        if (v200 > v201)
        {
          v200 -= v201;
          goto LABEL_318;
        }
        if (v200 >= v201)
        {
          unsigned int v200 = 0;
LABEL_318:
          v198 += 16;
          if (v199 == v198) {
            goto LABEL_337;
          }
          continue;
        }
        break;
      }
      unsigned int v202 = v201 - v200;
      if (v202 >= v173 - v172) {
        size_t v203 = v173 - v172;
      }
      else {
        size_t v203 = v202;
      }
      memcpy(&v197[v172], (const void *)(*(void *)((char *)&v527 + v198) + v200), v203);
      v172 += v203;
      if (v172 < v173)
      {
        unsigned int v200 = 0;
        id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        goto LABEL_318;
      }
      id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_337:
      if (v172 != v173)
      {
        id v449 = sub_100070988();
        int v450 = _NRLogIsLevelEnabled();

        if (v450)
        {
          id v451 = sub_100070988();
          id v473 = (void *)createIOVecString();
          _NRLogWithArgs();
        }
        goto LABEL_566;
      }
      sub_1000901E8((void *)next_buflet, v197, (unsigned __int16)v505);
      int v15 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
LABEL_339:
      free(v197);
LABEL_302:
      uint64_t v16 = v497;
LABEL_303:
      *(void *)(next_buflet + v507) |= 0x40000000uLL;
      if (*(void *)(next_buflet + 1871) && *(void *)(next_buflet + 1879))
      {
        *(unsigned char *)(next_buflet + 251) %= *(unsigned char *)(next_buflet + 250);
        uint64_t v190 = *(void *)(next_buflet + 1879);
        id v191 = (void *)(v190 + 8 * *(unsigned __int8 *)(next_buflet + 251));
        if ((unint64_t)(v191 + 1) <= v190 + 8 * (unint64_t)*(unsigned __int8 *)(next_buflet + 250))
        {
          if ((v191 & 7) == 0)
          {
            void *v191 = *(void *)(next_buflet + 1871);
            ++*(unsigned char *)(next_buflet + 251);
            *(void *)(next_buflet + 1871) = 0;
          }
        }
        else
        {
          uint64_t v192 = (void *)_NRCopyLogObjectForNRUUID();
          int v193 = _NRLogIsLevelEnabled();

          if (v193) {
            goto LABEL_307;
          }
        }
      }
      goto LABEL_15;
    case 0x64u:
      uint64_t v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_ESP;
      goto LABEL_289;
    case 0x65u:
      uint64_t v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_ESP_ECT0;
      goto LABEL_289;
    case 0x66u:
      uint64_t v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_TCP;
      goto LABEL_289;
    case 0x67u:
      uint64_t v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_TCP_ECT0;
      goto LABEL_289;
    case 0x68u:
      uint64_t v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_ESP_ClassC;
      goto LABEL_289;
    case 0x69u:
      uint64_t v151 = &OBJC_IVAR___NRLinkBluetooth__recvKnownIPv6Hdr_ESP_ClassC_ECT0;
LABEL_289:
      ++*(void *)(next_buflet + *v151);
      unsigned int v178 = nrTLVToPacket();
      if (v178)
      {
        unsigned int v179 = v178;
        *(void *)(next_buflet + v507) |= 0x8000000uLL;
        WORD1(v510) = v178;
        if (gNRPacketLoggingEnabled)
        {
          getESPSequenceNumberFromPacket();
          if (gNRPacketLoggingEnabled)
          {
            id v214 = (void *)_NRCopyLogObjectForNRUUID();
            int v215 = _NRLogIsLevelEnabled();

            if (v215)
            {
              uint64_t v216 = (void *)_NRCopyLogObjectForNRUUID();
              id v459 = [(id)next_buflet copyDescription];
              _NRLogWithArgs();
            }
            int v15 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
            id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          }
        }
        uint64_t packet = os_channel_slot_get_packet();
        if (v501)
        {
          id v181 = (void *)v487[0];
          *(void *)(v487[0] + 7) = 0;
          void *v181 = 0;
          char v525 = 1;
          if (packet)
          {
            os_packet_set_flow_uuid();
            *(void *)(next_buflet + v507) |= 0x10000000uLL;
            if (gNRPacketLoggingEnabled)
            {
              uint64_t v220 = (void *)_NRCopyLogObjectForNRUUID();
              int v221 = _NRLogIsLevelEnabled();

              if (v221)
              {
                id v222 = (void *)_NRCopyLogObjectForNRUUID();
                id v460 = [(id)next_buflet copyDescription];
                _NRLogWithArgs();
              }
            }
          }
          unsigned int ESPSequenceNumberFromPacket = getESPSequenceNumberFromPacket();
          unsigned int ESPSPIFromPacket = getESPSPIFromPacket();
          if (qword_1001F4BB0 != -1) {
            dispatch_once(&qword_1001F4BB0, &stru_1001C7C98);
          }
          uint64_t v184 = (id)qword_1001F4BA8;
          v520 = _NSConcreteStackBlock;
          uint64_t v521 = 3221225472;
          uint64_t v522 = sub_10008FDC0;
          long long v523 = &unk_1001C8698;
          unint64_t v524 = __PAIR64__(ESPSequenceNumberFromPacket, ESPSPIFromPacket);
          dispatch_async(v184, &v520);

          int v15 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          id v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        }
        else if (packet)
        {
          os_packet_clear_flow_uuid();
        }
        os_channel_set_slot_properties();
        LODWORD(v501) = 0;
        ++*(void *)(next_buflet + 495);
        *(void *)(next_buflet + 511) += v179;
        ++v489;
        v490 += v179;
        uint64_t v494 = v150;
      }
      else
      {
        int v185 = (void *)_NRCopyLogObjectForNRUUID();
        int v186 = _NRLogIsLevelEnabled();

        if (v186)
        {
          int v187 = (void *)_NRCopyLogObjectForNRUUID();
          id v188 = [(id)next_buflet copyDescription];
          id v189 = (void *)createStringFromNRTLVType();
          _NRLogWithArgs();
        }
      }
      goto LABEL_302;
    default:
      goto LABEL_303;
  }
}

void sub_100099D00(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  id v5 = objc_alloc_init((Class)NSMutableArray);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(v6);
        }
        int v11 = [[*(id *)(*((void *)&v18 + 1) + 8 * i) UUIDString:v18];
        [v5 addObject:v11];
      }
      id v8 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v8);
  }

  [v4 setObject:v5 forKeyedSubscript:@"nexus-instances"];
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v12 = (id)qword_1001F4A18;
  uint64_t v13 = v12;
  if (v12)
  {
    uint64_t v14 = *(void *)(a1 + 32);
    int v15 = (void *)*((void *)v12 + 27);
    id v16 = v4;
    uint64_t v17 = [v15 objectForKeyedSubscript:v14];
    sub_1000FACEC((uint64_t)v17, v16);
  }
  sub_10007CF4C(a1);
}

uint64_t sub_100099EF0(void *a1)
{
  if ([a1 virtualInterface])
  {
    int v3 = socket(2, 2, 0);
    if ((v3 & 0x80000000) == 0)
    {
      int v4 = v3;
      [a1 virtualInterface];
      id v5 = (char *)NEVirtualInterfaceCopyName();
      id v6 = v5;
      if (v5)
      {
        id v7 = [(char *)[v5 UTF8String];
        if (v7)
        {
          char v26 = *v7;
          if (v26)
          {
            char v27 = v7[1];
            if (v27)
            {
              char v28 = v7[2];
              if (v28)
              {
                char v29 = v7[3];
                if (v29)
                {
                  char v30 = v7[4];
                  if (v30)
                  {
                    char v31 = v7[5];
                    if (v31)
                    {
                      char v32 = v7[6];
                      if (v32)
                      {
                        char v33 = v7[7];
                        if (v33)
                        {
                          char v34 = v7[8];
                          if (v34)
                          {
                            char v35 = v7[9];
                            if (v35)
                            {
                              char v36 = v7[10];
                              if (v36)
                              {
                                char v37 = v7[11];
                                if (v37)
                                {
                                  char v38 = v7[12];
                                  if (v38)
                                  {
                                    char v39 = v7[13];
                                    if (v39)
                                    {
                                      char v40 = v7[14];
                                      if (v40) {
                                        char v41 = 0;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          LODWORD(v42) = 2;
          if (ioctl(v4, 0xC02069B4uLL, &v26) < 0)
          {
            uint64_t v14 = __error();
            if (strerror_r(*v14, __strerrbuf, 0x80uLL)) {
              __strerrbuf[0] = 0;
            }
            if (qword_1001F49E8 != -1) {
              dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
            }
            if (!_NRLogIsLevelEnabled()) {
              goto LABEL_76;
            }
            if (qword_1001F49E8 == -1) {
              goto LABEL_75;
            }
            goto LABEL_87;
          }
          id v8 = [(char *)[v6 UTF8String];
          if (v8)
          {
            char v26 = *v8;
            if (v26)
            {
              char v27 = v8[1];
              if (v27)
              {
                char v28 = v8[2];
                if (v28)
                {
                  char v29 = v8[3];
                  if (v29)
                  {
                    char v30 = v8[4];
                    if (v30)
                    {
                      char v31 = v8[5];
                      if (v31)
                      {
                        char v32 = v8[6];
                        if (v32)
                        {
                          char v33 = v8[7];
                          if (v33)
                          {
                            char v34 = v8[8];
                            if (v34)
                            {
                              char v35 = v8[9];
                              if (v35)
                              {
                                char v36 = v8[10];
                                if (v36)
                                {
                                  char v37 = v8[11];
                                  if (v37)
                                  {
                                    char v38 = v8[12];
                                    if (v38)
                                    {
                                      char v39 = v8[13];
                                      if (v39)
                                      {
                                        char v40 = v8[14];
                                        if (v40) {
                                          char v41 = 0;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            LODWORD(v42) = 1;
            if ((ioctl(v4, 0xC02069B5uLL, &v26) & 0x80000000) == 0)
            {
              if (qword_1001F49E8 != -1) {
                dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
              }
              uint64_t v9 = 1;
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F49E8 != -1) {
                  dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
                }
                id v10 = (id)qword_1001F49E0;
                [v6 UTF8String];
                _NRLogWithArgs();
              }
              goto LABEL_77;
            }
            int v15 = __error();
            if (strerror_r(*v15, __strerrbuf, 0x80uLL)) {
              __strerrbuf[0] = 0;
            }
            if (qword_1001F49E8 != -1) {
              dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F49E8 == -1)
              {
LABEL_75:
                _NRLogWithArgs();
                goto LABEL_76;
              }
LABEL_87:
              dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
              goto LABEL_75;
            }
LABEL_76:
            uint64_t v9 = 0;
LABEL_77:

            close(v4);
            return v9;
          }
          id v21 = sub_100070988();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          uint64_t v1 = "_strict_strlcpy";
          if (IsLevelEnabled)
          {
            id v23 = sub_100070988();
            _NRLogWithArgs();
          }
          int v4 = _os_log_pack_size();
          id v6 = &v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v24 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v24 = 136446210;
          *(void *)(v24 + 4) = "_strict_strlcpy";
        }
        else
        {
          id v17 = sub_100070988();
          int v18 = _NRLogIsLevelEnabled();

          if (v18)
          {
            id v19 = sub_100070988();
            _NRLogWithArgs();
          }
          int v4 = _os_log_pack_size();
          id v6 = &v26 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v20 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v20 = 136446210;
          *(void *)(v20 + 4) = "_strict_strlcpy";
        }
        sub_100070988();
        _NRLogAbortWithPack();
      }
      else
      {
        uint64_t v1 = (const char *)&unk_1001F4000;
        if (qword_1001F49E8 == -1) {
          goto LABEL_58;
        }
      }
      dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
LABEL_58:
      if (_NRLogIsLevelEnabled())
      {
        if (*((void *)v1 + 317) != -1) {
          dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
        }
        goto LABEL_75;
      }
      goto LABEL_76;
    }
    uint64_t v13 = __error();
    if (strerror_r(*v13, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F49E8 != -1) {
      dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F49E8 != -1) {
        dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
      }
      _NRLogWithArgs();
    }
    return 0;
  }
  else
  {
    int v11 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v9 = _NRLogIsLevelEnabled();

    if (v9)
    {
      id v12 = (void *)_NRCopyLogObjectForNRUUID();
      id v25 = [a1 copyDescription];
      _NRLogWithArgs();

      return 0;
    }
  }
  return v9;
}

void sub_10009A69C(uint64_t a1, unsigned int a2)
{
  sub_10009CDE0(a1, a2);
  if (!*(void *)(a1 + 1327))
  {
    if (!*(unsigned char *)(a1 + 222))
    {
      int v3 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      if (*(void *)(a1 + 991))
      {
        *(unsigned char *)(a1 + 222) = 1;
        ++*(void *)(a1 + 1007);
        if (gNRPacketLoggingEnabled)
        {
          uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          int v3 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          if (IsLevelEnabled)
          {
            int v11 = (void *)_NRCopyLogObjectForNRUUID();
            id v13 = [(id)a1 copyDescription];
            _NRLogWithArgs();

            int v3 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          }
        }
        dispatch_suspend(*(dispatch_object_t *)(a1 + v3[223]));
      }
    }
    if (*(unsigned char *)(a1 + 212))
    {
      int v4 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      if (*(void *)(a1 + 391))
      {
        *(unsigned char *)(a1 + 212) = 0;
        ++*(void *)(a1 + 415);
        if (gNRPacketLoggingEnabled)
        {
          id v6 = (void *)_NRCopyLogObjectForNRUUID();
          int v7 = _NRLogIsLevelEnabled();

          int v4 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          if (v7)
          {
            id v8 = (void *)_NRCopyLogObjectForNRUUID();
            id v12 = [(id)a1 copyDescription];
            _NRLogWithArgs();

            int v4 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
          }
        }
        dispatch_resume(*(dispatch_object_t *)(a1 + v4[351]));
      }
    }
    id v5 = *(void **)(a1 + 1351);
    if (v5)
    {
      [v5 setReceiveWindowPacketCount:32];
    }
  }
}

void sub_10009A8BC(uint64_t a1)
{
  if (!*(void *)(a1 + 1727))
  {
    id v2 = [(id)a1 queue];
    dispatch_source_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v2);
    int v4 = *(void **)(a1 + 1727);
    *(void *)(a1 + 1727) = v3;

    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 1727), 0, 0x12A05F200uLL, 0x2FAF080uLL);
    objc_initWeak(&location, (id)a1);
    id v5 = *(NSObject **)(a1 + 1727);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10009A9F0;
    handler[3] = &unk_1001C8890;
    objc_copyWeak(v7, &location);
    v7[1] = (id)5;
    dispatch_source_set_event_handler(v5, handler);
    dispatch_resume(*(dispatch_object_t *)(a1 + 1727));
    objc_destroyWeak(v7);
    objc_destroyWeak(&location);
  }
}

uint64_t sub_10009A9F0(uint64_t a1)
{
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    uint64_t v88 = (uint64_t)WeakRetained;
    id WeakRetained = (unsigned __int8 *)[WeakRetained state];
    uint64_t v3 = v88;
    if (WeakRetained != 255)
    {
      uint64_t v87 = a1;
      uint64_t v4 = *(void *)(v88 + 1383);
      uint64_t v5 = *(void *)(v88 + 1735);
      *(void *)(v88 + 1735) = v4;
      uint64_t v6 = *(void *)(v88 + 1375);
      uint64_t v7 = *(void *)(v88 + 1759);
      *(void *)(v88 + 1759) = v6;
      uint64_t v76 = *(void *)(v88 + 1743);
      uint64_t v77 = *(void *)(v88 + 1415);
      *(void *)(v88 + 1743) = v77;
      uint64_t v86 = *(void *)(v88 + 1767);
      uint64_t v75 = *(void *)(v88 + 1407);
      *(void *)(v88 + 1767) = v75;
      uint64_t v80 = *(void *)(v88 + 1751);
      uint64_t v81 = *(void *)(v88 + 1399);
      *(void *)(v88 + 1751) = v81;
      uint64_t v78 = *(void *)(v88 + 1775);
      uint64_t v79 = *(void *)(v88 + 1391);
      *(void *)(v88 + 1775) = v79;
      uint64_t v8 = *(void *)(v88 + 487);
      uint64_t v9 = *(void *)(v88 + 1815);
      *(void *)(v88 + 1815) = v8;
      uint64_t v10 = *(void *)(v88 + 495);
      uint64_t v11 = *(void *)(v88 + 1823);
      *(void *)(v88 + 1823) = v10;
      uint64_t v12 = *(void *)(v88 + 919);
      uint64_t v13 = *(void *)(v88 + 1831);
      *(void *)(v88 + 1831) = v12;
      uint64_t v14 = *(void *)(v88 + 927);
      uint64_t v15 = *(void *)(v88 + 1839);
      *(void *)(v88 + 1839) = v14;
      uint64_t v16 = *(void *)(v88 + 631);
      uint64_t v17 = *(void *)(v88 + 1783);
      *(void *)(v88 + 1783) = v16;
      uint64_t v18 = *(void *)(v88 + 1791);
      uint64_t v74 = *(void *)(v88 + 639);
      *(void *)(v88 + 1791) = v74;
      uint64_t v84 = *(void *)(v88 + 1799);
      uint64_t v85 = *(void *)(v88 + 775);
      *(void *)(v88 + 1799) = v85;
      uint64_t v82 = *(void *)(v88 + 1807);
      uint64_t v83 = *(void *)(v88 + 783);
      *(void *)(v88 + 1807) = v83;
      unint64_t v70 = v4 - v5;
      if (v4 != v5 || v6 != v7 || v8 != v9 || v12 != v13 || v10 != v11 || v14 != v15)
      {
        uint64_t v68 = v7;
        uint64_t v69 = v11;
        uint64_t v71 = v17;
        uint64_t v72 = v18;
        uint64_t v67 = v9;
        uint64_t v19 = v16;
        uint64_t v20 = v15;
        id v21 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        uint64_t v23 = v20;
        uint64_t v16 = v19;
        uint64_t v17 = v71;
        uint64_t v18 = v72;
        if (IsLevelEnabled)
        {
          unint64_t v24 = v14 - v23;
          id v25 = (void *)_NRCopyLogObjectForNRUUID();
          unint64_t v26 = *(void *)(v87 + 40);
          uint64_t v65 = v6 - v68;
          unint64_t v66 = (v6 - v68) / v26;
          uint64_t v63 = v10 - v69;
          unint64_t v64 = v24;
          uint64_t v61 = v70;
          unint64_t v62 = v70 / v26;
          uint64_t v59 = (const char *)(v8 - v67);
          BOOL v60 = (const char *)(v12 - v13);
          _NRLogWithArgs();

          uint64_t v17 = v71;
          uint64_t v18 = v72;
        }
      }
      uint64_t v73 = (const char *)(v16 - v17);
      unint64_t v27 = v74 - v18;
      if (v77 != v76 || v75 != v86 || v85 != v84 || v16 != v17 || v83 != v82 || v74 != v18)
      {
        uint64_t v28 = v18;
        char v29 = (void *)_NRCopyLogObjectForNRUUID();
        int v30 = _NRLogIsLevelEnabled();

        uint64_t v18 = v28;
        if (v30)
        {
          char v31 = (void *)_NRCopyLogObjectForNRUUID();
          unint64_t v32 = *(void *)(v87 + 40);
          uint64_t v65 = v75 - v86;
          unint64_t v66 = (v75 - v86) / v32;
          uint64_t v63 = v27;
          unint64_t v64 = v83 - v82;
          uint64_t v61 = v77 - v76;
          unint64_t v62 = (v77 - v76) / v32;
          uint64_t v59 = v73;
          BOOL v60 = (const char *)(v85 - v84);
          _NRLogWithArgs();

          uint64_t v18 = v28;
        }
      }
      if (v81 != v80 || v79 != v78 || v74 != v18)
      {
        char v33 = (void *)_NRCopyLogObjectForNRUUID();
        int v34 = _NRLogIsLevelEnabled();

        if (v34)
        {
          char v35 = (void *)_NRCopyLogObjectForNRUUID();
          unint64_t v36 = *(void *)(v87 + 40);
          uint64_t v63 = v79 - v78;
          unint64_t v64 = (v79 - v78) / v36;
          uint64_t v61 = (v81 - v80) / v36;
          unint64_t v62 = v27;
          uint64_t v59 = v73;
          BOOL v60 = (const char *)(v81 - v80);
          _NRLogWithArgs();
        }
      }
      id WeakRetained = (unsigned __int8 *)_NRIsAppleInternal();
      if (WeakRetained)
      {
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id WeakRetained = (unsigned __int8 *)(id)qword_1001F4A18;
        if (WeakRetained)
        {
          int v37 = WeakRetained[9];

          if (v37)
          {
            if (gNRPacketLoggingEnabled)
            {
              id v55 = sub_100070988();
              int v56 = _NRLogIsLevelEnabled();

              if (v56)
              {
                id v57 = sub_100070988();
                uint64_t v61 = 6272;
                uint64_t v59 = "";
                BOOL v60 = "-[NRLinkBluetooth armLinkStatsTimer]_block_invoke";
                _NRLogWithArgs();
              }
            }
            id WeakRetained = (unsigned __int8 *)v88;
            *(unsigned char *)(v88 + 245) = 1;
          }
        }
      }
      uint64_t v3 = v88;
      uint64_t v38 = *(void *)(v88 + 1847);
      if ((unint64_t)(*(void *)(v87 + 40) * v38) < 0xF) {
        goto LABEL_112;
      }
      char v39 = objc_alloc_init(NRAnalyticsDataStall);
      uint64_t v40 = v88;
      char v41 = v39;
      if (!*(unsigned char *)(v88 + 215) && (uint64_t v46 = *(void *)(v88 + 591)) != 0 && v46 == *(void *)(v88 + 575))
      {
        BOOL v43 = sub_10009B408((void *)v88, "NexusVO");
        if (v41) {
          v41->_stalledNexusVOOutput = 1;
        }
        int v42 = 1;
        uint64_t v40 = v88;
      }
      else
      {
        int v42 = 0;
        BOOL v43 = 0;
      }
      *(void *)(v40 + 591) = *(void *)(v40 + 575);
      if (!*(unsigned char *)(v40 + 217))
      {
        uint64_t v47 = *(void *)(v40 + 735);
        if (v47)
        {
          if (v47 == *(void *)(v40 + 719))
          {
            if (v43)
            {
              BOOL v43 = 1;
            }
            else
            {
              BOOL v43 = sub_10009B408((void *)v40, "NexusVI");
              uint64_t v40 = v88;
            }
            if (v41) {
              v41->_stalledNexusVIOutput = 1;
            }
            int v42 = 1;
          }
        }
      }
      *(void *)(v40 + 735) = *(void *)(v40 + 719);
      if (!*(unsigned char *)(v40 + 213))
      {
        uint64_t v48 = *(void *)(v40 + 439);
        if (v48)
        {
          if (v48 == *(void *)(v40 + 423))
          {
            if (v43)
            {
              BOOL v43 = 1;
            }
            else
            {
              BOOL v43 = sub_10009B408((void *)v40, "Nexus");
              uint64_t v40 = v88;
            }
            if (v41) {
              v41->_stalledNexusOutput = 1;
            }
            int v42 = 1;
          }
        }
      }
      *(void *)(v40 + 439) = *(void *)(v40 + 423);
      if (!*(unsigned char *)(v40 + 219))
      {
        uint64_t v49 = *(void *)(v40 + 879);
        if (v49)
        {
          if (v49 == *(void *)(v40 + 863))
          {
            if (v43)
            {
              BOOL v43 = 1;
            }
            else
            {
              BOOL v43 = sub_10009B408((void *)v40, "NexusBK");
              uint64_t v40 = v88;
            }
            if (v41) {
              v41->_stalledNexusBKOutput = 1;
            }
            int v42 = 1;
          }
        }
      }
      *(void *)(v40 + 879) = *(void *)(v40 + 863);
      if (!*(unsigned char *)(v40 + 222))
      {
        uint64_t v50 = *(void *)(v40 + 1023);
        if (v50)
        {
          if (v50 == *(void *)(v40 + 1007))
          {
            if (v43)
            {
              BOOL v43 = 1;
            }
            else
            {
              BOOL v43 = sub_10009B408((void *)v40, "Link");
              uint64_t v40 = v88;
            }
            if (v41) {
              v41->_stalledLinkOutput = 1;
            }
            int v42 = 1;
          }
        }
      }
      *(void *)(v40 + 1023) = *(void *)(v40 + 1007);
      if (!*(unsigned char *)(v40 + 228))
      {
        uint64_t v51 = *(void *)(v40 + 1183);
        if (v51)
        {
          if (v51 == *(void *)(v40 + 1167))
          {
            if (v43)
            {
              BOOL v43 = 1;
            }
            else
            {
              BOOL v43 = sub_10009B408((void *)v40, "UrgentLink");
              uint64_t v40 = v88;
            }
            if (v41) {
              v41->_stalledUrgentLinkOutput = 1;
            }
            int v42 = 1;
          }
        }
      }
      *(void *)(v40 + 1183) = *(void *)(v40 + 1167);
      if (!*(unsigned char *)(v40 + 224) && (uint64_t v52 = *(void *)(v40 + 1103)) != 0 && v52 == *(void *)(v40 + 1087))
      {
        BOOL v53 = v43 || sub_10009B408((void *)v40, "DatagramLink");
        if (v41) {
          v41->_stalledDatagramLinkOutput = 1;
        }
        uint64_t v40 = v88;
        *(void *)(v88 + 1103) = *(void *)(v88 + 1087);
        *(void *)(v88 + 1847) = 0;
        if (v53)
        {
          sub_10009B6AC(v88);
          uint64_t v40 = v88;
          char v44 = 1;
        }
        else
        {
          char v44 = 0;
        }
      }
      else
      {
        *(void *)(v40 + 1103) = *(void *)(v40 + 1087);
        *(void *)(v40 + 1847) = 0;
        if (v43)
        {
          sub_10009B6AC(v40);
          char v44 = 1;
          if ((v42 & 1) == 0) {
            goto LABEL_104;
          }
          uint64_t v40 = v88;
        }
        else
        {
          char v44 = 0;
          int v45 = 0;
          if (!v42)
          {
LABEL_106:
            *(void *)(v40 + 1855) = 0;
            if (v44) {
              goto LABEL_110;
            }
LABEL_109:
            if (!v45)
            {
LABEL_111:

              uint64_t v3 = v88;
              uint64_t v38 = *(void *)(v88 + 1847);
LABEL_112:
              *(void *)(v3 + 1847) = v38 + 1;
              goto LABEL_113;
            }
LABEL_110:
            [(NRAnalyticsDataStall *)v41 submit];
            goto LABEL_111;
          }
        }
      }
      uint64_t v54 = *(void *)(v40 + 1855) + 1;
      *(void *)(v40 + 1855) = v54;
      if ((unint64_t)(15 * v54) < 0xB4)
      {
        int v45 = 0;
        if (v44) {
          goto LABEL_110;
        }
        goto LABEL_109;
      }
      if (sub_10009BB10(v40))
      {
        int v45 = 1;
        if (v41) {
          v41->_remediatedDataStall = 1;
        }
        goto LABEL_105;
      }
LABEL_104:
      int v45 = 0;
LABEL_105:
      uint64_t v40 = v88;
      goto LABEL_106;
    }
  }
LABEL_113:

  return _objc_release_x1(WeakRetained, v3);
}

BOOL sub_10009B408(void *a1, const char *a2)
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  uint64_t v4 = (id)qword_1001F4A18;
  if (v4
    && ((uint64_t v5 = sub_10015BD9C(),
         dispatch_assert_queue_V2(v5),
         v5,
         uint64_t v6 = v4[33],
         uint64_t v7 = mach_absolute_time(),
         v6)
      ? (BOOL v10 = v7 > v6)
      : (BOOL v10 = 0),
        v10))
  {
    uint64_t v11 = v7;
    if (qword_1001F4BB8 != -1) {
      dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
    }
    LODWORD(v8) = dword_1001F4BC0;
    LODWORD(v9) = *(_DWORD *)algn_1001F4BC4;
    double v12 = (double)(v11 - v6) * (0.000000001 * (double)v8) / (double)v9;

    if (v12 > 0.0 && v12 < 3600.0) {
      return 0;
    }
  }
  else
  {
  }
  BOOL v14 = a2 != 0;
  if (a2)
  {
    unint64_t v27 = a2;
    id v15 = [objc_alloc((Class)NSString) initWithFormat:@"%sOutput"];
    uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v21 = (void *)_NRCopyLogObjectForNRUUID();
      id v28 = [a1 copyDescription];
      unint64_t v27 = "";
      _NRLogWithArgs();
    }
    sub_100115AB0(@"NRLinkBluetooth", @"Data stall", v15, 0, 0, v18, v19, v20, (uint64_t)v27);
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    unsigned int v22 = (id)qword_1001F4A18;
    if (v22)
    {
      uint64_t v23 = sub_10015BD9C();
      dispatch_assert_queue_V2(v23);

      v22[33] = mach_absolute_time();
    }

    goto LABEL_23;
  }
  id v24 = sub_100070988();
  int v25 = _NRLogIsLevelEnabled();

  if (!v25) {
    return 0;
  }
  id v15 = sub_100070988();
  _NRLogWithArgs();
LABEL_23:

  return v14;
}

void sub_10009B6AC(uint64_t a1)
{
  if (*(void *)(a1 + 1879))
  {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 251);
    unint64_t v3 = *(unsigned __int8 *)(a1 + 250);
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    if (*(unsigned char *)(a1 + 250))
    {
      unsigned int v7 = 0;
      uint64_t v8 = v2 - (v2 / v3) * (unint64_t)v3;
      do
      {
        unint64_t v9 = (uint64_t *)(*(void *)(a1 + 1879) + 8 * v8);
        if ((v9 & 7) != 0) {
          break;
        }
        sub_10009BCC8(*v9, *(void **)(a1 + 32));
        *unint64_t v9 = 0;
        unsigned int v10 = *(unsigned __int8 *)(a1 + 250);
        uint64_t v8 = (v8 + 1) % v10;
        ++v7;
      }
      while (v7 < v10);
    }
  }
  if (*(void *)(a1 + 1927))
  {
    unint64_t v11 = *(unsigned __int8 *)(a1 + 257);
    unint64_t v12 = *(unsigned __int8 *)(a1 + 256);
    uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
      id v15 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    if (*(unsigned char *)(a1 + 256))
    {
      unsigned int v16 = 0;
      uint64_t v17 = v11 - (v11 / v12) * (unint64_t)v12;
      do
      {
        uint64_t v18 = (uint64_t *)(*(void *)(a1 + 1927) + 8 * v17);
        if ((v18 & 7) != 0) {
          break;
        }
        sub_10009C6EC(*v18, *(void **)(a1 + 32));
        *uint64_t v18 = 0;
        unsigned int v19 = *(unsigned __int8 *)(a1 + 256);
        uint64_t v17 = (v17 + 1) % v19;
        ++v16;
      }
      while (v16 < v19);
    }
  }
  if (*(void *)(a1 + 1895))
  {
    unint64_t v20 = *(unsigned __int8 *)(a1 + 253);
    unint64_t v21 = *(unsigned __int8 *)(a1 + 252);
    unsigned int v22 = (void *)_NRCopyLogObjectForNRUUID();
    int v23 = _NRLogIsLevelEnabled();

    if (v23)
    {
      id v24 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    if (*(unsigned char *)(a1 + 252))
    {
      unsigned int v25 = 0;
      uint64_t v26 = v20 - (v20 / v21) * (unint64_t)v21;
      do
      {
        unint64_t v27 = (uint64_t *)(*(void *)(a1 + 1895) + 8 * v26);
        if ((v27 & 7) != 0) {
          break;
        }
        sub_10009BCC8(*v27, *(void **)(a1 + 32));
        *unint64_t v27 = 0;
        unsigned int v28 = *(unsigned __int8 *)(a1 + 252);
        uint64_t v26 = (v26 + 1) % v28;
        ++v25;
      }
      while (v25 < v28);
    }
  }
  if (*(void *)(a1 + 1943))
  {
    unint64_t v29 = *(unsigned __int8 *)(a1 + 259);
    unint64_t v30 = *(unsigned __int8 *)(a1 + 258);
    char v31 = (void *)_NRCopyLogObjectForNRUUID();
    int v32 = _NRLogIsLevelEnabled();

    if (v32)
    {
      char v33 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    if (*(unsigned char *)(a1 + 258))
    {
      unsigned int v34 = 0;
      uint64_t v35 = v29 - (v29 / v30) * (unint64_t)v30;
      do
      {
        unint64_t v36 = (uint64_t *)(*(void *)(a1 + 1943) + 8 * v35);
        if ((v36 & 7) != 0) {
          break;
        }
        sub_10009C6EC(*v36, *(void **)(a1 + 32));
        *unint64_t v36 = 0;
        unsigned int v37 = *(unsigned __int8 *)(a1 + 258);
        uint64_t v35 = (v35 + 1) % v37;
        ++v34;
      }
      while (v34 < v37);
    }
  }
  if (*(void *)(a1 + 1911))
  {
    unint64_t v38 = *(unsigned __int8 *)(a1 + 255);
    unint64_t v39 = *(unsigned __int8 *)(a1 + 254);
    uint64_t v40 = (void *)_NRCopyLogObjectForNRUUID();
    int v41 = _NRLogIsLevelEnabled();

    if (v41)
    {
      int v42 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    if (*(unsigned char *)(a1 + 254))
    {
      unsigned int v43 = 0;
      uint64_t v44 = v38 - (v38 / v39) * (unint64_t)v39;
      do
      {
        int v45 = (uint64_t *)(*(void *)(a1 + 1911) + 8 * v44);
        if ((v45 & 7) != 0) {
          break;
        }
        sub_10009BCC8(*v45, *(void **)(a1 + 32));
        uint64_t *v45 = 0;
        unsigned int v46 = *(unsigned __int8 *)(a1 + 254);
        uint64_t v44 = (v44 + 1) % v46;
        ++v43;
      }
      while (v43 < v46);
    }
  }
}

uint64_t sub_10009BB10(uint64_t a1)
{
  if (*(void *)(a1 + 1031)) {
    return 0;
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  unint64_t v3 = (id)qword_1001F4A18;
  if (v3
    && ((uint64_t v4 = sub_10015BD9C(),
         dispatch_assert_queue_V2(v4),
         v4,
         unint64_t v5 = v3[34],
         uint64_t v6 = mach_absolute_time(),
         v5)
      ? (BOOL v9 = v6 > v5)
      : (BOOL v9 = 0),
        v9))
  {
    if (qword_1001F4BB8 != -1)
    {
      uint64_t v21 = v6;
      dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
      uint64_t v6 = v21;
    }
    LODWORD(v7) = dword_1001F4BC0;
    LODWORD(v8) = *(_DWORD *)algn_1001F4BC4;
    double v10 = (double)(v6 - v5) * (0.000000001 * (double)v7) / (double)v8;

    if (v10 > 0.0 && v10 < 3600.0) {
      return 0;
    }
  }
  else
  {
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  unint64_t v12 = (id)qword_1001F4A18;
  if (v12)
  {
    uint64_t v13 = sub_10015BD9C();
    dispatch_assert_queue_V2(v13);

    v12[34] = mach_absolute_time();
  }

  sub_100074894((void *)a1, @"LinkStats - Remediating data stall", v14, v15, v16, v17, v18, v19, v20);
  return 1;
}

void sub_10009BCC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v115 = v3;
    if ((a1 & 2) != 0)
    {
      uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 4) != 0)
    {
      unint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      if (v8)
      {
        BOOL v9 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 8) != 0)
    {
      double v10 = (void *)_NRCopyLogObjectForNRUUID();
      int v11 = _NRLogIsLevelEnabled();

      if (v11)
      {
        unint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x10) != 0)
    {
      uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
      int v14 = _NRLogIsLevelEnabled();

      if (v14)
      {
        uint64_t v15 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x20) != 0)
    {
      uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
      int v17 = _NRLogIsLevelEnabled();

      if (v17)
      {
        uint64_t v18 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x40) != 0)
    {
      uint64_t v19 = (void *)_NRCopyLogObjectForNRUUID();
      int v20 = _NRLogIsLevelEnabled();

      if (v20)
      {
        uint64_t v21 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x80) != 0)
    {
      unsigned int v22 = (void *)_NRCopyLogObjectForNRUUID();
      int v23 = _NRLogIsLevelEnabled();

      if (v23)
      {
        id v24 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x100) != 0)
    {
      unsigned int v25 = (void *)_NRCopyLogObjectForNRUUID();
      int v26 = _NRLogIsLevelEnabled();

      if (v26)
      {
        unint64_t v27 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x200) != 0)
    {
      unsigned int v28 = (void *)_NRCopyLogObjectForNRUUID();
      int v29 = _NRLogIsLevelEnabled();

      if (v29)
      {
        unint64_t v30 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x400) != 0)
    {
      char v31 = (void *)_NRCopyLogObjectForNRUUID();
      int v32 = _NRLogIsLevelEnabled();

      if (v32)
      {
        char v33 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x800) != 0)
    {
      unsigned int v34 = (void *)_NRCopyLogObjectForNRUUID();
      int v35 = _NRLogIsLevelEnabled();

      if (v35)
      {
        unint64_t v36 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x1000) != 0)
    {
      unsigned int v37 = (void *)_NRCopyLogObjectForNRUUID();
      int v38 = _NRLogIsLevelEnabled();

      if (v38)
      {
        unint64_t v39 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x2000) != 0)
    {
      uint64_t v40 = (void *)_NRCopyLogObjectForNRUUID();
      int v41 = _NRLogIsLevelEnabled();

      if (v41)
      {
        int v42 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x4000) != 0)
    {
      unsigned int v43 = (void *)_NRCopyLogObjectForNRUUID();
      int v44 = _NRLogIsLevelEnabled();

      if (v44)
      {
        int v45 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x8000) != 0)
    {
      unsigned int v46 = (void *)_NRCopyLogObjectForNRUUID();
      int v47 = _NRLogIsLevelEnabled();

      if (v47)
      {
        uint64_t v48 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x10000) != 0)
    {
      uint64_t v49 = (void *)_NRCopyLogObjectForNRUUID();
      int v50 = _NRLogIsLevelEnabled();

      if (v50)
      {
        uint64_t v51 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x20000) != 0)
    {
      uint64_t v52 = (void *)_NRCopyLogObjectForNRUUID();
      int v53 = _NRLogIsLevelEnabled();

      if (v53)
      {
        uint64_t v54 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x40000) != 0)
    {
      id v55 = (void *)_NRCopyLogObjectForNRUUID();
      int v56 = _NRLogIsLevelEnabled();

      if (v56)
      {
        id v57 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x80000) != 0)
    {
      int v58 = (void *)_NRCopyLogObjectForNRUUID();
      int v59 = _NRLogIsLevelEnabled();

      if (v59)
      {
        BOOL v60 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x100000) != 0)
    {
      uint64_t v61 = (void *)_NRCopyLogObjectForNRUUID();
      int v62 = _NRLogIsLevelEnabled();

      if (v62)
      {
        uint64_t v63 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x200000) != 0)
    {
      unint64_t v64 = (void *)_NRCopyLogObjectForNRUUID();
      int v65 = _NRLogIsLevelEnabled();

      if (v65)
      {
        unint64_t v66 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x400000) != 0)
    {
      uint64_t v67 = (void *)_NRCopyLogObjectForNRUUID();
      int v68 = _NRLogIsLevelEnabled();

      if (v68)
      {
        uint64_t v69 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x800000) != 0)
    {
      unint64_t v70 = (void *)_NRCopyLogObjectForNRUUID();
      int v71 = _NRLogIsLevelEnabled();

      if (v71)
      {
        uint64_t v72 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x1000000) != 0)
    {
      uint64_t v73 = (void *)_NRCopyLogObjectForNRUUID();
      int v74 = _NRLogIsLevelEnabled();

      if (v74)
      {
        uint64_t v75 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x2000000) != 0)
    {
      uint64_t v76 = (void *)_NRCopyLogObjectForNRUUID();
      int v77 = _NRLogIsLevelEnabled();

      if (v77)
      {
        uint64_t v78 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x4000000) != 0)
    {
      uint64_t v79 = (void *)_NRCopyLogObjectForNRUUID();
      int v80 = _NRLogIsLevelEnabled();

      if (v80)
      {
        uint64_t v81 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x8000000) != 0)
    {
      uint64_t v82 = (void *)_NRCopyLogObjectForNRUUID();
      int v83 = _NRLogIsLevelEnabled();

      if (v83)
      {
        uint64_t v84 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x10000000) != 0)
    {
      uint64_t v85 = (void *)_NRCopyLogObjectForNRUUID();
      int v86 = _NRLogIsLevelEnabled();

      if (v86)
      {
        uint64_t v87 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x20000000) != 0)
    {
      uint64_t v88 = (void *)_NRCopyLogObjectForNRUUID();
      int v89 = _NRLogIsLevelEnabled();

      if (v89)
      {
        int v90 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x40000000) != 0)
    {
      int v91 = (void *)_NRCopyLogObjectForNRUUID();
      int v92 = _NRLogIsLevelEnabled();

      if (v92)
      {
        int v93 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x80000000) != 0)
    {
      unint64_t v94 = (void *)_NRCopyLogObjectForNRUUID();
      int v95 = _NRLogIsLevelEnabled();

      if (v95)
      {
        BOOL v96 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x100000000) != 0)
    {
      char v97 = (void *)_NRCopyLogObjectForNRUUID();
      int v98 = _NRLogIsLevelEnabled();

      if (v98)
      {
        uint64_t v99 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x200000000) != 0)
    {
      unsigned int v100 = (void *)_NRCopyLogObjectForNRUUID();
      int v101 = _NRLogIsLevelEnabled();

      if (v101)
      {
        unsigned int v102 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x400000000) != 0)
    {
      int v103 = (void *)_NRCopyLogObjectForNRUUID();
      int v104 = _NRLogIsLevelEnabled();

      if (v104)
      {
        uint64_t v105 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x800000000) != 0)
    {
      uint64_t v106 = (void *)_NRCopyLogObjectForNRUUID();
      int v107 = _NRLogIsLevelEnabled();

      if (v107)
      {
        unsigned int v108 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x1000000000) != 0)
    {
      int v109 = (void *)_NRCopyLogObjectForNRUUID();
      int v110 = _NRLogIsLevelEnabled();

      if (v110)
      {
        unsigned int v111 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    unsigned int v112 = (void *)_NRCopyLogObjectForNRUUID();
    int v113 = _NRLogIsLevelEnabled();

    id v3 = v115;
    if (v113)
    {
      unsigned int v114 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();

      id v3 = v115;
    }
  }
}

void sub_10009C6EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v79 = v3;
    if ((a1 & 2) != 0)
    {
      uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 4) != 0)
    {
      unint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      if (v8)
      {
        BOOL v9 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 8) != 0)
    {
      double v10 = (void *)_NRCopyLogObjectForNRUUID();
      int v11 = _NRLogIsLevelEnabled();

      if (v11)
      {
        unint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x10) != 0)
    {
      uint64_t v13 = (void *)_NRCopyLogObjectForNRUUID();
      int v14 = _NRLogIsLevelEnabled();

      if (v14)
      {
        uint64_t v15 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x20) != 0)
    {
      uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
      int v17 = _NRLogIsLevelEnabled();

      if (v17)
      {
        uint64_t v18 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x40) != 0)
    {
      uint64_t v19 = (void *)_NRCopyLogObjectForNRUUID();
      int v20 = _NRLogIsLevelEnabled();

      if (v20)
      {
        uint64_t v21 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x80) != 0)
    {
      unsigned int v22 = (void *)_NRCopyLogObjectForNRUUID();
      int v23 = _NRLogIsLevelEnabled();

      if (v23)
      {
        id v24 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x100) != 0)
    {
      unsigned int v25 = (void *)_NRCopyLogObjectForNRUUID();
      int v26 = _NRLogIsLevelEnabled();

      if (v26)
      {
        unint64_t v27 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x200) != 0)
    {
      unsigned int v28 = (void *)_NRCopyLogObjectForNRUUID();
      int v29 = _NRLogIsLevelEnabled();

      if (v29)
      {
        unint64_t v30 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x400) != 0)
    {
      char v31 = (void *)_NRCopyLogObjectForNRUUID();
      int v32 = _NRLogIsLevelEnabled();

      if (v32)
      {
        char v33 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x800) != 0)
    {
      unsigned int v34 = (void *)_NRCopyLogObjectForNRUUID();
      int v35 = _NRLogIsLevelEnabled();

      if (v35)
      {
        unint64_t v36 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x1000) != 0)
    {
      unsigned int v37 = (void *)_NRCopyLogObjectForNRUUID();
      int v38 = _NRLogIsLevelEnabled();

      if (v38)
      {
        unint64_t v39 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x2000) != 0)
    {
      uint64_t v40 = (void *)_NRCopyLogObjectForNRUUID();
      int v41 = _NRLogIsLevelEnabled();

      if (v41)
      {
        int v42 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x4000) != 0)
    {
      unsigned int v43 = (void *)_NRCopyLogObjectForNRUUID();
      int v44 = _NRLogIsLevelEnabled();

      if (v44)
      {
        int v45 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x8000) != 0)
    {
      unsigned int v46 = (void *)_NRCopyLogObjectForNRUUID();
      int v47 = _NRLogIsLevelEnabled();

      if (v47)
      {
        uint64_t v48 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x10000) != 0)
    {
      uint64_t v49 = (void *)_NRCopyLogObjectForNRUUID();
      int v50 = _NRLogIsLevelEnabled();

      if (v50)
      {
        uint64_t v51 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x20000) != 0)
    {
      uint64_t v52 = (void *)_NRCopyLogObjectForNRUUID();
      int v53 = _NRLogIsLevelEnabled();

      if (v53)
      {
        uint64_t v54 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x40000) != 0)
    {
      id v55 = (void *)_NRCopyLogObjectForNRUUID();
      int v56 = _NRLogIsLevelEnabled();

      if (v56)
      {
        id v57 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x80000) != 0)
    {
      int v58 = (void *)_NRCopyLogObjectForNRUUID();
      int v59 = _NRLogIsLevelEnabled();

      if (v59)
      {
        BOOL v60 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x100000) != 0)
    {
      uint64_t v61 = (void *)_NRCopyLogObjectForNRUUID();
      int v62 = _NRLogIsLevelEnabled();

      if (v62)
      {
        uint64_t v63 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x200000) != 0)
    {
      unint64_t v64 = (void *)_NRCopyLogObjectForNRUUID();
      int v65 = _NRLogIsLevelEnabled();

      if (v65)
      {
        unint64_t v66 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x400000) != 0)
    {
      uint64_t v67 = (void *)_NRCopyLogObjectForNRUUID();
      int v68 = _NRLogIsLevelEnabled();

      if (v68)
      {
        uint64_t v69 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x800000) != 0)
    {
      unint64_t v70 = (void *)_NRCopyLogObjectForNRUUID();
      int v71 = _NRLogIsLevelEnabled();

      if (v71)
      {
        uint64_t v72 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    if ((a1 & 0x1000000) != 0)
    {
      uint64_t v73 = (void *)_NRCopyLogObjectForNRUUID();
      int v74 = _NRLogIsLevelEnabled();

      if (v74)
      {
        uint64_t v75 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    uint64_t v76 = (void *)_NRCopyLogObjectForNRUUID();
    int v77 = _NRLogIsLevelEnabled();

    id v3 = v79;
    if (v77)
    {
      uint64_t v78 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();

      id v3 = v79;
    }
  }
}

void sub_10009CDE0(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return;
  }
  id v3 = *(void **)(a1 + 1327);
  if (!v3 || *(unsigned __int8 *)(a1 + 16) == 255) {
    return;
  }
  if (a2 >= 0x41)
  {
    unint64_t v5 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10009D480;
    block[3] = &unk_1001C8BA8;
    void block[4] = a1;
    dispatch_async(v5, block);
    return;
  }
  id v6 = [v3 length];
  id v45 = *(id *)(a1 + 1327);
  unint64_t v7 = (char *)[v45 bytes];
  if (*(void *)(a1 + 975))
  {
    if (*(void *)(a1 + 959))
    {
      if (v6)
      {
        int v8 = v7;
        unint64_t v9 = 0;
        uint64_t v10 = 0;
        while (1)
        {
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          *(_OWORD *)__dst = 0u;
          uint64_t next_slot = os_channel_get_next_slot();
          if (!next_slot) {
            break;
          }
          uint64_t v12 = next_slot;
          if ((unsigned __int16)((_WORD)v6 - v9) >= WORD1(v47)) {
            size_t v13 = WORD1(v47);
          }
          else {
            size_t v13 = (unsigned __int16)((_WORD)v6 - v9);
          }
          memcpy(__dst[0], &v8[v9], v13);
          WORD1(v47) = v13;
          v9 += v13;
          os_channel_set_slot_properties();
          uint64_t v10 = v12;
          if (v9 >= (unint64_t)v6) {
            goto LABEL_25;
          }
        }
        if (!v10) {
          goto LABEL_26;
        }
LABEL_25:
        os_channel_advance_slot();
      }
      else
      {
        unint64_t v9 = 0;
      }
LABEL_26:
      os_channel_sync();
      if ((id)v9 == v6)
      {
        if (!gNRPacketLoggingEnabled)
        {
          unint64_t v9 = (unint64_t)v6;
          goto LABEL_35;
        }
        unsigned int v28 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          unint64_t v30 = (void *)_NRCopyLogObjectForNRUUID();
          id v41 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        unint64_t v9 = (unint64_t)v6;
        if (!gNRPacketLoggingEnabled) {
          goto LABEL_35;
        }
LABEL_60:
        char v31 = (void *)_NRCopyLogObjectForNRUUID();
        int v32 = _NRLogIsLevelEnabled();

        if (v32)
        {
          char v33 = (void *)_NRCopyLogObjectForNRUUID();
          id v42 = [(id)a1 copyDescription];
          _NRLogWithArgs();
        }
        goto LABEL_35;
      }
      if (!gNRPacketLoggingEnabled) {
        goto LABEL_35;
      }
      int v20 = (void *)_NRCopyLogObjectForNRUUID();
      int v21 = _NRLogIsLevelEnabled();

      if (v21)
      {
        unsigned int v22 = (void *)_NRCopyLogObjectForNRUUID();
        id v40 = [(id)a1 copyDescription];
        _NRLogWithArgs();

        if (!gNRPacketLoggingEnabled) {
          goto LABEL_35;
        }
        goto LABEL_60;
      }
LABEL_34:
      if (!gNRPacketLoggingEnabled) {
        goto LABEL_35;
      }
      goto LABEL_60;
    }
    uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
    int v17 = _NRLogIsLevelEnabled();

    if (!v17)
    {
      unint64_t v9 = 0;
      goto LABEL_34;
    }
  }
  else
  {
    int v14 = (void *)_NRCopyLogObjectForNRUUID();
    int v15 = _NRLogIsLevelEnabled();

    if (!v15) {
      goto LABEL_21;
    }
  }
  uint64_t v18 = (void *)_NRCopyLogObjectForNRUUID();
  id v19 = [(id)a1 copyDescription];
  _NRLogWithArgs();

LABEL_21:
  unint64_t v9 = 0;
  if (gNRPacketLoggingEnabled) {
    goto LABEL_60;
  }
LABEL_35:
  if ((v9 & 0x8000000000000000) != 0)
  {
    [(id)a1 cancelWithReason:@"Write error"];
  }
  else
  {
    if (gNRPacketLoggingEnabled)
    {
      uint64_t v26 = +[NSDate date];
      unint64_t v27 = *(void **)(a1 + 1687);
      *(void *)(a1 + 1687) = v26;
    }
    *(void *)(a1 + 1383) += v9;
    if ((id)v9 == v6)
    {
      int v23 = *(void **)(a1 + 1327);
      *(void *)(a1 + 1327) = 0;

      sub_10009A69C(a1, a2 + 1);
    }
    else
    {
      if (v9) {
        [*(id *)(a1 + 1327) replaceBytesInRange:0 withBytes:v9 length:0];
      }
      if (*(unsigned char *)(a1 + 222) && *(void *)(a1 + 991))
      {
        *(unsigned char *)(a1 + 222) = 0;
        ++*(void *)(a1 + 1007);
        if (gNRPacketLoggingEnabled)
        {
          unsigned int v34 = (void *)_NRCopyLogObjectForNRUUID();
          int v35 = _NRLogIsLevelEnabled();

          if (v35)
          {
            unint64_t v36 = (void *)_NRCopyLogObjectForNRUUID();
            id v43 = [(id)a1 copyDescription];
            _NRLogWithArgs();
          }
        }
        dispatch_resume(*(dispatch_object_t *)(a1 + 991));
      }
      uint64_t v24 = a2 + 1;
      if (!*(unsigned char *)(a1 + 212) && *(void *)(a1 + 391))
      {
        *(unsigned char *)(a1 + 212) = 1;
        ++*(void *)(a1 + 415);
        if (gNRPacketLoggingEnabled)
        {
          unsigned int v37 = (void *)_NRCopyLogObjectForNRUUID();
          int v38 = _NRLogIsLevelEnabled();

          if (v38)
          {
            unint64_t v39 = (void *)_NRCopyLogObjectForNRUUID();
            id v44 = [(id)a1 copyDescription];
            _NRLogWithArgs();
          }
        }
        dispatch_suspend(*(dispatch_object_t *)(a1 + 391));
      }
      unsigned int v25 = *(void **)(a1 + 1351);
      if (v25) {
        [v25 setReceiveWindowPacketCount:0];
      }
      sub_10009CDE0(a1, v24);
    }
  }
}

uint64_t sub_10009D480(uint64_t a1)
{
  return sub_10009CDE0(*(void *)(a1 + 32), 0);
}

void sub_10009D48C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 242) && *(unsigned __int8 *)(a1 + 210) - 10 <= 9)
  {
    unint64_t v2 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 32));
    if (!v2)
    {
      id v14 = sub_100070988();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v16 = sub_100070988();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v17 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v17 = 136446210;
      *(void *)(v17 + 4) = "-[NRLinkBluetooth setupIPsecForPairingInitiatorIfNecessary]";
      sub_100070988();
      _NRLogAbortWithPack();
    }
    id v3 = v2;
    int v4 = *(unsigned __int8 *)(a1 + 210);
    unint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
    int v6 = _NRLogIsLevelEnabled();

    if (v4 == 11)
    {
      if (v6)
      {
        unint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
        id v18 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
      int v8 = *(void **)(a1 + 32);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_10009D96C;
      v22[3] = &unk_1001C6D40;
      unint64_t v9 = &v23;
      v22[4] = a1;
      int v23 = v3;
      id v10 = v3;
      sub_100147034((uint64_t)NRDLocalDevice, v8, 4, v22);
    }
    else
    {
      if (v6)
      {
        int v11 = (void *)_NRCopyLogObjectForNRUUID();
        id v19 = [(id)a1 copyDescription];
        _NRLogWithArgs();
      }
      uint64_t v12 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      id v20[2] = sub_10009DF08;
      v20[3] = &unk_1001C6D68;
      unint64_t v9 = &v21;
      void v20[4] = a1;
      int v21 = v3;
      id v13 = v3;
      sub_1001464C8((uint64_t)NRDLocalDevice, v12, 1, v20);
    }
  }
}

uint64_t sub_10009D7D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    uint64_t v10 = (uint64_t)WeakRetained;
    sub_1000789C4((uint64_t)WeakRetained, 3);
    uint64_t v2 = v10;
    if (!*(unsigned char *)(v10 + 242))
    {
      id v3 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(v10 + 32));
      if (!v3)
      {
        id v5 = sub_100070988();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v7 = sub_100070988();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __error();
        uint64_t v8 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v8 = 136446210;
        *(void *)(v8 + 4) = "-[NRLinkBluetooth setupIPsec]_block_invoke";
        sub_100070988();
        _NRLogAbortWithPack();
      }
      int v4 = v3;
      if (!v3[14] && *((unsigned __int16 *)v3 + 14) <= 0x12u) {
        sub_1000789C4(v10, 1);
      }

      uint64_t v2 = v10;
    }
  }

  return _objc_release_x1(WeakRetained, v2);
}

void sub_10009D96C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v56 = a4;
  id v12 = a5;
  id v13 = a6;
  if ([*(id *)(a1 + 32) state] == 255)
  {
    id v40 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_32;
    }
    id v20 = (id)_NRCopyLogObjectForNRUUID();
    id v55 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();

    goto LABEL_31;
  }
  if (a2)
  {
    if (a3)
    {
      if (v56)
      {
        id v14 = (void *)_NRCopyLogObjectForNRUUID();
        int v15 = _NRLogIsLevelEnabled();

        if (v15)
        {
          id v16 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v53 = 8756;
          id v54 = [*(id *)(a1 + 32) copyDescription];
          _NRLogWithArgs();
        }
        uint64_t v17 = *(void *)(a1 + 32);
        if (v17) {
          objc_storeStrong((id *)(v17 + 1287), a4);
        }
        if (v12)
        {
          uint64_t v18 = *(void *)(a1 + 32);
          if (v18) {
            objc_storeStrong((id *)(v18 + 1295), a5);
          }
        }
        if (v13)
        {
          uint64_t v19 = *(void *)(a1 + 32);
          if (v19) {
            objc_storeStrong((id *)(v19 + 1303), a6);
          }
        }
        id v20 = [objc_alloc((Class)NEIKEv2AuthenticationProtocol) initWithNonStandardDigitalSignature:2];
        if (qword_1001F4C60 != -1) {
          dispatch_once(&qword_1001F4C60, &stru_1001C7EB0);
        }
        id v21 = (id)qword_1001F4C58;
        id v22 = sub_10011F450(1, v21, v20);

        [v22 setLocalPrivateKeyRef:a3];
        [v22 setRemotePublicKeyRef:a2];
        [*(id *)(a1 + 32) reportEvent:3011];
        uint64_t v23 = mach_absolute_time();
        uint64_t v24 = *(void *)(a1 + 32);
        if (v24
          && ((v25 = *(void *)(v24 + 1863)) == 0 || (*(void *)(v25 + 112) = v23, (uint64_t v24 = *(void *)(a1 + 32)) != 0)))
        {
          uint64_t v26 = *(id *)(v24 + 1863);
          if (v26) {
            ++v26[13];
          }
        }
        else
        {
          uint64_t v26 = 0;
        }

        id v27 = sub_10011EF54();
        [v27 setRequestChildlessSA:1];
        id v28 = objc_alloc((Class)NEIKEv2Session);
        id v29 = sub_10011F1E0();
        [v29 setSequencePerTrafficClass:1];
        [v29 setReplayWindowSize:16];
        id v30 = [v28 initWithIKEConfig:v27 firstChildConfig:v29 sessionConfig:v22 queue:*(void *)(*(void *)(a1 + 32) + 8) ipsecInterface:0 ikeSocketHandler:0 kernelSASessionName:@"terminusIKEForPairingWithIDS" packetDelegate:*(void *)(a1 + 32)];
        uint64_t v31 = *(void *)(a1 + 32);
        int v32 = *(void **)(v31 + 1247);
        *(void *)(v31 + 1247) = v30;

        uint64_t v33 = *(void *)(*(void *)(a1 + 32) + 1247);
        unsigned int v34 = (void *)_NRCopyLogObjectForNRUUID();
        if (v33)
        {
          int v35 = _NRLogIsLevelEnabled();

          if (v35)
          {
            unint64_t v36 = (void *)_NRCopyLogObjectForNRUUID();
            uint64_t v53 = 8794;
            id v54 = [*(id *)(a1 + 32) copyDescription];
            long long v50 = "";
            uint64_t v52 = "-[NRLinkBluetooth setupIPsecForPairingInitiatorIfNecessary]_block_invoke";
            _NRLogWithArgs();
          }
          sub_100076950(*(void *)(a1 + 32));
          unsigned int v37 = (void *)_NRCopyLogObjectForNRUUID();
          int v38 = _NRLogIsLevelEnabled();

          if (v38)
          {
            unint64_t v39 = (void *)_NRCopyLogObjectForNRUUID();
            uint64_t v53 = 8798;
            id v54 = [*(id *)(a1 + 32) copyDescription];
            long long v50 = "";
            uint64_t v52 = "-[NRLinkBluetooth setupIPsecForPairingInitiatorIfNecessary]_block_invoke";
            _NRLogWithArgs();
          }
          [*(id *)(*(void *)(a1 + 32) + 1247) connect:v50, v52, v53, v54];
        }
        else
        {
          int v48 = _NRLogIsLevelEnabled();

          if (v48)
          {
            long long v49 = (void *)_NRCopyLogObjectForNRUUID();
            id v51 = [*(id *)(a1 + 32) copyDescription];
            _NRLogWithArgs();
          }
        }

        goto LABEL_31;
      }
      id v46 = sub_100070988();
      int v47 = _NRLogIsLevelEnabled();

      if (v47)
      {
LABEL_40:
        id v20 = sub_100070988();
        _NRLogWithArgs();
LABEL_31:
      }
    }
    else
    {
      id v44 = sub_100070988();
      int v45 = _NRLogIsLevelEnabled();

      if (v45) {
        goto LABEL_40;
      }
    }
  }
  else
  {
    id v42 = sub_100070988();
    int v43 = _NRLogIsLevelEnabled();

    if (v43) {
      goto LABEL_40;
    }
  }
LABEL_32:
}

void sub_10009DF08(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v64 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v12 = (void *)_NRCopyLogObjectForNRUUID();
    id v13 = [*(id *)(a1 + 32) copyDescription];
    Logid String = (void *)_NRKeyCreateLogString();
    int v62 = (void *)_NRKeyCreateLogString();
    uint64_t v63 = (void *)_NRKeyCreateLogString();
    id v59 = v13;
    uint64_t v61 = LogString;
    id v55 = "-[NRLinkBluetooth setupIPsecForPairingInitiatorIfNecessary]_block_invoke_2";
    uint64_t v57 = 8812;
    uint64_t v52 = "";
    _NRLogWithArgs();
  }
  unsigned int v15 = [*(id *)(a1 + 32) state:v52 v55 v57 v59 v61 v62 v63];
  uint64_t v16 = *(void *)(a1 + 32);
  if (v15 == 255)
  {
    id v46 = (void *)_NRCopyLogObjectForNRUUID();
    int v47 = _NRLogIsLevelEnabled();

    if (!v47) {
      goto LABEL_30;
    }
    id v19 = (id)_NRCopyLogObjectForNRUUID();
    id v21 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  else
  {
    if (v16)
    {
      objc_storeStrong((id *)(v16 + 1263), a2);
      uint64_t v17 = *(void *)(a1 + 32);
      if (v17)
      {
        objc_storeStrong((id *)(v17 + 1271), a3);
        uint64_t v18 = *(void *)(a1 + 32);
        if (v18) {
          objc_storeStrong((id *)(v18 + 1279), a4);
        }
      }
    }
    id v19 = [objc_alloc((Class)NEIKEv2AuthenticationProtocol) initWithMethod:2];
    if (qword_1001F4C70 != -1) {
      dispatch_once(&qword_1001F4C70, &stru_1001C7ED0);
    }
    id v20 = (id)qword_1001F4C68;
    id v21 = sub_10011F450(1, v20, v19);

    uint64_t v22 = *(void *)(a1 + 40);
    if (v22)
    {
      uint64_t v23 = *(void **)(v22 + 152);
      if (v23) {
        uint64_t v23 = (void *)v23[2];
      }
      uint64_t v24 = v23;
    }
    else
    {
      uint64_t v24 = 0;
    }
    [v21 setSharedSecret:v24];

    uint64_t v25 = [v21 sharedSecret];

    if (v25)
    {
      uint64_t v26 = *(void **)(a1 + 32);
      id v27 = [v21 sharedSecret];
      id v28 = (void *)_NRKeyCreateLogString();
      [v26 reportEvent:3013 details:v28];

      uint64_t v29 = mach_absolute_time();
      uint64_t v30 = *(void *)(a1 + 32);
      if (v30
        && ((v31 = *(void *)(v30 + 1863)) == 0 || (*(void *)(v31 + 112) = v29, (uint64_t v30 = *(void *)(a1 + 32)) != 0)))
      {
        int v32 = *(id *)(v30 + 1863);
        if (v32) {
          ++v32[13];
        }
      }
      else
      {
        int v32 = 0;
      }

      id v33 = sub_10011EF54();
      [v33 setRequestChildlessSA:1];
      id v34 = objc_alloc((Class)NEIKEv2Session);
      id v35 = sub_10011F1E0();
      [v35 setSequencePerTrafficClass:1];
      [v35 setReplayWindowSize:16];
      id v36 = [v34 initWithIKEConfig:v33 firstChildConfig:v35 sessionConfig:v21 queue:*(void *)(*(void *)(a1 + 32) + 8) ipsecInterface:0 ikeSocketHandler:0 kernelSASessionName:@"terminusIKEForPairingWithOOBKey" packetDelegate:*(void *)(a1 + 32)];
      uint64_t v37 = *(void *)(a1 + 32);
      int v38 = *(void **)(v37 + 1247);
      *(void *)(v37 + 1247) = v36;

      uint64_t v39 = *(void *)(*(void *)(a1 + 32) + 1247);
      id v40 = (void *)_NRCopyLogObjectForNRUUID();
      if (v39)
      {
        int v41 = _NRLogIsLevelEnabled();

        if (v41)
        {
          id v42 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v58 = 8852;
          id v60 = [*(id *)(a1 + 32) copyDescription];
          uint64_t v53 = "";
          id v56 = "-[NRLinkBluetooth setupIPsecForPairingInitiatorIfNecessary]_block_invoke_2";
          _NRLogWithArgs();
        }
        sub_100076950(*(void *)(a1 + 32));
        int v43 = (void *)_NRCopyLogObjectForNRUUID();
        int v44 = _NRLogIsLevelEnabled();

        if (v44)
        {
          int v45 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v58 = 8856;
          id v60 = [*(id *)(a1 + 32) copyDescription];
          uint64_t v53 = "";
          id v56 = "-[NRLinkBluetooth setupIPsecForPairingInitiatorIfNecessary]_block_invoke_2";
          _NRLogWithArgs();
        }
        [*(id *)(*(void *)(a1 + 32) + 1247) connect:v53, v56, v58, v60];
      }
      else
      {
        int v50 = _NRLogIsLevelEnabled();

        if (v50)
        {
          id v51 = (void *)_NRCopyLogObjectForNRUUID();
          id v54 = [*(id *)(a1 + 32) copyDescription];
          _NRLogWithArgs();
        }
      }
    }
    else
    {
      id v48 = sub_100070988();
      int v49 = _NRLogIsLevelEnabled();

      if (!v49) {
        goto LABEL_29;
      }
      id v33 = sub_100070988();
      _NRLogWithArgs();
    }
  }
LABEL_29:

LABEL_30:
}

uint64_t sub_10009E4B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_channel_attr_create())
  {
    uint64_t v26 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    id v27 = (void *)_NRCopyLogObjectForNRUUID();
    id v28 = [(id)a1 copyDescription];
    goto LABEL_13;
  }
  os_channel_attr_set();
  v55[0] = 0;
  v55[1] = 0;
  [v3 getUUIDBytes:v55];
  uint64_t extended = os_channel_create_extended();
  if (!extended)
  {
    uint64_t v29 = (void *)_NRCopyLogObjectForNRUUID();
    int v30 = _NRLogIsLevelEnabled();

    if (v30)
    {
      uint64_t v31 = (void *)_NRCopyLogObjectForNRUUID();
      id v32 = [(id)a1 copyDescription];
      __error();
      _NRLogWithArgs();
    }
    [(id)a1 virtualInterface];
    NEVirtualInterfaceDisableChannel();
    os_channel_attr_destroy();
    goto LABEL_17;
  }
  uint64_t v5 = extended;
  *(void *)(a1 + 527) = extended;
  if (!sub_10008613C((void *)a1))
  {
LABEL_17:
    uint64_t IsLevelEnabled = 0;
    goto LABEL_18;
  }
  os_channel_attr_destroy();
  os_channel_ring_id();
  uint64_t v6 = os_channel_rx_ring();
  *(void *)(a1 + 535) = v6;
  if (!v6)
  {
    id v34 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  os_channel_ring_id();
  uint64_t v7 = os_channel_tx_ring();
  *(void *)(a1 + 543) = v7;
  if (!v7)
  {
    id v35 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  unsigned int fd = os_channel_get_fd();
  if ((fd & 0x80000000) != 0)
  {
    id v36 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
LABEL_24:
    id v27 = (void *)_NRCopyLogObjectForNRUUID();
    id v28 = [(id)a1 copyDescription];
LABEL_13:
    _NRLogWithArgs();

    goto LABEL_17;
  }
  unsigned int v9 = fd;
  dispatch_group_t v10 = dispatch_group_create();
  if (!v10)
  {
    id v37 = sub_100070988();
    int v38 = _NRLogIsLevelEnabled();

    if (v38)
    {
      id v39 = sub_100070988();
      _NRLogWithArgs();
    }
    goto LABEL_30;
  }
  int v11 = v10;
  dispatch_source_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v9, 0, *(dispatch_queue_t *)(a1 + 8));
  id v13 = *(void **)(a1 + 551);
  *(void *)(a1 + 551) = v12;

  id v14 = *(NSObject **)(a1 + 551);
  if (!v14)
  {
    id v40 = sub_100070988();
    int v41 = _NRLogIsLevelEnabled();

    if (v41)
    {
      id v42 = sub_100070988();
      _NRLogWithArgs();
    }
LABEL_30:
    _os_log_pack_size();
    __error();
    uint64_t v43 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v43 = 136446210;
    *(void *)(v43 + 4) = "-[NRLinkBluetooth setupNexusChannelVoice:]";
    goto LABEL_34;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000A0E60;
  handler[3] = &unk_1001C8BA8;
  void handler[4] = a1;
  dispatch_source_set_event_handler(v14, handler);
  dispatch_group_enter(v11);
  unsigned int v15 = *(NSObject **)(a1 + 551);
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_1000A100C;
  v52[3] = &unk_1001C8BA8;
  uint64_t v16 = v11;
  uint64_t v53 = v16;
  dispatch_source_set_cancel_handler(v15, v52);
  dispatch_activate(*(dispatch_object_t *)(a1 + 551));
  dispatch_source_t v17 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, v9, 0, *(dispatch_queue_t *)(a1 + 8));
  uint64_t v18 = *(void **)(a1 + 559);
  *(void *)(a1 + 559) = v17;

  id v19 = *(NSObject **)(a1 + 559);
  if (!v19)
  {
    id v44 = sub_100070988();
    int v45 = _NRLogIsLevelEnabled();

    if (v45)
    {
      id v46 = sub_100070988();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v47 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v47 = 136446210;
    *(void *)(v47 + 4) = "-[NRLinkBluetooth setupNexusChannelVoice:]";
LABEL_34:
    sub_100070988();
    _NRLogAbortWithPack();
  }
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_1000A1014;
  v51[3] = &unk_1001C8BA8;
  void v51[4] = a1;
  dispatch_source_set_event_handler(v19, v51);
  dispatch_group_enter(v16);
  id v20 = *(NSObject **)(a1 + 559);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  void v49[2] = sub_1000A11B4;
  v49[3] = &unk_1001C8BA8;
  id v21 = v16;
  int v50 = v21;
  dispatch_source_set_cancel_handler(v20, v49);
  uint64_t IsLevelEnabled = 1;
  *(unsigned char *)(a1 + 215) = 1;
  uint64_t v23 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A11BC;
  block[3] = &unk_1001C8698;
  void block[4] = v5;
  dispatch_group_notify(v21, v23, block);
  uint64_t v24 = *(void **)(a1 + 519);
  *(void *)(a1 + 519) = v21;
  uint64_t v25 = v21;

LABEL_18:
  return IsLevelEnabled;
}

uint64_t sub_10009EC94(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_channel_attr_create())
  {
    uint64_t v26 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    id v27 = (void *)_NRCopyLogObjectForNRUUID();
    id v28 = [(id)a1 copyDescription];
    goto LABEL_13;
  }
  os_channel_attr_set();
  v55[0] = 0;
  v55[1] = 0;
  [v3 getUUIDBytes:v55];
  uint64_t extended = os_channel_create_extended();
  if (!extended)
  {
    uint64_t v29 = (void *)_NRCopyLogObjectForNRUUID();
    int v30 = _NRLogIsLevelEnabled();

    if (v30)
    {
      uint64_t v31 = (void *)_NRCopyLogObjectForNRUUID();
      id v32 = [(id)a1 copyDescription];
      __error();
      _NRLogWithArgs();
    }
    [(id)a1 virtualInterface];
    NEVirtualInterfaceDisableChannel();
    os_channel_attr_destroy();
    goto LABEL_17;
  }
  uint64_t v5 = extended;
  *(void *)(a1 + 671) = extended;
  if (!sub_10008613C((void *)a1))
  {
LABEL_17:
    uint64_t IsLevelEnabled = 0;
    goto LABEL_18;
  }
  os_channel_attr_destroy();
  os_channel_ring_id();
  uint64_t v6 = os_channel_rx_ring();
  *(void *)(a1 + 679) = v6;
  if (!v6)
  {
    id v34 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  os_channel_ring_id();
  uint64_t v7 = os_channel_tx_ring();
  *(void *)(a1 + 687) = v7;
  if (!v7)
  {
    id v35 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  unsigned int fd = os_channel_get_fd();
  if ((fd & 0x80000000) != 0)
  {
    id v36 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
LABEL_24:
    id v27 = (void *)_NRCopyLogObjectForNRUUID();
    id v28 = [(id)a1 copyDescription];
LABEL_13:
    _NRLogWithArgs();

    goto LABEL_17;
  }
  unsigned int v9 = fd;
  dispatch_group_t v10 = dispatch_group_create();
  if (!v10)
  {
    id v37 = sub_100070988();
    int v38 = _NRLogIsLevelEnabled();

    if (v38)
    {
      id v39 = sub_100070988();
      _NRLogWithArgs();
    }
    goto LABEL_30;
  }
  int v11 = v10;
  dispatch_source_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v9, 0, *(dispatch_queue_t *)(a1 + 8));
  id v13 = *(void **)(a1 + 695);
  *(void *)(a1 + 695) = v12;

  id v14 = *(NSObject **)(a1 + 695);
  if (!v14)
  {
    id v40 = sub_100070988();
    int v41 = _NRLogIsLevelEnabled();

    if (v41)
    {
      id v42 = sub_100070988();
      _NRLogWithArgs();
    }
LABEL_30:
    _os_log_pack_size();
    __error();
    uint64_t v43 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v43 = 136446210;
    *(void *)(v43 + 4) = "-[NRLinkBluetooth setupNexusChannelVideo:]";
    goto LABEL_34;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000A0AFC;
  handler[3] = &unk_1001C8BA8;
  void handler[4] = a1;
  dispatch_source_set_event_handler(v14, handler);
  dispatch_group_enter(v11);
  unsigned int v15 = *(NSObject **)(a1 + 695);
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_1000A0CA8;
  v52[3] = &unk_1001C8BA8;
  uint64_t v16 = v11;
  uint64_t v53 = v16;
  dispatch_source_set_cancel_handler(v15, v52);
  dispatch_activate(*(dispatch_object_t *)(a1 + 695));
  dispatch_source_t v17 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, v9, 0, *(dispatch_queue_t *)(a1 + 8));
  uint64_t v18 = *(void **)(a1 + 703);
  *(void *)(a1 + 703) = v17;

  id v19 = *(NSObject **)(a1 + 703);
  if (!v19)
  {
    id v44 = sub_100070988();
    int v45 = _NRLogIsLevelEnabled();

    if (v45)
    {
      id v46 = sub_100070988();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v47 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v47 = 136446210;
    *(void *)(v47 + 4) = "-[NRLinkBluetooth setupNexusChannelVideo:]";
LABEL_34:
    sub_100070988();
    _NRLogAbortWithPack();
  }
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_1000A0CB0;
  v51[3] = &unk_1001C8BA8;
  void v51[4] = a1;
  dispatch_source_set_event_handler(v19, v51);
  dispatch_group_enter(v16);
  id v20 = *(NSObject **)(a1 + 703);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  void v49[2] = sub_1000A0E50;
  v49[3] = &unk_1001C8BA8;
  id v21 = v16;
  int v50 = v21;
  dispatch_source_set_cancel_handler(v20, v49);
  uint64_t IsLevelEnabled = 1;
  *(unsigned char *)(a1 + 217) = 1;
  uint64_t v23 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A0E58;
  block[3] = &unk_1001C8698;
  void block[4] = v5;
  dispatch_group_notify(v21, v23, block);
  uint64_t v24 = *(void **)(a1 + 663);
  *(void *)(a1 + 663) = v21;
  uint64_t v25 = v21;

LABEL_18:
  return IsLevelEnabled;
}

uint64_t sub_10009F474(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_channel_attr_create())
  {
    uint64_t v26 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    id v27 = (void *)_NRCopyLogObjectForNRUUID();
    id v28 = [(id)a1 copyDescription];
    goto LABEL_13;
  }
  os_channel_attr_set();
  v55[0] = 0;
  v55[1] = 0;
  [v3 getUUIDBytes:v55];
  uint64_t extended = os_channel_create_extended();
  if (!extended)
  {
    uint64_t v29 = (void *)_NRCopyLogObjectForNRUUID();
    int v30 = _NRLogIsLevelEnabled();

    if (v30)
    {
      uint64_t v31 = (void *)_NRCopyLogObjectForNRUUID();
      id v32 = [(id)a1 copyDescription];
      __error();
      _NRLogWithArgs();
    }
    [(id)a1 virtualInterface];
    NEVirtualInterfaceDisableChannel();
    os_channel_attr_destroy();
    goto LABEL_17;
  }
  uint64_t v5 = extended;
  *(void *)(a1 + 367) = extended;
  if (!sub_10008613C((void *)a1))
  {
LABEL_17:
    uint64_t IsLevelEnabled = 0;
    goto LABEL_18;
  }
  os_channel_attr_destroy();
  os_channel_ring_id();
  uint64_t v6 = os_channel_rx_ring();
  *(void *)(a1 + 375) = v6;
  if (!v6)
  {
    id v34 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  os_channel_ring_id();
  uint64_t v7 = os_channel_tx_ring();
  *(void *)(a1 + 383) = v7;
  if (!v7)
  {
    id v35 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  unsigned int fd = os_channel_get_fd();
  if ((fd & 0x80000000) != 0)
  {
    id v36 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
LABEL_24:
    id v27 = (void *)_NRCopyLogObjectForNRUUID();
    id v28 = [(id)a1 copyDescription];
LABEL_13:
    _NRLogWithArgs();

    goto LABEL_17;
  }
  unsigned int v9 = fd;
  dispatch_group_t v10 = dispatch_group_create();
  if (!v10)
  {
    id v37 = sub_100070988();
    int v38 = _NRLogIsLevelEnabled();

    if (v38)
    {
      id v39 = sub_100070988();
      _NRLogWithArgs();
    }
    goto LABEL_30;
  }
  int v11 = v10;
  dispatch_source_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v9, 0, *(dispatch_queue_t *)(a1 + 8));
  id v13 = *(void **)(a1 + 391);
  *(void *)(a1 + 391) = v12;

  id v14 = *(NSObject **)(a1 + 391);
  if (!v14)
  {
    id v40 = sub_100070988();
    int v41 = _NRLogIsLevelEnabled();

    if (v41)
    {
      id v42 = sub_100070988();
      _NRLogWithArgs();
    }
LABEL_30:
    _os_log_pack_size();
    __error();
    uint64_t v43 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v43 = 136446210;
    *(void *)(v43 + 4) = "-[NRLinkBluetooth setupNexusChannelBestEffort:]";
    goto LABEL_34;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000A0798;
  handler[3] = &unk_1001C8BA8;
  void handler[4] = a1;
  dispatch_source_set_event_handler(v14, handler);
  dispatch_group_enter(v11);
  unsigned int v15 = *(NSObject **)(a1 + 391);
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_1000A0944;
  v52[3] = &unk_1001C8BA8;
  uint64_t v16 = v11;
  uint64_t v53 = v16;
  dispatch_source_set_cancel_handler(v15, v52);
  dispatch_activate(*(dispatch_object_t *)(a1 + 391));
  dispatch_source_t v17 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, v9, 0, *(dispatch_queue_t *)(a1 + 8));
  uint64_t v18 = *(void **)(a1 + 399);
  *(void *)(a1 + 399) = v17;

  id v19 = *(NSObject **)(a1 + 399);
  if (!v19)
  {
    id v44 = sub_100070988();
    int v45 = _NRLogIsLevelEnabled();

    if (v45)
    {
      id v46 = sub_100070988();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v47 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v47 = 136446210;
    *(void *)(v47 + 4) = "-[NRLinkBluetooth setupNexusChannelBestEffort:]";
LABEL_34:
    sub_100070988();
    _NRLogAbortWithPack();
  }
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_1000A094C;
  v51[3] = &unk_1001C8BA8;
  void v51[4] = a1;
  dispatch_source_set_event_handler(v19, v51);
  dispatch_group_enter(v16);
  id v20 = *(NSObject **)(a1 + 399);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  void v49[2] = sub_1000A0AEC;
  v49[3] = &unk_1001C8BA8;
  id v21 = v16;
  int v50 = v21;
  dispatch_source_set_cancel_handler(v20, v49);
  uint64_t IsLevelEnabled = 1;
  *(unsigned char *)(a1 + 213) = 1;
  uint64_t v23 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A0AF4;
  block[3] = &unk_1001C8698;
  void block[4] = v5;
  dispatch_group_notify(v21, v23, block);
  uint64_t v24 = *(void **)(a1 + 407);
  *(void *)(a1 + 407) = v21;
  uint64_t v25 = v21;

LABEL_18:
  return IsLevelEnabled;
}

uint64_t sub_10009FC54(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!os_channel_attr_create())
  {
    uint64_t v26 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    id v27 = (void *)_NRCopyLogObjectForNRUUID();
    id v28 = [(id)a1 copyDescription];
    goto LABEL_13;
  }
  os_channel_attr_set();
  v55[0] = 0;
  v55[1] = 0;
  [v3 getUUIDBytes:v55];
  uint64_t extended = os_channel_create_extended();
  if (!extended)
  {
    uint64_t v29 = (void *)_NRCopyLogObjectForNRUUID();
    int v30 = _NRLogIsLevelEnabled();

    if (v30)
    {
      uint64_t v31 = (void *)_NRCopyLogObjectForNRUUID();
      id v32 = [(id)a1 copyDescription];
      __error();
      _NRLogWithArgs();
    }
    [(id)a1 virtualInterface];
    NEVirtualInterfaceDisableChannel();
    os_channel_attr_destroy();
    goto LABEL_17;
  }
  uint64_t v5 = extended;
  *(void *)(a1 + 815) = extended;
  if (!sub_10008613C((void *)a1))
  {
LABEL_17:
    uint64_t IsLevelEnabled = 0;
    goto LABEL_18;
  }
  os_channel_attr_destroy();
  os_channel_ring_id();
  uint64_t v6 = os_channel_rx_ring();
  *(void *)(a1 + 823) = v6;
  if (!v6)
  {
    id v34 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  os_channel_ring_id();
  uint64_t v7 = os_channel_tx_ring();
  *(void *)(a1 + 831) = v7;
  if (!v7)
  {
    id v35 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
  unsigned int fd = os_channel_get_fd();
  if ((fd & 0x80000000) != 0)
  {
    id v36 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_18;
    }
LABEL_24:
    id v27 = (void *)_NRCopyLogObjectForNRUUID();
    id v28 = [(id)a1 copyDescription];
LABEL_13:
    _NRLogWithArgs();

    goto LABEL_17;
  }
  unsigned int v9 = fd;
  dispatch_group_t v10 = dispatch_group_create();
  if (!v10)
  {
    id v37 = sub_100070988();
    int v38 = _NRLogIsLevelEnabled();

    if (v38)
    {
      id v39 = sub_100070988();
      _NRLogWithArgs();
    }
    goto LABEL_30;
  }
  int v11 = v10;
  dispatch_source_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v9, 0, *(dispatch_queue_t *)(a1 + 8));
  id v13 = *(void **)(a1 + 839);
  *(void *)(a1 + 839) = v12;

  id v14 = *(NSObject **)(a1 + 839);
  if (!v14)
  {
    id v40 = sub_100070988();
    int v41 = _NRLogIsLevelEnabled();

    if (v41)
    {
      id v42 = sub_100070988();
      _NRLogWithArgs();
    }
LABEL_30:
    _os_log_pack_size();
    __error();
    uint64_t v43 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v43 = 136446210;
    *(void *)(v43 + 4) = "-[NRLinkBluetooth setupNexusChannelBackground:]";
    goto LABEL_34;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000A0434;
  handler[3] = &unk_1001C8BA8;
  void handler[4] = a1;
  dispatch_source_set_event_handler(v14, handler);
  dispatch_group_enter(v11);
  unsigned int v15 = *(NSObject **)(a1 + 839);
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_1000A05E0;
  v52[3] = &unk_1001C8BA8;
  uint64_t v16 = v11;
  uint64_t v53 = v16;
  dispatch_source_set_cancel_handler(v15, v52);
  dispatch_activate(*(dispatch_object_t *)(a1 + 839));
  dispatch_source_t v17 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, v9, 0, *(dispatch_queue_t *)(a1 + 8));
  uint64_t v18 = *(void **)(a1 + 847);
  *(void *)(a1 + 847) = v17;

  id v19 = *(NSObject **)(a1 + 847);
  if (!v19)
  {
    id v44 = sub_100070988();
    int v45 = _NRLogIsLevelEnabled();

    if (v45)
    {
      id v46 = sub_100070988();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v47 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v47 = 136446210;
    *(void *)(v47 + 4) = "-[NRLinkBluetooth setupNexusChannelBackground:]";
LABEL_34:
    sub_100070988();
    _NRLogAbortWithPack();
  }
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472;
  v51[2] = sub_1000A05E8;
  v51[3] = &unk_1001C8BA8;
  void v51[4] = a1;
  dispatch_source_set_event_handler(v19, v51);
  dispatch_group_enter(v16);
  id v20 = *(NSObject **)(a1 + 847);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  void v49[2] = sub_1000A0788;
  v49[3] = &unk_1001C8BA8;
  id v21 = v16;
  int v50 = v21;
  dispatch_source_set_cancel_handler(v20, v49);
  uint64_t IsLevelEnabled = 1;
  *(unsigned char *)(a1 + 219) = 1;
  uint64_t v23 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A0790;
  block[3] = &unk_1001C8698;
  void block[4] = v5;
  dispatch_group_notify(v21, v23, block);
  uint64_t v24 = *(void **)(a1 + 807);
  *(void *)(a1 + 807) = v21;
  uint64_t v25 = v21;

LABEL_18:
  return IsLevelEnabled;
}

void sub_1000A0434(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = (id)_NRCopyLogObjectForNRUUID();
      id v10 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 887);
    if (gNRPacketLoggingEnabled)
    {
      uint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      if (v8)
      {
        unsigned int v9 = (void *)_NRCopyLogObjectForNRUUID();
        id v11 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 815);
    sub_100071414((void *)v3, v4);
  }
}

void sub_1000A05E0(uint64_t a1)
{
}

void sub_1000A05E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = (id)_NRCopyLogObjectForNRUUID();
      id v9 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 895);
    if (gNRPacketLoggingEnabled)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7)
      {
        int v8 = (void *)_NRCopyLogObjectForNRUUID();
        id v10 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v3 = *(void **)(a1 + 32);
    sub_100094DB0(v3);
  }
}

void sub_1000A0788(uint64_t a1)
{
}

uint64_t sub_1000A0790()
{
  return os_channel_destroy();
}

void sub_1000A0798(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = (id)_NRCopyLogObjectForNRUUID();
      id v10 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 455);
    if (gNRPacketLoggingEnabled)
    {
      int v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      if (v8)
      {
        id v9 = (void *)_NRCopyLogObjectForNRUUID();
        id v11 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 367);
    sub_100071414((void *)v3, v4);
  }
}

void sub_1000A0944(uint64_t a1)
{
}

void sub_1000A094C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = (id)_NRCopyLogObjectForNRUUID();
      id v9 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 463);
    if (gNRPacketLoggingEnabled)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7)
      {
        int v8 = (void *)_NRCopyLogObjectForNRUUID();
        id v10 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v3 = *(void **)(a1 + 32);
    sub_100094DB0(v3);
  }
}

void sub_1000A0AEC(uint64_t a1)
{
}

uint64_t sub_1000A0AF4()
{
  return os_channel_destroy();
}

void sub_1000A0AFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = (id)_NRCopyLogObjectForNRUUID();
      id v10 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 743);
    if (gNRPacketLoggingEnabled)
    {
      int v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      if (v8)
      {
        id v9 = (void *)_NRCopyLogObjectForNRUUID();
        id v11 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 671);
    sub_100087864((void *)v3, v4);
  }
}

void sub_1000A0CA8(uint64_t a1)
{
}

void sub_1000A0CB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = (id)_NRCopyLogObjectForNRUUID();
      id v9 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 751);
    if (gNRPacketLoggingEnabled)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7)
      {
        int v8 = (void *)_NRCopyLogObjectForNRUUID();
        id v10 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v3 = *(void **)(a1 + 32);
    sub_10008AAF4(v3);
  }
}

void sub_1000A0E50(uint64_t a1)
{
}

uint64_t sub_1000A0E58()
{
  return os_channel_destroy();
}

void sub_1000A0E60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = (id)_NRCopyLogObjectForNRUUID();
      id v10 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 599);
    if (gNRPacketLoggingEnabled)
    {
      int v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      if (v8)
      {
        id v9 = (void *)_NRCopyLogObjectForNRUUID();
        id v11 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 527);
    sub_100087864((void *)v3, v4);
  }
}

void sub_1000A100C(uint64_t a1)
{
}

void sub_1000A1014(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = (id)_NRCopyLogObjectForNRUUID();
      id v9 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 607);
    if (gNRPacketLoggingEnabled)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7)
      {
        int v8 = (void *)_NRCopyLogObjectForNRUUID();
        id v10 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v3 = *(void **)(a1 + 32);
    sub_1000A11C4(v3);
  }
}

void sub_1000A11B4(uint64_t a1)
{
}

uint64_t sub_1000A11BC()
{
  return os_channel_destroy();
}

void sub_1000A11C4(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (char *)v1;
  int v3 = v1[16];
  if (v3 == 255)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
LABEL_10:
      id v10 = (void *)_NRCopyLogObjectForNRUUID();
      id v11 = [v2 copyDescription];
      _NRLogWithArgs();
    }
  }
  else if (*(void *)(v1 + 1047))
  {
    if ((v3 - 1) >= 2)
    {
      id v12 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      do
      {
        for (uint64_t i = 0; ; uint64_t i = v69)
        {
          uint64_t v14 = v12[488];
          *(void *)&v2[v14] = 4;
          if (!os_channel_get_next_slot()) {
            break;
          }
          uint64_t next_slot = os_channel_get_next_slot();
          if (!next_slot)
          {
            if (v2[223] && *(void *)(v2 + 1063))
            {
              uint64_t v33 = i;
              v2[223] = 0;
              ++*(void *)(v2 + 1079);
              if (gNRPacketLoggingEnabled)
              {
                int v49 = (void *)_NRCopyLogObjectForNRUUID();
                int v50 = _NRLogIsLevelEnabled();

                if (v50)
                {
                  id v51 = (void *)_NRCopyLogObjectForNRUUID();
                  id v65 = [v2 copyDescription];
                  _NRLogWithArgs();
                }
              }
              dispatch_resume(*(dispatch_object_t *)(v2 + 1063));
              uint64_t i = v33;
            }
            if (v2[215] || !*(void *)(v2 + 559))
            {
              uint64_t v32 = 64;
              goto LABEL_60;
            }
            uint64_t v31 = i;
            v2[215] = 1;
            ++*(void *)(v2 + 575);
            if (gNRPacketLoggingEnabled)
            {
              id v55 = (void *)_NRCopyLogObjectForNRUUID();
              int v56 = _NRLogIsLevelEnabled();

              if (v56)
              {
                uint64_t v57 = (void *)_NRCopyLogObjectForNRUUID();
                id v67 = [v2 copyDescription];
                _NRLogWithArgs();
              }
            }
            dispatch_suspend(*(dispatch_object_t *)(v2 + 559));
            uint64_t v32 = 64;
            goto LABEL_59;
          }
          uint64_t v16 = v12;
          uint64_t v69 = next_slot;
          os_channel_slot_get_packet();
          os_packet_get_next_buflet();
          os_buflet_get_object_address();
          os_buflet_get_data_offset();
          unsigned int data_length = os_buflet_get_data_length();
          if (data_length >= 0x10000)
          {
            if (qword_1001F49E8 != -1) {
              goto LABEL_84;
            }
            while (1)
            {
              if (_NRLogIsLevelEnabled())
              {
                id v58 = sub_100070988();
                _NRLogWithArgs();
              }
              _os_log_pack_size();
              __chkstk_darwin();
              __error();
              uint64_t v59 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v59 = 136446210;
              *(void *)(v59 + 4) = "NRLinkDatagramLinkToNexusLoop";
              sub_100070988();
              _NRLogAbortWithPack();
LABEL_84:
              dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
            }
          }
          unsigned int v18 = data_length;
          os_packet_get_flow_uuid();
          if (!v2[223] && *(void *)(v2 + 1063))
          {
            v2[223] = 1;
            ++*(void *)(v2 + 1079);
            if (gNRPacketLoggingEnabled)
            {
              id v28 = (void *)_NRCopyLogObjectForNRUUID();
              int v68 = _NRLogIsLevelEnabled();

              if (v68)
              {
                uint64_t v29 = (void *)_NRCopyLogObjectForNRUUID();
                id v63 = [v2 copyDescription];
                _NRLogWithArgs();
              }
            }
            dispatch_suspend(*(dispatch_object_t *)(v2 + 1063));
          }
          if (v18)
          {
            id v12 = v16;
          }
          else if (gNRPacketLoggingEnabled)
          {
            uint64_t v24 = (void *)_NRCopyLogObjectForNRUUID();
            int v25 = _NRLogIsLevelEnabled();

            id v12 = v16;
            if (v25)
            {
              uint64_t v26 = (void *)_NRCopyLogObjectForNRUUID();
              id v27 = [v2 copyDescription];
              _NRLogWithArgs();
            }
          }
          else
          {
            id v12 = v16;
          }
          if (*(void *)&v2[v12[488]] && *(void *)(v2 + 1911))
          {
            v2[255] = v2[255] % v2[254];
            uint64_t v19 = *(void *)(v2 + 1911);
            id v20 = (void *)(v19 + 8 * v2[255]);
            if ((unint64_t)(v20 + 1) <= v19 + 8 * (unint64_t)v2[254])
            {
              if ((v20 & 7) == 0)
              {
                *id v20 = *(void *)&v2[v12[488]];
                ++v2[255];
                *(void *)&v2[v12[488]] = 0;
              }
            }
            else
            {
              id v21 = (void *)_NRCopyLogObjectForNRUUID();
              int v22 = _NRLogIsLevelEnabled();

              if (v22)
              {
                uint64_t v23 = (void *)_NRCopyLogObjectForNRUUID();
                id v61 = [v2 copyDescription];
                _NRLogWithArgs();
              }
            }
          }
        }
        if (!v2[223] && *(void *)(v2 + 1063))
        {
          uint64_t v30 = i;
          v2[223] = 1;
          ++*(void *)(v2 + 1079);
          if (gNRPacketLoggingEnabled)
          {
            uint64_t v52 = (void *)_NRCopyLogObjectForNRUUID();
            int v53 = _NRLogIsLevelEnabled();

            if (v53)
            {
              id v54 = (void *)_NRCopyLogObjectForNRUUID();
              id v66 = [v2 copyDescription];
              _NRLogWithArgs();
            }
          }
          dispatch_suspend(*(dispatch_object_t *)(v2 + 1063));
          uint64_t i = v30;
        }
        if (!v2[215] || !*(void *)(v2 + 559))
        {
          uint64_t v32 = 0x800000;
          goto LABEL_60;
        }
        uint64_t v31 = i;
        v2[215] = 0;
        ++*(void *)(v2 + 575);
        if (gNRPacketLoggingEnabled)
        {
          id v46 = (void *)_NRCopyLogObjectForNRUUID();
          int v47 = _NRLogIsLevelEnabled();

          if (v47)
          {
            id v48 = (void *)_NRCopyLogObjectForNRUUID();
            id v64 = [v2 copyDescription];
            _NRLogWithArgs();
          }
        }
        dispatch_resume(*(dispatch_object_t *)(v2 + 559));
        uint64_t v32 = 0x800000;
LABEL_59:
        uint64_t i = v31;
LABEL_60:
        *(void *)&v2[v14] |= v32;
        if (i)
        {
          *(void *)&v2[v12[488]] |= 0x800000000uLL;
          if (gNRPacketLoggingEnabled)
          {
            uint64_t v40 = i;
            int v41 = (void *)_NRCopyLogObjectForNRUUID();
            int v42 = _NRLogIsLevelEnabled();

            if (v42)
            {
              uint64_t v43 = (void *)_NRCopyLogObjectForNRUUID();
              id v60 = [v2 copyDescription];
              _NRLogWithArgs();
            }
            uint64_t i = v40;
            if (gNRPacketLoggingEnabled)
            {
              uint64_t v44 = +[NSDate date];
              int v45 = *(void **)(v2 + 1695);
              *(void *)(v2 + 1695) = v44;
            }
          }
          os_channel_advance_slot();
          os_channel_sync();
          ++*(void *)(v2 + 1439);
        }
        uint64_t v34 = i;
        if (*(void *)&v2[v12[488]] && *(void *)(v2 + 1911))
        {
          v2[255] = v2[255] % v2[254];
          uint64_t v35 = *(void *)(v2 + 1911);
          id v36 = (void *)(v35 + 8 * v2[255]);
          if ((unint64_t)(v36 + 1) <= v35 + 8 * (unint64_t)v2[254])
          {
            if ((v36 & 7) == 0)
            {
              *id v36 = *(void *)&v2[v12[488]];
              ++v2[255];
              *(void *)&v2[v12[488]] = 0;
            }
          }
          else
          {
            id v37 = (void *)_NRCopyLogObjectForNRUUID();
            int v38 = _NRLogIsLevelEnabled();

            if (v38)
            {
              id v39 = (void *)_NRCopyLogObjectForNRUUID();
              id v62 = [v2 copyDescription];
              _NRLogWithArgs();
            }
          }
        }
      }
      while (v34);
    }
    else
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7) {
        goto LABEL_10;
      }
    }
  }
  else if (v1[225])
  {
    int v8 = (void *)_NRCopyLogObjectForNRUUID();
    int v9 = _NRLogIsLevelEnabled();

    if (v9) {
      goto LABEL_10;
    }
  }
}

void sub_1000A2474(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      return;
    }
    goto LABEL_6;
  }
  ++*(void *)(v2 + 1487);
  int v3 = *(unsigned __int8 **)(a1 + 32);
  if (v3[16] - 1 <= 1)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int v5 = _NRLogIsLevelEnabled();

    if (!v5) {
      return;
    }
LABEL_6:
    id v13 = (id)_NRCopyLogObjectForNRUUID();
    id v8 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();

    return;
  }
  if (gNRPacketLoggingEnabled)
  {
    int v9 = (void *)_NRCopyLogObjectForNRUUID();
    int v10 = _NRLogIsLevelEnabled();

    int v3 = *(unsigned __int8 **)(a1 + 32);
    if (v10)
    {
      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      id v12 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();

      int v3 = *(unsigned __int8 **)(a1 + 32);
    }
  }

  sub_1000A11C4(v3);
}

void sub_1000A267C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    int v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = (id)_NRCopyLogObjectForNRUUID();
      id v10 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 1495);
    if (gNRPacketLoggingEnabled)
    {
      int v7 = (void *)_NRCopyLogObjectForNRUUID();
      int v8 = _NRLogIsLevelEnabled();

      if (v8)
      {
        int v9 = (void *)_NRCopyLogObjectForNRUUID();
        id v11 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 527);
    sub_100087864((void *)v3, v4);
  }
}

void sub_1000A4FA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v15 = (id)_NRCopyLogObjectForNRUUID();
      id v12 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 1471);
    uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
    if (v3[16] - 1 > 1)
    {
      if (gNRPacketLoggingEnabled)
      {
        int v9 = (void *)_NRCopyLogObjectForNRUUID();
        int v10 = _NRLogIsLevelEnabled();

        uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
        if (v10)
        {
          id v11 = (void *)_NRCopyLogObjectForNRUUID();
          id v14 = [*(id *)(a1 + 32) copyDescription];
          _NRLogWithArgs();

          uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
        }
      }
      sub_100094DB0(v3);
    }
    else
    {
      if (gNRPacketLoggingEnabled)
      {
        uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
        int v7 = _NRLogIsLevelEnabled();

        uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
        if (v7)
        {
          int v8 = (void *)_NRCopyLogObjectForNRUUID();
          id v13 = [*(id *)(a1 + 32) copyDescription];
          _NRLogWithArgs();

          uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
        }
      }
      sub_10008A830(v3, 0);
    }
  }
}

void sub_1000A5204(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v2 + 16) == 255)
  {
    id v15 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v22 = (id)_NRCopyLogObjectForNRUUID();
      id v20 = [*(id *)(a1 + 32) copyDescription];
      _NRLogWithArgs();
    }
  }
  else
  {
    ++*(void *)(v2 + 1479);
    if (gNRPacketLoggingEnabled)
    {
      dispatch_source_t v17 = (void *)_NRCopyLogObjectForNRUUID();
      int v18 = _NRLogIsLevelEnabled();

      if (v18)
      {
        uint64_t v19 = (void *)_NRCopyLogObjectForNRUUID();
        id v21 = [*(id *)(a1 + 32) copyDescription];
        _NRLogWithArgs();
      }
    }
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 1111);
    int v5 = *(unsigned __int8 *)(v3 + 230);
    if (v4) {
      int v6 = 2;
    }
    else {
      int v6 = 4;
    }
    do
    {
      if ((v5 & 0xFC) != 0) {
        int v7 = 0;
      }
      else {
        int v7 = v5;
      }
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(v8 + 1111);
      if (v9) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == 1;
      }
      if (v10) {
        id v11 = &OBJC_IVAR___NRLinkBluetooth__nexusVIChannel;
      }
      else {
        id v11 = &OBJC_IVAR___NRLinkBluetooth__nexusBKChannel;
      }
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v7 == 0;
      }
      if (v12) {
        id v13 = &OBJC_IVAR___NRLinkBluetooth__nexusVOChannel;
      }
      else {
        id v13 = &OBJC_IVAR___NRLinkBluetooth__nexusChannel;
      }
      if (v7) {
        id v13 = v11;
      }
      sub_100071414((void *)v8, *(void *)(v8 + *v13));
      int v5 = v7 + 1;
      --v6;
    }
    while (v6);
    ++*(unsigned char *)(*(void *)(a1 + 32) + 230);
    uint64_t v14 = *(void *)(a1 + 32);
    if (*(unsigned __int8 *)(v14 + 230) > 3u) {
      *(unsigned char *)(v14 + 230) = 0;
    }
  }
}

void sub_1000A5464(uint64_t a1)
{
  uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    id v7 = [*(id *)(a1 + 32) copyDescription];
    _NRLogWithArgs();
  }
  sub_100071414(*(void **)(a1 + 32), 0);
  objc_initWeak(&location, *(id *)(a1 + 32));
  dispatch_time_t v5 = dispatch_time(0x8000000000000000, 10000000000);
  int v6 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A55B8;
  block[3] = &unk_1001C7FF0;
  objc_copyWeak(&v9, &location);
  dispatch_after(v5, v6, block);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);
}

void sub_1000A55B8(uint64_t a1)
{
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    BOOL v10 = WeakRetained;
    BOOL v2 = [WeakRetained state] == 2;
    id WeakRetained = v10;
    if (v2)
    {
      uint64_t v9 = *(void *)(v10 + 1863);
      if (v9) {
        *(unsigned char *)(v9 + 101) = 1;
      }
      sub_100074894(v10, @"Did not receive prelude after %ds", v3, v4, v5, v6, v7, v8, 10);
      id WeakRetained = v10;
    }
  }
}

char *sub_1000A69F4(char *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  uint64_t v14 = a5;
  id v15 = a6;
  if (!a1) {
    goto LABEL_50;
  }
  if (!v11)
  {
    id v34 = sub_100070988();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  dispatch_assert_queue_V2(v11);
  if (!v13)
  {
    id v36 = sub_100070988();
    int v37 = _NRLogIsLevelEnabled();

    if (v37) {
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  if ((_NRIsUUIDNonZero() & 1) == 0)
  {
    id v38 = sub_100070988();
    int v39 = _NRLogIsLevelEnabled();

    if (v39) {
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  if (!v15)
  {
    id v40 = sub_100070988();
    int v41 = _NRLogIsLevelEnabled();

    if (v41)
    {
LABEL_49:
      id v42 = sub_100070988();
      _NRLogWithArgs();

      uint64_t v31 = 0;
      goto LABEL_35;
    }
LABEL_50:
    uint64_t v31 = 0;
    goto LABEL_35;
  }
  v53.receiver = a1;
  v53.super_class = (Class)NRLinkBluetooth;
  uint64_t v16 = (char *)[super initLinkWithQueue:v11 linkDelegate:v12 nrUUID:v13];
  if (v16)
  {
    a1 = v16;
    int v50 = v15;
    uint64_t v52 = v11;
    [v16 setType:1];
    objc_storeStrong((id *)(a1 + 335), a5);
    id v51 = v14;
    dispatch_source_t v17 = [v14 peer];
    uint64_t v18 = [v17 identifier];
    uint64_t v19 = *(void **)(a1 + 327);
    *(void *)(a1 + 327) = v18;

    objc_storeStrong((id *)(a1 + 343), a6);
    id v20 = objc_alloc_init(NRAnalyticsCmpnLinkBluetooth);
    id v21 = *(void **)(a1 + 1863);
    *(void *)(a1 + 1863) = v20;

    id v22 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    *(_DWORD *)(a1 + 263) = 0xFFFF;
    uint64_t v14 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
    *(_DWORD *)(a1 + 271) = (*(_DWORD *)(a1 + 263) + 1) >> 1;
    *(_DWORD *)(a1 + 267) = *(_DWORD *)(a1 + 263);
    *(_DWORD *)(a1 + 275) = (*(_DWORD *)(a1 + 267) + 1) >> 1;
    *(_DWORD *)(a1 + 279) = 0x4000;
    *(_DWORD *)(a1 + 283) = *(_DWORD *)(a1 + 279);
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v23 = v12;
    uint64_t v24 = (unsigned __int8 *)(id)qword_1001F4A18;
    if (v24)
    {
      id v12 = (id)v24[10];

      if (v12)
      {
        a1[246] = 1;
        *(_DWORD *)(a1 + 263) = 48;
        *(_DWORD *)(a1 + 271) = (*(_DWORD *)(a1 + 263) + 1) >> 1;
        *(_DWORD *)(a1 + 267) = *(_DWORD *)(a1 + 263);
        *(_DWORD *)(a1 + 275) = (*(_DWORD *)(a1 + 267) + 1) >> 1;
        *(_DWORD *)(a1 + 279) = 48;
        *(_DWORD *)(a1 + 283) = *(_DWORD *)(a1 + 279);
      }
    }
    int v25 = (int *)sub_10013DC5C((uint64_t)NRDLocalDevice, v13);
    if (v25)
    {
      id v22 = v25;
      if (*((unsigned char *)v25 + 15))
      {
        int v26 = 1;
      }
      else
      {
        if (*((unsigned char *)v25 + 14)) {
          BOOL v27 = 1;
        }
        else {
          BOOL v27 = *((unsigned __int16 *)v25 + 14) > 0x12u;
        }
        int v26 = v27;
      }
      id v12 = v23;
      uint64_t v14 = v51;
      id v11 = v52;
      id v15 = v50;
      if (*((unsigned char *)v25 + 12))
      {
        if (!*((unsigned char *)v25 + 13)) {
          int v26 = 0;
        }
        if (v26 == 1)
        {
          a1[208] = 20;
LABEL_33:
          sub_100142334(v25, a1 + 1951);
          sub_100141A68(v22, a1 + 1967);
          sub_10014AEA4(v22, a1 + 1983);
          uint64_t v29 = [v13 UUIDString:sub_10014B038(v22, a1 + 1999)];
          [a1 reportEvent:3000 details:v29];

          uint64_t v30 = [a1 linkDelegate];
          [v30 linkIsAvailable:a1];

          uint64_t v31 = a1;
LABEL_34:

          goto LABEL_35;
        }
      }
      if (*((void *)v25 + 19))
      {
        if (*((unsigned char *)v25 + 15)) {
          char v28 = 12;
        }
        else {
          char v28 = 10;
        }
        a1[208] = v28;
        goto LABEL_33;
      }
      if (*((unsigned char *)v25 + 15))
      {
        a1[208] = 11;
        goto LABEL_33;
      }
      [a1 reportEvent:3017, @"Local device without pairing keys %@", v25 detailsFormat];
      uint64_t v33 = (char *)&unk_1001F4000;
      if (qword_1001F49E8 == -1)
      {
LABEL_37:
        if (_NRLogIsLevelEnabled())
        {
          if (*((void *)v33 + 317) != -1) {
            dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
          }
          _NRLogWithArgs();
        }
        uint64_t v31 = 0;
        goto LABEL_34;
      }
    }
    else
    {
      id v46 = sub_100070988();
      int v47 = _NRLogIsLevelEnabled();

      id v15 = "-[NRLinkBluetooth initLinkWithQueue:linkDelegate:nrUUID:pipe:remoteDeviceName:]";
      if (v47)
      {
        id v48 = sub_100070988();
        _NRLogWithArgs();
      }
      id v11 = _os_log_pack_size();
      uint64_t v33 = (char *)&v50 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v49 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v49 = 136446210;
      *(void *)(v49 + 4) = "-[NRLinkBluetooth initLinkWithQueue:linkDelegate:nrUUID:pipe:remoteDeviceName:]";
      sub_100070988();
      _NRLogAbortWithPack();
    }
    dispatch_once(&qword_1001F49E8, &stru_1001C6E00);
    goto LABEL_37;
  }
  id v43 = sub_100070988();
  int v44 = _NRLogIsLevelEnabled();

  if (v44)
  {
    id v45 = sub_100070988();
    _NRLogWithArgs();
  }
  a1 = 0;
  uint64_t v31 = 0;
LABEL_35:

  return v31;
}

void sub_1000A70F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(void *)(a1 + 1207))
  {
    id v4 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v5 = *(void **)(a1 + 1207);
    *(void *)(a1 + 1207) = v4;

    if (!*(void *)(a1 + 1207))
    {
      id v18 = sub_100070988();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v20 = sub_100070988();
        _NRLogWithArgs();
      }
LABEL_12:
      uint64_t v21 = _os_log_pack_size();
      __chkstk_darwin(v21);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v22 = 136446210;
      *(void *)(v22 + 4) = "-[NRLinkBluetooth measureLatencyWithCompletion:]";
      sub_100070988();
      _NRLogAbortWithPack();
    }
  }
  uint64_t v6 = objc_alloc_init(NRDLatencyContext);
  if (!v6)
  {
    id v15 = sub_100070988();
    int v16 = _NRLogIsLevelEnabled();

    if (v16)
    {
      id v17 = sub_100070988();
      _NRLogWithArgs();
    }
    goto LABEL_12;
  }
  uint64_t v8 = v6;
  objc_setProperty_nonatomic_copy(v6, v7, v3, 8);
  unint64_t v9 = ++qword_1001F49C8;
  v8->_sequenceNumber = qword_1001F49C8;
  BOOL v10 = (void *)_NRCopyLogObjectForNRUUID();
  int v11 = _NRLogIsLevelEnabled();

  if (v11)
  {
    id v12 = (void *)_NRCopyLogObjectForNRUUID();
    id v23 = [(id)a1 copyDescription];
    _NRLogWithArgs();
  }
  char v25 = 1;
  unint64_t v26 = bswap64(v9);
  v8->_startTime = sub_1000903A0((void *)a1, &v25, 9u, 1);
  [*(id *)(a1 + 1207) addObject:v8];
  dispatch_time_t v13 = dispatch_time(0x8000000000000000, 10000000000);
  uint64_t v14 = [(id)a1 queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A74A0;
  block[3] = &unk_1001C7580;
  void block[4] = a1;
  void block[5] = v9;
  dispatch_after(v13, v14, block);
}

void sub_1000A74A0(uint64_t a1)
{
}

void sub_1000A74B0(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v34 = v5;
  if (a3)
  {
    if (*(unsigned char *)(a1 + 229))
    {
      sub_10008FE80(a1, v5);
      uint64_t v6 = 319;
LABEL_12:
      *(_DWORD *)(a1 + v6) = 0;
      goto LABEL_20;
    }
    int v18 = *(_DWORD *)(a1 + 319);
    size_t v8 = v18 + [v5 length];
    if (*(_DWORD *)(a1 + 267) >= v8) {
      goto LABEL_18;
    }
    uint64_t v19 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v21 = (void *)_NRCopyLogObjectForNRUUID();
      id v22 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
    id v23 = reallocf(*(void **)(a1 + 1319), v8);
    if (v23)
    {
      *(void *)(a1 + 1319) = 0;
      *(void *)(a1 + 1319) = v23;
      *(_DWORD *)(a1 + 267) = v8;
      *(_DWORD *)(a1 + 275) = (*(_DWORD *)(a1 + 267) + 1) >> 1;
LABEL_18:
      uint64_t v24 = (void *)(*(void *)(a1 + 1319) + *(unsigned int *)(a1 + 319));
      id v25 = [v34 bytes];
      memcpy(v24, v25, (size_t)[v34 length]);
      *(_DWORD *)(a1 + 319) += [v34 length];
      uint64_t v16 = a1;
      int v17 = 1;
      goto LABEL_19;
    }
    id v29 = sub_100070988();
    int v30 = _NRLogIsLevelEnabled();

    if (v30)
    {
      id v31 = sub_100070988();
      _NRLogWithArgs();
    }
LABEL_28:
    uint64_t v32 = _os_log_pack_size();
    __chkstk_darwin(v32);
    __error();
    uint64_t v33 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v33 = 136446466;
    *(void *)(v33 + 4) = "_strict_reallocf";
    *(_WORD *)(v33 + 12) = 2048;
    *(void *)(v33 + 14) = v8;
    sub_100070988();
    _NRLogAbortWithPack();
  }
  if (*(unsigned __int8 *)(a1 + 16) - 1 > 1)
  {
    sub_10008FE80(a1, v5);
    uint64_t v6 = 311;
    goto LABEL_12;
  }
  int v7 = *(_DWORD *)(a1 + 311);
  size_t v8 = v7 + [v5 length];
  if (*(_DWORD *)(a1 + 263) < v8)
  {
    unint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
    int v10 = _NRLogIsLevelEnabled();

    if (v10)
    {
      int v11 = (void *)_NRCopyLogObjectForNRUUID();
      id v12 = [(id)a1 copyDescription];
      _NRLogWithArgs();
    }
    dispatch_time_t v13 = reallocf(*(void **)(a1 + 1311), v8);
    if (!v13)
    {
      id v26 = sub_100070988();
      int v27 = _NRLogIsLevelEnabled();

      if (v27)
      {
        id v28 = sub_100070988();
        _NRLogWithArgs();
      }
      goto LABEL_28;
    }
    *(void *)(a1 + 1311) = 0;
    *(void *)(a1 + 1311) = v13;
    *(_DWORD *)(a1 + 263) = v8;
    *(_DWORD *)(a1 + 271) = (*(_DWORD *)(a1 + 263) + 1) >> 1;
  }
  uint64_t v14 = (void *)(*(void *)(a1 + 1311) + *(unsigned int *)(a1 + 311));
  id v15 = [v34 bytes:v34];
  memcpy(v14, v15, (size_t)[v34 length]);
  *(_DWORD *)(a1 + 311) += [v34 length];
  uint64_t v16 = a1;
  int v17 = 0;
LABEL_19:
  sub_100090C9C(v16, v17);
LABEL_20:
}

uint64_t sub_1000A79F4(uint64_t a1)
{
  if ([(id)a1 state] == 255) {
    return 0;
  }
  uint64_t result = (uint64_t)[(id)a1 ikeClassDEstablished];
  if (result)
  {
    self;
    char v11 = 1;
    id v3 = [objc_alloc((Class)NSData) initWithBytes:&v11 length:1];
    id v4 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:51401 notifyData:v3];
    objc_initWeak(&location, (id)a1);
    id v5 = *(void **)(a1 + 1223);
    id v12 = v4;
    uint64_t v6 = +[NSArray arrayWithObjects:&v12 count:1];
    int v7 = [(id)a1 queue];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1000A7BCC;
    v8[3] = &unk_1001C7A00;
    objc_copyWeak(&v9, &location);
    [v5 sendPrivateNotifies:v6 maxRetries:10 retryIntervalInMilliseconds:10000 callbackQueue:v7 callback:v8];

    objc_destroyWeak(&v9);
    objc_destroyWeak(&location);

    return 1;
  }
  return result;
}

void sub_1000A7BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000A7BCC(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    if (a2)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!IsLevelEnabled) {
        goto LABEL_7;
      }
    }
    else
    {
      int v6 = _NRLogIsLevelEnabled();

      id WeakRetained = v9;
      if (!v6) {
        goto LABEL_7;
      }
    }
    int v7 = (void *)_NRCopyLogObjectForNRUUID();
    id v8 = [v9 copyDescription];
    _NRLogWithArgs();

    id WeakRetained = v9;
  }
LABEL_7:
}

void sub_1000A7CF0(id a1)
{
}

void sub_1000A7CFC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4A08;
  qword_1001F4A08 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000A7D40(id a1)
{
  int v10 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"-%s", "563.60.14"];
  if (([(__CFString *)v10 isEqualToString:@"-"] & 1) != 0
    || [(__CFString *)v10 isEqualToString:@"-$RC_ProjectSourceVersion"])
  {

    int v10 = &stru_1001C9648;
  }
  id v1 = objc_alloc((Class)NSString);
  uint64_t v2 = getpid();
  if (qword_1001F4B60 != -1) {
    dispatch_once(&qword_1001F4B60, &stru_1001C7BF8);
  }
  id v3 = (id)qword_1001F4B58;
  if (qword_1001F4B70 != -1) {
    dispatch_once(&qword_1001F4B70, &stru_1001C7C18);
  }
  id v4 = (id)qword_1001F4B68;
  if (_NRIsAppleInternal()) {
    id v5 = " internal";
  }
  else {
    id v5 = "";
  }
  int v6 = _NRShouldDebugAutoRelease();
  int v7 = " (NR_DEBUG_AUTORELEASE)";
  if (!v6) {
    int v7 = "";
  }
  id v8 = [v1 initWithFormat:@"terminusd%@ pid %d built on %s %s, iphoneOS %@ \"%@\"%s%s", v10, v2, "Nov 10 2024", "03:00:33", v3, v4, v5, v7];
  id v9 = (void *)qword_1001F49F8;
  qword_1001F49F8 = (uint64_t)v8;
}

uint64_t sub_1000A7EEC()
{
  if (!_NRIsAppleInternal()) {
    return 1;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001F49F0);
  id v0 = [objc_alloc((Class)NSDictionary) initWithContentsOfFile:@"/var/mobile/Library/terminus/com.apple.terminus.plist"];
  id v1 = v0;
  if (v0)
  {
    uint64_t v2 = [v0 objectForKeyedSubscript:@"companionLinkEnabled"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      unsigned __int8 v3 = [v2 intValue];
    }
    else {
      unsigned __int8 v3 = 0;
    }
  }
  else
  {
    unsigned __int8 v3 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001F49F0);
  BOOL v4 = v3 != 2;

  return v4;
}

void sub_1000A7FC0(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001F49F0);
  id v2 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:@"/var/mobile/Library/terminus/com.apple.terminus.plist"];
  if (!v2) {
    id v2 = objc_alloc_init((Class)NSMutableDictionary);
  }
  id v15 = v2;
  unsigned __int8 v3 = [v2 objectForKeyedSubscript:@"companionLinkEnabled"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned int v4 = [v3 intValue];
  }
  else {
    unsigned int v4 = 0;
  }
  id v5 = +[NSNumber numberWithInt:a1];
  [v15 setObject:v5 forKeyedSubscript:@"companionLinkEnabled"];

  int v6 = sub_100113D08(@"/var/mobile/Library/terminus/com.apple.terminus.plist", v15, 1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001F49F0);
  int v7 = sub_10015BD9C();
  dispatch_async(v7, &stru_1001C6A58);

  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v8 = (char *)(id)qword_1001F4A18;
  if (v8)
  {
    id v9 = sub_10015BD9C();
    dispatch_assert_queue_V2(v9);

    if (sub_1000A7EEC()) {
      sub_1000AB838(v8);
    }
    else {
      sub_1000ACD70((uint64_t)v8);
    }
  }

  id v10 = objc_alloc((Class)NSString);
  char v11 = *(&off_1001C6EB0 + a1);
  if (v4 >= 3) {
    id v12 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown[%lld]", v4];
  }
  else {
    id v12 = *(&off_1001C6EB0 + v4);
  }
  dispatch_time_t v13 = " (WRITE FAILED)";
  if (v6) {
    dispatch_time_t v13 = "";
  }
  id v14 = [v10 initWithFormat:@"Set companion link to %@ (previously was %@)%s", v11, v12, v13];

  sub_10012F648(0, 9001, &stru_1001C9648, v14);
}

void sub_1000A8214(void *a1, void *a2, void *a3)
{
  id v15 = a1;
  id v5 = a2;
  id v6 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001F49F0);
  id v7 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:@"/var/mobile/Library/terminus/com.apple.terminus.plist"];
  if (!v7)
  {
    id v7 = objc_alloc_init((Class)NSMutableDictionary);
    id v8 = v15;
    if (v15) {
      goto LABEL_3;
    }
LABEL_6:
    [v7 setObject:v6 forKeyedSubscript:v5];
    goto LABEL_9;
  }
  id v8 = v15;
  if (!v15) {
    goto LABEL_6;
  }
LABEL_3:
  id v9 = [v8 UUIDString];
  id v10 = [v7 objectForKeyedSubscript:v9];

  if (v10) {
    id v11 = [v10 mutableCopy];
  }
  else {
    id v11 = objc_alloc_init((Class)NSMutableDictionary);
  }
  id v12 = v11;
  [v11 setObject:v6 forKeyedSubscript:v5];
  dispatch_time_t v13 = [v15 UUIDString];
  [v7 setObject:v12 forKeyedSubscript:v13];

LABEL_9:
  int v14 = sub_100113D08(@"/var/mobile/Library/terminus/com.apple.terminus.plist", v7, 1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001F49F0);
  if (v14)
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A10 == -1) {
        goto LABEL_19;
      }
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A10 == -1)
      {
LABEL_19:
        _NRLogWithArgs();
        goto LABEL_20;
      }
LABEL_23:
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
      goto LABEL_19;
    }
  }
LABEL_20:
}

void sub_1000A8484(void *a1, void *a2)
{
  id v11 = a1;
  id v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001F49F0);
  id v4 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:@"/var/mobile/Library/terminus/com.apple.terminus.plist"];
  if (!v4)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001F49F0);
    goto LABEL_25;
  }
  if (v11)
  {
    id v5 = [v11 UUIDString];
    id v6 = [v4 objectForKeyedSubscript:v5];

    if (v6)
    {
      if (v3)
      {
        id v7 = [v6 mutableCopy];
        [v7 removeObjectForKey:v3];
      }
      else
      {
        id v7 = 0;
      }
      id v8 = [v7 count];
      id v9 = [v11 UUIDString];
      if (v8) {
        [v4 setObject:v7 forKeyedSubscript:v9];
      }
      else {
        [v4 removeObjectForKey:v9];
      }
    }
  }
  else
  {
    [v4 removeObjectForKey:v3];
  }
  int v10 = sub_100113D08(@"/var/mobile/Library/terminus/com.apple.terminus.plist", v4, 1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001F49F0);
  if (v10)
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A10 == -1) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
  }
  else
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A10 == -1)
      {
LABEL_24:
        _NRLogWithArgs();
        goto LABEL_25;
      }
LABEL_28:
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
      goto LABEL_24;
    }
  }
LABEL_25:
}

id sub_1000A8708(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001F49F0);
  id v5 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:@"/var/mobile/Library/terminus/com.apple.terminus.plist"];
  id v6 = v5;
  if (v3)
  {
    id v7 = [v3 UUIDString];
    id v8 = [v6 objectForKeyedSubscript:v7];

    id v9 = [v8 objectForKeyedSubscript:v4];
  }
  else
  {
    id v9 = [v5 objectForKeyedSubscript:v4];
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001F49F0);
  if (v9)
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A10 == -1) {
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A10 == -1)
      {
LABEL_14:
        _NRLogWithArgs();
        goto LABEL_15;
      }
LABEL_18:
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
      goto LABEL_14;
    }
  }
LABEL_15:

  return v9;
}

void sub_1000A9E64(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v10 = a3;
    id v11 = [objc_alloc((Class)NSString) initWithFormat:v10 arguments:&a9];

    sub_10012F648(0, a2, 0, v11);
  }
}

id sub_1000AA13C()
{
  if (qword_1001F4A48 != -1) {
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
  }
  id v0 = (void *)qword_1001F4A40;

  return v0;
}

void sub_1000AA190(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4A40;
  qword_1001F4A40 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000AA4D0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v2 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v2, @"NRLinkDirector-AppVPN");

    id v77 = objc_alloc_init((Class)NSMutableArray);
    long long v101 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    id obj = *(id *)(v1 + 216);
    id v68 = [obj countByEnumeratingWithState:&v101 objects:v113 count:16];
    if (v68)
    {
      uint64_t v67 = *(void *)v102;
      uint64_t v74 = v1;
      do
      {
        uint64_t v3 = 0;
        do
        {
          if (*(void *)v102 != v67) {
            objc_enumerationMutation(obj);
          }
          uint64_t v69 = v3;
          uint64_t v73 = *(void **)(*((void *)&v101 + 1) + 8 * v3);
          id v4 = [[*(id *)(v1 + 216) objectForKeyedSubscript:];
          id v5 = sub_1000E8868((uint64_t)v4);

          long long v99 = 0u;
          long long v100 = 0u;
          long long v97 = 0u;
          long long v98 = 0u;
          id v70 = v5;
          id v76 = [v70 countByEnumeratingWithState:&v97 objects:v112 count:16];
          if (v76)
          {
            uint64_t v75 = *(void *)v98;
            do
            {
              for (uint64_t i = 0; i != v76; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v98 != v75) {
                  objc_enumerationMutation(v70);
                }
                uint64_t v7 = *(void *)(*((void *)&v97 + 1) + 8 * i);
                uint64_t v78 = i;
                if (*(void *)(v1 + 328))
                {
                  id v8 = +[NEPolicyRouteRule routeRuleWithAction:6 forType:7];
                  [v8 setNetworkAgentUUID:v7];
                  [v77 addObject:v8];
                  id v9 = sub_10013DC5C((uint64_t)NRDLocalDevice, v73);
                  id v10 = v9;
                  if (v9) {
                    id v11 = (void *)*((void *)v9 + 16);
                  }
                  else {
                    id v11 = 0;
                  }
                  id v12 = v11;
                  dispatch_time_t v13 = [v12 proxyProviderCriteria];
                  unsigned int v14 = [v13 excludeVPNClients];

                  if (v14)
                  {
                    int v71 = v10;
                    uint64_t v72 = v8;
                    id v15 = +[NEPolicyResult removeNetworkAgentUUID:v7];
                    long long v93 = 0u;
                    long long v94 = 0u;
                    long long v95 = 0u;
                    long long v96 = 0u;
                    id v79 = *(id *)(v1 + 328);
                    id v16 = [v79 countByEnumeratingWithState:&v93 objects:v111 count:16];
                    if (v16)
                    {
                      id v17 = v16;
                      uint64_t v18 = *(void *)v94;
                      do
                      {
                        for (j = 0; j != v17; j = (char *)j + 1)
                        {
                          if (*(void *)v94 != v18) {
                            objc_enumerationMutation(v79);
                          }
                          uint64_t v20 = *(void *)(*((void *)&v93 + 1) + 8 * (void)j);
                          id v21 = objc_alloc((Class)NEPolicy);
                          id v22 = +[NEPolicyCondition allInterfaces];
                          v110[0] = v22;
                          id v23 = +[NEPolicyCondition effectiveApplication:v20];
                          v110[1] = v23;
                          uint64_t v24 = +[NSArray arrayWithObjects:v110 count:2];
                          id v25 = [v21 initWithOrder:5 result:v15 conditions:v24];

                          self;
                          if (qword_1001F4D28 != -1) {
                            dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                          }
                          id v26 = (id)qword_1001F4D20;
                          id v27 = sub_100134CFC((uint64_t)v26, @"NRLinkDirector-AppVPN", v25);
                        }
                        id v17 = [v79 countByEnumeratingWithState:&v93 objects:v111 count:16];
                      }
                      while (v17);
                    }

                    uint64_t v1 = v74;
                    uint64_t i = v78;
                    id v10 = v71;
                    id v8 = v72;
                  }
                }
                if (*(void *)(v1 + 312))
                {
                  id v28 = +[NEPolicyRouteRule routeRuleWithAction:forNetworkAgent:](NEPolicyRouteRule, "routeRuleWithAction:forNetworkAgent:", 6);
                  [v28 setNetworkAgentUUID:v7];
                  id v80 = v28;
                  [v77 addObject:v28];
                  long long v91 = 0u;
                  long long v92 = 0u;
                  long long v89 = 0u;
                  long long v90 = 0u;
                  id v29 = *(id *)(v1 + 320);
                  id v30 = [v29 countByEnumeratingWithState:&v89 objects:v109 count:16];
                  if (v30)
                  {
                    id v31 = v30;
                    uint64_t v32 = *(void *)v90;
                    do
                    {
                      for (k = 0; k != v31; k = (char *)k + 1)
                      {
                        if (*(void *)v90 != v32) {
                          objc_enumerationMutation(v29);
                        }
                        id v34 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v89 + 1) + 8 * (void)k)];
                        uint64_t v35 = +[NEPolicyResult removeNetworkAgentUUID:v7];
                        id v36 = objc_alloc((Class)NEPolicy);
                        int v37 = +[NEPolicyCondition allInterfaces];
                        v108[0] = v37;
                        v108[1] = v34;
                        id v38 = +[NSArray arrayWithObjects:v108 count:2];
                        id v39 = [v36 initWithOrder:5 result:v35 conditions:v38];

                        self;
                        if (qword_1001F4D28 != -1) {
                          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                        }
                        id v40 = (id)qword_1001F4D20;
                        id v41 = sub_100134CFC((uint64_t)v40, @"NRLinkDirector-AppVPN", v39);
                      }
                      id v31 = [v29 countByEnumeratingWithState:&v89 objects:v109 count:16];
                    }
                    while (v31);
                  }

                  uint64_t v1 = v74;
                  uint64_t i = v78;
                }
              }
              id v76 = [v70 countByEnumeratingWithState:&v97 objects:v112 count:16];
            }
            while (v76);
          }

          uint64_t v3 = v69 + 1;
        }
        while ((id)(v69 + 1) != v68);
        id v68 = [obj countByEnumeratingWithState:&v101 objects:v113 count:16];
      }
      while (v68);
    }

    if ([v77 count])
    {
      long long v87 = 0uLL;
      long long v88 = 0uLL;
      long long v85 = 0uLL;
      long long v86 = 0uLL;
      id v42 = *(id *)(v1 + 216);
      id v43 = [v42 countByEnumeratingWithState:&v85 objects:v107 count:16];
      if (v43)
      {
        id v44 = v43;
        uint64_t v45 = *(void *)v86;
        do
        {
          for (m = 0; m != v44; m = (char *)m + 1)
          {
            if (*(void *)v86 != v45) {
              objc_enumerationMutation(v42);
            }
            int v47 = [*(id *)(v1 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v85 + 1) + 8 * (void)m)];
            sub_1000FB3D0(v47, 1);
          }
          id v44 = [v42 countByEnumeratingWithState:&v85 objects:v107 count:16];
        }
        while (v44);
      }

      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        id v65 = "";
        _NRLogWithArgs();
      }
      id v48 = objc_alloc((Class)NEPolicy);
      uint64_t v49 = +[NEPolicyResult routeRules:v77];
      int v50 = +[NEPolicyCondition allInterfaces];
      uint64_t v106 = v50;
      id v51 = +[NSArray arrayWithObjects:&v106 count:1];
      id v52 = [v48 initWithOrder:5 result:v49 conditions:v51];

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v53 = (id)qword_1001F4D20;
      id v54 = sub_100134CFC((uint64_t)v53, @"NRLinkDirector-AppVPN", v52);
    }
    else
    {
      long long v83 = 0uLL;
      long long v84 = 0uLL;
      long long v81 = 0uLL;
      long long v82 = 0uLL;
      id v52 = *(id *)(v1 + 216);
      id v60 = [v52 countByEnumeratingWithState:&v81 objects:v105 count:16];
      if (v60)
      {
        id v61 = v60;
        uint64_t v62 = *(void *)v82;
        do
        {
          for (n = 0; n != v61; n = (char *)n + 1)
          {
            if (*(void *)v82 != v62) {
              objc_enumerationMutation(v52);
            }
            id v64 = [*(id *)(v1 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v81 + 1) + 8 * (void)n)];
            sub_1000FB3D0(v64, 0);
          }
          id v61 = [v52 countByEnumeratingWithState:&v81 objects:v105 count:16];
        }
        while (v61);
      }
    }

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v55 = (id)qword_1001F4D20;
    int v56 = (id *)v55;
    if (v55)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v55 + 1));
      if (([v56[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v57, v58, v59, (uint64_t)v65);
      }
    }
  }
}

id sub_1000AB278(uint64_t a1)
{
  switch((int)a1)
  {
    case 1001:
      id v1 = objc_alloc((Class)NSString);
      id v2 = "Initial";
      goto LABEL_8;
    case 1002:
      id v1 = objc_alloc((Class)NSString);
      id v2 = "Start";
      goto LABEL_8;
    case 1003:
      id v1 = objc_alloc((Class)NSString);
      id v2 = "Ready";
      goto LABEL_8;
    case 1004:
      id v1 = objc_alloc((Class)NSString);
      id v2 = "Cancelled";
      goto LABEL_8;
    default:
      if (a1) {
        return [objc_alloc((Class)NSString) initWithFormat:@"Unknown(%u)", a1];
      }
      id v1 = objc_alloc((Class)NSString);
      id v2 = "Invalid";
LABEL_8:
      return [v1 initWithUTF8String:v2];
  }
}

id sub_1000AB38C()
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v0 = (void *)qword_1001F4A18;

  return v0;
}

void sub_1000AB3E4(id a1)
{
  id v1 = sub_1000AB424((char *)[NRLinkDirector alloc]);
  uint64_t v2 = qword_1001F4A18;
  qword_1001F4A18 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

char *sub_1000AB424(char *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = sub_10015BD9C();
    dispatch_assert_queue_V2(v2);

    v25.receiver = v1;
    v25.super_class = (Class)NRLinkDirector;
    uint64_t v3 = [super init];
    if (!v3)
    {
      id v20 = sub_1000AA13C();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v22 = sub_1000AA13C();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v23 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v23 = 136446210;
      *(void *)(v23 + 4) = "-[NRLinkDirector initDirector]";
      sub_1000AA13C();
      _NRLogAbortWithPack();
    }
    id v4 = v3;
    id v5 = objc_alloc_init((Class)NSMutableDictionary);
    id v6 = (void *)v4[27];
    v4[27] = v5;

    id v7 = objc_alloc_init((Class)NSMutableSet);
    id v8 = (void *)v4[28];
    v4[28] = v7;

    id v9 = objc_alloc_init((Class)NSMutableSet);
    id v10 = (void *)v4[29];
    v4[29] = v9;

    id v11 = objc_alloc_init((Class)NSMutableSet);
    id v12 = (void *)v4[30];
    v4[30] = v11;

    sub_10012F648(0, 1000, 0, 0);
    v4[3] = -1;
    id v13 = sub_10015BD9C();
    unsigned int v14 = (void *)v4[17];
    v4[17] = v13;

    id v15 = (void *)v4[17];
    id v16 = v4;
    uint64_t v24 = v16;
    id v17 = v15;
    v16[16] = ne_session_is_always_on_vpn_enabled();

    uint64_t v18 = sub_10015BD9C();
    dispatch_assert_queue_V2(v18);

    if (sub_1000A7EEC()) {
      sub_1000AB838(v16);
    }
    else {
      sub_1000ACD70((uint64_t)v16);
    }
    id v1 = v16;
  }
  return v1;
}

void sub_1000AB6A8(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 32))
  {
    int v4 = a2 ? 1037 : 1038;
    sub_10012F648(0, v4, 0, 0);
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if ((*(unsigned char *)(v5 + 16) != 0) != a2)
      {
        *(unsigned char *)(v5 + 16) = a2;
        id v6 = *(char **)(a1 + 32);
        if (v6)
        {
          id v7 = sub_10015BD9C();
          dispatch_assert_queue_V2(v7);

          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            _NRLogWithArgs();
          }
          sub_1000ACD70((uint64_t)v6);
          id v8 = sub_10015BD9C();
          dispatch_assert_queue_V2(v8);

          if (sub_1000A7EEC())
          {
            sub_1000AB838(v6);
          }
          else
          {
            sub_1000ACD70((uint64_t)v6);
          }
        }
      }
    }
  }
}

void sub_1000AB838(char *a1)
{
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  if (a1[12])
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
    return;
  }
  a1[12] = 1;
  sub_10012F648(0, 1001, 0, 0);
  a1[10] = 0;
  if (_os_feature_enabled_impl())
  {
    a1[10] = 1;
    dword_1001F43DC = 64;
  }
  if (a1[16]) {
    sub_10012F648(0, 1032, 0, 0);
  }
  uint64_t v3 = sub_10015BD9C();
  dispatch_assert_queue_V2(v3);

  uint64_t v119 = (id *)a1;
  if (!_NRIsAppleInternal()) {
    goto LABEL_49;
  }
  if (qword_1001F4A48 != -1) {
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    _NRLogWithArgs();
  }
  int v4 = [NRDTestServer alloc];
  id v5 = *((id *)a1 + 17);
  id v6 = sub_100060C3C((id *)&v4->super.isa, v5);
  id v7 = (void *)*((void *)a1 + 25);
  *((void *)a1 + 25) = v6;

  uint64_t v8 = *((void *)a1 + 25);
  if (v8) {
    goto LABEL_150;
  }
  if (qword_1001F4A48 != -1) {
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    _NRLogWithArgs();
  }
  uint64_t v8 = *((void *)a1 + 25);
  if (v8)
  {
LABEL_150:
    if (*(unsigned char *)(v8 + 8))
    {
      if (qword_1001F4930 != -1) {
        dispatch_once(&qword_1001F4930, &stru_1001C6978);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4930 != -1) {
          dispatch_once(&qword_1001F4930, &stru_1001C6978);
        }
        _NRLogWithArgs();
      }
    }
    else
    {
      *(unsigned char *)(v8 + 8) = 1;
      sub_10012F648(0, 9002, 0, 0);
      if (!*(void *)(v8 + 24))
      {
        id v9 = sub_100061D14(v8);
        id v10 = *(void **)(v8 + 24);
        *(void *)(v8 + 24) = v9;
      }
      if (!*(void *)(v8 + 32))
      {
        id v11 = sub_100061D14(v8);
        id v12 = *(void **)(v8 + 32);
        *(void *)(v8 + 32) = v11;
      }
    }
  }
  id v13 = sub_1000A8708(0, @"FixedInterfacePeerIDSDeviceID");
  unsigned int v14 = sub_1000A8708(0, @"FixedInterfaceName");
  id v15 = sub_1000A8708(0, @"FixedInterfacePeerAddress");
  if (!v13 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    if (!v14
      || !v15
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
      || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {

      a1 = (char *)v119;
LABEL_49:
      if (a1[16])
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          _NRLogWithArgs();
        }
        goto LABEL_85;
      }
      if (qword_1001F4B80 != -1) {
        dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
      }
      if (byte_1001F4B78)
      {
        id v110 = sub_1000AA13C();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (!IsLevelEnabled) {
          goto LABEL_65;
        }
        id v20 = sub_1000AA13C();
        _NRLogWithArgs();
LABEL_64:

        a1 = (char *)v119;
LABEL_65:
        self;
        if (qword_1001F4DE0 != -1) {
          dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
        }
        id v36 = (id)qword_1001F4DD8;
        *(void *)&long long from = _NSConcreteStackBlock;
        *((void *)&from + 1) = 3221225472;
        *(void *)&long long v123 = sub_1000B6FC0;
        *((void *)&v123 + 1) = &unk_1001C8BA8;
        *(void *)&long long v124 = a1;
        sub_10015969C((uint64_t)v36, &from);

        sub_1000B6EA4((uint64_t)v119);
        if (!v119[24])
        {
          int v37 = [NROnDemandLinkSetupManager alloc];
          id v38 = v119[17];
          id v39 = sub_100015904((id *)&v37->super.isa, v38);
          id v41 = v119[24];
          id v40 = (char *)(v119 + 24);
          v119[24] = v39;

          uint64_t v42 = *(void *)v40;
          if (*(void *)v40)
          {
            if (!*(unsigned char *)(v42 + 8))
            {
              *(unsigned char *)(v42 + 8) = 1;
              id v43 = (_DWORD *)(v42 + 20);
              if (*(_DWORD *)(v42 + 20) == -1)
              {
                objc_initWeak(&location, (id)v42);
                block.receiver = _NSConcreteStackBlock;
                block.super_class = (Class)3221225472;
                int v128 = sub_1000172F0;
                int v129 = &unk_1001C8A58;
                objc_copyWeak(v130, &location);
                id v44 = objc_retainBlock(&block);
                uint64_t v45 = *(id *)(v42 + 32);
                uint32_t v46 = notify_register_dispatch("com.apple.CoreTelephony.Slicing.LLPHS.State", (int *)(v42 + 20), v45, v44);

                if (v46)
                {
                  *id v43 = -1;
                  if (qword_1001F4828 != -1) {
                    dispatch_once(&qword_1001F4828, &stru_1001C61C8);
                  }
                  id v47 = (id)qword_1001F4820;
                  char v48 = _NRLogIsLevelEnabled();

                  if (v48)
                  {
                    if (qword_1001F4828 != -1) {
                      dispatch_once(&qword_1001F4828, &stru_1001C61C8);
                    }
                    id v49 = (id)qword_1001F4820;
                    _NRLogWithArgs();
                  }
                }
                else
                {
                  ((void (*)(objc_super *, void))v44[1].receiver)(v44, *v43);
                }

                objc_destroyWeak(v130);
                objc_destroyWeak(&location);
              }
              objc_initWeak(&location, (id)v42);
              long long v100 = *(void **)(v42 + 32);
              block.receiver = _NSConcreteStackBlock;
              block.super_class = (Class)3221225472;
              int v128 = sub_100015AB0;
              int v129 = &unk_1001C7FF0;
              long long v101 = v100;
              objc_copyWeak(v130, &location);
              dispatch_async(v101, &block);

              objc_destroyWeak(v130);
              objc_destroyWeak(&location);
            }
          }
        }
        goto LABEL_85;
      }
      uint64_t v19 = [NRLinkManagerBluetooth alloc];
      id v20 = *((id *)a1 + 17);
      id v21 = a1;
      if (!v19) {
        goto LABEL_147;
      }
      if (v20)
      {
        dispatch_assert_queue_V2(v20);
        block.receiver = v19;
        block.super_class = (Class)NRLinkManagerBluetooth;
        id v22 = [super initManagerWithQueue:v20 managerDelegate:v21];
        uint64_t v23 = (uint64_t)v22;
        if (v22)
        {
          v22[36] = 1;
          *((_DWORD *)v22 + 3) = 1001;
          v22[8] = 1;
          id v24 = objc_alloc_init((Class)NSMutableSet);
          objc_super v25 = *(void **)(v23 + 40);
          *(void *)(v23 + 40) = v24;

          [(id)v23 reportEvent:2001];
          sub_100031EF8(v23);
          [(id)v23 reportEvent:2002];
          *(_DWORD *)(v23 + 12) = 1003;
          id v26 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:3];
          id v27 = *(void **)(v23 + 80);
          *(void *)(v23 + 80) = v26;

          id v28 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:3];
          id v29 = *(void **)(v23 + 88);
          *(void *)(v23 + 88) = v28;

          id v30 = objc_alloc_init((Class)NSMutableDictionary);
          id v31 = *(void **)(v23 + 104);
          *(void *)(v23 + 104) = v30;

          id v32 = objc_alloc_init((Class)NSMutableDictionary);
          uint64_t v33 = *(void **)(v23 + 112);
          *(void *)(v23 + 112) = v32;

          objc_storeWeak((id *)(v23 + 120), v21);
          uint64_t v19 = (NRLinkManagerBluetooth *)(id)v23;
          id v34 = v19;
        }
        else
        {
          id v115 = sub_1000286EC();
          int v116 = _NRLogIsLevelEnabled();

          if (v116)
          {
            id v117 = sub_1000286EC();
            _NRLogWithArgs();
          }
          uint64_t v19 = 0;
          id v34 = 0;
        }
        goto LABEL_63;
      }
      id v112 = sub_1000286EC();
      int v113 = _NRLogIsLevelEnabled();

      if (v113)
      {
        id v114 = sub_1000286EC();
        _NRLogWithArgs();

        id v34 = 0;
      }
      else
      {
LABEL_147:
        id v34 = 0;
      }
LABEL_63:

      uint64_t v35 = (void *)*((void *)v21 + 5);
      *((void *)v21 + 5) = v34;

      goto LABEL_64;
    }
  }
  id v16 = v119;
  *((unsigned char *)v119 + 8) = 1;
  objc_storeStrong(v16 + 10, v15);
  objc_storeStrong(v119 + 9, v14);
  objc_storeStrong(v119 + 11, v13);
  id v17 = sub_100145898();
  if ([v17 count])
  {
    self;
    if (qword_1001F4DE0 != -1) {
      dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
    }
    id v18 = (id)qword_1001F4DD8;
    block.receiver = _NSConcreteStackBlock;
    block.super_class = (Class)3221225472;
    int v128 = sub_1000B6E30;
    int v129 = &unk_1001C8BA8;
    v130[0] = v119;
    sub_10015969C((uint64_t)v18, &block);

    sub_1000B6EA4((uint64_t)v119);
  }
  else
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
  }

LABEL_85:
  if (_NRIsAppleInternal())
  {
    objc_initWeak((id *)&from, v119);
    block.receiver = _NSConcreteStackBlock;
    block.super_class = (Class)3221225472;
    int v128 = sub_1000B6CD4;
    int v129 = &unk_1001C7138;
    objc_copyWeak(v130, (id *)&from);
    int v50 = objc_retainBlock(&block);
    id v51 = +[NSDistributedNotificationCenter defaultCenter];
    uint64_t v52 = [v51 addObserverForName:@"NanoSettingsPerpetualMeadowStandaloneWifiPreferencesChangedNotification" object:0 queue:0 usingBlock:v50];
    id v53 = v119[36];
    v119[36] = (id)v52;

    id v54 = +[NSDistributedNotificationCenter defaultCenter];
    uint64_t v55 = [v54 addObserverForName:@"NanoSettingsPerpetualMeadowStandaloneCellularPreferencesChangedNotification" object:0 queue:0 usingBlock:v50];
    id v56 = v119[37];
    v119[37] = (id)v55;

    objc_destroyWeak(v130);
    objc_destroyWeak((id *)&from);
  }
  self;
  self;
  uint64_t v57 = sub_10015BD9C();
  dispatch_assert_queue_V2(v57);

  sub_10013BB9C();
  id v58 = objc_alloc_init((Class)NSMutableArray);
  long long from = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  id v59 = (id)qword_1001F4D40;
  id v60 = [v59 countByEnumeratingWithState:&from objects:&block count:16];
  if (v60)
  {
    uint64_t v61 = *(void *)v123;
    do
    {
      for (uint64_t i = 0; i != v60; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v123 != v61) {
          objc_enumerationMutation(v59);
        }
        uint64_t v63 = *(void *)(*((void *)&from + 1) + 8 * i);
        uint64_t v64 = [(id)qword_1001F4D40 objectForKeyedSubscript:v63];
        id v65 = (void *)v64;
        if (v64 && *(unsigned char *)(v64 + 8)) {
          [v58 addObject:v63];
        }
      }
      id v60 = [v59 countByEnumeratingWithState:&from objects:&block count:16];
    }
    while (v60);
  }

  if (![v58 count]) {
    goto LABEL_119;
  }
  id v66 = +[NRDeviceOperationalProperties copyPropertiesForDefaultPairedPhone];
  sub_100117DF0(v66);
  long long v125 = 0u;
  long long v124 = 0u;
  long long v123 = 0u;
  long long from = 0u;
  id v67 = v58;
  id v68 = [v67 countByEnumeratingWithState:&from objects:&block count:16];
  if (!v68)
  {

    goto LABEL_118;
  }
  int v120 = 0;
  uint64_t v69 = *(void *)v123;
  do
  {
    for (j = 0; j != v68; j = (char *)j + 1)
    {
      if (*(void *)v123 != v69) {
        objc_enumerationMutation(v67);
      }
      int v71 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(*((void *)&from + 1) + 8 * (void)j));
      uint64_t v72 = v71;
      if (v71 && v71[8] && *((void *)v71 + 5))
      {
        uint64_t v73 = (void *)*((void *)v71 + 16);
        if (!v73)
        {
          if (!v66) {
            goto LABEL_113;
          }
          id v82 = *((id *)v72 + 4);
          long long v83 = [v72 description];
          sub_10012F648(v82, 5011, v83, 0);

          [v72 setOperationalProp:v66];
          goto LABEL_112;
        }
        uint64_t v74 = [v73 allowedLinkTypes];
        uint64_t v75 = [v66 allowedLinkTypes];
        unsigned int v76 = [v74 isEqualToArray:v75];

        if (v76 && ([*((id *)v72 + 16) isEqual:v66] & 1) == 0)
        {
          sub_10014309C(v72, 5012, @"old: %@ new: %@", v77, v78, v79, v80, v81, *((void *)v72 + 16));
          [*((id *)v72 + 16) mergeProperties:v66];
LABEL_112:
          int v120 = 1;
        }
      }
LABEL_113:
    }
    id v68 = [v67 countByEnumeratingWithState:&from objects:&block count:16];
  }
  while (v68);

  if (v120) {
    sub_10013C9FC((uint64_t)NRDLocalDevice, 1);
  }
LABEL_118:

LABEL_119:
  sub_1000AD794((char *)v119);
  long long v84 = &objc_sync_exit_ptr;
  self;
  long long v85 = sub_10015BD9C();
  dispatch_assert_queue_V2(v85);

  objc_super block = (objc_super)xmmword_10016C8A0;
  id v86 = [objc_alloc((Class)NSData) initWithBytes:&block length:16];
  long long v87 = sub_100141BFC((uint64_t)NRDLocalDevice, v86, @"0");

  long long v88 = +[NEPolicyCondition remoteAddress:v87 prefix:64];

  if (v88)
  {
    id v89 = objc_alloc((Class)NEPolicy);
    long long v90 = +[NEPolicyResult drop];
    v126[0] = v88;
    long long v91 = +[NEPolicyCondition allInterfaces];
    v126[1] = v91;
    long long v84 = +[NSArray arrayWithObjects:v126 count:2];
    long long v92 = (char *)[v89 initWithOrder:5000 result:v90 conditions:v84];

    if (v92)
    {
      self;
      long long v84 = &unk_1001F4000;
      if (qword_1001F4D28 == -1) {
        goto LABEL_122;
      }
      goto LABEL_139;
    }
    id v106 = sub_1000AA13C();
    int v107 = _NRLogIsLevelEnabled();

    if (v107)
    {
      id v108 = sub_1000AA13C();
      _NRLogWithArgs();
    }
    long long v92 = (char *)_os_log_pack_size();
    long long v88 = (char *)&v118 - ((__chkstk_darwin(v92) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v109 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v109 = 136446210;
    *(void *)(v109 + 4) = "-[NRLinkDirector startDirector]";
    sub_1000AA13C();
    _NRLogAbortWithPack();
  }
  else
  {
    id v102 = sub_1000AA13C();
    int v103 = _NRLogIsLevelEnabled();

    if (v103)
    {
      id v104 = sub_1000AA13C();
      _NRLogWithArgs();
    }
    long long v88 = (char *)_os_log_pack_size();
    long long v92 = (char *)&v118 - ((__chkstk_darwin(v88) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v105 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v105 = 136446210;
    *(void *)(v105 + 4) = "-[NRLinkDirector startDirector]";
    sub_1000AA13C();
    _NRLogAbortWithPack();
  }
  __break(1u);
LABEL_139:
  dispatch_once(&qword_1001F4D28, &stru_1001C8658);
LABEL_122:
  id v93 = (id)qword_1001F4D20;
  id v94 = sub_100134CFC((uint64_t)v93, @"NRLinkDirector-Drop", v92);

  self;
  if (v84[421] != -1) {
    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
  }
  id v95 = (id)qword_1001F4D20;
  long long v96 = (id *)v95;
  if (v95)
  {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v95 + 1));
    if (([v96[2] apply] & 1) == 0) {
      sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v97, v98, v99, v118);
    }
  }

  sub_10012F648(0, 1002, 0, 0);
}

void sub_1000ACD34(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 328));
  _Unwind_Resume(a1);
}

void sub_1000ACD70(uint64_t a1)
{
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  if (*(unsigned char *)(a1 + 12))
  {
    *(unsigned char *)(a1 + 12) = 0;
    sub_10012F648(0, 1003, 0, 0);
    *(unsigned char *)(a1 + 10) = 0;
    [*(id *)(a1 + 40) cancel];
    uint64_t v3 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = 0;

    int v4 = *(void **)(a1 + 56);
    if (v4)
    {
      [v4 cancel];
      id v5 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = 0;
    }
    id v6 = *(void **)(a1 + 48);
    if (v6)
    {
      [v6 cancel];
      id v7 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v8 = *(void **)(a1 + 184);
    if (v8)
    {
      [v8 cancel];
      id v9 = *(void **)(a1 + 184);
      *(void *)(a1 + 184) = 0;
    }
    uint64_t v10 = *(void *)(a1 + 192);
    if (v10)
    {
      if (!*(unsigned char *)(v10 + 9))
      {
        *(unsigned char *)(v10 + 9) = 1;
        id v11 = *(void **)(v10 + 48);
        if (v11)
        {
          [v11 invalidate];
          id v12 = *(void **)(v10 + 48);
          *(void *)(v10 + 48) = 0;
        }
        sub_1000153B8(v10);
        uint64_t v10 = *(void *)(a1 + 192);
      }
      *(void *)(a1 + 192) = 0;
    }
    id v13 = *(void **)(a1 + 64);
    if (v13)
    {
      [v13 cancel];
      unsigned int v14 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = 0;
    }
    sub_1000AD198(a1);
    sub_1000AD388(a1);
    uint64_t v15 = *(void *)(a1 + 208);
    if (v15)
    {
      sub_10015D694(v15);
      id v16 = *(void **)(a1 + 208);
      *(void *)(a1 + 208) = 0;
    }
    uint64_t v17 = *(void *)(a1 + 96);
    if (v17)
    {
      sub_10006747C(v17);
      id v18 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = 0;
    }
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id v19 = *(id *)(a1 + 216);
    id v20 = [v19 countByEnumeratingWithState:&v36 objects:v40 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v37;
      do
      {
        for (uint64_t i = 0; i != v21; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v37 != v22) {
            objc_enumerationMutation(v19);
          }
          id v24 = [*(id *)(a1 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v36 + 1) + 8 * i)];
          sub_1000F9DD4((uint64_t)v24);
        }
        id v21 = [v19 countByEnumeratingWithState:&v36 objects:v40 count:16];
      }
      while (v21);
    }

    [*(id *)(a1 + 216) removeAllObjects];
    sub_1000AD478(a1);
    sub_1000AD6B8(a1);
    objc_super v25 = *(NSObject **)(a1 + 280);
    if (v25)
    {
      dispatch_source_cancel(v25);
      id v26 = *(void **)(a1 + 280);
      *(void *)(a1 + 280) = 0;
    }
    id v27 = +[NSDistributedNotificationCenter defaultCenter];
    [v27 removeObserver:*(void *)(a1 + 288) name:@"NanoSettingsPerpetualMeadowStandaloneWifiPreferencesChangedNotification" object:0];

    id v28 = +[NSDistributedNotificationCenter defaultCenter];
    [v28 removeObserver:*(void *)(a1 + 296) name:@"NanoSettingsPerpetualMeadowStandaloneCellularPreferencesChangedNotification" object:0];

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v29 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v29, @"NRLinkDirector-Drop");

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v30 = (id)qword_1001F4D20;
    id v31 = (id *)v30;
    if (v30)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v30 + 1));
      if (([v31[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v32, v33, v34, v35);
      }
    }
  }
  else
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
  }
}

uint64_t sub_1000AD198(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(NSObject **)(result + 168);
    if (v2)
    {
      dispatch_source_cancel(v2);
      uint64_t v3 = *(void **)(v1 + 168);
      *(void *)(v1 + 168) = 0;
    }
    uint64_t result = *(void *)(v1 + 144);
    if (result)
    {
      nw_shoes_server_cancel();
      int v4 = *(void **)(v1 + 144);
      *(void *)(v1 + 144) = 0;

      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        uint64_t v10 = "";
        _NRLogWithArgs();
      }
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v5 = (id)qword_1001F4D20;
      sub_10013502C((uint64_t)v5, @"NRLinkDirector-skip-privacy-proxy");

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v6 = (dispatch_queue_t *)(id)qword_1001F4D20;
      if (v6)
      {
        id v11 = v6;
        dispatch_assert_queue_V2(v6[1]);
        if (([v11[2] apply] & 1) == 0) {
          sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v7, v8, v9, (uint64_t)v10);
        }
      }
      return _objc_release_x1();
    }
  }
  return result;
}

void sub_1000AD388(uint64_t a1)
{
  if (*(void *)(a1 + 152))
  {
    nw_masque_server_cancel();
    uint64_t v2 = *(void **)(a1 + 152);
    *(void *)(a1 + 152) = 0;

    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
  }
  uint64_t v3 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = 0;
}

uint64_t sub_1000AD478(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = *(id *)(a1 + 216);
  id v22 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
  uint64_t v3 = 0;
  if (v22)
  {
    uint64_t v21 = *(void *)v24;
    do
    {
      for (uint64_t i = 0; i != v22; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = [*(id *)(a1 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v23 + 1) + 8 * i)];
        id v6 = (id *)v5;
        if (v5)
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v5 + 104));
          id v7 = [v6[14] count];
          int v8 = (int)v7;
          sub_1000D85E8((uint64_t)v6, 1013, @"%u available", v9, v10, v11, v12, v13, (uint64_t)v7);
          long long v29 = 0u;
          long long v30 = 0u;
          long long v27 = 0u;
          long long v28 = 0u;
          id v14 = v6[14];
          id v15 = [v14 countByEnumeratingWithState:&v27 objects:v32 count:16];
          if (v15)
          {
            id v16 = v15;
            uint64_t v17 = *(void *)v28;
            do
            {
              for (j = 0; j != v16; j = (char *)j + 1)
              {
                if (*(void *)v28 != v17) {
                  objc_enumerationMutation(v14);
                }
                [*(id *)(*((void *)&v27 + 1) + 8 * (void)j) cancelWithReason:@"Cancelling all links"];
              }
              id v16 = [v14 countByEnumeratingWithState:&v27 objects:v32 count:16];
            }
            while (v16);
          }

          sub_1000EAB98((uint64_t)v6, 0);
          [v6[14] removeAllObjects];
        }
        else
        {
          int v8 = 0;
        }
        uint64_t v3 = (v8 + v3);
      }
      id v22 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v22);
  }

  return v3;
}

uint64_t sub_1000AD6B8(uint64_t result)
{
  if (*(_DWORD *)(result + 24) != -1)
  {
    uint64_t v1 = result;
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
    uint64_t result = notify_cancel(*(_DWORD *)(v1 + 24));
    *(_DWORD *)(v1 + 24) = -1;
  }
  return result;
}

void sub_1000AD794(char *a1)
{
  if (a1)
  {
    if (a1[12])
    {
      id v2 = sub_100145898();
      id val = a1;
      uint64_t v3 = (void *)*((void *)a1 + 24);
      if (v3)
      {
        id v359 = sub_1000154E0(*((void *)a1 + 24));
        if ([v359 count])
        {
          int v4 = sub_10015BD9C();
          objc_super block = _NSConcreteStackBlock;
          uint64_t v425 = 3221225472;
          id v426 = sub_100017488;
          id v427 = &unk_1001C8BA8;
          id v428 = v3;
          dispatch_async(v4, &block);
        }
        if ([v359 count])
        {
          id v5 = [objc_alloc((Class)NSMutableArray) initWithArray:v2];
          [v5 removeObjectsInArray:v359];

          id v2 = v5;
        }
      }
      else
      {
        id v359 = 0;
      }
      _NRUpdateNRUUIDsEligibleForLogObjects();
      *(_OWORD *)id location = 0u;
      long long v413 = 0u;
      long long v414 = 0u;
      long long v415 = 0u;
      id obj = (__CFString *)v2;
      id v6 = [(__CFString *)obj countByEnumeratingWithState:location objects:&block count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v413;
LABEL_17:
        uint64_t v8 = 0;
        while (1)
        {
          if (*(void *)v413 != v7) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *((void **)location[1] + v8));
          uint64_t v10 = v9;
          if (!v9 || !*((unsigned char *)v9 + 9) || !*((unsigned char *)v9 + 8)) {
            goto LABEL_27;
          }
          id v11 = v9[16];
          if ([v11 proxyCapability] == (id)2)
          {
          }
          else
          {
            id v12 = v10[16];
            BOOL v13 = [v12 proxyCapability] == (id)1;

            if (!v13) {
              goto LABEL_27;
            }
          }
          id v14 = v10[16];
          unsigned int v15 = [v14 usesTLS];

          if (v15)
          {
            id v16 = v10[16];
            id v17 = [v16 proxyCapability];

            if (*((void *)val + 42)) {
              goto LABEL_92;
            }
            v410[0] = kSecAttrKeyType;
            v410[1] = kSecAttrKeySizeInBits;
            v411[0] = kSecAttrKeyTypeECSECPrimeRandom;
            v411[1] = &off_1001D49C0;
            CFDictionaryRef v18 = +[NSDictionary dictionaryWithObjects:v411 forKeys:v410 count:2];
            RandomKey = SecKeyCreateRandomKey(v18, 0);
            SecKeyRef v20 = SecKeyCopyPublicKey(RandomKey);
            SecKeyRef v21 = v20;
            if (RandomKey)
            {
              if (v20)
              {
                SelfSignedCertificate = (void *)SecGenerateSelfSignedCertificate();
                if (SelfSignedCertificate)
                {
                  long long v23 = (__SecIdentity *)SecIdentityCreate();
                  if (v23)
                  {
                    from[0] = SelfSignedCertificate;
                    sec_identity_t v24 = sec_identity_create_with_certificates(v23, (CFArrayRef)+[NSArray arrayWithObjects:from count:1]);
                    CFRelease(v23);
                    CFRelease(SelfSignedCertificate);
                    goto LABEL_50;
                  }
                  if (qword_1001F4C20 != -1) {
                    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4C20 != -1) {
                      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
                    }
                    uint64_t v356 = 1434;
                    id v354 = "";
                    int v355 = "NRCreateLocalIdentity";
                    _NRLogWithArgs();
                  }
                  CFRelease(SelfSignedCertificate);
                }
                else
                {
                  if (qword_1001F4C20 != -1) {
                    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4C20 != -1) {
                      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
                    }
                    uint64_t v356 = 1428;
                    id v354 = "";
                    int v355 = "NRCreateLocalIdentity";
                    _NRLogWithArgs();
                  }
                }
LABEL_49:
                sec_identity_t v24 = 0;
LABEL_50:
                long long v25 = (void *)*((void *)val + 42);
                *((void *)val + 42) = v24;

                long long v26 = *((void *)val + 42);
                if (v26)
                {
                  SecIdentityRef v27 = sec_identity_copy_ref(v26);
                  if (v27)
                  {
                    if (v17 != (id)2) {
                      goto LABEL_401;
                    }
                    self;
                    if (qword_1001F4DE0 != -1) {
                      dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
                    }
                    long long v28 = (dispatch_queue_t *)(id)qword_1001F4DD8;
                    long long v29 = v28;
                    if (v28)
                    {
                      dispatch_assert_queue_V2(v28[2]);
                      if (qword_1001F4DF0 != -1) {
                        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
                      }
                      if (_NRLogIsLevelEnabled())
                      {
                        if (qword_1001F4DF0 != -1) {
                          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
                        }
                        uint64_t v356 = 368;
                        Logid String = @"local-identity";
                        id v354 = "";
                        int v355 = "-[NRDKeyManager saveEphemeralLocalIdentityToKeychain:persistentReference:]";
                        _NRLogWithArgs();
                      }
                      *(void *)&long long v416 = kSecClass;
                      *((void *)&v416 + 1) = kSecAttrLabel;
                      from[0] = (id)kSecClassIdentity;
                      from[1] = @"local-identity";
                      unsigned long long v417 = __PAIR128__((unint64_t)kSecAttrAccessible, (unint64_t)kSecAttrAccessGroup);
                      *(void *)&long long v421 = @"com.apple.terminusd.local-identity";
                      *((void *)&v421 + 1) = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
                      *(void *)&long long v418 = kSecValueRef;
                      *((void *)&v418 + 1) = kSecReturnPersistentRef;
                      *(void *)&long long v422 = v27;
                      *((void *)&v422 + 1) = &__kCFBooleanTrue;
                      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", from, &v416, 6, v354, v355, v356, LogString);
                      CFDictionaryRef v30 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
                      CFTypeRef result = 0;
                      id v31 = (const char *)SecItemAdd(v30, &result);
                      if (v31 == -25299 || !result)
                      {
                        sub_100159CDC((uint64_t)v29);
                        CFTypeRef result = 0;
                        id v31 = (const char *)SecItemAdd(v30, &result);
                      }
                      if (v31)
                      {
                        if (v31 == -25308)
                        {
                          if (qword_1001F4DF0 != -1) {
                            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
                          }
                          if (_NRLogIsLevelEnabled())
                          {
                            if (qword_1001F4DF0 != -1) {
                              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
                            }
                            uint64_t v356 = 403;
                            id v354 = "";
                            int v355 = "-[NRDKeyManager saveEphemeralLocalIdentityToKeychain:persistentReference:]";
                            _NRLogWithArgs();
                          }
                        }
                        else
                        {
                          if (qword_1001F4DF0 != -1) {
                            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
                          }
                          if (_NRLogIsLevelEnabled())
                          {
                            if (qword_1001F4DF0 != -1) {
                              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
                            }
                            id v354 = v31;
                            _NRLogWithArgs();
                          }
                        }
                      }
                      else
                      {
                        if (qword_1001F4DF0 != -1) {
                          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
                        }
                        if (_NRLogIsLevelEnabled())
                        {
                          if (qword_1001F4DF0 != -1) {
                            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
                          }
                          uint64_t v356 = 394;
                          Logid String = (__CFString *)result;
                          id v354 = "";
                          int v355 = "-[NRDKeyManager saveEphemeralLocalIdentityToKeychain:persistentReference:]";
                          _NRLogWithArgs();
                        }
                        if (result)
                        {
                          CFTypeID v320 = CFGetTypeID(result);
                          if (v320 == CFDataGetTypeID())
                          {
                            uint64_t v321 = (void *)*((void *)val + 15);
                            *((void *)val + 15) = result;
                          }
                        }
                      }
                    }
                    if (*((void *)val + 15))
                    {
                      if (qword_1001F4A48 != -1) {
                        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
                      }
                      if (_NRLogIsLevelEnabled())
                      {
                        id v322 = sub_1000AA13C();
                        uint64_t v356 = 2006;
                        Logid String = (__CFString *)*((void *)val + 15);
                        id v354 = "";
                        int v355 = "-[NRLinkDirector generateLocalIdentityIfNeeded:]";
                        _NRLogWithArgs();
                      }
LABEL_401:
                      uint64_t v323 = SecKeyCopySubjectPublicKeyInfo();
                      uint64_t v324 = (void *)*((void *)val + 13);
                      *((void *)val + 13) = v323;

                      if ([*((id *)val + 13) length])
                      {
                        notify_post("com.apple.networkrelay.referencesChanged");
                        if (qword_1001F4A48 != -1) {
                          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
                        }
                        if (_NRLogIsLevelEnabled())
                        {
                          if (qword_1001F4A48 != -1) {
                            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
                          }
                          uint64_t v325 = (void *)qword_1001F4A40;
                          id v326 = *((id *)val + 13);
                          id v327 = v325;
                          uint64_t v356 = 2027;
                          Logid String = (__CFString *)_NRKeyCreateLogString();
                          id v354 = "";
                          int v355 = "-[NRLinkDirector generateLocalIdentityIfNeeded:]";
                          _NRLogWithArgs();
                        }
                        goto LABEL_85;
                      }
                      if (qword_1001F4A48 != -1) {
                        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
                      }
                      if (_NRLogIsLevelEnabled())
                      {
                        id v328 = sub_1000AA13C();
                        _NRLogWithArgs();
                      }
                    }
                    else
                    {
                      id v329 = sub_1000AA13C();
                      int IsLevelEnabled = _NRLogIsLevelEnabled();

                      if (IsLevelEnabled)
                      {
                        id v331 = sub_1000AA13C();
                        uint64_t v356 = 2008;
                        Logid String = (__CFString *)*((void *)val + 15);
                        id v354 = "";
                        int v355 = "-[NRLinkDirector generateLocalIdentityIfNeeded:]";
                        _NRLogWithArgs();
                      }
                    }
LABEL_84:
                    notify_post("com.apple.networkrelay.referencesChanged");
                    sub_1000B6BF8((uint64_t)val);
LABEL_85:
                    if (v21) {
                      CFRelease(v21);
                    }
                    if (RandomKey) {
                      CFRelease(RandomKey);
                    }
                    if (v27) {
                      CFRelease(v27);
                    }

                    goto LABEL_92;
                  }
                  if (qword_1001F4A48 != -1) {
                    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4A48 == -1) {
                      goto LABEL_82;
                    }
LABEL_433:
                    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
LABEL_82:
                    _NRLogWithArgs();
                  }
                }
                else
                {
                  if (qword_1001F4A48 != -1) {
                    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4A48 != -1) {
                      goto LABEL_433;
                    }
                    goto LABEL_82;
                  }
                }
                SecIdentityRef v27 = 0;
                goto LABEL_84;
              }
              id v351 = sub_1001135C4();
              int v352 = _NRLogIsLevelEnabled();

              if (!v352) {
                goto LABEL_49;
              }
            }
            else
            {
              id v348 = sub_1001135C4();
              int v349 = _NRLogIsLevelEnabled();

              if (!v349) {
                goto LABEL_49;
              }
            }
            id v350 = sub_1001135C4();
            id v354 = "NRCreateLocalIdentity";
            _NRLogWithArgs();

            goto LABEL_49;
          }
LABEL_27:

          if (v6 == (id)++v8)
          {
            id v6 = [(__CFString *)obj countByEnumeratingWithState:location objects:&block count:16];
            if (v6) {
              goto LABEL_17;
            }
            break;
          }
        }
      }

      sub_1000B6BF8((uint64_t)val);
LABEL_92:

      id v32 = val;
      uint64_t v33 = *((void *)val + 5);
      if (v33) {
        sub_1000331BC(v33);
      }
      uint64_t v34 = (id *)*((void *)val + 6);
      if (v34) {
        sub_100158534(v34);
      }
      uint64_t v35 = *((void *)val + 7);
      if (v35) {
        sub_10010674C(v35);
      }
      uint64_t v36 = *((void *)val + 8);
      if (v36)
      {
        long long v37 = *(id *)(v36 + 24);
        dispatch_assert_queue_V2(v37);

        uint64_t v38 = v36;
        id v39 = [*(id *)(v36 + 40) copy];
        *(_OWORD *)long long from = 0u;
        long long v421 = 0u;
        long long v422 = 0u;
        long long v423 = 0u;
        id v40 = v39;
        id v41 = (char *)[v40 countByEnumeratingWithState:from objects:&block count:16];
        if (v41)
        {
          uint64_t v42 = *(void *)v421;
          do
          {
            for (uint64_t i = 0; i != v41; ++i)
            {
              if (*(void *)v421 != v42) {
                objc_enumerationMutation(v40);
              }
              id v44 = (void *)*((void *)from[1] + i);
              uint64_t v45 = [v44 nrUUID:v354 v355 v356 LogString];
              uint32_t v46 = sub_10013DC5C((uint64_t)NRDLocalDevice, v45);

              if (!v46 || !v46[9]) {
                [v44 cancelWithReason:@"Device has been disabled %@", v46];
              }
            }
            id v41 = (char *)[v40 countByEnumeratingWithState:from objects:&block count:16];
          }
          while (v41);
        }

        id v47 = [*(id *)(v38 + 88) allKeys];
        long long v419 = 0u;
        long long v418 = 0u;
        unsigned long long v417 = 0u;
        long long v416 = 0u;
        id v48 = v47;
        id v49 = [v48 countByEnumeratingWithState:&v416 objects:location count:16];
        if (v49)
        {
          uint64_t v50 = *(void *)v417;
          do
          {
            for (j = 0; j != v49; j = (char *)j + 1)
            {
              if (*(void *)v417 != v50) {
                objc_enumerationMutation(v48);
              }
              uint64_t v52 = *(void **)(*((void *)&v416 + 1) + 8 * (void)j);
              id v53 = sub_10013DC5C((uint64_t)NRDLocalDevice, v52);
              id v54 = v53;
              if (!v53 || !v53[9]) {
                [*(id *)(v38 + 88) setObject:0 forKeyedSubscript:v52];
              }
            }
            id v49 = [v48 countByEnumeratingWithState:&v416 objects:location count:16];
          }
          while (v49);
        }

        if (qword_1001F4A78 != -1) {
          dispatch_once(&qword_1001F4A78, &stru_1001C7400);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4A78 != -1) {
            dispatch_once(&qword_1001F4A78, &stru_1001C7400);
          }
          uint64_t v356 = 728;
          id v354 = "";
          int v355 = "-[NRLinkManagerWired checkEnabledDevices]";
          _NRLogWithArgs();
        }
        sub_1000D41E0(v38);

        id v32 = val;
      }
      if (*((unsigned char *)v32 + 16))
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          uint64_t v356 = 822;
          Logid String = obj;
          id v354 = "";
          int v355 = "-[NRLinkDirector checkEnabledDevices]";
          _NRLogWithArgs();
        }
        uint64_t v55 = (__CFString *)objc_alloc_init((Class)NSArray);

        id obj = v55;
        id v32 = val;
      }
      id v56 = objc_alloc_init((Class)NSMutableArray);
      long long v399 = 0u;
      long long v400 = 0u;
      long long v401 = 0u;
      long long v402 = 0u;
      id v57 = *((id *)v32 + 27);
      id v58 = [v57 countByEnumeratingWithState:&v399 objects:v409 count:16];
      if (v58)
      {
        uint64_t v59 = *(void *)v400;
        do
        {
          for (k = 0; k != v58; k = (char *)k + 1)
          {
            if (*(void *)v400 != v59) {
              objc_enumerationMutation(v57);
            }
            uint64_t v61 = *(void *)(*((void *)&v399 + 1) + 8 * (void)k);
            if ((-[__CFString containsObject:](obj, "containsObject:", v61, v354, v355, v356, LogString) & 1) == 0) {
              [v56 addObject:v61];
            }
          }
          id v58 = [v57 countByEnumeratingWithState:&v399 objects:v409 count:16];
        }
        while (v58);
      }

      long long v397 = 0u;
      long long v398 = 0u;
      long long v395 = 0u;
      long long v396 = 0u;
      id v374 = v56;
      id v62 = [v374 countByEnumeratingWithState:&v395 objects:v408 count:16];
      if (v62)
      {
        uint64_t v63 = *(void *)v396;
        do
        {
          for (m = 0; m != v62; m = (char *)m + 1)
          {
            if (*(void *)v396 != v63) {
              objc_enumerationMutation(v374);
            }
            uint64_t v65 = *(void *)(*((void *)&v395 + 1) + 8 * (void)m);
            id v66 = [[*((id *)val + 27) objectForKeyedSubscript:v65, v354];
            sub_1000F9DD4((uint64_t)v66);

            [*((id *)val + 27) setObject:0 forKeyedSubscript:v65];
          }
          id v62 = [v374 countByEnumeratingWithState:&v395 objects:v408 count:16];
        }
        while (v62);
      }

      if ([(__CFString *)obj count] && qword_1001F4A28 != -1) {
        dispatch_once(&qword_1001F4A28, &stru_1001C6F60);
      }
      long long v393 = 0u;
      long long v394 = 0u;
      long long v391 = 0u;
      long long v392 = 0u;
      id v369 = obj;
      id v372 = (char *)[(__CFString *)v369 countByEnumeratingWithState:&v391 objects:v407 count:16];
      if (v372)
      {
        uint64_t v370 = *(void *)v392;
        do
        {
          id v67 = 0;
          do
          {
            if (*(void *)v392 != v370)
            {
              id v68 = v67;
              objc_enumerationMutation(v369);
              id v67 = v68;
            }
            obja = v67;
            uint64_t v69 = *(void **)(*((void *)&v391 + 1) + 8 * (void)v67);
            id v70 = [*((id *)val + 27) objectForKeyedSubscript:v69, v354];
            BOOL v71 = v70 == 0;

            if (!v71)
            {
              uint64_t v72 = [*((id *)val + 27) objectForKeyedSubscript:v69];
              sub_1000DFD74(v72);
              goto LABEL_247;
            }
            uint64_t v72 = (uint64_t)sub_1000F7890((char *)[NRDDeviceConductor alloc], v69, *((void **)val + 17));
            id v73 = [*((id *)val + 28) copy];
            long long v389 = 0u;
            long long v390 = 0u;
            long long v387 = 0u;
            long long v388 = 0u;
            id v74 = v73;
            id v75 = [v74 countByEnumeratingWithState:&v387 objects:v406 count:16];
            if (!v75) {
              goto LABEL_173;
            }
            uint64_t v76 = *(void *)v388;
            do
            {
              for (n = 0; n != v75; n = (char *)n + 1)
              {
                if (*(void *)v388 != v76) {
                  objc_enumerationMutation(v74);
                }
                uint64_t v78 = *(void *)(*((void *)&v387 + 1) + 8 * (void)n);
                if (v78)
                {
                  if (![*(id *)(v78 + 8) isEqual:v69]) {
                    continue;
                  }
                  uint64_t v79 = *(void **)(v78 + 16);
                  goto LABEL_169;
                }
                if ([0 isEqual:v69])
                {
                  uint64_t v79 = 0;
LABEL_169:
                  sub_1000FAA3C(v72, v79);
                  [*((id *)val + 28) removeObject:v78];
                  uint64_t v80 = [(id)v78 description];
                  sub_10012F648(0, 1016, 0, v80);

                  continue;
                }
              }
              id v75 = [v74 countByEnumeratingWithState:&v387 objects:v406 count:16];
            }
            while (v75);
LABEL_173:

            id v81 = [*((id *)val + 29) copy];
            long long v385 = 0u;
            long long v386 = 0u;
            long long v383 = 0u;
            long long v384 = 0u;
            id v82 = v81;
            id v83 = [v82 countByEnumeratingWithState:&v383 objects:v405 count:16];
            if (v83)
            {
              uint64_t v84 = *(void *)v384;
              do
              {
                for (iuint64_t i = 0; ii != v83; iuint64_t i = (char *)ii + 1)
                {
                  if (*(void *)v384 != v84) {
                    objc_enumerationMutation(v82);
                  }
                  id v86 = *(void **)(*((void *)&v383 + 1) + 8 * (void)ii);
                  if (v86) {
                    long long v87 = (void *)v86[1];
                  }
                  else {
                    long long v87 = 0;
                  }
                  if ([v87 isEqual:v69])
                  {
                    [*((id *)val + 29) removeObject:v86];
                    long long v88 = [v86 description];
                    sub_10012F648(0, 1023, 0, v88);

                    if (v86) {
                      id v89 = (_xpc_connection_s *)v86[2];
                    }
                    else {
                      id v89 = 0;
                    }
                    xpc_connection_cancel(v89);
                  }
                }
                id v83 = [v82 countByEnumeratingWithState:&v383 objects:v405 count:16];
              }
              while (v83);
            }

            if (!v72) {
              goto LABEL_246;
            }
            dispatch_assert_queue_V2(*(dispatch_queue_t *)(v72 + 104));
            if (*(unsigned char *)(v72 + 14))
            {
              long long v90 = (void *)_NRCopyLogObjectForNRUUID();
              int v91 = _NRLogIsLevelEnabled();

              if (v91)
              {
                long long v92 = (void *)_NRCopyLogObjectForNRUUID();
                uint64_t v356 = 533;
                id v354 = "";
                int v355 = "-[NRDDeviceConductor startConductor]";
                _NRLogWithArgs();
                goto LABEL_245;
              }
              goto LABEL_246;
            }
            *(unsigned char *)(v72 + 14) = 1;
            id v93 = [(id)v72 description];
            sub_10012F648(*(void **)(v72 + 96), 1501, 0, v93);

            sub_1000F824C(v72);
            sub_1000ED3DC(v72);
            id v94 = [NRDevicePreferencesManager alloc];
            id v95 = *(void **)(v72 + 104);
            id v96 = *(id *)(v72 + 96);
            id v97 = v95;
            uint64_t v98 = sub_100120CF4((id *)&v94->super.isa, v97, v96);
            uint64_t v99 = *(void **)(v72 + 184);
            *(void *)(v72 + 184) = v98;

            sub_1000F6E14((unsigned char *)v72);
            long long v92 = sub_1000A8708(*(void **)(v72 + 96), @"WiFiEndpointAddressData");
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              long long v100 = +[NWAddressEndpoint endpointWithAddress:](NWAddressEndpoint, "endpointWithAddress:", [v92 bytes]);
              long long v101 = v100;
              if (*(unsigned char *)(v72 + 44))
              {
                objc_storeStrong((id *)(v72 + 136), v100);
                id v102 = (void *)_NRCopyLogObjectForNRUUID();
                int v103 = _NRLogIsLevelEnabled();

                if (v103)
                {
                  id v104 = *(id *)(v72 + 96);
                  uint64_t v105 = (void *)_NRCopyLogObjectForNRUUID();
                  uint64_t v356 = 554;
                  Logid String = *(__CFString **)(v72 + 136);
                  id v354 = "";
                  int v355 = "-[NRDDeviceConductor startConductor]";
                  _NRLogWithArgs();
                }
              }
              else
              {
                id v106 = *(NSObject **)(v72 + 104);
                objc_super block = _NSConcreteStackBlock;
                uint64_t v425 = 3221225472;
                id v426 = sub_1000F8A48;
                id v427 = &unk_1001C8840;
                id v428 = (id)v72;
                id v429 = v100;
                dispatch_async(v106, &block);
              }
            }
            id v107 = *(id *)(v72 + 96);
            sub_1000A8708(v107, @"WiFiSignature");
            id v367 = (id)objc_claimAutoreleasedReturnValue();

            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              if (*(unsigned char *)(v72 + 44))
              {
                objc_storeStrong((id *)(v72 + 144), v367);
              }
              else
              {
                id v108 = *(NSObject **)(v72 + 104);
                location[0] = _NSConcreteStackBlock;
                location[1] = (id)3221225472;
                *(void *)&long long v413 = sub_1000F8B20;
                *((void *)&v413 + 1) = &unk_1001C8840;
                *(void *)&long long v414 = v72;
                *((void *)&v414 + 1) = v367;
                dispatch_async(v108, location);
              }
            }
            if (_NRIsAppleInternal())
            {
              uint64_t v109 = sub_1000A8708(*(void **)(v72 + 96), @"DisableRangeExtension");
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0 && [v109 BOOLValue]) {
                *(unsigned char *)(v72 + 23) = 1;
              }
              id v110 = sub_1000A8708(*(void **)(v72 + 96), @"DisablePreferWiFi");
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0 && [v110 BOOLValue]) {
                *(unsigned char *)(v72 + 24) = 1;
              }
            }
            sub_1000F4E58(v72);
            if (*(unsigned char *)(v72 + 55))
            {
              unsigned int v111 = [NRQuickRelayAgent alloc];
              id v112 = *(void **)(v72 + 96);
              id v113 = *(id *)(v72 + 104);
              id v114 = v112;
              id v115 = sub_100033F00((id *)&v111->super.isa, v114, v113, (void *)v72);
              int v116 = *(void **)(v72 + 192);
              *(void *)(v72 + 192) = v115;

              uint64_t v117 = *(void *)(v72 + 192);
              if (v117)
              {
                dispatch_assert_queue_V2(*(dispatch_queue_t *)(v117 + 48));
                if (!*(unsigned char *)(v117 + 14))
                {
                  id v118 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
                  uint64_t v119 = *(void **)(v117 + 56);
                  *(void *)(v117 + 56) = v118;

                  int v120 = *(void **)(v117 + 56);
                  if (v120)
                  {
                    if ([v120 registerNetworkAgent:v117])
                    {
                      BOOL v121 = [(id)v117 agentUUID];
                      uint64_t v122 = +[NEPolicyResult netAgentUUID:v121];

                      id v123 = *(id *)(v117 + 40);
                      long long v124 = (void *)nrCopyAccountIdentifierForNRUUID();
                      *((void *)&v362 + 1) = +[NEPolicyCondition accountIdentifier:v124];

                      long long v125 = +[NRQuickRelayAgent agentDomain];
                      unsigned int v126 = +[NRQuickRelayAgent agentType];
                      *(void *)&long long v362 = +[NEPolicyCondition requiredAgentDomain:v125 agentType:v126];

                      id v127 = objc_alloc((Class)NEPolicy);
                      long long v416 = v362;
                      int v128 = +[NEPolicyCondition allInterfaces];
                      *(void *)&unsigned long long v417 = v128;
                      int v129 = +[NSArray arrayWithObjects:&v416 count:3];
                      id v361 = [v127 initWithOrder:10 result:v122 conditions:v129];

                      self;
                      if (qword_1001F4D28 != -1) {
                        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                      }
                      id v130 = (id)qword_1001F4D20;
                      id v131 = sub_100134CFC((uint64_t)v130, *(void **)(v117 + 72), v361);

                      self;
                      if (qword_1001F4D28 != -1) {
                        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                      }
                      id v132 = (id)qword_1001F4D20;
                      unsigned int v133 = (id *)v132;
                      if (v132)
                      {
                        dispatch_assert_queue_V2(*((dispatch_queue_t *)v132 + 1));
                        if (([v133[2] apply] & 1) == 0) {
                          sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v134, v135, v136, (uint64_t)v354);
                        }
                      }

                      *(unsigned char *)(v117 + 14) = 1;
                      int v137 = (void *)v122;
                      __int16 v138 = *(void **)(v117 + 40);
                      id v139 = *(id *)(v117 + 80);
                      id v140 = v138;
                      unsigned int v141 = v137;
                      id v360 = v140;
                      unsigned __int16 v142 = [(id)v117 agentUUID];
                      int v143 = [v142 UUIDString];
                      sub_10012F648(v360, 17002, v139, v143);

                      sub_10003458C(v117);
LABEL_225:
                    }
                    else
                    {
                      int v144 = (void *)_NRCopyLogObjectForNRUUID();
                      int v145 = _NRLogIsLevelEnabled();

                      if (v145)
                      {
                        unsigned int v141 = (void *)_NRCopyLogObjectForNRUUID();
                        _NRLogWithArgs();
                        goto LABEL_225;
                      }
                    }
                  }
                }
              }
            }
            if (*(unsigned char *)(v72 + 54))
            {
              unsigned int v146 = [NRBTLinkPreferencesAgent alloc];
              id v147 = *(void **)(v72 + 96);
              id v148 = *(id *)(v72 + 104);
              id v149 = v147;
              uint64_t v150 = sub_10006BC80((id *)&v146->super.isa, v149, v148, (void *)v72);
              uint64_t v151 = *(void **)(v72 + 200);
              *(void *)(v72 + 200) = v150;

              uint64_t v152 = *(void *)(v72 + 200);
              if (v152)
              {
                if (!*(unsigned char *)(v152 + 14))
                {
                  id v153 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
                  id v154 = *(void **)(v152 + 56);
                  *(void *)(v152 + 56) = v153;

                  uint64_t v158 = *(void **)(v152 + 56);
                  if (!v158)
                  {
                    sub_100115AB0(@"NRBTLinkPreferenceAgent", @"RegisterAgent", @"Create Failed", 1, @"Failed to create BTLinkPreferences network agent", v155, v156, v157, (uint64_t)v354);
                    uint64_t v158 = *(void **)(v152 + 56);
                  }
                  if ((objc_msgSend(v158, "registerNetworkAgent:", v152, v354, v355, v356, LogString) & 1) == 0) {
                    sub_100115AB0(@"NRBTLinkPreferenceAgent", @"RegisterAgent", @"Register Failed", 1, @"Failed to register BTLinkPreferences network agent", v159, v160, v161, (uint64_t)v354);
                  }
                  [(id)v152 setActive:1];
                  [*(id *)(v152 + 56) updateNetworkAgent:v152];
                  uint64_t v162 = +[NEPolicyRouteRule routeRuleWithAction:5 forType:6];
                  size_t v163 = [(id)v152 agentUUID];
                  [v162 setNetworkAgentUUID:v163];

                  v411[0] = v162;
                  int v164 = +[NSArray arrayWithObjects:v411 count:1];
                  id v364 = +[NEPolicyResult routeRules:v164];

                  uint64_t v165 = +[NRBTLinkPreferencesAgent agentDomain];
                  int v166 = +[NRBTLinkPreferencesAgent agentType];
                  int v363 = +[NEPolicyCondition requiredAgentDomain:v165 agentType:v166];

                  id v167 = objc_alloc((Class)NEPolicy);
                  *(void *)&long long v416 = v363;
                  id v168 = +[NEPolicyCondition allInterfaces];
                  *((void *)&v416 + 1) = v168;
                  int v169 = +[NSArray arrayWithObjects:&v416 count:2];
                  id v170 = [v167 initWithOrder:10 result:v364 conditions:v169];

                  self;
                  if (qword_1001F4D28 != -1) {
                    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                  }
                  id v171 = (id)qword_1001F4D20;
                  id v172 = sub_100134CFC((uint64_t)v171, *(void **)(v152 + 72), v170);

                  self;
                  if (qword_1001F4D28 != -1) {
                    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                  }
                  id v173 = (id)qword_1001F4D20;
                  unsigned int v174 = (id *)v173;
                  if (v173)
                  {
                    dispatch_assert_queue_V2(*((dispatch_queue_t *)v173 + 1));
                    if (([v174[2] apply] & 1) == 0) {
                      sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v175, v176, v177, (uint64_t)v354);
                    }
                  }

                  *(unsigned char *)(v152 + 14) = 1;
                  id v178 = *(id *)(v152 + 40);
                  unsigned int v179 = [(id)v152 agentUUID];
                  id v180 = [v179 UUIDString];
                  sub_10012F648(v178, 18002, 0, v180);
                }
              }
            }
            sub_1000EE2E8((void **)v72);
            if (*(unsigned char *)(v72 + 45) && sub_100116230()) {
              sub_10012F648(*(void **)(v72 + 96), 1036, 0, 0);
            }
            id v181 = *(NSObject **)(v72 + 104);
            from[0] = _NSConcreteStackBlock;
            from[1] = (id)3221225472;
            *(void *)&long long v421 = sub_1000F8BF8;
            *((void *)&v421 + 1) = &unk_1001C8BA8;
            *(void *)&long long v422 = v72;
            dispatch_async(v181, from);

LABEL_245:
LABEL_246:
            [*((id *)val + 27) setObject:v72 forKeyedSubscript:v69];
            sub_1000B0EA8((uint64_t)val);

LABEL_247:
            id v67 = obja + 1;
          }
          while (obja + 1 != v372);
          id v372 = (char *)[(__CFString *)v369 countByEnumeratingWithState:&v391 objects:v407 count:16];
        }
        while (v372);
      }

      if (![(__CFString *)v369 count])
      {
        sub_1000B30FC();
        uint64_t v246 = (uint64_t)val;
        uint64_t v247 = *((void *)val + 26);
        if (v247)
        {
          sub_10015D694(v247);
          unint64_t v248 = (void *)*((void *)val + 26);
          *((void *)val + 26) = 0;

          uint64_t v246 = (uint64_t)val;
        }
        uint64_t v249 = *(void *)(v246 + 96);
        if (v249)
        {
          sub_10006747C(v249);
          int v250 = (void *)*((void *)val + 12);
          *((void *)val + 12) = 0;

          uint64_t v246 = (uint64_t)val;
        }
        sub_1000AD198(v246);
        sub_1000AD388((uint64_t)val);
        sub_1000AD6B8((uint64_t)val);
        uint64_t v251 = val;
        if (*((void *)val + 38))
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            int v252 = (__CFString *)*((void *)val + 38);
            id v253 = (id)qword_1001F4A40;
            uint64_t v356 = 2444;
            Logid String = v252;
            id v354 = "";
            int v355 = "-[NRLinkDirector removeVPNWatcher]";
            _NRLogWithArgs();
          }
          nw_path_evaluator_cancel();
          id v254 = (void *)*((void *)val + 38);
          *((void *)val + 38) = 0;

          uint64_t v251 = val;
        }
        int v255 = v251[7];
        if (v255 != -1)
        {
          notify_cancel(v255);
          uint64_t v251 = val;
          *((_DWORD *)val + 7) = -1;
        }
        int v256 = (void *)*((void *)v251 + 40);
        *((void *)v251 + 40) = 0;

        int v257 = (void *)*((void *)val + 41);
        *((void *)val + 41) = 0;

        *(_OWORD *)id location = 0u;
        long long v413 = 0u;
        long long v414 = 0u;
        long long v415 = 0u;
        id v258 = *((id *)val + 27);
        v259 = (char *)[v258 countByEnumeratingWithState:location objects:&block count:16];
        if (v259)
        {
          uint64_t v260 = *(void *)v413;
          do
          {
            for (jj = 0; jj != v259; ++jj)
            {
              if (*(void *)v413 != v260) {
                objc_enumerationMutation(v258);
              }
              [*((id *)val + 27) objectForKeyedSubscript:*((void *)location[1] + (void)jj), v354, v355, v356, LogString];
              uint64_t v262 = (unsigned char *)objc_claimAutoreleasedReturnValue();
              sub_1000FB3D0(v262, 0);
            }
            v259 = (char *)[v258 countByEnumeratingWithState:location objects:&block count:16];
          }
          while (v259);
        }

        self;
        if (qword_1001F4D28 != -1) {
          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        }
        id v263 = (id)qword_1001F4D20;
        sub_10013502C((uint64_t)v263, @"NRLinkDirector-AppVPN");

        self;
        if (qword_1001F4D28 != -1) {
          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        }
        id v264 = (id)qword_1001F4D20;
        long long v265 = (id *)v264;
        if (v264)
        {
          dispatch_assert_queue_V2(*((dispatch_queue_t *)v264 + 1));
          if (([v265[2] apply] & 1) == 0) {
            sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v266, v267, v268, (uint64_t)v354);
          }
        }

        int v269 = (void *)*((void *)val + 39);
        *((void *)val + 39) = 0;

        val[18] = 0;
        int v270 = *((void *)val + 35);
        if (v270)
        {
          dispatch_source_cancel(v270);
          id v271 = (void *)*((void *)val + 35);
          *((void *)val + 35) = 0;
        }
        self;
        if (qword_1001F47E8 != -1) {
          dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
        }
        long long v272 = (id)qword_1001F47E0;
        uint64_t v273 = (uint64_t)v272;
        if (v272)
        {
          long long v274 = (void *)v272[2];
          if (v274)
          {
            [v274 cancel];
            id v275 = *(void **)(v273 + 16);
            *(void *)(v273 + 16) = 0;

            self;
            if (qword_1001F4D28 != -1) {
              dispatch_once(&qword_1001F4D28, &stru_1001C8658);
            }
            id v276 = (id)qword_1001F4D20;
            sub_10013502C((uint64_t)v276, @"NRIKEv2Listener");

            self;
            if (qword_1001F4D28 != -1) {
              dispatch_once(&qword_1001F4D28, &stru_1001C8658);
            }
            id v277 = (id)qword_1001F4D20;
            int v278 = (id *)v277;
            if (v277)
            {
              dispatch_assert_queue_V2(*((dispatch_queue_t *)v277 + 1));
              if (([v278[2] apply] & 1) == 0) {
                sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v279, v280, v281, (uint64_t)v354);
              }
            }
          }
          long long v282 = *(void **)(v273 + 24);
          *(void *)(v273 + 24) = 0;

          int v283 = *(void **)(v273 + 32);
          *(void *)(v273 + 32) = 0;

          long long v415 = 0u;
          long long v414 = 0u;
          long long v413 = 0u;
          *(_OWORD *)id location = 0u;
          id v284 = *(id *)(v273 + 48);
          id v285 = (char *)[v284 countByEnumeratingWithState:location objects:&block count:16];
          if (v285)
          {
            uint64_t v286 = *(void *)v413;
            do
            {
              int v287 = 0;
              do
              {
                if (*(void *)v413 != v286) {
                  objc_enumerationMutation(v284);
                }
                uint64_t v288 = [*(id *)(v273 + 48) objectForKeyedSubscript:*((void *)location[1] + (void)v287), v354];
                id v289 = (void *)v288;
                if (v288) {
                  uint64_t v290 = *(void *)(v288 + 40);
                }
                else {
                  uint64_t v290 = 0;
                }
                (*(void (**)(uint64_t, void, void, void))(v290 + 16))(v290, 0, 0, 0);

                ++v287;
              }
              while (v285 != v287);
              int v291 = (char *)[v284 countByEnumeratingWithState:location objects:&block count:16];
              id v285 = v291;
            }
            while (v291);
          }

          long long v292 = *(void **)(v273 + 48);
          *(void *)(v273 + 48) = 0;

          sub_10001068C(v273);
        }

        goto LABEL_427;
      }
      sub_1000B11D0(val);
      sub_1000B1B24((uint64_t)val);
      long long v381 = 0u;
      long long v382 = 0u;
      long long v379 = 0u;
      long long v380 = 0u;
      id v182 = *((id *)val + 27);
      id v183 = [v182 countByEnumeratingWithState:&v379 objects:v404 count:16];
      if (v183)
      {
        char v184 = 0;
        char v185 = 0;
        uint64_t v186 = *(void *)v380;
        do
        {
          int v187 = 0;
          do
          {
            if (*(void *)v380 != v186) {
              objc_enumerationMutation(v182);
            }
            uint64_t v188 = *(void *)(*((void *)&v379 + 1) + 8 * (void)v187);
            [*((id *)val + 27) objectForKeyedSubscript:v188, v354];
            id v189 = (unsigned char *)objc_claimAutoreleasedReturnValue();
            if (v189) {
              BOOL v190 = v189[9] != 0;
            }
            else {
              BOOL v190 = 0;
            }

            id v191 = [*((id *)val + 27) objectForKeyedSubscript:v188];
            if (v191) {
              BOOL v192 = v191[8] != 0;
            }
            else {
              BOOL v192 = 0;
            }

            v184 |= v190;
            v185 |= v192;
            int v187 = (char *)v187 + 1;
          }
          while (v183 != v187);
          id v193 = [v182 countByEnumeratingWithState:&v379 objects:v404 count:16];
          id v183 = v193;
        }
        while (v193);

        if (v184)
        {
          int v194 = val;
          if (!*((void *)val + 26))
          {
            id v195 = [NRPhoneCallRelayAgent alloc];
            id v196 = *((id *)val + 17);
            id v197 = sub_10015D938((id *)&v195->super.isa, v196, val);
            uint64_t v198 = (void *)*((void *)val + 26);
            *((void *)val + 26) = v197;

            uint64_t v202 = *((void *)val + 26);
            if (v202)
            {
              if (!*(unsigned char *)(v202 + 14))
              {
                id v203 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
                id v204 = *(void **)(v202 + 48);
                *(void *)(v202 + 48) = v203;

                int v208 = *(void **)(v202 + 48);
                if (!v208)
                {
                  sub_100115AB0(@"NRPhoneCallRelayAgent", @"RegisterAgent", @"Create Failed", 1, @"Failed to create phone call relay network agent", v205, v206, v207, (uint64_t)v354);
                  int v208 = *(void **)(v202 + 48);
                }
                if (([v208 registerNetworkAgent:v202] & 1) == 0) {
                  sub_100115AB0(@"NRPhoneCallRelayAgent", @"RegisterAgent", @"Register Failed", 1, @"Failed to register phone call relay network agent", v209, v210, v211, (uint64_t)v354);
                }
                id v212 = [(id)v202 agentUUID];
                id objb = +[NEPolicyResult netAgentUUID:v212];

                id v213 = +[NRPhoneCallRelayAgent agentDomain];
                id v214 = +[NRPhoneCallRelayAgent agentType];
                int v366 = +[NEPolicyCondition requiredAgentDomain:v213 agentType:v214];

                id v215 = objc_alloc((Class)NEPolicy);
                from[0] = v366;
                uint64_t v216 = +[NEPolicyCondition allInterfaces];
                from[1] = v216;
                id v217 = +[NSArray arrayWithObjects:from count:2];
                id v218 = [v215 initWithOrder:10 result:objb conditions:v217];

                self;
                if (qword_1001F4D28 != -1) {
                  dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                }
                id v219 = (id)qword_1001F4D20;
                id v220 = sub_100134CFC((uint64_t)v219, *(void **)(v202 + 64), v218);

                int v373 = +[NEPolicyCondition trafficClassStart:800 end:900];
                id v371 = +[NEPolicyCondition ipProtocol:17];
                id v368 = +[NEPolicyCondition platformBinary];
                id v365 = +[NEPolicyCondition accountIdentifier:@"com.apple.networkrelay.companion_proxy"];
                id v221 = objc_alloc((Class)NEPolicy);
                objc_super block = v373;
                uint64_t v425 = (uint64_t)v371;
                id v426 = v368;
                id v427 = v365;
                id v222 = +[NEPolicyCondition allInterfaces];
                id v428 = v222;
                id v223 = +[NSArray arrayWithObjects:&block count:5];
                id v224 = [v221 initWithOrder:10 result:objb conditions:v223];

                self;
                if (qword_1001F4D28 != -1) {
                  dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                }
                id v225 = (id)qword_1001F4D20;
                id v226 = sub_100134CFC((uint64_t)v225, *(void **)(v202 + 64), v224);

                self;
                char v227 = sub_10015BD9C();
                dispatch_assert_queue_V2(v227);

                *(_OWORD *)id location = xmmword_10016C8A0;
                id v228 = [objc_alloc((Class)NSData) initWithBytes:location length:16];
                unsigned int v229 = sub_100141BFC((uint64_t)NRDLocalDevice, v228, @"0");

                uint64_t v230 = [v229 hostname];
                int v231 = +[NWAddressEndpoint endpointWithHostname:v230 port:@"62742"];

                unsigned __int8 v232 = +[NEPolicyCondition flowRemoteAddress:v231 prefix:64];
                id v233 = objc_alloc((Class)NEPolicy);
                location[0] = v373;
                location[1] = v371;
                *(void *)&long long v413 = v368;
                *((void *)&v413 + 1) = v232;
                unsigned __int8 v234 = +[NEPolicyCondition allInterfaces];
                *(void *)&long long v414 = v234;
                uint64_t v235 = +[NSArray arrayWithObjects:location count:5];
                id v236 = [v233 initWithOrder:10 result:objb conditions:v235];

                self;
                if (qword_1001F4D28 != -1) {
                  dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                }
                id v237 = (id)qword_1001F4D20;
                id v238 = sub_100134CFC((uint64_t)v237, *(void **)(v202 + 64), v236);

                self;
                if (qword_1001F4D28 != -1) {
                  dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                }
                id v239 = (id)qword_1001F4D20;
                unsigned __int8 v240 = (id *)v239;
                if (v239)
                {
                  dispatch_assert_queue_V2(*((dispatch_queue_t *)v239 + 1));
                  if (([v240[2] apply] & 1) == 0) {
                    sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v241, v242, v243, (uint64_t)v354);
                  }
                }

                *(unsigned char *)(v202 + 14) = 1;
                unsigned __int16 v244 = [(id)v202 agentUUID];
                uint64_t v245 = [v244 UUIDString];
                sub_10012F648(0, 16002, 0, v245);
              }
            }
            else
            {
              sub_100115AB0(@"NRLinkDirector", @"PhoneCallRelayAgent is Nil", 0, 1, @"[[NRPhoneCallRelayAgent alloc] initWithQueue: delegate:]", v199, v200, v201, (uint64_t)v354);
            }
LABEL_342:
            int v194 = val;
            if (v185) {
              goto LABEL_343;
            }
            goto LABEL_349;
          }
          goto LABEL_348;
        }
      }
      else
      {

        char v185 = 0;
      }
      int v194 = val;
      uint64_t v293 = *((void *)val + 26);
      if (v293)
      {
        sub_10015D694(v293);
        int v294 = (void *)*((void *)val + 26);
        *((void *)val + 26) = 0;

        goto LABEL_342;
      }
LABEL_348:
      if (v185)
      {
LABEL_343:
        if (!*((void *)v194 + 12))
        {
          uint64_t v295 = objc_alloc_init(NRPreferWiFiAgent);
          int v296 = (void *)*((void *)val + 12);
          *((void *)val + 12) = v295;

          int v297 = (void *)*((void *)val + 17);
          id v298 = (id *)*((id *)val + 12);
          id v299 = v297;
          uint64_t v300 = v299;
          if (!v298)
          {

            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            if (_NRLogIsLevelEnabled())
            {
              id v353 = sub_1000AA13C();
              _NRLogWithArgs();
            }
            goto LABEL_427;
          }
          if (!*((unsigned char *)v298 + 14))
          {
            objc_storeStrong(v298 + 5, v297);
            objc_initWeak(location, v298);
            dispatch_time_t v301 = dispatch_time(0x8000000000000000, 1000000000);
            id v302 = v298[5];
            objc_super block = _NSConcreteStackBlock;
            uint64_t v425 = 3221225472;
            id v426 = sub_100066CF4;
            id v427 = &unk_1001C7FF0;
            uint64_t v303 = v302;
            objc_copyWeak(&v428, location);
            dispatch_after(v301, v303, &block);

            objc_destroyWeak(&v428);
            objc_destroyWeak(location);
          }

          goto LABEL_351;
        }
        goto LABEL_352;
      }
LABEL_349:
      uint64_t v304 = *((void *)v194 + 12);
      if (v304)
      {
        sub_10006747C(v304);
        id v298 = (id *)*((void *)val + 12);
        *((void *)val + 12) = 0;
LABEL_351:

        int v194 = val;
      }
LABEL_352:
      int v306 = *((_DWORD *)v194 + 6);
      uint64_t v305 = (int *)(v194 + 24);
      if (v306 == -1)
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          _NRLogWithArgs();
        }
        objc_initWeak(from, val);
        uint64_t v307 = *((id *)val + 17);
        location[0] = _NSConcreteStackBlock;
        location[1] = (id)3221225472;
        *(void *)&long long v413 = sub_1000B4F44;
        *((void *)&v413 + 1) = &unk_1001C8A58;
        objc_copyWeak((id *)&v414, from);
        uint32_t v308 = notify_register_dispatch(kOSThermalNotificationPressureLevelName, v305, v307, location);

        if (v308 || *v305 == -1)
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          id v309 = (id)qword_1001F4A40;
          char v310 = _NRLogIsLevelEnabled();

          if (v310)
          {
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            id v311 = (id)qword_1001F4A40;
            _NRLogWithArgs();
          }
        }
        else
        {
          int v312 = *((void *)val + 17);
          objc_super block = _NSConcreteStackBlock;
          uint64_t v425 = 3221225472;
          id v426 = sub_1000B4FE0;
          id v427 = &unk_1001C8BA8;
          id v428 = val;
          dispatch_async(v312, &block);
        }
        objc_destroyWeak((id *)&v414);
        objc_destroyWeak(from);
      }
      sub_1000B26EC();
      if (sub_1000B2F60())
      {
        int v313 = sub_1000B2F60();
        uint64_t v314 = (uint64_t)val;
        if (v313 && *((_DWORD *)val + 7) == -1)
        {
          LODWORD(from[0]) = -1;
          objc_initWeak(location, val);
          uint64_t v315 = *((id *)val + 17);
          objc_super block = _NSConcreteStackBlock;
          uint64_t v425 = 3221225472;
          id v426 = sub_1000B48DC;
          id v427 = &unk_1001C8A58;
          objc_copyWeak(&v428, location);
          uint32_t v316 = notify_register_dispatch("com.apple.neconfigurationchanged", (int *)from, v315, &block);

          if (v316)
          {
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            id v317 = (id)qword_1001F4A40;
            int v318 = _NRLogIsLevelEnabled();

            if (v318)
            {
              if (qword_1001F4A48 != -1) {
                dispatch_once(&qword_1001F4A48, &stru_1001C7178);
              }
              id v319 = (id)qword_1001F4A40;
              _NRLogWithArgs();
            }
          }
          else
          {
            int v332 = (int)from[0];
            *((_DWORD *)val + 7) = from[0];
            sub_1000B4944(val, v332);
          }
          objc_destroyWeak(&v428);
          objc_destroyWeak(location);
          uint64_t v314 = (uint64_t)val;
        }
        if (*(void *)(v314 + 304))
        {
          sub_1000AA4D0(v314);
        }
        else
        {
          nw_parameters_t v333 = nw_parameters_create();
          nw_parameters_set_account_id();
          evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint();
          nw_path_evaluator_set_queue();
          objc_initWeak(from, val);
          location[0] = _NSConcreteStackBlock;
          location[1] = (id)3221225472;
          *(void *)&long long v413 = sub_1000B43FC;
          *((void *)&v413 + 1) = &unk_1001C70C0;
          objc_copyWeak((id *)&v414 + 1, from);
          id v335 = evaluator_for_endpoint;
          *(void *)&long long v414 = v335;
          id v336 = objc_retainBlock(location);
          id v337 = *((id *)val + 17);
          nw_path_evaluator_set_update_handler();

          nw_path_evaluator_start();
          objc_storeStrong((id *)val + 38, evaluator_for_endpoint);
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          id v338 = (id)qword_1001F4A40;
          char v339 = _NRLogIsLevelEnabled();

          if (v339)
          {
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            id v340 = (id)qword_1001F4A40;
            id v358 = *((id *)val + 38);
            _NRLogWithArgs();
          }
          id v341 = *((void *)val + 17);
          objc_super block = _NSConcreteStackBlock;
          uint64_t v425 = 3221225472;
          id v426 = sub_1000B4760;
          id v427 = &unk_1001C70E8;
          id v428 = val;
          id v429 = v335;
          id v430 = v336;
          int v342 = v336;
          id v343 = v335;
          dispatch_async(v341, &block);

          objc_destroyWeak((id *)&v414 + 1);
          objc_destroyWeak(from);
        }
      }
      if (!*((void *)val + 35))
      {
        id v344 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *((dispatch_queue_t *)val + 17));
        dispatch_source_set_timer(v344, 0, 0x29E8D60800uLL, 0x2FAF080uLL);
        objc_initWeak(location, val);
        objc_super block = _NSConcreteStackBlock;
        uint64_t v425 = 3221225472;
        id v426 = sub_1000B3988;
        id v427 = &unk_1001C88B8;
        objc_copyWeak(&v429, location);
        int v345 = v344;
        id v428 = v345;
        dispatch_source_set_event_handler(v345, &block);
        dispatch_resume(v345);
        id v346 = (void *)*((void *)val + 35);
        *((void *)val + 35) = v345;
        id v347 = v345;

        objc_destroyWeak(&v429);
        objc_destroyWeak(location);
      }
LABEL_427:

      return;
    }
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_1000B0E4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x550]);
  _Unwind_Resume(a1);
}

void sub_1000B0EA8(uint64_t a1)
{
  id v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  dispatch_group_t v22 = dispatch_group_create();
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id obj = *(id *)(a1 + 216);
  id v3 = [obj countByEnumeratingWithState:&v25 objects:v34 count:16];
  if (v3)
  {
    char v4 = 0;
    uint64_t v5 = *(void *)v26;
    SecKeyRef v20 = v30;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = [*(id *)(a1 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v25 + 1) + 8 * (void)v6), v20];
        uint64_t v8 = v22;
        if (v7 && _NRIsAppleInternal() && objc_opt_class() && objc_opt_class() && *(unsigned char *)(v7 + 48))
        {
          if (qword_1001F4A98 != -1) {
            dispatch_once(&qword_1001F4A98, &stru_1001C75F0);
          }
          uint64_t v9 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(v7 + 96));
          uint64_t v10 = v9;
          if (v9) {
            id v11 = (void *)*((void *)v9 + 5);
          }
          else {
            id v11 = 0;
          }
          id v12 = v11;
          BOOL v13 = [v10 description];
          id v14 = qword_1001F4A90;
          block[0] = _NSConcreteStackBlock;
          block[1] = (id)3221225472;
          v30[0] = sub_1000FB4F0;
          v30[1] = &unk_1001C8868;
          id v31 = v12;
          uint64_t v32 = v7;
          id v33 = v13;
          id v15 = v13;
          id v16 = v12;
          dispatch_group_async(v8, v14, block);

          char v4 = 1;
        }

        id v6 = (char *)v6 + 1;
      }
      while (v3 != v6);
      id v17 = [obj countByEnumeratingWithState:&v25 objects:v34 count:16];
      id v3 = v17;
    }
    while (v17);

    if (v4)
    {
      objc_initWeak(block, (id)a1);
      CFDictionaryRef v18 = *(void **)(a1 + 136);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_1000B6AD8;
      v23[3] = &unk_1001C7FF0;
      id v19 = v18;
      objc_copyWeak(&v24, block);
      dispatch_group_notify(v8, v19, v23);

      objc_destroyWeak(&v24);
      objc_destroyWeak(block);
    }
  }
  else
  {
  }
}

void sub_1000B11D0(void *a1)
{
  id v46 = a1;
  if (a1)
  {
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v47 = sub_100145898();
    id v3 = [v47 countByEnumeratingWithState:&v52 objects:v57 count:16];
    if (v3)
    {
      char v4 = 0;
      uint64_t v5 = *(void *)v53;
      while (2)
      {
        for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v53 != v5) {
            objc_enumerationMutation(v47);
          }
          uint64_t v7 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(*((void *)&v52 + 1) + 8 * i));
          nw_parameters_t v8 = v7;
          if (!v7)
          {
            nw_parameters_t v8 = (nw_parameters_t)&unk_1001F4000;
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            id v31 = (id)qword_1001F4A40;
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              if (qword_1001F4A48 != -1) {
                dispatch_once(&qword_1001F4A48, &stru_1001C7178);
              }
              id v33 = (id)qword_1001F4A40;
              _NRLogWithArgs();
            }
            goto LABEL_49;
          }
          uint64_t v9 = v7[16].isa;
          id v1 = (id)(v9 == 0);

          if (v1)
          {
            char v4 = 1;
          }
          else
          {
            id v1 = v8[16].isa;
            if ([v1 proxyCapability] == (id)1)
            {
              uint64_t v10 = v8[16].isa;
              id v2 = [(objc_class *)v10 hasCompanionDatapath];
            }
            else
            {
              id v2 = 0;
            }

            v4 |= v2;
          }
        }
        id v3 = [v47 countByEnumeratingWithState:&v52 objects:v57 count:16];
        if (v3) {
          continue;
        }
        break;
      }

      if (v4)
      {
        if (*((void *)v46 + 18)) {
          goto LABEL_32;
        }
        nw_endpoint_t host = nw_endpoint_create_host("::", "62742");
        if (host)
        {
          nw_parameters_t v8 = nw_parameters_create();
          if (v8)
          {
            nw_parameters_set_local_address();
            nw_parameters_set_required_interface_subtype();
            nw_parameters_set_always_open_listener_socket();
            id v1 = *((id *)v46 + 17);
            uint64_t v11 = nw_shoes_server_create();
            id v12 = (void *)*((void *)v46 + 18);
            *((void *)v46 + 18) = v11;

            if (*((void *)v46 + 18))
            {
              v51[1] = _NSConcreteStackBlock;
              v51[2] = (id)3221225472;
              v51[3] = sub_1000B6738;
              void v51[4] = &unk_1001C8618;
              void v51[5] = v46;
              nw_socks5_server_set_state_changed_handler();
              nw_socks5_server_start();
              if (!*((void *)v46 + 21))
              {
                BOOL v13 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *((dispatch_queue_t *)v46 + 17));
                dispatch_time_t v14 = dispatch_time(0x8000000000000000, 21600000000000);
                dispatch_source_set_timer(v13, v14, 0x13A52453C000uLL, 0xEE6B280uLL);
                objc_initWeak(v51, v46);
                v48[0] = _NSConcreteStackBlock;
                v48[1] = 3221225472;
                v48[2] = sub_1000B69E0;
                v48[3] = &unk_1001C88B8;
                objc_copyWeak(&v50, v51);
                id v15 = v13;
                id v49 = v15;
                dispatch_source_set_event_handler(v15, v48);
                dispatch_activate(v15);
                id v16 = (void *)*((void *)v46 + 21);
                *((void *)v46 + 21) = v15;
                id v17 = v15;

                objc_destroyWeak(&v50);
                objc_destroyWeak(v51);
              }
              id v46 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:&ne_privacy_proxy_netagent_id];
              id v18 = objc_alloc((Class)NEPolicy);
              id v19 = +[NEPolicyResult removeNetworkAgentUUID:v46];
              SecKeyRef v20 = +[NEPolicyCondition allInterfaces];
              v56[0] = v20;
              SecKeyRef v21 = +[NEPolicyCondition accountIdentifier:@"com.apple.networkrelay.companion_proxy"];
              v56[1] = v21;
              dispatch_group_t v22 = +[NEPolicyCondition effectivePID:getpid()];
              v56[2] = v22;
              long long v23 = +[NSArray arrayWithObjects:v56 count:3];
              id v1 = [v18 initWithOrder:10 result:v19 conditions:v23];

              self;
              id v2 = &unk_1001F4000;
              if (qword_1001F4D28 == -1) {
                goto LABEL_24;
              }
              goto LABEL_50;
            }
            id v40 = sub_1000AA13C();
            int v41 = _NRLogIsLevelEnabled();

            if (v41)
            {
              id v42 = sub_1000AA13C();
              _NRLogWithArgs();
            }
          }
          else
          {
            id v37 = sub_1000AA13C();
            int v38 = _NRLogIsLevelEnabled();

            if (v38)
            {
              id v39 = sub_1000AA13C();
              _NRLogWithArgs();
            }
          }
        }
        else
        {
          id v34 = sub_1000AA13C();
          int v35 = _NRLogIsLevelEnabled();

          if (v35)
          {
            id v36 = sub_1000AA13C();
            _NRLogWithArgs();
          }
        }
LABEL_49:
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v43 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v43 = 136446210;
        *(void *)(v43 + 4) = "-[NRLinkDirector startSocksServerIfNeeded]";
        sub_1000AA13C();
        _NRLogAbortWithPack();
        __break(1u);
LABEL_50:
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
LABEL_24:
        id v24 = (id)qword_1001F4D20;
        id v25 = sub_100134CFC((uint64_t)v24, @"NRLinkDirector-skip-privacy-proxy", v1);

        self;
        if (v2[421] != -1) {
          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        }
        id v26 = (id)qword_1001F4D20;
        long long v27 = (id *)v26;
        if (v26)
        {
          dispatch_assert_queue_V2(*((dispatch_queue_t *)v26 + 1));
          if (([v27[2] apply] & 1) == 0) {
            sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v28, v29, v30, v44);
          }
        }

        goto LABEL_32;
      }
    }
    else
    {
    }
    sub_1000AD198((uint64_t)v46);
LABEL_32:
  }
}

void sub_1000B1B24(uint64_t a1)
{
  if (a1)
  {
    if (_os_feature_enabled_impl())
    {
      uint64_t v40 = a1;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      id v41 = sub_100145898();
      char v3 = 0;
      id v4 = [v41 countByEnumeratingWithState:&v50 objects:v54 count:16];
      if (!v4) {
        goto LABEL_17;
      }
      uint64_t v5 = *(void *)v51;
      do
      {
        for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v51 != v5) {
            objc_enumerationMutation(v41);
          }
          uint64_t v7 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(*((void *)&v50 + 1) + 8 * i));
          nw_parameters_t v1 = v7;
          if (!v7)
          {
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            nw_parameters_t v1 = (nw_parameters_t)&unk_1001F4000;
            id v13 = (id)qword_1001F4A40;
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              if (qword_1001F4A48 != -1) {
                goto LABEL_69;
              }
              goto LABEL_44;
            }
            goto LABEL_68;
          }
          nw_parameters_t v8 = v7[16].isa;
          BOOL v9 = v8 == 0;

          if (v9)
          {
            char v3 = 0;
          }
          else
          {
            uint64_t v10 = v1[16].isa;
            if ([(objc_class *)v10 proxyCapability] == (id)1)
            {
              uint64_t v11 = v1[16].isa;
              unsigned __int8 v12 = [(objc_class *)v11 usesTLS];
            }
            else
            {
              unsigned __int8 v12 = 0;
            }

            v3 |= v12;
          }
        }
        id v4 = [v41 countByEnumeratingWithState:&v50 objects:v54 count:16];
      }
      while (v4);
LABEL_17:

      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        _NRLogWithArgs();
      }
      if ((v3 & 1) == 0)
      {
        sub_1000AD388(v40);
        goto LABEL_38;
      }
      if (*(void *)(v40 + 152))
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          _NRLogWithArgs();
        }
        goto LABEL_38;
      }
      if (*(void *)(v40 + 336))
      {
        nw_endpoint_t host = nw_endpoint_create_host("::", "0");
        if (host)
        {
          nw_parameters_t v1 = nw_parameters_create();
          if (v1)
          {
            nw_parameters_set_local_address();
            nw_parameters_set_use_awdl();
            nw_parameters_set_no_proxy();
            options = nw_tls_create_options();
            id v39 = nw_tls_copy_sec_protocol_options(options);
            sec_protocol_options_set_local_identity(v39, *(sec_identity_t *)(v40 + 336));
            id v36 = *(id *)(v40 + 104);
            [v36 bytes];
            [*(id *)(v40 + 104) length];
            sec_protocol_options_add_server_raw_public_key_certificate();
            id v16 = *(id *)(v40 + 136);
            uint64_t v17 = nw_masque_server_create();
            id v18 = *(void **)(v40 + 152);
            *(void *)(v40 + 152) = v17;

            id v19 = *(void **)(v40 + 152);
            if (v19) {
              goto LABEL_55;
            }
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            if (_NRLogIsLevelEnabled())
            {
              id v20 = sub_1000AA13C();
              _NRLogWithArgs();
            }
            id v19 = *(void **)(v40 + 152);
            if (v19)
            {
LABEL_55:
              objc_initWeak(&v49, v19);
              objc_initWeak(&v48, (id)v40);
              id v21 = *(id *)(v40 + 152);
              v45[1] = _NSConcreteStackBlock;
              v45[2] = (id)3221225472;
              void v45[3] = sub_1000B52FC;
              void v45[4] = &unk_1001C6FA8;
              objc_copyWeak(&v46, &v48);
              objc_copyWeak(&v47, &v49);
              nw_masque_server_set_state_changed_handler();

              id v22 = *(id *)(v40 + 152);
              v43[1] = _NSConcreteStackBlock;
              v43[2] = (id)3221225472;
              v43[3] = sub_1000B5600;
              void v43[4] = &unk_1001C7020;
              objc_copyWeak(&v44, &v48);
              objc_copyWeak(v45, &v49);
              nw_masque_server_set_outer_connection_handler();

              id v23 = *(id *)(v40 + 152);
              objc_copyWeak(&v42, &v48);
              objc_copyWeak(v43, &v49);
              nw_masque_server_set_proxy_client_connection_event_handler();

              id v24 = *(id *)(v40 + 152);
              nw_masque_server_start();

              objc_destroyWeak(v43);
              objc_destroyWeak(&v42);
              objc_destroyWeak(v45);
              objc_destroyWeak(&v44);
              objc_destroyWeak(&v47);
              objc_destroyWeak(&v46);
              objc_destroyWeak(&v48);
              objc_destroyWeak(&v49);

              goto LABEL_38;
            }
            id v32 = sub_1000AA13C();
            int v33 = _NRLogIsLevelEnabled();

            if (v33)
            {
              id v34 = sub_1000AA13C();
              _NRLogWithArgs();
            }
          }
          else
          {
            id v29 = sub_1000AA13C();
            int v30 = _NRLogIsLevelEnabled();

            if (v30)
            {
              id v31 = sub_1000AA13C();
              _NRLogWithArgs();
            }
          }
        }
        else
        {
          id v26 = sub_1000AA13C();
          int v27 = _NRLogIsLevelEnabled();

          if (v27)
          {
            id v28 = sub_1000AA13C();
            _NRLogWithArgs();
          }
        }
        while (1)
        {
LABEL_68:
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v35 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v35 = 136446210;
          *(void *)(v35 + 4) = "-[NRLinkDirector startMASQUEProxyServerIfNeeded]";
          sub_1000AA13C();
          _NRLogAbortWithPack();
          __break(1u);
LABEL_69:
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
LABEL_44:
          id v15 = v1[328].isa;
          _NRLogWithArgs();
        }
      }
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        id v25 = sub_1000AA13C();
        _NRLogWithArgs();
      }
LABEL_38:
    }
    else
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1000B2684(_Unwind_Exception *a1)
{
  objc_destroyWeak(v5);
  objc_destroyWeak(v2);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v6);
  objc_destroyWeak(*(id **)(v1 + 8));
  objc_destroyWeak((id *)(v1 + 208));
  objc_destroyWeak((id *)(v1 + 216));
  _Unwind_Resume(a1);
}

void sub_1000B26EC()
{
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v4)
  {
    id v23 = sub_1000AA13C();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v25 = sub_1000AA13C();
      _NRLogWithArgs();
    }
    uint64_t v5 = (void *)_os_log_pack_size();
    nw_parameters_t v8 = (char *)&v31 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    goto LABEL_69;
  }
  uint64_t v5 = v4;
  self;
  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  long long v33 = xmmword_10016C8A0;
  id v7 = [objc_alloc((Class)NSData) initWithBytes:&v33 length:16];
  sub_100141BFC((uint64_t)NRDLocalDevice, v7, @"0");
  nw_parameters_t v8 = (char *)objc_claimAutoreleasedReturnValue();

  [v5 setObject:@"PrivilegedTunnel" forKeyedSubscript:@"Level"];
  BOOL v9 = [v8 hostname];
  [v5 setObject:v9 forKeyedSubscript:@"Address"];

  [v5 setObject:&off_1001D49A8 forKeyedSubscript:@"Prefix"];
  uint64_t v1 = @"/var/mobile/Library/terminus/com.apple.necp_drop_dest.plist";
  uint64_t v10 = (__CFString *)[objc_alloc((Class)NSMutableArray) initWithContentsOfFile:@"/var/mobile/Library/terminus/com.apple.necp_drop_dest.plist"];
  char v3 = &unk_1001F4000;
  if (v10)
  {
    id v0 = v10;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      goto LABEL_12;
    }
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    id v2 = &unk_1001F4000;
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
  }
  id v0 = (__CFString *)objc_alloc_init((Class)NSMutableArray);
  if (!v0)
  {
    id v26 = sub_1000AA13C();
    int v27 = _NRLogIsLevelEnabled();

    if (v27)
    {
      id v28 = sub_1000AA13C();
      _NRLogWithArgs();
    }
    uint64_t v5 = (void *)_os_log_pack_size();
    nw_parameters_t v8 = (char *)&v31 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
LABEL_69:
    uint64_t v29 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v29 = 136446210;
    *(void *)(v29 + 4) = "-[NRLinkDirector addTerminusPrefixDropPolicy]";
    sub_1000AA13C();
    _NRLogAbortWithPack();
    goto LABEL_70;
  }
LABEL_12:
  uint64_t v11 = (__CFString *)sub_1000B3690((uint64_t)NRLinkDirector, v0);
  uint64_t v1 = v11;
  if (v11)
  {
    unsigned __int8 v12 = v11;

    id v0 = v12;
    if ([(__CFString *)v12 containsObject:v5]) {
      goto LABEL_17;
    }
  }
  else if ([(__CFString *)v0 containsObject:v5])
  {
    goto LABEL_32;
  }
  [(__CFString *)v0 addObject:v5];
LABEL_17:
  id v32 = 0;
  id v13 = +[NSPropertyListSerialization dataWithPropertyList:v0 format:200 options:0 error:&v32];
  id v14 = v32;
  if (v14)
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      id v15 = (id)qword_1001F4A40;
      int v30 = [v14 localizedDescription];
      _NRLogWithArgs();
    }
  }
  else if ((sub_100113A48(@"/var/mobile/Library/terminus/com.apple.necp_drop_dest.plist", v13, 1) & 1) == 0)
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
  }

LABEL_32:
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v16 = (id)qword_1001F4DD8;
  sub_10015969C((uint64_t)v16, &stru_1001C6F80);

  [@"/var/mobile/Library/terminus/com.apple.necp_drop_dest.plist" UTF8String];
  uint64_t v17 = ne_session_add_necp_drop_dest_from_path();
  if (v17)
  {
    id v2 = (void *)v17;
    if (qword_1001F4A48 == -1)
    {
LABEL_36:
      if (_NRLogIsLevelEnabled())
      {
        if (v3[329] != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        _NRLogWithArgs();
      }
      id v18 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      if (!v18 || (id v2 = (void *)ne_session_add_necp_drop_dest_from_dest_list(), v2))
      {
        if (v3[329] != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (v3[329] != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          _NRLogWithArgs();
        }
        id v19 = [objc_alloc((Class)NSString) initWithFormat:@"ne_session_add_necp_drop_dest_* failed with error %d", v2];
        sub_100115AB0(@"addTerminusPrefixDropPolicy", v19, 0, 0, 0, v20, v21, v22, v31);
      }
      else
      {
        if (v3[329] != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (v3[329] != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          _NRLogWithArgs();
        }
      }

      goto LABEL_62;
    }
LABEL_70:
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    goto LABEL_36;
  }
  if (qword_1001F4A48 != -1) {
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    _NRLogWithArgs();
  }
LABEL_62:
}

uint64_t sub_1000B2F60()
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v0 = sub_100145898();
  uint64_t v1 = (uint64_t)[v0 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v1)
  {
    uint64_t v2 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v1; ++i)
      {
        if (*(void *)v15 != v2) {
          objc_enumerationMutation(v0);
        }
        id v4 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(*((void *)&v14 + 1) + 8 * i));
        uint64_t v5 = v4;
        if (v4) {
          id v6 = (void *)*((void *)v4 + 16);
        }
        else {
          id v6 = 0;
        }
        id v7 = v6;
        id v8 = [v7 proxyCapability:v14];

        if (v8 == (id)2)
        {
          if (sub_100145D70((BOOL)v5)
            || (!v5 ? (BOOL v9 = 0) : (BOOL v9 = (void *)v5[16]),
                id v10 = v9,
                [v10 proxyProviderCriteria],
                uint64_t v11 = objc_claimAutoreleasedReturnValue(),
                unsigned __int8 v12 = [v11 excludeVPNClients],
                v11,
                v10,
                (v12 & 1) != 0))
          {

            uint64_t v1 = 1;
            goto LABEL_20;
          }
        }
      }
      uint64_t v1 = (uint64_t)[v0 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v1) {
        continue;
      }
      break;
    }
  }
LABEL_20:

  return v1;
}

void sub_1000B30FC()
{
  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  if (!v5)
  {
    id v15 = sub_1000AA13C();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v17 = sub_1000AA13C();
      _NRLogWithArgs();
    }
    id v6 = (void *)_os_log_pack_size();
    BOOL v9 = (char *)&v24 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v18 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v18 = 136446210;
    *(void *)(v18 + 4) = "-[NRLinkDirector removeTerminusPrefixDropPolicy]";
    goto LABEL_38;
  }
  id v6 = v5;
  self;
  id v7 = sub_10015BD9C();
  dispatch_assert_queue_V2(v7);

  long long v26 = xmmword_10016C8A0;
  id v8 = [objc_alloc((Class)NSData) initWithBytes:&v26 length:16];
  sub_100141BFC((uint64_t)NRDLocalDevice, v8, @"0");
  BOOL v9 = (char *)objc_claimAutoreleasedReturnValue();

  [v6 setObject:@"PrivilegedTunnel" forKeyedSubscript:@"Level"];
  id v10 = [v9 hostname];
  [v6 setObject:v10 forKeyedSubscript:@"Address"];

  [v6 setObject:&off_1001D49A8 forKeyedSubscript:@"Prefix"];
  uint64_t v2 = &objc_sync_exit_ptr;
  uint64_t v1 = @"/var/mobile/Library/terminus/com.apple.necp_drop_dest.plist";
  uint64_t v11 = (char *)[objc_alloc((Class)NSMutableArray) initWithContentsOfFile:@"/var/mobile/Library/terminus/com.apple.necp_drop_dest.plist"];
  if (v11)
  {
    id v0 = v11;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      goto LABEL_12;
    }
    id v3 = &unk_1001F4000;
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    id v4 = &unk_1001F4000;
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
  }
  id v0 = (char *)objc_alloc_init((Class)NSMutableArray);
  if (!v0)
  {
    id v19 = sub_1000AA13C();
    int v20 = _NRLogIsLevelEnabled();

    id v0 = "-[NRLinkDirector removeTerminusPrefixDropPolicy]";
    if (v20)
    {
      id v21 = sub_1000AA13C();
      _NRLogWithArgs();
    }
    id v6 = (void *)_os_log_pack_size();
    BOOL v9 = (char *)&v24 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v22 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v22 = 136446210;
    *(void *)(v22 + 4) = "-[NRLinkDirector removeTerminusPrefixDropPolicy]";
LABEL_38:
    sub_1000AA13C();
    _NRLogAbortWithPack();
    goto LABEL_39;
  }
LABEL_12:
  unsigned __int8 v12 = (__CFString *)sub_1000B3690((uint64_t)NRLinkDirector, v0);
  uint64_t v1 = v12;
  if (v12)
  {
    id v13 = v12;

    id v0 = v13;
    if (([v13 containsObject:v6] & 1) == 0)
    {
LABEL_17:
      id v25 = 0;
      uint64_t v2 = +[NSPropertyListSerialization dataWithPropertyList:v0 format:200 options:0 error:&v25];
      id v3 = v25;
      if (!v3)
      {
        if ((sub_100113A48(@"/var/mobile/Library/terminus/com.apple.necp_drop_dest.plist", v2, 1) & 1) == 0)
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            _NRLogWithArgs();
          }
        }
        goto LABEL_30;
      }
      id v4 = &unk_1001F4000;
      if (qword_1001F4A48 == -1)
      {
LABEL_19:
        if (_NRLogIsLevelEnabled())
        {
          if (v4[329] != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          id v14 = (id)qword_1001F4A40;
          id v23 = [v3 localizedDescription];
          _NRLogWithArgs();
        }
LABEL_30:

        goto LABEL_31;
      }
LABEL_39:
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      goto LABEL_19;
    }
LABEL_16:
    [v0 removeObject:v6];
    goto LABEL_17;
  }
  if ([v0 containsObject:v6]) {
    goto LABEL_16;
  }
LABEL_31:
}

id sub_1000B3690(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v2 count]];
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (!v5)
  {

    uint64_t v22 = 0;
    goto LABEL_24;
  }
  id v6 = v5;
  char v7 = 0;
  id v8 = &objc_sync_exit_ptr;
  CFStringRef v9 = @"Level";
  uint64_t v10 = *(void *)v27;
  while (2)
  {
    uint64_t v11 = 0;
    id v25 = v6;
    do
    {
      if (*(void *)v27 != v10) {
        objc_enumerationMutation(v4);
      }
      id v19 = *(void **)(*((void *)&v26 + 1) + 8 * (void)v11);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v20 = v19;
        id v21 = [v20 objectForKeyedSubscript:v9];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [v21 unsignedIntValue];
          NEPolicyGetStringForLegacyNECPLevel();
          uint64_t v12 = v10;
          id v13 = v8;
          id v14 = v4;
          id v15 = v3;
          v17 = CFStringRef v16 = v9;
          id v18 = [v20 mutableCopy];
          [v18 setObject:v17 forKeyedSubscript:v16];
          [v15 addObject:v18];

          CFStringRef v9 = v16;
          id v3 = v15;
          id v4 = v14;
          id v8 = v13;
          uint64_t v10 = v12;
          id v6 = v25;
          char v7 = 1;
        }
        else
        {
          [v3 addObject:v20];
        }

LABEL_7:
        goto LABEL_8;
      }
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        id v20 = (id)qword_1001F4A40;
        objc_opt_class();
        _NRLogWithArgs();
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v11 = (char *)v11 + 1;
    }
    while (v6 != v11);
    id v6 = [v4 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v6) {
      continue;
    }
    break;
  }

  if (v7) {
    uint64_t v22 = v3;
  }
  else {
    uint64_t v22 = 0;
  }
LABEL_24:
  id v23 = v22;

  return v23;
}

void sub_1000B3988(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && *((unsigned char *)WeakRetained + 12) && *((void *)WeakRetained + 35) == *(void *)(a1 + 32))
  {
    id v3 = WeakRetained;
    sub_1000B39F4(0);
    id WeakRetained = v3;
  }
}

void sub_1000B39F4(void *a1)
{
  id v1 = a1;
  if (qword_1001F4A30 != -1) {
    dispatch_once(&qword_1001F4A30, &stru_1001C7158);
  }
  uint64_t v60 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  memset(buffer, 0, sizeof(buffer));
  if (proc_pidinfo(dword_1001F3E70, 3, 0, buffer, 136) != 136)
  {
    char v7 = __error();
    if (strerror_r(*v7, v56, 0x80uLL)) {
      v56[0] = 0;
    }
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
    goto LABEL_83;
  }
  if (!v58)
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_83;
    }
    if (qword_1001F4A48 == -1)
    {
LABEL_24:
      _NRLogWithArgs();
      goto LABEL_83;
    }
LABEL_87:
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    goto LABEL_24;
  }
  if (v58 >= 0x401)
  {
    id v2 = objc_alloc((Class)NSString);
    id v3 = [[v2 initWithFormat:@"unexpected number of open files %u", v58];
    sub_100115AB0(@"fdUsageMonitor", v3, 0, 0, 0, v4, v5, v6, v44);
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
LABEL_82:

    goto LABEL_83;
  }
  uint64_t v8 = 8 * v58;
  CFStringRef v9 = (unsigned int *)malloc_type_malloc(v8, 0xA172743EuLL);
  if (!v9)
  {
    id v40 = sub_1000AA13C();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v42 = sub_1000AA13C();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v43 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v43 = 136446466;
    *(void *)(v43 + 4) = "strict_malloc";
    *(_WORD *)(v43 + 12) = 2048;
    *(void *)(v43 + 14) = v8;
    sub_1000AA13C();
    _NRLogAbortWithPack();
    goto LABEL_87;
  }
  uint64_t v10 = v9;
  int v11 = proc_pidinfo(dword_1001F3E70, 1, 0, v9, v8);
  if (v11 >= 1)
  {
    unsigned int v12 = v11;
    if ((v11 & 7) == 0)
    {
      uint64_t v45 = v1;
      id v13 = objc_alloc_init((Class)NSCountedSet);
      if (v12 >= 8)
      {
        uint64_t v27 = v12 >> 3;
        long long v28 = v10 + 1;
        do
        {
          switch(*v28)
          {
            case 0u:
              [v13 addObject:@"ATALK"];
              break;
            case 1u:
              [v13 addObject:@"VNODE"];
              break;
            case 2u:
              [v13 addObject:@"SOCKET"];
              break;
            case 3u:
              [v13 addObject:@"PSHM"];
              break;
            case 4u:
              [v13 addObject:@"PSEM"];
              break;
            case 5u:
              [v13 addObject:@"KQUEUE"];
              break;
            case 6u:
              [v13 addObject:@"PIPE"];
              break;
            case 7u:
              [v13 addObject:@"FSEVENTS"];
              break;
            case 9u:
              [v13 addObject:@"NETPOLICY"];
              break;
            case 0xAu:
              [v13 addObject:@"CHANNEL"];
              break;
            case 0xBu:
              [v13 addObject:@"NEXUS"];
              break;
            default:
              id v29 = [objc_alloc((Class)NSString) initWithFormat:@"%u", *v28];
              [v13 addObject:v29];

              break;
          }
          v28 += 2;
          --v27;
        }
        while (v27);
      }
      free(v10);
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      id v3 = v13;
      id v14 = [v3 countByEnumeratingWithState:&v50 objects:v55 count:16];
      if (v14)
      {
        id v15 = v14;
        LODWORD(v16) = 0;
        uint64_t v17 = *(void *)v51;
        do
        {
          for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v51 != v17) {
              objc_enumerationMutation(v3);
            }
            uint64_t v19 = *(void *)(*((void *)&v50 + 1) + 8 * i);
            id v20 = [v3 countForObject:v19];
            if (qword_1001F4A48 != -1) {
              dispatch_once(&qword_1001F4A48, &stru_1001C7178);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4A48 != -1) {
                dispatch_once(&qword_1001F4A48, &stru_1001C7178);
              }
              _NRLogWithArgs();
            }
            if (v45)
            {
              id v21 = +[NSNumber numberWithUnsignedInt:v20];
              [v45 setObject:v21 forKeyedSubscript:v19];
            }
            if (v20 >= 0x101)
            {
              id v22 = [objc_alloc((Class)NSString) initWithFormat:@"FD usage for type %@ exceeded threshold(%u)", v19, 256];
              sub_100115AB0(@"fdUsageMonitor", v22, 0, 0, 0, v23, v24, v25, v44);
            }
            uint64_t v16 = (v16 + v20);
          }
          id v15 = [v3 countByEnumeratingWithState:&v50 objects:v55 count:16];
        }
        while (v15);
      }
      else
      {
        uint64_t v16 = 0;
      }

      id v1 = v45;
      if (v45)
      {
        int v30 = +[NSNumber numberWithUnsignedInt:v16];
        [v45 setObject:v30 forKeyedSubscript:@"Total"];
      }
      if (v16 >= 0x201)
      {
        id v31 = [objc_alloc((Class)NSMutableString) initWithFormat:@"Total FD usage exceeded threshold(%u)", 512];
        long long v46 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        id v32 = v3;
        id v33 = [v32 countByEnumeratingWithState:&v46 objects:v54 count:16];
        if (v33)
        {
          id v34 = v33;
          uint64_t v35 = *(void *)v47;
          do
          {
            for (j = 0; j != v34; j = (char *)j + 1)
            {
              if (*(void *)v47 != v35) {
                objc_enumerationMutation(v32);
              }
              [v31 appendFormat:@" %@:%u", *(void *)(*((void *)&v46 + 1) + 8 * (void)j), [v32 countForObject:*(void *)(*((void *)&v46 + 1) + 8 * (void)j)]];
            }
            id v34 = [v32 countByEnumeratingWithState:&v46 objects:v54 count:16];
          }
          while (v34);
        }

        sub_100115AB0(@"fdUsageMonitor", v31, 0, 0, 0, v37, v38, v39, v44);
      }
      goto LABEL_82;
    }
  }
  long long v26 = __error();
  if (strerror_r(*v26, v56, 0x80uLL)) {
    v56[0] = 0;
  }
  if (qword_1001F4A48 != -1) {
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    _NRLogWithArgs();
  }
  free(v10);
LABEL_83:
}

void sub_1000B43DC(id a1)
{
  dword_1001F3E70 = getpid();
}

void sub_1000B43FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = (uint64_t)WeakRetained;
  if (WeakRetained && WeakRetained[12] && *((void *)WeakRetained + 38) == *(void *)(a1 + 32))
  {
    uint64_t v25 = 0;
    long long v26 = &v25;
    uint64_t v27 = 0x3032000000;
    long long v28 = sub_1000B47E8;
    id v29 = sub_1000B47F8;
    id v30 = 0;
    uint64_t v21 = 0;
    id v22 = &v21;
    uint64_t v23 = 0x2020000000;
    char v24 = 0;
    uint64_t v6 = (void *)nw_path_copy_netagent_dictionary();
    char v7 = v6;
    if (v6)
    {
      applier[0] = _NSConcreteStackBlock;
      applier[1] = 3221225472;
      applier[2] = sub_1000B4800;
      applier[3] = &unk_1001C7098;
      void applier[4] = &v25;
      void applier[5] = &v21;
      xpc_dictionary_apply(v6, applier);
    }
    id v8 = *(id *)(v5 + 312);
    CFStringRef v9 = v26;
    if (v8 || v26[5])
    {
      id v10 = *(id *)(v5 + 312);
      unsigned __int8 v11 = [v10 isEqual:v9[5]];

      if ((v11 & 1) == 0)
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        id v12 = (id)qword_1001F4A40;
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          id v14 = (id)qword_1001F4A40;
          id v19 = *(id *)(v5 + 312);
          _NRLogWithArgs();
        }
        objc_storeStrong((id *)(v5 + 312), (id)v26[5]);
        sub_1000AA4D0(v5);
      }
    }
    int v15 = *((unsigned __int8 *)v22 + 24);
    if (v15 != *(unsigned __int8 *)(v5 + 18))
    {
      *(unsigned char *)(v5 + 18) = v15;
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      id v16 = (id)qword_1001F4A40;
      int v17 = _NRLogIsLevelEnabled();

      if (v17)
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        id v18 = (id)qword_1001F4A40;
        _NRLogWithArgs();
      }
    }

    _Block_object_dispose(&v21, 8);
    _Block_object_dispose(&v25, 8);
  }
}

void sub_1000B473C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000B4760(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1 && *(unsigned char *)(v1 + 12) && *(void *)(v1 + 304) == a1[5])
  {
    id v3 = (id)nw_path_evaluator_copy_path();
    (*(void (**)(void))(a1[6] + 16))();
  }
}

uint64_t sub_1000B47E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000B47F8(uint64_t a1)
{
}

uint64_t sub_1000B4800(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length = 0;
  data = (const char *)xpc_dictionary_get_data(xdict, "data", &length);
  uint64_t result = 1;
  if (data && length >= 0xD8 && length == *((unsigned int *)data + 53) + 216)
  {
    if (!strcmp(data + 16, "NetworkExtension") && !strcmp(data + 48, "AppVPN"))
    {
      id v6 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:data];
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
      id v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      uint64_t result = 0;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (data[208] & 2) != 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1000B48DC(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && *((unsigned char *)WeakRetained + 12) && *((_DWORD *)WeakRetained + 7) == a2)
  {
    id v4 = WeakRetained;
    sub_1000B4944(WeakRetained, a2);
    id WeakRetained = v4;
  }
}

void sub_1000B4944(id val, int a2)
{
  int v4 = *((_DWORD *)val + 8) + 1;
  *((_DWORD *)val + 8) = v4;
  objc_initWeak(&location, val);
  uint64_t v5 = +[NEConfigurationManager sharedManagerForAllUsers];
  id v6 = *((id *)val + 17);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  id v7[2] = sub_1000B4A5C;
  v7[3] = &unk_1001C7110;
  objc_copyWeak(&v8, &location);
  int v9 = a2;
  int v10 = v4;
  [v5 loadConfigurationsWithCompletionQueue:v6 handler:v7];

  objc_destroyWeak(&v8);
  objc_destroyWeak(&location);
}

void sub_1000B4A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B4A5C(id *IsLevelEnabled, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained(IsLevelEnabled + 4);
  uint64_t v8 = (uint64_t)WeakRetained;
  if (!WeakRetained
    || !*((unsigned char *)WeakRetained + 12)
    || *((_DWORD *)WeakRetained + 7) != *((_DWORD *)IsLevelEnabled + 10)
    || *((_DWORD *)IsLevelEnabled + 11) != *((_DWORD *)WeakRetained + 8))
  {
    goto LABEL_58;
  }
  if (!v6)
  {
    id location = WeakRetained + 41;
    id v42 = WeakRetained[41];
    int v9 = *(void **)(v8 + 328);
    *(void *)(v8 + 328) = 0;

    id v41 = *(id *)(v8 + 320);
    int v10 = *(void **)(v8 + 320);
    uint64_t v43 = v8;
    *(void *)(v8 + 320) = 0;

    id v46 = objc_alloc_init((Class)NSMutableArray);
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    id v44 = v5;
    id v11 = v5;
    id v12 = [v11 countByEnumeratingWithState:&v51 objects:v56 count:16];
    if (v12)
    {
      id v13 = v12;
      id v14 = 0;
      uint64_t v15 = *(void *)v52;
      do
      {
        for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v52 != v15) {
            objc_enumerationMutation(v11);
          }
          int v17 = *(void **)(*((void *)&v51 + 1) + 8 * i);
          uint64_t v18 = [v17 appVPN];
          if (v18)
          {
            id v19 = (void *)v18;
            id v20 = [v17 appVPN];
            unsigned int v21 = [v20 isEnabled];

            if (v21)
            {
              id v22 = [v17 appVPN];
              id v23 = [v22 copyAppRuleIDs];

              if ([v23 count]) {
                [v46 addObjectsFromArray:v23];
              }
            }
          }
          int IsLevelEnabled = (id *)[v17 copyProviderMachOUUIDs];
          if ([IsLevelEnabled count])
          {
            if (!v14) {
              id v14 = objc_alloc_init((Class)NSMutableSet);
            }
            [v14 addObjectsFromArray:IsLevelEnabled];
          }
        }
        id v13 = [v11 countByEnumeratingWithState:&v51 objects:v56 count:16];
      }
      while (v13);
    }
    else
    {
      id v14 = 0;
    }
    uint64_t v8 = v43;
    char v24 = (id *)(v43 + 320);

    uint64_t v25 = location;
    objc_storeStrong(location, v14);
    id v5 = v44;
    if ([v46 count])
    {
      id v26 = objc_alloc_init((Class)NSMutableSet);
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      id v27 = v46;
      long long v28 = (id *)[v27 countByEnumeratingWithState:&v47 objects:v55 count:16];
      if (v28)
      {
        int IsLevelEnabled = v28;
        uint64_t v29 = *(void *)v48;
        do
        {
          id v30 = 0;
          do
          {
            if (*(void *)v48 != v29) {
              objc_enumerationMutation(v27);
            }
            id v31 = sub_100114080(*(void **)(*((void *)&v47 + 1) + 8 * (void)v30));
            if ([v31 count]) {
              [v26 addObjectsFromArray:v31];
            }

            id v30 = (id *)((char *)v30 + 1);
          }
          while (IsLevelEnabled != v30);
          int IsLevelEnabled = (id *)[v27 countByEnumeratingWithState:&v47 objects:v55 count:16];
        }
        while (IsLevelEnabled);
      }

      if ([v26 count])
      {
        objc_storeStrong(v24, v26);
        id v32 = sub_1000AA13C();
        int IsLevelEnabled = (id *)_NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v33 = sub_1000AA13C();
          uint64_t v39 = 2589;
          id v40 = *v24;
          uint64_t v37 = "";
          uint64_t v38 = "-[NRLinkDirector processNEConfigurationChangeForNotifyToken:]_block_invoke";
          _NRLogWithArgs();
        }
      }

      uint64_t v25 = location;
    }
    id v6 = 0;
    if (v41 || (int IsLevelEnabled = (id *)*v24) != 0)
    {
      unsigned __int8 v34 = [*v24 isEqualToSet:v41, v37, v38, v39, v40];
      if (!v41) {

      }
      if ((v34 & 1) == 0) {
        sub_1000AA4D0(v43);
      }
    }
    if (v42 || (int IsLevelEnabled = (id *)*v25) != 0)
    {
      unsigned int v35 = [*v25 isEqualToSet:v42, v37];
      char v36 = v35;
      if (v42)
      {
        if (!v35) {
          goto LABEL_56;
        }
      }
      else
      {

        if ((v36 & 1) == 0) {
          goto LABEL_56;
        }
      }
    }
    if (*v25)
    {
LABEL_57:

      goto LABEL_58;
    }
LABEL_56:
    sub_1000AA4D0(v43);
    goto LABEL_57;
  }
  if (qword_1001F4A48 != -1) {
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    _NRLogWithArgs();
  }
LABEL_58:
}

void sub_1000B4F38(id a1)
{
}

void sub_1000B4F44(uint64_t a1, int a2)
{
  id WeakRetained = (NSObject **)objc_loadWeakRetained((id *)(a1 + 32));
  int v4 = WeakRetained;
  if (WeakRetained && *((_DWORD *)WeakRetained + 6) == a2)
  {
    id v5 = WeakRetained[17];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    id block[2] = sub_1000B4FE0;
    block[3] = &unk_1001C8BA8;
    void block[4] = v4;
    dispatch_async(v5, block);
  }
}

void sub_1000B4FE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 12))
    {
      int v3 = *(_DWORD *)(v1 + 24);
      if (v3 != -1)
      {
        uint64_t state64 = 0;
        notify_get_state(v3, &state64);
        uint64_t v4 = *(void *)(a1 + 32);
        if (v4)
        {
          *(_DWORD *)(v4 + 20) = state64;
          uint64_t v5 = *(void *)(a1 + 32);
        }
        else
        {
          uint64_t v5 = 0;
        }
        StringFromThermalPressureLevel = (void *)createStringFromThermalPressureLevel();
        sub_1000A9E64(v5, 1049, @"%@", v7, v8, v9, v10, v11, (uint64_t)StringFromThermalPressureLevel);

        uint64_t v12 = *(void *)(a1 + 32);
        if (v12)
        {
          id v13 = *(id *)(v12 + 216);
          if (v13)
          {
            id v14 = v13;
            uint64_t v15 = *(void *)(a1 + 32);
            uint64_t v16 = v15 ? *(void **)(v15 + 216) : 0;
            id v17 = [v16 count];

            if (v17)
            {
              uint64_t v18 = *(void *)(a1 + 32);
              if (v18) {
                id v19 = *(void **)(v18 + 40);
              }
              else {
                id v19 = 0;
              }
              [v19 handleThermalStateUpdate];
              uint64_t v20 = *(void *)(a1 + 32);
              if (v20) {
                unsigned int v21 = *(void **)(v20 + 48);
              }
              else {
                unsigned int v21 = 0;
              }
              [v21 handleThermalStateUpdate];
              uint64_t v22 = *(void *)(a1 + 32);
              if (v22) {
                id v23 = *(void **)(v22 + 56);
              }
              else {
                id v23 = 0;
              }
              [v23 handleThermalStateUpdate];
              uint64_t v24 = *(void *)(a1 + 32);
              if (v24) {
                uint64_t v25 = *(void **)(v24 + 64);
              }
              else {
                uint64_t v25 = 0;
              }
              [v25 handleThermalStateUpdate];
              if (_NRIsAppleInternal())
              {
                uint64_t v26 = *(void *)(a1 + 32);
                if (v26) {
                  id v27 = *(void **)(v26 + 184);
                }
                else {
                  id v27 = 0;
                }
                [v27 handleThermalStateUpdate];
              }
              long long v44 = 0u;
              long long v45 = 0u;
              long long v42 = 0u;
              long long v43 = 0u;
              long long v28 = *(void **)(a1 + 32);
              if (v28) {
                long long v28 = (void *)v28[27];
              }
              uint64_t v29 = v28;
              id v30 = [v29 countByEnumeratingWithState:&v42 objects:v47 count:16];
              if (v30)
              {
                id v31 = v30;
                uint64_t v32 = *(void *)v43;
                do
                {
                  for (uint64_t i = 0; i != v31; uint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v43 != v32) {
                      objc_enumerationMutation(v29);
                    }
                    uint64_t v35 = *(void *)(a1 + 32);
                    if (v35) {
                      char v36 = *(void **)(v35 + 216);
                    }
                    else {
                      char v36 = 0;
                    }
                    uint64_t v37 = [v36 objectForKeyedSubscript:*(void *)(*((void *)&v42 + 1) + 8 * i)];
                    uint64_t v38 = v37;
                    if (v37 && *(unsigned char *)(v37 + 14))
                    {
                      self;
                      if (qword_1001F4A20 != -1) {
                        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
                      }
                      uint64_t v39 = (id)qword_1001F4A18;
                      if (v39)
                      {
                        unsigned int v34 = v39[5];

                        if (v34 > *(_DWORD *)(v38 + 84))
                        {
                          id v40 = *(id *)(v38 + 624);
                          if (v40) {
                            v40[4] |= 0x400u;
                          }

                          id v41 = *(id *)(v38 + 616);
                          if (v41) {
                            v41[4] |= 0x400u;
                          }
                        }
                      }
                      else
                      {
                        unsigned int v34 = 0;
                      }
                      *(_DWORD *)(v38 + 84) = v34;
                      sub_1000E0B98(v38, *(void **)(v38 + 128));
                    }
                  }
                  id v31 = [v29 countByEnumeratingWithState:&v42 objects:v47 count:16];
                }
                while (v31);
              }
            }
          }
        }
      }
    }
  }
}

void sub_1000B52FC(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = a3;
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v8 = v7;
  if (WeakRetained && WeakRetained[12] && *((id *)WeakRetained + 19) == v7)
  {
    if ((a2 - 1) <= 1)
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_23;
      }
      if (qword_1001F4A48 == -1)
      {
LABEL_22:
        _NRLogWithArgs();
LABEL_23:
        WeakRetained[13] = 0;
        goto LABEL_24;
      }
LABEL_27:
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      goto LABEL_22;
    }
    if (a2 == 3)
    {
      sub_1000AD388((uint64_t)WeakRetained);
      if (!v5 || nw_error_get_error_domain(v5) != nw_error_domain_posix || nw_error_get_error_code(v5) != 48)
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_23;
        }
        if (qword_1001F4A48 == -1) {
          goto LABEL_22;
        }
        goto LABEL_27;
      }
      unsigned int v9 = WeakRetained[13];
      if (v9 > 4)
      {
        id v15 = sub_1000AA13C();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v17 = sub_1000AA13C();
          _NRLogWithArgs();
        }
        goto LABEL_23;
      }
      WeakRetained[13] = v9 + 1;
      id v10 = sub_1000AA13C();
      int v11 = _NRLogIsLevelEnabled();

      if (v11)
      {
        id v12 = sub_1000AA13C();
        _NRLogWithArgs();
      }
      dispatch_time_t v13 = dispatch_time(0x8000000000000000, 200000000 * WeakRetained[13]);
      id v14 = *((void *)WeakRetained + 17);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      id block[2] = sub_1000B6730;
      block[3] = &unk_1001C8BA8;
      id v19 = WeakRetained;
      dispatch_after(v13, v14, block);
    }
  }
LABEL_24:
}

void sub_1000B5600(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v15 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v16 = v15;
  if (WeakRetained && *((unsigned char *)WeakRetained + 12) && *((id *)WeakRetained + 19) == v15)
  {
    id v17 = v12;
    id v18 = v10;
    id v19 = WeakRetained;
    id v20 = v11;
    nw_http_fields_access_value_by_name();
  }
}

void sub_1000B5754(uint64_t a1, uint64_t a2, int a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = objc_loadWeakRetained((id *)(a1 + 40));
  id v7 = v6;
  if (!WeakRetained || !*((unsigned char *)WeakRetained + 12) || *((id *)WeakRetained + 19) != v6) {
    goto LABEL_58;
  }
  switch(a3)
  {
    case 1:
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        _NRLogWithArgs();
      }
      id v10 = nw_masque_server_copy_connection_group_with_identifier();
      if (!v10)
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          _NRLogWithArgs();
          unsigned int v9 = 0;
        }
        else
        {
          unsigned int v9 = 0;
        }
        goto LABEL_57;
      }
      unsigned int v9 = v10;
      nw_parameters_t v11 = nw_connection_group_copy_parameters(v10);
      id v12 = (void *)nw_protocol_copy_quic_stream_definition();
      id v13 = (void *)nw_parameters_copy_protocol_options_for_definition();

      id v14 = nw_quic_stream_copy_shared_connection_options();
      id v15 = v14;
      if (v14)
      {
        uint64_t v16 = nw_quic_copy_sec_protocol_options(v14);
        if (v16)
        {
          id v17 = v16;
          sec_protocol_options_set_peer_authentication_required(v16, 1);
          if ([*((id *)WeakRetained + 43) count])
          {
            [*((id *)WeakRetained + 43) allValues];

            sec_protocol_options_set_client_raw_public_key_certificates();
          }
          nw_quic_connection_set_sec_protocol_options();
        }
        else
        {
          id v22 = sub_1000AA13C();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v24 = sub_1000AA13C();
            _NRLogWithArgs();
          }
          id v17 = 0;
        }
      }
      else
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_56;
        }
        id v17 = sub_1000AA13C();
        _NRLogWithArgs();
      }

LABEL_56:
      goto LABEL_57;
    case 3:
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        _NRLogWithArgs();
      }
      id v18 = *((id *)WeakRetained + 20);
      id v19 = +[NSNumber numberWithUnsignedLongLong:a2];
      id v20 = [v18 objectForKeyedSubscript:v19];

      if (v20)
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          _NRLogWithArgs();
        }
      }
      id v21 = *((id *)WeakRetained + 20);
      unsigned int v9 = +[NSNumber numberWithUnsignedLongLong:a2];
      [v21 setObject:0 forKeyedSubscript:v9];

      goto LABEL_57;
    case 2:
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        _NRLogWithArgs();
      }
      if (!*((void *)WeakRetained + 20))
      {
        id v8 = objc_alloc_init((Class)NSMutableDictionary);
        unsigned int v9 = (void *)*((void *)WeakRetained + 20);
        *((void *)WeakRetained + 20) = v8;
LABEL_57:
      }
      break;
  }
LABEL_58:
}

void sub_1000B5CEC(uint64_t a1, char *__s)
{
  if (__s)
  {
    size_t v4 = strlen(__s);
    dispatch_data_t v5 = dispatch_data_create(__s, v4, 0, 0);
    id v6 = (void *)dispatch_data_create_with_transform();
    uint64_t v64 = 0;
    uint64_t v65 = &v64;
    uint64_t v66 = 0x3032000000;
    id v67 = sub_1000B47E8;
    id v68 = sub_1000B47F8;
    id v69 = objc_alloc_init((Class)NSMutableArray);
    id v56 = _NSConcreteStackBlock;
    uint64_t v57 = 3221225472;
    long long v58 = sub_1000B6438;
    long long v59 = &unk_1001C6FD0;
    id v60 = *(id *)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 64);
    id v62 = &v64;
    uint64_t v63 = v8;
    id v61 = v7;
    NRTLVParse();
    if ([(id)v65[5] count])
    {
      unsigned int v9 = *(void **)(a1 + 48);
      if (v9) {
        unsigned int v9 = (void *)v9[20];
      }
      uint64_t v10 = v65[5];
      nw_parameters_t v11 = v9;
      id v12 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 64)];
      [v11 setObject:v10 forKeyedSubscript:v12];

      id v13 = (id)v65[5];
    }
    else
    {
      id v13 = 0;
    }

    _Block_object_dispose(&v64, 8);
  }
  else
  {
    id v14 = *(void **)(a1 + 48);
    if (v14) {
      id v14 = (void *)v14[20];
    }
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v16 = v14;
    id v17 = +[NSNumber numberWithUnsignedLongLong:v15];
    id v18 = [v16 objectForKeyedSubscript:v17];

    if (!v18)
    {
      id v13 = 0;
LABEL_58:
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        _NRLogWithArgs();
      }
      goto LABEL_64;
    }
    id v19 = *(void **)(a1 + 48);
    if (v19) {
      id v19 = (void *)v19[20];
    }
    uint64_t v20 = *(void *)(a1 + 64);
    id v21 = v19;
    id v22 = +[NSNumber numberWithUnsignedLongLong:v20];
    id v13 = [v21 objectForKeyedSubscript:v22];

    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      uint64_t v51 = *(void *)(a1 + 64);
      long long v50 = *(_OWORD *)(a1 + 32);
      uint64_t v49 = 2197;
      id v46 = "";
      long long v48 = "-[NRLinkDirector startMASQUEProxyServerIfNeeded]_block_invoke_2";
      _NRLogWithArgs();
    }
  }
  if (!v13 || ![v13 count]) {
    goto LABEL_58;
  }
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  id v13 = v13;
  id v23 = [v13 countByEnumeratingWithState:&v52 objects:v70 count:16];
  if (v23)
  {
    uint64_t v24 = *(void *)v53;
    do
    {
      for (uint64_t i = 0; i != v23; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v53 != v24) {
          objc_enumerationMutation(v13);
        }
        uint64_t v26 = *(void *)(*((void *)&v52 + 1) + 8 * i);
        if (v26 && *(unsigned char *)(v26 + 8) == 1)
        {
          int v27 = *(unsigned __int8 *)(v26 + 9);
          if (v27 == 52)
          {
            id v33 = *(id *)(v26 + 16);
            BOOL v34 = v33 == 0;

            if (!v34)
            {
              id v35 = objc_alloc((Class)NSString);
              id v36 = *(id *)(v26 + 16);
              id v32 = [v35 initWithData:v36 encoding:4];

              if (v32)
              {
                if (qword_1001F4A48 != -1) {
                  dispatch_once(&qword_1001F4A48, &stru_1001C7178);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4A48 != -1) {
                    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
                  }
                  uint64_t v49 = 2219;
                  *(void *)&long long v50 = v32;
                  id v46 = "";
                  long long v48 = "-[NRLinkDirector startMASQUEProxyServerIfNeeded]_block_invoke_2";
                  _NRLogWithArgs();
                }
                [v32 UTF8String:v46, v48, v49, v50, v51, v52];
                nw_parameters_set_source_application_by_external_bundle_id();
              }
              goto LABEL_24;
            }
          }
          else if (v27 == 51)
          {
            id v28 = *(id *)(v26 + 16);
            BOOL v29 = v28 == 0;

            if (!v29)
            {
              id v30 = objc_alloc((Class)NSString);
              id v31 = *(id *)(v26 + 16);
              id v32 = [v30 initWithData:v31 encoding:4];

              if (v32)
              {
                if (qword_1001F4A48 != -1) {
                  dispatch_once(&qword_1001F4A48, &stru_1001C7178);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4A48 != -1) {
                    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
                  }
                  uint64_t v49 = 2211;
                  *(void *)&long long v50 = v32;
                  id v46 = "";
                  long long v48 = "-[NRLinkDirector startMASQUEProxyServerIfNeeded]_block_invoke_2";
                  _NRLogWithArgs();
                }
                [v32 UTF8String];
                nw_parameters_set_account_id();
              }
LABEL_24:

              continue;
            }
          }
        }
      }
      id v23 = [v13 countByEnumeratingWithState:&v52 objects:v70 count:16];
    }
    while (v23);
  }

  uint64_t v37 = *(void *)(a1 + 48);
  if (v37) {
    uint64_t v38 = *(void **)(v37 + 160);
  }
  else {
    uint64_t v38 = 0;
  }
  if ((unint64_t)objc_msgSend(v38, "count", v46) >= 0x21)
  {
    id v39 = objc_alloc((Class)NSString);
    uint64_t v40 = *(void *)(a1 + 48);
    if (v40) {
      id v41 = *(void **)(v40 + 160);
    }
    else {
      id v41 = 0;
    }
    id v47 = [v41 count];
    id v42 = [v39 initWithFormat:@"unexpected number of cached tokens %u"];
    sub_100115AB0(@"MASQUEProxyTokens", v42, 0, 0, 0, v43, v44, v45, (uint64_t)v47);
  }
LABEL_64:
}

void sub_1000B641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t sub_1000B6438(uint64_t a1, uint64_t a2)
{
  id v4 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16];
  dispatch_data_t v5 = v4;
  if (*(unsigned char *)a2 == 8)
  {
    id v6 = v4;
    self;
    if ([v6 length])
    {
      uint64_t v30 = 0;
      id v31 = &v30;
      uint64_t v32 = 0x2020000000;
      char v33 = 0;
      uint64_t v26 = 0;
      int v27 = &v26;
      uint64_t v28 = 0x2020000000;
      char v29 = 0;
      uint64_t v20 = 0;
      id v21 = &v20;
      uint64_t v22 = 0x3032000000;
      id v23 = sub_100004748;
      uint64_t v24 = sub_100004758;
      id v25 = 0;
      uint64_t v16 = 0;
      id v17 = &v16;
      uint64_t v18 = 0x2020000000;
      char v19 = 50;
      NRTLVParse();
      if (*((unsigned char *)v31 + 24))
      {
        id v7 = 0;
      }
      else
      {
        uint64_t v8 = [NRToken alloc];
        id v7 = sub_1000044B0((id *)&v8->super.isa, *((unsigned char *)v27 + 24), *((unsigned char *)v17 + 24), (void *)v21[5]);
      }
      _Block_object_dispose(&v16, 8);
      _Block_object_dispose(&v20, 8);

      _Block_object_dispose(&v26, 8);
      _Block_object_dispose(&v30, 8);

      if (v7 && *((unsigned char *)v7 + 8))
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          uint64_t v15 = *(void *)(a1 + 56);
          long long v14 = *(_OWORD *)(a1 + 32);
          uint64_t v12 = 2185;
          id v13 = v7;
          uint64_t v10 = "";
          nw_parameters_t v11 = "-[NRLinkDirector startMASQUEProxyServerIfNeeded]_block_invoke";
          _NRLogWithArgs();
        }
        [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v7, v10, v11, v12, v13, v14, v15];
      }
    }
    else
    {

      id v7 = 0;
    }
  }
  return 1;
}

void sub_1000B66F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Block_object_dispose((const void *)(v29 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6730(uint64_t a1)
{
  return sub_1000B1B24(*(void *)(a1 + 32));
}

void sub_1000B6738(uint64_t a1, int a2, void *a3)
{
  dispatch_data_t v5 = a3;
  if ((a2 - 1) <= 1)
  {
LABEL_2:
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      *(unsigned char *)(v6 + 13) = 0;
    }
    goto LABEL_20;
  }
  if (a2 != 3) {
    goto LABEL_20;
  }
  sub_1000AD198(*(void *)(a1 + 32));
  if (!v5 || nw_error_get_error_domain(v5) != nw_error_domain_posix || nw_error_get_error_code(v5) != 48)
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
    goto LABEL_2;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    unsigned int v8 = *(unsigned __int8 *)(v7 + 13);
    if (v8 > 4)
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      if (_NRLogIsLevelEnabled())
      {
        id v15 = sub_1000AA13C();
        _NRLogWithArgs();
      }
      goto LABEL_2;
    }
    *(unsigned char *)(v7 + 13) = v8 + 1;
  }
  if (qword_1001F4A48 != -1) {
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
  }
  if (_NRLogIsLevelEnabled())
  {
    id v9 = sub_1000AA13C();
    _NRLogWithArgs();
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    int64_t v11 = 200000000 * *(unsigned __int8 *)(v10 + 13);
  }
  else {
    int64_t v11 = 0;
  }
  dispatch_time_t v12 = dispatch_time(0x8000000000000000, v11);
  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    long long v14 = *(NSObject **)(v13 + 136);
  }
  else {
    long long v14 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  id block[2] = sub_1000B6AD0;
  block[3] = &unk_1001C8BA8;
  void block[4] = v13;
  dispatch_after(v12, v14, block);
LABEL_20:
}

void sub_1000B69E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*((void *)WeakRetained + 21) == *(void *)(a1 + 32))
    {
      id v4 = *((id *)WeakRetained + 18);
      if (v4)
      {
        dispatch_data_t v5 = v4;
        int v6 = nw_shoes_server_fillout_statistics();

        if (v6)
        {
          uint64_t v7 = objc_alloc_init(NRAnalyticsSHOESProxy);
          unsigned int v8 = (void *)v3[22];
          v3[22] = v7;

          uint64_t v9 = v3[22];
          if (v9 && (*(void *)(v9 + 24) = 0, (uint64_t v10 = v3[22]) != 0))
          {
            *(void *)(v10 + 16) = 0;
            int64_t v11 = (void *)v3[22];
          }
          else
          {
            int64_t v11 = 0;
          }
          [v11 submit];
          dispatch_time_t v12 = (void *)v3[22];
          v3[22] = 0;
        }
      }
    }
  }
}

uint64_t sub_1000B6AD0(uint64_t a1)
{
  return sub_1000B11D0(*(void *)(a1 + 32));
}

void sub_1000B6AD8(uint64_t a1)
{
  id WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && *((unsigned char *)WeakRetained + 12))
  {
    id v2 = (id **)WeakRetained;
    sub_1000331BC(WeakRetained[5]);
    sub_100158534(v2[6]);
    id WeakRetained = (uint64_t *)v2;
  }
}

void sub_1000B6B34(id a1)
{
  if (qword_1001F4A48 != -1) {
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
  }
  uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();
  if (IsLevelEnabled)
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    uint64_t IsLevelEnabled = _NRLogWithArgs();
  }

  _NEHelperCacheClearUUIDs(IsLevelEnabled);
}

void sub_1000B6BF8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = 0;

  int v3 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = 0;

  id v4 = *(id *)(a1 + 120);
  if (v4 || (id v4 = *(id *)(a1 + 112)) != 0)
  {
  }
  else
  {
    int v6 = *(void **)(a1 + 128);
    if (!v6) {
      goto LABEL_7;
    }
  }
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v5 = (id)qword_1001F4DD8;
  sub_100159CDC((uint64_t)v5);

  int v6 = *(void **)(a1 + 128);
LABEL_7:
  *(void *)(a1 + 128) = 0;

  uint64_t v7 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = 0;

  unsigned int v8 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
}

void sub_1000B6CD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    int v6 = WeakRetained[17];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    id block[2] = sub_1000B6E18;
    block[3] = &unk_1001C8BA8;
    unsigned int v8 = WeakRetained;
    dispatch_async(v6, block);
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A48 != -1) {
        dispatch_once(&qword_1001F4A48, &stru_1001C7178);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_1000B6E18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 12)) {
      sub_1000B0EA8(v1);
    }
  }
}

void sub_1000B6E30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(unsigned char *)(v1 + 12))
  {
    id v3 = *(id *)(v1 + 72);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 80);

        if (v5) {
          return;
        }
      }
      else
      {
      }
    }
    uint64_t v6 = *(void *)(a1 + 32);
    sub_1000B7310(v6);
  }
}

void sub_1000B6EA4(uint64_t a1)
{
  if (!*(void *)(a1 + 64))
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000B7EA4;
    v3[3] = &unk_1001C8BA8;
    void v3[4] = a1;
    uint64_t v1 = objc_retainBlock(v3);
    if (qword_1001F4B80 != -1) {
      dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
    }
    if (byte_1001F4B78)
    {
      ((void (*)(void *))v1[2])(v1);
    }
    else
    {
      self;
      if (qword_1001F4DE0 != -1) {
        dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
      }
      id v2 = (id)qword_1001F4DD8;
      sub_10015969C((uint64_t)v2, v1);
    }
  }
}

void sub_1000B6FC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || !*(unsigned char *)(v2 + 12)) {
    return;
  }
  sub_1000B7310(v2);
  if (qword_1001F4B80 != -1) {
    dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
  }
  if (byte_1001F4B78)
  {
    id v14 = sub_1000AA13C();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      return;
    }
  }
  else
  {
    self;
    if (objc_opt_class() && objc_opt_class())
    {
      id v3 = [NRLinkManagerQuickRelay alloc];
      uint64_t v4 = *(void **)(a1 + 32);
      if (v4) {
        uint64_t v4 = (void *)v4[17];
      }
      uint64_t v5 = v4;
      uint64_t v6 = *(void **)(a1 + 32);
      queue = v5;
      id v7 = v6;
      if (!v3) {
        goto LABEL_33;
      }
      if (queue)
      {
        dispatch_assert_queue_V2(queue);
        if (v7)
        {
          v27.receiver = v3;
          v27.super_class = (Class)NRLinkManagerQuickRelay;
          unsigned int v8 = [super initManagerWithQueue:queue managerDelegate:v7];
          if (v8)
          {
            id v9 = v8;
            v8[8] = 4;
            id v10 = objc_alloc_init((Class)NSMutableSet);
            int64_t v11 = (void *)*((void *)v9 + 5);
            *((void *)v9 + 5) = v10;

            objc_storeWeak((id *)v9 + 9, v7);
            [v9 reportEvent:2001];
            sub_1001061A0(v9);
            *((_DWORD *)v9 + 3) = 1003;
            [v9 reportEvent:2002];
            id v3 = (NRLinkManagerQuickRelay *)v9;
            dispatch_time_t v12 = v3;
LABEL_15:

            uint64_t v13 = *(void *)(a1 + 32);
            if (v13) {
              objc_storeStrong((id *)(v13 + 56), v12);
            }

            goto LABEL_18;
          }
          id v23 = sub_100105184();
          int v24 = _NRLogIsLevelEnabled();

          if (v24)
          {
            id v25 = sub_100105184();
            _NRLogWithArgs();
          }
          id v3 = 0;
LABEL_33:
          dispatch_time_t v12 = 0;
          goto LABEL_15;
        }
        id v20 = sub_100105184();
        int v21 = _NRLogIsLevelEnabled();

        if (!v21) {
          goto LABEL_33;
        }
      }
      else
      {
        id v18 = sub_100105184();
        int v19 = _NRLogIsLevelEnabled();

        if (!v19) {
          goto LABEL_33;
        }
      }
      id v22 = sub_100105184();
      _NRLogWithArgs();

      dispatch_time_t v12 = 0;
      goto LABEL_15;
    }
    id v16 = sub_1000AA13C();
    int v17 = _NRLogIsLevelEnabled();

    if (!v17) {
      return;
    }
  }
  queue = sub_1000AA13C();
  _NRLogWithArgs();
LABEL_18:
}

void sub_1000B7310(uint64_t a1)
{
  if (a1)
  {
    self;
    if (qword_1001F4B80 != -1) {
      dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
    }
    if (!byte_1001F4B78 && qword_1001F4DB0 != -1) {
      dispatch_once(&qword_1001F4DB0, &stru_1001C8818);
    }
    if (byte_1001F4DA8 == 1)
    {
      if (!*(unsigned char *)(a1 + 17))
      {
        *(unsigned char *)(a1 + 17) = 1;
        sub_1000B745C((id *)a1, 1);
      }
    }
    else
    {
      id v2 = sub_1000AA13C();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v4 = sub_1000AA13C();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1000B745C(id *a1, int a2)
{
  id v4 = [NRLinkManagerWiFi alloc];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1;
  if (!v4)
  {
LABEL_43:
    BOOL v34 = 0;
    goto LABEL_30;
  }
  if (!v5)
  {
    id v43 = sub_10014E0F0();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v45 = sub_10014E0F0();
      _NRLogWithArgs();

      BOOL v34 = 0;
      goto LABEL_30;
    }
    goto LABEL_43;
  }
  dispatch_assert_queue_V2(v5);
  v69.receiver = v4;
  v69.super_class = (Class)NRLinkManagerWiFi;
  id v7 = (NRLinkManagerWiFi *)[super initManagerWithQueue:v5 managerDelegate:v6];
  if (!v7)
  {
    id v49 = sub_10014E0F0();
    int v50 = _NRLogIsLevelEnabled();

    if (v50)
    {
      id v51 = sub_10014E0F0();
      _NRLogWithArgs();
    }
    id v4 = 0;
    goto LABEL_43;
  }
  id v4 = v7;
  objc_storeWeak((id *)&v7->_wifiManagerDelegate, v6);
  v4->super._xpc_type_t type = 2;
  unsigned int v8 = (NSMutableSet *)objc_alloc_init((Class)NSMutableSet);
  links = v4->_links;
  v4->_links = v8;

  id v10 = (NSMutableSet *)objc_alloc_init((Class)NSMutableSet);
  wifiAutojoinClients = v4->_wifiAutojoinClients;
  v4->_wifiAutojoinClients = v10;

  v4->_avoidCompanionNotifyToken = -1;
  dispatch_time_t v12 = v4->super._queue;
  dispatch_assert_queue_V2(v12);

  if (v4->super._state == 1003)
  {
LABEL_29:
    id v4 = v4;
    BOOL v34 = v4;
    goto LABEL_30;
  }
  [(NRLinkManager *)v4 reportEvent:2001];
  uint64_t v13 = (CWFInterface *)objc_alloc_init((Class)CWFInterface);
  coreWiFiHandle = v4->_coreWiFiHandle;
  v4->_coreWiFiHandle = v13;

  id v15 = v4->_coreWiFiHandle;
  v79[0] = _NSConcreteStackBlock;
  v79[1] = 3221225472;
  v79[2] = sub_100151CE8;
  v79[3] = &unk_1001C8BA8;
  id v16 = v15;
  uint64_t v80 = v16;
  if (!sub_100151CF0((uint64_t)NRLinkManagerWiFi, v79))
  {
    uint64_t v73 = 0;
    id v74 = &v73;
    uint64_t v75 = 0x3032000000;
    uint64_t v76 = sub_100151DC4;
    uint64_t v77 = sub_100151DD4;
    id v78 = 0;
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3221225472;
    void v70[2] = sub_100151DDC;
    v70[3] = &unk_1001C8908;
    uint64_t v72 = &v73;
    int v17 = v16;
    BOOL v71 = v17;
    if (sub_100151CF0((uint64_t)NRLinkManagerWiFi, v70))
    {
      id v55 = sub_10014E0F0();
      char v56 = _NRLogIsLevelEnabled();

      if ((v56 & 1) == 0) {
        goto LABEL_27;
      }
      id v31 = sub_10014E0F0();
      uint64_t v65 = 2156;
      CFErrorRef Error = (CFErrorRef)"";
      uint64_t v64 = "-[NRLinkManagerWiFi setupWiFiManager]";
      _NRLogWithArgs();
    }
    else if (v74[5])
    {
      id v18 = [NRSCDInterfaceConfig alloc];
      int v19 = sub_10002100C((id *)&v18->super.isa, (void *)v74[5], 0);
      wifiInterfaceConfig = v4->_wifiInterfaceConfig;
      v4->_wifiInterfaceConfig = (NRSCDInterfaceConfig *)v19;

      int v21 = v4->_wifiInterfaceConfig;
      if (v21 && (unsigned int interfaceIndex = v21->_interfaceIndex, v21, interfaceIndex))
      {
        context.version = 0;
        memset(&context.retain, 0, 24);
        context.info = v4;
        SCDynamicStoreRef v23 = SCDynamicStoreCreate(kCFAllocatorDefault, @"NRLinkManagerWiFi", (SCDynamicStoreCallBack)sub_1001551F4, &context);
        v4->_scdynamicStoreRef = v23;
        if (v23)
        {
          if (SCDynamicStoreSetDisconnectCallBack())
          {
            scdKeyMIS = v4->_scdKeyMIS;
            v4->_scdKeyMIS = (NSString *)@"com.apple.MobileInternetSharing";

            scdynamicStoreRef = v4->_scdynamicStoreRef;
            uint64_t v26 = v4->super._queue;
            LODWORD(scdynamicStoreRef) = SCDynamicStoreSetDispatchQueue(scdynamicStoreRef, v26);

            if (scdynamicStoreRef)
            {
              objc_super v27 = v4->super._queue;
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472;
              id block[2] = sub_100151E28;
              block[3] = &unk_1001C8BA8;
              void block[4] = v4;
              dispatch_async(v27, block);

              v4->super._int state = 1003;
              [(NRLinkManager *)v4 reportEvent:2002];
              char v28 = 1;
              goto LABEL_28;
            }
            id v61 = sub_10014E0F0();
            int v62 = _NRLogIsLevelEnabled();

            if (!v62)
            {
LABEL_27:
              char v28 = 0;
LABEL_28:

              _Block_object_dispose(&v73, 8);
              if (v28) {
                goto LABEL_29;
              }
              goto LABEL_47;
            }
          }
          else
          {
            id v59 = sub_10014E0F0();
            int v60 = _NRLogIsLevelEnabled();

            if (!v60) {
              goto LABEL_27;
            }
          }
        }
        else
        {
          id v57 = sub_10014E0F0();
          int v58 = _NRLogIsLevelEnabled();

          if (!v58) {
            goto LABEL_27;
          }
        }
        id v31 = sub_10014E0F0();
        CFErrorRef Error = SCCopyLastError();
        _NRLogWithArgs();
      }
      else
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        id v32 = (id)qword_1001F4DB8;
        int v33 = _NRLogIsLevelEnabled();

        if (!v33) {
          goto LABEL_27;
        }
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        id v31 = (id)qword_1001F4DB8;
        CFErrorRef Error = (CFErrorRef)v74[5];
        _NRLogWithArgs();
      }
    }
    else
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v29 = (id)qword_1001F4DB8;
      int v30 = _NRLogIsLevelEnabled();

      if (!v30) {
        goto LABEL_27;
      }
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v31 = (id)qword_1001F4DB8;
      uint64_t v65 = 2161;
      CFErrorRef Error = (CFErrorRef)"";
      uint64_t v64 = "-[NRLinkManagerWiFi setupWiFiManager]";
      _NRLogWithArgs();
    }

    goto LABEL_27;
  }
  id v52 = sub_10014E0F0();
  int v53 = _NRLogIsLevelEnabled();

  if (v53)
  {
    id v54 = sub_10014E0F0();
    uint64_t v65 = 2147;
    CFErrorRef Error = (CFErrorRef)"";
    uint64_t v64 = "-[NRLinkManagerWiFi setupWiFiManager]";
    _NRLogWithArgs();
  }
LABEL_47:
  [(NRLinkManagerWiFi *)v4 invalidateManager];
  BOOL v34 = 0;
LABEL_30:

  id v35 = v6[6];
  v6[6] = v34;

  id v41 = (id *)v6[6];
  if (v41)
  {
    sub_100158534(v41);
    if (v6[31])
    {
      id v42 = a1[17];
      v68[0] = _NSConcreteStackBlock;
      v68[1] = 3221225472;
      v68[2] = sub_1000B7D48;
      v68[3] = &unk_1001C8BA8;
      v68[4] = v6;
      dispatch_async(v42, v68);
    }
  }
  else
  {
    if ((2 * a2) >= 0x12C) {
      uint64_t v46 = 300;
    }
    else {
      uint64_t v46 = (2 * a2);
    }
    sub_1000A9E64((uint64_t)v6, 1047, @"WiFi - Retry in %us (attempt: %u)", v36, v37, v38, v39, v40, v46);
    dispatch_time_t v47 = dispatch_time(0, 1000000000 * v46);
    long long v48 = a1[17];
    v66[0] = _NSConcreteStackBlock;
    v66[1] = 3221225472;
    v66[2] = sub_1000B7E80;
    v66[3] = &unk_1001C6F18;
    v66[4] = v6;
    int v67 = a2;
    dispatch_after(v47, v48, v66);
  }
}

void sub_1000B7D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1000B7D48(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v2 = (void *)v2[31];
  }
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v12 + 1) + 8 * (void)v7) + 16))(*(void *)(*((void *)&v12 + 1) + 8 * (void)v7));
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    id v9 = *(void **)(v8 + 248);
  }
  else {
    id v9 = 0;
  }
  [v9 removeAllObjects];
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10)
  {
    int64_t v11 = *(void **)(v10 + 248);
    *(void *)(v10 + 248) = 0;
  }
}

uint64_t sub_1000B7E80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (*(unsigned char *)(result + 12)) {
      return sub_1000B745C();
    }
  }
  return result;
}

void sub_1000B7EA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(unsigned char *)(v1 + 12))
  {
    id v3 = [NRLinkManagerWired alloc];
    id v4 = *(void **)(a1 + 32);
    if (v4) {
      id v4 = (void *)v4[17];
    }
    id v7 = v4;
    id v5 = -[NRLinkManagerWired initManagerWithQueue:managerDelegate:](v3, "initManagerWithQueue:managerDelegate:");
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      objc_storeStrong((id *)(v6 + 64), v5);
    }
  }
}

void sub_1000B7F50(uint64_t a1, void *a2)
{
  id v18 = a2;
  if (a1)
  {
    id v3 = sub_10015BD9C();
    dispatch_assert_queue_V2(v3);

    if (v18)
    {
      id v4 = *(id *)(a1 + 48);
      if (v4)
      {

        id v5 = v18;
LABEL_14:
        v5[2]();
        goto LABEL_15;
      }
      self;
      if (qword_1001F4B80 != -1) {
        dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
      }
      id v5 = v18;
      if (!byte_1001F4B78 && qword_1001F4DB0 != -1)
      {
        dispatch_once(&qword_1001F4DB0, &stru_1001C8818);
        id v5 = v18;
      }
      if ((byte_1001F4DA8 & 1) == 0) {
        goto LABEL_14;
      }
      uint64_t v6 = *(void **)(a1 + 248);
      if (!v6)
      {
        id v7 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v8 = *(void **)(a1 + 248);
        *(void *)(a1 + 248) = v7;

        uint64_t v6 = *(void **)(a1 + 248);
        if (!v6)
        {
          id v14 = sub_1000AA13C();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v16 = sub_1000AA13C();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v17 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v17 = 136446210;
          *(void *)(v17 + 4) = "-[NRLinkDirector runAfterWiFiManagerAvailable:]";
          sub_1000AA13C();
          _NRLogAbortWithPack();
        }
      }
      id v9 = v6;
      uint64_t v10 = objc_retainBlock(v18);
      [v9 addObject:v10];
    }
    else
    {
      id v11 = sub_1000AA13C();
      int v12 = _NRLogIsLevelEnabled();

      if (v12)
      {
        id v13 = sub_1000AA13C();
        _NRLogWithArgs();
      }
    }
  }
LABEL_15:
}

void sub_1000B81F4(uint64_t a1, int a2, void *a3)
{
  id v12 = a3;
  id v5 = (void *)_NRCopyLogObjectForNRUUID();
  if (a2)
  {
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    sub_10014CA4C((uint64_t)NRDLocalDevice, 0, *(void **)(a1 + 32));
    (*(void (**)(void, void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, v8);
  }
  else
  {
    int v9 = _NRLogIsLevelEnabled();

    if (v9)
    {
      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    (*(void (**)(void, uint64_t, const __CFString *, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 22, @"Already unpaired or bluetooth device not found", v10);
  }
}

void sub_1000B8344(uint64_t a1, int a2)
{
  if (a1)
  {
    char v2 = a2;
    if (a2) {
      int v4 = 10015;
    }
    else {
      int v4 = 10016;
    }
    sub_10012F648(0, v4, 0, 0);
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v5 = *(id *)(a1 + 216);
    id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v18;
      if (v2)
      {
        do
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v18 != v8) {
              objc_enumerationMutation(v5);
            }
            uint64_t v10 = [*(id *)(a1 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v17 + 1) + 8 * i) withObject:v17];
            id v11 = (void *)v10;
            if (v10)
            {
              dispatch_assert_queue_V2(*(dispatch_queue_t *)(v10 + 104));
              id v12 = sub_1000DC5BC((uint64_t)v11, 4, 0);
            }
            else
            {
              id v12 = 0;
            }

            if ([v12 state] == 1) {
              [v12 start];
            }
          }
          id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
        }
        while (v7);
      }
      else
      {
        do
        {
          for (j = 0; j != v7; j = (char *)j + 1)
          {
            if (*(void *)v18 != v8) {
              objc_enumerationMutation(v5);
            }
            uint64_t v14 = [[*(id *)(a1 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v17 + 1) + 8 * (void)j) key:v17];
            long long v15 = (void *)v14;
            if (v14)
            {
              dispatch_assert_queue_V2(*(dispatch_queue_t *)(v14 + 104));
              id v16 = sub_1000DC5BC((uint64_t)v15, 4, 0);
            }
            else
            {
              id v16 = 0;
            }

            if ([v16 state] != 8) {
              [v16 cancelWithReason:@"Disabled cloud link (via test command)"];
            }
          }
          id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
        }
        while (v7);
      }
    }
  }
}

void sub_1000B8584(uint64_t a1, int a2, void *a3, void *a4, void *a5)
{
  id v16 = a3;
  id v9 = a4;
  id v10 = a5;
  if (a1)
  {
    if (a2)
    {
      if (v16 || v9 || v10)
      {
        sub_1000A8214(0, @"FixedInterfaceName", v16);
        sub_1000A8214(0, @"FixedInterfacePeerAddress", v9);
        sub_1000A8214(0, @"FixedInterfacePeerIDSDeviceID", v10);
        sub_1000A9E64(a1, 1027, @"interface: %@, peer address: %@, peer IDSDeviceID: %@", v11, v12, v13, v14, v15, (uint64_t)v16);
      }
      else
      {
        if (qword_1001F4A48 != -1) {
          dispatch_once(&qword_1001F4A48, &stru_1001C7178);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4A48 != -1) {
            dispatch_once(&qword_1001F4A48, &stru_1001C7178);
          }
          _NRLogWithArgs();
        }
      }
    }
    else
    {
      sub_1000A8484(0, @"FixedInterfaceName");
      sub_1000A8484(0, @"FixedInterfacePeerAddress");
      sub_1000A8484(0, @"FixedInterfacePeerIDSDeviceID");
      sub_10012F648(0, 1028, 0, 0);
    }
  }
}

void sub_1000B8748(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = sub_10015BD9C();
    dispatch_assert_queue_V2(v7);

    if (v16)
    {
      uint64_t v8 = [*(id *)(a1 + 216) objectForKeyedSubscript:v6];
      if (v8)
      {
        uint64_t v9 = v8;
        id v10 = v16;
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v9 + 104));
        [*(id *)(v9 + 168) addObject:v10];
      }
      else
      {
        uint64_t v11 = objc_alloc_init(NRDOrphanedConnection);
        p_isa = (id *)&v11->super.isa;
        if (v11)
        {
          objc_storeStrong((id *)&v11->_nrUUID, a3);
          objc_storeStrong(p_isa + 2, a2);
        }
        [*(id *)(a1 + 224) addObject:p_isa];
        uint64_t v13 = [p_isa description];
        sub_10012F648(0, 1015, 0, v13);

        uint64_t v9 = 0;
      }
      goto LABEL_8;
    }
    id v14 = sub_1000AA13C();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v9 = (uint64_t)sub_1000AA13C();
      _NRLogWithArgs();
LABEL_8:
    }
  }
}

void sub_1000B88BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = sub_10015BD9C();
    dispatch_assert_queue_V2(v4);

    if (v3)
    {
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v5 = *(id *)(a1 + 216);
      id v6 = [v5 countByEnumeratingWithState:&v27 objects:v32 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v28;
        do
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v28 != v8) {
              objc_enumerationMutation(v5);
            }
            uint64_t v10 = [*(id *)(a1 + 216) objectForKeyedSubscript:*(void *)(*((void *)&v27 + 1) + 8 * i)];
            id v11 = v3;
            if (v10)
            {
              dispatch_assert_queue_V2(*(dispatch_queue_t *)(v10 + 104));
              [*(id *)(v10 + 176) removeObject:v11];
              if (![*(id *)(v10 + 176) count]) {
                sub_1000FA864(v10, 0);
              }
            }
          }
          id v7 = [v5 countByEnumeratingWithState:&v27 objects:v32 count:16];
        }
        while (v7);
      }

      id v12 = [*(id *)(a1 + 232) copy];
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      id v13 = v12;
      id v14 = [v13 countByEnumeratingWithState:&v23 objects:v31 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v24;
        do
        {
          for (j = 0; j != v15; j = (char *)j + 1)
          {
            if (*(void *)v24 != v16) {
              objc_enumerationMutation(v13);
            }
            long long v18 = *(void **)(*((void *)&v23 + 1) + 8 * (void)j);
            if (v18 && (id)v18[2] == v3)
            {
              [*(id *)(a1 + 232) removeObject:*(void *)(*((void *)&v23 + 1) + 8 * (void)j)];
              long long v19 = [v18 description];
              sub_10012F648(0, 1024, 0, v19);
            }
          }
          id v15 = [v13 countByEnumeratingWithState:&v23 objects:v31 count:16];
        }
        while (v15);
      }
    }
    else
    {
      id v20 = sub_1000AA13C();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v22 = sub_1000AA13C();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1000B8B70(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v31 = a2;
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = sub_10015BD9C();
    dispatch_assert_queue_V2(v9);

    if (v7)
    {
      if (v8)
      {
        uint64_t v10 = [*(id *)(a1 + 216) objectForKeyedSubscript:v8];
        if (!v10)
        {
          id v22 = objc_alloc_init(NRDOrphanedConnection);
          p_isa = (id *)&v22->super.isa;
          if (v22)
          {
            objc_storeStrong((id *)&v22->_nrUUID, a4);
            objc_storeStrong(p_isa + 2, a3);
          }
          [*(id *)(a1 + 232) addObject:p_isa];
          long long v24 = [p_isa description];
          sub_10012F648(0, 1022, 0, v24);

          uint64_t v11 = 0;
          goto LABEL_24;
        }
        uint64_t v11 = v10;
        id v12 = v31;
        id v13 = v7;
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v11 + 104));
        uint64_t v14 = *(void *)(v11 + 184);
        id v15 = v12;
        id v16 = v13;
        if (!v14) {
          goto LABEL_19;
        }
        long long v17 = *(NSObject **)(v14 + 24);
        if (v17) {
          dispatch_assert_queue_V2(v17);
        }
        id v18 = sub_100121D58(v16);
        long long v19 = [*(id *)(v14 + 32) objectForKeyedSubscript:v18];

        sub_100121BA0(v14, v15, v18);
        if ([v15 isNotEmpty])
        {
          uint64_t pid = xpc_connection_get_pid((xpc_connection_t)v16);
          if ((int)pid < 1)
          {
LABEL_18:

LABEL_19:
            if ([v15 linkType] == 1)
            {
              if ([v15 isNotEmpty])
              {
                uint64_t v26 = (*(void *)(v11 + 592) >> 1) & 1;
                v32[0] = _NSConcreteStackBlock;
                v32[1] = 3221225472;
                v32[2] = sub_1000DEF0C;
                v32[3] = &unk_1001C7530;
                char v33 = v26;
                void v32[4] = v11;
                sub_1000DC374(v11, 1, v26, v32);
              }
              else
              {
                sub_1000DCB28(v11, *(void **)(v11 + 616));
              }
            }

            goto LABEL_24;
          }
          id v21 = sub_100116370(pid, 0);
          sub_100121990(v14, v21);
        }
        else
        {
          if (!v19) {
            goto LABEL_18;
          }
          uint64_t v25 = xpc_connection_get_pid((xpc_connection_t)v16);
          if ((int)v25 < 1) {
            goto LABEL_18;
          }
          id v21 = sub_100116370(v25, 0);
          sub_100121A98(v14, v21);
        }

        goto LABEL_18;
      }
      id v29 = sub_1000AA13C();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
LABEL_31:
        uint64_t v11 = (uint64_t)sub_1000AA13C();
        _NRLogWithArgs();
LABEL_24:
      }
    }
    else
    {
      id v27 = sub_1000AA13C();
      int v28 = _NRLogIsLevelEnabled();

      if (v28) {
        goto LABEL_31;
      }
    }
  }
}

void sub_1000B8E90(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = *(void **)(a1 + 344);
    if (!v6)
    {
      id v7 = objc_alloc_init((Class)NSMutableDictionary);
      id v8 = *(void **)(a1 + 344);
      *(void *)(a1 + 344) = v7;

      id v6 = *(void **)(a1 + 344);
    }
    [v6 setObject:v9 forKeyedSubscript:v5];
  }
}

void sub_1000B8F18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if (v5)
    {
      id v7 = objc_alloc_init(NRDEphemeralDevice);
      connection = (NSUUID *)v5[4];
      if (v7)
      {
        nrUUID = v7->super._nrUUID;
        v7->super._nrUUID = connection;

        uint64_t v10 = (OS_xpc_object *)v6;
        connection = (NSUUID *)v7->super._connection;
        v7->super._connection = v10;
      }

      [*(id *)(a1 + 240) addObject:v7];
      uint64_t v11 = [(NRDEphemeralDevice *)v7 description];
      sub_10012F648(0, 1041, 0, v11);

      goto LABEL_23;
    }
    if ([*(id *)(a1 + 240) count])
    {
      id v12 = [*(id *)(a1 + 240) copy];
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      id v7 = (NRDEphemeralDevice *)v12;
      id v13 = [(NRDEphemeralDevice *)v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (!v13)
      {
LABEL_22:

        id v5 = 0;
LABEL_23:

        goto LABEL_24;
      }
      id v14 = v13;
      uint64_t v15 = *(void *)v22;
LABEL_10:
      uint64_t v16 = 0;
      while (1)
      {
        if (*(void *)v22 != v15) {
          objc_enumerationMutation(v7);
        }
        id v18 = *(void **)(*((void *)&v21 + 1) + 8 * v16);
        if (v18)
        {
          if ((id)v18[2] == v6) {
            goto LABEL_18;
          }
        }
        else if (!v6)
        {
LABEL_18:
          [*(id *)(a1 + 240) removeObject:*(void *)(*((void *)&v21 + 1) + 8 * v16)];
          long long v19 = [v18 description];
          sub_10012F648(0, 1042, 0, v19);

          if (v18) {
            long long v17 = (void *)v18[1];
          }
          else {
            long long v17 = 0;
          }
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472;
          id v20[2] = sub_1000B9198;
          v20[3] = &unk_1001C7070;
          void v20[4] = v18;
          sub_100144F64((uint64_t)NRDLocalDevice, v17, v20);
        }
        if (v14 == (id)++v16)
        {
          id v14 = [(NRDEphemeralDevice *)v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
          if (!v14) {
            goto LABEL_22;
          }
          goto LABEL_10;
        }
      }
    }
  }
LABEL_24:
}

void sub_1000B9198(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_1001F4A48 != -1) {
    dispatch_once(&qword_1001F4A48, &stru_1001C7178);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A48 != -1) {
      dispatch_once(&qword_1001F4A48, &stru_1001C7178);
    }
    id v3 = (id)qword_1001F4A40;
    _NRLogWithArgs();
  }
}

void *sub_1000B92A4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = (void *)qword_1001F4A38;
    if (qword_1001F4A38)
    {
      if (v3)
      {
        (*((void (**)(id))v3 + 2))(v3);
        id v5 = (void *)qword_1001F4A38;
      }
      a1 = v5;
    }
    else
    {
      if (v3)
      {
        id v6 = (void *)a1[44];
        if (!v6)
        {
          id v7 = objc_alloc_init((Class)NSMutableArray);
          id v8 = (void *)a1[44];
          a1[44] = v7;

          id v6 = (void *)a1[44];
        }
        id v9 = v6;
        id v10 = objc_retainBlock(v4);
        [v9 addObject:v10];
      }
      if (!*((unsigned char *)a1 + 19))
      {
        *((unsigned char *)a1 + 19) = 1;
        if (qword_1001F4C08 != -1) {
          dispatch_once(&qword_1001F4C08, &stru_1001C7DA8);
        }
        uint64_t v11 = (id)qword_1001F4C10;
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        id block[2] = sub_1000B9408;
        block[3] = &unk_1001C8BA8;
        void block[4] = a1;
        dispatch_async(v11, block);
      }
      a1 = 0;
    }
  }

  return a1;
}

void sub_1000B9408(uint64_t a1)
{
  char v2 = (void *)IDSCopyLocalDeviceUniqueID();
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    id v4 = *(NSObject **)(v3 + 136);
  }
  else {
    id v4 = 0;
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1000B94B0;
  v6[3] = &unk_1001C8840;
  v6[4] = v3;
  id v7 = v2;
  id v5 = v2;
  dispatch_async(v4, v6);
}

void sub_1000B94B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    *(unsigned char *)(v2 + 19) = 0;
  }
  objc_storeStrong((id *)&qword_1001F4A38, *(id *)(a1 + 40));
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    uint64_t v3 = (void *)v3[44];
  }
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v11 + 1) + 8 * (void)v8) + 16))(*(void *)(*((void *)&v11 + 1) + 8 * (void)v8));
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v6);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    id v10 = *(void **)(v9 + 352);
    *(void *)(v9 + 352) = 0;
  }
}

void sub_1000B97A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4A50;
  qword_1001F4A50 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_1000B9E04()
{
  if (qword_1001F4A58 != -1) {
    dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
  }
  id v0 = (void *)qword_1001F4A50;

  return v0;
}

void sub_1000BA344(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v14 = 1;
    if (sysctlbyname("net.inet6.ip6.forwarding", 0, 0, &v14, 4uLL))
    {
      uint64_t v2 = __error();
      uint64_t v3 = *v2;
      if (strerror_r(*v2, __strerrbuf, 0x80uLL)) {
        __strerrbuf[0] = 0;
      }
      if (qword_1001F4A58 != -1) {
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A58 != -1) {
          dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
        }
        uint64_t v6 = v3;
        id v8 = __strerrbuf;
        _NRLogWithArgs();
      }
    }
    ++WeakRetained[5];
    id v4 = [WeakRetained instance:v6 with:v8];
    if (qword_1001F4A58 != -1) {
      dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A58 != -1) {
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
      }
      long long v12 = WeakRetained;
      uint64_t v13 = (unsigned __int16)WeakRetained[5];
      uint64_t v10 = 716;
      long long v11 = v4;
      uint64_t v7 = "";
      uint64_t v9 = "-[NRBabelInterface initWithInstance:]_block_invoke";
      _NRLogWithArgs();
    }
    unsigned int v5 = bswap32((unsigned __int16)WeakRetained[5]);
    v15[0] = 134218282;
    v15[1] = 1540;
    __int16 v16 = HIWORD(v5);
    __int16 v17 = 28695;
    *(void *)__strerrbuf = v15;
    uint64_t v19 = 12;
    [WeakRetained sendPacket:__strerrbuf iovLen:1 toAddr:&xmmword_10016CA04 v7 v9 v10 v11 v12 v13];
  }
}

void sub_1000BBB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id location)
{
  objc_destroyWeak(v42);
  objc_destroyWeak(v41);
  objc_destroyWeak(v40);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000BBB80(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained readPackets];
}

void sub_1000BBBC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained readPackets];
}

void sub_1000BBC00(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handlePathUpdate:v3];
}

void sub_1000BE8E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained processPendingOutgoingPackets];
    id WeakRetained = v2;
  }
}

void sub_1000BE92C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained updateRXCostCheckTime:1 personal:0];
    id WeakRetained = v2;
  }
}

void sub_1000BE978(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained updateRXCostCheckTime:1 personal:1];
    id WeakRetained = v2;
  }
}

uint64_t sub_1000BE9C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v5 = WeakRetained;
    id WeakRetained = [WeakRetained txcost];
    id v2 = v5;
    if (WeakRetained != 0xFFFF)
    {
      if (qword_1001F4A58 != -1) {
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
      }
      id WeakRetained = (id)_NRLogIsLevelEnabled();
      id v2 = v5;
      if (WeakRetained)
      {
        if (qword_1001F4A58 != -1) {
          dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
        }
        id v3 = (id)qword_1001F4A50;
        [v5 txcost];
        _NRLogWithArgs();

        id v2 = v5;
      }
    }
  }

  return _objc_release_x1(WeakRetained, v2);
}

void sub_1000C0354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C0378(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v8 = WeakRetained;
    if (qword_1001F4A58 != -1) {
      dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A58 != -1) {
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
      }
      uint64_t v6 = 1977;
      uint64_t v7 = v8;
      id v4 = "";
      unsigned int v5 = "-[NRBabelSource setupGCTimer]_block_invoke";
      _NRLogWithArgs();
    }
    id v2 = [v8 instance:v4, v5, v6, v7];
    id v3 = [v2 sources];
    [v3 removeObject:v8];

    id WeakRetained = v8;
  }
}

uint64_t sub_1000C123C(uint64_t a1)
{
  if (qword_1001F4A58 != -1) {
    dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A58 != -1) {
      dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
    }
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    id v4 = "-[NRBabelRoute applyUsingSystem]_block_invoke";
    uint64_t v5 = 2198;
    id v3 = "";
    _NRLogWithArgs();
  }
  system([*(id *)(a1 + 40) UTF8String:v3, v4, v5, v6, v7]);
  if (qword_1001F4A58 != -1) {
    dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
  }
  uint64_t result = _NRLogIsLevelEnabled();
  if (result)
  {
    if (qword_1001F4A58 != -1) {
      dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
    }
    return _NRLogWithArgs();
  }
  return result;
}

void sub_1000C1994(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1000C19C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v8 = WeakRetained;
    if ([WeakRetained metric] == 0xFFFF)
    {
      if (qword_1001F4A58 != -1) {
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A58 != -1) {
          dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
        }
        uint64_t v6 = 2085;
        uint64_t v7 = v8;
        id v4 = "";
        uint64_t v5 = "-[NRBabelRoute initWithPrefix:neighbor:routerID:seqno:interval:receivedMetric:nextHop:instance:]_block_invoke";
        _NRLogWithArgs();
      }
      uint64_t v2 = [v8 instance:v4, v5, v6, v7];
      id v3 = [v2 routes];
      [v3 removeObject:v8];
    }
    else
    {
      if (qword_1001F4A58 != -1) {
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A58 != -1) {
          dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
        }
        uint64_t v6 = 2081;
        uint64_t v7 = v8;
        id v4 = "";
        uint64_t v5 = "-[NRBabelRoute initWithPrefix:neighbor:routerID:seqno:interval:receivedMetric:nextHop:instance:]_block_invoke";
        _NRLogWithArgs();
      }
      [v8 setNumExpiryTimerFires:((unsigned __int16)objc_msgSend(v8, "numExpiryTimerFires", v4, v5, v6, v7) + 1)];
      [v8 resetExpiryTimer];
    }
    id WeakRetained = v8;
  }
}

uint64_t sub_1000C2848(uint64_t a1)
{
  id WeakRetained = (__int16 *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = WeakRetained;
    id WeakRetained = (__int16 *)[*(id *)(a1 + 32) cancelIfRouteUnselected];
    id v3 = v6;
    if ((WeakRetained & 1) == 0)
    {
      int v4 = v6[6];
      if (v4 < 1)
      {
        id WeakRetained = (__int16 *)[v6 cancelWithDelay:v4 == 0];
        id v3 = v6;
      }
      else
      {
        id WeakRetained = (__int16 *)[v6 sendSeqnoReq];
        id v3 = v6;
        --v6[6];
      }
    }
  }

  return _objc_release_x1(WeakRetained, v3);
}

uint64_t sub_1000C46F8(unsigned char *a1, int a2)
{
  if (!a1)
  {
    id v5 = sub_1000B9E04();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v7 = sub_1000B9E04();
      _NRLogWithArgs();
    }
    return 0;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a1;
  unint64_t v3 = (unint64_t)&a1[a2];
  while (1)
  {
    if (!*v2)
    {
      ++v2;
      goto LABEL_5;
    }
    if ((*v2 & 0x80) != 0) {
      break;
    }
    if ((unint64_t)(v2 + 1) >= v3)
    {
      if (qword_1001F4A58 != -1) {
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A58 != -1) {
          goto LABEL_37;
        }
        goto LABEL_31;
      }
      return 1;
    }
    v2 += v2[1] + 2;
    if ((unint64_t)v2 > v3)
    {
      if (qword_1001F4A58 != -1) {
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A58 == -1) {
          goto LABEL_31;
        }
LABEL_37:
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
LABEL_31:
        _NRLogWithArgs();
      }
      return 1;
    }
    if (qword_1001F4A58 != -1) {
      dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A58 != -1) {
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
      }
      _NRLogWithArgs();
    }
LABEL_5:
    if ((unint64_t)v2 >= v3) {
      return 0;
    }
  }
  if (qword_1001F4A58 != -1) {
    dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
  }
  uint64_t v4 = 1;
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A58 != -1) {
      dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
    }
    _NRLogWithArgs();
  }
  return v4;
}

uint64_t sub_1000C49DC(void *a1, int a2, void *__src, unsigned int a4, size_t __n, char *a6, unsigned char *a7)
{
  if (!a2)
  {
    uint64_t result = 0;
    *a1 = 0;
    a1[1] = 0;
    return result;
  }
  unsigned int v9 = __n;
  if (a7 && *a7 >= 0x81u)
  {
    if (qword_1001F4A58 != -1) {
      dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
    }
    if (!_NRLogIsLevelEnabled()) {
      return 0xFFFFFFFFLL;
    }
    if (qword_1001F4A58 == -1) {
      goto LABEL_36;
    }
LABEL_68:
    dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
LABEL_36:
    _NRLogWithArgs();
    return 0xFFFFFFFFLL;
  }
  if (__n && !a6)
  {
    if (qword_1001F4A58 != -1) {
      dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
    }
    if (!_NRLogIsLevelEnabled()) {
      return 0xFFFFFFFFLL;
    }
    if (qword_1001F4A58 == -1) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
  long long v27 = 0uLL;
  switch(a2)
  {
    case 1:
      if (a7 && *a7 >= 0x21u)
      {
        if (qword_1001F4A58 != -1) {
          dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
        }
        if (_NRLogIsLevelEnabled())
        {
          id v14 = sub_1000B9E04();
          _NRLogWithArgs();
        }
        return 0xFFFFFFFFLL;
      }
      WORD5(v27) = -1;
      uint64_t v15 = (char *)&v27 + 12;
      a6 += 12;
      unsigned int v16 = 32;
      if (a7) {
        goto LABEL_29;
      }
      break;
    case 2:
      uint64_t v15 = (char *)&v27;
      unsigned int v16 = 128;
      if (a7) {
LABEL_29:
      }
        unsigned int v16 = *a7;
      break;
    case 3:
      LOWORD(v27) = -32514;
      uint64_t v15 = (char *)&v27 + 8;
      a6 += 8;
      unsigned int v16 = 64;
      if (a7) {
        goto LABEL_29;
      }
      break;
    default:
      if (qword_1001F4A58 != -1) {
        dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
      }
      if (!_NRLogIsLevelEnabled()) {
        return 0xFFFFFFFFLL;
      }
      id v24 = sub_1000B9E04();
      goto LABEL_67;
  }
  unsigned int v17 = v16 >> 3;
  if (v16 >> 3 < __n)
  {
    if (qword_1001F4A58 != -1) {
      dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
    }
    if (!_NRLogIsLevelEnabled()) {
      return 0xFFFFFFFFLL;
    }
    if (qword_1001F4A58 != -1) {
      dispatch_once(&qword_1001F4A58, &stru_1001C71C0);
    }
    goto LABEL_36;
  }
  int v18 = v16 & 7;
  if (v17 > __n)
  {
    if (!__src)
    {
      id v25 = sub_1000B9E04();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        return 0xFFFFFFFFLL;
      }
LABEL_66:
      id v24 = sub_1000B9E04();
LABEL_67:
      _NRLogWithArgs();

      return 0xFFFFFFFFLL;
    }
    if ((v16 & 7) != 0) {
      unsigned __int8 v19 = (v16 >> 3) - __n + 1;
    }
    else {
      unsigned __int8 v19 = v17 - __n;
    }
    if (a4 < v19)
    {
      id v20 = sub_1000B9E04();
      int v21 = _NRLogIsLevelEnabled();

      if (!v21) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_66;
    }
  }
  if (__n) {
    memcpy(v15, a6, __n);
  }
  long long v22 = &v15[v9];
  if (v17 <= v9)
  {
    unsigned int v23 = 0;
  }
  else
  {
    unsigned int v23 = v17 - v9;
    memcpy(v22, __src, (int)(v17 - v9));
  }
  if (v18)
  {
    v22[v17] = *((unsigned char *)__src + (int)(v17 - v9)) & (-1 << (8 - v18));
    ++v23;
  }
  if (a2 == 1 && a7) {
    *a7 += 96;
  }
  *(_OWORD *)a1 = v27;
  if (v23 > a4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v23;
  }
}

void sub_1000C8B74(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 24);
  uint64_t v5 = 65021;
  uint64_t v6 = v2;
  unint64_t v3 = [[NRBabelPrefix alloc] initWithPrefix:&v5 plen:128];
  uint64_t v4 = [NRBabelSourceLocal alloc];

  [*(id *)(a1 + 32) setupAddress:&v5];
  [*(id *)(a1 + 32) setupInterfaces];
}

void sub_1000C9610(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v1 + 56));
  _Unwind_Resume(a1);
}

void sub_1000C9638(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handleIfBringupPathUpdate:v3];
}

void sub_1000CA120(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(void **)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  id v6 = v2;
  uint64_t v5 = [v3 instance];
  [v5 handlePacket:objc_msgSend(v6, "bytes") length:*(unsigned int *)(a1 + 64) remoteAddr:objc_msgSend(v4, "localAddress") localAddr:*(void *)(a1 + 56) babelInterface:*(void *)(a1 + 48) dtls:0];
}

void sub_1000CA48C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) interfaces];
  [v2 addObject:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 48) fakeInterfaces];
  [v3 addObject:*(void *)(a1 + 40)];
}

void sub_1000CB3A4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_1000CB3C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = WeakRetained;
    if (WeakRetained[208]) {
      [WeakRetained upgradeSessionsIfNeeded];
    }
    else {
      [WeakRetained setupIPsecIfNecessary:3];
    }
    id WeakRetained = v2;
  }
}

void sub_1000CB740(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1000CB764(uint64_t a1)
{
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (char *)WeakRetained;
  if (WeakRetained && WeakRetained[16] != 255 && *(void *)(WeakRetained + 239))
  {
    objc_initWeak(&location, WeakRetained);
    id v3 = *(void **)(v2 + 239);
    id v4 = sub_10011FC08();
    id v10 = v4;
    uint64_t v5 = +[NSArray arrayWithObjects:&v10 count:1];
    id v6 = [v2 queue];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    id v7[2] = sub_1000CB8F4;
    v7[3] = &unk_1001C7A00;
    objc_copyWeak(&v8, &location);
    [v3 sendPrivateNotifies:v5 maxRetries:10 retryIntervalInMilliseconds:1000 callbackQueue:v6 callback:v7];

    objc_destroyWeak(&v8);
    objc_destroyWeak(&location);
  }
}

void sub_1000CB8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CB8F4(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v14 = WeakRetained;
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    if (a2)
    {
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v6 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v11 = 913;
        id v12 = [v14 copyDescription];
        unsigned int v9 = "";
        id v10 = "-[NRLinkWired sendClassCUnlockedNotify]_block_invoke_2";
        _NRLogWithArgs();
      }
      [v14 setSentLocalClassCUnlockNotify:1, v9, v10, v11, v12];
      [v14 upgradeSessionsIfNeeded];
    }
    else
    {
      int v7 = _NRLogIsLevelEnabled();

      id WeakRetained = v14;
      if (!v7) {
        goto LABEL_9;
      }
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      id v13 = [v14 copyDescription];
      _NRLogWithArgs();
    }
    id WeakRetained = v14;
  }
LABEL_9:
}

void sub_1000CBC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000CBC74()
{
  if (qword_1001F4A68 != -1) {
    dispatch_once(&qword_1001F4A68, &stru_1001C73E0);
  }
  id v0 = (void *)qword_1001F4A60;

  return v0;
}

void sub_1000CBCC8(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v10 = WeakRetained;
    BOOL v4 = [WeakRetained state] == 255;
    id WeakRetained = v10;
    if (!v4)
    {
      uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
      if (a2)
      {
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        id WeakRetained = v10;
        if (!IsLevelEnabled) {
          goto LABEL_8;
        }
      }
      else
      {
        int v7 = _NRLogIsLevelEnabled();

        id WeakRetained = v10;
        if (!v7) {
          goto LABEL_8;
        }
      }
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      id v9 = [v10 copyDescription];
      _NRLogWithArgs();

      id WeakRetained = v10;
    }
  }
LABEL_8:
}

void sub_1000CBDFC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4A60;
  qword_1001F4A60 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000CCA88(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000CCA9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    BOOL v3 = [WeakRetained state] == 255;
    id WeakRetained = v4;
    if (!v3)
    {
      [v4 setupIPsecIfNecessary:*(unsigned __int8 *)(a1 + 40)];
      id WeakRetained = v4;
    }
  }
}

void sub_1000CD6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *location, id *a17)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(location);
  objc_destroyWeak(a17);
  objc_destroyWeak((id *)(v22 - 112));
  _Unwind_Resume(a1);
}

void sub_1000CD74C(uint64_t a1, uint64_t a2, void *a3)
{
  id v72 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    int v7 = [WeakRetained linkDelegate];
    id v8 = v72;
    if (v72)
    {
      int v9 = *(unsigned __int8 *)(a1 + 56);
      if (v9 == 4
        || v9 == 3
        && ([v6 setIkeClassCEstablished:0],
            unsigned int v10 = [v6 onlyAllowClassC],
            id v8 = v72,
            v10))
      {
        [v6 setIkeClassDEstablished:0, v8];
        id v8 = v72;
      }
      [v6 processIKEDisconnection:*(unsigned __int8 *)(a1 + 56) error:v8];
      if ([v6 state] != 255)
      {
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
        [v6 reportEvent:3018, @"%@ session %@ got IKE error %@ with state %@", v11, v12, v72, SessionStateString detailsFormat];

LABEL_9:
        [v6 restartIKESessionForDataProtectionClass:*(unsigned __int8 *)(a1 + 56)];
      }
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      unsigned int v16 = (void *)NEIKEv2CreateSessionStateString();
      [v6 reportEvent:3009, @"%@ session %@ changed state to %@", v14, v15, v16 detailsFormat];

      switch(a2)
      {
        case 1:
          if ([v6 state] == 1)
          {
            unsigned int v17 = (void *)_NRCopyLogObjectForNRUUID();
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              unsigned __int8 v19 = (void *)_NRCopyLogObjectForNRUUID();
              id v20 = [v6 copyDescription];
              uint64_t v70 = *(void *)(a1 + 32);
              uint64_t v71 = *(void *)(a1 + 40);
              uint64_t v66 = 413;
              id v68 = v20;
              int v60 = "";
              uint64_t v63 = "-[NRLinkWired setupIKECallbacks:]_block_invoke";
              _NRLogWithArgs();
            }
            [v6 changeStateTo:5 v60 v63 v66 v68 v70 v71];
          }
          else
          {
            unsigned int v33 = [v6 state];
            BOOL v34 = (void *)_NRCopyLogObjectForNRUUID();
            if (v33 == 5)
            {
              int v35 = _NRLogIsLevelEnabled();

              if (!v35) {
                break;
              }
            }
            else
            {
              int v54 = _NRLogIsLevelEnabled();

              if (!v54) {
                break;
              }
            }
            id v55 = (void *)_NRCopyLogObjectForNRUUID();
            id v56 = [v6 copyDescription];
            _NRLogWithArgs();
          }
          break;
        case 2:
          int v21 = (void *)_NRCopyLogObjectForNRUUID();
          int v22 = _NRLogIsLevelEnabled();

          if (v22)
          {
            unsigned int v23 = (void *)_NRCopyLogObjectForNRUUID();
            id v24 = [v6 copyDescription];
            uint64_t v70 = *(void *)(a1 + 32);
            uint64_t v71 = *(void *)(a1 + 40);
            uint64_t v66 = 421;
            id v68 = v24;
            int v60 = "";
            uint64_t v63 = "-[NRLinkWired setupIKECallbacks:]_block_invoke";
            _NRLogWithArgs();
          }
          int v25 = *(unsigned __int8 *)(a1 + 56);
          if (v25 == 4
            || v25 == 3
            && ([v6 setIkeClassCEstablished:1], objc_msgSend(v6, "onlyAllowClassC")))
          {
            [v6 setIkeClassDEstablished:1 v60 v63 v66 v68 v70 v71];
          }
          if (objc_msgSend(v6, "state", v60, v63) == 8)
          {
            uint64_t v26 = (void *)_NRCopyLogObjectForNRUUID();
            int v27 = _NRLogIsLevelEnabled();

            if (v27)
            {
              int v28 = (void *)_NRCopyLogObjectForNRUUID();
              id v29 = [v6 copyDescription];
              uint64_t v70 = *(void *)(a1 + 32);
              uint64_t v71 = *(void *)(a1 + 40);
              uint64_t v66 = 432;
              id v68 = v29;
              id v61 = "";
              uint64_t v64 = "-[NRLinkWired setupIKECallbacks:]_block_invoke";
              _NRLogWithArgs();
            }
            [v7 linkIsReady:v6, v61, v64, v66, v68, v70, v71];
          }
          else
          {
            if ([v6 state] != 5)
            {
              uint64_t v36 = (void *)_NRCopyLogObjectForNRUUID();
              int v37 = _NRLogIsLevelEnabled();

              if (v37)
              {
                uint64_t v38 = (void *)_NRCopyLogObjectForNRUUID();
                id v39 = [v6 copyDescription];
                uint64_t v70 = *(void *)(a1 + 32);
                uint64_t v71 = *(void *)(a1 + 40);
                uint64_t v66 = 436;
                id v68 = v39;
                id v61 = "";
                uint64_t v64 = "-[NRLinkWired setupIKECallbacks:]_block_invoke";
                _NRLogWithArgs();
              }
            }
            [v6 changeStateTo:8 v61 v64 v66 v68 v70 v71];
            [v7 linkIsReady:v6];
            if ([v6 shouldCreateCompanionProxyAgent])
            {
              uint64_t v40 = [v6 companionProxyAgent];

              if (!v40)
              {
                [v6 virtualInterface];
                id v41 = (void *)NEVirtualInterfaceCopyName();
                id v42 = [v6 nrUUID];
                id v43 = sub_10013DC5C((uint64_t)NRDLocalDevice, v42);
                uint64_t v44 = v43;
                if (v43) {
                  id v45 = (void *)*((void *)v43 + 14);
                }
                else {
                  id v45 = 0;
                }
                id v46 = v45;

                if (v41 && v46)
                {
                  dispatch_time_t v47 = [NRCompanionProxyAgent alloc];
                  long long v48 = [v6 queue];
                  id v49 = [v6 nrUUID];
                  int v50 = sub_100064188((id *)&v47->super.isa, v48, v41, v46, v49);
                  id v51 = (void *)v6[11];
                  v6[11] = v50;

                  [v6 reportEvent:12001];
                }
              }
              id v52 = [v6 companionProxyAgent];
              char v53 = sub_1000644C0((uint64_t)v52);

              if (v53)
              {
                [v6 reportEvent:12002];
              }
              else
              {
                id v57 = (void *)_NRCopyLogObjectForNRUUID();
                int v58 = _NRLogIsLevelEnabled();

                if (v58)
                {
                  id v59 = (void *)_NRCopyLogObjectForNRUUID();
                  uint64_t v67 = 453;
                  id v69 = [v6 copyDescription];
                  int v62 = "";
                  uint64_t v65 = "-[NRLinkWired setupIKECallbacks:]_block_invoke";
                  _NRLogWithArgs();
                }
              }
            }
          }
          [v6 sendClassCUnlockedNotify:v62:v65:v67:v69];
          break;
        case 3:
          int v30 = *(unsigned __int8 *)(a1 + 56);
          if (v30 == 4
            || v30 == 3
            && ([v6 setIkeClassCEstablished:0], objc_msgSend(v6, "onlyAllowClassC")))
          {
            [v6 setIkeClassDEstablished:0];
          }
          [v6 reportEvent:3018, @"%@ session %@ cancelled by peer", *(void *)(a1 + 32), *(void *)(a1 + 40) detailsFormat];
          goto LABEL_9;
        case 4:
          [v6 cancelWithReason:@"%@ session %@ got unexpected MOBIKE state", *(void *)(a1 + 32), *(void *)(a1 + 40)];
          break;
        default:
          uint64_t v31 = *(void *)(a1 + 32);
          id v32 = (void *)NEIKEv2CreateSessionStateString();
          [v6 cancelWithReason:@"%@ session %@ got bad IKE state %@", v31, v32];

          break;
      }
    }
  }
}

void sub_1000CDE9C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v14 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (v14)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      SessionStateid String = (void *)NEIKEv2CreateSessionStateString();
      [WeakRetained reportEvent:3018, @"%@ session %@ got child %u state update %@ error %@", v8, v9, a2, SessionStateString, v14 detailsFormat];

      [WeakRetained processIKEDisconnection:*(unsigned __int8 *)(a1 + 56) error:v14];
      if ([WeakRetained state] == 255) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      if (a3 != 3)
      {
        id v13 = (void *)NEIKEv2CreateSessionStateString();
        [WeakRetained reportEvent:3009, @"%@ session %@ child %u state update %@", v11, v12, a2, v13 detailsFormat];

        goto LABEL_9;
      }
      [WeakRetained reportEvent:3018, @"%@ session %@ got child %u Disconnected state with no error", v11, *(void *)(a1 + 40), a2 detailsFormat];
    }
    [WeakRetained restartIKESessionForDataProtectionClass:*(unsigned __int8 *)(a1 + 56)];
  }
LABEL_9:
}

void sub_1000CDFD4(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_1000CE0B4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v12 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      unsigned int v10 = (void *)_NRCopyLogObjectForNRUUID();
      id v11 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_1000CE1B4(uint64_t a1, void *a2)
{
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      id v7 = [WeakRetained copyDescription];
      _NRLogWithArgs();
    }
  }
}

void sub_1000CE294(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    id WeakRetained = v6;
    if (IsLevelEnabled)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      id v5 = [v6 copyDescription];
      _NRLogWithArgs();

      id WeakRetained = v6;
    }
  }
}

void sub_1000CE368(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v5 = [v3 sortedArrayUsingComparator:&stru_1001C7DE8];
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      id v9 = [WeakRetained copyDescription];
      uint64_t v23 = *(void *)(a1 + 40);
      id v24 = v5;
      id v21 = v9;
      uint64_t v22 = *(void *)(a1 + 32);
      unsigned __int8 v19 = "-[NRLinkWired setupIKECallbacks:]_block_invoke_7";
      uint64_t v20 = 556;
      int v18 = "";
      _NRLogWithArgs();
    }
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v10 = v5;
    id v11 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v26;
      do
      {
        for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          id v16 = [v15 notifyStatus:v18, v19, v20, v21, v22, v23, v24];
          unsigned int v17 = [v15 notifyData];
          [WeakRetained handleNotifyCode:v16 payload:v17];
        }
        id v12 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v12);
    }
  }
}

void sub_1000CEB2C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000CEB50(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v14 = WeakRetained;
    BOOL v4 = [WeakRetained state] == 255;
    id WeakRetained = v14;
    if (!v4)
    {
      v14[83] = 0;
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (a2)
      {
        id WeakRetained = v14;
        if (!IsLevelEnabled) {
          goto LABEL_10;
        }
        id v7 = (void *)_NRCopyLogObjectForNRUUID();
        id v13 = [v14 copyDescription];
        _NRLogWithArgs();
      }
      else
      {
        if (IsLevelEnabled)
        {
          id v8 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v11 = 304;
          id v12 = [v14 copyDescription];
          id v9 = "";
          id v10 = "-[NRLinkWired checkPeerAvailabilityWithForceAggressive:]_block_invoke";
          _NRLogWithArgs();
        }
        [v14 cancelWithReason:@"Dead Peer Detection" v9, v10, v11, v12];
      }
      id WeakRetained = v14;
    }
  }
LABEL_10:
}

id sub_1000CEE60(uint64_t a1)
{
  return [*(id *)(a1 + 32) setupIPsecIfNecessary:3];
}

void sub_1000CF0D8(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_1000CF10C(uint64_t a1, int a2, unsigned int a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    id v21 = WeakRetained;
    id WeakRetained = [WeakRetained state];
    id v7 = v21;
    if (WeakRetained != 255)
    {
      id v8 = objc_loadWeakRetained((id *)(a1 + 40));
      if (!v8) {
        goto LABEL_30;
      }
      id v9 = [v21 pairingClient];

      if (v9 != v8) {
        goto LABEL_30;
      }
      uint64_t v10 = [v21 pairingClient];
      uint64_t v11 = (void *)v10;
      if (v10) {
        uint64_t v12 = *(void *)(v10 + 48);
      }
      else {
        LOBYTE(v12) = 0;
      }
      id v13 = objc_alloc_init((Class)NSMutableString);
      id v14 = v13;
      if (v12)
      {
        [v13 appendFormat:@"PairingSessionConnected | "];
        if ((v12 & 2) == 0)
        {
LABEL_9:
          if ((v12 & 4) == 0) {
            goto LABEL_10;
          }
          goto LABEL_17;
        }
      }
      else if ((v12 & 2) == 0)
      {
        goto LABEL_9;
      }
      [v14 appendFormat:@"ClassDVerified | "];
      if ((v12 & 4) == 0)
      {
LABEL_10:
        if ((v12 & 8) == 0) {
          goto LABEL_11;
        }
        goto LABEL_18;
      }
LABEL_17:
      [v14 appendFormat:@"ClassCVerified | "];
      if ((v12 & 8) == 0)
      {
LABEL_11:
        if ((v12 & 0x10) == 0) {
          goto LABEL_12;
        }
        goto LABEL_19;
      }
LABEL_18:
      [v14 appendFormat:@"ClassAVerified | "];
      if ((v12 & 0x10) == 0)
      {
LABEL_12:

        if (a3)
        {
LABEL_13:
          if (a3 > 8) {
            uint64_t v15 = @"None";
          }
          else {
            uint64_t v15 = *(&off_1001C5E80 + (a3 - 1));
          }
          [v21 cancelWithReason:@"pairing client error: %@ mask: %@", v15, v14];
LABEL_29:

LABEL_30:
          id v7 = v21;
          goto LABEL_31;
        }
LABEL_20:
        if ((a2 - 1) > 6) {
          uint64_t v15 = @"Invalid";
        }
        else {
          uint64_t v15 = *(&off_1001C5EC0 + (a2 - 1));
        }
        id v16 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          int v18 = (void *)_NRCopyLogObjectForNRUUID();
          id v20 = [v21 copyDescription];
          _NRLogWithArgs();
        }
        if (a2 == 5) {
          [v21 initiateConnection];
        }
        goto LABEL_29;
      }
LABEL_19:
      [v14 appendFormat:@"PairingCompleted | "];

      if (a3) {
        goto LABEL_13;
      }
      goto LABEL_20;
    }
  }
LABEL_31:

  return _objc_release_x1(WeakRetained, v7);
}

id sub_1000CFBB4()
{
  if (qword_1001F4A78 != -1) {
    dispatch_once(&qword_1001F4A78, &stru_1001C7400);
  }
  id v0 = (void *)qword_1001F4A70;

  return v0;
}

void sub_1000CFC08(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4A70;
  qword_1001F4A70 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000CFEB4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 255)
  {
    if (qword_1001F4A78 != -1) {
      dispatch_once(&qword_1001F4A78, &stru_1001C7400);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A78 != -1) {
        dispatch_once(&qword_1001F4A78, &stru_1001C7400);
      }
      _NRLogWithArgs();
    }
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkDidReceiveData:*(void *)(a1 + 32) data:*(void *)(a1 + 48)];
  }
}

void sub_1000D01D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  [WeakRetained linkIsUnavailable:*(void *)(a1 + 40)];

  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v6 = sub_100145E28();
    if ([v6 count]) {
      sub_1000D029C(v4, v6);
    }
    id v5 = sub_100145B78();
    if ([v5 count]) {
      sub_1000D029C(v4, v5);
    }
  }
}

void sub_1000D029C(uint64_t a1, void *a2)
{
  id v140 = a2;
  long long v177 = 0u;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  id obj = [*(id *)(a1 + 40) copy];
  uint64_t v138 = a1;
  id v147 = [obj countByEnumeratingWithState:&v177 objects:v189 count:16];
  if (v147)
  {
    uint64_t v145 = *(void *)v178;
    do
    {
      for (uint64_t i = 0; i != v147; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v178 != v145) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v177 + 1) + 8 * i);
        id v6 = *(id *)(a1 + 80);
        id v7 = [v5 localInterfaceName];
        id v8 = [v6 objectForKeyedSubscript:v7];

        if (!v8 || ![v8 count]) {
          [v5 cancelWithReason:@"interface went away"];
        }

        id v9 = *(id *)(v138 + 88);
        uint64_t v10 = [v5 nrUUID];
        uint64_t v11 = [v9 objectForKeyedSubscript:v10];

        if (!v11) {
          goto LABEL_6;
        }
        long long v175 = 0u;
        long long v176 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        uint64_t v12 = [v11 interfaceToPeerAddressDictionary];
        id v13 = [v12 allValues];

        id v14 = [v13 countByEnumeratingWithState:&v173 objects:v188 count:16];
        if (!v14)
        {
LABEL_5:

LABEL_6:
          id v4 = 0;
          goto LABEL_7;
        }
        id v15 = v14;
        uint64_t v16 = *(void *)v174;
LABEL_17:
        uint64_t v17 = 0;
        while (1)
        {
          if (*(void *)v174 != v16) {
            objc_enumerationMutation(v13);
          }
          int v18 = *(void **)(*((void *)&v173 + 1) + 8 * v17);
          unsigned __int8 v19 = [v5 remoteOuterEndpoint];
          unsigned __int8 v20 = [v18 containsObject:v19];

          if (v20) {
            break;
          }
          if (v15 == (id)++v17)
          {
            id v15 = [v13 countByEnumeratingWithState:&v173 objects:v188 count:16];
            if (v15) {
              goto LABEL_17;
            }
            goto LABEL_5;
          }
        }
        id v4 = v18;

        if (v4 && [v4 count]) {
          goto LABEL_8;
        }
LABEL_7:
        [v5 cancelWithReason:@"peer went away"];
LABEL_8:

        a1 = v138;
      }
      id v147 = [obj countByEnumeratingWithState:&v177 objects:v189 count:16];
    }
    while (v147);
  }

  long long v171 = 0u;
  long long v172 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  id v117 = v140;
  id v120 = [v117 countByEnumeratingWithState:&v169 objects:v187 count:16];
  if (v120)
  {
    id location = (id *)(a1 + 16);
    uint64_t v119 = *(void *)v170;
    do
    {
      uint64_t v21 = 0;
      do
      {
        if (*(void *)v170 != v119)
        {
          uint64_t v23 = v21;
          objc_enumerationMutation(v117);
          uint64_t v21 = v23;
        }
        uint64_t v124 = v21;
        id v24 = *(void **)(*((void *)&v169 + 1) + 8 * v21);
        long long v25 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, v24);
        unsigned int v126 = v25;
        if (!v25 || (id v26 = v25[16], v26, !v26))
        {
          if (qword_1001F4A78 != -1) {
            dispatch_once(&qword_1001F4A78, &stru_1001C7400);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4A78 != -1) {
              dispatch_once(&qword_1001F4A78, &stru_1001C7400);
            }
            uint64_t v114 = 199;
            id v115 = (id *)v24;
            id v112 = "";
            id v113 = "-[NRLinkManagerWired createLinkForNRUUIDs:]";
            _NRLogWithArgs();
          }
          goto LABEL_34;
        }
        if (!*((unsigned char *)v126 + 9))
        {
          if (qword_1001F4A78 != -1) {
            dispatch_once(&qword_1001F4A78, &stru_1001C7400);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4A78 != -1) {
              dispatch_once(&qword_1001F4A78, &stru_1001C7400);
            }
            uint64_t v114 = 204;
            id v115 = (id *)v24;
            id v112 = "";
            id v113 = "-[NRLinkManagerWired createLinkForNRUUIDs:]";
            _NRLogWithArgs();
          }
          goto LABEL_34;
        }
        if (a1) {
          id WeakRetained = objc_loadWeakRetained(location);
        }
        else {
          id WeakRetained = 0;
        }
        unsigned int v28 = [WeakRetained perpetualStandaloneMeadowEnabledForNRUUID:v24 v112 v113 v114 v115];

        if (v28)
        {
          if (qword_1001F4A78 != -1) {
            dispatch_once(&qword_1001F4A78, &stru_1001C7400);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4A78 != -1) {
              dispatch_once(&qword_1001F4A78, &stru_1001C7400);
            }
            uint64_t v114 = 210;
            id v115 = v126;
            id v112 = "";
            id v113 = "-[NRLinkManagerWired createLinkForNRUUIDs:]";
            _NRLogWithArgs();
          }
          goto LABEL_34;
        }
        id v29 = v126;
        if (!*(unsigned char *)(a1 + 32))
        {
          if (qword_1001F4B80 != -1)
          {
            dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
            id v29 = v126;
          }
          if (!byte_1001F4B78)
          {
            id v46 = v29[16];
            id v29 = v126;
            if (v46)
            {
              dispatch_time_t v47 = v46;
              id v48 = v126[16];
              id v49 = [v48 allowedLinkTypes];
              unsigned __int8 v50 = [v49 containsObject:&off_1001D49D8];

              id v29 = v126;
              if ((v50 & 1) == 0)
              {
                if (qword_1001F4A78 != -1) {
                  dispatch_once(&qword_1001F4A78, &stru_1001C7400);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4A78 != -1) {
                    dispatch_once(&qword_1001F4A78, &stru_1001C7400);
                  }
                  uint64_t v114 = 219;
                  id v115 = v126;
                  id v112 = "";
                  id v113 = "-[NRLinkManagerWired createLinkForNRUUIDs:]";
                  _NRLogWithArgs();
                }
                goto LABEL_34;
              }
            }
          }
        }
        int v30 = v29;
        if (sub_100118D5C(v29) == 1)
        {
          if (*((unsigned char *)v30 + 15))
          {
            char v31 = 1;
            if (*((unsigned char *)v30 + 12)) {
              goto LABEL_68;
            }
          }
          else
          {
            if (*((unsigned char *)v30 + 14)) {
              BOOL v33 = 1;
            }
            else {
              BOOL v33 = *((unsigned __int16 *)v30 + 14) > 0x12u;
            }
            char v31 = v33;
            if (*((unsigned char *)v30 + 12))
            {
LABEL_68:
              if (*((unsigned char *)v30 + 13)) {
                char v32 = v31;
              }
              else {
                char v32 = 0;
              }
              goto LABEL_79;
            }
          }
        }
        char v32 = 0;
LABEL_79:
        char v34 = sub_100145D70((BOOL)v30);
        id v123 = [*(id *)(a1 + 88) objectForKeyedSubscript:v24];
        if (v123)
        {
          char v35 = v32 & ~v34;
          if (v35)
          {
            int v36 = 0;
          }
          else
          {
            long long v167 = 0u;
            long long v168 = 0u;
            long long v165 = 0u;
            long long v166 = 0u;
            id v37 = *(id *)(a1 + 40);
            id v38 = [v37 countByEnumeratingWithState:&v165 objects:v186 count:16];
            if (v38)
            {
              id v39 = v38;
              char v40 = v35;
              uint64_t v41 = *(void *)v166;
              do
              {
                for (j = 0; j != v39; j = (char *)j + 1)
                {
                  if (*(void *)v166 != v41) {
                    objc_enumerationMutation(v37);
                  }
                  id v43 = *(void **)(*((void *)&v165 + 1) + 8 * (void)j);
                  uint64_t v44 = [v43 nrUUID];
                  unsigned int v45 = [v44 isEqual:v24];

                  if (v45 && [v43 state] != 255)
                  {
                    int v36 = 1;
                    goto LABEL_97;
                  }
                }
                id v39 = [v37 countByEnumeratingWithState:&v165 objects:v186 count:16];
              }
              while (v39);
              int v36 = 0;
LABEL_97:
              char v35 = v40;
            }
            else
            {
              int v36 = 0;
            }
          }
          long long v163 = 0u;
          long long v164 = 0u;
          long long v161 = 0u;
          long long v162 = 0u;
          id v118 = [v123 interfaceToPeerAddressDictionary];
          id v122 = [v118 countByEnumeratingWithState:&v161 objects:v185 count:16];
          if (!v122) {
            goto LABEL_32;
          }
          uint64_t v121 = *(void *)v162;
          unsigned int v141 = v24;
          char v132 = v35;
LABEL_110:
          uint64_t v51 = 0;
          while (1)
          {
            if (*(void *)v162 != v121)
            {
              uint64_t v52 = v51;
              objc_enumerationMutation(v118);
              uint64_t v51 = v52;
            }
            if (!(v35 & 1 | ((v36 & 1) == 0))) {
              goto LABEL_32;
            }
            uint64_t v125 = v51;
            char v53 = *(void **)(*((void *)&v161 + 1) + 8 * v51);
            int v54 = [*(id *)(a1 + 80) objectForKeyedSubscript:v53];
            id v55 = [v123 interfaceToPeerAddressDictionary];
            id v148 = v53;
            id v130 = [v55 objectForKeyedSubscript:v53];

            long long v159 = 0u;
            long long v160 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            id v127 = v54;
            id v129 = [v127 countByEnumeratingWithState:&v157 objects:v184 count:16];
            if (v129)
            {
              uint64_t v128 = *(void *)v158;
LABEL_117:
              uint64_t v56 = 0;
LABEL_119:
              if (*(void *)v158 != v128)
              {
                uint64_t v57 = v56;
                objc_enumerationMutation(v127);
                uint64_t v56 = v57;
              }
              if (v35 & 1 | ((v36 & 1) == 0)) {
                break;
              }
            }
LABEL_111:

            uint64_t v51 = v125 + 1;
            if ((id)(v125 + 1) == v122)
            {
              id v122 = [v118 countByEnumeratingWithState:&v161 objects:v185 count:16];
              if (!v122) {
                goto LABEL_32;
              }
              goto LABEL_110;
            }
          }
          uint64_t v131 = v56;
          unsigned int v146 = *(void **)(*((void *)&v157 + 1) + 8 * v56);
          long long v155 = 0u;
          long long v156 = 0u;
          long long v153 = 0u;
          long long v154 = 0u;
          id v135 = v130;
          id v58 = [v135 countByEnumeratingWithState:&v153 objects:v183 count:16];
          if (!v58) {
            goto LABEL_118;
          }
          id v59 = v58;
          uint64_t v60 = *(void *)v154;
          uint64_t v133 = *(void *)v154;
          while (2)
          {
            uint64_t v61 = 0;
            id v134 = v59;
LABEL_128:
            if (*(void *)v154 != v60) {
              objc_enumerationMutation(v135);
            }
            if (!(v35 & 1 | ((v36 & 1) == 0))) {
              goto LABEL_118;
            }
            id obja = *(id *)(*((void *)&v153 + 1) + 8 * v61);
            if (!objc_msgSend((id)a1, "endpointsAreCompatible:remoteEndpoint:", v146)) {
              goto LABEL_127;
            }
            uint64_t v139 = v61;
            int v137 = v36;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            id v62 = [*(id *)(a1 + 40) copy];
            id v63 = [v62 countByEnumeratingWithState:&v149 objects:v182 count:16];
            if (!v63)
            {
LABEL_148:

              goto LABEL_149;
            }
            id v64 = v63;
            uint64_t v65 = *(void *)v150;
LABEL_135:
            uint64_t v66 = 0;
LABEL_140:
            if (*(void *)v150 != v65) {
              objc_enumerationMutation(v62);
            }
            uint64_t v67 = *(void **)(*((void *)&v149 + 1) + 8 * v66);
            id v68 = [v67 nrUUID:v112];
            if ([v68 isEqual:v24])
            {
              id v69 = [v67 localInterfaceName];
              unsigned int v70 = [v69 isEqualToString:v148];

              if (v70)
              {
                uint64_t v71 = [v67 localOuterEndpoint];
                id v68 = [v71 hostname];

                id v72 = [v67 remoteOuterEndpoint];
                uint64_t v73 = [v72 hostname];

                id v74 = [v146 hostname];
                if ([v68 isEqualToString:v74])
                {
                  uint64_t v75 = [obja hostname];
                  unsigned __int8 v76 = [v73 isEqualToString:v75];

                  id v24 = v141;
                  if (v76)
                  {
                    unsigned int v77 = [v67 state];

                    if (v77 != 255)
                    {
                      a1 = v138;
                      uint64_t v61 = v139;
                      char v35 = v132;
                      int v36 = v137;
                      uint64_t v60 = v133;
                      id v59 = v134;
                      goto LABEL_127;
                    }
LABEL_149:
                    id v78 = [obja hostname:v112];
                    self;
                    if (qword_1001F47E8 != -1) {
                      dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
                    }
                    id v79 = (id)qword_1001F47E0;
                    uint64_t v80 = @"62743";
                    if (!v79) {
                      uint64_t v80 = 0;
                    }
                    id v81 = v80;
                    id v82 = +[NWAddressEndpoint endpointWithHostname:v78 port:v81];

                    id v83 = [NRLinkWired alloc];
                    if (v138) {
                      uint64_t v84 = *(void **)(v138 + 24);
                    }
                    else {
                      uint64_t v84 = 0;
                    }
                    id v85 = v84;
                    self;
                    if (qword_1001F47E8 != -1) {
                      dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
                    }
                    id v136 = (id)qword_1001F47E0;
                    id v86 = @"62743";
                    if (!v136) {
                      id v86 = 0;
                    }
                    long long v87 = v86;
                    id v88 = v85;
                    id v89 = (id)v138;
                    id v90 = v24;
                    id objb = v148;
                    id v91 = v146;
                    id v92 = v82;
                    id v93 = v87;
                    if (!v83) {
                      goto LABEL_198;
                    }
                    if (!v88)
                    {
                      if (qword_1001F4A68 != -1) {
                        dispatch_once(&qword_1001F4A68, &stru_1001C73E0);
                      }
                      id v100 = (id)qword_1001F4A60;
                      int IsLevelEnabled = _NRLogIsLevelEnabled();

                      if (IsLevelEnabled)
                      {
                        if (qword_1001F4A68 == -1) {
                          goto LABEL_188;
                        }
LABEL_200:
                        dispatch_once(&qword_1001F4A68, &stru_1001C73E0);
                        goto LABEL_188;
                      }
LABEL_190:
                      uint64_t v99 = 0;
                      id v24 = v141;
                      id v96 = objb;
                      goto LABEL_166;
                    }
                    if (!v24)
                    {
                      if (qword_1001F4A68 != -1) {
                        dispatch_once(&qword_1001F4A68, &stru_1001C73E0);
                      }
                      id v102 = (id)qword_1001F4A60;
                      int v103 = _NRLogIsLevelEnabled();

                      if (!v103) {
                        goto LABEL_190;
                      }
                      if (qword_1001F4A68 != -1) {
                        goto LABEL_200;
                      }
LABEL_188:
                      id v24 = v141;
                      id v106 = (id)qword_1001F4A60;
                      id v112 = "-[NRLinkWired initLinkWithQueue:linkDelegate:nrUUID:localInterfaceName:localOuterEndpoint:r"
                             "emoteOuterEndpoint:listenerPortString:]";
                      goto LABEL_189;
                    }
                    if ((_NRIsUUIDNonZero() & 1) == 0)
                    {
                      if (qword_1001F4A68 != -1) {
                        dispatch_once(&qword_1001F4A68, &stru_1001C73E0);
                      }
                      id v104 = (id)qword_1001F4A60;
                      int v105 = _NRLogIsLevelEnabled();

                      if (!v105) {
                        goto LABEL_190;
                      }
                      if (qword_1001F4A68 != -1) {
                        dispatch_once(&qword_1001F4A68, &stru_1001C73E0);
                      }
                      id v24 = v141;
                      id v106 = (id)qword_1001F4A60;
LABEL_189:
                      _NRLogWithArgs();

LABEL_198:
                      uint64_t v99 = 0;
                      id v96 = objb;
                      goto LABEL_166;
                    }
                    if (!v148)
                    {
                      if (qword_1001F4A68 != -1) {
                        dispatch_once(&qword_1001F4A68, &stru_1001C73E0);
                      }
                      id v107 = (id)qword_1001F4A60;
                      int v108 = _NRLogIsLevelEnabled();

                      if (v108)
                      {
                        if (qword_1001F4A68 == -1) {
                          goto LABEL_188;
                        }
                        goto LABEL_200;
                      }
                      goto LABEL_190;
                    }
                    v181.receiver = v83;
                    v181.super_class = (Class)NRLinkWired;
                    id v94 = [super initLinkWithQueue:v88 linkDelegate:v89 nrUUID:v90];
                    if (!v94)
                    {
                      if (qword_1001F4A68 != -1) {
                        dispatch_once(&qword_1001F4A68, &stru_1001C73E0);
                      }
                      id v109 = (id)qword_1001F4A60;
                      int v110 = _NRLogIsLevelEnabled();

                      if (v110)
                      {
                        if (qword_1001F4A68 != -1) {
                          dispatch_once(&qword_1001F4A68, &stru_1001C73E0);
                        }
                        id v111 = (id)qword_1001F4A60;
                        _NRLogWithArgs();
                      }
                      id v83 = 0;
                      goto LABEL_198;
                    }
                    id v95 = v94;
                    [v94 setType:5];
                    [v95 setLocalInterfaceName:objb];
                    [v95 setLocalOuterEndpoint:v91];
                    [v95 setRemoteOuterEndpoint:v92];
                    [v95 setListenerPortString:v93];
                    [v95 setOnlyAllowClassC:1];
                    [v90 UUIDString];
                    v97 = id v96 = objb;
                    [v95 reportEvent:3000 details:v97];

                    uint64_t v98 = [v95 linkDelegate];
                    [v98 linkIsAvailable:v95];

                    id v83 = v95;
                    uint64_t v99 = v83;
LABEL_166:

                    if (v99)
                    {
                      int v36 = 1;
                      char v35 = v132;
                    }
                    else
                    {
                      [v89 reportEvent:3210];
                      char v35 = v132;
                      int v36 = v137;
                    }
                    uint64_t v60 = v133;
                    id v59 = v134;
                    a1 = v138;
                    uint64_t v61 = v139;

LABEL_127:
                    if ((id)++v61 == v59)
                    {
                      id v59 = [v135 countByEnumeratingWithState:&v153 objects:v183 count:16];
                      if (!v59)
                      {
LABEL_118:

                        uint64_t v56 = v131 + 1;
                        if ((id)(v131 + 1) != v129) {
                          goto LABEL_119;
                        }
                        id v129 = [v127 countByEnumeratingWithState:&v157 objects:v184 count:16];
                        if (v129) {
                          goto LABEL_117;
                        }
                        goto LABEL_111;
                      }
                      continue;
                    }
                    goto LABEL_128;
                  }
                }
                else
                {
                }
                goto LABEL_138;
              }
            }
            else
            {
LABEL_138:
            }
            break;
          }
          if (v64 == (id)++v66)
          {
            id v64 = [v62 countByEnumeratingWithState:&v149 objects:v182 count:16];
            if (!v64) {
              goto LABEL_148;
            }
            goto LABEL_135;
          }
          goto LABEL_140;
        }
        if (qword_1001F4A78 != -1) {
          dispatch_once(&qword_1001F4A78, &stru_1001C7400);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4A78 != -1) {
            dispatch_once(&qword_1001F4A78, &stru_1001C7400);
          }
          id v22 = (id)qword_1001F4A70;
          id v118 = sub_10013DC5C((uint64_t)NRDLocalDevice, v24);
          uint64_t v114 = 238;
          id v115 = (id *)v118;
          id v112 = "";
          id v113 = "-[NRLinkManagerWired createLinkForNRUUIDs:]";
          _NRLogWithArgs();

LABEL_32:
        }

LABEL_34:
        uint64_t v21 = v124 + 1;
      }
      while ((id)(v124 + 1) != v120);
      id v120 = [v117 countByEnumeratingWithState:&v169 objects:v187 count:16];
    }
    while (v120);
  }
}