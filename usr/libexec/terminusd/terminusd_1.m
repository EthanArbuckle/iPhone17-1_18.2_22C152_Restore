void sub_1000D180C(uint64_t a1)
{
  uint64_t v2;
  id WeakRetained;
  id v4;
  uint64_t vars8;

  if ([*(id *)(a1 + 32) state] == 9)
  {
    v2 = *(void *)(a1 + 40);
    if (v2) {
      WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      WeakRetained = 0;
    }
    v4 = WeakRetained;
    [WeakRetained linkIsSuspended:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4A78 != -1) {
      dispatch_once(&qword_1001F4A78, &stru_1001C7400);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A78 != -1) {
        dispatch_once(&qword_1001F4A78, &stru_1001C7400);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_1000D1B0C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 8)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsReady:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4A78 != -1) {
      dispatch_once(&qword_1001F4A78, &stru_1001C7400);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A78 != -1) {
        dispatch_once(&qword_1001F4A78, &stru_1001C7400);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_1000D1E2C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsAvailable:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4A78 != -1) {
      dispatch_once(&qword_1001F4A78, &stru_1001C7400);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A78 != -1) {
        dispatch_once(&qword_1001F4A78, &stru_1001C7400);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_1000D26B0(uint64_t a1)
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  uint64_t v2 = (id)qword_1001F4A18;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    if (v2) {
      BOOL v4 = v2[8] != 0;
    }
    else {
      BOOL v4 = 0;
    }
    *(unsigned char *)(v3 + 32) = v4;
  }
}

void sub_1000D274C(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 48) count];
    uint64_t v3 = *(void *)(a1 + 56);
    if (v2)
    {
      if (!v3)
      {
        v38.version = 0;
        memset(&v38.retain, 0, 24);
        v38.info = (void *)a1;
        SCDynamicStoreRef v4 = SCDynamicStoreCreate(kCFAllocatorDefault, @"NRLinkManagerWired", (SCDynamicStoreCallBack)sub_1000D3D48, &v38);
        *(void *)(a1 + 56) = v4;
        if (!v4)
        {
          id v21 = sub_1000CFBB4();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v23 = sub_1000CFBB4();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __error();
          goto LABEL_27;
        }
        SCDynamicStoreSetDisconnectCallBack();
      }
      uint64_t v29 = v3;
      id v5 = objc_alloc_init((Class)NSMutableArray);
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      uint64_t v30 = a1;
      id v31 = *(id *)(a1 + 48);
      id v6 = [v31 countByEnumeratingWithState:&v34 objects:v39 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v35;
        do
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(void *)v35 != v8) {
              objc_enumerationMutation(v31);
            }
            CFStringRef v10 = *(const __CFString **)(*((void *)&v34 + 1) + 8 * i);
            NetworkInterfaceEntity = (__CFString *)SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v10, kSCEntNetIPv4);
            v12 = (__CFString *)SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v10, kSCEntNetIPv6);
            [v5 addObject:NetworkInterfaceEntity];
            [v5 addObject:v12];
          }
          id v7 = [v31 countByEnumeratingWithState:&v34 objects:v39 count:16];
        }
        while (v7);
      }

      if (SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(v30 + 56), (CFArrayRef)v5, 0))
      {
        if (v29
          || (v13 = *(const __SCDynamicStore **)(v30 + 56),
              v14 = *(id *)(v30 + 24),
              LODWORD(v13) = SCDynamicStoreSetDispatchQueue(v13, v14),
              v14,
              v13))
        {
          v15 = *(id *)(v30 + 24);
          v32[0] = _NSConcreteStackBlock;
          v32[1] = 3221225472;
          v32[2] = sub_1000D2C78;
          v32[3] = &unk_1001C8840;
          v32[4] = v30;
          id v33 = v5;
          id v16 = v5;
          dispatch_async(v15, v32);

          return;
        }
        id v25 = sub_1000CFBB4();
        int v26 = _NRLogIsLevelEnabled();

        if (v26)
        {
          id v27 = sub_1000CFBB4();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __error();
        uint64_t v28 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v28 = 136446210;
        *(void *)(v28 + 4) = "-[NRLinkManagerWired setupSCDWatcher]";
LABEL_31:
        sub_1000CFBB4();
        _NRLogAbortWithPack();
      }
      id v18 = sub_1000CFBB4();
      int v19 = _NRLogIsLevelEnabled();

      if (v19)
      {
        id v20 = sub_1000CFBB4();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
LABEL_27:
      uint64_t v24 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v24 = 136446210;
      *(void *)(v24 + 4) = "-[NRLinkManagerWired setupSCDWatcher]";
      goto LABEL_31;
    }
    if (v3)
    {
      SCDynamicStoreSetDispatchQueue(*(SCDynamicStoreRef *)(a1 + 56), 0);
      v17 = *(const void **)(a1 + 56);
      if (v17)
      {
        CFRelease(v17);
        *(void *)(a1 + 56) = 0;
      }
    }
  }
}

void sub_1000D2C78(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = v1[7];
    uint64_t v3 = *(void **)(a1 + 40);
    SCDynamicStoreRef v4 = v1;
    if (*((_DWORD *)v4 + 3) != 1004 && v4[7] == v2)
    {
      id v5 = v4;
      sub_1000D2D10((uint64_t)v4, v3);
      SCDynamicStoreRef v4 = v5;
    }
  }
}

void sub_1000D2D10(uint64_t a1, void *a2)
{
  CFArrayRef v3 = a2;
  if (a1) {
    SCDynamicStoreRef v4 = *(void **)(a1 + 24);
  }
  else {
    SCDynamicStoreRef v4 = 0;
  }
  id v5 = v4;
  dispatch_assert_queue_V2(v5);

  CFDictionaryRef v101 = SCDynamicStoreCopyMultiple(*(SCDynamicStoreRef *)(a1 + 56), v3, 0);
  if (qword_1001F4A78 != -1) {
    dispatch_once(&qword_1001F4A78, &stru_1001C7400);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A78 != -1) {
      dispatch_once(&qword_1001F4A78, &stru_1001C7400);
    }
    uint64_t v90 = 401;
    CFDictionaryRef v91 = v101;
    v88 = "";
    v89 = "-[NRLinkManagerWired processSCDUpdate:]";
    _NRLogWithArgs();
  }
  uint64_t v105 = a1;
  long long v134 = 0u;
  long long v135 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  CFArrayRef v6 = v3;
  id v7 = [(__CFArray *)v6 countByEnumeratingWithState:&v132 objects:v146 count:16];
  if (v7)
  {
    id v8 = v7;
    int v9 = 0;
    char v10 = 0;
    uint64_t v11 = *(void *)v133;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v133 != v11) {
          objc_enumerationMutation(v6);
        }
        v13 = *(void **)(*((void *)&v132 + 1) + 8 * i);
        if (objc_msgSend(v13, "containsString:", kSCEntNetIPv4, v88, v89, v90, v91)) {
          char v10 = 1;
        }
        else {
          v9 |= [v13 containsString:kSCEntNetIPv6];
        }
      }
      id v8 = [(__CFArray *)v6 countByEnumeratingWithState:&v132 objects:v146 count:16];
    }
    while (v8);
  }
  else
  {
    LOBYTE(v9) = 0;
    char v10 = 0;
  }

  id v100 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v14 = v105;
  CFArrayRef v93 = v6;
  if (v10)
  {
    long long v130 = 0u;
    long long v131 = 0u;
    long long v128 = 0u;
    long long v129 = 0u;
    CFArrayRef v15 = v6;
    id v16 = [(__CFArray *)v15 countByEnumeratingWithState:&v128 objects:v145 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)v129;
      CFStringRef v20 = kSCEntNetIPv4;
      uint64_t v21 = *(void *)v129;
      uint64_t v97 = *(void *)v129;
      CFArrayRef v98 = v15;
      while (1)
      {
        if (v21 != v19) {
          objc_enumerationMutation(v15);
        }
        v22 = *(void **)(*((void *)&v128 + 1) + 8 * v18);
        if (objc_msgSend(v22, "containsString:", v20, v88, v89, v90, v91))
        {
          id obj = v17;
          long long v126 = 0u;
          long long v127 = 0u;
          long long v124 = 0u;
          long long v125 = 0u;
          id v23 = *(id *)(v14 + 48);
          id v24 = [v23 countByEnumeratingWithState:&v124 objects:v144 count:16];
          if (v24)
          {
            id v25 = v24;
            uint64_t v26 = *(void *)v125;
            while (2)
            {
              for (j = 0; j != v25; j = (char *)j + 1)
              {
                if (*(void *)v125 != v26) {
                  objc_enumerationMutation(v23);
                }
                uint64_t v28 = *(void *)(*((void *)&v124 + 1) + 8 * (void)j);
                if ([v22 containsString:v28])
                {
                  [v100 addObject:v28];
                  [*(id *)(v105 + 64) setObject:0 forKeyedSubscript:v28];
                  v102 = [(__CFDictionary *)v101 objectForKeyedSubscript:v22];
                  uint64_t v29 = [v102 objectForKeyedSubscript:kSCPropNetIPv4Addresses];
                  id v104 = objc_alloc_init((Class)NSMutableArray);
                  long long v120 = 0u;
                  long long v121 = 0u;
                  long long v122 = 0u;
                  long long v123 = 0u;
                  id v30 = v29;
                  id v31 = [v30 countByEnumeratingWithState:&v120 objects:v143 count:16];
                  if (v31)
                  {
                    unint64_t v32 = (unint64_t)v31;
                    uint64_t v33 = 0;
                    uint64_t v34 = *(void *)v121;
                    for (uint64_t k = *(void *)v121; ; uint64_t k = *(void *)v121)
                    {
                      if (k != v34) {
                        objc_enumerationMutation(v30);
                      }
                      CFDictionaryRef v36 = *(const __CFDictionary **)(*((void *)&v120 + 1) + 8 * v33);
                      uint64_t v138 = 0;
                      uint64_t v137 = 0;
                      if (inet_pton(2, (const char *)[(__CFDictionary *)v36 UTF8String], (char *)&v137 + 4) == 1)
                      {
                        unsigned int v37 = bswap32(HIDWORD(v137));
                        unsigned int v38 = v37 & 0xFF000000;
                        BOOL v41 = HIWORD(v37) == 43518 || v38 == 0 || v38 == 2130706432 || v37 >> 28 == 14;
                        unsigned int v42 = v37 & 0xFFFFFFF8;
                        if (v41 || HIDWORD(v137) == -1 || v42 == -1073741824)
                        {
                          if (qword_1001F4A78 != -1) {
                            dispatch_once(&qword_1001F4A78, &stru_1001C7400);
                          }
                          if (_NRLogIsLevelEnabled())
                          {
                            if (qword_1001F4A78 != -1) {
                              dispatch_once(&qword_1001F4A78, &stru_1001C7400);
                            }
                            uint64_t v90 = 437;
                            CFDictionaryRef v91 = v36;
                            v88 = "";
                            v89 = "-[NRLinkManagerWired processSCDUpdate:]";
                            _NRLogWithArgs();
                          }
                        }
                        else
                        {
                          v46 = +[NWAddressEndpoint endpointWithHostname:v36 port:@"0"];
                          [v104 addObject:v46];
                        }
                      }
                      if (++v33 >= v32)
                      {
                        id v45 = [v30 countByEnumeratingWithState:&v120 objects:v143 count:16];
                        if (!v45) {
                          break;
                        }
                        unint64_t v32 = (unint64_t)v45;
                        uint64_t v33 = 0;
                      }
                    }
                  }

                  if ([v104 count]) {
                    [*(id *)(v105 + 64) setObject:v104 forKeyedSubscript:v28];
                  }

                  goto LABEL_71;
                }
              }
              id v25 = [v23 countByEnumeratingWithState:&v124 objects:v144 count:16];
              if (v25) {
                continue;
              }
              break;
            }
          }
LABEL_71:

          uint64_t v14 = v105;
          id v17 = obj;
          CFArrayRef v6 = v93;
          uint64_t v19 = v97;
          CFArrayRef v15 = v98;
          CFStringRef v20 = kSCEntNetIPv4;
        }
        if (++v18 >= (unint64_t)v17)
        {
          id v47 = [(__CFArray *)v15 countByEnumeratingWithState:&v128 objects:v145 count:16];
          if (!v47) {
            break;
          }
          id v17 = v47;
          uint64_t v18 = 0;
        }
        uint64_t v21 = *(void *)v129;
      }
    }
  }
  if (v9)
  {
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    CFArrayRef v48 = v6;
    id v49 = [(__CFArray *)v48 countByEnumeratingWithState:&v116 objects:v142 count:16];
    if (v49)
    {
      id v50 = v49;
      uint64_t v51 = *(void *)v117;
      CFStringRef v52 = kSCEntNetIPv6;
      CFArrayRef v94 = v48;
      uint64_t v99 = *(void *)v117;
      do
      {
        v53 = 0;
        id v95 = v50;
        do
        {
          if (*(void *)v117 != v51) {
            objc_enumerationMutation(v48);
          }
          v55 = *(void **)(*((void *)&v116 + 1) + 8 * (void)v53);
          if (objc_msgSend(v55, "containsString:", v52, v88, v89))
          {
            long long v114 = 0u;
            long long v115 = 0u;
            long long v112 = 0u;
            long long v113 = 0u;
            id v56 = *(id *)(v14 + 48);
            id v57 = [v56 countByEnumeratingWithState:&v112 objects:v141 count:16];
            if (v57)
            {
              id v58 = v57;
              uint64_t v59 = *(void *)v113;
              while (2)
              {
                for (m = 0; m != v58; m = (char *)m + 1)
                {
                  if (*(void *)v113 != v59) {
                    objc_enumerationMutation(v56);
                  }
                  uint64_t v61 = *(void *)(*((void *)&v112 + 1) + 8 * (void)m);
                  if ([v55 containsString:v61])
                  {
                    [v100 addObject:v61];
                    [*(id *)(v105 + 72) setObject:0 forKeyedSubscript:v61];
                    v54 = [(__CFDictionary *)v101 objectForKeyedSubscript:v55];
                    v62 = [v54 objectForKeyedSubscript:kSCPropNetIPv6Addresses];
                    v63 = [v54 objectForKeyedSubscript:kSCPropNetIPv6Flags];
                    id v64 = [v62 count];
                    if (v64 == [v63 count])
                    {
                      v96 = v54;
                      v65 = (char *)[v62 count];
                      id v103 = objc_alloc_init((Class)NSMutableArray);
                      if (v65)
                      {
                        for (n = 0; n != v65; ++n)
                        {
                          v68 = [v63 objectAtIndexedSubscript:n];
                          CFDictionaryRef v69 = [v62 objectAtIndexedSubscript:n];
                          id v70 = [v68 unsignedIntValue];
                          if (((unsigned __int16)v70 & 0x101F) != 0)
                          {
                            id v71 = v70;
                            if (qword_1001F4A78 != -1) {
                              dispatch_once(&qword_1001F4A78, &stru_1001C7400);
                            }
                            if (_NRLogIsLevelEnabled())
                            {
                              if (qword_1001F4A78 != -1) {
                                dispatch_once(&qword_1001F4A78, &stru_1001C7400);
                              }
                              CFDictionaryRef v91 = v69;
                              id v92 = v71;
                              uint64_t v90 = 479;
                              v88 = "";
                              v89 = "-[NRLinkManagerWired processSCDUpdate:]";
                              _NRLogWithArgs();
                            }
                          }
                          else
                          {
                            uint64_t v138 = 0;
                            uint64_t v137 = 0;
                            int v140 = 0;
                            uint64_t v139 = 0;
                            if (inet_pton(30, (const char *)[(__CFDictionary *)v69 UTF8String], &v138) == 1)
                            {
                              int v72 = v138 | HIDWORD(v138) | v139;
                              if (!v72 && !HIDWORD(v139)
                                || (HIDWORD(v139) == 0x1000000 ? (BOOL v73 = v72 == 0) : (BOOL v73 = 0),
                                    v73 || v138 == 255 || (v138 & 0xC0FF) == 0x80FE))
                              {
                                if (qword_1001F4A78 != -1) {
                                  dispatch_once(&qword_1001F4A78, &stru_1001C7400);
                                }
                                if (_NRLogIsLevelEnabled())
                                {
                                  if (qword_1001F4A78 != -1) {
                                    dispatch_once(&qword_1001F4A78, &stru_1001C7400);
                                  }
                                  uint64_t v90 = 491;
                                  CFDictionaryRef v91 = v69;
                                  v88 = "";
                                  v89 = "-[NRLinkManagerWired processSCDUpdate:]";
                                  _NRLogWithArgs();
                                }
                              }
                              else
                              {
                                v67 = +[NWAddressEndpoint endpointWithHostname:v69 port:@"0"];
                                [v103 addObject:v67];
                              }
                            }
                          }
                        }
                      }
                      if (objc_msgSend(v103, "count", v88, v89)) {
                        [*(id *)(v105 + 72) setObject:v103 forKeyedSubscript:v61];
                      }

                      CFArrayRef v48 = v94;
                      id v50 = v95;
                      v54 = v96;
                    }
                    else
                    {
                      if (qword_1001F4A78 != -1) {
                        dispatch_once(&qword_1001F4A78, &stru_1001C7400);
                      }
                      if (_NRLogIsLevelEnabled())
                      {
                        if (qword_1001F4A78 != -1) {
                          dispatch_once(&qword_1001F4A78, &stru_1001C7400);
                        }
                        v88 = (const char *)v62;
                        v89 = (const char *)v63;
                        _NRLogWithArgs();
                      }
                    }

                    uint64_t v51 = v99;
                    goto LABEL_83;
                  }
                }
                id v58 = [v56 countByEnumeratingWithState:&v112 objects:v141 count:16];
                if (v58) {
                  continue;
                }
                break;
              }
            }
LABEL_83:

            CFStringRef v52 = kSCEntNetIPv6;
            uint64_t v14 = v105;
          }
          v53 = (char *)v53 + 1;
        }
        while (v53 != v50);
        id v50 = [(__CFArray *)v48 countByEnumeratingWithState:&v116 objects:v142 count:16];
      }
      while (v50);
    }
  }
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  id obja = v100;
  id v74 = [obja countByEnumeratingWithState:&v108 objects:v136 count:16];
  if (v74)
  {
    id v75 = v74;
    uint64_t v76 = *(void *)v109;
    do
    {
      for (ii = 0; ii != v75; ii = (char *)ii + 1)
      {
        if (*(void *)v109 != v76) {
          objc_enumerationMutation(obja);
        }
        uint64_t v78 = *(void *)(*((void *)&v108 + 1) + 8 * (void)ii);
        id v79 = objc_alloc_init((Class)NSMutableArray);
        [*(id *)(v14 + 64) objectForKeyedSubscript:v78];
        v81 = v80 = (id *)v14;

        if (v81)
        {
          v82 = [v80[8] objectForKeyedSubscript:v78];
          [v79 addObjectsFromArray:v82];
        }
        v83 = [v80[9] objectForKeyedSubscript:v78, v88, v89];

        if (v83)
        {
          v84 = [v80[9] objectForKeyedSubscript:v78];
          [v79 addObjectsFromArray:v84];
        }
        [v80[10] setObject:v79 forKeyedSubscript:v78];

        uint64_t v14 = (uint64_t)v80;
      }
      id v75 = [obja countByEnumeratingWithState:&v108 objects:v136 count:16];
    }
    while (v75);
  }

  if (qword_1001F4A78 != -1) {
    dispatch_once(&qword_1001F4A78, &stru_1001C7400);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A78 != -1) {
      dispatch_once(&qword_1001F4A78, &stru_1001C7400);
    }
    id v85 = (id)qword_1001F4A70;
    _NRLogWithArgs();
  }
  id v86 = sub_100145E28();
  if ([v86 count]) {
    sub_1000D029C(v14, v86);
  }
  id v87 = sub_100145B78();
  if ([v87 count]) {
    sub_1000D029C(v14, v87);
  }
}

void sub_1000D3B08(id a1, void *a2)
{
  if (a2)
  {
    CFArrayRef v3 = a2;
    SCDynamicStoreRef v4 = v3;
    if (*((_DWORD *)v3 + 3) != 1004 && v3[7] == a1)
    {
      if (qword_1001F4A78 != -1) {
        dispatch_once(&qword_1001F4A78, &stru_1001C7400);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A78 != -1) {
          dispatch_once(&qword_1001F4A78, &stru_1001C7400);
        }
        _NRLogWithArgs();
      }
      id v5 = v4[3];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000D3C6C;
      block[3] = &unk_1001C8BA8;
      id v7 = v4;
      dispatch_async(v5, block);
    }
  }
}

uint64_t sub_1000D3C6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    goto LABEL_15;
  }
  CFArrayRef v3 = *(const __SCDynamicStore **)(v2 + 56);
  if (!v3
    || (SCDynamicStoreSetDispatchQueue(v3, 0), (uint64_t v2 = *(void *)(a1 + 32)) != 0)
    && ((SCDynamicStoreRef v4 = *(const void **)(v2 + 56)) == 0
     || (CFRelease(v4), (uint64_t v5 = *(void *)(a1 + 32)) != 0)
     && (*(void *)(v5 + 56) = 0, (uint64_t v2 = *(void *)(a1 + 32)) != 0)))
  {
    CFArrayRef v6 = *(void **)(v2 + 64);
  }
  else
  {
LABEL_15:
    CFArrayRef v6 = 0;
  }
  [v6 removeAllObjects];
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    id v8 = *(void **)(v7 + 72);
  }
  else {
    id v8 = 0;
  }
  [v8 removeAllObjects];
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    char v10 = *(void **)(v9 + 80);
  }
  else {
    char v10 = 0;
  }
  [v10 removeAllObjects];
  uint64_t v11 = *(void *)(a1 + 32);

  return sub_1000D274C(v11);
}

void sub_1000D3D48(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    id v5 = a3;
    if (*((_DWORD *)v5 + 3) != 1004 && *((void *)v5 + 7) == a1)
    {
      id v6 = v5;
      sub_1000D2D10((uint64_t)v5, a2);
      id v5 = v6;
    }
  }
}

void sub_1000D3DC0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  char v10 = v9;
  if (a1)
  {
    if (v9)
    {
      uint64_t v11 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
      v12 = [*(id *)(a1 + 88) objectForKeyedSubscript:v9];
      if (v7 && [v7 count])
      {
        if (v8)
        {
          uint64_t v34 = a1;
          long long v35 = v10;
          if (!v12) {
            v12 = objc_alloc_init(NRDWiredPeer);
          }
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          id v36 = v7;
          id obj = v7;
          id v13 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
          if (v13)
          {
            id v14 = v13;
            uint64_t v15 = *(void *)v39;
            do
            {
              for (i = 0; i != v14; i = (char *)i + 1)
              {
                if (*(void *)v39 != v15) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v18 = [*(id *)(*((void *)&v38 + 1) + 8 * i) hostname];
                self;
                if (qword_1001F47E8 != -1) {
                  dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
                }
                id v19 = (id)qword_1001F47E0;
                CFStringRef v20 = @"62743";
                if (!v19) {
                  CFStringRef v20 = 0;
                }
                uint64_t v21 = v20;
                v22 = +[NWAddressEndpoint endpointWithHostname:v18 port:v21];

                id v23 = [(NRDWiredPeer *)v12 interfaceToPeerAddressDictionary];
                id v24 = [v23 objectForKeyedSubscript:v8];

                if (!v24 || ([v24 containsObject:v22] & 1) == 0)
                {
                  id v25 = objc_alloc_init((Class)NSMutableArray);
                  if ([v24 count]) {
                    [v25 addObjectsFromArray:v24];
                  }
                  [v25 addObject:v22];
                  id v17 = [(NRDWiredPeer *)v12 interfaceToPeerAddressDictionary];
                  [v17 setObject:v25 forKeyedSubscript:v8];
                }
              }
              id v14 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
            }
            while (v14);
          }

          char v10 = v35;
          id v7 = v36;
          a1 = v34;
          uint64_t v11 = &OBJC_IVAR___NRLinkQuickRelay__receivedDatagrams;
        }
      }
      else if (v8)
      {
        uint64_t v26 = [(NRDWiredPeer *)v12 interfaceToPeerAddressDictionary];
        [v26 setObject:0 forKeyedSubscript:v8];
      }
      else
      {
        [(NRDWiredPeer *)v12 setInterfaceToPeerAddressDictionary:0];
      }
      id v27 = [(NRDWiredPeer *)v12 interfaceToPeerAddressDictionary];
      id v28 = [v27 count];

      if (v28) {
        uint64_t v29 = v12;
      }
      else {
        uint64_t v29 = 0;
      }
      [*(id *)(a1 + v11[661]) setObject:v29 forKeyedSubscript:v10];
      if (qword_1001F4A78 != -1) {
        dispatch_once(&qword_1001F4A78, &stru_1001C7400);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4A78 != -1) {
          dispatch_once(&qword_1001F4A78, &stru_1001C7400);
        }
        id v30 = (id)qword_1001F4A70;
        _NRLogWithArgs();
      }
      sub_1000D41E0(a1);
    }
    else
    {
      id v31 = sub_1000CFBB4();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v33 = sub_1000CFBB4();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1000D41E0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableSet);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  CFArrayRef v3 = [*(id *)(a1 + 88) allValues];
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        id v9 = [v8 interfaceToPeerAddressDictionary];
        id v10 = [v9 count];

        if (v10)
        {
          uint64_t v11 = [v8 interfaceToPeerAddressDictionary];
          v12 = [v11 allKeys];
          [v2 addObjectsFromArray:v12];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }

  if ([*(id *)(a1 + 48) isEqualToSet:v2])
  {
    id v13 = sub_100145E28();
    if ([v13 count]) {
      sub_1000D029C(a1, v13);
    }
    id v14 = sub_100145B78();
    if ([v14 count]) {
      sub_1000D029C(a1, v14);
    }
  }
  else
  {
    objc_storeStrong((id *)(a1 + 48), v2);
    sub_1000D274C(a1);
  }
}

id sub_1000D49C8()
{
  if (qword_1001F4A88 != -1) {
    dispatch_once(&qword_1001F4A88, &stru_1001C7420);
  }
  v0 = (void *)qword_1001F4A80;

  return v0;
}

void sub_1000D4A1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4A80;
  qword_1001F4A80 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000D4E3C(uint64_t a1, void *a2)
{
  id v34 = a2;
  id v3 = [*(id *)(a1 + 128) ikeClassDEstablished];
  id v4 = v34;
  if (v3)
  {
    id v5 = *(void **)(a1 + 632);
    if (v5) {
      id v5 = (void *)v5[4];
    }
    uint64_t v6 = v5;
    unsigned int v7 = [v6 containsObject:v34];

    id v4 = v34;
    if (v7)
    {
      nw_endpoint_t v8 = *(nw_endpoint_t *)(a1 + 632);
      id v9 = v34;
      if (v8)
      {
        if (BYTE1(v8[1].isa))
        {
          nw_endpoint_t v8 = 0;
        }
        else
        {
          self;
          if (qword_1001F4AE8 != -1) {
            dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
          }
          nw_endpoint_t v8 = sub_1001029F8(qword_1001F4AE0, v9);
        }
      }

      uint64_t v10 = *(void *)(a1 + 632);
      id v11 = v9;
      if (!v10 || *(unsigned char *)(v10 + 9))
      {
        v12 = 0;
        goto LABEL_30;
      }
      self;
      if (qword_1001F4AE8 != -1) {
        dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
      }
      v12 = (id *)qword_1001F4AE0;
      id v13 = v11;
      id v14 = v13;
      if (v12)
      {
        if (v13)
        {
          uint64_t v15 = [v12[3] objectForKeyedSubscript:v13];
          id v16 = (id)v15;
          if (v15)
          {
            v12 = (id *)sub_1000FF6F8(*(void **)(v15 + 40));
LABEL_23:

            goto LABEL_24;
          }
LABEL_22:
          v12 = 0;
          goto LABEL_23;
        }
        id v17 = sub_1000FF6A4();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v16 = sub_1000FF6A4();
          _NRLogWithArgs();
          goto LABEL_22;
        }
        v12 = 0;
      }
LABEL_24:

      if (!v8 || !v12) {
        goto LABEL_31;
      }
      id v11 = +[NWAddressEndpoint endpointWithCEndpoint:v8];
      id v19 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
      CFStringRef v20 = [v11 port];
      id v33 = v19;
      uint64_t v21 = sub_100140FAC(v19, v20);

      v22 = [v21 port];
      unint64_t v32 = v21;
      uint64_t v23 = sub_100116B0C(v21, (unsigned __int16)[v22 intValue], 0);

      id v24 = objc_alloc_init((Class)NSMutableData);
      id v25 = [v14 dataUsingEncoding:4];
      NRTLVAddData();
      NRTLVAddData();
      id v31 = (void *)v23;
      NRTLVAddData();
      id v26 = objc_alloc_init((Class)NSMutableData);
      NRTLVAddData();
      id v27 = sub_100025474([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
      sub_100025B00((uint64_t)v27, 21, v26);
      sub_100027090((uint64_t)v27);
      uint64_t v28 = *(void *)(a1 + 632);
      id v29 = v14;
      if (v28 && !*(unsigned char *)(v28 + 9)) {
        [*(id *)(v28 + 32) removeObject:v29];
      }

LABEL_30:
LABEL_31:

      id v4 = v34;
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_1000D53DC(uint64_t a1, int a2, int a3)
{
  if (*(void *)(a1 + 632))
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(void **)(a1 + 640);
    if (!v6)
    {
      uint64_t v7 = +[NSUUID UUID];
      nw_endpoint_t v8 = *(void **)(v5 + 640);
      *(void *)(v5 + 640) = v7;

      uint64_t v6 = *(void **)(v5 + 640);
    }
    v147[0] = 0;
    v147[1] = 0;
    [v6 getUUIDBytes:v147];
    id v9 = *(void **)(v5 + 632);
    if (v9) {
      id v9 = (void *)v9[2];
    }
    uint64_t v10 = v9;
    id v11 = [v10 count];

    uint64_t v125 = v5;
    if (v11 && a2)
    {
      long long v138 = 0u;
      long long v139 = 0u;
      long long v136 = 0u;
      long long v137 = 0u;
      v12 = *(void **)(v5 + 632);
      int v116 = a3;
      if (v12) {
        v12 = (void *)v12[2];
      }
      id v13 = v12;
      id v14 = [v13 countByEnumeratingWithState:&v136 objects:v146 count:16];
      if (v14)
      {
        id v15 = v14;
        id obj = *(id *)v137;
        long long v119 = v13;
        do
        {
          id v16 = 0;
          id v124 = v15;
          do
          {
            if (*(id *)v137 != obj) {
              objc_enumerationMutation(v13);
            }
            if (*(unsigned char *)(v5 + 48))
            {
              CFStringRef v20 = *(void **)(*((void *)&v136 + 1) + 8 * (void)v16);
              if (!sub_100102EF0(*(void *)(v5 + 632), v20)
                || (id v21 = *(id *)(v5 + 128)) != 0
                && (v22 = v21, unsigned int v23 = [*(id *)(v5 + 128) type], v22, v23 != 4))
              {
                [v20 UTF8String:v112, v113, v114, v115];
                application_service = (void *)nw_endpoint_create_application_service();
                sub_1000D601C(v5, application_service);
                unsigned int v28 = [*(id *)(v5 + 128) ikeClassDEstablished];
                uint64_t v29 = *(void *)(v5 + 632);
                id v19 = v20;
                id v17 = application_service;
                if (v28)
                {
                  if (v29 && !*(unsigned char *)(v29 + 9))
                  {
                    self;
                    if (qword_1001F4AE8 != -1) {
                      dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
                    }
                    uint64_t v30 = qword_1001F4AE0;
                    id v18 = v19;
                    id v31 = v17;
                    unint64_t v32 = v31;
                    if (v30)
                    {
                      id v122 = v19;
                      if (v31)
                      {
                        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v30 + 8));
                        id v33 = [*(id *)(v30 + 32) objectForKeyedSubscript:v18];
                        if ([v33 count])
                        {
                          id v117 = v18;
                          id v120 = v17;
                          long long v142 = 0u;
                          long long v143 = 0u;
                          long long v140 = 0u;
                          long long v141 = 0u;
                          id v33 = v33;
                          id v34 = [v33 countByEnumeratingWithState:&v140 objects:v148 count:16];
                          if (v34)
                          {
                            id v35 = v34;
                            uint64_t v36 = *(void *)v141;
                            do
                            {
                              for (i = 0; i != v35; i = (char *)i + 1)
                              {
                                if (*(void *)v141 != v36) {
                                  objc_enumerationMutation(v33);
                                }
                                uint64_t v38 = *(void *)(*((void *)&v140 + 1) + 8 * i);
                                if (v38)
                                {
                                  if (!*(void *)(v38 + 56))
                                  {
                                    long long v39 = (void *)nw_array_create();
                                    objc_storeStrong((id *)(v38 + 56), v39);
                                  }
                                  nw_array_append();
                                  id v40 = *(id *)(v38 + 48);
                                  uint64_t v41 = (uint64_t)v40 + 16;
                                  uint64_t v42 = *(void *)(v38 + 56);
                                }
                                else
                                {

                                  nw_array_append();
                                  id v40 = 0;
                                  uint64_t v42 = 0;
                                  uint64_t v41 = 16;
                                }
                                (*(void (**)(id, uint64_t))v41)(v40, v42);
                              }
                              id v35 = [v33 countByEnumeratingWithState:&v140 objects:v148 count:16];
                            }
                            while (v35);
                          }

                          uint64_t v5 = v125;
                          id v17 = v120;
                          id v18 = v117;
                        }
LABEL_15:

                        id v19 = v122;
                      }
                      else
                      {
                        id v60 = sub_1000FF6A4();
                        int IsLevelEnabled = _NRLogIsLevelEnabled();

                        id v19 = v122;
                        if (IsLevelEnabled)
                        {
                          id v33 = sub_1000FF6A4();
                          long long v112 = "-[NRApplicationServiceManager reportBrowseResultAddedForASName:endpoint:]";
                          _NRLogWithArgs();
                          goto LABEL_15;
                        }
                      }
                    }

                    id v13 = v119;
                  }

                  id v15 = v124;
LABEL_18:

                  goto LABEL_19;
                }
                if (v29 && !*(unsigned char *)(v29 + 9))
                {
                  self;
                  if (qword_1001F4AE8 != -1) {
                    dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
                  }
                  uint64_t v43 = qword_1001F4AE0;
                  id v123 = v19;
                  id v44 = v19;
                  id v45 = v17;
                  v46 = v45;
                  if (v43)
                  {
                    if (v45)
                    {
                      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v43 + 8));
                      id v47 = [*(id *)(v43 + 32) objectForKeyedSubscript:v44];
                      if ([v47 count])
                      {
                        id v118 = v44;
                        id v121 = v17;
                        long long v142 = 0u;
                        long long v143 = 0u;
                        long long v140 = 0u;
                        long long v141 = 0u;
                        id v47 = v47;
                        id v48 = [v47 countByEnumeratingWithState:&v140 objects:v148 count:16];
                        if (v48)
                        {
                          id v49 = v48;
                          uint64_t v50 = *(void *)v141;
                          do
                          {
                            for (j = 0; j != v49; j = (char *)j + 1)
                            {
                              if (*(void *)v141 != v50) {
                                objc_enumerationMutation(v47);
                              }
                              uint64_t v52 = *(void *)(*((void *)&v140 + 1) + 8 * (void)j);
                              if (v52 && *(void *)(v52 + 56))
                              {
                                nw_array_remove_object();
                                v53 = (void (**)(id, void))*(id *)(v52 + 48);
                                v53[2](v53, *(void *)(v52 + 56));
                              }
                            }
                            id v49 = [v47 countByEnumeratingWithState:&v140 objects:v148 count:16];
                          }
                          while (v49);
                        }

                        uint64_t v5 = v125;
                        id v17 = v121;
                        id v44 = v118;
                      }
LABEL_67:
                    }
                    else
                    {
                      id v62 = sub_1000FF6A4();
                      int v63 = _NRLogIsLevelEnabled();

                      if (v63)
                      {
                        id v47 = sub_1000FF6A4();
                        long long v112 = "-[NRApplicationServiceManager reportBrowseResultRemovedForASName:endpoint:]";
                        _NRLogWithArgs();
                        goto LABEL_67;
                      }
                    }
                  }

                  id v13 = v119;
                  id v19 = v123;
                }

                v54 = (void *)_NRCopyLogObjectForNRUUID();
                int v55 = _NRLogIsLevelEnabled();

                id v15 = v124;
                if (v55)
                {
                  id v56 = v17;
                  id v57 = *(id *)(v5 + 96);
                  id v58 = (void *)_NRCopyLogObjectForNRUUID();
                  uint64_t v59 = *(void **)(v5 + 632);
                  if (v59) {
                    uint64_t v59 = (void *)v59[2];
                  }
                  uint64_t v114 = 8421;
                  long long v115 = v59;
                  long long v112 = "";
                  long long v113 = "-[NRDDeviceConductor handleASEndpointChanged:handleASResolving:]";
                  _NRLogWithArgs();

                  id v17 = v56;
                }
                if (!*(unsigned char *)(v5 + 70))
                {
                  *(unsigned char *)(v5 + 70) = 1;
                  [*(id *)(v5 + 192) assertAgentWithOptions:0];
                }
                goto LABEL_18;
              }
              id v24 = (void *)_NRCopyLogObjectForNRUUID();
              int v25 = _NRLogIsLevelEnabled();

              if (v25)
              {
                id v26 = *(id *)(v5 + 96);
                id v17 = (id)_NRCopyLogObjectForNRUUID();
                uint64_t v114 = 8411;
                long long v115 = v20;
                long long v112 = "";
                long long v113 = "-[NRDDeviceConductor handleASEndpointChanged:handleASResolving:]";
                _NRLogWithArgs();

                goto LABEL_18;
              }
            }
LABEL_19:
            id v16 = (char *)v16 + 1;
          }
          while (v16 != v15);
          id v15 = [v13 countByEnumeratingWithState:&v136 objects:v146 count:16];
        }
        while (v15);
      }

      a3 = v116;
    }
    id v64 = *(void **)(v5 + 632);
    if (v64) {
      id v64 = (void *)v64[3];
    }
    v65 = v64;
    id v66 = [v65 count];

    if (v66 && a3)
    {
      long long v134 = 0u;
      long long v135 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      v67 = *(void **)(v5 + 632);
      if (v67) {
        v67 = (void *)v67[3];
      }
      id obja = v67;
      id v68 = [obja countByEnumeratingWithState:&v132 objects:v145 count:16];
      if (v68)
      {
        id v69 = v68;
        uint64_t v70 = *(void *)v133;
        do
        {
          for (uint64_t k = 0; k != v69; uint64_t k = (char *)k + 1)
          {
            if (*(void *)v133 != v70) {
              objc_enumerationMutation(obja);
            }
            id v74 = *(void **)(*((void *)&v132 + 1) + 8 * (void)k);
            if (sub_100102EF0(*(void *)(v5 + 632), v74)
              && ((id v75 = *(id *)(v5 + 128)) == 0
               || (uint64_t v76 = v75, v77 = [*(id *)(v5 + 128) type], v76, v77 == 4)))
            {
              uint64_t v78 = (void *)_NRCopyLogObjectForNRUUID();
              int v79 = _NRLogIsLevelEnabled();

              if (v79)
              {
                id v80 = *(id *)(v5 + 96);
                v81 = (void *)_NRCopyLogObjectForNRUUID();
                uint64_t v114 = 8437;
                long long v115 = v74;
                long long v112 = "";
                long long v113 = "-[NRDDeviceConductor handleASEndpointChanged:handleASResolving:]";
                _NRLogWithArgs();
              }
            }
            else if (objc_msgSend(*(id *)(v5 + 128), "ikeClassDEstablished", v112, v113, v114, v115))
            {
              v82 = v74;
              uint64_t v83 = v5;
              id v84 = objc_alloc_init((Class)NSMutableData);
              id v85 = [v82 dataUsingEncoding:4];
              uint64_t v86 = *(void *)(v83 + 632);
              id v87 = v82;
              if (v86 && !*(unsigned char *)(v86 + 9))
              {
                self;
                if (qword_1001F4AE8 != -1) {
                  dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
                }
                id v88 = sub_1000FF4D0(qword_1001F4AE0, v87);
              }
              else
              {
                id v88 = 0;
              }

              if (![v88 count])
              {
                CFArrayRef v94 = (void *)_NRCopyLogObjectForNRUUID();
                int v95 = _NRLogIsLevelEnabled();

                if (v95)
                {
                  v96 = (void *)_NRCopyLogObjectForNRUUID();
                  uint64_t v114 = 8522;
                  long long v112 = "";
                  long long v113 = "-[NRDDeviceConductor sendResolveRequestForASName:]";
                  _NRLogWithArgs();
                }
              }
              NRTLVAddData();
              long long v142 = 0u;
              long long v143 = 0u;
              long long v140 = 0u;
              long long v141 = 0u;
              id v97 = v88;
              CFArrayRef v98 = (char *)[v97 countByEnumeratingWithState:&v140 objects:v148 count:16];
              if (v98)
              {
                uint64_t v99 = v98;
                uint64_t v100 = *(void *)v141;
                do
                {
                  for (m = 0; m != v99; ++m)
                  {
                    if (*(void *)v141 != v100) {
                      objc_enumerationMutation(v97);
                    }
                    NRTLVAddData();
                  }
                  uint64_t v99 = (char *)[v97 countByEnumeratingWithState:&v140 objects:v148 count:16];
                }
                while (v99);
              }

              id v72 = objc_alloc_init((Class)NSMutableData);
              NRTLVAddData();
              BOOL v73 = sub_100025474([NRLinkDirectorMessage alloc], *(void **)(v125 + 96));
              sub_100025B00((uint64_t)v73, 20, v72);
              sub_100027090((uint64_t)v73);

              uint64_t v5 = v125;
            }
            else
            {
              v89 = (void *)_NRCopyLogObjectForNRUUID();
              int v90 = _NRLogIsLevelEnabled();

              if (v90)
              {
                id v91 = *(id *)(v5 + 96);
                id v92 = (void *)_NRCopyLogObjectForNRUUID();
                CFArrayRef v93 = *(void **)(v5 + 632);
                if (v93) {
                  CFArrayRef v93 = (void *)v93[3];
                }
                uint64_t v114 = 8443;
                long long v115 = v93;
                long long v112 = "";
                long long v113 = "-[NRDDeviceConductor handleASEndpointChanged:handleASResolving:]";
                _NRLogWithArgs();
              }
              if (!*(unsigned char *)(v5 + 71))
              {
                *(unsigned char *)(v5 + 71) = 1;
                [*(id *)(v5 + 192) assertAgentWithOptions:0];
              }
            }
          }
          id v69 = [obja countByEnumeratingWithState:&v132 objects:v145 count:16];
        }
        while (v69);
      }
    }
    v102 = *(void **)(v5 + 632);
    if (v102) {
      v102 = (void *)v102[4];
    }
    id v103 = v102;
    id v104 = [v103 count];

    if (v104 && [*(id *)(v5 + 128) ikeClassDEstablished])
    {
      long long v130 = 0u;
      long long v131 = 0u;
      long long v128 = 0u;
      long long v129 = 0u;
      uint64_t v105 = *(void **)(v5 + 632);
      if (v105) {
        uint64_t v105 = (void *)v105[4];
      }
      v106 = v105;
      id v107 = [v106 copy];

      id v108 = [v107 countByEnumeratingWithState:&v128 objects:v144 count:16];
      if (v108)
      {
        id v109 = v108;
        uint64_t v110 = *(void *)v129;
        do
        {
          for (n = 0; n != v109; n = (char *)n + 1)
          {
            if (*(void *)v129 != v110) {
              objc_enumerationMutation(v107);
            }
            sub_1000D4E3C(v5, *(void **)(*((void *)&v128 + 1) + 8 * (void)n));
          }
          id v109 = [v107 countByEnumeratingWithState:&v128 objects:v144 count:16];
        }
        while (v109);
      }
    }
  }
}

void sub_1000D601C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_19;
  }
  endpoint = v3;
  id v4 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (nw_endpoint_get_type(endpoint) == (nw_endpoint_type_url|nw_endpoint_type_host))
  {
    if (v4) {
      uint64_t v5 = (void *)*((void *)v4 + 14);
    }
    else {
      uint64_t v5 = 0;
    }
    id v6 = v5;

    if (v6)
    {
      if (v4) {
        uint64_t v7 = (void *)*((void *)v4 + 14);
      }
      else {
        uint64_t v7 = 0;
      }
      id v8 = v7;
      [v8 UTF8String];
      nw_endpoint_set_device_name();
    }
    if (v4)
    {
      if (v4[18])
      {
        StringFromNRDeviceEndpointType = (void *)createStringFromNRDeviceEndpointType();
        [StringFromNRDeviceEndpointType UTF8String];
        nw_endpoint_set_device_model();
      }
      goto LABEL_13;
    }
LABEL_22:
    uint64_t v10 = 0;
    goto LABEL_14;
  }
  if (!v4) {
    goto LABEL_22;
  }
LABEL_13:
  uint64_t v10 = (void *)*((void *)v4 + 6);
LABEL_14:
  id v11 = v10;

  if (v11)
  {
    if (v4) {
      v12 = (void *)*((void *)v4 + 6);
    }
    else {
      v12 = 0;
    }
    id v13 = v12;
    [v13 UTF8String];
    nw_endpoint_set_device_id();
  }
  id v3 = endpoint;
LABEL_19:
}

void sub_1000D63BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 10))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v2 = (id)qword_1001F4A18;
    id v3 = v2;
    if (v2) {
      id v4 = (void *)*((void *)v2 + 6);
    }
    else {
      id v4 = 0;
    }
    uint64_t v5 = v4;

    if (v5) {
      id v6 = (void *)v5[8];
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;

    if (v7)
    {
      id v8 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
      id v9 = v8;
      if (v8)
      {
        id v10 = *((id *)v8 + 16);

        if (v10)
        {
          if (!v9[13])
          {
            id v11 = *(id *)(a1 + 96);
            self;
            v12 = sub_10014B3B8((uint64_t)NRDLocalDevice, v11, &off_1001D4C00);

            if (v12)
            {
              if (sub_1000D944C(a1) == 2 && [v12 addressFamily] == (id)30)
              {
                long long v19 = 0uLL;
                int v21 = 0;
                uint64_t v20 = 0;
                sub_100141EA0((uint64_t)NRDLocalDevice, &v19, v12);
                if (BYTE8(v19) == 254 && (BYTE9(v19) & 0xC0) == 0x80)
                {
                  id v13 = sub_1000D8308(a1);
                  if (v13)
                  {
                    uint64_t v14 = v13[14];
                    if (v14) {
                      LODWORD(v14) = *(_DWORD *)(v14 + 12);
                    }
                  }
                  else
                  {
                    LODWORD(v14) = 0;
                  }
                  int v21 = v14;
                }
                if (!WORD1(v19))
                {
                  id v15 = sub_100010AF8();
                  if (v15) {
                    unsigned int v16 = -2793;
                  }
                  else {
                    unsigned int v16 = 0;
                  }
                  WORD1(v19) = bswap32(v16) >> 16;
                }
                id v17 = +[NWAddressEndpoint endpointWithAddress:&v19];
                sub_1000D8308(a1);
                id v18 = (id *)objc_claimAutoreleasedReturnValue();
                sub_10015596C(v18, v17, *(void **)(a1 + 96));
              }
            }
            else
            {
              sub_1000D8CD8(a1, 2u, 102);
            }
          }
        }
      }
    }
  }
}

void sub_1000D6614(unsigned char *a1)
{
  if (a1 && a1[14] && a1[10])
  {
    if (a1[48] && !a1[52])
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        return;
      }
      id v5 = (id)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    else
    {
      id v2 = objc_alloc_init(NRLinkDirectorRequest);
      if (v2)
      {
        v2->_type = 11;
        v2->_requiredLinkType = 1;
        *(_WORD *)&v2->_attemptImmediately = 257;
      }
      id v5 = v2;
      sub_1000D6720((uint64_t)a1, v2);
    }
  }
}

void sub_1000D6720(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    id v4 = *(void **)(a1 + 120);
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableArray);
      id v6 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v5;

      id v4 = *(void **)(a1 + 120);
    }
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v7 = v4;
    id v8 = [v7 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v8)
    {
      id v9 = v8;
      id v10 = 0;
      uint64_t v11 = *(void *)v30;
LABEL_6:
      uint64_t v12 = 0;
      while (1)
      {
        id v13 = v10;
        if (*(void *)v30 != v11) {
          objc_enumerationMutation(v7);
        }
        id v10 = (unsigned __int8 *)*(id *)(*((void *)&v29 + 1) + 8 * v12);

        if (!v10) {
          break;
        }
        int v14 = v10[10];
        if (v3) {
          goto LABEL_13;
        }
        if (!v10[10]) {
          goto LABEL_22;
        }
LABEL_8:
        if (v9 == (id)++v12)
        {
          id v9 = [v7 countByEnumeratingWithState:&v29 objects:v33 count:16];
          if (v9) {
            goto LABEL_6;
          }

          goto LABEL_20;
        }
      }
      if (!v3)
      {
        id v10 = 0;
LABEL_22:

        id v15 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v17 = *(id *)(a1 + 96);
          id v18 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v27 = 2693;
          unsigned int v28 = v10;
          int v25 = "";
          id v26 = "-[NRDDeviceConductor addRequest:]";
          _NRLogWithArgs();
        }
        [*(id *)(a1 + 120) removeObject:v10, v25, v26, v27, v28, (void)v29];
        goto LABEL_25;
      }
      int v14 = 0;
LABEL_13:
      if (v14 == v3[10] && v14 != 6) {
        goto LABEL_22;
      }
      goto LABEL_8;
    }
LABEL_20:

    id v10 = 0;
LABEL_25:
    if (!v3) {
      goto LABEL_31;
    }
    if (v3[13])
    {
      sub_1000D6A20(a1, v3);
      if (!v3[12])
      {
        long long v19 = (void *)_NRCopyLogObjectForNRUUID();
        int v20 = _NRLogIsLevelEnabled();

        if (v20)
        {
          int v21 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v27 = 2700;
          unsigned int v28 = v3;
          int v25 = "";
          id v26 = "-[NRDDeviceConductor addRequest:]";
          _NRLogWithArgs();
        }
      }
    }
    if (!v3[12])
    {
LABEL_31:
      v22 = (void *)_NRCopyLogObjectForNRUUID();
      int v23 = _NRLogIsLevelEnabled();

      if (v23)
      {
        id v24 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v27 = 2705;
        unsigned int v28 = v3;
        int v25 = "";
        id v26 = "-[NRDDeviceConductor addRequest:]";
        _NRLogWithArgs();
      }
      [*(id *)(a1 + 120) addObject:v3, v25, v26, v27, v28];
    }
  }
}

void sub_1000D6A20(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (!v3
    || !*((unsigned char *)v3 + 11)
    || (*((unsigned char *)v3 + 10) & 0xFE) == 6 && v3[4]
    || !sub_1000D81C8(a1, *((unsigned __int8 *)v3 + 11)))
  {
    id v9 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = (id *)_NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    if (v3) {
      id v12 = v3[2];
    }
    else {
      id v12 = 0;
    }
    id v13 = v12;

    uint64_t v190 = a1;
    v191 = v3;
    if (v13)
    {
      long long v218 = 0u;
      long long v219 = 0u;
      long long v216 = 0u;
      long long v217 = 0u;
      id v14 = *(id *)(a1 + 112);
      int IsLevelEnabled = (id *)[v14 countByEnumeratingWithState:&v216 objects:v225 count:16];
      if (IsLevelEnabled)
      {
        uint64_t v15 = *(void *)v217;
        do
        {
          for (i = 0; i != IsLevelEnabled; i = (id *)((char *)i + 1))
          {
            if (*(void *)v217 != v15) {
              objc_enumerationMutation(v14);
            }
            id v17 = v191;
            if (v191) {
              id v17 = (id *)v191[2];
            }
            id v18 = *(void **)(*((void *)&v216 + 1) + 8 * i);
            long long v19 = v17;
            int v20 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", [v18 type]);
            if ([v19 containsObject:v20])
            {
              BOOL v21 = [v18 state] == 8;

              if (v21)
              {
                id v188 = v18;
                goto LABEL_32;
              }
            }
            else
            {
            }
          }
          int IsLevelEnabled = (id *)[v14 countByEnumeratingWithState:&v216 objects:v225 count:16];
        }
        while (IsLevelEnabled);
      }
      id v188 = 0;
LABEL_32:

      a1 = v190;
      id v3 = v191;
      goto LABEL_33;
    }
    if (v3)
    {
      if (*((unsigned char *)v3 + 9))
      {
        if ([*(id *)(a1 + 128) type] == *((unsigned __int8 *)v3 + 9)) {
          id v188 = *(id *)(a1 + 128);
        }
        else {
          id v188 = 0;
        }
        goto LABEL_33;
      }
      if (*((unsigned char *)v3 + 8))
      {
        long long v214 = 0u;
        long long v215 = 0u;
        long long v212 = 0u;
        long long v213 = 0u;
        id v33 = *(id *)(a1 + 112);
        int IsLevelEnabled = (id *)[v33 countByEnumeratingWithState:&v212 objects:v224 count:16];
        if (!IsLevelEnabled) {
          goto LABEL_67;
        }
        uint64_t v34 = *(void *)v213;
LABEL_57:
        uint64_t v35 = 0;
        while (1)
        {
          if (*(void *)v213 != v34) {
            objc_enumerationMutation(v33);
          }
          uint64_t v36 = *(void **)(*((void *)&v212 + 1) + 8 * v35);
          if ([v36 type] == *((unsigned __int8 *)v191 + 8)
            && ([v36 state] == 8
             || *((unsigned char *)v191 + 14) && [v36 state] == 9))
          {
            break;
          }
          if (IsLevelEnabled == (id *)++v35)
          {
            int IsLevelEnabled = (id *)[v33 countByEnumeratingWithState:&v212 objects:v224 count:16];
            if (!IsLevelEnabled)
            {
LABEL_67:

              goto LABEL_138;
            }
            goto LABEL_57;
          }
        }
        id v188 = v36;

        a1 = v190;
        id v3 = v191;
        if (v188)
        {
LABEL_33:
          v187 = (unsigned __int16 *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
          v22 = v191;
          if (v3)
          {
            switch(*((unsigned char *)v191 + 10))
            {
              case 0:
                goto LABEL_264;
              case 1:
                if (!*(unsigned char *)(v190 + 44)) {
                  goto LABEL_136;
                }
                self;
                unsigned int v37 = &unk_1001F4000;
                if (qword_1001F4A20 != -1) {
                  dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
                }
                int IsLevelEnabled = (id *)&unk_1001F4000;
                uint64_t v38 = (id *)(id)qword_1001F4A18;
                v22 = v38;
                if (!v38) {
                  goto LABEL_267;
                }
                long long v39 = v38[6];
                if (v39) {
                  long long v39 = (void *)v39[7];
                }
                id v40 = v39;
                goto LABEL_77;
              case 2:
              case 3:
                uint64_t v186 = *((unsigned __int8 *)v191 + 10);
                id v24 = sub_100025474([NRLinkDirectorMessage alloc], *(void **)(v190 + 96));
                v189 = v24;
                int v25 = v24;
                if (v24)
                {
                  objc_storeStrong((id *)v24 + 3, v188);
                  int v25 = v189;
                }
                if (!v187 || v187[14] <= 0x11u)
                {
                  if (v25)
                  {
                    LOBYTE(v207[0]) = v186 == 2;
                    id v26 = [objc_alloc((Class)NSData) initWithBytes:v207 length:1];
                    sub_100025B00((uint64_t)v189, 5, v26);
                  }
LABEL_239:
                  int v166 = sub_100027090((uint64_t)v189);
                  if (v166)
                  {
                    *((unsigned char *)v191 + 12) = 1;
                    v167 = "Successfully sent";
                  }
                  else
                  {
                    v167 = "Failed to send";
                  }
                  if (v186 == 2) {
                    char v168 = v166;
                  }
                  else {
                    char v168 = 0;
                  }
                  *(unsigned char *)(v190 + 16) = v168;
                  long long v112 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v186 == 2, v186);
                  sub_1000D85E8(v190, 1008, @"%s prefer Wi-Fi request %@", v169, v170, v171, v172, v173, (uint64_t)v167);
LABEL_246:

LABEL_247:
                  int v23 = 1;
LABEL_248:
                  v22 = v191;
LABEL_249:
                  BOOL v174 = *((unsigned char *)v22 + 12) == 0;
                  v175 = (void *)_NRCopyLogObjectForNRUUID();
                  int v176 = _NRLogIsLevelEnabled();

                  if (v174)
                  {
                    if (!v176)
                    {
LABEL_260:

                      goto LABEL_261;
                    }
                    v180 = (void (**)(void))_NRCopyLogObjectForNRUUID();
                    _NRLogWithArgs();
                  }
                  else
                  {
                    if (v176)
                    {
                      v177 = (void *)_NRCopyLogObjectForNRUUID();
                      _NRLogWithArgs();
                    }
                    id v178 = v191[6];
                    if (v178) {
                      int v179 = v23;
                    }
                    else {
                      int v179 = 0;
                    }

                    if (!v179) {
                      goto LABEL_260;
                    }
                    v180 = (void (**)(void))v191[6];
                    v180[2]();
                  }

                  goto LABEL_260;
                }
                memset(v207, 0, 9);
                *(_DWORD *)((char *)v207 + 1) = bswap32(arc4random_uniform(0xFFFFFFFF));
                if (v186 != 2)
                {
                  id v73 = 0;
                  goto LABEL_212;
                }
                LOBYTE(v207[0]) = 1;
                id v73 = objc_alloc_init((Class)NSMutableArray);
                BOOL v206 = 0;
                id v74 = (unsigned __int8 *)v190;
                if (*(unsigned char *)(v190 + 10))
                {
                  id v75 = sub_1000AB38C();
                  uint64_t v76 = v75;
                  if (v75) {
                    unsigned int v77 = (void *)*((void *)v75 + 12);
                  }
                  else {
                    unsigned int v77 = 0;
                  }
                  id v78 = v77;
                  *(unsigned char *)(v190 + 53) = sub_10006760C((uint64_t)v78, &v206);

                  id v74 = (unsigned __int8 *)v190;
                }
                if (!v74[53]) {
                  goto LABEL_205;
                }
                int v79 = v74[10];
                if (!v74[10] && !v74[50]) {
                  goto LABEL_119;
                }
                if (!v74[50]) {
                  goto LABEL_200;
                }
                [v73 addObject:&off_1001D4A68];
                id v74 = (unsigned __int8 *)v190;
                if (!*(unsigned char *)(v190 + 53)) {
                  goto LABEL_205;
                }
                int v79 = *(unsigned __int8 *)(v190 + 10);
LABEL_200:
                if (v79)
                {
                  sub_1000D8670((uint64_t)v74, v189);
                  [v73 addObject:&off_1001D49F0];
                  id v74 = (unsigned __int8 *)v190;
                  if (!*(unsigned char *)(v190 + 53)) {
                    goto LABEL_205;
                  }
                }
                uint64_t v136 = sub_1000D8308((uint64_t)v74);
                long long v137 = (void *)v136;
                long long v138 = v136 ? *(void **)(v136 + 56) : 0;
                id v139 = v138;
                BOOL v140 = v139 == 0;

                if (!v140)
                {
LABEL_205:
                  if (v206)
                  {
LABEL_119:
                    [v73 addObject:&off_1001D4A50];
                    goto LABEL_212;
                  }
                  [v73 insertObject:&off_1001D4A50 atIndex:0];
                }
LABEL_212:
                if (v189) {
                  v189[8] = 1;
                }
                id v144 = [objc_alloc((Class)NSMutableData) initWithBytes:v207 length:9];
                id v145 = objc_alloc_init((Class)NSMutableString);
                long long v204 = 0u;
                long long v205 = 0u;
                long long v202 = 0u;
                long long v203 = 0u;
                id v146 = v73;
                id v147 = [v146 countByEnumeratingWithState:&v202 objects:v222 count:16];
                if (v147)
                {
                  uint64_t v148 = *(void *)v203;
                  do
                  {
                    for (j = 0; j != v147; j = (char *)j + 1)
                    {
                      if (*(void *)v203 != v148) {
                        objc_enumerationMutation(v146);
                      }
                      v150 = *(void **)(*((void *)&v202 + 1) + 8 * (void)j);
                      BOOL v151 = [v145 length] == 0;
                      [v150 unsignedCharValue];
                      uint64_t ShortStringFromNRLinkSubtype = createShortStringFromNRLinkSubtype();
                      v153 = (void *)ShortStringFromNRLinkSubtype;
                      if (v151) {
                        [v145 appendString:ShortStringFromNRLinkSubtype];
                      }
                      else {
                        [v145 appendFormat:@"/%@", ShortStringFromNRLinkSubtype];
                      }
                    }
                    id v147 = [v146 countByEnumeratingWithState:&v202 objects:v222 count:16];
                  }
                  while (v147);
                }

                sub_1000D85E8(v190, 1050, @"send req %d %@", v154, v155, v156, v157, v158, v186 == 2);
                long long v200 = 0u;
                long long v201 = 0u;
                long long v198 = 0u;
                long long v199 = 0u;
                id v159 = v146;
                id v160 = [v159 countByEnumeratingWithState:&v198 objects:v221 count:16];
                if (!v160) {
                  goto LABEL_238;
                }
                uint64_t v161 = *(void *)v199;
LABEL_226:
                uint64_t v162 = 0;
                while (1)
                {
                  if (*(void *)v199 != v161) {
                    objc_enumerationMutation(v159);
                  }
                  v163 = *(void **)(*((void *)&v198 + 1) + 8 * v162);
                  BOOL v206 = 0;
                  unsigned int v164 = ([v163 unsignedCharValue:v186] - 101);
                  if (v164 >= 4) {
                    break;
                  }
                  BOOL v206 = 0x7060502u >> (8 * v164);
                  if (!v206) {
                    goto LABEL_234;
                  }
LABEL_228:
                  NRTLVAdd();
LABEL_229:
                  if (v160 == (id)++v162)
                  {
                    id v160 = [v159 countByEnumeratingWithState:&v198 objects:v221 count:16];
                    if (!v160)
                    {
LABEL_238:

                      sub_100025B00((uint64_t)v189, 13, v144);
                      goto LABEL_239;
                    }
                    goto LABEL_226;
                  }
                }
                BOOL v206 = 0;
LABEL_234:
                unsigned int v165 = [v163 unsignedCharValue];
                if (v165 > 5) {
                  goto LABEL_229;
                }
                BOOL v206 = 0x40300020100uLL >> (8 * v165);
                if (!v206) {
                  goto LABEL_229;
                }
                goto LABEL_228;
              case 4:
              case 5:
              case 8:
                int v23 = 1;
                if (v188) {
                  *((unsigned char *)v191 + 12) = 1;
                }
                else {
                  id v188 = 0;
                }
                goto LABEL_249;
              case 6:
              case 7:
                if (!v188) {
                  goto LABEL_124;
                }
                if (*((unsigned char *)v191 + 11)
                  && (v22 = v191, sub_1000D81C8(v190, *((unsigned __int8 *)v191 + 11))))
                {

                  id v31 = v191[7];
                  BOOL v32 = v31 == 0;

                  v22 = v191;
                  if (!v32)
                  {
                    id v188 = 0;
                    goto LABEL_260;
                  }
LABEL_124:
                  id v82 = v22[7];
                  v81 = v22 + 7;
                  id v83 = v82;
                  BOOL v84 = v83 == 0;

                  if (v84)
                  {
                    id v85 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v190 + 104));
                    dispatch_time_t v86 = dispatch_time(0x8000000000000000, 1000000000 * (void)v191[4]);
                    dispatch_source_set_timer(v85, v86, 0xFFFFFFFFFFFFFFFFLL, 0);
                    objc_initWeak(v207, v191);
                    v192[0] = _NSConcreteStackBlock;
                    v192[1] = 3221225472;
                    v192[2] = sub_1000D8AF8;
                    v192[3] = &unk_1001C88B8;
                    objc_copyWeak(&v193, v207);
                    v192[4] = v190;
                    dispatch_source_set_event_handler(v85, v192);
                    dispatch_resume(v85);
                    objc_storeStrong(v81, v85);
                    objc_destroyWeak(&v193);
                    objc_destroyWeak(v207);
                  }
                  id v188 = 0;
                  int v23 = 0;
                }
                else
                {
                  id v88 = v22[7];
                  id v87 = v22 + 7;
                  id v89 = v88;
                  BOOL v90 = v89 == 0;

                  if (!v90)
                  {
                    id v91 = (void *)_NRCopyLogObjectForNRUUID();
                    int v92 = _NRLogIsLevelEnabled();

                    if (v92)
                    {
                      CFArrayRef v93 = (void *)_NRCopyLogObjectForNRUUID();
                      _NRLogWithArgs();
                    }
                    CFArrayRef v94 = *v87;
                    dispatch_source_cancel(v94);

                    objc_storeStrong(v87, 0);
                  }
                  *((unsigned char *)v191 + 12) = 1;
                  id v95 = v191[3];

                  if (v95)
                  {
                    v96 = (void (**)(void))v191[3];
                    v96[2]();
                  }
                  int v23 = 0;
                }
                goto LABEL_248;
              case 9:
              case 0xA:
                int v27 = *((unsigned __int8 *)v191 + 10);
                unsigned int v28 = sub_100025474([NRLinkDirectorMessage alloc], *(void **)(v190 + 96));
                v189 = v28;
                long long v29 = v28;
                if (v28)
                {
                  objc_storeStrong((id *)v28 + 3, v188);
                  long long v29 = v189;
                }
                if (!v187 || v187[14] <= 0x11u)
                {
                  if (v29)
                  {
                    LOBYTE(v207[0]) = v27 == 9;
                    id v30 = [objc_alloc((Class)NSData) initWithBytes:v207 length:1];
                    sub_100025B00((uint64_t)v189, 7, v30);
                  }
LABEL_163:
                  if (sub_100027090((uint64_t)v189))
                  {
                    *((unsigned char *)v191 + 12) = 1;
                    long long v111 = "Successfully sent";
                  }
                  else
                  {
                    long long v111 = "Failed to send";
                  }
                  long long v112 = +[NSNumber numberWithBool:v27 == 9];
                  sub_1000D85E8(v190, 1020, @"%s prefer Wi-Fi ack %@", v113, v114, v115, v116, v117, (uint64_t)v111);
                  goto LABEL_246;
                }
                if (v29) {
                  v29[8] = 1;
                }
                BYTE4(v207[0]) = 0;
                LODWORD(v207[0]) = 0;
                *(_DWORD *)((char *)v207 + 5) = 0x1000000;
                if (v27 == 9)
                {
                  LOBYTE(v207[0]) = 1;
                  id v80 = *(id *)(v190 + 432);
                }
                else
                {
                  id v80 = 0;
                }
                id v102 = [objc_alloc((Class)NSMutableData) initWithBytes:v207 length:9];
                long long v196 = 0u;
                long long v197 = 0u;
                long long v194 = 0u;
                long long v195 = 0u;
                id v103 = v80;
                id v104 = [v103 countByEnumeratingWithState:&v194 objects:v220 count:16];
                if (!v104) {
                  goto LABEL_162;
                }
                uint64_t v105 = *(void *)v195;
LABEL_146:
                uint64_t v106 = 0;
                break;
              case 0xB:
                if (!*(unsigned char *)(v190 + 10))
                {
LABEL_136:
                  int v23 = 1;
                  goto LABEL_249;
                }
                uint64_t v70 = (id *)sub_100025474([NRLinkDirectorMessage alloc], *(void **)(v190 + 96));
                id v71 = v70;
                if (v70) {
                  objc_storeStrong(v70 + 3, v188);
                }
                sub_1000D8670(v190, v71);
                if (sub_100027090((uint64_t)v71))
                {
                  *((unsigned char *)v191 + 12) = 1;
                  id v72 = "Successfully sent";
                }
                else
                {
                  id v72 = "Failed to send";
                }
                dispatch_assert_queue_V2(*(dispatch_queue_t *)(v190 + 104));
                self;
                if (qword_1001F4A20 != -1) {
                  dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
                }
                id v122 = (id)qword_1001F4A18;
                id v123 = v122;
                if (v122) {
                  id v124 = (void *)*((void *)v122 + 6);
                }
                else {
                  id v124 = 0;
                }
                uint64_t v125 = v124;

                if (v125) {
                  long long v126 = (void *)v125[8];
                }
                else {
                  long long v126 = 0;
                }
                id v185 = v126;
                sub_1000D85E8(v190, 1040, @"%s AWDL address update %@", v127, v128, v129, v130, v131, (uint64_t)v72);

                goto LABEL_247;
              default:
                int v23 = 1;
                goto LABEL_249;
            }
            while (1)
            {
              if (*(void *)v195 != v105) {
                objc_enumerationMutation(v103);
              }
              id v107 = *(void **)(*((void *)&v194 + 1) + 8 * v106);
              BOOL v206 = 0;
              unsigned int v108 = ([v107 unsignedCharValue] - 101);
              if (v108 >= 4) {
                break;
              }
              BOOL v206 = 0x7060502u >> (8 * v108);
              if (!v206) {
                goto LABEL_154;
              }
LABEL_157:
              if ([v107 unsignedCharValue] == 102) {
                sub_1000D8670(v190, v189);
              }
              if (v206) {
                NRTLVAdd();
              }
              if (v104 == (id)++v106)
              {
                id v104 = [v103 countByEnumeratingWithState:&v194 objects:v220 count:16];
                if (!v104)
                {
LABEL_162:

                  sub_100025B00((uint64_t)v189, 13, v102);
                  goto LABEL_163;
                }
                goto LABEL_146;
              }
            }
            BOOL v206 = 0;
LABEL_154:
            unsigned int v109 = [v107 unsignedCharValue];
            unint64_t v110 = 0x40300020100uLL >> (8 * v109);
            if (v109 >= 6) {
              LOBYTE(v110) = 0;
            }
            BOOL v206 = v110;
            goto LABEL_157;
          }
LABEL_264:
          id v181 = sub_1000D8B78();
          int v182 = _NRLogIsLevelEnabled();

          if (v182)
          {
            id v183 = sub_1000D8B78();
            _NRLogWithArgs();
          }
          unsigned int v37 = (void *)_os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v184 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v184 = 136446210;
          *(void *)(v184 + 4) = "-[NRDDeviceConductor processRequest:]";
          sub_1000D8B78();
          _NRLogAbortWithPack();
          __break(1u);
LABEL_267:
          id v40 = 0;
LABEL_77:

          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v190 + 104));
          self;
          if (v37[324] != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v41 = IsLevelEnabled[323];
          uint64_t v42 = v41;
          if (v41)
          {
            uint64_t v43 = (void *)*((void *)v41 + 6);
            if (v43) {
              uint64_t v43 = (void *)v43[7];
            }
            id v44 = v43;
          }
          else
          {
            id v44 = 0;
          }

          unsigned int v45 = [*(id *)(v190 + 136) isEqual:v44];
          if (v45 && !*(unsigned char *)(v190 + 25))
          {
            long long v141 = (void *)_NRCopyLogObjectForNRUUID();
            int v142 = _NRLogIsLevelEnabled();

            if (v142)
            {
LABEL_208:
              long long v143 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
          }
          else
          {
            if (v40)
            {
              v46 = (id *)sub_100025474([NRLinkDirectorMessage alloc], *(void **)(v190 + 96));
              id v47 = v46;
              if (v46) {
                objc_storeStrong(v46 + 3, v188);
              }
              self;
              if (qword_1001F47E8 != -1) {
                dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
              }
              id v48 = (id)qword_1001F47E0;
              id v49 = v48;
              if (v47)
              {
                if (v48) {
                  unsigned int v50 = 62743;
                }
                else {
                  unsigned int v50 = 0;
                }
                sub_100026010((uint64_t)v47, v40, v50, 0);
              }

              uint64_t v51 = sub_1000D8308(v190);
              uint64_t v52 = (void *)v51;
              if (v51) {
                v53 = *(void **)(v51 + 80);
              }
              else {
                v53 = 0;
              }
              id v54 = v53;
              BOOL v55 = v54 == 0;

              if (!v55)
              {
                uint64_t v56 = sub_1000D8308(v190);
                id v57 = (void *)v56;
                if (v56) {
                  id v58 = *(void **)(v56 + 80);
                }
                else {
                  id v58 = 0;
                }
                id v59 = v58;
                sub_100025B00((uint64_t)v47, 4, v59);
              }
              if (sub_100027090((uint64_t)v47))
              {
                *((unsigned char *)v191 + 12) = 1;
                sub_1000D83AC(v190, v40);
                uint64_t v65 = sub_1000D8308(v190);
                id v66 = (void *)v65;
                if (v65) {
                  v67 = *(void **)(v65 + 80);
                }
                else {
                  v67 = 0;
                }
                id v68 = v67;
                sub_1000D84DC(v190, v68);

                id v69 = "Successfully sent";
              }
              else
              {
                id v69 = "Failed to send";
              }
              sub_1000D85E8(v190, 1010, @"%s Wi-Fi address update %@", v60, v61, v62, v63, v64, (uint64_t)v69);

              goto LABEL_210;
            }
            long long v132 = (void *)_NRCopyLogObjectForNRUUID();
            int v133 = _NRLogIsLevelEnabled();

            if (v133) {
              goto LABEL_208;
            }
          }
          *((unsigned char *)v191 + 12) = 1;
LABEL_210:

          goto LABEL_247;
        }
LABEL_138:
        id v97 = (void *)_NRCopyLogObjectForNRUUID();
        int v98 = _NRLogIsLevelEnabled();

        id v3 = v191;
        if (!v98) {
          goto LABEL_262;
        }
        id v188 = (id)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
LABEL_261:

        id v3 = v191;
        goto LABEL_262;
      }
    }
    id v99 = *(id *)(a1 + 128);
    if (v99
      && (uint64_t v100 = v99, v101 = [*(id *)(a1 + 128) state], v100, v101 == 8))
    {
      int IsLevelEnabled = (id *)*(id *)(a1 + 128);
    }
    else
    {
      if (!v3 || !*((unsigned char *)v3 + 14))
      {
LABEL_193:
        long long v134 = (void *)_NRCopyLogObjectForNRUUID();
        int v135 = _NRLogIsLevelEnabled();

        id v3 = v191;
        if (!v135) {
          goto LABEL_262;
        }
        id v188 = (id)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
        goto LABEL_261;
      }
      long long v210 = 0u;
      long long v211 = 0u;
      long long v208 = 0u;
      long long v209 = 0u;
      id v118 = *(id *)(a1 + 112);
      int IsLevelEnabled = (id *)[v118 countByEnumeratingWithState:&v208 objects:v223 count:16];
      if (IsLevelEnabled)
      {
        uint64_t v119 = *(void *)v209;
        do
        {
          for (uint64_t k = 0; k != IsLevelEnabled; uint64_t k = (id *)((char *)k + 1))
          {
            if (*(void *)v209 != v119) {
              objc_enumerationMutation(v118);
            }
            id v121 = *(void **)(*((void *)&v208 + 1) + 8 * (void)k);
            if ([v121 state] == 9 && objc_msgSend(v121, "type") != 4)
            {
              int IsLevelEnabled = v121;
              goto LABEL_191;
            }
          }
          int IsLevelEnabled = (id *)[v118 countByEnumeratingWithState:&v208 objects:v223 count:16];
        }
        while (IsLevelEnabled);
      }
LABEL_191:

      a1 = v190;
      id v3 = v191;
    }
    id v188 = IsLevelEnabled;
    if (IsLevelEnabled) {
      goto LABEL_33;
    }
    goto LABEL_193;
  }
  id v4 = (void *)_NRCopyLogObjectForNRUUID();
  int v5 = _NRLogIsLevelEnabled();

  if (v5)
  {
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    unint64_t v7 = *((unsigned __int8 *)v3 + 11);
    if (v7 > 0xB) {
      id v8 = @"Unknown";
    }
    else {
      id v8 = (__CFString *)[objc_alloc((Class)NSString) initWithUTF8String:(&off_1001C7B98)[v7]];
    }
    _NRLogWithArgs();
  }
LABEL_262:
}

uint64_t sub_1000D81C8(uint64_t a1, int a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v4 = *(id *)(v2 + 120);
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v14;
      do
      {
        id v8 = 0;
        do
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(unsigned __int8 **)(*((void *)&v13 + 1) + 8 * (void)v8);
          if (v9)
          {
            if (v9[10] == a2) {
              goto LABEL_15;
            }
          }
          else if (!a2)
          {
LABEL_15:
            uint64_t v11 = v9;
            goto LABEL_16;
          }
          id v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v10 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
        id v6 = v10;
      }
      while (v10);
    }
    uint64_t v11 = 0;
LABEL_16:

    uint64_t v2 = v11 != 0;
  }
  return v2;
}

id sub_1000D8308(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v1 = (id)qword_1001F4A18;
    uint64_t v2 = v1;
    if (v1) {
      id v3 = (void *)*((void *)v1 + 6);
    }
    else {
      id v3 = 0;
    }
    id v4 = v3;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_1000D83AC(uint64_t a1, void *a2)
{
  id v10 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (([*(id *)(a1 + 136) isEqual:v10] & 1) == 0)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = *(id *)(a1 + 96);
      uint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    objc_storeStrong((id *)(a1 + 136), a2);
    id v8 = *(id *)(a1 + 96);
    id v9 = [v10 addressData];
    sub_1000A8214(v8, @"WiFiEndpointAddressData", v9);
  }
}

void sub_1000D84DC(uint64_t a1, void *a2)
{
  id v8 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (([*(id *)(a1 + 144) isEqualToData:v8] & 1) == 0)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = *(id *)(a1 + 96);
      uint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    objc_storeStrong((id *)(a1 + 144), a2);
    sub_1000A8214(*(void **)(a1 + 96), @"WiFiSignature", *(void **)(a1 + 144));
  }
}

void sub_1000D85E8(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v11 = a3;
    id v12 = [objc_alloc((Class)NSString) initWithFormat:v11 arguments:&a9];

    sub_10012F648(*(void **)(a1 + 96), a2, 0, v12);
  }
}

void sub_1000D8670(uint64_t a1, void *a2)
{
  id v27 = a2;
  if (v27)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v3 = (id)qword_1001F4A18;
    id v4 = v3;
    if (v3) {
      id v5 = (void *)*((void *)v3 + 6);
    }
    else {
      id v5 = 0;
    }
    id v6 = v5;

    if (v6) {
      uint64_t v7 = (void *)v6[8];
    }
    else {
      uint64_t v7 = 0;
    }
    id v8 = v7;

    LOBYTE(v31) = v8 != 0;
    id v9 = [objc_alloc((Class)NSData) initWithBytes:&v31 length:1];
    sub_100025B00((uint64_t)v27, 10, v9);

    if (!v8) {
      goto LABEL_30;
    }
    id v10 = [v8 port];
    sub_100026010((uint64_t)v27, v8, (unsigned __int16)[v10 intValue], 1);

    id v11 = v27;
    if (!*(unsigned char *)(a1 + 48) || !*(unsigned char *)(a1 + 44)) {
      goto LABEL_29;
    }
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v12 = (id)qword_1001F4A18;
    long long v13 = v12;
    if (v12) {
      long long v14 = (void *)*((void *)v12 + 6);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = v14;

    if (!v15)
    {
      id v22 = 0;
      goto LABEL_27;
    }
    long long v16 = v15[3];
    dispatch_assert_queue_V2(v16);

    uint64_t v31 = 0;
    BOOL v32 = &v31;
    uint64_t v33 = 0x3032000000;
    uint64_t v34 = sub_100151DC4;
    uint64_t v35 = sub_100151DD4;
    id v36 = 0;
    id v17 = v15[22];
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100157BAC;
    v28[3] = &unk_1001C8908;
    id v30 = &v31;
    id v18 = v17;
    id v29 = v18;
    if (sub_100151CF0((uint64_t)NRLinkManagerWiFi, v28))
    {
      id v25 = sub_10014E0F0();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled)
      {
LABEL_24:
        id v22 = (id)v32[5];

        _Block_object_dispose(&v31, 8);
        if (!v22 || ![v22 compare:@"XZ" options:1]) {
          goto LABEL_28;
        }
        long long v15 = [v22 dataUsingEncoding:4];
        sub_100025B00((uint64_t)v11, 15, v15);
LABEL_27:

LABEL_28:
LABEL_29:

LABEL_30:
        goto LABEL_31;
      }
      id v21 = sub_10014E0F0();
      _NRLogWithArgs();
    }
    else
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v19 = (id)qword_1001F4DB8;
      char v20 = _NRLogIsLevelEnabled();

      if ((v20 & 1) == 0) {
        goto LABEL_24;
      }
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v21 = (id)qword_1001F4DB8;
      _NRLogWithArgs();
    }

    goto LABEL_24;
  }
  id v23 = sub_1000D8B78();
  int v24 = _NRLogIsLevelEnabled();

  if (v24)
  {
    id v8 = sub_1000D8B78();
    _NRLogWithArgs();
    goto LABEL_30;
  }
LABEL_31:
}

void sub_1000D8AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D8AF8(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = (void (**)(void))WeakRetained[6];
    v3[2]();

    *((unsigned char *)v4 + 12) = 1;
    sub_1000D8C10(*(void *)(a1 + 32), v4);
    id WeakRetained = v4;
  }
}

id sub_1000D8B78()
{
  if (qword_1001F4AA8 != -1) {
    dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
  }
  v0 = (void *)qword_1001F4AA0;

  return v0;
}

void sub_1000D8BCC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4AA0;
  qword_1001F4AA0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000D8C10(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v11 = v3;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v9 = 2714;
      id v10 = v11;
      uint64_t v7 = "";
      id v8 = "-[NRDDeviceConductor removeRequest:]";
      _NRLogWithArgs();
    }
    [*(id *)(a1 + 120) removeObject:v11, v7, v8, v9, v10];
    id v3 = v11;
  }
}

void sub_1000D8CD8(uint64_t a1, unsigned int a2, char a3)
{
  if (!a1) {
    return;
  }
  if ((sub_1000D95DC(a1) & 1) == 0)
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      return;
    }
LABEL_16:
    id v64 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();

    return;
  }
  unsigned int v6 = (a3 - 101);
  if (v6 >= 4)
  {
    if (a2 >= 6 || (unint64_t v7 = 0x40300020100uLL >> (8 * a2), !(_BYTE)v7))
    {
LABEL_15:
      long long v13 = (void *)_NRCopyLogObjectForNRUUID();
      int v14 = _NRLogIsLevelEnabled();

      if (!v14) {
        return;
      }
      goto LABEL_16;
    }
  }
  else
  {
    LODWORD(v7) = 0x7060502u >> (8 * v6);
    if (!(_BYTE)v7) {
      goto LABEL_15;
    }
  }
  id v10 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  id v11 = v10;
  if (*(unsigned char *)(a1 + 69) && v10)
  {
    if (v10[15])
    {
      int v12 = 1;
      if (!v10[12]) {
        goto LABEL_32;
      }
    }
    else
    {
      if (v10[14]) {
        BOOL v15 = 1;
      }
      else {
        BOOL v15 = *((unsigned __int16 *)v10 + 14) > 0x12u;
      }
      int v12 = v15;
      if (!v10[12]) {
        goto LABEL_32;
      }
    }
    if (!v10[13]) {
      int v12 = 0;
    }
    if (v12 == 1)
    {
      *(unsigned char *)(a1 + 69) = 0;
      long long v16 = *(void **)(a1 + 424);
      *(void *)(a1 + 424) = 0;

      uint64_t v17 = *(void *)(a1 + 416);
      if (v17)
      {
        sub_1001272AC(v17);
        id v18 = *(void **)(a1 + 416);
        *(void *)(a1 + 416) = 0;
      }
    }
  }
LABEL_32:
  if (!*(void *)(a1 + 416))
  {
    if (sub_1000D95DC(a1))
    {
      id v19 = [NRDiscoveryClient alloc];
      char v20 = *(void **)(a1 + 104);
      id v21 = *(id *)(a1 + 96);
      id v22 = v20;
      id v23 = sub_1001270E8((id *)&v19->super.isa, v22, v21);
      int v24 = *(void **)(a1 + 416);
      *(void *)(a1 + 416) = v23;

      uint64_t v25 = *(void *)(a1 + 416);
      if (v25)
      {
        *(unsigned char *)(v25 + 15) = 1;
        uint64_t v26 = *(void *)(a1 + 416);
        if (v26) {
          *(unsigned char *)(v26 + 16) = 1;
        }
      }
      if (v11) {
        id v27 = (void *)*((void *)v11 + 16);
      }
      else {
        id v27 = 0;
      }
      id v28 = v27;
      unsigned int v29 = [v28 allowedPeerDeviceType];

      if (v29 != 255)
      {
        if (v11) {
          id v30 = (void *)*((void *)v11 + 16);
        }
        else {
          id v30 = 0;
        }
        id v31 = v30;
        unsigned __int8 v32 = [v31 allowedPeerDeviceType];
        uint64_t v33 = *(void *)(a1 + 416);
        if (v33) {
          *(unsigned char *)(v33 + 18) = v32;
        }
      }
      if (*(unsigned char *)(a1 + 48))
      {
        if (qword_1001F4B80 != -1) {
          dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
        }
        if (byte_1001F4B78 && v11)
        {
          if (v11[15])
          {
            int v34 = 1;
          }
          else
          {
            BOOL v38 = v11[14] || *((unsigned __int16 *)v11 + 14) > 0x12u;
            int v34 = v38;
          }
          if (v11[12])
          {
            if (!v11[13]) {
              int v34 = 0;
            }
            if (v34 == 1)
            {
              uint64_t v39 = *(void *)(a1 + 416);
              if (v39) {
                *(unsigned char *)(v39 + 17) = 1;
              }
            }
          }
        }
      }
      objc_initWeak(location, (id)a1);
      objc_initWeak(&from, *(id *)(a1 + 416));
      id v40 = *(id *)(a1 + 416);
      v71[0] = _NSConcreteStackBlock;
      v71[1] = 3221225472;
      v71[2] = sub_1000D96A4;
      v71[3] = &unk_1001C75D0;
      objc_copyWeak(&v72, location);
      objc_copyWeak(&v73, &from);
      id v41 = v71;
      uint64_t v42 = v41;
      if (v40 && !*((unsigned char *)v40 + 19))
      {
        uint64_t v43 = objc_retainBlock(v41);
        id v44 = (void *)v40[9];
        v40[9] = v43;
      }
      unsigned int v45 = *(id *)(a1 + 416);
      v68[0] = _NSConcreteStackBlock;
      v68[1] = 3221225472;
      v68[2] = sub_1000D9730;
      v68[3] = &unk_1001C75D0;
      objc_copyWeak(&v69, location);
      objc_copyWeak(&v70, &from);
      v46 = v68;
      id v47 = v46;
      if (v45 && !*((unsigned char *)v45 + 19))
      {
        id v48 = objc_retainBlock(v46);
        id v49 = (void *)v45[10];
        v45[10] = v48;
      }
      unsigned int v50 = *(id *)(a1 + 416);
      v65[0] = _NSConcreteStackBlock;
      v65[1] = 3221225472;
      v65[2] = sub_1000D9BD0;
      v65[3] = &unk_1001C75D0;
      objc_copyWeak(&v66, location);
      objc_copyWeak(&v67, &from);
      uint64_t v51 = v65;
      uint64_t v52 = v51;
      if (v50 && !*((unsigned char *)v50 + 19))
      {
        v53 = objc_retainBlock(v51);
        id v54 = (void *)v50[11];
        v50[11] = v53;
      }
      id v55 = *(id *)(a1 + 96);
      uint64_t v56 = (void *)_NRCopyLogObjectForNRUUID();
      char v57 = _NRLogIsLevelEnabled();

      if (v57)
      {
        id v58 = *(id *)(a1 + 96);
        id v59 = (void *)_NRCopyLogObjectForNRUUID();
        id v60 = *(id *)(a1 + 416);
        id v61 = *(id *)(a1 + 416);
        _NRLogWithArgs();
      }
      uint64_t v62 = *(id *)(a1 + 416);
      sub_10012AF70(v62);

      objc_destroyWeak(&v67);
      objc_destroyWeak(&v66);
      objc_destroyWeak(&v70);
      objc_destroyWeak(&v69);
      objc_destroyWeak(&v73);
      objc_destroyWeak(&v72);
      objc_destroyWeak(&from);
      objc_destroyWeak(location);
    }
    else
    {
      uint64_t v35 = (void *)_NRCopyLogObjectForNRUUID();
      int v36 = _NRLogIsLevelEnabled();

      if (v36)
      {
        unsigned int v37 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
  }

  uint64_t v63 = *(void *)(a1 + 416);

  sub_100127810(v63, v7);
}

void sub_1000D9400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, id *a15, id *a16, id *a17)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(location);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak(a17);
  objc_destroyWeak((id *)(v19 - 120));
  objc_destroyWeak((id *)(v19 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_1000D944C(uint64_t a1)
{
  os_log_t v1 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (!v1)
  {
    id v9 = sub_1000D8B78();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = sub_1000D8B78();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v12 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v12 = 136446210;
    *(void *)(v12 + 4) = "-[NRDDeviceConductor getPreferredLinkTypeFromConfiguration]";
    sub_1000D8B78();
    _NRLogAbortWithPack();
  }
  uint64_t v2 = v1;
  id v3 = v1[16];

  if (v3)
  {
    id v4 = v2[16];
    id v5 = [v4 allowedLinkTypes];
    unsigned int v6 = [v5 firstObject];

    unsigned __int8 v7 = [v6 unsignedShortValue];
  }
  else
  {
    unsigned __int8 v7 = 1;
  }

  return v7;
}

id sub_1000D95DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 14)) {
    return 0;
  }
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  uint64_t v2 = (unsigned __int8 *)(id)qword_1001F4A18;
  if (v2)
  {
    int v3 = v2[8];

    if (v3) {
      return 0;
    }
  }
  id v5 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  unsigned int v6 = v5;
  if (v5) {
    unsigned __int8 v7 = (void *)*((void *)v5 + 16);
  }
  else {
    unsigned __int8 v7 = 0;
  }
  id v8 = v7;
  id v9 = [v8 allowsDeviceDiscovery];

  return v9;
}

void sub_1000D96A4(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = v4;
  if (WeakRetained && v4 && *((unsigned char *)WeakRetained + 14) && WeakRetained[52] == v4) {
    sub_1000D9C5C((uint64_t)WeakRetained, v6);
  }
}

void sub_1000D9730(uint64_t a1, void *a2)
{
  id v46 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = v4;
  if (WeakRetained && v4 && *((unsigned char *)WeakRetained + 14) && *((id *)WeakRetained + 52) == v4)
  {
    id v6 = v46;
    unsigned __int8 v7 = v6;
    if (*((void *)WeakRetained + 53))
    {
      if (v6) {
        id v8 = (void *)*((void *)v6 + 2);
      }
      else {
        id v8 = 0;
      }
      id v9 = v8;
      id v10 = (void *)*((void *)WeakRetained + 53);
      if (v10) {
        id v10 = (void *)v10[2];
      }
      id v11 = v10;
      unsigned __int8 v12 = [v9 isEqualToString:v11];

      long long v13 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (v12)
      {
        if (IsLevelEnabled)
        {
          BOOL v15 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v44 = 7712;
          unsigned int v45 = v7;
          uint64_t v42 = "";
          uint64_t v43 = "-[NRDDeviceConductor lostDevice:]";
          _NRLogWithArgs();
        }
        id v16 = *((id *)WeakRetained + 12);
        self;
        uint64_t v17 = sub_10014B3B8((uint64_t)NRDLocalDevice, v16, &off_1001D4C18);

        if (!v17)
        {
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v18 = (id)qword_1001F4A18;
          uint64_t v19 = v18;
          if (v18) {
            char v20 = (void *)*((void *)v18 + 8);
          }
          else {
            char v20 = 0;
          }
          id v21 = v20;
          sub_1000D3DC0((uint64_t)v21, 0, 0, *((void **)WeakRetained + 12));
        }
        id v22 = *((id *)WeakRetained + 12);
        self;
        id v23 = sub_10014B3B8((uint64_t)NRDLocalDevice, v22, &off_1001D4BD0);

        if (!v23)
        {
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v24 = (id)qword_1001F4A18;
          uint64_t v25 = v24;
          if (v24) {
            uint64_t v26 = (void *)*((void *)v24 + 6);
          }
          else {
            uint64_t v26 = 0;
          }
          id v27 = v26;
          sub_1001554AC(v27, 0, *((void **)WeakRetained + 12));
        }
        id v28 = *((id *)WeakRetained + 12);
        self;
        unsigned int v29 = sub_10014B3B8((uint64_t)NRDLocalDevice, v28, &off_1001D4C00);

        if (!v29)
        {
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v30 = (id)qword_1001F4A18;
          id v31 = v30;
          if (v30) {
            unsigned __int8 v32 = (void *)*((void *)v30 + 6);
          }
          else {
            unsigned __int8 v32 = 0;
          }
          uint64_t v33 = v32;
          sub_10015596C(v33, 0, *((void **)WeakRetained + 12));
        }
        int v34 = (void *)*((void *)WeakRetained + 53);
        if (v34)
        {
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          id v35 = [*((id *)WeakRetained + 14) copy];
          id v36 = [v35 countByEnumeratingWithState:&v47 objects:v51 count:16];
          if (v36)
          {
            id v37 = v36;
            uint64_t v38 = *(void *)v48;
            do
            {
              for (i = 0; i != v37; i = (char *)i + 1)
              {
                if (*(void *)v48 != v38) {
                  objc_enumerationMutation(v35);
                }
                id v40 = *(void **)(*((void *)&v47 + 1) + 8 * i);
                if (objc_msgSend(v40, "state", v42, v43, v44, v45) == 8) {
                  [v40 checkPeerAvailabilityWithForceAggressive:1];
                }
              }
              id v37 = [v35 countByEnumeratingWithState:&v47 objects:v51 count:16];
            }
            while (v37);
          }

          int v34 = (void *)*((void *)WeakRetained + 53);
        }
        *((void *)WeakRetained + 53) = 0;
      }
      else if (IsLevelEnabled)
      {
        id v41 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1000D9BD0(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = v4;
  if (WeakRetained && v4 && *((unsigned char *)WeakRetained + 14) && WeakRetained[52] == v4) {
    sub_1000D9C5C((uint64_t)WeakRetained, v6);
  }
}

void sub_1000D9C5C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v7 = *(id *)(a1 + 96);
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v159 = 7637;
    id v160 = v4;
    uint64_t v157 = "";
    uint64_t v158 = "-[NRDDeviceConductor discoveredDevice:]";
    _NRLogWithArgs();
  }
  objc_storeStrong((id *)(a1 + 424), a2);
  long long v179 = 0u;
  long long v180 = 0u;
  long long v177 = 0u;
  long long v178 = 0u;
  id v9 = *(id *)(a1 + 112);
  id v10 = [v9 countByEnumeratingWithState:&v177 objects:v185 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v178;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v178 != v12) {
          objc_enumerationMutation(v9);
        }
        sub_1000DADDC(a1, *(void **)(*((void *)&v177 + 1) + 8 * i));
      }
      id v11 = [v9 countByEnumeratingWithState:&v177 objects:v185 count:16];
    }
    while (v11);
  }

  if (v4)
  {
    int v14 = (void *)v4[12];
    if (v14)
    {
      id v15 = v14;
      sub_10014B328((uint64_t)NRDLocalDevice, v15, *(void **)(a1 + 96));

      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v16 = (id)qword_1001F4A18;
      uint64_t v17 = v16;
      if (v16) {
        id v18 = (void *)*((void *)v16 + 5);
      }
      else {
        id v18 = 0;
      }
      id v19 = v18;
      sub_1000326B0((uint64_t)v19);
    }
    id v20 = sub_100126CBC((uint64_t)v4, 5u, 0, 0);

    if (v20)
    {
      id v21 = sub_100126E78((uint64_t)v4);
      if (v21)
      {
        id v22 = (void *)v4[15];
        if (v22)
        {
          id v23 = +[NSNumber numberWithUnsignedChar:4];
          id v22 = [v22 objectForKeyedSubscript:v23];
        }
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v24 = (id)qword_1001F4A18;
        uint64_t v25 = v24;
        if (v24) {
          uint64_t v26 = (void *)*((void *)v24 + 8);
        }
        else {
          uint64_t v26 = 0;
        }
        id v27 = v26;
        sub_1000D3DC0((uint64_t)v27, v22, v21, *(void **)(a1 + 96));
      }
    }
    id v28 = sub_100126CBC((uint64_t)v4, 2u, 101, 0);

    if (v28)
    {
      unsigned int v29 = (void *)v4[15];
      if (v29)
      {
        id v30 = +[NSNumber numberWithUnsignedChar:2];
        unsigned int v29 = [v29 objectForKeyedSubscript:v30];
      }
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v31 = (id)qword_1001F4A18;
      unsigned __int8 v32 = v31;
      if (v31) {
        uint64_t v33 = (void *)*((void *)v31 + 6);
      }
      else {
        uint64_t v33 = 0;
      }
      int v34 = v33;

      sub_1001554AC(v34, v29, *(void **)(a1 + 96));
    }
    id v35 = sub_100126CBC((uint64_t)v4, 2u, 102, 0);

    BOOL v174 = v4;
    if (!v35) {
      goto LABEL_71;
    }
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v36 = (id)qword_1001F4A18;
    id v37 = v36;
    if (v36) {
      uint64_t v38 = (void *)*((void *)v36 + 6);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = v38;

    if (v39)
    {
      id v40 = v39[8];
      if (v40)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v41 = (id)qword_1001F4A18;
        uint64_t v42 = v41;
        if (v41) {
          uint64_t v43 = (void *)*((void *)v41 + 6);
        }
        else {
          uint64_t v43 = 0;
        }
        uint64_t v44 = v43;

        if (v44) {
          unsigned int v45 = (void *)v44[8];
        }
        else {
          unsigned int v45 = 0;
        }
        id v46 = v45;
        int v47 = [v46 addressFamily];

        goto LABEL_54;
      }
    }
    else
    {
      id v40 = 0;
    }
    int v47 = 0;
LABEL_54:

    id v48 = sub_100126CBC((uint64_t)v4, 2u, 102, v47);
    long long v49 = [v48 hostname];
    self;
    if (qword_1001F47E8 != -1) {
      dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
    }
    id v50 = (id)qword_1001F47E0;
    uint64_t v51 = @"62743";
    if (!v50) {
      uint64_t v51 = 0;
    }
    uint64_t v52 = v51;
    v53 = +[NWAddressEndpoint endpointWithHostname:v49 port:v52];

    id v54 = [v53 hostname];
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v55 = (id)qword_1001F4A18;
    uint64_t v56 = v55;
    if (v55) {
      char v57 = (void *)*((void *)v55 + 6);
    }
    else {
      char v57 = 0;
    }
    id v58 = v57;

    if (v58) {
      id v59 = (void *)v58[8];
    }
    else {
      id v59 = 0;
    }
    id v60 = v59;
    id v61 = [v60 hostname];
    unsigned __int8 v62 = [v54 isEqualToString:v61];

    if ((v62 & 1) == 0)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v63 = (id)qword_1001F4A18;
      id v64 = v63;
      if (v63) {
        uint64_t v65 = (void *)*((void *)v63 + 6);
      }
      else {
        uint64_t v65 = 0;
      }
      id v66 = v65;

      sub_10015596C(v66, v53, *(void **)(a1 + 96));
    }

    id v4 = v174;
LABEL_71:
    id v67 = sub_100126CBC((uint64_t)v4, 2u, 103, 0);

    if (v67)
    {
      id v170 = sub_100126CBC((uint64_t)v4, 2u, 103, 0);
      id v68 = [v170 hostname];
      self;
      if (qword_1001F47E8 != -1) {
        dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
      }
      id v69 = (id)qword_1001F47E0;
      id v70 = @"62743";
      if (!v69) {
        id v70 = 0;
      }
      id v71 = v70;
      id v72 = +[NWAddressEndpoint endpointWithHostname:v68 port:v71];

      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v73 = (id)qword_1001F4A18;
      id v74 = v73;
      if (v73) {
        id v75 = (void *)*((void *)v73 + 6);
      }
      else {
        id v75 = 0;
      }
      uint64_t v76 = v75;

      unsigned int v77 = *(void **)(a1 + 96);
      id v78 = v72;
      id v79 = v77;
      id v80 = v78;
      if (v76)
      {
        v81 = v76[3];
        dispatch_assert_queue_V2(v81);

        v175 = (void *)sub_1001553E4(v78);
        id v82 = v76[15];
        if (v82) {
          id v82 = (void *)v82[9];
        }
        id v83 = v82;
        BOOL v84 = [v83 objectForKeyedSubscript:v79];
        uint64_t v85 = [v84 firstObject];

        dispatch_time_t v86 = (void *)v85;
        id v80 = v175;
        if (!v86 || ([v86 isEqual:v175] & 1) == 0)
        {
          v167 = v86;
          id v87 = sub_10013DC5C((uint64_t)NRDLocalDevice, v79);
          id v168 = v78;
          if (qword_1001F4DC0 != -1) {
            dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DC0 != -1) {
              dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
            }
            id v88 = (void *)qword_1001F4DB8;
            id v89 = v76[15];
            id v90 = v88;
            if (v89) {
              id v91 = (void *)v89[9];
            }
            else {
              id v91 = 0;
            }
            id v92 = v91;
            [v92 objectForKeyedSubscript:v79];
            id v80 = v175;
            id v161 = v175;
            uint64_t v162 = v87;
            v160 = uint64_t v159 = 1006;
            uint64_t v157 = "";
            uint64_t v158 = "-[NRLinkManagerWiFi setPeerNANEndpoint:nrUUID:]";
            _NRLogWithArgs();
          }
          if (v80)
          {
            *(void *)&long long v191 = v80;
            CFArrayRef v93 = +[NSArray arrayWithObjects:&v191 count:1];
          }
          else
          {
            CFArrayRef v93 = 0;
          }
          CFArrayRef v94 = v76[15];
          if (v94) {
            CFArrayRef v94 = (void *)v94[9];
          }
          int v166 = v87;
          id v95 = v94;
          [v95 setObject:v93 forKeyedSubscript:v79];

          if (v175) {
          uint64_t v172 = v76;
          }
          id v96 = [v76[19] copy:v157 v158 v159 v160 v161 v162];
          long long v186 = 0u;
          long long v187 = 0u;
          long long v188 = 0u;
          long long v189 = 0u;
          id v97 = v96;
          id v98 = [v97 countByEnumeratingWithState:&v186 objects:v190 count:16];
          if (v98)
          {
            id v99 = v98;
            uint64_t v100 = *(void *)v187;
            do
            {
              for (j = 0; j != v99; j = (char *)j + 1)
              {
                if (*(void *)v187 != v100) {
                  objc_enumerationMutation(v97);
                }
                id v102 = *(void **)(*((void *)&v186 + 1) + 8 * (void)j);
                if ([v102 subtype] == 103)
                {
                  id v103 = [v102 nrUUID];
                  unsigned int v104 = [v103 isEqual:v79];

                  if (v104) {
                    [v102 cancelWithReason:@"Peer NAN endpoint changed"];
                  }
                }
              }
              id v99 = [v97 countByEnumeratingWithState:&v186 objects:v190 count:16];
            }
            while (v99);
          }

          id v4 = v174;
          id v80 = v175;
          id v78 = v168;
          if (v175)
          {
            uint64_t v105 = (void *)nw_interface_create_with_name();
            id v106 = [v175 copyCEndpoint];
            id v107 = (void *)nw_interface_copy_local_address_for_remote_address();

            if (v107)
            {
              unsigned int v165 = v105;
              v163 = [NRLinkNAN alloc];
              id v108 = v172[3];
              unsigned int v109 = +[NWAddressEndpoint endpointWithCEndpoint:v107];
              self;
              unsigned int v164 = v107;
              if (qword_1001F47E8 != -1) {
                dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
              }
              id v110 = (id)qword_1001F47E0;
              long long v111 = @"62743";
              if (!v110) {
                long long v111 = 0;
              }
              long long v112 = v111;
              uint64_t v113 = v108;
              id v114 = [(NRLinkNAN *)v163 initLinkWithQueue:v108 linkDelegate:v172 nrUUID:v79 wifiInterfaceName:@"nan0" localOuterEndpoint:v109 remoteOuterEndpoint:v175 listenerPortString:v112];

              if (!v114) {
                [v172 reportEvent:3201];
              }

              id v4 = v174;
              id v80 = v175;
              id v107 = v164;
              uint64_t v105 = v165;
            }
          }
          uint64_t v76 = v172;
          dispatch_time_t v86 = v167;
        }
      }
    }
    id v115 = sub_100126CBC((uint64_t)v4, 2u, 104, 0);

    if (v115)
    {
      uint64_t v116 = (void *)v4[15];
      if (v116)
      {
        uint64_t v117 = +[NSNumber numberWithUnsignedChar:7];
        id v118 = [v116 objectForKeyedSubscript:v117];
      }
      else
      {
        id v118 = 0;
      }
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v119 = (id)qword_1001F4A18;
      id v120 = v119;
      if (v119) {
        id v121 = (void *)*((void *)v119 + 6);
      }
      else {
        id v121 = 0;
      }
      id v122 = v121;

      id v123 = *(void **)(a1 + 96);
      id v124 = v118;
      id v176 = v123;
      if (v122)
      {
        long long v193 = 0u;
        long long v194 = 0u;
        long long v191 = 0u;
        long long v192 = 0u;
        id v125 = [v124 countByEnumeratingWithState:&v191 objects:v190 count:16];
        if (v125)
        {
          id v126 = v125;
          id v127 = 0;
          uint64_t v128 = *(void *)v192;
          do
          {
            for (uint64_t k = 0; k != v126; uint64_t k = (char *)k + 1)
            {
              if (*(void *)v192 != v128) {
                objc_enumerationMutation(v124);
              }
              uint64_t v130 = (void *)sub_1001553E4(*(void **)(*((void *)&v191 + 1) + 8 * (void)k));
              if (v130)
              {
                if (!v127) {
                  id v127 = objc_alloc_init((Class)NSMutableArray);
                }
                [v127 addObject:v130, v157];
              }
            }
            id v126 = [v124 countByEnumeratingWithState:&v191 objects:v190 count:16];
          }
          while (v126);
        }
        else
        {
          id v127 = 0;
        }
        uint64_t v131 = v122[16];
        if (v131) {
          uint64_t v131 = (void *)v131[9];
        }
        long long v132 = v131;
        int v133 = [v132 objectForKeyedSubscript:v176];

        if (!v133
          || (id v134 = [objc_alloc((Class)NSSet) initWithArray:v127],
              id v135 = [objc_alloc((Class)NSSet) initWithArray:v133],
              unsigned __int8 v136 = [v134 isEqualToSet:v135],
              v135,
              v134,
              (v136 & 1) == 0))
        {
          uint64_t v173 = sub_10013DC5C((uint64_t)NRDLocalDevice, v176);
          if (qword_1001F4DC0 != -1) {
            dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DC0 != -1) {
              dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
            }
            long long v137 = (void *)qword_1001F4DB8;
            long long v138 = v122[16];
            id v139 = v137;
            if (v138) {
              BOOL v140 = (void *)v138[9];
            }
            else {
              BOOL v140 = 0;
            }
            id v141 = v140;
            [v141 objectForKeyedSubscript:v176];
            id v161 = v127;
            uint64_t v162 = v173;
            v160 = uint64_t v159 = 1102;
            uint64_t v157 = "";
            uint64_t v158 = "-[NRLinkManagerWiFi setPeerIREndpoints:forNRUUID:]";
            _NRLogWithArgs();
          }
          id v142 = v122[16];
          long long v143 = v142;
          uint64_t v169 = v133;
          if (v142) {
            id v144 = (void *)*((void *)v142 + 9);
          }
          else {
            id v144 = 0;
          }
          id v145 = v144;
          [v145 setObject:v127 forKeyedSubscript:v176];

          uint64_t v171 = (uint64_t)v122;
          id v146 = [v122[19] copy];
          long long v181 = 0u;
          long long v182 = 0u;
          long long v183 = 0u;
          long long v184 = 0u;
          id v147 = v146;
          id v148 = [v147 countByEnumeratingWithState:&v181 objects:&v186 count:16];
          if (v148)
          {
            id v149 = v148;
            uint64_t v150 = *(void *)v182;
            do
            {
              for (m = 0; m != v149; m = (char *)m + 1)
              {
                if (*(void *)v182 != v150) {
                  objc_enumerationMutation(v147);
                }
                v152 = *(void **)(*((void *)&v181 + 1) + 8 * (void)m);
                if (objc_msgSend(v152, "subtype", v157, v158, v159, v160, v161, v162) == 104)
                {
                  v153 = [v152 remoteOuterEndpoint];
                  unsigned __int8 v154 = [v127 containsObject:v153];

                  if ((v154 & 1) == 0)
                  {
                    uint64_t v155 = [v152 nrUUID];
                    unsigned int v156 = [v155 isEqual:v176];

                    if (v156) {
                      [v152 cancelWithReason:@"Peer Wi-Fi endpoint changed"];
                    }
                  }
                }
              }
              id v149 = [v147 countByEnumeratingWithState:&v181 objects:&v186 count:16];
            }
            while (v149);
          }

          id v122 = (id *)v171;
          if ([v127 count]) {
            sub_100154580(v171);
          }
          else {
            sub_100154B9C(v171);
          }
          id v4 = v174;
          int v133 = v169;
        }
      }
    }
  }
}

void sub_1000DADDC(uint64_t a1, void *a2)
{
  id v19 = a2;
  if (!a1 || !*(void *)(a1 + 424) || [v19 state] == 255) {
    goto LABEL_24;
  }
  int v3 = *(void **)(a1 + 424);
  if (v3) {
    int v3 = (void *)v3[10];
  }
  id v4 = v3;
  id v5 = [v4 UUIDString];
  [v19 setPeerToken:v5];

  id v6 = *(void **)(a1 + 424);
  if (v6) {
    id v6 = (void *)v6[11];
  }
  id v7 = v6;
  id v8 = [v7 UUIDString];
  [v19 setLocalToken:v8];

  if ([v19 type] == 5)
  {
    id v9 = v19;
    id v10 = v9;
    uint64_t v11 = *(void *)(a1 + 424);
    BOOL v13 = 0;
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 48);
      if ((v12 & 1) != 0 && ((v12 & 2) != 0 || (*(unsigned char *)(v11 + 56) & 2) != 0)) {
        BOOL v13 = 1;
      }
    }
    if ([v9 startRequested])
    {
      if (!v10)
      {
        if (!v13) {
          goto LABEL_21;
        }
        goto LABEL_18;
      }
      if (v13 != (v10[208] != 0))
      {
LABEL_18:
        [v10 cancelWithReason:@"classD support changed"];
LABEL_21:

        goto LABEL_22;
      }
    }
    else if (!v10)
    {
      goto LABEL_21;
    }
    v10[208] = v13;
    goto LABEL_21;
  }
LABEL_22:
  int v14 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v16 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v17 = [v19 peerToken];
    id v18 = [v19 localToken];
    _NRLogWithArgs();
  }
LABEL_24:
}

BOOL sub_1000DB33C(uint64_t a1, int a2, BOOL a3, char a4, int a5, void *a6)
{
  id v11 = a6;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (a2) {
      unsigned int v12 = 3;
    }
    else {
      unsigned int v12 = 2;
    }
    sub_1000DC6FC(a1, v12);
    BOOL v13 = objc_alloc_init(NRLinkDirectorRequest);
    id v15 = v13;
    if (v13)
    {
      if (a2) {
        char v16 = 2;
      }
      else {
        char v16 = 3;
      }
      v13->_type = v16;
      if (a2) {
        uint64_t v17 = 2;
      }
      else {
        uint64_t v17 = 3;
      }
      v13->_allowsSuspendedLinuint64_t k = byte_10016CA14[v17];
      *(unsigned char *)(a1 + 37) = v16;
      if (a5) {
        v13->_requiredLinkType = 1;
      }
      objc_setProperty_nonatomic_copy(v13, v14, v11, 48);
      v15->_attemptImmediately = a3;
      sub_1000D6720(a1, v15);
      if ((a4 & 1) != 0 && !v15->_complete) {
        sub_1000D8C10(a1, v15);
      }
      BOOL complete = v15->_complete;
    }
    else
    {
      *(unsigned char *)(a1 + 37) = 0;
      sub_1000D6720(a1, 0);
      BOOL complete = 0;
      if (a4)
      {
        sub_1000D8C10(a1, 0);
        BOOL complete = 0;
      }
    }
  }
  else
  {
    BOOL complete = 0;
  }

  return complete;
}

void sub_1000DB474(uint64_t a1, const char *a2)
{
  if (!a1) {
    return;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if ((a2 & 1) == 0) {
    *(unsigned char *)(a1 + 16) = 0;
  }
  if (*(unsigned __int8 *)(a1 + 15) == a2) {
    return;
  }
  uint64_t v42 = a2;
  sub_1000D85E8(a1, 1008, @"%d -> %d", v4, v5, v6, v7, v8, *(unsigned __int8 *)(a1 + 15));
  id v9 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v11 = *(id *)(a1 + 96);
    unsigned int v12 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v13 = *(unsigned __int8 *)(a1 + 15);

    uint64_t v44 = v13;
    unsigned int v45 = a2;
    uint64_t v43 = 1885;
    id v41 = "";
    uint64_t v42 = "-[NRDDeviceConductor setPreferWiFiRequest:]";
    _NRLogWithArgs();
  }
  *(unsigned char *)(a1 + 15) = (_BYTE)a2;
  if (*(void *)(a1 + 368))
  {
    if (a2) {
      goto LABEL_9;
    }
LABEL_18:
    if (*(unsigned char *)(a1 + 18))
    {
      id v22 = (void *)_NRCopyLogObjectForNRUUID();
      int v23 = _NRLogIsLevelEnabled();

      if (v23)
      {
        id v24 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v43 = 1948;
        id v41 = "";
        uint64_t v42 = "-[NRDDeviceConductor setPreferWiFiRequest:]";
        _NRLogWithArgs();
      }
      id v25 = sub_1000DC5BC(a1, 2, 102);
      if ([v25 startRequested]) {
        [v25 suspend];
      }
    }
    *(unsigned char *)(a1 + 20) = 0;
    *(unsigned char *)(a1 + 26) = 0;
    sub_1000DC6FC(a1, 2u);
    sub_1000DC6FC(a1, 7u);
    uint64_t v26 = mach_absolute_time();
    uint64_t v27 = *(void *)(a1 + 368);
    if (v27)
    {
      *(void *)(v27 + 24) = v26;
      id v28 = *(void **)(a1 + 368);
    }
    else
    {
      id v28 = 0;
    }
    [v28 submit:v41, v42, v43, v44, v45];
    unsigned int v29 = *(void **)(a1 + 368);
    *(void *)(a1 + 368) = 0;

    sub_1000DC97C(a1, 0);
    *(unsigned char *)(a1 + 53) = 0;
    id v30 = *(void **)(a1 + 432);
    *(void *)(a1 + 432) = 0;

    sub_1000DCA2C(a1);
    id v31 = *(unsigned char **)(a1 + 624);
    if (v31 && (v31[16] & 1) != 0)
    {
      sub_1000DCB28(a1, v31);
    }
    return;
  }
  id v20 = objc_alloc_init(NRAnalyticsPreferWiFi);
  id v21 = *(void **)(a1 + 368);
  *(void *)(a1 + 368) = v20;

  if (!*(unsigned char *)(a1 + 15)) {
    goto LABEL_18;
  }
LABEL_9:
  uint64_t v14 = *(void *)(a1 + 584);
  if (v14)
  {
    if ([*(id *)(a1 + 584) cancelled])
    {
      id v15 = (void *)_NRCopyLogObjectForNRUUID();
      int v16 = _NRLogIsLevelEnabled();

      if (v16)
      {
        uint64_t v17 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v43 = 440;
        uint64_t v44 = v14;
        id v41 = "";
        uint64_t v42 = "-[NRAutoLinkUpgradeMonitor reportPreferWiFiRequest]";
        _NRLogWithArgs();
      }
    }
  }
  uint64_t v18 = mach_absolute_time();
  uint64_t v19 = *(void *)(a1 + 368);
  if (v19) {
    *(void *)(v19 + 16) = v18;
  }
  sub_1000DB92C(a1);
  if (sub_1000DB9E0(a1))
  {
    sub_1000DBB24(a1);
  }
  else
  {
    unsigned __int8 v32 = (void *)_NRCopyLogObjectForNRUUID();
    int v33 = _NRLogIsLevelEnabled();

    if (v33)
    {
      int v34 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v43 = 1908;
      id v41 = "";
      uint64_t v42 = "-[NRDDeviceConductor setPreferWiFiRequest:]";
      _NRLogWithArgs();
    }
    sub_1000DBBF4(a1);
  }
  sub_1000DBDE8(a1);
  sub_1000DC04C(a1);
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id v35 = *(id *)(a1 + 432);
  id v36 = [v35 countByEnumeratingWithState:&v46 objects:v52 count:16];
  if (v36)
  {
    id v37 = v36;
    uint64_t v38 = *(void *)v47;
    while (2)
    {
      for (i = 0; i != v37; i = (char *)i + 1)
      {
        if (*(void *)v47 != v38) {
          objc_enumerationMutation(v35);
        }
        if (objc_msgSend(*(id *)(*((void *)&v46 + 1) + 8 * i), "unsignedCharValue", v41, v42, v43, v44, v45) == 101)
        {
          uint64_t v40 = (*(void *)(a1 + 592) >> 2) & 1;
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472;
          v50[2] = sub_1000DC258;
          v50[3] = &unk_1001C7530;
          char v51 = v40;
          v50[4] = a1;
          sub_1000DC374(a1, 2, v40, v50);
          goto LABEL_44;
        }
      }
      id v37 = [v35 countByEnumeratingWithState:&v46 objects:v52 count:16];
      if (v37) {
        continue;
      }
      break;
    }
  }
LABEL_44:
}

void sub_1000DB92C(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 8))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    sub_1000DC6FC(a1, 3u);
    self = objc_alloc_init(NRLinkDirectorRequest);
    if (self)
    {
      self->_type = 9;
      self->_allowsSuspendedLinuint64_t k = 1;
      objc_setProperty_nonatomic_copy(self, v2, 0, 48);
      self->_attemptImmediately = 1;
    }
    sub_1000D6720(a1, self);
  }
}

uint64_t sub_1000DB9E0(uint64_t a1)
{
  self;
  uint64_t v2 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (!v2)
  {
    id v5 = sub_1000D8B78();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v7 = sub_1000D8B78();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136446210;
    *(void *)(v8 + 4) = "-[NRDDeviceConductor isAlwaysOnWiFiSupported]";
    sub_1000D8B78();
    _NRLogAbortWithPack();
  }
  uint64_t v3 = v2[17];

  return v3;
}

void sub_1000DBB24(uint64_t a1)
{
  if (a1 && (sub_1000D81C8(a1, 5) & 1) == 0)
  {
    uint64_t v2 = objc_alloc_init(NRLinkDirectorRequest);
    uint64_t v4 = v2;
    if (v2)
    {
      v2->_type = 5;
      v2->_allowsSuspendedLinuint64_t k = 0;
      v2->_requiredLinkType = 2;
    }
    newValue[0] = _NSConcreteStackBlock;
    newValue[1] = 3221225472;
    newValue[2] = sub_1000DE3E4;
    newValue[3] = &unk_1001C8BA8;
    newValue[4] = a1;
    if (v2) {
      objc_setProperty_nonatomic_copy(v2, v3, newValue, 48);
    }
    sub_1000D6720(a1, v4);
  }
}

void sub_1000DBBF4(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    id v2 = sub_1000DC5BC(a1, 1, 0);
    id v17 = v2;
    if (v2)
    {
      if ([v2 state] == 1
        || [v17 state] == 9
        || [v17 state] == 8)
      {
        uint64_t v3 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v5 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v14 = 3256;
          id v15 = v17;
          unsigned int v12 = "";
          uint64_t v13 = "-[NRDDeviceConductor suspendLinkOfType:]";
          _NRLogWithArgs();
        }
        [v17 suspend:v12, v13, v14, v15];
      }
      else
      {
        id v9 = (void *)_NRCopyLogObjectForNRUUID();
        int v10 = _NRLogIsLevelEnabled();

        if (v10)
        {
          id v11 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v14 = 3251;
          id v15 = v17;
          unsigned int v12 = "";
          uint64_t v13 = "-[NRDDeviceConductor suspendLinkOfType:]";
          _NRLogWithArgs();
        }
        [v17 setSuspendWhenReady:1 v12 v13 v14 v15];
      }
    }
    else
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7)
      {
        uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
        StringFromNRLinkType = (void *)createStringFromNRLinkType();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1000DBDE8(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (*(unsigned char *)(a1 + 20))
    {
      id v2 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v13 = (id)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      *(unsigned char *)(a1 + 20) = 1;
      uint64_t v4 = objc_alloc_init(NRLinkDirectorRequest);
      uint64_t v6 = v4;
      if (v4)
      {
        v4->_type = 7;
        v4->_allowsSuspendedLinuint64_t k = 0;
        objc_storeStrong((id *)&v4->_cancelIfLinkTypeReady, &off_1001D4D30);
      }
      newValue[0] = _NSConcreteStackBlock;
      newValue[1] = 3221225472;
      newValue[2] = sub_1000DDEF8;
      newValue[3] = &unk_1001C8BA8;
      newValue[4] = a1;
      if (v6)
      {
        objc_setProperty_nonatomic_copy(v6, v5, newValue, 24);
        v6->_attemptImmediately = 1;
        v6->_timeout = 60;
      }
      sub_1000DC97C(a1, 0);
      id v7 = *(id *)(a1 + 432);
      uint64_t v8 = [v7 firstObject];

      if (v8)
      {
        unsigned int v9 = [v8 unsignedCharValue];
        if (v9 - 105 >= 0xFFFFFFFD && v6)
        {
          v6->_attemptImmediately = 1;
          v6->_timeout = 15;
        }
        sub_1000DC97C(a1, v9 == 102);
        BOOL v10 = *(unsigned char *)(a1 + 52) != 0;
      }
      else
      {
        BOOL v10 = 0;
      }
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1000DDF28;
      v14[3] = &unk_1001C81C0;
      v14[4] = a1;
      id v15 = v8;
      BOOL v16 = v10;
      id v12 = v8;
      if (v6) {
        objc_setProperty_nonatomic_copy(v6, v11, v14, 48);
      }
      sub_1000D6720(a1, v6);
    }
  }
}

void sub_1000DC04C(uint64_t a1)
{
  if (!a1) {
    return;
  }
  sub_1000DD420(a1);
  if (*(unsigned char *)(a1 + 18))
  {
    sub_1000DD714(a1);
    id v2 = (unsigned char *)(a1 + 15);
    if (!*(unsigned char *)(a1 + 15)) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 15)) {
      return;
    }
    id v2 = (unsigned char *)(a1 + 15);
  }
  sub_1000DBDE8(a1);
LABEL_8:
  uint64_t v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  if (*(unsigned char *)(a1 + 10) && *(unsigned char *)(a1 + 52) && *v2)
  {
    sub_1000DD8F8((unsigned char *)a1);
  }
  else
  {
    sub_1000DD62C(a1, 1);
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    id v9 = sub_1000DC5BC(a1, 2, 101);
    if (v9 && [v9 state] != 255) {
      [v9 start];
    }
    if (*(unsigned char *)(a1 + 48) && *(unsigned char *)(a1 + 18) && !*v2 && !*(unsigned char *)(a1 + 28))
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7)
      {
        uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      sub_1000DBB24(a1);
    }
  }
}

void sub_1000DC258(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    id v2 = *(dispatch_queue_t **)(a1 + 32);
    if (v2)
    {
      dispatch_assert_queue_V2(v2[13]);
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v3 = (id)qword_1001F4A18;
      uint64_t v4 = v3;
      if (v3) {
        id v5 = (void *)*((void *)v3 + 6);
      }
      else {
        id v5 = 0;
      }
      uint64_t v6 = v5;

      if (v6) {
        id v2 = (dispatch_queue_t *)v6[7];
      }
      else {
        id v2 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    int v7 = v2;

    if (!v7)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      if (v8)
      {
        id v9 = *(id *)(v8 + 624);
        if (v9) {
          v9[4] |= 8u;
        }
      }
      else
      {
        id v9 = 0;
      }
    }
  }
}

void sub_1000DC374(uint64_t a1, int a2, char a3, void *a4)
{
  int v7 = a4;
  if (!*(unsigned char *)(a1 + 12)) {
    goto LABEL_36;
  }
  id v21 = v7;
  if (a2 == 1)
  {
    uint64_t v8 = 616;
  }
  else
  {
    if (a2 != 2)
    {
      BOOL v16 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled)
      {
        id v12 = 0;
        goto LABEL_19;
      }
      id v13 = (unsigned char *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
      id v12 = 0;
      goto LABEL_17;
    }
    uint64_t v8 = 624;
  }
  id v12 = (int *)*(id *)(a1 + v8);
  if (v12) {
    goto LABEL_18;
  }
  id v13 = (id)sub_10006D3DC([NRLinkUpgradeReport alloc], a2);
  unsigned __int8 v14 = [*(id *)(a1 + 128) type];
  if (v13) {
    v13[11] = v14;
  }
  unsigned __int8 v15 = [*(id *)(a1 + 128) subtype];
  if (v13)
  {
    v13[12] = v15;
    if (*(unsigned char *)(a1 + 30)) {
      *((_DWORD *)v13 + 4) |= 0x100u;
    }
    if (*(void *)(a1 + 256)) {
      *((_DWORD *)v13 + 4) |= 0x200u;
    }
  }
  id v12 = (int *)v13;
LABEL_17:

LABEL_18:
  if (a2 == 2)
  {
    uint64_t v18 = 624;
LABEL_25:
    objc_storeStrong((id *)(a1 + v18), v12);
    goto LABEL_26;
  }
LABEL_19:
  if (a2 == 1)
  {
    if (v12) {
      v12[4] |= 0x800u;
    }
    uint64_t v18 = 616;
    goto LABEL_25;
  }
LABEL_26:
  if (v12)
  {
    if (!*((void *)v12 + 8))
    {
      *((void *)v12 + 8) = mach_absolute_time();
      *((void *)v12 + 9) = 0;
    }
    int v19 = v12[4] | 1;
    v12[4] = v19;
    ++v12[6];
    if (a3)
    {
      *((void *)v12 + 4) = *(void *)(a1 + 592);
      uint64_t v20 = *((void *)v12 + 6);
      *((void *)v12 + 5) |= *(void *)(a1 + 600);
      if (!v20)
      {
        *((void *)v12 + 6) = mach_absolute_time();
        *((void *)v12 + 7) = 0;
        int v19 = v12[4];
      }
      v12[4] = v19 | 2;
    }
    if ((~*(_DWORD *)(a1 + 592) & 6) == 0) {
      v12[4] |= 0x10u;
    }
  }
  else
  {
    mach_absolute_time();
    if (a3) {
      mach_absolute_time();
    }
  }
  v21[2](v21, v9, v10, v11);

  int v7 = v21;
LABEL_36:
}

id sub_1000DC5BC(uint64_t a1, int a2, int a3)
{
  if (!a1) {
    return 0;
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v5 = *(id *)(a1 + 112);
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
LABEL_5:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v14 != v8) {
        objc_enumerationMutation(v5);
      }
      uint64_t v10 = *(void **)(*((void *)&v13 + 1) + 8 * v9);
      if (objc_msgSend(v10, "type", (void)v13) == a2
        && [v10 subtype] == a3)
      {
        break;
      }
      if (v7 == (id)++v9)
      {
        id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (!v7) {
          goto LABEL_12;
        }
        goto LABEL_5;
      }
    }
    id v11 = v10;
  }
  else
  {
LABEL_12:
    id v11 = 0;
  }

  return v11;
}

void sub_1000DC6FC(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v4 = *(id *)(a1 + 120);
    id v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v19;
      while (2)
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v19 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(unsigned __int8 **)(*((void *)&v18 + 1) + 8 * (void)v8);
          if (v9)
          {
            if (v9[10] == a2)
            {
              long long v15 = v9;

              sub_1000D8C10(a1, v15);
              long long v16 = (void *)_NRCopyLogObjectForNRUUID();
              int IsLevelEnabled = _NRLogIsLevelEnabled();

              if (!IsLevelEnabled) {
                goto LABEL_26;
              }
              long long v13 = (void *)_NRCopyLogObjectForNRUUID();
              if (a2 > 0xB) {
                long long v14 = @"Unknown";
              }
              else {
                long long v14 = (__CFString *)[objc_alloc((Class)NSString) initWithUTF8String:(&off_1001C7B98)[a2]];
              }
              _NRLogWithArgs();
              goto LABEL_25;
            }
          }
          else if (!a2)
          {
            goto LABEL_14;
          }
          uint64_t v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v10 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
        id v6 = v10;
        if (v10) {
          continue;
        }
        break;
      }
    }
LABEL_14:

    id v11 = (void *)_NRCopyLogObjectForNRUUID();
    int v12 = _NRLogIsLevelEnabled();

    if (v12)
    {
      long long v13 = (void *)_NRCopyLogObjectForNRUUID();
      if (a2 > 0xB) {
        long long v14 = @"Unknown";
      }
      else {
        long long v14 = (__CFString *)[objc_alloc((Class)NSString) initWithUTF8String:(&off_1001C7B98)[a2]];
      }
      _NRLogWithArgs();
      long long v15 = 0;
LABEL_25:
    }
    else
    {
      long long v15 = 0;
    }
LABEL_26:
  }
}

void sub_1000DC97C(uint64_t a1, int a2)
{
  if (a1)
  {
    char v2 = a2;
    if (*(unsigned __int8 *)(a1 + 52) != a2)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v6 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      *(unsigned char *)(a1 + 52) = v2;
    }
  }
}

void sub_1000DCA2C(uint64_t a1)
{
  if (a1)
  {
    sub_1000DD420(a1);
    id v2 = sub_1000DC5BC(a1, 2, 102);
    id v5 = v2;
    if (*(unsigned char *)(a1 + 18) || *(unsigned char *)(a1 + 15))
    {
      if ([v2 startRequested]) {
        sub_1000DC04C(a1);
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 44))
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
        id v3 = sub_1000DC5BC(a1, 2, 101);
        id v4 = v3;
        if (v3 && [v3 startRequested]) {
          [v4 cancelWithReason:@"Wi-Fi link is not needed anymore"];
        }
      }
      sub_1000DC6FC(a1, 5u);
      sub_1000DD62C(a1, 0);
      if ([v5 startRequested]) {
        [v5 cancelWithReason:@"not needed anymore"];
      }
    }
  }
}

void sub_1000DCB28(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1 || !v3) {
    goto LABEL_71;
  }
  int v4 = *((unsigned __int8 *)v3 + 8);
  id v79 = v3;
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id v3 = v79;
      if (!IsLevelEnabled) {
        goto LABEL_71;
      }
      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
      goto LABEL_70;
    }
    id v5 = *(id *)(a1 + 184);
    id v6 = v5;
    if (v5 && *((unsigned char *)v5 + 8)) {
      goto LABEL_7;
    }
    int v12 = *(id *)(a1 + 616);
    if (!v12 || !v12[8])
    {

LABEL_7:
      goto LABEL_8;
    }
    uint64_t v13 = *(void *)(a1 + 616);
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + 72);

      if (v14) {
        goto LABEL_8;
      }
    }
    else
    {
    }
    uint64_t v15 = mach_absolute_time();
    uint64_t v16 = *(void *)(a1 + 616);
    if (v16) {
      *(void *)(v16 + 72) = v15;
    }
LABEL_8:
    if ((*(unsigned char *)(a1 + 592) & 2) == 0)
    {
      uint64_t v7 = *(id *)(a1 + 616);
      if (v7 && v7[7] || (uint64_t v22 = *(void *)(a1 + 616)) == 0)
      {
      }
      else
      {
        uint64_t v23 = *(void *)(v22 + 48);

        if (v23)
        {
          uint64_t v24 = mach_absolute_time();
          uint64_t v25 = *(void *)(a1 + 616);
          if (v25) {
            *(void *)(v25 + 56) = v24;
          }
        }
      }
    }
    uint64_t v26 = *(void *)(a1 + 184);
    id v3 = v79;
    if (v26 && *(unsigned char *)(v26 + 8)) {
      goto LABEL_71;
    }
    uint64_t v27 = *(void *)(a1 + 592);
    if ((v27 & 2) != 0) {
      goto LABEL_71;
    }
LABEL_45:
    v3[12] = v27;
    v3[13] |= *(void *)(a1 + 600);
    unsigned __int8 v32 = [NRAnalyticsLinkUpgradeReport alloc];
    id v33 = objc_alloc_init((Class)NSMutableDictionary);
    id v36 = v79;
    unint64_t v37 = v79[6];
    double v38 = 0.0;
    uint64_t v39 = &unk_1001F4000;
    double v40 = 0.0;
    if (v37)
    {
      unint64_t v41 = v79[7];
      BOOL v42 = v41 >= v37;
      unint64_t v43 = v41 - v37;
      if (v43 != 0 && v42)
      {
        if (qword_1001F4BB8 != -1)
        {
          unint64_t v77 = v43;
          dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
          unint64_t v43 = v77;
          id v36 = v79;
          uint64_t v39 = (void *)&unk_1001F4000;
        }
        LODWORD(v34) = dword_1001F4BC0;
        LODWORD(v35) = *(_DWORD *)algn_1001F4BC4;
        double v35 = (double)*(unint64_t *)&v35;
        double v34 = 0.000000001 * (double)*(unint64_t *)&v34;
        double v40 = (double)v43 * v34 / v35;
      }
    }
    unint64_t v44 = v36[8];
    if (v44)
    {
      unint64_t v45 = v36[9];
      BOOL v42 = v45 >= v44;
      unint64_t v46 = v45 - v44;
      if (v46 != 0 && v42)
      {
        if (v39[375] != -1)
        {
          unint64_t v78 = v46;
          dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
          unint64_t v46 = v78;
        }
        LODWORD(v34) = dword_1001F4BC0;
        LODWORD(v35) = *(_DWORD *)algn_1001F4BC4;
        double v38 = (double)v46 * (0.000000001 * (double)*(unint64_t *)&v34) / (double)*(unint64_t *)&v35;
      }
    }
    long long v47 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)v79 + 8)];
    [v33 setObject:v47 forKeyedSubscript:@"upgradeType"];

    long long v48 = v79;
    if (v79[4] || v79[12])
    {
      long long v49 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
      [v33 setObject:v49 forKeyedSubscript:@"startAdvice"];

      id v50 = +[NSNumber numberWithUnsignedLongLong:v79[12]];
      [v33 setObject:v50 forKeyedSubscript:@"endAdvice"];

      char v51 = sub_10006D6EC(v79[5]);
      [v33 setObject:v51 forKeyedSubscript:@"startReason"];

      uint64_t v52 = sub_10006D6EC(v79[13]);
      [v33 setObject:v52 forKeyedSubscript:@"endReason"];

      long long v48 = v79;
    }
    v53 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)v48 + 9)];
    [v33 setObject:v53 forKeyedSubscript:@"thermalState"];

    id v54 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)v79 + 10)];
    [v33 setObject:v54 forKeyedSubscript:@"battery"];

    id v55 = +[NSNumber numberWithUnsignedLongLong:(unint64_t)v40];
    [v33 setObject:v55 forKeyedSubscript:@"adviceDuration"];

    if (v38 > 0.0)
    {
      uint64_t v56 = +[NSNumber numberWithUnsignedLongLong:(unint64_t)v38];
      [v33 setObject:v56 forKeyedSubscript:@"clientTriggerDuration"];

      if (v40 > 0.0)
      {
        char v57 = +[NSNumber numberWithInt:v79[6] <= (unint64_t)v79[8]];
        [v33 setObject:v57 forKeyedSubscript:@"adviceStartBeforeClient"];

        id v58 = +[NSNumber numberWithInt:v79[7] <= (unint64_t)v79[9]];
        [v33 setObject:v58 forKeyedSubscript:@"adviceEndBeforeClient"];
      }
    }
    id v59 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)v79 + 11)];
    [v33 setObject:v59 forKeyedSubscript:@"primaryLinkType"];

    id v60 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)v79 + 12)];
    [v33 setObject:v60 forKeyedSubscript:@"primaryLinkSubtype"];

    id v61 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v79 + 5)];
    [v33 setObject:v61 forKeyedSubscript:@"adviceCount"];

    unsigned __int8 v62 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v79 + 6)];
    [v33 setObject:v62 forKeyedSubscript:@"clientTriggerCount"];

    id v63 = +[NSNumber numberWithInt:v79[2] & 1];
    [v33 setObject:v63 forKeyedSubscript:@"clientTriggered"];

    id v64 = +[NSNumber numberWithInt:(*((_DWORD *)v79 + 4) >> 1) & 1];
    [v33 setObject:v64 forKeyedSubscript:@"aluTriggered"];

    uint64_t v65 = +[NSNumber numberWithInt:(*((_DWORD *)v79 + 4) >> 11) & 1];
    [v33 setObject:v65 forKeyedSubscript:@"upgradeSuccessful"];

    id v66 = +[NSNumber numberWithInt:(*((_DWORD *)v79 + 4) >> 2) & 1];
    [v33 setObject:v66 forKeyedSubscript:@"againstWRM"];

    id v67 = +[NSNumber numberWithInt:(*((_DWORD *)v79 + 4) >> 3) & 1];
    [v33 setObject:v67 forKeyedSubscript:@"advisedWithNoLink"];

    id v68 = +[NSNumber numberWithInt:(*((_DWORD *)v79 + 4) >> 4) & 1];
    [v33 setObject:v68 forKeyedSubscript:@"overlappingAdvice"];

    id v69 = +[NSNumber numberWithInt:(*((_DWORD *)v79 + 4) >> 5) & 1];
    [v33 setObject:v69 forKeyedSubscript:@"pluggedIn"];

    id v70 = +[NSNumber numberWithInt:(*((_DWORD *)v79 + 4) >> 6) & 1];
    [v33 setObject:v70 forKeyedSubscript:@"lowPowerMode"];

    id v71 = +[NSNumber numberWithInt:(*((_DWORD *)v79 + 4) >> 8) & 1];
    [v33 setObject:v71 forKeyedSubscript:@"activePhoneCall"];

    id v72 = +[NSNumber numberWithInt:(*((_DWORD *)v79 + 4) >> 9) & 1];
    [v33 setObject:v72 forKeyedSubscript:@"dtcRequest"];

    id v73 = +[NSNumber numberWithInt:(*((_DWORD *)v79 + 4) >> 10) & 1];
    [v33 setObject:v73 forKeyedSubscript:@"thermalWorsened"];

    id v11 = sub_10012F4C0(v32, v33);
    [v11 submit];
    int v74 = *((unsigned __int8 *)v79 + 8);
    if (v74 == 1)
    {
      uint64_t v75 = 616;
    }
    else
    {
      if (v74 != 2)
      {
LABEL_70:

        id v3 = v79;
        goto LABEL_71;
      }
      uint64_t v75 = 624;
    }
    uint64_t v76 = *(void **)(a1 + v75);
    *(void *)(a1 + v75) = 0;

    goto LABEL_70;
  }
  if (!*(unsigned char *)(a1 + 15))
  {
    id v17 = *(id *)(a1 + 624);
    if (v17 && v17[8])
    {
      uint64_t v18 = *(void *)(a1 + 624);
      if (v18)
      {
        uint64_t v19 = *(void *)(v18 + 72);

        if (v19) {
          goto LABEL_13;
        }
      }
      else
      {
      }
      uint64_t v20 = mach_absolute_time();
      uint64_t v21 = *(void *)(a1 + 624);
      if (v21) {
        *(void *)(v21 + 72) = v20;
      }
    }
    else
    {
    }
  }
LABEL_13:
  if ((*(unsigned char *)(a1 + 592) & 4) == 0)
  {
    uint64_t v8 = *(id *)(a1 + 624);
    if (v8 && v8[7] || (uint64_t v28 = *(void *)(a1 + 624)) == 0)
    {
    }
    else
    {
      uint64_t v29 = *(void *)(v28 + 48);

      if (v29)
      {
        uint64_t v30 = mach_absolute_time();
        uint64_t v31 = *(void *)(a1 + 624);
        if (v31) {
          *(void *)(v31 + 56) = v30;
        }
      }
    }
  }
  id v3 = v79;
  if (!*(unsigned char *)(a1 + 15))
  {
    uint64_t v27 = *(void *)(a1 + 592);
    if ((v27 & 4) == 0) {
      goto LABEL_45;
    }
  }
LABEL_71:
}

void sub_1000DD420(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 18))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    id v2 = sub_1000DC5BC(a1, 1, 0);
    id v3 = v2;
    if (*(unsigned char *)(a1 + 28) && [v2 state] > 7) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = 2;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (*(unsigned char *)(a1 + 15)) {
    uint64_t v5 = v4 | 4;
  }
  else {
    uint64_t v5 = v4;
  }
  if (!v5)
  {
    id v15 = 0;
    goto LABEL_26;
  }
  id v15 = objc_alloc_init((Class)NSMutableArray);
  if (!*(unsigned char *)(a1 + 18))
  {
    if (!*(unsigned char *)(a1 + 15)) {
      goto LABEL_26;
    }
    if (*(unsigned char *)(a1 + 8)) {
      goto LABEL_19;
    }
  }
  [v15 addObject:@"terminusd"];
  if (*(unsigned char *)(a1 + 15))
  {
    if (*(unsigned char *)(a1 + 8))
    {
LABEL_19:
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v6 = (id)qword_1001F4A18;
      uint64_t v7 = v6;
      if (v6) {
        uint64_t v8 = (void *)*((void *)v6 + 12);
      }
      else {
        uint64_t v8 = 0;
      }
      id v9 = v8;
      id v10 = sub_100065F6C((uint64_t)v9);

      if ([v10 count]) {
        [v15 addObjectsFromArray:v10];
      }
    }
  }
LABEL_26:
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v11 = (id)qword_1001F4A18;
  int v12 = v11;
  if (v11) {
    uint64_t v13 = (void *)*((void *)v11 + 6);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v13;

  sub_1001573C0(v14, v5, *(void **)(a1 + 96), v15);
}

void sub_1000DD62C(uint64_t a1, int a2)
{
  if ((a2 & 1) != 0 || !*(unsigned char *)(a1 + 18) && !*(unsigned char *)(a1 + 15))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v4 = (id)qword_1001F4A18;
    uint64_t v5 = v4;
    if (v4) {
      id v6 = (void *)*((void *)v4 + 6);
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;

    sub_100155CF0((uint64_t)v7, a2, *(void **)(a1 + 96));
  }
}

void sub_1000DD714(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (*(unsigned char *)(a1 + 19))
    {
      id v2 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v7 = (id)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      *(unsigned char *)(a1 + 19) = 1;
      id v4 = objc_alloc_init(NRLinkDirectorRequest);
      id v6 = v4;
      if (v4)
      {
        v4->_type = 6;
        v4->_allowsSuspendedLinuint64_t k = 0;
        objc_storeStrong((id *)&v4->_timerDescription, @"WiFi-bringup-timeout");
        objc_storeStrong((id *)&v6->_cancelIfLinkTypeReady, &off_1001D4D48);
      }
      newValue[0] = _NSConcreteStackBlock;
      newValue[1] = 3221225472;
      newValue[2] = sub_1000DDA18;
      newValue[3] = &unk_1001C8BA8;
      newValue[4] = a1;
      if (v6)
      {
        objc_setProperty_nonatomic_copy(v6, v5, newValue, 24);
        v6->_attemptImmediately = 1;
        v6->_timeout = 60;
        v6->_deferIfRequestExists = 5;
      }
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1000DDA28;
      v8[3] = &unk_1001C8BA8;
      v8[4] = a1;
      if (v6) {
        objc_setProperty_nonatomic_copy(v6, v5, v8, 48);
      }
      sub_1000D6720(a1, v6);
    }
  }
}

void sub_1000DD8F8(unsigned char *a1)
{
  if (a1 && a1[10])
  {
    id v2 = sub_1000DC5BC((uint64_t)a1, 2, 102);
    id v6 = v2;
    if (v2)
    {
      if (([v2 startRequested] & 1) == 0)
      {
        if (a1[52] || a1[39] == 2)
        {
          [v6 start];
          if (!a1[57]) {
            sub_1000DBB24((uint64_t)a1);
          }
        }
        else
        {
          sub_1000DC6FC((uint64_t)a1, 5u);
        }
      }
    }
    else
    {
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v5 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
  }
}

uint64_t sub_1000DDA18(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1) {
    *(unsigned char *)(v1 + 19) = 0;
  }
  return result;
}

void sub_1000DDA28(uint64_t a1)
{
  id v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    *(unsigned char *)(v5 + 19) = 0;
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      if ((*(unsigned char *)(v6 + 592) & 4) == 0
        || (id v7 = *(void **)(v6 + 584),
            uint64_t v8 = *(void **)(v6 + 608),
            id v9 = v7,
            sub_10006DB48(v9, v8),
            v9,
            (uint64_t v6 = *(void *)(a1 + 32)) != 0))
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v6 + 104));
        sub_1000DDB4C(v6, 0, 10);
      }
    }
  }
}

void sub_1000DDB4C(uint64_t a1, int a2, unsigned int a3)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (*(unsigned __int8 *)(a1 + 18) != a2)
  {
    int v6 = *(unsigned __int8 *)(a1 + 23);
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (v6)
    {
      if (IsLevelEnabled)
      {
        id v20 = (id)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      if (IsLevelEnabled)
      {
        id v9 = *(id *)(a1 + 96);
        id v10 = (void *)_NRCopyLogObjectForNRUUID();

        _NRLogWithArgs();
      }
      *(unsigned char *)(a1 + 18) = a2;
      if (a2)
      {
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_1000DDE8C;
        v24[3] = &unk_1001C8BA8;
        v24[4] = a1;
        id v11 = objc_retainBlock(v24);
        int v12 = v11;
        if (a3)
        {
          uint64_t v13 = objc_alloc_init(NRLinkDirectorRequest);
          uint64_t v14 = v13;
          if (v13)
          {
            v13->_type = 6;
            v13->_allowsSuspendedLinuint64_t k = 0;
            objc_storeStrong((id *)&v13->_timerDescription, @"WiFi-bringup-hysteresis");
            objc_storeStrong((id *)&v14->_cancelIfLinkTypeReady, &off_1001D4D18);
            v14->_attemptImmediately = 1;
            v14->_timeout = a3;
            objc_setProperty_nonatomic_copy(v14, v15, v12, 48);
          }
          sub_1000D6720(a1, v14);
        }
        else
        {
          uint64_t v16 = *(NSObject **)(a1 + 104);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000DDE94;
          block[3] = &unk_1001C8A80;
          uint64_t v23 = v11;
          dispatch_async(v16, block);
          uint64_t v14 = v23;
        }

        id v17 = objc_alloc_init(NRLinkDirectorRequest);
        uint64_t v19 = v17;
        if (v17)
        {
          *(_WORD *)&v17->_type = 1284;
          v17->_allowsSuspendedLinuint64_t k = 0;
          v17->_requiredLinkType = 1;
        }
        newValue[0] = _NSConcreteStackBlock;
        newValue[1] = 3221225472;
        newValue[2] = sub_1000DDEA4;
        newValue[3] = &unk_1001C8BA8;
        newValue[4] = a1;
        if (v17) {
          objc_setProperty_nonatomic_copy(v17, v18, newValue, 48);
        }
        sub_1000D6720(a1, v19);
      }
      else
      {
        sub_1000DC6FC(a1, 4u);
        sub_1000DCA2C(a1);
      }
    }
  }
}

void sub_1000DDE8C(uint64_t a1)
{
}

uint64_t sub_1000DDE94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000DDEA4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 104));
    return sub_1000DDB4C(v1, 0, 10);
  }
  return result;
}

uint64_t sub_1000DDEF8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 368);
    if (!v2 || (*(void *)(v2 + 40) = 1, (uint64_t v1 = *(void *)(result + 32)) != 0)) {
      *(unsigned char *)(v1 + 20) = 0;
    }
  }
  return result;
}

void sub_1000DDF28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || !*(unsigned char *)(v2 + 20)) {
    return;
  }
  if (*(void *)(a1 + 40))
  {
    [*(id *)(v2 + 432) removeObject:];
    uint64_t v2 = *(void *)(a1 + 32);
  }
  sub_1000DC97C(v2, 0);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 && (*(unsigned char *)(v3 + 20) = 0, (uint64_t v4 = *(void *)(a1 + 32)) != 0)) {
    uint64_t v5 = *(void **)(v4 + 432);
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = [v5 count];
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v6)
  {
    if (v7)
    {
      uint64_t v16 = *(void *)(v7 + 368);
      if (v16) {
        *(void *)(v16 + 32) = 1;
      }
    }
    id v17 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v25 = (void *)_NRCopyLogObjectForNRUUID();
      id v33 = "";
      _NRLogWithArgs();
    }
    sub_1000DE254(*(void *)(a1 + 32), @"WiFi link did not come up", v19, v20, v21, v22, v23, v24, (uint64_t)v33);
    uint64_t v26 = *(void *)(a1 + 32);
    if (v26
      && ((*(unsigned char *)(v26 + 592) & 4) == 0
       || (uint64_t v27 = *(void **)(v26 + 608),
           id v28 = *(id *)(v26 + 584),
           sub_10006DB48(v28, v27),
           v28,
           (uint64_t v26 = *(void *)(a1 + 32)) != 0)))
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v26 + 104));
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v29 = (id)qword_1001F4A18;
      uint64_t v30 = v29;
      if (v29) {
        uint64_t v31 = (void *)*((void *)v29 + 6);
      }
      else {
        uint64_t v31 = 0;
      }
      id v37 = v31;

      sub_100157620((uint64_t)v37);
    }
    else
    {
      id v37 = 0;
      sub_100157620(0);
    }
    goto LABEL_30;
  }
  uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
  int v9 = _NRLogIsLevelEnabled();

  if (v9)
  {
    id v10 = *(void **)(a1 + 32);
    if (v10) {
      id v10 = (void *)v10[12];
    }
    id v11 = v10;
    int v12 = (void *)_NRCopyLogObjectForNRUUID();
    [*(id *)(a1 + 40) unsignedCharValue];

    uint64_t v35 = 2273;
    StringFromNRLinkSubtype = (void *)createStringFromNRLinkSubtype();
    id v33 = "";
    double v34 = "-[NRDDeviceConductor setPreferWiFiTimeout]_block_invoke_2";
    _NRLogWithArgs();
  }
  sub_1000DBDE8(*(void *)(a1 + 32));
  int v13 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 32);
  if (v13)
  {
    id v37 = sub_1000DC5BC(v14, 2, 102);
    if ([v37 startRequested])
    {
      CFStringRef v15 = @"AWDL link is not needed anymore";
LABEL_16:
      [v37 cancelWithReason:v15, v33, v34, v35, StringFromNRLinkSubtype];
    }
  }
  else
  {
    if (!v14)
    {
      id v32 = 0;
      goto LABEL_31;
    }
    if (*(unsigned char *)(v14 + 44)) {
      return;
    }
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v14 + 104));
    id v32 = sub_1000DC5BC(v14, 2, 101);
    if (!v32) {
      goto LABEL_31;
    }
    id v37 = v32;
    if ([v32 startRequested])
    {
      CFStringRef v15 = @"Wi-Fi link is not needed anymore";
      goto LABEL_16;
    }
  }
LABEL_30:
  id v32 = v37;
LABEL_31:
}

void sub_1000DE254(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v10 = *(NSObject **)(a1 + 104);
    id v11 = a2;
    dispatch_assert_queue_V2(v10);
    id v12 = [objc_alloc((Class)NSString) initWithFormat:v11 arguments:&a9];

    int v13 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      CFStringRef v15 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    sub_10012F648(*(void **)(a1 + 96), 1009, 0, v12);
    *(unsigned char *)(a1 + 16) = 0;
    if (*(unsigned char *)(a1 + 15))
    {
      if (*(unsigned char *)(a1 + 20)) {
        *(unsigned char *)(a1 + 20) = 0;
      }
      sub_1000DB33C(a1, 0, 1, 0, 0, 0);
      sub_1000DB474(a1, 0);
      *(void *)(a1 + 400) = mach_absolute_time();
    }
    else
    {
      uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
      int v17 = _NRLogIsLevelEnabled();

      if (v17)
      {
        uint64_t v18 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1000DE3E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 104));
    id v2 = sub_1000DC5BC(v1, 1, 0);
    if (v2)
    {
      id v3 = v2;
      if ([v2 state] != 255)
      {
        if ([v3 state] == 8)
        {
          [v3 suspend];
        }
        else if ([v3 state] != 9)
        {
          [v3 setSuspendWhenReady:1];
        }
      }
      id v2 = v3;
    }
  }
  else
  {
    id v2 = 0;
  }
}

void sub_1000DE93C(uint64_t a1, char a2)
{
  if (!a1) {
    return;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (!*(unsigned char *)(a1 + 44)) {
    return;
  }
  uint64_t v4 = objc_alloc_init(NRLinkDirectorRequest);
  id v6 = v4;
  if (!v4)
  {
    sub_1000D6720(a1, 0);
    uint64_t v5 = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v4->_type = 1;
  v4->_requiredLinkType = 1;
  *(_WORD *)&v4->_attemptImmediately = 257;
  sub_1000D6720(a1, v4);
  uint64_t v5 = v6;
  if ((a2 & 1) != 0 && !v6->_complete)
  {
LABEL_6:
    sub_1000D8C10(a1, v6);
    uint64_t v5 = v6;
  }
LABEL_7:
}

void sub_1000DEA08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(unsigned char *)(v1 + 26))
  {
    *(unsigned char *)(v1 + 26) = 0;
  }
  else
  {
    id v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v4 = (id)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
}

void sub_1000DEF0C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v1 = *(void *)(a1 + 32);
    if (v1)
    {
      if (*(unsigned char *)(v1 + 28)) {
        return;
      }
      id v2 = *(id *)(v1 + 616);
      if (v2) {
        v2[4] |= 8u;
      }
    }
    else
    {
      id v2 = 0;
    }
  }
}

void sub_1000DF254(uint64_t a1)
{
  if (!a1) {
    return;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v2 = (unsigned __int8 *)(id)qword_1001F4A18;
  if (v2)
  {
    int v3 = v2[8];

    if (v3)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        return;
      }
      id v16 = (id)_NRCopyLogObjectForNRUUID();
LABEL_8:
      _NRLogWithArgs();

      return;
    }
  }
  if (!*(unsigned char *)(a1 + 31))
  {
    id v10 = (void *)_NRCopyLogObjectForNRUUID();
    int v11 = _NRLogIsLevelEnabled();

    if (!v11) {
      return;
    }
    id v12 = *(id *)(a1 + 96);
    id v16 = (id)_NRCopyLogObjectForNRUUID();

    goto LABEL_8;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  id v6 = sub_1000DC5BC(a1, 4, 0);
  if (v6)
  {
    *(void *)(a1 + 224) = mach_continuous_time();
    [v6 start];
    uint64_t v7 = objc_alloc_init(NRLinkDirectorRequest);
    int v9 = v7;
    if (v7)
    {
      v7->_type = 8;
      v7->_allowsSuspendedLinuint64_t k = 0;
      v7->_requiredLinkType = 1;
    }
    newValue[0] = _NSConcreteStackBlock;
    newValue[1] = 3221225472;
    newValue[2] = sub_1000DF500;
    newValue[3] = &unk_1001C8BA8;
    newValue[4] = a1;
    if (v7) {
      objc_setProperty_nonatomic_copy(v7, v8, newValue, 48);
    }
    sub_1000D6720(a1, v9);
  }
  else
  {
    int v13 = (void *)_NRCopyLogObjectForNRUUID();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
      CFStringRef v15 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
}

void sub_1000DF500(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 104));
    id v3 = sub_1000DC5BC(v1, 4, 0);
    unsigned __int8 v2 = [v3 ikeClassDEstablished];
  }
  else
  {
    id v3 = 0;
    unsigned __int8 v2 = [0 ikeClassDEstablished];
  }
  if ((v2 & 1) != 0 || [v3 ikeClassCEstablished]) {
    [v3 suspend];
  }
  else {
    [v3 cancelWithReason:@"BT reconnected"];
  }
}

void sub_1000DFD74(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if ([*(id *)(a1 + 168) count])
    {
      xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
      if (!v2)
      {
        id v9 = sub_1000D8B78();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v11 = sub_1000D8B78();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v12 = _os_log_pack_fill();
        sub_1000DFF90(v12, (uint64_t)"nr_xpc_dictionary_create");
        sub_1000D8B78();
        _NRLogAbortWithPack();
      }
      id v3 = v2;
      sub_1000DFFC4(a1, v2);

      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      id v4 = *(id *)(a1 + 168);
      id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v14;
        do
        {
          for (i = 0; i != v6; i = (char *)i + 1)
          {
            if (*(void *)v14 != v7) {
              objc_enumerationMutation(v4);
            }
            xpc_connection_send_message(*(xpc_connection_t *)(*((void *)&v13 + 1) + 8 * i), v3);
          }
          id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }
        while (v6);
      }
    }
  }
}

double sub_1000DFF90(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 136446978;
  *(_DWORD *)a1 = 136446978;
  *(void *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(void *)(a1 + 14) = 0;
  *(_WORD *)(a1 + 22) = 2048;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1024;
  *(_DWORD *)(a1 + 34) = 0;
  return result;
}

id sub_1000DFFC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  int v4 = *(unsigned __int8 *)(a1 + 27);
  int v5 = *(unsigned __int8 *)(a1 + 28);
  BOOL v6 = *(unsigned char *)(a1 + 28) != 0;
  int v7 = *(unsigned __int8 *)(a1 + 29);
  unsigned int v31 = *(_DWORD *)(a1 + 88);
  int v8 = *(unsigned __int8 *)(a1 + 63);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  id v9 = *(id *)(a1 + 128);
  int v35 = v7;
  int v36 = v8;
  BOOL v34 = v6;
  if ([v9 state] != 8)
  {
    BOOL v12 = 0;
    BOOL v13 = 0;
    unsigned __int8 v32 = 0;
    unsigned __int8 v33 = 0;
    id v11 = 0;
    LOBYTE(v10) = 0;
    goto LABEL_14;
  }
  unsigned int v10 = [v9 type];
  unsigned __int8 v33 = [v9 subtype];
  unsigned __int8 v32 = [v9 ikeClassCEstablished];
  if (v10 - 1 < 2) {
    goto LABEL_47;
  }
  if (v10 == 4)
  {
    BOOL v13 = 0;
    id v11 = 0;
    BOOL v12 = 1;
    goto LABEL_14;
  }
  if (v10 == 5)
  {
LABEL_47:
    if (*(void *)(a1 + 448) && *(void *)(a1 + 464))
    {
      id v11 = (void *)NEVirtualInterfaceCopyName();
      BOOL v12 = 0;
      BOOL v13 = 1;
    }
    else
    {
      BOOL v12 = 0;
      id v11 = 0;
      BOOL v13 = 1;
    }
  }
  else
  {
    long long v14 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v16 = *(id *)(a1 + 96);
      int v17 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    BOOL v12 = 0;
    BOOL v13 = 0;
    id v11 = 0;
  }
LABEL_14:
  if (v4) {
    BOOL v18 = v5 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  BOOL v19 = !v18;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  id v20 = sub_1000DC5BC(a1, 4, 0);

  if (v20 && [v20 state] == 8) {
    BOOL v12 = 1;
  }
  if (v13)
  {
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    uint64_t v30 = v11;
    uint64_t v21 = (id)qword_1001F4A18;
    uint64_t v22 = v21;
    if (v21 && v21[8])
    {
      id v23 = v3;

LABEL_29:
      if (qword_1001F4B80 != -1) {
        dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
      }
      id v3 = v23;
      if (byte_1001F4B78)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
        unsigned __int8 v24 = [*(id *)(a1 + 128) ikeClassCEstablished];
        BOOL v19 = 0;
        unsigned __int8 v25 = 0;
        BOOL v26 = 1;
        LOBYTE(v10) = 1;
      }
      else
      {
        BOOL v19 = 0;
        unsigned __int8 v25 = 101;
        LOBYTE(v10) = 2;
        BOOL v26 = 1;
        unsigned __int8 v24 = 1;
      }
      unsigned int v27 = v31;
      goto LABEL_43;
    }
    id v23 = v3;
    if (qword_1001F4B80 == -1)
    {
      if (byte_1001F4B78) {
        goto LABEL_36;
      }
    }
    else
    {
      dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
      if (byte_1001F4B78)
      {
LABEL_36:
        int v29 = *(unsigned __int8 *)(a1 + 48);

        if (v29) {
          goto LABEL_29;
        }
LABEL_42:
        unsigned int v27 = v31;
        unsigned __int8 v24 = v32;
        unsigned __int8 v25 = v33;
        BOOL v26 = v34;
LABEL_43:
        id v11 = v30;
        goto LABEL_44;
      }
    }

    goto LABEL_42;
  }
  unsigned int v27 = 0;
  unsigned __int8 v25 = v33;
  BOOL v26 = v34;
  unsigned __int8 v24 = v32;
LABEL_44:
  *(_DWORD *)(a1 + 92) = v27;
  *(unsigned char *)(a1 + 64) = v36;
  sub_1000E035C((uint64_t)NRDDeviceConductor, *(void **)(a1 + 96), v26, v13, v12, v19, v24, v35 != 0, v10, v25, v11, v27, v36 != 0, v3);

  return v3;
}

void *sub_1000E035C(uint64_t a1, void *a2, BOOL a3, BOOL a4, BOOL a5, BOOL a6, BOOL a7, BOOL a8, unsigned __int8 a9, unsigned __int8 a10, void *a11, unsigned int a12, BOOL a13, void *a14)
{
  id v17 = a2;
  id v18 = a11;
  id v19 = a14;
  self;
  double v40 = v17;
  id v20 = sub_10013DD58((uint64_t)NRDLocalDevice, v17, 0);
  id v21 = v19;
  uint64_t v22 = v21;
  if (v20)
  {
    xpc_dictionary_set_BOOL(v21, nrXPCKeyDeviceMonitorStatusIsRegistered, v20[8]);
    xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusIsEnabled, v20[9]);
    long long v41 = 0uLL;
    sub_100141A68(v20, &v41);
    self;
    if (WORD5(v41)) {
      BOOL v23 = WORD6(v41) == 0;
    }
    else {
      BOOL v23 = 1;
    }
    int v24 = !v23;
    long long v41 = 0uLL;
    sub_10014B038(v20, &v41);
    self;
    if (WORD5(v41)) {
      BOOL v25 = WORD6(v41) == 0;
    }
    else {
      BOOL v25 = 1;
    }
    int v26 = !v25;
    if (v20[8])
    {
      int v27 = v20[9] ? v24 : 0;
      if (v27 & v26)
      {
        unsigned int v28 = a10;
        unsigned int v29 = a9;
        uint64_t v30 = v18;
        BOOL v31 = a3;
        BOOL v32 = a7;
        goto LABEL_24;
      }
    }
  }
  else
  {
    xpc_dictionary_set_BOOL(v21, nrXPCKeyDeviceMonitorStatusIsRegistered, 0);
    xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusIsEnabled, 0);
  }
  unsigned __int8 v33 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    int v35 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  BOOL v32 = 0;
  unsigned int v29 = 0;
  unsigned int v28 = 0;
  uint64_t v30 = 0;
  a6 = 0;
  a5 = 0;
  a4 = 0;
  BOOL v31 = 0;
LABEL_24:
  xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusIsNearby, v31);
  xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusIsConnected, a4);
  xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusIsCloudConnected, a5);
  xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusIsAsleep, a6);
  xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusIsClassCConnected, v32);
  xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusHasUnpairedBluetooth, a8);
  xpc_dictionary_set_uint64(v22, nrXPCKeyDeviceMonitorStatusLinkType, v29);
  xpc_dictionary_set_uint64(v22, nrXPCKeyDeviceMonitorStatusLinkSubtype, v28);
  if (v30) {
    xpc_dictionary_set_string(v22, nrXPCKeyDeviceMonitorStatusProxySvcIntfName, (const char *)[v30 UTF8String]);
  }
  xpc_dictionary_set_uint64(v22, nrXPCKeyDeviceMonitorStatusThermalPressureLevel, a12);
  xpc_dictionary_set_BOOL(v22, nrXPCKeyDeviceMonitorStatusPluggedIn, a13);

  return v22;
}

void sub_1000E0910(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(unsigned char *)(v1 + 14) && *(void *)(a1 + 40) == *(void *)(v1 + 216))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 104));
    id v3 = sub_1000DC5BC(v1, 1, 0);
    id v9 = v3;
    if (v3 && ([v3 ikeClassDEstablished] & 1) != 0)
    {
      int v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        BOOL v6 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 32);
      if (v7) {
        uint64_t v8 = *(void *)(v7 + 192);
      }
      else {
        uint64_t v8 = 0;
      }
      sub_10003458C(v8);
    }
  }
}

uint64_t sub_1000E0B98(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = v4;
  if (a1)
  {
    id v16 = v4;
    id v4 = [v4 ikeClassDEstablished];
    id v5 = v16;
    if (v4)
    {
      id v4 = [v16 type];
      id v5 = v16;
      if (v4 != 4)
      {
        if (*(unsigned char *)(a1 + 28) && *(unsigned char *)(a1 + 27))
        {
          BOOL v6 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
          *(unsigned char *)(a1 + 65) = 1;
          goto LABEL_27;
        }
        *(unsigned char *)(a1 + 65) = 0;
        id v9 = (id *)sub_100025474([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
        unsigned int v10 = v9;
        if (v9) {
          objc_storeStrong(v9 + 3, a2);
        }
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v11 = (unsigned int *)(id)qword_1001F4A18;
        BOOL v12 = v11;
        if (v11)
        {
          if (!v10)
          {
LABEL_26:

            sub_100027090((uint64_t)v10);
LABEL_27:
            id v5 = v16;
            goto LABEL_28;
          }
          unsigned int v13 = v11[5];
          if (v13)
          {
            if (v13 >= 0xB)
            {
              if (v13 >= 0x15)
              {
                if (v13 >= 0x1F)
                {
                  if (v13 >= 0x29) {
                    LOBYTE(v13) = 50;
                  }
                  else {
                    LOBYTE(v13) = 40;
                  }
                }
                else
                {
                  LOBYTE(v13) = 30;
                }
              }
              else
              {
                LOBYTE(v13) = 20;
              }
            }
            else
            {
              LOBYTE(v13) = 10;
            }
          }
        }
        else
        {
          if (!v10) {
            goto LABEL_26;
          }
          LOBYTE(v13) = 0;
        }
        char v17 = v13;
        id v14 = [objc_alloc((Class)NSData) initWithBytes:&v17 length:1];
        sub_100025B00((uint64_t)v10, 14, v14);

        goto LABEL_26;
      }
    }
  }
LABEL_28:

  return _objc_release_x1(v4, v5);
}

uint64_t sub_1000E0D9C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = v4;
  if (a1)
  {
    id v16 = v4;
    id v4 = [v4 ikeClassDEstablished];
    id v5 = v16;
    if (v4)
    {
      id v4 = [v16 type];
      id v5 = v16;
      if (v4 != 4)
      {
        if (*(unsigned char *)(a1 + 28) && *(unsigned char *)(a1 + 27))
        {
          BOOL v6 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
          *(unsigned char *)(a1 + 66) = 1;
          goto LABEL_17;
        }
        *(unsigned char *)(a1 + 66) = 0;
        id v9 = (id *)sub_100025474([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
        unsigned int v10 = v9;
        if (v9) {
          objc_storeStrong(v9 + 3, a2);
        }
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v11 = (id)qword_1001F4A18;
        BOOL v12 = v11;
        if (v11)
        {
          BOOL v13 = *((unsigned char *)v11 + 11) != 0;
          if (!v10)
          {
LABEL_16:

            sub_100027090((uint64_t)v10);
LABEL_17:
            id v5 = v16;
            goto LABEL_18;
          }
        }
        else
        {
          BOOL v13 = 0;
          if (!v10) {
            goto LABEL_16;
          }
        }
        BOOL v17 = v13;
        id v14 = [objc_alloc((Class)NSData) initWithBytes:&v17 length:1];
        sub_100025B00((uint64_t)v10, 22, v14);

        goto LABEL_16;
      }
    }
  }
LABEL_18:

  return _objc_release_x1(v4, v5);
}

uint64_t sub_1000E0F64(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = v4;
  if (a1)
  {
    if (v4)
    {
      if (*(void *)(a1 + 488))
      {
        BOOL v17 = v4;
        id v4 = [v4 ikeClassDEstablished];
        id v5 = v17;
        if (v4)
        {
          id v4 = [v17 state];
          id v5 = v17;
          if (v4 != 255)
          {
            id v4 = [v17 type];
            id v5 = v17;
            if (v4 != 4)
            {
              if (*(unsigned char *)(a1 + 27) && *(unsigned char *)(a1 + 28))
              {
                BOOL v6 = (void *)_NRCopyLogObjectForNRUUID();
                int IsLevelEnabled = _NRLogIsLevelEnabled();

                id v5 = v17;
                if (!IsLevelEnabled) {
                  goto LABEL_20;
                }
                uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
              else
              {
                uint64_t v8 = sub_10001A05C(*(dispatch_queue_t **)(a1 + 488));
                if (v8)
                {
                  uint64_t v9 = *(void *)(a1 + 488);
                  if (v9) {
                    uint64_t v9 = *(void *)(v9 + 32);
                  }
                  *(void *)(a1 + 496) = v9;
                  unsigned int v10 = (id *)sub_100025474([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
                  id v11 = v10;
                  if (v10) {
                    objc_storeStrong(v10 + 3, a2);
                  }
                  sub_100025B00((uint64_t)v11, 12, v8);
                  sub_100027090((uint64_t)v11);
                  BOOL v12 = (void *)_NRCopyLogObjectForNRUUID();
                  int v13 = _NRLogIsLevelEnabled();

                  if (v13)
                  {
                    id v14 = *(id *)(a1 + 96);
                    long long v15 = (void *)_NRCopyLogObjectForNRUUID();
                    _NRLogWithArgs();
                  }
                }
              }

              id v5 = v17;
            }
          }
        }
      }
    }
  }
LABEL_20:

  return _objc_release_x1(v4, v5);
}

void sub_1000E42A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v3 = (id)qword_1001F4A18;
    id v4 = v3;
    if (v3) {
      id v5 = (void *)*((void *)v3 + 6);
    }
    else {
      id v5 = 0;
    }
    BOOL v6 = v5;

    if (v6 && (uint64_t v7 = v6[13]) != 0) {
      int v8 = *(_DWORD *)(v7 + 12);
    }
    else {
      int v8 = 0;
    }
  }
  else
  {
    BOOL v6 = 0;
    int v8 = 0;
  }

  uint64_t v9 = *(void **)(a1 + 40);
  if (!v9)
  {
    id v11 = 0;
    uint64_t v53 = *(void *)(a1 + 32);
    if (!v53) {
      goto LABEL_96;
    }
    goto LABEL_58;
  }
  id v10 = sub_100026D48(v9, v8, 0);
  id v11 = v10;
  if (v10 && [v10 count])
  {
    unint64_t v12 = sub_100024424(*(void *)(a1 + 40));
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      if (v12 == *(void *)(v13 + 320))
      {
LABEL_14:
        id v14 = [v11 firstObject];
        uint64_t v15 = *(void *)(a1 + 32);
        if (v15)
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v15 + 104));
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v16 = (id)qword_1001F4A18;
          BOOL v17 = v16;
          if (v16) {
            id v18 = (void *)*((void *)v16 + 6);
          }
          else {
            id v18 = 0;
          }
          id v19 = v18;
        }
        else
        {
          id v19 = 0;
        }
        v229 = v14;
        id v20 = +[NSArray arrayWithObjects:&v229 count:1];
        uint64_t v21 = *(void *)(a1 + 32);
        if (v21) {
          uint64_t v22 = *(void **)(v21 + 96);
        }
        else {
          uint64_t v22 = 0;
        }
        sub_1001554AC(v19, v20, v22);

        BOOL v23 = [v14 addressData];
        uint64_t v24 = *(void *)(a1 + 32);
        if (v24) {
          BOOL v25 = *(void **)(v24 + 96);
        }
        else {
          BOOL v25 = 0;
        }
        sub_1000A8214(v25, @"WiFiEndpointAddressData", v23);
        uint64_t v26 = *(void *)(a1 + 32);
        if (v26)
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v26 + 104));
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v27 = (id)qword_1001F4A18;
          unsigned int v28 = v27;
          if (v27) {
            unsigned int v29 = (void *)*((void *)v27 + 6);
          }
          else {
            unsigned int v29 = 0;
          }
          id v30 = v29;

          BOOL v31 = *(void **)(a1 + 32);
          if (v31) {
            BOOL v31 = (void *)v31[12];
          }
        }
        else
        {
          id v30 = 0;
          BOOL v31 = 0;
        }
        BOOL v32 = v31;
        unsigned __int8 v33 = sub_1001558C0((uint64_t)v30, v32);
        sub_1000D85E8(v26, 1010, @"received Wi-Fi address update: %@", v34, v35, v36, v37, v38, (uint64_t)v33);

        uint64_t v39 = *(void **)(a1 + 40);
        if (v39)
        {
          double v40 = sub_1000261E8(v39, 4);
          long long v41 = [v40 firstObject];

          if (v41)
          {
            id v42 = [v41 length];
            uint64_t v43 = *(void *)(a1 + 32);
            if (v42)
            {
              if (v43)
              {
                dispatch_assert_queue_V2(*(dispatch_queue_t *)(v43 + 104));
                self;
                if (qword_1001F4A20 != -1) {
                  dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
                }
                id v44 = (id)qword_1001F4A18;
                unint64_t v45 = v44;
                if (v44) {
                  unint64_t v46 = (void *)*((void *)v44 + 6);
                }
                else {
                  unint64_t v46 = 0;
                }
                id v47 = v46;
              }
              else
              {
                id v47 = 0;
              }
              sub_1001552AC((uint64_t)v47, v41);
            }
            else
            {
              if (v43)
              {
                dispatch_assert_queue_V2(*(dispatch_queue_t *)(v43 + 104));
                self;
                if (qword_1001F4A20 != -1) {
                  dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
                }
                id v54 = (id)qword_1001F4A18;
                id v55 = v54;
                if (v54) {
                  uint64_t v56 = (void *)*((void *)v54 + 6);
                }
                else {
                  uint64_t v56 = 0;
                }
                id v47 = v56;
              }
              else
              {
                id v47 = 0;
              }
              sub_1001552AC((uint64_t)v47, 0);
            }

            uint64_t v57 = *(void *)(a1 + 32);
            if (v57) {
              id v58 = *(void **)(v57 + 96);
            }
            else {
              id v58 = 0;
            }
            sub_1000A8214(v58, @"WiFiSignature", v41);
          }
        }
        else
        {
          long long v41 = 0;
        }

        goto LABEL_57;
      }
    }
    else if (!v12)
    {
      goto LABEL_14;
    }
    long long v48 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v50 = *(void **)(a1 + 32);
      if (v50) {
        id v50 = (void *)v50[12];
      }
      char v51 = v50;
      uint64_t v52 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v203 = 6078;
      uint64_t v204 = *(void *)(a1 + 40);
      long long v201 = "";
      long long v202 = "-[NRDDeviceConductor linkDidReceiveData:data:]_block_invoke";
      _NRLogWithArgs();

      uint64_t v53 = *(void *)(a1 + 32);
      if (!v53) {
        goto LABEL_96;
      }
      goto LABEL_58;
    }
  }
LABEL_57:
  uint64_t v53 = *(void *)(a1 + 32);
  if (!v53) {
    goto LABEL_96;
  }
LABEL_58:
  if (!*(unsigned char *)(v53 + 10)) {
    goto LABEL_96;
  }
  unint64_t v59 = sub_100024424(*(void *)(a1 + 40));
  uint64_t v60 = *(void *)(a1 + 32);
  if (v60)
  {
    if (v59 != *(void *)(v60 + 344)) {
      goto LABEL_96;
    }
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v60 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v61 = (id)qword_1001F4A18;
    unsigned __int8 v62 = v61;
    if (v61) {
      id v63 = (void *)*((void *)v61 + 6);
    }
    else {
      id v63 = 0;
    }
    id v64 = v63;

    if (v64 && (uint64_t v65 = v64[14]) != 0) {
      int v66 = *(_DWORD *)(v65 + 12);
    }
    else {
      int v66 = 0;
    }
  }
  else
  {
    if (v59) {
      goto LABEL_96;
    }
    id v64 = 0;
    int v66 = 0;
  }

  id v67 = *(void **)(a1 + 40);
  if (v67)
  {
    id v68 = sub_1000261E8(v67, 10);
    id v69 = [v68 firstObject];

    if (v69 && [v69 length])
    {
      LOBYTE(v206) = 0;
      [v69 getBytes:&v206 length:1];
      if (v206) {
        id v70 = &__kCFBooleanTrue;
      }
      else {
        id v70 = &__kCFBooleanFalse;
      }

      if ([v70 BOOLValue])
      {
        id v71 = *(void **)(a1 + 40);
        if (v71) {
          id v69 = sub_100026D48(v71, v66, 1);
        }
        else {
          id v69 = 0;
        }
        id v72 = [v69 firstObject:v201, v202, v203, v204];
        uint64_t v73 = *(void *)(a1 + 32);
        if (v73)
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v73 + 104));
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v74 = (id)qword_1001F4A18;
          uint64_t v75 = v74;
          if (v74) {
            uint64_t v76 = (void *)*((void *)v74 + 6);
          }
          else {
            uint64_t v76 = 0;
          }
          unint64_t v77 = v76;

          uint64_t v78 = *(void *)(a1 + 32);
          if (v78) {
            id v79 = *(void **)(v78 + 96);
          }
          else {
            id v79 = 0;
          }
        }
        else
        {
          unint64_t v77 = 0;
          id v79 = 0;
        }
        sub_10015596C(v77, v72, v79);

        long long v202 = (const char *)v72;
        sub_1000D85E8(*(void *)(a1 + 32), 1040, @"%@ received AWDL address update: %@", v80, v81, v82, v83, v84, *(void *)(a1 + 32));
      }
      else
      {
        uint64_t v85 = *(void *)(a1 + 32);
        if (v85)
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(v85 + 104));
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v86 = (id)qword_1001F4A18;
          id v87 = v86;
          if (v86) {
            id v88 = (void *)*((void *)v86 + 6);
          }
          else {
            id v88 = 0;
          }
          id v69 = v88;

          uint64_t v89 = *(void *)(a1 + 32);
          if (v89) {
            id v90 = *(void **)(v89 + 96);
          }
          else {
            id v90 = 0;
          }
        }
        else
        {
          id v69 = 0;
          id v90 = 0;
        }
        sub_10015596C((id *)v69, 0, v90);
      }
    }
    else
    {
      id v70 = 0;
    }
  }
  else
  {
    id v70 = 0;
  }

LABEL_96:
  unint64_t v91 = sub_100024424(*(void *)(a1 + 40));
  uint64_t v92 = *(void *)(a1 + 32);
  if (v92)
  {
    if (v91 != *(void *)(v92 + 352)) {
      goto LABEL_138;
    }
LABEL_98:
    CFArrayRef v93 = *(void **)(a1 + 40);
    if (!v93)
    {
      id v95 = 0;
      goto LABEL_137;
    }
    CFArrayRef v94 = sub_1000261E8(v93, 15);
    id v95 = [v94 firstObject];

    if (!v95)
    {
LABEL_137:

      uint64_t v92 = *(void *)(a1 + 32);
      goto LABEL_138;
    }
    id v96 = (__CFString *)[objc_alloc((Class)NSString) initWithData:v95 encoding:4];
    if (!v96)
    {
LABEL_136:

      goto LABEL_137;
    }
    uint64_t v98 = a1 + 32;
    uint64_t v97 = *(void *)(a1 + 32);
    int v99 = _NRIsAppleInternal();
    CFStringRef v105 = @"<redacted>";
    if (v99) {
      CFStringRef v105 = v96;
    }
    long long v202 = (const char *)v105;
    sub_1000D85E8(v97, 1051, @"%@ received country code update: %@", v100, v101, v102, v103, v104, v97);
    if (!*(void *)v98)
    {
      long long v200 = v96;
      unsigned int v109 = 0;
      goto LABEL_135;
    }
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)v98 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v106 = (id)qword_1001F4A18;
    id v107 = v106;
    if (v106) {
      id v108 = (void *)*((void *)v106 + 6);
    }
    else {
      id v108 = 0;
    }
    unsigned int v109 = v108;

    id v110 = v96;
    if (!v109) {
      goto LABEL_135;
    }
    long long v111 = v110;
    long long v112 = v109[3];
    dispatch_assert_queue_V2(v112);

    if (![(__CFString *)v111 compare:@"XZ" options:1])
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        _NRLogWithArgs();
      }
      goto LABEL_135;
    }
    id v113 = v109[22];
    uint64_t v225 = 0;
    v226 = &v225;
    uint64_t v227 = 0x2020000000;
    char v228 = 0;
    uint64_t v221 = 0;
    v222 = &v221;
    uint64_t v223 = 0x2020000000;
    char v224 = 0;
    uint64_t v215 = 0;
    long long v216 = &v215;
    uint64_t v217 = 0x3032000000;
    long long v218 = sub_100151DC4;
    long long v219 = sub_100151DD4;
    id v220 = 0;
    BOOL v206 = _NSConcreteStackBlock;
    uint64_t v207 = 3221225472;
    long long v208 = sub_100157B00;
    long long v209 = &unk_1001C8958;
    id v205 = v113;
    id v210 = v205;
    long long v212 = &v225;
    long long v211 = v111;
    long long v213 = &v215;
    long long v214 = &v221;
    if (sub_100151CF0((uint64_t)NRLinkManagerWiFi, &v206)
      || !*((unsigned char *)v226 + 24) && !*((unsigned char *)v222 + 24)
      || v216[5])
    {
      id v198 = sub_10014E0F0();
      int v199 = _NRLogIsLevelEnabled();

      if (!v199) {
        goto LABEL_134;
      }
      id v116 = sub_10014E0F0();
      uint64_t v203 = 1962;
      uint64_t v204 = v216[5];
      long long v201 = "";
      long long v202 = "-[NRLinkManagerWiFi setPeerCountryCodeIfApplicable:]";
      _NRLogWithArgs();
    }
    else if (*((unsigned char *)v222 + 24))
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v114 = (id)qword_1001F4DB8;
      char v115 = _NRLogIsLevelEnabled();

      if ((v115 & 1) == 0) {
        goto LABEL_134;
      }
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v116 = (id)qword_1001F4DB8;
      uint64_t v203 = 1957;
      long long v201 = "";
      long long v202 = "-[NRLinkManagerWiFi setPeerCountryCodeIfApplicable:]";
      _NRLogWithArgs();
    }
    else
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v117 = (id)qword_1001F4DB8;
      int v118 = _NRLogIsLevelEnabled();

      if (!v118) {
        goto LABEL_134;
      }
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v116 = (id)qword_1001F4DB8;
      uint64_t v203 = 1959;
      long long v201 = "";
      long long v202 = "-[NRLinkManagerWiFi setPeerCountryCodeIfApplicable:]";
      _NRLogWithArgs();
    }

LABEL_134:
    _Block_object_dispose(&v215, 8);

    _Block_object_dispose(&v221, 8);
    _Block_object_dispose(&v225, 8);

LABEL_135:
    goto LABEL_136;
  }
  if (!v91) {
    goto LABEL_98;
  }
LABEL_138:
  if (v92 && *(unsigned char *)(v92 + 8))
  {
    LOBYTE(v207) = 0;
    BOOL v206 = 0;
    id v119 = *(void **)(a1 + 40);
    if (v119)
    {
      id v120 = sub_1000261E8(v119, 13);
      id v121 = [v120 firstObject];

      if (v121)
      {
        [v121 getBytes:&v206 length:9];
        if ((v207 & 1) == 0)
        {
          id v122 = 0;
          goto LABEL_215;
        }
        id v122 = +[NSNumber numberWithUnsignedChar:v206];
        uint64_t v129 = v121;
        if (!v122)
        {
LABEL_212:
          id v121 = v129;
          goto LABEL_215;
        }
LABEL_158:
        unint64_t v130 = sub_100024424(*(void *)(a1 + 40));
        uint64_t v131 = *(void *)(a1 + 32);
        if (v131)
        {
          if (v130 == *(void *)(v131 + 336)) {
            goto LABEL_160;
          }
        }
        else if (!v130)
        {
LABEL_160:
          long long v137 = (const char *)[v122 BOOLValue:v201, v202, v203, v204];
          uint64_t v138 = a1 + 32;
          id v139 = "disable";
          if (v137) {
            id v139 = "enable";
          }
          sub_1000D85E8(*(void *)(a1 + 32), 1021, @"%s", v132, v133, v134, v135, v136, (uint64_t)v139);
          if (*(void *)v138)
          {
            *(unsigned char *)(*(void *)v138 + 16) = 0;
            uint64_t v140 = *(void *)(a1 + 32);
            if ((v137 & 1) == 0)
            {
              if (v140)
              {
                dispatch_assert_queue_V2(*(dispatch_queue_t *)(v140 + 104));
                self;
                if (qword_1001F4A20 != -1) {
                  dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
                }
                id v141 = (id)qword_1001F4A18;
                id v142 = v141;
                if (v141) {
                  long long v143 = (void *)*((void *)v141 + 6);
                }
                else {
                  long long v143 = 0;
                }
                id v144 = v143;

                if (v144)
                {
                  id v145 = v144[3];
                  dispatch_assert_queue_V2(v145);

                  BOOL v146 = *((_DWORD *)v144 + 10) > 0;
                  uint64_t v147 = *(void *)(a1 + 32);
                  if (!v147) {
                    goto LABEL_172;
                  }
                  goto LABEL_171;
                }
                BOOL v146 = 0;
                uint64_t v147 = *(void *)(a1 + 32);
                if (v147) {
LABEL_171:
                }
                  *(unsigned char *)(v147 + 26) = v146;
              }
              else
              {
                id v144 = 0;
              }
LABEL_172:

              id v148 = (void *)_NRCopyLogObjectForNRUUID();
              int v149 = _NRLogIsLevelEnabled();

              uint64_t v140 = *(void *)(a1 + 32);
              if (v149)
              {
                if (v140) {
                  uint64_t v150 = *(void **)(v140 + 96);
                }
                else {
                  uint64_t v150 = 0;
                }
                id v151 = v150;
                v152 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();

                uint64_t v140 = *(void *)(a1 + 32);
              }
            }
          }
          else
          {
            id v144 = 0;
            uint64_t v140 = 0;
            if ((v137 & 1) == 0) {
              goto LABEL_172;
            }
          }
          if (v121) {
            sub_1000E8FB0(v140, v129);
          }
          else {
            sub_1000DB474(v140, v137);
          }
          goto LABEL_212;
        }
        unsigned int v156 = (void *)_NRCopyLogObjectForNRUUID();
        int v157 = _NRLogIsLevelEnabled();

        if (v157)
        {
          uint64_t v158 = *(void **)(a1 + 32);
          if (v158) {
            uint64_t v158 = (void *)v158[12];
          }
          uint64_t v159 = v158;
          id v160 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        goto LABEL_212;
      }
      id v126 = *(void **)(a1 + 40);
      if (v126)
      {
        id v127 = sub_1000261E8(v126, 7);
        uint64_t v128 = [v127 firstObject];

        if (v128 && [v128 length])
        {
          LOBYTE(v215) = 0;
          [v128 getBytes:&v215 length:1];
          if (v215) {
            id v122 = &__kCFBooleanTrue;
          }
          else {
            id v122 = &__kCFBooleanFalse;
          }
        }
        else
        {
          id v122 = 0;
        }

        uint64_t v129 = 0;
        if (!v122) {
          goto LABEL_212;
        }
        goto LABEL_158;
      }
    }
    id v121 = 0;
    id v122 = 0;
    goto LABEL_215;
  }
  LOBYTE(v207) = 0;
  BOOL v206 = 0;
  id v123 = *(void **)(a1 + 40);
  if (!v123) {
    goto LABEL_243;
  }
  id v124 = sub_1000261E8(v123, 13);
  id v125 = [v124 firstObject];

  if (v125)
  {
    [v125 getBytes:&v206 length:9];
    id v122 = +[NSNumber numberWithUnsignedChar:v206];
    id v121 = v125;
    if (!v122) {
      goto LABEL_215;
    }
    goto LABEL_190;
  }
  v153 = *(void **)(a1 + 40);
  if (!v153)
  {
LABEL_243:
    id v122 = 0;
    id v121 = 0;
    goto LABEL_215;
  }
  unsigned __int8 v154 = sub_1000261E8(v153, 5);
  uint64_t v155 = [v154 firstObject];

  if (v155 && [v155 length])
  {
    LOBYTE(v215) = 0;
    [v155 getBytes:&v215 length:1];
    if (v215) {
      id v122 = &__kCFBooleanTrue;
    }
    else {
      id v122 = &__kCFBooleanFalse;
    }
  }
  else
  {
    id v122 = 0;
  }

  id v121 = 0;
  if (!v122) {
    goto LABEL_215;
  }
LABEL_190:
  unint64_t v161 = sub_100024424(*(void *)(a1 + 40));
  uint64_t v162 = *(void *)(a1 + 32);
  if (!v162)
  {
    if (!v161) {
      goto LABEL_192;
    }
LABEL_202:
    id v176 = (void *)_NRCopyLogObjectForNRUUID();
    int v177 = _NRLogIsLevelEnabled();

    if (v177)
    {
      long long v178 = *(void **)(a1 + 32);
      if (v178) {
        long long v178 = (void *)v178[12];
      }
      long long v179 = v178;
      long long v180 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    goto LABEL_215;
  }
  if (v161 != *(void *)(v162 + 328)) {
    goto LABEL_202;
  }
LABEL_192:
  id v168 = (const char *)[v122 BOOLValue:v201, v202, v203, v204];
  uint64_t v169 = "dis";
  if (v168) {
    uint64_t v169 = "en";
  }
  sub_1000D85E8(*(void *)(a1 + 32), 1008, @"received prefer Wi-Fi request: %sable", v163, v164, v165, v166, v167, (uint64_t)v169);
  uint64_t v170 = *(void *)(a1 + 32);
  if (!v168)
  {
    long long v181 = (void *)_NRCopyLogObjectForNRUUID();
    int v182 = _NRLogIsLevelEnabled();

    if (v182)
    {
      long long v183 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    uint64_t v184 = *(void *)(a1 + 32);
    if (v184)
    {
      *(unsigned char *)(v184 + 26) = 0;
      uint64_t v170 = *(void *)(a1 + 32);
      if (v125) {
        goto LABEL_214;
      }
    }
    else
    {
      uint64_t v170 = 0;
      if (v125) {
        goto LABEL_214;
      }
    }
LABEL_210:
    sub_1000DB474(v170, v168);
    goto LABEL_215;
  }
  if (v170)
  {
    if (*(unsigned char *)(v170 + 15))
    {
      uint64_t v171 = (void *)_NRCopyLogObjectForNRUUID();
      int v172 = _NRLogIsLevelEnabled();

      if (v172)
      {
        uint64_t v173 = *(void **)(a1 + 32);
        if (v173) {
          uint64_t v173 = (void *)v173[12];
        }
        BOOL v174 = v173;
        v175 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      sub_1000DB92C(*(void *)(a1 + 32));
      goto LABEL_215;
    }
    if (v125)
    {
LABEL_214:
      sub_1000E8FB0(v170, v121);
      goto LABEL_215;
    }
    BOOL v185 = sub_1000E9414(v170);
    uint64_t v186 = *(void *)(a1 + 32);
    if (!v185)
    {
      if (v186) {
        *(unsigned char *)(v186 + 26) = 1;
      }
      goto LABEL_215;
    }
  }
  else
  {
    uint64_t v186 = 0;
    if (v125) {
      goto LABEL_214;
    }
  }
  uint64_t v187 = sub_1000D8308(v186);
  long long v188 = (void *)v187;
  uint64_t v189 = *(void *)(a1 + 32);
  if (v189) {
    uint64_t v190 = *(void **)(v189 + 96);
  }
  else {
    uint64_t v190 = 0;
  }
  long long v191 = sub_1001558C0(v187, v190);

  if (v191)
  {
    long long v192 = (void *)_NRCopyLogObjectForNRUUID();
    int v193 = _NRLogIsLevelEnabled();

    if (v193)
    {
      long long v194 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    uint64_t v170 = *(void *)(a1 + 32);
    goto LABEL_210;
  }
  long long v195 = (void *)_NRCopyLogObjectForNRUUID();
  int v196 = _NRLogIsLevelEnabled();

  if (v196)
  {
    long long v197 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
LABEL_215:
}

void sub_1000E57A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1000E57D4(uint64_t a1)
{
  if (!a1 || !sub_1000E8CA0(a1)) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 576);
  if (!v2 || !*(unsigned char *)(v2 + 9))
  {
    *(unsigned char *)(a1 + 72) = 1;
    objc_initWeak(&location, (id)a1);
    unsigned int v5 = *(_DWORD *)(a1 + 80);
    if (v5 >= 0xC)
    {
      LOBYTE(v5) = 12;
      *(_DWORD *)(a1 + 80) = 12;
    }
    else if (!v5)
    {
      int64_t v6 = 0;
LABEL_14:
      dispatch_time_t v7 = dispatch_time(0, v6);
      int v8 = *(void **)(a1 + 104);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000E8DB0;
      block[3] = &unk_1001C7FF0;
      uint64_t v9 = v8;
      objc_copyWeak(&v12, &location);
      dispatch_after(v7, v9, block);

      objc_destroyWeak(&v12);
      objc_destroyWeak(&location);
      return;
    }
    int64_t v6 = 1000000000 << (v5 + 1);
    goto LABEL_14;
  }
  id v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v10 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_1000E5970(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 62))
  {
    if (*(void *)(a1 + 576))
    {
      sub_1000E8B64(a1, 0);
      [*(id *)(a1 + 576) cancel];
      uint64_t v2 = *(void **)(a1 + 576);
      *(void *)(a1 + 576) = 0;
    }
    id v3 = *(void **)(a1 + 568);
    if (v3)
    {
      [v3 cancel];
      id v4 = *(void **)(a1 + 568);
      *(void *)(a1 + 568) = 0;
    }
    *(_DWORD *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 72) = 0;
  }
}

void sub_1000E59E8(uint64_t a1, int a2)
{
  if (a1 && *(unsigned char *)(a1 + 56))
  {
    id v4 = *(void **)(a1 + 504);
    *(void *)(a1 + 504) = 0;

    unsigned int v5 = *(void **)(a1 + 528);
    *(void *)(a1 + 528) = 0;

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v6 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v6, *(void **)(a1 + 280));

    if (a2)
    {
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      dispatch_time_t v7 = (dispatch_queue_t *)(id)qword_1001F4D20;
      int v8 = v7;
      if (v7)
      {
        uint64_t v13 = v7;
        dispatch_assert_queue_V2(v7[1]);
        dispatch_time_t v7 = (dispatch_queue_t *)[v13[2] apply];
        int v8 = v13;
        if ((v7 & 1) == 0)
        {
          sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v9, v10, v11, v12);
          int v8 = v13;
        }
      }
      _objc_release_x1(v7, v8);
    }
  }
}

void sub_1000E5B48(uint64_t a1)
{
  if (a1)
  {
    if ([*(id *)(a1 + 128) state] == 8)
    {
      *(unsigned char *)(a1 + 68) = 0;
      uint64_t v2 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
      id v8 = v2;
      if (v2)
      {
        uint64_t v3 = 2;
        uint64_t v4 = 4;
        if (!*(unsigned char *)(a1 + 67))
        {
          uint64_t v3 = 4;
          uint64_t v4 = 8;
        }
        if (*((unsigned __int16 *)v2 + 14) <= 0x15u) {
          uint64_t v5 = v3;
        }
        else {
          uint64_t v5 = v4;
        }
      }
      else
      {
        uint64_t v5 = 2;
        if (!*(unsigned char *)(a1 + 67)) {
          uint64_t v5 = 4;
        }
      }
      uint64_t v9 = v5;
      id v6 = (id *)sub_100025474([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
      id v7 = [objc_alloc((Class)NSData) initWithBytes:&v9 length:8];
      sub_100025B00((uint64_t)v6, 11, v7);
      if (v6) {
        objc_storeStrong(v6 + 3, *(id *)(a1 + 128));
      }
      sub_100027090((uint64_t)v6);
    }
    else
    {
      *(unsigned char *)(a1 + 68) = 1;
    }
  }
}

uint64_t sub_1000E5C84(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 56))
    {
      uint64_t v2 = *(void **)(result + 512);
      *(void *)(result + 512) = 0;

      uint64_t v3 = *(void **)(v1 + 520);
      *(void *)(v1 + 520) = 0;

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v4 = (id)qword_1001F4D20;
      sub_10013502C((uint64_t)v4, *(void **)(v1 + 288));

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      uint64_t v5 = (dispatch_queue_t *)(id)qword_1001F4D20;
      id v6 = v5;
      if (v5)
      {
        uint64_t v11 = v5;
        dispatch_assert_queue_V2(v5[1]);
        uint64_t v5 = (dispatch_queue_t *)[v11[2] apply];
        id v6 = v11;
        if ((v5 & 1) == 0)
        {
          sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v7, v8, v9, v10);
          id v6 = v11;
        }
      }
      return _objc_release_x1(v5, v6);
    }
  }
  return result;
}

void sub_1000E5DDC(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    if (*(void *)(a1 + 632))
    {
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v4 = (id)qword_1001F4D20;
      sub_10013502C((uint64_t)v4, *(void **)(v2 + 312));

      uint64_t v52 = sub_1000E8868(v2);
      if ([v52 count])
      {
        char v49 = a2;
        uint64_t v5 = +[NEPolicyCondition requiredAgentDomain:@"com.apple.networkrelay" agentType:@"ASResolver"];
        id v47 = +[NEPolicyCondition requiredAgentDomain:@"com.apple.networkrelay" agentType:@"ASListener"];
        long long v48 = (void *)v5;
        v75[0] = v5;
        v75[1] = v47;
        +[NSArray arrayWithObjects:v75 count:2];
        long long v65 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        id obj = (id)objc_claimAutoreleasedReturnValue();
        id v53 = [obj countByEnumeratingWithState:&v65 objects:v74 count:16];
        if (v53)
        {
          uint64_t v51 = *(void *)v66;
          uint64_t v6 = v2;
          do
          {
            uint64_t v7 = 0;
            do
            {
              if (*(void *)v66 != v51) {
                objc_enumerationMutation(obj);
              }
              uint64_t v54 = v7;
              uint64_t v10 = *(void *)(*((void *)&v65 + 1) + 8 * v7);
              long long v61 = 0u;
              long long v62 = 0u;
              long long v63 = 0u;
              long long v64 = 0u;
              id v11 = v52;
              id v12 = [v11 countByEnumeratingWithState:&v61 objects:v73 count:16];
              if (v12)
              {
                id v13 = v12;
                uint64_t v14 = *(void *)v62;
                do
                {
                  for (i = 0; i != v13; i = (char *)i + 1)
                  {
                    if (*(void *)v62 != v14) {
                      objc_enumerationMutation(v11);
                    }
                    id v16 = +[NEPolicyResult removeNetworkAgentUUID:*(void *)(*((void *)&v61 + 1) + 8 * i)];
                    id v17 = objc_alloc((Class)NEPolicy);
                    id v18 = +[NEPolicyCondition allInterfaces];
                    v72[0] = v18;
                    v72[1] = v10;
                    id v19 = +[NSArray arrayWithObjects:v72 count:2];
                    id v20 = [v17 initWithOrder:10 result:v16 conditions:v19];

                    self;
                    if (qword_1001F4D28 != -1) {
                      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                    }
                    uint64_t v2 = v6;
                    id v21 = (id)qword_1001F4D20;
                    id v22 = sub_100134CFC((uint64_t)v21, *(void **)(v6 + 312), v20);
                  }
                  id v13 = [v11 countByEnumeratingWithState:&v61 objects:v73 count:16];
                }
                while (v13);
              }

              if (*(void *)(v2 + 504))
              {
                v71[0] = 0;
                v71[1] = 0;
                nw_agent_get_uuid();
                id v23 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v71];
                uint64_t v24 = +[NEPolicyResult removeNetworkAgentUUID:v23];
                id v25 = objc_alloc((Class)NEPolicy);
                uint64_t v26 = +[NEPolicyCondition allInterfaces];
                v70[0] = v26;
                v70[1] = v10;
                id v27 = +[NSArray arrayWithObjects:v70 count:2];
                id v28 = [v25 initWithOrder:10 result:v24 conditions:v27];

                self;
                if (qword_1001F4D28 != -1) {
                  dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                }
                uint64_t v2 = v6;
                id v8 = (id)qword_1001F4D20;
                id v9 = sub_100134CFC((uint64_t)v8, *(void **)(v6 + 312), v28);
              }
              uint64_t v7 = v54 + 1;
            }
            while ((id)(v54 + 1) != v53);
            id v53 = [obj countByEnumeratingWithState:&v65 objects:v74 count:16];
          }
          while (v53);
        }

        a2 = v49;
      }
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v29 = (id)qword_1001F4D20;
      uint64_t v30 = (id *)v29;
      if (v29)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v29 + 1));
        if (([v30[2] apply] & 1) == 0) {
          sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v31, v32, v33, (uint64_t)v47);
        }
      }

      if ((a2 & 1) == 0)
      {
        if (*(void *)(v2 + 448))
        {
          uint64_t v34 = (void *)NEVirtualInterfaceCopyName();
          if (v34) {
            sub_100102DF8(*(void *)(v2 + 632), v34);
          }
        }
        else
        {
          uint64_t v34 = 0;
        }
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        id v35 = *(id *)(v2 + 112);
        id v36 = [v35 countByEnumeratingWithState:&v57 objects:v69 count:16];
        if (v36)
        {
          id v37 = v36;
          uint64_t v38 = *(void *)v58;
          do
          {
            for (j = 0; j != v37; j = (char *)j + 1)
            {
              if (*(void *)v58 != v38) {
                objc_enumerationMutation(v35);
              }
              double v40 = *(void **)(*((void *)&v57 + 1) + 8 * (void)j);
              if ([v40 virtualInterface])
              {
                [v40 virtualInterface];
                long long v41 = (void *)NEVirtualInterfaceCopyName();
                unsigned int v42 = [v40 isPrimary];
                uint64_t v43 = *(void *)(v2 + 632);
                if (v42) {
                  sub_100102CB4(v43, v41);
                }
                else {
                  sub_100102DF8(v43, v41);
                }
              }
            }
            id v37 = [v35 countByEnumeratingWithState:&v57 objects:v69 count:16];
          }
          while (v37);
        }

        if (!*(void *)(v2 + 128))
        {
          id v44 = objc_alloc_init(NRLinkDirectorRequest);
          p_isa = (id *)&v44->super.isa;
          if (v44)
          {
            v44->_type = 6;
            *(_WORD *)&v44->_attemptImmediately = 1;
            v44->_timeout = 10;
            objc_storeStrong((id *)&v44->_timerDescription, @"Hysteresis for AS registrations");
            objc_storeStrong(p_isa + 2, &off_1001D4D90);
          }
          newValue[0] = _NSConcreteStackBlock;
          newValue[1] = 3221225472;
          newValue[2] = sub_1000E8B40;
          newValue[3] = &unk_1001C8840;
          newValue[4] = v2;
          id v56 = v34;
          if (p_isa) {
            objc_setProperty_nonatomic_copy(p_isa, v46, newValue, 48);
          }
          sub_1000D6720(v2, p_isa);
        }
      }
    }
  }
}

void sub_1000E64CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(id *)(a1 + 40);
  uint64_t v3 = v2;
  if (!v1) {
    goto LABEL_111;
  }
  if (!*(unsigned char *)(v1 + 14) || v2 == 0) {
    goto LABEL_111;
  }
  uint64_t v5 = sub_1000261E8(v2, 16);
  uint64_t v6 = [v5 firstObject];

  if (v6)
  {
    uint64_t v7 = sub_1000261E8(v3, 16);
    id v8 = [v7 firstObject];

    if (v8 && [v8 length])
    {
      v127[0] = 0;
      [v8 getBytes:v127 length:1];
      if (v127[0]) {
        id v9 = &__kCFBooleanTrue;
      }
      else {
        id v9 = &__kCFBooleanFalse;
      }
    }
    else
    {
      id v9 = 0;
    }

    if ([v9 BOOLValue])
    {
      int v10 = *(unsigned __int8 *)(v1 + 45);
      *(unsigned char *)(v1 + 61) = v10;
      if (v10)
      {
        id v11 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v13 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v113 = 4895;
          long long v111 = "";
          long long v112 = "-[NRDDeviceConductor handleDNSProxyMessage:]";
          _NRLogWithArgs();
        }
        if (!*(unsigned char *)(v1 + 45) || ![*(id *)(v1 + 128) ikeClassDEstablished]) {
          goto LABEL_27;
        }
        uint64_t v14 = *(void *)(v1 + 560);
        if (v14)
        {
          int v15 = *(unsigned __int8 *)(v14 + 8);
          if (v15 == 1)
          {
LABEL_27:

            goto LABEL_28;
          }
          if (v15 == 2)
          {
            [v1 didUpdateDNSProxyState:state:];
            goto LABEL_27;
          }
        }
        sub_1000E7F0C(v1);
        goto LABEL_27;
      }
    }
    else
    {
      *(unsigned char *)(v1 + 61) = 0;
    }
    id v16 = (void *)_NRCopyLogObjectForNRUUID();
    int v17 = _NRLogIsLevelEnabled();

    if (v17)
    {
      id v18 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v113 = 4908;
      long long v111 = "";
      long long v112 = "-[NRDDeviceConductor handleDNSProxyMessage:]";
      _NRLogWithArgs();
    }
    [*(id *)(v1 + 560) cancel:v111, v112, v113];
    id v19 = *(void **)(v1 + 560);
    *(void *)(v1 + 560) = 0;

    goto LABEL_27;
  }
LABEL_28:
  id v20 = sub_1000261E8(v3, 18);
  id v21 = [v20 firstObject];

  if (v21)
  {
    id v22 = sub_1000261E8(v3, 18);
    id v23 = [v22 firstObject];

    if (v23 && [v23 length])
    {
      v127[0] = 0;
      [v23 getBytes:v127 length:1];
      if (v127[0]) {
        uint64_t v24 = &__kCFBooleanTrue;
      }
      else {
        uint64_t v24 = &__kCFBooleanFalse;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }

    unsigned int v25 = [v24 BOOLValue];
    uint64_t v26 = (void *)_NRCopyLogObjectForNRUUID();
    int v27 = _NRLogIsLevelEnabled();

    if (!v25)
    {
      if (v27)
      {
        uint64_t v33 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v113 = 4951;
        long long v111 = "";
        long long v112 = "-[NRDDeviceConductor handleDNSProxyMessage:]";
        _NRLogWithArgs();
      }
      [*(id *)(v1 + 568) cancel:v111, v112, v113];
      uint64_t v34 = *(void **)(v1 + 568);
      *(void *)(v1 + 568) = 0;

      goto LABEL_68;
    }
    if (v27)
    {
      id v28 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v113 = 4917;
      long long v111 = "";
      long long v112 = "-[NRDDeviceConductor handleDNSProxyMessage:]";
      _NRLogWithArgs();
    }
    if (*(unsigned char *)(v1 + 45))
    {
      id v29 = *(id *)(v1 + 128);
      if (([v29 ikeClassDEstablished] & 1) == 0)
      {
LABEL_67:

        goto LABEL_68;
      }
      int v30 = *(unsigned __int8 *)(v1 + 62);

      if (v30)
      {
        uint64_t v31 = *(void *)(v1 + 568);
        if (!v31)
        {
LABEL_49:
          [*(id *)(v1 + 568) cancel:v111, v112, v113];
          id v29 = objc_alloc_init((Class)NSMutableSet);
          long long v122 = 0u;
          long long v123 = 0u;
          long long v124 = 0u;
          long long v125 = 0u;
          id v35 = *(id *)(v1 + 112);
          id v36 = [v35 countByEnumeratingWithState:&v122 objects:v127 count:16];
          if (v36)
          {
            id v37 = v36;
            uint64_t v38 = *(void *)v123;
            do
            {
              for (i = 0; i != v37; i = (char *)i + 1)
              {
                if (*(void *)v123 != v38) {
                  objc_enumerationMutation(v35);
                }
                if (*(unsigned char *)(v1 + 48))
                {
                  double v40 = *(void **)(*((void *)&v122 + 1) + 8 * i);
                  if ([v40 ikeClassDEstablished])
                  {
                    if ([v40 hasCompanionDatapath]
                      && [v40 virtualInterface]
                      && [v40 type] == 1)
                    {
                      [v40 virtualInterface];
                      long long v41 = (void *)NEVirtualInterfaceCopyName();
                      [v29 addObject:v41];
                    }
                  }
                }
              }
              id v37 = [v35 countByEnumeratingWithState:&v122 objects:v127 count:16];
            }
            while (v37);
          }

          if ([v29 count])
          {
            unsigned int v42 = [NRDiscoveryProxyServer alloc];
            uint64_t v43 = *(void **)(v1 + 104);
            id v44 = *(id *)(v1 + 96);
            id v45 = v43;
            id v46 = v29;
            if (v42)
            {
              v126.receiver = v42;
              v126.super_class = (Class)NRDiscoveryProxyServer;
              id v47 = (NRDiscoveryProxyServer *)[super initWithQueue:v45 nrUUID:v44 delegate:v1];
              unsigned int v42 = v47;
              if (v47) {
                objc_storeStrong((id *)&v47->_ifNamesSet, v29);
              }
            }

            objc_storeStrong((id *)(v1 + 568), v42);
            [*(id *)(v1 + 568) start];
          }
          goto LABEL_67;
        }
        int v32 = *(unsigned __int8 *)(v31 + 8);
        if (v32 != 1)
        {
          if (v32 == 2)
          {
            [v1 didUpdateDNSProxyState:state:];
            goto LABEL_68;
          }
          goto LABEL_49;
        }
      }
    }
LABEL_68:
  }
  long long v48 = sub_1000261E8(v3, 17);
  char v49 = [v48 firstObject];

  if (v49
    || (id v50 = sub_1000261E8(v3, 19),
        [v50 firstObject],
        uint64_t v51 = objc_claimAutoreleasedReturnValue(),
        v50,
        v51,
        v51))
  {
    uint64_t v52 = sub_1000261E8(v3, 17);
    id v53 = [v52 firstObject];

    uint64_t v54 = sub_1000261E8(v3, 19);
    id v55 = [v54 firstObject];

    __int16 v121 = 0;
    int v120 = 0;
    int v118 = 0;
    id v119 = 0;
    if (v53)
    {
      id v56 = sub_1000261E8(v3, 17);
      long long v57 = [v56 firstObject];

      sub_1000E8164(v1, v57, (unsigned char *)&v121 + 1, &v121, &v120, &v119, &v118);
      if (HIBYTE(v121))
      {
        if ((_BYTE)v121)
        {
          long long v58 = v119;
          id v59 = *(id *)(v1 + 552);
          long long v60 = v59;
          long long v61 = v59 ? (void *)*((void *)v59 + 3) : 0;
          id v62 = v61;
          unsigned __int8 v63 = [v58 isEqual:v62];

          if ((v63 & 1) == 0)
          {
            [*(id *)(v1 + 552) cancel];
            long long v64 = [NRDNSProxyClient alloc];
            long long v66 = v118;
            long long v65 = v119;
            long long v67 = *(void **)(v1 + 104);
            int v68 = v120;
            id v69 = *(id *)(v1 + 96);
            id v70 = v67;
            id v71 = sub_100020D58((id *)&v64->super.super.isa, v65, v70, v69, (void *)v1, v66, v68, 0);
            id v72 = *(void **)(v1 + 552);
            *(void *)(v1 + 552) = v71;

            [*(id *)(v1 + 552) start];
            *(_DWORD *)(v1 + 76) = 0;
          }
        }
      }
      else
      {
        uint64_t v73 = (void *)_NRCopyLogObjectForNRUUID();
        int v74 = _NRLogIsLevelEnabled();

        if (v74)
        {
          uint64_t v75 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v113 = 4977;
          long long v111 = "";
          long long v112 = "-[NRDDeviceConductor handleDNSProxyMessage:]";
          _NRLogWithArgs();
        }
        long long v116 = 0u;
        long long v117 = 0u;
        long long v114 = 0u;
        long long v115 = 0u;
        id v76 = *(id *)(v1 + 112);
        id v77 = [v76 countByEnumeratingWithState:&v114 objects:&v126 count:16];
        if (v77)
        {
          id v78 = v77;
          uint64_t v79 = *(void *)v115;
          do
          {
            for (j = 0; j != v78; j = (char *)j + 1)
            {
              if (*(void *)v115 != v79) {
                objc_enumerationMutation(v76);
              }
              uint64_t v81 = *(void **)(*((void *)&v114 + 1) + 8 * (void)j);
              if (objc_msgSend(v81, "ikeClassDEstablished", v111, v112, v113)) {
                [v81 publishDNSConfig:0];
              }
            }
            id v78 = [v76 countByEnumeratingWithState:&v114 objects:&v126 count:16];
          }
          while (v78);
        }

        [*(id *)(v1 + 552) cancel];
        uint64_t v82 = *(void **)(v1 + 552);
        *(void *)(v1 + 552) = 0;

        ++*(_DWORD *)(v1 + 76);
        sub_1000E83E0((unsigned int *)v1);
      }
    }
    if (!v55) {
      goto LABEL_110;
    }
    uint64_t v83 = sub_1000261E8(v3, 19);
    uint64_t v84 = [v83 firstObject];

    sub_1000E8164(v1, v84, (unsigned char *)&v121 + 1, &v121, &v120, &v119, &v118);
    if (!HIBYTE(v121))
    {
      id v96 = (void *)_NRCopyLogObjectForNRUUID();
      int v97 = _NRLogIsLevelEnabled();

      if (v97)
      {
        uint64_t v98 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v113 = 5010;
        long long v111 = "";
        long long v112 = "-[NRDDeviceConductor handleDNSProxyMessage:]";
        _NRLogWithArgs();
      }
      [*(id *)(v1 + 576) cancel:v111, v112, v113];
      int v99 = *(void **)(v1 + 576);
      *(void *)(v1 + 576) = 0;

      ++*(_DWORD *)(v1 + 80);
      sub_1000E57D4(v1);
      goto LABEL_109;
    }
    if ((_BYTE)v121)
    {
      uint64_t v85 = v119;
      id v86 = *(id *)(v1 + 576);
      id v87 = v86;
      if (v86) {
        id v88 = (void *)*((void *)v86 + 3);
      }
      else {
        id v88 = 0;
      }
      id v89 = v88;
      if ([v85 isEqual:v89])
      {
        id v90 = v118;
        id v91 = *(id *)(v1 + 576);
        uint64_t v92 = v91;
        if (v91) {
          CFArrayRef v93 = (void *)*((void *)v91 + 4);
        }
        else {
          CFArrayRef v93 = 0;
        }
        id v94 = v93;
        unsigned __int8 v95 = [v90 isEqualToData:v94];

        if (v95) {
          goto LABEL_109;
        }
      }
      else
      {
      }
      [*(id *)(v1 + 576) cancel:v111, v112, v113];
      uint64_t v100 = [NRDNSProxyClient alloc];
      uint64_t v102 = v118;
      uint64_t v101 = v119;
      uint64_t v103 = *(void **)(v1 + 104);
      int v104 = v120;
      id v105 = *(id *)(v1 + 96);
      id v106 = v103;
      id v107 = sub_100020D58((id *)&v100->super.super.isa, v101, v106, v105, (void *)v1, v102, v104, 1);
      id v108 = *(void **)(v1 + 576);
      *(void *)(v1 + 576) = v107;

      if ([*(id *)(v1 + 128) virtualInterface])
      {
        [*(id *)(v1 + 128) virtualInterface];
        int Index = NEVirtualInterfaceGetIndex();
        uint64_t v110 = *(void *)(v1 + 576);
        if (v110) {
          *(_DWORD *)(v110 + 72) = Index;
        }
      }
      [*(id *)(v1 + 576) start];
      *(_DWORD *)(v1 + 80) = 0;
    }
LABEL_109:

LABEL_110:
  }
LABEL_111:
}

id sub_1000E6FA0(void *a1)
{
  id v1 = a1;
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x3032000000;
  uint64_t v7 = sub_1000E7A80;
  id v8 = sub_1000E7A90;
  id v9 = objc_alloc_init((Class)NSMutableDictionary);
  NRTLVParse();
  id v2 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v2;
}

void sub_1000E7098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E70B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  sub_1000D601C(v4, v5);
  uint64_t v6 = +[NWAddressEndpoint endpointWithCEndpoint:v5];

  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = [v6 port];
  id v9 = sub_1001414DC(v7, v8);

  [*(id *)(a1 + 48) addObject:v9];
  return 1;
}

void sub_1000E714C(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 632))
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    id v4 = sub_1000DC5BC(a1, 4, 0);
    id v5 = v4;
    if (v4 && [v4 state] == 8)
    {
      uint64_t v71 = a1;
      HIDWORD(v69) = a2;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      uint64_t v6 = [v5 appSvcPolicyIDs];
      id v7 = [v6 countByEnumeratingWithState:&v96 objects:v109 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v97;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(void *)v97 != v9) {
              objc_enumerationMutation(v6);
            }
            uint64_t v14 = *(void **)(*((void *)&v96 + 1) + 8 * i);
            int v15 = [v5 policyIDs];
            unsigned int v16 = [v15 containsObject:v14];

            if (v16)
            {
              self;
              if (qword_1001F4D28 != -1) {
                dispatch_once(&qword_1001F4D28, &stru_1001C8658);
              }
              id v11 = (id)qword_1001F4D20;
              id v12 = [v5 policyIdentifierString];
              sub_100134E2C((uint64_t)v11, v12, v14);

              id v13 = [v5 policyIDs];
              [v13 removeObject:v14];
            }
          }
          id v8 = [v6 countByEnumeratingWithState:&v96 objects:v109 count:16];
        }
        while (v8);
      }

      id v17 = objc_alloc_init((Class)NSMutableArray);
      [v5 setAppSvcPolicyIDs:v17];

      [v5 virtualInterface];
      uint64_t v82 = (void *)NEVirtualInterfaceCopyName();
      id v77 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(v71 + 96));
      uint64_t v18 = *(void *)(v71 + 632);
      uint64_t v83 = v5;
      if (!v18 || *(unsigned char *)(v18 + 9)) {
        goto LABEL_17;
      }
      self;
      if (qword_1001F4AE8 != -1) {
        dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
      }
      uint64_t v20 = qword_1001F4AE0;
      if (qword_1001F4AE0)
      {
        long long v102 = 0u;
        long long v103 = 0u;
        long long v100 = 0u;
        long long v101 = 0u;
        id v21 = *(id *)(qword_1001F4AE0 + 24);
        id v22 = [v21 countByEnumeratingWithState:&v100 objects:v110 count:16];
        if (v22)
        {
          id v23 = v22;
          id v19 = 0;
          uint64_t v24 = *(void *)v101;
          do
          {
            for (j = 0; j != v23; j = (char *)j + 1)
            {
              if (*(void *)v101 != v24) {
                objc_enumerationMutation(v21);
              }
              uint64_t v26 = *(void **)(*((void *)&v100 + 1) + 8 * (void)j);
              if (!v19) {
                id v19 = objc_alloc_init((Class)NSMutableArray);
              }
              nw_endpoint_t v27 = sub_1001029F8(v20, v26);
              if (v27) {
                [v19 addObject:v27];
              }
            }
            id v23 = [v21 countByEnumeratingWithState:&v100 objects:v110 count:16];
          }
          while (v23);
        }
        else
        {
          id v19 = 0;
        }
      }
      else
      {
LABEL_17:
        id v19 = 0;
      }
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      id obj = v19;
      id v78 = [obj countByEnumeratingWithState:&v92 objects:v108 count:16];
      if (v78)
      {
        uint64_t v75 = *(void *)v93;
        do
        {
          for (uint64_t k = 0; k != v78; uint64_t k = (char *)k + 1)
          {
            if (*(void *)v93 != v75) {
              objc_enumerationMutation(obj);
            }
            id v29 = +[NWAddressEndpoint endpointWithCEndpoint:*(void *)(*((void *)&v92 + 1) + 8 * (void)k)];
            int v30 = [v29 port];
            uint64_t v31 = sub_100140FAC(v77, v30);

            int v32 = +[NEPolicyCondition localAddress:v31 prefix:128];
            v107[0] = v32;
            uint64_t v33 = +[NEPolicyCondition allInterfaces];
            v107[1] = v33;
            uint64_t v34 = +[NSArray arrayWithObjects:v107 count:2];

            id v35 = +[NEPolicyResult tunnelIPToInterfaceName:v82 secondaryResultType:0];
            id v36 = [objc_alloc((Class)NEPolicy) initWithOrder:1200 result:v35 conditions:v34];
            self;
            uint64_t v80 = v29;
            if (qword_1001F4D28 != -1) {
              dispatch_once(&qword_1001F4D28, &stru_1001C8658);
            }
            id v37 = (id)qword_1001F4D20;
            uint64_t v38 = [v83 policyIdentifierString];
            uint64_t v39 = sub_100134CFC((uint64_t)v37, v38, v36);

            double v40 = [v83 appSvcPolicyIDs];
            [v40 addObject:v39];
          }
          id v78 = [obj countByEnumeratingWithState:&v92 objects:v108 count:16];
        }
        while (v78);
      }

      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      uint64_t v41 = v71;
      id v73 = *(id *)(v71 + 648);
      id v42 = [v73 countByEnumeratingWithState:&v88 objects:v106 count:16];
      id v5 = v83;
      if (v42)
      {
        id v43 = v42;
        uint64_t v44 = *(void *)v89;
        uint64_t v70 = *(void *)v89;
        do
        {
          id v45 = 0;
          id v72 = v43;
          do
          {
            if (*(void *)v89 != v44) {
              objc_enumerationMutation(v73);
            }
            id v46 = *(void **)(*((void *)&v88 + 1) + 8 * (void)v45);
            if ((sub_100102EF0(*(void *)(v41 + 632), v46) & 1) == 0)
            {
              id v76 = v45;
              id v47 = [*(id *)(v41 + 648) objectForKeyedSubscript:v46];
              long long v84 = 0u;
              long long v85 = 0u;
              long long v86 = 0u;
              long long v87 = 0u;
              id v79 = v47;
              id v48 = [v79 countByEnumeratingWithState:&v84 objects:v105 count:16];
              if (v48)
              {
                id v49 = v48;
                uint64_t v81 = *(void *)v85;
                do
                {
                  for (m = 0; m != v49; m = (char *)m + 1)
                  {
                    if (*(void *)v85 != v81) {
                      objc_enumerationMutation(v79);
                    }
                    uint64_t v51 = +[NEPolicyCondition remoteAddress:*(void *)(*((void *)&v84 + 1) + 8 * (void)m) prefix:128];
                    v104[0] = v51;
                    uint64_t v52 = +[NEPolicyCondition allInterfaces];
                    v104[1] = v52;
                    id v53 = +[NSArray arrayWithObjects:v104 count:2];

                    uint64_t v54 = +[NEPolicyResult tunnelIPToInterfaceName:v82 secondaryResultType:0];
                    id v55 = [objc_alloc((Class)NEPolicy) initWithOrder:1200 result:v54 conditions:v53];
                    self;
                    if (qword_1001F4D28 != -1) {
                      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                    }
                    id v56 = (id)qword_1001F4D20;
                    long long v57 = [v83 policyIdentifierString];
                    long long v58 = sub_100134CFC((uint64_t)v56, v57, v55);

                    id v59 = [v83 appSvcPolicyIDs];
                    [v59 addObject:v58];
                  }
                  id v49 = [v79 countByEnumeratingWithState:&v84 objects:v105 count:16];
                }
                while (v49);
              }

              id v5 = v83;
              uint64_t v44 = v70;
              uint64_t v41 = v71;
              id v43 = v72;
              id v45 = v76;
            }
            id v45 = (char *)v45 + 1;
          }
          while (v45 != v43);
          id v43 = [v73 countByEnumeratingWithState:&v88 objects:v106 count:16];
        }
        while (v43);
      }

      long long v60 = [v5 appSvcPolicyIDs];
      id v61 = [v60 count];

      if (v61)
      {
        id v62 = [v5 policyIDs];
        unsigned __int8 v63 = [v5 appSvcPolicyIDs];
        [v62 addObjectsFromArray:v63];

        if (HIDWORD(v69))
        {
          self;
          if (qword_1001F4D28 != -1) {
            dispatch_once(&qword_1001F4D28, &stru_1001C8658);
          }
          id v64 = (id)qword_1001F4D20;
          long long v65 = (id *)v64;
          if (v64)
          {
            dispatch_assert_queue_V2(*((dispatch_queue_t *)v64 + 1));
            if (([v65[2] apply] & 1) == 0) {
              sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v66, v67, v68, v69);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000E7A80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000E7A90(uint64_t a1)
{
}

uint64_t sub_1000E7A98(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2 == 6)
  {
    id v3 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16];
    uint64_t v22 = 0;
    id v23 = &v22;
    uint64_t v24 = 0x3032000000;
    unsigned int v25 = sub_1000E7A80;
    uint64_t v26 = sub_1000E7A90;
    id v27 = 0;
    uint64_t v16 = 0;
    id v17 = &v16;
    uint64_t v18 = 0x3032000000;
    id v19 = sub_1000E7A80;
    uint64_t v20 = sub_1000E7A90;
    id v21 = 0;
    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x3032000000;
    id v13 = sub_1000E7A80;
    uint64_t v14 = sub_1000E7A90;
    id v15 = 0;
    NRTLVParse();
    if (v23[5]
      && objc_msgSend((id)v11[5], "count", _NSConcreteStackBlock, 3221225472, sub_1000E7D84, &unk_1001C7618, &v22, &v16, &v10))
    {
      id v4 = (void *)v17[5];
      if (v4)
      {
        id application_service = [v4 copyCEndpoint];
      }
      else
      {
        v28[0] = 0;
        v28[1] = 0;
        uint64_t v6 = +[NSUUID UUID];
        [v6 getUUIDBytes:v28];

        [(id)v23[5] UTF8String];
        id application_service = (id)nw_endpoint_create_application_service();
      }
      id v7 = application_service;
      nw_endpoint_set_public_keys();
      id v8 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) objectForKeyedSubscript:v23[5]];
      if (!v8) {
        id v8 = (void *)nw_array_create();
      }
      nw_array_append();
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v8 forKeyedSubscript:v23[5]];
    }
    _Block_object_dispose(&v10, 8);

    _Block_object_dispose(&v16, 8);
    _Block_object_dispose(&v22, 8);
  }
  return 1;
}

void sub_1000E7D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v8 - 120), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000E7D84(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16;
  int v4 = *a2;
  switch(v4)
  {
    case 2:
      id v5 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v3];
      sub_100116F6C(v5, 1, 0, 0);
      id v6 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v7 = a1[5];
      goto LABEL_6;
    case 7:
      id v5 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v3];
      uint64_t v10 = *(void **)(*(void *)(a1[6] + 8) + 40);
      if (!v10)
      {
        id v11 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v12 = *(void *)(a1[6] + 8);
        uint64_t v13 = *(void **)(v12 + 40);
        *(void *)(v12 + 40) = v11;

        uint64_t v10 = *(void **)(*(void *)(a1[6] + 8) + 40);
      }
      [v10 addObject:v5];
      goto LABEL_10;
    case 5:
      id v5 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v3];
      id v6 = [objc_alloc((Class)NSString) initWithData:v5 encoding:4];
      uint64_t v7 = a1[4];
LABEL_6:
      uint64_t v8 = *(void *)(v7 + 8);
      uint64_t v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v6;

LABEL_10:
      break;
  }
  return 1;
}

uint64_t sub_1000E7EC4(uint64_t a1)
{
  id v2 = (void *)nw_endpoint_copy_public_keys();
  if ([v2 count]) {
    [*(id *)(a1 + 32) addObjectsFromArray:v2];
  }

  return 1;
}

void sub_1000E7F0C(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 61))
  {
    id v2 = objc_alloc_init((Class)NSMutableSet);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v3 = *(id *)(a1 + 112);
    id v4 = [v3 countByEnumeratingWithState:&v22 objects:v27 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v23;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v23 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          if (objc_msgSend(v8, "ikeClassDEstablished", (void)v22))
          {
            [v8 virtualInterface];
            uint64_t v9 = +[NSNumber numberWithUnsignedInt:NEVirtualInterfaceGetIndex()];
            [v2 addObject:v9];
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v22 objects:v27 count:16];
      }
      while (v5);
    }

    uint64_t v10 = *(void **)(a1 + 560);
    if (v10) {
      uint64_t v10 = (void *)v10[9];
    }
    id v11 = v10;
    unsigned __int8 v12 = [v11 isEqualToSet:v2];

    if ((v12 & 1) == 0)
    {
      id v13 = *(id *)(a1 + 560);
      uint64_t v14 = *(void **)(a1 + 560);
      *(void *)(a1 + 560) = 0;

      [v13 cancel];
      if ([v2 count])
      {
        uint64_t v15 = [NRDNSProxyServer alloc];
        uint64_t v16 = *(void **)(a1 + 104);
        id v17 = *(id *)(a1 + 96);
        id v18 = v16;
        id v19 = v2;
        if (v15)
        {
          v26.receiver = v15;
          v26.super_class = (Class)NRDNSProxyServer;
          uint64_t v20 = (NRDNSProxyServer *)[v26 initWithQueue:v18 nrUUID:v17 delegate:a1];
          uint64_t v15 = v20;
          if (v20) {
            objc_storeStrong((id *)&v20->_localIfIndices, v2);
          }
        }

        id v21 = *(void **)(a1 + 560);
        *(void *)(a1 + 560) = v15;

        [*(id *)(a1 + 560) start];
      }
    }
  }
}

void sub_1000E8164(uint64_t a1, void *a2, unsigned char *a3, unsigned char *a4, _DWORD *a5, void **a6, void **a7)
{
  id v13 = a2;
  if (!v13)
  {
    id v17 = sub_1000D8B78();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (!a3)
  {
    id v19 = sub_1000D8B78();
    int v20 = _NRLogIsLevelEnabled();

    if (!v20) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (!a4)
  {
    id v21 = sub_1000D8B78();
    int v22 = _NRLogIsLevelEnabled();

    if (!v22) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (!a5)
  {
    id v23 = sub_1000D8B78();
    int v24 = _NRLogIsLevelEnabled();

    if (!v24) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (!a6)
  {
    id v25 = sub_1000D8B78();
    int v26 = _NRLogIsLevelEnabled();

    if (!v26) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (!a7)
  {
    id v27 = sub_1000D8B78();
    int v28 = _NRLogIsLevelEnabled();

    if (!v28) {
      goto LABEL_9;
    }
LABEL_21:
    uint64_t v16 = sub_1000D8B78();
    _NRLogWithArgs();
    goto LABEL_8;
  }
  *a3 = 1;
  *a4 = 0;
  *a5 = 0;
  uint64_t v14 = *a6;
  *a6 = 0;

  uint64_t v15 = *a7;
  *a7 = 0;

  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_1000E8688;
  v29[3] = &unk_1001C7508;
  v29[4] = a1;
  v29[5] = a3;
  v29[6] = a6;
  v29[7] = a4;
  v29[8] = a5;
  v29[9] = a7;
  uint64_t v16 = objc_retainBlock(v29);
  NRTLVParse();
LABEL_8:

LABEL_9:
}

void sub_1000E83E0(unsigned int *val)
{
  if (val && *((unsigned char *)val + 60))
  {
    id v2 = (void *)*((void *)val + 69);
    if (v2)
    {
      uint64_t v7 = v2;
      [val didUpdateDNSProxyState:v7 state:v7[8]];
    }
    else
    {
      objc_initWeak(&location, val);
      unsigned int v3 = val[19];
      if (v3 >= 0xC) {
        unsigned int v3 = 12;
      }
      val[19] = v3;
      dispatch_time_t v4 = dispatch_time(0, 1000000000 << (v3 + 1));
      id v5 = (void *)*((void *)val + 13);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000E8534;
      block[3] = &unk_1001C88B8;
      uint64_t v6 = v5;
      objc_copyWeak(&v9, &location);
      void block[4] = val;
      dispatch_after(v4, v6, block);

      objc_destroyWeak(&v9);
      objc_destroyWeak(&location);
    }
  }
}

void sub_1000E8534(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && WeakRetained[14] && WeakRetained[60])
  {
    unsigned __int8 v12 = WeakRetained;
    unsigned int v3 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    uint64_t v6 = [NRLinkDirectorMessage alloc];
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      uint64_t v8 = *(void **)(v7 + 96);
    }
    else {
      uint64_t v8 = 0;
    }
    id v9 = sub_100025528(v6, v8);
    uint64_t v10 = v9;
    if (v9)
    {
      *((unsigned char *)v9 + 9) = 1;
      char v13 = 1;
      id v11 = [objc_alloc((Class)NSData) initWithBytes:&v13 length:1];
      sub_100025B00((uint64_t)v10, 16, v11);
    }
    sub_100027090((uint64_t)v10);

    id WeakRetained = v12;
  }
}

uint64_t sub_1000E8688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16;
  id v5 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    uint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  switch(*(unsigned char *)a2)
  {
    case 1:
      if (*(unsigned char *)(a2 + 3)) {
        goto LABEL_14;
      }
      uint64_t v8 = 0;
      **(unsigned char **)(a1 + 40) = 0;
      break;
    case 2:
      id v9 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v4];
      uint64_t v8 = 1;
      uint64_t v10 = sub_100116F6C(v9, 1, 0, 0);
      id v11 = *(void ***)(a1 + 48);
      unsigned __int8 v12 = *v11;
      *id v11 = (void *)v10;

      if (**(void **)(a1 + 48)) {
        **(unsigned char **)(a1 + 56) = 1;
      }

      break;
    case 3:
      char v13 = bswap64(*(void *)(a2 + 3));
      if (v13)
      {
        **(_DWORD **)(a1 + 64) = 0;
        goto LABEL_14;
      }
      uint64_t v8 = 1;
      if ((v13 & 2) != 0) {
        **(_DWORD **)(a1 + 64) = 1;
      }
      break;
    case 4:
      id v14 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v4];
      uint64_t v15 = *(void ***)(a1 + 72);
      uint64_t v16 = *v15;
      void *v15 = v14;

      goto LABEL_14;
    default:
LABEL_14:
      uint64_t v8 = 1;
      break;
  }
  return v8;
}

void *sub_1000E8868(uint64_t a1)
{
  if (!a1 || !*(unsigned char *)(a1 + 46)) {
    return 0;
  }
  id v2 = objc_alloc_init((Class)NSMutableArray);
  unsigned int v3 = v2;
  if (*(void *)(a1 + 472)) {
    [v2 addObject:];
  }
  if ([*(id *)(a1 + 656) count])
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v4 = [*(id *)(a1 + 656) allValues];
    id v5 = (char *)[v4 countByEnumeratingWithState:&v29 objects:v35 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v30;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(void *)v30 != v7) {
            objc_enumerationMutation(v4);
          }
          v34[0] = 0;
          v34[1] = 0;
          nw_agent_get_uuid();
          id v9 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v34];
          [v3 addObject:v9];
        }
        uint64_t v6 = (char *)[v4 countByEnumeratingWithState:&v29 objects:v35 count:16];
      }
      while (v6);
    }
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v10 = *(id *)(a1 + 112);
  id v11 = [v10 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v26;
    do
    {
      for (j = 0; j != v12; j = (char *)j + 1)
      {
        if (*(void *)v26 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v16 = *(void **)(*((void *)&v25 + 1) + 8 * (void)j);
        id v17 = [v16 proxyAgentUUID:v25];

        if (v17)
        {
          id v18 = [v16 proxyAgentUUID];
          [v3 addObject:v18];
        }
        id v19 = [v16 companionProxyAgent];

        if (v19)
        {
          int v20 = [v16 companionProxyAgent];
          id v21 = [v20 agentUUID];
          [v3 addObject:v21];

          uint64_t v22 = [v16 companionProxyAgent];
          if (v22)
          {
            id v23 = (void *)v22;
            uint64_t v15 = [*(id *)(v22 + 64) agentUUID];

            if (v15) {
              [v3 addObject:v15];
            }
          }
          else
          {
            uint64_t v15 = 0;
          }
        }
      }
      id v12 = [v10 countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v12);
  }

  return v3;
}

void sub_1000E8B40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (*(void *)(v1 + 128)) {
      return;
    }
    uint64_t v1 = *(void *)(v1 + 632);
  }
  sub_100102CB4(v1, *(void **)(a1 + 40));
}

void sub_1000E8B64(uint64_t a1, char a2)
{
  if (sub_1000E8CA0(a1))
  {
    uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v6 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    uint64_t v8 = sub_100025528([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
    if (v8)
    {
      v8[9] = 1;
      char v9 = a2;
      id v7 = [objc_alloc((Class)NSData) initWithBytes:&v9 length:1];
      sub_100025B00((uint64_t)v8, 18, v7);
    }
    sub_100027090((uint64_t)v8);
  }
}

id sub_1000E8CA0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 62))
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
LABEL_8:
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 46)) {
    return 0;
  }
  id result = [*(id *)(a1 + 128) ikeClassDEstablished];
  if (result)
  {
    id result = [*(id *)(a1 + 128) type];
    if (result != 1)
    {
      unsigned int v3 = (void *)_NRCopyLogObjectForNRUUID();
      int v4 = _NRLogIsLevelEnabled();

      if (v4) {
        goto LABEL_8;
      }
      return 0;
    }
  }
  return result;
}

void sub_1000E8DB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[14] && WeakRetained[72])
  {
    id v2 = WeakRetained;
    sub_1000E8B64((uint64_t)WeakRetained, 1);
    id WeakRetained = v2;
  }
}

void sub_1000E8E08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v3 = (id)qword_1001F4A18;
    int v4 = v3;
    if (v3) {
      id v5 = (void *)*((void *)v3 + 6);
    }
    else {
      id v5 = 0;
    }
    id v6 = v5;

    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      uint64_t v8 = *(void **)(v7 + 232);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    id v6 = 0;
    uint64_t v8 = 0;
  }
  sub_100155CF0((uint64_t)v6, 0, v8);

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v9 + 104));
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v10 = (id)qword_1001F4A18;
    id v11 = v10;
    if (v10) {
      id v12 = (void *)*((void *)v10 + 6);
    }
    else {
      id v12 = 0;
    }
    uint64_t v13 = v12;

    uint64_t v14 = *(void *)(a1 + 32);
    if (v14) {
      uint64_t v15 = *(void **)(v14 + 232);
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  sub_1001572E8(v13, v15);

  uint64_t v16 = *(void *)(a1 + 32);
  if (v16)
  {
    *(unsigned char *)(v16 + 34) = 0;
    uint64_t v17 = *(void *)(a1 + 32);
    if (v17)
    {
      id v18 = *(void **)(v17 + 96);
      sub_10012F648(v18, 1030, 0, 0);
    }
  }
}

void sub_1000E8FB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1)
  {
    memset(v55, 0, 9);
    if ((unint64_t)[v3 length] > 8)
    {
      [v4 getBytes:v55 length:9];
      int v13 = *(_DWORD *)((char *)v55 + 5);
      if (LOBYTE(v55[0]))
      {
        if (*(unsigned char *)(a1 + 10) || *(unsigned char *)(a1 + 50))
        {
          dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v14 = (id)qword_1001F4A18;
          uint64_t v15 = v14;
          if (v14) {
            uint64_t v16 = (void *)*((void *)v14 + 6);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = v16;

          BOOL v18 = v17 != 0;
          if (v17)
          {
            id v19 = v17[3];
            dispatch_assert_queue_V2(v19);
          }
        }
        else
        {
          BOOL v18 = 0;
        }
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
        id v20 = sub_1000DC5BC(a1, 2, 101);
        id v21 = v20;
        if (!*(unsigned char *)(a1 + 44)) {
          [v20 startRequested];
        }
        id v22 = objc_alloc_init((Class)NSMutableArray);
        if ((unint64_t)[v4 length] >= 0xA)
        {
          id v23 = [v4 subdataWithRange:9, [v4 length] - 9];
          id v48 = _NSConcreteStackBlock;
          uint64_t v49 = 3221225472;
          id v50 = sub_1000E9520;
          uint64_t v51 = &unk_1001C7558;
          uint64_t v52 = a1;
          BOOL v54 = v18;
          id v53 = v22;
          NRTLVParse();
        }
        if ([v22 count])
        {
          id v41 = v22;
          id v42 = v21;
          int v43 = v13;
          objc_storeStrong((id *)(a1 + 432), v22);
          id v24 = objc_alloc_init((Class)NSMutableString);
          long long v44 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          id v25 = *(id *)(a1 + 432);
          id v26 = [v25 countByEnumeratingWithState:&v44 objects:v56 count:16];
          if (v26)
          {
            id v27 = v26;
            uint64_t v28 = *(void *)v45;
            do
            {
              for (i = 0; i != v27; i = (char *)i + 1)
              {
                if (*(void *)v45 != v28) {
                  objc_enumerationMutation(v25);
                }
                long long v30 = *(void **)(*((void *)&v44 + 1) + 8 * i);
                id v31 = [v24 length];
                [v30 unsignedCharValue];
                uint64_t ShortStringFromNRLinkSubtype = createShortStringFromNRLinkSubtype();
                uint64_t v33 = (void *)ShortStringFromNRLinkSubtype;
                if (v31) {
                  [v24 appendFormat:@"/%@", ShortStringFromNRLinkSubtype];
                }
                else {
                  [v24 appendString:ShortStringFromNRLinkSubtype];
                }
              }
              id v27 = [v25 countByEnumeratingWithState:&v44 objects:v56 count:16];
            }
            while (v27);
          }

          uint64_t v39 = "ack";
          if ((v43 & 0x1000000) == 0) {
            uint64_t v39 = "req";
          }
          sub_1000D85E8(a1, 1050, @"recv %s %d %@", v34, v35, v36, v37, v38, (uint64_t)v39);
          if (sub_1000E9414(a1)) {
            sub_1000DB474(a1, (const char *)1);
          }
          else {
            *(unsigned char *)(a1 + 26) = 1;
          }
          id v22 = v41;
          id v21 = v42;
        }
      }
      else
      {
        double v40 = "ack ";
        if ((*(_DWORD *)((unsigned char *)v55 + 5) & 0x1000000) == 0) {
          double v40 = "req";
        }
        sub_1000D85E8(a1, 1050, @"recv %s %d", v8, v9, v10, v11, v12, (uint64_t)v40);
        *(unsigned char *)(a1 + 53) = 0;
        sub_1000DB474(a1, 0);
      }
    }
    else
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
        [v4 length];
        _NRLogWithArgs();
      }
    }
  }
}

BOOL sub_1000E9414(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v1 = (id)qword_1001F4A18;
  uint64_t v2 = v1;
  if (v1) {
    id v3 = (void *)*((void *)v1 + 6);
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  BOOL v5 = sub_10015774C((uint64_t)v4);
  if (!v5)
  {
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
  return v5;
}

uint64_t sub_1000E9520(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2 != 1) {
    return 1;
  }
  if (*(_WORD *)(a2 + 1) != 256)
  {
    uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_20;
    }
    return 1;
  }
  unsigned int v3 = *(unsigned __int8 *)(a2 + 3);
  unint64_t v4 = 0x6867660000650000uLL >> (8 * v3);
  if (v3 >= 8) {
    LOBYTE(v4) = 0;
  }
  if (v4 > 0x65u)
  {
    if (v4 == 102)
    {
      uint64_t v22 = *(void *)(a1 + 32);
      if (!v22 || !*(unsigned char *)(v22 + 10) || !*(unsigned char *)(a1 + 48)) {
        return 1;
      }
      id v19 = *(void **)(a1 + 40);
      uint64_t v20 = 102;
    }
    else
    {
      if (v4 != 103) {
        return 1;
      }
      uint64_t v18 = *(void *)(a1 + 32);
      if (!v18 || !*(unsigned char *)(v18 + 50) || !*(unsigned char *)(a1 + 48)) {
        return 1;
      }
      id v19 = *(void **)(a1 + 40);
      uint64_t v20 = 103;
    }
LABEL_34:
    uint64_t v12 = +[NSNumber numberWithUnsignedChar:v20];
    [v19 addObject:v12];
    goto LABEL_35;
  }
  if (!(_BYTE)v4)
  {
    if (v3 > 7) {
      return 1;
    }
    unint64_t v21 = 0x202020504020100uLL >> (8 * v3);
    if (!(_BYTE)v21) {
      return 1;
    }
    id v19 = *(void **)(a1 + 40);
    uint64_t v20 = v21;
    goto LABEL_34;
  }
  if (v4 == 101)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v5 + 104));
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v6 = (id)qword_1001F4A18;
      uint64_t v7 = v6;
      if (v6) {
        uint64_t v8 = (void *)*((void *)v6 + 6);
      }
      else {
        uint64_t v8 = 0;
      }
      id v9 = v8;

      uint64_t v10 = *(void *)(a1 + 32);
      if (v10) {
        uint64_t v11 = *(void **)(v10 + 96);
      }
      else {
        uint64_t v11 = 0;
      }
    }
    else
    {
      id v9 = 0;
      uint64_t v11 = 0;
    }
    uint64_t v12 = sub_1001558C0((uint64_t)v9, v11);

    if (v12 || (uint64_t v13 = *(void *)(a1 + 32)) != 0 && *(unsigned char *)(v13 + 44))
    {
      id v14 = *(void **)(a1 + 40);
      uint64_t v15 = +[NSNumber numberWithUnsignedChar:101];
      [v14 addObject:v15];

LABEL_35:
      return 1;
    }
    id v24 = (void *)_NRCopyLogObjectForNRUUID();
    int v25 = _NRLogIsLevelEnabled();

    if (!v25) {
      return 1;
    }
LABEL_20:
    uint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
    goto LABEL_35;
  }
  return 1;
}

void sub_1000E9FA4(uint64_t a1)
{
  if (a1)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v2 = *(id *)(a1 + 152);
    id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v9;
      do
      {
        id v6 = 0;
        do
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(v2);
          }
          xpc_connection_cancel(*(xpc_connection_t *)(*((void *)&v8 + 1) + 8 * (void)v6));
          id v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v4);
    }

    [*(id *)(a1 + 152) removeAllObjects];
    uint64_t v7 = *(void **)(a1 + 160);
    *(void *)(a1 + 160) = 0;
  }
}

void sub_1000EA0B8(uint64_t a1)
{
  id v2 = *(dispatch_queue_t **)(a1 + 32);
  if (!v2
    || (dispatch_assert_queue_V2(v2[13]), v3 = (dispatch_queue_t *)sub_1000DC5BC((uint64_t)v2, 1, 0), (id v2 = v3) == 0)
    || [(dispatch_queue_t *)v3 state] != 8)
  {
    id v4 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v7 + 104));
      sub_1000DDB4C(v7, 1, 0xAu);
    }
    long long v8 = objc_alloc_init(NRLinkDirectorRequest);
    long long v10 = v8;
    if (v8)
    {
      v8->_type = 6;
      v8->_allowsSuspendedLinuint64_t k = 0;
      objc_storeStrong((id *)&v8->_timerDescription, @"QR-activation-hysteresis");
      objc_storeStrong((id *)&v10->_cancelIfLinkTypeReady, &off_1001D4D78);
      v10->_attemptImmediately = 1;
      v10->_timeout = 10;
    }
    newValue[0] = _NSConcreteStackBlock;
    newValue[1] = 3221225472;
    newValue[2] = sub_1000EC5AC;
    newValue[3] = &unk_1001C8BA8;
    uint64_t v11 = *(void *)(a1 + 32);
    newValue[4] = v11;
    if (v10)
    {
      objc_setProperty_nonatomic_copy(v10, v9, newValue, 48);
      uint64_t v11 = *(void *)(a1 + 32);
    }
    sub_1000D6720(v11, v10);
  }
}

void sub_1000EA280(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    sub_1000DDB4C(a1, 1, 0xAu);
  }
}

void sub_1000EA2CC(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if ([*(id *)(a1 + 112) count])
    {
      if (!*(unsigned char *)(a1 + 57))
      {
        int v2 = *(unsigned __int8 *)(a1 + 39);
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
        if (v2 == 2) {
          int v3 = 101;
        }
        else {
          int v3 = 0;
        }
        id v4 = sub_1000DC5BC(a1, v2, v3);
        uint64_t v5 = v4;
        if (v4 && [v4 state] == 8) {
          goto LABEL_29;
        }
      }
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id v6 = *(id *)(a1 + 112);
      id v7 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v5 = 0;
        uint64_t v9 = *(void *)v19;
        unsigned __int16 v10 = -1;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(void *)v19 != v9) {
              objc_enumerationMutation(v6);
            }
            uint64_t v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
            if ([v12 state] == 8 && objc_msgSend(v12, "metric") < v10)
            {
              id v13 = v12;

              unsigned __int16 v10 = (unsigned __int16)[v13 metric];
              uint64_t v5 = v13;
            }
          }
          id v8 = [v6 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v8);

        if (!v5 || [v5 state] == 8) {
          goto LABEL_29;
        }
        id v14 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v16 = *(id *)(a1 + 96);
          uint64_t v17 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
      }
      else
      {
        uint64_t v5 = v6;
      }

      uint64_t v5 = 0;
LABEL_29:
      sub_1000EAB98(a1, v5);

      return;
    }
    sub_1000EAB98(a1, 0);
  }
}

void sub_1000EA54C(uint64_t a1, void *a2)
{
  id v31 = a2;
  if (a1 && [*(id *)(a1 + 128) state] == 8)
  {
    id v4 = sub_100025474([NRLinkDirectorMessage alloc], *(void **)(a1 + 96));
    uint64_t v5 = v4;
    if (v4)
    {
      objc_storeStrong((id *)v4 + 3, a2);
      if (!*(unsigned char *)(a1 + 57)) {
        v5[8] = 1;
      }
      id v6 = *(id *)(a1 + 112);
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      id v7 = v6;
      id v8 = [v7 countByEnumeratingWithState:&v37 objects:v42 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v38;
LABEL_9:
        uint64_t v11 = 0;
        while (1)
        {
          if (*(void *)v38 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void **)(*((void *)&v37 + 1) + 8 * v11);
          if ([v12 state] != 255)
          {
            if ([v12 isPrimary]) {
              break;
            }
          }
          if (v9 == (id)++v11)
          {
            id v9 = [v7 countByEnumeratingWithState:&v37 objects:v42 count:16];
            if (!v9) {
              goto LABEL_21;
            }
            goto LABEL_9;
          }
        }
        unsigned int v13 = [v12 type];
        unsigned int v14 = ([v12 subtype] - 101);
        unint64_t v15 = 0x40300020100uLL >> (8 * v13);
        if (v13 >= 6) {
          LOBYTE(v15) = 0;
        }
        if (v14 >= 4) {
          char v16 = v15;
        }
        else {
          char v16 = 0x7060502u >> (8 * v14);
        }
        char v36 = v16;
        id v17 = [objc_alloc((Class)NSData) initWithBytes:&v36 length:1];
        sub_100025B00((uint64_t)v5, 6, v17);
      }
LABEL_21:

      long long v30 = v7;
      long long v29 = [v7 allObjects];
      long long v18 = [v29 sortedArrayUsingComparator:&stru_1001C64E0];
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v19 = [v18 countByEnumeratingWithState:&v32 objects:v41 count:16];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = *(void *)v33;
        do
        {
          for (i = 0; i != v20; i = (char *)i + 1)
          {
            if (*(void *)v33 != v21) {
              objc_enumerationMutation(v18);
            }
            id v23 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            if ([v23 state] == 8
              && ([v23 isPrimary] & 1) == 0)
            {
              char v36 = 0;
              unsigned int v24 = [v23 type];
              unsigned int v25 = ([v23 subtype] - 101);
              unint64_t v26 = 0x40300020100uLL >> (8 * v24);
              if (v24 >= 6) {
                LOBYTE(v26) = 0;
              }
              if (v25 >= 4) {
                char v27 = v26;
              }
              else {
                char v27 = 0x7060502u >> (8 * v25);
              }
              char v36 = v27;
              id v28 = [objc_alloc((Class)NSData) initWithBytes:&v36 length:1];
              sub_100025B00((uint64_t)v5, 6, v28);
            }
          }
          id v20 = [v18 countByEnumeratingWithState:&v32 objects:v41 count:16];
        }
        while (v20);
      }
    }
    else
    {
    }
    sub_100027090((uint64_t)v5);
  }
}

void sub_1000EA8DC(uint64_t a1)
{
  if (a1 && sub_1000D95DC(a1))
  {
    if (qword_1001F4B80 != -1) {
      dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
    }
    if (byte_1001F4B78)
    {
      sub_1000D8CD8(a1, 5u, 0);
    }
    else
    {
      int v2 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
      int v3 = v2;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      if (v2) {
        id v4 = (void *)*((void *)v2 + 16);
      }
      else {
        id v4 = 0;
      }
      id v5 = v4;
      id v6 = [v5 allowedLinkSubtypes];

      id v7 = [v6 countByEnumeratingWithState:&v23 objects:v28 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v24;
        do
        {
          for (i = 0; i != v8; i = (char *)i + 1)
          {
            if (*(void *)v24 != v9) {
              objc_enumerationMutation(v6);
            }
            sub_1000D8CD8(a1, 0, (char)[*(id *)(*((void *)&v23 + 1) + 8 * i) unsignedShortValue]);
          }
          id v8 = [v6 countByEnumeratingWithState:&v23 objects:v28 count:16];
        }
        while (v8);
      }

      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      if (v3) {
        uint64_t v11 = (void *)v3[16];
      }
      else {
        uint64_t v11 = 0;
      }
      id v12 = v11;
      unsigned int v13 = [v12 allowedLinkTypes:v19];

      id v14 = [v13 countByEnumeratingWithState:&v19 objects:v27 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v20;
        do
        {
          for (j = 0; j != v15; j = (char *)j + 1)
          {
            if (*(void *)v20 != v16) {
              objc_enumerationMutation(v13);
            }
            long long v18 = *(void **)(*((void *)&v19 + 1) + 8 * (void)j);
            if ([v18 unsignedShortValue] != 2) {
              sub_1000D8CD8(a1, [v18 unsignedShortValue], 0);
            }
          }
          id v15 = [v13 countByEnumeratingWithState:&v19 objects:v27 count:16];
        }
        while (v15);
      }
    }
  }
}

void sub_1000EAB98(uint64_t a1, void *a2)
{
  uint64_t v171 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  uint64_t v9 = (id *)(a1 + 128);
  if (*(char **)(a1 + 128) != v171)
  {
    uint64_t v150 = v171;
    sub_1000D85E8(a1, 1012, @"%@ -> (%@)", v4, v5, v6, v7, v8, *(void *)(a1 + 128));
    id v10 = *(id *)(a1 + 128);
    *(unsigned char *)(a1 + 41) = [v10 type];
    uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v13 = *(id *)(a1 + 96);
      id v14 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v154 = (uint64_t)v10;
      uint64_t v155 = v171;
      uint64_t v152 = 1529;
      id v148 = "";
      uint64_t v150 = "-[NRDDeviceConductor setPrimaryLink:]";
      _NRLogWithArgs();
    }
    objc_storeStrong((id *)(a1 + 128), a2);
    sub_1000EBCE0(a1);
    id v15 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
    uint64_t v16 = v15;
    if (*(unsigned char *)(a1 + 48)) {
      goto LABEL_47;
    }
    id v17 = v15 ? (void *)*((void *)v15 + 16) : 0;
    id v18 = v17;
    unsigned int v19 = [v18 hasPoliciesForProxyCriteria];

    if (!v19) {
      goto LABEL_47;
    }
    long long v20 = v16 ? (void *)v16[16] : 0;
    id v21 = v20;
    id v22 = [v21 proxyCapability];

    if (v22 != (id)2) {
      goto LABEL_47;
    }
    if (v16) {
      long long v23 = (void *)v16[16];
    }
    else {
      long long v23 = 0;
    }
    id v24 = v23;
    long long v25 = [v24 proxyProviderCriteria];
    if ([v25 excludeLegacyClients])
    {

      goto LABEL_47;
    }
    long long v26 = v16 ? (void *)v16[16] : 0;
    id v27 = v26;
    id v28 = [v27 proxyProviderCriteria];
    unsigned __int8 v29 = [v28 excludeNonMatchingLegacyClients];

    if (v29)
    {
LABEL_47:

      long long v100 = *(id *)(a1 + 368);
      if (v100) {
        ++v100[6];
      }

      if (*v9)
      {
        if (!*(void *)(a1 + 408))
        {
          sub_1000EC228(a1);
          if (!*(unsigned char *)(a1 + 45)) {
            goto LABEL_63;
          }
          goto LABEL_54;
        }
        if ([v10 state] != 255) {
          sub_10011648C(*(void **)(a1 + 408));
        }
      }
      if (!*(unsigned char *)(a1 + 45)) {
        goto LABEL_63;
      }
LABEL_54:
      if (*v9)
      {
        if (*(unsigned char *)(a1 + 42) && sub_100116230())
        {
          *(unsigned char *)(a1 + 42) = 0;
          long long v101 = *(void **)(a1 + 96);
          int v102 = 1036;
LABEL_62:
          sub_10012F648(v101, v102, 0, 0);
        }
      }
      else
      {
        LODWORD(v179[0]) = 0x10000;
        if ((sysctlbyname("net.link.generic.system.companion_sndbuf_limit", 0, 0, v179, 4uLL) & 0x80000000) == 0)
        {
          *(unsigned char *)(a1 + 42) = 1;
          long long v101 = *(void **)(a1 + 96);
          int v102 = 1035;
          goto LABEL_62;
        }
        BOOL v146 = __error();
        uint64_t v147 = (char *)*v146;
        if (strerror_r(*v146, __strerrbuf, 0x80uLL)) {
          __strerrbuf[0] = 0;
        }
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4C20 != -1) {
            dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
          }
          uint64_t v155 = v147;
          unsigned int v156 = __strerrbuf;
          uint64_t v152 = 901;
          uint64_t v154 = LODWORD(v179[0]);
          id v148 = "";
          uint64_t v150 = "NRLimitCompanionLinkFlows";
          _NRLogWithArgs();
        }
      }
LABEL_63:
      if (v10) {
        [v10 setIsPrimary:0];
      }
      if (*v9)
      {
        [*v9 setIsPrimary:1];
        sub_1000EA54C(a1, *(void **)(a1 + 128));
        [*(id *)(a1 + 128) virtualInterface];
        uint64_t v103 = NEVirtualInterfaceCopyName();
        int v104 = *(void **)(a1 + 408);
        *(void *)(a1 + 408) = v103;
      }
      else
      {
        int v104 = *(void **)(a1 + 408);
        *(void *)(a1 + 408) = 0;
      }

      unsigned int v105 = [v10 type];
      if (v171 && v105 == 1)
      {
        id v106 = (void *)_NRCopyLogObjectForNRUUID();
        int v107 = _NRLogIsLevelEnabled();

        if (v107)
        {
          id v108 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v152 = 1579;
          id v148 = "";
          uint64_t v150 = "-[NRDDeviceConductor setPrimaryLink:]";
          _NRLogWithArgs();
        }
        [v10 suspend:v148, v150, v152, v154, v155, v156];
      }
      else if (objc_msgSend(*v9, "type", v148, v150, v152, v154, v155, v156) == 1 {
             && [*v9 state] != 8)
      }
      {
        unsigned int v109 = (void *)_NRCopyLogObjectForNRUUID();
        int v110 = _NRLogIsLevelEnabled();

        if (v110)
        {
          long long v111 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v153 = 1582;
          int v149 = "";
          id v151 = "-[NRDDeviceConductor setPrimaryLink:]";
          _NRLogWithArgs();
        }
        [v10 resume:v149, v151, v153];
      }
      if ([*v9 type] != 1) {
        sub_1000E5970(a1);
      }
      sub_1000E5DDC(a1, 0);
      sub_1000D53DC(a1, 1, 1);
      if (*(void *)(a1 + 664))
      {
        if (!*(void *)(a1 + 680))
        {
LABEL_82:
          id v112 = objc_alloc((Class)NSString);
          int v149 = [*(id *)(a1 + 96) UUIDString];
          id v113 = [v112 initWithFormat:@"NRDDC-%@-%@"];

          long long v114 = *(void **)(a1 + 680);
          *(void *)(a1 + 680) = v113;
        }
      }
      else
      {
        uint64_t v132 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
        if (sub_100145D70((BOOL)v132))
        {
          uint64_t v133 = "CmpLnkAvailability";
        }
        else
        {
          if (v132) {
            uint64_t v134 = (void *)v132[16];
          }
          else {
            uint64_t v134 = 0;
          }
          id v135 = v134;
          unsigned __int8 v136 = [v135 activeOperationalScope];

          if ((v136 & 1) == 0)
          {

LABEL_95:
            goto LABEL_96;
          }
          if (v132) {
            long long v137 = (void *)v132[16];
          }
          else {
            long long v137 = 0;
          }
          id v138 = v137;
          id v139 = [v138 allowedLinkSubtypes];
          unsigned int v140 = [v139 containsObject:&off_1001D4A80];

          if (v140) {
            uint64_t v133 = "LowLatencyTetheringAvailability";
          }
          else {
            uint64_t v133 = "TetheringAvailability";
          }
        }
        id v141 = *(id *)(a1 + 104);
        uint64_t v142 = nw_agent_create();
        long long v143 = *(void **)(a1 + 664);
        *(void *)(a1 + 664) = v142;

        nw_agent_change_state();
        uint64_t v144 = +[NSString stringWithUTF8String:v133];
        id v145 = *(void **)(a1 + 672);
        *(void *)(a1 + 672) = v144;

        if (!*(void *)(a1 + 680)) {
          goto LABEL_82;
        }
      }
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v115 = (id)qword_1001F4D20;
      sub_10013502C((uint64_t)v115, *(void **)(a1 + 680));

      if ([*(id *)(a1 + 128) state] == 8)
      {
        *(void *)__strerrbuf = 0;
        uint64_t v181 = 0;
        nw_agent_get_uuid();
        id v116 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:__strerrbuf];
        id v117 = objc_alloc_init((Class)NSMutableArray);
        int v118 = +[NEPolicyCondition allInterfaces];
        [v117 addObject:v118];

        id v119 = +[NSString stringWithUTF8String:nrXPCEntitlementDeviceMonitor];
        int v120 = +[NEPolicyCondition customEntitlement:v119];
        [v117 addObject:v120];

        __int16 v121 = +[NEPolicyCondition requiredAgentDomain:@"com.apple.networkrelay" agentType:*(void *)(a1 + 672)];
        [v117 addObject:v121];

        id v122 = objc_alloc((Class)NEPolicy);
        long long v123 = +[NEPolicyResult netAgentUUID:v116];
        id v124 = [v122 initWithOrder:10 result:v123 conditions:v117];

        self;
        if (qword_1001F4D28 != -1) {
          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        }
        id v125 = (id)qword_1001F4D20;
        id v126 = sub_100134CFC((uint64_t)v125, *(void **)(a1 + 680), v124);
      }
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v127 = (id)qword_1001F4D20;
      uint64_t v128 = (id *)v127;
      if (v127)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v127 + 1));
        if (([v128[2] apply] & 1) == 0) {
          sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v129, v130, v131, (uint64_t)v149);
        }
      }

      goto LABEL_95;
    }
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v30 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v30, *(void **)(a1 + 296));

    unsigned int v31 = [*(id *)(a1 + 128) state];
    if (v16) {
      long long v32 = (void *)v16[16];
    }
    else {
      long long v32 = 0;
    }
    id v33 = v32;
    unsigned int v34 = [v33 hasCompanionDatapath];

    id v35 = *v9;
    if (v34)
    {
      [v35 virtualInterface];
      uint64_t v36 = NEVirtualInterfaceCopyName();
    }
    else
    {
      uint64_t v36 = [v35 localInterfaceName];
    }
    long long v37 = (void *)v36;
    if (v31 != 8)
    {
LABEL_41:
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v95 = (id)qword_1001F4D20;
      long long v96 = (id *)v95;
      if (v95)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v95 + 1));
        if (([v96[2] apply] & 1) == 0) {
          sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v97, v98, v99, (uint64_t)v148);
        }
      }

      goto LABEL_47;
    }
    uint64_t v166 = (void *)v36;
    uint64_t v38 = +[NEPolicyCondition allInterfaces];
    uint64_t v39 = +[NEPolicyCondition usesModernNetworkAPI];
    long long v40 = +[NEPolicyCondition allowsUnsafeSocketAccess];
    [v40 setNegative:1];
    uint64_t v41 = +[NEPolicyResult skipWithOrder:620];
    id v42 = objc_alloc((Class)NEPolicy);
    *(void *)__strerrbuf = v38;
    uint64_t v181 = v39;
    uint64_t v162 = v40;
    uint64_t v163 = (void *)v39;
    int v182 = v40;
    int v43 = +[NSArray arrayWithObjects:__strerrbuf count:3];
    id v44 = [v42 initWithOrder:600 result:v41 conditions:v43];

    id v45 = sub_1001348C8();
    id v46 = sub_100134CFC((uint64_t)v45, *(void **)(a1 + 296), v44);

    uint64_t v47 = +[NEPolicyCondition effectivePID:getpid()];
    id v48 = objc_alloc((Class)NEPolicy);
    uint64_t v170 = (void *)v38;
    v179[0] = v38;
    v179[1] = v47;
    unint64_t v161 = (void *)v47;
    uint64_t v49 = +[NSArray arrayWithObjects:v179 count:2];
    uint64_t v169 = (void *)v41;
    id v50 = [v48 initWithOrder:600 result:v41 conditions:v49];

    id v51 = sub_1001348C8();
    id v52 = sub_100134CFC((uint64_t)v51, *(void **)(a1 + 296), v50);

    if (v16) {
      id v53 = (void *)v16[16];
    }
    else {
      id v53 = 0;
    }
    id v54 = v53;
    unsigned int v55 = [v54 usesTLS];

    if (v55)
    {
      id v56 = [*(id *)(a1 + 128) remoteOuterEndpoint];
      uint64_t v164 = v50;
      unsigned int v57 = [v56 addressFamily];

      long long v58 = [*(id *)(a1 + 128) remoteOuterEndpoint];
      id v59 = [v58 hostname];
      uint64_t v60 = +[NWAddressEndpoint endpointWithHostname:v59 port:@"0"];

      if (v57 == 30) {
        uint64_t v61 = 128;
      }
      else {
        uint64_t v61 = 32;
      }
      uint64_t v167 = (void *)v60;
      id v62 = +[NEPolicyCondition flowRemoteAddress:prefix:](NEPolicyCondition, "flowRemoteAddress:prefix:", v60, v61, v148, v150, v152, v154, v155);
      int v177 = v62;
      unsigned __int8 v63 = +[NEPolicyCondition allInterfaces];
      long long v178 = v63;
      id v64 = +[NSArray arrayWithObjects:&v177 count:2];

      id v65 = [objc_alloc((Class)NEPolicy) initWithOrder:600 result:v169 conditions:v64];
      uint64_t v66 = sub_1001348C8();
      id v67 = sub_100134CFC((uint64_t)v66, *(void **)(a1 + 296), v65);
    }
    else
    {
      uint64_t v68 = sub_1001426E8(v16);
      uint64_t v167 = v68;
      if (v68)
      {
        uint64_t v69 = +[NEPolicyCondition flowRemoteAddress:v68 prefix:128];
        int v177 = v69;
        uint64_t v70 = +[NEPolicyCondition allInterfaces];
        long long v178 = v70;
        uint64_t v71 = +[NSArray arrayWithObjects:&v177 count:2];

        id v72 = [objc_alloc((Class)NEPolicy) initWithOrder:600 result:v169 conditions:v71];
        id v73 = sub_1001348C8();
        id v74 = sub_100134CFC((uint64_t)v73, *(void **)(a1 + 296), v72);

        id v50 = v72;
      }
      id v62 = sub_10014273C(v16);
      if (!v62)
      {
        uint64_t v165 = v50;
        goto LABEL_38;
      }
      id v64 = +[NEPolicyCondition flowRemoteAddress:v62 prefix:128];
      v176[0] = v64;
      uint64_t v75 = +[NEPolicyCondition allInterfaces];
      v176[1] = v75;
      uint64_t v66 = +[NSArray arrayWithObjects:v176 count:2];

      id v65 = [objc_alloc((Class)NEPolicy) initWithOrder:600 result:v169 conditions:v66];
      id v76 = sub_1001348C8();
      id v77 = sub_100134CFC((uint64_t)v76, *(void **)(a1 + 296), v65);
    }
    uint64_t v165 = v65;

LABEL_38:
    id v168 = +[NEPolicyRouteRule routeRuleWithAction:7 forInterfaceName:v166];
    [v168 setControlUnit:0xFFFFFFFLL];
    uint64_t v78 = +[NEPolicyCondition flowIPProtocol:17];
    id v158 = objc_alloc((Class)NEPolicy);
    v175 = v168;
    id v79 = +[NSArray arrayWithObjects:&v175 count:1];
    uint64_t v80 = +[NEPolicyResult routeRules:v79];
    v174[0] = v170;
    v174[1] = v78;
    id v160 = (void *)v78;
    uint64_t v81 = +[NSArray arrayWithObjects:v174 count:2];
    id v157 = [v158 initWithOrder:610 result:v80 conditions:v81];

    id v82 = sub_1001348C8();
    id v83 = sub_100134CFC((uint64_t)v82, *(void **)(a1 + 296), v157);

    uint64_t v84 = +[NEPolicyCondition flowIPProtocol:6];
    id v85 = objc_alloc((Class)NEPolicy);
    uint64_t v173 = v168;
    long long v86 = +[NSArray arrayWithObjects:&v173 count:1];
    long long v87 = +[NEPolicyResult routeRules:v86];
    v172[0] = v170;
    v172[1] = v84;
    uint64_t v159 = (void *)v84;
    long long v88 = +[NSArray arrayWithObjects:v172 count:2];
    id v89 = [v85 initWithOrder:610 result:v87 conditions:v88];

    id v90 = sub_1001348C8();
    id v91 = sub_100134CFC((uint64_t)v90, *(void **)(a1 + 296), v89);

    long long v92 = (void *)_NRCopyLogObjectForNRUUID();
    int v93 = _NRLogIsLevelEnabled();

    if (v93)
    {
      long long v94 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v152 = 4572;
      uint64_t v154 = a1;
      id v148 = "";
      uint64_t v150 = "-[NRDDeviceConductor updateFlowDivertPoliciesIfNeeded]";
      _NRLogWithArgs();
    }
    long long v37 = v166;
    goto LABEL_41;
  }
LABEL_96:
}

void sub_1000EBCE0(uint64_t a1)
{
  int v2 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (!sub_100119B74(v2) || !*(void *)(a1 + 384)) {
    goto LABEL_38;
  }
  int v3 = *(void **)(a1 + 128);
  if (!v3) {
    goto LABEL_31;
  }
  if ([v3 type] != 1)
  {
    uint64_t v6 = *(void **)(a1 + 128);
    if (v6)
    {
      if ([v6 type] == 2)
      {
        uint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (!IsLevelEnabled) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
      uint64_t v9 = *(void **)(a1 + 128);
      if (v9)
      {
        if ([v9 type] == 5)
        {
          id v10 = (void *)_NRCopyLogObjectForNRUUID();
          int v11 = _NRLogIsLevelEnabled();

          if (!v11) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
        if (*(void *)(a1 + 128))
        {
          int64_t v34 = 15000000000;
LABEL_37:
          objc_initWeak(location, (id)a1);
          uint64_t v39 = *(void **)(a1 + 392);
          dispatch_time_t v40 = dispatch_time(0x8000000000000000, v34);
          uint64_t v41 = *(void **)(a1 + 104);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000EC300;
          block[3] = &unk_1001C8890;
          id v42 = v41;
          objc_copyWeak(v45, location);
          v45[1] = v39;
          dispatch_after(v40, v42, block);

          objc_destroyWeak(v45);
          objc_destroyWeak(location);
          goto LABEL_38;
        }
      }
    }
LABEL_31:
    int64_t v34 = 15000000000;
    if (!*(unsigned char *)(a1 + 28))
    {
      int v35 = *(unsigned __int8 *)(a1 + 41);
      if (v35 == 5 || v35 == 2)
      {
        uint64_t v36 = (void *)_NRCopyLogObjectForNRUUID();
        int v37 = _NRLogIsLevelEnabled();

        if (v37)
        {
          uint64_t v38 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        int64_t v34 = 0;
      }
    }
    goto LABEL_37;
  }
  uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
  int v5 = _NRLogIsLevelEnabled();

  if (!v5) {
    goto LABEL_15;
  }
LABEL_14:
  id v12 = *(id *)(a1 + 96);
  id v13 = (void *)_NRCopyLogObjectForNRUUID();
  int v43 = "";
  _NRLogWithArgs();

LABEL_15:
  uint64_t v14 = *(void *)(a1 + 384);
  ++*(void *)(a1 + 392);
  if (v14)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v14 + 40));
    if (([(id)v14 isActive] & 1) == 0)
    {
      [(id)v14 setActive:1];
      [*(id *)(v14 + 48) updateNetworkAgent:v14];
      id v15 = *(void **)(v14 + 32);
      id v16 = *(id *)(v14 + 64);
      id v17 = v15;
      id v18 = [(id)v14 agentUUID];
      unsigned int v19 = [v18 UUIDString];
      sub_10012F648(v17, 19005, v16, v19);
    }
  }
  if (*(void *)(a1 + 448) && !*(unsigned char *)(a1 + 45) && !*(unsigned char *)(a1 + 59))
  {
    long long v20 = (void *)NEVirtualInterfaceCopyName();
    id v21 = objc_alloc((Class)NEPolicy);
    id v22 = +[NEPolicyResult scopeSocketToInterfaceName:v20];
    long long v23 = +[NEPolicyCondition accountIdentifier:@"com.apple.networkrelay.cmpn-link-monitor"];
    location[0] = v23;
    id v24 = +[NEPolicyCondition allInterfaces];
    location[1] = v24;
    long long v25 = +[NSArray arrayWithObjects:location count:2];
    id v26 = [v21 initWithOrder:50 result:v22 conditions:v25];

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v27 = (id)qword_1001F4D20;
    id v28 = sub_100134CFC((uint64_t)v27, *(void **)(a1 + 536), v26);

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v29 = (id)qword_1001F4D20;
    id v30 = (id *)v29;
    if (v29)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v29 + 1));
      if (([v30[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v31, v32, v33, (uint64_t)v43);
      }
    }

    *(unsigned char *)(a1 + 59) = 1;
  }
LABEL_38:
}

void sub_1000EC228(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 448))
  {
    id v4 = (id)NEVirtualInterfaceCopyName();
    id v1 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      int v3 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    sub_10011648C(v4);
  }
}

void sub_1000EC300(uint64_t a1)
{
  id WeakRetained = (uint64_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && *((unsigned char *)WeakRetained + 14))
  {
    id v12 = WeakRetained;
    if (*(void *)(a1 + 40) == WeakRetained[49])
    {
      if (*((unsigned char *)WeakRetained + 56))
      {
        sub_1000E59E8((uint64_t)WeakRetained, 1);
        sub_1000E5C84((uint64_t)v12);
        id WeakRetained = v12;
      }
      uint64_t v3 = WeakRetained[48];
      if (v3)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v3 + 40));
        if ([(id)v3 isActive])
        {
          [(id)v3 setActive:0];
          [*(id *)(v3 + 48) updateNetworkAgent:v3];
          id v4 = *(void **)(v3 + 32);
          id v5 = *(id *)(v3 + 64);
          id v6 = v4;
          uint64_t v7 = [(id)v3 agentUUID];
          uint64_t v8 = [v7 UUIDString];
          sub_10012F648(v6, 19004, v5, v8);
        }
      }
      sub_1000EC4A0((uint64_t)v12);
    }
    else
    {
      uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id WeakRetained = v12;
      if (!IsLevelEnabled) {
        goto LABEL_13;
      }
      int v11 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    id WeakRetained = v12;
  }
LABEL_13:
}

void sub_1000EC4A0(uint64_t a1)
{
  if (*(void *)(a1 + 448) && *(unsigned char *)(a1 + 59))
  {
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v2 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v2, *(void **)(a1 + 536));

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v3 = (id)qword_1001F4D20;
    id v4 = (id *)v3;
    if (v3)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 1));
      if (([v4[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v5, v6, v7, v8);
      }
    }

    *(unsigned char *)(a1 + 59) = 0;
  }
}

void sub_1000EC5AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (!*(unsigned char *)(v1 + 28)) {
      sub_10003458C(*(void *)(v1 + 192));
    }
  }
  else
  {
    sub_10003458C(0);
  }
}

void sub_1000ED3DC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v6 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
    if (!v6)
    {
      id v63 = sub_1000D8B78();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v65 = sub_1000D8B78();
        _NRLogWithArgs();
      }
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin();
      __error();
      goto LABEL_60;
    }
    uint64_t v7 = (uint64_t)v6;
    id v8 = v6[16];
    unsigned int v9 = [v8 hasCompanionDatapath];

    if (!v9)
    {
LABEL_55:

      return;
    }
    if (!*(void *)(a1 + 448))
    {
      uint64_t v10 = sub_10011D5DC(*(void **)(a1 + 104));
      *(void *)(a1 + 448) = v10;
      if (v10)
      {
        self;
        int v11 = sub_10015BD9C();
        dispatch_assert_queue_V2(v11);

        long long v82 = xmmword_10016C8A0;
        id v12 = [objc_alloc((Class)NSData) initWithBytes:&v82 length:16];
        id v13 = sub_100141BFC((uint64_t)NRDLocalDevice, v12, @"0");

        uint64_t v14 = [v13 hostname];
        NEVirtualInterfaceAddIPv6Route();

        NEVirtualInterfaceSetIPv6Router();
        NEVirtualInterfaceSetRankNever();
        id v15 = (void *)NEVirtualInterfaceCopyName();
        if (sub_1001148A8(v15, 8))
        {
          char v16 = sub_1001150F8(v15);
          id v17 = (void *)_NRCopyLogObjectForNRUUID();
          if (v16)
          {
            int v18 = _NRLogIsLevelEnabled();

            if (v18)
            {
              unsigned int v19 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            goto LABEL_21;
          }
          int v22 = _NRLogIsLevelEnabled();

          if (v22) {
            goto LABEL_19;
          }
        }
        else
        {
          long long v20 = (void *)_NRCopyLogObjectForNRUUID();
          int v21 = _NRLogIsLevelEnabled();

          if (v21)
          {
LABEL_19:
            long long v23 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
        }
        sub_1000F5E44(a1);
LABEL_21:

        goto LABEL_22;
      }
      if (qword_1001F4AA8 != -1) {
        dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4AA8 != -1) {
          dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
        }
        _NRLogWithArgs();
      }
    }
LABEL_22:
    uint64_t v1 = (void *)NEVirtualInterfaceCopyAddresses();
    id v3 = (void *)NEVirtualInterfaceCopyName();
    id v24 = sub_10015BD9C();
    dispatch_assert_queue_V2(v24);

    id v4 = (void *)sub_1001416EC((void *)v7, @"0");
    long long v25 = sub_10015BD9C();
    dispatch_assert_queue_V2(v25);

    id v2 = sub_100140FAC((void *)v7, @"0");
    sub_1000F5944((id *)a1, *(void **)(a1 + 96));
    char v26 = 0;
    if (!*(unsigned char *)(v7 + 12) || !v2) {
      goto LABEL_32;
    }
    if (v1)
    {
      id v27 = [v2 hostname];
      unsigned __int8 v28 = [v1 containsObject:v27];

      if (v28)
      {
        char v26 = 0;
        goto LABEL_32;
      }
    }
    uint64_t v80 = v4;
    id v29 = [v2 hostname];
    NEVirtualInterfaceAddAddress();

    NEVirtualInterfaceAddAddress();
    id v30 = sub_10015BD9C();
    dispatch_assert_queue_V2(v30);

    uint64_t v31 = sub_1001414DC((void *)v7, @"0");
    uint64_t v32 = +[NEPolicyCondition remoteAddress:v31 prefix:128];

    if (v32)
    {
      id v33 = objc_alloc((Class)NEPolicy);
      int64_t v34 = v3;
      id v3 = +[NEPolicyResult tunnelIPToInterfaceName:v3 secondaryResultType:0];
      v84[0] = v32;
      id v4 = +[NEPolicyCondition allInterfaces];
      v84[1] = v4;
      int v35 = +[NSArray arrayWithObjects:v84 count:2];
      id v36 = [v33 initWithOrder:4000 result:v3 conditions:v35];

      if (v36)
      {
        self;
        id v4 = v80;
        if (qword_1001F4D28 != -1) {
          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        }
        id v3 = v34;
        id v37 = (id)qword_1001F4D20;
        id v38 = sub_100134CFC((uint64_t)v37, *(void **)(a1 + 272), v36);

        char v26 = 1;
LABEL_32:
        if (!*(unsigned char *)(v7 + 13)) {
          goto LABEL_41;
        }
        if (!v4) {
          goto LABEL_41;
        }
        if (v1)
        {
          uint64_t v39 = [v4 hostname];
          unsigned __int8 v40 = [v1 containsObject:v39];

          if (v40) {
            goto LABEL_41;
          }
        }
        uint64_t v81 = v4;
        uint64_t v41 = [v4 hostname:v1];
        NEVirtualInterfaceAddAddress();

        id v42 = sub_10015BD9C();
        dispatch_assert_queue_V2(v42);

        int v43 = sub_1001418A8((void *)v7, @"0");
        id v44 = +[NEPolicyCondition remoteAddress:v43 prefix:128];

        if (v44)
        {
          id v45 = objc_alloc((Class)NEPolicy);
          uint64_t v1 = v3;
          id v3 = +[NEPolicyResult tunnelIPToInterfaceName:v3 secondaryResultType:0];
          v83[0] = v44;
          id v4 = +[NEPolicyCondition allInterfaces];
          v83[1] = v4;
          id v46 = +[NSArray arrayWithObjects:v83 count:2];
          id v47 = [v45 initWithOrder:4000 result:v3 conditions:v46];

          if (v47)
          {
            self;
            if (qword_1001F4D28 != -1) {
              dispatch_once(&qword_1001F4D28, &stru_1001C8658);
            }
            id v3 = v1;
            id v4 = v81;
            id v48 = (id)qword_1001F4D20;
            id v49 = sub_100134CFC((uint64_t)v48, *(void **)(a1 + 272), v47);

            char v26 = 1;
            uint64_t v1 = (void *)v79;
LABEL_41:
            if (*(unsigned __int16 *)(v7 + 28) >= 0xCu && !*(unsigned char *)(a1 + 58))
            {
              NEVirtualInterfaceSetMTU();
              *(unsigned char *)(a1 + 58) = 1;
              id v50 = (void *)_NRCopyLogObjectForNRUUID();
              int v51 = _NRLogIsLevelEnabled();

              if (v51)
              {
                id v52 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
            }
            if ((v26 & 1) == 0)
            {
              uint64_t v60 = (void *)_NRCopyLogObjectForNRUUID();
              int v61 = _NRLogIsLevelEnabled();

              if (!v61)
              {
LABEL_54:

                goto LABEL_55;
              }
LABEL_53:
              id v62 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();

              goto LABEL_54;
            }
            NEVirtualInterfaceUpdateAdHocService();
            self;
            if (qword_1001F4D28 == -1)
            {
LABEL_47:
              id v53 = (id)qword_1001F4D20;
              id v54 = (id *)v53;
              if (v53)
              {
                dispatch_assert_queue_V2(*((dispatch_queue_t *)v53 + 1));
                if (([v54[2] apply] & 1) == 0) {
                  sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v55, v56, v57, v79);
                }
              }

              long long v58 = (void *)_NRCopyLogObjectForNRUUID();
              int v59 = _NRLogIsLevelEnabled();

              if (!v59) {
                goto LABEL_54;
              }
              goto LABEL_53;
            }
LABEL_61:
            dispatch_once(&qword_1001F4D28, &stru_1001C8658);
            goto LABEL_47;
          }
          id v76 = sub_1000D8B78();
          int v77 = _NRLogIsLevelEnabled();

          if (v77)
          {
            id v78 = sub_1000D8B78();
            _NRLogWithArgs();
          }
        }
        else
        {
          id v73 = sub_1000D8B78();
          int v74 = _NRLogIsLevelEnabled();

          if (v74)
          {
            id v75 = sub_1000D8B78();
            _NRLogWithArgs();
          }
        }
        goto LABEL_73;
      }
      id v70 = sub_1000D8B78();
      int v71 = _NRLogIsLevelEnabled();

      if (v71)
      {
        id v72 = sub_1000D8B78();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v67 = sub_1000D8B78();
      int v68 = _NRLogIsLevelEnabled();

      if (v68)
      {
        id v69 = sub_1000D8B78();
        _NRLogWithArgs();
      }
    }
LABEL_73:
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin();
    __error();
LABEL_60:
    uint64_t v66 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v66 = 136446210;
    *(void *)(v66 + 4) = "-[NRDDeviceConductor setupCatchAllInterfaceIfApplicable]";
    sub_1000D8B78();
    _NRLogAbortWithPack();
    goto LABEL_61;
  }
}

void sub_1000EE04C(uint64_t a1)
{
  if (!a1) {
    return;
  }
  id v2 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (v2)
  {
    int v21 = v2;
    nw_parameters_t v3 = (nw_parameters_t)v2[16];
    if (v3 && *((unsigned char *)v21 + 12) && *(unsigned char *)(a1 + 45))
    {
      uint64_t v4 = *(void *)(a1 + 440);

      if (v4)
      {
LABEL_13:

        return;
      }
      nw_parameters_t v3 = nw_parameters_create();
      id v5 = v21[16];
      unsigned int v6 = [v5 proxyProviderRequiresWiFi];

      if (v6) {
        nw_parameters_set_required_interface_type(v3, nw_interface_type_wifi);
      }
      nw_parameters_set_account_id();
      uint64_t v7 = [NRCompanionProxyConfigAgent alloc];
      id v8 = *(void **)(a1 + 104);
      id v9 = *(id *)(a1 + 96);
      id v10 = v8;
      int v11 = sub_1000650E0((id *)&v7->super.isa, v10, v3, v9);
      id v12 = *(void **)(a1 + 440);
      *(void *)(a1 + 440) = v11;

      if ((sub_10006537C(*(void *)(a1 + 440)) & 1) == 0)
      {
        id v13 = *(void **)(a1 + 440);
        *(void *)(a1 + 440) = 0;

        uint64_t v14 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          char v16 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
      }
    }

    goto LABEL_13;
  }
  id v17 = sub_1000D8B78();
  int v18 = _NRLogIsLevelEnabled();

  if (v18)
  {
    id v19 = sub_1000D8B78();
    _NRLogWithArgs();
  }
  _os_log_pack_size();
  __error();
  uint64_t v20 = _os_log_pack_fill();
  *(_DWORD *)uint64_t v20 = 136446210;
  *(void *)(v20 + 4) = "-[NRDDeviceConductor setupCompanionProxyConfigAgentIfApplicable]";
  sub_1000D8B78();
  _NRLogAbortWithPack();
}

void sub_1000EE2E8(void **a1)
{
  if (!a1) {
    return;
  }
  int v61 = sub_10013DC5C((uint64_t)NRDLocalDevice, a1[12]);
  if (sub_100119B74(v61))
  {
    id v2 = a1[48];
    if (!v2) {
      goto LABEL_6;
    }
    nw_parameters_t v3 = (unsigned __int8 *)a1[48];
    if (!v3)
    {

      uint64_t v5 = (uint64_t)a1[48];
      if (!v5) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    int v4 = v3[14];

    if (!v4)
    {
LABEL_6:
      uint64_t v5 = (uint64_t)a1[48];
      if (!v5)
      {
        if (!v61) {
          goto LABEL_46;
        }
LABEL_8:
        long long v63 = 0uLL;
        sub_100141A68(v61, &v63);
        self;
        BOOL v7 = !WORD5(v63) || WORD6(v63) == 0;
        BOOL v8 = !v7;
        long long v63 = 0uLL;
        sub_10014B038(v61, &v63);
        self;
        BOOL v9 = !WORD5(v63) || WORD6(v63) == 0;
        BOOL v10 = !v9;
        if (v61[8] && (v61[9] ? (BOOL v11 = v8) : (BOOL v11 = 0), v11 && v10))
        {
          id v12 = [NRCompanionLinkViabilityAgent alloc];
          id v13 = a1[12];
          id v14 = a1[13];
          id v15 = v13;
          char v16 = sub_10006E294((id *)&v12->super.isa, v15, v14);
          id v17 = a1[48];
          a1[48] = v16;

          int v18 = a1[48];
          if (v18)
          {
            dispatch_assert_queue_V2(*((dispatch_queue_t *)v18 + 5));
            if (!*((unsigned char *)v18 + 14))
            {
              id v19 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
              uint64_t v20 = (void *)*((void *)v18 + 6);
              *((void *)v18 + 6) = v19;

              int v21 = (void *)*((void *)v18 + 6);
              if (v21)
              {
                if ([v21 registerNetworkAgent:v18])
                {
                  int v22 = [v18 agentUUID];
                  uint64_t v23 = +[NEPolicyResult netAgentUUID:v22];

                  id v24 = sub_10013DC5C((uint64_t)NRDLocalDevice, *((void **)v18 + 4));
                  long long v25 = sub_1001414DC(v24, @"62742");
                  uint64_t v26 = +[NEPolicyCondition flowRemoteAddress:v25 prefix:128];

                  long long v58 = v24;
                  id v27 = sub_1001418A8(v24, @"62742");
                  uint64_t v60 = +[NEPolicyCondition flowRemoteAddress:v27 prefix:128];

                  id v28 = objc_alloc((Class)NEPolicy);
                  uint64_t v57 = (void *)v26;
                  *(void *)&long long v63 = v26;
                  id v29 = +[NEPolicyCondition allInterfaces];
                  *((void *)&v63 + 1) = v29;
                  id v30 = +[NSArray arrayWithObjects:&v63 count:2];
                  uint64_t v31 = (void *)v23;
                  id v59 = [v28 initWithOrder:10 result:v23 conditions:v30];

                  self;
                  if (qword_1001F4D28 != -1) {
                    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                  }
                  id v32 = (id)qword_1001F4D20;
                  id v33 = sub_100134CFC((uint64_t)v32, *((void **)v18 + 7), v59);

                  id v34 = objc_alloc((Class)NEPolicy);
                  v62[0] = v60;
                  int v35 = +[NEPolicyCondition allInterfaces];
                  v62[1] = v35;
                  id v36 = +[NSArray arrayWithObjects:v62 count:2];
                  id v37 = [v34 initWithOrder:10 result:v23 conditions:v36];

                  self;
                  if (qword_1001F4D28 != -1) {
                    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                  }
                  id v38 = (id)qword_1001F4D20;
                  id v39 = sub_100134CFC((uint64_t)v38, *((void **)v18 + 7), v37);

                  self;
                  if (qword_1001F4D28 != -1) {
                    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                  }
                  id v40 = (id)qword_1001F4D20;
                  uint64_t v41 = (id *)v40;
                  if (v40)
                  {
                    dispatch_assert_queue_V2(*((dispatch_queue_t *)v40 + 1));
                    if (([v41[2] apply] & 1) == 0) {
                      sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v42, v43, v44, v56);
                    }
                  }

                  *((unsigned char *)v18 + 14) = 1;
                  id v45 = (void *)*((void *)v18 + 4);
                  id v46 = *((id *)v18 + 8);
                  id v47 = v45;
                  id v48 = [v18 agentUUID];
                  id v49 = [v48 UUIDString];
                  sub_10012F648(v47, 19002, v46, v49);
                }
                else
                {
                  id v50 = (void *)_NRCopyLogObjectForNRUUID();
                  int IsLevelEnabled = _NRLogIsLevelEnabled();

                  if (IsLevelEnabled)
                  {
                    id v52 = (void *)_NRCopyLogObjectForNRUUID();
                    _NRLogWithArgs();
                  }
                }
              }
            }
          }
          sub_1000EBCE0((uint64_t)a1);
        }
        else
        {
LABEL_46:
          id v53 = (void *)_NRCopyLogObjectForNRUUID();
          int v54 = _NRLogIsLevelEnabled();

          if (v54)
          {
            uint64_t v55 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
        }
        goto LABEL_48;
      }
LABEL_7:
      sub_10006E7E0(v5);
      unsigned int v6 = a1[48];
      a1[48] = 0;

      goto LABEL_8;
    }
  }
LABEL_48:
}

void sub_1000EE94C(char *a1, void *a2)
{
  id v4 = a2;
  if (!a1) {
    goto LABEL_92;
  }
  dispatch_assert_queue_V2(*((dispatch_queue_t *)a1 + 13));
  if ([v4 state] != 8)
  {
    unsigned int v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      BOOL v8 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    goto LABEL_92;
  }
  if (([v4 hasCompanionDatapath] & 1) == 0)
  {
    id v9 = v4;
    if ([v9 hasCompanionDatapath])
    {
LABEL_44:

      goto LABEL_92;
    }
    BOOL v10 = &objc_sync_exit_ptr;
    id v11 = objc_alloc_init((Class)NSMutableArray);
    id v12 = sub_10013DC5C((uint64_t)NRDLocalDevice, *((void **)a1 + 12));
    uint64_t v13 = [v9 localInterfaceName];
    if (v13)
    {
      id v14 = (void *)v13;
      uint64_t v15 = [v9 proxyAgentUUID];
      if (v15)
      {
        char v16 = (void *)v15;
        id v432 = v11;
        if (v12) {
          id v17 = (void *)v12[16];
        }
        else {
          id v17 = 0;
        }
        id v18 = v17;
        unsigned __int8 v19 = [v18 hasPoliciesForProxyCriteria];

        id v11 = v432;
        if ((v19 & 1) == 0)
        {
          v430 = v12;
          uint64_t v20 = +[NEPolicyCondition allInterfaces];
          v453 = v20;
          int v21 = +[NSArray arrayWithObjects:&v453 count:1];

          int v22 = [v9 localInterfaceName];
          uint64_t v23 = +[NEPolicyRouteRule routeRuleWithAction:5 forInterfaceName:v22];

          id v24 = [v9 proxyAgentUUID];
          [v23 setNetworkAgentUUID:v24];

          id v429 = v23;
          v452 = v23;
          long long v25 = +[NSArray arrayWithObjects:&v452 count:1];
          uint64_t v26 = +[NEPolicyResult routeRules:v25];

          id v428 = v26;
          v431 = v21;
          id v27 = [objc_alloc((Class)NEPolicy) initWithOrder:10 result:v26 conditions:v21];
          self;
          if (qword_1001F4D28 != -1) {
            dispatch_once(&qword_1001F4D28, &stru_1001C8658);
          }
          id v28 = (id)qword_1001F4D20;
          id v29 = sub_100134CFC((uint64_t)v28, *((void **)a1 + 34), v27);

          id v427 = v27;
          if ([v29 unsignedIntegerValue])
          {
            [v432 addObject:v29];

            id v30 = objc_alloc((Class)NEPolicy);
            uint64_t v31 = [v9 proxyAgentUUID];
            id v32 = +[NEPolicyResult netAgentUUID:v31];
            id v33 = [v9 localInterfaceName];
            id v34 = +[NEPolicyCondition scopedInterface:v33];
            v451 = v34;
            int v35 = +[NSArray arrayWithObjects:&v451 count:1];
            id v36 = [v30 initWithOrder:10 result:v32 conditions:v35];

            self;
            if (qword_1001F4D28 != -1) {
              dispatch_once(&qword_1001F4D28, &stru_1001C8658);
            }
            id v37 = (id)qword_1001F4D20;
            id v29 = sub_100134CFC((uint64_t)v37, *((void **)a1 + 34), v36);

            if ([v29 unsignedIntegerValue])
            {
              [v432 addObject:v29];

              id v11 = v432;
              id v12 = v430;
              BOOL v10 = &objc_sync_exit_ptr;
              goto LABEL_31;
            }
            v267 = (void *)_NRCopyLogObjectForNRUUID();
            int v268 = _NRLogIsLevelEnabled();

            if (v268)
            {
              id v269 = *((id *)a1 + 12);
              v270 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            v271 = (void *)_NRCopyLogObjectForNRUUID();
            char v272 = _NRLogIsLevelEnabled();

            id v259 = v36;
            if ((v272 & 1) == 0)
            {
LABEL_179:
              [v9 cancelWithReason:@"Failed to add generalPolicy %@ to session %@", v259, *((void *)a1 + 34)];

              uint64_t v44 = v431;
              id v11 = v432;
              id v38 = v430;
              goto LABEL_42;
            }
          }
          else
          {
            id v259 = v427;
            v260 = (void *)_NRCopyLogObjectForNRUUID();
            int v261 = _NRLogIsLevelEnabled();

            if (v261)
            {
              id v262 = *((id *)a1 + 12);
              v263 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            v264 = (void *)_NRCopyLogObjectForNRUUID();
            char v265 = _NRLogIsLevelEnabled();

            if ((v265 & 1) == 0) {
              goto LABEL_179;
            }
          }
          v266 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();

          goto LABEL_179;
        }
      }
      else
      {
      }
    }
LABEL_31:
    if ([v11 count])
    {
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v38 = v12;
      id v39 = (id)qword_1001F4D20;
      id v40 = (id *)v39;
      if (v39)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v39 + 1));
        if (([v40[2] apply] & 1) == 0) {
          sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v41, v42, v43, v424);
        }
      }

      uint64_t v44 = [v9 policyIDs];
      id v45 = [objc_alloc((Class)v10[213]) initWithArray:v44];
      [v45 addObjectsFromArray:v11];
      [v9 setPolicyIDs:v45];
      id v46 = (void *)_NRCopyLogObjectForNRUUID();
      int v47 = _NRLogIsLevelEnabled();

      if (v47)
      {
        id v48 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v38 = v12;
      id v49 = (void *)_NRCopyLogObjectForNRUUID();
      int v50 = _NRLogIsLevelEnabled();

      if (!v50)
      {
LABEL_43:

        goto LABEL_44;
      }
      uint64_t v44 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
LABEL_42:

    goto LABEL_43;
  }
  if ([v4 type] == 1)
  {
    int v5 = 800;
  }
  else if ([v4 type] == 2)
  {
    if ([v4 subtype] == 102)
    {
      int v5 = 1100;
    }
    else if ([v4 subtype] == 103)
    {
      int v5 = 1000;
    }
    else if ([v4 subtype] == 104)
    {
      int v5 = 950;
    }
    else
    {
      int v5 = 900;
    }
  }
  else if ([v4 type] == 4)
  {
    int v5 = 1200;
  }
  else
  {
    if ([v4 type] != 5)
    {
      long long v92 = (void *)_NRCopyLogObjectForNRUUID();
      int v93 = _NRLogIsLevelEnabled();

      if (v93)
      {
        long long v94 = (void *)_NRCopyLogObjectForNRUUID();
        [v4 type];
        StringFromNRLinkType = (void *)createStringFromNRLinkType();
        _NRLogWithArgs();
      }
      goto LABEL_92;
    }
    int v5 = 700;
  }
  LODWORD(v430) = v5;
  if ([v4 virtualInterface])
  {
    [v4 virtualInterface];
    id v51 = (id)NEVirtualInterfaceCopyName();
    if (!v51)
    {
      uint64_t v225 = (void *)_NRCopyLogObjectForNRUUID();
      int v226 = _NRLogIsLevelEnabled();

      if (v226)
      {
        uint64_t v227 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      char v228 = (void *)_NRCopyLogObjectForNRUUID();
      int v229 = _NRLogIsLevelEnabled();

      if (v229)
      {
        v230 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      [v4 cancelWithReason:@"Failed to get virtual interface name to set IP tunnel policies"];
      goto LABEL_91;
    }
    id v52 = &objc_sync_exit_ptr;
    id v53 = objc_alloc_init((Class)NSMutableArray);
    if (v53)
    {
      id v2 = v53;
      id v54 = *((id *)a1 + 12);
      uint64_t v55 = sub_10013DC5C((uint64_t)NRDLocalDevice, v54);

      v431 = v55;
      if (v55)
      {
        sub_1000F4E58((uint64_t)a1);
        if (!a1[46] && a1[48] && ([v4 hasRouteRulePolicy] & 1) == 0)
        {
          id v69 = +[NEPolicyCondition allInterfaces];
          v450 = v69;
          id v70 = +[NSArray arrayWithObjects:&v450 count:1];

          id v429 = v51;
          id v58 = +[NEPolicyRouteRule routeRuleWithAction:2 forInterfaceName:v51];
          id v449 = v58;
          int v71 = +[NSArray arrayWithObjects:&v449 count:1];
          uint64_t v72 = +[NEPolicyResult routeRules:v71];

          id v428 = v70;
          id v73 = [objc_alloc((Class)NEPolicy) initWithOrder:210 result:v72 conditions:v70];
          self;
          int v74 = (void *)v72;
          if (qword_1001F4D28 != -1) {
            dispatch_once(&qword_1001F4D28, &stru_1001C8658);
          }
          id v75 = (id)qword_1001F4D20;
          id v76 = *((id *)a1 + 34);
          int v77 = sub_100134CFC((uint64_t)v75, v76, v73);

          if (![v77 unsignedIntegerValue])
          {
            v252 = (void *)_NRCopyLogObjectForNRUUID();
            int v253 = _NRLogIsLevelEnabled();

            if (v253)
            {
              id v254 = *((id *)a1 + 12);
              v255 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            v256 = (void *)_NRCopyLogObjectForNRUUID();
            int v257 = _NRLogIsLevelEnabled();

            if (v257)
            {
              v258 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            [v4 cancelWithReason:@"Failed to add generalPolicy %@ to session %@", v73, *((void *)a1 + 34)];

            id v83 = v428;
            id v51 = v429;
            goto LABEL_88;
          }
          [v2 addObject:v77];

          [v4 setHasRouteRulePolicy:1];
          id v51 = v429;
          id v52 = &objc_sync_exit_ptr;
        }
        id v432 = v2;
        if ([v4 type] == 1
          || [v4 type] == 2
          || [v4 type] == 5)
        {
          if ([v4 ikeClassDEstablished]
            && ([v4 hasClassDPolicies] & 1) == 0)
          {
            uint64_t v56 = v52;
            uint64_t v57 = sub_10015BD9C();
            dispatch_assert_queue_V2(v57);

            id v428 = sub_1001414DC(v431, @"0");
            +[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:");
            id v58 = (id)objc_claimAutoreleasedReturnValue();
            v448[0] = v58;
            id v59 = +[NEPolicyCondition allInterfaces];
            v448[1] = v59;
            uint64_t v60 = +[NSArray arrayWithObjects:v448 count:2];

            id v429 = v51;
            int v61 = +[NEPolicyResult tunnelIPToInterfaceName:v51 secondaryResultType:0];
            id v62 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v61 conditions:v60];
            self;
            if (qword_1001F4D28 != -1) {
              dispatch_once(&qword_1001F4D28, &stru_1001C8658);
            }
            id v63 = (id)qword_1001F4D20;
            id v64 = sub_100134CFC((uint64_t)v63, *((void **)a1 + 34), v62);

            if (![v64 unsignedIntegerValue])
            {
              v238 = (void *)_NRCopyLogObjectForNRUUID();
              int v239 = _NRLogIsLevelEnabled();

              if (v239)
              {
                id v240 = *((id *)a1 + 12);
                v241 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
              v242 = (void *)_NRCopyLogObjectForNRUUID();
              int v243 = _NRLogIsLevelEnabled();

              if (v243)
              {
                v244 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
              [v4 cancelWithReason:@"Failed to add generalPolicyClassD %@ to session %@", v62, *((void *)a1 + 34)];
              goto LABEL_169;
            }
            [v432 addObject:v64];

            [v4 setHasClassDPolicies:1];
            id v51 = v429;
            id v52 = v56;
          }
          if ([v4 ikeClassCEstablished]
            && ([v4 hasClassCPolicies] & 1) == 0)
          {
            id v65 = v52;
            uint64_t v66 = sub_10015BD9C();
            dispatch_assert_queue_V2(v66);

            id v428 = sub_1001418A8(v431, @"0");
            +[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:");
            id v58 = (id)objc_claimAutoreleasedReturnValue();
            v447[0] = v58;
            id v67 = +[NEPolicyCondition allInterfaces];
            v447[1] = v67;
            uint64_t v60 = +[NSArray arrayWithObjects:v447 count:2];

            id v429 = v51;
            int v61 = +[NEPolicyResult tunnelIPToInterfaceName:v51 secondaryResultType:0];
            id v62 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v61 conditions:v60];
            self;
            if (qword_1001F4D28 != -1) {
              dispatch_once(&qword_1001F4D28, &stru_1001C8658);
            }
            id v68 = (id)qword_1001F4D20;
            id v64 = sub_100134CFC((uint64_t)v68, *((void **)a1 + 34), v62);

            if ([v64 unsignedIntegerValue])
            {
              [v432 addObject:v64];

              [v4 setHasClassCPolicies:1];
              id v51 = v429;
              id v52 = v65;
              goto LABEL_79;
            }
            v245 = (void *)_NRCopyLogObjectForNRUUID();
            int v246 = _NRLogIsLevelEnabled();

            if (v246)
            {
              id v247 = *((id *)a1 + 12);
              v248 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            v249 = (void *)_NRCopyLogObjectForNRUUID();
            int v250 = _NRLogIsLevelEnabled();

            if (v250)
            {
              v251 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            [v4 cancelWithReason:@"Failed to add generalPolicyClassC %@ to session %@", v62, *((void *)a1 + 34)];
LABEL_169:

            id v83 = v428;
            id v51 = v429;
            id v2 = v432;
LABEL_88:

LABEL_89:
            goto LABEL_90;
          }
LABEL_79:
          [v4 setLinkMTU:1400];
          id v2 = v432;
          if (![v432 count])
          {
            id v89 = *((id *)a1 + 12);
            id v90 = (void *)_NRCopyLogObjectForNRUUID();
            int v91 = _NRLogIsLevelEnabled();

            if (!v91)
            {
LABEL_90:

LABEL_91:
              goto LABEL_92;
            }
            id v83 = *((id *)a1 + 12);
            id v58 = (id)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
            goto LABEL_88;
          }
          self;
          if (qword_1001F4D28 == -1) {
            goto LABEL_81;
          }
          goto LABEL_158;
        }
        if ([v4 type] != 4) {
          goto LABEL_79;
        }
        if ([v4 ikeClassDEstablished]
          && ([v4 hasClassDPolicies] & 1) == 0)
        {
          id v428 = sub_100140FAC(v431, @"61315");
          +[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:");
          id v427 = (id)objc_claimAutoreleasedReturnValue();
          v446[0] = v427;
          id v95 = +[NEPolicyCondition allInterfaces];
          v446[1] = v95;
          long long v96 = +[NSArray arrayWithObjects:v446 count:2];

          id v429 = v51;
          uint64_t v97 = +[NEPolicyResult tunnelIPToInterfaceName:v51 secondaryResultType:0];
          id v98 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v97 conditions:v96];
          id v99 = sub_1001348C8();
          id v100 = *((id *)a1 + 34);
          long long v101 = sub_100134CFC((uint64_t)v99, v100, v98);

          id v102 = [v101 unsignedIntegerValue];
          if (v102)
          {
            [v432 addObject:v101];
          }
          else
          {
            id v273 = *((id *)a1 + 12);
            v274 = (void *)_NRCopyLogObjectForNRUUID();
            LODWORD(v426) = _NRLogIsLevelEnabled();

            if (v426)
            {
              id v426 = *((id *)a1 + 12);
              v275 = (void *)_NRCopyLogObjectForNRUUID();
              id v410 = *((id *)a1 + 34);
              _NRLogWithArgs();
            }
            id v276 = *((id *)a1 + 12);
            v277 = (void *)_NRCopyLogObjectForNRUUID();
            LODWORD(v426) = _NRLogIsLevelEnabled();

            if (v426)
            {
              id v278 = *((id *)a1 + 12);
              v279 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            id v280 = *((id *)a1 + 34);
            [v4 cancelWithReason:@"Failed to add localConditionPolicy %@ to session %@", v98, v280];
          }
          id v51 = v429;
          id v2 = v432;
          if (!v102) {
            goto LABEL_90;
          }
          id v428 = sub_1001414DC(v431, @"61315");
          +[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:");
          id v427 = (id)objc_claimAutoreleasedReturnValue();
          v445[0] = v427;
          uint64_t v103 = +[NEPolicyCondition allInterfaces];
          v445[1] = v103;
          int v104 = +[NSArray arrayWithObjects:v445 count:2];

          unsigned int v105 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
          id v106 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v105 conditions:v104];
          id v107 = sub_1001348C8();
          id v108 = *((id *)a1 + 34);
          unsigned int v109 = sub_100134CFC((uint64_t)v107, v108, v106);

          id v110 = [v109 unsignedIntegerValue];
          if (v110)
          {
            [v432 addObject:v109];
          }
          else
          {
            id v289 = *((id *)a1 + 12);
            v290 = (void *)_NRCopyLogObjectForNRUUID();
            LODWORD(v426) = _NRLogIsLevelEnabled();

            if (v426)
            {
              id v426 = *((id *)a1 + 12);
              v291 = (void *)_NRCopyLogObjectForNRUUID();
              id v412 = *((id *)a1 + 34);
              _NRLogWithArgs();
            }
            id v292 = *((id *)a1 + 12);
            v293 = (void *)_NRCopyLogObjectForNRUUID();
            LODWORD(v426) = _NRLogIsLevelEnabled();

            if (v426)
            {
              id v294 = *((id *)a1 + 12);
              v295 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            id v296 = *((id *)a1 + 34);
            [v4 cancelWithReason:@"Failed to add remoteConditionPolicy %@ to session %@", v106, v296];
          }
          id v51 = v429;
          id v2 = v432;
          if (!v110) {
            goto LABEL_90;
          }
          id v428 = sub_1001426E8(v431);
          long long v111 = +[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:");
          id v426 = +[NEPolicyCondition ipProtocol:58];
          id v427 = v111;
          v444[0] = v111;
          v444[1] = v426;
          id v112 = +[NEPolicyCondition allInterfaces];
          v444[2] = v112;
          id v113 = +[NSArray arrayWithObjects:v444 count:3];

          long long v114 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
          id v115 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v114 conditions:v113];
          id v116 = sub_1001348C8();
          id v117 = *((id *)a1 + 34);
          int v118 = sub_100134CFC((uint64_t)v116, v117, v115);

          id v119 = [v118 unsignedIntegerValue];
          if (v119)
          {
            [v432 addObject:v118];
          }
          else
          {
            id v305 = *((id *)a1 + 12);
            v306 = (void *)_NRCopyLogObjectForNRUUID();
            LODWORD(v425) = _NRLogIsLevelEnabled();

            if (v425)
            {
              id v425 = *((id *)a1 + 12);
              v307 = (void *)_NRCopyLogObjectForNRUUID();
              id v414 = *((id *)a1 + 34);
              _NRLogWithArgs();
            }
            id v308 = *((id *)a1 + 12);
            v309 = (void *)_NRCopyLogObjectForNRUUID();
            LODWORD(v425) = _NRLogIsLevelEnabled();

            if (v425)
            {
              id v310 = *((id *)a1 + 12);
              v311 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            id v312 = *((id *)a1 + 34);
            [v4 cancelWithReason:@"Failed to add icmpConditionPolicy %@ to session %@", v115, v312];
          }
          id v51 = v429;
          id v2 = v432;
          if (!v119) {
            goto LABEL_90;
          }
          if (_NRIsAppleInternal())
          {
            id v428 = [objc_alloc((Class)NSString) initWithUTF8String:"18999"];
            id v427 = sub_100140FAC(v431, v428);
            +[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:");
            id v426 = (id)objc_claimAutoreleasedReturnValue();
            v443[0] = v426;
            int v120 = +[NEPolicyCondition allInterfaces];
            v443[1] = v120;
            __int16 v121 = +[NSArray arrayWithObjects:v443 count:2];

            id v122 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
            id v425 = v121;
            id v123 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v122 conditions:v121];
            id v124 = sub_1001348C8();
            id v125 = *((id *)a1 + 34);
            id v126 = sub_100134CFC((uint64_t)v124, v125, v123);

            id v127 = [v126 unsignedIntegerValue];
            if (v127)
            {
              [v432 addObject:v126];
            }
            else
            {
              id v321 = *((id *)a1 + 12);
              v322 = (void *)_NRCopyLogObjectForNRUUID();
              int v323 = _NRLogIsLevelEnabled();

              if (v323)
              {
                id v324 = *((id *)a1 + 12);
                v325 = (void *)_NRCopyLogObjectForNRUUID();
                id v416 = *((id *)a1 + 34);
                _NRLogWithArgs();
              }
              id v326 = *((id *)a1 + 12);
              v327 = (void *)_NRCopyLogObjectForNRUUID();
              int v328 = _NRLogIsLevelEnabled();

              if (v328)
              {
                id v329 = *((id *)a1 + 12);
                v330 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
              id v331 = *((id *)a1 + 34);
              [v4 cancelWithReason:@"Failed to add localConditionPolicyForTest %@ to session %@", v123, v331];

              id v2 = v432;
            }

            if (!v127) {
              goto LABEL_141;
            }
            id v427 = sub_1001414DC(v431, v428);
            +[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:");
            id v426 = (id)objc_claimAutoreleasedReturnValue();
            v442[0] = v426;
            uint64_t v128 = +[NEPolicyCondition allInterfaces];
            v442[1] = v128;
            uint64_t v129 = +[NSArray arrayWithObjects:v442 count:2];

            uint64_t v130 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
            id v425 = v129;
            id v131 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v130 conditions:v129];
            id v132 = sub_1001348C8();
            id v133 = *((id *)a1 + 34);
            uint64_t v134 = sub_100134CFC((uint64_t)v132, v133, v131);

            id v135 = [v134 unsignedIntegerValue];
            if (v135)
            {
              [v2 addObject:v134];
            }
            else
            {
              id v343 = *((id *)a1 + 12);
              v344 = (void *)_NRCopyLogObjectForNRUUID();
              int v345 = _NRLogIsLevelEnabled();

              if (v345)
              {
                id v346 = *((id *)a1 + 12);
                v347 = (void *)_NRCopyLogObjectForNRUUID();
                id v418 = *((id *)a1 + 34);
                _NRLogWithArgs();
              }
              id v348 = *((id *)a1 + 12);
              v349 = (void *)_NRCopyLogObjectForNRUUID();
              int v350 = _NRLogIsLevelEnabled();

              if (v350)
              {
                id v351 = *((id *)a1 + 12);
                v352 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
              id v353 = *((id *)a1 + 34);
              [v4 cancelWithReason:@"Failed to add remoteConditionPolicyForTest %@ to session %@", v131, v353];

              id v2 = v432;
            }

            if (!v135) {
              goto LABEL_141;
            }
            id v136 = [objc_alloc((Class)NSString) initWithUTF8String:"19999"];
            long long v137 = sub_100140FAC(v431, v136);

            id v427 = v137;
            id v426 = +[NEPolicyCondition localAddress:v137 prefix:128];
            v441[0] = v426;
            id v138 = +[NEPolicyCondition allInterfaces];
            v441[1] = v138;
            id v139 = +[NSArray arrayWithObjects:v441 count:2];

            unsigned int v140 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
            id v425 = v139;
            id v141 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v140 conditions:v139];
            id v142 = sub_1001348C8();
            id v143 = *((id *)a1 + 34);
            uint64_t v144 = sub_100134CFC((uint64_t)v142, v143, v141);

            id v145 = [v144 unsignedIntegerValue];
            if (v145)
            {
              [v2 addObject:v144];
            }
            else
            {
              id v365 = *((id *)a1 + 12);
              v366 = (void *)_NRCopyLogObjectForNRUUID();
              int v367 = _NRLogIsLevelEnabled();

              if (v367)
              {
                id v368 = *((id *)a1 + 12);
                v369 = (void *)_NRCopyLogObjectForNRUUID();
                id v420 = *((id *)a1 + 34);
                _NRLogWithArgs();
              }
              id v370 = *((id *)a1 + 12);
              v371 = (void *)_NRCopyLogObjectForNRUUID();
              int v372 = _NRLogIsLevelEnabled();

              if (v372)
              {
                id v373 = *((id *)a1 + 12);
                v374 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
              id v375 = *((id *)a1 + 34);
              [v4 cancelWithReason:@"Failed to add localConditionPolicyForTest %@ to session %@", v141, v375];

              id v2 = v432;
            }

            if (!v145) {
              goto LABEL_141;
            }
            id v146 = [objc_alloc((Class)NSString) initWithUTF8String:"19999"];
            uint64_t v147 = sub_1001414DC(v431, v146);

            id v427 = v147;
            id v426 = +[NEPolicyCondition remoteAddress:v147 prefix:128];
            v440[0] = v426;
            id v148 = +[NEPolicyCondition allInterfaces];
            v440[1] = v148;
            int v149 = +[NSArray arrayWithObjects:v440 count:2];

            uint64_t v150 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
            id v425 = v149;
            id v151 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v150 conditions:v149];
            id v152 = sub_1001348C8();
            id v153 = *((id *)a1 + 34);
            uint64_t v154 = sub_100134CFC((uint64_t)v152, v153, v151);

            id v155 = [v154 unsignedIntegerValue];
            if (v155)
            {
              [v2 addObject:v154];
            }
            else
            {
              id v387 = *((id *)a1 + 12);
              v388 = (void *)_NRCopyLogObjectForNRUUID();
              int v389 = _NRLogIsLevelEnabled();

              if (v389)
              {
                id v390 = *((id *)a1 + 12);
                v391 = (void *)_NRCopyLogObjectForNRUUID();
                id v422 = *((id *)a1 + 34);
                _NRLogWithArgs();
              }
              id v392 = *((id *)a1 + 12);
              v393 = (void *)_NRCopyLogObjectForNRUUID();
              int v394 = _NRLogIsLevelEnabled();

              if (v394)
              {
                id v395 = *((id *)a1 + 12);
                v396 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
              id v397 = *((id *)a1 + 34);
              [v4 cancelWithReason:@"Failed to add remoteConditionPolicyForTest %@ to session %@", v151, v397];

              id v2 = v432;
            }

            id v51 = v429;
            if (!v155) {
              goto LABEL_90;
            }
          }
          sub_1000E714C((uint64_t)a1, 0);
          [v4 setHasClassDPolicies:1];
          id v52 = &objc_sync_exit_ptr;
        }
        if (![v4 ikeClassCEstablished]
          || ([v4 hasClassCPolicies] & 1) != 0)
        {
          goto LABEL_79;
        }
        id v428 = (id)sub_1001416EC(v431, @"61315");
        +[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:");
        id v427 = (id)objc_claimAutoreleasedReturnValue();
        v439[0] = v427;
        unsigned int v156 = +[NEPolicyCondition allInterfaces];
        v439[1] = v156;
        id v157 = +[NSArray arrayWithObjects:v439 count:2];

        id v429 = v51;
        id v158 = +[NEPolicyResult tunnelIPToInterfaceName:v51 secondaryResultType:0];
        id v159 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v158 conditions:v157];
        id v160 = sub_1001348C8();
        id v161 = *((id *)a1 + 34);
        uint64_t v162 = sub_100134CFC((uint64_t)v160, v161, v159);

        id v163 = [v162 unsignedIntegerValue];
        if (v163)
        {
          [v432 addObject:v162];
        }
        else
        {
          id v281 = *((id *)a1 + 12);
          v282 = (void *)_NRCopyLogObjectForNRUUID();
          LODWORD(v426) = _NRLogIsLevelEnabled();

          if (v426)
          {
            id v426 = *((id *)a1 + 12);
            v283 = (void *)_NRCopyLogObjectForNRUUID();
            id v411 = *((id *)a1 + 34);
            _NRLogWithArgs();
          }
          id v284 = *((id *)a1 + 12);
          v285 = (void *)_NRCopyLogObjectForNRUUID();
          LODWORD(v426) = _NRLogIsLevelEnabled();

          if (v426)
          {
            id v286 = *((id *)a1 + 12);
            v287 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
          id v288 = *((id *)a1 + 34);
          [v4 cancelWithReason:@"Failed to add localConditionPolicy %@ to session %@", v159, v288];
        }
        id v51 = v429;
        id v2 = v432;
        if (!v163) {
          goto LABEL_90;
        }
        id v428 = sub_1001418A8(v431, @"61315");
        +[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:");
        id v427 = (id)objc_claimAutoreleasedReturnValue();
        v438[0] = v427;
        uint64_t v164 = +[NEPolicyCondition allInterfaces];
        v438[1] = v164;
        uint64_t v165 = +[NSArray arrayWithObjects:v438 count:2];

        uint64_t v166 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
        id v167 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v166 conditions:v165];
        id v168 = sub_1001348C8();
        id v169 = *((id *)a1 + 34);
        uint64_t v170 = sub_100134CFC((uint64_t)v168, v169, v167);

        id v171 = [v170 unsignedIntegerValue];
        if (v171)
        {
          [v432 addObject:v170];
        }
        else
        {
          id v297 = *((id *)a1 + 12);
          v298 = (void *)_NRCopyLogObjectForNRUUID();
          LODWORD(v426) = _NRLogIsLevelEnabled();

          if (v426)
          {
            id v426 = *((id *)a1 + 12);
            v299 = (void *)_NRCopyLogObjectForNRUUID();
            id v413 = *((id *)a1 + 34);
            _NRLogWithArgs();
          }
          id v300 = *((id *)a1 + 12);
          v301 = (void *)_NRCopyLogObjectForNRUUID();
          LODWORD(v426) = _NRLogIsLevelEnabled();

          if (v426)
          {
            id v302 = *((id *)a1 + 12);
            v303 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
          id v304 = *((id *)a1 + 34);
          [v4 cancelWithReason:@"Failed to add remoteConditionPolicy %@ to session %@", v167, v304];
        }
        id v51 = v429;
        id v2 = v432;
        if (!v171) {
          goto LABEL_90;
        }
        id v428 = sub_10014273C(v431);
        int v172 = +[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:");
        id v426 = +[NEPolicyCondition ipProtocol:58];
        id v427 = v172;
        v437[0] = v172;
        v437[1] = v426;
        uint64_t v173 = +[NEPolicyCondition allInterfaces];
        v437[2] = v173;
        BOOL v174 = +[NSArray arrayWithObjects:v437 count:3];

        v175 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
        id v176 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v175 conditions:v174];
        id v177 = sub_1001348C8();
        id v178 = *((id *)a1 + 34);
        long long v179 = sub_100134CFC((uint64_t)v177, v178, v176);

        id v180 = [v179 unsignedIntegerValue];
        if (v180)
        {
          [v432 addObject:v179];
        }
        else
        {
          id v313 = *((id *)a1 + 12);
          v314 = (void *)_NRCopyLogObjectForNRUUID();
          LODWORD(v425) = _NRLogIsLevelEnabled();

          if (v425)
          {
            id v425 = *((id *)a1 + 12);
            v315 = (void *)_NRCopyLogObjectForNRUUID();
            id v415 = *((id *)a1 + 34);
            _NRLogWithArgs();
          }
          id v316 = *((id *)a1 + 12);
          v317 = (void *)_NRCopyLogObjectForNRUUID();
          LODWORD(v425) = _NRLogIsLevelEnabled();

          if (v425)
          {
            id v318 = *((id *)a1 + 12);
            v319 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
          id v320 = *((id *)a1 + 34);
          [v4 cancelWithReason:@"Failed to add icmpConditionPolicy %@ to session %@", v176, v320];
        }
        id v51 = v429;
        id v2 = v432;
        if (!v180) {
          goto LABEL_90;
        }
        if (!_NRIsAppleInternal())
        {
LABEL_140:
          [v4 setHasClassCPolicies:1];
          id v52 = &objc_sync_exit_ptr;
          goto LABEL_79;
        }
        id v428 = [objc_alloc((Class)NSString) initWithUTF8String:"18999"];
        id v427 = (id)sub_1001416EC(v431, v428);
        +[NEPolicyCondition localAddress:prefix:](NEPolicyCondition, "localAddress:prefix:");
        id v426 = (id)objc_claimAutoreleasedReturnValue();
        v436[0] = v426;
        uint64_t v181 = +[NEPolicyCondition allInterfaces];
        v436[1] = v181;
        int v182 = +[NSArray arrayWithObjects:v436 count:2];

        long long v183 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
        id v425 = v182;
        id v184 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v183 conditions:v182];
        id v185 = sub_1001348C8();
        id v186 = *((id *)a1 + 34);
        uint64_t v187 = sub_100134CFC((uint64_t)v185, v186, v184);

        id v188 = [v187 unsignedIntegerValue];
        if (v188)
        {
          [v432 addObject:v187];
        }
        else
        {
          id v332 = *((id *)a1 + 12);
          v333 = (void *)_NRCopyLogObjectForNRUUID();
          int v334 = _NRLogIsLevelEnabled();

          if (v334)
          {
            id v335 = *((id *)a1 + 12);
            v336 = (void *)_NRCopyLogObjectForNRUUID();
            id v417 = *((id *)a1 + 34);
            _NRLogWithArgs();
          }
          id v337 = *((id *)a1 + 12);
          v338 = (void *)_NRCopyLogObjectForNRUUID();
          int v339 = _NRLogIsLevelEnabled();

          if (v339)
          {
            id v340 = *((id *)a1 + 12);
            v341 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
          id v342 = *((id *)a1 + 34);
          [v4 cancelWithReason:@"Failed to add localConditionPolicyForTest %@ to session %@", v184, v342];

          id v2 = v432;
        }

        if (v188)
        {
          id v427 = sub_1001418A8(v431, v428);
          +[NEPolicyCondition remoteAddress:prefix:](NEPolicyCondition, "remoteAddress:prefix:");
          id v426 = (id)objc_claimAutoreleasedReturnValue();
          v435[0] = v426;
          uint64_t v189 = +[NEPolicyCondition allInterfaces];
          v435[1] = v189;
          uint64_t v190 = +[NSArray arrayWithObjects:v435 count:2];

          long long v191 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
          id v425 = v190;
          id v192 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v191 conditions:v190];
          id v193 = sub_1001348C8();
          id v194 = *((id *)a1 + 34);
          long long v195 = sub_100134CFC((uint64_t)v193, v194, v192);

          id v196 = [v195 unsignedIntegerValue];
          if (v196)
          {
            [v2 addObject:v195];
          }
          else
          {
            id v354 = *((id *)a1 + 12);
            v355 = (void *)_NRCopyLogObjectForNRUUID();
            int v356 = _NRLogIsLevelEnabled();

            if (v356)
            {
              id v357 = *((id *)a1 + 12);
              v358 = (void *)_NRCopyLogObjectForNRUUID();
              id v419 = *((id *)a1 + 34);
              _NRLogWithArgs();
            }
            id v359 = *((id *)a1 + 12);
            v360 = (void *)_NRCopyLogObjectForNRUUID();
            int v361 = _NRLogIsLevelEnabled();

            if (v361)
            {
              id v362 = *((id *)a1 + 12);
              v363 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            id v364 = *((id *)a1 + 34);
            [v4 cancelWithReason:@"Failed to add remoteConditionPolicyForTest %@ to session %@", v192, v364];

            id v2 = v432;
          }

          if (v196)
          {
            id v197 = [objc_alloc((Class)NSString) initWithUTF8String:"19999"];
            id v198 = (void *)sub_1001416EC(v431, v197);

            id v427 = v198;
            id v426 = +[NEPolicyCondition localAddress:v198 prefix:128];
            v434[0] = v426;
            int v199 = +[NEPolicyCondition allInterfaces];
            v434[1] = v199;
            long long v200 = +[NSArray arrayWithObjects:v434 count:2];

            long long v201 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
            id v425 = v200;
            id v202 = [objc_alloc((Class)NEPolicy) initWithOrder:v430 result:v201 conditions:v200];
            id v203 = sub_1001348C8();
            id v204 = *((id *)a1 + 34);
            id v205 = sub_100134CFC((uint64_t)v203, v204, v202);

            id v206 = [v205 unsignedIntegerValue];
            if (v206)
            {
              [v2 addObject:v205];
            }
            else
            {
              id v376 = *((id *)a1 + 12);
              v377 = (void *)_NRCopyLogObjectForNRUUID();
              int v378 = _NRLogIsLevelEnabled();

              if (v378)
              {
                id v379 = *((id *)a1 + 12);
                v380 = (void *)_NRCopyLogObjectForNRUUID();
                id v421 = *((id *)a1 + 34);
                _NRLogWithArgs();
              }
              id v381 = *((id *)a1 + 12);
              v382 = (void *)_NRCopyLogObjectForNRUUID();
              int v383 = _NRLogIsLevelEnabled();

              if (v383)
              {
                id v384 = *((id *)a1 + 12);
                v385 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
              id v386 = *((id *)a1 + 34);
              [v4 cancelWithReason:@"Failed to add localConditionPolicyForTest %@ to session %@", v202, v386];

              id v2 = v432;
            }

            if (v206)
            {
              id v207 = [objc_alloc((Class)NSString) initWithUTF8String:"19999"];
              long long v208 = sub_1001418A8(v431, v207);

              id v427 = v208;
              id v426 = +[NEPolicyCondition remoteAddress:v208 prefix:128];
              v433[0] = v426;
              long long v209 = +[NEPolicyCondition allInterfaces];
              v433[1] = v209;
              id v210 = +[NSArray arrayWithObjects:v433 count:2];

              long long v211 = +[NEPolicyResult tunnelIPToInterfaceName:v429 secondaryResultType:0];
              id v212 = objc_alloc((Class)NEPolicy);
              uint64_t v213 = v430;
              v430 = v210;
              id v214 = [v212 initWithOrder:v213 result:v211 conditions:v210];
              id v215 = sub_1001348C8();
              id v216 = *((id *)a1 + 34);
              uint64_t v217 = sub_100134CFC((uint64_t)v215, v216, v214);

              id v218 = [v217 unsignedIntegerValue];
              if (v218)
              {
                [v2 addObject:v217];
              }
              else
              {
                id v398 = *((id *)a1 + 12);
                v399 = (void *)_NRCopyLogObjectForNRUUID();
                int v400 = _NRLogIsLevelEnabled();

                if (v400)
                {
                  id v401 = *((id *)a1 + 12);
                  v402 = (void *)_NRCopyLogObjectForNRUUID();
                  id v423 = *((id *)a1 + 34);
                  _NRLogWithArgs();
                }
                id v403 = *((id *)a1 + 12);
                v404 = (void *)_NRCopyLogObjectForNRUUID();
                int v405 = _NRLogIsLevelEnabled();

                if (v405)
                {
                  id v406 = *((id *)a1 + 12);
                  v407 = (void *)_NRCopyLogObjectForNRUUID();
                  _NRLogWithArgs();
                }
                id v408 = *((id *)a1 + 34);
                [v4 cancelWithReason:@"Failed to add remoteConditionPolicyForTest %@ to session %@", v214, v408];

                id v2 = v432;
              }

              id v51 = v429;
              if (!v218) {
                goto LABEL_90;
              }
              goto LABEL_140;
            }
          }
        }
LABEL_141:
        id v83 = v428;
        id v51 = v429;
        goto LABEL_89;
      }
      id v234 = sub_1000D8B78();
      int v235 = _NRLogIsLevelEnabled();

      if (v235)
      {
        id v236 = sub_1000D8B78();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v231 = sub_1000D8B78();
      int v232 = _NRLogIsLevelEnabled();

      if (v232)
      {
        id v233 = sub_1000D8B78();
        _NRLogWithArgs();
      }
    }
    id v4 = (id)_os_log_pack_size();
    a1 = (char *)&v424 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v237 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v237 = 136446210;
    *(void *)(v237 + 4) = "-[NRDDeviceConductor setIPTunnelPolicyForLink:]";
    sub_1000D8B78();
    _NRLogAbortWithPack();
LABEL_158:
    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
LABEL_81:
    id v78 = (id)qword_1001F4D20;
    uint64_t v79 = (id *)v78;
    if (v78)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v78 + 1));
      if (([v79[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v80, v81, v82, v424);
      }
    }

    id v83 = [v4 policyIDs];
    id v58 = [objc_alloc((Class)v52[213]) initWithArray:v83];
    [v58 addObjectsFromArray:v2];
    [v4 setPolicyIDs:v58];
    id v84 = *((id *)a1 + 12);
    id v85 = (void *)_NRCopyLogObjectForNRUUID();
    int v86 = _NRLogIsLevelEnabled();

    if (v86)
    {
      id v87 = *((id *)a1 + 12);
      long long v88 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    goto LABEL_88;
  }
  long long v219 = (void *)_NRCopyLogObjectForNRUUID();
  int v220 = _NRLogIsLevelEnabled();

  if (v220)
  {
    uint64_t v221 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  v222 = (void *)_NRCopyLogObjectForNRUUID();
  int v223 = _NRLogIsLevelEnabled();

  if (v223)
  {
    char v224 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  [v4 cancelWithReason:@"Failed to get virtual interface to set IP tunnel policies"];
LABEL_92:
}

void sub_1000F201C(uint64_t a1)
{
  if (a1)
  {
    id v2 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
    nw_parameters_t v3 = v2;
    if (*(unsigned char *)(a1 + 48)) {
      goto LABEL_15;
    }
    if (v2) {
      id v4 = (void *)*((void *)v2 + 16);
    }
    else {
      id v4 = 0;
    }
    id v5 = v4;
    unsigned __int8 v6 = [v5 hasPoliciesForProxyCriteria];

    if ((v6 & 1) == 0)
    {
      sub_1000F4730(a1);
      goto LABEL_15;
    }
    if ([*(id *)(a1 + 128) state] != 8)
    {
LABEL_15:

      return;
    }
    id v210 = v3;
    id val = (id)a1;
    if (!*(void *)(a1 + 304))
    {
      BOOL v7 = @"proxyCriteria";
      id v8 = objc_alloc((Class)NSString);
      long long v200 = [*(id *)(a1 + 96) UUIDString];
      long long v201 = @"proxyCriteria";
      id v9 = [v8 initWithFormat:@"NRDDC-%@-%@"];

      BOOL v10 = *(void **)(a1 + 304);
      *(void *)(a1 + 304) = v9;
    }
    if (v3) {
      id v11 = (void *)v3[16];
    }
    else {
      id v11 = 0;
    }
    id v12 = v11;
    uint64_t v13 = [v12 proxyProviderCriteria];
    unsigned int v14 = [v13 hasProxyCriteriaAssigningTokens];

    uint64_t v15 = (id *)val;
    char v16 = (void *)*((void *)val + 82);
    if (v14)
    {
      if (v16) {
        goto LABEL_19;
      }
      id v17 = objc_alloc_init((Class)NSMutableDictionary);
      char v16 = (void *)*((void *)val + 82);
    }
    else
    {
      id v17 = 0;
    }
    *((void *)val + 82) = v17;

LABEL_19:
    if (v3) {
      id v18 = (void *)v3[16];
    }
    else {
      id v18 = 0;
    }
    id v19 = v18;
    if ([v19 proxyCapability] == (id)1)
    {
      if (v3) {
        uint64_t v20 = (void *)v3[16];
      }
      else {
        uint64_t v20 = 0;
      }
      id v21 = v20;
      int v22 = [v21 proxyProviderCriteria];
      unsigned __int8 v23 = [v22 forwardNonMatchingTraffic];

      uint64_t v15 = (id *)val;
      if (v23) {
        goto LABEL_15;
      }
    }
    else
    {
    }
    if (v3) {
      id v24 = (void *)v3[16];
    }
    else {
      id v24 = 0;
    }
    id v25 = v24;
    id v26 = [v25 proxyCapability];

    if (v26 == (id)2)
    {
      id v205 = [v15[16] proxyAgentUUID];
      if (!v205)
      {
        id v33 = sub_1000D8B78();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v35 = sub_1000D8B78();
          _NRLogWithArgs();
        }
        nw_parameters_t v3 = v210;
        goto LABEL_15;
      }
      if (v3) {
        id v27 = (void *)v3[16];
      }
      else {
        id v27 = 0;
      }
      id v28 = (void **)val;
      id v29 = v27;
      unsigned int v30 = [v29 hasCompanionDatapath];

      uint64_t v31 = (void *)*((void *)val + 16);
      if (v30)
      {
        [v31 virtualInterface];
        uint64_t v32 = NEVirtualInterfaceCopyName();
      }
      else
      {
        uint64_t v32 = [v31 localInterfaceName];
        id v28 = (void **)val;
      }
      id v36 = (void *)v32;
      if (!v32)
      {
        id v47 = sub_1000D8B78();
        int v48 = _NRLogIsLevelEnabled();

        if (v48)
        {
          id v49 = sub_1000D8B78();
          _NRLogWithArgs();
        }
        char v222 = 0;
LABEL_168:

        BOOL v199 = (v222 & 1) == 0 || v36 == 0;
        nw_parameters_t v3 = v210;
        if (!v199) {
          dispatch_async(*((dispatch_queue_t *)val + 13), &stru_1001C74E0);
        }
        goto LABEL_15;
      }
      id v204 = (void *)v32;
      id v37 = sub_1001348C8();
      sub_10013502C((uint64_t)v37, v28[38]);

      long long v209 = +[NEPolicyResult netAgentUUID:v205];
      if (v3)
      {
        id v38 = v3;
        id v39 = (void *)v3[16];
      }
      else
      {
        id v39 = 0;
        id v38 = 0;
      }
      BOOL v40 = v38 == 0;
      id v41 = v39;
      uint64_t v42 = [v41 proxyProviderCriteria];
      uint64_t v43 = [v42 proxyUsageRules];

      if (v40) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = (void *)v210[16];
      }
      id v45 = v44;
      id v46 = [v45 proxyProviderCriteria];
      if ([v46 excludeLegacyClients])
      {
      }
      else
      {
        int v50 = v210;
        if (v210) {
          int v50 = (void *)v210[16];
        }
        id v51 = v50;
        id v52 = [v51 proxyProviderCriteria];
        unsigned int v53 = [v52 excludeNonMatchingLegacyClients];

        if (!v53)
        {
          int v74 = 301;
LABEL_59:
          int v217 = v74;
          if (_NRIsAppleInternal())
          {
            id v75 = sub_1000A8708(0, @"TetheringBundleIDs");
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              long long v264 = 0u;
              long long v265 = 0u;
              long long v262 = 0u;
              long long v263 = 0u;
              id v76 = v75;
              id v77 = [v76 countByEnumeratingWithState:&v262 objects:v281 count:16];
              if (v77)
              {
                id v221 = 0;
                uint64_t v78 = *(void *)v263;
                do
                {
                  for (i = 0; i != v77; i = (char *)i + 1)
                  {
                    if (*(void *)v263 != v78) {
                      objc_enumerationMutation(v76);
                    }
                    id v80 = sub_100114080(*(void **)(*((void *)&v262 + 1) + 8 * i));
                    if (!v221) {
                      id v221 = objc_alloc_init((Class)NSMutableArray);
                    }
                    if ([v80 count]) {
                      [v221 addObjectsFromArray:v80];
                    }
                  }
                  id v77 = [v76 countByEnumeratingWithState:&v262 objects:v281 count:16];
                }
                while (v77);
              }
              else
              {
                id v221 = 0;
              }
            }
            else
            {
              id v221 = 0;
            }
          }
          else
          {
            id v221 = 0;
          }
          id v206 = objc_alloc_init((Class)NSMutableSet);
          long long v260 = 0u;
          long long v261 = 0u;
          long long v258 = 0u;
          long long v259 = 0u;
          id obj = v43;
          id v212 = [obj countByEnumeratingWithState:&v258 objects:v280 count:16];
          if (v212)
          {
            char v208 = 0;
            char v222 = 0;
            uint64_t v211 = *(void *)v259;
            do
            {
              id v216 = 0;
              do
              {
                if (*(void *)v259 != v211) {
                  objc_enumerationMutation(obj);
                }
                int v220 = *(void **)(*((void *)&v258 + 1) + 8 * (void)v216);
                if ((_NRIsAppleInternal() & (v221 != 0)) == 1)
                {
                  id v228 = objc_alloc_init((Class)NSMutableArray);
                  [v228 addObjectsFromArray:v221];
                }
                else
                {
                  id v228 = 0;
                }
                uint64_t v81 = [v220 entitlements:v200, v201, v202, v203];
                BOOL v82 = [v81 count] == 0;

                if (v82) {
                  goto LABEL_108;
                }
                id v83 = [v220 entitlements];
                id v223 = +[LSApplicationRecord enumeratorWithOptions:0];
                v256[0] = _NSConcreteStackBlock;
                v256[1] = 3221225472;
                v256[2] = sub_1000F4848;
                v256[3] = &unk_1001C7470;
                id v218 = v83;
                id v257 = v218;
                [v223 setFilter:v256];
                id v84 = [v220 copyExcludedBundleIdentifiers];
                id v85 = [v223 nextObject];
                if (v85)
                {
                  do
                  {
                    long long v254 = 0u;
                    long long v255 = 0u;
                    long long v252 = 0u;
                    long long v253 = 0u;
                    int v86 = [v85 machOUUIDs:v200];
                    id v87 = [v86 countByEnumeratingWithState:&v252 objects:v279 count:16];
                    if (v87)
                    {
                      uint64_t v88 = *(void *)v253;
                      while (2)
                      {
                        for (j = 0; j != v87; j = (char *)j + 1)
                        {
                          if (*(void *)v253 != v88) {
                            objc_enumerationMutation(v86);
                          }
                          uint64_t v90 = *(void *)(*((void *)&v252 + 1) + 8 * (void)j);
                          if (!v228) {
                            id v228 = objc_alloc_init((Class)NSMutableArray);
                          }
                          int v91 = [v85 bundleIdentifier];
                          if (v91)
                          {
                            long long v92 = [v85 bundleIdentifier];
                            unsigned int v93 = [v84 containsObject:v92];

                            if (v93)
                            {
                              long long v94 = (void *)_NRCopyLogObjectForNRUUID();
                              int v95 = _NRLogIsLevelEnabled();

                              if (v95)
                              {
                                long long v96 = (void *)_NRCopyLogObjectForNRUUID();
                                [v85 bundleIdentifier];
                                v203 = uint64_t v202 = 4236;
                                long long v200 = "";
                                long long v201 = "-[NRDDeviceConductor updateProxyCriteriaPoliciesIfNeeded]";
                                _NRLogWithArgs();
                              }
                              goto LABEL_102;
                            }
                          }
                          [v228 addObject:v90];
                        }
                        id v87 = [v86 countByEnumeratingWithState:&v252 objects:v279 count:16];
                        if (v87) {
                          continue;
                        }
                        break;
                      }
                    }
LABEL_102:

                    uint64_t v97 = [v223 nextObject];

                    id v85 = (void *)v97;
                  }
                  while (v97);
                }
                id v98 = [v228 count:v200];
                if (v98)
                {
                  [v206 addObjectsFromArray:v228];
                }
                else
                {
                  id v99 = (void *)_NRCopyLogObjectForNRUUID();
                  int v100 = _NRLogIsLevelEnabled();

                  if (v100)
                  {
                    id v101 = *((id *)val + 12);
                    id v102 = (void *)_NRCopyLogObjectForNRUUID();
                    uint64_t v202 = 4245;
                    id v203 = v218;
                    long long v200 = "";
                    long long v201 = "-[NRDDeviceConductor updateProxyCriteriaPoliciesIfNeeded]";
                    _NRLogWithArgs();
                  }
                }

                char v208 = 1;
                if (v98)
                {
LABEL_108:
                  id v219 = objc_alloc_init((Class)NSMutableArray);
                  uint64_t v103 = +[NEPolicyCondition trafficClassStart:end:](NEPolicyCondition, "trafficClassStart:end:", [v220 trafficClass], [v220 trafficClass]);
                  [v219 addObject:v103];

                  if ([v220 transportProtocol])
                  {
                    int v104 = +[NEPolicyCondition flowIPProtocol:](NEPolicyCondition, "flowIPProtocol:", [v220 transportProtocol]);
                    [v219 addObject:v104];
                  }
                  unsigned int v105 = [v220 domain];
                  BOOL v106 = v105 == 0;

                  if (!v106)
                  {
                    id v107 = [v220 domain];
                    id v108 = +[NEPolicyCondition domain:v107];

                    [v219 addObject:v108];
                  }
                  uint64_t v109 = (v217 + 3);
                  uint64_t v110 = (v217 + 5);
                  unsigned int v215 = v217 + 7;
                  if ([v219 count])
                  {
                    long long v111 = +[NEPolicyCondition allInterfaces];
                    [v219 addObject:v111];

                    id v112 = [v220 entitlements];
                    BOOL v113 = [v112 count] == 0;

                    if (v113) {
                      uint64_t v114 = v110;
                    }
                    else {
                      uint64_t v114 = v109;
                    }
                    id v115 = objc_alloc((Class)NEPolicy);
                    id v116 = +[NEPolicyResult skipWithOrder:v114];
                    id v117 = [v115 initWithOrder:(v217 + 1) result:v116 conditions:v219];

                    self;
                    if (qword_1001F4D28 != -1) {
                      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                    }
                    id v118 = (id)qword_1001F4D20;
                    id v119 = sub_100134CFC((uint64_t)v118, *((void **)val + 38), v117);

                    id v120 = objc_alloc((Class)NEPolicy);
                    __int16 v121 = +[NEPolicyResult skipWithOrder:v215];
                    id v122 = +[NEPolicyCondition allInterfaces];
                    id v278 = v122;
                    id v123 = +[NSArray arrayWithObjects:&v278 count:1];
                    id v124 = [v120 initWithOrder:(v217 + 2) result:v121 conditions:v123];

                    self;
                    if (qword_1001F4D28 != -1) {
                      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                    }
                    id v125 = (id)qword_1001F4D20;
                    id v126 = sub_100134CFC((uint64_t)v125, *((void **)val + 38), v124);
                  }
                  long long v250 = 0u;
                  long long v251 = 0u;
                  long long v248 = 0u;
                  long long v249 = 0u;
                  id v228 = v228;
                  id v127 = [v228 countByEnumeratingWithState:&v248 objects:v277 count:16];
                  if (v127)
                  {
                    uint64_t v128 = *(void *)v249;
                    do
                    {
                      uint64_t v129 = 0;
                      do
                      {
                        if (*(void *)v249 != v128) {
                          objc_enumerationMutation(v228);
                        }
                        uint64_t v130 = +[NEPolicyCondition effectiveApplication:*(void *)(*((void *)&v248 + 1) + 8 * (void)v129)];
                        id v131 = objc_alloc((Class)NEPolicy);
                        id v132 = +[NEPolicyResult skipWithOrder:v110];
                        id v133 = +[NEPolicyCondition allInterfaces];
                        v276[0] = v133;
                        v276[1] = v130;
                        uint64_t v134 = +[NSArray arrayWithObjects:v276 count:2];
                        id v135 = [v131 initWithOrder:v109 result:v132 conditions:v134];

                        self;
                        if (qword_1001F4D28 != -1) {
                          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                        }
                        id v136 = (id)qword_1001F4D20;
                        id v137 = sub_100134CFC((uint64_t)v136, *((void **)val + 38), v135);

                        uint64_t v129 = (char *)v129 + 1;
                      }
                      while (v127 != v129);
                      id v127 = [v228 countByEnumeratingWithState:&v248 objects:v277 count:16];
                    }
                    while (v127);
                  }

                  id v138 = objc_alloc((Class)NEPolicy);
                  id v139 = +[NEPolicyResult skipWithOrder:v215];
                  unsigned int v140 = +[NEPolicyCondition allInterfaces];
                  v275 = v140;
                  id v141 = +[NSArray arrayWithObjects:&v275 count:1];
                  id v214 = [v138 initWithOrder:(v217 + 4) result:v139 conditions:v141];

                  self;
                  if (qword_1001F4D28 != -1) {
                    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                  }
                  id v142 = (id)qword_1001F4D20;
                  id v143 = sub_100134CFC((uint64_t)v142, *((void **)val + 38), v214);

                  id v144 = objc_alloc((Class)NEPolicy);
                  id v145 = +[NEPolicyCondition allInterfaces];
                  v274 = v145;
                  id v146 = +[NSArray arrayWithObjects:&v274 count:1];
                  id v213 = [v144 initWithOrder:v110 result:v209 conditions:v146];

                  self;
                  if (qword_1001F4D28 != -1) {
                    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                  }
                  id v147 = (id)qword_1001F4D20;
                  id v148 = sub_100134CFC((uint64_t)v147, *((void **)val + 38), v213);

                  id v149 = [v220 copyMatchTokens];
                  long long v246 = 0u;
                  long long v247 = 0u;
                  long long v244 = 0u;
                  long long v245 = 0u;
                  id v224 = v149;
                  id v150 = [v224 countByEnumeratingWithState:&v244 objects:v273 count:16];
                  if (v150)
                  {
                    uint64_t v151 = *(void *)v245;
                    do
                    {
                      for (uint64_t k = 0; k != v150; uint64_t k = (char *)k + 1)
                      {
                        if (*(void *)v245 != v151) {
                          objc_enumerationMutation(v224);
                        }
                        id v153 = *(void **)(*((void *)&v244 + 1) + 8 * (void)k);
                        uint64_t v154 = [*((id *)val + 82) objectForKeyedSubscript:v153];
                        if (v154) {
                          goto LABEL_142;
                        }
                        uint64_t v154 = (void *)nw_agent_create();
                        dispatch_data_t v155 = dispatch_data_create([v153 bytes], (size_t)[v153 length], *((dispatch_queue_t *)val + 13), 0);
                        nw_agent_change_state();
                        objc_initWeak(location, val);
                        objc_initWeak(&from, v154);
                        v239[1] = _NSConcreteStackBlock;
                        v239[2] = (id)3221225472;
                        v239[3] = sub_1000F4A0C;
                        v239[4] = &unk_1001C7498;
                        objc_copyWeak(&v241, location);
                        objc_copyWeak(&v242, &from);
                        unsigned int v156 = v155;
                        id v240 = v156;
                        nw_agent_set_token_low_water_mark();
                        int v235 = _NSConcreteStackBlock;
                        uint64_t v236 = 3221225472;
                        uint64_t v237 = sub_1000F4AEC;
                        v238 = &unk_1001C74C0;
                        objc_copyWeak(v239, location);
                        nw_agent_set_error_handler();
                        sub_1000F4BB0(v154, v156);
                        id v157 = *((id *)val + 82);
                        [v157 setObject:v154 forKeyedSubscript:v153];

                        objc_destroyWeak(v239);
                        objc_destroyWeak(&v242);
                        objc_destroyWeak(&v241);
                        objc_destroyWeak(&from);
                        objc_destroyWeak(location);

                        char v222 = 1;
                        if (v154)
                        {
LABEL_142:
                          location[1] = 0;
                          location[0] = 0;
                          nw_agent_get_uuid();
                          id v158 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:location];
                          id v159 = +[NEPolicyResult netAgentUUID:v158];
                          id v160 = objc_alloc((Class)NEPolicy);
                          id v161 = +[NEPolicyCondition allInterfaces];
                          v271 = v161;
                          uint64_t v162 = +[NSArray arrayWithObjects:&v271 count:1];
                          id v163 = [v160 initWithOrder:v110 result:v159 conditions:v162];

                          self;
                          if (qword_1001F4D28 != -1) {
                            dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                          }
                          id v164 = (id)qword_1001F4D20;
                          id v165 = sub_100134CFC((uint64_t)v164, *((void **)val + 38), v163);
                        }
                      }
                      id v150 = [v224 countByEnumeratingWithState:&v244 objects:v273 count:16];
                    }
                    while (v150);
                  }

                  id v166 = objc_alloc((Class)NEPolicy);
                  id v167 = +[NEPolicyResult skipWithOrder:599];
                  id v168 = +[NEPolicyCondition allInterfaces];
                  v270 = v168;
                  id v169 = +[NSArray arrayWithObjects:&v270 count:1];
                  id v170 = [v166 initWithOrder:(v217 + 6) result:v167 conditions:v169];

                  self;
                  if (qword_1001F4D28 != -1) {
                    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                  }
                  id v171 = (id)qword_1001F4D20;
                  id v172 = sub_100134CFC((uint64_t)v171, *((void **)val + 38), v170);

                  v217 += 7;
                }

                id v216 = (char *)v216 + 1;
              }
              while (v216 != v212);
              id v212 = [obj countByEnumeratingWithState:&v258 objects:v280 count:16];
            }
            while (v212);
          }
          else
          {
            char v208 = 0;
            char v222 = 0;
          }

          if ([v206 count])
          {
            int v226 = +[NEPolicyResult skipWithOrder:591];
            id v173 = objc_alloc((Class)NEPolicy);
            BOOL v174 = +[NEPolicyCondition allInterfaces];
            id v269 = v174;
            v175 = +[NSArray arrayWithObjects:&v269 count:1];
            to = (id *)[v173 initWithOrder:589 result:v226 conditions:v175];

            id v176 = sub_1001348C8();
            id v177 = sub_100134CFC((uint64_t)v176, *((void **)val + 38), to);

            long long v233 = 0u;
            long long v234 = 0u;
            long long v231 = 0u;
            long long v232 = 0u;
            id v227 = v206;
            id v178 = [v227 countByEnumeratingWithState:&v231 objects:v268 count:16];
            if (v178)
            {
              id v229 = *(id *)v232;
              do
              {
                long long v179 = 0;
                do
                {
                  if (*(id *)v232 != v229) {
                    objc_enumerationMutation(v227);
                  }
                  uint64_t v180 = *(void *)(*((void *)&v231 + 1) + 8 * (void)v179);
                  uint64_t v181 = +[NEPolicyRouteRule routeRuleWithAction:forType:](NEPolicyRouteRule, "routeRuleWithAction:forType:", 7, 0, v200);
                  [v181 setControlUnit:0xFFFFFFFLL];
                  id v182 = objc_alloc((Class)NEPolicy);
                  v267 = v181;
                  long long v183 = +[NSArray arrayWithObjects:&v267 count:1];
                  id v184 = +[NEPolicyResult routeRules:v183];
                  id v185 = +[NEPolicyCondition allInterfaces];
                  v266[0] = v185;
                  id v186 = +[NEPolicyCondition effectiveApplication:v180];
                  v266[1] = v186;
                  uint64_t v187 = +[NSArray arrayWithObjects:v266 count:2];
                  id v188 = [v182 initWithOrder:590 result:v184 conditions:v187];

                  self;
                  if (qword_1001F4D28 != -1) {
                    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
                  }
                  id v189 = (id)qword_1001F4D20;
                  id v190 = sub_100134CFC((uint64_t)v189, *((void **)val + 38), v188);

                  long long v179 = (char *)v179 + 1;
                }
                while (v178 != v179);
                id v178 = [v227 countByEnumeratingWithState:&v231 objects:v268 count:16];
              }
              while (v178);
            }
          }
          id v191 = sub_1001348C8();
          sub_1001351D8((uint64_t)v191, v192, v193, v194, v195, v196, v197, v198, (uint64_t)v200);

          if (v208) {
            sub_1000F4CB0((uint64_t)val);
          }
          else {
            sub_1000F4730((uint64_t)val);
          }

          id v36 = v204;
          goto LABEL_168;
        }
      }
      id v54 = +[NEPolicyCondition allInterfaces];
      uint64_t v55 = +[NEPolicyCondition usesModernNetworkAPI];
      uint64_t v56 = +[NEPolicyCondition allowsUnsafeSocketAccess];
      [v56 setNegative:1];
      uint64_t v57 = +[NEPolicyResult skipWithOrder:304];
      id v58 = objc_alloc((Class)NEPolicy);
      v283[0] = v54;
      v283[1] = v55;
      v283[2] = v56;
      id v59 = +[NSArray arrayWithObjects:v283 count:3];
      id v60 = [v58 initWithOrder:302 result:v57 conditions:v59];

      id v61 = sub_1001348C8();
      id v62 = sub_100134CFC((uint64_t)v61, *((void **)val + 38), v60);

      if (v210) {
        id v63 = (void *)v210[16];
      }
      else {
        id v63 = 0;
      }
      id v64 = v63;
      id v65 = [v64 proxyProviderCriteria];
      unsigned int v66 = [v65 excludeNonMatchingLegacyClients];

      if (v66) {
        uint64_t v67 = 590;
      }
      else {
        uint64_t v67 = 599;
      }
      id v68 = +[NEPolicyResult skipWithOrder:v67];
      id v69 = objc_alloc((Class)NEPolicy);
      v282 = v54;
      id v70 = +[NSArray arrayWithObjects:&v282 count:1];
      id v71 = [v69 initWithOrder:303 result:v68 conditions:v70];

      id v72 = sub_1001348C8();
      id v73 = sub_100134CFC((uint64_t)v72, *((void **)val + 38), v71);

      int v74 = 304;
      goto LABEL_59;
    }
    goto LABEL_15;
  }
}

void sub_1000F39D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id *a36,id *a37,id *location,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,id a62)
{
}

void sub_1000F3A20(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    id v2 = *(id *)(a1 + 120);
    if (v2)
    {
      nw_parameters_t v3 = v2;
      id v4 = [*(id *)(a1 + 120) count];

      if (v4)
      {
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        id v5 = [*(id *)(a1 + 120) copy];
        id v6 = [v5 countByEnumeratingWithState:&v59 objects:v68 count:16];
        if (v6)
        {
          id v7 = v6;
          uint64_t v8 = *(void *)v60;
          do
          {
            for (i = 0; i != v7; i = (char *)i + 1)
            {
              if (*(void *)v60 != v8) {
                objc_enumerationMutation(v5);
              }
              sub_1000D6A20(a1, *(void **)(*((void *)&v59 + 1) + 8 * i));
            }
            id v7 = [v5 countByEnumeratingWithState:&v59 objects:v68 count:16];
          }
          while (v7);
        }

        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        id v10 = *(id *)(a1 + 120);
        id v11 = [v10 countByEnumeratingWithState:&v55 objects:v67 count:16];
        if (v11)
        {
          id v12 = v11;
          id v13 = 0;
          uint64_t v14 = *(void *)v56;
          do
          {
            for (j = 0; j != v12; j = (char *)j + 1)
            {
              if (*(void *)v56 != v14) {
                objc_enumerationMutation(v10);
              }
              uint64_t v16 = *(void *)(*((void *)&v55 + 1) + 8 * (void)j);
              if (v16 && *(unsigned char *)(v16 + 12))
              {
                if (!v13) {
                  id v13 = objc_alloc_init((Class)NSMutableArray);
                }
                [v13 addObject:v16];
              }
            }
            id v12 = [v10 countByEnumeratingWithState:&v55 objects:v67 count:16];
          }
          while (v12);
        }
        else
        {
          id v13 = 0;
        }

        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        id v17 = v13;
        id v18 = [v17 countByEnumeratingWithState:&v51 objects:v66 count:16];
        if (v18)
        {
          id v19 = v18;
          uint64_t v20 = *(void *)v52;
          do
          {
            for (uint64_t k = 0; k != v19; uint64_t k = (char *)k + 1)
            {
              if (*(void *)v52 != v20) {
                objc_enumerationMutation(v17);
              }
              sub_1000D8C10(a1, *(void **)(*((void *)&v51 + 1) + 8 * (void)k));
            }
            id v19 = [v17 countByEnumeratingWithState:&v51 objects:v66 count:16];
          }
          while (v19);
        }

        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        id v22 = *(id *)(a1 + 120);
        id v23 = [v22 countByEnumeratingWithState:&v47 objects:v65 count:16];
        if (v23)
        {
          id v24 = v23;
          uint64_t v25 = *(void *)v48;
          do
          {
            for (m = 0; m != v24; m = (char *)m + 1)
            {
              if (*(void *)v48 != v25) {
                objc_enumerationMutation(v22);
              }
              sub_1000D6A20(a1, *(void **)(*((void *)&v47 + 1) + 8 * (void)m));
            }
            id v24 = [v22 countByEnumeratingWithState:&v47 objects:v65 count:16];
          }
          while (v24);
        }

        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        id v27 = *(id *)(a1 + 120);
        id v28 = [v27 countByEnumeratingWithState:&v43 objects:v64 count:16];
        if (v28)
        {
          id v29 = v28;
          id v30 = 0;
          uint64_t v31 = *(void *)v44;
          do
          {
            for (n = 0; n != v29; n = (char *)n + 1)
            {
              if (*(void *)v44 != v31) {
                objc_enumerationMutation(v27);
              }
              uint64_t v33 = *(void *)(*((void *)&v43 + 1) + 8 * (void)n);
              if (v33 && *(unsigned char *)(v33 + 12))
              {
                if (!v30) {
                  id v30 = objc_alloc_init((Class)NSMutableArray);
                }
                [v30 addObject:v33];
              }
            }
            id v29 = [v27 countByEnumeratingWithState:&v43 objects:v64 count:16];
          }
          while (v29);
        }
        else
        {
          id v30 = 0;
        }

        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        id v34 = v30;
        id v35 = [v34 countByEnumeratingWithState:&v39 objects:v63 count:16];
        if (v35)
        {
          id v36 = v35;
          uint64_t v37 = *(void *)v40;
          do
          {
            for (ii = 0; ii != v36; ii = (char *)ii + 1)
            {
              if (*(void *)v40 != v37) {
                objc_enumerationMutation(v34);
              }
              sub_1000D8C10(a1, *(void **)(*((void *)&v39 + 1) + 8 * (void)ii));
            }
            id v36 = [v34 countByEnumeratingWithState:&v39 objects:v63 count:16];
          }
          while (v36);
        }
      }
    }
  }
}

void sub_1000F3EC0(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 48) && !*(void *)(a1 + 632))
  {
    id v2 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
    nw_parameters_t v3 = v2;
    if (!v2) {
      goto LABEL_21;
    }
    if (*((unsigned char *)v2 + 15))
    {
      char v4 = 1;
      if (!*((unsigned char *)v2 + 12)) {
        goto LABEL_21;
      }
    }
    else
    {
      if (*((unsigned char *)v2 + 14)) {
        BOOL v5 = 1;
      }
      else {
        BOOL v5 = *((unsigned __int16 *)v2 + 14) > 0x12u;
      }
      char v4 = v5;
      if (!*((unsigned char *)v2 + 12)) {
        goto LABEL_21;
      }
    }
    if (!*((unsigned char *)v2 + 13)) {
      char v4 = 0;
    }
    if (v4)
    {
      if (*((unsigned __int16 *)v2 + 14) > 0x15u)
      {
        uint64_t v52 = a1;
        id v11 = v2[6];

        if (v11)
        {
          id v12 = [NRApplicationServiceClient alloc];
          id v13 = *(void **)(a1 + 104);
          id v14 = *(id *)(v52 + 96);
          id v15 = v13;
          uint64_t v16 = sub_100102AC4((id *)&v12->super.isa, (void *)v52, v15, v14);
          id v17 = *(void **)(v52 + 632);
          *(void *)(v52 + 632) = v16;

          id v18 = *(unsigned char **)(v52 + 632);
          if (v18 && !v18[9])
          {
            if (!v18[8])
            {
              v18[8] = 1;
              self;
              if (qword_1001F4AE8 != -1) {
                dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
              }
              uint64_t v26 = qword_1001F4AE0;
              id v27 = v18;
              if (v26)
              {
                dispatch_assert_queue_V2(*(dispatch_queue_t *)(v26 + 8));
                [*(id *)(v26 + 48) addObject:v27];
                long long v67 = 0u;
                long long v68 = 0u;
                long long v65 = 0u;
                long long v66 = 0u;
                uint64_t v51 = v26;
                id v28 = *(id *)(v26 + 32);
                id v29 = [v28 countByEnumeratingWithState:&v65 objects:location count:16];
                id v30 = v3;
                if (v29)
                {
                  uint64_t v31 = *(void *)v66;
                  do
                  {
                    for (i = 0; i != v29; i = (char *)i + 1)
                    {
                      if (*(void *)v66 != v31) {
                        objc_enumerationMutation(v28);
                      }
                      uint64_t v33 = *(void *)(*((void *)&v65 + 1) + 8 * i);
                      id v34 = v27[8];
                      block[0] = _NSConcreteStackBlock;
                      block[1] = 3221225472;
                      block[2] = sub_1001029E0;
                      block[3] = &unk_1001C8840;
                      id v63 = v27;
                      uint64_t v64 = v33;
                      id v35 = v34;
                      nw_parameters_t v3 = v30;
                      dispatch_async(v35, block);
                    }
                    id v29 = [v28 countByEnumeratingWithState:&v65 objects:location count:16];
                  }
                  while (v29);
                }

                long long v61 = 0u;
                long long v59 = 0u;
                long long v60 = 0u;
                long long v58 = 0u;
                id v36 = *(id *)(v51 + 40);
                id v37 = [v36 countByEnumeratingWithState:&v58 objects:v69 count:16];
                if (v37)
                {
                  uint64_t v38 = *(void *)v59;
                  do
                  {
                    for (j = 0; j != v37; j = (char *)j + 1)
                    {
                      if (*(void *)v59 != v38) {
                        objc_enumerationMutation(v36);
                      }
                      uint64_t v40 = *(void *)(*((void *)&v58 + 1) + 8 * (void)j);
                      long long v41 = v27[8];
                      v55[0] = _NSConcreteStackBlock;
                      v55[1] = 3221225472;
                      void v55[2] = sub_1001029EC;
                      v55[3] = &unk_1001C8840;
                      long long v56 = v27;
                      uint64_t v57 = v40;
                      long long v42 = v41;
                      nw_parameters_t v3 = v30;
                      dispatch_async(v42, v55);
                    }
                    id v37 = [v36 countByEnumeratingWithState:&v58 objects:v69 count:16];
                  }
                  while (v37);
                }
              }
              long long v43 = (void *)_NRCopyLogObjectForNRUUID();
              int IsLevelEnabled = _NRLogIsLevelEnabled();

              if (IsLevelEnabled)
              {
                long long v45 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
            }
            id v46 = objc_alloc_init((Class)NSMutableDictionary);
            objc_storeStrong((id *)(v52 + 648), v46);

            long long v47 = (void *)_NRCopyLogObjectForNRUUID();
            int v48 = _NRLogIsLevelEnabled();

            if (v48)
            {
              id v49 = *(id *)(v52 + 96);
              long long v50 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            sub_1000E5DDC(v52, 0);
          }
          else
          {
            id v19 = (void *)_NRCopyLogObjectForNRUUID();
            int v20 = _NRLogIsLevelEnabled();

            if (v20)
            {
              id v21 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            sub_1000F4724(v52);
          }
        }
        else
        {
          id v22 = (void *)_NRCopyLogObjectForNRUUID();
          int v23 = _NRLogIsLevelEnabled();

          if (v23)
          {
            id v24 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
          objc_initWeak(location, (id)a1);
          id v25 = *(id *)(a1 + 96);
          v53[0] = _NSConcreteStackBlock;
          v53[1] = 3221225472;
          v53[2] = sub_1000F45B8;
          v53[3] = &unk_1001C7690;
          objc_copyWeak(&v54, location);
          sub_100149AF0((uint64_t)NRDLocalDevice, v25, v53);

          objc_destroyWeak(&v54);
          objc_destroyWeak(location);
        }
        goto LABEL_23;
      }
      id v6 = (void *)_NRCopyLogObjectForNRUUID();
      int v7 = _NRLogIsLevelEnabled();

      if (v7) {
        goto LABEL_22;
      }
      goto LABEL_23;
    }
LABEL_21:
    uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
    int v9 = _NRLogIsLevelEnabled();

    if (v9)
    {
LABEL_22:
      id v10 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
LABEL_23:
  }
}

void sub_1000F4594(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 248));
  _Unwind_Resume(a1);
}

void sub_1000F45B8(uint64_t a1, void *a2)
{
  uint64_t v16 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  char v4 = WeakRetained;
  if (WeakRetained && *((unsigned char *)WeakRetained + 14))
  {
    id v5 = WeakRetained[12];
    id v6 = v16 ? (void *)v16[4] : 0;
    id v7 = v6;
    unsigned int v8 = [v5 isEqual:v7];

    if (v8)
    {
      if (v16) {
        int v9 = (void *)v16[6];
      }
      else {
        int v9 = 0;
      }
      id v10 = v9;

      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      if (v10)
      {
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v13 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        sub_1000F3EC0(v4);
      }
      else
      {
        int v14 = _NRLogIsLevelEnabled();

        if (v14)
        {
          id v15 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
      }
    }
  }
}

void sub_1000F4724(uint64_t a1)
{
}

void sub_1000F4730(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 49))
  {
    id v5 = +[NSDistributedNotificationCenter defaultCenter];
    [v5 removeObserver:a1 name:@"com.apple.LaunchServices.applicationRegistered" object:0];
    [v5 removeObserver:a1 name:@"com.apple.LaunchServices.applicationStateChanged" object:0];
    [v5 removeObserver:a1 name:@"com.apple.LaunchServices.applicationUnregistered" object:0];
    *(unsigned char *)(a1 + 49) = 0;
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      char v4 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
}

uint64_t sub_1000F4848(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
LABEL_3:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v15 != v7) {
        objc_enumerationMutation(v4);
      }
      uint64_t v9 = *(void *)(*((void *)&v14 + 1) + 8 * v8);
      id v10 = [v3 entitlements:v14];
      uint64_t v11 = [v10 objectForKey:v9 ofClass:objc_opt_class()];

      if (!v11) {
        break;
      }
      id v12 = [*(id *)(a1 + 32) objectForKeyedSubscript:v9];
      if (([(id)v11 isEqual:v12] & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0
          || ([(id)v11 containsObject:v12] & 1) == 0)
        {

          uint64_t v11 = 0;
          break;
        }
      }

      if (v6 == (id)++v8)
      {
        id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
        uint64_t v11 = 1;
        if (v6) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_1000F4A0C(void **a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  if (WeakRetained && WeakRetained[14])
  {
    uint64_t v7 = WeakRetained;
    id v3 = objc_loadWeakRetained(a1 + 6);
    if (v3)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v6 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      sub_1000F4BB0(v3, a1[4]);
    }

    id WeakRetained = v7;
  }
}

void sub_1000F4AEC(uint64_t a1, uint64_t a2, int a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (a3)
    {
      if (WeakRetained[14])
      {
        uint64_t v8 = WeakRetained;
        id v5 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        id WeakRetained = v8;
        if (IsLevelEnabled)
        {
          uint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();

          id WeakRetained = v8;
        }
      }
    }
  }
}

void sub_1000F4BB0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
  nw_agent_add_token();
}

void sub_1000F4CB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 49))
  {
    id v5 = +[NSDistributedNotificationCenter defaultCenter];
    [v5 addObserver:a1 selector:"processAppStateChanged:" name:@"com.apple.LaunchServices.applicationRegistered" object:0];
    [v5 addObserver:a1 selector:"processAppStateChanged:" name:@"com.apple.LaunchServices.applicationStateChanged" object:0];
    [v5 addObserver:a1 selector:"processAppStateChanged:" name:@"com.apple.LaunchServices.applicationUnregistered" object:0];
    *(unsigned char *)(a1 + 49) = 1;
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
}

void sub_1000F4DE0(id a1)
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v1 = (id)qword_1001F4A18;
  sub_1000AA4D0((uint64_t)v1);
}

void sub_1000F4E58(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (!*(unsigned char *)(a1 + 38) && !*(unsigned char *)(a1 + 46))
  {
    id v2 = objc_alloc_init((Class)NSMutableArray);
    self;
    id v3 = sub_10015BD9C();
    dispatch_assert_queue_V2(v3);

    long long v61 = xmmword_10016C8A0;
    id v4 = [objc_alloc((Class)NSData) initWithBytes:&v61 length:16];
    id v5 = sub_100141BFC((uint64_t)NRDLocalDevice, v4, @"0");

    id v6 = +[NEPolicyCondition remoteAddress:v5 prefix:64];
    uint64_t v7 = +[NEPolicyCondition ipProtocol:58];
    v66[0] = v6;
    v66[1] = v7;
    uint64_t v8 = +[NEPolicyCondition allInterfaces];
    v66[2] = v8;
    uint64_t v9 = +[NSArray arrayWithObjects:v66 count:3];

    id v10 = +[NEPolicyResult skipWithOrder:220];
    id v11 = [objc_alloc((Class)NEPolicy) initWithOrder:200 result:v10 conditions:v9];
    self;
    long long v60 = v2;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v12 = (id)qword_1001F4D20;
    id v13 = sub_100134CFC((uint64_t)v12, *(void **)(a1 + 272), v11);

    [v60 addObject:v13];
    self;
    long long v14 = sub_10015BD9C();
    dispatch_assert_queue_V2(v14);

    long long v61 = xmmword_10016C8A0;
    id v15 = [objc_alloc((Class)NSData) initWithBytes:&v61 length:16];
    long long v16 = sub_100141BFC((uint64_t)NRDLocalDevice, v15, @"0");

    long long v17 = +[NEPolicyCondition remoteAddress:v16 prefix:64];
    id v18 = +[NEPolicyCondition platformBinary];
    v65[0] = v17;
    v65[1] = v18;
    id v19 = +[NEPolicyCondition allInterfaces];
    v65[2] = v19;
    int v20 = +[NSArray arrayWithObjects:v65 count:3];

    id v21 = +[NEPolicyResult skipWithOrder:220];
    id v22 = [objc_alloc((Class)NEPolicy) initWithOrder:200 result:v21 conditions:v20];
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v23 = (id)qword_1001F4D20;
    id v24 = sub_100134CFC((uint64_t)v23, *(void **)(a1 + 272), v22);

    [v60 addObject:v24];
    id v25 = +[NEPolicyCondition requiredAgentDomain:@"com.apple.networkrelay" agentType:@"ASListener"];
    uint64_t v26 = +[NEPolicyCondition platformBinary];
    v64[0] = v25;
    v64[1] = v26;
    id v27 = +[NEPolicyCondition allInterfaces];
    v64[2] = v27;
    id v28 = +[NSArray arrayWithObjects:v64 count:3];

    id v29 = +[NEPolicyResult skipWithOrder:220];
    id v30 = [objc_alloc((Class)NEPolicy) initWithOrder:200 result:v29 conditions:v28];
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v31 = (id)qword_1001F4D20;
    uint64_t v32 = sub_100134CFC((uint64_t)v31, *(void **)(a1 + 272), v30);

    [v60 addObject:v32];
    uint64_t v33 = +[NEPolicyCondition requiredAgentDomain:@"com.apple.networkrelay" agentType:@"ASResolver"];
    id v34 = +[NEPolicyCondition platformBinary];
    v63[0] = v33;
    v63[1] = v34;
    id v35 = +[NEPolicyCondition allInterfaces];
    v63[2] = v35;
    id v36 = +[NSArray arrayWithObjects:v63 count:3];

    id v37 = +[NEPolicyResult skipWithOrder:220];
    id v38 = [objc_alloc((Class)NEPolicy) initWithOrder:200 result:v37 conditions:v36];
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v39 = (id)qword_1001F4D20;
    uint64_t v40 = sub_100134CFC((uint64_t)v39, *(void **)(a1 + 272), v38);

    [v60 addObject:v40];
    id v41 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"4946eeba-8277-69b4-e898-d635c8fde872"];
    id v62 = v41;
    long long v42 = +[NSArray arrayWithObjects:&v62 count:1];
    sub_1000F56B8(a1, v42, v60, @"4946eeba-8277-69b4-e898-d635c8fde872");

    if (_NRIsAppleInternal())
    {
      id v43 = sub_100114080(@"com.apple.Home");
      id v44 = [v43 count];
      long long v45 = (void *)_NRCopyLogObjectForNRUUID();
      if (v44)
      {
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          long long v47 = (void *)_NRCopyLogObjectForNRUUID();
          long long v59 = "";
          _NRLogWithArgs();
        }
        sub_1000F56B8(a1, v43, v60, @"com.apple.Home");
      }
      else
      {
        int v48 = _NRLogIsLevelEnabled();

        if (v48)
        {
          id v49 = (void *)_NRCopyLogObjectForNRUUID();
          long long v59 = "";
          _NRLogWithArgs();
        }
      }
    }
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v50 = (id)qword_1001F4D20;
    uint64_t v51 = (id *)v50;
    if (v50)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v50 + 1));
      if (([v51[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v52, v53, v54, (uint64_t)v59);
      }
    }

    uint64_t v55 = *(void *)(a1 + 240);
    *(unsigned char *)(a1 + 38) = 1;
    [v60 addObjectsFromArray:v55];
    objc_storeStrong((id *)(a1 + 240), v60);
    long long v56 = (void *)_NRCopyLogObjectForNRUUID();
    int v57 = _NRLogIsLevelEnabled();

    if (v57)
    {
      long long v58 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
}

void sub_1000F56B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v25 = a3;
  id v22 = a4;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id obj = v6;
  id v7 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v27;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v27 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = +[NEPolicyCondition effectiveApplication:](NEPolicyCondition, "effectiveApplication:", *(void *)(*((void *)&v26 + 1) + 8 * (void)v10), v21);
        id v12 = +[NEPolicyCondition allInterfaces];
        v30[0] = v12;
        v30[1] = v11;
        id v13 = +[NSArray arrayWithObjects:v30 count:2];

        long long v14 = +[NEPolicyResult skipWithOrder:220];
        id v15 = [objc_alloc((Class)NEPolicy) initWithOrder:200 result:v14 conditions:v13];
        if (v15)
        {
          self;
          if (qword_1001F4D28 != -1) {
            dispatch_once(&qword_1001F4D28, &stru_1001C8658);
          }
          id v16 = (id)qword_1001F4D20;
          long long v17 = sub_100134CFC((uint64_t)v16, *(void **)(a1 + 272), v15);

          [v25 addObject:v17];
          goto LABEL_10;
        }
        id v18 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          long long v17 = (void *)_NRCopyLogObjectForNRUUID();
          id v21 = v22;
          _NRLogWithArgs();
LABEL_10:
        }
        if (!v15) {
          goto LABEL_17;
        }
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v20 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
      id v8 = v20;
    }
    while (v20);
  }
LABEL_17:
}

void sub_1000F5944(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, v3);
  if (!v4)
  {
    id v25 = sub_1000D8B78();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v27 = sub_1000D8B78();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v28 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v28 = 136446210;
    *(void *)(v28 + 4) = "-[NRDDeviceConductor updateProxyAgentForNRUUID:]";
    sub_1000D8B78();
    _NRLogAbortWithPack();
  }
  id v5 = v4;
  if (sub_100119B74(v4))
  {
    id v6 = v5[16];
    unsigned __int8 v7 = [v6 hasPoliciesForProxyCriteria];

    if ((v7 & 1) == 0)
    {
      id v8 = a1 + 57;
      id v9 = a1[57];
      if (!v9) {
        goto LABEL_7;
      }
      id v10 = v9;
      id v11 = *v8;
      id v12 = v5[12];
      if (v11 == v12)
      {

        goto LABEL_14;
      }
      id v13 = v12;
      id v14 = *v8;
      id v15 = v5[12];
      unsigned __int8 v16 = [v14 isEqual:v15];

      if ((v16 & 1) == 0)
      {
LABEL_7:
        sub_1000F5C5C((uint64_t)a1);
        objc_storeStrong(a1 + 57, v5[12]);
        if (a1[57])
        {
          id v30 = 0;
          id v31 = 0;
          id v29 = 0;
          long long v17 = (void *)NEVirtualInterfaceCopyName();
          id v18 = a1[57];
          id v19 = [a1 description];
          char v20 = sub_10011B1F0(v5, v18, v17, &v30, &v31, &v29, v19);

          if (v20)
          {
            id v21 = v30;
            objc_storeStrong(a1 + 58, v30);
            id v22 = v31;
            objc_storeStrong(a1 + 59, v31);
            objc_storeStrong(a1 + 60, v29);
            if (a1[60]) {
              id v23 = sub_10011C6B8(v22, v17, a1[68]);
            }
          }
          else
          {
            id v24 = a1[57];
            a1[57] = 0;

            id v21 = v30;
            objc_storeStrong(a1 + 58, v30);
            id v22 = v31;
            objc_storeStrong(a1 + 59, v31);
            objc_storeStrong(a1 + 60, v29);
          }
        }
      }
    }
  }
LABEL_14:
}

void sub_1000F5C5C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 464);
  if (v2)
  {
    [v2 unregisterNetworkAgent];
    id v3 = *(void **)(a1 + 464);
    *(void *)(a1 + 464) = 0;
  }
  if (*(void *)(a1 + 480))
  {
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v4 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v4, *(void **)(a1 + 544));

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v5 = (id)qword_1001F4D20;
    id v6 = (id *)v5;
    if (v5)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v5 + 1));
      if (([v6[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v7, v8, v9, v13);
      }
    }

    nw_proxy_config_unpublish();
    id v10 = *(void **)(a1 + 480);
    *(void *)(a1 + 480) = 0;

    if (qword_1001F4AA8 != -1) {
      dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4AA8 != -1) {
        dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
      }
      _NRLogWithArgs();
    }
  }
  id v11 = *(void **)(a1 + 456);
  *(void *)(a1 + 456) = 0;

  id v12 = *(void **)(a1 + 472);
  *(void *)(a1 + 472) = 0;
}

void sub_1000F5E44(uint64_t a1)
{
  if (*(void *)(a1 + 448))
  {
    sub_1000F5C5C(a1);
    sub_1000EC4A0(a1);
    id v6 = (id)NEVirtualInterfaceCopyName();
    NEVirtualInterfaceInvalidate();
    id v2 = *(const void **)(a1 + 448);
    if (v2) {
      CFRelease(v2);
    }
    *(void *)(a1 + 448) = 0;
    *(unsigned char *)(a1 + 58) = 0;
    id v3 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
}

void sub_1000F695C()
{
  v0 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v2 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_1000F6A48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(unsigned char *)(v1 + 14))
  {
    *(unsigned char *)(v1 + 51) = 0;
    id v3 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = *(void **)(a1 + 32);
      if (v5) {
        id v5 = (void *)v5[12];
      }
      id v6 = v5;
      uint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8 && (*(unsigned char *)(v8 + 15) || *(unsigned char *)(v8 + 26)))
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v8 + 104));
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v9 = (id)qword_1001F4A18;
      id v10 = v9;
      if (v9) {
        id v11 = (void *)*((void *)v9 + 6);
      }
      else {
        id v11 = 0;
      }
      id v12 = v11;

      if (v12) {
        uint64_t v13 = (void *)v12[7];
      }
      else {
        uint64_t v13 = 0;
      }
      id v14 = v13;

      if (v14) {
        goto LABEL_17;
      }
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v16 = (id)qword_1001F4A18;
      long long v17 = v16;
      id v18 = v16 ? (void *)*((void *)v16 + 12) : 0;
      id v19 = v18;
      int v20 = sub_10006760C((uint64_t)v19, 0);

      if (v20)
      {
        id v21 = sub_1000DC5BC(*(void *)(a1 + 32), 2, 102);
        if (v21)
        {
          id v22 = v21;
          unsigned int v23 = [v21 state];

          if (v23 != 255)
          {
LABEL_17:
            uint64_t v15 = *(void *)(a1 + 32);
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_1000F6CDC;
            v24[3] = &unk_1001C8BA8;
            v24[4] = v15;
            sub_1000DB33C(v15, 1, 1, 0, 0, v24);
          }
        }
      }
    }
  }
}

uint64_t sub_1000F6CDC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1) {
    *(unsigned char *)(v1 + 26) = 0;
  }
  return result;
}

unsigned char *sub_1000F6E14(unsigned char *result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  if (!result[12]) {
    return result;
  }
  id v2 = (void *)*((void *)result + 26);
  if (v2) {
    goto LABEL_6;
  }
  id v3 = objc_alloc_init((Class)NWNetworkOfInterestManager);
  id v4 = (void *)*((void *)v1 + 26);
  *((void *)v1 + 26) = v3;

  id v5 = (void *)*((void *)v1 + 26);
  if (v5)
  {
    uint64_t v6 = *((void *)v1 + 13);
    id v7 = v5;
    [v7 setQueue:v6];

    [*((id *)v1 + 26) setDelegate:v1];
    id v2 = (void *)*((void *)v1 + 26);
LABEL_6:
    return [v2 trackNOIAnyForInterfaceType:1 options:0];
  }
  if (qword_1001F4AA8 != -1) {
    dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
  }
  id result = (unsigned char *)_NRLogIsLevelEnabled();
  if (result)
  {
    if (qword_1001F4AA8 != -1) {
      dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
    }
    return (unsigned char *)_NRLogWithArgs();
  }
  return result;
}

void sub_1000F74DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
    {
      if (!v5 || *((unsigned char *)v5 + 8) != 2) {
        goto LABEL_9;
      }
      id v7 = *((id *)v5 + 3);
      uint64_t v8 = [v7 port];
      id v9 = sub_100116B0C(v7, (unsigned __int16)[v8 intValue], 0);

      NRTLVAddData();
      int v10 = *((_DWORD *)v5 + 4);
      id v11 = *((id *)v5 + 4);

      if (v11)
      {
        id v12 = *((id *)v5 + 4);
        NRTLVAddData();
      }
      NRTLVAdd();
      if (v10 == 1) {
LABEL_9:
      }
        NRTLVAdd();
    }
  }
}

void sub_1000F765C(uint64_t a1)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 552), 0);
  }
}

void sub_1000F7670(uint64_t a1)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 576), 0);
  }
}

void sub_1000F7728(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(unsigned char *)(v1 + 14) && *(unsigned char *)(v1 + 49))
  {
    id v3 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = *(void **)(a1 + 32);
      if (v5) {
        id v5 = (void *)v5[12];
      }
      id v6 = v5;
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    sub_1000F201C(v8);
  }
}

char *sub_1000F7890(char *a1, void *a2, void *a3)
{
  id v7 = a2;
  uint64_t v8 = a3;
  id v9 = v8;
  if (!a1) {
    goto LABEL_18;
  }
  if (!v7)
  {
    id v68 = sub_1000D8B78();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (!v8)
  {
    id v70 = sub_1000D8B78();
    int v71 = _NRLogIsLevelEnabled();

    if (v71)
    {
LABEL_17:
      id v72 = sub_1000D8B78();
      _NRLogWithArgs();

      long long v66 = 0;
      goto LABEL_13;
    }
LABEL_18:
    long long v66 = 0;
    goto LABEL_13;
  }
  v78.receiver = a1;
  v78.super_class = (Class)NRDDeviceConductor;
  int v10 = (char *)[super init];
  if (!v10)
  {
    id v73 = sub_1000D8B78();
    int v74 = _NRLogIsLevelEnabled();

    id v11 = "-[NRDDeviceConductor initConductorWithNRUUID:queue:]";
    if (v74)
    {
      id v75 = sub_1000D8B78();
      _NRLogWithArgs();
    }
    id v7 = (id)_os_log_pack_size();
    id v9 = (char *)&v77 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v76 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v76 = 136446210;
    *(void *)(v76 + 4) = "-[NRDDeviceConductor initConductorWithNRUUID:queue:]";
    sub_1000D8B78();
    _NRLogAbortWithPack();
    goto LABEL_22;
  }
  id v11 = v10;
  id v3 = (id *)(v10 + 96);
  objc_storeStrong((id *)v10 + 12, a2);
  objc_storeStrong((id *)v11 + 13, a3);
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v11 + 13));
  id v12 = (void *)*((void *)v11 + 26);
  *((void *)v11 + 26) = 0;

  id v13 = objc_alloc_init((Class)NSMutableSet);
  id v14 = (void *)*((void *)v11 + 14);
  *((void *)v11 + 14) = v13;

  v11[14] = 0;
  id v15 = objc_alloc_init((Class)NSMutableSet);
  id v16 = (void *)*((void *)v11 + 21);
  *((void *)v11 + 21) = v15;

  id v17 = objc_alloc_init((Class)NSMutableSet);
  id v18 = (void *)*((void *)v11 + 19);
  *((void *)v11 + 19) = v17;

  id v19 = objc_alloc_init((Class)NSMutableSet);
  int v20 = (void *)*((void *)v11 + 22);
  *((void *)v11 + 22) = v19;

  id v21 = objc_alloc_init((Class)NSMutableArray);
  id v22 = (void *)*((void *)v11 + 30);
  *((void *)v11 + 30) = v21;

  v11[25] = 1;
  v11[39] = 1;
  unsigned int v23 = @"Policy";
  id v24 = objc_alloc((Class)NSString);
  id v25 = [*((id *)v11 + 12) UUIDString];
  id v26 = [v24 initWithFormat:@"NRDDC-%@-%@", v25, @"Policy"];

  id v27 = (void *)*((void *)v11 + 34);
  *((void *)v11 + 34) = v26;

  uint64_t v28 = @"NetInfo";
  id v29 = objc_alloc((Class)NSString);
  id v30 = [*((id *)v11 + 12) UUIDString];
  id v31 = [v29 initWithFormat:@"NRDDC-%@-%@", v30, @"NetInfo"];

  uint64_t v32 = (void *)*((void *)v11 + 35);
  *((void *)v11 + 35) = v31;

  uint64_t v33 = @"CmpnNWDesc";
  id v34 = objc_alloc((Class)NSString);
  id v35 = [*((id *)v11 + 12) UUIDString];
  id v36 = [v34 initWithFormat:@"NRDDC-%@-%@", v35, @"CmpnNWDesc"];

  id v37 = (void *)*((void *)v11 + 36);
  *((void *)v11 + 36) = v36;

  id v38 = @"CmpnLnkMon";
  id v39 = objc_alloc((Class)NSString);
  uint64_t v40 = [*((id *)v11 + 12) UUIDString];
  id v41 = [v39 initWithFormat:@"NRDDC-%@-%@", v40, @"CmpnLnkMon"];

  long long v42 = (void *)*((void *)v11 + 67);
  *((void *)v11 + 67) = v41;

  id v43 = @"flowDivert";
  id v44 = objc_alloc((Class)NSString);
  long long v45 = [*((id *)v11 + 12) UUIDString];
  id v46 = [v44 initWithFormat:@"NRDDC-%@-%@", v45, @"flowDivert"];

  long long v47 = (void *)*((void *)v11 + 37);
  *((void *)v11 + 37) = v46;

  int v48 = @"cmpnAgentRemoval";
  id v49 = objc_alloc((Class)NSString);
  id v50 = [*((id *)v11 + 12) UUIDString];
  id v51 = [v49 initWithFormat:@"NRDDC-%@-%@", v50, @"cmpnAgentRemoval"];

  uint64_t v52 = (void *)*((void *)v11 + 39);
  *((void *)v11 + 39) = v51;

  uint64_t v53 = @"proxyConfig";
  id v54 = objc_alloc((Class)NSString);
  uint64_t v55 = [*((id *)v11 + 12) UUIDString];
  id v56 = [v54 initWithFormat:@"NRDDC-%@-%@", v55, @"proxyConfig"];

  int v57 = (void *)*((void *)v11 + 68);
  *((void *)v11 + 68) = v56;

  self;
  if (qword_1001F48B0 != -1) {
LABEL_22:
  }
    dispatch_once(&qword_1001F48B0, &stru_1001C64C0);
  id v58 = (id)qword_1001F48A8;
  id v59 = *v3;
  if (v58)
  {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v58 + 1));
    uint64_t v60 = [*((id *)v58 + 2) objectForKeyedSubscript:v59];
    if (v60)
    {
      id v61 = (id)v60;
      id v62 = (void *)_NRCopyLogObjectForNRUUID();
      int v63 = _NRLogIsLevelEnabled();

      if (v63)
      {
        uint64_t v64 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v61 = objc_alloc_init((Class)NSMutableDictionary);
      [*((id *)v58 + 2) setObject:v61 forKeyedSubscript:v59];
    }
  }
  long long v65 = [v11 description];
  sub_10012F648(*((void **)v11 + 12), 1500, 0, v65);

  a1 = v11;
  long long v66 = a1;
LABEL_13:

  return v66;
}

void sub_1000F7EF8(id val)
{
  if (!*((unsigned char *)val + 10) && (!*((unsigned char *)val + 48) || _os_feature_enabled_impl()))
  {
    objc_initWeak(&location, val);
    id v2 = (void *)*((void *)val + 13);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000F7FD8;
    block[3] = &unk_1001C88B8;
    void block[4] = val;
    id v3 = v2;
    objc_copyWeak(&v5, &location);
    dispatch_async(v3, block);

    objc_destroyWeak(&v5);
    objc_destroyWeak(&location);
  }
}

void sub_1000F7FD8(uint64_t a1)
{
  self;
  *(unsigned char *)(*(void *)(a1 + 32) + 10) = 1;
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v2 = (id)qword_1001F4A18;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000F80E4;
  v3[3] = &unk_1001C7FF0;
  objc_copyWeak(&v4, (id *)(a1 + 40));
  sub_1000B7F50((uint64_t)v2, v3);

  objc_destroyWeak(&v4);
}

void sub_1000F80D0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000F80E4(uint64_t a1)
{
  id WeakRetained = (dispatch_queue_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && *((unsigned char *)WeakRetained + 14))
  {
    int v10 = WeakRetained;
    id v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    dispatch_assert_queue_V2(v10[13]);
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v5 = (id)qword_1001F4A18;
    id v6 = v5;
    if (v5) {
      id v7 = (void *)*((void *)v5 + 6);
    }
    else {
      id v7 = 0;
    }
    uint64_t v8 = v7;

    if (v8)
    {
      id v9 = v8[3];
      dispatch_assert_queue_V2(v9);

      if (!*((unsigned char *)v8 + 36) && *((_DWORD *)v8 + 3) != 1004)
      {
        *((unsigned char *)v8 + 36) = 1;
        sub_100157D90((uint64_t)v8, 1);
      }
    }

    id WeakRetained = v10;
  }
}

void sub_1000F824C(uint64_t a1)
{
  id v2 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(a1 + 96));
  if (!v2)
  {
    id v64 = sub_1000D8B78();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v66 = sub_1000D8B78();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v67 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v67 = 136446210;
    *(void *)(v67 + 4) = "-[NRDDeviceConductor updateOperatingMode]";
    sub_1000D8B78();
    _NRLogAbortWithPack();
  }
  id v70 = v2;
  id v3 = (void *)_NRCopyLogObjectForNRUUID();
  int v4 = _NRLogIsLevelEnabled();

  if (v4)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    id v68 = v70[16];
    _NRLogWithArgs();
  }
  id v6 = v70[16];

  if (!v6)
  {
    *(_WORD *)(a1 + 54) = 257;
    *(unsigned char *)(a1 + 48) = 1;
    *(unsigned char *)(a1 + 57) = 1;
    *(_WORD *)(a1 + 44) = 257;
    *(_WORD *)(a1 + 8) = 257;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 46);
    sub_1000F7EF8((id)a1);
    id v11 = v70;
    goto LABEL_68;
  }
  id v7 = (void *)_NRCopyLogObjectForNRUUID();
  int v8 = _NRLogIsLevelEnabled();

  if (v8)
  {
    id v9 = (void *)_NRCopyLogObjectForNRUUID();
    id v69 = v70[16];
    _NRLogWithArgs();
  }
  id v10 = v70[16];
  if ([v10 proxyCapability] == (id)1)
  {

LABEL_11:
    id v14 = v70[16];
    id v15 = [v14 proxyCapability];
LABEL_12:
    BOOL v16 = v15 == (id)1;
LABEL_13:
    char v17 = v16;
    *(unsigned char *)(a1 + 57) = v17;
    goto LABEL_17;
  }
  id v12 = v70[16];
  id v13 = [v12 proxyCapability];

  if (v13 == (id)2) {
    goto LABEL_11;
  }
  id v53 = v70[16];
  if ([v53 bluetoothRole] == (id)1)
  {

LABEL_75:
    id v14 = v70[16];
    id v15 = [v14 bluetoothRole];
    goto LABEL_12;
  }
  id v54 = v70[16];
  id v55 = [v54 bluetoothRole];

  if (v55 == (id)2) {
    goto LABEL_75;
  }
  id v56 = v70[16];
  if ([v56 bluetoothEndpointType] == (id)2)
  {

LABEL_79:
    id v14 = v70[16];
    BOOL v16 = [v14 bluetoothEndpointType] == (id)2;
    goto LABEL_13;
  }
  id v57 = v70[16];
  id v58 = [v57 bluetoothEndpointType];

  if (v58 == (id)1) {
    goto LABEL_79;
  }
  id v59 = (void *)sub_10014B46C(v70);
  uint64_t v60 = (void *)sub_10014B53C(v70);
  id v61 = [v59 compare:v60];

  if (v61 == (id)-1)
  {
    *(unsigned char *)(a1 + 57) = 1;
    goto LABEL_18;
  }
  id v62 = (void *)_NRCopyLogObjectForNRUUID();
  int v63 = _NRLogIsLevelEnabled();

  BOOL v18 = (BOOL)v70;
  if (v63)
  {
    id v14 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
LABEL_17:

LABEL_18:
    BOOL v18 = (BOOL)v70;
  }
  *(unsigned char *)(a1 + 48) = sub_100145D70(v18);
  *(unsigned char *)(a1 + 39) = sub_1000D944C(a1);
  id v19 = v70[16];
  *(unsigned char *)(a1 + 43) = [v19 handlesLinkRecommendations];

  id v20 = v70[16];
  if ([v20 isReachableOverWiFi]) {
    BOOL v21 = *(unsigned char *)(a1 + 57) != 0;
  }
  else {
    BOOL v21 = 0;
  }
  *(unsigned char *)(a1 + 44) = v21;

  id v22 = v70[16];
  *(unsigned char *)(a1 + 47) = [v22 allowsDirectToCloud];

  id v23 = v70[16];
  *(unsigned char *)(a1 + 45) = [v23 proxyCapability] == (id)1;

  id v24 = v70[16];
  *(unsigned char *)(a1 + 46) = [v24 proxyCapability] == (id)2;

  id v25 = v70[16];
  if ([v25 isReachableOverWiFi]) {
    BOOL v26 = *(unsigned char *)(a1 + 45) != 0;
  }
  else {
    BOOL v26 = 0;
  }
  *(unsigned char *)(a1 + 8) = v26;

  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 46);
  id v27 = v70[16];
  uint64_t v28 = [v27 allowedLinkSubtypes];
  unsigned int v29 = [v28 containsObject:&off_1001D49F0];

  if (v29) {
    sub_1000F7EF8((id)a1);
  }
  id v30 = v70[16];
  uint64_t v31 = [v30 allowedLinkTypes];
  if (!v31)
  {

    goto LABEL_31;
  }
  uint64_t v32 = (void *)v31;
  id v33 = v70[16];
  id v34 = [v33 allowedLinkTypes];
  unsigned int v35 = [v34 containsObject:&off_1001D4A08];

  if (v35)
  {
LABEL_31:
    *(unsigned char *)(a1 + 9) = 1;
    *(unsigned char *)(a1 + 54) = 1;
  }
  id v36 = v70[16];
  unsigned int v37 = [v36 version];

  if (v37)
  {
    id v38 = v70[16];
    *(unsigned char *)(a1 + 9) = [v38 providesPhoneCallRelaySupport];
  }
  id v39 = v70[16];
  uint64_t v40 = [v39 allowedLinkTypes];
  if (v40)
  {
    id v41 = (void *)v40;
    id v42 = v70[16];
    id v43 = [v42 allowedLinkTypes];
    unsigned int v44 = [v43 containsObject:&off_1001D4A20];

    if (!v44) {
      goto LABEL_39;
    }
  }
  else
  {
  }
  *(unsigned char *)(a1 + 55) = 1;
LABEL_39:
  self;
  if (!objc_opt_class() || !objc_opt_class()) {
    *(unsigned char *)(a1 + 55) = 0;
  }
  if (*(unsigned char *)(a1 + 46))
  {
    id v45 = v70[16];
    if ([v45 requiresReachability])
    {
      int v46 = *(unsigned __int8 *)(a1 + 48);

      if (!v46) {
        *(unsigned char *)(a1 + 60) = 1;
      }
    }
    else
    {
    }
  }
  sub_1000EE04C(a1);
  if (objc_opt_class() && *(unsigned char *)(a1 + 48))
  {
    int v47 = *(unsigned __int8 *)(a1 + 46);
    *(unsigned char *)(a1 + 12) = v47;
    if (v47) {
      char v48 = _os_feature_enabled_impl();
    }
    else {
      char v48 = 0;
    }
  }
  else
  {
    char v48 = 0;
    *(unsigned char *)(a1 + 12) = 0;
  }
  *(unsigned char *)(a1 + 13) = v48;
  if (*(unsigned char *)(a1 + 48)) {
    char v49 = _os_feature_enabled_impl();
  }
  else {
    char v49 = 0;
  }
  *(unsigned char *)(a1 + 62) = v49;
  id v11 = v70;
  if (*((unsigned char *)v70 + 15))
  {
    char v50 = 1;
    if (*((unsigned char *)v70 + 12)) {
      goto LABEL_57;
    }
  }
  else
  {
    if (*((unsigned char *)v70 + 14)) {
      BOOL v52 = 1;
    }
    else {
      BOOL v52 = *((unsigned __int16 *)v70 + 14) > 0x12u;
    }
    char v50 = v52;
    if (*((unsigned char *)v70 + 12))
    {
LABEL_57:
      char v51 = v50 ^ 1;
      if (!*((unsigned char *)v70 + 13)) {
        char v51 = 1;
      }
      goto LABEL_67;
    }
  }
  char v51 = 1;
LABEL_67:
  *(unsigned char *)(a1 + 69) = v51;
LABEL_68:
}

void sub_1000F8A48(uint64_t a1)
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v2 = (id)qword_1001F4A18;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000F9C2C;
  v4[3] = &unk_1001C8840;
  id v3 = *(void **)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  sub_1000B7F50((uint64_t)v2, v4);
}

void sub_1000F8B20(uint64_t a1)
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v2 = (id)qword_1001F4A18;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000F9AAC;
  v4[3] = &unk_1001C8840;
  id v3 = *(void **)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  sub_1000B7F50((uint64_t)v2, v4);
}

void sub_1000F8BF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(unsigned char *)(v1 + 14))
  {
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v3 = (unsigned __int8 *)(id)qword_1001F4A18;
    if (v3)
    {
      int v4 = v3[8];

      if (v4)
      {
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v5 = (id)qword_1001F4A18;
        id v6 = v5;
        if (v5) {
          id v7 = (void *)*((void *)v5 + 9);
        }
        else {
          id v7 = 0;
        }
        id v8 = v7;

        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v9 = (id)qword_1001F4A18;
        id v10 = v9;
        if (v9) {
          id v11 = (void *)*((void *)v9 + 10);
        }
        else {
          id v11 = 0;
        }
        id v12 = v11;

        if (v8 && v12)
        {
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v13 = (id)qword_1001F4A18;
          id v14 = v13;
          if (v13) {
            id v15 = (void *)*((void *)v13 + 8);
          }
          else {
            id v15 = 0;
          }
          id v16 = v15;
          char v17 = +[NWAddressEndpoint endpointWithHostname:v12 port:@"0"];
          id v62 = v17;
          BOOL v18 = +[NSArray arrayWithObjects:&v62 count:1];
          uint64_t v19 = *(void *)(a1 + 32);
          if (v19) {
            id v20 = *(void **)(v19 + 96);
          }
          else {
            id v20 = 0;
          }
          sub_1000D3DC0((uint64_t)v16, v18, v8, v20);
        }
      }
    }
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v21 = (id)qword_1001F4A18;
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_1000F9340;
    v48[3] = &unk_1001C8BA8;
    v48[4] = *(void *)(a1 + 32);
    sub_1000B7F50((uint64_t)v21, v48);

    uint64_t v22 = *(void *)(a1 + 32);
    if (v22 && *(unsigned char *)(v22 + 45) && *(unsigned char *)(v22 + 48) && !*(void *)(v22 + 488))
    {
      id v23 = sub_100017CF0([NRNetInfo alloc], *(void **)(v22 + 104));
      objc_initWeak(&location, (id)v22);
      objc_initWeak(&from, v23);
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472;
      v49[2] = sub_1000F9A08;
      v49[3] = &unk_1001C7448;
      objc_copyWeak(&v50, &location);
      objc_copyWeak(&v51, &from);
      id v24 = v49;
      id v25 = v24;
      if (v23)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v23 + 6));
        if (!v23[10])
        {
          id v26 = objc_retainBlock(v25);
          id v27 = (void *)*((void *)v23 + 7);
          *((void *)v23 + 7) = v26;
        }
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v23 + 6));
        if (!v23[10])
        {
          objc_initWeak(&v61, v23);
          id obj = (id)nw_path_create_evaluator_for_endpoint();
          id v28 = *((id *)v23 + 6);
          newValue = _NSConcreteStackBlock;
          uint64_t v55 = 3221225472;
          id v56 = sub_100018DE0;
          id v57 = &unk_1001C6210;
          objc_copyWeak(&v60, &v61);
          unsigned int v29 = (void **)obj;
          id v58 = v29;
          id v59 = v23;
          nw_path_evaluator_set_update_handler();

          nw_path_evaluator_start();
          if (qword_1001F4838 != -1) {
            dispatch_once(&qword_1001F4838, &stru_1001C62D0);
          }
          id v30 = (id)qword_1001F4830;
          char IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            if (qword_1001F4838 != -1) {
              dispatch_once(&qword_1001F4838, &stru_1001C62D0);
            }
            id v32 = (id)qword_1001F4830;
            _NRLogWithArgs();
          }
          objc_storeStrong((id *)v23 + 9, obj);
          sub_100019308((uint64_t)v23);

          objc_destroyWeak(&v60);
          objc_destroyWeak(&v61);
        }
      }
      else
      {
      }
      id v33 = *(void **)(v22 + 488);
      *(void *)(v22 + 488) = v23;

      objc_destroyWeak(&v51);
      objc_destroyWeak(&v50);
      objc_destroyWeak(&from);
      objc_destroyWeak(&location);
      uint64_t v22 = *(void *)(a1 + 32);
    }
    sub_1000F3EC0(v22);
    id v34 = *(void ***)(a1 + 32);
    if (v34 && sub_1000D95DC((uint64_t)v34))
    {
      unsigned int v35 = sub_10013DC5C((uint64_t)NRDLocalDevice, v34[12]);
      id v36 = v35;
      if (v35) {
        unsigned int v37 = (void *)*((void *)v35 + 16);
      }
      else {
        unsigned int v37 = 0;
      }
      id v38 = v37;
      id v39 = [v38 activeOperationalScope];

      uint64_t v40 = objc_alloc_init(NRLinkDirectorRequest);
      p_isa = (id *)&v40->super.isa;
      if (v40)
      {
        uint64_t v42 = 2;
        if (!v39) {
          uint64_t v42 = 10;
        }
        v40->_type = 6;
        *(_WORD *)&v40->_attemptImmediately = 1;
        v40->_timeout = v42;
        objc_storeStrong((id *)&v40->_timerDescription, @"start-device-discovery");
      }
      if (v36) {
        id v43 = (void *)v36[16];
      }
      else {
        id v43 = 0;
      }
      id v44 = v43;
      id v45 = [v44 allowedLinkTypes];
      if (p_isa) {
        objc_storeStrong(p_isa + 2, v45);
      }

      newValue = _NSConcreteStackBlock;
      uint64_t v55 = 3221225472;
      id v56 = sub_1000F99F0;
      id v57 = &unk_1001C8BA8;
      id v58 = v34;
      if (p_isa) {
        objc_setProperty_nonatomic_copy(p_isa, v46, &newValue, 48);
      }
      sub_1000D6720((uint64_t)v34, p_isa);
    }
  }
}

void sub_1000F92D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,id a27)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v29 - 128));
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&a26);
  objc_destroyWeak(&a27);
  _Unwind_Resume(a1);
}

void sub_1000F9340(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(unsigned char *)(v1 + 14))
  {
    id v2 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(v1 + 96));
    id v3 = v2;
    if (!v2) {
      goto LABEL_67;
    }
    id v4 = v2[16];

    if (!v4 || !*((unsigned char *)v3 + 9)) {
      goto LABEL_67;
    }
    if (*((unsigned char *)v3 + 15))
    {
      char v5 = 1;
      if (!*((unsigned char *)v3 + 12)) {
        goto LABEL_19;
      }
    }
    else
    {
      if (*((unsigned char *)v3 + 14)) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = *((unsigned __int16 *)v3 + 14) > 0x12u;
      }
      char v5 = v6;
      if (!*((unsigned char *)v3 + 12)) {
        goto LABEL_19;
      }
    }
    if (!*((unsigned char *)v3 + 13)) {
      char v5 = 0;
    }
    if (v5) {
      goto LABEL_67;
    }
LABEL_19:
    if (sub_100145D70((BOOL)v3))
    {
      if (qword_1001F4B80 == -1)
      {
        if (!byte_1001F4B78)
        {
LABEL_67:

          return;
        }
      }
      else
      {
        dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
        if (!byte_1001F4B78) {
          goto LABEL_67;
        }
      }
    }
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    if (qword_1001F4B80 == -1)
    {
      if (byte_1001F4B78)
      {
LABEL_26:
        uint64_t v10 = v1;
        unsigned int v11 = 5;
        char v12 = 0;
LABEL_66:
        sub_1000D8CD8(v10, v11, v12);
        goto LABEL_67;
      }
    }
    else
    {
      dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
      if (byte_1001F4B78) {
        goto LABEL_26;
      }
    }
    id v13 = v3[16];
    id v14 = [v13 allowedLinkTypes];
    if ([v14 containsObject:&off_1001D4A08] && *((unsigned char *)v3 + 9) && *((unsigned char *)v3 + 20))
    {
      int v15 = *((unsigned __int8 *)v3 + 10);

      if (!v15) {
        sub_1000D8CD8(v1, 1u, 0);
      }
    }
    else
    {
    }
    sub_1000D63BC(v1);
    id v16 = v3[16];
    char v17 = [v16 allowedLinkTypes];
    unsigned int v18 = [v17 containsObject:&off_1001D4A38];

    p_cache = &OBJC_METACLASS___NRDiscoveryManager.cache;
    if (v18)
    {
      id v20 = *(id *)(v1 + 96);
      self;
      id v21 = sub_10014B3B8((uint64_t)NRDLocalDevice, v20, &off_1001D4C18);

      if (v21)
      {
        id v22 = [v21 copyCEndpoint];
        evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint();

        id v24 = (void *)nw_path_evaluator_copy_path();
        id v25 = (void *)_NRCopyLogObjectForNRUUID();
        int v26 = _NRLogIsLevelEnabled();

        if (v26)
        {
          id v27 = *(id *)(v1 + 96);
          id v28 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        uint64_t v29 = nw_path_copy_interface();
        name = nw_interface_get_name(v29);
        if (name)
        {
          uint64_t v31 = name;
          self;
          id v59 = evaluator_for_endpoint;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v32 = (id)qword_1001F4A18;
          id v33 = v32;
          if (v32) {
            id v34 = (void *)*((void *)v32 + 8);
          }
          else {
            id v34 = 0;
          }
          id v35 = v34;
          id v61 = v21;
          id v36 = +[NSArray arrayWithObjects:&v61 count:1];
          unsigned int v37 = +[NSString stringWithUTF8String:v31];
          sub_1000D3DC0((uint64_t)v35, v36, v37, *(void **)(v1 + 96));

          p_cache = (void **)(&OBJC_METACLASS___NRDiscoveryManager + 16);
          evaluator_for_endpoint = v59;
        }
      }
      else
      {
        sub_1000D8CD8(v1, 5u, 0);
      }
    }
    id v38 = v3[16];
    id v39 = [v38 allowedLinkSubtypes];
    unsigned int v40 = [v39 containsObject:&off_1001D4A50];

    if (v40)
    {
      id v41 = *(id *)(v1 + 96);
      self;
      uint64_t v42 = sub_10014B3B8((uint64_t)(p_cache + 373), v41, &off_1001D4BD0);

      if (v42)
      {
        id v43 = [v42 hostname];
        self;
        if (qword_1001F47E8 != -1) {
          dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
        }
        id v44 = (id)qword_1001F47E0;
        id v45 = @"62743";
        if (!v44) {
          id v45 = 0;
        }
        int v46 = v45;
        int v47 = +[NWAddressEndpoint endpointWithHostname:v43 port:v46];

        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 104));
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v48 = (id)qword_1001F4A18;
        char v49 = v48;
        if (v48) {
          id v50 = (void *)*((void *)v48 + 6);
        }
        else {
          id v50 = 0;
        }
        id v51 = v50;

        id v60 = v47;
        BOOL v52 = +[NSArray arrayWithObjects:&v60 count:1];
        sub_1001554AC(v51, v52, *(void **)(v1 + 96));

        if (*(unsigned char *)(v1 + 48)) {
          sub_1000DDB4C(v1, 1, 0);
        }
      }
      else
      {
        sub_1000D8CD8(v1, 2u, 101);
      }
    }
    id v53 = v3[16];
    id v54 = [v53 allowedLinkSubtypes];
    unsigned int v55 = [v54 containsObject:&off_1001D4A68];

    if (v55) {
      sub_1000D8CD8(v1, 2u, 103);
    }
    id v56 = v3[16];
    id v57 = [v56 allowedLinkSubtypes];
    unsigned int v58 = [v57 containsObject:&off_1001D4A80];

    if (!v58) {
      goto LABEL_67;
    }
    uint64_t v10 = v1;
    unsigned int v11 = 2;
    char v12 = 104;
    goto LABEL_66;
  }
}

void sub_1000F99F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1 || !*(void *)(v1 + 128)) {
    sub_1000EA8DC(v1);
  }
}

void sub_1000F9A08(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    BOOL v3 = !*((unsigned char *)WeakRetained + 14) || v2 == 0;
    if (!v3 && *((void **)WeakRetained + 61) == v2 && *((void *)WeakRetained + 62) != v2[4]) {
      sub_1000E0F64((uint64_t)WeakRetained, *((void **)WeakRetained + 16));
    }
  }
}

void sub_1000F9AAC(uint64_t a1)
{
  id v2 = *(dispatch_queue_t **)(a1 + 32);
  if (v2)
  {
    dispatch_assert_queue_V2(v2[13]);
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v3 = (id)qword_1001F4A18;
    id v4 = v3;
    if (v3) {
      char v5 = (void *)*((void *)v3 + 6);
    }
    else {
      char v5 = 0;
    }
    BOOL v6 = v5;

    if (v6) {
      id v2 = (dispatch_queue_t *)v6[11];
    }
    else {
      id v2 = 0;
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  id v7 = v2;

  if (!v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v8 + 104));
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v9 = (id)qword_1001F4A18;
      uint64_t v10 = v9;
      if (v9) {
        unsigned int v11 = (void *)*((void *)v9 + 6);
      }
      else {
        unsigned int v11 = 0;
      }
      id v12 = v11;

      sub_1001552AC((uint64_t)v12, *(void **)(a1 + 40));
    }
    else
    {
      id v12 = 0;
      sub_1001552AC(0, *(void **)(a1 + 40));
    }
  }
}

void sub_1000F9C2C(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 104));
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v2 = (id)qword_1001F4A18;
  id v3 = v2;
  if (v2) {
    id v4 = (void *)*((void *)v2 + 6);
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;

  BOOL v6 = sub_1001558C0((uint64_t)v5, *(void **)(*(void *)(a1 + 32) + 96));

  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      if (v8)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v8 + 104));
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v9 = (id)qword_1001F4A18;
        uint64_t v10 = v9;
        if (v9) {
          unsigned int v11 = (void *)*((void *)v9 + 6);
        }
        else {
          unsigned int v11 = 0;
        }
        id v12 = v11;

        uint64_t v7 = *(void *)(a1 + 40);
      }
      else
      {
        id v12 = 0;
      }
      uint64_t v14 = v7;
      id v13 = +[NSArray arrayWithObjects:&v14 count:1];
      sub_1001554AC(v12, v13, *(void **)(*(void *)(a1 + 32) + 96));
    }
  }
}

void sub_1000F9DD4(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (*(unsigned char *)(a1 + 14))
    {
      *(unsigned char *)(a1 + 14) = 0;
      id v2 = [(id)a1 description];
      sub_10012F648(*(void **)(a1 + 96), 1502, 0, v2);

      self;
      if (qword_1001F48B0 != -1) {
        dispatch_once(&qword_1001F48B0, &stru_1001C64C0);
      }
      id v3 = (id)qword_1001F48A8;
      id v4 = (id *)v3;
      if (v3)
      {
        id v5 = *((void *)v3 + 1);
        id v6 = *(id *)(a1 + 96);
        dispatch_assert_queue_V2(v5);
        [v4[2] setObject:0 forKeyedSubscript:v6];
      }
      uint64_t v7 = *(void **)(a1 + 584);
      if (v7 && ([*(id *)(a1 + 584) cancelled] & 1) == 0)
      {
        [v7 setCancelled:1];
        [v7 setUpdateBlock:0];
        [v7 invalidateAggregateStatsTimerSource];
        [v7 reportEvent:30003];
      }
      uint64_t v8 = *(void **)(a1 + 624);
      *(void *)(a1 + 624) = 0;

      id v9 = *(void **)(a1 + 616);
      *(void *)(a1 + 616) = 0;

      *(_OWORD *)(a1 + 592) = 0u;
      uint64_t v10 = *(void **)(a1 + 208);
      if (v10)
      {
        [v10 setDelegate:0];
        [*(id *)(a1 + 208) destroy];
        unsigned int v11 = *(void **)(a1 + 208);
        *(void *)(a1 + 208) = 0;
      }
      *(unsigned char *)(a1 + 23) = 0;
      *(_DWORD *)(a1 + 19) = 0;
      *(_DWORD *)(a1 + 25) = 0;
      *(unsigned char *)(a1 + 29) = 0;
      sub_1000DB474(a1, 0);
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      sub_1000DDB4C(a1, 0, 0xAu);
      [*(id *)(a1 + 560) cancel];
      id v12 = *(void **)(a1 + 560);
      *(void *)(a1 + 560) = 0;

      [*(id *)(a1 + 552) cancel];
      id v13 = *(void **)(a1 + 552);
      *(void *)(a1 + 552) = 0;

      sub_1000E5970(a1);
      uint64_t v14 = *(void *)(a1 + 488);
      if (v14)
      {
        *(unsigned char *)(v14 + 10) = 1;
        if (*(void *)(v14 + 72))
        {
          nw_path_evaluator_cancel();
          int v15 = *(void **)(v14 + 72);
          *(void *)(v14 + 72) = 0;
        }
        id v16 = *(void **)(a1 + 488);
        *(void *)(a1 + 488) = 0;
      }
      uint64_t v17 = *(void *)(a1 + 192);
      if (v17)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v17 + 48));
        self;
        if (qword_1001F4D28 != -1) {
          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        }
        id v18 = (id)qword_1001F4D20;
        sub_10013502C((uint64_t)v18, *(void **)(v17 + 72));

        self;
        if (qword_1001F4D28 != -1) {
          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        }
        id v19 = (id)qword_1001F4D20;
        id v20 = (id *)v19;
        if (v19)
        {
          dispatch_assert_queue_V2(*((dispatch_queue_t *)v19 + 1));
          if (([v20[2] apply] & 1) == 0) {
            sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v21, v22, v23, (uint64_t)v87);
          }
        }

        id v24 = *(void **)(v17 + 56);
        if (v24)
        {
          if (([v24 unregisterNetworkAgent] & 1) == 0)
          {
            id v25 = (void *)_NRCopyLogObjectForNRUUID();
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              id v27 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
          }
          id v28 = *(void **)(v17 + 56);
          *(void *)(v17 + 56) = 0;

          uint64_t v29 = *(void **)(v17 + 40);
          id v30 = *(id *)(v17 + 80);
          id v31 = v29;
          id v32 = [(id)v17 agentUUID];
          id v33 = [v32 UUIDString];
          sub_10012F648(v31, 17003, v30, v33);
        }
        *(unsigned char *)(v17 + 14) = 0;
        id v34 = *(void **)(a1 + 192);
        *(void *)(a1 + 192) = 0;
      }
      uint64_t v35 = *(void *)(a1 + 200);
      if (v35)
      {
        sub_10006BA14(v35);
        id v36 = *(void **)(a1 + 200);
        *(void *)(a1 + 200) = 0;
      }
      uint64_t v37 = *(void *)(a1 + 384);
      if (v37)
      {
        sub_10006E7E0(v37);
        id v38 = *(void **)(a1 + 384);
        *(void *)(a1 + 384) = 0;
      }
      uint64_t v39 = *(void *)(a1 + 440);
      if (v39)
      {
        sub_100063E88(v39);
        unsigned int v40 = *(void **)(a1 + 440);
        *(void *)(a1 + 440) = 0;
      }
      id v41 = *(unsigned char **)(a1 + 632);
      if (v41)
      {
        sub_10010273C(v41);
        uint64_t v42 = *(void **)(a1 + 632);
        *(void *)(a1 + 632) = 0;
      }
      sub_1000F5E44(a1);
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v43 = (id)qword_1001F4A18;
      sub_1000B8E90((uint64_t)v43, 0, *(void **)(a1 + 96));

      sub_1000F4730(a1);
      id v44 = *(void **)(a1 + 656);
      *(void *)(a1 + 656) = 0;

      if (*(unsigned char *)(a1 + 56))
      {
        id v45 = *(void **)(a1 + 512);
        *(void *)(a1 + 512) = 0;

        int v46 = *(void **)(a1 + 520);
        *(void *)(a1 + 520) = 0;

        self;
        if (qword_1001F4D28 != -1) {
          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        }
        id v47 = (id)qword_1001F4D20;
        sub_10013502C((uint64_t)v47, *(void **)(a1 + 288));

        if (*(unsigned char *)(a1 + 56))
        {
          id v48 = *(void **)(a1 + 504);
          *(void *)(a1 + 504) = 0;

          char v49 = *(void **)(a1 + 528);
          *(void *)(a1 + 528) = 0;

          self;
          if (qword_1001F4D28 != -1) {
            dispatch_once(&qword_1001F4D28, &stru_1001C8658);
          }
          id v50 = (id)qword_1001F4D20;
          sub_10013502C((uint64_t)v50, *(void **)(a1 + 280));
        }
      }
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v51 = (id)qword_1001F4D20;
      sub_10013502C((uint64_t)v51, *(void **)(a1 + 272));

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v52 = (id)qword_1001F4D20;
      sub_10013502C((uint64_t)v52, *(void **)(a1 + 312));

      if (*(void *)(a1 + 296))
      {
        self;
        if (qword_1001F4D28 != -1) {
          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        }
        id v53 = (id)qword_1001F4D20;
        sub_10013502C((uint64_t)v53, *(void **)(a1 + 296));
      }
      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v54 = (id)qword_1001F4D20;
      sub_10013502C((uint64_t)v54, *(void **)(a1 + 544));

      if (*(void *)(a1 + 304))
      {
        self;
        if (qword_1001F4D28 != -1) {
          dispatch_once(&qword_1001F4D28, &stru_1001C8658);
        }
        id v55 = (id)qword_1001F4D20;
        sub_10013502C((uint64_t)v55, *(void **)(a1 + 304));
      }
      id v56 = *(void **)(a1 + 664);
      *(void *)(a1 + 664) = 0;

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v57 = (id)qword_1001F4D20;
      sub_10013502C((uint64_t)v57, *(void **)(a1 + 680));

      self;
      if (qword_1001F4D28 != -1) {
        dispatch_once(&qword_1001F4D28, &stru_1001C8658);
      }
      id v58 = (id)qword_1001F4D20;
      id v59 = (id *)v58;
      if (v58)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v58 + 1));
        if (([v59[2] apply] & 1) == 0) {
          sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v60, v61, v62, (uint64_t)v87);
        }
      }

      int v63 = *(void **)(a1 + 424);
      *(void *)(a1 + 424) = 0;

      uint64_t v64 = *(void *)(a1 + 416);
      if (v64)
      {
        sub_1001272AC(v64);
        long long v65 = *(void **)(a1 + 416);
        *(void *)(a1 + 416) = 0;
      }
      id v66 = *(void **)(a1 + 240);
      *(void *)(a1 + 240) = 0;

      uint64_t v67 = *(NSObject **)(a1 + 360);
      if (v67)
      {
        dispatch_source_cancel(v67);
        id v68 = *(void **)(a1 + 360);
        *(void *)(a1 + 360) = 0;
      }
      [*(id *)(a1 + 120) removeAllObjects];
      uint64_t v69 = *(void *)(a1 + 184);
      if (v69)
      {
        id v70 = *(NSObject **)(v69 + 24);
        if (v70) {
          dispatch_assert_queue_V2(v70);
        }
        int v71 = (void *)_NRCopyLogObjectForNRUUID();
        int v72 = _NRLogIsLevelEnabled();

        if (v72)
        {
          id v73 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v89 = 77;
          uint64_t v90 = v69;
          id v87 = "";
          uint64_t v88 = "-[NRDevicePreferencesManager cancel]";
          _NRLogWithArgs();
        }
        [*(id *)(v69 + 32) removeAllObjects:v87, v88, v89, v90];
        sub_100120FE8(v69);
        [*(id *)(v69 + 40) removeAllObjects];
        sub_10012179C(v69);
        int v74 = *(void **)(a1 + 184);
      }
      else
      {
        int v74 = 0;
      }
      *(void *)(a1 + 184) = 0;

      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      id v75 = *(id *)(a1 + 168);
      id v76 = [v75 countByEnumeratingWithState:&v96 objects:v101 count:16];
      if (v76)
      {
        id v77 = v76;
        uint64_t v78 = *(void *)v97;
        do
        {
          for (i = 0; i != v77; i = (char *)i + 1)
          {
            if (*(void *)v97 != v78) {
              objc_enumerationMutation(v75);
            }
            xpc_connection_cancel(*(xpc_connection_t *)(*((void *)&v96 + 1) + 8 * i));
          }
          id v77 = [v75 countByEnumeratingWithState:&v96 objects:v101 count:16];
        }
        while (v77);
      }

      [*(id *)(a1 + 168) removeAllObjects];
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      id v80 = *(id *)(a1 + 176);
      id v81 = [v80 countByEnumeratingWithState:&v92 objects:v100 count:16];
      if (v81)
      {
        id v82 = v81;
        uint64_t v83 = *(void *)v93;
        do
        {
          for (j = 0; j != v82; j = (char *)j + 1)
          {
            if (*(void *)v93 != v83) {
              objc_enumerationMutation(v80);
            }
            xpc_connection_cancel(*(xpc_connection_t *)(*((void *)&v92 + 1) + 8 * (void)j));
          }
          id v82 = [v80 countByEnumeratingWithState:&v92 objects:v100 count:16];
        }
        while (v82);
      }

      [*(id *)(a1 + 176) removeAllObjects];
      sub_1000E9FA4(a1);
    }
    else
    {
      id v85 = (void *)_NRCopyLogObjectForNRUUID();
      int v86 = _NRLogIsLevelEnabled();

      if (v86)
      {
        id v91 = (id)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1000FA864(uint64_t a1, int a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
  if (*(unsigned __int8 *)(a1 + 17) != a2)
  {
    sub_1000D85E8(a1, 1033, @"%d -> %d", v4, v5, v6, v7, v8, *(unsigned __int8 *)(a1 + 17));
    *(unsigned char *)(a1 + 17) = a2;
    if (a2) {
      sub_1000DE254(a1, @"Device setup in progress", v9, v10, v11, v12, v13, v14, v24);
    }
    if (*(unsigned char *)(a1 + 8) && !*(unsigned char *)(a1 + 17))
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v15 = (id)qword_1001F4A18;
      id v16 = v15;
      if (v15) {
        uint64_t v17 = (void *)*((void *)v15 + 6);
      }
      else {
        uint64_t v17 = 0;
      }
      id v25 = v17;

      id v18 = v25;
      if (v25
        && (id v19 = v25[3],
            dispatch_assert_queue_V2(v19),
            v19,
            id v18 = v25,
            *((int *)v25 + 10) >= 1))
      {
        int v20 = *(unsigned __int8 *)(a1 + 15);

        if (!v20)
        {
          uint64_t v21 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            uint64_t v23 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
          [(id)a1 preferWiFiRequestAvailable];
        }
      }
      else
      {
      }
    }
  }
}

void sub_1000FAA3C(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 104));
    if (v6)
    {
      [*(id *)(a1 + 168) addObject:v6];
    }
    else
    {
      id v3 = sub_1000D8B78();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v5 = sub_1000D8B78();
        _NRLogWithArgs();
      }
    }
  }
}

uint64_t sub_1000FAAE8(uint64_t a1, const char *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  if (!strcmp(a2, kNRXPCCommNotificationTypeXPCommDictionary))
  {
    if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
    {
      uint64_t v12 = _CFXPCCreateCFObjectFromXPCObject();
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = v12;

      id v15 = (void *)_NRCopyLogObjectForNRUUID();
      int v16 = _NRLogIsLevelEnabled();

      if (v16)
      {
        uint64_t v17 = *(void **)(a1 + 32);
        if (v17) {
          uint64_t v17 = (void *)v17[12];
        }
        id v18 = v17;
        uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();

        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
      int v10 = _NRLogIsLevelEnabled();

      if (v10)
      {
        uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
LABEL_11:
      }
    }
  }

  return 1;
}

void sub_1000FACEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && *(unsigned char *)(a1 + 14))
  {
    id v4 = [*(id *)(a1 + 152) count];
    if (!v3 || v4)
    {
      id v41 = v3;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      id v42 = *(id *)(a1 + 160);
      id v46 = [v42 countByEnumeratingWithState:&v60 objects:v66 count:16];
      if (v46)
      {
        uint64_t v45 = *(void *)v61;
        id v44 = (const char *)kNRXPCCommNotificationTypeXPCommDictionary;
        id v43 = (const char *)nrXPCKeyXPCCommNotification;
        do
        {
          uint64_t v8 = 0;
          do
          {
            if (*(void *)v61 != v45) {
              objc_enumerationMutation(v42);
            }
            xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
            if (!v9)
            {
              if (qword_1001F4AA8 != -1) {
                dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
              }
              id v33 = (id)qword_1001F4AA0;
              int IsLevelEnabled = _NRLogIsLevelEnabled();

              if (!IsLevelEnabled) {
                goto LABEL_51;
              }
              if (qword_1001F4AA8 == -1) {
                goto LABEL_49;
              }
LABEL_54:
              dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
LABEL_49:
              id v37 = (id)qword_1001F4AA0;
              goto LABEL_50;
            }
            int v10 = v9;
            xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
            if (!v11)
            {
              if (qword_1001F4AA8 != -1) {
                dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
              }
              id v35 = (id)qword_1001F4AA0;
              int v36 = _NRLogIsLevelEnabled();

              if (!v36) {
                goto LABEL_51;
              }
              if (qword_1001F4AA8 != -1) {
                goto LABEL_54;
              }
              goto LABEL_49;
            }
            uint64_t v12 = v11;
            uint64_t v50 = v8;
            id v47 = (void *)_CFXPCCreateXPCObjectFromCFObject();
            xpc_dictionary_set_value(v12, v44, v47);
            id v48 = v12;
            xpc_dictionary_set_value(v10, v43, v12);
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            id v13 = *(id *)(a1 + 152);
            id v14 = [v13 countByEnumeratingWithState:&v56 objects:v65 count:16];
            if (v14)
            {
              id v15 = v14;
              uint64_t v16 = *(void *)v57;
              do
              {
                for (i = 0; i != v15; i = (char *)i + 1)
                {
                  if (*(void *)v57 != v16) {
                    objc_enumerationMutation(v13);
                  }
                  xpc_connection_send_message(*(xpc_connection_t *)(*((void *)&v56 + 1) + 8 * i), v10);
                  id v18 = (void *)_NRCopyLogObjectForNRUUID();
                  int v19 = _NRLogIsLevelEnabled();

                  if (v19)
                  {
                    int v20 = (void *)_NRCopyLogObjectForNRUUID();
                    _NRLogWithArgs();
                  }
                }
                id v15 = [v13 countByEnumeratingWithState:&v56 objects:v65 count:16];
              }
              while (v15);
            }

            uint64_t v8 = v50 + 1;
          }
          while ((id)(v50 + 1) != v46);
          id v46 = [v42 countByEnumeratingWithState:&v60 objects:v66 count:16];
        }
        while (v46);
      }

      [*(id *)(a1 + 160) removeAllObjects];
      id v3 = v41;
      if (v41)
      {
        xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
        if (!v21 || (v22 = v21, (xpc_object_t v23 = xpc_dictionary_create(0, 0, 0)) == 0))
        {
          while (1)
          {
            id v39 = sub_1000D8B78();
            int v40 = _NRLogIsLevelEnabled();

            if (v40)
            {
              id v37 = sub_1000D8B78();
LABEL_50:
              _NRLogWithArgs();
            }
LABEL_51:
            _os_log_pack_size();
            __chkstk_darwin();
            __error();
            uint64_t v38 = _os_log_pack_fill();
            sub_1000DFF90(v38, (uint64_t)"nr_xpc_dictionary_create");
            sub_1000D8B78();
            _NRLogAbortWithPack();
          }
        }
        uint64_t v24 = v23;
        char v49 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        xpc_dictionary_set_value(v24, kNRXPCCommNotificationTypeXPCommDictionary, v49);
        id v51 = v24;
        xpc_dictionary_set_value(v22, nrXPCKeyXPCCommNotification, v24);
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        id v25 = *(id *)(a1 + 152);
        id v26 = [v25 countByEnumeratingWithState:&v52 objects:v64 count:16];
        if (v26)
        {
          id v27 = v26;
          uint64_t v28 = *(void *)v53;
          do
          {
            for (j = 0; j != v27; j = (char *)j + 1)
            {
              if (*(void *)v53 != v28) {
                objc_enumerationMutation(v25);
              }
              xpc_connection_send_message(*(xpc_connection_t *)(*((void *)&v52 + 1) + 8 * (void)j), v22);
              id v30 = (void *)_NRCopyLogObjectForNRUUID();
              int v31 = _NRLogIsLevelEnabled();

              if (v31)
              {
                id v32 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();
              }
            }
            id v27 = [v25 countByEnumeratingWithState:&v52 objects:v64 count:16];
          }
          while (v27);
        }

        id v3 = v41;
      }
    }
    else
    {
      id v5 = *(void **)(a1 + 160);
      if (!v5)
      {
        id v6 = objc_alloc_init((Class)NSMutableArray);
        uint64_t v7 = *(void **)(a1 + 160);
        *(void *)(a1 + 160) = v6;

        id v5 = *(void **)(a1 + 160);
      }
      [v5 addObject:v3];
    }
  }
}

void sub_1000FB3D0(unsigned char *a1, int a2)
{
  if (a1)
  {
    char v2 = a2;
    if ((a1[67] != 0) != a2 && a1[14] && a1[46] && a1[48])
    {
      if (qword_1001F4AA8 != -1) {
        dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4AA8 != -1) {
          dispatch_once(&qword_1001F4AA8, &stru_1001C76B0);
        }
        _NRLogWithArgs();
      }
      a1[67] = v2;
      sub_1000E5B48((uint64_t)a1);
    }
  }
}

void sub_1000FB4F0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    char v2 = +[NRPairedDeviceRegistry sharedInstance];
    id v3 = [v2 deviceForBluetoothID:*(void *)(a1 + 32)];
    if (!v3)
    {
      id v30 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v32 = *(void **)(a1 + 40);
        if (v32) {
          id v32 = (void *)v32[12];
        }
        id v33 = v32;
        id v34 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      uint64_t v35 = *(void *)(a1 + 40);
      if (v35) {
        *(unsigned char *)(v35 + 11) = 0;
      }
      goto LABEL_30;
    }
    id v4 = [objc_alloc((Class)NPSDomainAccessor) initWithDomain:@"com.apple.system.prefs" pairedDevice:v3];
    if (!v4)
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      int v6 = _NRLogIsLevelEnabled();

      if (v6)
      {
        uint64_t v7 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v44 = 8205;
        id v48 = v3;
        int v36 = "";
        int v40 = "-[NRDDeviceConductor updatePerpetualStandaloneMeadowStateWithDispatchGroup:]_block_invoke_2";
        _NRLogWithArgs();
      }
      uint64_t v8 = *(void *)(a1 + 40);
      if (v8) {
        *(unsigned char *)(v8 + 11) = 0;
      }
    }
    id v9 = [v4 copyKeyList:v36, v40, v44, v48];
    int v10 = (void *)_NRCopyLogObjectForNRUUID();
    int v11 = _NRLogIsLevelEnabled();

    if (v11)
    {
      uint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v45 = 8210;
      id v49 = v9;
      id v37 = "";
      id v41 = "-[NRDDeviceConductor updatePerpetualStandaloneMeadowStateWithDispatchGroup:]_block_invoke_2";
      _NRLogWithArgs();
    }
    unsigned __int8 v54 = 0;
    unsigned int v13 = [v4 BOOLForKey:@"PerpetualMeadowStandaloneWiFiEnabled" keyExistsAndHasValidFormat:&v54 v37, v41, v45, v49];
    id v14 = (void *)_NRCopyLogObjectForNRUUID();
    int v15 = _NRLogIsLevelEnabled();

    if (v15)
    {
      uint64_t v16 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v52 = v54;
      uint64_t v46 = 8215;
      uint64_t v50 = v13;
      uint64_t v38 = "";
      id v42 = "-[NRDDeviceConductor updatePerpetualStandaloneMeadowStateWithDispatchGroup:]_block_invoke_2";
      _NRLogWithArgs();
    }
    unsigned __int8 v54 = 0;
    unsigned int v17 = [v4 BOOLForKey:@"PerpetualMeadowStandaloneCellularEnabled" keyExistsAndHasValidFormat:&v54 v38, v42, v46, v50, v52];
    id v18 = (void *)_NRCopyLogObjectForNRUUID();
    int v19 = _NRLogIsLevelEnabled();

    if (v19)
    {
      int v20 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v53 = v54;
      uint64_t v47 = 8220;
      uint64_t v51 = v17;
      id v39 = "";
      id v43 = "-[NRDDeviceConductor updatePerpetualStandaloneMeadowStateWithDispatchGroup:]_block_invoke_2";
      _NRLogWithArgs();
    }
    [v4 invalidate:v39, v43, v47, v51, v53];
    uint64_t v21 = *(void *)(a1 + 40);
    if (v21)
    {
      int v22 = *(unsigned char *)(v21 + 11) & 1;
      *(unsigned char *)(v21 + 11) = v13 | v17;
      uint64_t v23 = *(void *)(a1 + 40);
      if (v23)
      {
        if ((v22 != 0) != (*(unsigned char *)(v23 + 11) & 1)) {
          goto LABEL_17;
        }
      }
      else if (v22)
      {
LABEL_17:
        uint64_t v24 = (void *)_NRCopyLogObjectForNRUUID();
        int v25 = _NRLogIsLevelEnabled();

        if (v25)
        {
          id v26 = *(void **)(a1 + 40);
          if (v26) {
            id v26 = (void *)v26[12];
          }
          id v27 = v26;
          uint64_t v28 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
      }
    }

LABEL_30:
    return;
  }
  uint64_t v29 = *(void *)(a1 + 40);
  if (v29) {
    *(unsigned char *)(v29 + 11) = 0;
  }
}

void sub_1000FB970(id a1)
{
  uint64_t v1 = _NRCopySerialQueueAttr();
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.networkrelay.NanoRegistry", v1);

  if (!v2)
  {
    id v4 = sub_1000D8B78();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = sub_1000D8B78();
      _NRLogWithArgs();
    }
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v8 + 4) = "nr_dispatch_queue_create";
    *(_WORD *)(v8 + 12) = 2080;
    *(void *)(v8 + 14) = "com.apple.networkrelay.NanoRegistry";
    sub_1000D8B78();
    _NRLogAbortWithPack();
  }
  id v3 = (void *)qword_1001F4A90;
  qword_1001F4A90 = (uint64_t)v2;
}

void *sub_1000FBBCC(void *a1)
{
  if (!a1) {
    return 0;
  }
  v15.receiver = a1;
  v15.super_class = (Class)NRDIDSKeyManager;
  uint64_t v1 = [super init];
  if (!v1)
  {
    id v8 = sub_1000FBE00();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = sub_1000FBE00();
      _NRLogWithArgs();
    }
    goto LABEL_10;
  }
  dispatch_queue_t v2 = v1;
  id v3 = sub_10015BD9C();
  id v4 = (void *)v2[2];
  v2[2] = v3;

  id v5 = objc_alloc_init((Class)NSMutableDictionary);
  id v6 = (void *)v2[6];
  v2[6] = v5;

  if (!v2[6])
  {
    id v11 = sub_1000FBE00();
    int v12 = _NRLogIsLevelEnabled();

    if (v12)
    {
      id v13 = sub_1000FBE00();
      _NRLogWithArgs();
    }
LABEL_10:
    _os_log_pack_size();
    __error();
    uint64_t v14 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v14 = 136446210;
    *(void *)(v14 + 4) = "-[NRDIDSKeyManager initInternal]";
    sub_1000FBE00();
    _NRLogAbortWithPack();
    return 0;
  }
  return v2;
}

id sub_1000FBE00()
{
  if (qword_1001F4AC8 != -1) {
    dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
  }
  v0 = (void *)qword_1001F4AC0;

  return v0;
}

void sub_1000FBE54(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4AC0;
  qword_1001F4AC0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000FBE98(id a1)
{
  os_log_t v1 = sub_1000FBBCC([NRDIDSKeyManager alloc]);
  uint64_t v2 = qword_1001F4AB0;
  qword_1001F4AB0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000FBED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    id v4 = [v3 fullIdentity];
    if (v4)
    {
      a1 = *((void *)v4 + 3);
      if (a1)
      {
        CFRetain(*((CFTypeRef *)v4 + 3));
        goto LABEL_5;
      }
      id v8 = sub_1000FBE00();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled) {
        goto LABEL_9;
      }
    }
    else
    {
      id v6 = sub_1000FBE00();
      int v7 = _NRLogIsLevelEnabled();

      if (v7)
      {
LABEL_9:
        id v10 = sub_1000FBE00();
        _NRLogWithArgs();
      }
    }
    a1 = 0;
  }
LABEL_5:

  return a1;
}

uint64_t sub_1000FBFA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    id v4 = [v3 publicIdentity];
    if (v4)
    {
      a1 = *((void *)v4 + 2);
      if (a1)
      {
        CFRetain(*((CFTypeRef *)v4 + 2));
        goto LABEL_5;
      }
      id v8 = sub_1000FBE00();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled) {
        goto LABEL_9;
      }
    }
    else
    {
      id v6 = sub_1000FBE00();
      int v7 = _NRLogIsLevelEnabled();

      if (v7)
      {
LABEL_9:
        id v10 = sub_1000FBE00();
        _NRLogWithArgs();
      }
    }
    a1 = 0;
  }
LABEL_5:

  return a1;
}

void sub_1000FC078(uint64_t a1, int a2)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    if (*(unsigned char *)(a1 + 8))
    {
      if (a2) {
        *(unsigned char *)(a1 + 9) = 1;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 8) = 1;
      if (!*(void *)(a1 + 56))
      {
        id v4 = objc_alloc_init(NRAnalyticsKeyManager);
        id v5 = *(void **)(a1 + 56);
        *(void *)(a1 + 56) = v4;
      }
      sub_10012F648(0, 5500, &stru_1001C9648, 0);
      uint64_t v6 = mach_absolute_time();
      uint64_t v7 = *(void *)(a1 + 56);
      if (v7) {
        *(void *)(v7 + 24) = v6;
      }
      if (qword_1001F4AD0 != -1) {
        dispatch_once(&qword_1001F4AD0, &stru_1001C77D8);
      }
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000FC1A4;
      block[3] = &unk_1001C8BA8;
      void block[4] = a1;
      dispatch_async((dispatch_queue_t)qword_1001F4AD8, block);
    }
  }
}

uint64_t sub_1000FC1A4()
{
  if (qword_1001F4AD0 != -1) {
    dispatch_once(&qword_1001F4AD0, &stru_1001C77D8);
  }
  return IDSLocalPairingGetPairingRecordsWithCompletionBlock();
}

void sub_1000FC244(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    int v12 = *(NSObject **)(v11 + 16);
  }
  else {
    int v12 = 0;
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000FC344;
  v16[3] = &unk_1001C7920;
  v16[4] = v11;
  id v17 = v9;
  id v18 = v7;
  id v19 = v8;
  id v13 = v8;
  id v14 = v7;
  id v15 = v10;
  dispatch_async(v12, v16);
}

id sub_1000FC344(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(NSObject **)(v2 + 16);
  }
  else {
    id v3 = 0;
  }
  dispatch_assert_queue_V2(v3);
  uint64_t v4 = *(void *)(v1 + 32);
  if (v4) {
    *(unsigned char *)(v4 + 8) = 0;
  }
  uint64_t v5 = mach_absolute_time();
  uint64_t v11 = *(void *)(v1 + 32);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 56);
    if (v12) {
      *(void *)(v12 + 32) = v5;
    }
  }
  uint64_t v13 = *(void *)(v1 + 48);
  if (!*(void *)(v1 + 40) && v13 && *(void *)(v1 + 56))
  {
    uint64_t v90 = *(const char **)(v1 + 56);
    sub_1000FD334(*(void *)(v1 + 32), 5501, @"%@ %@", v6, v7, v8, v9, v10, *(void *)(v1 + 48));
    uint64_t v18 = *(void *)(v1 + 32);
    if (v18 && ((v19 = *(void *)(v18 + 56)) == 0 || (*(unsigned char *)(v19 + 16) = 1, (uint64_t v18 = *(void *)(v1 + 32)) != 0))) {
      int v20 = *(void **)(v18 + 56);
    }
    else {
      int v20 = 0;
    }
    [v20 submit];
    uint64_t v21 = *(void *)(v1 + 32);
    id v22 = *(id *)(v1 + 48);
    uint64_t v23 = &unk_1001F4000;
    uint64_t v24 = (id *)&unk_1001F4000;
    if (v21)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v21 + 16));
      if (v22)
      {
        *(void *)&long long v104 = 0;
        int v25 = [v22 fullIdentityClassD:&v104];
        id v26 = (id)v104;
        id v27 = v26;
        if (!v25 || v26)
        {
          if (qword_1001F4AC8 != -1) {
            dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4AC8 != -1) {
              dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
            }
            uint64_t v91 = 132;
            long long v92 = v27;
            uint64_t v89 = "";
            uint64_t v90 = "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]";
            _NRLogWithArgs();
          }
        }
        else
        {
          uint64_t v28 = (const void *)sub_1000FBED8(v21, v25);
          if (qword_1001F4AC8 != -1) {
            dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4AC8 != -1) {
              dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
            }
            id v29 = (id)qword_1001F4AC0;
            if (v28)
            {
              v109[0] = 0;
              SecKeyCopyPublicBytes();
              id v30 = (void *)v109[0];
              v109[0] = 0;
              LogString = (__CFString *)_NRKeyCreateLogString();
            }
            else
            {
              LogString = @"[nil]";
            }
            uint64_t v91 = 128;
            long long v92 = LogString;
            uint64_t v89 = "";
            uint64_t v90 = "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]";
            _NRLogWithArgs();
          }
          objc_storeStrong((id *)(v21 + 24), v25);
          if (v28) {
            CFRelease(v28);
          }
        }

        id v108 = 0;
        id v32 = [v22 fullIdentityClassC:&v108];
        id v33 = v108;
        id v34 = v33;
        if (!v32 || v33)
        {
          if (qword_1001F4AC8 != -1) {
            dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4AC8 != -1) {
              dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
            }
            uint64_t v91 = 147;
            long long v92 = v34;
            uint64_t v89 = "";
            uint64_t v90 = "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]";
            _NRLogWithArgs();
          }
        }
        else
        {
          uint64_t v35 = (const void *)sub_1000FBED8(v21, v32);
          if (qword_1001F4AC8 != -1) {
            dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4AC8 != -1) {
              dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
            }
            id v36 = (id)qword_1001F4AC0;
            if (v35)
            {
              v109[0] = 0;
              SecKeyCopyPublicBytes();
              id v37 = (void *)v109[0];
              v109[0] = 0;
              uint64_t v38 = (__CFString *)_NRKeyCreateLogString();
            }
            else
            {
              uint64_t v38 = @"[nil]";
            }
            uint64_t v91 = 143;
            long long v92 = v38;
            uint64_t v89 = "";
            uint64_t v90 = "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]";
            _NRLogWithArgs();
          }
          objc_storeStrong((id *)(v21 + 32), v32);
          if (v35) {
            CFRelease(v35);
          }
        }

        id v103 = 0;
        id v39 = [v22 fullIdentityClassA:&v103];
        id v40 = v103;
        id v41 = v40;
        if (!v39 || v40)
        {
          if (qword_1001F4AC8 != -1) {
            dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4AC8 != -1) {
              dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
            }
            uint64_t v91 = 162;
            long long v92 = v41;
            uint64_t v89 = "";
            uint64_t v90 = "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]";
            _NRLogWithArgs();
          }
        }
        else
        {
          id v42 = (const void *)sub_1000FBED8(v21, v39);
          if (qword_1001F4AC8 != -1) {
            dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4AC8 != -1) {
              dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
            }
            id v43 = (id)qword_1001F4AC0;
            if (v42)
            {
              v109[0] = 0;
              SecKeyCopyPublicBytes();
              uint64_t v44 = (void *)v109[0];
              v109[0] = 0;
              uint64_t v45 = (__CFString *)_NRKeyCreateLogString();
            }
            else
            {
              uint64_t v45 = @"[nil]";
            }
            uint64_t v91 = 158;
            long long v92 = v45;
            uint64_t v89 = "";
            uint64_t v90 = "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]";
            _NRLogWithArgs();
          }
          objc_storeStrong((id *)(v21 + 40), v39);
          if (v42) {
            CFRelease(v42);
          }
        }

        uint64_t v23 = (void *)&unk_1001F4000;
        uint64_t v24 = (id *)&unk_1001F4000;
      }
      else
      {
        id v83 = sub_1000FBE00();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v85 = sub_1000FBE00();
          uint64_t v89 = "-[NRDIDSKeyManager ingestIDSLocalDeviceRecord:]";
          _NRLogWithArgs();
        }
      }
    }

    uint64_t v46 = *(void *)(v1 + 32);
    id v47 = *(id *)(v1 + 56);
    if (v46)
    {
      uint64_t v98 = v46;
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v46 + 16));
      if (v47)
      {
        id v94 = v47;
        uint64_t v95 = v1;
        long long v106 = 0u;
        long long v107 = 0u;
        long long v104 = 0u;
        long long v105 = 0u;
        id obj = v47;
        uint64_t v48 = v46;
        id v97 = [obj countByEnumeratingWithState:&v104 objects:v109 count:16];
        if (v97)
        {
          uint64_t v96 = *(void *)v105;
          do
          {
            for (i = 0; i != v97; i = (char *)i + 1)
            {
              if (*(void *)v105 != v96) {
                objc_enumerationMutation(obj);
              }
              uint64_t v52 = *(void **)(*((void *)&v104 + 1) + 8 * i);
              uint64_t v51 = [obj objectForKeyedSubscript:v52, v89, v90, v91, v92, v93];
              uint64_t v53 = [*(id *)(v48 + 48) objectForKeyedSubscript:v52];
              if (!v53) {
                uint64_t v53 = objc_alloc_init(NRDIDSKMDeviceRecord);
              }
              id v103 = 0;
              unsigned __int8 v54 = [v51 publicIdentityClassD:&v103];
              long long v55 = (__CFString *)v103;
              long long v56 = v55;
              if (v54) {
                BOOL v57 = v55 == 0;
              }
              else {
                BOOL v57 = 0;
              }
              int v100 = v51;
              if (v57)
              {
                long long v59 = (const void *)sub_1000FBFA8(v48, v54);
                if (v23[345] != -1) {
                  dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (v23[345] != -1) {
                    dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                  }
                  id v60 = v24[344];
                  long long v61 = [v52 UUIDString];
                  if (v59)
                  {
                    id v108 = 0;
                    SecKeyCopyPublicBytes();
                    id v62 = v108;
                    id v108 = 0;
                    long long v63 = (__CFString *)_NRKeyCreateLogString();

                    uint64_t v48 = v98;
                  }
                  else
                  {
                    long long v63 = @"[nil]";
                  }
                  long long v92 = v61;
                  long long v93 = v63;
                  uint64_t v91 = 187;
                  uint64_t v89 = "";
                  uint64_t v90 = "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]";
                  _NRLogWithArgs();

                  uint64_t v23 = &unk_1001F4000;
                  uint64_t v24 = (id *)&unk_1001F4000;
                  uint64_t v51 = v100;
                }
                if (v53) {
                  objc_storeStrong((id *)&v53->_remoteIDSClassDIdentity, v54);
                }
                if (v59) {
                  CFRelease(v59);
                }
              }
              else
              {
                if (v23[345] != -1) {
                  dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (v23[345] != -1) {
                    dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                  }
                  id v58 = v24[344];
                  long long v92 = [v52 UUIDString];
                  long long v93 = v56;
                  uint64_t v91 = 192;
                  uint64_t v89 = "";
                  uint64_t v90 = "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]";
                  _NRLogWithArgs();

                  uint64_t v48 = v98;
                  uint64_t v51 = v100;
                }
              }

              id v102 = 0;
              uint64_t v64 = [v51 publicIdentityClassC:&v102];
              long long v65 = (__CFString *)v102;
              id v66 = v65;
              if (!v64 || v65)
              {
                if (v23[345] != -1) {
                  dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (v23[345] != -1) {
                    dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                  }
                  id v72 = v24[344];
                  long long v92 = [v52 UUIDString];
                  long long v93 = v66;
                  uint64_t v91 = 208;
                  uint64_t v89 = "";
                  uint64_t v90 = "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]";
                  _NRLogWithArgs();

                  uint64_t v48 = v98;
                  uint64_t v51 = v100;
                }
              }
              else
              {
                uint64_t v67 = (const void *)sub_1000FBFA8(v48, v64);
                if (v23[345] != -1) {
                  dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (v23[345] != -1) {
                    dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                  }
                  id v68 = v24[344];
                  uint64_t v69 = [v52 UUIDString];
                  if (v67)
                  {
                    id v108 = 0;
                    SecKeyCopyPublicBytes();
                    id v70 = v108;
                    id v108 = 0;
                    int v71 = (__CFString *)_NRKeyCreateLogString();

                    uint64_t v48 = v98;
                  }
                  else
                  {
                    int v71 = @"[nil]";
                  }
                  long long v92 = v69;
                  long long v93 = v71;
                  uint64_t v91 = 203;
                  uint64_t v89 = "";
                  uint64_t v90 = "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]";
                  _NRLogWithArgs();

                  uint64_t v23 = &unk_1001F4000;
                  uint64_t v24 = (id *)&unk_1001F4000;
                  uint64_t v51 = v100;
                }
                if (v53) {
                  objc_storeStrong((id *)&v53->_remoteIDSClassCIdentity, v64);
                }
                if (v67) {
                  CFRelease(v67);
                }
              }

              id v101 = 0;
              id v73 = [v51 publicIdentityClassA:&v101];
              int v74 = (__CFString *)v101;
              id v75 = v74;
              if (!v73 || v74)
              {
                if (v23[345] != -1) {
                  dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (v23[345] != -1) {
                    dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                  }
                  id v50 = v24[344];
                  long long v92 = [v52 UUIDString];
                  long long v93 = v75;
                  uint64_t v91 = 224;
                  uint64_t v89 = "";
                  uint64_t v90 = "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]";
                  _NRLogWithArgs();

                  uint64_t v48 = v98;
                  uint64_t v51 = v100;
                }
              }
              else
              {
                id v76 = (const void *)sub_1000FBFA8(v48, v73);
                if (v23[345] != -1) {
                  dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (v23[345] != -1) {
                    dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                  }
                  id v77 = v24[344];
                  uint64_t v78 = [v52 UUIDString];
                  if (v76)
                  {
                    id v108 = 0;
                    SecKeyCopyPublicBytes();
                    id v79 = v108;
                    id v108 = 0;
                    id v80 = (__CFString *)_NRKeyCreateLogString();

                    uint64_t v48 = v98;
                  }
                  else
                  {
                    id v80 = @"[nil]";
                  }
                  long long v92 = v78;
                  long long v93 = v80;
                  uint64_t v91 = 219;
                  uint64_t v89 = "";
                  uint64_t v90 = "-[NRDIDSKeyManager ingestIDSPairedDevicesRecords:]";
                  _NRLogWithArgs();

                  uint64_t v23 = (void *)&unk_1001F4000;
                  uint64_t v24 = (id *)&unk_1001F4000;
                  uint64_t v51 = v100;
                }
                if (v53) {
                  objc_storeStrong((id *)&v53->_remoteIDSClassAIdentity, v73);
                }
                if (v76) {
                  CFRelease(v76);
                }
              }

              [*(id *)(v48 + 48) setObject:v53 forKeyedSubscript:v52];
            }
            id v97 = [obj countByEnumeratingWithState:&v104 objects:v109 count:16];
          }
          while (v97);
        }

        id v47 = v94;
        uint64_t v1 = v95;
      }
      else
      {
        id v86 = sub_1000FBE00();
        int v87 = _NRLogIsLevelEnabled();

        if (v87)
        {
          id v88 = sub_1000FBE00();
          _NRLogWithArgs();
        }
      }
    }

    id result = *(id *)(v1 + 32);
    if (result)
    {
      id result = (id)sub_1000FD3BC(result, 0);
      uint64_t v81 = *(void *)(v1 + 32);
      if (v81)
      {
        if (*(unsigned char *)(v81 + 9))
        {
          *(unsigned char *)(v81 + 9) = 0;
          uint64_t v82 = *(void *)(v1 + 32);
          return (id)sub_1000FC078(v82, 0);
        }
      }
    }
  }
  else
  {
    sub_1000FD334(*(void *)(v1 + 32), 5502, @"%@ %@ %@", v6, v7, v8, v9, v10, v13);
    uint64_t v14 = *(void *)(v1 + 32);
    if (v14 && ((v15 = *(void *)(v14 + 56)) == 0 || (*(unsigned char *)(v15 + 16) = 0, (uint64_t v14 = *(void *)(v1 + 32)) != 0))) {
      uint64_t v16 = *(void **)(v14 + 56);
    }
    else {
      uint64_t v16 = 0;
    }
    return [v16 submit];
  }
  return result;
}

void sub_1000FD334(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v10 = a3;
    id v11 = [objc_alloc((Class)NSString) initWithFormat:v10 arguments:&a9];

    sub_10012F648(0, a2, &stru_1001C9648, v11);
  }
}

void sub_1000FD3BC(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    long long v93 = 0u;
    long long v94 = 0u;
    long long v91 = 0u;
    long long v92 = 0u;
    id v4 = *(id *)(v3 + 48);
    id v60 = [v4 countByEnumeratingWithState:&v91 objects:v98 count:16];
    if (v60)
    {
      int v5 = 0;
      int v6 = 0;
      uint64_t v58 = *(void *)v92;
      int v64 = a2;
      long long v59 = v4;
      uint64_t v63 = v3;
      do
      {
        uint64_t v7 = 0;
        do
        {
          if (*(void *)v92 != v58) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void *)(*((void *)&v91 + 1) + 8 * v7);
          id v9 = *(id *)(v3 + 48);
          uint64_t v62 = v8;
          id v10 = [v9 objectForKeyedSubscript:v8];

          if (v10) {
            id v11 = v10[4];
          }
          else {
            id v11 = 0;
          }
          uint64_t v61 = v7;
          id v12 = [v11 copy];
          long long v87 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          id obj = v12;
          id v74 = [obj countByEnumeratingWithState:&v87 objects:v97 count:16];
          if (v74)
          {
            uint64_t v73 = *(void *)v88;
            do
            {
              for (i = 0; i != v74; i = (char *)i + 1)
              {
                if (*(void *)v88 != v73) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v14 = *(void *)(*((void *)&v87 + 1) + 8 * i);
                if (v14)
                {
                  BOOL v15 = *(unsigned __int8 *)(v14 + 9) != 4;
                  BOOL v16 = (*(unsigned char *)(v14 + 9) - 5) < 0xFEu;
                }
                else
                {
                  BOOL v16 = 1;
                  BOOL v15 = 1;
                }
                id v17 = *(id *)(v3 + 24);
                if (!v17) {
                  goto LABEL_44;
                }
                if (!v10)
                {

LABEL_44:
                  if (v14)
                  {
                    if (*(unsigned char *)(v14 + 8))
                    {
                      v5 |= a2;
                    }
                    else
                    {
                      int v5 = 1;
                      *(unsigned char *)(v14 + 8) = 1;
                    }
                  }
                  else
                  {
                    int v5 = 1;
                  }
                  int v6 = 1;
                  continue;
                }
                id v18 = v10[1];

                if (!v18) {
                  goto LABEL_44;
                }
                if (v15)
                {
                  id v19 = *(id *)(v3 + 32);
                  if (!v19) {
                    goto LABEL_44;
                  }
                  id v20 = v10[2];

                  if (!v20) {
                    goto LABEL_44;
                  }
                }
                if (v16)
                {
                  id v21 = *(id *)(v3 + 40);
                  if (!v21) {
                    goto LABEL_44;
                  }
                  id v22 = v10[3];

                  if (!v22) {
                    goto LABEL_44;
                  }
                }
                if (qword_1001F4AC8 != -1) {
                  dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4AC8 != -1) {
                    dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
                  }
                  id v23 = (id)qword_1001F4AC0;
                  String = (void *)NRDataProtectionClassCreateString();
                  uint64_t v57 = v62;
                  uint64_t v55 = 347;
                  uint64_t v53 = "";
                  unsigned __int8 v54 = "-[NRDIDSKeyManager checkOutstandingQueriesForceQueryIDS:]";
                  _NRLogWithArgs();
                }
                int v70 = v6;
                int v71 = v5;
                id v69 = *(id *)(v3 + 24);
                id v68 = *(id *)(v3 + 32);
                uint64_t v24 = v3;
                id v67 = *(id *)(v3 + 40);
                id v25 = v10[1];
                id v26 = v10[2];
                id v27 = v10[3];
                if (v14)
                {
                  id v28 = *(id *)(v14 + 16);
                  objc_setProperty_nonatomic_copy((id)v14, v29, 0, 16);
                }
                else
                {
                  id v28 = 0;
                }
                [v10[4] removeObject:v14, v53, v54, v55, String, v57];
                if (![v10[4] count])
                {
                  id v30 = v10[4];
                  v10[4] = 0;
                }
                int v31 = *(NSObject **)(v24 + 16);
                block[0] = _NSConcreteStackBlock;
                block[1] = 3221225472;
                block[2] = sub_1000FDC78;
                block[3] = &unk_1001C7748;
                id v85 = v27;
                id v86 = v28;
                id v80 = v69;
                id v81 = v68;
                id v82 = v67;
                id v83 = v25;
                id v84 = v26;
                id v66 = v27;
                id v65 = v26;
                id v32 = v25;
                id v33 = v67;
                id v34 = v68;
                id v35 = v69;
                id v36 = v28;
                dispatch_async(v31, block);

                uint64_t v3 = v63;
                a2 = v64;
                int v6 = v70;
                int v5 = v71;
              }
              id v74 = [obj countByEnumeratingWithState:&v87 objects:v97 count:16];
            }
            while (v74);
          }

          uint64_t v7 = v61 + 1;
          id v4 = v59;
        }
        while ((id)(v61 + 1) != v60);
        id v60 = [v59 countByEnumeratingWithState:&v91 objects:v98 count:16];
      }
      while (v60);

      if (v5) {
        sub_1000FC078(v3, a2);
      }
      if (v6)
      {
        dispatch_assert_queue_V2(*(dispatch_queue_t *)(v3 + 16));
        if (*(unsigned char *)(v3 + 10)) {
          return;
        }
        *(unsigned char *)(v3 + 10) = 1;
        self;
        if (qword_1001F4DE0 != -1) {
          dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
        }
        id v37 = (dispatch_queue_t *)(id)qword_1001F4DD8;
        v95[0] = _NSConcreteStackBlock;
        v95[1] = 3221225472;
        v95[2] = sub_1000FDC98;
        v95[3] = &unk_1001C7720;
        v95[4] = v3;
        uint64_t v38 = v95;
        if (v37)
        {
          dispatch_assert_queue_V2(v37[2]);
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            _NRLogWithArgs();
          }
          id v39 = objc_retainBlock(v38);
          dispatch_queue_t v40 = v37[3];
          v37[3] = v39;

          sub_100158B08((uint64_t)v37);
        }

        goto LABEL_65;
      }
    }
    else
    {
    }
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    id v37 = (dispatch_queue_t *)*(id *)(v3 + 48);
    id v41 = [(dispatch_queue_t *)v37 countByEnumeratingWithState:&v75 objects:v96 count:16];
    if (v41)
    {
      id v42 = v41;
      uint64_t v43 = *(void *)v76;
LABEL_69:
      uint64_t v44 = 0;
      while (1)
      {
        if (*(void *)v76 != v43) {
          objc_enumerationMutation(v37);
        }
        uint64_t v45 = *(void *)(*((void *)&v75 + 1) + 8 * v44);
        id v46 = *(id *)(v3 + 48);
        id v47 = [v46 objectForKeyedSubscript:v45];
        uint64_t v48 = v47;
        if (v47) {
          id v47 = (void *)v47[4];
        }
        id v49 = [v47 count];

        if (v49) {
          break;
        }
        if (v42 == (id)++v44)
        {
          id v42 = [(dispatch_queue_t *)v37 countByEnumeratingWithState:&v75 objects:v96 count:16];
          if (v42) {
            goto LABEL_69;
          }
          goto LABEL_77;
        }
      }
LABEL_65:

      return;
    }
LABEL_77:

    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v3 + 16));
    if (*(unsigned char *)(v3 + 10))
    {
      *(unsigned char *)(v3 + 10) = 0;
      self;
      if (qword_1001F4DE0 != -1) {
        dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
      }
      id v50 = (id)qword_1001F4DD8;
      uint64_t v51 = v50;
      if (v50)
      {
        dispatch_assert_queue_V2(*((dispatch_queue_t *)v50 + 2));
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          _NRLogWithArgs();
        }
        uint64_t v52 = (void *)v51[3];
        v51[3] = 0;

        if (!v51[3] && !v51[5] && !v51[6]) {
          sub_1001594C8((uint64_t)v51);
        }
      }
    }
  }
}

uint64_t sub_1000FDC78(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void, void))(a1[10] + 16))(a1[10], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
}

uint64_t sub_1000FDC98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    uint64_t v3 = *(NSObject **)(v2 + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  dispatch_assert_queue_V2(v3);
  uint64_t v4 = *(void *)(a1 + 32);

  return sub_1000FD3BC(v4, 1);
}

void sub_1000FDCE8(id a1)
{
  uint64_t v1 = _NRCopySerialQueueAttr();
  dispatch_queue_t v2 = dispatch_queue_create("terminusd.IdentityServices.pairingRecords", v1);

  if (!v2)
  {
    id v4 = sub_1000FBE00();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = sub_1000FBE00();
      _NRLogWithArgs();
    }
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v8 + 4) = "nr_dispatch_queue_create";
    *(_WORD *)(v8 + 12) = 2080;
    *(void *)(v8 + 14) = "terminusd.IdentityServices.pairingRecords";
    sub_1000FBE00();
    _NRLogAbortWithPack();
  }
  uint64_t v3 = (void *)qword_1001F4AD8;
  qword_1001F4AD8 = (uint64_t)v2;
}

void sub_1000FDE68(uint64_t a1, void *a2, unsigned __int8 a3, void *a4)
{
  id v29 = a2;
  id v7 = a4;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (v7)
  {
    uint64_t v8 = objc_alloc_init(NRIDSKMOutstandingQuery);
    if (v8)
    {
      id v10 = v8;
      v8->_minDataProtectionClass = a3;
      objc_setProperty_nonatomic_copy(v8, v9, v7, 16);
      if (qword_1001F4AC8 != -1) {
        dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4AC8 != -1) {
          dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
        }
        id v11 = (id)qword_1001F4AC0;
        String = (void *)NRDataProtectionClassCreateString();
        _NRLogWithArgs();
      }
      [*(id *)(a1 + 48) objectForKeyedSubscript:v29, v29];
      id v12 = (NRDIDSKMDeviceRecord *)objc_claimAutoreleasedReturnValue();
      if (v12 || (id v12 = objc_alloc_init(NRDIDSKMDeviceRecord)) != 0)
      {
        outstandingQueries = v12->_outstandingQueries;
        if (outstandingQueries
          || (uint64_t v14 = (NSMutableArray *)objc_alloc_init((Class)NSMutableArray),
              BOOL v15 = v12->_outstandingQueries,
              v12->_outstandingQueries = v14,
              v15,
              (outstandingQueries = v12->_outstandingQueries) != 0))
        {
          [(NSMutableArray *)outstandingQueries addObject:v10];
          [*(id *)(a1 + 48) setObject:v12 forKeyedSubscript:v29];
          sub_1000FD3BC(a1, 0);

LABEL_14:
          goto LABEL_15;
        }
        id v24 = sub_1000FBE00();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v26 = sub_1000FBE00();
          _NRLogWithArgs();
        }
      }
      else
      {
        id v21 = sub_1000FBE00();
        int v22 = _NRLogIsLevelEnabled();

        if (v22)
        {
          id v23 = sub_1000FBE00();
          _NRLogWithArgs();
        }
      }
    }
    else
    {
      id v18 = sub_1000FBE00();
      int v19 = _NRLogIsLevelEnabled();

      if (v19)
      {
        id v20 = sub_1000FBE00();
        _NRLogWithArgs();
      }
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v27 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v27 = 136446210;
    *(void *)(v27 + 4) = "-[NRDIDSKeyManager internalQueryIDSKeysForBluetoothUUID:minDataProtectionClass:completionBlock:]";
    sub_1000FBE00();
    _NRLogAbortWithPack();
  }
  id v16 = sub_1000FBE00();
  int v17 = _NRLogIsLevelEnabled();

  if (v17)
  {
    id v10 = sub_1000FBE00();
    _NRLogWithArgs();
    goto LABEL_14;
  }
LABEL_15:
}

void sub_1000FE300(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v90 = a6;
  id v89 = a7;
  uint64_t v17 = *(void *)(a1 + 32);
  if (v17)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v17 + 16));
    if (v13) {
      goto LABEL_3;
    }
LABEL_67:
    id v79 = sub_1000FBE00();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_55;
    }
    goto LABEL_68;
  }
  dispatch_assert_queue_V2(0);
  if (!v13) {
    goto LABEL_67;
  }
LABEL_3:
  if (!v16)
  {
    id v69 = sub_1000FBE00();
    int v70 = _NRLogIsLevelEnabled();

    if (!v70) {
      goto LABEL_55;
    }
LABEL_68:
    id v81 = sub_1000FBE00();
    _NRLogWithArgs();

    goto LABEL_55;
  }
  int v18 = *(unsigned __int8 *)(a1 + 80);
  if ((v18 | 2) != 3) {
    goto LABEL_10;
  }
  if (!v14)
  {
    id v71 = sub_1000FBE00();
    int v72 = _NRLogIsLevelEnabled();

    if (!v72) {
      goto LABEL_55;
    }
    goto LABEL_68;
  }
  if (!v90)
  {
    id v73 = sub_1000FBE00();
    int v74 = _NRLogIsLevelEnabled();

    if (!v74) {
      goto LABEL_55;
    }
    goto LABEL_68;
  }
  if (v18 != 1) {
    goto LABEL_10;
  }
  if (!v15)
  {
    id v75 = sub_1000FBE00();
    int v76 = _NRLogIsLevelEnabled();

    if (!v76) {
      goto LABEL_55;
    }
    goto LABEL_68;
  }
  if (!v89)
  {
    id v77 = sub_1000FBE00();
    int v78 = _NRLogIsLevelEnabled();

    if (!v78) {
      goto LABEL_55;
    }
    goto LABEL_68;
  }
LABEL_10:
  int v19 = (const void *)sub_1000FBFA8(*(void *)(a1 + 32), v16);
  id v20 = (const void *)sub_1000FBED8(*(void *)(a1 + 32), v13);
  uint64_t v21 = *(void *)(a1 + 40);
  id v93 = 0;
  id v88 = v13;
  int v22 = [v16 signAndProtectData:v21 withSigner:v13 error:&v93];
  id v23 = v93;
  id v86 = v16;
  if (v23 || !v22)
  {
    if (qword_1001F4AC8 != -1) {
      dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4AC8 != -1) {
        dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
      }
      uint64_t v82 = *(void *)(a1 + 48);
      id v84 = v23;
      _NRLogWithArgs();
    }
    uint64_t v31 = *(void *)(a1 + 32);
    id v25 = [[*(id *)(a1 + 48) UUIDString:v82, v84];
    id v84 = v23;
    sub_1000FD334(v31, 5504, @"ClassD BT<%@>: %@", v32, v33, v34, v35, v36, (uint64_t)v25);
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 32);
    id v25 = [*(id *)(a1 + 48) UUIDString];
    sub_1000FD334(v24, 5503, @"ClassD BT<%@>", v26, v27, v28, v29, v30, (uint64_t)v25);
  }

  id v37 = 0;
  id v87 = v14;
  if (v14 && v90)
  {
    uint64_t v38 = *(void *)(a1 + 56);
    if (v38)
    {
      id v92 = 0;
      id v37 = [v90 signAndProtectData:v38 withSigner:v14 error:&v92];
      id v39 = v92;
      if (v39 || !v37)
      {
        if (qword_1001F4AC8 != -1) {
          dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4AC8 != -1) {
            dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
          }
          uint64_t v83 = *(void *)(a1 + 48);
          id v84 = v39;
          _NRLogWithArgs();
        }
        uint64_t v47 = *(void *)(a1 + 32);
        id v41 = [*(id *)(a1 + 48) UUIDString:v83, v84];
        id v84 = v39;
        sub_1000FD334(v47, 5504, @"ClassC BT<%@>: %@", v48, v49, v50, v51, v52, (uint64_t)v41);
      }
      else
      {
        uint64_t v40 = *(void *)(a1 + 32);
        id v41 = [*(id *)(a1 + 48) UUIDString];
        sub_1000FD334(v40, 5503, @"ClassC BT<%@>", v42, v43, v44, v45, v46, (uint64_t)v41);
      }
    }
    else
    {
      id v37 = 0;
    }
  }
  uint64_t v53 = 0;
  if (v15 && v89)
  {
    uint64_t v54 = *(void *)(a1 + 64);
    if (v54)
    {
      id v91 = 0;
      uint64_t v53 = [v89 signAndProtectData:v54 withSigner:v15 error:&v91];
      id v55 = v91;
      id v85 = v15;
      if (v55 || !v53)
      {
        if (qword_1001F4AC8 != -1) {
          dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4AC8 != -1) {
            dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
          }
          uint64_t v83 = *(void *)(a1 + 48);
          id v84 = v55;
          _NRLogWithArgs();
        }
        uint64_t v63 = *(void *)(a1 + 32);
        uint64_t v57 = [*(id *)(a1 + 48) UUIDString:v83, v84];
        sub_1000FD334(v63, 5504, @"ClassA BT<%@>: %@", v64, v65, v66, v67, v68, (uint64_t)v57);
      }
      else
      {
        uint64_t v56 = *(void *)(a1 + 32);
        uint64_t v57 = [*(id *)(a1 + 48) UUIDString];
        sub_1000FD334(v56, 5503, @"ClassA BT<%@>", v58, v59, v60, v61, v62, (uint64_t)v57);
      }

      id v15 = v85;
    }
    else
    {
      uint64_t v53 = 0;
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  if (v19) {
    CFRelease(v19);
  }
  if (v20) {
    CFRelease(v20);
  }

  id v14 = v87;
  id v13 = v88;
  id v16 = v86;
LABEL_55:
}

void sub_1000FE960(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a2;
  id v8 = a5;
  uint64_t v9 = a1[4];
  if (v9)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v9 + 16));
    if (v7) {
      goto LABEL_3;
    }
LABEL_19:
    id v25 = sub_1000FBE00();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  dispatch_assert_queue_V2(0);
  if (!v7) {
    goto LABEL_19;
  }
LABEL_3:
  if (!v8)
  {
    id v23 = sub_1000FBE00();
    int v24 = _NRLogIsLevelEnabled();

    if (!v24) {
      goto LABEL_15;
    }
LABEL_20:
    id v27 = sub_1000FBE00();
    _NRLogWithArgs();

    goto LABEL_15;
  }
  uint64_t v10 = a1[5];
  id v28 = 0;
  id v11 = [v7 verifyAndExposeData:v10 withSigner:v8 error:&v28];
  id v17 = v28;
  if (v17 || !v11)
  {
    if (qword_1001F4AC8 != -1) {
      dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4AC8 != -1) {
        dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
      }
      _NRLogWithArgs();
    }
    sub_1000FD334(a1[4], 5506, @"ClassD BT<%@>: %@", v18, v19, v20, v21, v22, a1[6]);
  }
  else
  {
    sub_1000FD334(a1[4], 5505, @"ClassD BT<%@>", v12, v13, v14, v15, v16, a1[6]);
  }
  (*(void (**)(void))(a1[7] + 16))();

LABEL_15:
}

void sub_1000FEB68(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8 = a3;
  id v9 = a6;
  uint64_t v10 = a1[4];
  if (v10)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v10 + 16));
    if (v8) {
      goto LABEL_3;
    }
LABEL_19:
    id v26 = sub_1000FBE00();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  dispatch_assert_queue_V2(0);
  if (!v8) {
    goto LABEL_19;
  }
LABEL_3:
  if (!v9)
  {
    id v24 = sub_1000FBE00();
    int v25 = _NRLogIsLevelEnabled();

    if (!v25) {
      goto LABEL_15;
    }
LABEL_20:
    id v28 = sub_1000FBE00();
    _NRLogWithArgs();

    goto LABEL_15;
  }
  uint64_t v11 = a1[5];
  id v29 = 0;
  uint64_t v12 = [v8 verifyAndExposeData:v11 withSigner:v9 error:&v29];
  id v18 = v29;
  if (v18 || !v12)
  {
    if (qword_1001F4AC8 != -1) {
      dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4AC8 != -1) {
        dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
      }
      _NRLogWithArgs();
    }
    sub_1000FD334(a1[4], 5506, @"ClassC BT<%@>: %@", v19, v20, v21, v22, v23, a1[6]);
  }
  else
  {
    sub_1000FD334(a1[4], 5505, @"ClassC BT<%@>", v13, v14, v15, v16, v17, a1[6]);
  }
  (*(void (**)(void))(a1[7] + 16))();

LABEL_15:
}

void sub_1000FED70(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v9 = a4;
  id v10 = a7;
  uint64_t v11 = a1[4];
  if (v11)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v11 + 16));
    if (v9) {
      goto LABEL_3;
    }
LABEL_25:
    id v27 = sub_1000FBE00();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_21;
    }
    goto LABEL_26;
  }
  dispatch_assert_queue_V2(0);
  if (!v9) {
    goto LABEL_25;
  }
LABEL_3:
  if (!v10)
  {
    id v25 = sub_1000FBE00();
    int v26 = _NRLogIsLevelEnabled();

    if (!v26) {
      goto LABEL_21;
    }
LABEL_26:
    id v29 = sub_1000FBE00();
    _NRLogWithArgs();

    goto LABEL_21;
  }
  uint64_t v12 = a1[5];
  id v30 = 0;
  uint64_t v13 = [v9 verifyAndExposeData:v12 withSigner:v10 error:&v30];
  id v19 = v30;
  if (v19 || !v13)
  {
    if (qword_1001F4AC8 != -1) {
      dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4AC8 != -1) {
        dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
      }
      _NRLogWithArgs();
    }
    if (qword_1001F4AC8 != -1) {
      dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4AC8 != -1) {
        dispatch_once(&qword_1001F4AC8, &stru_1001C77B8);
      }
      _NRLogWithArgs();
    }
    sub_1000FD334(a1[4], 5506, @"ClassA BT<%@>: %@", v20, v21, v22, v23, v24, a1[6]);
  }
  else
  {
    sub_1000FD334(a1[4], 5505, @"ClassA BT<%@>", v14, v15, v16, v17, v18, a1[6]);
  }
  (*(void (**)(void))(a1[7] + 16))();

LABEL_21:
}

id sub_1000FF4D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1)
  {
LABEL_23:
    id v8 = 0;
    goto LABEL_20;
  }
  if (!v3)
  {
    id v15 = sub_1000FF6A4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v17 = sub_1000FF6A4();
      _NRLogWithArgs();
    }
    goto LABEL_23;
  }
  [*(id *)(a1 + 40) objectForKeyedSubscript:v3];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v6)
  {
    id v7 = v6;
    id v8 = 0;
    uint64_t v9 = *(void *)v19;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(*((void *)&v18 + 1) + 8 * i);
        if (v11) {
          uint64_t v12 = *(void **)(v11 + 40);
        }
        else {
          uint64_t v12 = 0;
        }
        uint64_t v13 = (void *)sub_1000FF6F8(v12);
        if (v13)
        {
          if (!v8) {
            id v8 = objc_alloc_init((Class)NSMutableArray);
          }
          if (([v8 containsObject:v13] & 1) == 0) {
            [v8 addObject:v13];
          }
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v7);
  }
  else
  {
    id v8 = 0;
  }

LABEL_20:
  return v8;
}

id sub_1000FF6A4()
{
  if (qword_1001F4AF8 != -1) {
    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
  }
  v0 = (void *)qword_1001F4AF0;

  return v0;
}

uint64_t sub_1000FF6F8(void *a1)
{
  id v1 = a1;
  dispatch_queue_t v2 = nw_agent_client_copy_parameters();
  id v3 = nw_parameters_copy_default_protocol_stack(v2);
  uint64_t v7 = 0;
  id v8 = &v7;
  uint64_t v9 = 0x3032000000;
  id v10 = sub_1000FF820;
  uint64_t v11 = sub_1000FF830;
  id v12 = 0;
  iterate_block[0] = _NSConcreteStackBlock;
  iterate_block[1] = 3221225472;
  iterate_block[2] = sub_1000FF838;
  iterate_block[3] = &unk_1001C7870;
  iterate_void block[4] = &v7;
  nw_protocol_stack_iterate_application_protocols(v3, iterate_block);
  if (v8[5]) {
    uint64_t v4 = nw_quic_options_copy_local_public_key();
  }
  else {
    uint64_t v4 = 0;
  }
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1000FF808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000FF820(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000FF830(uint64_t a1)
{
}

uint64_t sub_1000FF838(uint64_t a1, void *a2)
{
  is_quic = a2;
  id v5 = is_quic;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    uint64_t v7 = is_quic;
    is_quic = nw_protocol_options_is_quic(is_quic);
    id v5 = v7;
    if (is_quic)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
      id v5 = v7;
    }
  }

  return _objc_release_x1(is_quic, v5);
}

void sub_1000FF8B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4AF0;
  qword_1001F4AF0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10010010C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_100100804((id *)[NRASMListenRequest alloc], v5);
  uint64_t v9 = v7;
  if (v7)
  {
    objc_setProperty_nonatomic_copy(v7, v8, v6, 48);
    id v10 = sub_100100684((uint64_t)v9);
    uint64_t v11 = qword_1001F4AF8;
    if (v10)
    {
      id v12 = v10;
      if (qword_1001F4AF8 != -1) {
        dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4AF8 != -1) {
          dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
        }
        id v13 = v9[2];
        id v14 = (id)qword_1001F4AF0;
        id v26 = v5;
        id v27 = v13;
        uint64_t v24 = 684;
        id v25 = v12;
        uint64_t v22 = "";
        uint64_t v23 = "-[NRApplicationServiceManager setupListenerAgent]_block_invoke";
        _NRLogWithArgs();
      }
      uint64_t v15 = *(void *)(a1 + 32);
      if (v15) {
        uint64_t v16 = *(void **)(v15 + 24);
      }
      else {
        uint64_t v16 = 0;
      }
      [v16 setObject:v9 forKeyedSubscript:v12, v22, v23, v24, v25, v26, v27];
      id v17 = +[NSUUID UUID];
      v29[0] = 0;
      v29[1] = 0;
      [v17 getUUIDBytes:v29];
      [v12 UTF8String];
      id application_service = (void *)nw_endpoint_create_application_service();
      v28[0] = 0;
      v28[1] = 0;
      uint64_t v19 = *(void *)(a1 + 32);
      if (v19) {
        long long v20 = *(void **)(v19 + 88);
      }
      else {
        long long v20 = 0;
      }
      [v20 getUUIDBytes:v28];
      nw_endpoint_set_agent_identifier();
      long long v21 = (void *)nw_array_create();
      nw_array_append();
      (*((void (**)(id, void *))v6 + 2))(v6, v21);
      sub_100100A28(*(id **)(a1 + 32));

      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v11 = qword_1001F4AF8;
  }
  if (v11 != -1) {
    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4AF8 != -1) {
      dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
    }
    _NRLogWithArgs();
  }
  id v12 = 0;
LABEL_22:
}

void sub_1001003CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    id v5 = *(void **)(v4 + 24);
  }
  else {
    id v5 = 0;
  }
  id v6 = [v5 allValues];
  id v7 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v26;
    while (2)
    {
      id v10 = 0;
      do
      {
        if (*(void *)v26 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v25 + 1) + 8 * (void)v10);
        if (v11)
        {
          if ((id)v11[5] == v3) {
            goto LABEL_16;
          }
        }
        else if (!v3)
        {
LABEL_16:
          id v13 = v11;

          if (!v11) {
            goto LABEL_26;
          }
          id v14 = sub_100100684((uint64_t)v13);
          if (qword_1001F4AF8 != -1) {
            dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4AF8 != -1) {
              dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
            }
            uint64_t v15 = v13[2];
            id v16 = (id)qword_1001F4AF0;
            id v23 = v3;
            uint64_t v24 = v15;
            uint64_t v21 = 712;
            id v22 = v14;
            uint64_t v19 = "";
            long long v20 = "-[NRApplicationServiceManager setupListenerAgent]_block_invoke_2";
            _NRLogWithArgs();
          }
          uint64_t v17 = *(void *)(a1 + 32);
          if (v17) {
            long long v18 = *(void **)(v17 + 24);
          }
          else {
            long long v18 = 0;
          }
          [v18 setObject:0 forKeyedSubscript:v14, v19, v20, v21, v22, v23, v24, (void)v25];

          goto LABEL_32;
        }
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v12 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
      id v8 = v12;
      if (v12) {
        continue;
      }
      break;
    }
  }

LABEL_26:
  if (qword_1001F4AF8 != -1) {
    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4AF8 != -1) {
      dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
    }
    _NRLogWithArgs();
  }
LABEL_32:
}

id sub_100100684(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 40))
  {
    id v12 = sub_1000FF6A4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v14 = sub_1000FF6A4();
      _NRLogWithArgs();
    }
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 24);
  if (!v2)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = nw_agent_client_copy_browse_descriptor();
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t application_service_name = (uint64_t)nw_browse_descriptor_get_application_service_name(v3);
        goto LABEL_13;
      }
LABEL_15:
      id v10 = 0;
      goto LABEL_16;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v6 = nw_agent_client_copy_endpoint();
      if (!v6) {
        goto LABEL_15;
      }
      uint64_t v4 = (void *)v6;
      uint64_t application_service_name = nw_endpoint_get_application_service_name();
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_17;
      }
      id v7 = nw_agent_client_copy_advertise_descriptor();
      if (!v7) {
        goto LABEL_15;
      }
      uint64_t v4 = v7;
      uint64_t application_service_name = (uint64_t)nw_advertise_descriptor_get_application_service_name(v7);
    }
LABEL_13:
    uint64_t v8 = application_service_name;

    if (v8)
    {
      uint64_t v9 = +[NSString stringWithUTF8String:v8];
      id v10 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v9;
LABEL_16:
    }
LABEL_17:
    uint64_t v2 = *(void **)(a1 + 24);
  }

  return v2;
}

id *sub_100100804(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)NRASMRequest;
    id v5 = [(id *)[super init];
    if (!v5)
    {
      id v17 = sub_1000FF6A4();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v19 = sub_1000FF6A4();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 136446210;
      *(void *)(v20 + 4) = "-[NRASMRequest initWithClient:]";
      sub_1000FF6A4();
      _NRLogAbortWithPack();
    }
    uint64_t v6 = v5;
    objc_storeStrong(v5 + 5, a2);
    id v7 = (void *)nw_agent_client_copy_path();
    v22[0] = 0;
    v22[1] = 0;
    nw_path_get_client_id();
    id v8 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v22];
    id v9 = v6[4];
    v6[4] = v8;

    id v10 = (void *)nw_agent_client_copy_parameters();
    uint64_t pid = nw_parameters_get_pid();
    id v12 = sub_100116370(pid, 0);
    account_id = (const char *)nw_parameters_get_account_id();
    if (account_id && !strcmp(account_id, "com.apple.network.local-asquic")) {
      *((unsigned char *)v6 + 8) = 1;
    }
    id v14 = [objc_alloc((Class)NSString) initWithFormat:@"%@", v12];
    id v15 = v6[2];
    v6[2] = v14;

    a1 = v6;
  }

  return a1;
}

void sub_100100A28(id *a1)
{
  if (a1)
  {
    os_log_t v1 = a1;
    id v24 = objc_alloc_init((Class)NSMutableArray);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id obj = v1[7];
    id v2 = [obj countByEnumeratingWithState:&v38 objects:v44 count:16];
    if (v2)
    {
      id v3 = v2;
      uint64_t v4 = *(void *)v39;
      uint64_t v22 = *(void *)v39;
      id v23 = v1;
      do
      {
        id v5 = 0;
        id v25 = v3;
        do
        {
          if (*(void *)v39 != v4) {
            objc_enumerationMutation(obj);
          }
          uint64_t v6 = *(void **)(*((void *)&v38 + 1) + 8 * (void)v5);
          id v7 = [v1[3] objectForKeyedSubscript:v6];
          if (v7)
          {
            id v8 = [v1[7] objectForKeyedSubscript:v6];
            if (v8)
            {
              uint64_t v9 = nw_array_create();
              long long v28 = v8;
              nw_array_append();
              long long v27 = (void *)v9;
              (*(void (**)(void))(v7[6] + 16))();
              long long v36 = 0u;
              long long v37 = 0u;
              long long v34 = 0u;
              long long v35 = 0u;
              id v10 = v1[6];
              id v11 = [v10 countByEnumeratingWithState:&v34 objects:v43 count:16];
              if (v11)
              {
                id v12 = v11;
                uint64_t v13 = *(void *)v35;
                do
                {
                  for (i = 0; i != v12; i = (char *)i + 1)
                  {
                    if (*(void *)v35 != v13) {
                      objc_enumerationMutation(v10);
                    }
                    uint64_t v15 = *(void *)(*((void *)&v34 + 1) + 8 * i);
                    if (v15) {
                      id v16 = *(NSObject **)(v15 + 64);
                    }
                    else {
                      id v16 = 0;
                    }
                    block[0] = _NSConcreteStackBlock;
                    block[1] = 3221225472;
                    block[2] = sub_100100D84;
                    block[3] = &unk_1001C8840;
                    void block[4] = v15;
                    void block[5] = v6;
                    dispatch_async(v16, block);
                  }
                  id v12 = [v10 countByEnumeratingWithState:&v34 objects:v43 count:16];
                }
                while (v12);
              }

              [v24 addObject:v6];
              uint64_t v4 = v22;
              os_log_t v1 = v23;
              id v3 = v25;
              id v8 = v28;
            }
          }
          else
          {
            notify_post((const char *)[v6 UTF8String]);
          }

          id v5 = (char *)v5 + 1;
        }
        while (v5 != v3);
        id v3 = [obj countByEnumeratingWithState:&v38 objects:v44 count:16];
      }
      while (v3);
    }

    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v17 = v24;
    id v18 = [v17 countByEnumeratingWithState:&v29 objects:v42 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v30;
      do
      {
        for (j = 0; j != v19; j = (char *)j + 1)
        {
          if (*(void *)v30 != v20) {
            objc_enumerationMutation(v17);
          }
          [v1[7] setObject:0 forKeyedSubscript:*(void *)(*((void *)&v29 + 1) + 8 * (void)j)];
        }
        id v19 = [v17 countByEnumeratingWithState:&v29 objects:v42 count:16];
      }
      while (v19);
    }
  }
}

id sub_100100D84(uint64_t a1)
{
  return [*(id *)(a1 + 32) didCompleteIncomingResolveRequestForASName:*(void *)(a1 + 40)];
}

void sub_100100D90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_100100804((id *)[NRASMBrowseRequest alloc], v5);
  uint64_t v9 = v7;
  if (v7)
  {
    objc_setProperty_nonatomic_copy(v7, v8, v6, 48);
    id v10 = sub_100100684((uint64_t)v9);
    uint64_t v11 = qword_1001F4AF8;
    if (v10)
    {
      id v12 = v10;
      if (qword_1001F4AF8 != -1) {
        dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4AF8 != -1) {
          dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
        }
        id v13 = v9[2];
        id v14 = (id)qword_1001F4AF0;
        id v32 = v5;
        id v33 = v13;
        uint64_t v30 = 382;
        long long v31 = v12;
        long long v28 = "";
        long long v29 = "-[NRApplicationServiceManager setupResolverAgent]_block_invoke";
        _NRLogWithArgs();
      }
      uint64_t v15 = *(void *)(a1 + 32);
      if (v15) {
        id v16 = *(void **)(v15 + 32);
      }
      else {
        id v16 = 0;
      }
      [v16 objectForKeyedSubscript:v12, v28, v29, v30, v31, v32, v33];
      id v17 = (id)objc_claimAutoreleasedReturnValue();
      if (!v17) {
        id v17 = objc_alloc_init((Class)NSMutableArray);
      }
      [v17 addObject:v9];
      uint64_t v18 = *(void *)(a1 + 32);
      if (v18) {
        id v19 = *(void **)(v18 + 32);
      }
      else {
        id v19 = 0;
      }
      [v19 setObject:v17 forKeyedSubscript:v12];
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      uint64_t v20 = *(void **)(a1 + 32);
      id v35 = v6;
      id v36 = v5;
      long long v34 = v9;
      if (v20) {
        uint64_t v20 = (void *)v20[6];
      }
      objc_super v21 = v20;
      id v22 = [v21 countByEnumeratingWithState:&v39 objects:v43 count:16];
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = *(void *)v40;
        do
        {
          for (i = 0; i != v23; i = (char *)i + 1)
          {
            if (*(void *)v40 != v24) {
              objc_enumerationMutation(v21);
            }
            uint64_t v26 = *(void *)(*((void *)&v39 + 1) + 8 * i);
            if (v26) {
              long long v27 = *(NSObject **)(v26 + 64);
            }
            else {
              long long v27 = 0;
            }
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100102194;
            block[3] = &unk_1001C8840;
            void block[4] = v26;
            id v38 = v12;
            dispatch_async(v27, block);
          }
          id v23 = [v21 countByEnumeratingWithState:&v39 objects:v43 count:16];
        }
        while (v23);
      }

      id v6 = v35;
      id v5 = v36;
      uint64_t v9 = v34;
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v11 = qword_1001F4AF8;
  }
  if (v11 != -1) {
    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4AF8 != -1) {
      dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
    }
    _NRLogWithArgs();
  }
  id v12 = 0;
LABEL_37:
}

void sub_10010112C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  uint64_t v45 = a1;
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4) {
    uint64_t v4 = (void *)v4[4];
  }
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v56 objects:v62 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v57;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v57 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(v45 + 32);
        if (v11) {
          id v12 = *(void **)(v11 + 32);
        }
        else {
          id v12 = 0;
        }
        id v13 = [v12 objectForKeyedSubscript:*(void *)(*((void *)&v56 + 1) + 8 * i)];
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        id v14 = v13;
        id v15 = [v14 countByEnumeratingWithState:&v52 objects:v61 count:16];
        if (v15)
        {
          id v16 = v15;
          uint64_t v17 = *(void *)v53;
          while (2)
          {
            uint64_t v18 = 0;
            do
            {
              if (*(void *)v53 != v17) {
                objc_enumerationMutation(v14);
              }
              id v19 = *(void **)(*((void *)&v52 + 1) + 8 * (void)v18);
              if (v19)
              {
                if ((id)v19[5] == v3) {
                  goto LABEL_7;
                }
              }
              else if (!v3)
              {
LABEL_7:
                id v10 = v19;

                if (!v19) {
                  goto LABEL_8;
                }

                id v21 = sub_100100684((uint64_t)v10);
                if (v21)
                {
                  if (qword_1001F4AF8 != -1) {
                    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4AF8 != -1) {
                      dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
                    }
                    uint64_t v22 = v10[2];
                    id v23 = (id)qword_1001F4AF0;
                    id v41 = v3;
                    uint64_t v42 = v22;
                    uint64_t v39 = 421;
                    id v40 = v21;
                    long long v37 = "";
                    id v38 = "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_3";
                    _NRLogWithArgs();
                  }
                  uint64_t v24 = *(void *)(v45 + 32);
                  if (v24) {
                    id v25 = *(void **)(v24 + 32);
                  }
                  else {
                    id v25 = 0;
                  }
                  uint64_t v26 = [v25 objectForKeyedSubscript:v21, v37, v38, v39, v40, v41, v42];
                  [v26 removeObject:v10];
                  if (![v26 count])
                  {
                    uint64_t v27 = *(void *)(v45 + 32);
                    if (v27) {
                      long long v28 = *(void **)(v27 + 32);
                    }
                    else {
                      long long v28 = 0;
                    }
                    [v28 setObject:0 forKeyedSubscript:v21];
                    long long v50 = 0u;
                    long long v51 = 0u;
                    long long v48 = 0u;
                    long long v49 = 0u;
                    long long v29 = *(void **)(v45 + 32);
                    uint64_t v43 = v26;
                    uint64_t v44 = v10;
                    if (v29) {
                      long long v29 = (void *)v29[6];
                    }
                    uint64_t v30 = v29;
                    id v31 = [v30 countByEnumeratingWithState:&v48 objects:v60 count:16];
                    if (v31)
                    {
                      id v32 = v31;
                      uint64_t v33 = *(void *)v49;
                      do
                      {
                        for (j = 0; j != v32; j = (char *)j + 1)
                        {
                          if (*(void *)v49 != v33) {
                            objc_enumerationMutation(v30);
                          }
                          uint64_t v35 = *(void *)(*((void *)&v48 + 1) + 8 * (void)j);
                          if (v35) {
                            id v36 = *(NSObject **)(v35 + 64);
                          }
                          else {
                            id v36 = 0;
                          }
                          block[0] = _NSConcreteStackBlock;
                          block[1] = 3221225472;
                          block[2] = sub_100102188;
                          block[3] = &unk_1001C8840;
                          void block[4] = v35;
                          id v47 = v21;
                          dispatch_async(v36, block);
                        }
                        id v32 = [v30 countByEnumeratingWithState:&v48 objects:v60 count:16];
                      }
                      while (v32);
                    }

                    uint64_t v26 = v43;
                    id v10 = v44;
                  }
                }
                else
                {
                  if (qword_1001F4AF8 != -1) {
                    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4AF8 != -1) {
                      dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
                    }
                    _NRLogWithArgs();
                  }
                }

                goto LABEL_67;
              }
              uint64_t v18 = (char *)v18 + 1;
            }
            while (v16 != v18);
            id v20 = [v14 countByEnumeratingWithState:&v52 objects:v61 count:16];
            id v16 = v20;
            if (v20) {
              continue;
            }
            break;
          }
        }

LABEL_8:
        ;
      }
      id v7 = [v5 countByEnumeratingWithState:&v56 objects:v62 count:16];
    }
    while (v7);
  }

  if (qword_1001F4AF8 != -1) {
    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4AF8 != -1) {
      dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
    }
    _NRLogWithArgs();
  }
LABEL_67:
}

void sub_10010168C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_100100804((id *)[NRASMResolveRequest alloc], v5);
  uint64_t v9 = v7;
  if (v7)
  {
    objc_setProperty_nonatomic_copy(v7, v8, v6, 56);
    id v10 = sub_100100684((uint64_t)v9);
    uint64_t v11 = qword_1001F4AF8;
    if (v10)
    {
      id v12 = v10;
      if (qword_1001F4AF8 != -1) {
        dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4AF8 != -1) {
          dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
        }
        id v13 = v9[2];
        id v14 = (id)qword_1001F4AF0;
        id v44 = v5;
        id v45 = v13;
        uint64_t v42 = 447;
        uint64_t v43 = v12;
        id v40 = "";
        id v41 = "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_5";
        _NRLogWithArgs();
      }
      uint64_t v15 = *(void *)(a1 + 32);
      if (v15) {
        id v16 = *(void **)(v15 + 40);
      }
      else {
        id v16 = 0;
      }
      [v16 objectForKeyedSubscript:v12, v40, v41, v42, v43, v44, v45];
      id v17 = (id)objc_claimAutoreleasedReturnValue();
      if (!v17) {
        id v17 = objc_alloc_init((Class)NSMutableArray);
      }
      id v46 = v5;
      if ([v17 count])
      {
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        uint64_t v18 = v17;
        id v19 = v17;
        id v20 = (char *)[v19 countByEnumeratingWithState:&v53 objects:v58 count:16];
        if (v20)
        {
          id v21 = v20;
          uint64_t v22 = *(void *)v54;
LABEL_16:
          if (*(void *)v54 == v22)
          {
            uint64_t v23 = *((void *)&v53 + 1);
            while (*(void *)v23 && *(unsigned char *)(*(void *)v23 + 48))
            {
              v23 += 8;
              if (!--v21) {
                goto LABEL_28;
              }
            }
          }
          else
          {
            uint64_t v24 = 0;
            while (1)
            {
              if (*(void *)v54 != v22) {
                objc_enumerationMutation(v19);
              }
              uint64_t v25 = *(void *)(*((void *)&v53 + 1) + 8 * v24);
              if (!v25 || !*(unsigned char *)(v25 + 48)) {
                break;
              }
              if (v21 == (char *)++v24)
              {
LABEL_28:
                id v21 = (char *)[v19 countByEnumeratingWithState:&v53 objects:v58 count:16];
                if (v21) {
                  goto LABEL_16;
                }
                goto LABEL_29;
              }
            }
          }

          [v19 addObject:v9];
          uint64_t v28 = *(void *)(a1 + 32);
          if (v28) {
            long long v29 = *(void **)(v28 + 40);
          }
          else {
            long long v29 = 0;
          }
          [v29 setObject:v19 forKeyedSubscript:v12];
          if (qword_1001F4AF8 != -1) {
            dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
          }
          id v5 = v46;
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4AF8 != -1) {
              dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
            }
            _NRLogWithArgs();
          }
          goto LABEL_57;
        }
LABEL_29:

        [v19 addObject:v9];
        uint64_t v26 = *(void *)(a1 + 32);
        if (v26) {
          uint64_t v27 = *(void **)(v26 + 40);
        }
        else {
          uint64_t v27 = 0;
        }
        [v27 setObject:v19 forKeyedSubscript:v12];
        id v17 = v18;
      }
      else
      {
        [v17 addObject:v9];
        uint64_t v30 = *(void *)(a1 + 32);
        if (v30) {
          id v31 = *(void **)(v30 + 40);
        }
        else {
          id v31 = 0;
        }
        [v31 setObject:v17 forKeyedSubscript:v12];
      }
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      id v32 = *(void **)(a1 + 32);
      if (v32) {
        id v32 = (void *)v32[6];
      }
      uint64_t v33 = v32;
      id v34 = [v33 countByEnumeratingWithState:&v49 objects:v57 count:16];
      if (v34)
      {
        id v35 = v34;
        uint64_t v36 = *(void *)v50;
        do
        {
          for (i = 0; i != v35; i = (char *)i + 1)
          {
            if (*(void *)v50 != v36) {
              objc_enumerationMutation(v33);
            }
            uint64_t v38 = *(void *)(*((void *)&v49 + 1) + 8 * i);
            if (v38) {
              uint64_t v39 = *(NSObject **)(v38 + 64);
            }
            else {
              uint64_t v39 = 0;
            }
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10010217C;
            block[3] = &unk_1001C8840;
            void block[4] = v38;
            id v48 = v12;
            dispatch_async(v39, block);
          }
          id v35 = [v33 countByEnumeratingWithState:&v49 objects:v57 count:16];
        }
        while (v35);
      }

      id v5 = v46;
      uint64_t v18 = v17;
LABEL_57:

      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v11 = qword_1001F4AF8;
  }
  if (v11 != -1) {
    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4AF8 != -1) {
      dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
    }
    _NRLogWithArgs();
  }
  id v12 = 0;
LABEL_66:
}

void sub_100101C10(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  uint64_t v45 = a1;
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4) {
    uint64_t v4 = (void *)v4[5];
  }
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v56 objects:v62 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v57;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v57 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v11 = *(void *)(v45 + 32);
        if (v11) {
          id v12 = *(void **)(v11 + 40);
        }
        else {
          id v12 = 0;
        }
        id v13 = [v12 objectForKeyedSubscript:*(void *)(*((void *)&v56 + 1) + 8 * i)];
        long long v52 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        id v14 = v13;
        id v15 = [v14 countByEnumeratingWithState:&v52 objects:v61 count:16];
        if (v15)
        {
          id v16 = v15;
          uint64_t v17 = *(void *)v53;
          while (2)
          {
            uint64_t v18 = 0;
            do
            {
              if (*(void *)v53 != v17) {
                objc_enumerationMutation(v14);
              }
              id v19 = *(void **)(*((void *)&v52 + 1) + 8 * (void)v18);
              if (v19)
              {
                if ((id)v19[5] == v3) {
                  goto LABEL_7;
                }
              }
              else if (!v3)
              {
LABEL_7:
                id v10 = v19;

                if (!v19) {
                  goto LABEL_8;
                }

                id v21 = sub_100100684((uint64_t)v10);
                if (v21)
                {
                  if (qword_1001F4AF8 != -1) {
                    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4AF8 != -1) {
                      dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
                    }
                    uint64_t v22 = v10[2];
                    id v23 = (id)qword_1001F4AF0;
                    id v41 = v3;
                    uint64_t v42 = v22;
                    uint64_t v39 = 500;
                    id v40 = v21;
                    long long v37 = "";
                    uint64_t v38 = "-[NRApplicationServiceManager setupResolverAgent]_block_invoke_7";
                    _NRLogWithArgs();
                  }
                  uint64_t v24 = *(void *)(v45 + 32);
                  if (v24) {
                    uint64_t v25 = *(void **)(v24 + 40);
                  }
                  else {
                    uint64_t v25 = 0;
                  }
                  uint64_t v26 = [v25 objectForKeyedSubscript:v21, v37, v38, v39, v40, v41, v42];
                  [v26 removeObject:v10];
                  if (![v26 count])
                  {
                    uint64_t v27 = *(void *)(v45 + 32);
                    if (v27) {
                      uint64_t v28 = *(void **)(v27 + 40);
                    }
                    else {
                      uint64_t v28 = 0;
                    }
                    [v28 setObject:0 forKeyedSubscript:v21];
                    long long v50 = 0u;
                    long long v51 = 0u;
                    long long v48 = 0u;
                    long long v49 = 0u;
                    long long v29 = *(void **)(v45 + 32);
                    uint64_t v43 = v26;
                    id v44 = v10;
                    if (v29) {
                      long long v29 = (void *)v29[6];
                    }
                    uint64_t v30 = v29;
                    id v31 = [v30 countByEnumeratingWithState:&v48 objects:v60 count:16];
                    if (v31)
                    {
                      id v32 = v31;
                      uint64_t v33 = *(void *)v49;
                      do
                      {
                        for (j = 0; j != v32; j = (char *)j + 1)
                        {
                          if (*(void *)v49 != v33) {
                            objc_enumerationMutation(v30);
                          }
                          uint64_t v35 = *(void *)(*((void *)&v48 + 1) + 8 * (void)j);
                          if (v35) {
                            uint64_t v36 = *(NSObject **)(v35 + 64);
                          }
                          else {
                            uint64_t v36 = 0;
                          }
                          block[0] = _NSConcreteStackBlock;
                          block[1] = 3221225472;
                          block[2] = sub_100102170;
                          block[3] = &unk_1001C8840;
                          void block[4] = v35;
                          id v47 = v21;
                          dispatch_async(v36, block);
                        }
                        id v32 = [v30 countByEnumeratingWithState:&v48 objects:v60 count:16];
                      }
                      while (v32);
                    }

                    uint64_t v26 = v43;
                    id v10 = v44;
                  }
                }
                else
                {
                  if (qword_1001F4AF8 != -1) {
                    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4AF8 != -1) {
                      dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
                    }
                    _NRLogWithArgs();
                  }
                }

                goto LABEL_67;
              }
              uint64_t v18 = (char *)v18 + 1;
            }
            while (v16 != v18);
            id v20 = [v14 countByEnumeratingWithState:&v52 objects:v61 count:16];
            id v16 = v20;
            if (v20) {
              continue;
            }
            break;
          }
        }

LABEL_8:
        ;
      }
      id v7 = [v5 countByEnumeratingWithState:&v56 objects:v62 count:16];
    }
    while (v7);
  }

  if (qword_1001F4AF8 != -1) {
    dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4AF8 != -1) {
      dispatch_once(&qword_1001F4AF8, &stru_1001C7890);
    }
    _NRLogWithArgs();
  }
LABEL_67:
}

id sub_100102170(uint64_t a1)
{
  return [*(id *)(a1 + 32) didStopResolveRequestForASName:*(void *)(a1 + 40)];
}

id sub_10010217C(uint64_t a1)
{
  return [*(id *)(a1 + 32) didStartResolveRequestForASName:*(void *)(a1 + 40)];
}

id sub_100102188(uint64_t a1)
{
  return [*(id *)(a1 + 32) didStopBrowseRequestForASName:*(void *)(a1 + 40)];
}

id sub_100102194(uint64_t a1)
{
  return [*(id *)(a1 + 32) didStartBrowseRequestForASName:*(void *)(a1 + 40)];
}

void sub_10010273C(unsigned char *a1)
{
  if (a1 && !a1[9])
  {
    a1[9] = 1;
    id v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v4 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    self;
    if (qword_1001F4AE8 != -1) {
      dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
    }
    id v5 = (void *)qword_1001F4AE0;
    if (qword_1001F4AE0)
    {
      id v6 = *(NSObject **)(qword_1001F4AE0 + 8);
      id v7 = a1;
      uint64_t v8 = v5;
      dispatch_assert_queue_V2(v6);
      [v8[6] removeObject:v7];
    }
  }
}

void sub_100102874(id a1)
{
  os_log_t v1 = objc_alloc_init(NRApplicationServiceManager);
  uint64_t v2 = qword_1001F4AE0;
  qword_1001F4AE0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_1001029E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) didStartBrowseRequestForASName:*(void *)(a1 + 40)];
}

id sub_1001029EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) didStartResolveRequestForASName:*(void *)(a1 + 40)];
}

nw_endpoint_t sub_1001029F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!a1) {
    goto LABEL_10;
  }
  if (!v3)
  {
    id v8 = sub_1000FF6A4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = sub_1000FF6A4();
      _NRLogWithArgs();
      goto LABEL_7;
    }
LABEL_10:
    nw_endpoint_t v7 = 0;
    goto LABEL_9;
  }
  id v5 = [*(id *)(a1 + 24) objectForKeyedSubscript:v3];
  if (!v5)
  {
LABEL_7:
    nw_endpoint_t v7 = 0;
    goto LABEL_8;
  }
  id v6 = nw_agent_client_copy_path();
  nw_endpoint_t v7 = nw_path_copy_effective_local_endpoint(v6);

LABEL_8:
LABEL_9:

  return v7;
}

id *sub_100102AC4(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    v22.receiver = a1;
    v22.super_class = (Class)NRApplicationServiceClient;
    id v10 = (id)[super init];
    if (!v10)
    {
      id v18 = sub_1000FF6A4();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v20 = sub_1000FF6A4();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 136446210;
      *(void *)(v21 + 4) = "-[NRApplicationServiceClient initWithDelegate:delegateQueue:nrUUID:]";
      sub_1000FF6A4();
      _NRLogAbortWithPack();
    }
    a1 = v10;
    v10[5] = (id)atomic_fetch_add_explicit(&qword_1001F41E8, 1uLL, memory_order_relaxed);
    objc_storeWeak(v10 + 6, v7);
    objc_storeStrong(a1 + 8, a3);
    objc_storeStrong(a1 + 7, a4);
    id v11 = objc_alloc_init((Class)NSMutableArray);
    id v12 = a1[2];
    a1[2] = v11;

    id v13 = objc_alloc_init((Class)NSMutableArray);
    id v14 = a1[3];
    a1[3] = v13;

    id v15 = objc_alloc_init((Class)NSMutableArray);
    id v16 = a1[4];
    a1[4] = v15;
  }
  return a1;
}

void sub_100102CB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && !*(unsigned char *)(a1 + 9))
  {
    id v10 = v3;
    if (v3)
    {
      self;
      if (qword_1001F4AE8 != -1) {
        dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
      }
      uint64_t v4 = qword_1001F4AE0;
      id v5 = v10;
      if (!v4) {
        goto LABEL_15;
      }
      id v6 = *(id *)(v4 + 64);
      if (v6)
      {

LABEL_10:
        [v5 UTF8String];
        id v7 = (void *)nw_interface_create_with_name();
        if (*(void *)(v4 + 64)) {
          nw_agent_add_to_interface();
        }
        if (*(void *)(v4 + 80)) {
          nw_agent_add_to_interface();
        }

        goto LABEL_15;
      }
      if (*(void *)(v4 + 80)) {
        goto LABEL_10;
      }
LABEL_15:

      id v3 = v10;
      goto LABEL_16;
    }
    id v8 = sub_1000FF6A4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    id v3 = 0;
    if (IsLevelEnabled)
    {
      id v5 = sub_1000FF6A4();
      _NRLogWithArgs();
      goto LABEL_15;
    }
  }
LABEL_16:
}

void sub_100102DF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && !*(unsigned char *)(a1 + 9))
  {
    id v8 = v3;
    self;
    if (qword_1001F4AE8 != -1) {
      dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
    }
    uint64_t v4 = qword_1001F4AE0;
    id v5 = v8;
    if (!v4) {
      goto LABEL_14;
    }
    id v6 = *(id *)(v4 + 64);
    if (v6)
    {
    }
    else if (!*(void *)(v4 + 80))
    {
LABEL_14:

      id v3 = v8;
      goto LABEL_15;
    }
    [v5 UTF8String];
    id v7 = (void *)nw_interface_create_with_name();
    if (*(void *)(v4 + 64)) {
      nw_agent_remove_from_interface();
    }
    if (*(void *)(v4 + 80)) {
      nw_agent_remove_from_interface();
    }

    goto LABEL_14;
  }
LABEL_15:
}

uint64_t sub_100102EF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && !*(unsigned char *)(a1 + 9))
  {
    self;
    if (qword_1001F4AE8 != -1) {
      dispatch_once(&qword_1001F4AE8, &stru_1001C77F8);
    }
    uint64_t v4 = qword_1001F4AE0;
    id v5 = v3;
    id v6 = v5;
    if (v4)
    {
      if (v5)
      {
        [*(id *)(v4 + 32) objectForKeyedSubscript:v5];
        long long v27 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v30 = 0u;
        id v7 = (id)objc_claimAutoreleasedReturnValue();
        id v8 = (char *)[v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = *(void *)v28;
LABEL_10:
          if (*(void *)v28 == v10)
          {
            uint64_t v11 = *((void *)&v27 + 1);
            while (!*(void *)v11 || !*(unsigned char *)(*(void *)v11 + 8))
            {
              v11 += 8;
              if (!--v9) {
                goto LABEL_22;
              }
            }
          }
          else
          {
            uint64_t v12 = 0;
            while (1)
            {
              if (*(void *)v28 != v10) {
                objc_enumerationMutation(v7);
              }
              uint64_t v13 = *(void *)(*((void *)&v27 + 1) + 8 * v12);
              if (v13)
              {
                if (*(unsigned char *)(v13 + 8)) {
                  break;
                }
              }
              if (v9 == (char *)++v12)
              {
LABEL_22:
                id v9 = (char *)[v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
                if (v9) {
                  goto LABEL_10;
                }
                goto LABEL_23;
              }
            }
          }
          uint64_t v4 = 1;
          id v14 = v7;
        }
        else
        {
LABEL_23:

          [*(id *)(v4 + 40) objectForKeyedSubscript:v6];
          long long v23 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          id v14 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v4 = (uint64_t)[v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
          if (v4)
          {
            uint64_t v15 = *(void *)v24;
LABEL_25:
            if (*(void *)v24 == v15)
            {
              uint64_t v16 = *((void *)&v23 + 1);
              while (!*(void *)v16 || !*(unsigned char *)(*(void *)v16 + 8))
              {
                v16 += 8;
                if (!--v4) {
                  goto LABEL_37;
                }
              }
            }
            else
            {
              uint64_t v17 = 0;
              while (1)
              {
                if (*(void *)v24 != v15) {
                  objc_enumerationMutation(v14);
                }
                uint64_t v18 = *(void *)(*((void *)&v23 + 1) + 8 * v17);
                if (v18)
                {
                  if (*(unsigned char *)(v18 + 8)) {
                    break;
                  }
                }
                if (v4 == ++v17)
                {
LABEL_37:
                  uint64_t v4 = (uint64_t)[v14 countByEnumeratingWithState:&v23 objects:v31 count:16];
                  if (v4) {
                    goto LABEL_25;
                  }
                  goto LABEL_41;
                }
              }
            }
            uint64_t v4 = 1;
          }
LABEL_41:
        }
      }
      else
      {
        id v20 = sub_1000FF6A4();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v22 = sub_1000FF6A4();
          _NRLogWithArgs();
        }
        uint64_t v4 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_100103420(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  id v4 = WeakRetained;
  [WeakRetained linkDidReceiveData:a1[5] data:a1[6]];
}

void sub_100103480(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4B00;
  qword_1001F4B00 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_1001036C0()
{
  if (qword_1001F4B08 != -1) {
    dispatch_once(&qword_1001F4B08, &stru_1001C78B0);
  }
  v0 = (void *)qword_1001F4B00;

  return v0;
}

void sub_100103714(uint64_t a1)
{
  id v43 = [*(id *)(a1 + 32) nrUUID];
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  [WeakRetained linkIsUnavailable:*(void *)(a1 + 32)];

  uint64_t v4 = *(void *)(a1 + 40);
  if (v4 && *(unsigned char *)(v4 + 32))
  {
    if (qword_1001F4B08 != -1) {
      dispatch_once(&qword_1001F4B08, &stru_1001C78B0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B08 != -1) {
        dispatch_once(&qword_1001F4B08, &stru_1001C78B0);
      }
      _NRLogWithArgs();
    }
    id v5 = *(id **)(a1 + 40);
    id v6 = v43;
    if (!v5)
    {
      long long v29 = 0;
      goto LABEL_34;
    }
    id v7 = v5[3];
    dispatch_assert_queue_V2(v7);

    if (([v5 shouldCreateLinkForNRUUID:v6] & 1) == 0)
    {
      id StringFromNRLinkType = (id)createStringFromNRLinkType();
      [v5 reportEvent:3017, @"unsupported link type: %@", StringFromNRLinkType detailsFormat];
      long long v29 = 0;
      goto LABEL_33;
    }
    id v42 = v6;
    id v8 = [v5[7] hostname];
    self;
    if (qword_1001F47E8 != -1) {
      dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
    }
    id v9 = (id)qword_1001F47E0;
    if (v9) {
      uint64_t v10 = @"62743";
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = v10;
    uint64_t v12 = +[NWAddressEndpoint endpointWithHostname:v8 port:v11];

    uint64_t v13 = [NRLinkFixedInterface alloc];
    id v14 = v5[3];
    id v15 = v5[8];
    self;
    if (qword_1001F47E8 != -1) {
      dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
    }
    id v16 = (id)qword_1001F47E0;
    if (v16) {
      uint64_t v17 = @"62743";
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = v17;
    id v19 = v14;
    id v20 = v5;
    id v21 = v6;
    id v22 = v15;
    id StringFromNRLinkType = v12;
    long long v24 = v18;
    if (!v13)
    {
      long long v29 = 0;
      goto LABEL_31;
    }
    if (v19)
    {
      if (v21)
      {
        if (_NRIsUUIDNonZero())
        {
          if (v22)
          {
            v44.receiver = v13;
            v44.super_class = (Class)NRLinkFixedInterface;
            long long v25 = (char *)[super initLinkWithQueue:v19 linkDelegate:v20 nrUUID:v21];
            if (v25)
            {
              long long v26 = v25;
              [v25 setType:2];
              [v26 setSubtype:101];
              [v26 setLocalInterfaceName:v22];
              [v26 setLocalOuterEndpoint:0];
              [v26 setRemoteOuterEndpoint:StringFromNRLinkType];
              objc_storeStrong((id *)(v26 + 239), v17);
              long long v27 = [v21 UUIDString];
              [v26 reportEvent:3000 details:v27];

              long long v28 = [v26 linkDelegate];
              [v28 linkIsAvailable:v26];

              uint64_t v13 = v26;
              long long v29 = v13;
            }
            else
            {
              if (qword_1001F4960 != -1) {
                dispatch_once(&qword_1001F4960, &stru_1001C69F8);
              }
              id v35 = (id)qword_1001F4958;
              int IsLevelEnabled = _NRLogIsLevelEnabled();

              if (IsLevelEnabled)
              {
                if (qword_1001F4960 != -1) {
                  dispatch_once(&qword_1001F4960, &stru_1001C69F8);
                }
                id v37 = (id)qword_1001F4958;
                _NRLogWithArgs();
              }
              uint64_t v13 = 0;
              long long v29 = 0;
            }
            goto LABEL_30;
          }
          if (qword_1001F4960 != -1) {
            dispatch_once(&qword_1001F4960, &stru_1001C69F8);
          }
          id v33 = (id)qword_1001F4958;
          int v41 = _NRLogIsLevelEnabled();

          if (!v41)
          {
LABEL_58:
            long long v29 = 0;
LABEL_30:
            id v6 = v42;
LABEL_31:

LABEL_33:
LABEL_34:

            goto LABEL_35;
          }
          if (qword_1001F4960 == -1)
          {
LABEL_57:
            id v34 = (id)qword_1001F4958;
            _NRLogWithArgs();

            goto LABEL_58;
          }
        }
        else
        {
          if (qword_1001F4960 != -1) {
            dispatch_once(&qword_1001F4960, &stru_1001C69F8);
          }
          id v32 = (id)qword_1001F4958;
          int v40 = _NRLogIsLevelEnabled();

          if (!v40) {
            goto LABEL_58;
          }
          if (qword_1001F4960 == -1) {
            goto LABEL_57;
          }
        }
      }
      else
      {
        if (qword_1001F4960 != -1) {
          dispatch_once(&qword_1001F4960, &stru_1001C69F8);
        }
        id v31 = (id)qword_1001F4958;
        int v39 = _NRLogIsLevelEnabled();

        if (!v39) {
          goto LABEL_58;
        }
        if (qword_1001F4960 == -1) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      if (qword_1001F4960 != -1) {
        dispatch_once(&qword_1001F4960, &stru_1001C69F8);
      }
      id v30 = (id)qword_1001F4958;
      int v38 = _NRLogIsLevelEnabled();

      if (!v38) {
        goto LABEL_58;
      }
      if (qword_1001F4960 == -1) {
        goto LABEL_57;
      }
    }
    dispatch_once(&qword_1001F4960, &stru_1001C69F8);
    goto LABEL_57;
  }
LABEL_35:
}

void sub_10010402C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 9)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsSuspended:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4B08 != -1) {
      dispatch_once(&qword_1001F4B08, &stru_1001C78B0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B08 != -1) {
        dispatch_once(&qword_1001F4B08, &stru_1001C78B0);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_10010432C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 8)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsReady:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4B08 != -1) {
      dispatch_once(&qword_1001F4B08, &stru_1001C78B0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B08 != -1) {
        dispatch_once(&qword_1001F4B08, &stru_1001C78B0);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_10010464C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsAvailable:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4B08 != -1) {
      dispatch_once(&qword_1001F4B08, &stru_1001C78B0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B08 != -1) {
        dispatch_once(&qword_1001F4B08, &stru_1001C78B0);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100104EB0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4B10;
  qword_1001F4B10 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100105184()
{
  if (qword_1001F4B18 != -1) {
    dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
  }
  v0 = (void *)qword_1001F4B10;

  return v0;
}

void sub_1001051D8(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  id v4 = WeakRetained;
  [WeakRetained linkDidReceiveData:a1[5] data:a1[6]];
}

void sub_100105384(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  id v4 = WeakRetained;
  [WeakRetained linkIsUnavailable:*(void *)(a1 + 40)];
}

void sub_1001053E4(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 36) = nw_path_get_status(*(nw_path_t *)(a1 + 56));
    int v2 = *(_DWORD *)(a1 + 36);
    if (v2 == 2)
    {
      id v3 = [*(id *)(a1 + 40) copy];
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id v4 = v3;
      id v5 = [v4 countByEnumeratingWithState:&v35 objects:v41 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v36;
        do
        {
          for (i = 0; i != v6; i = (char *)i + 1)
          {
            if (*(void *)v36 != v7) {
              objc_enumerationMutation(v4);
            }
            id v9 = *(void **)(*((void *)&v35 + 1) + 8 * i);
            if (([v9 ikeClassCEstablished] & 1) != 0
              || [v9 ikeClassDEstablished])
            {
              [v9 suspend];
            }
            else
            {
              [v9 cancelWithReason:@"No network route"];
            }
          }
          id v6 = [v4 countByEnumeratingWithState:&v35 objects:v41 count:16];
        }
        while (v6);
      }

      int v2 = *(_DWORD *)(a1 + 36);
    }
    if (v2 == 1)
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id obj = sub_100145E28();
      id v10 = [obj countByEnumeratingWithState:&v31 objects:v40 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v26 = *(void *)v32;
        do
        {
          for (j = 0; j != v11; j = (char *)j + 1)
          {
            if (*(void *)v32 != v26) {
              objc_enumerationMutation(obj);
            }
            id v14 = *(void **)(*((void *)&v31 + 1) + 8 * (void)j);
            long long v27 = 0u;
            long long v28 = 0u;
            long long v29 = 0u;
            long long v30 = 0u;
            id v15 = *(id *)(a1 + 40);
            id v16 = [v15 countByEnumeratingWithState:&v27 objects:v39 count:16];
            if (v16)
            {
              id v17 = v16;
              uint64_t v18 = *(void *)v28;
LABEL_27:
              uint64_t v19 = 0;
              while (1)
              {
                if (*(void *)v28 != v18) {
                  objc_enumerationMutation(v15);
                }
                id v20 = [*(id *)(*((void *)&v27 + 1) + 8 * v19) nrUUID];
                unsigned __int8 v21 = [v20 isEqual:v14];

                if (v21) {
                  break;
                }
                if (v17 == (id)++v19)
                {
                  id v17 = [v15 countByEnumeratingWithState:&v27 objects:v39 count:16];
                  if (v17) {
                    goto LABEL_27;
                  }
                  goto LABEL_33;
                }
              }
            }
            else
            {
LABEL_33:

              id v15 = v14;
              if ([(id)a1 shouldCreateLinkForNRUUID:v15])
              {
                id v22 = [NRLinkQuickRelay alloc];
                id v23 = *(id *)(a1 + 24);
                id StringFromNRLinkType = [(NRLinkQuickRelay *)v22 initLinkWithQueue:v23 linkDelegate:a1 nrUUID:v15];

                if (!StringFromNRLinkType)
                {
                  long long v24 = [v15 UUIDString];
                  [(id)a1 reportEvent:3017 details:v24];

                  id StringFromNRLinkType = 0;
                }
              }
              else
              {
                id StringFromNRLinkType = (id)createStringFromNRLinkType();
                [(id)a1 reportEvent:3017, @"unsupported link type: %@", StringFromNRLinkType detailsFormat];
              }
            }
          }
          id v11 = [obj countByEnumeratingWithState:&v31 objects:v40 count:16];
        }
        while (v11);
      }
    }
    else
    {
      if (qword_1001F4B18 != -1) {
        dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4B18 != -1) {
          dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
        }
        _NRLogWithArgs();
      }
    }
  }
}

void sub_100105920(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 8)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsReady:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4B18 != -1) {
      dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B18 != -1) {
        dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100105B64(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 9)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsSuspended:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4B18 != -1) {
      dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B18 != -1) {
        dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100105DC8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsAvailable:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4B18 != -1) {
      dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B18 != -1) {
        dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_1001061A0(void *a1)
{
  uint64_t v2 = nw_parameters_create();
  id v3 = (char *)xpc_array_create(0, 0);
  if (!v3)
  {
    id v26 = sub_100105184();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v28 = sub_100105184();
      _NRLogWithArgs();
    }
    uint64_t v2 = (void *)_os_log_pack_size();
    id v4 = (char *)v30 - ((__chkstk_darwin(v2) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v29 = _os_log_pack_fill();
    sub_10005F8D8(v29, (uint64_t)"nr_xpc_array_create");
    sub_100105184();
    _NRLogAbortWithPack();
    __break(1u);
LABEL_20:
    dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
    goto LABEL_12;
  }
  id v4 = v3;
  xpc_array_set_uint64(v3, 0xFFFFFFFFFFFFFFFFLL, 0x1389uLL);
  nw_parameters_set_prohibited_interface_subtypes();
  uint64_t evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint();
  id v6 = (void *)*((void *)a1 + 6);
  *((void *)a1 + 6) = evaluator_for_endpoint;

  uint64_t v7 = (void *)*((void *)a1 + 6);
  if (v7)
  {
    id v8 = v7;
    id v9 = *((id *)a1 + 3);
    nw_path_evaluator_set_queue();

    objc_initWeak(&location, a1);
    id v10 = *((id *)a1 + 6);
    id v11 = *((id *)a1 + 3);
    v30[1] = _NSConcreteStackBlock;
    void v30[2] = 3221225472;
    v30[3] = sub_10010662C;
    v30[4] = &unk_1001C78D8;
    objc_copyWeak(&v31, &location);
    nw_path_evaluator_set_update_handler();

    id v12 = *((id *)a1 + 6);
    nw_path_evaluator_start();

    id v13 = *((id *)a1 + 6);
    uint64_t v14 = nw_path_evaluator_copy_path();
    id v15 = (void *)*((void *)a1 + 7);
    *((void *)a1 + 7) = v14;

    id v16 = objc_alloc((Class)APSConnection);
    uint64_t v17 = APSEnvironmentProduction;
    uint64_t v18 = APSConnectionOverrideNamedDelegatePort;
    id v19 = *((id *)a1 + 3);
    id v20 = [v16 initWithEnvironmentName:v17 namedDelegatePort:v18 queue:v19];
    unsigned __int8 v21 = (void *)*((void *)a1 + 8);
    *((void *)a1 + 8) = v20;

    if (!*((void *)a1 + 8))
    {
      if (qword_1001F4B18 != -1) {
        dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
      }
      id v22 = (id)qword_1001F4B10;
      char v23 = _NRLogIsLevelEnabled();

      if (v23)
      {
        if (qword_1001F4B18 != -1) {
          dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
        }
        id v24 = (id)qword_1001F4B10;
        _NRLogWithArgs();
      }
    }
    id v25 = *((id *)a1 + 8);
    [v25 setDelegate:a1];

    sub_10010674C((uint64_t)a1);
    objc_destroyWeak(&v31);
    objc_destroyWeak(&location);
    goto LABEL_16;
  }
  a1 = &unk_1001F4000;
  if (qword_1001F4B18 != -1) {
    goto LABEL_20;
  }
LABEL_12:
  if (_NRLogIsLevelEnabled())
  {
    if (*((void *)a1 + 355) != -1) {
      dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
    }
    _NRLogWithArgs();
  }
LABEL_16:
}

void sub_100106604(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_10010662C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained && *((_DWORD *)WeakRetained + 3) != 1004)
  {
    if (qword_1001F4B18 != -1) {
      dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B18 != -1) {
        dispatch_once(&qword_1001F4B18, &stru_1001C78F8);
      }
      _NRLogWithArgs();
    }
    objc_storeStrong(v5 + 7, a2);
    sub_1001053E4((uint64_t)v5);
  }
}

void sub_10010674C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v2);

    id v3 = [*(id *)(a1 + 40) copy];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v13;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          id v10 = [v9 nrUUID];
          id v11 = sub_10013DC5C((uint64_t)NRDLocalDevice, v10);

          if (!v11 || !v11[9]) {
            [v9 cancelWithReason:@"Device has been disabled %@", v11];
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v6);
    }

    sub_1001053E4(a1);
  }
}

id sub_1001071DC()
{
  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  v0 = (void *)qword_1001F4B28;

  return v0;
}

id *sub_100107230(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)NRDevicePairingCandidateContext;
    id v11 = (id *)[super init];
    if (!v11)
    {
      id v13 = sub_1001071DC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v15 = sub_1001071DC();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 136446210;
      *(void *)(v16 + 4) = "-[NRDevicePairingCandidateContext initWithCandidateInfo:queue:pairingManager:]";
      sub_1001071DC();
      _NRLogAbortWithPack();
    }
    a1 = v11;
    objc_storeWeak(v11 + 2, v10);
    objc_storeStrong(a1 + 3, a3);
    objc_storeStrong(a1 + 4, a2);
  }

  return a1;
}

void sub_1001073D0(uint64_t a1, id *a2)
{
  self;
  if (*a2)
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      uint64_t v6 = 949;
      id v7 = *a2;
      id v4 = "";
      id v5 = "+[NRDevicePairingCandidateContext invalidateIKESession:]";
      _NRLogWithArgs();
    }
    [*a2 setStateUpdateBlock:0, v4, v5, v6, v7];
    [*a2 setChildStateUpdateBlock:0];
    [*a2 setConfigurationUpdateBlock:0];
    [*a2 setTrafficSelectorUpdateBlock:0];
    [*a2 setAdditionalAddressesUpdateBlock:0];
    [*a2 setShortDPDEventBlock:0];
    [*a2 setRedirectEventBlock:0];
    [*a2 setPrivateNotifyStatusEvent:0];
    [*a2 disconnect];
    [*a2 invalidate];
    id v3 = *a2;
    *a2 = 0;
  }
}

void sub_10010753C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 120);
  if (v2)
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      uint64_t v5 = 1854;
      uint64_t v6 = a1;
      id v3 = "";
      id v4 = "-[NRDevicePairingCandidateContext setupIKECallbacksForControlSession]";
      _NRLogWithArgs();
    }
    [v2 setClientQueue:*(void *)(a1 + 24), v3, v4, v5, v6];
    objc_initWeak(&location, (id)a1);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10010772C;
    v9[3] = &unk_1001C7A28;
    objc_copyWeak(&v10, &location);
    [v2 setStateUpdateBlock:v9];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100107904;
    v7[3] = &unk_1001C7A50;
    objc_copyWeak(&v8, &location);
    [v2 setPrivateNotifyStatusEvent:v7];
    objc_destroyWeak(&v8);
    objc_destroyWeak(&v10);
    objc_destroyWeak(&location);
  }
}

void sub_100107700(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_10010772C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    _NRLogWithArgs();
  }
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
    if (a2 == 2)
    {
      sub_100108A38((uint64_t)WeakRetained);
    }
    else if (a2 == 3 || v6)
    {
      sub_1001073D0((uint64_t)NRDevicePairingCandidateContext, WeakRetained + 15);
      if (WeakRetained[18] || WeakRetained[19] || WeakRetained[20]) {
        sub_100109074(WeakRetained);
      }
    }
  }
}

void sub_100107904(uint64_t a1, void *a2)
{
  id v27 = a2;
  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    uint64_t v22 = 1881;
    id v20 = "";
    unsigned __int8 v21 = "-[NRDevicePairingCandidateContext setupIKECallbacksForControlSession]_block_invoke_2";
    _NRLogWithArgs();
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = [v27 sortedArrayUsingComparator:&stru_1001C7DE8];
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v23 = WeakRetained;
      id v24 = v4;
      uint64_t v22 = 1888;
      id v20 = "";
      unsigned __int8 v21 = "-[NRDevicePairingCandidateContext setupIKECallbacksForControlSession]_block_invoke_2";
      _NRLogWithArgs();
    }
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v5 = v4;
    id v6 = [v5 countByEnumeratingWithState:&v28 objects:v48 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v29;
      do
      {
        id v8 = 0;
        do
        {
          if (*(void *)v29 != v7) {
            objc_enumerationMutation(v5);
          }
          id v9 = *(void **)(*((void *)&v28 + 1) + 8 * (void)v8);
          id v10 = [v9 notifyStatus:v20, v21, v22, v23, v24, v25, v26];
          id v11 = [v9 notifyData];
          if (qword_1001F4B30 != -1) {
            dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4B30 != -1) {
              dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
            }
            id v12 = (id)qword_1001F4B28;
            id v25 = [v11 length];
            id v26 = "control";
            id v23 = WeakRetained;
            id v24 = v10;
            uint64_t v22 = 1656;
            id v20 = "";
            unsigned __int8 v21 = "-[NRDevicePairingCandidateContext handleNotifyCode:payload:controlSession:]";
            _NRLogWithArgs();
          }
          if ((int)v10 > 50700)
          {
            if ((int)v10 <= 50900)
            {
              if ((v10 - 50801) > 0xB || ((1 << ((_BYTE)v10 - 113)) & 0xC03) == 0)
              {
                int v14 = -50701;
LABEL_53:
                if ((v10 + v14) >= 2)
                {
LABEL_46:
                  if (qword_1001F4B30 != -1) {
                    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4B30 != -1) {
                      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                    }
                    id v15 = (id)qword_1001F4B28;
                    id v23 = WeakRetained;
                    id v24 = v10;
                    uint64_t v22 = 1806;
                    id v20 = "";
                    unsigned __int8 v21 = "-[NRDevicePairingCandidateContext handleNotifyCode:payload:controlSession:]";
                    _NRLogWithArgs();
                  }
                  goto LABEL_60;
                }
              }
              goto LABEL_54;
            }
            if ((int)v10 <= 51400)
            {
              if (v10 != 50901)
              {
                int v13 = 51301;
                goto LABEL_45;
              }
            }
            else if (v10 != 51401 && v10 != 51501)
            {
              int v13 = 51601;
              goto LABEL_45;
            }
LABEL_54:
            if (qword_1001F4B30 != -1) {
              dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4B30 != -1) {
                dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
              }
              id v23 = WeakRetained;
              id v24 = v10;
              uint64_t v22 = 1749;
              id v20 = "";
              unsigned __int8 v21 = "-[NRDevicePairingCandidateContext handleNotifyCode:payload:controlSession:]";
              _NRLogWithArgs();
            }
            goto LABEL_60;
          }
          if ((int)v10 <= 50350)
          {
            if ((v10 - 48601) >= 7 && v10)
            {
              int v13 = 48701;
LABEL_45:
              if (v10 != v13) {
                goto LABEL_46;
              }
            }
            goto LABEL_54;
          }
          switch((int)v10)
          {
            case 50401:
            case 50402:
            case 50403:
            case 50411:
            case 50412:
            case 50413:
            case 50503:
            case 50504:
            case 50505:
              goto LABEL_54;
            case 50404:
            case 50405:
            case 50406:
            case 50407:
            case 50408:
            case 50409:
            case 50410:
            case 50414:
            case 50415:
            case 50416:
            case 50417:
            case 50418:
            case 50419:
            case 50420:
            case 50421:
            case 50422:
            case 50423:
            case 50424:
            case 50425:
            case 50426:
            case 50427:
            case 50428:
            case 50429:
            case 50430:
            case 50431:
            case 50432:
            case 50433:
            case 50434:
            case 50435:
            case 50436:
            case 50437:
            case 50438:
            case 50439:
            case 50440:
            case 50441:
            case 50442:
            case 50443:
            case 50444:
            case 50445:
            case 50446:
            case 50447:
            case 50448:
            case 50449:
            case 50450:
            case 50451:
            case 50452:
            case 50453:
            case 50454:
            case 50455:
            case 50456:
            case 50457:
            case 50458:
            case 50459:
            case 50460:
            case 50461:
            case 50462:
            case 50463:
            case 50464:
            case 50465:
            case 50466:
            case 50467:
            case 50468:
            case 50469:
            case 50470:
            case 50471:
            case 50472:
            case 50473:
            case 50474:
            case 50475:
            case 50476:
            case 50477:
            case 50478:
            case 50479:
            case 50480:
            case 50481:
            case 50482:
            case 50483:
            case 50484:
            case 50485:
            case 50486:
            case 50487:
            case 50488:
            case 50489:
            case 50490:
            case 50491:
            case 50492:
            case 50493:
            case 50494:
            case 50495:
            case 50496:
            case 50497:
            case 50498:
            case 50499:
            case 50500:
              goto LABEL_46;
            case 50501:
            case 50502:
              uint64_t v44 = 0;
              uint64_t v45 = &v44;
              uint64_t v46 = 0x2020000000;
              uint64_t v47 = 0;
              uint64_t v38 = 0;
              int v39 = &v38;
              uint64_t v40 = 0x3032000000;
              int v41 = sub_100108194;
              id v42 = sub_1001081A4;
              id v43 = 0;
              long long v32 = _NSConcreteStackBlock;
              uint64_t v33 = 3221225472;
              long long v34 = sub_1001081AC;
              long long v35 = &unk_1001C7F40;
              long long v36 = &v44;
              long long v37 = &v38;
              if (NRTLVParse())
              {
                if (v10 == 50502)
                {
                  sub_100108398((uint64_t)WeakRetained, v45[3], (void *)v39[5]);
                }
                else
                {
                  id v16 = sub_1001071DC();
                  int IsLevelEnabled = _NRLogIsLevelEnabled();

                  if (IsLevelEnabled)
                  {
                    id v18 = sub_1001071DC();
                    uint64_t v22 = 1702;
                    id v20 = "";
                    unsigned __int8 v21 = "-[NRDevicePairingCandidateContext handleNotifyCode:payload:controlSession:]";
                    _NRLogWithArgs();
                  }
                }
              }
              _Block_object_dispose(&v38, 8);

              _Block_object_dispose(&v44, 8);
              break;
            default:
              int v14 = -50351;
              goto LABEL_53;
          }
LABEL_60:

          id v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v19 = [v5 countByEnumeratingWithState:&v28 objects:v48 count:16];
        id v6 = v19;
      }
      while (v19);
    }
  }
}

void sub_100107FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

uint64_t sub_100108194(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001081A4(uint64_t a1)
{
}

uint64_t sub_1001081AC(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a2 + 1);
  uint64_t v4 = __rev16(v3);
  int v5 = *a2;
  if (v5 == 2)
  {
    if (v4 > 0x1F)
    {
      id v6 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v4];
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
      id v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      return 1;
    }
    id v12 = sub_1001071DC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_17;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        _NRLogWithArgs();
      }
      return 1;
    }
    if (v3 == 256)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2[3];
      return 1;
    }
    id v10 = sub_1001071DC();
    int v11 = _NRLogIsLevelEnabled();

    if (v11)
    {
LABEL_17:
      id v14 = sub_1001071DC();
      _NRLogWithArgs();

      return 0;
    }
  }
  return 0;
}

void sub_100108398(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  id v6 = a3;
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 16));
  if (!WeakRetained) {
    goto LABEL_38;
  }
  if (!*(void *)(a1 + 152))
  {
    id v13 = sub_1001071DC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v15 = sub_1001071DC();
      _NRLogWithArgs();
    }
    goto LABEL_38;
  }
  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    _NRLogWithArgs();
  }
  if (*(void *)(a1 + 152) == a2)
  {
    if (a2 != 2) {
      goto LABEL_18;
    }
    if (v6)
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_17;
      }
      if (qword_1001F4B30 != -1) {
        goto LABEL_46;
      }
      while (1)
      {
        _NRLogWithArgs();
LABEL_17:
        objc_storeStrong((id *)(a1 + 168), v3);
LABEL_18:
        int v8 = 1;
        if (!*(unsigned char *)(a1 + 11)) {
          goto LABEL_28;
        }
LABEL_27:
        if (*(void *)(a1 + 144)) {
          goto LABEL_28;
        }
        *(unsigned char *)(a1 + 11) = 0;
        xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
        if (v9)
        {
          id v10 = v9;
          *(void *)uuid = 0;
          uint64_t v23 = 0;
          int v11 = [*(id *)(a1 + 32) uuid];
          [v11 getUUIDBytes:uuid];

          xpc_dictionary_set_uuid(v10, nrXPCKeyTargetPairingCandidate, uuid);
          if (v8) {
            int64_t v12 = 0;
          }
          else {
            int64_t v12 = -3002;
          }
          sub_100108878((uint64_t)WeakRetained, v12, 8uLL, v10);

          if (!v8) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
        id v17 = sub_1001071DC();
        int v18 = _NRLogIsLevelEnabled();

        if (v18)
        {
          id v19 = sub_1001071DC();
          _NRLogWithArgs();
        }
        id v6 = (id)_os_log_pack_size();
        id WeakRetained = &uuid[-((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
        __error();
        uint64_t v20 = _os_log_pack_fill();
        sub_1000DFF90(v20, (uint64_t)"nr_xpc_dictionary_create");
        sub_1001071DC();
        _NRLogAbortWithPack();
LABEL_46:
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
    }
    id v3 = sub_1001071DC();
    int v16 = _NRLogIsLevelEnabled();

    if (v16)
    {
      id v3 = sub_1001071DC();
      _NRLogWithArgs();
    }
  }
  else
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
  }
  int v8 = 0;
  if (*(unsigned char *)(a1 + 11)) {
    goto LABEL_27;
  }
LABEL_28:
  if (v8)
  {
LABEL_36:
    *(void *)(a1 + 160) = a2;
  }
  else if (!*(void *)(a1 + 144))
  {
    *(void *)(a1 + 144) = *(void *)(a1 + 152);
  }
LABEL_37:
  *(void *)(a1 + 152) = 0;
  sub_100108A38(a1);
LABEL_38:
}

void sub_100108878(uint64_t a1, int64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (a1)
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    xpc_object_t v9 = WeakRetained;
    if (WeakRetained) {
      id v10 = (void *)*((void *)WeakRetained + 1);
    }
    else {
      id v10 = 0;
    }
    int v11 = v10;

    if (v11)
    {
      id v12 = v7;
      *(void *)uuid = 0;
      uint64_t v15 = 0;
      id v13 = [*(id *)(a1 + 24) uuid];
      [v13 getUUIDBytes:uuid];

      xpc_dictionary_set_uuid(v12, nrXPCKeyPairingManager, uuid);
      xpc_dictionary_set_uint64(v12, nrXPCKeyPairingManagerOperation, a3);
      xpc_dictionary_set_int64(v12, nrXPCKeyResult, a2);
      xpc_connection_send_message(v11, v12);
    }
  }
}

void sub_100108A38(uint64_t a1)
{
  id v2 = *(id *)(a1 + 120);
  id v3 = v2;
  if (*(void *)(a1 + 144) && !*(void *)(a1 + 152) && [v2 state] == (id)2)
  {
    id v4 = objc_alloc_init((Class)NSMutableData);
    char v13 = *(void *)(a1 + 144);
    NRTLVAdd();
    id v5 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50501 notifyData:v4];
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
    uint64_t v6 = *(void *)(a1 + 144);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = v6;
    objc_initWeak(&location, (id)a1);
    id v14 = v5;
    id v7 = +[NSArray arrayWithObjects:&v14 count:1];
    id v8 = *(id *)(a1 + 24);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100108D68;
    v10[3] = &unk_1001C79D8;
    objc_copyWeak(&v11, &location);
    v10[4] = a1;
    [v3 sendPrivateNotifies:v7 maxRetries:10 retryIntervalInMilliseconds:500 callbackQueue:v8 callback:v10];

    objc_destroyWeak(&v11);
    objc_destroyWeak(&location);
  }
  else
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v9 = (id)qword_1001F4B28;
      [v3 state];
      _NRLogWithArgs();
    }
  }
}

void sub_100108D3C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_100108D68(uint64_t a1, int a2)
{
  uint64_t WeakRetained = (uint64_t)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (a2)
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4B30 == -1)
        {
LABEL_7:
          _NRLogWithArgs();
          goto LABEL_20;
        }
LABEL_24:
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        goto LABEL_7;
      }
    }
    else
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        _NRLogWithArgs();
      }
      *(void *)(WeakRetained + 152) = 0;
      xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
      if (!v5)
      {
        id v11 = sub_1001071DC();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v13 = sub_1001071DC();
          _NRLogWithArgs();
        }
        uint64_t WeakRetained = _os_log_pack_size();
        __chkstk_darwin(WeakRetained);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        sub_1000DFF90(v14, (uint64_t)"nr_xpc_dictionary_create");
        sub_1001071DC();
        _NRLogAbortWithPack();
        goto LABEL_24;
      }
      uint64_t v6 = v5;
      *(void *)uuid = 0;
      uint64_t v16 = 0;
      uint64_t v7 = *(void *)(a1 + 32);
      if (v7) {
        id v8 = *(void **)(v7 + 32);
      }
      else {
        id v8 = 0;
      }
      id v9 = [v8 uuid];
      [v9 getUUIDBytes:uuid];

      xpc_dictionary_set_uuid(v6, nrXPCKeyTargetPairingCandidate, uuid);
      if (*(unsigned char *)(WeakRetained + 11))
      {
        *(unsigned char *)(WeakRetained + 11) = 0;
        id v10 = objc_loadWeakRetained((id *)(WeakRetained + 16));
        sub_100108878((uint64_t)v10, -3004, 8uLL, v6);
      }
    }
  }
LABEL_20:
}

void sub_100109074(uint64_t a1)
{
  if (!*(void *)(a1 + 120))
  {
    id v2 = [objc_alloc((Class)NEIKEv2AuthenticationProtocol) initWithMethod:13];
    if (qword_1001F4C80 != -1) {
      dispatch_once(&qword_1001F4C80, &stru_1001C7EF0);
    }
    id v3 = (id)qword_1001F4C78;
    id v4 = sub_10011F450(1, v3, v2);
    id v5 = sub_10011EF54();
    [v5 setRequestChildlessSA:1];
    [v5 setExtraSupportedSignatureHashes:0];
    if (qword_1001F4B80 != -1) {
      dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
    }
    if (byte_1001F4B78)
    {
      uint64_t v6 = *(void *)(a1 + 56);
      if (v6)
      {
        uint64_t v7 = *(void **)(v6 + 120);
        if (v7)
        {
          id v8 = +[NSNumber numberWithUnsignedChar:4];
          uint64_t v7 = [v7 objectForKeyedSubscript:v8];
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      if (![v7 count])
      {
        id v30 = sub_1001071DC();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v32 = sub_1001071DC();
          _NRLogWithArgs();
        }
        goto LABEL_30;
      }
      id v42 = v3;
      id v43 = v2;
      id v9 = [v7 firstObject];
      id v10 = [v9 copy];

      id v11 = [v10 hostname];
      self;
      if (qword_1001F47E8 != -1) {
        dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
      }
      id v12 = (id)qword_1001F47E0;
      id v13 = @"62743";
      if (!v12) {
        id v13 = 0;
      }
      uint64_t v14 = v13;
      uint64_t v15 = +[NWAddressEndpoint endpointWithHostname:v11 port:v14];

      if (v15)
      {
        uint64_t v16 = sub_100126E78(*(void *)(a1 + 56));
        if (v16)
        {
          [v5 setRandomizeLocalPort:1];
          [v5 setForceUDPEncapsulation:1];
          [v5 setRemoteEndpoint:v15];
          [v5 setOutgoingInterfaceName:v16];
          v44[0] = 0;
          v44[1] = 0;
          id v17 = [*(id *)(a1 + 32) uuid];
          [v17 getUUIDBytes:v44];

          id v18 = [objc_alloc((Class)NSData) initWithBytes:v44 length:16];
          id v19 = [objc_alloc((Class)NEIKEv2KeyIDIdentifier) initWithKeyID:v18];
          [v4 setLocalIdentifier:v19];

          id v20 = objc_alloc((Class)NEIKEv2Session);
          id v21 = *(id *)(a1 + 24);
          id v22 = [v20 initWithIKEConfig:v5 firstChildConfig:0 sessionConfig:v4 queue:v21 ipsecInterface:0 ikeSocketHandler:0 kernelSASessionName:@"terminusIKE-Pairing-Listener" packetDelegate:0];
          uint64_t v23 = *(void **)(a1 + 120);
          *(void *)(a1 + 120) = v22;

          int v24 = 0;
        }
        else
        {
          id v36 = sub_1001071DC();
          int v37 = _NRLogIsLevelEnabled();

          if (v37)
          {
            id v38 = sub_1001071DC();
            _NRLogWithArgs();
          }
          int v24 = 1;
        }
      }
      else
      {
        id v33 = sub_1001071DC();
        int v34 = _NRLogIsLevelEnabled();

        if (v34)
        {
          id v35 = sub_1001071DC();
          _NRLogWithArgs();
        }
        int v24 = 1;
      }

      id v3 = v42;
      id v2 = v43;
      if (v24)
      {
LABEL_30:

        return;
      }
    }
    else
    {
      id v25 = objc_alloc_init((Class)NEIKEv2NULLIdentifier);
      [v4 setLocalIdentifier:v25];

      id v26 = objc_alloc((Class)NEIKEv2Session);
      id v27 = *(id *)(a1 + 24);
      id v28 = [v26 initWithIKEConfig:v5 firstChildConfig:0 sessionConfig:v4 queue:v27 ipsecInterface:0 ikeSocketHandler:0 kernelSASessionName:@"terminusIKE-Pairing-Listener" packetDelegate:a1];
      long long v29 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v28;
    }
    if (*(void *)(a1 + 120))
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        _NRLogWithArgs();
      }
      sub_10010753C(a1);
      [*(id *)(a1 + 120) connect];
    }
    else
    {
      id v39 = sub_1001071DC();
      int v40 = _NRLogIsLevelEnabled();

      if (v40)
      {
        id v41 = sub_1001071DC();
        _NRLogWithArgs();
      }
    }
    goto LABEL_30;
  }
}

void sub_100109F28(uint64_t a1)
{
  if (a1)
  {
    sub_100109FCC(a1);
    if (*(void *)(a1 + 64))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
      id v3 = WeakRetained;
      if (WeakRetained) {
        id v4 = (void *)*((void *)WeakRetained + 9);
      }
      else {
        id v4 = 0;
      }
      uint64_t v5 = *(void *)(a1 + 64);
      id v6 = v4;
      [v6 cancelPeripheralConnection:v5];

      uint64_t v7 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = 0;
    }
    sub_1001073D0((uint64_t)NRDevicePairingCandidateContext, (id *)(a1 + 120));
    *(unsigned char *)(a1 + 9) = 0;
    sub_1001073D0((uint64_t)NRDevicePairingCandidateContext, (id *)(a1 + 128));
    *(unsigned char *)(a1 + 10) = 0;
  }
}

void sub_100109FCC(uint64_t a1)
{
  id v2 = (_OWORD *)(a1 + 72);
  os_log_t v1 = *(void **)(a1 + 72);
  if (v1)
  {
    id v4 = *(NSObject **)(a1 + 104);
    if (v4)
    {
      dispatch_source_cancel(v4);
      uint64_t v5 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = 0;

      os_log_t v1 = *(void **)(a1 + 72);
    }
    *id v2 = 0u;
    v2[1] = 0u;

    id v6 = *(void **)(a1 + 112);
    if (v6)
    {
      [v6 cancel];
      uint64_t v7 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = 0;
    }
    sub_1001073D0((uint64_t)NRDevicePairingCandidateContext, (id *)(a1 + 120));
    *(unsigned char *)(a1 + 9) = 0;
    sub_1001073D0((uint64_t)NRDevicePairingCandidateContext, (id *)(a1 + 128));
    *(unsigned char *)(a1 + 10) = 0;
    id v8 = *(void **)(a1 + 136);
    *(void *)(a1 + 136) = 0;

    if (*(void *)(a1 + 144))
    {
      uint64_t v9 = *(void *)(a1 + 152);
      if (v9 || (uint64_t v9 = *(void *)(a1 + 160)) != 0) {
        *(void *)(a1 + 144) = v9;
      }
    }
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
  }
}

void sub_10010A088(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4B28;
  qword_1001F4B28 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10010A934(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(void *)(v1 + 88) && os_channel_get_next_slot())
  {
    do
    {
      id v2 = [objc_alloc((Class)NSData) initWithBytes:0 length:0];
      [*(id *)(v1 + 136) receivePacketData:v2];
      uint64_t next_slot = os_channel_get_next_slot();
    }
    while (next_slot);
    if (os_channel_advance_slot())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v4 = (id)qword_1001F4B28;
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        id v6 = (id)qword_1001F4B28;
        _NRLogWithArgs();
      }
    }
    if (os_channel_sync())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v7 = (id)qword_1001F4B28;
      int v8 = _NRLogIsLevelEnabled();

      if (v8)
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        id v9 = (id)qword_1001F4B28;
        _NRLogWithArgs();
      }
    }
  }
}

void sub_10010AD14(id *a1)
{
  if (a1)
  {
    if (qword_1001F4B80 != -1) {
      dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
    }
    if (byte_1001F4B78)
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      id v2 = a1[5];
      id v3 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v3)
      {
        id v4 = v3;
        uint64_t v5 = *(void *)v20;
        do
        {
          for (i = 0; i != v4; i = (char *)i + 1)
          {
            if (*(void *)v20 != v5) {
              objc_enumerationMutation(v2);
            }
            id v7 = [a1[5] objectForKeyedSubscript:*(void *)(*((void *)&v19 + 1) + 8 * i)];
            int v8 = v7;
            if (v7 && (v7[18] || v7[19] || v7[20])) {
              sub_100109074((uint64_t)v7);
            }
          }
          id v4 = [v2 countByEnumeratingWithState:&v19 objects:v23 count:16];
        }
        while (v4);
      }
    }
    else
    {
      sub_10010AF7C((uint64_t)a1);
      id v2 = (id)objc_claimAutoreleasedReturnValue();
      if ([v2 count])
      {
        id v9 = a1[9];
        id v10 = a1[2];
        if (qword_1001F4BF8 != -1) {
          dispatch_once(&qword_1001F4BF8, &stru_1001C7D88);
        }
        id v11 = (id)qword_1001F4C00;
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_10010B12C;
        v14[3] = &unk_1001C7920;
        id v15 = v9;
        id v2 = v2;
        id v16 = v2;
        id v17 = v10;
        id v18 = a1;
        id v12 = v10;
        id v13 = v9;
        dispatch_async(v11, v14);
      }
    }
  }
}

id sub_10010AF7C(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_alloc_init((Class)NSMutableSet);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v3 = *(id *)(a1 + 40);
    id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v14;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(*((void *)&v13 + 1) + 8 * i), v13];
          id v9 = (id *)v8;
          if (v8 && (*(void *)(v8 + 144) || *(void *)(v8 + 152) || *(void *)(v8 + 160)))
          {
            id v10 = *(id *)(v8 + 64);
            id v11 = v10;
            if (!v10 || [v10 state] != (id)1 && objc_msgSend(v11, "state") != (id)2)
            {

              id v11 = [v9[4] cbUUID];
              [v2 addObject:v11];
            }
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v5);
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void sub_10010B12C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) allObjects];
  id v4 = [v2 retrievePeripheralsWithIdentifiers:v3];

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10010B1F0;
  v7[3] = &unk_1001C8840;
  id v5 = *(NSObject **)(a1 + 48);
  void v7[4] = *(void *)(a1 + 56);
  id v8 = v4;
  id v6 = v4;
  dispatch_async(v5, v7);
}

void sub_10010B1F0(uint64_t a1)
{
  id v2 = sub_10010AF7C(*(void *)(a1 + 32));
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id obj = *(id *)(a1 + 40);
  id v3 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v28;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v28 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        id v8 = [v7 identifier];
        unsigned int v9 = [v2 containsObject:v8];

        if (v9)
        {
          id v10 = *(void **)(a1 + 32);
          if (v10) {
            id v10 = (void *)v10[6];
          }
          id v11 = v10;
          id v12 = [v7 identifier];
          long long v13 = [v11 objectForKeyedSubscript:v12];

          uint64_t v14 = *(void *)(a1 + 32);
          if (v14) {
            long long v15 = *(void **)(v14 + 40);
          }
          else {
            long long v15 = 0;
          }
          uint64_t v16 = [v15 objectForKeyedSubscript:v13];
          id v17 = (id *)v16;
          if (v16 && (*(void *)(v16 + 144) || *(void *)(v16 + 152) || *(void *)(v16 + 160)))
          {
            id v18 = *(id *)(v16 + 64);
            long long v19 = v18;
            if (v18 && ([v18 state] == (id)1 || objc_msgSend(v19, "state") == (id)2))
            {
            }
            else
            {

              if (qword_1001F4B30 != -1) {
                dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4B30 != -1) {
                  dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                }
                uint64_t v24 = 758;
                id v25 = v7;
                long long v22 = "";
                uint64_t v23 = "-[NRDevicePairingManagerContext connectToPeersIfNeeded]_block_invoke_2";
                _NRLogWithArgs();
              }
              objc_storeStrong(v17 + 8, v7);
              uint64_t v20 = *(void *)(a1 + 32);
              if (v20) {
                long long v21 = *(void **)(v20 + 72);
              }
              else {
                long long v21 = 0;
              }
              [v21 connectPeripheral:v7 options:0 v22 v23 v24 v25];
            }
          }
        }
      }
      id v4 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
    }
    while (v4);
  }
}

void sub_10010B514(uint64_t a1)
{
  if (!a1) {
    return;
  }
  self;
  if (qword_1001F4B20)
  {
    id v2 = (id *)(id)qword_1001F4B20;
    goto LABEL_5;
  }
  id v3 = objc_alloc_init(NRDevicePairingDirector);
  id v4 = (void *)qword_1001F4B20;
  qword_1001F4B20 = (uint64_t)v3;

  id v2 = (id *)(id)qword_1001F4B20;
  if (v2)
  {
LABEL_5:
    id WeakRetained = objc_loadWeakRetained(v2 + 3);

    if (WeakRetained == (id)a1) {
      objc_storeWeak(v2 + 3, 0);
    }
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v6 = *(id *)(a1 + 40);
  id v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v21;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = [*(id *)(a1 + 40) objectForKeyedSubscript:*(void *)(*((void *)&v20 + 1) + 8 * (void)v10), (void)v20];
        sub_100109F28((uint64_t)v11);

        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v8);
  }

  [*(id *)(a1 + 40) removeAllObjects];
  id v12 = *(void **)(a1 + 56);
  if (v12)
  {
    [v12 invalidate];
    long long v13 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
  }
  uint64_t v14 = *(void **)(a1 + 64);
  if (v14)
  {
    [v14 invalidate];
    long long v15 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v16 = *(void **)(a1 + 72);
  if (v16)
  {
    [v16 setDelegate:0];
    id v17 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
  }
  id v18 = *(void **)(a1 + 80);
  if (v18)
  {
    [v18 setDelegate:0];
    long long v19 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
  }
}

void *sub_10010B8C4(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)NRDevicePairingManagerConnection;
    id v5 = [super init];
    if (!v5)
    {
      id v9 = sub_1001071DC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v11 = sub_1001071DC();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 136446210;
      *(void *)(v12 + 4) = "-[NRDevicePairingManagerConnection initWithConnection:]";
      sub_1001071DC();
      _NRLogAbortWithPack();
    }
    a1 = v5;
    objc_storeStrong((id *)v5 + 1, a2);
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    id v7 = (void *)a1[2];
    a1[2] = v6;
  }
  return a1;
}

id *sub_10010BA3C(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)NRDevicePairingManagerContext;
    id v11 = (id *)[super init];
    if (!v11)
    {
      id v17 = sub_1001071DC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v19 = sub_1001071DC();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 136446210;
      *(void *)(v20 + 4) = "-[NRDevicePairingManagerContext initWithInfo:queue:managerConnection:]";
      sub_1001071DC();
      _NRLogAbortWithPack();
    }
    a1 = v11;
    objc_storeWeak(v11 + 1, v10);
    objc_storeStrong(a1 + 2, a3);
    objc_storeStrong(a1 + 3, a2);
    id v12 = objc_alloc_init((Class)NSMutableDictionary);
    id v13 = a1[5];
    a1[5] = v12;

    id v14 = objc_alloc_init((Class)NSMutableDictionary);
    id v15 = a1[6];
    a1[6] = v14;
  }
  return a1;
}

void sub_10010BC08(id *a1, void *a2)
{
  id v4 = a2;
  id v5 = &unk_1001F4000;
  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    _NRLogWithArgs();
  }
  id v6 = (char *)objc_alloc((Class)NSUUID);
  if (!v4) {
    goto LABEL_47;
  }
  for (i = (void *)*((void *)v4 + 2); ; i = 0)
  {
    id v8 = i;
    id v9 = [v6 initWithUUIDString:v8];

    if (!v9) {
      break;
    }
    if (!v4 || (id v10 = *((id *)v4 + 13)) == 0)
    {
      id v25 = sub_1001071DC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v27 = sub_1001071DC();
        _NRLogWithArgs();
      }
      id v11 = 0;
      goto LABEL_23;
    }
    id v11 = v10;
    if ((unint64_t)[v10 length] <= 4)
    {
      id v22 = sub_1001071DC();
      int v23 = _NRLogIsLevelEnabled();

      if (v23)
      {
        id v24 = sub_1001071DC();
        [v11 length];
        _NRLogWithArgs();
      }
      goto LABEL_23;
    }
    char v37 = 0;
    int v36 = 0;
    [v11 getBytes:&v36 length:5];
    if ((v36 & 0xE0) != 0x20)
    {
      if (v5[358] != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (v5[358] != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        _NRLogWithArgs();
      }
      goto LABEL_23;
    }
    uint64_t v12 = [a1[5] objectForKeyedSubscript:v9];
    uint64_t v13 = v12;
    if (v12)
    {
      if (*(unsigned char *)(v12 + 8)) {
        goto LABEL_16;
      }
LABEL_31:
      *(unsigned char *)(v13 + 8) = 1;
      sub_10010C240(a1, *(void **)(v13 + 32));
LABEL_16:

LABEL_23:
      goto LABEL_24;
    }
    id v5 = [objc_alloc((Class)NSData) initWithBytes:(char *)&v36 + 1 length:4];
    id v14 = (char *)[v11 length];
    if (v14 == (char *)5)
    {
      id v15 = 0;
    }
    else
    {
      id v15 = [v11 subdataWithRange:5, v14 - 5];
    }
    id v16 = [objc_alloc((Class)NRDevicePairingCandidate) initInternalWithUUID:v9];
    if (v16)
    {
      id v17 = v16;
      [v16 setIdentifier:v5];
      [v17 setMetadata:v15];
      [v17 setCbUUID:v9];
      id v18 = sub_100107230((id *)[NRDevicePairingCandidateContext alloc], v17, a1[2], a1);
      if (v18)
      {
        uint64_t v13 = (uint64_t)v18;
        objc_storeStrong(v18 + 7, a2);
        [a1[5] setObject:v13 forKeyedSubscript:v9];

        if (!*(unsigned char *)(v13 + 8)) {
          goto LABEL_31;
        }
        goto LABEL_16;
      }
      id v31 = sub_1001071DC();
      int v32 = _NRLogIsLevelEnabled();

      if (v32)
      {
        id v33 = sub_1001071DC();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v28 = sub_1001071DC();
      int v29 = _NRLogIsLevelEnabled();

      if (v29)
      {
        id v30 = sub_1001071DC();
        _NRLogWithArgs();
      }
    }
    id v4 = (id)_os_log_pack_size();
    id v6 = (char *)&v36 - ((__chkstk_darwin(v4) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v34 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v34 = 136446210;
    *(void *)(v34 + 4) = "-[NRDevicePairingManagerContext handleDiscoveredDeviceEndpoint:]";
    sub_1001071DC();
    _NRLogAbortWithPack();
LABEL_47:
    ;
  }
  id v19 = sub_1001071DC();
  int v20 = _NRLogIsLevelEnabled();

  if (v20)
  {
    id v11 = sub_1001071DC();
    if (v4) {
      objc_super v21 = (void *)*((void *)v4 + 2);
    }
    else {
      objc_super v21 = 0;
    }
    id v35 = v21;
    _NRLogWithArgs();

    goto LABEL_23;
  }
LABEL_24:
}

void sub_10010C240(id *a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 1);
  id v5 = WeakRetained;
  if (WeakRetained) {
    id v6 = (void *)*((void *)WeakRetained + 1);
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    id v8 = &unk_1001F4000;
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
    id v9 = &v19;
    xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
    if (v10)
    {
      id v8 = v10;
      *(void *)uuid = 0;
      uint64_t v21 = 0;
      id v11 = [a1[3] uuid];
      [v11 getUUIDBytes:uuid];

      xpc_dictionary_set_uuid(v8, nrXPCKeyPairingManager, uuid);
      xpc_dictionary_set_uint64(v8, nrXPCKeyPairingManagerOperation, 5uLL);
      id v19 = 0;
      a1 = +[NSKeyedArchiver archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v19];
      id v9 = (id *)v19;
      if (!v9)
      {
        xpc_dictionary_set_data(v8, nrXPCKeyDiscoveredPairingCandidate, [a1 bytes], (size_t)[a1 length]);
        xpc_connection_send_message(v7, v8);
LABEL_13:

        goto LABEL_14;
      }
    }
    else
    {
      id v12 = sub_1001071DC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v14 = sub_1001071DC();
        _NRLogWithArgs();
      }
      id v3 = (id)_os_log_pack_size();
      id v7 = (_xpc_connection_s *)&uuid[-((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      __error();
      uint64_t v15 = _os_log_pack_fill();
      sub_1000DFF90(v15, (uint64_t)"nr_xpc_dictionary_create");
      sub_1001071DC();
      _NRLogAbortWithPack();
    }
    id v16 = sub_1001071DC();
    int v17 = _NRLogIsLevelEnabled();

    if (v17)
    {
      id v18 = sub_1001071DC();
      _NRLogWithArgs();
    }
    goto LABEL_13;
  }
LABEL_14:
}

void sub_10010C584(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  id v5 = WeakRetained;
  if (WeakRetained) {
    id v6 = (void *)*((void *)WeakRetained + 1);
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_9;
    }
    if (qword_1001F4B30 != -1) {
      goto LABEL_15;
    }
    while (1)
    {
      _NRLogWithArgs();
LABEL_9:
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      if (v8) {
        break;
      }
      id v12 = sub_1001071DC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v14 = sub_1001071DC();
        _NRLogWithArgs();
      }
      id v3 = (id)_os_log_pack_size();
      id v7 = (_xpc_connection_s *)&v17[-((__chkstk_darwin(v3) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
      __error();
      uint64_t v15 = _os_log_pack_fill();
      sub_1000DFF90(v15, (uint64_t)"nr_xpc_dictionary_create");
      sub_1001071DC();
      _NRLogAbortWithPack();
LABEL_15:
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    id v9 = v8;
    *(void *)uuid = 0;
    uint64_t v20 = 0;
    xpc_object_t v10 = [*(id *)(a1 + 24) uuid];
    [v10 getUUIDBytes:uuid];

    xpc_dictionary_set_uuid(v9, nrXPCKeyPairingManager, uuid);
    xpc_dictionary_set_uint64(v9, nrXPCKeyPairingManagerOperation, 5uLL);
    *(void *)int v17 = 0;
    uint64_t v18 = 0;
    id v11 = [v3 uuid];
    [v11 getUUIDBytes:v17];

    xpc_dictionary_set_uuid(v9, nrXPCKeyLostPairingCandidate, v17);
    xpc_connection_send_message(v7, v9);
  }
}

uint64_t sub_10010C844(uint64_t a1)
{
  self;
  if (qword_1001F4B20)
  {
    id v2 = (id *)(id)qword_1001F4B20;
  }
  else
  {
    id v3 = objc_alloc_init(NRDevicePairingDirector);
    id v4 = (void *)qword_1001F4B20;
    qword_1001F4B20 = (uint64_t)v3;

    id v2 = (id *)(id)qword_1001F4B20;
    if (!v2)
    {
      id v6 = 0;
      if (*(void *)(a1 + 80))
      {
LABEL_10:
        if (*(void *)(a1 + 72))
        {
LABEL_11:
          unsigned __int8 v8 = 1;
          goto LABEL_15;
        }
LABEL_14:
        id v13 = objc_alloc((Class)CBCentralManager);
        id v14 = *(void **)(a1 + 16);
        uint64_t v20 = CBCentralManagerOptionShowPowerAlertKey;
        uint64_t v21 = &__kCFBooleanTrue;
        id v15 = v14;
        unsigned __int8 v8 = 1;
        id v16 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
        id v17 = [v13 initWithDelegate:a1 queue:v15 options:v16];
        uint64_t v18 = *(void **)(a1 + 72);
        *(void *)(a1 + 72) = v17;

        goto LABEL_15;
      }
LABEL_13:
      id v9 = objc_alloc((Class)CBScalablePipeManager);
      id v10 = *(id *)(a1 + 16);
      id v11 = [v9 initWithDelegate:a1 queue:v10];
      id v12 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = v11;

      if (*(void *)(a1 + 72)) {
        goto LABEL_11;
      }
      goto LABEL_14;
    }
  }
  id WeakRetained = objc_loadWeakRetained(v2 + 3);
  id v6 = WeakRetained;
  if (WeakRetained) {
    BOOL v7 = WeakRetained == (id)a1;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    objc_storeWeak(v2 + 3, (id)a1);
    if (*(void *)(a1 + 80)) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  unsigned __int8 v8 = 0;
LABEL_15:

  return v8;
}

void sub_10010CA28(uint64_t a1, uint64_t a2)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 16));
  if (WeakRetained)
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
    if (*(unsigned char *)(a1 + 11))
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        _NRLogWithArgs();
      }
      xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
      if (v5)
      {
        id v6 = v5;
        *(void *)uuid = 0;
        uint64_t v24 = 0;
        BOOL v7 = [*(id *)(a1 + 32) uuid];
        [v7 getUUIDBytes:uuid];

        xpc_dictionary_set_uuid(v6, nrXPCKeyTargetPairingCandidate, uuid);
        uint64_t v8 = (uint64_t)WeakRetained;
        int64_t v9 = -2005;
LABEL_20:
        sub_100108878(v8, v9, 8uLL, v6);

        goto LABEL_21;
      }
      id v16 = sub_1001071DC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
LABEL_31:
        id v20 = sub_1001071DC();
        _NRLogWithArgs();
      }
LABEL_32:
      uint64_t v21 = _os_log_pack_size();
      __chkstk_darwin(v21);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      sub_1000DFF90(v22, (uint64_t)"nr_xpc_dictionary_create");
      sub_1001071DC();
      _NRLogAbortWithPack();
    }
    if (*(void *)(a1 + 160) == a2)
    {
      xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
      if (v10)
      {
        id v6 = v10;
        *(void *)uuid = 0;
        uint64_t v24 = 0;
        id v11 = [*(id *)(a1 + 32) uuid];
        [v11 getUUIDBytes:uuid];

        xpc_dictionary_set_uuid(v6, nrXPCKeyTargetPairingCandidate, uuid);
        uint64_t v8 = (uint64_t)WeakRetained;
        int64_t v9 = 0;
        goto LABEL_20;
      }
      id v18 = sub_1001071DC();
      int v19 = _NRLogIsLevelEnabled();

      if (v19) {
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    *(unsigned char *)(a1 + 11) = 1;
    uint64_t v12 = *(void *)(a1 + 152);
    if (v12 != a2)
    {
      *(void *)(a1 + 144) = a2;
      if (!v12) {
        sub_100108A38(a1);
      }
    }
    sub_10010AD14(WeakRetained);
  }
  else
  {
    id v13 = sub_1001071DC();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
      id v15 = sub_1001071DC();
      _NRLogWithArgs();
    }
  }
LABEL_21:
}

id *sub_10010CE4C(id *a1, void *a2, void *a3)
{
  xpc_object_t v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_35;
  }
  if (v5)
  {
    id v7 = a1[4];
    uint64_t v8 = [v7 cbUUID];

    objc_initWeak(&location, a1);
    id WeakRetained = objc_loadWeakRetained(a1 + 2);
    objc_initWeak(&from, WeakRetained);

    uint64_t v34 = _NSConcreteStackBlock;
    uint64_t v35 = 3221225472;
    int v36 = sub_10010D4F4;
    char v37 = &unk_1001C7948;
    int v32 = &v39;
    objc_copyWeak(&v39, &location);
    id v33 = &v40;
    objc_copyWeak(&v40, &from);
    id v10 = v8;
    id v38 = v10;
    id v11 = objc_retainBlock(&v34);
    uint64_t v12 = sub_100142940((uint64_t)NRDLocalDevice, v10, 0);
    if (v12)
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v13 = (id)qword_1001F4B28;
      char IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        id v15 = (id)qword_1001F4B28;
        _NRLogWithArgs();
      }
    }
    else
    {
      id v16 = v10;
      self;
      uint64_t v12 = sub_100142940((uint64_t)NRDLocalDevice, v16, 1);

      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v17 = (id)qword_1001F4B28;
      int v18 = _NRLogIsLevelEnabled();

      if (v18)
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        id v17 = (id)qword_1001F4B28;
        _NRLogWithArgs();
      }
      if (!v12)
      {
        id v27 = sub_1001071DC();
        int v28 = _NRLogIsLevelEnabled();

        if (v28)
        {
          id v29 = sub_1001071DC();
          _NRLogWithArgs();
        }
        id v6 = (id)_os_log_pack_size();
        xpc_object_t v5 = (char *)&v32 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v30 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v30 = 136446210;
        *(void *)(v30 + 4) = "-[NRDevicePairingCandidateContext registerPairingCandidate:operationalProp:]";
        sub_1001071DC();
        _NRLogAbortWithPack();
        __break(1u);
LABEL_39:
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
LABEL_30:
        id v22 = (id)qword_1001F4B28;
        int v23 = _NRLogIsLevelEnabled();

        if (v23)
        {
          if (qword_1001F4B30 != -1) {
            dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
          }
          id v24 = (id)qword_1001F4B28;
          id v31 = *((id *)v12 + 4);
          _NRLogWithArgs();
        }
        id v25 = *((id *)v12 + 4);
        sub_10014314C((uint64_t)NRDLocalDevice, v25, 0, 0, 0, v5, 0, 0, 0, v17, 0, @"cmpn-pairing", v11);

        objc_destroyWeak(v33);
        objc_destroyWeak(v32);
        objc_destroyWeak(&from);
        objc_destroyWeak(&location);

        a1 = (id *)1;
        goto LABEL_35;
      }
    }
    id v17 = v6;
    if (!v17) {
      id v17 = +[NRDeviceOperationalProperties copyPropertiesForDefaultPairedPhone];
    }
    id v19 = *((id *)v12 + 4);
    sub_10014B1CC((uint64_t)NRDLocalDevice, v19);

    sub_100117DF0(v17);
    if (v12[9] && !v12[8])
    {
      id v20 = *((id *)v12 + 4);
      sub_100144F64((uint64_t)NRDLocalDevice, v20, &stru_1001C7988);
    }
    id v21 = *((id *)v12 + 4);
    sub_10014B328((uint64_t)NRDLocalDevice, v10, v21);

    if (qword_1001F4B30 == -1) {
      goto LABEL_30;
    }
    goto LABEL_39;
  }
  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    _NRLogWithArgs();
  }
  a1 = 0;
LABEL_35:

  return a1;
}

void sub_10010D4B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(*(id **)(v1 - 168));
  objc_destroyWeak(*(id **)(v1 - 176));
  objc_destroyWeak((id *)(v1 - 104));
  objc_destroyWeak((id *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_10010D4F4(void **a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    _NRLogWithArgs();
  }
  id WeakRetained = (unsigned __int8 *)objc_loadWeakRetained(a1 + 5);
  id v7 = objc_loadWeakRetained(a1 + 6);
  uint64_t v8 = v7;
  if (WeakRetained && v7)
  {
    xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
    if (v9)
    {
      id v10 = v9;
      *(void *)uuid = 0;
      uint64_t v28 = 0;
      id v11 = [*((id *)WeakRetained + 4) uuid];
      [v11 getUUIDBytes:uuid];

      xpc_dictionary_set_uuid(v10, nrXPCKeyTargetPairingCandidate, uuid);
      uint64_t v12 = (void *)*((void *)WeakRetained + 5);
      if (v12)
      {
        id v24 = 0;
        id v13 = v12;
        int v14 = +[NSKeyedArchiver archivedDataWithRootObject:v13 requiringSecureCoding:1 error:&v24];
        id v15 = v24;

        if (v15)
        {
          if (qword_1001F4B30 != -1) {
            dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4B30 != -1) {
              dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
            }
            _NRLogWithArgs();
          }
        }
        else
        {
          xpc_dictionary_set_data(v10, nrXPCKeyPairingTarget, [v14 bytes], (size_t)[v14 length]);
        }
      }
      if (a2)
      {
        int64_t v16 = -3002;
      }
      else
      {
        id v17 = sub_100142940((uint64_t)NRDLocalDevice, a1[4], 0);
        int v18 = v17;
        if (v17)
        {
          *(void *)id v25 = 0;
          uint64_t v26 = 0;
          id v19 = *((id *)v17 + 4);
          [v19 getUUIDBytes:v25];

          xpc_dictionary_set_uuid(v10, nrXPCKeyNRUUID, v25);
        }
        else
        {
          if (qword_1001F4B30 != -1) {
            dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4B30 != -1) {
              dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
            }
            _NRLogWithArgs();
          }
        }

        int64_t v16 = 0;
      }
      sub_100108878((uint64_t)v8, v16, 0xCuLL, v10);

      goto LABEL_37;
    }
    id v20 = sub_1001071DC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v22 = sub_1001071DC();
      _NRLogWithArgs();
    }
    id v5 = (id)_os_log_pack_size();
    id WeakRetained = &v25[-((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
    __error();
    uint64_t v23 = _os_log_pack_fill();
    sub_1000DFF90(v23, (uint64_t)"nr_xpc_dictionary_create");
    sub_1001071DC();
    _NRLogAbortWithPack();
  }
  else if (qword_1001F4B30 == -1)
  {
    goto LABEL_19;
  }
  dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
LABEL_19:
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    _NRLogWithArgs();
  }
LABEL_37:
}

void sub_10010D9D4(id a1, int64_t a2, NSString *a3)
{
  id v3 = a3;
  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    _NRLogWithArgs();
  }
}

void sub_10010DAB8(id *a1)
{
  id v2 = a1 + 6;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);

  if (WeakRetained)
  {
    id v4 = a1[4];
    id v5 = a1[5];
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
    memset(v13, 0, sizeof(v13));
    ccsha256_di();
    [v4 length];
    [v4 bytes];
    [v5 length];
    [v5 bytes];
    ccpbkdf2_hmac();
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
    id v6 = objc_loadWeakRetained(v2);
    if (v6)
    {
      id v7 = +[NSData _newZeroingDataWithBytes:v13 length:32];
      cc_clear();
      uint64_t v8 = v6[3];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10010DD8C;
      block[3] = &unk_1001C8840;
      id v11 = v6;
      id v12 = v7;
      id v9 = v7;
      dispatch_async(v8, block);
    }
  }
}

void sub_10010DD8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v3 = *(void **)(v1 + 184);
    *(void *)(v1 + 184) = 0;

    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = *(void **)(a1 + 40);
      objc_storeStrong((id *)(v4 + 176), v5);
    }
  }
}

void sub_10010DDEC(id a1)
{
  uint64_t v1 = _NRCopySerialQueueAttr();
  id v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_USER_INITIATED, 0);

  if (!v2)
  {
    id v7 = sub_1001071DC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = sub_1001071DC();
      _NRLogWithArgs();
    }
    id v3 = (const char *)_os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 136446466;
    *(void *)(v10 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v10 + 12) = 1024;
    *(_DWORD *)(v10 + 14) = 25;
    sub_1001071DC();
    _NRLogAbortWithPack();
LABEL_9:
    id v11 = sub_1001071DC();
    int v12 = _NRLogIsLevelEnabled();

    if (v12)
    {
      id v13 = sub_1001071DC();
      _NRLogWithArgs();
    }
    uint64_t v14 = _os_log_pack_size();
    __chkstk_darwin(v14);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)(v15 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v15 + 14) = v3;
    sub_1001071DC();
    _NRLogAbortWithPack();
  }
  id v3 = "terminusd.Pairing.Crypto";
  dispatch_queue_t v4 = dispatch_queue_create("terminusd.Pairing.Crypto", v2);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = (uint64_t)v4;

  id v6 = (void *)qword_1001F4B40;
  qword_1001F4B40 = v5;
}

void sub_10010E074(uint64_t a1, int64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  self;
  id v8 = v6;
  if (!v8)
  {
    id v11 = sub_1001071DC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v13 = sub_1001071DC();
      _NRLogWithArgs();
    }
LABEL_11:
    uint64_t v17 = _os_log_pack_size();
    __chkstk_darwin(v17);
    __error();
    uint64_t v18 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v18 = 136446210;
    *(void *)(v18 + 4) = "nr_xpc_dictionary_create_reply";
    sub_1001071DC();
    _NRLogAbortWithPack();
  }
  id v19 = v8;
  xpc_object_t reply = xpc_dictionary_create_reply(v8);
  if (!reply)
  {
    id v14 = sub_1001071DC();
    int v15 = _NRLogIsLevelEnabled();

    if (v15)
    {
      id v16 = sub_1001071DC();
      _NRLogWithArgs();
    }
    goto LABEL_11;
  }
  uint64_t v10 = reply;

  xpc_dictionary_set_int64(v10, nrXPCKeyResult, a2);
  xpc_connection_send_message(v7, v10);
}

void sub_10010E300(uint64_t a1, void *a2, void *a3)
{
  xpc_object_t xdict = a2;
  id v5 = a3;
  if (a1)
  {
    uint64_t v236 = v5;
    v238 = [*(id *)(a1 + 16) objectForKeyedSubscript:v5];
    if (!v238)
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        _NRLogWithArgs();
      }
      goto LABEL_233;
    }
    id v6 = xpc_dictionary_get_value(xdict, nrXPCKeyPairingManagerOperation);
    xpc_object_t object = v6;
    id v7 = v6;
    if (v6)
    {
      if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_uint64)
      {
        switch(xpc_uint64_get_value(v7))
        {
          case 1uLL:
            id v8 = xdict;
            id v9 = v238;
            uint64_t v10 = xpc_dictionary_get_value(v8, nrXPCKeyPairingManagerInfo);
            id v11 = v10;
            int v12 = v8;
            if (v10 && xpc_get_type(v10) == (xpc_type_t)&_xpc_type_data)
            {
              id v13 = objc_alloc((Class)NSData);
              bytes_ptr = xpc_data_get_bytes_ptr(v11);
              v264[0] = 0;
              xpc_object_t xarray = [v13 initWithBytes:bytes_ptr length:xpc_data_get_length(v11)];
              int v15 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:xarray error:v264];
              id v16 = v8;
              id obj = v264[0];
              if (obj)
              {
                id v184 = sub_1001071DC();
                int IsLevelEnabled = _NRLogIsLevelEnabled();

                if (IsLevelEnabled)
                {
                  id v186 = sub_1001071DC();
                  _NRLogWithArgs();
                }
              }
              else
              {
                id v17 = v9[2];
                uint64_t v18 = [v15 uuid];
                id v19 = [v17 objectForKeyedSubscript:v18];

                if (!v19)
                {
                  id v20 = [v15 pairingCriteria];
                  id v21 = v20;
                  if (v20)
                  {
                    if ([v20 pairingTransport] == 1)
                    {
                      id v22 = [v15 pairingCriteria];
                      BOOL v23 = [v22 deviceType] == (id)1;

                      if (v23)
                      {
                        id v24 = sub_10010BA3C((id *)[NRDevicePairingManagerContext alloc], v15, *(void **)(a1 + 8), v9);
                        id v25 = v9[2];
                        uint64_t v26 = [v15 uuid];
                        [v25 setObject:v24 forKeyedSubscript:v26];

                        if (qword_1001F4B30 != -1) {
                          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                        }
                        if (_NRLogIsLevelEnabled())
                        {
                          if (qword_1001F4B30 != -1) {
                            dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                          }
                          id v27 = (id)qword_1001F4B28;
                          uint64_t v225 = [v15 fullDescription];
                          _NRLogWithArgs();
                        }
                        sub_10010E074((uint64_t)NRDevicePairingDirector, 0, v12, v9[1]);

                        goto LABEL_20;
                      }
                      id v196 = sub_1001071DC();
                      int v197 = _NRLogIsLevelEnabled();

                      if (v197)
                      {
                        id v198 = sub_1001071DC();
                        [v21 deviceType];
                        _NRLogWithArgs();
                      }
                    }
                    else
                    {
                      id v193 = sub_1001071DC();
                      int v194 = _NRLogIsLevelEnabled();

                      if (v194)
                      {
                        id v195 = sub_1001071DC();
                        [v21 pairingTransport];
                        _NRLogWithArgs();
                      }
                    }
                  }
                  else
                  {
                    id v190 = sub_1001071DC();
                    int v191 = _NRLogIsLevelEnabled();

                    if (v191)
                    {
                      id v192 = sub_1001071DC();
                      _NRLogWithArgs();
                    }
                  }
                  id v16 = v12;
                  sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v12, v9[1]);
LABEL_20:

LABEL_21:
                  goto LABEL_22;
                }
                id v187 = sub_1001071DC();
                int v188 = _NRLogIsLevelEnabled();

                if (v188)
                {
                  id v189 = sub_1001071DC();
                  _NRLogWithArgs();
                }
              }
              id v16 = v8;
              sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v8, v9[1]);
              goto LABEL_21;
            }
            id v175 = sub_1001071DC();
            int v176 = _NRLogIsLevelEnabled();

            if (v176)
            {
              id v177 = sub_1001071DC();
              _NRLogWithArgs();
            }
            id v16 = v8;
            sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v8, v9[1]);
LABEL_22:

            goto LABEL_232;
          case 2uLL:
            uint64_t v28 = xdict;
            id v29 = v238;
            id v229 = v28;
            uint64_t v30 = xpc_dictionary_get_value(v28, nrXPCKeyPairingManagers);
            xpc_object_t xarraya = v30;
            if (v30 && xpc_get_type(v30) == (xpc_type_t)&_xpc_type_array)
            {
              long long v254 = 0;
              uint64_t v255 = (uint64_t)&v254;
              uint64_t v256 = 0x2020000000;
              LOBYTE(v257) = 0;
              id from = 0;
              p_id from = (uint64_t)&from;
              uint64_t v250 = 0x3032000000;
              long long v251 = sub_100108194;
              long long v252 = sub_1001081A4;
              id v253 = [objc_alloc((Class)NSMutableSet) initWithCapacity:xpc_array_get_count(xarraya)];
              applier = _NSConcreteStackBlock;
              uint64_t v244 = 3221225472;
              long long v245 = sub_100112800;
              long long v246 = &unk_1001C7A78;
              v247[0] = &v254;
              v247[1] = &from;
              xpc_array_apply(xarraya, &applier);
              if (*(unsigned char *)(v255 + 24) || ![*(id *)(p_from + 40) count])
              {
                id v181 = sub_1001071DC();
                char v182 = _NRLogIsLevelEnabled();

                if (v182)
                {
                  id v183 = sub_1001071DC();
                  _NRLogWithArgs();
                }
                id v45 = v29[1];
                sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v28, v45);
              }
              else
              {
                long long v262 = 0u;
                long long v263 = 0u;
                blocuint64_t k = 0u;
                long long v261 = 0u;
                id obja = *(id *)(p_from + 40);
                id v31 = [obja countByEnumeratingWithState:&block objects:v264 count:16];
                if (v31)
                {
                  uint64_t v32 = *(void *)v261;
                  do
                  {
                    id v33 = 0;
                    do
                    {
                      if (*(void *)v261 != v32) {
                        objc_enumerationMutation(obja);
                      }
                      uint64_t v34 = *(void *)(*((void *)&block + 1) + 8 * (void)v33);
                      id v35 = v29[2];
                      int v36 = [v35 objectForKeyedSubscript:v34];

                      if (v36)
                      {
                        if (qword_1001F4B30 != -1) {
                          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                        }
                        id v37 = (id)qword_1001F4B28;
                        int v38 = _NRLogIsLevelEnabled();

                        if (v38)
                        {
                          if (qword_1001F4B30 != -1) {
                            dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                          }
                          id v39 = (id)qword_1001F4B28;
                          _NRLogWithArgs();
                        }
                        sub_10010B514((uint64_t)v36);
                        id v40 = v29[2];
                        [v40 setObject:0 forKeyedSubscript:v34];
LABEL_46:

                        goto LABEL_47;
                      }
                      *(unsigned char *)(v255 + 24) = 1;
                      if (qword_1001F4B30 != -1) {
                        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                      }
                      id v41 = (id)qword_1001F4B28;
                      char v42 = _NRLogIsLevelEnabled();

                      if (v42)
                      {
                        if (qword_1001F4B30 != -1) {
                          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                        }
                        id v40 = (id)qword_1001F4B28;
                        _NRLogWithArgs();
                        goto LABEL_46;
                      }
LABEL_47:

                      id v33 = (char *)v33 + 1;
                    }
                    while (v31 != v33);
                    id v43 = [obja countByEnumeratingWithState:&block objects:v264 count:16];
                    id v31 = v43;
                  }
                  while (v43);
                }

                int v44 = *(unsigned __int8 *)(v255 + 24);
                id v45 = v29[1];
                if (v44) {
                  int64_t v46 = -2005;
                }
                else {
                  int64_t v46 = 0;
                }
                sub_10010E074((uint64_t)NRDevicePairingDirector, v46, v229, v45);
              }

              _Block_object_dispose(&from, 8);
              _Block_object_dispose(&v254, 8);
            }
            else
            {
              id v178 = sub_1001071DC();
              int v179 = _NRLogIsLevelEnabled();

              if (v179)
              {
                id v180 = sub_1001071DC();
                _NRLogWithArgs();
              }
              sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v28, v29[1]);
            }

            goto LABEL_232;
          case 3uLL:
            id v54 = xdict;
            long long v55 = v238;
            if (qword_1001F4B80 != -1) {
              dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
            }
            if (byte_1001F4B78)
            {
              id v56 = v54;
              objb = v55;
              long long v57 = v55;
              uuid = xpc_dictionary_get_uuid(v56, nrXPCKeyPairingManager);
              if (!uuid || (long long v59 = uuid, uuid_is_null(uuid)))
              {
                sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v56, v57[1]);
                goto LABEL_193;
              }
              xpc_object_t xarrayc = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v59];
              uint64_t v85 = [v57[2] objectForKeyedSubscript:];
              id v86 = (id *)v85;
              if (v85)
              {
                if (!*(void *)(v85 + 88))
                {
                  if (*(void *)(v85 + 40))
                  {
                    long long v262 = 0u;
                    long long v263 = 0u;
                    blocuint64_t k = 0u;
                    long long v261 = 0u;
                    id v87 = *(id *)(v85 + 40);
                    id v88 = [v87 countByEnumeratingWithState:&block objects:v264 count:16];
                    if (v88)
                    {
                      uint64_t v89 = *(void *)v261;
                      do
                      {
                        for (i = 0; i != v88; i = (char *)i + 1)
                        {
                          if (*(void *)v261 != v89) {
                            objc_enumerationMutation(v87);
                          }
                          id v91 = [v86[5] objectForKeyedSubscript:*(void *)(*((void *)&block + 1) + 8 * i)];
                          if (v91) {
                            v91[8] = 0;
                          }
                        }
                        id v88 = [v87 countByEnumeratingWithState:&block objects:v264 count:16];
                      }
                      while (v88);
                    }
                  }
                  else
                  {
                    id v123 = objc_alloc_init((Class)NSMutableDictionary);
                    id v124 = v86[5];
                    v86[5] = v123;
                  }
                  id v125 = [NRDiscoveryClient alloc];
                  id v126 = *(id *)(a1 + 8);
                  id v127 = sub_1001270E8((id *)&v125->super.isa, v126, 0);
                  id v128 = v86[11];
                  v86[11] = v127;

                  uint64_t v129 = v86[11];
                  if (v129)
                  {
                    if (v129[19] || (v129[22] = 1, (uint64_t v129 = v86[11]) != 0)) {
                      v129[16] = 1;
                    }
                  }
                  objc_initWeak(&location, v86);
                  uint64_t v130 = v86[11];
                  id from = _NSConcreteStackBlock;
                  p_id from = 3221225472;
                  uint64_t v250 = (uint64_t)sub_1001124EC;
                  long long v251 = (uint64_t (*)(uint64_t, uint64_t))&unk_1001C7AA0;
                  objc_copyWeak((id *)&v252, &location);
                  id v131 = &from;
                  id v132 = v131;
                  if (v130 && !*((unsigned char *)v130 + 19))
                  {
                    id v133 = objc_retainBlock(v131);
                    uint64_t v134 = (void *)v130[9];
                    v130[9] = v133;
                  }
                  id v135 = v86[11];
                  applier = _NSConcreteStackBlock;
                  uint64_t v244 = 3221225472;
                  long long v245 = sub_100112550;
                  long long v246 = &unk_1001C7AA0;
                  objc_copyWeak(v247, &location);
                  id v136 = &applier;
                  id v137 = v136;
                  if (v135 && !*((unsigned char *)v135 + 19))
                  {
                    id v138 = objc_retainBlock(v136);
                    id v139 = (void *)v135[10];
                    v135[10] = v138;
                  }
                  unsigned int v140 = v86[11];
                  long long v254 = _NSConcreteStackBlock;
                  uint64_t v255 = 3221225472;
                  uint64_t v256 = (uint64_t)sub_10011279C;
                  id v257 = &unk_1001C7AA0;
                  objc_copyWeak(&v258, &location);
                  id v141 = &v254;
                  id v142 = v141;
                  if (v140 && !*((unsigned char *)v140 + 19))
                  {
                    id v143 = objc_retainBlock(v141);
                    id v144 = (void *)v140[11];
                    v140[11] = v143;
                  }
                  if (qword_1001F4B30 != -1) {
                    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                  }
                  id v145 = (id)qword_1001F4B28;
                  char v146 = _NRLogIsLevelEnabled();

                  if (v146)
                  {
                    if (qword_1001F4B30 != -1) {
                      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                    }
                    id v147 = (id)qword_1001F4B28;
                    id v148 = v86[11];
                    id v149 = v86[11];
                    _NRLogWithArgs();
                  }
                  id v150 = v86[11];
                  sub_100127810((uint64_t)v150, 255);

                  uint64_t v151 = (id *)v86[11];
                  id v152 = @"cmpn-pairing-discovery";
                  if (v151 && !*((unsigned char *)v151 + 19)) {
                    objc_storeStrong(v151 + 25, @"cmpn-pairing-discovery");
                  }

                  id v153 = v86[11];
                  sub_10012AF70(v153);

                  id v154 = v57[1];
                  sub_10010E074((uint64_t)NRDevicePairingDirector, 0, v56, v154);

                  objc_destroyWeak(&v258);
                  objc_destroyWeak(v247);
                  objc_destroyWeak((id *)&v252);
                  objc_destroyWeak(&location);
                  goto LABEL_192;
                }
                id v209 = sub_1001071DC();
                int v210 = _NRLogIsLevelEnabled();

                if (v210)
                {
                  id v211 = sub_1001071DC();
                  id v212 = v86[11];
                  _NRLogWithArgs();
                }
              }
              else
              {
                id v204 = sub_1001071DC();
                int v205 = _NRLogIsLevelEnabled();

                if (v205)
                {
                  id v206 = sub_1001071DC();
                  _NRLogWithArgs();
                }
              }
              sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v56, v57[1]);
LABEL_192:

LABEL_193:
              long long v55 = objb;
LABEL_194:

              goto LABEL_232;
            }
            id v69 = xpc_dictionary_get_uuid(v54, nrXPCKeyPairingManager);
            if (!v69 || (int v70 = v69, uuid_is_null(v69)))
            {
              sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v54, v55[1]);
              goto LABEL_194;
            }
            id v98 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v70];
            long long v99 = v55;
            uint64_t v100 = [v55[2] objectForKeyedSubscript:v98];
            id v101 = (id *)v100;
            if (v100)
            {
              if (!*(void *)(v100 + 56))
              {
                if (!*(void *)(v100 + 64))
                {
                  long long v262 = 0u;
                  long long v263 = 0u;
                  blocuint64_t k = 0u;
                  long long v261 = 0u;
                  id v102 = *(id *)(v100 + 40);
                  id v103 = [v102 countByEnumeratingWithState:&block objects:v264 count:16];
                  if (v103)
                  {
                    uint64_t v104 = *(void *)v261;
                    do
                    {
                      for (j = 0; j != v103; j = (char *)j + 1)
                      {
                        if (*(void *)v261 != v104) {
                          objc_enumerationMutation(v102);
                        }
                        long long v106 = [v101[5] objectForKeyedSubscript:*(void *)(*((void *)&block + 1) + 8 * (void)j)];
                        if (v106) {
                          v106[8] = 0;
                        }
                      }
                      id v103 = [v102 countByEnumeratingWithState:&block objects:v264 count:16];
                    }
                    while (v103);
                  }

                  id v107 = objc_alloc_init((Class)CBDiscovery);
                  objc_storeStrong(v101 + 7, v107);
                  [v107 setDispatchQueue:*(void *)(a1 + 8)];
                  id v108 = [v101[3] pairingCriteria];
                  uint64_t v109 = [v108 rssi];
                  BOOL v110 = v109 == 0;

                  if (!v110)
                  {
                    id v111 = v101[3];
                    id v112 = [v111 pairingCriteria];
                    BOOL v113 = [v112 rssi];
                    [v107 setBleRSSIThresholdHint:[v113 charValue]];
                  }
                  objc_initWeak(&location, v101);
                  applier = _NSConcreteStackBlock;
                  uint64_t v244 = 3221225472;
                  long long v245 = sub_100111644;
                  long long v246 = &unk_1001C8238;
                  objc_copyWeak(v247, &location);
                  [v107 setDeviceFoundHandler:&applier];
                  long long v254 = _NSConcreteStackBlock;
                  uint64_t v255 = 3221225472;
                  uint64_t v256 = (uint64_t)sub_100112108;
                  id v257 = &unk_1001C8238;
                  objc_copyWeak(&v258, &location);
                  [v107 setDeviceLostHandler:&v254];
                  [v107 addDiscoveryType:23];
                  [v107 setDiscoveryFlags:0x20000282000000];
                  id from = _NSConcreteStackBlock;
                  p_id from = 3221225472;
                  uint64_t v250 = (uint64_t)sub_100112358;
                  long long v251 = (uint64_t (*)(uint64_t, uint64_t))&unk_1001C7AC8;
                  objc_copyWeak(&v253, &location);
                  long long v252 = (void (*)(uint64_t))v54;
                  [v107 activateWithCompletion:&from];

                  objc_destroyWeak(&v253);
                  objc_destroyWeak(&v258);
                  objc_destroyWeak(v247);
                  objc_destroyWeak(&location);

                  goto LABEL_149;
                }
                id v221 = sub_1001071DC();
                int v222 = _NRLogIsLevelEnabled();

                if (v222) {
                  goto LABEL_289;
                }
LABEL_290:
                sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v54, v99[1]);
LABEL_149:

                long long v55 = v99;
                goto LABEL_194;
              }
              id v217 = sub_1001071DC();
              int v218 = _NRLogIsLevelEnabled();

              if (!v218) {
                goto LABEL_290;
              }
            }
            else
            {
              id v213 = sub_1001071DC();
              int v214 = _NRLogIsLevelEnabled();

              if (!v214) {
                goto LABEL_290;
              }
            }
LABEL_289:
            id v223 = sub_1001071DC();
            _NRLogWithArgs();

            goto LABEL_290;
          case 4uLL:
            id v60 = xdict;
            uint64_t v61 = v238;
            if (qword_1001F4B80 != -1) {
              dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
            }
            if (byte_1001F4B78)
            {
              id v62 = v60;
              uint64_t v63 = v61;
              uint64_t v64 = xpc_dictionary_get_uuid(v62, nrXPCKeyPairingManager);
              if (!v64 || (uint64_t v65 = v64, uuid_is_null(v64)))
              {
                uint64_t v66 = v63[1];
                int64_t v67 = -2005;
                uint64_t v68 = v62;
LABEL_155:
                sub_10010E074((uint64_t)NRDevicePairingDirector, v67, v68, v66);
                goto LABEL_156;
              }
              id v92 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v65];
              uint64_t v93 = [v63[2] objectForKeyedSubscript:v92];
              long long v94 = (void *)v93;
              if (v93)
              {
                uint64_t v95 = *(void *)(v93 + 88);
                if (v95 && *(unsigned char *)(v95 + 16))
                {
                  sub_1001272AC(v95);
                  int64_t v96 = 0;
                  id v97 = (id)v94[11];
                  v94[11] = 0;
LABEL_132:

LABEL_133:
                  sub_10010E074((uint64_t)NRDevicePairingDirector, v96, v62, v63[1]);

LABEL_156:
                  goto LABEL_157;
                }
                id v199 = sub_1001071DC();
                int v200 = _NRLogIsLevelEnabled();

                if (v200)
                {
LABEL_274:
                  id v97 = sub_1001071DC();
                  _NRLogWithArgs();
                  int64_t v96 = -2005;
                  goto LABEL_132;
                }
              }
              else
              {
                id v207 = sub_1001071DC();
                int v208 = _NRLogIsLevelEnabled();

                if (v208) {
                  goto LABEL_274;
                }
              }
              int64_t v96 = -2005;
              goto LABEL_133;
            }
            id v71 = xpc_dictionary_get_uuid(v60, nrXPCKeyPairingManager);
            if (!v71 || (int v72 = v71, uuid_is_null(v71)))
            {
              if (qword_1001F4B30 != -1) {
                dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4B30 != -1) {
                  dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                }
                _NRLogWithArgs();
              }
              sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v60, v61[1]);
LABEL_157:

              goto LABEL_232;
            }
            id v62 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v72];
            uint64_t v114 = [v61[2] objectForKeyedSubscript:v62];
            uint64_t v63 = (void **)v114;
            if (v114)
            {
              id v115 = *(void **)(v114 + 56);
              if (v115)
              {
                [v115 invalidate];
                uint64_t v116 = 0;
                id v117 = v63[7];
                v63[7] = 0;
LABEL_153:

LABEL_154:
                uint64_t v66 = v61[1];
                int64_t v67 = v116;
                uint64_t v68 = v60;
                goto LABEL_155;
              }
              id v219 = sub_1001071DC();
              int v220 = _NRLogIsLevelEnabled();

              if (v220)
              {
LABEL_286:
                id v117 = sub_1001071DC();
                _NRLogWithArgs();
                uint64_t v116 = -2005;
                goto LABEL_153;
              }
            }
            else
            {
              id v215 = sub_1001071DC();
              int v216 = _NRLogIsLevelEnabled();

              if (v216) {
                goto LABEL_286;
              }
            }
            uint64_t v116 = -2005;
            goto LABEL_154;
          case 6uLL:
            sub_1001108FC(a1, xdict, v238);
            goto LABEL_232;
          case 9uLL:
            goto LABEL_232;
          case 0xAuLL:
            id v47 = xdict;
            long long v48 = v238;
            long long v49 = xpc_dictionary_get_uuid(v47, nrXPCKeyPairingManager);
            if (!v49 || (long long v50 = v49, uuid_is_null(v49)))
            {
              sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v47, v48[1]);
              goto LABEL_231;
            }
            v230 = (id *)[objc_alloc((Class)NSUUID) initWithUUIDBytes:v50];
            [v48[2] objectForKeyedSubscript:];
            id v73 = (id *)objc_claimAutoreleasedReturnValue();
            if (!v73)
            {
              id v201 = sub_1001071DC();
              int v202 = _NRLogIsLevelEnabled();

              if (v202)
              {
                id v203 = sub_1001071DC();
                _NRLogWithArgs();
              }
              sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v47, v48[1]);
              id v73 = 0;
LABEL_230:

LABEL_231:
              goto LABEL_232;
            }
            int v74 = xpc_dictionary_get_value(v47, nrXPCKeyPairingTarget);
            id objc = v74;
            id v75 = v74;
            if (v74 && xpc_get_type(v74) == (xpc_type_t)&_xpc_type_data)
            {
              id v119 = v73;
              id v120 = objc_alloc((Class)NSData);
              __int16 v121 = xpc_data_get_bytes_ptr(v75);
              id v122 = [v120 initWithBytes:v121 length:xpc_data_get_length(v75)];
              applier = 0;
              id v73 = v119;
              xpc_object_t xarrayb = v122;
              id v76 = +[NSKeyedUnarchiver unarchivedObjectOfClass:objc_opt_class() fromData:v122 error:&applier];
              id v79 = applier;
              if (!v76 || (objc_opt_class(), (objc_opt_isKindOfClass() & (v79 == 0)) == 0))
              {
                if (qword_1001F4B30 != -1) {
                  dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4B30 != -1) {
                    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                  }
                  _NRLogWithArgs();
                }
                sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v47, v48[1]);
                goto LABEL_229;
              }
            }
            else
            {
              sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v47, v48[1]);
              id v76 = 0;
            }
            id v77 = [v76 candidate];
            xpc_object_t xarrayb = [v77 uuid];

            id v78 = v73[5];
            id v79 = [v78 objectForKeyedSubscript:xarrayb];

            if (v79)
            {
              if (qword_1001F4B80 != -1) {
                dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
              }
              if (byte_1001F4B78 || (sub_10010C844((uint64_t)v73) & 1) != 0)
              {
                objc_storeStrong(v79 + 5, v76);
                id v80 = [v76 authMethod];
                id v81 = [v76 authData];
                v264[0] = _NSConcreteStackBlock;
                v264[1] = (id)3221225472;
                long long v265 = (void (*)(id *))sub_10011157C;
                v266 = &unk_1001C7920;
                id v79 = v79;
                v267 = v79;
                id v76 = v76;
                id v268 = v76;
                id v269 = v47;
                v270 = v48;
                id v82 = v81;
                uint64_t v83 = v264;
                id v84 = v83;
                if (v82 && v80)
                {
                  if (v80 == (id)2)
                  {
                    id v227 = (id *)v82;
                    id v228 = v84;
                    if (v79[23])
                    {
                      if (qword_1001F4B30 != -1) {
                        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                      }
                      if (_NRLogIsLevelEnabled())
                      {
                        if (qword_1001F4B30 != -1) {
                          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                        }
                        _NRLogWithArgs();
                      }
                    }
                    else
                    {
                      if (qword_1001F4B30 != -1) {
                        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                      }
                      if (_NRLogIsLevelEnabled())
                      {
                        if (qword_1001F4B30 != -1) {
                          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                        }
                        _NRLogWithArgs();
                      }
                      id v160 = v79[21];
                      objc_initWeak(&from, v79);
                      dispatch_group_t v161 = dispatch_group_create();
                      uint64_t v162 = v79[23];
                      v79[23] = v161;

                      uint64_t v163 = qword_1001F4B38;
                      group = v79[23];
                      if (v163 != -1) {
                        dispatch_once(&qword_1001F4B38, &stru_1001C7B58);
                      }
                      *(void *)&blocuint64_t k = _NSConcreteStackBlock;
                      *((void *)&block + 1) = 3221225472;
                      *(void *)&long long v261 = sub_10010DAB8;
                      *((void *)&v261 + 1) = &unk_1001C79B0;
                      id v164 = (id)qword_1001F4B40;
                      objc_copyWeak((id *)&v263, &from);
                      *(void *)&long long v262 = v227;
                      *((void *)&v262 + 1) = v160;
                      id v165 = v160;
                      dispatch_group_async(group, v164, &block);

                      objc_destroyWeak((id *)&v263);
                      objc_destroyWeak(&from);
                    }
                    id v166 = v73;
                    id v167 = v79[3];
                    id v168 = v79[23];
                    id v169 = v167;
                    id v73 = v166;
                    dispatch_group_notify(v168, v169, v228);

                    id v84 = v228;
                  }
                  else if (v80 == (id)1)
                  {
                    objc_storeStrong(v79 + 22, v81);
                    v265(v84);
                  }
                }
                else
                {
                  id v159 = v83;
                  v265(v83);
                  id v84 = v159;
                }
              }
              else
              {
                if (qword_1001F4B30 != -1) {
                  dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                }
                if (_NRLogIsLevelEnabled())
                {
                  dispatch_data_t v155 = v73;
                  if (qword_1001F4B30 != -1) {
                    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                  }
                  unsigned int v156 = (id *)(a1 + 24);
                  id v157 = (id)qword_1001F4B28;
                  id WeakRetained = objc_loadWeakRetained(v156);
                  id v73 = v155;
                  _NRLogWithArgs();
                }
                sub_10010E074((uint64_t)NRDevicePairingDirector, -3001, v47, v48[1]);
              }
            }
            else
            {
              if (qword_1001F4B30 != -1) {
                dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4B30 != -1) {
                  dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                }
                id v118 = (id)qword_1001F4B28;
                id v224 = [v76 candidate];
                _NRLogWithArgs();
              }
              sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v47, v48[1]);
              id v79 = 0;
            }
LABEL_229:

            goto LABEL_230;
          case 0xBuLL:
            long long v51 = v238;
            id v52 = xdict;
            if (qword_1001F4B80 != -1) {
              dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
            }
            long long v53 = v51[1];

            sub_10010E074((uint64_t)NRDevicePairingDirector, -9999, v52, v53);
            goto LABEL_232;
          case 0xDuLL:
            sub_100110E48(xdict, v238);
            goto LABEL_232;
          default:
            if (qword_1001F4B30 != -1) {
              dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4B30 != -1) {
                dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
              }
              _NRLogWithArgs();
            }
            sub_10010E074((uint64_t)NRDevicePairingDirector, -2003, xdict, v238[1]);
            goto LABEL_232;
        }
      }
      id v172 = sub_1001071DC();
      int v173 = _NRLogIsLevelEnabled();

      if (v173) {
        goto LABEL_240;
      }
    }
    else
    {
      id v170 = sub_1001071DC();
      int v171 = _NRLogIsLevelEnabled();

      if (v171)
      {
LABEL_240:
        id v174 = sub_1001071DC();
        _NRLogWithArgs();
      }
    }
    sub_1001106EC(a1, v236);
LABEL_232:

LABEL_233:
    id v5 = v236;
  }
}

void sub_10011060C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id *a16, id *a17, id *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id location)
{
  objc_destroyWeak(v42);
  objc_destroyWeak(v44);
  objc_destroyWeak(v43);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001106EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = [*(id *)(a1 + 16) objectForKeyedSubscript:v3];
    uint64_t v5 = v4;
    if (v4)
    {
      id v6 = *(_xpc_connection_s **)(v4 + 8);
      if (v6)
      {
        xpc_connection_cancel(v6);
        id v7 = *(void **)(v5 + 8);
        *(void *)(v5 + 8) = 0;
      }
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      id v8 = *(id *)(v5 + 16);
      id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v9)
      {
        id v10 = v9;
        uint64_t v11 = *(void *)v15;
        do
        {
          for (i = 0; i != v10; i = (char *)i + 1)
          {
            if (*(void *)v15 != v11) {
              objc_enumerationMutation(v8);
            }
            id v13 = [*(id *)(v5 + 16) objectForKeyedSubscript:*(void *)(*((void *)&v14 + 1) + 8 * i)];
            sub_10010B514((uint64_t)v13);
          }
          id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
        }
        while (v10);
      }

      [*(id *)(v5 + 16) removeAllObjects];
      [*(id *)(a1 + 16) setObject:0 forKeyedSubscript:v3];
    }
    else
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1001108FC(uint64_t a1, void *a2, void *a3)
{
  id v37 = a2;
  uint64_t v5 = a3;
  uuid = xpc_dictionary_get_uuid(v37, nrXPCKeyPairingManager);
  if (uuid)
  {
    id v7 = uuid;
    if (!uuid_is_null(uuid))
    {
      id v8 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v7];
      id v9 = [v5[2] objectForKeyedSubscript:v8];
      if (!v9)
      {
        id v21 = sub_1001071DC();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (!IsLevelEnabled) {
          goto LABEL_21;
        }
        id v13 = sub_1001071DC();
        _NRLogWithArgs();
LABEL_20:

LABEL_21:
        goto LABEL_22;
      }
      id v10 = (const char *)nrXPCKeyTargetPairingCandidate;
      uint64_t v11 = xpc_dictionary_get_uuid(v37, nrXPCKeyTargetPairingCandidate);
      if (!v11) {
        goto LABEL_21;
      }
      int v12 = v11;
      if (uuid_is_null(v11)) {
        goto LABEL_21;
      }
      id v13 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v12];
      long long v14 = [v9[5] objectForKeyedSubscript:v13];
      if (v14)
      {
        uint64_t uint64 = xpc_dictionary_get_uint64(v37, nrXPCKeyAuthRequestType);
        if (uint64 - 3 > 0xFFFFFFFFFFFFFFFDLL)
        {
          if (qword_1001F4B80 != -1) {
            dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
          }
          if (byte_1001F4B78 || (sub_10010C844((uint64_t)v9) & 1) != 0)
          {
            sub_10010CA28((uint64_t)v14, uint64);
LABEL_19:

            goto LABEL_20;
          }
          if (qword_1001F4B30 != -1) {
            dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
          }
          if (_NRLogIsLevelEnabled())
          {
            id v16 = sub_1001071DC();
            id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
            _NRLogWithArgs();
          }
          xpc_object_t v17 = xpc_dictionary_create(0, 0, 0);
          if (v17)
          {
            uint64_t v18 = v17;
            xpc_dictionary_set_uuid(v17, v10, v12);
            uint64_t v19 = (uint64_t)v9;
            int64_t v20 = -3001;
LABEL_31:
            sub_100108878(v19, v20, 8uLL, v18);

            goto LABEL_19;
          }
          id v29 = sub_1001071DC();
          int v30 = _NRLogIsLevelEnabled();

          if (v30)
          {
LABEL_41:
            id v31 = sub_1001071DC();
            _NRLogWithArgs();
          }
LABEL_42:
          uint64_t v32 = _os_log_pack_size();
          __chkstk_darwin(v32);
          __error();
          uint64_t v33 = _os_log_pack_fill();
          sub_1000DFF90(v33, (uint64_t)"nr_xpc_dictionary_create");
          sub_1001071DC();
          _NRLogAbortWithPack();
        }
        id v25 = sub_1001071DC();
        int v26 = _NRLogIsLevelEnabled();

        if (!v26)
        {
LABEL_38:
          xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
          if (v28)
          {
            uint64_t v18 = v28;
            xpc_dictionary_set_uuid(v28, v10, v12);
            uint64_t v19 = (uint64_t)v9;
            int64_t v20 = -2005;
            goto LABEL_31;
          }
          id v34 = sub_1001071DC();
          int v35 = _NRLogIsLevelEnabled();

          if (v35) {
            goto LABEL_41;
          }
          goto LABEL_42;
        }
      }
      else
      {
        id v23 = sub_1001071DC();
        int v24 = _NRLogIsLevelEnabled();

        if (!v24) {
          goto LABEL_38;
        }
      }
      id v27 = sub_1001071DC();
      _NRLogWithArgs();

      goto LABEL_38;
    }
  }
  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    _NRLogWithArgs();
  }
LABEL_22:
}

void sub_100110E48(void *a1, void *a2)
{
  id v5 = a1;
  id v6 = a2;
  uuid = xpc_dictionary_get_uuid(v5, nrXPCKeyDeviceIdentifier);
  if (!uuid)
  {
    id v23 = sub_1001071DC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v25 = sub_1001071DC();
      _NRLogWithArgs();
    }
    goto LABEL_9;
  }
  id v8 = uuid;
  if (uuid_is_null(uuid))
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
LABEL_9:
    sub_10010E074((uint64_t)NRDevicePairingDirector, -2005, v5, v6[1]);
    goto LABEL_17;
  }
  id v9 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v8];
  if (!v9)
  {
    id v26 = sub_1001071DC();
    int v27 = _NRLogIsLevelEnabled();

    int v12 = "-[NRDevicePairingDirector handleUnpairRequest:forConnection:]";
    if (v27)
    {
      id v28 = sub_1001071DC();
      _NRLogWithArgs();
    }
    id v5 = (id)_os_log_pack_size();
    id v6 = (void **)((char *)v30 - ((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0));
    __error();
    uint64_t v29 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v29 = 136446210;
    *(void *)(v29 + 4) = "-[NRDevicePairingDirector handleUnpairRequest:forConnection:]";
    sub_1001071DC();
    _NRLogAbortWithPack();
    goto LABEL_23;
  }
  id v10 = v9;
  v30[0] = _NSConcreteStackBlock;
  uint64_t v3 = 3221225472;
  v30[1] = 3221225472;
  id v31 = sub_1001112AC;
  uint64_t v32 = &unk_1001C7AF0;
  id v33 = v9;
  id v34 = v5;
  int v35 = v6;
  id v11 = v10;
  id v2 = v30;
  int v12 = (char *)v11;
  self;
  self;
  if (qword_1001F4A20 != -1) {
LABEL_23:
  }
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  id v13 = (id)qword_1001F4A18;
  long long v14 = v12;
  long long v15 = v2;
  id v16 = v15;
  if (v13)
  {
    uint64_t v17 = v13[5];
    if (v17)
    {
      v36[0] = _NSConcreteStackBlock;
      v36[1] = v3;
      v36[2] = sub_1000B81F4;
      v36[3] = &unk_1001C6F40;
      uint64_t v18 = v14;
      id v37 = v18;
      id v38 = v16;
      uint64_t v19 = v36;
      int64_t v20 = v18;
      id v21 = [[NRBluetoothPairer alloc] initWithNRUUID:v20];

      id v22 = *(id *)(v17 + 24);
      [(NRBluetoothPairer *)v21 unpairWithCompletionQueue:v22 completionBlock:v19];
    }
    else
    {
      v31((void **)v15, 22, @"Already unpaired or bluetooth device not found");
    }
  }

LABEL_17:
}

void sub_1001112AC(void **a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  id v8 = sub_10013DD58((uint64_t)NRDLocalDevice, a1[4], 0);
  if (v8)
  {
    id v9 = a1[4];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100111494;
    v15[3] = &unk_1001C7AF0;
    id v16 = v9;
    id v17 = a1[5];
    id v18 = a1[6];
    sub_100144F64((uint64_t)NRDLocalDevice, v16, v15);
  }
  else
  {
    id v10 = (void *)_NRCopyLogObjectForNRUUID();
    int v11 = _NRLogIsLevelEnabled();

    if (v11)
    {
      int v12 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    id v13 = a1[6];
    if (v13) {
      long long v14 = (void *)v13[1];
    }
    else {
      long long v14 = 0;
    }
    sub_10010E074((uint64_t)NRDevicePairingDirector, -2008, a1[5], v14);
  }
}

void sub_100111494(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = a3;
  id v5 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    id v9 = *(void **)(v8 + 8);
  }
  else {
    id v9 = 0;
  }
  if (a2) {
    int64_t v10 = -3002;
  }
  else {
    int64_t v10 = 0;
  }
  sub_10010E074((uint64_t)NRDevicePairingDirector, v10, *(void **)(a1 + 40), v9);
}

void sub_10011157C(void *a1)
{
  uint64_t v2 = a1[4];
  if (!v2) {
    goto LABEL_7;
  }
  uint64_t v3 = *(void **)(v2 + 176);
  if (!v3) {
    goto LABEL_7;
  }
  id v4 = (void *)a1[5];
  id v5 = v3;
  id v6 = [v4 operationalProperties];
  unsigned int v7 = sub_10010CE4C((id *)v2, v5, v6);

  if (v7)
  {
    uint64_t v8 = (void *)a1[6];
    uint64_t v9 = a1[7];
    if (v9) {
      int64_t v10 = *(void **)(v9 + 8);
    }
    else {
      int64_t v10 = 0;
    }
    int64_t v11 = 0;
  }
  else
  {
LABEL_7:
    uint64_t v8 = (void *)a1[6];
    uint64_t v12 = a1[7];
    if (v12) {
      int64_t v10 = *(void **)(v12 + 8);
    }
    else {
      int64_t v10 = 0;
    }
    int64_t v11 = -2005;
  }

  sub_10010E074((uint64_t)NRDevicePairingDirector, v11, v8, v10);
}

void sub_100111644(uint64_t a1, void *a2)
{
  id v60 = a2;
  id WeakRetained = (void **)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v5 = v60;
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      uint64_t v49 = 393;
      long long v51 = v5;
      id v45 = "";
      id v47 = "-[NRDevicePairingManagerContext handleFoundDevice:]";
      _NRLogWithArgs();
    }
    id v6 = objc_alloc((Class)NSUUID);
    unsigned int v7 = [v5 identifier];
    id v8 = [v6 initWithUUIDString:v7];

    if (v8)
    {
      uint64_t v9 = [v5 watchSetupData];
      id v10 = v9;
      if (v9)
      {
        if ((unint64_t)[v9 length] > 4)
        {
          char v62 = 0;
          int v61 = 0;
          [v10 getBytes:&v61 length:5];
          if ((v61 & 0xE0) != 0x20)
          {
            if (qword_1001F4B30 != -1) {
              dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4B30 != -1) {
                dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
              }
              _NRLogWithArgs();
            }
            goto LABEL_83;
          }
          uint64_t v58 = [WeakRetained[6] objectForKeyedSubscript:v8];
          uint64_t v11 = [WeakRetained[5] objectForKeyedSubscript:];
          id v59 = [objc_alloc((Class)NSData) initWithBytes:(char *)&v61 + 1 length:4];
          uint64_t v12 = (char *)[v10 length];
          if (v12 == (char *)5)
          {
            id v13 = 0;
            if (v11)
            {
LABEL_14:
              id v14 = *(id *)(v11 + 32);
              long long v15 = [v14 identifier];
              unsigned __int8 v16 = [v15 isEqualToData:v59];

              if ((v16 & 1) == 0)
              {
                if (qword_1001F4B30 != -1) {
                  dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4B30 != -1) {
                    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                  }
                  id v17 = (id)qword_1001F4B28;
                  long long v53 = [v14 identifier];
                  id v55 = v59;
                  uint64_t v49 = 449;
                  long long v51 = v14;
                  id v45 = "";
                  id v47 = "-[NRDevicePairingManagerContext handleFoundDevice:]";
                  _NRLogWithArgs();
                }
              }
              id v18 = [v14 metadata:v45, v47, v49, v51, v53, v55];
              unsigned __int8 v19 = [v18 isEqualToData:v13];

              if (v19)
              {
                if (v16) {
                  goto LABEL_63;
                }
              }
              else
              {
                if (qword_1001F4B30 != -1) {
                  dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4B30 != -1) {
                    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                  }
                  id v31 = (id)qword_1001F4B28;
                  id v54 = [v14 metadata];
                  id v56 = v13;
                  uint64_t v50 = 453;
                  id v52 = v14;
                  int64_t v46 = "";
                  long long v48 = "-[NRDevicePairingManagerContext handleFoundDevice:]";
                  _NRLogWithArgs();
                }
              }
              if (*(unsigned char *)(v11 + 8))
              {
                *(unsigned char *)(v11 + 8) = 0;
                sub_10010C584((uint64_t)WeakRetained, v14);
              }
              [v14 setIdentifier:v59, v46, v48, v50, v52, v54, v56];
              [v14 setMetadata:v13];
LABEL_63:

              if (!*(unsigned char *)(v11 + 8)) {
                goto LABEL_64;
              }
              goto LABEL_41;
            }
          }
          else
          {
            id v13 = [v10 subdataWithRange:5, v12 - 5];
            if (v11) {
              goto LABEL_14;
            }
          }
          id v20 = [objc_alloc((Class)NRDevicePairingCandidate) initInternal];
          id v21 = [v20 uuid];
          [v20 setIdentifier:v59];
          [v20 setMetadata:v13];
          [v20 setCbUUID:v8];
          id v22 = sub_100107230((id *)[NRDevicePairingCandidateContext alloc], v20, WeakRetained[2], WeakRetained);
          uint64_t v11 = (uint64_t)v22;
          if (v22) {
            objc_storeStrong(v22 + 6, a2);
          }
          if (qword_1001F4B30 != -1) {
            dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4B30 != -1) {
              dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
            }
            id v23 = (id)qword_1001F4B28;
            [v20 fullDescription];
            v51 = uint64_t v49 = 441;
            id v45 = "";
            id v47 = "-[NRDevicePairingManagerContext handleFoundDevice:]";
            _NRLogWithArgs();
          }
          [WeakRetained[5] setObject:v11 forKeyedSubscript:v21, v45, v47, v49, v51];
          [WeakRetained[6] setObject:v21 forKeyedSubscript:v8];

          if (!v11)
          {
            char v32 = 1;
LABEL_65:
            id v33 = [WeakRetained[3] pairingCriteria];
            id v34 = [v33 rssi];

            if (v34)
            {
              char v57 = v32;
              signed int v35 = [v5 rssi];
              int v36 = [WeakRetained[3] pairingCriteria];
              id v37 = [v36 rssi];
              signed int v38 = [v37 charValue];

              if (qword_1001F4B30 != -1) {
                dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4B30 != -1) {
                  dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
                }
                _NRLogWithArgs();
              }
              if (v35 && v35 >= v38)
              {
                if (v57) {
                  goto LABEL_52;
                }
                goto LABEL_77;
              }
              if ((v57 & 1) == 0)
              {
                id v30 = (id)v58;
                if (!*(unsigned char *)(v11 + 8)) {
                  goto LABEL_81;
                }
LABEL_80:
                sub_10010C240(WeakRetained, *(void **)(v11 + 32));
                goto LABEL_81;
              }
            }
            else if ((v32 & 1) == 0)
            {
LABEL_77:
              *(unsigned char *)(v11 + 8) = 1;
              id v30 = (id)v58;
              goto LABEL_80;
            }
LABEL_52:
            id v30 = (id)v58;
LABEL_81:

LABEL_82:
LABEL_83:

LABEL_84:
            goto LABEL_85;
          }
          if (!*(unsigned char *)(v11 + 8))
          {
LABEL_64:
            char v32 = 0;
            goto LABEL_65;
          }
LABEL_41:
          int v24 = [WeakRetained[3] pairingCriteria];
          id v25 = [v24 rssi];

          if (!v25) {
            goto LABEL_110;
          }
          signed int v26 = [v5 rssi];
          int v27 = [WeakRetained[3] pairingCriteria];
          id v28 = [v27 rssi];
          signed int v29 = [v28 charValue];

          if (qword_1001F4B30 != -1) {
            dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4B30 != -1) {
              dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
            }
            _NRLogWithArgs();
          }
          if (v26 && v26 < v29)
          {
            *(unsigned char *)(v11 + 8) = 0;
          }
          else
          {
LABEL_110:
            if (*(unsigned char *)(v11 + 8)) {
              goto LABEL_52;
            }
          }
          sub_10010C584((uint64_t)WeakRetained, *(void **)(v11 + 32));
          id v30 = (id)v58;
          goto LABEL_81;
        }
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        id v43 = (id)qword_1001F4B28;
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (!IsLevelEnabled) {
          goto LABEL_83;
        }
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        id v30 = (id)qword_1001F4B28;
        [v10 length];
      }
      else
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        id v41 = (id)qword_1001F4B28;
        int v42 = _NRLogIsLevelEnabled();

        if (!v42) {
          goto LABEL_83;
        }
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        id v30 = (id)qword_1001F4B28;
      }
    }
    else
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v39 = (id)qword_1001F4B28;
      int v40 = _NRLogIsLevelEnabled();

      if (!v40) {
        goto LABEL_84;
      }
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v10 = (id)qword_1001F4B28;
      id v30 = [v5 identifier];
    }
    _NRLogWithArgs();
    goto LABEL_82;
  }
LABEL_85:
}

void sub_100112108(uint64_t a1, void *a2)
{
  id v13 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = v13;
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
    id v5 = objc_alloc((Class)NSUUID);
    id v6 = [v4 identifier];
    id v7 = [v5 initWithUUIDString:v6];

    if (v7)
    {
      id v8 = [WeakRetained[6] objectForKeyedSubscript:v7];
      uint64_t v9 = [WeakRetained[5] objectForKeyedSubscript:v8];
      id v10 = (void *)v9;
      if (v9 && *(unsigned char *)(v9 + 8))
      {
        *(unsigned char *)(v9 + 8) = 0;
        sub_10010C584((uint64_t)WeakRetained, *(void **)(v9 + 32));
      }
    }
    else
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v11 = (id)qword_1001F4B28;
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_13;
      }
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v8 = (id)qword_1001F4B28;
      id v10 = [v4 identifier];
      _NRLogWithArgs();
    }

LABEL_13:
  }
}

void sub_100112358(uint64_t a1, void *a2)
{
  id v11 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = (void **)objc_loadWeakRetained(WeakRetained + 1);
    if (v5)
    {
      id v6 = v5;
      if (v11)
      {
        id v8 = sub_1001071DC();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v10 = sub_1001071DC();
          _NRLogWithArgs();
        }
        int64_t v7 = -3002;
      }
      else
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4B30 != -1) {
            dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
          }
          _NRLogWithArgs();
        }
        int64_t v7 = 0;
      }
      sub_10010E074((uint64_t)NRDevicePairingDirector, v7, *(void **)(a1 + 32), v6[1]);
    }
  }
}

void sub_1001124EC(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained) {
    sub_10010BC08(WeakRetained, v5);
  }
}

void sub_100112550(uint64_t a1, void *a2)
{
  id v15 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = v15;
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      _NRLogWithArgs();
    }
    id v5 = objc_alloc((Class)NSUUID);
    if (v4) {
      id v6 = (void *)v4[2];
    }
    else {
      id v6 = 0;
    }
    id v7 = v6;
    id v8 = [v5 initWithUUIDString:v7];

    if (v8)
    {
      uint64_t v9 = [WeakRetained[5] objectForKeyedSubscript:v8];
      id v10 = (id)v9;
      if (v9 && *(unsigned char *)(v9 + 8))
      {
        *(unsigned char *)(v9 + 8) = 0;
        sub_10010C584((uint64_t)WeakRetained, *(void **)(v9 + 32));
      }
    }
    else
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v11 = (id)qword_1001F4B28;
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_15;
      }
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      id v10 = (id)qword_1001F4B28;
      if (v4) {
        id v13 = (void *)v4[2];
      }
      else {
        id v13 = 0;
      }
      id v14 = v13;
      _NRLogWithArgs();
    }
LABEL_15:
  }
}

void sub_10011279C(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained) {
    sub_10010BC08(WeakRetained, v5);
  }
}

BOOL sub_100112800(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  xpc_type_t type = xpc_get_type(v4);
  if (type == (xpc_type_t)&_xpc_type_uuid)
  {
    id v6 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:xpc_uuid_get_bytes(v4)];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v6];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }

  return type == (xpc_type_t)&_xpc_type_uuid;
}

void sub_1001128B0(uint64_t a1, void *a2)
{
  id v4 = a2;
  xpc_type_t type = xpc_get_type(v4);
  if (type != (xpc_type_t)&_xpc_type_dictionary)
  {
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_26;
      }
      if (qword_1001F4B30 == -1) {
        goto LABEL_25;
      }
    }
    else
    {
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4B30 != -1) {
          dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
        }
        _NRLogWithArgs();
      }
      if (qword_1001F4B30 != -1) {
        dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_26;
      }
      if (qword_1001F4B30 == -1)
      {
LABEL_25:
        _NRLogWithArgs();
LABEL_26:
        sub_1001106EC(*(void *)(a1 + 32), *(void **)(a1 + 40));
        goto LABEL_27;
      }
    }
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    goto LABEL_25;
  }
  if (qword_1001F4B30 != -1) {
    dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4B30 != -1) {
      dispatch_once(&qword_1001F4B30, &stru_1001C7B38);
    }
    _NRLogWithArgs();
  }
  sub_10010E300(*(void *)(a1 + 32), v4, *(void **)(a1 + 40));
LABEL_27:
}

void sub_100112CC8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4B48;
  qword_1001F4B48 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100113118()
{
  if (qword_1001F4B50 != -1) {
    dispatch_once(&qword_1001F4B50, &stru_1001C7B78);
  }
  v0 = (void *)qword_1001F4B48;

  return v0;
}

void sub_10011316C(id a1)
{
  uint64_t v1 = MGCopyAnswer();
  uint64_t v2 = (void *)qword_1001F4B58;
  qword_1001F4B58 = v1;

  if (qword_1001F4C20 != -1) {
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    uint64_t v8 = 61;
    uint64_t v9 = qword_1001F4B58;
    id v6 = "";
    id v7 = "_NRCopyDeviceBuildVersion_block_invoke";
    _NRLogWithArgs();
  }
  uint64_t v3 = (__CFString *)qword_1001F4B58;
  if (!qword_1001F4B58)
  {
    qword_1001F4B58 = @"Unknown";
    uint64_t v3 = @"Unknown";
  }
  if ((unint64_t)[(__CFString *)v3 length] >= 0xFF)
  {
    uint64_t v4 = [(id)qword_1001F4B58 substringToIndex:254];
    uint64_t v5 = qword_1001F4B58;
    qword_1001F4B58 = v4;
    _objc_release_x1(v4, v5);
  }
}

void sub_1001132AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4C18;
  qword_1001F4C18 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1001132F0(id a1)
{
  uint64_t v1 = MGCopyAnswer();
  uint64_t v2 = (void *)qword_1001F4B68;
  qword_1001F4B68 = v1;

  if (qword_1001F4C20 != -1) {
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    uint64_t v8 = 79;
    uint64_t v9 = qword_1001F4B68;
    id v6 = "";
    id v7 = "_NRCopyDeviceName_block_invoke";
    _NRLogWithArgs();
  }
  uint64_t v3 = (__CFString *)qword_1001F4B68;
  if (!qword_1001F4B68)
  {
    qword_1001F4B68 = @"Unknown";
    uint64_t v3 = @"Unknown";
  }
  if ((unint64_t)[(__CFString *)v3 length] >= 0x10000)
  {
    uint64_t v4 = [(id)qword_1001F4B68 substringToIndex:0xFFFFLL];
    uint64_t v5 = qword_1001F4B68;
    qword_1001F4B68 = v4;
    _objc_release_x1(v4, v5);
  }
}

void sub_100113430(id a1)
{
  int v3 = 0;
  size_t v2 = 4;
  if (sysctlbyname("kern.hv_vmm_present", &v3, &v2, 0, 0))
  {
    uint64_t v1 = __error();
    if (strerror_r(*v1, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
  }
  else
  {
    byte_1001F4B78 = v3 != 0;
  }
}

void sub_100113568(id a1)
{
  CFBooleanRef v1 = (CFBooleanRef)MGCopyAnswer();
  byte_1001F4B88 = v1 == kCFBooleanTrue;
  if (v1)
  {
    CFRelease(v1);
  }
}

id sub_1001135C4()
{
  if (qword_1001F4C20 != -1) {
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
  }
  v0 = (void *)qword_1001F4C18;

  return v0;
}

uint64_t sub_100113618(int a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (![v5 length])
  {
    id v14 = sub_1001135C4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v16 = sub_1001135C4();
      _NRLogWithArgs();
    }
    goto LABEL_26;
  }
  memset(&v17, 0, sizeof(v17));
  if (fstat(a1, &v17))
  {
    id v7 = __error();
    if (strerror_r(*v7, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_26;
    }
    if (qword_1001F4C20 == -1)
    {
LABEL_25:
      _NRLogWithArgs();
LABEL_26:
      uint64_t v10 = 0;
      goto LABEL_27;
    }
LABEL_41:
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    goto LABEL_25;
  }
  if ((v17.st_mode & 0xF000) != 0x8000)
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_26;
    }
    if (qword_1001F4C20 == -1) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }
  if ([v6 length])
  {
    ssize_t v8 = write(a1, [v6 bytes], (size_t)[v6 length]);
    if (v8 < 0)
    {
      uint64_t v12 = __error();
      if (strerror_r(*v12, __strerrbuf, 0x80uLL)) {
        __strerrbuf[0] = 0;
      }
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_26;
      }
      if (qword_1001F4C20 == -1) {
        goto LABEL_25;
      }
      goto LABEL_41;
    }
    if ((id)v8 != [v6 length])
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (_NRLogIsLevelEnabled())
      {
        id v13 = sub_1001135C4();
        [v6 length];
        _NRLogWithArgs();
      }
      goto LABEL_26;
    }
  }
  if (qword_1001F4C20 != -1) {
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    id v9 = (id)qword_1001F4C18;
    [v6 length];
    _NRLogWithArgs();
  }
  uint64_t v10 = 1;
LABEL_27:

  return v10;
}

uint64_t sub_100113A48(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if (!v5)
  {
    id v14 = sub_1001135C4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_16;
    }
LABEL_28:
    id v18 = sub_1001135C4();
    _NRLogWithArgs();

    goto LABEL_16;
  }
  if (![v5 length])
  {
    id v16 = sub_1001135C4();
    int v17 = _NRLogIsLevelEnabled();

    if (!v17) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  if (([v5 containsString:@".."] & 1) != 0
    || ([v5 hasPrefix:@"/"] & 1) == 0)
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_16;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
LABEL_15:
    _NRLogWithArgs();
LABEL_16:
    uint64_t v11 = 0;
    goto LABEL_17;
  }
  id v7 = (const char *)[v5 UTF8String];
  if (a3) {
    int v8 = 1793;
  }
  else {
    int v8 = 2817;
  }
  int v9 = open_dprotected_np(v7, v8, 4, 0, 384);
  if (v9 < 0)
  {
    id v13 = __error();
    if (strerror_r(*v13, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_16;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    goto LABEL_15;
  }
  int v10 = v9;
  uint64_t v11 = sub_100113618(v9, v5, v6);
  close(v10);
LABEL_17:

  return v11;
}

uint64_t sub_100113D08(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if (!v5)
  {
    id v12 = sub_1001135C4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  if (![v5 length])
  {
    id v14 = sub_1001135C4();
    int v15 = _NRLogIsLevelEnabled();

    if (v15) {
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  if (!v6)
  {
    id v16 = sub_1001135C4();
    int v17 = _NRLogIsLevelEnabled();

    if (v17)
    {
LABEL_21:
      id v18 = sub_1001135C4();
      _NRLogWithArgs();

      uint64_t v10 = 0;
      goto LABEL_15;
    }
LABEL_22:
    uint64_t v10 = 0;
    goto LABEL_15;
  }
  id v19 = 0;
  id v7 = +[NSPropertyListSerialization dataWithPropertyList:v6 format:200 options:0 error:&v19];
  id v8 = v19;
  int v9 = v8;
  if (!v7 || v8)
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = sub_100113A48(v5, v7, a3);
  }

LABEL_15:
  return v10;
}

unint64_t sub_100113F18()
{
  if (qword_1001F4BA0 != -1) {
    dispatch_once(&qword_1001F4BA0, &stru_1001C7C78);
  }
  for (unint64_t i = atomic_fetch_add_explicit(&qword_1001F4B98, 1uLL, memory_order_relaxed);
        !i;
  if (qword_1001F4C20 != -1) {
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    _NRLogWithArgs();
  }
  return i;
}

void sub_100114024(id a1)
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  uint64_t v1 = mach_boottime_usec();
  qword_1001F4B98 = v1 + ((mach_continuous_time() * info.numer / (1000 * info.denom)) >> 1);
}

id sub_100114080(void *a1)
{
  id v1 = a1;
  [v1 UTF8String];
  id v2 = (id)NEHelperCacheCopyAppUUIDMapping();
  int v3 = v2;
  if (v2 && xpc_get_type(v2) == (xpc_type_t)&_xpc_type_array)
  {
    +[NSMutableArray array];
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_100114184;
    applier[3] = &unk_1001C7E30;
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    id v7 = v4;
    xpc_array_apply(v3, applier);
    if (![v4 count])
    {

      id v4 = 0;
    }
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

uint64_t sub_100114184(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_uuid)
  {
    id v6 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:xpc_uuid_get_bytes(v5)];
    [*(id *)(a1 + 32) addObject:v6];
  }
  return 1;
}

void sub_100114210(id a1)
{
  id v1 = _NRCopySerialQueueAttr();
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.networkrelay.powerlog", v1);

  if (!v2)
  {
    id v4 = sub_1001135C4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v6 = sub_1001135C4();
      _NRLogWithArgs();
    }
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v8 + 4) = "nr_dispatch_queue_create";
    *(_WORD *)(v8 + 12) = 2080;
    *(void *)(v8 + 14) = "com.apple.networkrelay.powerlog";
    sub_1001135C4();
    _NRLogAbortWithPack();
  }
  int v3 = (void *)qword_1001F4BA8;
  qword_1001F4BA8 = (uint64_t)v2;
}

void sub_100114390(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (qword_1001F4C20 != -1) {
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    _NRLogWithArgs();
  }
  if (qword_1001F4BB0 != -1) {
    dispatch_once(&qword_1001F4BB0, &stru_1001C7C98);
  }
  id v5 = qword_1001F4BA8;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100114510;
  block[3] = &unk_1001C8840;
  id v9 = v3;
  id v10 = v4;
  id v6 = v4;
  id v7 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_100114510(uint64_t a1)
{
  uint64_t result = PLShouldLogRegisteredEvent();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    return _PLLogRegisteredEvent(90, v3, v4, 0);
  }
  return result;
}

void sub_100114568(void *a1)
{
  id v1 = a1;
  int v2 = open((const char *)[v1 UTF8String], 0);
  if (v2 != -1)
  {
    int v3 = v2;
    int v4 = fcntl(v2, 63);
    if (v4 == 4)
    {
LABEL_33:
      close(v3);
      goto LABEL_34;
    }
    if (v4 == -1)
    {
      id v5 = __error();
      if (strerror_r(*v5, __strerrbuf, 0x80uLL)) {
        __strerrbuf[0] = 0;
      }
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_33;
      }
      if (qword_1001F4C20 == -1) {
        goto LABEL_32;
      }
    }
    else
    {
      if (fcntl(v3, 64, 4) != -1)
      {
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_33;
        }
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        goto LABEL_32;
      }
      id v7 = __error();
      if (strerror_r(*v7, __strerrbuf, 0x80uLL)) {
        __strerrbuf[0] = 0;
      }
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_33;
      }
      if (qword_1001F4C20 == -1)
      {
LABEL_32:
        _NRLogWithArgs();
        goto LABEL_33;
      }
    }
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    goto LABEL_32;
  }
  if (*__error() != 2)
  {
    id v6 = __error();
    if (strerror_r(*v6, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
  }
LABEL_34:
}

uint64_t sub_1001148A8(void *a1, int a2)
{
  id v3 = a1;
  if (!v3)
  {
    id v12 = sub_1001135C4();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_36;
    }
    id v13 = sub_1001135C4();
    _NRLogWithArgs();

    goto LABEL_35;
  }
  int v4 = socket(2, 2, 0);
  if (v4 < 0)
  {
    __error();
    id v10 = (const char *)&unk_1001F4000;
    if (qword_1001F4C20 == -1) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
  int v5 = v4;
  long long v19 = 0u;
  long long v20 = 0u;
  id v6 = [v3 UTF8String];
  if (!v6)
  {
    id v14 = sub_1001135C4();
    int v15 = _NRLogIsLevelEnabled();

    id v10 = "_strict_strlcpy";
    if (v15)
    {
      id v16 = sub_1001135C4();
      _NRLogWithArgs();
    }
    id v3 = (id)_os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v17 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v17 = 136446210;
    *(void *)(v17 + 4) = "_strict_strlcpy";
    sub_1001135C4();
    _NRLogAbortWithPack();
LABEL_42:
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
LABEL_31:
    if (_NRLogIsLevelEnabled())
    {
      if (*((void *)v10 + 388) != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
LABEL_35:
    uint64_t IsLevelEnabled = 0;
    goto LABEL_36;
  }
  LOBYTE(v19) = *v6;
  if ((_BYTE)v19)
  {
    BYTE1(v19) = v6[1];
    if (BYTE1(v19))
    {
      BYTE2(v19) = v6[2];
      if (BYTE2(v19))
      {
        BYTE3(v19) = v6[3];
        if (BYTE3(v19))
        {
          BYTE4(v19) = v6[4];
          if (BYTE4(v19))
          {
            BYTE5(v19) = v6[5];
            if (BYTE5(v19))
            {
              BYTE6(v19) = v6[6];
              if (BYTE6(v19))
              {
                BYTE7(v19) = v6[7];
                if (BYTE7(v19))
                {
                  BYTE8(v19) = v6[8];
                  if (BYTE8(v19))
                  {
                    BYTE9(v19) = v6[9];
                    if (BYTE9(v19))
                    {
                      BYTE10(v19) = v6[10];
                      if (BYTE10(v19))
                      {
                        BYTE11(v19) = v6[11];
                        if (BYTE11(v19))
                        {
                          BYTE12(v19) = v6[12];
                          if (BYTE12(v19))
                          {
                            BYTE13(v19) = v6[13];
                            if (BYTE13(v19))
                            {
                              BYTE14(v19) = v6[14];
                              if (BYTE14(v19)) {
                                HIBYTE(v19) = 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  DWORD2(v20) = a2;
  int v7 = ioctl(v5, 0xC02069BCuLL, &v19);
  uint64_t IsLevelEnabled = v7 >= 0;
  if (v7 < 0)
  {
    id v9 = __error();
    if (strerror_r(*v9, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
  }
  close(v5);
LABEL_36:

  return IsLevelEnabled;
}

BOOL sub_100114C80(void *a1, int a2)
{
  id v5 = a1;
  if (v5)
  {
    int v6 = socket(2, 2, 0);
    if ((v6 & 0x80000000) == 0)
    {
      LODWORD(v7) = v6;
      long long v20 = 0u;
      long long v21 = 0u;
      uint64_t v8 = [v5 UTF8String];
      if (v8)
      {
        LOBYTE(v20) = *v8;
        if ((_BYTE)v20)
        {
          BYTE1(v20) = v8[1];
          if (BYTE1(v20))
          {
            BYTE2(v20) = v8[2];
            if (BYTE2(v20))
            {
              BYTE3(v20) = v8[3];
              if (BYTE3(v20))
              {
                BYTE4(v20) = v8[4];
                if (BYTE4(v20))
                {
                  BYTE5(v20) = v8[5];
                  if (BYTE5(v20))
                  {
                    BYTE6(v20) = v8[6];
                    if (BYTE6(v20))
                    {
                      BYTE7(v20) = v8[7];
                      if (BYTE7(v20))
                      {
                        BYTE8(v20) = v8[8];
                        if (BYTE8(v20))
                        {
                          BYTE9(v20) = v8[9];
                          if (BYTE9(v20))
                          {
                            BYTE10(v20) = v8[10];
                            if (BYTE10(v20))
                            {
                              BYTE11(v20) = v8[11];
                              if (BYTE11(v20))
                              {
                                BYTE12(v20) = v8[12];
                                if (BYTE12(v20))
                                {
                                  BYTE13(v20) = v8[13];
                                  if (BYTE13(v20))
                                  {
                                    BYTE14(v20) = v8[14];
                                    if (BYTE14(v20)) {
                                      HIBYTE(v20) = 0;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        LODWORD(v21) = a2;
        int v9 = ioctl((int)v7, 0xC02069DCuLL, &v20);
        BOOL v2 = v9 >= 0;
        if (v9 < 0)
        {
          id v10 = __error();
          if (strerror_r(*v10, __strerrbuf, 0x80uLL)) {
            __strerrbuf[0] = 0;
          }
          if (qword_1001F4C20 != -1) {
            dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
          }
          if (!_NRLogIsLevelEnabled()) {
            goto LABEL_41;
          }
          if (qword_1001F4C20 != -1) {
            dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
          }
          goto LABEL_40;
        }
        id v3 = &unk_1001F4000;
        if (qword_1001F4C20 == -1)
        {
LABEL_22:
          if (!_NRLogIsLevelEnabled())
          {
LABEL_41:
            close((int)v7);
            goto LABEL_42;
          }
          if (v3[388] != -1) {
            dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
          }
LABEL_40:
          _NRLogWithArgs();
          goto LABEL_41;
        }
      }
      else
      {
        id v15 = sub_1001135C4();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v17 = sub_1001135C4();
          _NRLogWithArgs();
        }
        id v5 = (id)_os_log_pack_size();
        int v7 = &__strerrbuf[-((__chkstk_darwin(v5) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v18 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v18 = 136446210;
        *(void *)(v18 + 4) = "_strict_strlcpy";
        sub_1001135C4();
        _NRLogAbortWithPack();
      }
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      goto LABEL_22;
    }
    __error();
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
  }
  else
  {
    id v12 = sub_1001135C4();
    int v13 = _NRLogIsLevelEnabled();

    if (v13)
    {
      id v14 = sub_1001135C4();
      _NRLogWithArgs();
    }
  }
  BOOL v2 = 0;
LABEL_42:

  return v2;
}

uint64_t sub_1001150F8(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v10 = sub_1001135C4();
    uint64_t IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_36;
    }
    id v11 = sub_1001135C4();
    _NRLogWithArgs();

    goto LABEL_35;
  }
  int v2 = socket(2, 2, 0);
  if (v2 < 0)
  {
    __error();
    uint64_t v8 = (const char *)&unk_1001F4000;
    if (qword_1001F4C20 == -1) {
      goto LABEL_31;
    }
    goto LABEL_42;
  }
  int v3 = v2;
  long long v17 = 0u;
  long long v18 = 0u;
  int v4 = [v1 UTF8String];
  if (!v4)
  {
    id v12 = sub_1001135C4();
    int v13 = _NRLogIsLevelEnabled();

    uint64_t v8 = "_strict_strlcpy";
    if (v13)
    {
      id v14 = sub_1001135C4();
      _NRLogWithArgs();
    }
    id v1 = (id)_os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 136446210;
    *(void *)(v15 + 4) = "_strict_strlcpy";
    sub_1001135C4();
    _NRLogAbortWithPack();
LABEL_42:
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
LABEL_31:
    if (_NRLogIsLevelEnabled())
    {
      if (*((void *)v8 + 388) != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
LABEL_35:
    uint64_t IsLevelEnabled = 0;
    goto LABEL_36;
  }
  LOBYTE(v17) = *v4;
  if ((_BYTE)v17)
  {
    BYTE1(v17) = v4[1];
    if (BYTE1(v17))
    {
      BYTE2(v17) = v4[2];
      if (BYTE2(v17))
      {
        BYTE3(v17) = v4[3];
        if (BYTE3(v17))
        {
          BYTE4(v17) = v4[4];
          if (BYTE4(v17))
          {
            BYTE5(v17) = v4[5];
            if (BYTE5(v17))
            {
              BYTE6(v17) = v4[6];
              if (BYTE6(v17))
              {
                BYTE7(v17) = v4[7];
                if (BYTE7(v17))
                {
                  BYTE8(v17) = v4[8];
                  if (BYTE8(v17))
                  {
                    BYTE9(v17) = v4[9];
                    if (BYTE9(v17))
                    {
                      BYTE10(v17) = v4[10];
                      if (BYTE10(v17))
                      {
                        BYTE11(v17) = v4[11];
                        if (BYTE11(v17))
                        {
                          BYTE12(v17) = v4[12];
                          if (BYTE12(v17))
                          {
                            BYTE13(v17) = v4[13];
                            if (BYTE13(v17))
                            {
                              BYTE14(v17) = v4[14];
                              if (BYTE14(v17)) {
                                HIBYTE(v17) = 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  LODWORD(v18) = 1;
  int v5 = ioctl(v3, 0xC02069D0uLL, &v17);
  uint64_t IsLevelEnabled = v5 >= 0;
  if (v5 < 0)
  {
    int v7 = __error();
    if (strerror_r(*v7, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
  }
  close(v3);
LABEL_36:

  return IsLevelEnabled;
}

id sub_1001154D0(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v10 = sub_1001135C4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = sub_1001135C4();
      _NRLogWithArgs();
    }
    goto LABEL_52;
  }
  int v2 = socket(2, 2, 0);
  if (v2 < 0)
  {
    int v5 = __error();
    if (strerror_r(*v5, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    int v6 = (const char *)&unk_1001F4000;
    if (qword_1001F4C20 == -1) {
      goto LABEL_31;
    }
    goto LABEL_59;
  }
  int v3 = v2;
  int v4 = (char *)[v1 UTF8String];
  if (!v4)
  {
    id v13 = sub_1001135C4();
    int v14 = _NRLogIsLevelEnabled();

    int v6 = "_strict_strlcpy";
    if (v14)
    {
      id v15 = sub_1001135C4();
      _NRLogWithArgs();
    }
    id v1 = (id)_os_log_pack_size();
    __chkstk_darwin(v1);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v16 = 136446210;
    *(void *)(v16 + 4) = "_strict_strlcpy";
    sub_1001135C4();
    _NRLogAbortWithPack();
LABEL_59:
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
LABEL_31:
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_52;
    }
    if (*((void *)v6 + 388) != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
LABEL_27:
    _NRLogWithArgs();
LABEL_52:
    id v8 = 0;
    goto LABEL_53;
  }
  char v17 = *v4;
  if (v17)
  {
    if (v4[1])
    {
      if (v4[2])
      {
        if (v4[3])
        {
          if (v4[4])
          {
            if (v4[5])
            {
              if (v4[6])
              {
                if (v4[7])
                {
                  if (v4[8])
                  {
                    if (v4[9])
                    {
                      if (v4[10])
                      {
                        if (v4[11])
                        {
                          if (v4[12])
                          {
                            if (v4[13])
                            {
                              if (v4[14]) {
                                char v32 = 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (ioctl(v3, 0xC06069C3uLL, &v17) < 0)
  {
    int v7 = __error();
    if (*v7 == 6)
    {
      if (strerror_r(6, __strerrbuf, 0x80uLL)) {
        __strerrbuf[0] = 0;
      }
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_51;
      }
      if (qword_1001F4C20 == -1)
      {
LABEL_50:
        _NRLogWithArgs();
LABEL_51:
        close(v3);
        goto LABEL_52;
      }
    }
    else
    {
      if (strerror_r(*v7, __strerrbuf, 0x80uLL)) {
        __strerrbuf[0] = 0;
      }
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_51;
      }
      if (qword_1001F4C20 == -1) {
        goto LABEL_50;
      }
    }
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    goto LABEL_50;
  }
  close(v3);
  if (uuid_is_null(v33))
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_52;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    goto LABEL_27;
  }
  id v8 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v33];
LABEL_53:

  return v8;
}

void sub_100115AA4(id a1)
{
}

void sub_100115AB0(void *a1, void *a2, void *a3, int a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = 0;
  if (a5 && a4)
  {
    signed int v29 = &a9;
    id v17 = a5;
    id v16 = [objc_alloc((Class)NSString) initWithFormat:v17 arguments:&a9];
  }
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v18 = (id)qword_1001F4DD8;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100115C40;
  v23[3] = &unk_1001C7D08;
  id v24 = v13;
  id v25 = v14;
  char v28 = a4;
  id v26 = v15;
  id v27 = v16;
  id v19 = v16;
  id v20 = v15;
  id v21 = v14;
  id v22 = v13;
  sub_10015969C((uint64_t)v18, v23);
}

void sub_100115C40(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  if (objc_opt_class())
  {
    id v3 = objc_alloc_init((Class)SDRDiagnosticReporter);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    int v7 = +[NSProcessInfo processInfo];
    id v8 = [v7 processName];
    int v9 = [v3 signatureWithDomain:@"NetworkRelay" type:v4 subType:v5 subtypeContext:v6 detectedProcess:v8 triggerThresholdValues:0];

    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100116024;
    v17[3] = &unk_1001C7CE0;
    id v18 = v9;
    id v19 = v2;
    id v10 = v9;
    [v3 snapshotWithSignature:v10 duration:0 event:0 payload:v17 reply:0.0];
  }
  else
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if (_NRIsAppleInternal())
    {
      dispatch_time_t v11 = dispatch_time(0, 100000000);
      dispatch_semaphore_wait(v2, v11);
    }
    id v12 = sub_1001135C4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v14 = sub_1001135C4();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v15 = _os_log_pack_fill();
    CFStringRef v16 = *(const __CFString **)(a1 + 56);
    if (!v16) {
      CFStringRef v16 = &stru_1001C9648;
    }
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)(v15 + 4) = "NRTriggerABC_block_invoke";
    *(_WORD *)(v15 + 12) = 2112;
    *(void *)(v15 + 14) = v16;
    sub_1001135C4();
    _NRLogAbortWithPack();
  }
}

void sub_100116024(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = [v8 objectForKeyedSubscript:kSymptomDiagnosticReplySuccess];
  unsigned int v4 = [v3 BOOLValue];

  if (v4)
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
  }
  else
  {
    uint64_t v5 = [v8 objectForKeyedSubscript:kSymptomDiagnosticReplyReasonString];
    uint64_t v6 = [v8 objectForKeyedSubscript:kSymptomDiagnosticReplyReason];
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      id v7 = (id)qword_1001F4C18;
      [v6 intValue];
      _NRLogWithArgs();
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

BOOL sub_100116230()
{
  int v3 = 0;
  int v0 = sysctlbyname("net.link.generic.system.companion_sndbuf_limit", 0, 0, &v3, 4uLL);
  if (v0 < 0)
  {
    id v1 = __error();
    if (strerror_r(*v1, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
  }
  return v0 >= 0;
}

id sub_100116370(uint64_t a1, char a2)
{
  id v4 = [objc_alloc((Class)NSString) initWithFormat:@"unknown:%d", a1];
  bzero(buffer, 0x400uLL);
  if ((int)a1 >= 1 && proc_pidpath(a1, buffer, 0x400u) >= 1 && buffer[0])
  {
    id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%s:%d", buffer, a1];

    id v4 = v5;
  }
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = [v4 componentsSeparatedByString:@"/"];
    uint64_t v7 = [v6 lastObject];

    return (id)v7;
  }
  return v4;
}

void sub_10011648C(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    int v2 = socket(30, 2, 0);
    if ((v2 & 0x80000000) == 0)
    {
      LODWORD(v3) = v2;
      long long v17 = 0u;
      long long v18 = 0u;
      id v4 = [v1 UTF8String];
      if (v4)
      {
        LOBYTE(v17) = *v4;
        if ((_BYTE)v17)
        {
          BYTE1(v17) = v4[1];
          if (BYTE1(v17))
          {
            BYTE2(v17) = v4[2];
            if (BYTE2(v17))
            {
              BYTE3(v17) = v4[3];
              if (BYTE3(v17))
              {
                BYTE4(v17) = v4[4];
                if (BYTE4(v17))
                {
                  BYTE5(v17) = v4[5];
                  if (BYTE5(v17))
                  {
                    BYTE6(v17) = v4[6];
                    if (BYTE6(v17))
                    {
                      BYTE7(v17) = v4[7];
                      if (BYTE7(v17))
                      {
                        BYTE8(v17) = v4[8];
                        if (BYTE8(v17))
                        {
                          BYTE9(v17) = v4[9];
                          if (BYTE9(v17))
                          {
                            BYTE10(v17) = v4[10];
                            if (BYTE10(v17))
                            {
                              BYTE11(v17) = v4[11];
                              if (BYTE11(v17))
                              {
                                BYTE12(v17) = v4[12];
                                if (BYTE12(v17))
                                {
                                  BYTE13(v17) = v4[13];
                                  if (BYTE13(v17))
                                  {
                                    BYTE14(v17) = v4[14];
                                    if (BYTE14(v17)) {
                                      HIBYTE(v17) = 0;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        LOBYTE(v18) = 4;
        BYTE3(v18) = 0;
        if (ioctl((int)v3, 0xC02069A9uLL, &v17) < 0)
        {
          uint64_t v6 = __error();
          if (*v6 != 6)
          {
            if (strerror_r(*v6, __strerrbuf, 0x80uLL)) {
              __strerrbuf[0] = 0;
            }
            if (qword_1001F4C20 != -1) {
              dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4C20 != -1) {
                dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
              }
              id v8 = (id)qword_1001F4C18;
              [v1 UTF8String];
              _NRLogWithArgs();
            }
            goto LABEL_41;
          }
          if (strerror_r(6, __strerrbuf, 0x80uLL)) {
            __strerrbuf[0] = 0;
          }
          if (qword_1001F4C20 != -1) {
            dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4C20 != -1) {
              dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
            }
            goto LABEL_40;
          }
LABEL_41:
          close((int)v3);
          goto LABEL_42;
        }
        id v5 = (const char *)&unk_1001F4000;
        if (qword_1001F4C20 == -1)
        {
LABEL_22:
          if (_NRLogIsLevelEnabled())
          {
            if (*((void *)v5 + 388) != -1) {
              dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
            }
LABEL_40:
            id v7 = (id)qword_1001F4C18;
            [v1 UTF8String];
            _NRLogWithArgs();

            goto LABEL_41;
          }
          goto LABEL_41;
        }
      }
      else
      {
        id v12 = sub_1001135C4();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        id v5 = "_strict_strlcpy";
        if (IsLevelEnabled)
        {
          id v14 = sub_1001135C4();
          _NRLogWithArgs();
        }
        id v1 = (id)_os_log_pack_size();
        int v3 = &__strerrbuf[-((__chkstk_darwin(v1) + 15) & 0xFFFFFFFFFFFFFFF0)];
        __error();
        uint64_t v15 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v15 = 136446210;
        *(void *)(v15 + 4) = "_strict_strlcpy";
        sub_1001135C4();
        _NRLogAbortWithPack();
      }
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      goto LABEL_22;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
  }
  else
  {
    id v9 = sub_1001135C4();
    int v10 = _NRLogIsLevelEnabled();

    if (v10)
    {
      id v11 = sub_1001135C4();
      _NRLogWithArgs();
    }
  }
LABEL_42:
}

id sub_1001169F0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  id v6 = 0;
  if (v3 && v4)
  {
    if ([v4 length] && objc_msgSend(v3, "length"))
    {
      CCHmac(4u, [v5 bytes], (size_t)[v5 length], [v3 bytes], (size_t)[v3 length], &v8);
      id v6 = [objc_alloc((Class)NSData) initWithBytes:&v8 length:64];
    }
    else
    {
      id v6 = 0;
    }
  }

  return v6;
}

id sub_100116B0C(void *a1, unsigned int a2, int a3)
{
  id v5 = a1;
  id v6 = v5;
  if (v5)
  {
    id v7 = [v5 addressData];
    id v8 = [v7 length];
    uint64_t v21 = 0;
    long long v22 = 0uLL;
    int v23 = 0;
    [v7 getBytes:&v21 length:28];
    if ((unint64_t)v8 < 0x10 || (unint64_t)v8 < v21)
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_26;
      }
      if (qword_1001F4C20 == -1) {
        goto LABEL_25;
      }
    }
    else
    {
      __int16 v9 = __rev16(a2);
      if (BYTE1(v21) == 2)
      {
        if (v21 > 0xFu)
        {
          *(_WORD *)id v20 = v9;
          *(_DWORD *)&v20[2] = HIDWORD(v21);
          if (!a3)
          {
            long long v18 = 0uLL;
            __int16 v19 = 0;
            char v17 = 2;
            id v12 = [objc_alloc((Class)NSMutableData) initWithBytes:&v17 length:1];
            LODWORD(v18) = *(_DWORD *)v20;
            WORD2(v18) = *(_WORD *)&v20[4];
            [v12 appendBytes:&v18 length:6];
            goto LABEL_27;
          }
          id v10 = objc_alloc((Class)NSData);
          uint64_t v11 = 6;
LABEL_38:
          id v12 = [v10 initWithBytes:v20 length:v11];
          goto LABEL_27;
        }
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4C20 == -1) {
            goto LABEL_25;
          }
          goto LABEL_44;
        }
        goto LABEL_26;
      }
      if (BYTE1(v21) == 30)
      {
        if ((unint64_t)v8 >= 0x1C && v21 > 0x1Bu)
        {
          *(_WORD *)id v20 = v9;
          *(_OWORD *)&v20[2] = v22;
          if (!a3)
          {
            long long v18 = 0uLL;
            __int16 v19 = 0;
            char v17 = 30;
            id v12 = [objc_alloc((Class)NSMutableData) initWithBytes:&v17 length:1];
            long long v18 = *(_OWORD *)v20;
            __int16 v19 = *(_WORD *)&v20[16];
            [v12 appendBytes:&v18 length:18];
            goto LABEL_27;
          }
          id v10 = objc_alloc((Class)NSData);
          uint64_t v11 = 18;
          goto LABEL_38;
        }
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4C20 == -1) {
            goto LABEL_25;
          }
          goto LABEL_44;
        }
LABEL_26:
        id v12 = 0;
LABEL_27:

        goto LABEL_28;
      }
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_26;
      }
      if (qword_1001F4C20 == -1) {
        goto LABEL_25;
      }
    }
LABEL_44:
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
LABEL_25:
    _NRLogWithArgs();
    goto LABEL_26;
  }
  id v14 = sub_1001135C4();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v16 = sub_1001135C4();
    _NRLogWithArgs();
  }
  id v12 = 0;
LABEL_28:

  return v12;
}

id sub_100116F6C(void *a1, int a2, int a3, int a4)
{
  id v7 = a1;
  id v8 = v7;
  if (v7)
  {
    id v9 = v7;
    id v10 = v9;
    if (a2)
    {
      memset(v18, 0, 19);
      if (![v9 length])
      {
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_31;
        }
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
LABEL_15:
        _NRLogWithArgs();
LABEL_31:
        id v12 = 0;
        goto LABEL_37;
      }
      [v10 getBytes:v18 length:1];
      a3 = v18[0];
      if ((unint64_t)[v10 length] <= 1)
      {
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_31;
        }
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        goto LABEL_15;
      }
      uint64_t v11 = [v10 subdataWithRange:1, [v10 length] - 1];

      id v10 = (void *)v11;
    }
    if (a3 == 2)
    {
      *(_WORD *)&void v17[4] = 0;
      *(_DWORD *)char v17 = 0;
      if ((unint64_t)[v10 length] <= 5)
      {
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_31;
        }
        if (qword_1001F4C20 == -1) {
          goto LABEL_30;
        }
        goto LABEL_45;
      }
      [v10 getBytes:v17 length:6];
      *(_OWORD *)long long v18 = xmmword_10016C960;
      *(_WORD *)&v18[2] = *(_WORD *)v17;
      *(_DWORD *)&v18[4] = *(_DWORD *)&v17[2];
    }
    else
    {
      if (a3 != 30) {
        goto LABEL_31;
      }
      memset(v17, 0, sizeof(v17));
      if ((unint64_t)[v10 length] <= 0x11)
      {
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_31;
        }
        if (qword_1001F4C20 == -1)
        {
LABEL_30:
          _NRLogWithArgs();
          id v12 = 0;
LABEL_37:

          goto LABEL_38;
        }
LABEL_45:
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        goto LABEL_30;
      }
      [v10 getBytes:v17 length:18];
      *(void *)long long v18 = 7708;
      int v19 = unk_10016CA38;
      *(_WORD *)&v18[2] = *(_WORD *)v17;
      *(_OWORD *)&v18[8] = *(_OWORD *)&v17[2];
      if (v17[2] == 254 && (v18[9] & 0xC0) == 0x80) {
        int v19 = a4;
      }
    }
    id v12 = +[NWAddressEndpoint endpointWithAddress:v18];
    goto LABEL_37;
  }
  id v14 = sub_1001135C4();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v16 = sub_1001135C4();
    _NRLogWithArgs();
  }
  id v12 = 0;
LABEL_38:

  return v12;
}

void sub_1001173C8(id a1)
{
  qword_1001F4BC8 = symptom_framework_init();
}

id sub_1001173F4(void *a1, void **a2, void **a3, int a4)
{
  id v7 = a1;
  if (!v7)
  {
    id v32 = sub_1001135C4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v34 = sub_1001135C4();
      _NRLogWithArgs();
    }
    goto LABEL_15;
  }
  signed int v35 = 0;
  if (getifaddrs(&v35) == -1)
  {
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }
LABEL_15:
    id v11 = 0;
    goto LABEL_79;
  }
  if (a2)
  {
    id v8 = *a2;
    *a2 = 0;
  }
  if (a3)
  {
    id v9 = *a3;
    *a3 = 0;
  }
  id v10 = v35;
  if (v35)
  {
    id v11 = 0;
    while (1)
    {
      if (!v10->ifa_addr || !v10->ifa_name || strcmp((const char *)[v7 UTF8String], v10->ifa_name)) {
        goto LABEL_30;
      }
      if (!a3 && !a2 && !v11) {
        id v11 = objc_alloc_init((Class)NSMutableSet);
      }
      ifa_addr = v10->ifa_addr;
      int sa_family = ifa_addr->sa_family;
      if (sa_family != 30) {
        break;
      }
      if (a4)
      {
        if (*(_DWORD *)&ifa_addr->sa_data[6])
        {
          if (*(_DWORD *)&ifa_addr->sa_data[6] == 255
            || *(_DWORD *)&ifa_addr->sa_data[6] == 254
            && (*(_DWORD *)&ifa_addr->sa_data[6] & 0xC000) == 0x8000)
          {
            goto LABEL_30;
          }
        }
        else if (!*(_DWORD *)&ifa_addr->sa_data[10] {
               && !*(_DWORD *)&ifa_addr[1].sa_len
        }
               && (*(_DWORD *)&ifa_addr[1].sa_data[2] | 0x1000000) == 0x1000000)
        {
          goto LABEL_30;
        }
      }
      if (inet_ntop(30, &ifa_addr->sa_data[6], v36, 0x2Eu))
      {
        id v24 = [objc_alloc((Class)NSString) initWithFormat:@"%s", v36];
        if (a3)
        {
          id v25 = *a3;
          if (!*a3)
          {
            id v28 = objc_alloc_init((Class)NSMutableSet);
            signed int v29 = *a3;
            *a3 = v28;

            id v25 = *a3;
          }
LABEL_62:
          [v25 addObject:v24];
        }
LABEL_63:
        if (v24)
        {
          [v11 addObject:v24];
        }
        goto LABEL_30;
      }
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_30;
      }
      if (qword_1001F4C20 != -1) {
        goto LABEL_74;
      }
LABEL_69:
      _NRLogWithArgs();
LABEL_30:
      id v10 = v10->ifa_next;
      if (!v10)
      {
        id v30 = v35;
        goto LABEL_78;
      }
    }
    if (sa_family != 2) {
      goto LABEL_30;
    }
    unsigned int v23 = *(_DWORD *)&ifa_addr->sa_data[2];
    uint64_t v21 = &ifa_addr->sa_data[2];
    unsigned int v22 = v23;
    if (a4)
    {
      unsigned int v12 = bswap32(v22);
      unsigned int v13 = v12 & 0xFF000000;
      BOOL v14 = HIWORD(v12) == 43518 || v13 == 0;
      BOOL v15 = v14 || v13 == 2130706432;
      unsigned int v16 = v12 & 0xF0000000;
      BOOL v17 = v15 || v22 == -1;
      if (v17 || v16 == -536870912) {
        goto LABEL_30;
      }
    }
    if (inet_ntop(2, v21, v36, 0x10u))
    {
      id v24 = [[objc_alloc((Class)NSString) initWithFormat:@"%s", v36];
      if (a2)
      {
        id v25 = *a2;
        if (!*a2)
        {
          id v26 = objc_alloc_init((Class)NSMutableSet);
          id v27 = *a2;
          *a2 = v26;

          id v25 = *a2;
        }
        goto LABEL_62;
      }
      goto LABEL_63;
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_30;
    }
    if (qword_1001F4C20 == -1) {
      goto LABEL_69;
    }
LABEL_74:
    dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    goto LABEL_69;
  }
  id v30 = 0;
  id v11 = 0;
LABEL_78:
  freeifaddrs(v30);
LABEL_79:

  return v11;
}

void sub_100117880(id a1)
{
}

void sub_100117890(id a1)
{
  unsigned int v1 = MGGetSInt32Answer() - 1;
  if (v1 <= 0xA && ((0x56Du >> v1) & 1) != 0) {
    byte_1001F4BE8 = byte_10016CA3C[v1];
  }
}

void sub_1001178E0(id a1)
{
  unsigned int v1 = _NRCopySerialQueueAttr();
  int v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_USER_INITIATED, 0);

  if (!v2)
  {
    id v7 = sub_1001135C4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = sub_1001135C4();
      _NRLogWithArgs();
    }
    id v3 = (const char *)_os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 136446466;
    *(void *)(v10 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v10 + 12) = 1024;
    *(_DWORD *)(v10 + 14) = 25;
    sub_1001135C4();
    _NRLogAbortWithPack();
LABEL_9:
    id v11 = sub_1001135C4();
    int v12 = _NRLogIsLevelEnabled();

    if (v12)
    {
      id v13 = sub_1001135C4();
      _NRLogWithArgs();
    }
    uint64_t v14 = _os_log_pack_size();
    __chkstk_darwin(v14);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)(v15 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v15 + 14) = v3;
    sub_1001135C4();
    _NRLogAbortWithPack();
  }
  id v3 = "terminusd.CoreBluetooth";
  dispatch_queue_t v4 = dispatch_queue_create("terminusd.CoreBluetooth", v2);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = (uint64_t)v4;

  id v6 = (void *)qword_1001F4C00;
  qword_1001F4C00 = v5;
}

void sub_100117B68(id a1)
{
  unsigned int v1 = _NRCopySerialQueueAttr();
  int v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_USER_INITIATED, 0);

  if (!v2)
  {
    id v7 = sub_1001135C4();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = sub_1001135C4();
      _NRLogWithArgs();
    }
    id v3 = (const char *)_os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 136446466;
    *(void *)(v10 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v10 + 12) = 1024;
    *(_DWORD *)(v10 + 14) = 25;
    sub_1001135C4();
    _NRLogAbortWithPack();
LABEL_9:
    id v11 = sub_1001135C4();
    int v12 = _NRLogIsLevelEnabled();

    if (v12)
    {
      id v13 = sub_1001135C4();
      _NRLogWithArgs();
    }
    uint64_t v14 = _os_log_pack_size();
    __chkstk_darwin(v14);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)(v15 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v15 + 14) = v3;
    sub_1001135C4();
    _NRLogAbortWithPack();
  }
  id v3 = "terminusd.IdentityServices.QR";
  dispatch_queue_t v4 = dispatch_queue_create("terminusd.IdentityServices.QR", v2);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = (uint64_t)v4;

  id v6 = (void *)qword_1001F4C10;
  qword_1001F4C10 = v5;
}

void sub_100117DF0(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    id v16 = v1;
    int v2 = [v1 allowedLinkTypes];
    unsigned __int8 v3 = [v2 containsObject:&off_1001D4AF8];

    if (v3)
    {
      dispatch_queue_t v4 = [v16 allowedLinkSubtypes];
      id v5 = [v4 count];

      if (!v5) {
        [v16 setAllowedLinkSubtypes:&off_1001D4DA8];
      }
    }
    else
    {
      [v16 setIsReachableOverWiFi:0];
    }
    id v6 = objc_alloc((Class)NSOrderedSet);
    id v7 = [v16 allowedLinkTypes];
    id v8 = [v6 initWithArray:v7];

    id v9 = [v8 array];
    [v16 setAllowedLinkTypes:v9];

    uint64_t v10 = [v16 allowedLinkSubtypes];
    id v11 = [v10 count];

    if (v11)
    {
      id v12 = objc_alloc((Class)NSOrderedSet);
      id v13 = [v16 allowedLinkSubtypes];
      id v14 = [v12 initWithArray:v13];

      uint64_t v15 = [v14 array];
      [v16 setAllowedLinkSubtypes:v15];
    }
    if ([v16 proxyCapability] != (id)2) {
      [v16 setAllowsDirectToCloud:0];
    }
    if ([v16 requiresReachability]) {
      [v16 setAllowsPermittedClientsOnly:0];
    }
    if (qword_1001F4B80 != -1) {
      dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
    }
    if (byte_1001F4B78) {
      [v16 setAllowsDeviceDiscovery:1];
    }
    if (qword_1001F4C20 != -1) {
      dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      _NRLogWithArgs();
    }

    id v1 = v16;
  }
}

id sub_100118074(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = v7;
  id v9 = 0;
  if (v5 && v6 && v7)
  {
    if ([v5 length] && objc_msgSend(v6, "length") && objc_msgSend(v8, "length"))
    {
      [v6 bytes];
      [v6 length];
      [v8 bytes];
      [v8 length];
      if (CCKDFParametersCreateHkdf())
      {
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4C20 != -1) {
            dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
          }
          _NRLogWithArgs();
        }
      }
      else
      {
        memset(v12, 0, sizeof(v12));
        [v5 bytes];
        [v5 length];
        if (!CCDeriveKey())
        {
          id v9 = +[NSData _newZeroingDataWithBytes:v12 length:64];
          cc_clear();
          goto LABEL_15;
        }
        if (qword_1001F4C20 != -1) {
          dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
        }
        if (_NRLogIsLevelEnabled())
        {
          id v11 = sub_1001135C4();
          _NRLogWithArgs();
        }
      }
      id v9 = 0;
    }
    else
    {
      id v9 = 0;
    }
  }
LABEL_15:

  return v9;
}

BOOL sub_1001182F0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  BOOL v6 = 0;
  if (v3 && v4)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
      && (id v7 = [v3 length], v7 == objc_msgSend(v5, "length"))
      && [v3 length])
    {
      [v3 length];
      [v3 bytes];
      [v5 bytes];
      BOOL v6 = cc_cmp_safe() == 0;
    }
    else
    {
      BOOL v6 = 0;
    }
  }

  return v6;
}

int64_t sub_1001183DC(id a1, id a2, id a3)
{
  id v4 = a3;
  unsigned int v5 = [a2 notifyStatus];
  unsigned int v6 = [v4 notifyStatus];

  if (v5 < v6) {
    return -1;
  }
  else {
    return v5 > v6;
  }
}

uint64_t sub_100118D5C(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1)
  {
    id v3 = v1[16];

    if (!v3) {
      goto LABEL_4;
    }
    id v4 = v2[16];
    id v5 = [v4 proxyCapability];

    if (v5 == (id)1) {
      goto LABEL_4;
    }
    id v8 = v2[16];
    id v9 = [v8 proxyCapability];

    if (v9 == (id)2)
    {
      unsigned __int8 v6 = 2;
      goto LABEL_5;
    }
    id v10 = v2[16];
    id v11 = [v10 bluetoothRole];

    if (v11 == (id)1)
    {
LABEL_4:
      unsigned __int8 v6 = 1;
    }
    else
    {
      id v12 = v2[16];
      id v13 = [v12 bluetoothRole];

      if (v13 == (id)2) {
        unsigned __int8 v6 = 2;
      }
      else {
        unsigned __int8 v6 = 3;
      }
    }
  }
  else
  {
    id v14 = sub_100118E90();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v16 = sub_100118E90();
      _NRLogWithArgs();
    }
    unsigned __int8 v6 = 0;
  }
LABEL_5:

  return v6;
}

id sub_100118E90()
{
  if (qword_1001F4C90 != -1) {
    dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
  }
  int v0 = (void *)qword_1001F4C88;

  return v0;
}

void sub_100118EE4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4C88;
  qword_1001F4C88 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100119B74(void *a1)
{
  os_log_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[16];

    if (!v3 || (id v4 = v2[16], v5 = [v4 proxyCapability], v4, v5 != (id)2))
    {
      id IsLevelEnabled = 0;
      goto LABEL_7;
    }
    id v6 = v2[16];
    id IsLevelEnabled = [v6 hasCompanionDatapath];
  }
  else
  {
    id v9 = sub_100118E90();
    id IsLevelEnabled = (id)_NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_7;
    }
    id v6 = sub_100118E90();
    _NRLogWithArgs();
    id IsLevelEnabled = 0;
  }

LABEL_7:
  return IsLevelEnabled;
}

id sub_10011A480(unsigned int a1)
{
  switch(a1)
  {
    case 0u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "Invalid";
      goto LABEL_14;
    case 1u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "Initial";
      goto LABEL_14;
    case 2u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "SentPrelude";
      goto LABEL_14;
    case 3u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "ReceivedPrelude";
      goto LABEL_14;
    case 4u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "ExchangedPrelude";
      goto LABEL_14;
    case 5u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "StartedIKE";
      goto LABEL_14;
    case 6u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "ConnectedIKE";
      goto LABEL_14;
    case 7u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "ReceivedFirstIKENotify";
      goto LABEL_14;
    case 8u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "Ready";
      goto LABEL_14;
    case 9u:
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "Suspended";
      goto LABEL_14;
    default:
      if (a1 != 255) {
        return [objc_alloc((Class)NSString) initWithFormat:@"Unknown(%lld)", a1];
      }
      id v1 = objc_alloc((Class)NSString);
      uint64_t v2 = "Cancelled";
LABEL_14:
      return [v1 initWithUTF8String:v2];
  }
}

uint64_t sub_10011B1F0(void *a1, void *a2, void *a3, id *a4, id *a5, id *a6, void *a7)
{
  id v12 = a1;
  id v13 = a2;
  id v145 = a3;
  id v146 = a7;
  int32x4_t v147 = 0uLL;
  unsigned __int16 v148 = 0;
  if ((unint64_t)[v13 length] > 0x11)
  {
    id location = a6;
    [v13 getBytes:&v147 length:18];
    if (sub_10013F2D8((uint64_t)v12))
    {
      uint64_t v15 = v12;
      id v16 = v13;
      id v139 = v146;
      int32x4_t v153 = 0uLL;
      if (v15) {
        BOOL v17 = (void *)v15[4];
      }
      else {
        BOOL v17 = 0;
      }
      id v18 = v17;
      id v19 = v16;
      int32x4_t v154 = 0uLL;
      unsigned __int16 v155 = 0;
      id v143 = v19;
      if ((unint64_t)[v19 length] <= 0x11)
      {
        id v28 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v30 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        if (v15) {
          id v31 = (void *)v15[4];
        }
        else {
          id v31 = 0;
        }
        id v32 = v31;
        id v33 = (void *)_NRCopyLogObjectForNRUUID();
        int v34 = _NRLogIsLevelEnabled();

        if (!v34)
        {
          uint64_t v66 = 0;
          id v142 = 0;
          uint64_t v14 = 0;
LABEL_163:

          goto LABEL_164;
        }
        if (v15) {
          signed int v35 = (void *)v15[4];
        }
        else {
          signed int v35 = 0;
        }
        id IPv6AddrString = v35;
        host_with_numeric_port = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
        id v137 = 0;
        goto LABEL_36;
      }
      [v143 getBytes:&v154 length:18];
      uint64_t v156 = 0;
      id v157 = &v156;
      uint64_t v158 = 0x3032000000;
      id v159 = sub_10011CAC8;
      id v160 = sub_10011CAD8;
      id v161 = 0;
      *(void *)&long long v149 = 0;
      *((void *)&v149 + 1) = &v149;
      *(void *)&long long v150 = 0x3032000000;
      *((void *)&v150 + 1) = sub_10011CAC8;
      *(void *)&long long v151 = sub_10011CAD8;
      *((void *)&v151 + 1) = 0;
      if ((unint64_t)[v143 length] >= 0x15)
      {
        id v20 = [v143 subdataWithRange:18, [v143 length] - 18];
        v162.i64[0] = (uint64_t)_NSConcreteStackBlock;
        v162.i64[1] = 3221225472;
        uint64_t v163 = sub_10011CAE0;
        id v164 = &unk_1001C7F40;
        id v165 = &v149;
        id v166 = &v156;
        NRTLVParse();
      }
      id v142 = *(id *)(*((void *)&v149 + 1) + 40);
      _Block_object_dispose(&v149, 8);

      int32x4_t v153 = v154;
      int v21 = v155;
      unsigned int v22 = (void *)v157[5];
      if (v22) {
        id v23 = v22;
      }
      id v137 = v22;
      _Block_object_dispose(&v156, 8);

      if (v21)
      {
        id v24 = v22;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v153, v153))) & 1) != 0 || v22) {
          goto LABEL_19;
        }
      }
      else
      {
        id v24 = v22;
        if (v22)
        {
LABEL_19:
          if (v142)
          {
            if (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v153, v153))))
            {
              id IPv6AddrString = (id)createIPv6AddrString();
              [IPv6AddrString UTF8String];
            }
            else if (v24)
            {
              id IPv6AddrString = [v24 hostname];
              int64_t v67 = [v22 port];
              [v67 intValue];

              [IPv6AddrString UTF8String];
            }
            else
            {
              id IPv6AddrString = 0;
              [0 UTF8String];
            }
            host_with_numeric_port = (void *)nw_endpoint_create_host_with_numeric_port();
            if (!host_with_numeric_port)
            {
              if (v15) {
                long long v106 = (void *)v15[4];
              }
              else {
                long long v106 = 0;
              }
              id v107 = v106;
              id v108 = (void *)_NRCopyLogObjectForNRUUID();
              int v109 = _NRLogIsLevelEnabled();

              if (!v109)
              {
                uint64_t v14 = 0;

                goto LABEL_161;
              }
              if (v15) {
                BOOL v110 = (void *)v15[4];
              }
              else {
                BOOL v110 = 0;
              }
              id v135 = v110;
              masque = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
              uint64_t v14 = 0;
              goto LABEL_159;
            }
            id v135 = (id)nw_array_create();
            masque = (void *)nw_proxy_hop_create_masque();
            nw_proxy_hop_set_supports_raw_ip();
            nw_proxy_hop_set_supports_l4s();
            [v142 bytes];
            [v142 length];
            nw_proxy_hop_set_server_raw_public_key();
            self;
            if (qword_1001F4A20 != -1) {
              dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
            }
            id v71 = (id)qword_1001F4A18;
            int v72 = v71;
            if (v71) {
              id v73 = (void *)*((void *)v71 + 15);
            }
            else {
              id v73 = 0;
            }
            id v74 = v73;
            nw_proxy_hop_set_client_identity_reference();

            nw_proxy_hop_set_client_identity_is_raw_public_key();
            nw_proxy_hop_add_extra_header();
            nw_proxy_hop_add_extra_header();
            nw_proxy_hop_add_extra_header();
            if (v15) {
              id v75 = (void *)v15[16];
            }
            else {
              id v75 = 0;
            }
            id v76 = v75;
            id v77 = [v76 proxyProviderCriteria];
            unsigned __int8 v78 = [v77 excludeClientApplication];

            if ((v78 & 1) == 0) {
              nw_proxy_hop_add_extra_header();
            }
            if (v15) {
              id v79 = (void *)v15[16];
            }
            else {
              id v79 = 0;
            }
            id v80 = v79;
            id v81 = [v80 proxyProviderCriteria];
            unsigned int v82 = [v81 allowsListenerClients];

            if (v82) {
              nw_proxy_hop_set_supports_udp_listen();
            }
            if (v15) {
              uint64_t v83 = (void *)v15[16];
            }
            else {
              uint64_t v83 = 0;
            }
            id v84 = v83;
            uint64_t v85 = [v84 proxyProviderCriteria];
            unsigned int v86 = [v85 allowsDemuxForwarding];

            if (v86) {
              nw_proxy_hop_set_enable_demux();
            }
            nw_proxy_hop_add_extra_header();
            if (v15) {
              id v87 = (void *)v15[16];
            }
            else {
              id v87 = 0;
            }
            id v88 = v87;
            uint64_t v89 = [v88 proxyProviderCriteria];
            unsigned int v90 = [v89 hasProxyCriteriaAssigningTokens];

            if (v90) {
              nw_proxy_hop_add_token_header_with_agent_type();
            }
            nw_proxy_hop_set_masque_version();
            nw_array_append();
            default_privacy_proxy = nw_proxy_config_create_default_privacy_proxy();
            if (default_privacy_proxy)
            {
              id v92 = objc_alloc_init((Class)NSMutableSet);
              [v92 addObjectsFromArray:&off_1001D4DC0];
              if (IPv6AddrString) {
                [v92 addObject:IPv6AddrString];
              }
              long long v151 = 0u;
              long long v152 = 0u;
              long long v149 = 0u;
              long long v150 = 0u;
              id v93 = v92;
              id v94 = [v93 countByEnumeratingWithState:&v149 objects:&v156 count:16];
              if (v94)
              {
                uint64_t v95 = *(void *)v150;
                do
                {
                  for (unint64_t i = 0; i != v94; unint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v150 != v95) {
                      objc_enumerationMutation(v93);
                    }
                    nw_proxy_config_add_excluded_domain(default_privacy_proxy, (const char *)[*(id *)(*((void *)&v149 + 1) + 8 * i) UTF8String]);
                  }
                  id v94 = [v93 countByEnumeratingWithState:&v149 objects:&v156 count:16];
                }
                while (v94);
              }

              nw_proxy_config_set_is_privacy_proxy();
              nw_proxy_config_set_is_companion_proxy();
              id v134 = objc_alloc_init((Class)NSUUID);
              int32x4_t v162 = 0uLL;
              [v134 getUUIDBytes:&v162];
              nw_proxy_config_set_identifier();
              uint64_t v14 = nw_proxy_config_publish();
              if (v15) {
                id v97 = (void *)v15[4];
              }
              else {
                id v97 = 0;
              }
              id v98 = v97;
              long long v99 = (void *)_NRCopyLogObjectForNRUUID();
              if (v14)
              {
                int v100 = _NRLogIsLevelEnabled();

                if (v100)
                {
                  if (v15) {
                    id v101 = (void *)v15[4];
                  }
                  else {
                    id v101 = 0;
                  }
                  id v102 = v101;
                  id v103 = (void *)_NRCopyLogObjectForNRUUID();
                  _NRLogWithArgs();
                }
                if (location) {
                  objc_storeStrong(location, default_privacy_proxy);
                }
                id v104 = v134;
                id v105 = *a5;
                *a5 = v104;
                goto LABEL_156;
              }
              int v116 = _NRLogIsLevelEnabled();

              if (v116)
              {
                if (v15) {
                  id v117 = (void *)v15[4];
                }
                else {
                  id v117 = 0;
                }
                id v105 = v117;
                id v118 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();

LABEL_156:
              }
            }
            else
            {
              if (v15) {
                id v111 = (void *)v15[4];
              }
              else {
                id v111 = 0;
              }
              id v112 = v111;
              BOOL v113 = (void *)_NRCopyLogObjectForNRUUID();
              int v114 = _NRLogIsLevelEnabled();

              if (!v114)
              {
                uint64_t v14 = 0;
                goto LABEL_158;
              }
              if (v15) {
                id v115 = (void *)v15[4];
              }
              else {
                id v115 = 0;
              }
              id v93 = v115;
              id v134 = (id)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
              uint64_t v14 = 0;
            }

LABEL_158:
LABEL_159:

            goto LABEL_160;
          }
          if (v15) {
            id v127 = (void *)v15[4];
          }
          else {
            id v127 = 0;
          }
          id v128 = v127;
          uint64_t v129 = (void *)_NRCopyLogObjectForNRUUID();
          int v130 = _NRLogIsLevelEnabled();

          if (!v130)
          {
            id v142 = 0;
            uint64_t v14 = 0;
            goto LABEL_162;
          }
          if (v15) {
            id v131 = (void *)v15[4];
          }
          else {
            id v131 = 0;
          }
          id IPv6AddrString = v131;
          host_with_numeric_port = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
LABEL_36:
          id v142 = 0;
          uint64_t v14 = 0;
LABEL_160:

LABEL_161:
LABEL_162:
          uint64_t v66 = v137;
          goto LABEL_163;
        }
      }
      if (v15) {
        id v122 = (void *)v15[4];
      }
      else {
        id v122 = 0;
      }
      id v123 = v122;
      id v124 = (void *)_NRCopyLogObjectForNRUUID();
      int v125 = _NRLogIsLevelEnabled();

      if (!v125)
      {
        uint64_t v66 = 0;
        uint64_t v14 = 0;
        goto LABEL_163;
      }
      if (v15) {
        id v126 = (void *)v15[4];
      }
      else {
        id v126 = 0;
      }
      id IPv6AddrString = v126;
      id v141 = (void *)_NRCopyLogObjectForNRUUID();
      id v132 = (void *)createIPv6AddrString();
      _NRLogWithArgs();

      id v137 = 0;
      uint64_t v14 = 0;

      goto LABEL_161;
    }
    *(void *)&long long v149 = 0;
    *((void *)&v149 + 1) = &v149;
    *(void *)&long long v150 = 0x2020000000;
    BYTE8(v150) = 0;
    uint64_t v156 = 0;
    id v157 = &v156;
    uint64_t v158 = 0x3032000000;
    id v159 = sub_10011CAC8;
    id v160 = sub_10011CAD8;
    id v161 = 0;
    if ((unint64_t)[v13 length] >= 0x15)
    {
      id v25 = [v13 subdataWithRange:NSMakeRange(18, [v13 length] - 18)];
      NRTLVParse();
    }
    int32x4_t v162 = v147;
    unsigned int v26 = bswap32(v148) >> 16;
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v162, v162))))
    {
      id v27 = (void *)createIPv6AddrString();
      if (!v145) {
        goto LABEL_41;
      }
    }
    else
    {
      int v36 = (void *)v157[5];
      if (v36)
      {
        id v27 = [v36 hostname];
        id v37 = [(id)v157[5] port];
        LOWORD(v26) = (unsigned __int16)[v37 intValue];

        if (!v145) {
          goto LABEL_41;
        }
      }
      else
      {
        id v27 = 0;
        if (!v145) {
          goto LABEL_41;
        }
      }
    }
    if ([v27 hasPrefix:@"fe80"])
    {
      id v38 = [objc_alloc((Class)NSString) initWithFormat:@"%@%%%@", v27, v145];

      id v27 = v38;
    }
LABEL_41:
    if (!(_WORD)v26)
    {
      id v120 = sub_100118E90();
      int v121 = _NRLogIsLevelEnabled();

      if (!v121)
      {
        uint64_t v14 = 0;
        goto LABEL_97;
      }
      id v42 = sub_100118E90();
      id v43 = (void *)createIPv6AddrString();
      _NRLogWithArgs();
      uint64_t v14 = 0;
LABEL_96:

LABEL_97:
      _Block_object_dispose(&v156, 8);

      _Block_object_dispose(&v149, 8);
      goto LABEL_164;
    }
    if (qword_1001F4C90 != -1) {
      dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
    }
    id v39 = (id)qword_1001F4C88;
    int v40 = _NRLogIsLevelEnabled();

    if (v40)
    {
      if (qword_1001F4C90 != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      id v41 = (id)qword_1001F4C88;
      _NRLogWithArgs();
    }
    id v42 = objc_alloc_init((Class)NSMutableSet);
    [v42 addObjectsFromArray:&off_1001D4DC0];
    id v43 = sub_10014B60C(v12);
    if (v43) {
      [v42 addObjectsFromArray:v43];
    }
    if (v27) {
      [v42 addObject:v27];
    }
    id v44 = objc_alloc_init((Class)NSMutableDictionary);
    [v44 setObject:v27 forKeyedSubscript:kSCPropNetProxiesSOCKSProxy];
    id v45 = +[NSNumber numberWithUnsignedShort:(unsigned __int16)v26];
    [v44 setObject:v45 forKeyedSubscript:kSCPropNetProxiesSOCKSPort];

    [v44 setObject:&off_1001D4B40 forKeyedSubscript:kSCPropNetProxiesSOCKSEnable];
    int64_t v46 = [v42 allObjects];
    [v44 setObject:v46 forKeyedSubscript:kSCPropNetProxiesExceptionsList];

    [v44 setObject:@"shoes" forKeyedSubscript:@"kCFStreamPropertySOCKSVersion"];
    if (_os_feature_enabled_impl() && *(unsigned char *)(*((void *)&v149 + 1) + 24)) {
      [v44 setObject:&off_1001D4B40 forKeyedSubscript:@"SHOESUDPAssociate"];
    }
    if (v12 && *((unsigned char *)v12 + 16)) {
      [v44 setObject:@"com.apple.datausage.alt-account" forKeyedSubscript:@"SHOESFixedBundleID"];
    }
    id v47 = [objc_alloc((Class)NEProxyConfigurationNetworkAgent) initWithProxyConfiguration:v44];
    [v47 setActive:1];
    long long v48 = +[NSUUID UUID];
    [v47 setAgentUUID:v48];

    [v47 setVoluntary:0];
    [v47 setUserActivated:0];
    [v47 setKernelActivated:0];
    uint64_t v49 = [v47 agentUUID];
    id v50 = *a5;
    *a5 = (id)v49;

    id v51 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
    id v52 = *a4;
    *a4 = v51;

    if (*a4)
    {
      if ([*a4 registerNetworkAgent:v47])
      {
        if (v12) {
          long long v53 = (void *)v12[16];
        }
        else {
          long long v53 = 0;
        }
        id v54 = v53;
        unsigned __int8 v55 = [v54 hasPoliciesForProxyCriteria];

        if ((v55 & 1) == 0)
        {
          if (v12) {
            id v56 = (void *)v12[16];
          }
          else {
            id v56 = 0;
          }
          id v57 = v56;
          if ([v57 hasCompanionDatapath])
          {
            unsigned __int8 v58 = [*a4 addNetworkAgentToInterfaceNamed:v145];

            if ((v58 & 1) == 0)
            {
              id v59 = sub_100118E90();
              int v60 = _NRLogIsLevelEnabled();

              if (v60)
              {
                id v61 = sub_100118E90();
                _NRLogWithArgs();
LABEL_79:
                uint64_t v14 = 0;
LABEL_93:

                goto LABEL_95;
              }
LABEL_80:
              uint64_t v14 = 0;
LABEL_95:

              goto LABEL_96;
            }
          }
          else
          {
          }
        }
        if (qword_1001F4C90 != -1) {
          dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
        }
        id v68 = (id)qword_1001F4C88;
        int v69 = _NRLogIsLevelEnabled();

        if (!v69)
        {
          uint64_t v14 = 1;
          goto LABEL_95;
        }
        if (qword_1001F4C90 != -1) {
          dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
        }
        id v61 = (id)qword_1001F4C88;
        id v133 = [v47 agentUUID];
        _NRLogWithArgs();

        uint64_t v14 = 1;
        goto LABEL_93;
      }
      if (qword_1001F4C90 != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      id v64 = (id)qword_1001F4C88;
      int v65 = _NRLogIsLevelEnabled();

      if (!v65) {
        goto LABEL_80;
      }
      if (qword_1001F4C90 == -1)
      {
LABEL_78:
        id v61 = (id)qword_1001F4C88;
        _NRLogWithArgs();
        goto LABEL_79;
      }
    }
    else
    {
      if (qword_1001F4C90 != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      id v62 = (id)qword_1001F4C88;
      char v63 = _NRLogIsLevelEnabled();

      if ((v63 & 1) == 0) {
        goto LABEL_80;
      }
      if (qword_1001F4C90 == -1) {
        goto LABEL_78;
      }
    }
    dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
    goto LABEL_78;
  }
  if (qword_1001F4C90 != -1) {
    dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4C90 != -1) {
      dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
    }
    _NRLogWithArgs();
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0;
  }
LABEL_164:

  return v14;
}

void sub_10011C654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

id sub_10011C6B8(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = v7;
  if (!v5)
  {
    id v33 = sub_100118E90();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (!v7)
  {
    id v35 = sub_100118E90();
    int v36 = _NRLogIsLevelEnabled();

    if (v36)
    {
LABEL_19:
      id v37 = sub_100118E90();
      _NRLogWithArgs();

      unsigned int v26 = 0;
      goto LABEL_13;
    }
LABEL_20:
    unsigned int v26 = 0;
    goto LABEL_13;
  }
  id v41 = objc_alloc_init((Class)NSMutableArray);
  id v9 = +[NEPolicyCondition allInterfaces];
  id v45 = v9;
  uint64_t v10 = +[NSArray arrayWithObjects:&v45 count:1];

  id v11 = v6;
  id v12 = +[NEPolicyRouteRule routeRuleWithAction:5 forInterfaceName:v6];
  id v42 = v5;
  [v12 setNetworkAgentUUID:v5];
  id v44 = v12;
  id v13 = +[NSArray arrayWithObjects:&v44 count:1];
  uint64_t v14 = +[NEPolicyResult routeRules:v13];

  id v39 = (void *)v14;
  int v40 = (void *)v10;
  id v15 = [objc_alloc((Class)NEPolicy) initWithOrder:10 result:v14 conditions:v10];
  self;
  if (qword_1001F4D28 != -1) {
    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
  }
  id v16 = (id)qword_1001F4D20;
  BOOL v17 = v8;
  id v18 = sub_100134CFC((uint64_t)v16, v8, v15);

  [v41 addObject:v18];
  id v19 = objc_alloc((Class)NEPolicy);
  id v20 = +[NEPolicyResult netAgentUUID:v42];
  int v21 = +[NEPolicyCondition scopedInterface:v11];
  id v43 = v21;
  unsigned int v22 = +[NSArray arrayWithObjects:&v43 count:1];
  id v23 = [v19 initWithOrder:10 result:v20 conditions:v22];

  self;
  if (qword_1001F4D28 != -1) {
    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
  }
  id v24 = (id)qword_1001F4D20;
  id v25 = sub_100134CFC((uint64_t)v24, v17, v23);

  unsigned int v26 = v41;
  [v41 addObject:v25];
  self;
  id v6 = v11;
  if (qword_1001F4D28 != -1) {
    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
  }
  id v5 = v42;
  id v27 = (id)qword_1001F4D20;
  id v28 = (id *)v27;
  if (v27)
  {
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v27 + 1));
    if (([v28[2] apply] & 1) == 0) {
      sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v29, v30, v31, v38);
    }
  }

  id v8 = v17;
LABEL_13:

  return v26;
}

uint64_t sub_10011CAC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10011CAD8(uint64_t a1)
{
}

uint64_t sub_10011CAE0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = __rev16(*(unsigned __int16 *)(a2 + 1));
  int v4 = *a2;
  if (v4 == 3)
  {
    if (*(_WORD *)(a2 + 1))
    {
      id v9 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v3];
      uint64_t v8 = 1;
      uint64_t v10 = sub_100116F6C(v9, 1, 0, 0);
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }
    else
    {
      if (qword_1001F4C90 != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4C90 != -1) {
          dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
        }
        _NRLogWithArgs();
      }
      return 0;
    }
  }
  else if (v4 == 2 && *(_WORD *)(a2 + 1))
  {
    id v5 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:v3];
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    return 1;
  }
  else
  {
    return 1;
  }
  return v8;
}

uint64_t sub_10011CC38(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  if (v4 == 3)
  {
    if (!*(_WORD *)(a2 + 1))
    {
      if (qword_1001F4C90 != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      if (!_NRLogIsLevelEnabled()) {
        return 0;
      }
      if (qword_1001F4C90 == -1) {
        goto LABEL_17;
      }
      goto LABEL_20;
    }
    unsigned int v3 = *(unsigned __int16 *)(a2 + 1);
    id v5 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:__rev16(v3)];
    uint64_t v6 = 1;
    uint64_t v7 = sub_100116F6C(v5, 1, 0, 0);
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
  else if (v4 == 1)
  {
    if (*(_WORD *)(a2 + 1))
    {
      if (qword_1001F4C90 != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      if (!_NRLogIsLevelEnabled()) {
        return 0;
      }
      if (qword_1001F4C90 == -1)
      {
LABEL_17:
        _NRLogWithArgs();
        return 0;
      }
LABEL_20:
      dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      goto LABEL_17;
    }
    uint64_t v6 = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    return 1;
  }
  return v6;
}

uint64_t sub_10011D5DC(void *a1)
{
  id v1 = a1;
  uint64_t Nexus = NEVirtualInterfaceCreateNexus();
  if (!Nexus)
  {
    if (qword_1001F4C90 != -1) {
      dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C90 != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      _NRLogWithArgs();
    }
    uint64_t Nexus = NEVirtualInterfaceCreateNexus();
    if (!Nexus)
    {
      if (qword_1001F4C90 != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4C90 != -1) {
          dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
        }
        _NRLogWithArgs();
      }
      uint64_t Nexus = NEVirtualInterfaceCreateNexus();
      if (!Nexus)
      {
        if (qword_1001F4C90 != -1) {
          dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4C90 != -1) {
            dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
          }
          _NRLogWithArgs();
        }
        uint64_t Nexus = NEVirtualInterfaceCreateNexus();
        if (!Nexus)
        {
          if (qword_1001F4C90 != -1) {
            dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4C90 != -1) {
              dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
            }
            _NRLogWithArgs();
          }
          uint64_t Nexus = NEVirtualInterfaceCreateNexus();
          if (!Nexus)
          {
            if (qword_1001F4C90 != -1) {
              dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4C90 != -1) {
                dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
              }
              _NRLogWithArgs();
            }
            uint64_t Nexus = NEVirtualInterfaceCreateNexus();
            if (!Nexus)
            {
              if (qword_1001F4C90 != -1) {
                dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4C90 != -1) {
                  dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
                }
                _NRLogWithArgs();
              }
              uint64_t Nexus = 0;
            }
          }
        }
      }
    }
  }

  return Nexus;
}

void sub_10011DD68(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

void sub_10011DD8C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v10 = WeakRetained;
    id v3 = sub_100118E90();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = sub_100118E90();
      id v9 = "";
      _NRLogWithArgs();
    }
    sub_100115AB0(*(void **)(a1 + 32), @"Leak", @"NEIKEv2Session", 0, 0, v5, v6, v7, (uint64_t)v9);
    id WeakRetained = v10;
  }
}

uint64_t sub_10011E3E0(uint64_t a1)
{
  if (qword_1001F4C90 != -1) {
    dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4C90 != -1) {
      dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
    }
    uint64_t v11 = "";
    _NRLogWithArgs();
  }
  uint64_t v2 = sub_1001154D0(*(void **)(a1 + 32));
  id v3 = v2;
  if (v2)
  {
    id v12 = v2;
    if ([v2 isEqual:*(void *)(a1 + 40)])
    {
      id v4 = sub_100118E90();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v9 = sub_100118E90();
        uint64_t v11 = "";
        _NRLogWithArgs();
      }
      sub_100115AB0(*(void **)(a1 + 48), @"Leak", @"Interface", 0, 0, v6, v7, v8, (uint64_t)v11);
      goto LABEL_15;
    }
    if (qword_1001F4C90 != -1) {
      dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
    }
    uint64_t v2 = (void *)_NRLogIsLevelEnabled();
    id v3 = v12;
    if (v2)
    {
      if (qword_1001F4C90 != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      uint64_t v2 = (void *)_NRLogWithArgs();
LABEL_15:
      id v3 = v12;
    }
  }

  return _objc_release_x1(v2, v3);
}

void sub_10011E674(id a1)
{
  id v1 = [objc_alloc((Class)NEIKEv2KeyIDIdentifier) initWithKeyIDString:@"com.apple.networkrelay.companionlink.classD"];
  uint64_t v2 = qword_1001F4C28;
  qword_1001F4C28 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10011E6BC(id a1)
{
  id v1 = [objc_alloc((Class)NEIKEv2KeyIDIdentifier) initWithKeyIDString:@"com.apple.networkrelay.companionlink.classC"];
  uint64_t v2 = qword_1001F4C38;
  qword_1001F4C38 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10011E704()
{
  if (qword_1001F4C50 != -1) {
    dispatch_once(&qword_1001F4C50, &stru_1001C7E90);
  }
  int v0 = (void *)qword_1001F4C48;

  return v0;
}

void sub_10011E758(id a1)
{
  id v1 = [objc_alloc((Class)NEIKEv2KeyIDIdentifier) initWithKeyIDString:@"com.apple.networkrelay.companionlink.classA"];
  uint64_t v2 = qword_1001F4C48;
  qword_1001F4C48 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10011E7A0()
{
  if (qword_1001F4C60 != -1) {
    dispatch_once(&qword_1001F4C60, &stru_1001C7EB0);
  }
  int v0 = (void *)qword_1001F4C58;

  return v0;
}

void sub_10011E7F4(id a1)
{
  id v1 = [objc_alloc((Class)NEIKEv2KeyIDIdentifier) initWithKeyIDString:@"com.apple.networkrelay.companionlink.pairing.ids"];
  uint64_t v2 = qword_1001F4C58;
  qword_1001F4C58 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10011E83C()
{
  if (qword_1001F4C70 != -1) {
    dispatch_once(&qword_1001F4C70, &stru_1001C7ED0);
  }
  int v0 = (void *)qword_1001F4C68;

  return v0;
}

void sub_10011E890(id a1)
{
  id v1 = [objc_alloc((Class)NEIKEv2KeyIDIdentifier) initWithKeyIDString:@"com.apple.networkrelay.companionlink.pairing.oobk"];
  uint64_t v2 = qword_1001F4C68;
  qword_1001F4C68 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10011E8D8(id a1)
{
  id v1 = [objc_alloc((Class)NEIKEv2KeyIDIdentifier) initWithKeyIDString:@"com.apple.networkrelay.companionlink.pairing.control"];
  uint64_t v2 = qword_1001F4C78;
  qword_1001F4C78 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_10011E920(int8x16_t *a1)
{
  int8x16_t v6 = *a1;
  int8x8_t v1 = veor_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v6.i32[0] = v1.i32[0] ^ v1.i32[1];
  id v2 = [objc_alloc((Class)NSData) initWithBytes:&v6 length:16];
  id v3 = [v2 base64EncodedStringWithOptions:0, v6.i64[0]];
  uint64_t v4 = [v3 substringToIndex:6];

  return v4;
}

id sub_10011E9E4(void *a1)
{
  id v1 = a1;
  if ((unint64_t)[v1 length] > 0x11)
  {
    uint64_t v5 = 0;
    int8x16_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    uint64_t v8 = sub_10011CAC8;
    id v9 = sub_10011CAD8;
    id v10 = 0;
    if ((unint64_t)[v1 length] >= 0x15)
    {
      id v3 = [v1 subdataWithRange:NSMakeRange(18, [v1 length] - 18)];
      NRTLVParse();
    }
    id v2 = (id)v6[5];
    _Block_object_dispose(&v5, 8);
  }
  else
  {
    if (qword_1001F4C90 != -1) {
      dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4C90 != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      _NRLogWithArgs();
    }
    id v2 = 0;
  }

  return v2;
}

void sub_10011EB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10011EBB4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a2 == 4)
  {
    id v3 = [objc_alloc((Class)NSData) initWithBytes:a2 + 3 length:bswap32(*(unsigned __int16 *)(a2 + 1)) >> 16];
    id v4 = [objc_alloc((Class)NRDeviceProxyProviderCriteria) initWithReceivedData:v3];
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    int8x16_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  return 1;
}

void sub_10011EC44(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v3)
  {
    if (v4)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      int8x16_t v6 = [v4 proposals];
      id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v16;
        do
        {
          for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v16 != v9) {
              objc_enumerationMutation(v6);
            }
            [*(id *)(*((void *)&v15 + 1) + 8 * i) setLifetimeSeconds:21599];
          }
          id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v8);
      }
      goto LABEL_14;
    }
    id v13 = sub_100118E90();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
LABEL_13:
      int8x16_t v6 = sub_100118E90();
      _NRLogWithArgs();
LABEL_14:
    }
  }
  else
  {
    id v11 = sub_100118E90();
    int v12 = _NRLogIsLevelEnabled();

    if (v12) {
      goto LABEL_13;
    }
  }
}

void sub_10011EDEC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (v4)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    int8x16_t v6 = [v4 proposals];
    id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v14;
      do
      {
        for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          [*(id *)(*((void *)&v13 + 1) + 8 * i) setLifetimeSeconds:21221];
        }
        id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v8);
    }
    goto LABEL_11;
  }
  id v11 = sub_100118E90();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    int8x16_t v6 = sub_100118E90();
    _NRLogWithArgs();
LABEL_11:
  }
}

id sub_10011EF54()
{
  id v0 = objc_alloc_init((Class)NEIKEv2IKESAConfiguration);
  [v0 setAllowRedirect:0];
  [v0 setDisableSwitchToNATTPorts:1];
  [v0 setNonceSize:32];
  [v0 setStrictNonceSizeChecks:1];
  id v1 = objc_alloc_init((Class)NEIKEv2IKESAProposal);
  id v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  _NRIsAppleInternal();
  id v3 = [objc_alloc((Class)NEIKEv2EncryptionProtocol) initWithEncryptionType:5];
  id v17 = v3;
  id v4 = [objc_alloc((Class)NEIKEv2EncryptionProtocol) initWithEncryptionType:6];
  id v18 = v4;
  uint64_t v5 = +[NSArray arrayWithObjects:&v17 count:2];

  [v1 setEncryptionProtocols:v5];
  id v6 = [objc_alloc((Class)NEIKEv2PRFProtocol) initWithType:7];
  id v17 = v6;
  id v7 = +[NSArray arrayWithObjects:&v17 count:1];

  [v1 setPrfProtocols:v7];
  id v8 = [objc_alloc((Class)NEIKEv2KEMProtocol) initWithMethod:32];
  id v17 = v8;
  id v9 = [objc_alloc((Class)NEIKEv2KEMProtocol) initWithMethod:31];
  id v18 = v9;
  id v10 = +[NSArray arrayWithObjects:&v17 count:2];

  [v1 setKemProtocols:v10];
  [v1 setLifetimeSeconds:1000000];
  id v17 = v1;
  id v11 = +[NSArray arrayWithObjects:&v17 count:1];

  [v0 setProposals:v11];
  id v12 = objc_alloc((Class)NSSet);
  id v13 = [objc_alloc((Class)NEIKEv2SignatureHashProtocol) initWithHashType:5];
  id v14 = [objc_alloc((Class)NEIKEv2SignatureHashProtocol) initWithHashType:2];
  id v15 = [v12 initWithObjects:v13, v14];
  [v0 setExtraSupportedSignatureHashes:v15];

  [v0 setPreferInitiatorProposalOrder:1];
  return v0;
}

id sub_10011F1E0()
{
  id v0 = objc_alloc_init((Class)NEIKEv2ChildSAConfiguration);
  [v0 setMode:1];
  id v1 = +[NEIKEv2TrafficSelector copyAllIPv6];
  v18[0] = v1;
  id v2 = +[NEIKEv2TrafficSelector copyAllIPv4];
  v18[1] = v2;
  id v3 = +[NSArray arrayWithObjects:v18 count:2];
  [v0 setLocalTrafficSelectors:v3];

  id v4 = +[NEIKEv2TrafficSelector copyAllIPv6];
  v17[0] = v4;
  id v5 = +[NEIKEv2TrafficSelector copyAllIPv4];
  v17[1] = v5;
  id v6 = +[NSArray arrayWithObjects:v17 count:2];
  [v0 setRemoteTrafficSelectors:v6];

  id v7 = objc_alloc_init((Class)NEIKEv2ChildSAProposal);
  [v7 setProtocol:3];
  id v8 = sub_10015BD9C();
  dispatch_assert_queue_V2(v8);

  _NRIsAppleInternal();
  id v9 = [objc_alloc((Class)NEIKEv2EncryptionProtocol) initWithEncryptionType:9];
  id v19 = v9;
  id v10 = [objc_alloc((Class)NEIKEv2EncryptionProtocol) initWithEncryptionType:7];
  id v20 = v10;
  id v11 = +[NSArray arrayWithObjects:&v19 count:2];

  [v7 setEncryptionProtocols:v11];
  id v12 = [objc_alloc((Class)NEIKEv2KEMProtocol) initWithMethod:32];
  id v19 = v12;
  id v13 = [objc_alloc((Class)NEIKEv2KEMProtocol) initWithMethod:31];
  id v20 = v13;
  id v14 = +[NSArray arrayWithObjects:&v19 count:2];

  [v7 setKemProtocols:v14];
  [v7 setLifetimeSeconds:1000000];
  id v19 = v7;
  id v15 = +[NSArray arrayWithObjects:&v19 count:1];

  [v0 setProposals:v15];
  [v0 setReplayWindowSize:256];
  [v0 setPreferInitiatorProposalOrder:1];
  return v0;
}

id sub_10011F450(int a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init((Class)NEIKEv2SessionConfiguration);
  [v7 setNegotiateMOBIKE:0];
  [v7 setNatTraversalKeepaliveDisabled:1];
  [v7 setDeadPeerDetectionEnabled:0];
  [v7 setIdleTimeoutEnabled:0];
  [v7 setConfigurationReply:0];
  id v8 = [v5 copy];
  [v7 setLocalIdentifier:v8];

  if (a1)
  {
    id v9 = [v5 copy];
    [v7 setRemoteIdentifier:v9];
  }
  id v10 = [v6 copy];
  [v7 setAuthenticationProtocol:v10];

  id v11 = [v6 copy];
  [v7 setRemoteAuthentication:v11];

  return v7;
}

void *sub_10011F560(int a1, void *a2, int a3)
{
  id v5 = a2;
  switch(a3)
  {
    case 1:
      if (qword_1001F4C50 != -1) {
        dispatch_once(&qword_1001F4C50, &stru_1001C7E90);
      }
      id String = (id)qword_1001F4C48;
      if (v5)
      {
        uint64_t v7 = 11;
        goto LABEL_16;
      }
      goto LABEL_75;
    case 3:
      if (qword_1001F4C40 != -1) {
        dispatch_once(&qword_1001F4C40, &stru_1001C7E70);
      }
      id String = (id)qword_1001F4C38;
      if (v5)
      {
        uint64_t v7 = 10;
        goto LABEL_16;
      }
LABEL_75:
      BOOL v12 = v5 == 0;
      id v10 = objc_alloc((Class)NEIKEv2AuthenticationProtocol);
      id v8 = 0;
      goto LABEL_19;
    case 4:
      if (qword_1001F4C30 != -1) {
        dispatch_once(&qword_1001F4C30, &stru_1001C7E50);
      }
      id String = (id)qword_1001F4C28;
      if (v5)
      {
        uint64_t v7 = 9;
LABEL_16:
        id v8 = (id *)v5[v7];
        unsigned int v9 = *((unsigned __int16 *)v5 + 14);
        id v10 = objc_alloc((Class)NEIKEv2AuthenticationProtocol);
        if (v9 >= 0x14)
        {
          id v11 = [v10 initWithDigitalSignature:3];
          BOOL v12 = 0;
          goto LABEL_20;
        }
        BOOL v12 = 0;
LABEL_19:
        id v11 = [v10 initWithNonStandardDigitalSignature:3];
LABEL_20:
        id v13 = sub_10011F450(a1, String, v11);
        id v14 = v13;
        if (v8)
        {
          id v15 = (uint64_t *)v8[1];
          long long v16 = v15;
          if (v15) {
            uint64_t v17 = v15[2];
          }
          else {
            uint64_t v17 = 0;
          }
          [v14 setRemotePublicKeyRef:v17];

          id v18 = (uint64_t *)v8[2];
          id v19 = v18;
          if (v18) {
            uint64_t v20 = v18[2];
          }
          else {
            uint64_t v20 = 0;
          }
        }
        else
        {
          [v13 setRemotePublicKeyRef:0];
          id v19 = 0;
          uint64_t v20 = 0;
        }
        [v14 setLocalPrivateKeyRef:v20];

        if (a1 && _os_feature_enabled_impl())
        {
          if (!v12)
          {
            if (*((unsigned __int16 *)v5 + 14) >= 0x14u)
            {
              int v21 = [v14 remoteIdentifier];
              id v22 = v5[4];
              id v23 = v21;
              id v24 = v22;
              uint64_t v25 = self;
              if (v23)
              {
                if (v24)
                {
                  unsigned int v26 = sub_10013DD58(v25, v24, 0);
                  id v27 = v23;
                  if (v26 && (id v28 = (void *)v26[8]) != 0)
                  {
                    id v57 = v24;
                    id v58 = v23;
                    id v59 = v26;
                    memset(v62, 0, sizeof(v62));
                    long long v61 = 0u;
                    char v60 = 1;
                    uint64_t v29 = (void *)v28[1];
                    uint64_t v30 = v27;
                    uint64_t v31 = v28;
                    [v29 getUUIDBytes:&v61];

                    arc4random_buf(v62, 0x4FuLL);
                    id v32 = [objc_alloc((Class)NSData) initWithBytes:&v60 length:96];
                    id v33 = objc_alloc((Class)NEIKEv2EncryptedKeyIDIdentifier);
                    id v56 = v30;
                    int v34 = [v30 identifierData];
                    id v35 = (void *)v59[8];
                    if (v35) {
                      uint64_t v36 = v35[2];
                    }
                    else {
                      uint64_t v36 = 0;
                    }
                    id v37 = v35;
                    id v38 = [v33 initWithKeyID:v32 aad:v34 key:v36];

                    id v24 = v57;
                    id v23 = v58;
                    unsigned int v26 = v59;
                    id v27 = v56;
                  }
                  else
                  {
                    id v38 = 0;
                  }

                  goto LABEL_64;
                }
                id v50 = 0;
                id v51 = v23;
                id v54 = sub_100135DDC();
                int IsLevelEnabled = _NRLogIsLevelEnabled();

                if (IsLevelEnabled)
                {
LABEL_73:
                  unsigned int v26 = sub_100135DDC();
                  _NRLogWithArgs();
                  id v38 = 0;
                  id v23 = v51;
                  id v24 = v50;
LABEL_64:

LABEL_65:
                  if (v38) {
                    [v14 setLocalIdentifier:v38];
                  }

                  goto LABEL_37;
                }
              }
              else
              {
                id v50 = v24;
                id v51 = 0;
                id v52 = sub_100135DDC();
                int v53 = _NRLogIsLevelEnabled();

                if (v53) {
                  goto LABEL_73;
                }
              }
              id v38 = 0;
              id v23 = v51;
              id v24 = v50;
              goto LABEL_65;
            }
LABEL_37:
            id v39 = v5[16];
            goto LABEL_38;
          }
        }
        else if (!v12)
        {
          goto LABEL_37;
        }
        id v39 = 0;
LABEL_38:
        id v40 = v39;
        if (([v40 allowsDeadPeerDetection] & 1) == 0)
        {
          self;
          if (qword_1001F4A20 != -1) {
            dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
          }
          id v41 = (id)qword_1001F4A18;
          id v42 = v41;
          if (!v41 || !v41[8])
          {
            if (qword_1001F4B80 != -1) {
              dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
            }
            int v46 = byte_1001F4B78;

            if (!v46) {
              goto LABEL_48;
            }
            goto LABEL_45;
          }
        }
LABEL_45:
        id v43 = v14;
        id v44 = v43;
        if (v43)
        {
          [v43 setDeadPeerDetectionEnabled:1];
          [v44 setDeadPeerDetectionInterval:30];
          [v44 setDeadPeerDetectionRetryIntervalMilliseconds:3000];
          [v44 setDeadPeerDetectionMaxRetryCount:3];
        }
        else
        {
          id v47 = sub_100118E90();
          int v48 = _NRLogIsLevelEnabled();

          if (v48)
          {
            id v49 = sub_100118E90();
            _NRLogWithArgs();
          }
        }

LABEL_48:
        goto LABEL_49;
      }
      goto LABEL_75;
  }
  if (qword_1001F4C90 != -1) {
    dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
  }
  if (!_NRLogIsLevelEnabled())
  {
    id v14 = 0;
    goto LABEL_50;
  }
  if (qword_1001F4C90 != -1) {
    dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
  }
  id v8 = (id *)(id)qword_1001F4C88;
  id String = (id)NRDataProtectionClassCreateString();
  _NRLogWithArgs();
  id v14 = 0;
LABEL_49:

LABEL_50:
  return v14;
}

id sub_10011FC08()
{
  char v6 = 0;
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v0 = (id)qword_1001F4DD8;
  if (v0)
  {
    id v1 = v0;
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v0 + 2));
    if (!v1[10])
    {
      v1[10] = 1;
      if (v1[8] == 4)
      {
        sub_100158FD0((uint64_t)v1);
        if (v1[9])
        {
          v1[8] = 3;
          sub_100159248((uint64_t)v1);
        }
      }
    }
    int v2 = v1[8] & 0xFD;

    if (v2 == 1) {
      char v6 = 0x80;
    }
  }
  id v3 = [objc_alloc((Class)NSData) initWithBytes:&v6 length:1];
  id v4 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:48701 notifyData:v3];

  return v4;
}

BOOL sub_10011FD1C(void *a1)
{
  id v1 = a1;
  int v2 = v1;
  if (v1) {
    id v3 = (void *)v1[16];
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  if (v4)
  {
    if (v2) {
      id v5 = (void *)v2[16];
    }
    else {
      id v5 = 0;
    }
    id v6 = v5;
    BOOL v7 = [v6 proxyCapability] == (id)1;
  }
  else
  {
    BOOL v7 = 1;
  }

  return v7;
}

id sub_10011FDA0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (!v3)
  {
    id v53 = sub_100118E90();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v55 = sub_100118E90();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    id v5 = (char *)&v57 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v56 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v56 = 136446210;
    *(void *)(v56 + 4) = "NRLinkCopyProxyPrivateNotify";
    sub_100118E90();
    _NRLogAbortWithPack();
LABEL_49:
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    goto LABEL_4;
  }
  id v5 = v4;
  if (!sub_10013F2D8((uint64_t)v3))
  {
    unsigned int port = 62742;
    goto LABEL_10;
  }
  self;
  if (qword_1001F4A20 != -1) {
    goto LABEL_49;
  }
LABEL_4:
  id v6 = (id)qword_1001F4A18;
  BOOL v7 = v6;
  if (v6 && *((void *)v6 + 19)) {
    unsigned int port = nw_masque_server_get_port();
  }
  else {
    unsigned int port = 0;
  }

LABEL_10:
  long long v66 = 0uLL;
  __int16 v67 = 0;
  if (!v5)
  {
    long long v65 = 0uLL;
    sub_100142334(v3, &v65);
    long long v66 = v65;
    __int16 v67 = __rev16(port);
  }
  id v9 = [objc_alloc((Class)NSMutableData) initWithBytes:&v66 length:18];
  if (_os_feature_enabled_impl() && *((unsigned __int16 *)v3 + 14) >= 0x11u)
  {
    id v10 = objc_alloc_init((Class)NSMutableData);
    NRTLVAdd();
    [v9 appendData:v10];
  }
  if (sub_10013F2D8((uint64_t)v3))
  {
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    id v11 = (id)qword_1001F4A18;
    BOOL v12 = v11;
    if (v11) {
      id v13 = (void *)*((void *)v11 + 13);
    }
    else {
      id v13 = 0;
    }
    id v14 = v13;

    if ([v14 length])
    {
      id v15 = objc_alloc_init((Class)NSMutableData);
      NRTLVAddData();
      [v9 appendData:v15];
    }
    else
    {
      id v16 = v3[4];
      uint64_t v17 = v3;
      id v18 = (void *)_NRCopyLogObjectForNRUUID();
      int v19 = _NRLogIsLevelEnabled();

      id v3 = v17;
      if (!v19)
      {
LABEL_25:

        goto LABEL_26;
      }
      id v15 = v17[4];
      uint64_t v20 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();

      id v3 = v17;
    }

    goto LABEL_25;
  }
LABEL_26:
  if (v5)
  {
    id v21 = objc_alloc_init((Class)NSMutableData);
    id v22 = sub_100116B0C(v5, port, 0);
    NRTLVAddData();
    [v9 appendData:v21];
  }
  id v23 = v3[16];
  unsigned int v24 = [v23 hasPoliciesForProxyCriteria];

  if (v24)
  {
    id v58 = v9;
    id v59 = v5;
    id v57 = objc_alloc_init((Class)NSMutableData);
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    char v60 = v3;
    id v25 = v3[16];
    unsigned int v26 = [v25 proxyProviderCriteria];
    id v27 = [v26 proxyUsageRules];

    id v28 = [v27 countByEnumeratingWithState:&v61 objects:v68 count:16];
    if (v28)
    {
      id v29 = v28;
      uint64_t v30 = *(void *)v62;
      do
      {
        for (unint64_t i = 0; i != v29; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v62 != v30) {
            objc_enumerationMutation(v27);
          }
          id v32 = *(void **)(*((void *)&v61 + 1) + 8 * i);
          id v33 = objc_alloc_init((Class)NSMutableData);
          int v34 = [v32 matchResultAccountID];
          id v35 = [v34 length];

          if (v35)
          {
            uint64_t v36 = [v32 matchResultAccountID];
            id v37 = [v36 dataUsingEncoding:4];

            id v38 = sub_1000044B0((id *)[NRToken alloc], 1, 51, v37);
            id v39 = sub_1000046C0((uint64_t)v38);
            NRTLVAddData();
          }
          id v40 = [v32 matchResultBundleID];
          id v41 = [v40 length];

          if (v41)
          {
            id v42 = [v32 matchResultBundleID];
            id v43 = [v42 dataUsingEncoding:4];

            id v44 = sub_1000044B0((id *)[NRToken alloc], 1, 52, v43);
            id v45 = sub_1000046C0((uint64_t)v44);
            NRTLVAddData();
          }
          if ([v33 length]) {
            [v32 addMatchToken:v33];
          }
        }
        id v29 = [v27 countByEnumeratingWithState:&v61 objects:v68 count:16];
      }
      while (v29);
    }

    id v3 = v60;
    id v46 = v60[16];
    id v47 = [v46 proxyProviderCriteria];
    id v48 = [v47 copySendData];

    id v49 = [v48 length];
    id v9 = v58;
    id v50 = v57;
    if (v49)
    {
      NRTLVAddData();
      [v9 appendData:v50];
    }

    id v5 = v59;
  }
  id v51 = [objc_alloc((Class)NEIKEv2PrivateNotify) initWithNotifyStatus:50701 notifyData:v9];

  return v51;
}

id sub_100120478(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6)
{
  id v12 = a1;
  id v13 = a2;
  id v14 = [objc_alloc((Class)NEIPsecNexus) initWithName:v12 delegate:v13 enableWithChannelCount:a3 netifRingSize:a4 kernelPipeTxRingSize:a5 kernelPipeRxRingSize:a6];
  if (v14) {
    goto LABEL_36;
  }
  id v6 = &unk_1001F4000;
  if (qword_1001F4C90 != -1) {
    goto LABEL_41;
  }
  while (1)
  {
    if (_NRLogIsLevelEnabled())
    {
      if (v6[402] != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      _NRLogWithArgs();
    }
    id v14 = [objc_alloc((Class)NEIPsecNexus) initWithName:v12 delegate:v13 enableWithChannelCount:a3 netifRingSize:a4 kernelPipeTxRingSize:a5 kernelPipeRxRingSize:a6];
    if (!v14)
    {
      if (v6[402] != -1) {
        dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (v6[402] != -1) {
          dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
        }
        _NRLogWithArgs();
      }
      id v14 = [objc_alloc((Class)NEIPsecNexus) initWithName:v12 delegate:v13 enableWithChannelCount:a3 netifRingSize:a4 kernelPipeTxRingSize:a5 kernelPipeRxRingSize:a6];
      if (!v14)
      {
        if (v6[402] != -1) {
          dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (v6[402] != -1) {
            dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
          }
          _NRLogWithArgs();
        }
        id v14 = [objc_alloc((Class)NEIPsecNexus) initWithName:v12 delegate:v13 enableWithChannelCount:a3 netifRingSize:a4 kernelPipeTxRingSize:a5 kernelPipeRxRingSize:a6];
        if (!v14)
        {
          if (v6[402] != -1) {
            dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (v6[402] != -1) {
              dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
            }
            _NRLogWithArgs();
          }
          id v14 = [objc_alloc((Class)NEIPsecNexus) initWithName:v12 delegate:v13 enableWithChannelCount:a3 netifRingSize:a4 kernelPipeTxRingSize:a5 kernelPipeRxRingSize:a6];
          if (!v14)
          {
            if (v6[402] != -1) {
              dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (v6[402] != -1) {
                dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
              }
              _NRLogWithArgs();
            }
            id v14 = [objc_alloc((Class)NEIPsecNexus) initWithName:v12 delegate:v13 enableWithChannelCount:a3 netifRingSize:a4 kernelPipeTxRingSize:a5 kernelPipeRxRingSize:a6];
            if (!v14)
            {
              if (v6[402] != -1) {
                dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (v6[402] != -1) {
                  dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
                }
                _NRLogWithArgs();
              }
              id v20 = sub_100118E90();
              int IsLevelEnabled = _NRLogIsLevelEnabled();

              if (IsLevelEnabled)
              {
                id v22 = sub_100118E90();
                _NRLogWithArgs();
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
LABEL_36:
    if ([v14 virtualInterface]) {
      break;
    }
    id v16 = sub_100118E90();
    int v17 = _NRLogIsLevelEnabled();

    a6 = "NRLinkIPsecNexusCreate";
    if (v17)
    {
      id v18 = sub_100118E90();
      _NRLogWithArgs();
    }
LABEL_40:
    id v12 = (id)_os_log_pack_size();
    id v13 = (char *)&v23 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v19 = 136446210;
    *(void *)(v19 + 4) = "NRLinkIPsecNexusCreate";
    sub_100118E90();
    _NRLogAbortWithPack();
LABEL_41:
    dispatch_once(&qword_1001F4C90, &stru_1001C7F60);
  }

  return v14;
}

id *sub_100120CF4(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = v7;
  if (!a1) {
    goto LABEL_11;
  }
  if (!v6)
  {
    id v17 = sub_100120F50();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  if (!v7)
  {
    id v19 = sub_100120F50();
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
LABEL_10:
      id v21 = sub_100120F50();
      _NRLogWithArgs();

      id v15 = 0;
      goto LABEL_6;
    }
LABEL_11:
    id v15 = 0;
    goto LABEL_6;
  }
  v26.receiver = a1;
  v26.super_class = (Class)NRDevicePreferencesManager;
  id v9 = [(id *)[super init];
  if (!v9)
  {
    id v22 = sub_100120F50();
    int v23 = _NRLogIsLevelEnabled();

    if (v23)
    {
      id v24 = sub_100120F50();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v25 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v25 = 136446210;
    *(void *)(v25 + 4) = "-[NRDevicePreferencesManager initPrefManagerWithQueue:nrUUID:]";
    sub_100120F50();
    _NRLogAbortWithPack();
  }
  id v10 = v9;
  objc_storeStrong(v9 + 3, a2);
  objc_storeStrong(v10 + 2, a3);
  id v11 = objc_alloc_init((Class)NSMutableDictionary);
  id v12 = v10[4];
  v10[4] = v11;

  id v13 = objc_alloc_init((Class)NSMutableDictionary);
  id v14 = v10[5];
  void v10[5] = v13;

  a1 = v10;
  id v15 = a1;
LABEL_6:

  return v15;
}

id sub_100120F50()
{
  if (qword_1001F4CA0 != -1) {
    dispatch_once(&qword_1001F4CA0, &stru_1001C7F80);
  }
  id v0 = (void *)qword_1001F4C98;

  return v0;
}

void sub_100120FA4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4C98;
  qword_1001F4C98 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100120FE8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2) {
    dispatch_assert_queue_V2(v2);
  }
  *(unsigned char *)(a1 + 8) = 0;
  [*(id *)(a1 + 32) allValues];
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [obj countByEnumeratingWithState:&v62 objects:v71 count:16];
  if (v3)
  {
    id v4 = v3;
    id v5 = 0;
    uint64_t v6 = *(void *)v63;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v63 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v62 + 1) + 8 * i);
        if (v8)
        {
          if ([*(id *)(*((void *)&v62 + 1) + 8 * i) linkType] == 1)
          {
            if (!v5) {
              id v5 = objc_alloc_init((Class)NSMutableArray);
            }
            [v5 addObject:v8, v47, v48, v49];
          }
        }
        else
        {
          id v9 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v11 = (void *)_NRCopyLogObjectForNRUUID();
            id v48 = "-[NRDevicePreferencesManager applyLinkPreferences]";
            uint64_t v49 = 225;
            id v47 = "";
            _NRLogWithArgs();
          }
        }
      }
      id v4 = [obj countByEnumeratingWithState:&v62 objects:v71 count:16];
    }
    while (v4);
  }
  else
  {
    id v5 = 0;
  }

  id v12 = objc_alloc_init((Class)NRBluetoothLinkPreferences);
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id v13 = v5;
  id v14 = [v13 countByEnumeratingWithState:&v58 objects:v70 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v59;
    do
    {
      for (j = 0; j != v15; j = (char *)j + 1)
      {
        if (*(void *)v59 != v16) {
          objc_enumerationMutation(v13);
        }
        if (*(void *)(*((void *)&v58 + 1) + 8 * (void)j))
        {
          [v12 combinePreferences:];
        }
        else
        {
          id v18 = (void *)_NRCopyLogObjectForNRUUID();
          int v19 = _NRLogIsLevelEnabled();

          if (v19)
          {
            int v20 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
        }
      }
      id v15 = [v13 countByEnumeratingWithState:&v58 objects:v70 count:16];
    }
    while (v15);
  }

  *(unsigned char *)(a1 + 8) = [v12 isNotEmpty];
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v21 = (id **)(id)qword_1001F4A18;
  id v22 = v21;
  if (v21)
  {
    int v23 = *(void **)(a1 + 16);
    id v24 = v21[5];
    id v25 = v12;
    id v26 = v23;
    if (!v24)
    {
LABEL_75:

      goto LABEL_76;
    }
    id v55 = v24;
    id v27 = v24[3];
    dispatch_assert_queue_V2(v27);

    id v28 = &unk_1001F4000;
    if (!v26)
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      id v43 = (id)qword_1001F48C8;
      int v44 = _NRLogIsLevelEnabled();

      if (!v44) {
        goto LABEL_75;
      }
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      uint64_t v30 = (id *)(id)qword_1001F48C8;
      _NRLogWithArgs();
      goto LABEL_74;
    }
    id v29 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, v26);
    uint64_t v30 = v29;
    if (!v29)
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      id v45 = (id)qword_1001F48C8;
      int v46 = _NRLogIsLevelEnabled();

      if (!v46) {
        goto LABEL_74;
      }
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      id v31 = (id)qword_1001F48C8;
      goto LABEL_72;
    }
    id v31 = v29[5];
    if (v31)
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F48D0 != -1) {
          dispatch_once(&qword_1001F48D0, &stru_1001C6548);
        }
        id v50 = v26;
        id v51 = v25;
        uint64_t v49 = 759;
        id v47 = "";
        id v48 = "-[NRLinkManagerBluetooth setLinkRequirements:forNRUUID:]";
        _NRLogWithArgs();
      }
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      id v56 = v55[5];
      id v32 = [v56 countByEnumeratingWithState:&v66 objects:v72 count:16];
      if (v32)
      {
        id v33 = v32;
        id v34 = v31;
        id v52 = v26;
        id v53 = v25;
        id v54 = v22;
        uint64_t v35 = *(void *)v67;
LABEL_44:
        uint64_t v36 = 0;
        while (1)
        {
          if (*(void *)v67 != v35) {
            objc_enumerationMutation(v56);
          }
          uint64_t v37 = *(void *)(*((void *)&v66 + 1) + 8 * v36);
          id v38 = v37 ? *(void **)(v37 + 327) : 0;
          id v39 = v38;
          unsigned int v40 = [v39 isEqual:v34];

          if (v40) {
            break;
          }
          if (v33 == (id)++v36)
          {
            id v41 = [v56 countByEnumeratingWithState:&v66 objects:v72 count:16];
            id v33 = v41;
            if (!v41)
            {
              BOOL v42 = 0;
              goto LABEL_56;
            }
            goto LABEL_44;
          }
        }
        BOOL v42 = [(id)v37 state] == 8;
LABEL_56:
        id v25 = v53;
        id v22 = v54;
        id v26 = v52;
        id v31 = v34;
        id v28 = (void *)&unk_1001F4000;
      }
      else
      {
        BOOL v42 = 0;
      }

      if (([v25 isNotEmpty] & 1) == 0)
      {

        id v25 = 0;
        BOOL v42 = 1;
      }
      [v55[13] setObject:v25 forKeyedSubscript:v31, v47, v48, v49, v50, v51];
      if (v42)
      {
        sub_10002F71C(v55, v25, v31);
LABEL_73:

LABEL_74:
        goto LABEL_75;
      }
      if (v28[282] != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_73;
      }
      if (v28[282] == -1)
      {
LABEL_72:
        _NRLogWithArgs();
        goto LABEL_73;
      }
    }
    else
    {
      if (qword_1001F48D0 != -1) {
        dispatch_once(&qword_1001F48D0, &stru_1001C6548);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_73;
      }
      if (qword_1001F48D0 == -1) {
        goto LABEL_72;
      }
    }
    dispatch_once(&qword_1001F48D0, &stru_1001C6548);
    goto LABEL_72;
  }
LABEL_76:
}

void sub_10012179C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2) {
    dispatch_assert_queue_V2(v2);
  }
  id v3 = objc_alloc_init((Class)NSMutableSet);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = [*(id *)(a1 + 40) allValues];
  id v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v19;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = [*(id *)(*((void *)&v18 + 1) + 8 * (void)v8) allObjects];
        [v3 addObjectsFromArray:v9];

        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v6);
  }

  id v10 = (id *)(a1 + 48);
  if (([v3 isEqual:*(void *)(a1 + 48)] & 1) == 0)
  {
    id v11 = objc_alloc((Class)NSString);
    id v12 = *(id *)(a1 + 48);
    id v13 = (void *)_NRCopyPolicyTrafficClassifiersDescription();
    id v14 = (void *)_NRCopyPolicyTrafficClassifiersDescription();

    id v15 = [v11 initWithFormat:@"%@ to %@", v13, v14];
    id v16 = *(id *)(a1 + 16);
    id v17 = [v16 UUIDString];
    sub_10012F648(v16, 13001, v17, v15);

    objc_storeStrong(v10, v3);
  }
}

void sub_100121990(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v8[0] = @"client";
      v8[1] = @"type";
      v9[0] = v3;
      v9[1] = &off_1001D4B58;
      id v5 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];
      sub_100114390(@"NetworkRelay BT Link Assertion", v5);
    }
    else
    {
      id v6 = sub_100120F50();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_5;
      }
      id v5 = sub_100120F50();
      _NRLogWithArgs();
    }
  }
LABEL_5:
}

void sub_100121A98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v8[0] = @"client";
      v8[1] = @"type";
      v9[0] = v3;
      v9[1] = &off_1001D4B70;
      id v5 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];
      sub_100114390(@"NetworkRelay BT Link Assertion", v5);
    }
    else
    {
      id v6 = sub_100120F50();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_5;
      }
      id v5 = sub_100120F50();
      _NRLogWithArgs();
    }
  }
LABEL_5:
}

void sub_100121BA0(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v8 = (void *)_NRCopyLogObjectForNRUUID();
      id v12 = v5;
      id v13 = v14;
      uint64_t v11 = 131;
      id v9 = "";
      id v10 = "-[NRDevicePreferencesManager setLinkPreferences:forIdentifier:]";
      _NRLogWithArgs();
    }
    [*(id *)(a1 + 32) setObject:v14 forKeyedSubscript:v5, v9, v10, v11, v12, v13];
    sub_100120FE8(a1);
  }
}

void sub_100121C80(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (a1 && [*(id *)(a1 + 32) count])
  {
    id v3 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v8 = 143;
      id v9 = v10;
      id v6 = "";
      uint64_t v7 = "-[NRDevicePreferencesManager removeLinkPreferencesForIdentifier:]";
      _NRLogWithArgs();
    }
    [*(id *)(a1 + 32) setObject:0 forKeyedSubscript:v10, v6, v7, v8, v9];
    sub_100120FE8(a1);
  }
}

id sub_100121D58(void *a1)
{
  os_log_t v1 = a1;
  context = xpc_connection_get_context(v1);
  if (!context)
  {
    uint64_t pid = xpc_connection_get_pid(v1);
    id v4 = sub_100116370(pid, 0);
    id v5 = +[NSUUID UUID];
    id v6 = objc_alloc((Class)NSString);
    uint64_t v7 = [v5 UUIDString];
    id v8 = [v6 initWithFormat:@"%@%s%@", v4, "-", v7];

    id v9 = v8;
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = (const char *)[v9 UTF8String];
      if (!v11)
      {
        id v19 = sub_100120F50();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v21 = sub_100120F50();
          _NRLogWithArgs();
        }
        uint64_t v22 = _os_log_pack_size();
        __chkstk_darwin(v22);
        __error();
        uint64_t v23 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v23 = 136446210;
        *(void *)(v23 + 4) = "strict_strdup";
LABEL_16:
        sub_100120F50();
        _NRLogAbortWithPack();
      }
      id v12 = strdup(v11);
      if (v12)
      {
        context = v12;

        xpc_connection_set_context(v1, context);
        xpc_connection_set_finalizer_f(v1, (xpc_finalizer_t)sub_100122118);

        goto LABEL_6;
      }
      id v24 = sub_100120F50();
      int v25 = _NRLogIsLevelEnabled();

      id v17 = "strict_strdup";
      if (v25)
      {
        id v26 = sub_100120F50();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v15 = sub_100120F50();
      int v16 = _NRLogIsLevelEnabled();

      id v17 = "nrStrDupFromNSString";
      if (v16)
      {
        id v18 = sub_100120F50();
        _NRLogWithArgs();
      }
    }
    uint64_t v27 = _os_log_pack_size();
    __chkstk_darwin(v27);
    __error();
    uint64_t v28 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v28 = 136446210;
    *(void *)(v28 + 4) = v17;
    goto LABEL_16;
  }
LABEL_6:
  id v13 = [objc_alloc((Class)NSString) initWithUTF8String:context];

  return v13;
}

void sub_100122118(void *a1)
{
  if (a1) {
    free(a1);
  }
}

id sub_100122450()
{
  if (qword_1001F4CC8 != -1) {
    dispatch_once(&qword_1001F4CC8, &stru_1001C8428);
  }
  id v0 = (void *)qword_1001F4CC0;

  return v0;
}

void sub_1001224A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4CC0;
  qword_1001F4CC0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1001228F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || !*(unsigned char *)(v2 + 21))
  {
    id v3 = sub_1001229F4(v2, *(void **)(a1 + 40));
    if (v3)
    {
      id v7 = v3;
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id v3 = v7;
      if (IsLevelEnabled)
      {
        id v6 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();

        id v3 = v7;
      }
    }
  }
}

id sub_1001229F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = 0;
  if (a1 && v3)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v6 = [[*(id *)(a1 + 248) allValues];
    id v5 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      uint64_t v7 = *(void *)v13;
      while (2)
      {
        for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v6);
          }
          id v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          id v10 = [v9 initiatorDataSession];

          if (v10 == v4)
          {
            id v5 = v9;
            goto LABEL_13;
          }
        }
        id v5 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }
  return v5;
}

void sub_100122BE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || !*(unsigned char *)(v2 + 21))
  {
    id v3 = sub_1001229F4(v2, *(void **)(a1 + 40));
    if (v3)
    {
      id v7 = v3;
      [v3 setLocalInterfaceIndex:0];
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v6 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      sub_100122CFC(*(void *)(a1 + 32), v7);
      id v3 = v7;
    }
  }
}

void sub_100122CFC(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (a1 && ([v6 hasActiveDataSession] & 1) == 0)
  {
    id v3 = objc_alloc((Class)WiFiAwareDataSession);
    id v4 = [v6 initiatorDiscoveryResult];
    id v5 = [v3 initWithDiscoveryResult:v4 serviceType:1 serviceSpecificInfo:0];

    [v5 setDelegate:a1];
    [v5 start];
    [v6 setInitiatorDataSession:v5];
  }
}

void sub_100122E5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && *(unsigned char *)(v2 + 21)) {
    return;
  }
  id v9 = sub_1001229F4(v2, *(void **)(a1 + 40));
  if (v9)
  {
    [v9 setLocalInterfaceIndex:[*(id *)(a1 + 40) localInterfaceIndex]];
    sub_100122F88(*(void *)(a1 + 32), v9);
LABEL_9:
    id v5 = v9;
    goto LABEL_10;
  }
  id v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  id v5 = 0;
  if (IsLevelEnabled)
  {
    id v6 = *(void **)(a1 + 32);
    if (v6) {
      id v6 = (void *)v6[3];
    }
    id v7 = v6;
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();

    goto LABEL_9;
  }
LABEL_10:
}

void sub_100122F88(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_41;
  }
  id v4 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v44 = 2411;
    id v45 = v3;
    BOOL v42 = "";
    id v43 = "-[NRDiscoveryClient handleDataSessionStarted:]";
    _NRLogWithArgs();
  }
  if (objc_msgSend(v3, "isInitiator", v42, v43, v44, v45))
  {
    id v7 = *(void **)(a1 + 240);
    id v8 = sub_100123458((id *)a1);
    id v9 = [v3 initiatorDiscoveryResult];
    id v10 = [v9 publisherAddress];
    uint64_t v11 = [v3 initiatorDiscoveryResult];
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472;
    v53[2] = sub_1001235C8;
    v53[3] = &unk_1001C8408;
    void v53[4] = a1;
    [v7 sendMessage:v8 toPeerAddress:v10 withInstanceID:[v11 publishID] completionHandler:v53];
  }
  long long v12 = [v3 serviceName];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v13 = *(id *)(a1 + 96);
  id v14 = [v13 countByEnumeratingWithState:&v49 objects:v54 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v50;
    while (2)
    {
      id v17 = 0;
      do
      {
        if (*(void *)v50 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(void **)(*((void *)&v49 + 1) + 8 * (void)v17);
        if (v18) {
          id v19 = (void *)v18[2];
        }
        else {
          id v19 = 0;
        }
        if ([v19 isEqualToString:v12])
        {
          id v21 = v18;

          if (v18) {
            goto LABEL_35;
          }
          goto LABEL_20;
        }
        id v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      id v20 = [v13 countByEnumeratingWithState:&v49 objects:v54 count:16];
      id v15 = v20;
      if (v20) {
        continue;
      }
      break;
    }
  }

LABEL_20:
  uint64_t v22 = objc_alloc_init(NRDeviceEndpoint);
  id v21 = v22;
  if (v22)
  {
    v22->_xpc_type_t type = *(unsigned char *)(a1 + 18);
    objc_storeStrong((id *)&v22->_serviceName, v12);
  }
  uint64_t v23 = [v3 remoteIDSDeviceID];

  if (v23)
  {
    id v24 = [v3 remoteIDSDeviceID];
    if (v21) {
      objc_storeStrong((id *)&v21->_remoteIDSDeviceID, v24);
    }

    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    int v25 = (id)qword_1001F4A18;
    id v26 = (NSUUID *)sub_1000B92A4(v25, 0);
    uint64_t v27 = v26;
    if (v21)
    {
      uint64_t v27 = v26;
      localIDSDeviceID = (NSUUID *)v21->_localIDSDeviceID;
      v21->_localIDSDeviceID = (NSString *)&v27->super.isa;
LABEL_33:
    }
  }
  else
  {
    id v29 = objc_alloc((Class)NSUUID);
    uint64_t v30 = [v3 serviceName];
    id v31 = [v29 initWithUUIDString:v30];
    if (v21) {
      objc_storeStrong((id *)&v21->_peerToken, v31);
    }

    id v32 = objc_alloc((Class)NSUUID);
    int v25 = *(id *)(a1 + 112);
    id v33 = (NSUUID *)[v32 initWithUUIDString:v25];
    uint64_t v27 = v33;
    if (v21)
    {
      uint64_t v27 = v33;
      localIDSDeviceID = v21->_localToken;
      v21->_localToken = v27;
      goto LABEL_33;
    }
  }

  [*(id *)(a1 + 96) addObject:v21];
LABEL_35:
  id v34 = [v3 peerEndpoint];
  nw_endpoint_t v35 = (nw_endpoint_t)[v34 copyCEndpoint];

  uint64_t v36 = [v3 peerEndpoint];
  uint64_t v37 = (sockaddr *)[v36 address];

  if (v37->sa_family == 30
    && !*(_DWORD *)&v37[1].sa_data[6]
    && v37->sa_data[6] == 254
    && (v37->sa_data[7] & 0xC0) == 0x80)
  {
    sockaddr v38 = *v37;
    uint64_t v47 = *(void *)&v37[1].sa_len;
    sockaddr address = v38;
    unsigned int v48 = [v3 localInterfaceIndex];
    nw_endpoint_t v39 = nw_endpoint_create_address(&address);

    nw_endpoint_t v35 = v39;
  }
  [v3 localInterfaceIndex];
  unsigned int v40 = nw_interface_create_with_index();
  nw_endpoint_set_interface();
  id v41 = +[NSString stringWithUTF8String:nw_interface_get_name(v40)];
  sub_10012369C(a1, v35, v12, v41);

LABEL_41:
}

void *sub_100123458(id *a1)
{
  uint64_t v2 = objc_alloc_init(NRNANServiceInfo);
  id v3 = (id *)v2;
  if (v2)
  {
    objc_storeStrong((id *)&v2->_serviceName, a1[14]);
    objc_storeStrong(v3 + 2, a1[15]);
    objc_storeStrong(v3 + 1, a1[17]);
    objc_storeStrong(v3 + 3, a1[16]);
  }
  id v4 = [v3 data];
  id v5 = (void *)_NRCopyLogObjectForNRUUID();
  if (v4)
  {
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    id v8 = v4;
  }
  else
  {
    int v10 = _NRLogIsLevelEnabled();

    if (v10)
    {
      uint64_t v11 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }

  return v4;
}

void sub_1001235C8()
{
  id v0 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v2 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_10012369C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!a1) {
    goto LABEL_30;
  }
  if (nw_endpoint_get_type(v7) != nw_endpoint_type_address)
  {
    id v19 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v21 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    goto LABEL_30;
  }
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  id v10 = *(id *)(a1 + 96);
  id v11 = [v10 countByEnumeratingWithState:&v43 objects:v47 count:16];
  if (!v11) {
    goto LABEL_15;
  }
  id v12 = v11;
  uint64_t v13 = *(void *)v44;
LABEL_5:
  uint64_t v14 = 0;
  while (1)
  {
    if (*(void *)v44 != v13) {
      objc_enumerationMutation(v10);
    }
    id v15 = *(void **)(*((void *)&v43 + 1) + 8 * v14);
    uint64_t v16 = v15 ? (void *)v15[2] : 0;
    if ([v16 isEqualToString:v8]) {
      break;
    }
    if (v12 == (id)++v14)
    {
      id v17 = [v10 countByEnumeratingWithState:&v43 objects:v47 count:16];
      id v12 = v17;
      if (!v17)
      {
LABEL_15:
        id v18 = v10;
        goto LABEL_29;
      }
      goto LABEL_5;
    }
  }
  id v18 = v15;

  if (!v15) {
    goto LABEL_30;
  }
  if (!v9)
  {
    uint64_t v29 = a1;
    uint64_t v30 = v18;
    id v31 = v7;
    id v32 = 0;
LABEL_28:
    sub_1001239EC(v29, v30, v31, v32);
    char v33 = v18[9];
    id v34 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100123CE4;
    block[3] = &unk_1001C81C0;
    char v42 = v33;
    void block[4] = a1;
    id v41 = v18;
    nw_endpoint_t v35 = v18;
    dispatch_async(v34, block);
    v18[9] = 1;

    id v18 = v35;
    goto LABEL_29;
  }
  id v22 = sub_1001173F4(v9, 0, 0, 0);
  uint64_t v23 = nw_endpoint_copy_address_string(v7);
  if (!v23)
  {
LABEL_27:

    uint64_t v29 = a1;
    uint64_t v30 = v18;
    id v31 = v7;
    id v32 = v9;
    goto LABEL_28;
  }
  id v24 = v23;
  int v25 = +[NSString stringWithUTF8String:v23];
  free(v24);
  if (![v22 containsObject:v25])
  {

    goto LABEL_27;
  }
  id v26 = (void *)_NRCopyLogObjectForNRUUID();
  int v27 = _NRLogIsLevelEnabled();

  if (v27)
  {
    uint64_t v28 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v38 = 1412;
    nw_endpoint_t v39 = v7;
    uint64_t v36 = "";
    uint64_t v37 = "-[NRDiscoveryClient discoveredPeerDeviceEndpoint:serviceName:interfaceName:]";
    _NRLogWithArgs();
  }
  [*(id *)(a1 + 96) removeObject:v18, v36, v37, v38, v39];

LABEL_29:
LABEL_30:
}

void sub_1001239EC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  id v9 = nw_endpoint_copy_interface();
  uint64_t v10 = sub_100123D24(v9);
  if (v10)
  {
    uint64_t v11 = v10;
LABEL_3:
    id v12 = v6 + 15;
    if (!v6[15])
    {
      id v13 = objc_alloc_init((Class)NSMutableDictionary);
      objc_storeStrong(v6 + 15, v13);
    }
    id v29 = v8;
    if (!v6[16])
    {
      id v14 = objc_alloc_init((Class)NSMutableDictionary);
      objc_storeStrong(v6 + 16, v14);
    }
    id v15 = +[NWAddressEndpoint endpointWithCEndpoint:v7];
    id v16 = *v12;
    id v17 = +[NSNumber numberWithUnsignedChar:v11];
    id v18 = [v16 objectForKeyedSubscript:v17];

    if (v18)
    {
      id v19 = [objc_alloc((Class)NSMutableArray) initWithArray:v18];
      [v19 addObject:v15];
    }
    else
    {
      uint64_t v30 = v15;
      id v19 = +[NSArray arrayWithObjects:&v30 count:1];
    }
    id v24 = *v12;
    int v25 = +[NSNumber numberWithUnsignedChar:v11];
    [v24 setObject:v19 forKeyedSubscript:v25];

    id v26 = +[NSString stringWithUTF8String:nw_interface_get_name(v9)];
    id v27 = v6[16];
    uint64_t v28 = +[NSNumber numberWithUnsignedChar:v11];
    [v27 setObject:v26 forKeyedSubscript:v28];

    id v8 = v29;
    goto LABEL_15;
  }
  if (v8)
  {
    [v8 UTF8String];
    id v20 = nw_interface_create_with_name();

    uint64_t v11 = sub_100123D24(v20);
    id v9 = v20;
    if (v11) {
      goto LABEL_3;
    }
  }
  id v21 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    uint64_t v23 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
LABEL_15:
}

uint64_t sub_100123CE4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(result + 48))
  {
    if (!v1) {
      return result;
    }
    uint64_t v2 = *(void *)(v1 + 88);
    if (!v2) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(result + 40));
  }
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 72);
    if (v2) {
      return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(result + 40));
    }
  }
  return result;
}

uint64_t sub_100123D24(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    nw_interface_type_t type = nw_interface_get_type(v1);
    subnw_interface_type_t type = nw_interface_get_subtype();
    if (type == nw_interface_type_wired)
    {
      uint64_t v5 = 4;
    }
    else
    {
      int v6 = subtype;
      name = nw_interface_get_name(v2);
      if (!strcmp("nan0", name))
      {
        uint64_t v5 = 6;
      }
      else
      {
        id v8 = nw_interface_get_name(v2);
        int v9 = strcmp("ir0", v8);
        if (type == nw_interface_type_wifi || v6 == 1001) {
          int v11 = 2;
        }
        else {
          int v11 = 0;
        }
        if (v6 == 1002) {
          unsigned int v12 = 5;
        }
        else {
          unsigned int v12 = v11;
        }
        if (v9) {
          uint64_t v5 = v12;
        }
        else {
          uint64_t v5 = 7;
        }
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_100123EA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || !*(unsigned char *)(v2 + 21))
  {
    id v3 = sub_1001229F4(v2, *(void **)(a1 + 40));
    if (v3)
    {
      id v7 = v3;
      [v3 setLocalInterfaceIndex:0];
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id v3 = v7;
      if (IsLevelEnabled)
      {
        int v6 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();

        id v3 = v7;
      }
    }
  }
}

void sub_100124088(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (!*(unsigned char *)(v2 + 21) && *(void *)(a1 + 40) == *(void *)(v2 + 240))
    {
LABEL_4:
      id v3 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        uint64_t v5 = *(void **)(a1 + 32);
        if (v5) {
          uint64_t v5 = (void *)v5[3];
        }
        int v6 = v5;
        id v7 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v74 = 2271;
        uint64_t v77 = *(void *)(a1 + 48);
        long long v68 = "";
        id v71 = "-[NRDiscoveryClient subscriber:receivedDiscoveryResult:]_block_invoke";
        _NRLogWithArgs();
      }
      id v8 = [*(id *)(a1 + 48) serviceSpecificInfo:v68, v71, v74, v77];
      id v80 = [v8 blob];

      int v9 = v80;
      if (!v80) {
        goto LABEL_64;
      }
      uint64_t v10 = *(NRDNANPeer **)(a1 + 32);
      id v11 = v80;
      unsigned int v12 = v11;
      if (!v10)
      {

LABEL_63:
        int v9 = v80;
LABEL_64:

        return;
      }
      id v13 = [[NRNANServiceInfo alloc] initWithData:v11];
      id v14 = (void *)_NRCopyLogObjectForNRUUID();
      if (!v13)
      {
        int v66 = _NRLogIsLevelEnabled();

        if (v66)
        {
          long long v67 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v75 = 1897;
          long long v69 = "";
          int v72 = "-[NRDiscoveryClient processDiscoveredNANPeer:]";
          _NRLogWithArgs();
        }
        goto LABEL_25;
      }
      int v15 = _NRLogIsLevelEnabled();

      if (v15)
      {
        id v16 = v10->_serviceName;
        id v17 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v75 = 1900;
        unsigned __int8 v78 = v13;
        long long v69 = "";
        int v72 = "-[NRDiscoveryClient processDiscoveredNANPeer:]";
        _NRLogWithArgs();
      }
      serviceName = v13->_serviceName;
      if (serviceName
        && (id v19 = serviceName, v20 = [(NSString *)v19 length], v19, v20))
      {
        authTag = v13->_authTag;
        if (authTag)
        {
          id v22 = authTag;
          NSUInteger v23 = [(NSData *)v22 length];

          if (v23)
          {
            uint64_t v100 = 0;
            id v101 = &v100;
            uint64_t v102 = 0x2020000000;
            char v103 = 0;
            v97[0] = _NSConcreteStackBlock;
            v97[1] = 3221225472;
            v97[2] = sub_100124AFC;
            v97[3] = &unk_1001C8318;
            v97[4] = v10;
            id v24 = v13;
            id v98 = v24;
            long long v99 = &v100;
            int v25 = objc_retainBlock(v97);
            uint64_t v91 = 0;
            id v92 = &v91;
            uint64_t v93 = 0x3032000000;
            id v94 = sub_100124FF4;
            uint64_t v95 = sub_100125004;
            id v96 = 0;
            unint64_t initiatorDiscoveryResult = (unint64_t)v10[3]._initiatorDiscoveryResult;
            if (initiatorDiscoveryResult <= 8 && ((1 << initiatorDiscoveryResult) & 0x106) != 0)
            {
              id v27 = *(id *)&v10[2]._isInitiator;
              id v28 = v24[1];
              id v29 = v10[2]._responderDataSession;
              uint64_t v30 = [(WiFiAwarePublisherDataSessionHandle *)v29 dataUsingEncoding:4];
              id v31 = sub_100118074(v27, v28, v30);

              ((void (*)(void *, id, void))v25[2])(v25, v31, 0);
            }
            else
            {
              objc_initWeak(&location, v10);
              v85[0] = _NSConcreteStackBlock;
              v85[1] = 3221225472;
              v85[2] = sub_10012500C;
              v85[3] = &unk_1001C8340;
              objc_copyWeak(&v89, &location);
              unsigned int v86 = v25;
              id v87 = &v100;
              id v88 = &v91;
              sub_10012531C((uint64_t)v10, 28671, v85);

              objc_destroyWeak(&v89);
              objc_destroyWeak(&location);
            }
            if (*((unsigned char *)v101 + 24))
            {
              uint64_t v10 = objc_alloc_init(NRDNANPeer);
              [(NRDNANPeer *)v10 setRemoteIDSDeviceID:v92[5]];
              id v38 = v24[4];
              [(NRDNANPeer *)v10 setServiceName:v38];
            }
            else
            {
              uint64_t v10 = 0;
            }
            _Block_object_dispose(&v91, 8);

            _Block_object_dispose(&v100, 8);
LABEL_31:

            if (v10)
            {
              uint64_t v39 = *(void *)(a1 + 32);
              if (!v39 || !*(void *)(v39 + 248))
              {
                id v40 = objc_alloc_init((Class)NSMutableDictionary);
                uint64_t v41 = *(void *)(a1 + 32);
                if (v41) {
                  objc_storeStrong((id *)(v41 + 248), v40);
                }

                uint64_t v39 = *(void *)(a1 + 32);
              }
              char v42 = [*(id *)(a1 + 48) publisherAddress:v69, v72, v75, v78];
              long long v43 = (void *)sub_1001249D8(v39, v42);

              long long v83 = 0u;
              long long v84 = 0u;
              long long v81 = 0u;
              long long v82 = 0u;
              uint64_t v44 = *(void *)(a1 + 32);
              if (v44) {
                long long v45 = *(void **)(v44 + 248);
              }
              else {
                long long v45 = 0;
              }
              long long v46 = [v45 allValues];
              id v47 = [(NRDNANPeer *)v46 countByEnumeratingWithState:&v81 objects:v104 count:16];
              if (v47)
              {
                uint64_t v48 = *(void *)v82;
                while (2)
                {
                  for (unint64_t i = 0; i != v47; unint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v82 != v48) {
                      objc_enumerationMutation(v46);
                    }
                    long long v50 = *(void **)(*((void *)&v81 + 1) + 8 * i);
                    long long v51 = [v50 peerEndpoint];
                    if ([v51 isEqual:v43]
                      && (unsigned int v52 = [v50 peerInstanceID],
                          v52 == [*(id *)(a1 + 48) publishID]))
                    {
                      unsigned int v53 = [v50 hasActiveDataSession];

                      if (v53)
                      {
                        long long v63 = (void *)_NRCopyLogObjectForNRUUID();
                        int v64 = _NRLogIsLevelEnabled();

                        if (v64)
                        {
                          long long v65 = (void *)_NRCopyLogObjectForNRUUID();
                          _NRLogWithArgs();
                        }
                        goto LABEL_62;
                      }
                    }
                    else
                    {
                    }
                  }
                  id v47 = [(NRDNANPeer *)v46 countByEnumeratingWithState:&v81 objects:v104 count:16];
                  if (v47) {
                    continue;
                  }
                  break;
                }
              }

              uint64_t v54 = *(void *)(a1 + 32);
              if (v54) {
                id v55 = *(void **)(v54 + 248);
              }
              else {
                id v55 = 0;
              }
              long long v46 = [v55 objectForKeyedSubscript:v43];
              if (!v46) {
                long long v46 = objc_alloc_init(NRDNANPeer);
              }
              id v56 = [(NRDNANPeer *)v10 serviceName];
              [(NRDNANPeer *)v46 setServiceName:v56];

              id v57 = [(NRDNANPeer *)v10 remoteIDSDeviceID];
              [(NRDNANPeer *)v46 setRemoteIDSDeviceID:v57];

              [(NRDNANPeer *)v46 setPeerEndpoint:v43];
              -[NRDNANPeer setPeerInstanceID:](v46, "setPeerInstanceID:", [*(id *)(a1 + 48) publishID]);
              [(NRDNANPeer *)v46 setIsInitiator:1];
              [(NRDNANPeer *)v46 setInitiatorDiscoveryResult:*(void *)(a1 + 48)];
              long long v58 = (void *)_NRCopyLogObjectForNRUUID();
              int v59 = _NRLogIsLevelEnabled();

              if (v59)
              {
                long long v60 = (void *)_NRCopyLogObjectForNRUUID();
                uint64_t v76 = 2302;
                id v79 = v46;
                int v70 = "";
                id v73 = "-[NRDiscoveryClient subscriber:receivedDiscoveryResult:]_block_invoke";
                _NRLogWithArgs();
              }
              uint64_t v61 = *(void *)(a1 + 32);
              if (v61) {
                long long v62 = *(void **)(v61 + 248);
              }
              else {
                long long v62 = 0;
              }
              [v62 setObject:v46 forKeyedSubscript:v43];
              sub_100122CFC(*(void *)(a1 + 32), v46);
LABEL_62:
            }
            goto LABEL_63;
          }
        }
        uint64_t v36 = (void *)_NRCopyLogObjectForNRUUID();
        int v37 = _NRLogIsLevelEnabled();

        if (v37)
        {
          id v34 = v10->_serviceName;
          nw_endpoint_t v35 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v75 = 1907;
          unsigned __int8 v78 = v13;
          long long v69 = "";
          int v72 = "-[NRDiscoveryClient processDiscoveredNANPeer:]";
          goto LABEL_24;
        }
      }
      else
      {
        id v32 = (void *)_NRCopyLogObjectForNRUUID();
        int v33 = _NRLogIsLevelEnabled();

        if (v33)
        {
          id v34 = v10->_serviceName;
          nw_endpoint_t v35 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v75 = 1904;
          unsigned __int8 v78 = v13;
          long long v69 = "";
          int v72 = "-[NRDiscoveryClient processDiscoveredNANPeer:]";
LABEL_24:
          _NRLogWithArgs();
        }
      }
LABEL_25:
      uint64_t v10 = 0;
      goto LABEL_31;
    }
  }
  else if (!*(void *)(a1 + 40))
  {
    goto LABEL_4;
  }
}

void sub_100124994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  objc_destroyWeak(v45);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001249D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      uint64_t v5 = [v3 ipv6LinkLocalAddress];
      id v6 = [v5 length];

      if (v6 == (id)16)
      {
        v12[1] = 0;
        int v13 = 0;
        v12[2] = 0;
        v12[0] = 7708;
        id v7 = [v4 ipv6LinkLocalAddress];
        [v7 bytes];
        [v7 length];
        __memcpy_chk();
        a1 = +[NWAddressEndpoint endpointWithAddress:v12];

        goto LABEL_8;
      }
    }
    else
    {
      id v8 = sub_100122450();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v10 = sub_100122450();
        _NRLogWithArgs();
      }
    }
    a1 = 0;
  }
LABEL_8:

  return a1;
}

void sub_100124AFC(void *a1, void *a2, void *a3)
{
  id v64 = a2;
  id v5 = a3;
  id v6 = (unsigned char *)a1[4];
  if (!v6)
  {
LABEL_16:
    id v18 = (void *)a1[5];
    if (!v18) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  int v7 = v6[18];
  if (*((void *)v6 + 32) != 4)
  {
    if (!v6[18] || v7 == 255) {
      goto LABEL_16;
    }
    uint64_t v47 = a1[5];
    if (!v47) {
      goto LABEL_32;
    }
    uint64_t v48 = *(void **)(v47 + 24);
    if (!v48) {
      goto LABEL_32;
    }
    id v49 = v48;
    id v50 = [v49 length];

    if (!v50) {
      goto LABEL_32;
    }
    uint64_t v51 = a1[4];
    if (v51)
    {
      int v52 = *(unsigned __int8 *)(v51 + 18);
      unsigned int v53 = (void *)a1[5];
      if (!v53) {
        goto LABEL_54;
      }
    }
    else
    {
      int v52 = 0;
      unsigned int v53 = (void *)a1[5];
      if (!v53)
      {
LABEL_54:
        uint64_t v54 = v53;
        id v55 = (void *)a1[5];
        if (v55) {
          id v55 = (void *)v55[1];
        }
        id v56 = v55;
        id v57 = v64;
        if (v51)
        {
          id v58 = sub_100125420(v51, v52, v54, v56);
          int v59 = v58;
          if (*(void *)(v51 + 256) == 4) {
            id v60 = sub_1001257BC(v51, v58);
          }
          else {
            id v60 = sub_1001169F0(v58, v57);
          }
          uint64_t v51 = (uint64_t)v60;
        }
        uint64_t v61 = (void *)a1[5];
        if (v61) {
          uint64_t v61 = (void *)v61[3];
        }
        long long v62 = v61;
        BOOL v63 = sub_1001182F0((void *)v51, v62);

        if (!v63) {
          goto LABEL_32;
        }
        id v6 = (unsigned char *)a1[4];
        id v18 = (void *)a1[5];
        if (!v18)
        {
LABEL_18:
          id v19 = v18;
          NSUInteger v20 = (void *)a1[5];
          if (v20) {
            NSUInteger v20 = (void *)v20[1];
          }
          id v21 = v20;
          id v22 = v64;
          if (v6)
          {
            NSUInteger v23 = sub_1001256DC((uint64_t)v6, v19, v21);
            id v24 = v23;
            if (*((void *)v6 + 32) == 4) {
              int v25 = sub_1001257BC((uint64_t)v6, v23);
            }
            else {
              int v25 = sub_1001169F0(v23, v22);
            }
            id v6 = v25;
          }
          id v26 = (void *)a1[5];
          if (v26) {
            id v26 = (void *)v26[2];
          }
          id v27 = v26;
          BOOL v28 = sub_1001182F0(v6, v27);

          if (!v28) {
            goto LABEL_31;
          }
          id v29 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (!IsLevelEnabled) {
            goto LABEL_30;
          }
          goto LABEL_29;
        }
LABEL_17:
        id v18 = (void *)v18[4];
        goto LABEL_18;
      }
    }
    unsigned int v53 = (void *)v53[4];
    goto LABEL_54;
  }
  if (!v6[18] || v7 == 255)
  {
    id v8 = (void *)a1[5];
    if (!v8) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v32 = a1[5];
  if (v32)
  {
    int v33 = *(void **)(v32 + 24);
    if (v33)
    {
      id v34 = v33;
      id v35 = [v34 length];

      if (v35)
      {
        uint64_t v36 = a1[4];
        if (v36)
        {
          int v37 = *(unsigned __int8 *)(v36 + 18);
          id v38 = (void *)a1[5];
          if (!v38) {
            goto LABEL_41;
          }
        }
        else
        {
          int v37 = 0;
          id v38 = (void *)a1[5];
          if (!v38)
          {
LABEL_41:
            uint64_t v39 = v38;
            id v40 = (void *)a1[5];
            if (v40) {
              id v40 = (void *)v40[1];
            }
            uint64_t v41 = v40;
            id v42 = sub_100125420(v36, v37, v39, v41);

            uint64_t v44 = a1[4];
            long long v43 = (void *)a1[5];
            if (v43) {
              long long v43 = (void *)v43[3];
            }
            long long v45 = v43;
            unsigned int v46 = sub_1001254E8(v44, v45, v42, v5);

            if (v46)
            {
              id v6 = (unsigned char *)a1[4];
              id v8 = (void *)a1[5];
              if (!v8)
              {
LABEL_7:
                int v9 = v8;
                id v10 = (void *)a1[5];
                if (v10) {
                  id v10 = (void *)v10[1];
                }
                id v11 = v10;
                id v6 = sub_1001256DC((uint64_t)v6, v9, v11);

                uint64_t v13 = a1[4];
                unsigned int v12 = (void *)a1[5];
                if (v12) {
                  unsigned int v12 = (void *)v12[2];
                }
                id v14 = v12;
                unsigned int v15 = sub_1001254E8(v13, v14, v6, v5);

                if (!v15) {
                  goto LABEL_31;
                }
                id v16 = (void *)_NRCopyLogObjectForNRUUID();
                int v17 = _NRLogIsLevelEnabled();

                if (!v17)
                {
LABEL_30:
                  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
LABEL_31:

                  goto LABEL_32;
                }
LABEL_29:
                id v31 = (void *)_NRCopyLogObjectForNRUUID();
                _NRLogWithArgs();

                goto LABEL_30;
              }
LABEL_6:
              id v8 = (void *)v8[4];
              goto LABEL_7;
            }
            goto LABEL_32;
          }
        }
        id v38 = (void *)v38[4];
        goto LABEL_41;
      }
    }
  }
LABEL_32:
}

uint64_t sub_100124FF4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100125004(uint64_t a1)
{
}

void sub_10012500C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (WeakRetained && !*((unsigned char *)WeakRetained + 21))
  {
    if (v6 || ![v5 count])
    {
      int v9 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v11 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      unsigned int v12 = (void *)_NRCopyLogObjectForNRUUID();
      int v13 = _NRLogIsLevelEnabled();

      if (v13)
      {
        id v14 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v31 = 1982;
        id v32 = [v5 count];
        id v29 = "";
        uint64_t v30 = "-[NRDiscoveryClient processDiscoveredNANPeer:]_block_invoke_2";
        _NRLogWithArgs();
      }
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      id v15 = v5;
      id v16 = [v15 countByEnumeratingWithState:&v37 objects:v42 count:16];
      if (v16)
      {
        uint64_t v17 = *(void *)v38;
        while (2)
        {
          for (unint64_t i = 0; i != v16; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v38 != v17) {
              objc_enumerationMutation(v15);
            }
            id v19 = *(void **)(*((void *)&v37 + 1) + 8 * i);
            if (objc_msgSend(v19, "type", v29, v30, v31, v32) == 1)
            {
              id v16 = v19;
              goto LABEL_20;
            }
          }
          id v16 = [v15 countByEnumeratingWithState:&v37 objects:v42 count:16];
          if (v16) {
            continue;
          }
          break;
        }
      }
LABEL_20:

      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      id v20 = v15;
      id v21 = [v20 countByEnumeratingWithState:&v33 objects:v41 count:16];
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v34;
LABEL_23:
        uint64_t v24 = 0;
        while (1)
        {
          if (*(void *)v34 != v23) {
            objc_enumerationMutation(v20);
          }
          int v25 = *(void **)(*((void *)&v33 + 1) + 8 * v24);
          if (objc_msgSend(v25, "type", v29, v30, v31, v32, (void)v33) != 1)
          {
            (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
            if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
              break;
            }
          }
          if (v22 == (id)++v24)
          {
            id v22 = [v20 countByEnumeratingWithState:&v33 objects:v41 count:16];
            if (!v22) {
              goto LABEL_30;
            }
            goto LABEL_23;
          }
        }
        uint64_t v26 = [v25 idsDeviceID];
        uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 8);
        BOOL v28 = *(void **)(v27 + 40);
        *(void *)(v27 + 40) = v26;
      }
LABEL_30:
    }
  }
}

void sub_10012531C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 184);
  if (!v6)
  {
    id v7 = objc_alloc_init((Class)RPClient);
    id v8 = *(void **)(a1 + 184);
    *(void *)(a1 + 184) = v7;

    int v9 = *(void **)(a1 + 184);
    id v10 = *(id *)(a1 + 40);
    [v9 setDispatchQueue:v10];

    id v6 = *(void **)(a1 + 184);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100125410;
  void v12[3] = &unk_1001C8018;
  id v11 = v5;
  id v13 = v11;
  [v6 getIdentitiesWithFlags:a2 completion:v12];
}

uint64_t sub_100125410(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100125420(uint64_t a1, int a2, void *a3, void *a4)
{
  char v12 = a2;
  id v7 = a4;
  id v8 = 0;
  if (a1)
  {
    if (a2)
    {
      id v9 = a3;
      id v8 = [objc_alloc((Class)NSMutableData) initWithBytes:&v12 length:1];
      id v10 = [v9 dataUsingEncoding:4];

      [v8 appendData:v10];
      if ([v7 length]) {
        [v8 appendData:v7];
      }
    }
  }

  return v8;
}

id sub_1001254E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!a1) {
    goto LABEL_18;
  }
  if (!v7)
  {
    id v19 = sub_100122450();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (!v8)
  {
    id v21 = sub_100122450();
    int v22 = _NRLogIsLevelEnabled();

    if (v22) {
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (!v9)
  {
    id v23 = sub_100122450();
    int v24 = _NRLogIsLevelEnabled();

    if (v24)
    {
LABEL_17:
      id v25 = sub_100122450();
      _NRLogWithArgs();
    }
LABEL_18:
    id v11 = 0;
    goto LABEL_11;
  }
  id v26 = 0;
  id v11 = [v9 verifySignature:v7 data:v8 error:&v26];
  id v12 = v26;
  id v13 = v12;
  if (v12 && [v12 code] != (id)-6754)
  {
    id v14 = (void *)_NRCopyLogObjectForNRUUID();
    int v15 = _NRLogIsLevelEnabled();

    if (v15)
    {
      id v16 = *(id *)(a1 + 24);
      uint64_t v17 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    id v11 = 0;
  }

LABEL_11:
  return v11;
}

void *sub_1001256DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = [a2 dataUsingEncoding:4];
    if (*(void *)(a1 + 200))
    {
      id v7 = [objc_alloc((Class)NSMutableData) initWithData:v6];
      id v8 = [*(id *)(a1 + 200) dataUsingEncoding:4];
      [v7 appendData:v8];

      id v6 = v7;
    }
    if ([v5 length])
    {
      id v9 = [objc_alloc((Class)NSMutableData) initWithData:v6];
      [v9 appendData:v5];

      id v6 = v9;
    }
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id sub_1001257BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v14 = sub_100122450();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  id v4 = *(void **)(a1 + 192);
  if (!v4)
  {
    id v16 = sub_100122450();
    int v17 = _NRLogIsLevelEnabled();

    if (v17)
    {
LABEL_14:
      id v18 = sub_100122450();
      _NRLogWithArgs();
    }
LABEL_15:
    id v13 = 0;
    goto LABEL_16;
  }
  if ([v4 type] != 1 || !objc_msgSend(v3, "length")) {
    goto LABEL_15;
  }
  id v5 = *(void **)(a1 + 192);
  id v20 = 0;
  id v6 = v5;
  id v7 = [v6 signData:v3 error:&v20];
  id v8 = v20;

  if (v8)
  {
    id v9 = (void *)_NRCopyLogObjectForNRUUID();
    int v10 = _NRLogIsLevelEnabled();

    if (v10)
    {
      id v11 = *(id *)(a1 + 24);
      id v12 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    id v13 = 0;
  }
  else
  {
    id v13 = v7;
  }

LABEL_16:
  return v13;
}

void sub_100125A28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 21)) {
      return;
    }
    uint64_t v3 = *(void *)(v2 + 240);
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (*(void *)(a1 + 40) == v3)
  {
    uint64_t v4 = sub_1001249D8(v2, *(void **)(a1 + 48));
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      id v6 = *(void **)(v5 + 248);
    }
    else {
      id v6 = 0;
    }
    id v14 = (id)v4;
    id v7 = [v6 objectForKeyedSubscript:];
    id v8 = [v7 initiatorDiscoveryResult];
    if ([v8 publishID] == *(unsigned __int8 *)(a1 + 56))
    {
      id v9 = [v7 responderDataSession];

      if (v9) {
        goto LABEL_16;
      }
      uint64_t v10 = *(void *)(a1 + 32);
      id v11 = v10 ? *(void **)(v10 + 248) : 0;
      [v11 setObject:0 forKeyedSubscript:v14];
      if (!v7) {
        goto LABEL_16;
      }
      sub_100125BC0(*(void *)(a1 + 32), v7);
      id v12 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_16;
      }
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }

LABEL_16:
  }
}

void sub_100125BC0(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (a1)
  {
    if ([v8 hasActiveDataSession])
    {
      uint64_t v3 = [v8 initiatorDataSession];

      if (v3)
      {
        uint64_t v4 = [v8 initiatorDataSession];
        [v4 stop];

        [v8 setInitiatorDataSession:0];
      }
      uint64_t v5 = [v8 responderDataSession];

      if (v5)
      {
        id v6 = *(void **)(a1 + 232);
        id v7 = [v8 responderDataSession];
        [v6 terminateDataSession:v7 completionHandler:&stru_1001C82F0];

        [v8 setResponderDataSession:0];
      }
    }
    [v8 setLocalInterfaceIndex:0];
  }
}

void sub_100125D64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 21) || *(void *)(a1 + 40) != *(void *)(v1 + 240)) {
      return;
    }
  }
  else if (*(void *)(a1 + 40))
  {
    return;
  }
  uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v4 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_100125F0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 21) || *(void *)(a1 + 40) != *(void *)(v1 + 240)) {
      return;
    }
  }
  else if (*(void *)(a1 + 40))
  {
    return;
  }
  uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v4 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_1001260A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 21) || *(void *)(a1 + 40) != *(void *)(v1 + 240)) {
      return;
    }
  }
  else if (*(void *)(a1 + 40))
  {
    return;
  }
  uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v4 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_100126268(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    if (v2 != *(void *)(v3 + 232)) {
      return;
    }
  }
  else if (v2)
  {
    return;
  }
  id v4 = [*(id *)(a1 + 48) initiatorDataAddress];
  id v14 = (id)sub_1001249D8(v3, v4);

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    id v6 = *(void **)(v5 + 248);
  }
  else {
    id v6 = 0;
  }
  id v7 = [v6 objectForKeyedSubscript:v14];
  if ([(NRDNANPeer *)v7 hasActiveDataSession])
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v10 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
  else
  {
    if (!v7) {
      id v7 = objc_alloc_init(NRDNANPeer);
    }
    [(NRDNANPeer *)v7 setLocalInterfaceIndex:*(unsigned int *)(a1 + 56)];
    [(NRDNANPeer *)v7 setResponderDataSession:*(void *)(a1 + 48)];
    id v11 = [v14 hostname];
    [(NRDNANPeer *)v7 setServiceName:v11];

    [(NRDNANPeer *)v7 setPeerEndpoint:v14];
    -[NRDNANPeer setPeerInstanceID:](v7, "setPeerInstanceID:", [*(id *)(a1 + 48) datapathID]);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      id v13 = *(void **)(v12 + 248);
    }
    else {
      id v13 = 0;
    }
    [v13 setObject:v7 forKeyedSubscript:v14];
    sub_100122F88(*(void *)(a1 + 40), v7);
  }
}

void sub_100126520(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    if (v2 != *(void *)(v3 + 232)) {
      return;
    }
  }
  else if (v2)
  {
    return;
  }
  id v4 = [*(id *)(a1 + 48) initiatorDataAddress];
  id v14 = (id)sub_1001249D8(v3, v4);

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    id v6 = *(void **)(v5 + 248);
  }
  else {
    id v6 = 0;
  }
  id v7 = [v6 objectForKeyedSubscript:v14];
  id v8 = [v7 responderDataSession];
  if (v8 == *(void **)(a1 + 48))
  {
    id v9 = [v7 initiatorDataSession];

    if (v9) {
      goto LABEL_10;
    }
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = v10 ? *(void **)(v10 + 248) : 0;
    [v11 setObject:0 forKeyedSubscript:v14];
    if (!v7) {
      goto LABEL_10;
    }
    sub_100125BC0(*(void *)(a1 + 40), v7);
    uint64_t v12 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_10;
    }
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }

LABEL_10:
}

void sub_100126928(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    if (v2 != *(void *)(v1 + 232)) {
      return;
    }
  }
  else if (v2)
  {
    return;
  }
  uint64_t v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v5 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_100126AC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    if (v2 != *(void *)(v1 + 232)) {
      return;
    }
  }
  else if (v2)
  {
    return;
  }
  uint64_t v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v5 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

id sub_100126CBC(uint64_t a1, unsigned int a2, char a3, int a4)
{
  if (!a1) {
    return 0;
  }
  id v4 = *(void **)(a1 + 120);
  if (!v4) {
    return 0;
  }
  unsigned int v6 = (a3 - 101);
  unint64_t v7 = 0x40300020100uLL >> (8 * a2);
  if (a2 >= 6) {
    LOBYTE(v7) = 0;
  }
  if (v6 >= 4) {
    LOBYTE(v8) = v7;
  }
  else {
    unsigned int v8 = 0x7060502u >> (8 * v6);
  }
  id v9 = +[NSNumber numberWithUnsignedChar:v8];
  uint64_t v10 = [v4 objectForKeyedSubscript:v9];

  if (!v10) {
    return 0;
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v11 = v10;
  id v12 = [v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v12)
  {
    if (a4)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v21;
      id v15 = (id)a4;
LABEL_12:
      uint64_t v16 = 0;
      while (1)
      {
        if (*(void *)v21 != v14) {
          objc_enumerationMutation(v11);
        }
        int v17 = *(void **)(*((void *)&v20 + 1) + 8 * v16);
        if (objc_msgSend(v17, "addressFamily", (void)v20) == v15) {
          break;
        }
        if (v13 == (id)++v16)
        {
          id v13 = [v11 countByEnumeratingWithState:&v20 objects:v24 count:16];
          id v18 = 0;
          if (v13) {
            goto LABEL_12;
          }
          goto LABEL_23;
        }
      }
    }
    else
    {
      int v17 = (void *)**((void **)&v20 + 1);
      [**((id **)&v20 + 1) addressFamily:v20];
    }
    id v18 = v17;
  }
  else
  {
    id v18 = 0;
  }
LABEL_23:

  return v18;
}

id sub_100126E78(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(id *)(a1 + 128);
    uint64_t v2 = +[NSNumber numberWithUnsignedChar:4];
    uint64_t v3 = [v1 objectForKeyedSubscript:v2];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_100126F00(id a1)
{
  id v1 = [NRDiscoveryManager alloc];
  id v4 = sub_10015BD9C();
  uint64_t v2 = sub_100126F6C(v1, v4);
  uint64_t v3 = (void *)qword_1001F4CB0;
  qword_1001F4CB0 = (uint64_t)v2;
}

void *sub_100126F6C(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)NRDiscoveryManager;
    id v5 = [super init];
    if (!v5)
    {
      id v9 = sub_100122450();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v11 = sub_100122450();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 136446210;
      *(void *)(v12 + 4) = "-[NRDiscoveryManager initWithQueue:]";
      sub_100122450();
      _NRLogAbortWithPack();
    }
    a1 = v5;
    objc_storeStrong((id *)v5 + 2, a2);
    uint64_t v6 = +[NSUUID UUID];
    unint64_t v7 = (void *)a1[3];
    a1[3] = v6;
  }
  return a1;
}

id *sub_1001270E8(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)NRDiscoveryClient;
    unsigned int v8 = (id *)[super init];
    if (!v8)
    {
      id v13 = sub_100122450();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v15 = sub_100122450();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 136446210;
      *(void *)(v16 + 4) = "-[NRDiscoveryClient initWithQueue:nrUUID:]";
      sub_100122450();
      _NRLogAbortWithPack();
    }
    a1 = v8;
    v8[4] = (id)atomic_fetch_add_explicit(&qword_1001F4450, 1uLL, memory_order_relaxed);
    objc_storeStrong(v8 + 5, a2);
    objc_storeStrong(a1 + 3, a3);
    id v9 = objc_alloc_init((Class)NSMutableArray);
    id v10 = a1[12];
    a1[12] = v9;

    id v11 = a1[26];
    a1[26] = @"_nrd._tcp";
  }
  return a1;
}

void sub_1001272AC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v4 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v41 = 367;
      uint64_t v42 = a1;
      long long v39 = "";
      long long v40 = "-[NRDiscoveryClient cancel]";
      _NRLogWithArgs();
    }
    *(unsigned char *)(a1 + 21) = 1;
    id v5 = *(void **)(a1 + 56);
    if (v5)
    {
      [v5 invalidate];
      id v6 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = 0;
    }
    if (objc_msgSend(*(id *)(a1 + 64), "count", v39, v40, v41, v42))
    {
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      id v7 = *(id *)(a1 + 64);
      id v8 = [v7 countByEnumeratingWithState:&v55 objects:v62 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v56;
        do
        {
          for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v56 != v10) {
              objc_enumerationMutation(v7);
            }
            [*(id *)(*((void *)&v55 + 1) + 8 * i) invalidate];
          }
          id v9 = [v7 countByEnumeratingWithState:&v55 objects:v62 count:16];
        }
        while (v9);
      }

      uint64_t v12 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = 0;
    }
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    id v13 = [*(id *)(a1 + 168) allValues];
    id v14 = [v13 countByEnumeratingWithState:&v51 objects:v61 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v52;
      do
      {
        for (j = 0; j != v15; j = (char *)j + 1)
        {
          if (*(void *)v52 != v16) {
            objc_enumerationMutation(v13);
          }
          nw_browser_cancel(*(nw_browser_t *)(*((void *)&v51 + 1) + 8 * (void)j));
        }
        id v15 = [v13 countByEnumeratingWithState:&v51 objects:v61 count:16];
      }
      while (v15);
    }

    id v18 = *(void **)(a1 + 168);
    *(void *)(a1 + 168) = 0;

    sub_1001276A0(a1);
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v19 = *(id *)(a1 + 176);
    long long v20 = (char *)[v19 countByEnumeratingWithState:&v47 objects:v60 count:16];
    if (v20)
    {
      long long v21 = v20;
      uint64_t v22 = *(void *)v48;
      do
      {
        for (uint64_t k = 0; k != v21; ++k)
        {
          if (*(void *)v48 != v22) {
            objc_enumerationMutation(v19);
          }
          nw_resolver_cancel();
        }
        long long v21 = (char *)[v19 countByEnumeratingWithState:&v47 objects:v60 count:16];
      }
      while (v21);
    }

    int v24 = *(void **)(a1 + 176);
    *(void *)(a1 + 176) = 0;

    id v25 = *(void **)(a1 + 216);
    if (v25)
    {
      [v25 invalidate];
      id v26 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = 0;
    }
    uint64_t v27 = *(void **)(a1 + 224);
    if (v27)
    {
      [v27 invalidate];
      BOOL v28 = *(void **)(a1 + 224);
      *(void *)(a1 + 224) = 0;
    }
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v29 = [*(id *)(a1 + 248) allValues];
    id v30 = [v29 countByEnumeratingWithState:&v43 objects:v59 count:16];
    if (v30)
    {
      id v31 = v30;
      uint64_t v32 = *(void *)v44;
      do
      {
        for (m = 0; m != v31; m = (char *)m + 1)
        {
          if (*(void *)v44 != v32) {
            objc_enumerationMutation(v29);
          }
          sub_100125BC0(a1, *(void **)(*((void *)&v43 + 1) + 8 * (void)m));
        }
        id v31 = [v29 countByEnumeratingWithState:&v43 objects:v59 count:16];
      }
      while (v31);
    }

    long long v34 = *(void **)(a1 + 248);
    *(void *)(a1 + 248) = 0;

    long long v35 = *(void **)(a1 + 232);
    if (v35)
    {
      [v35 stop];
      long long v36 = *(void **)(a1 + 232);
      *(void *)(a1 + 232) = 0;
    }
    long long v37 = *(void **)(a1 + 240);
    if (v37)
    {
      [v37 stop];
      long long v38 = *(void **)(a1 + 240);
      *(void *)(a1 + 240) = 0;
    }
  }
}

void sub_1001276A0(uint64_t a1)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v2 = [[*(id *)(a1 + 160) allValues];
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        nw_listener_cancel(*(nw_listener_t *)(*((void *)&v11 + 1) + 8 * i));
      }
      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }

  id v7 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = 0;

  self;
  if (qword_1001F4CB8 != -1) {
    dispatch_once(&qword_1001F4CB8, &stru_1001C7FA0);
  }
  id v8 = (id *)(id)qword_1001F4CB0;
  id v9 = v8;
  if (v8) {
    [v8[4] removeObject:*(void *)(a1 + 112)];
  }

  uint64_t v10 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
}

void sub_100127810(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v4 = *(void **)(a1 + 104);
    if (!v4)
    {
      id v5 = objc_alloc_init((Class)NSMutableSet);
      id v6 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = v5;

      id v4 = *(void **)(a1 + 104);
    }
    id v7 = +[NSNumber numberWithUnsignedChar:a2];
    [v4 addObject:v7];

    if (*(unsigned char *)(a1 + 19) && *(unsigned char *)(a1 + 20))
    {
      sub_1001278D0(a1, a2);
      sub_10012806C(a1, a2);
    }
  }
}

void sub_1001278D0(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 15)) {
    return;
  }
  id v54 = *(id *)(a1 + 104);
  if ([v54 count])
  {
    id v4 = *(id *)(a1 + 104);
    id v5 = +[NSNumber numberWithUnsignedChar:a2];
    unsigned int v6 = [v4 containsObject:v5];

    if (!v6) {
      return;
    }
    id v7 = *(id *)(a1 + 120);
    if (v7)
    {
      uint64_t v8 = *(void *)(a1 + 112);

      if (v8)
      {
        if (a2 == 7)
        {
          id v9 = *(id *)(a1 + 104);
          if (([v9 containsObject:&off_1001D4BA0] & 1) != 0
            && ([*(id *)(a1 + 104) containsObject:&off_1001D4BB8] & 1) != 0)
          {
            id v10 = sub_1000AB38C();
            long long v11 = v10;
            if (v10) {
              long long v12 = (void *)*((void *)v10 + 6);
            }
            else {
              long long v12 = 0;
            }
            id v13 = v12;
            int v14 = sub_100155294((uint64_t)v13);

            if (v14) {
              a2 = 2;
            }
            else {
              a2 = 7;
            }
          }
          else
          {

            a2 = 7;
          }
        }
        objc_super v17 = (id *)(a1 + 160);
        id v18 = *(id *)(a1 + 160);
        id v19 = +[NSNumber numberWithUnsignedChar:a2];
        long long v20 = [v18 objectForKeyedSubscript:v19];

        if (!v20 && (a2 & 0xFFFFFFFD) != 1)
        {
          if (a2 == 6)
          {
            sub_10012A480(a1);
          }
          else
          {
            id v21 = *(id *)(a1 + 112);
            id v22 = *(id *)(a1 + 208);
            id v23 = *(id *)(a1 + 120);
            id v24 = *(id *)(a1 + 128);
            id v52 = *(id *)(a1 + 264);
            long long v50 = v21;
            id v51 = *(id *)(a1 + 136);
            advertise_descriptor = nw_advertise_descriptor_create_bonjour_service((const char *)[v21 UTF8String], (const char *)[v22 UTF8String], 0);
            nw_advertise_descriptor_set_no_auto_rename(advertise_descriptor, 1);
            dictionary = nw_txt_record_create_dictionary();
            nw_txt_record_set_key(dictionary, "nrAT", (const uint8_t *)[v23 bytes], (size_t)[v23 length]);
            long long v49 = v24;
            if (v24) {
              nw_txt_record_set_key(dictionary, "nrD", (const uint8_t *)[v24 bytes], (size_t)[v24 length]);
            }
            long long v55 = dictionary;
            if (v52) {
              nw_txt_record_set_key(dictionary, "nrAD", (const uint8_t *)[v52 bytes], (size_t)[v52 length]);
            }
            if (v51) {
              nw_txt_record_set_key(dictionary, "nrN", (const uint8_t *)[v51 bytes], (size_t)[v51 length]);
            }
            if (_NRIsAppleInternal())
            {
              if (qword_1001F4B80 != -1) {
                dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
              }
              if (byte_1001F4B78)
              {
                *(void *)value = sub_10012A698();
                nw_txt_record_set_key(dictionary, "nrF", value, 8uLL);
              }
            }
            nw_advertise_descriptor_set_txt_record_object(advertise_descriptor, dictionary);
            secure_tcp = nw_parameters_create_secure_tcp(_nw_parameters_configure_protocol_disable, _nw_parameters_configure_protocol_default_configuration);
            uint64_t v27 = secure_tcp;
            parameters = secure_tcp;
            switch((int)a2)
            {
              case 2:
                nw_parameters_set_required_interface_subtype();
                goto LABEL_45;
              case 4:
                nw_parameters_set_required_interface_type(secure_tcp, nw_interface_type_wired);
                goto LABEL_45;
              case 5:
                BOOL v28 = nw_interface_create_with_name();
                if (v28) {
                  goto LABEL_44;
                }
                id v29 = sub_100122450();
                int IsLevelEnabled = _NRLogIsLevelEnabled();

                if (IsLevelEnabled) {
                  goto LABEL_53;
                }
                goto LABEL_50;
              case 7:
                BOOL v28 = nw_interface_create_with_name();
                if (v28)
                {
LABEL_44:
                  id v31 = v28;
                  uint64_t v27 = parameters;
                  nw_parameters_require_interface(parameters, v28);

LABEL_45:
                  id v47 = v23;
                  objc_initWeak((id *)value, (id)a1);
                  uint64_t v32 = nw_listener_create(v27);
                  nw_listener_set_advertise_descriptor(v32, advertise_descriptor);
                  long long v33 = *(id *)(a1 + 40);
                  nw_listener_set_queue(v32, v33);

                  nw_listener_set_new_connection_handler(v32, &stru_1001C8148);
                  objc_copyWeak(&v56, (id *)value);
                  char v57 = a2;
                  long long v34 = v32;
                  id v35 = v50;
                  nw_listener_set_event_handler();
                  nw_listener_start(v34);
                  if (!*v17)
                  {
                    id v36 = objc_alloc_init((Class)NSMutableDictionary);
                    objc_storeStrong((id *)(a1 + 160), v36);
                  }
                  id v37 = *(id *)(a1 + 24);
                  long long v38 = (void *)_NRCopyLogObjectForNRUUID();
                  int v39 = _NRLogIsLevelEnabled();

                  if (v39)
                  {
                    id v40 = *(id *)(a1 + 24);
                    uint64_t v41 = (void *)_NRCopyLogObjectForNRUUID();
                    _NRLogWithArgs();
                  }
                  id v42 = *v17;
                  long long v43 = +[NSNumber numberWithUnsignedChar:a2];
                  [v42 setObject:v34 forKeyedSubscript:v43];

                  objc_destroyWeak(&v56);
                  objc_destroyWeak((id *)value);
                  id v23 = v47;
                }
                else
                {
                  id v44 = sub_100122450();
                  int v45 = _NRLogIsLevelEnabled();

                  if (v45)
                  {
LABEL_53:
                    id v46 = sub_100122450();
                    _NRLogWithArgs();
                  }
                }
LABEL_50:

                break;
              default:
                goto LABEL_45;
            }
          }
        }
        return;
      }
    }
    id v15 = (void *)_NRCopyLogObjectForNRUUID();
    int v16 = _NRLogIsLevelEnabled();

    if (!v16) {
      return;
    }
    id v54 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_10012802C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_10012806C(uint64_t a1, uint64_t a2)
{
  if (a2 <= 7 && ((1 << a2) & 0x8A) != 0 || !*(unsigned char *)(a1 + 16)) {
    return;
  }
  id v29 = *(id *)(a1 + 104);
  if ([v29 count])
  {
    id v4 = *(id *)(a1 + 104);
    id v5 = +[NSNumber numberWithUnsignedChar:a2];
    unsigned int v6 = [v4 containsObject:v5];

    if (!v6) {
      return;
    }
    id v7 = *(id *)(a1 + 168);
    uint64_t v8 = +[NSNumber numberWithUnsignedChar:a2];
    id v9 = [v7 objectForKeyedSubscript:v8];

    if (v9) {
      return;
    }
    if (*(void *)(a1 + 144))
    {
      if (a2 == 6)
      {
        sub_100128530(a1);
      }
      else
      {
        secure_tcp = nw_parameters_create_secure_tcp(_nw_parameters_configure_protocol_disable, _nw_parameters_configure_protocol_default_configuration);
        id v13 = secure_tcp;
        switch(a2)
        {
          case 2:
            nw_parameters_set_required_interface_subtype();
            break;
          case 4:
            nw_parameters_set_required_interface_type(secure_tcp, nw_interface_type_wired);
            break;
          case 5:
            int v14 = nw_interface_create_with_name();
            nw_parameters_require_interface(v13, v14);

            break;
        }
        objc_initWeak(location, (id)a1);
        bonjour_service = nw_browse_descriptor_create_bonjour_service((const char *)[*(id *)(a1 + 208) UTF8String], 0);
        nw_browse_descriptor_set_include_txt_record(bonjour_service, 1);
        nw_browser_t v16 = nw_browser_create(bonjour_service, v13);
        state_changed_handler[0] = _NSConcreteStackBlock;
        state_changed_handler[1] = 3221225472;
        state_changed_handler[2] = sub_100128660;
        state_changed_handler[3] = &unk_1001C8068;
        objc_copyWeak(&v37, location);
        char v38 = a2;
        objc_super v17 = v16;
        id v36 = v17;
        nw_browser_set_state_changed_handler(v17, state_changed_handler);
        id v18 = *(void **)(a1 + 24);
        if (v18)
        {
          id v19 = v18;
          long long v20 = sub_10013DD58((uint64_t)NRDLocalDevice, v19, 0);
        }
        else
        {
          long long v20 = 0;
        }
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1001287F8;
        handler[3] = &unk_1001C80B8;
        objc_copyWeak(&v33, location);
        char v34 = a2;
        id v21 = v17;
        id v31 = v21;
        id v22 = v20;
        id v32 = v22;
        nw_browser_set_browse_results_changed_handler(v21, handler);
        id v23 = *(id *)(a1 + 40);
        nw_browser_set_queue(v21, v23);

        nw_browser_start(v21);
        id v24 = *(void **)(a1 + 168);
        if (!v24)
        {
          id v25 = objc_alloc_init((Class)NSMutableDictionary);
          id v26 = *(void **)(a1 + 168);
          *(void *)(a1 + 168) = v25;

          id v24 = *(void **)(a1 + 168);
        }
        id v27 = v24;
        BOOL v28 = +[NSNumber numberWithUnsignedChar:a2];
        [v27 setObject:v21 forKeyedSubscript:v28];

        objc_destroyWeak(&v33);
        objc_destroyWeak(&v37);

        objc_destroyWeak(location);
      }
      return;
    }
    id v10 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      return;
    }
    id v29 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_1001284EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_100128530(uint64_t a1)
{
  if (_os_feature_enabled_impl() && !*(void *)(a1 + 240))
  {
    id v6 = [objc_alloc((Class)WiFiAwareSubscribeConfiguration) initWithServiceName:*(void *)(a1 + 208)];
    [v6 setAuthenticationType:0];
    id v2 = [objc_alloc((Class)WiFiAwareSubscriber) initWithConfiguration:v6];
    [v2 setDelegate:a1];
    [v2 start];
    objc_storeStrong((id *)(a1 + 240), v2);
    id v3 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
}

void sub_100128660(uint64_t a1, int a2, void *a3)
{
  id v18 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    if (!*((unsigned char *)WeakRetained + 21))
    {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 48);
      id v8 = WeakRetained[21];
      id v9 = +[NSNumber numberWithUnsignedChar:v7];
      id v10 = [v8 objectForKeyedSubscript:v9];
      long long v11 = *(void **)(a1 + 32);

      if (v10 == v11)
      {
        long long v12 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          int v14 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        if (a2 == 1)
        {
          id v15 = (void *)_NRCopyLogObjectForNRUUID();
          int v16 = _NRLogIsLevelEnabled();

          if (v16)
          {
            objc_super v17 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
        }
      }
    }
  }
}

void sub_1001287F8(uint64_t a1, void *a2, void *a3, unsigned int a4)
{
  uint64_t v7 = a2;
  id v8 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v10 = (uint64_t)WeakRetained;
  if (WeakRetained)
  {
    if (!*((unsigned char *)WeakRetained + 21))
    {
      uint64_t v11 = *(unsigned __int8 *)(a1 + 56);
      id v12 = WeakRetained[21];
      id v13 = +[NSNumber numberWithUnsignedChar:v11];
      int v14 = [v12 objectForKeyedSubscript:v13];
      id v15 = *(void **)(a1 + 32);

      if (v14 == v15)
      {
        nw_browse_result_change_t changes = nw_browse_result_get_changes(v7, v8);
        objc_super v17 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v19 = (void *)_NRCopyLogObjectForNRUUID();
          nw_endpoint_t v65 = (nw_endpoint_t)a4;
          nw_browse_result_change_t v66 = changes;
          uint64_t v64 = 836;
          long long v62 = "";
          BOOL v63 = "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke_2";
          _NRLogWithArgs();
        }
        if ((changes & 2) != 0)
        {
          nw_endpoint_t v20 = nw_browse_result_copy_endpoint(v8);
          id v21 = (void *)_NRCopyLogObjectForNRUUID();
          int v22 = _NRLogIsLevelEnabled();

          nw_endpoint_t v72 = v20;
          if (v22)
          {
            id v23 = (void *)_NRCopyLogObjectForNRUUID();
            uint64_t v64 = 842;
            nw_endpoint_t v65 = v20;
            long long v62 = "";
            BOOL v63 = "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke_2";
            _NRLogWithArgs();
          }
        }
        else
        {
          nw_endpoint_t v72 = 0;
        }
        if ((changes & 4) != 0 && (endpoint = nw_browse_result_copy_endpoint(v7)) != 0)
        {
          if (*(void *)(v10 + 80))
          {
            bonjour_service_name = nw_endpoint_get_bonjour_service_name(endpoint);
            if (bonjour_service_name)
            {
              int v70 = +[NSString stringWithUTF8String:bonjour_service_name];
              long long v86 = 0u;
              long long v87 = 0u;
              long long v84 = 0u;
              long long v85 = 0u;
              id v25 = *(id *)(v10 + 96);
              id v26 = [v25 countByEnumeratingWithState:&v84 objects:v88 count:16];
              if (v26)
              {
                uint64_t v27 = *(void *)v85;
                while (2)
                {
                  BOOL v28 = 0;
                  do
                  {
                    if (*(void *)v85 != v27) {
                      objc_enumerationMutation(v25);
                    }
                    id v29 = *(void **)(*((void *)&v84 + 1) + 8 * (void)v28);
                    if (v29) {
                      id v30 = (void *)v29[2];
                    }
                    else {
                      id v30 = 0;
                    }
                    if (objc_msgSend(v30, "isEqualToString:", v70, v62, v63, v64, v65, v66))
                    {
                      BOOL v54 = v29 == 0;
                      id v32 = v29;

                      if (v54)
                      {
                        id v32 = 0;
                        goto LABEL_59;
                      }
                      uint64_t v55 = *(unsigned __int8 *)(a1 + 56);
                      id v56 = v32[15];
                      char v57 = +[NSNumber numberWithUnsignedChar:v55];
                      [v56 setObject:0 forKeyedSubscript:v57];

                      if ([v32[15] count])
                      {
                        if (!*(void *)(v10 + 88)) {
                          goto LABEL_59;
                        }
                        long long v58 = *(NSObject **)(v10 + 40);
                        block[0] = _NSConcreteStackBlock;
                        block[1] = 3221225472;
                        block[2] = sub_100128FD0;
                        block[3] = &unk_1001C8840;
                        id v79 = (id)v10;
                        id v32 = v32;
                        id v80 = v32;
                        dispatch_async(v58, block);

                        id v25 = v79;
                      }
                      else
                      {
                        [*(id *)(v10 + 96) removeObject:v32];
                        int v59 = *(void **)(v10 + 80);
                        if (!v59) {
                          goto LABEL_59;
                        }
                        id v60 = v59;
                        uint64_t v61 = *(NSObject **)(v10 + 40);
                        v81[0] = _NSConcreteStackBlock;
                        v81[1] = 3221225472;
                        v81[2] = sub_100128FBC;
                        v81[3] = &unk_1001C86C0;
                        id v83 = v60;
                        id v32 = v32;
                        long long v82 = v32;
                        id v25 = v60;
                        dispatch_async(v61, v81);
                      }
                      goto LABEL_58;
                    }
                    BOOL v28 = (char *)v28 + 1;
                  }
                  while (v26 != v28);
                  id v31 = [v25 countByEnumeratingWithState:&v84 objects:v88 count:16];
                  id v26 = v31;
                  if (v31) {
                    continue;
                  }
                  break;
                }
              }
              id v32 = 0;
LABEL_58:

LABEL_59:
            }
          }
        }
        else
        {
          endpoint = 0;
        }
        if (!v72) {
          goto LABEL_53;
        }
        id v33 = nw_browse_result_copy_endpoint(v8);
        char v34 = nw_endpoint_get_bonjour_service_name(v33);
        if (v34)
        {
          id v35 = +[NSString stringWithUTF8String:v34];
          id v36 = [v35 lowercaseString];

          self;
          if (qword_1001F4CB8 != -1) {
            dispatch_once(&qword_1001F4CB8, &stru_1001C7FA0);
          }
          id v37 = (id *)(id)qword_1001F4CB0;
          if (!v37
            || (char v38 = v37,
                unsigned __int8 v39 = [v37[4] containsObject:v36],
                v38,
                (v39 & 1) == 0))
          {
            nw_txt_record_t v68 = nw_browse_result_copy_txt_record_object(v8);
            id v71 = sub_100128FF0(v68, "nrN");
            id v40 = (void *)_NRCopyLogObjectForNRUUID();
            int v41 = _NRLogIsLevelEnabled();

            if (v41)
            {
              id v42 = *(id *)(v10 + 24);
              long long v43 = (void *)_NRCopyLogObjectForNRUUID();
              _NRLogWithArgs();
            }
            unint64_t v44 = *(void *)(v10 + 256);
            if (v44 <= 8 && ((1 << v44) & 0x106) != 0)
            {
              id v45 = *(id *)(v10 + 152);
              if (v71)
              {
                id v46 = *(void **)(v10 + 152);
                id v47 = *(id *)(v10 + 200);
                id v48 = v46;
                long long v49 = [v47 dataUsingEncoding:4];
                id v67 = sub_100118074(v48, v71, v49);

                id v45 = v67;
              }
              long long v50 = *(void **)(a1 + 40);
              if (v50) {
                long long v50 = (void *)v50[6];
              }
              id v51 = v50;
              sub_100129190(v10, v8, v33, v36, v45, v51, 0);
            }
            else
            {
              v73[0] = _NSConcreteStackBlock;
              v73[1] = 3221225472;
              v73[2] = sub_100129A24;
              v73[3] = &unk_1001C8090;
              objc_copyWeak(&v77, (id *)(a1 + 48));
              uint64_t v74 = v8;
              uint64_t v75 = v33;
              id v76 = v36;
              sub_10012531C(v10, 28671, v73);

              objc_destroyWeak(&v77);
            }
          }
        }
        else
        {
          id v52 = (void *)_NRCopyLogObjectForNRUUID();
          int v53 = _NRLogIsLevelEnabled();

          if (!v53)
          {
LABEL_52:

LABEL_53:
            goto LABEL_54;
          }
          id v36 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }

        goto LABEL_52;
      }
    }
  }
LABEL_54:
}

void sub_100128FA0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100128FBC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100128FD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    uint64_t v1 = *(void *)(v1 + 88);
  }
  return (*(uint64_t (**)(uint64_t, void))(v1 + 16))(v1, *(void *)(a1 + 40));
}

id sub_100128FF0(void *a1, const char *a2)
{
  id v3 = a1;
  id v4 = v3;
  if (!a2)
  {
    id v7 = sub_100122450();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (!v3)
  {
    id v9 = sub_100122450();
    int v10 = _NRLogIsLevelEnabled();

    if (v10)
    {
LABEL_8:
      id v11 = sub_100122450();
      _NRLogWithArgs();
    }
LABEL_9:
    id v5 = 0;
    goto LABEL_4;
  }
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x3032000000;
  int v16 = sub_100124FF4;
  objc_super v17 = sub_100125004;
  id v18 = 0;
  access_value[0] = _NSConcreteStackBlock;
  access_value[1] = 3221225472;
  access_value[2] = sub_10012A414;
  access_value[3] = &unk_1001C80E0;
  access_value[4] = &v13;
  nw_txt_record_access_key(v3, a2, access_value);
  id v5 = (id)v14[5];
  _Block_object_dispose(&v13, 8);

LABEL_4:
  return v5;
}

void sub_100129178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100129190(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v13 = a2;
  id v14 = a3;
  id obj = a4;
  id v15 = a4;
  id v16 = a5;
  id v78 = a6;
  id v83 = a6;
  id v17 = a7;
  nw_txt_record_t v18 = nw_browse_result_copy_txt_record_object(v13);
  id v19 = sub_100128FF0(v18, "nrN");
  unint64_t v88 = 0;
  if (_NRIsAppleInternal())
  {
    if (qword_1001F4B80 != -1) {
      dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
    }
    if (byte_1001F4B78)
    {
      id v20 = sub_100128FF0(v18, "nrF");
      if ([v20 length] == (id)8)
      {
        [v20 bytes];
        [v20 length];
        __memcpy_chk();
      }
    }
  }
  long long v81 = v17;
  long long v82 = v19;
  if (*(void *)(a1 + 256) == 4)
  {
    id v80 = v16;
    id v21 = v15;
    id v22 = v14;
    id v23 = sub_100128FF0(v18, "nrAT");
    if ([v23 length])
    {
      id v24 = sub_1001256DC(a1, v21, v19);
      unsigned int v25 = sub_1001254E8(a1, v23, v24, v17);
      if (!v25) {
        goto LABEL_26;
      }
      id v26 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v28 = *(id *)(a1 + 24);
        id v29 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      BOOL v30 = 1;
      unsigned int v31 = 1;
      if (!*(unsigned char *)(a1 + 18) || *(unsigned __int8 *)(a1 + 18) == 255) {
        goto LABEL_28;
      }
      id v24 = sub_100128FF0(v18, "nrD");
      if ([v24 length])
      {
        id v76 = v13;
        id v32 = sub_100125420(a1, *(unsigned __int8 *)(a1 + 18), v21, v82);
        unsigned int v31 = sub_1001254E8(a1, v24, v32, v81);
        if (v31)
        {
          id v33 = (void *)_NRCopyLogObjectForNRUUID();
          int v74 = _NRLogIsLevelEnabled();

          if (v74)
          {
            char v34 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
        }

        uint64_t v13 = v76;
      }
      else
      {
LABEL_26:
        unsigned int v31 = 0;
      }

      BOOL v30 = v25;
    }
    else
    {
      BOOL v30 = 0;
      unsigned int v31 = 0;
    }
LABEL_28:

    BOOL v42 = v31 != 0;
    goto LABEL_44;
  }
  if (!v16)
  {
    unsigned __int8 v39 = (void *)_NRCopyLogObjectForNRUUID();
    int v40 = _NRLogIsLevelEnabled();

    if (v40)
    {
      int v41 = (NRDeviceEndpoint *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
LABEL_75:

      goto LABEL_76;
    }
    goto LABEL_76;
  }
  id v77 = v13;
  id v80 = v16;
  id v35 = v16;
  id v21 = v15;
  id v36 = sub_1001256DC(a1, v15, v19);
  id v37 = v36;
  id v22 = v14;
  if (*(void *)(a1 + 256) == 4) {
    id v38 = sub_1001257BC(a1, v36);
  }
  else {
    id v38 = sub_1001169F0(v36, v35);
  }
  long long v43 = v38;

  id v44 = sub_100128FF0(v18, "nrAT");
  BOOL v30 = sub_1001182F0(v43, v44);
  if (v30)
  {
    id v45 = (void *)_NRCopyLogObjectForNRUUID();
    int v46 = _NRLogIsLevelEnabled();

    if (v46)
    {
      id v47 = *(id *)(a1 + 24);
      id v48 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    int v49 = *(unsigned __int8 *)(a1 + 18);
    BOOL v42 = 1;
    if (*(unsigned char *)(a1 + 18) && v49 != 255)
    {
      id v50 = v35;
      id v51 = sub_100125420(a1, v49, v21, v82);
      id v52 = v51;
      if (*(void *)(a1 + 256) == 4) {
        id v53 = sub_1001257BC(a1, v51);
      }
      else {
        id v53 = sub_1001169F0(v51, v50);
      }
      BOOL v54 = v53;

      id v55 = sub_100128FF0(v18, "nrD");
      BOOL v42 = sub_1001182F0(v54, v55);
      if (v42)
      {
        uint64_t v75 = v54;
        id v56 = (void *)_NRCopyLogObjectForNRUUID();
        int v73 = _NRLogIsLevelEnabled();

        BOOL v54 = v75;
        if (v73)
        {
          char v57 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();

          BOOL v54 = v75;
        }
      }
    }
  }
  else
  {
    BOOL v42 = 0;
  }

  uint64_t v13 = v77;
LABEL_44:
  id v14 = v22;
  id v15 = v21;
  id v16 = v80;
  if (v42 && v30)
  {
    long long v58 = objc_alloc_init(NRDeviceEndpoint);
    int v59 = v58;
    if (v58)
    {
      objc_storeStrong((id *)&v58->_serviceName, obj);
      v59->_nw_interface_type_t type = *(unsigned char *)(a1 + 18);
      if (v83)
      {
        objc_storeStrong((id *)&v59->_remoteIDSDeviceID, v78);
        goto LABEL_49;
      }
    }
    else if (v83)
    {
LABEL_49:
      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v60 = (id)qword_1001F4A18;
      uint64_t v61 = (NSUUID *)sub_1000B92A4(v60, 0);
      long long v62 = v61;
      if (v59)
      {
        long long v62 = v61;
        localIDSDeviceID = (NSUUID *)v59->_localIDSDeviceID;
        v59->_localIDSDeviceID = (NSString *)&v62->super.isa;
LABEL_58:

        goto LABEL_59;
      }
      goto LABEL_59;
    }
    id v64 = [objc_alloc((Class)NSUUID) initWithUUIDString:v15];
    if (v59) {
      objc_storeStrong((id *)&v59->_peerToken, v64);
    }

    id v65 = objc_alloc((Class)NSUUID);
    id v60 = *(id *)(a1 + 112);
    nw_browse_result_change_t v66 = (NSUUID *)[v65 initWithUUIDString:v60];
    long long v62 = v66;
    if (v59)
    {
      long long v62 = v66;
      localIDSDeviceID = v59->_localToken;
      v59->_localToken = v62;
      goto LABEL_58;
    }
LABEL_59:

    if (qword_1001F4B80 != -1) {
      dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
    }
    if (byte_1001F4B78 && _NRIsAppleInternal())
    {
      if (qword_1001F4B90 != -1) {
        dispatch_once(&qword_1001F4B90, &stru_1001C7C58);
      }
      uint64_t v67 = 3;
      if (!byte_1001F4B88) {
        uint64_t v67 = 1;
      }
      if (!v59)
      {
LABEL_68:

        if (![0 length]) {
          goto LABEL_74;
        }
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v67 = 0;
      if (!v59) {
        goto LABEL_68;
      }
    }
    v59->_receivedFlags = v88;
    v59->_localFlags = v67;
    nw_txt_record_t v68 = (NSData *)sub_100128FF0(v18, "nrAD");
    advertisementData = v59->_advertisementData;
    v59->_advertisementData = v68;

    if (![(NSData *)v59->_advertisementData length])
    {
LABEL_74:
      enumerator[0] = _NSConcreteStackBlock;
      enumerator[1] = 3221225472;
      enumerator[2] = sub_100129D44;
      enumerator[3] = &unk_1001C8108;
      enumerator[4] = a1;
      long long v85 = v59;
      id v86 = v14;
      id v87 = v15;
      int v41 = v59;
      nw_browse_result_enumerate_interfaces(v13, enumerator);

      goto LABEL_75;
    }
LABEL_72:
    int v70 = (void *)_NRCopyLogObjectForNRUUID();
    int v71 = _NRLogIsLevelEnabled();

    if (v71)
    {
      nw_endpoint_t v72 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    goto LABEL_74;
  }
LABEL_76:
}

void sub_100129A24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (WeakRetained && !*((unsigned char *)WeakRetained + 21))
  {
    if (v6 || ![v5 count])
    {
      id v9 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v11 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v12 = (void *)_NRCopyLogObjectForNRUUID();
      int v13 = _NRLogIsLevelEnabled();

      if (v13)
      {
        id v14 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v33 = 925;
        id v34 = [v5 count];
        unsigned int v31 = "";
        id v32 = "-[NRDiscoveryClient startBrowsingOverLinkType:]_block_invoke_5";
        _NRLogWithArgs();
      }
      uint64_t v37 = (uint64_t)v8;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id v15 = v5;
      id v16 = [v15 countByEnumeratingWithState:&v42 objects:v47 count:16];
      id v36 = v5;
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v43;
        while (2)
        {
          for (unint64_t i = 0; i != v17; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v43 != v18) {
              objc_enumerationMutation(v15);
            }
            id v20 = *(void **)(*((void *)&v42 + 1) + 8 * i);
            if (objc_msgSend(v20, "type", v31, v32, v33, v34) == 1)
            {
              id v35 = v20;
              goto LABEL_20;
            }
          }
          id v17 = [v15 countByEnumeratingWithState:&v42 objects:v47 count:16];
          if (v17) {
            continue;
          }
          break;
        }
      }
      id v35 = 0;
LABEL_20:

      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      id v21 = v15;
      id v22 = [v21 countByEnumeratingWithState:&v38 objects:v46 count:16];
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = *(void *)v39;
        do
        {
          for (j = 0; j != v23; j = (char *)j + 1)
          {
            if (*(void *)v39 != v24) {
              objc_enumerationMutation(v21);
            }
            id v26 = *(void **)(*((void *)&v38 + 1) + 8 * (void)j);
            if (objc_msgSend(v26, "type", v31, v32, v33, v34, v35) != 1)
            {
              uint64_t v27 = *(void **)(a1 + 32);
              id v28 = *(void **)(a1 + 40);
              id v29 = *(void **)(a1 + 48);
              BOOL v30 = [v26 idsDeviceID];
              sub_100129190(v37, v27, v28, v29, 0, v30, v26);
            }
          }
          id v23 = [v21 countByEnumeratingWithState:&v38 objects:v46 count:16];
        }
        while (v23);
      }

      id v6 = 0;
      id v5 = v36;
      id v8 = (void *)v37;
    }
  }
}

uint64_t sub_100129D44(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (nw_interface_get_subtype() != 5001)
  {
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v15 = 1095;
      id v16 = v3;
      int v13 = "";
      id v14 = "-[NRDiscoveryClient addDiscoveredDeviceIfApplicable:endpoint:serviceName:psk:idsDeviceID:peerIdentity:selfId"
            "entity:]_block_invoke";
      _NRLogWithArgs();
    }
    id v6 = nw_parameters_create();
    nw_parameters_require_interface(v6, v3);
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10) {
      id v11 = *(void **)(v10 + 96);
    }
    else {
      id v11 = 0;
    }
    [v11 addObject:*(void *)(a1 + 40), v13, v14, v15, v16];
    sub_100129EC8(*(void *)(a1 + 32), *(void **)(a1 + 48), v6, *(void **)(a1 + 56));
    goto LABEL_9;
  }
  id v4 = (void *)_NRCopyLogObjectForNRUUID();
  int v5 = _NRLogIsLevelEnabled();

  if (v5)
  {
    id v6 = _NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
LABEL_9:
  }
  return 1;
}

void sub_100129EC8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    objc_initWeak(&location, (id)a1);
    uint64_t v10 = (void *)nw_resolver_create_with_endpoint();
    id v11 = *(id *)(a1 + 40);
    objc_copyWeak(&v23, &location);
    id v12 = v10;
    id v21 = v8;
    id v22 = v9;
    nw_resolver_set_update_handler();

    int v13 = *(void **)(a1 + 176);
    if (!v13)
    {
      id v14 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v15 = *(void **)(a1 + 176);
      *(void *)(a1 + 176) = v14;

      int v13 = *(void **)(a1 + 176);
    }
    [v13 addObject:v12];
    id v16 = *(id *)(a1 + 24);
    id v17 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v19 = *(id *)(a1 + 24);
      id v20 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    objc_destroyWeak(&v23);

    objc_destroyWeak(&location);
  }
}

void sub_10012A0B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_10012A0E0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  id v7 = WeakRetained;
  if (WeakRetained
    && !*((unsigned char *)WeakRetained + 21)
    && ([WeakRetained[22] containsObject:*(void *)(a1 + 32)] & 1) != 0)
  {
    if (nw_array_get_count())
    {
      [v7[22] removeObject:*(void *)(a1 + 32)];
      id v11 = v7;
      id v12 = *(id *)(a1 + 40);
      id v13 = *(id *)(a1 + 48);
      nw_array_apply();
    }
    if (a2 == 2) {
      nw_resolver_cancel();
    }
  }
  else
  {
    id v8 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      uint64_t v10 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
  }
}

uint64_t sub_10012A268(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (nw_endpoint_get_type(v4) == nw_endpoint_type_address)
  {
    id v5 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v7 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    id v8 = nw_parameters_copy_required_interface(*(nw_parameters_t *)(a1 + 40));
    id v9 = v8;
    if (v8)
    {
      uint64_t v10 = +[NSString stringWithUTF8String:nw_interface_get_name(v8)];
    }
    else
    {
      uint64_t v10 = 0;
    }
    sub_10012369C(*(void *)(a1 + 32), v4, *(void **)(a1 + 48), v10);
  }
  else
  {
    id v11 = (void *)_NRCopyLogObjectForNRUUID();
    int v12 = _NRLogIsLevelEnabled();

    if (v12)
    {
      id v13 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    sub_100129EC8(*(void *)(a1 + 32), v4, *(void *)(a1 + 40), *(void *)(a1 + 48));
  }

  return 1;
}

uint64_t sub_10012A414(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3 == 4)
  {
    id v6 = [objc_alloc((Class)NSData) initWithBytes:a4 length:a5];
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  return 1;
}

void sub_10012A480(uint64_t a1)
{
  if (!_os_feature_enabled_impl() || *(void *)(a1 + 232)) {
    return;
  }
  id v11 = sub_100123458((id *)a1);
  if (v11)
  {
    id v2 = [objc_alloc((Class)WiFiAwarePublishDatapathConfiguration) initWithServiceType:1 securityConfiguration:0];
    id v3 = objc_alloc_init((Class)WiFiAwarePublishServiceSpecificInfo);
    [v3 setBlob:v11];
    [v3 setInstanceName:*(void *)(a1 + 112)];
    id v4 = [objc_alloc((Class)WiFiAwarePublishConfiguration) initWithServiceName:*(void *)(a1 + 208)];
    [v4 setAuthenticationType:0];
    [v4 setDatapathConfiguration:v2];
    [v4 setServiceSpecificInfo:v3];
    id v5 = [objc_alloc((Class)WiFiAwarePublisher) initWithConfiguration:v4];
    [v5 setDelegate:a1];
    [v5 start];
    objc_storeStrong((id *)(a1 + 232), v5);
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    goto LABEL_10;
  }
  id v9 = (void *)_NRCopyLogObjectForNRUUID();
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    id v2 = (id)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
LABEL_10:
  }
}

uint64_t sub_10012A698()
{
  if (qword_1001F4B80 != -1) {
    dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
  }
  if (!byte_1001F4B78 || !_NRIsAppleInternal()) {
    return 0;
  }
  if (qword_1001F4B90 != -1) {
    dispatch_once(&qword_1001F4B90, &stru_1001C7C58);
  }
  if (byte_1001F4B88) {
    return 3;
  }
  else {
    return 1;
  }
}

void sub_10012A730(uint64_t a1, int a2, void *a3)
{
  error = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    if (!*((unsigned char *)WeakRetained + 21))
    {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 56);
      id v8 = WeakRetained[20];
      id v9 = +[NSNumber numberWithUnsignedChar:v7];
      int v10 = [v8 objectForKeyedSubscript:v9];
      id v11 = *(void **)(a1 + 32);

      if (v10 == v11)
      {
        int v12 = (void *)_NRCopyLogObjectForNRUUID();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v14 = (void *)_NRCopyLogObjectForNRUUID();
          _NRLogWithArgs();
        }
        if (error)
        {
          if (nw_error_get_error_domain(error) == nw_error_domain_dns && nw_error_get_error_code(error) == -65548)
          {
            sub_1001276A0((uint64_t)v6);
            sub_10012A938((uint64_t)v6);
          }
          else
          {
            sub_10012AE8C((uint64_t)v6, *(unsigned __int8 *)(a1 + 56));
            sub_1001278D0(v6, *(unsigned __int8 *)(a1 + 56));
          }
        }
        else if (a2 == 2)
        {
          uint64_t v15 = (void *)_NRCopyLogObjectForNRUUID();
          int v16 = _NRLogIsLevelEnabled();

          if (v16)
          {
            id v17 = v6[3];
            uint64_t v18 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
        }
      }
    }
  }
}

void sub_10012A938(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 15) && !*(void *)(a1 + 112))
  {
    if (*(void *)(a1 + 144))
    {
      if (*(void *)(a1 + 136))
      {
        id v2 = +[NSUUID UUID];
        id v3 = [v2 UUIDString];
        uint64_t v4 = [v3 lowercaseString];
        id v5 = *(void **)(a1 + 112);
        *(void *)(a1 + 112) = v4;

        self;
        if (qword_1001F4CB8 != -1) {
          dispatch_once(&qword_1001F4CB8, &stru_1001C7FA0);
        }
        id v6 = (id)qword_1001F4CB0;
        id v7 = *(id *)(a1 + 112);
        if (v6)
        {
          id v8 = (void *)v6[4];
          if (!v8)
          {
            id v9 = objc_alloc_init((Class)NSMutableArray);
            int v10 = (void *)v6[4];
            v6[4] = v9;

            id v8 = (void *)v6[4];
          }
          [v8 addObject:v7];
        }

        id v11 = *(id *)(a1 + 112);
        id v12 = *(id *)(a1 + 144);
        id v13 = *(id *)(a1 + 136);
        id v14 = sub_1001256DC(a1, v11, v13);
        uint64_t v15 = v14;
        if (*(void *)(a1 + 256) == 4) {
          id v16 = sub_1001257BC(a1, v14);
        }
        else {
          id v16 = sub_1001169F0(v14, v12);
        }
        id v19 = v16;

        if (v19)
        {
          if (qword_1001F4BF0 != -1) {
            dispatch_once(&qword_1001F4BF0, &stru_1001C7D68);
          }
          int v22 = byte_1001F4BE8;
          id v23 = *(id *)(a1 + 112);
          id v24 = *(id *)(a1 + 144);
          id v25 = *(id *)(a1 + 136);
          id v26 = sub_100125420(a1, v22, v23, v25);
          uint64_t v27 = v26;
          if (*(void *)(a1 + 256) == 4) {
            id v28 = sub_1001257BC(a1, v26);
          }
          else {
            id v28 = sub_1001169F0(v26, v24);
          }
          unsigned int v31 = v28;

          objc_storeStrong((id *)(a1 + 120), v19);
          objc_storeStrong((id *)(a1 + 128), v31);
          id v32 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v34 = *(id *)(a1 + 24);
            id v35 = (void *)_NRCopyLogObjectForNRUUID();
            Logid String = (void *)_NRKeyCreateLogString();

            uint64_t v49 = 1145;
            id v50 = LogString;
            id v47 = "";
            id v48 = "-[NRDiscoveryClient setupAdvertisingMetadataIfNeeded]";
            _NRLogWithArgs();
          }
          if (*(void *)(a1 + 128))
          {
            uint64_t v37 = (void *)_NRCopyLogObjectForNRUUID();
            int v38 = _NRLogIsLevelEnabled();

            if (v38)
            {
              id v39 = *(id *)(a1 + 24);
              long long v40 = (void *)_NRCopyLogObjectForNRUUID();
              long long v41 = (void *)_NRKeyCreateLogString();

              uint64_t v49 = 1147;
              id v50 = v41;
              id v47 = "";
              id v48 = "-[NRDiscoveryClient setupAdvertisingMetadataIfNeeded]";
              _NRLogWithArgs();
            }
          }
        }
        else
        {
          id v29 = (void *)_NRCopyLogObjectForNRUUID();
          int v30 = _NRLogIsLevelEnabled();

          if (!v30)
          {
            id v19 = 0;
            goto LABEL_33;
          }
          unsigned int v31 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v49 = 1135;
          id v47 = "";
          id v48 = "-[NRDiscoveryClient setupAdvertisingMetadataIfNeeded]";
          _NRLogWithArgs();
        }

LABEL_33:
        goto LABEL_34;
      }
      id v20 = (void *)_NRCopyLogObjectForNRUUID();
      int v21 = _NRLogIsLevelEnabled();

      if (!v21) {
        goto LABEL_34;
      }
      id v19 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v49 = 1127;
      id v47 = "";
      id v48 = "-[NRDiscoveryClient setupAdvertisingMetadataIfNeeded]";
    }
    else
    {
      id v17 = (void *)_NRCopyLogObjectForNRUUID();
      int v18 = _NRLogIsLevelEnabled();

      if (!v18) {
        goto LABEL_34;
      }
      id v19 = (void *)_NRCopyLogObjectForNRUUID();
      uint64_t v49 = 1122;
      id v47 = "";
      id v48 = "-[NRDiscoveryClient setupAdvertisingMetadataIfNeeded]";
    }
    _NRLogWithArgs();
    goto LABEL_33;
  }
LABEL_34:
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v42 = *(id *)(a1 + 104);
  id v43 = [v42 countByEnumeratingWithState:&v51 objects:v55 count:16];
  if (v43)
  {
    id v44 = v43;
    uint64_t v45 = *(void *)v52;
    do
    {
      for (unint64_t i = 0; i != v44; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v52 != v45) {
          objc_enumerationMutation(v42);
        }
        sub_1001278D0(a1, [*(id *)(*((void *)&v51 + 1) + 8 * i) unsignedShortValue:v47, v48, v49, v50, (void)v51]);
      }
      id v44 = [v42 countByEnumeratingWithState:&v51 objects:v55 count:16];
    }
    while (v44);
  }
}

void sub_10012AE8C(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a1 + 160);
  id v5 = +[NSNumber numberWithUnsignedChar:a2];
  listener = [v4 objectForKeyedSubscript:v5];

  id v6 = listener;
  if (listener)
  {
    nw_listener_cancel(listener);
    id v7 = *(id *)(a1 + 160);
    id v8 = +[NSNumber numberWithUnsignedChar:a2];
    [v7 setObject:0 forKeyedSubscript:v8];

    id v6 = listener;
  }
}

void sub_10012AF70(unsigned char *val)
{
  if (val)
  {
    val[19] = 1;
    objc_initWeak(&location, val);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10012B0B4;
    v5[3] = &unk_1001C7FF0;
    objc_copyWeak(&v6, &location);
    id v2 = objc_retainBlock(v5);
    id v3 = v2;
    if (val[17])
    {
      ((void (*)(void *))v2[2])(v2);
    }
    else
    {
      self;
      if (qword_1001F4DE0 != -1) {
        dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
      }
      id v4 = (id)qword_1001F4DD8;
      sub_10015969C((uint64_t)v4, v3);
    }
    objc_destroyWeak(&v6);
    objc_destroyWeak(&location);
  }
}

void sub_10012B098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012B0B4(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (!WeakRetained || *((unsigned char *)WeakRetained + 21)) {
    goto LABEL_26;
  }
  id v3 = WeakRetained[3];
  if (v3)
  {
    id v4 = sub_10013DC5C((uint64_t)NRDLocalDevice, v3);
    id v5 = v4;
    if (v4)
    {
      if (v4[15])
      {
        char v6 = 1;
        if (!v4[12]) {
          goto LABEL_19;
        }
      }
      else
      {
        if (v4[14]) {
          BOOL v7 = 1;
        }
        else {
          BOOL v7 = *((unsigned __int16 *)v4 + 14) > 0x12u;
        }
        char v6 = v7;
        if (!v4[12])
        {
LABEL_19:
          id v8 = v2[3];
          self;
          uint64_t v9 = [(id)qword_1001F4D68 objectForKeyedSubscript:v8];

          id v10 = v2[25];
          v2[25] = (id)v9;

          if (!v2[25]) {
            v2[25] = @"nr-pairing";
          }
          goto LABEL_21;
        }
      }
      if (!v4[13]) {
        char v6 = 0;
      }
      if (v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    id v5 = 0;
  }
LABEL_21:
  if (!v2[25]) {
    v2[25] = @"nr-default";
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10012B314;
  v19[3] = &unk_1001C8840;
  id v11 = v2;
  id v20 = v11;
  id v21 = v5;
  id v12 = v5;
  id v13 = objc_retainBlock(v19);
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v14 = (id)qword_1001F4A18;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10012B8E0;
  v16[3] = &unk_1001C7FC8;
  id v17 = v11;
  id v18 = v13;
  uint64_t v15 = v13;

LABEL_26:
}

void sub_10012B314(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    if (*(unsigned char *)(v2 + 21)) {
      return;
    }
    *(unsigned char *)(v2 + 20) = 1;
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      if (!*(unsigned char *)(v3 + 15) || (sub_10012A938(*(void *)(a1 + 32)), (uint64_t v3 = *(void *)(a1 + 32)) != 0))
      {
        if (*(unsigned char *)(v3 + 16))
        {
          long long v31 = 0u;
          long long v32 = 0u;
          memset(v33, 0, sizeof(v33));
          id v4 = *(id *)(v3 + 104);
          id v5 = [v4 countByEnumeratingWithState:&v31 objects:&v36 count:16];
          if (v5)
          {
            uint64_t v6 = *(void *)v32;
            do
            {
              for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
              {
                if (*(void *)v32 != v6) {
                  objc_enumerationMutation(v4);
                }
                sub_10012806C(v3, [*(id *)(*((void *)&v31 + 1) + 8 * i) unsignedShortValue]);
              }
              id v5 = [v4 countByEnumeratingWithState:&v31 objects:&v36 count:16];
            }
            while (v5);
          }
        }
      }
    }
  }
  id v8 = *(void **)(a1 + 40);
  if (v8) {
    id v8 = (void *)v8[16];
  }
  int v30 = v8;
  uint64_t v9 = [v30 allowedLinkTypes];
  if ([v9 containsObject:&off_1001D4B88]
    && (id v10 = *(unsigned char **)(a1 + 40)) != 0
    && v10[9]
    && v10[20])
  {
    int v11 = v10[10];

    if (!v11)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      if (v12)
      {
        if (_NRIsAppleInternal())
        {
          if (!*(void *)(v12 + 216))
          {
            id v13 = objc_alloc_init((Class)CBAdvertiser);
            id v14 = *(void **)(v12 + 216);
            *(void *)(v12 + 216) = v13;

            [*(id *)(v12 + 216) setNearbyActionType:5];
            [*(id *)(v12 + 216) setDispatchQueue:*(void *)(v12 + 40)];
            do
              uint32_t v15 = arc4random_uniform(0xFFFFu);
            while (!(_WORD)v15);
            __int16 v35 = bswap32(v15) >> 16;
            id v16 = [objc_alloc((Class)NSData) initWithBytes:&v35 length:2];
            id v17 = objc_alloc_init((Class)NSMutableData);
            [v17 appendData:v16];
            id v18 = objc_alloc_init((Class)NSMutableData);
            [v18 appendData:v16];
            id v19 = *(void **)(v12 + 200);
            if (v19)
            {
              id v20 = v19;
              id v21 = [v20 dataUsingEncoding:4];
              [v18 appendData:v21];
            }
            *(void *)&long long v31 = 0;
            *((void *)&v31 + 1) = &v31;
            *(void *)&long long v32 = 0x3032000000;
            *((void *)&v32 + 1) = sub_100124FF4;
            *(void *)&v33[0] = sub_100125004;
            *((void *)&v33[0] + 1) = 0;
            objc_initWeak(&location, (id)v12);
            id v36 = _NSConcreteStackBlock;
            uint64_t v37 = 3221225472;
            int v38 = sub_10012CAE0;
            id v39 = &unk_1001C82B0;
            objc_copyWeak(&v43, &location);
            id v42 = &v31;
            id v22 = v18;
            id v40 = v22;
            id v23 = v17;
            id v41 = v23;
            __int16 v44 = v35;
            sub_10012531C(v12, 1, &v36);

            objc_destroyWeak(&v43);
            objc_destroyWeak(&location);
            _Block_object_dispose(&v31, 8);
          }
          if (!*(void *)(v12 + 224))
          {
            id v24 = objc_alloc_init((Class)CBDiscovery);
            id v25 = *(void **)(v12 + 224);
            *(void *)(v12 + 224) = v24;

            [*(id *)(v12 + 224) setDispatchQueue:*(void *)(v12 + 40)];
            [*(id *)(v12 + 224) setDiscoveryFlags:0x20000002000000];
            objc_initWeak(&location, (id)v12);
            id v36 = _NSConcreteStackBlock;
            uint64_t v37 = 3221225472;
            int v38 = sub_10012BF0C;
            id v39 = &unk_1001C8238;
            objc_copyWeak(&v40, &location);
            [*(id *)(v12 + 224) setDeviceFoundHandler:&v36];
            id v26 = *(void **)(v12 + 224);
            *(void *)&long long v31 = _NSConcreteStackBlock;
            *((void *)&v31 + 1) = 3221225472;
            *(void *)&long long v32 = sub_10012C338;
            *((void *)&v32 + 1) = &unk_1001C8260;
            objc_copyWeak((id *)v33, &location);
            [v26 activateWithCompletion:&v31];
            objc_destroyWeak((id *)v33);
            objc_destroyWeak(&v40);
            objc_destroyWeak(&location);
          }
        }
        else
        {
          uint64_t v27 = (void *)_NRCopyLogObjectForNRUUID();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v29 = (void *)_NRCopyLogObjectForNRUUID();
            _NRLogWithArgs();
          }
        }
      }
    }
  }
  else
  {
  }
}

void sub_10012B884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012B8E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    if (!*(unsigned char *)(v1 + 21)) {
      sub_10012B90C(*(void *)(a1 + 32), *(void **)(a1 + 40));
    }
  }
  else
  {
    sub_10012B90C(0, *(void **)(a1 + 40));
  }
}

void sub_10012B90C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 24);
    if (v4) {
      id v5 = (id *)sub_10013DD58((uint64_t)NRDLocalDevice, v4, 0);
    }
    else {
      id v5 = 0;
    }
    int v42 = 0;
    uint64_t __buf = 0;
    arc4random_buf(&__buf, 0xCuLL);
    id v6 = [objc_alloc((Class)NSData) initWithBytes:&__buf length:12];
    BOOL v7 = *(void **)(a1 + 136);
    *(void *)(a1 + 136) = v6;

    id v8 = *(id *)(a1 + 200);
    uint64_t v9 = [v8 dataUsingEncoding:4];

    if (*(unsigned char *)(a1 + 22))
    {
      uint64_t v10 = [@"terminusdStaticSecret" dataUsingEncoding:4];
      int v11 = *(id **)(a1 + 152);
      *(void *)(a1 + 152) = v10;
      uint64_t v12 = 8;
LABEL_34:

      *(void *)(a1 + 256) = v12;
      long long v31 = *(void **)(a1 + 152);
      id v32 = *(id *)(a1 + 136);
      id v33 = v31;
      id v34 = sub_100118074(v33, v32, v9);
      __int16 v35 = *(void **)(a1 + 144);
      *(void *)(a1 + 144) = v34;

      v3[2](v3);
LABEL_35:

      goto LABEL_36;
    }
    if (v5)
    {
      if (*((unsigned char *)v5 + 15))
      {
        int v13 = 1;
      }
      else
      {
        if (*((unsigned char *)v5 + 14)) {
          BOOL v14 = 1;
        }
        else {
          BOOL v14 = *((unsigned __int16 *)v5 + 14) > 0x12u;
        }
        int v13 = v14;
      }
      if (*((unsigned char *)v5 + 12))
      {
        if (!*((unsigned char *)v5 + 13)) {
          int v13 = 0;
        }
        if (v13 == 1)
        {
          uint32_t v15 = (id *)v5[9];
          id v16 = v15;
          if (v15)
          {
            id v17 = v15[3];
            id v18 = v17;
            id v19 = v17 ? (void *)*((void *)v17 + 2) : 0;
          }
          else
          {
            id v18 = 0;
            id v19 = 0;
          }
          id v20 = v19;
          BOOL v21 = v20 == 0;

          if (!v21)
          {
            id v22 = (id *)v5[9];
            int v11 = v22;
            if (v22)
            {
              id v23 = v22[3];
              id v24 = v23;
              if (v23) {
                id v25 = (void *)*((void *)v23 + 2);
              }
              else {
                id v25 = 0;
              }
            }
            else
            {
              id v24 = 0;
              id v25 = 0;
            }
            objc_storeStrong((id *)(a1 + 152), v25);

            uint64_t v12 = 2;
            goto LABEL_34;
          }
        }
      }
      id v26 = v5[19];
      if (v26) {
        id v26 = (void *)v26[2];
      }
      uint64_t v27 = v26;
      BOOL v28 = v27 == 0;

      if (!v28)
      {
        id v29 = v5[19];
        if (v29) {
          id v29 = (void *)v29[2];
        }
        int v30 = v29;
        int v11 = *(id **)(a1 + 152);
        *(void *)(a1 + 152) = v30;
        uint64_t v12 = 1;
        goto LABEL_34;
      }
    }
    *(void *)(a1 + 256) = 4;
    objc_initWeak(&location, (id)a1);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10012BC8C;
    v36[3] = &unk_1001C8040;
    objc_copyWeak(&v39, &location);
    int v38 = v3;
    id v37 = v9;
    sub_10012531C(a1, 1, v36);

    objc_destroyWeak(&v39);
    objc_destroyWeak(&location);
    goto LABEL_35;
  }
LABEL_36:
}

void sub_10012BC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10012BC8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v8 = WeakRetained;
  if (WeakRetained && !WeakRetained[21])
  {
    if (v6 || ![v5 count])
    {
      uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled)
      {
LABEL_7:
        uint64_t v12 = (void *)*((void *)v8 + 19);
        int v13 = *(void **)(a1 + 32);
        id v14 = *((id *)v8 + 17);
        id v15 = v12;
        id v16 = sub_100118074(v15, v14, v13);
        id v17 = (void *)*((void *)v8 + 18);
        *((void *)v8 + 18) = v16;

        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        goto LABEL_8;
      }
      id v11 = (id)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    else
    {
      id v18 = (void *)_NRCopyLogObjectForNRUUID();
      int v19 = _NRLogIsLevelEnabled();

      if (v19)
      {
        id v20 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v30 = 669;
        id v31 = [v5 count];
        BOOL v28 = "";
        id v29 = "-[NRDiscoveryClient fillInPSKDataForAuthTagWithCompletion:]_block_invoke";
        _NRLogWithArgs();
      }
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      id v11 = v5;
      id v21 = [v11 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v33;
        do
        {
          for (unint64_t i = 0; i != v22; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v33 != v23) {
              objc_enumerationMutation(v11);
            }
            id v25 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            uint64_t v26 = [v25 deviceIRKData:v28, v29, v30, v31, v32];
            uint64_t v27 = (void *)*((void *)v8 + 19);
            *((void *)v8 + 19) = v26;

            objc_storeStrong((id *)v8 + 24, v25);
          }
          id v22 = [v11 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v22);
      }
    }

    goto LABEL_7;
  }
LABEL_8:
}

void sub_10012BF0C(uint64_t a1, void *a2)
{
  id v36 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained && !*((unsigned char *)WeakRetained + 21))
  {
    if (qword_1001F4CC8 != -1) {
      dispatch_once(&qword_1001F4CC8, &stru_1001C8428);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4CC8 != -1) {
        dispatch_once(&qword_1001F4CC8, &stru_1001C8428);
      }
      uint64_t v31 = 1756;
      id v33 = v36;
      uint64_t v27 = "";
      id v29 = "-[NRDiscoveryClient discoverOverBluetooth]_block_invoke";
      _NRLogWithArgs();
    }
    id v5 = [v36 watchSetupData:v27, v29, v31, v33];
    id v6 = [v36 identifier];
    id v7 = v5;
    id v8 = v6;
    uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      Logid String = (void *)_NRKeyCreateLogString();
      id v35 = [v7 length];
      uint64_t v32 = 1811;
      BOOL v28 = "";
      uint64_t v30 = "-[NRDiscoveryClient verifyBLEAdvertisements:identifier:]";
      _NRLogWithArgs();
    }
    __int16 v43 = 0;
    if ((unint64_t)objc_msgSend(v7, "length", v28, v30, v32, LogString, v35) < 3) {
      goto LABEL_22;
    }
    id v12 = v7;
    int v13 = v12;
    if (v12)
    {
      [v12 getBytes:&v43 length:2];
      id v14 = [v13 subdataWithRange:2, [v13 length] - 2];
      id v15 = (void *)_NRCopyLogObjectForNRUUID();
      int v16 = _NRLogIsLevelEnabled();

      if (v16)
      {
        id v17 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
      id v18 = objc_alloc_init((Class)NSMutableData);
      id v19 = [objc_alloc((Class)NSData) initWithBytes:&v43 length:2];
      [v18 appendData:v19];
      id v20 = (void *)v4[25];
      if (v20)
      {
        id v21 = v20;
        id v22 = [v21 dataUsingEncoding:4];
        [v18 appendData:v22];
      }
      objc_initWeak(&location, v4);
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_10012C408;
      v37[3] = &unk_1001C8090;
      objc_copyWeak(&v41, &location);
      id v23 = v18;
      id v38 = v23;
      id v24 = v14;
      id v39 = v24;
      id v40 = v8;
      sub_10012531C((uint64_t)v4, 28671, v37);

      objc_destroyWeak(&v41);
      objc_destroyWeak(&location);
    }
    else
    {
      id v25 = (void *)_NRCopyLogObjectForNRUUID();
      int v26 = _NRLogIsLevelEnabled();

      if (!v26)
      {
LABEL_21:

LABEL_22:
        goto LABEL_23;
      }
      id v24 = (id)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }

    goto LABEL_21;
  }
LABEL_23:
}

void sub_10012C31C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_10012C338(uint64_t a1, void *a2)
{
  id v7 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v6 = (void *)_NRCopyLogObjectForNRUUID();
    _NRLogWithArgs();
  }
}

void sub_10012C408(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (!WeakRetained || WeakRetained[21]) {
    goto LABEL_3;
  }
  if (v6 || ![v5 count])
  {
    uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    goto LABEL_3;
  }
  id v12 = (void *)_NRCopyLogObjectForNRUUID();
  int v13 = _NRLogIsLevelEnabled();

  if (v13)
  {
    id v14 = (void *)_NRCopyLogObjectForNRUUID();
    uint64_t v60 = 1845;
    id v61 = [v5 count];
    long long v58 = "";
    int v59 = "-[NRDiscoveryClient verifyBLEAdvertisements:identifier:]_block_invoke";
    _NRLogWithArgs();
  }
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  id v15 = v5;
  id v16 = [v15 countByEnumeratingWithState:&v75 objects:v89 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v76;
    while (2)
    {
      for (unint64_t i = 0; i != v16; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v76 != v17) {
          objc_enumerationMutation(v15);
        }
        id v19 = *(void **)(*((void *)&v75 + 1) + 8 * i);
        if (objc_msgSend(v19, "type", v58, v59, v60, v61) == 1)
        {
          id v16 = v19;
          goto LABEL_20;
        }
      }
      id v16 = [v15 countByEnumeratingWithState:&v75 objects:v89 count:16];
      if (v16) {
        continue;
      }
      break;
    }
  }
LABEL_20:

  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  id obj = v15;
  id v20 = [obj countByEnumeratingWithState:&v71 objects:v88 count:16];
  if (!v20) {
    goto LABEL_60;
  }
  id v21 = v20;
  uint64_t v22 = *(void *)v72;
  while (2)
  {
    for (j = 0; j != v21; j = (char *)j + 1)
    {
      if (*(void *)v72 != v22) {
        objc_enumerationMutation(obj);
      }
      id v24 = *(void **)(*((void *)&v71 + 1) + 8 * (void)j);
      id v25 = [v24 authTagForData:*(void *)(a1 + 32) type:3 error:v58];
      if (sub_1001182F0(v25, *(void **)(a1 + 40)))
      {
        int v26 = (void *)_NRCopyLogObjectForNRUUID();
        int v27 = _NRLogIsLevelEnabled();

        if (v27)
        {
          id v28 = *((id *)v8 + 3);
          id v29 = (void *)_NRCopyLogObjectForNRUUID();
          uint64_t v60 = 1856;
          id v61 = v24;
          long long v58 = "";
          int v59 = "-[NRDiscoveryClient verifyBLEAdvertisements:identifier:]_block_invoke";
          _NRLogWithArgs();
        }
        id v30 = [objc_alloc((Class)NSUUID) initWithUUIDString:*(void *)(a1 + 48)];
        uint64_t v31 = [v24 idsDeviceID];
        id v32 = v30;
        id v62 = v31;
        id v33 = v31;
        id v34 = v24;
        id v69 = v16;
        if (v33)
        {
          id v64 = v30;
          id v66 = v34;
          id v67 = v32;
          id v68 = v16;
          if (v32)
          {
            long long v86 = 0u;
            long long v87 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            id v35 = *((id *)v8 + 12);
            id v36 = [v35 countByEnumeratingWithState:&v84 objects:v90 count:16];
            if (v36)
            {
              id v37 = v36;
              uint64_t v38 = *(void *)v85;
              while (2)
              {
                id v39 = 0;
                do
                {
                  if (*(void *)v85 != v38) {
                    objc_enumerationMutation(v35);
                  }
                  id v40 = *(void **)(*((void *)&v84 + 1) + 8 * (void)v39);
                  if (v40) {
                    id v41 = (void *)v40[8];
                  }
                  else {
                    id v41 = 0;
                  }
                  if (objc_msgSend(v41, "isEqualToString:", v33, v58, v59, v60, v61))
                  {
                    __int16 v43 = v40;

                    if (!v40) {
                      goto LABEL_48;
                    }
                    id v16 = v68;
                    goto LABEL_54;
                  }
                  id v39 = (char *)v39 + 1;
                }
                while (v37 != v39);
                id v42 = [v35 countByEnumeratingWithState:&v84 objects:v90 count:16];
                id v37 = v42;
                if (v42) {
                  continue;
                }
                break;
              }
            }

LABEL_48:
            __int16 v44 = objc_alloc_init(NRDeviceEndpoint);
            __int16 v43 = v44;
            if (v44)
            {
              v44->_nw_interface_type_t type = *((unsigned char *)v8 + 18);
              objc_storeStrong((id *)&v44->_remoteIDSDeviceID, v62);
            }
            self;
            if (qword_1001F4A20 != -1) {
              dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
            }
            uint64_t v45 = (id)qword_1001F4A18;
            int v46 = (NSString *)sub_1000B92A4(v45, 0);
            id v16 = v68;
            if (v43)
            {
              localIDSDeviceID = v43->_localIDSDeviceID;
              v43->_localIDSDeviceID = v46;

LABEL_54:
              objc_storeStrong((id *)&v43->_cbUUID, v64);
              char v65 = 0;
              issuedFirstCallbacuint64_t k = v43->_issuedFirstCallback;
            }
            else
            {

              issuedFirstCallbacuint64_t k = 0;
              char v65 = 1;
            }
            id v48 = *((id *)v8 + 11);
            id v49 = *((id *)v8 + 9);
            id v50 = *((void *)v8 + 5);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_10012CAB0;
            block[3] = &unk_1001C8198;
            BOOL v83 = issuedFirstCallback;
            id v51 = v48;
            id v81 = v51;
            long long v52 = v43;
            id v80 = v52;
            id v53 = v49;
            id v82 = v53;
            dispatch_async(v50, block);
            if ((v65 & 1) == 0) {
              v52->_issuedFirstCallbacuint64_t k = 1;
            }

            id v34 = v66;
            id v32 = v67;
            goto LABEL_58;
          }
          id v56 = sub_100122450();
          int v57 = _NRLogIsLevelEnabled();

          id v32 = 0;
          if (!v57) {
            goto LABEL_59;
          }
        }
        else
        {
          id v54 = sub_100122450();
          int v55 = _NRLogIsLevelEnabled();

          if (!v55) {
            goto LABEL_59;
          }
        }
        long long v52 = (NRDeviceEndpoint *)sub_100122450();
        _NRLogWithArgs();
LABEL_58:

LABEL_59:
        goto LABEL_60;
      }
    }
    id v21 = [obj countByEnumeratingWithState:&v71 objects:v88 count:16];
    if (v21) {
      continue;
    }
    break;
  }
LABEL_60:

LABEL_3:
}

uint64_t sub_10012CAB0(uint64_t result)
{
  if (*(unsigned char *)(result + 56))
  {
    uint64_t v1 = *(void *)(result + 40);
    if (!v1) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t, void))(v1 + 16))(v1, *(void *)(result + 32));
  }
  uint64_t v1 = *(void *)(result + 48);
  if (v1) {
    return (*(uint64_t (**)(uint64_t, void))(v1 + 16))(v1, *(void *)(result + 32));
  }
  return result;
}

void sub_10012CAE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (WeakRetained && !*((unsigned char *)WeakRetained + 21))
  {
    if (v6 || ![v5 count])
    {
      uint64_t v9 = (void *)_NRCopyLogObjectForNRUUID();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v11 = (void *)_NRCopyLogObjectForNRUUID();
        _NRLogWithArgs();
      }
    }
    else
    {
      id v12 = (void *)_NRCopyLogObjectForNRUUID();
      int v13 = _NRLogIsLevelEnabled();

      if (v13)
      {
        id v14 = (void *)_NRCopyLogObjectForNRUUID();
        uint64_t v27 = 1790;
        id v28 = [v5 count];
        id v25 = "";
        int v26 = "-[NRDiscoveryClient startBLEAdvertisements]_block_invoke";
        _NRLogWithArgs();
      }
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      id v15 = v5;
      id v16 = [v15 countByEnumeratingWithState:&v33 objects:v37 count:16];
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v34;
        do
        {
          for (unint64_t i = 0; i != v17; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v34 != v18) {
              objc_enumerationMutation(v15);
            }
            uint64_t v20 = [*(id *)(*((void *)&v33 + 1) + 8 * i) authTagForData:*(void *)(a1 + 32) type:3 error:v25, v26, v27, v28];
            uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
            uint64_t v22 = *(void **)(v21 + 40);
            *(void *)(v21 + 40) = v20;

            [*(id *)(a1 + 40) appendData:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
          }
          id v17 = [v15 countByEnumeratingWithState:&v33 objects:v37 count:16];
        }
        while (v17);
      }

      id v23 = (void *)v8[27];
      if (v23)
      {
        [v23 setWatchSetupData:*(void *)(a1 + 40)];
        id v24 = (void *)v8[27];
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472;
        void v29[2] = sub_10012CDC0;
        v29[3] = &unk_1001C8288;
        id v30 = v8;
        id v31 = *(id *)(a1 + 40);
        __int16 v32 = *(_WORD *)(a1 + 64);
        [v24 activateWithCompletion:v29];
      }
    }
  }
}

void sub_10012CDC0(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v3 = (void *)_NRCopyLogObjectForNRUUID();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v5 = *(void **)(a1 + 32);
    if (v5) {
      id v5 = (void *)v5[3];
    }
    id v6 = v5;
    id v7 = (void *)_NRCopyLogObjectForNRUUID();
    Logid String = (void *)_NRKeyCreateLogString();
    [*(id *)(a1 + 40) length];

    _NRLogWithArgs();
  }
}

id sub_10012D02C()
{
  if (qword_1001F4CD8 != -1) {
    dispatch_once(&qword_1001F4CD8, &stru_1001C8470);
  }
  id v0 = (void *)qword_1001F4CD0;

  return v0;
}

void sub_10012D080(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4CD0;
  qword_1001F4CD0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10012D3F4(uint64_t a1, double a2, double a3, double a4)
{
  if (a1)
  {
    unint64_t v5 = *(void *)(a1 + 32);
    unint64_t v6 = *(void *)(a1 + 40);
    double v7 = 0.0;
    if (v5) {
      BOOL v8 = v6 > v5;
    }
    else {
      BOOL v8 = 0;
    }
    double v9 = 0.0;
    if (v8)
    {
      if (qword_1001F4BB8 != -1) {
        dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
      }
      LODWORD(a3) = dword_1001F4BC0;
      LODWORD(a4) = *(_DWORD *)algn_1001F4BC4;
      a4 = (double)*(unint64_t *)&a4;
      a3 = (double)*(unint64_t *)&a3 * 0.000001;
      double v9 = a3 * (double)(v6 - v5) / a4;
    }
    unint64_t v10 = *(void *)(a1 + 48);
    unint64_t v11 = *(void *)(a1 + 56);
    if (v10) {
      BOOL v12 = v11 > v10;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12)
    {
      if (qword_1001F4BB8 != -1) {
        dispatch_once(&qword_1001F4BB8, &stru_1001C7CB8);
      }
      LODWORD(a3) = dword_1001F4BC0;
      LODWORD(a4) = *(_DWORD *)algn_1001F4BC4;
      double v7 = (double)*(unint64_t *)&a3 * 0.000001 * (double)(v11 - v10) / (double)*(unint64_t *)&a4;
    }
    int v13 = +[NSNumber numberWithDouble:round(*(double *)(a1 + 16) * 1000.0) * 0.001];
    [*(id *)(a1 + 8) setObject:v13 forKeyedSubscript:@"uptimeInSec"];

    id v14 = +[NSNumber numberWithDouble:round(v7) * 0.001];
    [*(id *)(a1 + 8) setObject:v14 forKeyedSubscript:@"ikeClassDSetupTimeInSec"];

    id v15 = +[NSNumber numberWithDouble:round(v9) * 0.001];
    [*(id *)(a1 + 8) setObject:v15 forKeyedSubscript:@"ikeClassCSetupTimeInSec"];

    if (*(void *)(a1 + 72))
    {
      id v16 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
      [*(id *)(a1 + 8) setObject:v16 forKeyedSubscript:@"ikeClassDAttempts"];
    }
    if (*(void *)(a1 + 64))
    {
      id v17 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
      [*(id *)(a1 + 8) setObject:v17 forKeyedSubscript:@"ikeClassCAttempts"];
    }
    if (*(void *)(a1 + 24))
    {
      uint64_t v18 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
      [*(id *)(a1 + 8) setObject:v18 forKeyedSubscript:@"totalIKEControlPackets"];
    }
    if (*(void *)(a1 + 80))
    {
      id v19 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
      [*(id *)(a1 + 8) setObject:v19 forKeyedSubscript:@"totalBytesSent"];
    }
    if (*(void *)(a1 + 88))
    {
      +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
      id v20 = (id)objc_claimAutoreleasedReturnValue();
      [*(id *)(a1 + 8) setObject:v20 forKeyedSubscript:@"totalBytesReceived"];
    }
  }
}

void sub_10012D730(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(id *)(a1 + 8);
    [v4 allValues];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    double v7 = v5;
    if (v6)
    {
      id v8 = v6;
      uint64_t v9 = *(void *)v13;
      while (2)
      {
        for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v5);
          }
          if ([*(id *)(*((void *)&v12 + 1) + 8 * i) BOOLValue])
          {

            if (qword_1001F4CD8 != -1) {
              dispatch_once(&qword_1001F4CD8, &stru_1001C8470);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4CD8 != -1) {
                dispatch_once(&qword_1001F4CD8, &stru_1001C8470);
              }
              _NRLogWithArgs();
            }
            id v11 = v4;
            AnalyticsSendEventLazy();
            double v7 = v11;
            goto LABEL_18;
          }
        }
        id v8 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v8) {
          continue;
        }
        break;
      }
      double v7 = v5;
    }
LABEL_18:
  }
}

id sub_10012D954(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void *sub_10012F4C0(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)NRAnalyticsLinkUpgradeReport;
    id v4 = [super init];
    if (!v4)
    {
      id v9 = sub_10012D02C();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v11 = sub_10012D02C();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 136446210;
      *(void *)(v12 + 4) = "-[NRAnalyticsLinkUpgradeReport initWithDictionary:]";
      sub_10012D02C();
      _NRLogAbortWithPack();
    }
    id v5 = v4;
    id v6 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:v3];
    [v6 addEntriesFromDictionary:v5[1]];
    double v7 = (void *)v5[1];
    v5[1] = v6;

    a1 = v5;
  }

  return a1;
}

void sub_10012F648(void *a1, int a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  id v9 = a3;
  int v10 = _NRIsAppleInternal();
  *(void *)&long long buf = _NSConcreteStackBlock;
  *((void *)&buf + 1) = 3221225472;
  id v28 = sub_1001321C0;
  id v29 = &unk_1001C8490;
  char v30 = v10;
  if (qword_1001F4CF0 != -1) {
    dispatch_once(&qword_1001F4CF0, &buf);
  }
  id v11 = [(__CFString *)v9 length];
  id v12 = [(__CFString *)v8 length];
  id v13 = objc_alloc((Class)NSString);
  CFStringRef v14 = &stru_1001C9648;
  BOOL v15 = v11 == 0;
  if (v11) {
    CFStringRef v16 = v9;
  }
  else {
    CFStringRef v16 = &stru_1001C9648;
  }
  if (v15) {
    id v17 = "";
  }
  else {
    id v17 = " ";
  }
  if (a2 <= 3999)
  {
    if (a2 <= 2000)
    {
      switch(a2)
      {
        case 1000:
          uint64_t v18 = @"LD_Create";
          break;
        case 1001:
          uint64_t v18 = @"LD_Start";
          break;
        case 1002:
          uint64_t v18 = @"LD_Ready";
          break;
        case 1003:
          uint64_t v18 = @"LD_Cancel";
          break;
        case 1004:
          uint64_t v18 = @"LD_ReceivedLinkAvailable";
          break;
        case 1005:
          uint64_t v18 = @"LD_ReceivedLinkReady";
          break;
        case 1006:
          uint64_t v18 = @"LD_ReceivedLinkSuspended";
          break;
        case 1007:
          uint64_t v18 = @"LD_ReceivedLinkUnavailable";
          break;
        case 1008:
          uint64_t v18 = @"LD_PreferWiFiRequest";
          break;
        case 1009:
          uint64_t v18 = @"LD_RejectPreferWiFiRequest";
          break;
        case 1010:
          uint64_t v18 = @"LD_UpdateWiFiAddress";
          break;
        case 1011:
          uint64_t v18 = @"LD_ToggleWiFi";
          break;
        case 1012:
          uint64_t v18 = @"LD_PrimaryLinkChanged";
          break;
        case 1013:
          uint64_t v18 = @"LD_CancelAllLinks";
          break;
        case 1014:
          uint64_t v18 = @"LD_UnknownNRUUID";
          break;
        case 1015:
          uint64_t v18 = @"LD_SaveOrphanedDeviceMonitorConnection";
          break;
        case 1016:
          uint64_t v18 = @"LD_AdoptOrphanedDeviceMonitorConnection";
          break;
        case 1017:
          uint64_t v18 = @"LD_RemoveOrphanedDeviceMonitorConnection";
          break;
        case 1018:
          uint64_t v18 = @"LD_ReceivedIRATLinkRecommendation";
          break;
        case 1019:
          uint64_t v18 = @"LD_RecommendedLinkReceived";
          break;
        case 1020:
          uint64_t v18 = @"LD_PreferWiFiRequestAckSent";
          break;
        case 1021:
          uint64_t v18 = @"LD_PreferWiFiRequestAckReceived";
          break;
        case 1022:
          uint64_t v18 = @"LD_SaveOrphanedDevicePreferencesConnection";
          break;
        case 1023:
          uint64_t v18 = @"LD_AdoptOrphanedDevicePreferencesConnection";
          break;
        case 1024:
          uint64_t v18 = @"LD_RemoveOrphanedDevicePreferencesConnection";
          break;
        case 1025:
          uint64_t v18 = @"LD_DisableRangeExtension";
          break;
        case 1026:
          uint64_t v18 = @"LD_DisablePreferWiFi";
          break;
        case 1027:
          uint64_t v18 = @"LD_FixedInterfaceModeEnable";
          break;
        case 1028:
          uint64_t v18 = @"LD_FixedInterfaceModeDisable";
          break;
        case 1029:
          uint64_t v18 = @"LD_ForcedWoWEnable";
          break;
        case 1030:
          uint64_t v18 = @"LD_ForcedWoWDisable";
          break;
        case 1031:
          uint64_t v18 = @"LD_AvoidCompanionNotifyPosted";
          break;
        case 1032:
          uint64_t v18 = @"LD_AOVPNDetected";
          break;
        case 1033:
          uint64_t v18 = @"LD_DeviceSetupInProgress";
          break;
        case 1034:
          uint64_t v18 = @"LD_IgnorePreferWiFiRequest";
          break;
        case 1035:
          uint64_t v18 = @"LD_SendBufferLimitSet";
          break;
        case 1036:
          uint64_t v18 = @"LD_SendBufferLimitReset";
          break;
        case 1037:
          uint64_t v18 = @"LD_AOVPNConfigAdded";
          break;
        case 1038:
          uint64_t v18 = @"LD_AOVPNConfigRemoved";
          break;
        case 1039:
          uint64_t v18 = @"LD_EnableBluetoothPacketParser";
          break;
        case 1040:
          uint64_t v18 = @"LD_UpdateAWDLAddress";
          break;
        case 1041:
          uint64_t v18 = @"LD_AddEphemeralDevice";
          break;
        case 1042:
          uint64_t v18 = @"LD_RemoveEphemeralDevice";
          break;
        case 1043:
          uint64_t v18 = @"LD_ForceStartQuickRelay";
          break;
        case 1044:
        case 1045:
        case 1046:
        case 1052:
        case 1053:
        case 1054:
        case 1055:
        case 1056:
        case 1057:
        case 1058:
        case 1059:
        case 1060:
        case 1061:
        case 1062:
        case 1063:
        case 1064:
        case 1065:
        case 1066:
        case 1067:
        case 1068:
        case 1069:
        case 1070:
        case 1071:
        case 1072:
        case 1073:
        case 1074:
        case 1075:
        case 1076:
        case 1077:
        case 1078:
        case 1079:
        case 1080:
        case 1081:
        case 1082:
        case 1083:
        case 1084:
        case 1085:
        case 1086:
        case 1087:
        case 1088:
        case 1089:
        case 1090:
        case 1091:
        case 1092:
        case 1093:
        case 1094:
        case 1095:
        case 1096:
        case 1097:
        case 1098:
        case 1099:
        case 1100:
        case 1101:
        case 1102:
        case 1103:
        case 1104:
        case 1105:
        case 1106:
        case 1107:
        case 1108:
        case 1109:
        case 1110:
        case 1111:
        case 1112:
        case 1113:
        case 1114:
        case 1115:
        case 1116:
        case 1117:
        case 1118:
        case 1119:
        case 1120:
        case 1121:
        case 1122:
        case 1123:
        case 1124:
        case 1125:
        case 1126:
        case 1127:
        case 1128:
        case 1129:
        case 1130:
        case 1131:
        case 1132:
        case 1133:
        case 1134:
        case 1135:
        case 1136:
        case 1137:
        case 1138:
        case 1139:
        case 1140:
        case 1141:
        case 1142:
        case 1143:
        case 1144:
        case 1145:
        case 1146:
        case 1147:
        case 1148:
        case 1149:
        case 1150:
        case 1151:
        case 1152:
        case 1153:
        case 1154:
        case 1155:
        case 1156:
        case 1157:
        case 1158:
        case 1159:
        case 1160:
        case 1161:
        case 1162:
        case 1163:
        case 1164:
        case 1165:
        case 1166:
        case 1167:
        case 1168:
        case 1169:
        case 1170:
        case 1171:
        case 1172:
        case 1173:
        case 1174:
        case 1175:
        case 1176:
        case 1177:
        case 1178:
        case 1179:
        case 1180:
        case 1181:
        case 1182:
        case 1183:
        case 1184:
        case 1185:
        case 1186:
        case 1187:
        case 1188:
        case 1189:
        case 1190:
        case 1191:
        case 1192:
        case 1193:
        case 1194:
        case 1195:
        case 1196:
        case 1197:
        case 1198:
        case 1199:
        case 1200:
        case 1201:
        case 1202:
        case 1203:
        case 1204:
        case 1205:
        case 1206:
        case 1207:
        case 1208:
        case 1209:
        case 1210:
        case 1211:
        case 1212:
        case 1213:
        case 1214:
        case 1215:
        case 1216:
        case 1217:
        case 1218:
        case 1219:
        case 1220:
        case 1221:
        case 1222:
        case 1223:
        case 1224:
        case 1225:
        case 1226:
        case 1227:
        case 1228:
        case 1229:
        case 1230:
        case 1231:
        case 1232:
        case 1233:
        case 1234:
        case 1235:
        case 1236:
        case 1237:
        case 1238:
        case 1239:
        case 1240:
        case 1241:
        case 1242:
        case 1243:
        case 1244:
        case 1245:
        case 1246:
        case 1247:
        case 1248:
        case 1249:
        case 1250:
        case 1251:
        case 1252:
        case 1253:
        case 1254:
        case 1255:
        case 1256:
        case 1257:
        case 1258:
        case 1259:
        case 1260:
        case 1261:
        case 1262:
        case 1263:
        case 1264:
        case 1265:
        case 1266:
        case 1267:
        case 1268:
        case 1269:
        case 1270:
        case 1271:
        case 1272:
        case 1273:
        case 1274:
        case 1275:
        case 1276:
        case 1277:
        case 1278:
        case 1279:
        case 1280:
        case 1281:
        case 1282:
        case 1283:
        case 1284:
        case 1285:
        case 1286:
        case 1287:
        case 1288:
        case 1289:
        case 1290:
        case 1291:
        case 1292:
        case 1293:
        case 1294:
        case 1295:
        case 1296:
        case 1297:
        case 1298:
        case 1299:
        case 1300:
        case 1301:
        case 1302:
        case 1303:
        case 1304:
        case 1305:
        case 1306:
        case 1307:
        case 1308:
        case 1309:
        case 1310:
        case 1311:
        case 1312:
        case 1313:
        case 1314:
        case 1315:
        case 1316:
        case 1317:
        case 1318:
        case 1319:
        case 1320:
        case 1321:
        case 1322:
        case 1323:
        case 1324:
        case 1325:
        case 1326:
        case 1327:
        case 1328:
        case 1329:
        case 1330:
        case 1331:
        case 1332:
        case 1333:
        case 1334:
        case 1335:
        case 1336:
        case 1337:
        case 1338:
        case 1339:
        case 1340:
        case 1341:
        case 1342:
        case 1343:
        case 1344:
        case 1345:
        case 1346:
        case 1347:
        case 1348:
        case 1349:
        case 1350:
        case 1351:
        case 1352:
        case 1353:
        case 1354:
        case 1355:
        case 1356:
        case 1357:
        case 1358:
        case 1359:
        case 1360:
        case 1361:
        case 1362:
        case 1363:
        case 1364:
        case 1365:
        case 1366:
        case 1367:
        case 1368:
        case 1369:
        case 1370:
        case 1371:
        case 1372:
        case 1373:
        case 1374:
        case 1375:
        case 1376:
        case 1377:
        case 1378:
        case 1379:
        case 1380:
        case 1381:
        case 1382:
        case 1383:
        case 1384:
        case 1385:
        case 1386:
        case 1387:
        case 1388:
        case 1389:
        case 1390:
        case 1391:
        case 1392:
        case 1393:
        case 1394:
        case 1395:
        case 1396:
        case 1397:
        case 1398:
        case 1399:
        case 1400:
        case 1401:
        case 1402:
        case 1403:
        case 1404:
        case 1405:
        case 1406:
        case 1407:
        case 1408:
        case 1409:
        case 1410:
        case 1411:
        case 1412:
        case 1413:
        case 1414:
        case 1415:
        case 1416:
        case 1417:
        case 1418:
        case 1419:
        case 1420:
        case 1421:
        case 1422:
        case 1423:
        case 1424:
        case 1425:
        case 1426:
        case 1427:
        case 1428:
        case 1429:
        case 1430:
        case 1431:
        case 1432:
        case 1433:
        case 1434:
        case 1435:
        case 1436:
        case 1437:
        case 1438:
        case 1439:
        case 1440:
        case 1441:
        case 1442:
        case 1443:
        case 1444:
        case 1445:
        case 1446:
        case 1447:
        case 1448:
        case 1449:
        case 1450:
        case 1451:
        case 1452:
        case 1453:
        case 1454:
        case 1455:
        case 1456:
        case 1457:
        case 1458:
        case 1459:
        case 1460:
        case 1461:
        case 1462:
        case 1463:
        case 1464:
        case 1465:
        case 1466:
        case 1467:
        case 1468:
        case 1469:
        case 1470:
        case 1471:
        case 1472:
        case 1473:
        case 1474:
        case 1475:
        case 1476:
        case 1477:
        case 1478:
        case 1479:
        case 1480:
        case 1481:
        case 1482:
        case 1483:
        case 1484:
        case 1485:
        case 1486:
        case 1487:
        case 1488:
        case 1489:
        case 1490:
        case 1491:
        case 1492:
        case 1493:
        case 1494:
        case 1495:
        case 1496:
        case 1497:
        case 1498:
        case 1499:
          goto LABEL_322;
        case 1047:
          uint64_t v18 = @"LD_ManagerCreateFailed";
          break;
        case 1048:
          uint64_t v18 = @"LD_PluggedInStateChanged";
          break;
        case 1049:
          uint64_t v18 = @"LD_ThermalPressureChanged";
          break;
        case 1050:
          uint64_t v18 = @"LD_LinkUpgradeRequest";
          break;
        case 1051:
          uint64_t v18 = @"LD_UpdateCountryCode";
          break;
        case 1500:
          uint64_t v18 = @"DC_Create";
          break;
        case 1501:
          uint64_t v18 = @"DC_Start";
          break;
        case 1502:
          uint64_t v18 = @"DC_Cancel";
          break;
        default:
          if (a2) {
            goto LABEL_322;
          }
          uint64_t v18 = @"Invalid";
          break;
      }
    }
    else
    {
      switch(a2)
      {
        case 3000:
          uint64_t v18 = @"L_Create";
          break;
        case 3001:
          uint64_t v18 = @"L_Start";
          break;
        case 3002:
          uint64_t v18 = @"L_Suspend";
          break;
        case 3003:
          uint64_t v18 = @"L_Resume";
          break;
        case 3004:
          uint64_t v18 = @"L_Ready";
          break;
        case 3005:
          uint64_t v18 = @"L_Cancel";
          break;
        case 3006:
          uint64_t v18 = @"L_SendData";
          break;
        case 3007:
          uint64_t v18 = @"L_ReceiveData";
          break;
        case 3008:
          uint64_t v18 = @"L_ChangeState";
          break;
        case 3009:
          uint64_t v18 = @"L_IKEChangeState";
          break;
        case 3010:
          uint64_t v18 = @"L_ReceivedPrelude";
          break;
        case 3011:
          uint64_t v18 = @"L_InitiateIKEPairingFromIDS";
          break;
        case 3012:
          uint64_t v18 = @"L_RespondIKEPairingFromIDS";
          break;
        case 3013:
          uint64_t v18 = @"L_InitiateIKEPairingWithOOBK";
          break;
        case 3014:
          uint64_t v18 = @"L_RespondIKEPairingWithOOBK";
          break;
        case 3015:
          uint64_t v18 = @"L_InitiateIKE";
          break;
        case 3016:
          uint64_t v18 = @"L_RespondIKE";
          break;
        case 3017:
          uint64_t v18 = @"L_CreationFailed";
          break;
        case 3018:
          uint64_t v18 = @"L_IKEDisconnectionError";
          break;
        case 3019:
          uint64_t v18 = @"L_RejectingIKENoKeys";
          break;
        case 3020:
          uint64_t v18 = @"L_RejectingIKEKeysLocked";
          break;
        case 3021:
          uint64_t v18 = @"L_RejectingIKEBadAuth";
          break;
        case 3022:
          uint64_t v18 = @"L_RejectingIKENoIdentity";
          break;
        case 3023:
          uint64_t v18 = @"L_RejectingIKEBadIdentity";
          break;
        case 3024:
          uint64_t v18 = @"L_RejectingIKENoChildConfig";
          break;
        case 3025:
          uint64_t v18 = @"L_RetryInterfaceCreation";
          break;
        case 3026:
          uint64_t v18 = @"L_RetryIKESessionCreation";
          break;
        case 3027:
        case 3028:
        case 3029:
        case 3030:
        case 3031:
        case 3032:
        case 3033:
        case 3034:
        case 3035:
        case 3036:
        case 3037:
        case 3038:
        case 3039:
        case 3040:
        case 3041:
        case 3042:
        case 3043:
        case 3044:
        case 3045:
        case 3046:
        case 3047:
        case 3048:
        case 3049:
        case 3050:
        case 3051:
        case 3052:
        case 3053:
        case 3054:
        case 3055:
        case 3056:
        case 3057:
        case 3058:
        case 3059:
        case 3060:
        case 3061:
        case 3062:
        case 3063:
        case 3064:
        case 3065:
        case 3066:
        case 3067:
        case 3068:
        case 3069:
        case 3070:
        case 3071:
        case 3072:
        case 3073:
        case 3074:
        case 3075:
        case 3076:
        case 3077:
        case 3078:
        case 3079:
        case 3080:
        case 3081:
        case 3082:
        case 3083:
        case 3084:
        case 3085:
        case 3086:
        case 3087:
        case 3088:
        case 3089:
        case 3090:
        case 3091:
        case 3092:
        case 3093:
        case 3094:
        case 3095:
        case 3096:
        case 3097:
        case 3098:
        case 3099:
        case 3102:
        case 3103:
        case 3104:
        case 3105:
        case 3106:
        case 3107:
        case 3108:
        case 3109:
        case 3110:
        case 3111:
        case 3112:
        case 3113:
        case 3114:
        case 3115:
        case 3116:
        case 3117:
        case 3118:
        case 3119:
        case 3120:
        case 3121:
        case 3122:
        case 3123:
        case 3124:
        case 3125:
        case 3126:
        case 3127:
        case 3128:
        case 3129:
        case 3130:
        case 3131:
        case 3132:
        case 3133:
        case 3134:
        case 3135:
        case 3136:
        case 3137:
        case 3138:
        case 3139:
        case 3140:
        case 3141:
        case 3142:
        case 3143:
        case 3144:
        case 3145:
        case 3146:
        case 3147:
        case 3148:
        case 3149:
        case 3150:
        case 3151:
        case 3152:
        case 3153:
        case 3154:
        case 3155:
        case 3156:
        case 3157:
        case 3158:
        case 3159:
        case 3160:
        case 3161:
        case 3162:
        case 3163:
        case 3164:
        case 3165:
        case 3166:
        case 3167:
        case 3168:
        case 3169:
        case 3170:
        case 3171:
        case 3172:
        case 3173:
        case 3174:
        case 3175:
        case 3176:
        case 3177:
        case 3178:
        case 3179:
        case 3180:
        case 3181:
        case 3182:
        case 3183:
        case 3184:
        case 3185:
        case 3186:
        case 3187:
        case 3188:
        case 3189:
        case 3190:
        case 3191:
        case 3192:
        case 3193:
        case 3194:
        case 3195:
        case 3196:
        case 3197:
        case 3198:
        case 3199:
        case 3202:
        case 3203:
        case 3204:
        case 3205:
        case 3206:
        case 3207:
        case 3208:
        case 3209:
        case 3211:
        case 3212:
        case 3213:
        case 3214:
        case 3215:
        case 3216:
        case 3217:
        case 3218:
        case 3219:
        case 3220:
        case 3221:
        case 3222:
        case 3223:
        case 3224:
        case 3225:
        case 3226:
        case 3227:
        case 3228:
        case 3229:
        case 3230:
        case 3231:
        case 3232:
        case 3233:
        case 3234:
        case 3235:
        case 3236:
        case 3237:
        case 3238:
        case 3239:
        case 3240:
        case 3241:
        case 3242:
        case 3243:
        case 3244:
        case 3245:
        case 3246:
        case 3247:
        case 3248:
        case 3249:
        case 3250:
        case 3251:
        case 3252:
        case 3253:
        case 3254:
        case 3255:
        case 3256:
        case 3257:
        case 3258:
        case 3259:
        case 3260:
        case 3261:
        case 3262:
        case 3263:
        case 3264:
        case 3265:
        case 3266:
        case 3267:
        case 3268:
        case 3269:
        case 3270:
        case 3271:
        case 3272:
        case 3273:
        case 3274:
        case 3275:
        case 3276:
        case 3277:
        case 3278:
        case 3279:
        case 3280:
        case 3281:
        case 3282:
        case 3283:
        case 3284:
        case 3285:
        case 3286:
        case 3287:
        case 3288:
        case 3289:
        case 3290:
        case 3291:
        case 3292:
        case 3293:
        case 3294:
        case 3295:
        case 3296:
        case 3297:
        case 3298:
        case 3299:
          goto LABEL_322;
        case 3100:
          uint64_t v18 = @"L_BluetoothPipeDisconnected";
          break;
        case 3101:
          uint64_t v18 = @"L_BluetoothCreationFailedWithPipe";
          break;
        case 3200:
          uint64_t v18 = @"L_WiFiCreationFailed";
          break;
        case 3201:
          uint64_t v18 = @"L_AWDLCreationFailed";
          break;
        case 3210:
          uint64_t v18 = @"L_WiredCreationFailed";
          break;
        case 3300:
          uint64_t v18 = @"L_PowerAssertionEnable";
          break;
        case 3301:
          uint64_t v18 = @"L_PowerAssertionEnableFailure";
          break;
        case 3302:
          uint64_t v18 = @"L_PowerAssertionDisable";
          break;
        case 3303:
          uint64_t v18 = @"L_PowerAssertionDisableFailure";
          break;
        default:
          switch(a2)
          {
            case 2001:
              uint64_t v18 = @"LM_Start";
              break;
            case 2002:
              uint64_t v18 = @"LM_Ready";
              break;
            case 2003:
              uint64_t v18 = @"LM_Cancel";
              break;
            case 2004:
              uint64_t v18 = @"LM_LinkAvailable";
              break;
            case 2005:
              uint64_t v18 = @"LM_LinkReady";
              break;
            case 2006:
              uint64_t v18 = @"LM_LinkSuspended";
              break;
            case 2007:
              uint64_t v18 = @"LM_LinkUnavailable";
              break;
            case 2008:
              uint64_t v18 = @"LM_LinkReceivedData";
              break;
            case 2009:
              uint64_t v18 = @"LM_CancelAllLinks";
              break;
            case 2010:
              uint64_t v18 = @"LM_AlwaysOnWiFiQueryStart";
              break;
            case 2011:
              uint64_t v18 = @"LM_AlwaysOnWiFiQueryInProgress";
              break;
            case 2012:
              uint64_t v18 = @"LM_AlwaysOnWiFiQueryComplete";
              break;
            case 2013:
              uint64_t v18 = @"LM_LinkQualityUpdate";
              break;
            case 2014:
              uint64_t v18 = @"LM_AWDLSetupStart";
              break;
            case 2015:
              uint64_t v18 = @"LM_AWDLSetupFailed";
              break;
            case 2016:
              uint64_t v18 = @"LM_AWDLSetupComplete";
              break;
            default:
              switch(a2)
              {
                case 3400:
                  uint64_t v18 = @"L_UpgradeSendLocalKeys";
                  break;
                case 3401:
                  uint64_t v18 = @"L_UpgradeReceiveRemoteKeys";
                  break;
                case 3402:
                  uint64_t v18 = @"L_UpgradeSendLocalKeysEncryptedWithIDS";
                  break;
                case 3403:
                  uint64_t v18 = @"L_UpgradeReceiveRemoteKeysEncryptedWithIDS";
                  break;
                case 3500:
                  uint64_t v18 = @"BT_PeripheralManagerStateChange";
                  break;
                case 3501:
                  uint64_t v18 = @"BT_PeripheralManagerAdvertisingStart";
                  break;
                case 3502:
                  uint64_t v18 = @"BT_PeripheralManagerAdvertisingStarted";
                  break;
                case 3503:
                  uint64_t v18 = @"BT_PeripheralManagerAdvertisingStartFailed";
                  break;
                case 3504:
                  uint64_t v18 = @"BT_PeripheralManagerAdvertisingStop";
                  break;
                case 3505:
                  uint64_t v18 = @"BT_PeripheralManagerAdvertisingStopped";
                  break;
                case 3506:
                  uint64_t v18 = @"BT_PeripheralManagerAdvertisingStopFailed";
                  break;
                default:
                  goto LABEL_322;
              }
              break;
          }
          break;
      }
    }
  }
  else
  {
    if (a2 <= 10000)
    {
      if (a2 > 4899)
      {
        if (a2 > 5400)
        {
          switch(a2)
          {
            case 5500:
              uint64_t v18 = @"QueryKeys";
              break;
            case 5501:
              uint64_t v18 = @"QueriedKeys";
              break;
            case 5502:
              uint64_t v18 = @"QueryKeysFailed";
              break;
            case 5503:
              uint64_t v18 = @"EncryptLocalSuccess";
              break;
            case 5504:
              uint64_t v18 = @"EncryptLocalFailed";
              break;
            case 5505:
              uint64_t v18 = @"DecryptRemoteSuccess";
              break;
            case 5506:
              uint64_t v18 = @"DecryptRemoteFailed";
              break;
            default:
              switch(a2)
              {
                case 9000:
                  uint64_t v18 = @"DaemonStart";
                  break;
                case 9001:
                  uint64_t v18 = @"CompanionLinkChangeEnabledState";
                  break;
                case 9002:
                  uint64_t v18 = @"TestServerSetup";
                  break;
                case 9003:
                  uint64_t v18 = @"SimulatedCrash";
                  break;
                default:
                  if (a2 != 5401) {
                    goto LABEL_322;
                  }
                  uint64_t v18 = @"NotifyClientsFirstUnlockClassC";
                  break;
              }
              break;
          }
        }
        else
        {
          switch(a2)
          {
            case 4900:
              uint64_t v18 = @"BT_MiscNoBTCallbacksReceived";
              break;
            case 4901:
            case 4902:
            case 4903:
            case 4904:
            case 4905:
            case 4906:
            case 4907:
            case 4908:
            case 4909:
            case 4910:
            case 4911:
            case 4912:
            case 4913:
            case 4914:
            case 4915:
            case 4916:
            case 4917:
            case 4918:
            case 4919:
            case 4920:
            case 4921:
            case 4922:
            case 4923:
            case 4924:
            case 4925:
            case 4926:
            case 4927:
            case 4928:
            case 4929:
            case 4930:
            case 4931:
            case 4932:
            case 4933:
            case 4934:
            case 4935:
            case 4936:
            case 4937:
            case 4938:
            case 4939:
            case 4940:
            case 4941:
            case 4942:
            case 4943:
            case 4944:
            case 4945:
            case 4946:
            case 4947:
            case 4948:
            case 4949:
            case 4950:
            case 4951:
            case 4952:
            case 4953:
            case 4954:
            case 4955:
            case 4956:
            case 4957:
            case 4958:
            case 4959:
            case 4960:
            case 4961:
            case 4962:
            case 4963:
            case 4964:
            case 4965:
            case 4966:
            case 4967:
            case 4968:
            case 4969:
            case 4970:
            case 4971:
            case 4972:
            case 4973:
            case 4974:
            case 4975:
            case 4976:
            case 4977:
            case 4978:
            case 4979:
            case 4980:
            case 4981:
            case 4982:
            case 4983:
            case 4984:
            case 4985:
            case 4986:
            case 4987:
            case 4988:
            case 4989:
            case 4990:
            case 4991:
            case 4992:
            case 4993:
            case 4994:
            case 4995:
            case 4996:
            case 4997:
            case 4998:
            case 4999:
              goto LABEL_322;
            case 5000:
              uint64_t v18 = @"Device_Create";
              break;
            case 5001:
              uint64_t v18 = @"Device_Register";
              break;
            case 5002:
              uint64_t v18 = @"Device_Unregister";
              break;
            case 5003:
              uint64_t v18 = @"Device_Enable";
              break;
            case 5004:
              uint64_t v18 = @"Device_Disable";
              break;
            case 5005:
              uint64_t v18 = @"Device_GenerateLocalKeys";
              break;
            case 5006:
              uint64_t v18 = @"Device_SaveRemoteKeys";
              break;
            case 5007:
              uint64_t v18 = @"Device_Registered";
              break;
            case 5008:
              uint64_t v18 = @"Device_RegisterFailed";
              break;
            case 5009:
              uint64_t v18 = @"Device_UnknownNRUUID";
              break;
            case 5010:
              uint64_t v18 = @"Device_InvalidOperationOnUnregisteredDevice";
              break;
            case 5011:
              uint64_t v18 = @"Device_UpdateOperationalProperties";
              break;
            case 5012:
              uint64_t v18 = @"Device_MergeOperationalProperties";
              break;
            default:
              if (a2 != 5400) {
                goto LABEL_322;
              }
              uint64_t v18 = @"LockStateUpdate";
              break;
          }
        }
      }
      else
      {
        switch(a2)
        {
          case 4000:
            uint64_t v18 = @"BT_PeripheralConnect";
            break;
          case 4001:
            uint64_t v18 = @"BT_PeripheralConnected";
            break;
          case 4002:
            uint64_t v18 = @"BT_PeripheralConnectFailed";
            break;
          case 4003:
            uint64_t v18 = @"BT_PeripheralDisconnect";
            break;
          case 4004:
            uint64_t v18 = @"BT_PeripheralDisconnected";
            break;
          case 4005:
            uint64_t v18 = @"BT_PeripheralConnectSkipMissingPeripheral";
            break;
          case 4006:
            uint64_t v18 = @"BT_PeripheralConnectSkipMissingUUID";
            break;
          case 4007:
            uint64_t v18 = @"BT_PeripheralAddReference";
            break;
          case 4008:
            uint64_t v18 = @"BT_PeripheralRemoveReference";
            break;
          case 4009:
            uint64_t v18 = @"BT_PeripheralRetrieveAll";
            break;
          case 4010:
            uint64_t v18 = @"BT_PeripheralRetrievedAll";
            break;
          case 4011:
            uint64_t v18 = @"BT_PeripheralNotRetrieving";
            break;
          case 4012:
            uint64_t v18 = @"BT_PeripheralScanStart";
            break;
          case 4013:
            uint64_t v18 = @"BT_PeripheralDiscovered";
            break;
          case 4014:
            uint64_t v18 = @"BT_PeripheralScanStop";
            break;
          case 4015:
            uint64_t v18 = @"BT_PeripheralHasUnpairedBluetooth";
            break;
          case 4100:
            uint64_t v18 = @"BT_CentralManagerStateChange";
            break;
          case 4200:
            uint64_t v18 = @"BT_PipeManagerStateChange";
            break;
          case 4201:
            uint64_t v18 = @"BT_PipeRegister";
            break;
          case 4202:
            uint64_t v18 = @"BT_PipeRegistered";
            break;
          case 4203:
            uint64_t v18 = @"BT_PipeRegisteredUnknown";
            break;
          case 4204:
            uint64_t v18 = @"BT_PipeRegisterFailed";
            break;
          case 4205:
            uint64_t v18 = @"BT_PipeRegisterFailedUnknown";
            break;
          case 4206:
            uint64_t v18 = @"BT_PipeUnregister";
            break;
          case 4207:
            uint64_t v18 = @"BT_PipeUnregistered";
            break;
          case 4208:
            uint64_t v18 = @"BT_PipeUnregisteredUnknown";
            break;
          case 4209:
            uint64_t v18 = @"BT_PipeConnect";
            break;
          case 4210:
            uint64_t v18 = @"BT_PipeConnected";
            break;
          case 4211:
            uint64_t v18 = @"BT_PipeDisconnected";
            break;
          case 4212:
            uint64_t v18 = @"BT_PipeDisconnectedFail";
            break;
          case 4213:
            uint64_t v18 = @"BT_PipeCycleRegistrationCheck";
            break;
          case 4214:
            uint64_t v18 = @"BT_PipeCycleRegistrationStart";
            break;
          case 4215:
            uint64_t v18 = @"BT_PipeCycleRegistrationReenable";
            break;
          case 4216:
            uint64_t v18 = @"BT_PipeCycleRegistrationSkip";
            break;
          case 4217:
            uint64_t v18 = @"BT_PipeReceivedUrgentPrelude";
            break;
          case 4301:
            uint64_t v18 = @"BT_DatagramPipeRegister";
            break;
          case 4302:
            uint64_t v18 = @"BT_DatagramPipeRegistered";
            break;
          case 4303:
            uint64_t v18 = @"BT_DatagramPipeRegisterFailed";
            break;
          case 4304:
            uint64_t v18 = @"BT_DatagramPipeUnregister";
            break;
          case 4305:
            uint64_t v18 = @"BT_DatagramPipeUnregistered";
            break;
          case 4306:
            uint64_t v18 = @"BT_DatagramPipeConnected";
            break;
          case 4307:
            uint64_t v18 = @"BT_DatagramPipeDisconnected";
            break;
          case 4401:
            uint64_t v18 = @"BT_UrgentPipeRegister";
            break;
          case 4402:
            uint64_t v18 = @"BT_UrgentPipeRegistered";
            break;
          case 4403:
            uint64_t v18 = @"BT_UrgentPipeRegisterFailed";
            break;
          case 4404:
            uint64_t v18 = @"BT_UrgentPipeUnregister";
            break;
          case 4405:
            uint64_t v18 = @"BT_UrgentPipeUnregistered";
            break;
          case 4406:
            uint64_t v18 = @"BT_UrgentPipeConnected";
            break;
          case 4407:
            uint64_t v18 = @"BT_UrgentPipeDisconnected";
            break;
          default:
            goto LABEL_322;
        }
      }
      goto LABEL_323;
    }
    if (a2 <= 14000)
    {
      if (a2 > 11000)
      {
        if (a2 > 12000)
        {
          if (a2 <= 12002)
          {
            if (a2 == 12001) {
              uint64_t v18 = @"CompanionProxyCreated";
            }
            else {
              uint64_t v18 = @"CompanionProxyRegistered";
            }
            goto LABEL_323;
          }
          if (a2 == 12003)
          {
            uint64_t v18 = @"CompanionProxyUnregistered";
            goto LABEL_323;
          }
          if (a2 == 13001)
          {
            uint64_t v18 = @"PolicyTrafficClassUpdate";
            goto LABEL_323;
          }
          goto LABEL_322;
        }
        switch(a2)
        {
          case 11001:
            uint64_t v18 = @"BeginActivity";
            break;
          case 11002:
            uint64_t v18 = @"EndActivity";
            break;
          case 11003:
            uint64_t v18 = @"LocalEndpointUpdated";
            break;
          case 11004:
            uint64_t v18 = @"ReceivedLiveLinkAdvisory";
            break;
          case 11005:
            uint64_t v18 = @"LocalAWDLEndpointUpdated";
            break;
          default:
            goto LABEL_322;
        }
      }
      else
      {
        switch(a2)
        {
          case 10001:
            uint64_t v18 = @"IDSServiceCreated";
            break;
          case 10002:
            uint64_t v18 = @"IDSSessionCreated";
            break;
          case 10003:
            uint64_t v18 = @"IDSSessionSentInvitation";
            break;
          case 10004:
            uint64_t v18 = @"IDSSessionReceivedInvitation";
            break;
          case 10005:
            uint64_t v18 = @"IDSSessionInvitationCollided";
            break;
          case 10006:
            uint64_t v18 = @"IDSSessionAcceptInvitation";
            break;
          case 10007:
            uint64_t v18 = @"IDSSessionCancelInvitation";
            break;
          case 10008:
            uint64_t v18 = @"IDSSessionStarted";
            break;
          case 10009:
            uint64_t v18 = @"IDSSessionEnded";
            break;
          case 10010:
            uint64_t v18 = @"IKERestart";
            break;
          case 10011:
            uint64_t v18 = @"IKESessionClassDConnecting";
            break;
          case 10012:
            uint64_t v18 = @"IKESessionClassDConnected";
            break;
          case 10013:
            uint64_t v18 = @"IKECancelled";
            break;
          case 10014:
            uint64_t v18 = @"IDSSessionInvalidate";
            break;
          case 10015:
            uint64_t v18 = @"CloudLinkEnable";
            break;
          case 10016:
            uint64_t v18 = @"CloudLinkDisable";
            break;
          case 10017:
            uint64_t v18 = @"LinkIdleTimeout";
            break;
          case 10018:
            uint64_t v18 = @"RestartOnResume";
            break;
          case 10019:
            uint64_t v18 = @"ReplaceExistingSession";
            break;
          case 10020:
            uint64_t v18 = @"ConnectionStateChange";
            break;
          case 10021:
            uint64_t v18 = @"ConnectionReadError";
            break;
          case 10022:
            uint64_t v18 = @"ConnectionWriteError";
            break;
          case 10023:
            uint64_t v18 = @"DeferIKEClassD";
            break;
          case 10024:
            uint64_t v18 = @"DeferIKEClassC";
            break;
          case 10025:
            uint64_t v18 = @"DeferIDSSessionInvitation";
            break;
          case 10026:
            uint64_t v18 = @"IDSSessionDeclineInvitation";
            break;
          default:
            goto LABEL_322;
        }
      }
    }
    else
    {
      if (a2 <= 18001)
      {
        if (a2 <= 16000)
        {
          switch(a2)
          {
            case 14001:
              uint64_t v18 = @"DirectToCloudCreated";
              break;
            case 14002:
              uint64_t v18 = @"DirectToCloudRegistered";
              break;
            case 14003:
              uint64_t v18 = @"DirectToCloudUnregistered";
              break;
            case 14004:
              uint64_t v18 = @"DirectToCloudRequestAvailable";
              break;
            case 14005:
              uint64_t v18 = @"DirectToCloudRequestUnavailable";
              break;
            case 14006:
              uint64_t v18 = @"DirectToCloudLinkRecommendationQueryStart";
              break;
            case 14007:
              uint64_t v18 = @"DirectToCloudLinkRecommendationResponseReceived";
              break;
            default:
              switch(a2)
              {
                case 15001:
                  uint64_t v18 = @"PreferWiFiAgentCreated";
                  break;
                case 15002:
                  uint64_t v18 = @"PreferWiFiAgentRegistered";
                  break;
                case 15003:
                  uint64_t v18 = @"PreferWiFiAgentUnregistered";
                  break;
                case 15004:
                  uint64_t v18 = @"PreferWiFiAgentActivated";
                  break;
                default:
                  goto LABEL_322;
              }
              break;
          }
          goto LABEL_323;
        }
        if (a2 > 17000)
        {
          switch(a2)
          {
            case 17001:
              uint64_t v18 = @"QuickRelayAgentCreated";
              break;
            case 17002:
              uint64_t v18 = @"QuickRelayAgentRegistered";
              break;
            case 17003:
              uint64_t v18 = @"QuickRelayAgentUnregistered";
              break;
            case 17004:
              uint64_t v18 = @"QuickRelayAgentSuspended";
              break;
            case 17005:
              uint64_t v18 = @"QuickRelayAgentActivated";
              break;
            default:
              if (a2 != 18001) {
                goto LABEL_322;
              }
              uint64_t v18 = @"BTLinkPreferencesAgentCreated";
              break;
          }
          goto LABEL_323;
        }
        switch(a2)
        {
          case 16001:
            uint64_t v18 = @"PhoneCallRelayAgentCreated";
            goto LABEL_323;
          case 16002:
            uint64_t v18 = @"PhoneCallRelayAgentRegistered";
            goto LABEL_323;
          case 16003:
            uint64_t v18 = @"PhoneCallRelayAgentUnregistered";
            goto LABEL_323;
        }
LABEL_322:
        id v19 = (__CFString *)[objc_alloc((Class)NSString) initWithFormat:@"Unknown(%lld)", a2];
        CFStringRef v14 = &stru_1001C9648;
        uint64_t v18 = v19;
        goto LABEL_323;
      }
      if (a2 <= 20002)
      {
        if (a2 <= 19000)
        {
          if (a2 == 18002)
          {
            uint64_t v18 = @"BTLinkPreferencesAgentRegistered";
            goto LABEL_323;
          }
          if (a2 == 18003)
          {
            uint64_t v18 = @"BTLinkPreferencesAgentUnregistered";
            goto LABEL_323;
          }
          goto LABEL_322;
        }
        switch(a2)
        {
          case 19001:
            uint64_t v18 = @"CmpLnkViabilityAgentCreated";
            break;
          case 19002:
            uint64_t v18 = @"CmpLnkViabilityAgentRegistered";
            break;
          case 19003:
            uint64_t v18 = @"CmpLnkViabilityAgentUnregistered";
            break;
          case 19004:
            uint64_t v18 = @"CmpLnkViabilityAgentSuspended";
            break;
          case 19005:
            uint64_t v18 = @"CmpLnkViabilityAgentActivated";
            break;
          default:
            if (a2 == 20001)
            {
              uint64_t v18 = @"CompanionProxyConfigCreated";
            }
            else
            {
              if (a2 != 20002) {
                goto LABEL_322;
              }
              uint64_t v18 = @"CompanionProxyConfigRegistered";
            }
            break;
        }
      }
      else if (a2 > 30100)
      {
        switch(a2)
        {
          case 40001:
            uint64_t v18 = @"NWActivityFragmentReporterCreate";
            break;
          case 40002:
            uint64_t v18 = @"NWActivityFragmentReporterStart";
            break;
          case 40003:
            uint64_t v18 = @"NWActivityFragmentReporterCancel";
            break;
          case 40004:
            uint64_t v18 = @"NWActivityFragmentReporterReceivedFragmentRequest";
            break;
          default:
            if (a2 != 30101) {
              goto LABEL_322;
            }
            uint64_t v18 = @"LaunchOnDemandLaunchEventReceived";
            break;
        }
      }
      else
      {
        switch(a2)
        {
          case 30001:
            uint64_t v18 = @"AutoLinkUpgradeMonitorCreate";
            break;
          case 30002:
            uint64_t v18 = @"AutoLinkUpgradeMonitorStart";
            break;
          case 30003:
            uint64_t v18 = @"AutoLinkUpgradeMonitorCancel";
            break;
          case 30004:
            uint64_t v18 = @"AutoLinkUpgradeMonitorReceivedUpdate";
            break;
          default:
            if (a2 != 20003) {
              goto LABEL_322;
            }
            uint64_t v18 = @"CompanionProxyConfigUnregistered";
            break;
        }
      }
    }
  }
LABEL_323:
  if (v12) {
    id v20 = " ";
  }
  else {
    id v20 = "";
  }
  if (v12) {
    CFStringRef v14 = v8;
  }
  id v21 = [v13 initWithFormat:@"%@%s%@%s%@", v16, v17, v18, v20, v14];

  if (qword_1001F4D00 != -1) {
    dispatch_once(&qword_1001F4D00, &stru_1001C84B0);
  }
  uint64_t v22 = (id)qword_1001F4CF8;
  if (v7)
  {
    uint64_t v23 = _NRCopyEventLogObjectForNRUUID();

    uint64_t v22 = v23;
  }
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v21;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}@", (uint8_t *)&buf, 0xCu);
  }
  if (v10)
  {
    id v24 = objc_alloc((Class)NSString);
    id v25 = (void *)_NRCopyTimeString();
    id v26 = [v24 initWithFormat:@"\n    %@ : %@", v25, v21];

    os_unfair_lock_lock(&stru_1001F4CE8);
    [(id)qword_1001F4CE0 setObject:v26 atIndexedSubscript:byte_1001F4CEC];
    byte_1001F4CEC = (byte_1001F4CEC + 1) & 0x7F;
    os_unfair_lock_unlock(&stru_1001F4CE8);
  }
}

uint64_t sub_1001321C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    id v1 = [objc_alloc((Class)NSMutableArray) initWithCapacity:128];
    uint64_t v2 = (void *)qword_1001F4CE0;
    qword_1001F4CE0 = (uint64_t)v1;
  }

  return __NRLogRegisterSimCrashHook(sub_100132264);
}

void sub_100132220(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "events");
  uint64_t v2 = qword_1001F4CF8;
  qword_1001F4CF8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_100132264(uint64_t a1)
{
  return sub_10012F648(0, 9003, 0, a1);
}

__CFString *sub_100132278(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      CFStringRef v4 = @"");
      CFStringRef v5 = CFSTR("(");
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v6 = [v3 description];
LABEL_21:

        goto LABEL_22;
      }
      CFStringRef v4 = @"}");
      CFStringRef v5 = CFSTR("({");
    }
    id v6 = (__CFString *)[objc_alloc((Class)NSMutableString) initWithString:v5];
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v7 = v3;
    id v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v19;
      char v11 = 1;
      do
      {
        if (*(void *)v19 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = (void *)**((void **)&v18 + 1);
        if ((v11 & 1) == 0) {
          [(__CFString *)v6 appendString:@", ", (void)v18];
        }
        id v13 = [v12 description:v18];
        [(__CFString *)v6 appendString:v13];

        if ((unint64_t)v9 >= 2)
        {
          for (uint64_t i = 1; (id)i != v9; ++i)
          {
            if (*(void *)v19 != v10) {
              objc_enumerationMutation(v7);
            }
            BOOL v15 = *(void **)(*((void *)&v18 + 1) + 8 * i);
            [(__CFString *)v6 appendString:@", "];
            CFStringRef v16 = [v15 description];
            [(__CFString *)v6 appendString:v16];
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
        char v11 = 0;
      }
      while (v9);
    }

    [(__CFString *)v6 appendString:v4];
    goto LABEL_21;
  }
  id v6 = @"(null)";
LABEL_22:

  return v6;
}

void sub_1001325B0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 == -1) {
        goto LABEL_11;
      }
      goto LABEL_15;
    }
  }
  else
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 == -1)
      {
LABEL_11:
        _NRLogWithArgs();
        goto LABEL_12;
      }
LABEL_15:
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      goto LABEL_11;
    }
  }
LABEL_12:
}

void sub_100132720(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4D08;
  qword_1001F4D08 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100132764(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 == -1) {
        goto LABEL_11;
      }
      goto LABEL_15;
    }
  }
  else
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 == -1)
      {
LABEL_11:
        _NRLogWithArgs();
        goto LABEL_12;
      }
LABEL_15:
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      goto LABEL_11;
    }
  }
LABEL_12:
}

void sub_1001328D4(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (a1 && !*(unsigned char *)(a1 + 11))
  {
    dispatch_time_t v6 = dispatch_time(0x8000000000000000, 1000000000);
    id v7 = *(NSObject **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001329AC;
    block[3] = &unk_1001C8500;
    void block[4] = a1;
    int v10 = a3;
    id v9 = v5;
    dispatch_after(v6, v7, block);
  }
}

uint64_t sub_1001329AC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  if (!v2 || !*(unsigned char *)(v2 + 11))
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      uint64_t v4 = *(void *)(v1 + 32);
      id v3 = *(void **)(v1 + 40);
      uint64_t v5 = *(unsigned int *)(v1 + 48);
      id v6 = (id)qword_1001F4D08;
      uint64_t v17 = v5;
      id v18 = [v3 length];
      uint64_t v15 = 146;
      uint64_t v16 = v4;
      id v13 = "";
      CFStringRef v14 = "-[NRDDTLSStack retransmitOutboundEncryptedData:retransmitCount:]_block_invoke";
      _NRLogWithArgs();
    }
    uint64_t v7 = *(void *)(v1 + 32);
    if (v7)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v7 + 64));
      uint64_t v9 = *(void *)(v1 + 32);
    }
    else
    {
      uint64_t v9 = 0;
      id WeakRetained = 0;
    }
    [WeakRetained handleDTLSStack:v9 outboundEncryptedData:*(void *)(v1 + 40) v13 v14 v15 v16 v17 v18];

    uint64_t v10 = *(void *)(v1 + 32);
    uint64_t v11 = *(void *)(v1 + 40);
    uint64_t v12 = (*(_DWORD *)(v1 + 48) + 1);
    return sub_1001328D4(v10, v11, v12);
  }
  return result;
}

void sub_100132B10(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 9))
  {
    *(unsigned char *)(a1 + 9) = 1;
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      id v2 = (id)qword_1001F4D08;
      _NRLogWithArgs();
    }
    id v3 = *(NSObject **)(a1 + 40);
    completion[0] = _NSConcreteStackBlock;
    completion[1] = 3221225472;
    completion[2] = sub_100132C58;
    completion[3] = &unk_1001C8528;
    completion[4] = a1;
    nw_connection_receive(v3, 1u, 0xFFFFFFFF, completion);
  }
}

void sub_100132C58(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v25 = a2;
  id v8 = a3;
  id v9 = a5;
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    *(unsigned char *)(v10 + 9) = 0;
  }
  if (v25 && !v9)
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      id v11 = (id)qword_1001F4D08;
      uint64_t v12 = *(void *)(a1 + 32);
      id v13 = [v25 length];
      uint64_t v14 = *(void *)(a1 + 32);
      if (v14) {
        uint64_t v14 = *(void *)(v14 + 40);
      }
      id v23 = v13;
      uint64_t v24 = v14;
      uint64_t v21 = 168;
      uint64_t v22 = v12;
      long long v19 = "";
      long long v20 = "-[NRDDTLSStack readOnUDPConnection]_block_invoke";
      _NRLogWithArgs();
    }
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v15 + 64));
      uint64_t v17 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v17 = 0;
      id WeakRetained = 0;
    }
    [WeakRetained handleDTLSStack:v17 outboundEncryptedData:v25, v19, v20, v21, v22, v23, v24];

    uint64_t v18 = *(void *)(a1 + 32);
    if (v18)
    {
      if (*(unsigned char *)(v18 + 12))
      {
LABEL_19:
        sub_100132B10(v18);
        goto LABEL_26;
      }
      *(unsigned char *)(v18 + 12) = 1;
      uint64_t v18 = *(void *)(a1 + 32);
    }
    sub_1001328D4(v18, v25, 1);
    uint64_t v18 = *(void *)(a1 + 32);
    goto LABEL_19;
  }
  if (qword_1001F4D10 != -1) {
    dispatch_once(&qword_1001F4D10, &stru_1001C8638);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    _NRLogWithArgs();
  }
LABEL_26:
}

void sub_100132E98(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 10))
  {
    *(unsigned char *)(a1 + 10) = 1;
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      id v2 = (id)qword_1001F4D08;
      _NRLogWithArgs();
    }
    id v3 = *(NSObject **)(a1 + 32);
    completion[0] = _NSConcreteStackBlock;
    completion[1] = 3221225472;
    completion[2] = sub_100132FE0;
    completion[3] = &unk_1001C8528;
    completion[4] = a1;
    nw_connection_receive(v3, 1u, 0xFFFFFFFF, completion);
  }
}

void sub_100132FE0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v24 = a2;
  id v8 = a3;
  id v9 = a5;
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    *(unsigned char *)(v10 + 10) = 0;
  }
  if (!v24 || v9)
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      _NRLogWithArgs();
    }
  }
  else
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      id v11 = (id)qword_1001F4D08;
      uint64_t v12 = *(void *)(a1 + 32);
      id v13 = [v24 length];
      uint64_t v14 = *(void *)(a1 + 32);
      if (v14) {
        uint64_t v14 = *(void *)(v14 + 32);
      }
      id v22 = v13;
      uint64_t v23 = v14;
      uint64_t v20 = 194;
      uint64_t v21 = v12;
      uint64_t v18 = "";
      long long v19 = "-[NRDDTLSStack readOnDTLSConnection]_block_invoke";
      _NRLogWithArgs();
    }
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v15 + 64));
      uint64_t v17 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v17 = 0;
      id WeakRetained = 0;
    }
    [WeakRetained handleDTLSStack:v17 inboundDecryptedData:v24 v18 v19 v20 v21 v22 v23];

    sub_100132E98(*(void *)(a1 + 32));
  }
}

void sub_1001331F8(uint64_t a1)
{
  if (a1)
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      _NRLogWithArgs();
    }
    sub_100132E98(a1);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    [WeakRetained handleIsReady:a1];
  }
}

void sub_1001332F0(uint64_t a1, void *a2)
{
  options = a2;
  sec_protocol_options_set_tls_server_name(options, "::1");
  sec_protocol_options_set_peer_authentication_required(options, 0);
  sec_protocol_options_append_tls_ciphersuite(options, tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA|0x80);
  sec_protocol_options_append_tls_ciphersuite(options, (tls_ciphersuite_t)0xAEu);
  sec_protocol_options_append_tls_ciphersuite(options, (tls_ciphersuite_t)0x8Du);
  sec_protocol_options_append_tls_ciphersuite(options, (tls_ciphersuite_t)0x8Cu);
  sec_protocol_options_add_pre_shared_key(options, *(dispatch_data_t *)(a1 + 32), *(dispatch_data_t *)(a1 + 32));
}

void sub_10013338C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    id v6 = *(NSObject **)(v5 + 48);
  }
  else {
    id v6 = 0;
  }
  nw_connection_set_queue(v3, v6);
  if (qword_1001F4D10 != -1) {
    dispatch_once(&qword_1001F4D10, &stru_1001C8638);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    _NRLogWithArgs();
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1001338A0;
  handler[3] = &unk_1001C8578;
  void handler[4] = *(void *)(a1 + 32);
  id v9 = v4;
  uint64_t v7 = v4;
  nw_connection_set_state_changed_handler(v7, handler);
  nw_connection_start(v7);
}

void sub_1001334E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  sec_protocol_options_set_peer_authentication_required(v3, 0);
  verify_block[0] = _NSConcreteStackBlock;
  verify_block[1] = 3221225472;
  verify_block[2] = sub_100133784;
  verify_block[3] = &unk_1001C85C8;
  uint64_t v4 = *(void *)(a1 + 32);
  verify_void block[4] = v4;
  if (v4) {
    uint64_t v5 = *(NSObject **)(v4 + 48);
  }
  else {
    uint64_t v5 = 0;
  }
  sec_protocol_options_set_verify_block(v3, verify_block, v5);
  sec_protocol_options_append_tls_ciphersuite(v3, tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA|0x80);
  sec_protocol_options_append_tls_ciphersuite(v3, (tls_ciphersuite_t)0xAEu);
  sec_protocol_options_append_tls_ciphersuite(v3, (tls_ciphersuite_t)0x8Du);
  sec_protocol_options_append_tls_ciphersuite(v3, (tls_ciphersuite_t)0x8Cu);
  sec_protocol_options_add_pre_shared_key(v3, *(dispatch_data_t *)(a1 + 40), *(dispatch_data_t *)(a1 + 40));
}

void sub_1001335CC(uint64_t a1, int a2, void *a3)
{
  id v6 = a3;
  if (qword_1001F4D10 != -1) {
    dispatch_once(&qword_1001F4D10, &stru_1001C8638);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    id v5 = (id)qword_1001F4D08;
    nw_connection_state_to_string();
    _NRLogWithArgs();
  }
  if (a2 == 3)
  {
    sub_1001331F8(*(void *)(a1 + 32));
  }
  else if ((a2 & 0xFFFFFFFE) == 4)
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100133784(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v6 = a3;
  uint64_t v7 = a4;
  if (qword_1001F4D10 != -1) {
    dispatch_once(&qword_1001F4D10, &stru_1001C8638);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    _NRLogWithArgs();
  }
  v7[2](v7, 1);
}

void sub_1001338A0(uint64_t a1, int a2, void *a3)
{
  id v12 = a3;
  if (qword_1001F4D10 != -1) {
    dispatch_once(&qword_1001F4D10, &stru_1001C8638);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    id v5 = (id)qword_1001F4D08;
    nw_connection_state_to_string();
    _NRLogWithArgs();
  }
  if (a2 == 3)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (!v6) {
      goto LABEL_31;
    }
    if (!*(void *)(v6 + 32)) {
      goto LABEL_20;
    }
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      id v7 = (id)qword_1001F4D08;
      _NRLogWithArgs();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = v8 ? *(NSObject **)(v8 + 32) : 0;
    nw_connection_cancel(v9);
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10
      && (v11 = *(void **)(v10 + 32), *(void *)(v10 + 32) = 0, v11, (uint64_t v6 = *(void *)(a1 + 32)) != 0))
    {
LABEL_20:
      objc_storeStrong((id *)(v6 + 32), *(id *)(a1 + 40));
      sub_1001331F8(*(void *)(a1 + 32));
    }
    else
    {
LABEL_31:
      sub_1001331F8(0);
    }
  }
  else if ((a2 & 0xFFFFFFFE) == 4)
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      _NRLogWithArgs();
    }
  }
}

id *sub_100133B54(id *a1, void *a2, char a3, void *a4)
{
  id v8 = a2;
  id v9 = a4;
  if (!a1) {
    goto LABEL_17;
  }
  v35.receiver = a1;
  v35.super_class = (Class)NRDDTLSStack;
  uint64_t v10 = (id *)[super init];
  if (!v10)
  {
    id v22 = sub_100133F88();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v24 = sub_100133F88();
      _NRLogWithArgs();
    }
    id v8 = (id)_os_log_pack_size();
    id v9 = (char *)handler - ((__chkstk_darwin(v8) + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v25 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v25 = 136446210;
    *(void *)(v25 + 4) = "-[NRDDTLSStack initDTLSWithQueue:server:delegate:]";
    sub_100133F88();
    _NRLogAbortWithPack();
LABEL_15:
    id v26 = sub_100133F88();
    int v27 = _NRLogIsLevelEnabled();

    if (v27)
    {
      id v28 = sub_100133F88();
      _NRLogWithArgs();

      uint64_t v20 = 0;
      goto LABEL_11;
    }
LABEL_17:
    uint64_t v20 = 0;
    goto LABEL_11;
  }
  a1 = v10;
  if (!v8) {
    goto LABEL_15;
  }
  v10[7] = (id)atomic_fetch_add_explicit(&qword_1001F4578, 1uLL, memory_order_relaxed);
  objc_storeStrong(v10 + 6, a2);
  *((unsigned char *)a1 + 8) = a3;
  objc_storeWeak(a1 + 8, v9);
  *((_WORD *)a1 + 7) = sub_100133FDC();
  *((_WORD *)a1 + 8) = sub_100133FDC();
  __int16 v34 = 0;
  *(_DWORD *)__str = 0;
  snprintf(__str, 6uLL, "%u", *((unsigned __int16 *)a1 + 7));
  __int16 v32 = 0;
  *(_DWORD *)unsigned int port = 0;
  snprintf(port, 6uLL, "%u", *((unsigned __int16 *)a1 + 8));
  if (qword_1001F4D10 != -1) {
    dispatch_once(&qword_1001F4D10, &stru_1001C8638);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    _NRLogWithArgs();
  }
  nw_endpoint_t host = nw_endpoint_create_host("::", port);
  secure_udp = nw_parameters_create_secure_udp(_nw_parameters_configure_protocol_disable, _nw_parameters_configure_protocol_default_configuration);
  nw_parameters_set_local_address();
  id v13 = nw_endpoint_create_host("localhost", __str);
  nw_connection_t v14 = nw_connection_create(v13, secure_udp);
  id v15 = a1[5];
  a1[5] = v14;

  uint64_t v16 = a1[5];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100134214;
  handler[3] = &unk_1001C8618;
  uint64_t v17 = a1;
  char v30 = v17;
  nw_connection_set_state_changed_handler(v16, handler);
  uint64_t v18 = a1[6];
  long long v19 = a1[5];
  nw_connection_set_queue(v19, v18);

  nw_connection_start((nw_connection_t)a1[5]);
  a1 = v17;

  uint64_t v20 = a1;
LABEL_11:

  return v20;
}

id sub_100133F88()
{
  if (qword_1001F4D10 != -1) {
    dispatch_once(&qword_1001F4D10, &stru_1001C8638);
  }
  id v0 = (void *)qword_1001F4D08;

  return v0;
}

uint64_t sub_100133FDC()
{
  while (1)
  {
    while (1)
    {
      __int16 v0 = word_1001F4D18;
      unsigned int v1 = (unsigned __int16)word_1001F4D18++ + 1;
      if ((unsigned __int16)(v0 + 2) <= 0xC001u)
      {
        uint32_t v2 = arc4random_uniform(0x3FFFu);
        unsigned int v1 = v2 - 0x4000;
        word_1001F4D18 = v2 - 0x4000;
      }
      *(_WORD *)&v7[10] = 0;
      *(void *)&v7[12] = 0;
      uint64_t v8 = 0;
      *(_WORD *)id v7 = 7708;
      *(void *)&v7[2] = bswap32(v1) >> 16;
      int v3 = socket(30, 2, 0);
      if ((v3 & 0x80000000) == 0) {
        break;
      }
      id v5 = __error();
      if (strerror_r(*v5, __strerrbuf, 0x80uLL)) {
        __strerrbuf[0] = 0;
      }
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4D10 != -1) {
          dispatch_once(&qword_1001F4D10, &stru_1001C8638);
        }
        _NRLogWithArgs();
      }
    }
    int v4 = v3;
    if (!bind(v3, (const sockaddr *)v7, 0x1Cu)) {
      break;
    }
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      _NRLogWithArgs();
    }
    close(v4);
  }
  close(v4);
  return (unsigned __int16)word_1001F4D18;
}

void sub_100134214(uint64_t a1, int a2, void *a3)
{
  id v26 = a3;
  if (qword_1001F4D10 != -1) {
    dispatch_once(&qword_1001F4D10, &stru_1001C8638);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    id v5 = (id)qword_1001F4D08;
    nw_connection_state_to_string();
    _NRLogWithArgs();
  }
  if (a2 == 3)
  {
    sub_100132B10(*(void *)(a1 + 32));
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4D10 != -1) {
          dispatch_once(&qword_1001F4D10, &stru_1001C8638);
        }
        _NRLogWithArgs();
      }
      *(void *)&long long v7 = -1;
      *((void *)&v7 + 1) = -1;
      buffer[0] = v7;
      buffer[1] = v7;
      dispatch_data_t v8 = dispatch_data_create(buffer, 0x20uLL, 0, 0);
      __int16 v41 = 0;
      *(_DWORD *)__str = 0;
      snprintf(__str, 6uLL, "%u", *(unsigned __int16 *)(v6 + 14));
      __int16 v39 = 0;
      *(_DWORD *)unsigned int port = 0;
      snprintf(port, 6uLL, "%u", *(unsigned __int16 *)(v6 + 16));
      nw_endpoint_t host = nw_endpoint_create_host("::", __str);
      if (*(unsigned char *)(v6 + 8))
      {
        configure_dtls = _NSConcreteStackBlock;
        uint64_t v28 = 3221225472;
        id v29 = sub_1001332F0;
        char v30 = &unk_1001C8550;
        id v31 = v8;
        uint64_t v10 = nw_parameters_create_secure_udp(&configure_dtls, _nw_parameters_configure_protocol_default_configuration);
        nw_parameters_set_local_address();
        nw_listener_t v11 = nw_listener_create(v10);
        id v12 = *(void **)(v6 + 24);
        *(void *)(v6 + 24) = v11;

        id v13 = *(NSObject **)(v6 + 48);
        nw_connection_t v14 = *(id *)(v6 + 24);
        nw_listener_set_queue(v14, v13);

        id v15 = *(NSObject **)(v6 + 24);
        handler = _NSConcreteStackBlock;
        uint64_t v34 = 3221225472;
        objc_super v35 = sub_10013338C;
        long long v36 = &unk_1001C85A0;
        uint64_t v37 = v6;
        nw_listener_set_new_connection_handler(v15, &handler);
        nw_listener_start(*(nw_listener_t *)(v6 + 24));
        if (qword_1001F4D10 != -1) {
          dispatch_once(&qword_1001F4D10, &stru_1001C8638);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4D10 != -1) {
            dispatch_once(&qword_1001F4D10, &stru_1001C8638);
          }
          id v16 = (id)qword_1001F4D08;
          _NRLogWithArgs();
        }
        uint64_t v17 = v31;
      }
      else
      {
        configure_dtls = _NSConcreteStackBlock;
        uint64_t v28 = 3221225472;
        id v29 = sub_1001334E8;
        char v30 = &unk_1001C85F0;
        id v31 = v6;
        __int16 v32 = v8;
        uint64_t v18 = nw_parameters_create_secure_udp(&configure_dtls, _nw_parameters_configure_protocol_default_configuration);
        nw_parameters_set_local_address();
        long long v19 = nw_endpoint_create_host("localhost", port);
        nw_connection_t v20 = nw_connection_create(v19, v18);
        uint64_t v21 = *(void **)(v6 + 32);
        *(void *)(v6 + 32) = v20;

        id v22 = *(NSObject **)(v6 + 32);
        handler = _NSConcreteStackBlock;
        uint64_t v34 = 3221225472;
        objc_super v35 = sub_1001335CC;
        long long v36 = &unk_1001C8618;
        uint64_t v37 = v6;
        nw_connection_set_state_changed_handler(v22, &handler);
        uint64_t v23 = *(NSObject **)(v6 + 48);
        id v24 = *(id *)(v6 + 32);
        nw_connection_set_queue(v24, v23);

        nw_connection_start(*(nw_connection_t *)(v6 + 32));
        if (qword_1001F4D10 != -1) {
          dispatch_once(&qword_1001F4D10, &stru_1001C8638);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4D10 != -1) {
            dispatch_once(&qword_1001F4D10, &stru_1001C8638);
          }
          id v25 = (id)qword_1001F4D08;
          _NRLogWithArgs();
        }
        uint64_t v17 = v32;
      }
    }
  }
  else if ((a2 & 0xFFFFFFFE) == 4)
  {
    if (qword_1001F4D10 != -1) {
      dispatch_once(&qword_1001F4D10, &stru_1001C8638);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4D10 != -1) {
        dispatch_once(&qword_1001F4D10, &stru_1001C8638);
      }
      _NRLogWithArgs();
    }
  }
}

id sub_1001348C8()
{
  self;
  if (qword_1001F4D28 != -1) {
    dispatch_once(&qword_1001F4D28, &stru_1001C8658);
  }
  __int16 v0 = (void *)qword_1001F4D20;

  return v0;
}

void sub_100134920(id a1)
{
  id v1 = sub_100134960([NRDPolicySessionManager alloc]);
  uint64_t v2 = qword_1001F4D20;
  qword_1001F4D20 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100134960(void *a1)
{
  if (!a1) {
    return 0;
  }
  v20.receiver = a1;
  v20.super_class = (Class)NRDPolicySessionManager;
  id v1 = [super init];
  if (!v1)
  {
    id v10 = sub_100134C64();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = sub_100134C64();
      _NRLogWithArgs();
    }
    goto LABEL_15;
  }
  id v2 = v1;
  id v3 = sub_10015BD9C();
  int v4 = (void *)*((void *)v2 + 1);
  *((void *)v2 + 1) = v3;

  id v5 = objc_alloc_init((Class)NEPolicySession);
  uint64_t v6 = (void *)*((void *)v2 + 2);
  *((void *)v2 + 2) = v5;

  [*((id *)v2 + 2) setPriority:101];
  if ([*((id *)v2 + 2) priority] != (id)101)
  {
    id v13 = sub_100134C64();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
      id v15 = sub_100134C64();
      _NRLogWithArgs();
    }
    goto LABEL_15;
  }
  if (([*((id *)v2 + 2) lockSessionToCurrentProcess] & 1) == 0)
  {
    id v16 = sub_100134C64();
    int v17 = _NRLogIsLevelEnabled();

    if (v17)
    {
      id v18 = sub_100134C64();
      _NRLogWithArgs();
    }
LABEL_15:
    _os_log_pack_size();
    __error();
    uint64_t v19 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v19 = 136446210;
    *(void *)(v19 + 4) = "-[NRDPolicySessionManager initManager]";
    sub_100134C64();
    _NRLogAbortWithPack();
    return 0;
  }
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  dispatch_data_t v8 = (void *)*((void *)v2 + 3);
  *((void *)v2 + 3) = v7;

  return v2;
}

id sub_100134C64()
{
  if (qword_1001F4D38 != -1) {
    dispatch_once(&qword_1001F4D38, &stru_1001C8678);
  }
  __int16 v0 = (void *)qword_1001F4D30;

  return v0;
}

void sub_100134CB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4D30;
  qword_1001F4D30 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100134CFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    id v7 = [*(id *)(a1 + 24) objectForKeyedSubscript:v5];
    if (v7) {
      id v8 = [objc_alloc((Class)NSMutableArray) initWithArray:v7];
    }
    else {
      id v8 = objc_alloc_init((Class)NSMutableArray);
    }
    id v9 = v8;
    id v13 = [*(id *)(a1 + 16) addPolicy:v6];
    if (!v13) {
      sub_100115AB0(@"NRPolicySessionManager", @"AddPolicy", @"InvalidPolicyNumber", 1, @"Failed to install policy: %@", v10, v11, v12, (uint64_t)v6);
    }
    int v14 = +[NSNumber numberWithUnsignedInteger:v13];
    [v9 addObject:v14];
    [*(id *)(a1 + 24) setObject:v9 forKeyedSubscript:v5];
  }
  else
  {
    int v14 = 0;
  }

  return v14;
}

void sub_100134E2C(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  if (!a1)
  {
LABEL_10:

    return;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  id v6 = [*(id *)(a1 + 24) objectForKeyedSubscript:v18];
  id v7 = v6;
  if (!v6 || ![v6 containsObject:v5])
  {
LABEL_9:

    goto LABEL_10;
  }
  id v8 = [objc_alloc((Class)NSMutableArray) initWithArray:v7];
  id v9 = *(id *)(a1 + 16);
  unsigned __int8 v10 = [v9 removePolicyWithID:[v5 unsignedIntegerValue]];

  if (v10)
  {
    [v8 removeObject:v5];
    if ([v8 count]) {
      id v11 = v8;
    }
    else {
      id v11 = 0;
    }
    [*(id *)(a1 + 24) setObject:v11 forKeyedSubscript:v18];

    goto LABEL_9;
  }
  id v12 = sub_100134C64();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v14 = sub_100134C64();
    _NRLogWithArgs();
  }
  _os_log_pack_size();
  __error();
  uint64_t v15 = _os_log_pack_fill();
  *(_DWORD *)uint64_t v15 = 136446466;
  *(void *)(v15 + 4) = "-[NRDPolicySessionManager removePolicyIDForIdentifier:policyID:]";
  *(_WORD *)(v15 + 12) = 2112;
  *(void *)(v15 + 14) = v5;
  sub_100134C64();
  uint64_t v16 = _NRLogAbortWithPack();
  sub_10013502C(v16, v17);
}

void sub_10013502C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    int v4 = [*(id *)(a1 + 24) objectForKeyedSubscript:v3];
    if (v4)
    {
      id v16 = v4;
      id v17 = v3;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id v5 = v4;
      id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v19;
        do
        {
          id v9 = 0;
          do
          {
            if (*(void *)v19 != v8) {
              objc_enumerationMutation(v5);
            }
            unsigned __int8 v10 = *(void **)(*((void *)&v18 + 1) + 8 * (void)v9);
            id v11 = *(id *)(a1 + 16);
            unsigned __int8 v12 = [v11 removePolicyWithID:[v10 unsignedIntegerValue]];

            if ((v12 & 1) == 0) {
              sub_100115AB0(@"NRPolicySessionManager", @"RemovePolicy Failed", 0, 1, @"Failed to remove policy identifier: %@", v13, v14, v15, (uint64_t)v10);
            }
            id v9 = (char *)v9 + 1;
          }
          while (v7 != v9);
          id v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v7);
      }

      id v3 = v17;
      [*(id *)(a1 + 24) setObject:0 forKeyedSubscript:v17];
      int v4 = v16;
    }
  }
}

void sub_1001351D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    if (([*(id *)(a1 + 16) apply] & 1) == 0)
    {
      sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v10, v11, v12, a9);
    }
  }
}

id sub_100135DDC()
{
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  __int16 v0 = (void *)qword_1001F4D98;

  return v0;
}

void sub_100135E30(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4D98;
  qword_1001F4D98 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

char *sub_100137298(char *a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (!a1) {
    goto LABEL_11;
  }
  if (!v3)
  {
    id v10 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = sub_100135DDC();
      _NRLogWithArgs();

      uint64_t v8 = 0;
      goto LABEL_5;
    }
LABEL_11:
    uint64_t v8 = 0;
    goto LABEL_5;
  }
  v18.receiver = a1;
  v18.super_class = (Class)NRDLocalDevice;
  id v5 = [super init];
  if (!v5)
  {
    id v13 = sub_100135DDC();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
      id v15 = sub_100135DDC();
      _NRLogWithArgs();
    }
    int v4 = (void *)_os_log_pack_size();
    a1 = (char *)&v17 - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v16 = 136446210;
    *(void *)(v16 + 4) = "-[NRDLocalDevice initWithoutObservingChangesWithNRUUID:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_11;
  }
  id v6 = v5;
  [v5 setNrUUID:v4];
  id v7 = +[NSDate date];
  [v6 setDateCreated:v7];

  a1 = v6;
  uint64_t v8 = a1;
LABEL_5:

  return v8;
}

void *sub_100137480(void *a1, void *a2)
{
  int v4 = a2;
  id v5 = v4;
  if (!a1) {
    goto LABEL_37;
  }
  if (!v4)
  {
    id v28 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_37;
    }
    uint64_t v16 = sub_100135DDC();
    _NRLogWithArgs();
    goto LABEL_36;
  }
  v44.receiver = a1;
  v44.super_class = (Class)NRDLDDataClassKeychainItems;
  id v6 = [super init];
  if (v6)
  {
    a1 = v6;
    p_cache = &OBJC_METACLASS___NRDiscoveryManager.cache;
    if (v5[1])
    {
      id v7 = [NRDLDKeychainItemSecKey alloc];
      id v8 = v5[1];
      id v9 = sub_100137EDC((char *)v7, v8);
      id v10 = (void *)a1[1];
      a1[1] = v9;

      if (!a1[1]) {
        goto LABEL_37;
      }
    }
    if (!v5[3]) {
      goto LABEL_12;
    }
    uint64_t v11 = [NRDLDKeychainItemSecKey alloc];
    id v12 = v5[3];
    id v13 = sub_1001381A0((char *)v11, v12);
    int v14 = (void *)a1[2];
    a1[2] = v13;

    uint64_t v15 = a1[2];
    if (!v15) {
      goto LABEL_37;
    }
    if (v5[2])
    {
      uint64_t v16 = (void *)sub_100138464(v15);
      if (v16)
      {
        if ([v5[2] isEqualToData:v16])
        {
LABEL_11:

          goto LABEL_12;
        }
        id v36 = sub_100135DDC();
        int v37 = _NRLogIsLevelEnabled();

        if (v37)
        {
          id v38 = sub_100135DDC();
LABEL_35:
          _NRLogWithArgs();
        }
      }
LABEL_36:

      goto LABEL_37;
    }
  }
  else
  {
    id v30 = sub_100135DDC();
    int v31 = _NRLogIsLevelEnabled();

    if (v31)
    {
      id v32 = sub_100135DDC();
      _NRLogWithArgs();
    }
    id v5 = (id *)_os_log_pack_size();
    a1 = (uint64_t *)((char *)&v43 - (((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    __error();
    uint64_t v33 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v33 = 136446210;
    *(void *)(v33 + 4) = "-[NRDLDDataClassKeychainItems initWithLegacyKeys:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  id v34 = sub_100135DDC();
  int v35 = _NRLogIsLevelEnabled();

  if (v35)
  {
    uint64_t v16 = sub_100135DDC();
    _NRLogWithArgs();
    goto LABEL_11;
  }
LABEL_12:
  if (v5[6])
  {
    uint64_t v17 = (char *)objc_alloc((Class)(p_cache + 238));
    id v18 = v5[6];
    long long v19 = sub_100138514(v17, v18);
    long long v20 = (void *)a1[4];
    a1[4] = v19;

    uint64_t v21 = a1[4];
    if (v21)
    {
      if (!v5[5])
      {
        id v39 = sub_100135DDC();
        int v40 = _NRLogIsLevelEnabled();

        if (!v40) {
          goto LABEL_18;
        }
        uint64_t v16 = sub_100135DDC();
        _NRLogWithArgs();
        goto LABEL_17;
      }
      uint64_t v16 = (void *)sub_100138464(v21);
      if (!v16) {
        goto LABEL_36;
      }
      if ([v5[5] isEqualToData:v16])
      {
LABEL_17:

        goto LABEL_18;
      }
      id v41 = sub_100135DDC();
      int v42 = _NRLogIsLevelEnabled();

      if (!v42) {
        goto LABEL_36;
      }
      id v38 = sub_100135DDC();
      goto LABEL_35;
    }
LABEL_37:
    id v26 = 0;
    goto LABEL_21;
  }
LABEL_18:
  if (v5[4])
  {
    id v22 = [NRDLDKeychainItemData alloc];
    id v23 = v5[4];
    id v24 = sub_100137880((char *)v22, v23);
    id v25 = (void *)a1[3];
    a1[3] = v24;

    if (!a1[3]) {
      goto LABEL_37;
    }
  }
  a1 = a1;
  id v26 = a1;
LABEL_21:

  return v26;
}

char *sub_100137880(char *a1, void *a2)
{
  id v4 = a2;
  id v5 = v4;
  if (!a1) {
    goto LABEL_11;
  }
  if (!v4)
  {
    id v10 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = sub_100135DDC();
      _NRLogWithArgs();

      id v8 = 0;
      goto LABEL_5;
    }
LABEL_11:
    id v8 = 0;
    goto LABEL_5;
  }
  v18.receiver = a1;
  v18.super_class = (Class)NRDLDKeychainItemData;
  id v6 = [super init];
  if (!v6)
  {
    id v13 = sub_100135DDC();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
      id v15 = sub_100135DDC();
      _NRLogWithArgs();
    }
    id v5 = (void *)_os_log_pack_size();
    a1 = (char *)&v17 - (((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v16 = 136446210;
    *(void *)(v16 + 4) = "-[NRDLDKeychainItemData initWithData:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_11;
  }
  id v7 = v6;
  objc_storeStrong((id *)v6 + 2, a2);
  v7[8] = 1;
  a1 = v7;
  id v8 = a1;
LABEL_5:

  return v8;
}

void sub_100137A5C(unsigned char *a1)
{
  if (a1)
  {
    if (a1[22])
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        _NRLogWithArgs();
      }
    }
    else
    {
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      objc_opt_class();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100137C8C;
      block[3] = &unk_1001C8698;
      void block[4] = self;
      if (qword_1001F4D80 != -1) {
        dispatch_once(&qword_1001F4D80, block);
      }
      id v2 = (id)qword_1001F4D78;
      id v3 = [v2 countByEnumeratingWithState:&v7 objects:v12 count:16];
      if (v3)
      {
        id v4 = v3;
        uint64_t v5 = *(void *)v8;
        do
        {
          for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v8 != v5) {
              objc_enumerationMutation(v2);
            }
            [a1 addObserver:a1 forKeyPath:*(void *)(*((void *)&v7 + 1) + 8 * i) options:3 context:0];
          }
          id v4 = [v2 countByEnumeratingWithState:&v7 objects:v12 count:16];
        }
        while (v4);
      }

      a1[22] = 1;
    }
  }
}

void sub_100137C8C(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSSet) initWithObjects:@"classDKeychainItems", @"classCKeychainItems", @"classAKeychainItemsLegacyOnly", @"outOfBandKeychainItem", @"outOfBandKey", @"hasOutOfBandKey", @"isChanged", @"isObservingChanges", @"observedProperties", @"isEphemeral", @"isEnabledAndHasCompletedPairing", @"hasCompletedPairing", @"supportsSecureCoding", @"requiresAuthenticationWithIdentity", @"isCompanionLink", @"isCompanionLinkCheckedOnce", 0];
  unsigned int outCount = 0;
  id v3 = class_copyPropertyList(*(Class *)(a1 + 32), &outCount);
  id v4 = objc_alloc((Class)NSMutableArray);
  id v5 = [v4 initWithCapacity:outCount];
  if (outCount)
  {
    for (unint64_t i = 0; i < outCount; ++i)
    {
      id v7 = [objc_alloc((Class)NSString) initWithCString:property_getName(v3[i]) encoding:4];
      if (([v2 containsObject:v7] & 1) == 0) {
        [v5 addObject:v7];
      }
    }
  }
  else if (!v3)
  {
    goto LABEL_8;
  }
  free(v3);
LABEL_8:
  id v8 = [objc_alloc((Class)NSArray) initWithArray:v5];
  long long v9 = (void *)qword_1001F4D78;
  qword_1001F4D78 = (uint64_t)v8;

  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    _NRLogWithArgs();
  }
}

char *sub_100137EDC(char *a1, void *a2)
{
  CFDataRef v3 = a2;
  CFDataRef v4 = v3;
  if (!a1) {
    goto LABEL_20;
  }
  if (!v3)
  {
    id v12 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v14 = sub_100135DDC();
      _NRLogWithArgs();

      long long v10 = 0;
      goto LABEL_9;
    }
LABEL_20:
    long long v10 = 0;
    goto LABEL_9;
  }
  v23.receiver = a1;
  v23.super_class = (Class)NRDLDKeychainItemSecKey;
  id v5 = (char *)[super init];
  if (!v5)
  {
    id v15 = sub_100135DDC();
    int v16 = _NRLogIsLevelEnabled();

    CFDictionaryRef v6 = (const __CFDictionary *)"-[NRDLDKeychainItemSecKey initWithPublicSigningKeyData:]";
    if (v16)
    {
      id v17 = sub_100135DDC();
      _NRLogWithArgs();
    }
    CFDataRef v4 = (const __CFData *)_os_log_pack_size();
    a1 = (char *)&error - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v18 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v18 = 136446210;
    *(void *)(v18 + 4) = "-[NRDLDKeychainItemSecKey initWithPublicSigningKeyData:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_15;
  }
  a1 = v5;
  v24[0] = kSecAttrKeyType;
  v24[1] = kSecAttrKeyClass;
  v25[0] = kSecAttrKeyTypeEd25519;
  v25[1] = kSecAttrKeyClassPublic;
  CFDictionaryRef v6 = +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:2];
  CFErrorRef error = 0;
  SecKeyRef v7 = SecKeyCreateWithData(v4, v6, &error);
  if (!v7)
  {
LABEL_15:
    id v19 = sub_100135DDC();
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
      id v21 = sub_100135DDC();
      _NRLogWithArgs();
    }
    if (error) {
      CFRelease(error);
    }
    long long v10 = 0;
    goto LABEL_8;
  }
  SecKeyRef v9 = v7;
  if (error)
  {
    CFRelease(error);
    CFErrorRef error = 0;
  }
  objc_setProperty_nonatomic(a1, v8, v9, 16);
  CFRelease(v9);
  a1[8] = 1;
  long long v10 = a1;
LABEL_8:

LABEL_9:
  return v10;
}

char *sub_1001381A0(char *a1, void *a2)
{
  CFDataRef v3 = a2;
  CFDataRef v4 = v3;
  if (!a1) {
    goto LABEL_20;
  }
  if (!v3)
  {
    id v12 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v14 = sub_100135DDC();
      _NRLogWithArgs();

      long long v10 = 0;
      goto LABEL_9;
    }
LABEL_20:
    long long v10 = 0;
    goto LABEL_9;
  }
  v23.receiver = a1;
  v23.super_class = (Class)NRDLDKeychainItemSecKey;
  id v5 = [(char *)[super init];
  if (!v5)
  {
    id v15 = sub_100135DDC();
    int v16 = _NRLogIsLevelEnabled();

    CFDictionaryRef v6 = (const __CFDictionary *)"-[NRDLDKeychainItemSecKey initWithPrivateSigningKeyData:]";
    if (v16)
    {
      id v17 = sub_100135DDC();
      _NRLogWithArgs();
    }
    CFDataRef v4 = (const __CFData *)_os_log_pack_size();
    a1 = (char *)&error - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v18 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v18 = 136446210;
    *(void *)(v18 + 4) = "-[NRDLDKeychainItemSecKey initWithPrivateSigningKeyData:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_15;
  }
  a1 = v5;
  v24[0] = kSecAttrKeyType;
  v24[1] = kSecAttrKeyClass;
  v25[0] = kSecAttrKeyTypeEd25519;
  v25[1] = kSecAttrKeyClassPrivate;
  CFDictionaryRef v6 = +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:2];
  CFErrorRef error = 0;
  SecKeyRef v7 = SecKeyCreateWithData(v4, v6, &error);
  if (!v7)
  {
LABEL_15:
    id v19 = sub_100135DDC();
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
      id v21 = sub_100135DDC();
      _NRLogWithArgs();
    }
    if (error) {
      CFRelease(error);
    }
    long long v10 = 0;
    goto LABEL_8;
  }
  SecKeyRef v9 = v7;
  if (error)
  {
    CFRelease(error);
    CFErrorRef error = 0;
  }
  objc_setProperty_nonatomic(a1, v8, v9, 16);
  CFRelease(v9);
  a1[8] = 1;
  long long v10 = a1;
LABEL_8:

LABEL_9:
  return v10;
}

uint64_t sub_100138464(uint64_t result)
{
  if (result)
  {
    SecKeyCopyPublicBytes();
    id v1 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v3 = sub_100135DDC();
      _NRLogWithArgs();
    }
    return 0;
  }
  return result;
}

char *sub_100138514(char *a1, void *a2)
{
  CFDataRef v3 = a2;
  CFDataRef v4 = v3;
  if (!a1) {
    goto LABEL_20;
  }
  if (!v3)
  {
    id v12 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v14 = sub_100135DDC();
      _NRLogWithArgs();

      long long v10 = 0;
      goto LABEL_9;
    }
LABEL_20:
    long long v10 = 0;
    goto LABEL_9;
  }
  v23.receiver = a1;
  v23.super_class = (Class)NRDLDKeychainItemSecKey;
  id v5 = (char *)[super init];
  if (!v5)
  {
    id v15 = sub_100135DDC();
    int v16 = _NRLogIsLevelEnabled();

    CFDictionaryRef v6 = (const __CFDictionary *)"-[NRDLDKeychainItemSecKey initWithPrivateDHKeyData:]";
    if (v16)
    {
      id v17 = sub_100135DDC();
      _NRLogWithArgs();
    }
    CFDataRef v4 = (const __CFData *)_os_log_pack_size();
    a1 = (char *)&error - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v18 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v18 = 136446210;
    *(void *)(v18 + 4) = "-[NRDLDKeychainItemSecKey initWithPrivateDHKeyData:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_15;
  }
  a1 = v5;
  v24[0] = kSecAttrKeyType;
  v24[1] = kSecAttrKeyClass;
  v25[0] = kSecAttrKeyTypeX25519;
  v25[1] = kSecAttrKeyClassPrivate;
  CFDictionaryRef v6 = +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:2];
  CFErrorRef error = 0;
  SecKeyRef v7 = SecKeyCreateWithData(v4, v6, &error);
  if (!v7)
  {
LABEL_15:
    id v19 = sub_100135DDC();
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
      id v21 = sub_100135DDC();
      _NRLogWithArgs();
    }
    if (error) {
      CFRelease(error);
    }
    long long v10 = 0;
    goto LABEL_8;
  }
  SecKeyRef v9 = v7;
  if (error)
  {
    CFRelease(error);
    CFErrorRef error = 0;
  }
  objc_setProperty_nonatomic(a1, v8, v9, 16);
  CFRelease(v9);
  a1[8] = 1;
  long long v10 = a1;
LABEL_8:

LABEL_9:
  return v10;
}

void sub_1001391D0(unsigned char *a1)
{
  if (a1)
  {
    if (a1[22])
    {
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      objc_opt_class();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100137C8C;
      block[3] = &unk_1001C8698;
      void block[4] = self;
      if (qword_1001F4D80 != -1) {
        dispatch_once(&qword_1001F4D80, block);
      }
      id v2 = (id)qword_1001F4D78;
      id v3 = [v2 countByEnumeratingWithState:&v7 objects:v12 count:16];
      if (v3)
      {
        id v4 = v3;
        uint64_t v5 = *(void *)v8;
        do
        {
          for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v8 != v5) {
              objc_enumerationMutation(v2);
            }
            [a1 removeObserver:a1 forKeyPath:*(void *)(*((void *)&v7 + 1) + 8 * i)];
          }
          id v4 = [v2 countByEnumeratingWithState:&v7 objects:v12 count:16];
        }
        while (v4);
      }

      a1[22] = 0;
    }
    else
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        _NRLogWithArgs();
      }
    }
  }
}

id sub_100139440(id result)
{
  if (result)
  {
    v5.receiver = result;
    v5.super_class = (Class)NRDLocalDevice;
    uint64_t result = [super init];
    if (!result)
    {
      id v1 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v3 = sub_100135DDC();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v4 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v4 = 136446210;
      *(void *)(v4 + 4) = "-[NRDLocalDevice initWithoutObservingChanges]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
  }
  return result;
}

id *sub_100139580(id *a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  long long v8 = a3;
  if (!a1) {
    goto LABEL_16;
  }
  if (!v7)
  {
    id v14 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v16 = sub_100135DDC();
      _NRLogWithArgs();

      id v12 = 0;
      goto LABEL_9;
    }
LABEL_16:
    id v12 = 0;
    goto LABEL_9;
  }
  v22.receiver = a1;
  v22.super_class = (Class)NRDLDKeychainItemData;
  long long v9 = (id *)[super init];
  if (!v9)
  {
    id v17 = sub_100135DDC();
    int v18 = _NRLogIsLevelEnabled();

    long long v8 = "-[NRDLDKeychainItemData initFromKeychainWithName:nrUUID:dataProtectionClass:]";
    if (v18)
    {
      id v19 = sub_100135DDC();
      _NRLogWithArgs();
    }
    id v7 = (id)_os_log_pack_size();
    a1 = (id *)((char *)&v21 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
    __error();
    uint64_t v20 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v20 = 136446210;
    *(void *)(v20 + 4) = "-[NRDLDKeychainItemData initFromKeychainWithName:nrUUID:dataProtectionClass:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_15;
  }
  a1 = v9;
  self;
  if (qword_1001F4DE0 != -1) {
LABEL_15:
  }
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  id v10 = (id)qword_1001F4DD8;
  uint64_t v11 = sub_10015AF68((uint64_t)v10, v7, v8, a4);

  if (v11)
  {
    objc_storeStrong(a1 + 2, v11);
    id v12 = a1;
  }
  else
  {
    id v12 = 0;
  }

LABEL_9:
  return v12;
}

uint64_t sub_1001397EC(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    if (v7)
    {
      if (!*(unsigned char *)(a1 + 8))
      {
LABEL_8:
        a1 = 1;
        goto LABEL_12;
      }
      self;
      if (qword_1001F4DE0 != -1) {
        dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
      }
      id v9 = (id)qword_1001F4DD8;
      BOOL v10 = sub_10015A600((uint64_t)v9, *(void **)(a1 + 16), v7, v8, a4, 0);

      if (v10)
      {
        *(unsigned char *)(a1 + 8) = 0;
        goto LABEL_8;
      }
    }
    else
    {
      id v11 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v13 = sub_100135DDC();
        _NRLogWithArgs();
      }
    }
    a1 = 0;
  }
LABEL_12:

  return a1;
}

unsigned char *sub_10013991C(void *a1, void *a2)
{
  if (!a1)
  {
LABEL_8:
    CFDictionaryRef v6 = 0;
    goto LABEL_4;
  }
  v12.receiver = a1;
  v12.super_class = (Class)NRDLDKeychainItemSecKey;
  id v3 = [super init];
  if (!v3)
  {
    id v8 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 136446210;
    *(void *)(v11 + 4) = "-[NRDLDKeychainItemSecKey initWithKeyRef:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_8;
  }
  objc_super v5 = v3;
  objc_setProperty_nonatomic(v3, v4, a2, 16);
  v5[8] = 1;
  CFDictionaryRef v6 = v5;
LABEL_4:

  return v6;
}

void *sub_100139A8C(char *a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!a1) {
    goto LABEL_70;
  }
  if (!v7)
  {
    id v28 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v30 = sub_100135DDC();
      _NRLogWithArgs();

      uint64_t v21 = 0;
      goto LABEL_63;
    }
LABEL_70:
    uint64_t v21 = 0;
    goto LABEL_63;
  }
  v41.receiver = a1;
  v41.super_class = (Class)NRDLDKeychainItemSecKey;
  id v9 = (char *)[super init];
  if (v9)
  {
    a1 = v9;
    self;
    if (qword_1001F4DE0 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    id v31 = sub_100135DDC();
    int v32 = _NRLogIsLevelEnabled();

    if (v32)
    {
      id v33 = sub_100135DDC();
      _NRLogWithArgs();
    }
    id v7 = (id)_os_log_pack_size();
    a1 = (char *)v40 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v34 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v34 = 136446210;
    *(void *)(v34 + 4) = "-[NRDLDKeychainItemSecKey initFromKeychainWithName:nrUUID:dataProtectionClass:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
LABEL_5:
  id v10 = (dispatch_queue_t *)(id)qword_1001F4DD8;
  id v11 = v7;
  id v12 = v8;
  if (v10)
  {
    dispatch_assert_queue_V2(v10[2]);
    if (a4 == 3)
    {
      id v13 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    }
    else
    {
      if (a4 != 4)
      {
        id String = (void *)NRDataProtectionClassCreateString();
        goto LABEL_14;
      }
      id v13 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }
    CFStringRef v14 = *v13;
    id String = (void *)NRDataProtectionClassCreateString();
    if (v14)
    {
      id v16 = objc_alloc((Class)NSString);
      if (v12) {
        id v17 = [v16 initWithFormat:@"%@/%@/%@/%@", @"com.apple.terminusd", v12, String, v11];
      }
      else {
        id v17 = [v16 initWithFormat:@"%@/%@", @"com.apple.terminusd", v11];
      }
      id v20 = v17;
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        _NRLogWithArgs();
      }
      objc_super v22 = [v20 dataUsingEncoding:4, v11, v8];
      v43[0] = kSecClass;
      v43[1] = kSecAttrApplicationTag;
      v44[0] = kSecClassKey;
      v44[1] = v22;
      v43[2] = kSecAttrAccessGroup;
      v43[3] = kSecReturnRef;
      void v44[2] = @"com.apple.terminusd";
      v44[3] = &__kCFBooleanTrue;
      CFDictionaryRef v23 = +[NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:4];
      CFTypeRef result = 0;
      OSStatus v24 = SecItemCopyMatching(v23, &result);
      if (!v24 && result)
      {
        CFTypeID v25 = CFGetTypeID(result);
        if (v25 == SecKeyGetTypeID())
        {
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            _NRLogWithArgs();
          }
          uint64_t v21 = (void *)result;
          goto LABEL_58;
        }
        if (result)
        {
          CFRelease(result);
          CFTypeRef result = 0;
        }
        id v35 = sub_1001589D8();
        int v36 = _NRLogIsLevelEnabled();

        if (v36)
        {
          id v37 = sub_1001589D8();
          CFTypeID v38 = CFGetTypeID(result);
          id v39 = (__CFString *)CFCopyTypeIDDescription(v38);
          _NRLogWithArgs();
        }
LABEL_57:
        uint64_t v21 = 0;
LABEL_58:

        id v11 = (id)v40[0];
        id v8 = (id)v40[1];
        goto LABEL_59;
      }
      if (result)
      {
        CFRelease(result);
        CFTypeRef result = 0;
      }
      if (v24 == -25308)
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_57;
        }
        if (qword_1001F4DF0 == -1) {
          goto LABEL_56;
        }
      }
      else if (v24 == -25300)
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_57;
        }
        if (qword_1001F4DF0 == -1) {
          goto LABEL_56;
        }
      }
      else
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_57;
        }
        if (qword_1001F4DF0 == -1) {
          goto LABEL_56;
        }
      }
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
LABEL_56:
      _NRLogWithArgs();
      goto LABEL_57;
    }
LABEL_14:
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    id v18 = (id)qword_1001F4DE8;
    int v19 = _NRLogIsLevelEnabled();

    if (!v19)
    {
      uint64_t v21 = 0;
LABEL_60:

      goto LABEL_61;
    }
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    id v20 = (id)qword_1001F4DE8;
    _NRLogWithArgs();
    uint64_t v21 = 0;
LABEL_59:

    goto LABEL_60;
  }
  uint64_t v21 = 0;
LABEL_61:

  if (v21)
  {
    objc_setProperty_nonatomic(a1, v26, v21, 16);
    a1 = a1;
    uint64_t v21 = a1;
  }
LABEL_63:

  return v21;
}

uint64_t sub_10013A2B4(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    if (!v7)
    {
      id v28 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v30 = sub_100135DDC();
        _NRLogWithArgs();
      }
      goto LABEL_73;
    }
    if (!*(unsigned char *)(a1 + 8))
    {
LABEL_70:
      a1 = 1;
      goto LABEL_74;
    }
    self;
    if (qword_1001F4DE0 != -1) {
      dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
    }
    id v9 = (dispatch_queue_t *)(id)qword_1001F4DD8;
    uint64_t v10 = *(void *)(a1 + 16);
    id v11 = v7;
    id v12 = v8;
    id v13 = v12;
    if (!v9)
    {

      goto LABEL_73;
    }
    dispatch_assert_queue_V2(v9[2]);
    if (a4 == 3)
    {
      uint64_t v44 = v10;
      CFStringRef v14 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    }
    else
    {
      if (a4 != 4)
      {
        id String = (void *)NRDataProtectionClassCreateString();
        goto LABEL_15;
      }
      uint64_t v44 = v10;
      CFStringRef v14 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }
    CFStringRef v15 = *v14;
    id String = (void *)NRDataProtectionClassCreateString();
    if (v15)
    {
      id v17 = objc_alloc((Class)NSString);
      if (v13) {
        id v18 = [v17 initWithFormat:@"%@/%@/%@/%@", @"com.apple.terminusd", v13, String, v11];
      }
      else {
        id v18 = [v17 initWithFormat:@"%@/%@", @"com.apple.terminusd", v11, v36, v39];
      }
      objc_super v22 = v18;
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        int v40 = String;
        int v42 = v22;
        uint64_t v37 = 464;
        int v32 = "";
        uint64_t v34 = "-[NRDKeyManager saveKey:toKeychainWithName:nrUUID:dataProtectionClass:]";
        _NRLogWithArgs();
      }
      id v47 = v22;
      [v22 dataUsingEncoding:4, v32, v34, v37, v40, v42];
      v51[0] = kSecClass;
      v51[1] = kSecAttrApplicationTag;
      v53 = CFStringRef v52 = kSecClassKey;
      int v46 = (void *)v53;
      v51[2] = kSecAttrAccessGroup;
      CFStringRef v54 = @"com.apple.terminusd";
      CFDictionaryRef v45 = +[NSDictionary dictionaryWithObjects:&v52 forKeys:v51 count:3];
      OSStatus v23 = SecItemDelete(v45);
      switch(v23)
      {
        case -25308:
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          CFDictionaryRef v27 = v45;
          if (!_NRLogIsLevelEnabled()) {
            goto LABEL_55;
          }
          if (qword_1001F4DF0 == -1) {
            goto LABEL_54;
          }
          break;
        case -25300:
          goto LABEL_38;
        case 0:
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            objc_super v41 = String;
            uint64_t v43 = v22;
            uint64_t v38 = 479;
            id v33 = "";
            id v35 = "-[NRDKeyManager saveKey:toKeychainWithName:nrUUID:dataProtectionClass:]";
            _NRLogWithArgs();
          }
LABEL_38:
          v49[0] = kSecClass;
          v49[1] = kSecAttrApplicationTag;
          v50[0] = kSecClassKey;
          v50[1] = v46;
          v49[2] = kSecAttrAccessGroup;
          v49[3] = kSecAttrAccessible;
          v50[2] = @"com.apple.terminusd";
          v50[3] = v15;
          void v49[4] = kSecValueRef;
          v50[4] = v44;
          +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v50, v49, 5, v33, v35, v38, v41, v43);
          CFDictionaryRef v24 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
          OSStatus v25 = SecItemAdd(v24, 0);
          OSStatus v26 = v25;
          if (v25)
          {
            if (v25 == -25308)
            {
              if (qword_1001F4DF0 != -1) {
                dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
              }
              if (!_NRLogIsLevelEnabled()) {
                goto LABEL_66;
              }
              if (qword_1001F4DF0 == -1)
              {
LABEL_65:
                _NRLogWithArgs();
LABEL_66:
                BOOL v48 = v26 == 0;

                CFDictionaryRef v27 = v45;
                goto LABEL_67;
              }
            }
            else
            {
              if (qword_1001F4DF0 != -1) {
                dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
              }
              if (!_NRLogIsLevelEnabled()) {
                goto LABEL_66;
              }
              if (qword_1001F4DF0 == -1) {
                goto LABEL_65;
              }
            }
          }
          else
          {
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            if (!_NRLogIsLevelEnabled()) {
              goto LABEL_66;
            }
            if (qword_1001F4DF0 == -1) {
              goto LABEL_65;
            }
          }
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          goto LABEL_65;
        default:
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          CFDictionaryRef v27 = v45;
          if (!_NRLogIsLevelEnabled())
          {
LABEL_55:
            BOOL v48 = 0;
LABEL_67:

            goto LABEL_68;
          }
          if (qword_1001F4DF0 == -1)
          {
LABEL_54:
            _NRLogWithArgs();
            goto LABEL_55;
          }
          break;
      }
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      goto LABEL_54;
    }
LABEL_15:
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    id v19 = (id)qword_1001F4DE8;
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      id v21 = (id)qword_1001F4DE8;
      _NRLogWithArgs();
    }
    BOOL v48 = 0;
LABEL_68:

    if (v48)
    {
      *(unsigned char *)(a1 + 8) = 0;
      goto LABEL_70;
    }
LABEL_73:
    a1 = 0;
  }
LABEL_74:

  return a1;
}

char *sub_10013AB14(uint64_t a1, void *a2)
{
  CFDataRef v3 = a2;
  CFDataRef v4 = v3;
  if (!a1) {
    goto LABEL_18;
  }
  if (!v3)
  {
    id v11 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (!*(void *)(a1 + 16))
  {
    id v13 = sub_100135DDC();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
LABEL_17:
      id v15 = sub_100135DDC();
      _NRLogWithArgs();

      id v9 = 0;
      goto LABEL_13;
    }
LABEL_18:
    id v9 = 0;
    goto LABEL_13;
  }
  v23[0] = kSecAttrKeyType;
  v23[1] = kSecAttrKeyClass;
  v24[0] = kSecAttrKeyTypeX25519;
  v24[1] = kSecAttrKeyClassPublic;
  CFDictionaryRef v5 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:2];
  CFErrorRef error = 0;
  SecKeyRef v6 = SecKeyCreateWithData(v4, v5, &error);
  if (v6)
  {
    id v7 = v6;
    if (error)
    {
      CFRelease(error);
      CFErrorRef error = 0;
    }
    CFDataRef v8 = SecKeyCopyKeyExchangeResult(*(SecKeyRef *)(a1 + 16), kSecKeyAlgorithmECDHKeyExchangeStandard, v7, (CFDictionaryRef)&__NSDictionary0__struct, &error);
    CFRelease(v7);
    if (v8)
    {
      if (error)
      {
        CFRelease(error);
        CFErrorRef error = 0;
      }
      id v9 = sub_100137880((char *)[NRDLDKeychainItemData alloc], v8);
    }
    else
    {
      id v19 = sub_100135DDC();
      int v20 = _NRLogIsLevelEnabled();

      if (v20)
      {
        id v21 = sub_100135DDC();
        _NRLogWithArgs();
      }
      if (error)
      {
        CFRelease(error);
        id v9 = 0;
        CFErrorRef error = 0;
      }
      else
      {
        id v9 = 0;
      }
    }
  }
  else
  {
    id v16 = sub_100135DDC();
    int v17 = _NRLogIsLevelEnabled();

    if (v17)
    {
      id v18 = sub_100135DDC();
      _NRLogWithArgs();
    }
    if (error) {
      CFRelease(error);
    }
    id v9 = 0;
  }

LABEL_13:
  return v9;
}

void *sub_10013ADD8(void *a1, void *a2, int a3)
{
  id v5 = a2;
  SecKeyRef v6 = v5;
  if (!a1) {
    goto LABEL_8;
  }
  if (!v5)
  {
    id v22 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v24 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_8;
  }
  v30.receiver = a1;
  v30.super_class = (Class)NRDLDDataClassKeychainItems;
  id v7 = [super init];
  if (!v7)
  {
    id v26 = sub_100135DDC();
    int v27 = _NRLogIsLevelEnabled();

    if (v27)
    {
      id v28 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v29 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v29 = 136446210;
    *(void *)(v29 + 4) = "-[NRDLDDataClassKeychainItems initFromKeychainWithNRUUID:dataProtectionClass:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  a1 = v7;
  CFDataRef v8 = sub_100139A8C((char *)[NRDLDKeychainItemSecKey alloc], @"RemotePublicKey", v6, a3);
  id v9 = (void *)a1[1];
  a1[1] = v8;

  uint64_t v10 = a1[1];
  id v11 = sub_100139A8C((char *)[NRDLDKeychainItemSecKey alloc], @"LocalPrivateKey", v6, a3);
  id v12 = (void *)a1[2];
  a1[2] = v11;

  uint64_t v13 = a1[2];
  int v14 = sub_100139A8C((char *)[NRDLDKeychainItemSecKey alloc], @"DHPrivateKey", v6, a3);
  id v15 = (void *)a1[4];
  a1[4] = v14;

  uint64_t v16 = a1[4];
  int v17 = sub_100139580((id *)[NRDLDKeychainItemData alloc], @"SharedSecret", v6, a3);
  id v18 = (void *)a1[3];
  a1[3] = v17;

  v19.i64[0] = a1[3];
  v19.i64[1] = v16;
  v20.i64[0] = v10;
  v20.i64[1] = v13;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v20), (int32x4_t)vceqzq_s64(v19))))) & 1) == 0)
  {
LABEL_8:
    id v21 = 0;
    goto LABEL_9;
  }
  a1 = a1;
  id v21 = a1;
LABEL_9:

  return v21;
}

void *sub_10013B080(void *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  v41.receiver = a1;
  v41.super_class = (Class)NRDLDDataClassKeychainItems;
  CFDataRef v3 = [super init];
  if (v3)
  {
    CFDataRef v4 = v3;
    CFErrorRef error = 0;
    if (a2 == 4)
    {
      id v5 = (CFTypeRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }
    else
    {
      if (a2 != 3) {
        goto LABEL_14;
      }
      id v5 = (CFTypeRef *)&kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    }
    if (*v5)
    {
      SecAccessControlRef v6 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, *v5, 0x40000000uLL, &error);
      if (v6)
      {
        SecAccessControlRef v7 = v6;
        if (error)
        {
          CFRelease(error);
          CFErrorRef error = 0;
        }
        v48[0] = kSecAttrKeyType;
        v48[1] = kSecPrivateKeyAttrs;
        v49[0] = kSecAttrKeyTypeEd25519;
        v46[0] = kSecAttrIsPermanent;
        v46[1] = kSecAttrAccessControl;
        v47[0] = &__kCFBooleanFalse;
        v47[1] = v7;
        CFDataRef v8 = +[NSDictionary dictionaryWithObjects:v47 forKeys:v46 count:2];
        v49[1] = v8;
        id v9 = +[NSDictionary dictionaryWithObjects:v49 forKeys:v48 count:2];

        v44[1] = kSecPrivateKeyAttrs;
        v45[0] = kSecAttrKeyTypeX25519;
        v43[1] = v7;
        v44[0] = kSecAttrKeyType;
        v42[0] = kSecAttrIsPermanent;
        v42[1] = kSecAttrAccessControl;
        v43[0] = &__kCFBooleanFalse;
        uint64_t v10 = +[NSDictionary dictionaryWithObjects:v43 forKeys:v42 count:2];
        v45[1] = v10;
        id v11 = +[NSDictionary dictionaryWithObjects:v45 forKeys:v44 count:2];

        CFRelease(v7);
        if (v4[2])
        {
          if (v4[4])
          {
LABEL_25:
            id v15 = v4;
LABEL_26:

            goto LABEL_27;
          }
        }
        else
        {
          SecKeyRef v16 = SecKeyCreateRandomKey((CFDictionaryRef)v9, &error);
          if (!v16)
          {
            id v32 = sub_100135DDC();
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              id v34 = sub_100135DDC();
              _NRLogWithArgs();
            }
            CFErrorRef v35 = error;
            if (error) {
              goto LABEL_43;
            }
            goto LABEL_39;
          }
          SecKeyRef v17 = v16;
          if (error)
          {
            CFRelease(error);
            CFErrorRef error = 0;
          }
          id v18 = sub_10013991C([NRDLDKeychainItemSecKey alloc], v17);
          int64x2_t v19 = (void *)v4[2];
          v4[2] = v18;

          CFRelease(v17);
          if (v4[4]) {
            goto LABEL_25;
          }
        }
        SecKeyRef v20 = SecKeyCreateRandomKey((CFDictionaryRef)v11, &error);
        if (v20)
        {
          SecKeyRef v21 = v20;
          if (error)
          {
            CFRelease(error);
            CFErrorRef error = 0;
          }
          id v22 = sub_10013991C([NRDLDKeychainItemSecKey alloc], v21);
          OSStatus v23 = (void *)v4[4];
          v4[4] = v22;

          CFRelease(v21);
          goto LABEL_25;
        }
        id v36 = sub_100135DDC();
        int v37 = _NRLogIsLevelEnabled();

        if (v37)
        {
          id v38 = sub_100135DDC();
          _NRLogWithArgs();
        }
        CFErrorRef v35 = error;
        if (error)
        {
LABEL_43:
          CFRelease(v35);
          id v15 = 0;
          CFErrorRef error = 0;
          goto LABEL_26;
        }
LABEL_39:
        id v15 = 0;
        goto LABEL_26;
      }
      goto LABEL_32;
    }
LABEL_14:
    id v12 = sub_100135DDC();
    int v13 = _NRLogIsLevelEnabled();

    if (v13)
    {
      id v14 = sub_100135DDC();
      id String = (void *)NRDataProtectionClassCreateString();
      _NRLogWithArgs();
    }
    goto LABEL_16;
  }
  id v25 = sub_100135DDC();
  int v26 = _NRLogIsLevelEnabled();

  if (v26)
  {
    id v27 = sub_100135DDC();
    _NRLogWithArgs();
  }
  CFDataRef v4 = (void *)_os_log_pack_size();
  __chkstk_darwin();
  __error();
  uint64_t v28 = _os_log_pack_fill();
  *(_DWORD *)uint64_t v28 = 136446210;
  *(void *)(v28 + 4) = "-[NRDLDDataClassKeychainItems initWithNewKeysForDataProtectionClass:]";
  sub_100135DDC();
  _NRLogAbortWithPack();
LABEL_32:
  id v29 = sub_100135DDC();
  int v30 = _NRLogIsLevelEnabled();

  if (v30)
  {
    id v31 = sub_100135DDC();
    _NRLogWithArgs();
  }
  if (error) {
    CFRelease(error);
  }
LABEL_16:
  id v15 = 0;
LABEL_27:

  return v15;
}

uint64_t sub_10013B57C(void *a1, void *a2, int a3)
{
  id v5 = a2;
  SecAccessControlRef v6 = v5;
  if (!a1)
  {
LABEL_16:
    uint64_t v12 = 0;
    goto LABEL_11;
  }
  if (!v5)
  {
    id v14 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v16 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_16;
  }
  uint64_t v7 = a1[1];
  if (!v7)
  {
    int v8 = 0;
    uint64_t v9 = a1[2];
    if (!v9) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v8 = sub_10013A2B4(v7, @"RemotePublicKey", v6, a3) ^ 1;
  uint64_t v9 = a1[2];
  if (v9) {
LABEL_5:
  }
    v8 |= sub_10013A2B4(v9, @"LocalPrivateKey", v6, a3) ^ 1;
LABEL_6:
  uint64_t v10 = a1[4];
  if (v10) {
    v8 |= sub_10013A2B4(v10, @"DHPrivateKey", v6, a3) ^ 1;
  }
  uint64_t v11 = a1[3];
  if (v11) {
    v8 |= sub_1001397EC(v11, @"SharedSecret", v6, a3) ^ 1;
  }
  uint64_t v12 = v8 ^ 1u;
LABEL_11:

  return v12;
}

void sub_10013B6B4(void *a1, void *a2, int a3)
{
  id v5 = a2;
  if (a1)
  {
    id v24 = v5;
    if (v5)
    {
      SecAccessControlRef v6 = (void *)a1[1];
      if (v6)
      {
        id v7 = v6;
        id v8 = v24;
        self;
        if (qword_1001F4DE0 != -1) {
          dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
        }
        id v9 = (id)qword_1001F4DD8;
        sub_10015A088((uint64_t)v9, @"RemotePublicKey", v8, a3);

        id v5 = v24;
      }
      uint64_t v10 = (void *)a1[2];
      if (v10)
      {
        id v11 = v10;
        id v12 = v24;
        self;
        if (qword_1001F4DE0 != -1) {
          dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
        }
        id v13 = (id)qword_1001F4DD8;
        sub_10015A088((uint64_t)v13, @"LocalPrivateKey", v12, a3);

        id v5 = v24;
      }
      id v14 = (void *)a1[4];
      if (v14)
      {
        id v15 = v14;
        id v16 = v24;
        self;
        if (qword_1001F4DE0 != -1) {
          dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
        }
        id v17 = (id)qword_1001F4DD8;
        sub_10015A088((uint64_t)v17, @"DHPrivateKey", v16, a3);

        id v5 = v24;
      }
      id v18 = (void *)a1[3];
      if (v18)
      {
        int64x2_t v19 = v18;
        id v20 = v24;
        self;
        if (qword_1001F4DE0 != -1) {
          dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
        }
        id v21 = (id)qword_1001F4DD8;
        sub_10015B57C((uint64_t)v21, @"SharedSecret", v20, a3, 0);

        v19[8] = 1;
        goto LABEL_19;
      }
    }
    else
    {
      id v22 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id v5 = 0;
      if (IsLevelEnabled)
      {
        int64x2_t v19 = sub_100135DDC();
        _NRLogWithArgs();
LABEL_19:

        id v5 = v24;
      }
    }
  }
}

void *sub_10013B968(void *a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
LABEL_11:
    id v9 = 0;
    goto LABEL_5;
  }
  v19.receiver = a1;
  v19.super_class = (Class)NRDDeviceIdentity;
  CFDataRef v4 = [super init];
  if (!v4)
  {
    id v11 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v13 = sub_100135DDC();
      _NRLogWithArgs();
    }
    id v3 = (id)_os_log_pack_size();
    a1 = (uint64_t *)((char *)&v18 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
    __error();
    uint64_t v14 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v14 = 136446210;
    *(void *)(v14 + 4) = "-[NRDDeviceIdentity initWithDeviceIdentityPayload:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_9;
  }
  a1 = v4;
  if ([v3 length] != (id)48)
  {
LABEL_9:
    id v15 = sub_100135DDC();
    int v16 = _NRLogIsLevelEnabled();

    if (v16)
    {
      id v17 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_11;
  }
  v20[0] = 0;
  v20[1] = 0;
  [v3 getBytes:v20 range:0, 16];
  id v5 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:v20];
  SecAccessControlRef v6 = (void *)a1[1];
  a1[1] = v5;

  uint64_t v7 = [v3 subdataWithRange:16, 32];
  id v8 = (void *)a1[2];
  a1[2] = v7;

  a1 = a1;
  id v9 = a1;
LABEL_5:

  return v9;
}

void sub_10013BB9C()
{
  uint64_t v0 = self;
  id v1 = sub_10015BD9C();
  dispatch_assert_queue_V2(v1);

  if (qword_1001F4D40) {
    return;
  }
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v2 = (id)qword_1001F4DD8;
  uint64_t v3 = objc_opt_class();
  uint64_t v4 = sub_10015BB3C((uint64_t)v2, v3, @"LocalDeviceConfigClassD", 4);
  id v5 = (void *)qword_1001F4D40;
  qword_1001F4D40 = v4;

  if (!qword_1001F4D40)
  {
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v7 = (void *)qword_1001F4D40;
    qword_1001F4D40 = (uint64_t)v6;
  }
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    id v8 = (void *)qword_1001F4D40;
    id v9 = (id)qword_1001F4D98;
    [v8 count];
    _NRLogWithArgs();
  }
  if (qword_1001F4D40)
  {
    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    id v11 = (void *)qword_1001F4D48;
    qword_1001F4D48 = (uint64_t)v10;

    if (qword_1001F4D48)
    {
      v48[1] = v0;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      id v12 = (id)qword_1001F4D40;
      id v13 = [v12 countByEnumeratingWithState:&v53 objects:v62 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v54;
        do
        {
          for (unint64_t i = 0; i != v14; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v54 != v15) {
              objc_enumerationMutation(v12);
            }
            uint64_t v17 = *(void *)(*((void *)&v53 + 1) + 8 * i);
            uint64_t v18 = [(id)qword_1001F4D40 objectForKeyedSubscript:v17];
            objc_super v19 = (void *)v18;
            if (v18) {
              id v20 = *(void **)(v18 + 56);
            }
            else {
              id v20 = 0;
            }
            id v21 = v20;

            if (v21) {
              [(id)qword_1001F4D48 setObject:v17 forKeyedSubscript:v21];
            }
          }
          id v14 = [v12 countByEnumeratingWithState:&v53 objects:v62 count:16];
        }
        while (v14);
      }

      self;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      id v22 = (id)qword_1001F4D40;
      id v23 = [v22 countByEnumeratingWithState:&v57 objects:v63 count:16];
      if (v23)
      {
        id v24 = v23;
        uint64_t v25 = *(void *)v58;
        do
        {
          for (j = 0; j != v24; j = (char *)j + 1)
          {
            if (*(void *)v58 != v25) {
              objc_enumerationMutation(v22);
            }
            id v27 = *(void **)(*((void *)&v57 + 1) + 8 * (void)j);
            uint64_t v28 = [(id)qword_1001F4D40 objectForKeyedSubscript:v27];
            id v29 = (void *)v28;
            if (v28 && (*(unsigned char *)(v28 + 8) || *(unsigned char *)(v28 + 9)) && !*(void *)(v28 + 72))
            {
              int v30 = sub_10013ADD8([NRDLDDataClassKeychainItems alloc], v27, 4);
              id v31 = (void *)v29[9];
              v29[9] = v30;
            }
          }
          id v24 = [v22 countByEnumeratingWithState:&v57 objects:v63 count:16];
        }
        while (v24);
      }

      id v32 = (char *)self;
      self;
      if (qword_1001F4DE0 == -1) {
        goto LABEL_39;
      }
      goto LABEL_54;
    }
    id v44 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v46 = sub_100135DDC();
      _NRLogWithArgs();
    }
  }
  else
  {
    id v41 = sub_100135DDC();
    int v42 = _NRLogIsLevelEnabled();

    if (v42)
    {
      id v43 = sub_100135DDC();
      _NRLogWithArgs();
    }
  }
  _os_log_pack_size();
  id v32 = (char *)v48 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
  __error();
  uint64_t v47 = _os_log_pack_fill();
  *(_DWORD *)uint64_t v47 = 136446210;
  *(void *)(v47 + 4) = "+[NRDLocalDevice initializeLocalDeviceDatabaseIfNecessary]";
  sub_100135DDC();
  _NRLogAbortWithPack();
LABEL_54:
  dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
LABEL_39:
  id v33 = (id)qword_1001F4DD8;
  v63[0] = _NSConcreteStackBlock;
  v63[1] = 3221225472;
  v63[2] = sub_10013C290;
  void v63[3] = &unk_1001C8698;
  v63[4] = v32;
  sub_1001598E4((uint64_t)v33, v63);

  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v34 = (id)qword_1001F4D40;
  id v35 = [v34 countByEnumeratingWithState:&v49 objects:v61 count:16];
  if (v35)
  {
    id v36 = v35;
    uint64_t v37 = *(void *)v50;
    do
    {
      for (uint64_t k = 0; k != v36; uint64_t k = (char *)k + 1)
      {
        if (*(void *)v50 != v37) {
          objc_enumerationMutation(v34);
        }
        uint64_t v39 = [(id)qword_1001F4D40 objectForKeyedSubscript:*(void *)(*((void *)&v49 + 1) + 8 * (void)k)];
        sub_10013C964((uint64_t)NRDLocalDevice, v39);
      }
      id v36 = [v34 countByEnumeratingWithState:&v49 objects:v61 count:16];
    }
    while (v36);
  }

  uint64_t v40 = self;
  sub_10013C9FC(v40, 0);
}

void sub_10013C290()
{
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v0 = (id)qword_1001F4DD8;
  uint64_t v1 = objc_opt_class();
  id v2 = sub_10015BB3C((uint64_t)v0, v1, @"LocalDeviceKeysClassC", 3);

  if (v2)
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      id v3 = (id)qword_1001F4D98;
      uint64_t v36 = 983;
      id v37 = [v2 count];
      id v34 = "";
      id v35 = "+[NRDLocalDevice loadClassCKeys]_block_invoke";
      _NRLogWithArgs();
    }
    id v38 = v2;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v4 = v2;
    id v5 = [v4 countByEnumeratingWithState:&v43 objects:v52 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v44;
      do
      {
        for (unint64_t i = 0; i != v6; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v44 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          uint64_t v10 = [(id)qword_1001F4D40 objectForKeyedSubscript:v9, v34, v35, v36, v37];
          id v11 = (void *)v10;
          if (v10 && (*(unsigned char *)(v10 + 8) || *(unsigned char *)(v10 + 9)))
          {
            id v12 = [NRDLDDataClassKeychainItems alloc];
            id v13 = [v4 objectForKeyedSubscript:v9];
            id v14 = sub_100137480(v12, v13);
            uint64_t v15 = (void *)v11[10];
            v11[10] = v14;

            if (qword_1001F4DA0 != -1) {
              dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4DA0 != -1) {
                dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
              }
              uint64_t v36 = 993;
              id v37 = v11;
              id v34 = "";
              id v35 = "+[NRDLocalDevice loadClassCKeys]_block_invoke";
              _NRLogWithArgs();
            }
          }
          else
          {
            if (qword_1001F4DA0 != -1) {
              dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4DA0 != -1) {
                dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
              }
              id v16 = (id)qword_1001F4D98;
              [v9 UUIDString];
              uint64_t v36 = 988;
              id v37 = (id)objc_claimAutoreleasedReturnValue();
              id v34 = "";
              id v35 = "+[NRDLocalDevice loadClassCKeys]_block_invoke";
              _NRLogWithArgs();
            }
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v43 objects:v52 count:16];
      }
      while (v6);
    }

    id v2 = v38;
    if (sub_10013D7C8())
    {
      self;
      if (qword_1001F4DE0 != -1) {
        dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
      }
      id v17 = (id)qword_1001F4DD8;
      char v18 = sub_10015B57C((uint64_t)v17, @"LocalDeviceKeysClassC", 0, 3, 0);

      if ((v18 & 1) == 0)
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DA0 != -1) {
            dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
          }
          uint64_t v36 = 1002;
          id v34 = "";
          id v35 = "+[NRDLocalDevice loadClassCKeys]_block_invoke";
          _NRLogWithArgs();
        }
      }
    }
  }
  uint64_t v19 = self;
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v20 = (dispatch_queue_t *)(id)qword_1001F4DD8;
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472;
  BOOL v48 = sub_10013DF7C;
  long long v49 = &unk_1001C8698;
  uint64_t v50 = v19;
  id v21 = v47;
  if (v20)
  {
    dispatch_assert_queue_V2(v20[2]);
    if (MKBGetDeviceLockState()) {
      sub_100159AFC((uint64_t)v20, v21);
    }
    else {
      v48((uint64_t)v21);
    }
  }

  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v22 = (id)qword_1001F4D40;
  id v23 = [v22 countByEnumeratingWithState:&v39 objects:v51 count:16];
  if (v23)
  {
    id v24 = v23;
    uint64_t v25 = *(void *)v40;
    do
    {
      for (j = 0; j != v24; j = (char *)j + 1)
      {
        if (*(void *)v40 != v25) {
          objc_enumerationMutation(v22);
        }
        id v27 = *(void **)(*((void *)&v39 + 1) + 8 * (void)j);
        uint64_t v28 = [(id)qword_1001F4D40 objectForKeyedSubscript:v27, v34, v35, v36];
        id v29 = (void *)v28;
        if (v28 && (*(unsigned char *)(v28 + 8) || *(unsigned char *)(v28 + 9)))
        {
          if (*(void *)(v28 + 80))
          {
            if (*(void *)(v28 + 152)) {
              goto LABEL_52;
            }
          }
          else
          {
            int v30 = sub_10013ADD8([NRDLDDataClassKeychainItems alloc], v27, 3);
            id v31 = (void *)v29[10];
            void v29[10] = v30;

            if (v29[19]) {
              goto LABEL_52;
            }
          }
          id v32 = sub_100139580((id *)[NRDLDKeychainItemData alloc], @"OOBK", v27, 3);
          id v33 = (void *)v29[19];
          v29[19] = v32;
        }
LABEL_52:
      }
      id v24 = [v22 countByEnumeratingWithState:&v39 objects:v51 count:16];
    }
    while (v24);
  }
}

void sub_10013C964(uint64_t a1, void *a2)
{
  id v5 = a2;
  self;
  if (_os_feature_enabled_impl())
  {
    id v2 = v5;
    if (v5) {
      id v2 = (void *)v5[16];
    }
    uint64_t v3 = [v2 usesTLS];
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = v5;
  if (v5) {
    id v4 = (void *)v5[4];
  }
  sub_10013DA14((uint64_t)NRDLocalDevice, v3, v4);
}

uint64_t sub_10013C9FC(uint64_t a1, int a2)
{
  self;
  id v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  id v3 = (id)qword_1001F4D40;
  id v4 = [v3 countByEnumeratingWithState:&v110 objects:v122 count:16];
  if (v4)
  {
    id v5 = v4;
    id v6 = 0;
    uint64_t v7 = *(void *)v111;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v111 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v10 = *(void *)(*((void *)&v110 + 1) + 8 * i);
        id v11 = [(id)qword_1001F4D40 objectForKeyedSubscript:v10];
        if (v11)
        {
          int v12 = v11[24];

          if (v12)
          {
            if (!v6) {
              id v6 = objc_alloc_init((Class)NSMutableDictionary);
            }
            id v9 = [(id)qword_1001F4D40 objectForKeyedSubscript:v10];
            [v6 setObject:v9 forKeyedSubscript:v10];
          }
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v110 objects:v122 count:16];
    }
    while (v5);
  }
  else
  {
    id v6 = 0;
  }

  if ([v6 count])
  {
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    id v13 = v6;
    id v14 = [v13 countByEnumeratingWithState:&v106 objects:v121 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v107;
      do
      {
        for (j = 0; j != v15; j = (char *)j + 1)
        {
          if (*(void *)v107 != v16) {
            objc_enumerationMutation(v13);
          }
          [(id)qword_1001F4D40 setObject:0 forKeyedSubscript:*(void *)(*((void *)&v106 + 1) + 8 * (void)j)];
        }
        id v15 = [v13 countByEnumeratingWithState:&v106 objects:v121 count:16];
      }
      while (v15);
    }
  }
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v18 = (id)qword_1001F4DD8;
  if (!v18) {
    goto LABEL_32;
  }
  uint64_t v19 = v18;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v18 + 2));
  if (!v19[10])
  {
    v19[10] = 1;
    if (v19[8] == 4)
    {
      sub_100158FD0((uint64_t)v19);
      if (v19[9])
      {
        v19[8] = 3;
        sub_100159248((uint64_t)v19);
      }
    }
  }
  int v20 = v19[8] & 0xFD;

  if (v20 == 1 && (sub_10013D7C8() & 1) == 0) {
    int v21 = 0;
  }
  else {
LABEL_32:
  }
    int v21 = 1;
  self;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  id v22 = (id)qword_1001F4D40;
  id v23 = [v22 countByEnumeratingWithState:&v114 objects:v123 count:16];
  if (v23)
  {
    id v24 = v23;
    uint64_t v25 = *(void *)v115;
    int v26 = 1;
    do
    {
      for (uint64_t k = 0; k != v24; uint64_t k = (char *)k + 1)
      {
        if (*(void *)v115 != v25) {
          objc_enumerationMutation(v22);
        }
        uint64_t v28 = *(void **)(*((void *)&v114 + 1) + 8 * (void)k);
        uint64_t v29 = [(id)qword_1001F4D40 objectForKeyedSubscript:v28];
        int v30 = (void *)v29;
        if (v29 && !*(unsigned char *)(v29 + 24) && (*(unsigned char *)(v29 + 8) || *(unsigned char *)(v29 + 9)))
        {
          id v31 = *(void **)(v29 + 72);
          if (v31) {
            v26 &= sub_10013B57C(v31, v28, 4);
          }
        }
      }
      id v24 = [v22 countByEnumeratingWithState:&v114 objects:v123 count:16];
    }
    while (v24);

    if ((v26 & 1) == 0) {
      int v21 = 0;
    }
  }
  else
  {
  }
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    uint64_t v89 = 1263;
    long long v87 = "";
    unint64_t v88 = "+[NRDLocalDevice saveAllDevicesToDiskWithForce:]";
    _NRLogWithArgs();
  }
  unsigned int v93 = v21;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  id v32 = (id)qword_1001F4D40;
  id v33 = [v32 countByEnumeratingWithState:&v102 objects:v120 count:16];
  if (v33)
  {
    id v34 = v33;
    uint64_t v35 = *(void *)v103;
    do
    {
      uint64_t v36 = 0;
      do
      {
        if (*(void *)v103 != v35) {
          objc_enumerationMutation(v32);
        }
        id v37 = *(void **)(*((void *)&v102 + 1) + 8 * (void)v36);
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DA0 != -1) {
            dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
          }
          id v38 = (id)qword_1001F4D98;
          long long v39 = [v37 UUIDString];
          uint64_t v40 = [(id)qword_1001F4D40 objectForKeyedSubscript:v37];
          long long v41 = (void *)v40;
          if (v40)
          {
            long long v42 = "NO";
            if (*(unsigned char *)(v40 + 21)) {
              long long v42 = "YES";
            }
          }
          else
          {
            long long v42 = "NO";
          }
          CFStringRef v90 = v39;
          uint64_t v91 = v42;
          uint64_t v89 = 1267;
          long long v87 = "";
          unint64_t v88 = "+[NRDLocalDevice saveAllDevicesToDiskWithForce:]";
          _NRLogWithArgs();
        }
        [qword_1001F4D40 objectForKeyedSubscript:v37, v87, v88, v89, v90, v91];
        long long v43 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
        if (v43)
        {
          int v44 = v43[21];

          if (v44)
          {

            goto LABEL_83;
          }
        }
        uint64_t v36 = (char *)v36 + 1;
      }
      while (v34 != v36);
      id v45 = [v32 countByEnumeratingWithState:&v102 objects:v120 count:16];
      id v34 = v45;
    }
    while (v45);
  }

  if (!a2)
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      uint64_t v89 = 1291;
      long long v87 = "";
      unint64_t v88 = "+[NRDLocalDevice saveAllDevicesToDiskWithForce:]";
      _NRLogWithArgs();
    }
    goto LABEL_126;
  }
LABEL_83:
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    if (a2) {
      long long v46 = "Force s";
    }
    else {
      long long v46 = "S";
    }
    uint64_t v47 = (void *)qword_1001F4D40;
    id v48 = (id)qword_1001F4D98;
    CFStringRef v90 = (const __CFString *)v46;
    uint64_t v91 = (const char *)[v47 count];
    uint64_t v89 = 1276;
    long long v87 = "";
    unint64_t v88 = "+[NRDLocalDevice saveAllDevicesToDiskWithForce:]";
    _NRLogWithArgs();
  }
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  long long v49 = (dispatch_queue_t *)(id)qword_1001F4DD8;
  id v50 = (id)qword_1001F4D40;
  long long v51 = @"LocalDeviceConfigClassD";
  if (!v49) {
    goto LABEL_122;
  }
  dispatch_assert_queue_V2(v49[2]);
  if (!v50)
  {
    id v84 = sub_1001589D8();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v86 = sub_1001589D8();
      long long v87 = "-[NRDKeyManager saveNRUUIDDictionary:toKeychainWithName:dataProtectionClass:]";
      _NRLogWithArgs();
    }
    goto LABEL_122;
  }
  id v50 = v50;
  long long v52 = @"LocalDeviceConfigClassD";
  dispatch_assert_queue_V2(v49[2]);
  v123[0] = 0;
  long long v53 = +[NSKeyedArchiver archivedDataWithRootObject:v50 requiringSecureCoding:1 error:v123];
  long long v54 = (char *)v123[0];
  long long v55 = v54;
  if (!v53 || v54)
  {
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      CFStringRef v90 = @"LocalDeviceConfigClassD";
      uint64_t v91 = v55;
      uint64_t v89 = 846;
      long long v87 = "";
      unint64_t v88 = "-[NRDKeyManager _saveNRUUIDDictionary:toKeychainWithName:dataProtectionClass:retryBlock:]";
      _NRLogWithArgs();
    }

LABEL_122:
    goto LABEL_123;
  }
  LOBYTE(v114) = 0;
  BOOL v56 = sub_10015A600((uint64_t)v49, v53, @"LocalDeviceConfigClassD", 0, 4, &v114);

  if (v56)
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      long long v57 = (void *)qword_1001F4D40;
      id v58 = (id)qword_1001F4D98;
      uint64_t v89 = 1282;
      CFStringRef v90 = (const __CFString *)[v57 count];
      long long v87 = "";
      unint64_t v88 = "+[NRDLocalDevice saveAllDevicesToDiskWithForce:]";
      _NRLogWithArgs();
    }
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    id v59 = (id)qword_1001F4D40;
    id v60 = [v59 countByEnumeratingWithState:&v98 objects:v119 count:16];
    if (v60)
    {
      id v61 = v60;
      uint64_t v62 = *(void *)v99;
      do
      {
        for (m = 0; m != v61; m = (char *)m + 1)
        {
          if (*(void *)v99 != v62) {
            objc_enumerationMutation(v59);
          }
          [objc_msgSend((id)qword_1001F4D40, "objectForKeyedSubscript:", *(void *)(*((void *)&v98 + 1) + 8 * (void)m), v87, v88, v89, v90, v91)];
          id v64 = (unsigned char *)objc_claimAutoreleasedReturnValue();
          if (v64) {
            v64[21] = 0;
          }
        }
        id v61 = [v59 countByEnumeratingWithState:&v98 objects:v119 count:16];
      }
      while (v61);
    }

    goto LABEL_126;
  }
LABEL_123:
  id v65 = sub_100135DDC();
  int v66 = _NRLogIsLevelEnabled();

  if (v66)
  {
    id v67 = sub_100135DDC();
    long long v87 = (const char *)[(id)qword_1001F4D40 count];
    _NRLogWithArgs();
  }
  unsigned int v93 = 0;
LABEL_126:
  if (objc_msgSend(v6, "count", v87, v88, v89, v90, v91))
  {
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    id v68 = v6;
    id v69 = [v68 countByEnumeratingWithState:&v94 objects:v118 count:16];
    if (v69)
    {
      id v70 = v69;
      uint64_t v71 = *(void *)v95;
      do
      {
        for (n = 0; n != v70; n = (char *)n + 1)
        {
          if (*(void *)v95 != v71) {
            objc_enumerationMutation(v68);
          }
          uint64_t v73 = *(void *)(*((void *)&v94 + 1) + 8 * (void)n);
          long long v74 = [v68 objectForKeyedSubscript:v73];
          [(id)qword_1001F4D40 setObject:v74 forKeyedSubscript:v73];
        }
        id v70 = [v68 countByEnumeratingWithState:&v94 objects:v118 count:16];
      }
      while (v70);
    }
  }
  self;
  if (qword_1001F4D50)
  {
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    id v75 = (id)qword_1001F4D40;
    id v76 = [v75 countByEnumeratingWithState:&v114 objects:v123 count:16];
    if (v76)
    {
      id v77 = v76;
      uint64_t v78 = *(void *)v115;
LABEL_138:
      uint64_t v79 = 0;
      while (1)
      {
        if (*(void *)v115 != v78) {
          objc_enumerationMutation(v75);
        }
        id v80 = [(id)qword_1001F4D40 objectForKeyedSubscript:*(void *)(*((void *)&v114 + 1) + 8 * v79)];
        if (v80)
        {
          uint64_t v81 = v80[7];

          if (v81) {
            break;
          }
        }
        if (v77 == (id)++v79)
        {
          id v77 = [v75 countByEnumeratingWithState:&v114 objects:v123 count:16];
          if (v77) {
            goto LABEL_138;
          }
          goto LABEL_145;
        }
      }
    }
    else
    {
LABEL_145:

      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        _NRLogWithArgs();
      }
      if (qword_1001F4D50)
      {
        self;
        if (qword_1001F4DE0 != -1) {
          dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
        }
        id v82 = (id)qword_1001F4DD8;
        sub_10015A088((uint64_t)v82, @"IdentityKey", 0, 4);

        id v75 = (id)qword_1001F4D50;
      }
      else
      {
        id v75 = 0;
      }
      qword_1001F4D50 = 0;
    }
  }
  return v93;
}

uint64_t sub_10013D7C8()
{
  self;
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v0 = (id)qword_1001F4DD8;
  if (!v0) {
    goto LABEL_27;
  }
  uint64_t v1 = v0;
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v0 + 2));
  if (!v1[10])
  {
    v1[10] = 1;
    if (v1[8] == 4)
    {
      sub_100158FD0((uint64_t)v1);
      if (v1[9])
      {
        v1[8] = 3;
        sub_100159248((uint64_t)v1);
      }
    }
  }
  int v2 = v1[8] & 0xFD;

  if (v2 == 1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v3 = (id)qword_1001F4D40;
    id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v16;
      int v7 = 1;
      while (1)
      {
        for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v6) {
            objc_enumerationMutation(v3);
          }
          id v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          uint64_t v10 = [(id)qword_1001F4D40 objectForKeyedSubscript:v9];
          id v11 = (void *)v10;
          if (v10 && !*(unsigned char *)(v10 + 24) && (*(unsigned char *)(v10 + 8) || *(unsigned char *)(v10 + 9)))
          {
            int v12 = *(void **)(v10 + 80);
            if (v12)
            {
              if (!sub_10013B57C(v12, v9, 3))
              {
                int v7 = 0;
                uint64_t v13 = v11[19];
                if (!v13) {
                  goto LABEL_13;
                }
LABEL_26:
                v7 &= sub_1001397EC(v13, @"OOBK", v9, 3);
                goto LABEL_13;
              }
              [v11 setHasSavedClassCKeysInKeychain:1];
            }
            uint64_t v13 = v11[19];
            if (v13) {
              goto LABEL_26;
            }
          }
LABEL_13:
        }
        id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (!v5) {
          goto LABEL_29;
        }
      }
    }
    LOBYTE(v7) = 1;
LABEL_29:
  }
  else
  {
LABEL_27:
    LOBYTE(v7) = 0;
  }
  return v7 & 1;
}

void sub_10013DA14(uint64_t a1, uint64_t a2, void *a3)
{
  id v18 = a3;
  uint64_t v4 = self;
  id v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  if (v18)
  {
    uint64_t v6 = sub_10013DC5C(v4);
    if (v6)
    {
      int v7 = (char *)v6;
      if (*(void *)(v6 + 136) == a2)
      {
LABEL_4:

        goto LABEL_5;
      }
    }
    else
    {
      id v11 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v13 = sub_100135DDC();
        _NRLogWithArgs();
      }
      a2 = _os_log_pack_size();
      int v7 = (char *)&v18 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136446210;
      *(void *)(v14 + 4) = "+[NRDLocalDevice updateLocalDeviceFlagsInner:nrUUID:saveToDisk:]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    long long v15 = (void *)_NRCopyLogObjectForNRUUID();
    int v16 = _NRLogIsLevelEnabled();

    if (v16)
    {
      long long v17 = (void *)_NRCopyLogObjectForNRUUID();
      _NRLogWithArgs();
    }
    [v7 setLocalFlags:a2, v18];
    goto LABEL_4;
  }
  id v9 = sub_100135DDC();
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    int v7 = (char *)sub_100135DDC();
    _NRLogWithArgs();
    goto LABEL_4;
  }
LABEL_5:
  id v8 = v18;
}

unsigned char *sub_10013DC5C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  if (!v2)
  {
    id v8 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  uint64_t v4 = v3;
  if ((_NRIsUUIDNonZero() & 1) == 0)
  {
    id v10 = sub_100135DDC();
    int v11 = _NRLogIsLevelEnabled();

    if (v11)
    {
LABEL_8:
      id v12 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_9:
    uint64_t v6 = 0;
    goto LABEL_4;
  }
  id v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  uint64_t v6 = sub_10013DD58(v4, v2, 1);
LABEL_4:

  return v6;
}

unsigned char *sub_10013DD58(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  self;
  if (!v4)
  {
    id v11 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if ((_NRIsUUIDNonZero() & 1) == 0)
  {
    id v13 = sub_100135DDC();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
LABEL_19:
      id v15 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_20:
    uint64_t v6 = 0;
    goto LABEL_15;
  }
  id v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  sub_10013BB9C();
  uint64_t v6 = [(id)qword_1001F4D40 objectForKeyedSubscript:v4];
  if (!v6 && a3)
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      id v7 = (id)qword_1001F4D98;
      [v4 UUIDString];
      v19 = uint64_t v18 = 2119;
      int v16 = "";
      long long v17 = "+[NRDLocalDevice copyLocalDeviceForNRUUID:shouldCreate:]";
      _NRLogWithArgs();
    }
    id v8 = [NRDLocalDevice alloc];
    if (v8)
    {
      uint64_t v6 = sub_100137298((char *)v8, v4);
      sub_100137A5C(v6);
      if (v6) {
        v6[21] = 1;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    [objc_msgSend((id)qword_1001F4D40, "setObject:forKeyedSubscript:", v6, v4, v16, v17, v18, v19);
    uint64_t v9 = self;
    sub_10013C9FC(v9, 0);
  }
LABEL_15:

  return v6;
}

void sub_10013DF7C(uint64_t a1)
{
  char v10 = 0;
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v2 = (id)qword_1001F4DD8;
  char v3 = sub_10015B57C((uint64_t)v2, @"LocalDeviceKeysClassA", 0, 1, &v10);

  if ((v3 & 1) == 0)
  {
    if (v10)
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        _NRLogWithArgs();
      }
      self;
      if (qword_1001F4DE0 != -1) {
        dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
      }
      id v4 = (dispatch_queue_t *)(id)qword_1001F4DD8;
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      id v7 = sub_10013E208;
      id v8 = &unk_1001C8698;
      uint64_t v9 = *(void *)(a1 + 32);
      id v5 = v6;
      if (v4)
      {
        dispatch_assert_queue_V2(v4[2]);
        if (MKBGetDeviceLockState()) {
          sub_100159AFC((uint64_t)v4, v5);
        }
        else {
          ((void (*)(void *))v7)(v5);
        }
      }
    }
    else
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        _NRLogWithArgs();
      }
    }
  }
}

void sub_10013E208()
{
  uint64_t v0 = self;
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  uint64_t v1 = (dispatch_queue_t *)(id)qword_1001F4DD8;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  id v4 = sub_10013DF7C;
  id v5 = &unk_1001C8698;
  uint64_t v6 = v0;
  id v2 = v3;
  if (v1)
  {
    dispatch_assert_queue_V2(v1[2]);
    if (MKBGetDeviceLockState()) {
      sub_100159AFC((uint64_t)v1, v2);
    }
    else {
      ((void (*)(void *))v4)(v2);
    }
  }
}

uint64_t sub_10013E310(uint64_t a1, char a2)
{
  self;
  if (qword_1001F4D50) {
    return 1;
  }
  id v5 = sub_100139A8C((char *)[NRDLDKeychainItemSecKey alloc], @"IdentityKey", 0, 4);
  uint64_t v6 = (void *)qword_1001F4D50;
  qword_1001F4D50 = (uint64_t)v5;

  if (qword_1001F4D50)
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      uint64_t v7 = qword_1001F4D50;
      id v8 = (id)qword_1001F4D98;
      uint64_t v9 = (void *)sub_100138464(v7);
      Logid String = (void *)_NRKeyCreateLogString();
      _NRLogWithArgs();
    }
    return 1;
  }
  if (a2)
  {
    CFErrorRef error = 0;
    SecAccessControlRef v10 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate, 0x40000000uLL, &error);
    if (v10)
    {
      SecAccessControlRef v11 = v10;
      if (error)
      {
        CFRelease(error);
        CFErrorRef error = 0;
      }
      v38[0] = kSecAttrKeyType;
      v38[1] = kSecPrivateKeyAttrs;
      v39[0] = kSecAttrKeyTypeX25519;
      v36[0] = kSecAttrIsPermanent;
      v36[1] = kSecAttrAccessControl;
      v37[0] = &__kCFBooleanFalse;
      v37[1] = v11;
      id v12 = +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:2];
      v39[1] = v12;
      CFDictionaryRef v13 = +[NSDictionary dictionaryWithObjects:v39 forKeys:v38 count:2];

      CFRelease(v11);
      SecKeyRef v14 = SecKeyCreateRandomKey(v13, &error);
      if (v14)
      {
        SecKeyRef v15 = v14;
        if (error)
        {
          CFRelease(error);
          CFErrorRef error = 0;
        }
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DA0 != -1) {
            dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
          }
          id v16 = (id)qword_1001F4D98;
          uint64_t v35 = 0;
          SecKeyCopyPublicBytes();
          long long v17 = v35;
          uint64_t v35 = 0;
          uint64_t v18 = (void *)_NRKeyCreateLogString();

          _NRLogWithArgs();
        }
        uint64_t v19 = sub_10013991C([NRDLDKeychainItemSecKey alloc], v15);
        int v20 = (void *)qword_1001F4D50;
        qword_1001F4D50 = (uint64_t)v19;

        CFRelease(v15);
        if (sub_10013A2B4(qword_1001F4D50, @"IdentityKey", 0, 4))
        {
          uint64_t v3 = 1;
LABEL_39:

          return v3;
        }
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        if (_NRLogIsLevelEnabled())
        {
          id v24 = sub_100135DDC();
          _NRLogWithArgs();
        }
        uint64_t v25 = (void *)qword_1001F4D50;
        qword_1001F4D50 = 0;
      }
      else
      {
        id v29 = sub_100135DDC();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v31 = sub_100135DDC();
          _NRLogWithArgs();
        }
        if (error)
        {
          CFRelease(error);
          uint64_t v3 = 0;
          CFErrorRef error = 0;
          goto LABEL_39;
        }
      }
      uint64_t v3 = 0;
      goto LABEL_39;
    }
    id v26 = sub_100135DDC();
    int v27 = _NRLogIsLevelEnabled();

    if (v27)
    {
      id v28 = sub_100135DDC();
      _NRLogWithArgs();
    }
    if (error) {
      CFRelease(error);
    }
    return 0;
  }
  else
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      id v32 = "";
      _NRLogWithArgs();
    }
    sub_100115AB0(@"NRDLocalDevice", @"EncryptedIdentifier", @"KeyLoadFailure", 0, 0, v21, v22, v23, (uint64_t)v32);
    return 0;
  }
}

NRDDecryptedIdentifier *sub_10013E8A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  if (!sub_10013E310((uint64_t)NRDLocalDevice, 0))
  {
    uint64_t v18 = 0;
    goto LABEL_15;
  }
  id v9 = objc_alloc((Class)NEIKEv2EncryptedKeyIDIdentifier);
  SecAccessControlRef v10 = [v6 identifierData];
  SecAccessControlRef v11 = [v7 identifierData];
  if (qword_1001F4D50) {
    uint64_t v12 = *(void *)(qword_1001F4D50 + 16);
  }
  else {
    uint64_t v12 = 0;
  }
  id v13 = [v9 initWithKeyID:v10 aad:v11 keyRef:v12];

  id v38 = 0;
  id v14 = [v13 decryptWithSession:v8 returnError:&v38];
  id v15 = v38;
  if (!v14)
  {
    id v30 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled)
    {
      uint64_t v18 = 0;
      id v32 = @"DecryptionFailure";
      goto LABEL_27;
    }
    uint64_t v23 = (NSUUID *)sub_100135DDC();
    id v37 = "";
    _NRLogWithArgs();
    id v32 = @"DecryptionFailure";
    goto LABEL_22;
  }
  if ([v14 length] != (id)96)
  {
    id v33 = sub_100135DDC();
    int v34 = _NRLogIsLevelEnabled();

    if (!v34)
    {
      uint64_t v18 = 0;
      id v32 = @"IncorrectLength";
      goto LABEL_27;
    }
    uint64_t v23 = (NSUUID *)sub_100135DDC();
    [v14 length];
    id v37 = "";
    _NRLogWithArgs();
    id v32 = @"IncorrectLength";
    goto LABEL_22;
  }
  id v16 = (unsigned __int8 *)[v14 bytes];
  if (*v16 != 1)
  {
    id v35 = sub_100135DDC();
    int v36 = _NRLogIsLevelEnabled();

    if (!v36)
    {
      uint64_t v18 = 0;
      id v32 = @"IncorrectVersion";
      goto LABEL_27;
    }
    uint64_t v23 = (NSUUID *)sub_100135DDC();
    id v37 = "";
    _NRLogWithArgs();
    id v32 = @"IncorrectVersion";
    goto LABEL_22;
  }
  long long v17 = objc_alloc_init(NRDDecryptedIdentifier);
  uint64_t v18 = v17;
  if (v17) {
    v17->_version = *v16;
  }
  uint64_t v19 = (NSUUID *)[objc_alloc((Class)NSUUID) initWithUUIDBytes:v16 + 1];
  if (v18)
  {
    identity = v18->_identity;
    v18->_identity = v19;

    uint64_t v21 = v18->_identity;
  }
  else
  {

    uint64_t v21 = 0;
  }
  uint64_t v22 = (void *)qword_1001F4D48;
  uint64_t v23 = v21;
  id v24 = [v22 objectForKeyedSubscript:v23];
  if (!v18)
  {

    id v32 = @"NoDeviceFound";
LABEL_22:

    uint64_t v18 = 0;
LABEL_27:
    sub_100115AB0(@"NRDLocalDevice", @"EncryptedIdentifier", v32, 0, 0, v26, v27, v28, (uint64_t)v37);
    goto LABEL_13;
  }
  nrUUID = v18->_nrUUID;
  v18->_nrUUID = v24;

  if (!v18->_nrUUID)
  {
    id v32 = @"NoDeviceFound";
    goto LABEL_27;
  }
LABEL_13:

LABEL_15:
  return v18;
}

char *sub_10013EC34(char *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    long long v21 = 0u;
    id v2 = (id)qword_1001F4D40;
    id v3 = [v2 countByEnumeratingWithState:&v21 objects:v26 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v22;
      do
      {
        id v6 = 0;
        do
        {
          if (*(void *)v22 != v5) {
            objc_enumerationMutation(v2);
          }
          id v7 = [(id)qword_1001F4D40 objectForKeyedSubscript:v6];
          if (v7)
          {
            uint64_t v8 = v7[7];

            if (v8)
            {
              char v10 = 0;
              goto LABEL_15;
            }
          }
          id v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v9 = [v2 countByEnumeratingWithState:&v21 objects:v26 count:16];
        id v4 = v9;
      }
      while (v9);
    }
    char v10 = 1;
LABEL_15:

    if (!sub_10013E310((uint64_t)NRDLocalDevice, v10)) {
      return 0;
    }
    if (*((void *)v1 + 7)) {
      goto LABEL_20;
    }
    SecAccessControlRef v11 = (char *)objc_alloc_init((Class)NSUUID);
    if (v11)
    {
      uint64_t v12 = v11;
      [v1 setLocalIdentity:v11];
      id v13 = (const char *)&unk_1001F4000;
      [(id)qword_1001F4D48 setObject:*((void *)v1 + 4) forKeyedSubscript:v12];
      uint64_t v14 = self;
      if (sub_10013C9FC(v14, 0))
      {

LABEL_20:
        uint64_t v12 = (char *)[objc_alloc((Class)NSMutableData) initWithCapacity:48];
        v25[0] = 0;
        v25[1] = 0;
        [*((id *)v1 + 7) getUUIDBytes:v25];
        [v12 appendBytes:v25 length:16];
        id v15 = (void *)sub_100138464(qword_1001F4D50);
        if (v15)
        {
          [v12 appendData:v15];
          uint64_t v1 = v12;
        }
        else
        {
          uint64_t v1 = 0;
        }

        goto LABEL_23;
      }
    }
    else
    {
      id v17 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      id v13 = "-[NRDLocalDevice copyDeviceIdentityPayload]";
      if (IsLevelEnabled)
      {
        id v19 = sub_100135DDC();
        _NRLogWithArgs();
      }
      uint64_t v1 = (char *)_os_log_pack_size();
      uint64_t v12 = (char *)&v21 - ((unint64_t)(v1 + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 136446210;
      *(void *)(v20 + 4) = "-[NRDLocalDevice copyDeviceIdentityPayload]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    [*((id *)v13 + 425) setObject:0 forKeyedSubscript:v12];
    [v1 setLocalIdentity:0];
    uint64_t v1 = 0;
LABEL_23:
  }
  return v1;
}

id sub_10013EF3C(void *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  if (a2 == 1)
  {
    id v2 = (void *)a1[11];
    goto LABEL_8;
  }
  if (a2 == 3)
  {
    id v2 = (void *)a1[10];
    goto LABEL_8;
  }
  if (a2 != 4)
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      id v4 = (id)qword_1001F4D98;
      id String = (void *)NRDataProtectionClassCreateString();
      _NRLogWithArgs();
    }
    return 0;
  }
  id v2 = (void *)a1[9];
LABEL_8:

  return v2;
}

void sub_10013F05C(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 24))
  {
    id v2 = *(void **)(a1 + 32);
    id v3 = *(id *)(a1 + 72);
    sub_10013B6B4(v3, v2, 4);

    id v4 = *(id *)(a1 + 32);
    id v5 = *(id *)(a1 + 80);
    id v6 = *(id *)(a1 + 152);
    self;
    if (qword_1001F4DE0 != -1) {
      dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
    }
    id v7 = (id)qword_1001F4DD8;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10013F1BC;
    v11[3] = &unk_1001C8868;
    id v12 = v5;
    id v13 = v4;
    id v14 = v6;
    id v8 = v6;
    id v9 = v4;
    id v10 = v5;
    sub_10015969C((uint64_t)v7, v11);
  }
}

void sub_10013F1BC(uint64_t a1)
{
  sub_10013B6B4(*(void **)(a1 + 32), *(void **)(a1 + 40), 3);
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v4 = *(id *)(a1 + 40);
    self;
    if (qword_1001F4DE0 != -1) {
      dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
    }
    id v3 = (id)qword_1001F4DD8;
    sub_10015B57C((uint64_t)v3, @"OOBK", v4, 3, 0);

    *(unsigned char *)(v2 + 8) = 1;
  }
}

void *sub_10013F298(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)a1[19];
    if (v2) {
      uint64_t v2 = (void *)v2[2];
    }
    a1 = v2;
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_10013F2D8(uint64_t a1)
{
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    _NRLogWithArgs();
  }
  if (*(unsigned char *)(a1 + 136)) {
    return *(unsigned char *)(a1 + 144) & 1;
  }
  else {
    return 0;
  }
}

BOOL sub_10013F3BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (!v1)
  {
    id v3 = sub_10013B080([NRDLDDataClassKeychainItems alloc], 4);
    id v4 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v3;

    if (!*(void *)(a1 + 72))
    {
      id v8 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v10 = sub_100135DDC();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 136446210;
      *(void *)(v11 + 4) = "-[NRDLocalDevice fillInClassDKeys]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    id v5 = *(id *)(a1 + 32);
    id v6 = [(id)a1 description];
    sub_10012F648(v5, 5005, v6, @"ClassD");
  }
  return v1 == 0;
}

void sub_10013F548(id *a1, int a2, void *a3)
{
  if (a1)
  {
    id v6 = a1[4];
    id v7 = a3;
    id v8 = [a1 description];
    sub_10012F648(v6, a2, v8, v7);
  }
}

void sub_10013F5DC(uint64_t a1)
{
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    _NRLogWithArgs();
  }
  BOOL v3 = sub_10013F3BC(a1);
  id v4 = *(id *)(a1 + 80);
  if (v4)
  {
    id v5 = v4;
LABEL_21:

    goto LABEL_22;
  }
  if ([(id)a1 hasSavedClassCKeysInKeychain])
  {
    id v5 = 0;
    goto LABEL_21;
  }
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v6 = (id)qword_1001F4DD8;
  id v5 = v6;
  if (!v6) {
    goto LABEL_21;
  }
  dispatch_assert_queue_V2(*((dispatch_queue_t *)v6 + 2));
  if (!v5[10])
  {
    v5[10] = 1;
    if (v5[8] == 4)
    {
      sub_100158FD0((uint64_t)v5);
      if (v5[9])
      {
        v5[8] = 3;
        sub_100159248((uint64_t)v5);
      }
    }
  }
  int v7 = v5[8] & 0xFD;

  if (v7 == 1)
  {
    id v8 = sub_10013B080([NRDLDDataClassKeychainItems alloc], 3);
    id v9 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v8;

    if (!*(void *)(a1 + 80))
    {
      id v23 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v25 = sub_100135DDC();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v26 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v26 = 136446210;
      *(void *)(v26 + 4) = "-[NRDLocalDevice fillInKeysForCurrentlyUnlocked]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    id v10 = *(id *)(a1 + 32);
    id v5 = [(id)a1 description];
    sub_10012F648(v10, 5005, v5, @"ClassC");

    BOOL v3 = 1;
    goto LABEL_21;
  }
LABEL_22:
  id v11 = *(id *)(a1 + 80);
  if (!v11 || (uint64_t v12 = *(void *)(a1 + 88), v11, v12))
  {
    if (!v3) {
      return;
    }
    goto LABEL_25;
  }
  id v14 = *(id *)(a1 + 80);
  id v15 = [v14 copy];
  id v16 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v15;

  uint64_t v17 = *(void *)(a1 + 88);
  if (v17)
  {
    uint64_t v18 = *(void **)(v17 + 8);
    *(void *)(v17 + 8) = 0;

    uint64_t v19 = *(void *)(a1 + 88);
    if (v19)
    {
      uint64_t v20 = *(void **)(v19 + 24);
      *(void *)(v19 + 24) = 0;
    }
  }
  id v21 = *(id *)(a1 + 32);
  long long v22 = [(id)a1 description];
  sub_10012F648(v21, 5005, v22, @"ClassA");

  if (v3)
  {
LABEL_25:
    uint64_t v13 = self;
    sub_10013C9FC(v13, 0);
  }
}

void sub_10013F9DC(char *a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10015BD9C();
  dispatch_assert_queue_V2(v4);

  if (!v3)
  {
    id v6 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = sub_100135DDC();
      _NRLogWithArgs();
    }
    id v3 = (id)_os_log_pack_size();
    a1 = (char *)&v11[-1] - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v9 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v9 = 136446210;
    *(void *)(v9 + 4) = "-[NRDLocalDevice fillInClassCKeysWithCompletion:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_10;
  }
  if (!*((void *)a1 + 10))
  {
    self;
    if (qword_1001F4DE0 == -1)
    {
LABEL_5:
      id v5 = (id)qword_1001F4DD8;
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10013FBF4;
      v11[3] = &unk_1001C86C0;
      void v11[4] = a1;
      id v12 = v3;
      sub_10015969C((uint64_t)v5, v11);

      goto LABEL_6;
    }
LABEL_10:
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
    goto LABEL_5;
  }
  (*((void (**)(id, uint64_t))v3 + 2))(v3, 1);
LABEL_6:
}

uint64_t sub_10013FBF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2 || !*(void *)(v2 + 80))
  {
    id v3 = sub_10013B080([NRDLDDataClassKeychainItems alloc], 3);
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      objc_storeStrong((id *)(v4 + 80), v3);
    }

    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5 || !*(void *)(v5 + 80))
    {
      id v9 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v11 = sub_100135DDC();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 136446210;
      *(void *)(v12 + 4) = "-[NRDLocalDevice fillInClassCKeysWithCompletion:]_block_invoke";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    sub_10013F548((id *)v5, 5005, @"ClassC");
    uint64_t v6 = self;
    sub_10013C9FC(v6, 0);
  }
  int v7 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v7();
}

void sub_10013FDA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_10015BD9C();
  dispatch_assert_queue_V2(v4);

  if (!v3)
  {
    id v5 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v7 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136446210;
    *(void *)(v8 + 4) = "-[NRDLocalDevice fillInClassAKeysWithCompletion:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  if (*(void *)(a1 + 88))
  {
    v3[2](v3, 1);
  }
  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10013FF58;
    v9[3] = &unk_1001C86E8;
    void v9[4] = a1;
    id v10 = v3;
    sub_10013F9DC((char *)a1, v9);
  }
}

uint64_t sub_10013FF58(uint64_t a1, char a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      if (v3[11])
      {
LABEL_13:
        id v15 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
        goto LABEL_14;
      }
      id v3 = (void *)v3[10];
    }
    uint64_t v4 = v3;
    id v5 = [v4 copy];
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      objc_storeStrong((id *)(v6 + 88), v5);
    }

    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7 || (uint64_t v8 = *(void **)(v7 + 88)) == 0)
    {
      id v20 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v22 = sub_100135DDC();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v23 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v23 = 136446210;
      *(void *)(v23 + 4) = "-[NRDLocalDevice fillInClassAKeysWithCompletion:]_block_invoke";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    id v9 = v8;
    id v10 = (void *)v9[1];
    v9[1] = 0;

    uint64_t v11 = *(void *)(a1 + 32);
    if (v11)
    {
      id v12 = *(id *)(v11 + 88);
      if (v12)
      {
        uint64_t v13 = v12;
        id v14 = (void *)*((void *)v12 + 3);
        *((void *)v12 + 3) = 0;
      }
    }
    sub_10013F548(*(id **)(a1 + 32), 5005, @"ClassA");
    goto LABEL_13;
  }
  id v17 = sub_100135DDC();
  int v18 = _NRLogIsLevelEnabled();

  if (v18)
  {
    id v19 = sub_100135DDC();
    _NRLogWithArgs();
  }
  id v15 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_14:

  return v15();
}

char *sub_10014019C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  self;
  if (!v2) {
    goto LABEL_10;
  }
  id v4 = v2[5];
  if (!v4 && !*((unsigned char *)v2 + 24))
  {
    if (*((unsigned char *)v2 + 20)) {
      goto LABEL_5;
    }
LABEL_10:
    id v5 = 0;
    goto LABEL_8;
  }

LABEL_5:
  id v5 = sub_100137298((char *)[NRDLocalDevice alloc], v2[4]);
  [v5 setBluetoothUUID:v2[5]];
  uint64_t v6 = [v2 dateCreated];
  [v5 setDateCreated:v6];

  [v5 setIsEmptyPairing:1];
  if (v5)
  {
    v5[21] = 1;
    v5[24] = *((unsigned char *)v2 + 24);
  }
  [v5 setHasCompletedBluetoothPairing:*((unsigned __int8 *)v2 + 10)];
  [v5 setSelfManagedBluetoothPairing:*((unsigned __int8 *)v2 + 20)];
LABEL_8:

  return v5;
}

uint64_t sub_100140290(id *a1)
{
  uint64_t v1 = a1;
  if (!a1) {
    return (uint64_t)v1;
  }
  if ([a1 isEmptyPairing])
  {
    [v1 description];
    return objc_claimAutoreleasedReturnValue();
  }
  id v2 = objc_alloc((Class)NSMutableString);
  id v3 = v1[4];
  id v4 = [v3 UUIDString];
  id v5 = [v2 initWithFormat:@"NRDLD[%@]", v4];

  if (*((_WORD *)v1 + 14)) {
    goto LABEL_8;
  }
  id v6 = v1[14];
  if (v6 || (id v6 = v1[15]) != 0)
  {

LABEL_8:
    [v5 appendString:@"\n\t\t"];
    int v7 = *((unsigned __int16 *)v1 + 14);
    BOOL v8 = *((_WORD *)v1 + 14) == 0;
    if (*((_WORD *)v1 + 14)) {
      [v5 appendFormat:@"inner link version %u", *((unsigned __int16 *)v1 + 14)];
    }
    id v9 = v1[14];

    id v10 = ", ";
    if (v9)
    {
      if (v7) {
        uint64_t v11 = ", ";
      }
      else {
        uint64_t v11 = "";
      }
      id v12 = v1[14];
      [v5 appendFormat:@"%sname \"%@\"", v11, v12];

      BOOL v8 = 0;
    }
    id v13 = v1[15];

    if (v13)
    {
      if (v8) {
        id v14 = "";
      }
      else {
        id v14 = ", ";
      }
      id v15 = v1[15];
      [v5 appendFormat:@"%sbuild \"%@\"", v14, v15];

      BOOL v8 = 0;
    }
    if (*((unsigned char *)v1 + 18))
    {
      if (v8) {
        id v10 = "";
      }
      StringFromNRDeviceEndpointType = (void *)createStringFromNRDeviceEndpointType();
      [v5 appendFormat:@"%stype \"%@\"", v10, StringFromNRDeviceEndpointType];
    }
    goto LABEL_24;
  }
  if (*((unsigned char *)v1 + 18)) {
    goto LABEL_8;
  }
LABEL_24:
  id v17 = v1[5];

  if (v17)
  {
    id v18 = v1[5];
    id v19 = [v18 UUIDString];
    [v5 appendFormat:@"\n\t\tBluetoothUUID: %@", v19];
  }
  id v20 = v1[6];

  if (v20)
  {
    id v21 = v1[6];
    [v5 appendFormat:@"\n\t\tIDSDeviceID: %@", v21];
  }
  if (*((unsigned char *)v1 + 8)) {
    id v22 = "";
  }
  else {
    id v22 = "un";
  }
  if (*((unsigned char *)v1 + 9)) {
    uint64_t v23 = "en";
  }
  else {
    uint64_t v23 = "dis";
  }
  [v5 appendFormat:@"\n\t\t%sregistered, %sabled", v22, v23];
  if (*((unsigned char *)v1 + 24)) {
    [v5 appendFormat:@", ephemeral"];
  }
  if (*((unsigned char *)v1 + 15)) {
    long long v24 = "IDS";
  }
  else {
    long long v24 = "OOBK";
  }
  [v5 appendFormat:@"\n\t\tinitially paired using %s", v24];
  id v25 = [v1 dateCreated];
  [v5 appendFormat:@"\n\t\tcreated: %@", v25];

  uint64_t v26 = [v1 dateRegistered];

  if (v26)
  {
    uint64_t v27 = [v1 dateRegistered];
    [v5 appendFormat:@", registered: %@", v27];
  }
  uint64_t v28 = [v1 dateEnabled];

  if (v28)
  {
    id v29 = [v1 dateEnabled];
    [v5 appendFormat:@", enabled: %@", v29];
  }
  id v30 = v1[19];
  if (v30) {
    id v30 = (void *)v30[2];
  }
  id v31 = v30;
  Logid String = (void *)_NRKeyCreateLogString();
  [v5 appendFormat:@"\n\t\tOut of Band Key: %@", LogString];

  if (*((unsigned char *)v1 + 16)) {
    CFStringRef v33 = @"YES";
  }
  else {
    CFStringRef v33 = @"NO";
  }
  [v5 appendFormat:@"\n\t\tIsAltAccount: %@", v33];
  if (*((unsigned char *)v1 + 17)) {
    CFStringRef v34 = @"YES";
  }
  else {
    CFStringRef v34 = @"NO";
  }
  [v5 appendFormat:@"\n\t\tAlways On Wi-Fi: %@", v34];
  [v5 appendFormat:@"\n\t\tDevice Flags: l %#llx r %#llx", v1[17], v1[18]];
  id v35 = v1[13];

  if (v35)
  {
    id v36 = v1[13];
    id v37 = (void *)_NRCreateMACAddressString();
    [v5 appendFormat:@"\n\t\tBluetooth MAC Address: %@", v37];
  }
  id v38 = v1[16];

  if (v38)
  {
    id v39 = v1[16];
    [v5 appendFormat:@"\n\t\tLocal Operational properties: %@", v39];
  }
  id v40 = v1[8];

  if (v40)
  {
    id v41 = v1[8];
    long long v42 = v41;
    if (v41) {
      long long v43 = (void *)*((void *)v41 + 2);
    }
    else {
      long long v43 = 0;
    }
    id v44 = v43;
    id v45 = (void *)_NRKeyCreateLogString();
    [v5 appendFormat:@"\n\t\tRemote Identity Public Key: %@", v45];

    id v46 = v1[8];
    uint64_t v47 = v46;
    if (v46) {
      id v48 = (void *)*((void *)v46 + 1);
    }
    else {
      id v48 = 0;
    }
    id v49 = v48;
    [v5 appendFormat:@"\n\t\tRemote Device Identity: %@", v49];
  }
  id v50 = v1[7];

  if (v50)
  {
    id v51 = v1[7];
    [v5 appendFormat:@"\n\t\tLocal Device Identity: %@", v51];

    if (*((unsigned char *)v1 + 11)) {
      CFStringRef v52 = @"YES";
    }
    else {
      CFStringRef v52 = @"NO";
    }
    [v5 appendFormat:@"\n\t\tHas Authenticated Using Identity: %@", v52];
  }
  id v53 = v1[9];
  long long v54 = v53;
  if (v53) {
    long long v55 = (void *)*((void *)v53 + 1);
  }
  else {
    long long v55 = 0;
  }
  id v56 = v55;

  if (v56)
  {
    id v57 = v1[9];
    id v58 = v57;
    if (v57) {
      id v59 = (void *)*((void *)v57 + 1);
    }
    else {
      id v59 = 0;
    }
    id v60 = v59;
    id v61 = (void *)sub_100138464((uint64_t)v60);
    uint64_t v62 = (void *)_NRKeyCreateLogString();
    [v5 appendFormat:@"\n\t\tClass D Remote Public Key: %@", v62];
  }
  id v63 = v1[9];
  id v64 = v63;
  if (v63) {
    id v65 = (void *)*((void *)v63 + 2);
  }
  else {
    id v65 = 0;
  }
  id v66 = v65;

  if (v66)
  {
    id v67 = v1[9];
    id v68 = v67;
    if (v67) {
      id v69 = (void *)*((void *)v67 + 2);
    }
    else {
      id v69 = 0;
    }
    id v70 = v69;
    uint64_t v71 = (void *)sub_100138464((uint64_t)v70);
    long long v72 = (void *)_NRKeyCreateLogString();
    [v5 appendFormat:@"\n\t\tClass D Local Public Key: %@", v72];
  }
  id v73 = v1[9];
  long long v74 = v73;
  if (v73) {
    id v75 = (void *)*((void *)v73 + 3);
  }
  else {
    id v75 = 0;
  }
  id v76 = v75;

  if (v76)
  {
    id v77 = (id *)v1[9];
    uint64_t v78 = v77;
    if (v77)
    {
      id v79 = v77[3];
      id v80 = v79;
      if (v79) {
        uint64_t v81 = (void *)*((void *)v79 + 2);
      }
      else {
        uint64_t v81 = 0;
      }
    }
    else
    {
      id v80 = 0;
      uint64_t v81 = 0;
    }
    id v82 = v81;
    BOOL v83 = (void *)_NRKeyCreateLogString();
    [v5 appendFormat:@"\n\t\tClass D Shared Secret: %@", v83];
  }
  id v84 = v1[10];
  long long v85 = v84;
  if (v84) {
    id v86 = (void *)*((void *)v84 + 1);
  }
  else {
    id v86 = 0;
  }
  id v87 = v86;

  if (v87)
  {
    id v88 = v1[10];
    uint64_t v89 = v88;
    if (v88) {
      CFStringRef v90 = (void *)*((void *)v88 + 1);
    }
    else {
      CFStringRef v90 = 0;
    }
    id v91 = v90;
    id v92 = (void *)sub_100138464((uint64_t)v91);
    unsigned int v93 = (void *)_NRKeyCreateLogString();
    [v5 appendFormat:@"\n\t\tClass C Remote Public Key: %@", v93];
  }
  id v94 = v1[10];
  long long v95 = v94;
  if (v94) {
    long long v96 = (void *)*((void *)v94 + 2);
  }
  else {
    long long v96 = 0;
  }
  id v97 = v96;

  if (v97)
  {
    id v98 = v1[10];
    long long v99 = v98;
    if (v98) {
      long long v100 = (void *)*((void *)v98 + 2);
    }
    else {
      long long v100 = 0;
    }
    id v101 = v100;
    long long v102 = (void *)sub_100138464((uint64_t)v101);
    long long v103 = (void *)_NRKeyCreateLogString();
    [v5 appendFormat:@"\n\t\tClass C Local Public Key: %@", v103];
  }
  id v104 = v1[10];
  long long v105 = v104;
  if (v104) {
    long long v106 = (void *)*((void *)v104 + 3);
  }
  else {
    long long v106 = 0;
  }
  id v107 = v106;

  if (v107)
  {
    long long v108 = (id *)v1[10];
    long long v109 = v108;
    if (v108)
    {
      id v110 = v108[3];
      long long v111 = v110;
      if (v110) {
        long long v112 = (void *)*((void *)v110 + 2);
      }
      else {
        long long v112 = 0;
      }
    }
    else
    {
      long long v111 = 0;
      long long v112 = 0;
    }
    id v113 = v112;
    long long v114 = (void *)_NRKeyCreateLogString();
    [v5 appendFormat:@"\n\t\tClass C Shared Secret: %@", v114];
  }
  id v115 = v1[11];
  long long v116 = v115;
  if (v115) {
    long long v117 = (void *)*((void *)v115 + 1);
  }
  else {
    long long v117 = 0;
  }
  id v118 = v117;

  if (v118)
  {
    id v119 = v1[11];
    id v120 = v119;
    if (v119) {
      int v121 = (void *)*((void *)v119 + 1);
    }
    else {
      int v121 = 0;
    }
    id v122 = v121;
    id v123 = (void *)sub_100138464((uint64_t)v122);
    id v124 = (void *)_NRKeyCreateLogString();
    [v5 appendFormat:@"\n\t\tClass A Remote Public Key: %@", v124];
  }
  id v125 = v1[11];
  id v126 = v125;
  if (v125) {
    id v127 = (void *)*((void *)v125 + 2);
  }
  else {
    id v127 = 0;
  }
  id v128 = v127;

  if (v128)
  {
    id v129 = v1[11];
    int v130 = v129;
    if (v129) {
      id v131 = (void *)*((void *)v129 + 2);
    }
    else {
      id v131 = 0;
    }
    id v132 = v131;
    id v133 = (void *)sub_100138464((uint64_t)v132);
    id v134 = (void *)_NRKeyCreateLogString();
    [v5 appendFormat:@"\n\t\tClass A Local Public Key: %@", v134];
  }
  id v135 = v1[11];
  id v136 = v135;
  if (v135) {
    id v137 = (void *)*((void *)v135 + 3);
  }
  else {
    id v137 = 0;
  }
  id v138 = v137;

  if (v138)
  {
    id v139 = (id *)v1[11];
    unsigned int v140 = v139;
    if (v139)
    {
      id v141 = v139[3];
      id v142 = v141;
      if (v141) {
        id v143 = (void *)*((void *)v141 + 2);
      }
      else {
        id v143 = 0;
      }
    }
    else
    {
      id v142 = 0;
      id v143 = 0;
    }
    id v144 = v143;
    id v145 = (void *)_NRKeyCreateLogString();
    [v5 appendFormat:@"\n\t\tClass A Shared Secret: %@", v145];
  }
  id v146 = sub_10015BD9C();
  dispatch_assert_queue_V2(v146);

  int32x4_t v147 = sub_100140FAC(v1, @"0");
  if (v147)
  {
    unsigned __int16 v148 = sub_10015BD9C();
    dispatch_assert_queue_V2(v148);

    long long v149 = sub_100140FAC(v1, @"0");
    [v5 appendFormat:@"\n\t\tClass D Local Inner Endpoint: %@", v149];
  }
  long long v150 = sub_10015BD9C();
  dispatch_assert_queue_V2(v150);

  long long v151 = sub_1001414DC(v1, @"0");
  if (v151)
  {
    long long v152 = sub_10015BD9C();
    dispatch_assert_queue_V2(v152);

    int32x4_t v153 = sub_1001414DC(v1, @"0");
    [v5 appendFormat:@"\n\t\tClass D Remote Inner Endpoint: %@", v153];
  }
  int32x4_t v154 = sub_10015BD9C();
  dispatch_assert_queue_V2(v154);

  unsigned __int16 v155 = (void *)sub_1001416EC(v1, @"0");
  if (v155)
  {
    uint64_t v156 = sub_10015BD9C();
    dispatch_assert_queue_V2(v156);

    id v157 = (void *)sub_1001416EC(v1, @"0");
    [v5 appendFormat:@"\n\t\tClass C Local Inner Endpoint: %@", v157];
  }
  uint64_t v158 = sub_10015BD9C();
  dispatch_assert_queue_V2(v158);

  id v159 = sub_1001418A8(v1, @"0");
  if (v159)
  {
    id v160 = sub_10015BD9C();
    dispatch_assert_queue_V2(v160);

    id v161 = sub_1001418A8(v1, @"0");
    [v5 appendFormat:@"\n\t\tClass C Remote Inner Endpoint: %@", v161];
  }
  if (*((unsigned char *)v1 + 12)) {
    int32x4_t v162 = "D";
  }
  else {
    int32x4_t v162 = "";
  }
  if (*((unsigned char *)v1 + 13)) {
    uint64_t v163 = "C";
  }
  else {
    uint64_t v163 = "";
  }
  if (*((unsigned char *)v1 + 14)) {
    id v164 = "A";
  }
  else {
    id v164 = "";
  }
  if ([v1 hasSavedClassCKeysInKeychain]) {
    id v165 = "C";
  }
  else {
    id v165 = "";
  }
  [v5 appendFormat:@"\n\t\tKeys confirmed: %s%s%s, keys saved in keychain: %s", v162, v163, v164, v165];
  id v166 = v1[12];

  if (v166)
  {
    id v167 = v1[12];
    id v168 = (void *)_NRCreateDataStringTruncated();
    [v5 appendFormat:@"\n\t\tReceived Proxy Notify Payload: %@", v168];
  }
  uint64_t v1 = (id *)v5;

  return (uint64_t)v1;
}

void *sub_100140FAC(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = sub_10015BD9C();
    dispatch_assert_queue_V2(v4);

    id v5 = [v2 localInnerIPv6AddressBytesClassD];

    if (!v5)
    {
      if (v2[16]) {
        BOOL v6 = sub_100118D5C(v2) == 1;
      }
      else {
        BOOL v6 = 1;
      }
      uint64_t v7 = self;
      BOOL v8 = sub_10015BD9C();
      dispatch_assert_queue_V2(v8);

      long long v41 = xmmword_10016C8A0;
      BYTE9(v41) = 13;
      if (v6)
      {
        id v34 = v3;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        id v9 = (id)qword_1001F4D40;
        id v10 = [v9 countByEnumeratingWithState:&v37 objects:v42 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v38;
          while (2)
          {
            for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v38 != v12) {
                objc_enumerationMutation(v9);
              }
              id v16 = [(id)qword_1001F4D40 objectForKeyedSubscript:*(void *)(*((void *)&v37 + 1) + 8 * i), v29, v30, v31, v32, IPv6AddrStringFromData];
              id v17 = [v16 localInnerIPv6AddressBytesClassD];

              if (v17)
              {
                uint64_t v35 = 0;
                uint64_t v36 = 0;
                id v18 = [v16 localInnerIPv6AddressBytesClassD];
                id v19 = [v18 length];

                if (v19 != (id)16) {
                  goto LABEL_33;
                }
                id v20 = [v16 localInnerIPv6AddressBytesClassD];
                [v20 getBytes:&v35 length:16];

                self;
                if (WORD1(v36) && WORD2(v36))
                {
                  if (qword_1001F4DA0 != -1) {
                    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4DA0 != -1) {
                      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
                    }
                    id v22 = (id)qword_1001F4D98;
                    uint64_t v23 = [v16 localInnerIPv6AddressBytesClassD];
                    id v32 = v16;
                    IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
                    uint64_t v31 = 3718;
                    id v29 = "";
                    id v30 = "+[NRDLocalDevice createNewLocalClassDAddrData:]";
                    _NRLogWithArgs();
                  }
LABEL_33:
                  [v16 localInnerIPv6AddressBytesClassD:v29:v30:v31:v32:IPv6AddrStringFromData];
                  id v21 = (id)objc_claimAutoreleasedReturnValue();

                  id v3 = v34;
                  goto LABEL_34;
                }
                if (qword_1001F4DA0 != -1) {
                  dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4DA0 != -1) {
                    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
                  }
                  id v14 = (id)qword_1001F4D98;
                  id v15 = [v16 localInnerIPv6AddressBytesClassD];
                  id v32 = v16;
                  IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
                  uint64_t v31 = 3715;
                  id v29 = "";
                  id v30 = "+[NRDLocalDevice createNewLocalClassDAddrData:]";
                  _NRLogWithArgs();
                }
              }
            }
            id v11 = [v9 countByEnumeratingWithState:&v37 objects:v42 count:16];
            if (v11) {
              continue;
            }
            break;
          }
        }

        sub_1001424C8(v7, &v41);
        id v3 = v34;
      }
      else
      {
        HIBYTE(v41) = 1;
      }
      id v21 = [objc_alloc((Class)NSData) initWithBytes:&v41 length:16];
LABEL_34:
      [v2 setLocalInnerIPv6AddressBytesClassD:v21, v29, v30, v31, v32, IPv6AddrStringFromData];

      uint64_t v24 = self;
      sub_10013C9FC(v24, 0);
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        id v25 = (id)qword_1001F4D98;
        uint64_t v26 = [v2 localInnerIPv6AddressBytesClassD];
        id v32 = (void *)createIPv6AddrStringFromData();
        IPv6AddrStringFromData = v2;
        uint64_t v31 = 3854;
        id v29 = "";
        id v30 = "-[NRDLocalDevice copyLocalClassDInnerEndpointWithPort:]";
        _NRLogWithArgs();
      }
    }
    uint64_t v27 = [v2 localInnerIPv6AddressBytesClassD:v29, v30, v31, v32, IPv6AddrStringFromData];
    id v2 = sub_100141BFC((uint64_t)NRDLocalDevice, v27, v3);
  }
  return v2;
}

void *sub_1001414DC(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = sub_10015BD9C();
    dispatch_assert_queue_V2(v4);

    id v5 = [v2 remoteInnerIPv6AddressBytesClassD];

    if (!v5)
    {
      if (v2[16]) {
        BOOL v6 = sub_100118D5C(v2) == 1;
      }
      else {
        BOOL v6 = 1;
      }
      uint64_t v7 = self;
      BOOL v8 = sub_10015BD9C();
      dispatch_assert_queue_V2(v8);

      long long v20 = xmmword_10016C950;
      if (v6) {
        sub_1001424C8(v7, &v20);
      }
      else {
        HIBYTE(v20) = 2;
      }
      id v9 = [objc_alloc((Class)NSData) initWithBytes:&v20 length:16];
      [v2 setRemoteInnerIPv6AddressBytesClassD:v9];

      uint64_t v10 = self;
      sub_10013C9FC(v10, 0);
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        id v11 = (id)qword_1001F4D98;
        uint64_t v12 = [v2 remoteInnerIPv6AddressBytesClassD];
        IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
        id v19 = v2;
        uint64_t v17 = 3881;
        id v15 = "";
        id v16 = "-[NRDLocalDevice copyRemoteClassDInnerEndpointWithPort:]";
        _NRLogWithArgs();
      }
    }
    id v13 = [v2 remoteInnerIPv6AddressBytesClassD:v15:v16:v17:IPv6AddrStringFromData:v19];
    id v2 = sub_100141BFC((uint64_t)NRDLocalDevice, v13, v3);
  }
  return v2;
}

uint64_t sub_1001416EC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10015BD9C();
  dispatch_assert_queue_V2(v4);

  id v5 = [a1 localInnerIPv6AddressBytesClassC];

  if (!v5)
  {
    long long v18 = 0uLL;
    sub_100142334(a1, &v18);
    BYTE9(v18) = 12;
    id v6 = [objc_alloc((Class)NSData) initWithBytes:&v18 length:16];
    [a1 setLocalInnerIPv6AddressBytesClassC:v6];

    uint64_t v7 = self;
    sub_10013C9FC(v7, 0);
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      id v8 = (id)qword_1001F4D98;
      id v9 = [a1 localInnerIPv6AddressBytesClassC];
      IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
      uint64_t v17 = a1;
      uint64_t v15 = 3869;
      id v13 = "";
      id v14 = "-[NRDLocalDevice copyLocalClassCInnerEndpointWithPort:]";
      _NRLogWithArgs();
    }
  }
  uint64_t v10 = [a1 localInnerIPv6AddressBytesClassC:v13, v14, v15, IPv6AddrStringFromData, v17];
  uint64_t v11 = sub_100141BFC((uint64_t)NRDLocalDevice, v10, v3);

  return v11;
}

void *sub_1001418A8(void *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = sub_10015BD9C();
    dispatch_assert_queue_V2(v4);

    id v5 = [v2 remoteInnerIPv6AddressBytesClassC];

    if (!v5)
    {
      long long v17 = 0uLL;
      sub_100141A68(v2, &v17);
      BYTE9(v17) = 12;
      id v6 = [objc_alloc((Class)NSData) initWithBytes:&v17 length:16];
      [v2 setRemoteInnerIPv6AddressBytesClassC:v6];

      uint64_t v7 = self;
      sub_10013C9FC(v7, 0);
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        id v8 = (id)qword_1001F4D98;
        id v9 = [v2 remoteInnerIPv6AddressBytesClassC];
        IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
        id v16 = v2;
        uint64_t v14 = 3896;
        uint64_t v12 = "";
        id v13 = "-[NRDLocalDevice copyRemoteClassCInnerEndpointWithPort:]";
        _NRLogWithArgs();
      }
    }
    uint64_t v10 = [v2 remoteInnerIPv6AddressBytesClassC:v12, v13, v14, IPv6AddrStringFromData, v16];
    id v2 = sub_100141BFC((uint64_t)NRDLocalDevice, v10, v3);
  }
  return v2;
}

double sub_100141A68(void *a1, _OWORD *a2)
{
  id v4 = sub_10015BD9C();
  dispatch_assert_queue_V2(v4);

  if (!a2)
  {
    id v9 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v12 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v12 = 136446210;
    *(void *)(v12 + 4) = "-[NRDLocalDevice writeRemoteClassDInnerAddressBytes:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  uint64_t v13 = 0;
  long long v14 = 0uLL;
  int v15 = 0;
  id v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  uint64_t v7 = sub_1001414DC(a1, @"0");
  sub_100141EA0((uint64_t)NRDLocalDevice, &v13, v7);

  double result = *(double *)&v14;
  *a2 = v14;
  return result;
}

id sub_100141BFC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  if (!v4)
  {
    id v9 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_14:
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 136446210;
    *(void *)(v15 + 4) = "+[NRDLocalDevice createEndpointFromAddrData:portString:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  if ([v4 length] != (id)16)
  {
    id v12 = sub_100135DDC();
    int v13 = _NRLogIsLevelEnabled();

    if (v13)
    {
      id v14 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_14;
  }
  if (v5) {
    unsigned int v6 = bswap32([v5 intValue]) >> 16;
  }
  else {
    LOWORD(v6) = 0;
  }
  memset(&v16[2], 0, 24);
  v16[0] = 7708;
  v16[1] = v6;
  [v4 getBytes:&v16[4] length:16];
  uint64_t v7 = +[NWAddressEndpoint endpointWithAddress:v16];

  return v7;
}

void sub_100141EA0(uint64_t a1, _OWORD *a2, void *a3)
{
  id v4 = a3;
  self;
  id v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  if (!a2)
  {
    id v7 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_14;
  }
  if (!v4)
  {
    id v10 = sub_100135DDC();
    int v11 = _NRLogIsLevelEnabled();

    if (v11)
    {
      id v12 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_14:
    id v4 = (id)_os_log_pack_size();
    unsigned int v6 = (char *)&v24 - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 136446210;
    *(void *)(v13 + 4) = "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_15;
  }
  memset(v25, 0, 28);
  unsigned int v6 = [v4 addressData];
  if ((unint64_t)[v6 length] <= 0x1B)
  {
LABEL_15:
    id v14 = sub_100135DDC();
    int v15 = _NRLogIsLevelEnabled();

    if (v15)
    {
      id v16 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    goto LABEL_24;
  }
  [v6 getBytes:v25 length:28];
  if (BYTE1(v25[0]) != 30)
  {
    id v17 = sub_100135DDC();
    int v18 = _NRLogIsLevelEnabled();

    if (v18)
    {
      id v19 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v20 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v20 = 136446722;
    *(void *)(v20 + 4) = "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]";
LABEL_25:
    *(_WORD *)(v20 + 12) = 2112;
    *(void *)(v20 + 14) = v6;
    *(_WORD *)(v20 + 22) = 2112;
    *(void *)(v20 + 24) = v4;
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  if (LOBYTE(v25[0]) <= 0x1Bu)
  {
    id v21 = sub_100135DDC();
    int v22 = _NRLogIsLevelEnabled();

    if (v22)
    {
      id v23 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
LABEL_24:
    uint64_t v20 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v20 = 136446722;
    *(void *)(v20 + 4) = "+[NRDLocalDevice writeSockAddrBytes:forEndpoint:]";
    goto LABEL_25;
  }
  if (LOBYTE(v25[0]) != 28) {
    LOBYTE(v25[0]) = 28;
  }
  *a2 = v25[0];
  *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)((char *)v25 + 12);
}

double sub_100142334(void *a1, _OWORD *a2)
{
  id v4 = sub_10015BD9C();
  dispatch_assert_queue_V2(v4);

  if (!a2)
  {
    id v9 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v12 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v12 = 136446210;
    *(void *)(v12 + 4) = "-[NRDLocalDevice writeLocalClassDInnerAddressBytes:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  uint64_t v13 = 0;
  long long v14 = 0uLL;
  int v15 = 0;
  id v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  unsigned int v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  id v7 = sub_100140FAC(a1, @"0");
  sub_100141EA0((uint64_t)NRDLocalDevice, &v13, v7);

  double result = *(double *)&v14;
  *a2 = v14;
  return result;
}

void sub_1001424C8(uint64_t a1, _WORD *a2)
{
  self;
  id v3 = sub_10015BD9C();
  dispatch_assert_queue_V2(v3);

  id v4 = a2 + 5;
  id v16 = a2 + 5;
  id v17 = a2;
  do
  {
    do
LABEL_6:
      arc4random_buf(v4, 6uLL);
    while (!*v4);
  }
  while (!a2[6] || !a2[7]);
  id v5 = [objc_alloc((Class)NSData) initWithBytes:a2 length:16];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id obj = (id)qword_1001F4D40;
  id v6 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v20;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = [(id)qword_1001F4D40 objectForKeyedSubscript:*(void *)(*((void *)&v19 + 1) + 8 * (void)v9)];
        id v11 = [v10 localInnerIPv6AddressBytesClassD];
        if ([v11 isEqual:v5]) {
          goto LABEL_4;
        }
        uint64_t v12 = [v10 remoteInnerIPv6AddressBytesClassD];
        if ([v12 isEqual:v5]) {
          goto LABEL_3;
        }
        uint64_t v13 = [v10 localInnerIPv6AddressBytesClassC];
        if ([v13 isEqual:v5])
        {

LABEL_3:
LABEL_4:

LABEL_5:
          id v4 = v16;
          a2 = v17;
          goto LABEL_6;
        }
        long long v14 = [v10 remoteInnerIPv6AddressBytesClassC];
        unsigned __int8 v15 = [v14 isEqual:v5];

        if (v15) {
          goto LABEL_5;
        }

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v7);
  }
}

void *sub_1001426E8(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    id v2 = sub_10015BD9C();
    dispatch_assert_queue_V2(v2);

    return sub_1001414DC(v1, @"0");
  }
  return result;
}

void *sub_10014273C(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    id v2 = sub_10015BD9C();
    dispatch_assert_queue_V2(v2);

    return sub_1001418A8(v1, @"0");
  }
  return result;
}

char *sub_100142790()
{
  self;
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  id v1 = objc_alloc_init((Class)NSUUID);
  if (!v1)
  {
    id v8 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v10 = sub_100135DDC();
      _NRLogWithArgs();
    }
    id v2 = (void *)_os_log_pack_size();
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 136446210;
    *(void *)(v11 + 4) = "+[NRDLocalDevice newLocalDeviceWithRandomNRUUID]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_9;
  }
  id v2 = v1;
  id v3 = [NRDLocalDevice alloc];
  if (!v3)
  {
LABEL_9:
    id v4 = 0;
    goto LABEL_5;
  }
  id v4 = sub_100137298((char *)v3, v2);
  sub_100137A5C(v4);
  if (v4)
  {
    v4[21] = 1;
    id v5 = *((id *)v4 + 4);
    id v6 = [v4 description];
    sub_10012F648(v5, 5000, v6, 0);
  }
LABEL_5:

  return v4;
}

char *sub_100142940(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  self;
  if (!v4)
  {
    id v25 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  if ((_NRIsUUIDNonZero() & 1) == 0)
  {
    id v27 = sub_100135DDC();
    int v28 = _NRLogIsLevelEnabled();

    if (v28)
    {
LABEL_41:
      id v29 = sub_100135DDC();
      _NRLogWithArgs();

      id v23 = 0;
      goto LABEL_37;
    }
LABEL_42:
    id v23 = 0;
    goto LABEL_37;
  }
  id v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  sub_10013BB9C();
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v6 = (id)qword_1001F4D40;
  id v7 = [v6 countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v36;
LABEL_5:
    uint64_t v10 = 0;
    while (1)
    {
      if (*(void *)v36 != v9) {
        objc_enumerationMutation(v6);
      }
      uint64_t v11 = [(id)qword_1001F4D40 objectForKeyedSubscript:*(void *)(*((void *)&v35 + 1) + 8 * v10)];
      uint64_t v12 = (char *)v11;
      uint64_t v13 = v11 ? *(void *)(v11 + 40) : 0;
      if ([v4 isEqual:v13]) {
        break;
      }

      if (v8 == (id)++v10)
      {
        id v14 = [v6 countByEnumeratingWithState:&v35 objects:v39 count:16];
        id v8 = v14;
        if (v14) {
          goto LABEL_5;
        }
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    uint64_t v12 = 0;
  }

  if (v12) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = a3 == 0;
  }
  if (v15) {
    goto LABEL_30;
  }
  uint64_t v12 = sub_100142790();
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 == -1)
    {
      id v16 = (void *)qword_1001F4D98;
      if (v12)
      {
LABEL_25:
        id v17 = (void *)*((void *)v12 + 4);
LABEL_26:
        id v18 = v17;
        id v19 = v16;
        long long v20 = [v18 UUIDString];
        [v4 UUIDString];
        v34 = CFStringRef v33 = v20;
        uint64_t v32 = 2173;
        id v30 = "";
        uint64_t v31 = "+[NRDLocalDevice copyLocalDeviceForBluetoothUUID:shouldCreate:]";
        _NRLogWithArgs();

        goto LABEL_27;
      }
    }
    else
    {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      id v16 = (void *)qword_1001F4D98;
      if (v12) {
        goto LABEL_25;
      }
    }
    id v17 = 0;
    goto LABEL_26;
  }
LABEL_27:
  [v12 setBluetoothUUID:v4, v30, v31, v32, v33, v34];
  if (v12) {
    uint64_t v21 = *((void *)v12 + 4);
  }
  else {
    uint64_t v21 = 0;
  }
  [(id)qword_1001F4D40 setObject:v12 forKeyedSubscript:v21];
  uint64_t v22 = self;
  sub_10013C9FC(v22, 0);
LABEL_30:
  id v23 = v12;
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    _NRLogWithArgs();
  }

LABEL_37:
  return v23;
}

char *sub_100142D18(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  self;
  if (v4)
  {
    id v5 = sub_10015BD9C();
    dispatch_assert_queue_V2(v5);

    sub_10013BB9C();
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v6 = (id)qword_1001F4D40;
    id v7 = [v6 countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v32;
LABEL_4:
      uint64_t v10 = 0;
      while (1)
      {
        if (*(void *)v32 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = [(id)qword_1001F4D40 objectForKeyedSubscript:*(void *)(*((void *)&v31 + 1) + 8 * v10)];
        uint64_t v12 = (char *)v11;
        uint64_t v13 = v11 ? *(void *)(v11 + 48) : 0;
        if ([v4 isEqual:v13]) {
          break;
        }

        if (v8 == (id)++v10)
        {
          id v14 = [v6 countByEnumeratingWithState:&v31 objects:v35 count:16];
          id v8 = v14;
          if (v14) {
            goto LABEL_4;
          }
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      uint64_t v12 = 0;
    }

    if (v12 || !a3) {
      goto LABEL_27;
    }
    uint64_t v12 = sub_100142790();
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    if (!_NRLogIsLevelEnabled())
    {
LABEL_24:
      [v12 setIdsDeviceID:v4, v26, v27, v28, v29, v30];
      if (v12) {
        uint64_t v19 = *((void *)v12 + 4);
      }
      else {
        uint64_t v19 = 0;
      }
      [(id)qword_1001F4D40 setObject:v12 forKeyedSubscript:v19];
      uint64_t v20 = self;
      sub_10013C9FC(v20, 0);
LABEL_27:
      uint64_t v21 = v12;
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        _NRLogWithArgs();
      }

      goto LABEL_34;
    }
    if (qword_1001F4DA0 == -1)
    {
      BOOL v15 = (void *)qword_1001F4D98;
      if (v12)
      {
LABEL_22:
        id v16 = (void *)*((void *)v12 + 4);
LABEL_23:
        id v17 = v16;
        id v18 = v15;
        id v29 = [v17 UUIDString];
        id v30 = v4;
        uint64_t v28 = 2205;
        uint64_t v26 = "";
        id v27 = "+[NRDLocalDevice copyLocalDeviceForIDSDeviceID:shouldCreate:]";
        _NRLogWithArgs();

        goto LABEL_24;
      }
    }
    else
    {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      BOOL v15 = (void *)qword_1001F4D98;
      if (v12) {
        goto LABEL_22;
      }
    }
    id v16 = 0;
    goto LABEL_23;
  }
  id v23 = sub_100135DDC();
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    id v25 = sub_100135DDC();
    _NRLogWithArgs();
  }
  uint64_t v21 = 0;
LABEL_34:

  return v21;
}

void sub_10014309C(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11 = a3;
  id v12 = [objc_alloc((Class)NSString) initWithFormat:v11 arguments:&a9];

  uint64_t v13 = (void *)a1[4];
  id v14 = v12;
  id v15 = v13;
  id v16 = [a1 description];
  sub_10012F648(v15, a2, v16, v14);
}

void sub_10014314C(uint64_t a1, void *a2, uint64_t a3, int a4, unsigned int a5, void *a6, void *a7, unsigned int a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  id v15 = a2;
  id v103 = a6;
  id v102 = a9;
  id v104 = a10;
  id v16 = a11;
  id v17 = a12;
  id v18 = a13;
  uint64_t v19 = self;
  uint64_t v20 = sub_10015BD9C();
  dispatch_assert_queue_V2(v20);

  if (!v15)
  {
    id v81 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    a7 = v102;
    uint64_t v21 = v103;
    if (!IsLevelEnabled) {
      goto LABEL_118;
    }
LABEL_137:
    id v85 = sub_100135DDC();
    _NRLogWithArgs();

    goto LABEL_118;
  }
  if ((_NRIsUUIDNonZero() & 1) == 0)
  {
    id v83 = sub_100135DDC();
    int v84 = _NRLogIsLevelEnabled();

    a7 = v102;
    uint64_t v21 = v103;
    if (!v84) {
      goto LABEL_118;
    }
    goto LABEL_137;
  }
  uint64_t v21 = v103;
  if (!v18)
  {
    id v86 = sub_100135DDC();
    int v87 = _NRLogIsLevelEnabled();

    a7 = v102;
    if (!v87) {
      goto LABEL_118;
    }
    goto LABEL_137;
  }
  if (v103 || (a5 & 1) != 0)
  {
    if (a7)
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      a7 = v102;
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_19;
      }
      if (qword_1001F4DA0 == -1)
      {
LABEL_18:
        _NRLogWithArgs();
LABEL_19:
        v18[2](v18, 22, @"pairWithSPPLink is not supported");
        goto LABEL_118;
      }
LABEL_143:
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      goto LABEL_18;
    }
    uint64_t v22 = sub_10013DC5C(v19, v15);
    if (!v22)
    {
      id v88 = sub_100135DDC();
      int v89 = _NRLogIsLevelEnabled();

      if (v89)
      {
        id v90 = sub_100135DDC();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v91 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v91 = 136446210;
      *(void *)(v91 + 4) = "+[NRDLocalDevice registerDeviceWithNRUUID:pairingProtocolVersion:peerNetworkRelayVersion:wa"
                             "sInitiallySetupUsingIDSPairing:outOfBandKey:pairWithSPPLink:isAltAccountPairing:bluetoothMA"
                             "CAddress:operationalProperties:peerEndpointDictionary:candidateService:completionBlock:]";
      sub_100135DDC();
      _NRLogAbortWithPack();
      goto LABEL_143;
    }
    id v23 = v22;
    [v22 setIsEmptyPairing:0];
    [v23 setOperationalProp:v104];
    if (v23[8])
    {
      a7 = v102;
      if (v23[9])
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DA0 != -1) {
            dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
          }
          _NRLogWithArgs();
        }
        v18[2](v18, 0, 0);
      }
      else
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DA0 != -1) {
            dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
          }
          _NRLogWithArgs();
        }
        sub_100144004(v19, v15, v18);
      }
LABEL_117:

      goto LABEL_118;
    }
    a7 = v102;
    if (v103)
    {
      uint64_t v24 = *((void *)v23 + 19);
      if (v24)
      {
        id v25 = v103;
        uint64_t v26 = *(void **)(v24 + 16);
        *(void *)(v24 + 16) = v25;
      }
      else
      {
        id v27 = sub_100137880((char *)[NRDLDKeychainItemData alloc], v103);
        uint64_t v26 = (void *)*((void *)v23 + 19);
        *((void *)v23 + 19) = v27;
      }
    }
    [v23 setIsAltAccountDevice:a8];
    if (v102) {
      [v23 setBluetoothMACAddress:v102];
    }
    id v95 = v16;
    id v100 = v17;
    uint64_t v96 = (uint64_t)v23;
    if (v16)
    {
      if (qword_1001F4DA0 != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      id v93 = v15;
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DA0 != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        _NRLogWithArgs();
      }
      id v28 = objc_alloc_init((Class)NSMutableDictionary);
      id v29 = v16;
      id v30 = v28;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      id v31 = v29;
      id v32 = [v31 countByEnumeratingWithState:&v109 objects:v114 count:16];
      if (v32)
      {
        id v33 = v32;
        uint64_t v34 = *(void *)v110;
        do
        {
          for (unint64_t i = 0; i != v33; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v110 != v34) {
              objc_enumerationMutation(v31);
            }
            long long v36 = *(void **)(*((void *)&v109 + 1) + 8 * i);
            long long v37 = [v31 objectForKeyedSubscript:v36];
            long long v38 = v36;
            if ([v38 unsignedShortValue] == 2)
            {

              long long v38 = &off_1001D4BD0;
            }
            [v30 setObject:v37 forKeyedSubscript:v38];
          }
          id v33 = [v31 countByEnumeratingWithState:&v109 objects:v114 count:16];
        }
        while (v33);
      }

      long long v39 = (void *)qword_1001F4D60;
      if (!qword_1001F4D60)
      {
        id v40 = objc_alloc_init((Class)NSMutableDictionary);
        long long v41 = (void *)qword_1001F4D60;
        qword_1001F4D60 = (uint64_t)v40;

        long long v39 = (void *)qword_1001F4D60;
      }
      id v15 = v93;
      [v39 setObject:v30 forKeyedSubscript:v93];

      a7 = v102;
      uint64_t v21 = v103;
      id v23 = (unsigned char *)v96;
    }
    if (v17)
    {
      long long v42 = (void *)qword_1001F4D68;
      if (!qword_1001F4D68)
      {
        id v43 = objc_alloc_init((Class)NSMutableDictionary);
        id v44 = (void *)qword_1001F4D68;
        qword_1001F4D68 = (uint64_t)v43;

        long long v42 = (void *)qword_1001F4D68;
      }
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      id v45 = [v42 allValues];
      id v46 = [v45 countByEnumeratingWithState:&v105 objects:v113 count:16];
      if (v46)
      {
        id v47 = v46;
        uint64_t v48 = *(void *)v106;
        while (2)
        {
          for (j = 0; j != v47; j = (char *)j + 1)
          {
            if (*(void *)v106 != v48) {
              objc_enumerationMutation(v45);
            }
            if ([*(id *)(*((void *)&v105 + 1) + 8 * (void)j) isEqualToString:v100])
            {
              if (qword_1001F4DA0 != -1) {
                dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
              }
              id v17 = v100;
              id v23 = (unsigned char *)v96;
              if (_NRLogIsLevelEnabled())
              {
                id v58 = sub_100135DDC();
                _NRLogWithArgs();
              }
              v18[2](v18, 22, @"service already exists");

              id v16 = v95;
              goto LABEL_117;
            }
          }
          id v47 = [v45 countByEnumeratingWithState:&v105 objects:v113 count:16];
          if (v47) {
            continue;
          }
          break;
        }
      }

      [(id)qword_1001F4D68 setObject:v100 forKeyedSubscript:v15];
      id v23 = (unsigned char *)v96;
    }
    Logid String = (void *)_NRKeyCreateLogString();
    sub_10014309C(v23, 5001, @"ppv=%lld, %sOOBK %@", v50, v51, v52, v53, v54, a3);

    id v55 = v15;
    self;
    if (qword_1001F4D58)
    {
      id v56 = [(id)qword_1001F4D58 objectForKeyedSubscript:v55];

      if (v56)
      {
        uint64_t v57 = mach_absolute_time();
LABEL_85:
        v56->_deviceRegistrationStart = v57;
        v56->_devicePairedWithOOBKey = *(void *)(v96 + 152) != 0;
LABEL_86:
        id v59 = v56;
        id v60 = v55;
        self;
        if (v59)
        {
          id v61 = (void *)qword_1001F4D58;
          if (!qword_1001F4D58)
          {
            id v62 = objc_alloc_init((Class)NSMutableDictionary);
            id v63 = (void *)qword_1001F4D58;
            qword_1001F4D58 = (uint64_t)v62;

            id v61 = (void *)qword_1001F4D58;
          }
          [v61 setObject:v59 forKeyedSubscript:v60];
        }

        sub_10013F5DC(v96);
        [(id)v96 setWasInitiallySetupUsingIDSPairing:a5];
        if (a3) {
          [(id)v96 setPairingProtocolVersion:a3];
        }
        if (a4) {
          [v96 setLastSeenInnerLinkVersionHBO];
        }
        [(id)v96 setIsEnabled:1];
        sub_10013C964((uint64_t)NRDLocalDevice, (void *)v96);
        id v94 = v59;
        if (*(void *)(v96 + 152) || *(void *)(v96 + 48))
        {
          id v64 = (void *)qword_1001F4D88;
          if (!qword_1001F4D88)
          {
            id v65 = objc_alloc_init((Class)NSMutableDictionary);
            id v66 = (void *)qword_1001F4D88;
            qword_1001F4D88 = (uint64_t)v65;

            id v64 = (void *)qword_1001F4D88;
          }
          id v67 = [v64 objectForKeyedSubscript:v60];
          a7 = v102;
          uint64_t v21 = v103;
          if (!v67) {
            id v67 = objc_alloc_init((Class)NSMutableArray);
          }
          if (qword_1001F4DA0 != -1) {
            dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DA0 != -1) {
              dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
            }
            _NRLogWithArgs();
          }
          id v68 = objc_retainBlock(v18);
          [v67 addObject:v68];

          [(id)qword_1001F4D88 setObject:v67 forKeyedSubscript:v60];
          char v69 = 1;
        }
        else
        {
          [(id)v96 setIsRegistered:1];
          if (qword_1001F4DA0 != -1) {
            dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DA0 != -1) {
              dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
            }
            _NRLogWithArgs();
          }
          id v76 = *(id *)(v96 + 32);
          id v77 = [(id)v96 description];
          sub_10012F648(v76, 5007, v77, 0);

          id v78 = v60;
          self;
          if (qword_1001F4D58)
          {
            id v67 = [(id)qword_1001F4D58 objectForKeyedSubscript:v78];

            if (!v67)
            {
              char v69 = 0;
              a7 = v102;
              uint64_t v21 = v103;
              id v16 = v95;
              goto LABEL_108;
            }
            *((void *)v67 + 4) = mach_absolute_time();
            *((unsigned char *)v67 + 16) = 1;
            [v67 submit];
            id v79 = v78;
            self;
            if (qword_1001F4D58)
            {
              [(id)qword_1001F4D58 setObject:0 forKeyedSubscript:v79];
              if (![(id)qword_1001F4D58 count])
              {
                id v80 = (void *)qword_1001F4D58;
                qword_1001F4D58 = 0;
              }
            }

            char v69 = 0;
          }
          else
          {
            char v69 = 0;
            id v67 = v78;
          }
          a7 = v102;
          uint64_t v21 = v103;
        }
        id v16 = v95;

LABEL_108:
        id v70 = *(id *)(v96 + 40);
        if (v70)
        {
        }
        else
        {
          uint64_t v71 = [*(id *)(v96 + 128) allowedLinkTypes];
          unsigned int v72 = [v71 containsObject:&off_1001D4BE8];

          if (v72) {
            [(id)v96 setSelfManagedBluetoothPairing:1];
          }
        }
        uint64_t v73 = self;
        sub_10013C9FC(v73, 0);
        if ((v69 & 1) == 0) {
          v18[2](v18, 0, 0);
        }
        long long v74 = sub_10015BD9C();
        dispatch_async(v74, &stru_1001C6A58);

        self;
        id v23 = (unsigned char *)v96;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v17 = v100;
        id v75 = (char *)(id)qword_1001F4A18;
        sub_1000AD794(v75);

        goto LABEL_117;
      }
    }
    else
    {
    }
    id v56 = objc_alloc_init(NRAnalyticsLocalDevice);
    uint64_t v57 = mach_absolute_time();
    if (!v56) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  a7 = v102;
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    _NRLogWithArgs();
  }
  v18[2](v18, 22, @"outOfBandKey was nil and !wasInitiallySetupUsingIDSPairing");
LABEL_118:
}

void sub_100144004(uint64_t a1, void *a2, void *a3)
{
  id v21 = a2;
  id v4 = a3;
  uint64_t v5 = self;
  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  if (_NRIsUUIDNonZero())
  {
    if (v4)
    {
      id v7 = (id *)sub_10013DD58(v5, v21, 0);
      id v8 = v7;
      if (v7)
      {
        int v9 = *((unsigned __int8 *)v7 + 8);
        id v10 = v7[4];
        id v11 = [v8 description];
        if (v9)
        {
          sub_10012F648(v10, 5003, v11, 0);

          [v8 setIsEnabled:1];
          uint64_t v12 = self;
          sub_10013C9FC(v12, 0);
          if (qword_1001F4DA0 != -1) {
            dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DA0 != -1) {
              dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
            }
            _NRLogWithArgs();
          }
          (*((void (**)(id, void, void))v4 + 2))(v4, 0, 0);
          goto LABEL_15;
        }
        sub_10012F648(v10, 5010, v11, @"enable");

        id v14 = [objc_alloc((Class)NSString) initWithFormat:@"%@ is not registered", v8];
        (*((void (**)(id, uint64_t, id))v4 + 2))(v4, -2014, v14);
      }
      else
      {
        uint64_t v13 = [v21 UUIDString];
        sub_10012F648(v21, 5009, v13, @"enable");

        id v14 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown NRUUID %@", v21];
        (*((void (**)(id, uint64_t, id))v4 + 2))(v4, -2008, v14);
      }

LABEL_15:
      id v15 = sub_10015BD9C();
      dispatch_async(v15, &stru_1001C6A58);

      self;
      if (qword_1001F4A20 != -1) {
        dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
      }
      id v16 = (char *)(id)qword_1001F4A18;
      sub_1000AD794(v16);

      goto LABEL_18;
    }
    id v19 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
LABEL_25:
      id v8 = sub_100135DDC();
      _NRLogWithArgs();
LABEL_18:
    }
  }
  else
  {
    id v17 = sub_100135DDC();
    int v18 = _NRLogIsLevelEnabled();

    if (v18) {
      goto LABEL_25;
    }
  }
}

void sub_100144350(uint64_t a1, int a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = self;
  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  if (!v4)
  {
    id v30 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_66;
    }
    id v8 = (id *)sub_100135DDC();
    _NRLogWithArgs();
    goto LABEL_65;
  }
  id v7 = (id *)sub_10013DD58((uint64_t)v5, v4, 0);
  if (!v7)
  {
    id v32 = sub_100135DDC();
    int v33 = _NRLogIsLevelEnabled();

    if (v33)
    {
      id v34 = sub_100135DDC();
      _NRLogWithArgs();
    }
    id v4 = (id)_os_log_pack_size();
    id v8 = (id *)((char *)&v38 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0));
    __error();
    uint64_t v35 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v35 = 136446210;
    *(void *)(v35 + 4) = "+[NRDLocalDevice confirmKeysForClass:nrUUID:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_72;
  }
  id v8 = v7;
  if (a2 == 1)
  {
    if (!*((unsigned char *)v7 + 14))
    {
      [v7 setHasConfirmedClassAKeys:1];
      if (!*((unsigned char *)v8 + 15)) {
        goto LABEL_15;
      }
      goto LABEL_11;
    }
    goto LABEL_65;
  }
  if (a2 != 3)
  {
    if (a2 == 4)
    {
      if (!*((unsigned char *)v7 + 12))
      {
        [v7 setHasConfirmedClassDKeys:1];
        if (!*((unsigned char *)v8 + 15))
        {
LABEL_15:
          if (*((unsigned char *)v8 + 14)) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = *((unsigned __int16 *)v8 + 14) > 0x12u;
          }
          char v9 = v10;
          if (*((unsigned char *)v8 + 12))
          {
LABEL_22:
            if (!*((unsigned char *)v8 + 13)) {
              char v9 = 0;
            }
            if (v9)
            {
              int v11 = *((unsigned __int8 *)v8 + 8);
              [v8 setIsRegistered:1];
              uint64_t v12 = self;
              sub_10013C9FC(v12, 0);
              uint64_t v13 = [(id)qword_1001F4D88 objectForKeyedSubscript:v4];
              if (qword_1001F4DA0 != -1) {
                dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4DA0 != -1) {
                  dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
                }
                id v14 = (id)qword_1001F4D98;
                [v13 count];
                long long v37 = (void *)sub_100140290(v8);
                _NRLogWithArgs();
              }
              if (v11) {
                goto LABEL_46;
              }
              id v15 = v8[4];
              id v16 = [v8 description];
              sub_10012F648(v15, 5007, v16, 0);

              id v17 = v4;
              self;
              if (qword_1001F4D58)
              {
                uint64_t v18 = [(id)qword_1001F4D58 objectForKeyedSubscript:v17];

                if (!v18)
                {
LABEL_46:
                  if (v13)
                  {
                    long long v40 = 0u;
                    long long v41 = 0u;
                    long long v39 = 0u;
                    long long v38 = 0u;
                    id v23 = v13;
                    id v24 = [v23 countByEnumeratingWithState:&v38 objects:v42 count:16];
                    if (v24)
                    {
                      id v25 = v24;
                      uint64_t v26 = *(void *)v39;
                      do
                      {
                        for (unint64_t i = 0; i != v25; unint64_t i = (char *)i + 1)
                        {
                          if (*(void *)v39 != v26) {
                            objc_enumerationMutation(v23);
                          }
                          (*(void (**)(void))(*(void *)(*((void *)&v38 + 1) + 8 * i) + 16))(*(void *)(*((void *)&v38 + 1) + 8 * i));
                        }
                        id v25 = [v23 countByEnumeratingWithState:&v38 objects:v42 count:16];
                      }
                      while (v25);
                    }

                    [v23 removeAllObjects];
                    [(id)qword_1001F4D88 setObject:0 forKeyedSubscript:v4];
                    if (![(id)qword_1001F4D88 count])
                    {
                      id v28 = (void *)qword_1001F4D88;
                      qword_1001F4D88 = 0;
                    }
                  }
                  if (qword_1001F4D60) {
                    [(id)qword_1001F4D60 setObject:0 forKeyedSubscript:v4];
                  }
                  if (qword_1001F4D68) {
                    [(id)qword_1001F4D68 setObject:0 forKeyedSubscript:v4];
                  }
                  if (qword_1001F4D70) {
                    [(id)qword_1001F4D70 setObject:0 forKeyedSubscript:v4];
                  }
                  self;
                  if (qword_1001F4A20 != -1) {
                    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
                  }
                  id v29 = (char *)(id)qword_1001F4A18;
                  sub_1000AD794(v29);

                  goto LABEL_65;
                }
                *(void *)(v18 + 32) = mach_absolute_time();
                *(unsigned char *)(v18 + 16) = 1;
                [(id)v18 submit];
                id v19 = v17;
                self;
                if (qword_1001F4D58)
                {
                  [(id)qword_1001F4D58 setObject:0 forKeyedSubscript:v19];
                  if (![(id)qword_1001F4D58 count])
                  {
                    uint64_t v20 = (void *)qword_1001F4D58;
                    qword_1001F4D58 = 0;
                  }
                }
              }
              else
              {
                uint64_t v18 = (uint64_t)v17;
              }

              goto LABEL_46;
            }
          }
LABEL_43:
          uint64_t v22 = self;
          sub_10013C9FC(v22, 0);
          goto LABEL_65;
        }
LABEL_11:
        char v9 = 1;
        if (*((unsigned char *)v8 + 12)) {
          goto LABEL_22;
        }
        goto LABEL_43;
      }
      goto LABEL_65;
    }
    uint64_t v5 = &unk_1001F4000;
    if (qword_1001F4DA0 == -1)
    {
LABEL_39:
      if (_NRLogIsLevelEnabled())
      {
        if (v5[436] != -1) {
          dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
        }
        id v21 = (id)qword_1001F4D98;
        id String = (void *)NRDataProtectionClassCreateString();
        _NRLogWithArgs();
      }
      goto LABEL_65;
    }
LABEL_72:
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    goto LABEL_39;
  }
  if (!*((unsigned char *)v7 + 13))
  {
    [v7 setHasConfirmedClassCKeys:1];
    if (!*((unsigned char *)v8 + 15)) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
LABEL_65:

LABEL_66:
}

void sub_100144A24(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  char v9 = self;
  BOOL v10 = sub_10015BD9C();
  dispatch_assert_queue_V2(v10);

  if (v8)
  {
    int v11 = sub_10013DD58((uint64_t)v9, v8, 0);
    if (v11)
    {
      BOOL v10 = v11;
      [v11 setIsRegistered:0];
      [v10 setIsEnabled:0];
      uint64_t v12 = self;
      sub_10013C9FC(v12, 0);
      char v9 = [(id)qword_1001F4D88 objectForKeyedSubscript:v8];
      id v4 = &unk_1001F4000;
      if (qword_1001F4DA0 == -1) {
        goto LABEL_4;
      }
    }
    else
    {
      id v32 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v34 = sub_100135DDC();
        _NRLogWithArgs();
      }
      id v7 = (id)_os_log_pack_size();
      id v8 = (char *)&v37 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v35 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v35 = 136446210;
      *(void *)(v35 + 4) = "+[NRDLocalDevice reportRegistrationFailureCode:errorDescription:forNRUUID:]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
LABEL_4:
    if (_NRLogIsLevelEnabled())
    {
      if (v4[436] != -1) {
        dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
      }
      id v18 = (id)qword_1001F4D98;
      long long v36 = (void *)sub_100140290((id *)&v10->isa);
      _NRLogWithArgs();
    }
    sub_10014309C(v10, 5008, @"[%lld] %@", v13, v14, v15, v16, v17, a2);
    id v19 = v8;
    self;
    uint64_t v20 = (uint64_t)v19;
    if (qword_1001F4D58)
    {
      uint64_t v20 = [(id)qword_1001F4D58 objectForKeyedSubscript:v19];

      if (!v20)
      {
LABEL_15:
        if (v9)
        {
          long long v39 = 0u;
          long long v40 = 0u;
          long long v38 = 0u;
          long long v37 = 0u;
          id v23 = v9;
          id v24 = [v23 countByEnumeratingWithState:&v37 objects:v41 count:16];
          if (v24)
          {
            id v25 = v24;
            uint64_t v26 = *(void *)v38;
            do
            {
              for (unint64_t i = 0; i != v25; unint64_t i = (char *)i + 1)
              {
                if (*(void *)v38 != v26) {
                  objc_enumerationMutation(v23);
                }
                (*(void (**)(void))(*(void *)(*((void *)&v37 + 1) + 8 * i) + 16))();
              }
              id v25 = [v23 countByEnumeratingWithState:&v37 objects:v41 count:16];
            }
            while (v25);
          }

          [v23 removeAllObjects];
          [(id)qword_1001F4D88 setObject:0 forKeyedSubscript:v19];
          if (![(id)qword_1001F4D88 count])
          {
            id v28 = (void *)qword_1001F4D88;
            qword_1001F4D88 = 0;
          }
        }
        if (qword_1001F4D60) {
          [(id)qword_1001F4D60 setObject:0 forKeyedSubscript:v19];
        }
        if (qword_1001F4D68) {
          [(id)qword_1001F4D68 setObject:0 forKeyedSubscript:v19];
        }
        if (qword_1001F4D70) {
          [(id)qword_1001F4D70 setObject:0 forKeyedSubscript:v19];
        }
        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v29 = (char *)(id)qword_1001F4A18;
        sub_1000AD794(v29);

        goto LABEL_34;
      }
      *(void *)(v20 + 32) = mach_absolute_time();
      *(unsigned char *)(v20 + 16) = 0;
      [(id)v20 submit];
      id v21 = v19;
      self;
      if (qword_1001F4D58)
      {
        [(id)qword_1001F4D58 setObject:0 forKeyedSubscript:v21];
        if (![(id)qword_1001F4D58 count])
        {
          uint64_t v22 = (void *)qword_1001F4D58;
          qword_1001F4D58 = 0;
        }
      }
    }
    goto LABEL_15;
  }
  id v30 = sub_100135DDC();
  int v31 = _NRLogIsLevelEnabled();

  if (!v31) {
    goto LABEL_35;
  }
  BOOL v10 = sub_100135DDC();
  _NRLogWithArgs();
LABEL_34:

LABEL_35:
}

void sub_100144F64(uint64_t a1, void *a2, void *a3)
{
  id v25 = a2;
  id v4 = a3;
  self;
  uint64_t v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  if (v25)
  {
    if (_NRIsUUIDNonZero())
    {
      if (v4)
      {
        id v6 = sub_10013DD58((uint64_t)NRDLocalDevice, v25, 0);
        id v7 = v6;
        if (v6)
        {
          id v8 = *((id *)v6 + 4);
          char v9 = [v7 description];
          sub_10012F648(v8, 5002, v9, 0);

          BOOL v10 = sub_10014019C((uint64_t)NRDLocalDevice, v7);
          [(id)qword_1001F4D40 setObject:v10 forKeyedSubscript:v25];

          if (v7[7]) {
            [qword_1001F4D48 setObject:0 forKeyedSubscript:0];
          }
        }
        else
        {
          id v24 = sub_10014019C((uint64_t)NRDLocalDevice, 0);
          [(id)qword_1001F4D40 setObject:v24 forKeyedSubscript:v25];
        }
        sub_1000A8484(v25, 0);
        sub_10013F05C((uint64_t)v7);
        uint64_t v11 = self;
        sub_10013C9FC(v11, 0);
        if (v7)
        {
          if (qword_1001F4DA0 != -1) {
            dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DA0 != -1) {
              dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
            }
            _NRLogWithArgs();
          }
          (*((void (**)(id, void, void))v4 + 2))(v4, 0, 0);
        }
        else
        {
          if (qword_1001F4DA0 != -1) {
            dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DA0 != -1) {
              dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
            }
            _NRLogWithArgs();
          }
          id v12 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown NRUUID %@", v25];
          (*((void (**)(id, uint64_t, id))v4 + 2))(v4, -2008, v12);
        }
        if (qword_1001F4D60) {
          [(id)qword_1001F4D60 setObject:0 forKeyedSubscript:v25];
        }
        if (qword_1001F4D68) {
          [(id)qword_1001F4D68 setObject:0 forKeyedSubscript:v25];
        }
        if (qword_1001F4D70) {
          [(id)qword_1001F4D70 setObject:0 forKeyedSubscript:v25];
        }
        if (qword_1001F4D90) {
          [(id)qword_1001F4D90 setObject:0 forKeyedSubscript:v25];
        }
        uint64_t v13 = sub_10015BD9C();
        dispatch_async(v13, &stru_1001C6A58);

        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v14 = (id)qword_1001F4A18;
        sub_1000AD794(v14, v15, v16, v17);

        goto LABEL_33;
      }
      id v22 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
LABEL_42:
        id v7 = sub_100135DDC();
        _NRLogWithArgs();
LABEL_33:
      }
    }
    else
    {
      id v20 = sub_100135DDC();
      int v21 = _NRLogIsLevelEnabled();

      if (v21) {
        goto LABEL_42;
      }
    }
  }
  else
  {
    id v18 = sub_100135DDC();
    int v19 = _NRLogIsLevelEnabled();

    if (v19) {
      goto LABEL_42;
    }
  }
}

void sub_1001453D0(uint64_t a1, void *a2, void *a3)
{
  id v26 = a2;
  id v4 = a3;
  uint64_t v5 = self;
  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  if (v26)
  {
    if (_NRIsUUIDNonZero())
    {
      if (v4)
      {
        id v7 = (id *)sub_10013DD58(v5, v26, 0);
        id v8 = v7;
        if (v7)
        {
          int v9 = *((unsigned __int8 *)v7 + 8);
          id v10 = v7[4];
          uint64_t v11 = [v8 description];
          if (v9)
          {
            sub_10012F648(v10, 5004, v11, 0);

            [v8 setIsEnabled:0];
            uint64_t v12 = self;
            sub_10013C9FC(v12, 0);
            if (qword_1001F4DA0 != -1) {
              dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4DA0 != -1) {
                dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
              }
              _NRLogWithArgs();
            }
            (*((void (**)(id, void, void))v4 + 2))(v4, 0, 0);
            goto LABEL_16;
          }
          sub_10012F648(v10, 5010, v11, @"disable");

          id v14 = [objc_alloc((Class)NSString) initWithFormat:@"%@ is not registered", v8];
          (*((void (**)(id, uint64_t, id))v4 + 2))(v4, -2014, v14);
        }
        else
        {
          uint64_t v13 = [v26 UUIDString];
          sub_10012F648(v26, 5009, v13, @"disable");

          id v14 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown NRUUID %@", v26];
          (*((void (**)(id, uint64_t, id))v4 + 2))(v4, -2008, v14);
        }

LABEL_16:
        uint64_t v15 = sub_10015BD9C();
        dispatch_async(v15, &stru_1001C6A58);

        self;
        if (qword_1001F4A20 != -1) {
          dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
        }
        id v16 = (id)qword_1001F4A18;
        sub_1000AD794(v16, v17, v18, v19);

        goto LABEL_19;
      }
      id v24 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
LABEL_28:
        id v8 = sub_100135DDC();
        _NRLogWithArgs();
LABEL_19:
      }
    }
    else
    {
      id v22 = sub_100135DDC();
      int v23 = _NRLogIsLevelEnabled();

      if (v23) {
        goto LABEL_28;
      }
    }
  }
  else
  {
    id v20 = sub_100135DDC();
    int v21 = _NRLogIsLevelEnabled();

    if (v21) {
      goto LABEL_28;
    }
  }
}

uint64_t sub_10014575C()
{
  self;
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  sub_10013BB9C();
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = (id)qword_1001F4D40;
  uint64_t v2 = (uint64_t)[v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v9;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v9 != v3) {
          objc_enumerationMutation(v1);
        }
        [objc_msgSend((id)qword_1001F4D40, "objectForKeyedSubscript:", *(void *)(*((void *)&v8 + 1) + 8 * i), (void)v8)];
        uint64_t v5 = (unsigned __int8 *)objc_claimAutoreleasedReturnValue();
        if (v5)
        {
          int v6 = v5[9];

          if (v6)
          {
            uint64_t v2 = 1;
            goto LABEL_12;
          }
        }
      }
      uint64_t v2 = (uint64_t)[v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_100145898()
{
  self;
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  sub_10013BB9C();
  id v1 = objc_alloc_init((Class)NSMutableArray);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = (id)qword_1001F4D40;
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v11 + 1) + 8 * i);
        uint64_t v8 = [(id)qword_1001F4D40 objectForKeyedSubscript:v7];
        long long v9 = (void *)v8;
        if (v8 && *(unsigned char *)(v8 + 9)) {
          [v1 addObject:v7];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }

  return v1;
}

id sub_100145A04()
{
  self;
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  sub_10013BB9C();
  id v1 = objc_alloc_init((Class)NSMutableArray);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = (id)qword_1001F4D40;
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v11 + 1) + 8 * i);
        uint64_t v8 = [(id)qword_1001F4D40 objectForKeyedSubscript:v7];
        long long v9 = (void *)v8;
        if (v8 && *(unsigned char *)(v8 + 9) && *(void *)(v8 + 40)) {
          [v1 addObject:v7];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }

  return v1;
}

id sub_100145B78()
{
  self;
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  sub_10013BB9C();
  id v1 = objc_alloc_init((Class)NSMutableArray);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v2 = (id)qword_1001F4D40;
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v8 = [(id)qword_1001F4D40 objectForKeyedSubscript:v7];
        long long v9 = (void *)v8;
        if (!v8 || !*(unsigned char *)(v8 + 9)) {
          goto LABEL_6;
        }
        if (*(unsigned char *)(v8 + 15))
        {
          char v10 = 1;
          if (*(unsigned char *)(v8 + 12)) {
            goto LABEL_21;
          }
        }
        else
        {
          if (*(unsigned char *)(v8 + 14)) {
            BOOL v11 = 1;
          }
          else {
            BOOL v11 = *(unsigned __int16 *)(v8 + 28) > 0x12u;
          }
          char v10 = v11;
          if (*(unsigned char *)(v8 + 12))
          {
LABEL_21:
            if (!*(unsigned char *)(v8 + 13)) {
              char v10 = 0;
            }
            if (v10) {
              goto LABEL_6;
            }
          }
        }
        if (!sub_100145D70(v8)) {
          goto LABEL_5;
        }
        if (qword_1001F4B80 == -1)
        {
          if (byte_1001F4B78) {
            goto LABEL_5;
          }
        }
        else
        {
          dispatch_once(&qword_1001F4B80, &stru_1001C7C38);
          if (byte_1001F4B78) {
LABEL_5:
          }
            [v1 addObject:v7];
        }
LABEL_6:
      }
      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v4);
  }

  return v1;
}

BOOL sub_100145D70(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 23))
    {
      *(unsigned char *)(result + 23) = 1;
      if (*(void *)(result + 128))
      {
        id v2 = +[NRDeviceOperationalProperties copyPropertiesForDefaultPairedPhone];
        id v3 = [v2 allowedLinkTypes];
        id v4 = [*(id *)(v1 + 128) allowedLinkTypes];
        unsigned int v5 = [v3 isEqualToArray:v4];

        if (v5) {
          *(unsigned char *)(v1 + 19) = 1;
        }
      }
      else
      {
        *(unsigned char *)(result + 19) = 1;
      }
    }
    return *(unsigned char *)(v1 + 19) != 0;
  }
  return result;
}

id sub_100145E28()
{
  self;
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  sub_10013BB9C();
  id v1 = objc_alloc_init((Class)NSMutableArray);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v2 = (id)qword_1001F4D40;
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        uint64_t v8 = [(id)qword_1001F4D40 objectForKeyedSubscript:v7];
        long long v9 = (void *)v8;
        if (v8 && *(unsigned char *)(v8 + 9))
        {
          if (*(unsigned char *)(v8 + 15))
          {
            int v10 = 1;
            if (!*(unsigned char *)(v8 + 12)) {
              goto LABEL_5;
            }
          }
          else
          {
            if (*(unsigned char *)(v8 + 14)) {
              BOOL v11 = 1;
            }
            else {
              BOOL v11 = *(unsigned __int16 *)(v8 + 28) > 0x12u;
            }
            int v10 = v11;
            if (!*(unsigned char *)(v8 + 12)) {
              goto LABEL_5;
            }
          }
          if (!*(unsigned char *)(v8 + 13)) {
            int v10 = 0;
          }
          if (v10 == 1) {
            [v1 addObject:v7];
          }
        }
LABEL_5:
      }
      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v4);
  }

  return v1;
}

id sub_100145FDC()
{
  self;
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  sub_10013BB9C();
  id v1 = objc_alloc_init((Class)NSMutableArray);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = (id)qword_1001F4D40;
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = [(id)qword_1001F4D40 objectForKeyedSubscript:*(void *)(*((void *)&v10 + 1) + 8 * i), (void)v10];
        uint64_t v8 = (void *)v7;
        if (v7 && *(unsigned char *)(v7 + 9) && *(void *)(v7 + 40)) {
          [v1 addObject:];
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }

  return v1;
}

uint64_t sub_100146140()
{
  self;
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  sub_10013BB9C();
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = (id)qword_1001F4D40;
  uint64_t v2 = (uint64_t)[v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v9;
LABEL_4:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v9 != v3) {
        objc_enumerationMutation(v1);
      }
      uint64_t v5 = [(id)qword_1001F4D40 objectForKeyedSubscript:*(void *)(*((void *)&v8 + 1) + 8 * v4) key:v8];
      if (v5 && *(unsigned char *)(v5 + 9))
      {
        uint64_t v6 = *(void *)(v5 + 40);

        if (v6)
        {
          uint64_t v2 = 1;
          break;
        }
      }
      else
      {
      }
      if (v2 == ++v4)
      {
        uint64_t v2 = (uint64_t)[v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
        if (!v2) {
          break;
        }
        goto LABEL_4;
      }
    }
  }

  return v2;
}

id sub_10014628C()
{
  self;
  uint64_t v0 = sub_10015BD9C();
  dispatch_assert_queue_V2(v0);

  sub_10013BB9C();
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v1 = (id)qword_1001F4D40;
  id v2 = [v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (!v2)
  {
    id v4 = 0;
    goto LABEL_15;
  }
  id v3 = v2;
  id v4 = 0;
  uint64_t v5 = *(void *)v13;
LABEL_4:
  uint64_t v6 = 0;
  while (1)
  {
    if (*(void *)v13 != v5) {
      objc_enumerationMutation(v1);
    }
    uint64_t v7 = *(void **)(*((void *)&v12 + 1) + 8 * v6);
    uint64_t v8 = [(id)qword_1001F4D40 objectForKeyedSubscript:v7];
    long long v9 = (void *)v8;
    if (!v8 || !*(unsigned char *)(v8 + 9)) {
      goto LABEL_5;
    }
    if (!*(unsigned char *)(v8 + 24)) {
      break;
    }
    if (!v4) {
      id v4 = v7;
    }
LABEL_5:

    if (v3 == (id)++v6)
    {
      id v3 = [v1 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (!v3) {
        goto LABEL_15;
      }
      goto LABEL_4;
    }
  }
  id v10 = v7;

  id v4 = v10;
LABEL_15:

  return v4;
}

char *sub_100146410(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  if (v2)
  {
    id v4 = sub_10013DD58(v3, v2, 0);
    uint64_t v5 = sub_10013EC34(v4);
  }
  else
  {
    id v7 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled)
    {
      uint64_t v5 = 0;
      goto LABEL_4;
    }
    id v4 = (char *)sub_100135DDC();
    _NRLogWithArgs();
    uint64_t v5 = 0;
  }

LABEL_4:
  return v5;
}

void sub_1001464C8(uint64_t a1, void *a2, int a3, void *a4)
{
  id v8 = a2;
  long long v9 = a4;
  id v10 = self;
  long long v11 = sub_10015BD9C();
  dispatch_assert_queue_V2(v11);

  if (v8)
  {
    if (v9)
    {
      long long v12 = sub_10013DD58((uint64_t)v10, v8, 0);
      if (!v12)
      {
        id v66 = sub_100135DDC();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v68 = sub_100135DDC();
          _NRLogWithArgs();
        }
        id v8 = (id)_os_log_pack_size();
        long long v9 = (char *)&v74 - (((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v69 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v69 = 136446210;
        *(void *)(v69 + 4) = "+[NRDLocalDevice queryPairingKeysForNRUUID:minDataProtectionClass:completionBlock:]";
        sub_100135DDC();
        _NRLogAbortWithPack();
        goto LABEL_53;
      }
      long long v11 = v12;
      id v75 = v10;
      sub_10013F5DC((uint64_t)v12);
      long long v13 = v11[9].isa;
      id v10 = v13;
      if (v13)
      {
        id v14 = v13[2];
        if (v14)
        {
          Class isa = v11[9].isa;
          if (isa) {
            uint64_t v16 = *((void *)isa + 4);
          }
          else {
            uint64_t v16 = 0;
          }

          if (!v16) {
            goto LABEL_17;
          }
          id v10 = [objc_alloc((Class)NSMutableData) initWithCapacity:64];
          uint64_t v17 = v11[9].isa;
          if (v17) {
            uint64_t v18 = (void *)v17[2];
          }
          else {
            uint64_t v18 = 0;
          }
          id v19 = v18;
          id v20 = v17;
          int v21 = (void *)sub_100138464((uint64_t)v19);
          [v10 appendData:v21];

          id v22 = v11[9].isa;
          if (v22) {
            int v23 = (void *)v22[4];
          }
          else {
            int v23 = 0;
          }
          id v24 = v23;
          id v25 = v22;
          id v26 = (void *)sub_100138464((uint64_t)v24);
          [v10 appendData:v26];

          if ([v10 length] == (id)64)
          {
LABEL_18:
            id v30 = v11[10].isa;
            id v4 = v30;
            if (v30)
            {
              id v31 = v30[2];
              if (v31)
              {
                Class v32 = v11[10].isa;
                if (v32) {
                  uint64_t v33 = *((void *)v32 + 4);
                }
                else {
                  uint64_t v33 = 0;
                }

                if (!v33) {
                  goto LABEL_31;
                }
                id v4 = (id *)[objc_alloc((Class)NSMutableData) initWithCapacity:64];
                id v34 = v11[10].isa;
                if (v34) {
                  uint64_t v35 = (void *)v34[2];
                }
                else {
                  uint64_t v35 = 0;
                }
                id v36 = v35;
                long long v37 = v34;
                long long v38 = (void *)sub_100138464((uint64_t)v36);
                [v4 appendData:v38];

                long long v39 = v11[10].isa;
                if (v39) {
                  long long v40 = (void *)v39[4];
                }
                else {
                  long long v40 = 0;
                }
                id v41 = v40;
                long long v42 = v39;
                id v43 = (void *)sub_100138464((uint64_t)v41);
                [v4 appendData:v43];

                if ([v4 length] == (id)64) {
                  goto LABEL_32;
                }
                id v44 = (void *)_NRCopyLogObjectForNRUUID();
                int v45 = _NRLogIsLevelEnabled();

                if (v45)
                {
                  id v46 = (void *)_NRCopyLogObjectForNRUUID();
                  [v4 length];
                  _NRLogWithArgs();
                }
              }
            }

LABEL_31:
            id v4 = 0;
LABEL_32:
            id v47 = v11[11].isa;
            uint64_t v5 = v47;
            if (!v47 || (id v48 = v47[2]) == 0)
            {
LABEL_55:

              goto LABEL_56;
            }
            Class v49 = v11[11].isa;
            if (v49) {
              uint64_t v50 = *((void *)v49 + 4);
            }
            else {
              uint64_t v50 = 0;
            }

            if (!v50)
            {
LABEL_56:
              uint64_t v5 = 0;
              if (a3 == 1) {
                goto LABEL_43;
              }
              goto LABEL_57;
            }
            uint64_t v5 = (id *)[objc_alloc((Class)NSMutableData) initWithCapacity:64];
            uint64_t v51 = v11[11].isa;
            if (v51) {
              uint64_t v52 = (void *)v51[2];
            }
            else {
              uint64_t v52 = 0;
            }
            id v53 = v52;
            uint64_t v54 = v51;
            id v55 = (void *)sub_100138464((uint64_t)v53);
            [v5 appendData:v55];

            id v56 = v11[11].isa;
            if (v56) {
              uint64_t v57 = (void *)v56[4];
            }
            else {
              uint64_t v57 = 0;
            }
            id v58 = v57;
            id v59 = v56;
            id v60 = (void *)sub_100138464((uint64_t)v58);
            [v5 appendData:v60];

            if ([v5 length] == (id)64)
            {
              if (a3 == 1)
              {
LABEL_43:
                if (!v4 || !v5)
                {
                  v85[0] = _NSConcreteStackBlock;
                  v85[1] = 3221225472;
                  v85[2] = sub_100146D24;
                  v85[3] = &unk_1001C8710;
                  id v61 = v11;
                  id v86 = v61;
                  id v92 = v75;
                  id v87 = v8;
                  char v93 = 1;
                  uint64_t v91 = v9;
                  id v88 = v10;
                  int v89 = v4;
                  id v90 = v5;
                  sub_10013FDA0((uint64_t)v61, v85);

LABEL_61:
                  goto LABEL_62;
                }
                goto LABEL_60;
              }
LABEL_57:
              if (a3 == 3 && !v4)
              {
                v76[0] = _NSConcreteStackBlock;
                v76[1] = 3221225472;
                v76[2] = sub_100146EAC;
                v76[3] = &unk_1001C8710;
                uint64_t v73 = v11;
                id v77 = v73;
                id v83 = v75;
                id v78 = v8;
                char v84 = 3;
                id v82 = v9;
                id v79 = v10;
                id v80 = 0;
                id v81 = v5;
                sub_10013F9DC((char *)v73, v76);

                goto LABEL_61;
              }
LABEL_60:
              (*((void (**)(char *, id, id *, id *))v9 + 2))(v9, v10, v4, v5);
              goto LABEL_61;
            }
LABEL_53:
            id v70 = (void *)_NRCopyLogObjectForNRUUID();
            int v71 = _NRLogIsLevelEnabled();

            if (v71)
            {
              unsigned int v72 = (void *)_NRCopyLogObjectForNRUUID();
              [v5 length];
              _NRLogWithArgs();
            }
            goto LABEL_55;
          }
          id v27 = (void *)_NRCopyLogObjectForNRUUID();
          int v28 = _NRLogIsLevelEnabled();

          if (v28)
          {
            id v29 = (void *)_NRCopyLogObjectForNRUUID();
            [v10 length];
            _NRLogWithArgs();
          }
        }
      }

LABEL_17:
      id v10 = 0;
      goto LABEL_18;
    }
    id v64 = sub_100135DDC();
    int v65 = _NRLogIsLevelEnabled();

    if (v65)
    {
LABEL_49:
      long long v11 = sub_100135DDC();
      _NRLogWithArgs();
LABEL_62:
    }
  }
  else
  {
    id v62 = sub_100135DDC();
    int v63 = _NRLogIsLevelEnabled();

    if (v63) {
      goto LABEL_49;
    }
  }
}

uint64_t sub_100146D24(uint64_t a1, int a2)
{
  if (!a2) {
    goto LABEL_14;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3)
  {
    uint64_t v5 = 0;
LABEL_13:

    goto LABEL_14;
  }
  id v4 = (id *)*(id *)(v3 + 88);
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_13;
  }
  id v6 = v4[2];
  if (!v6) {
    goto LABEL_13;
  }
  id v7 = v6;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    long long v9 = *(id *)(v8 + 88);
    if (v9)
    {
      uint64_t v10 = v9[4];
      goto LABEL_8;
    }
  }
  else
  {
    long long v9 = 0;
  }
  uint64_t v10 = 0;
LABEL_8:

  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 88);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 80);
    return sub_1001464C8(v13, v11, v12, v14);
  }
LABEL_14:
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    uint64_t v20 = *(void *)(a1 + 40);
    _NRLogWithArgs();
  }
  sub_100115AB0(@"NRDLocalDevice", @"PairingKeys", @"InvalidClassAKeys", 0, 0, v16, v17, v18, v20);
  id v19 = *(uint64_t (**)(void))(*(void *)(a1 + 72) + 16);

  return v19();
}

uint64_t sub_100146EAC(uint64_t a1, int a2)
{
  if (!a2) {
    goto LABEL_14;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3)
  {
    uint64_t v5 = 0;
LABEL_13:

    goto LABEL_14;
  }
  id v4 = (id *)*(id *)(v3 + 80);
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_13;
  }
  id v6 = v4[2];
  if (!v6) {
    goto LABEL_13;
  }
  id v7 = v6;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    long long v9 = *(id *)(v8 + 80);
    if (v9)
    {
      uint64_t v10 = v9[4];
      goto LABEL_8;
    }
  }
  else
  {
    long long v9 = 0;
  }
  uint64_t v10 = 0;
LABEL_8:

  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 88);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 80);
    return sub_1001464C8(v13, v11, v12, v14);
  }
LABEL_14:
  if (qword_1001F4DA0 != -1) {
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DA0 != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    uint64_t v20 = *(void *)(a1 + 40);
    _NRLogWithArgs();
  }
  sub_100115AB0(@"NRDLocalDevice", @"PairingKeys", @"InvalidClassCKeys", 0, 0, v16, v17, v18, v20);
  id v19 = *(uint64_t (**)(void))(*(void *)(a1 + 72) + 16);

  return v19();
}

void sub_100147034(uint64_t a1, void *a2, int a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = self;
  long long v9 = sub_10015BD9C();
  dispatch_assert_queue_V2(v9);

  if (!v6)
  {
    id v10 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_4;
    }
LABEL_8:
    id v14 = sub_100135DDC();
    _NRLogWithArgs();

    goto LABEL_4;
  }
  if (!v7)
  {
    id v12 = sub_100135DDC();
    int v13 = _NRLogIsLevelEnabled();

    if (!v13) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1001471B8;
  v15[3] = &unk_1001C8760;
  uint64_t v18 = v8;
  id v16 = v6;
  char v19 = a3;
  id v17 = v7;
  sub_1001464C8(v8, v16, a3, v15);

LABEL_4:
}

void sub_1001471B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v11 = (id *)sub_10013DD58(*(void *)(a1 + 48), *(void **)(a1 + 32), 0);
  if (v11)
  {
    id v12 = v11;
    id v13 = v11[5];
    if (v13)
    {
      id v4 = v13;
      self;
      if (qword_1001F4AB8 == -1) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
    id v25 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    uint64_t v8 = "+[NRDLocalDevice queryPairingFromIDSKeysForNRUUID:minDataProtectionClass:completionBlock:]_block_invoke";
    if (IsLevelEnabled)
    {
      id v27 = sub_100135DDC();
      _NRLogWithArgs();
    }
  }
  else
  {
    id v22 = sub_100135DDC();
    int v23 = _NRLogIsLevelEnabled();

    if (v23)
    {
      id v24 = sub_100135DDC();
      _NRLogWithArgs();
    }
  }
  id v12 = (void *)_os_log_pack_size();
  __chkstk_darwin();
  __error();
  uint64_t v28 = _os_log_pack_fill();
  *(_DWORD *)uint64_t v28 = 136446210;
  *(void *)(v28 + 4) = "+[NRDLocalDevice queryPairingFromIDSKeysForNRUUID:minDataProtectionClass:completionBlock:]_block_invoke";
  sub_100135DDC();
  _NRLogAbortWithPack();
LABEL_14:
  dispatch_once(&qword_1001F4AB8, &stru_1001C76D0);
LABEL_4:
  id v14 = (dispatch_queue_t *)(id)qword_1001F4AB0;
  unsigned __int8 v15 = *(unsigned char *)(a1 + 56);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  id v30 = sub_1001475F4;
  id v31 = &unk_1001C8738;
  unsigned __int8 v33 = v15;
  id v32 = *(id *)(a1 + 40);
  id v16 = v4;
  id v17 = v8;
  id v18 = v9;
  id v19 = v10;
  uint64_t v20 = v29;
  if (v14)
  {
    dispatch_assert_queue_V2(v14[2]);
    if (v17)
    {
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      void v34[2] = sub_1000FE300;
      v34[3] = &unk_1001C7770;
      v34[4] = v14;
      unsigned __int8 v40 = v15;
      uint64_t v35 = v17;
      id v21 = v16;
      id v36 = v21;
      id v37 = v18;
      id v38 = v19;
      long long v39 = v20;
      sub_1000FDE68((uint64_t)v14, v21, v15, v34);
    }
    else
    {
      v30((uint64_t)v20, 0, 0, 0, 0, 0);
    }
  }
}

void sub_1001475F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v26 = a4;
  id v11 = a5;
  id v12 = a6;
  id v13 = sub_10015BD9C();
  dispatch_assert_queue_V2(v13);

  if (!a2)
  {
    id v15 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (!a3)
  {
    id v17 = sub_100135DDC();
    int v18 = _NRLogIsLevelEnabled();

    if (!v18) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (!v26)
  {
    id v19 = sub_100135DDC();
    int v20 = _NRLogIsLevelEnabled();

    if (!v20) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  int v14 = *(unsigned __int8 *)(a1 + 40);
  if ((v14 | 2) != 3)
  {
LABEL_8:
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    goto LABEL_9;
  }
  if (!v11)
  {
    id v21 = sub_100135DDC();
    int v22 = _NRLogIsLevelEnabled();

    if (!v22) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (v12 || v14 != 1) {
    goto LABEL_8;
  }
  id v23 = sub_100135DDC();
  int v24 = _NRLogIsLevelEnabled();

  if (v24)
  {
LABEL_21:
    id v25 = sub_100135DDC();
    _NRLogWithArgs();
  }
LABEL_9:
}

void sub_100147808(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v30 = a2;
  id v7 = a3;
  uint64_t v8 = a4;
  uint64_t v9 = self;
  id v10 = sub_10015BD9C();
  dispatch_assert_queue_V2(v10);

  if ([v30 length] == (id)48)
  {
    if (v7)
    {
      if (v8)
      {
        id v11 = sub_10013DD58(v9, v7, 0);
        if (v11)
        {
          id v10 = v11;
          id v4 = sub_10013B968([NRDDeviceIdentity alloc], v30);
          Class isa = v10[8].isa;
          if (!isa)
          {
            [v10 setRemoteIdentity:v4];
            uint64_t v13 = self;
            if (sub_10013C9FC(v13, 0))
            {
              int v14 = v10[4].isa;
              id v15 = [v10 description];
              sub_10012F648(v14, 5006, v15, @"Identity");
            }
            else
            {
              [v10 setRemoteIdentity:0];
            }
LABEL_8:
            (*((void (**)(char *, NSObject *))v8 + 2))(v8, v10);

LABEL_9:
            goto LABEL_10;
          }
        }
        else
        {
          id v23 = sub_100135DDC();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v25 = sub_100135DDC();
            _NRLogWithArgs();
          }
          id v7 = (id)_os_log_pack_size();
          uint64_t v8 = (char *)&v30 - (((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v26 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v26 = 136446210;
          *(void *)(v26 + 4) = "+[NRDLocalDevice ingestRemoteDeviceIdentity:nrUUID:deviceCompletionBlock:]";
          sub_100135DDC();
          Class isa = (void *)_NRLogAbortWithPack();
        }
        if ((objc_msgSend(isa, "isEqual:", v4, v30) & 1) == 0)
        {
          id v27 = sub_100135DDC();
          int v28 = _NRLogIsLevelEnabled();

          if (v28)
          {
            id v29 = sub_100135DDC();
            _NRLogWithArgs();
          }
        }
        goto LABEL_8;
      }
      id v21 = sub_100135DDC();
      int v22 = _NRLogIsLevelEnabled();

      if (v22)
      {
LABEL_18:
        id v10 = sub_100135DDC();
        _NRLogWithArgs();
        goto LABEL_9;
      }
    }
    else
    {
      id v19 = sub_100135DDC();
      int v20 = _NRLogIsLevelEnabled();

      if (v20) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    id v17 = sub_100135DDC();
    int v18 = _NRLogIsLevelEnabled();

    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_10:

  id v16 = v30;
}

void sub_100147B68(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v35 = a2;
  id v9 = a3;
  id v10 = a4;
  uint64_t v11 = self;
  id v12 = sub_10015BD9C();
  dispatch_assert_queue_V2(v12);

  if ([v35 length] == (id)64)
  {
    if (v9)
    {
      if (v10)
      {
        uint64_t v13 = sub_10013DD58(v11, v9, 0);
        if (v13)
        {
          id v12 = v13;
          sub_10013F3BC((uint64_t)v13);
          id v4 = [v35 subdataWithRange:0, 32];
          int v14 = sub_100137EDC((char *)[NRDLDKeychainItemSecKey alloc], v4);
          Class isa = v12[9].isa;
          if (isa) {
            objc_storeStrong((id *)isa + 1, v14);
          }

          uint64_t v5 = [v35 subdataWithRange:32, 32];
          id v16 = v12[9].isa;
          id v6 = v16;
          if (v16)
          {
            id v17 = (void *)*((void *)v16 + 4);
LABEL_9:
            id v18 = v17;
            id v19 = sub_10013AB14((uint64_t)v18, v5);
            Class v20 = v12[9].isa;
            if (v20) {
              objc_storeStrong((id *)v20 + 3, v19);
            }

            id v21 = v12[4].isa;
            int v22 = [v12 description];
            sub_10012F648(v21, 5006, v22, @"ClassD");

            uint64_t v23 = self;
            sub_10013C9FC(v23, 0);
            (*((void (**)(char *, NSObject *))v10 + 2))(v10, v12);

            goto LABEL_12;
          }
        }
        else
        {
          id v31 = sub_100135DDC();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v33 = sub_100135DDC();
            _NRLogWithArgs();
          }
          id v9 = (id)_os_log_pack_size();
          id v10 = (char *)&v35 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
          __error();
          uint64_t v34 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v34 = 136446210;
          *(void *)(v34 + 4) = "+[NRDLocalDevice ingestRemoteClassDKeys:nrUUID:deviceCompletionBlock:]";
          sub_100135DDC();
          _NRLogAbortWithPack();
        }
        id v17 = 0;
        goto LABEL_9;
      }
      id v29 = sub_100135DDC();
      int v30 = _NRLogIsLevelEnabled();

      if (v30)
      {
LABEL_21:
        id v12 = sub_100135DDC();
        _NRLogWithArgs();
LABEL_12:
      }
    }
    else
    {
      id v27 = sub_100135DDC();
      int v28 = _NRLogIsLevelEnabled();

      if (v28) {
        goto LABEL_21;
      }
    }
  }
  else
  {
    id v25 = sub_100135DDC();
    int v26 = _NRLogIsLevelEnabled();

    if (v26) {
      goto LABEL_21;
    }
  }

  id v24 = v35;
}

void sub_100147F1C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = self;
  id v10 = sub_10015BD9C();
  dispatch_assert_queue_V2(v10);

  if ([v6 length] == (id)64)
  {
    if (v7)
    {
      if (v8)
      {
        uint64_t v11 = sub_10013DD58(v9, v7, 0);
        if (!v11)
        {
          id v20 = sub_100135DDC();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v22 = sub_100135DDC();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __error();
          uint64_t v23 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v23 = 136446210;
          *(void *)(v23 + 4) = "+[NRDLocalDevice ingestRemoteClassCKeys:nrUUID:deviceCompletionBlock:]";
          sub_100135DDC();
          _NRLogAbortWithPack();
        }
        id v12 = v11;
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        void v24[2] = sub_100148204;
        v24[3] = &unk_1001C8788;
        id v27 = v8;
        id v25 = v12;
        id v26 = v6;
        uint64_t v28 = v9;
        uint64_t v13 = v12;
        sub_10013F9DC(v13, v24);

        goto LABEL_6;
      }
      id v18 = sub_100135DDC();
      int v19 = _NRLogIsLevelEnabled();

      if (!v19) {
        goto LABEL_7;
      }
    }
    else
    {
      id v16 = sub_100135DDC();
      int v17 = _NRLogIsLevelEnabled();

      if (!v17) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    id v14 = sub_100135DDC();
    int v15 = _NRLogIsLevelEnabled();

    if (!v15) {
      goto LABEL_7;
    }
  }
  uint64_t v13 = (char *)sub_100135DDC();
  _NRLogWithArgs();
LABEL_6:

LABEL_7:
}

void sub_100148204(uint64_t a1, char a2)
{
  if (a2)
  {
    [*(id *)(a1 + 40) subdataWithRange:0, 32];
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v3 = sub_100137EDC((char *)[NRDLDKeychainItemSecKey alloc], v21);
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      uint64_t v5 = (id *)*(id *)(v4 + 80);
      if (v5)
      {
        id v6 = v5;
        objc_storeStrong(v5 + 1, v3);
      }
    }

    id v7 = [[*(id *)(a1 + 40) subdataWithRange:NSMakeRange(32, 32)];
    id v8 = *(id **)(a1 + 32);
    if (v8)
    {
      uint64_t v9 = (id **)v8[10];
      id v10 = v9;
      if (v9) {
        id v8 = v9[4];
      }
      else {
        id v8 = 0;
      }
    }
    else
    {
      id v10 = 0;
    }
    uint64_t v11 = v8;
    id v12 = sub_10013AB14((uint64_t)v11, v7);
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      id v14 = (id *)*(id *)(v13 + 80);
      if (v14)
      {
        int v15 = v14;
        objc_storeStrong(v14 + 3, v12);
      }
    }

    sub_10013F548(*(id **)(a1 + 32), 5006, @"ClassC");
    uint64_t v16 = self;
    sub_10013C9FC(v16, 0);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v17 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v19 = sub_100135DDC();
      _NRLogWithArgs();
    }
    id v20 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v20();
  }
}

void sub_1001483E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = self;
  id v10 = sub_10015BD9C();
  dispatch_assert_queue_V2(v10);

  if ([v6 length] == (id)64)
  {
    if (v7)
    {
      if (v8)
      {
        uint64_t v11 = sub_10013DD58(v9, v7, 0);
        if (!v11)
        {
          id v20 = sub_100135DDC();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v22 = sub_100135DDC();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __error();
          uint64_t v23 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v23 = 136446210;
          *(void *)(v23 + 4) = "+[NRDLocalDevice ingestRemoteClassAKeys:nrUUID:deviceCompletionBlock:]";
          sub_100135DDC();
          _NRLogAbortWithPack();
        }
        id v12 = v11;
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        void v24[2] = sub_1001486D0;
        v24[3] = &unk_1001C8788;
        id v27 = v8;
        id v25 = v12;
        id v26 = v6;
        uint64_t v28 = v9;
        id v13 = v12;
        sub_10013FDA0((uint64_t)v13, v24);

        goto LABEL_6;
      }
      id v18 = sub_100135DDC();
      int v19 = _NRLogIsLevelEnabled();

      if (!v19) {
        goto LABEL_7;
      }
    }
    else
    {
      id v16 = sub_100135DDC();
      int v17 = _NRLogIsLevelEnabled();

      if (!v17) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    id v14 = sub_100135DDC();
    int v15 = _NRLogIsLevelEnabled();

    if (!v15) {
      goto LABEL_7;
    }
  }
  id v13 = sub_100135DDC();
  _NRLogWithArgs();
LABEL_6:

LABEL_7:
}

void sub_1001486D0(uint64_t a1, char a2)
{
  if (a2)
  {
    [*(id *)(a1 + 40) subdataWithRange:0, 32];
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v3 = sub_100137EDC((char *)[NRDLDKeychainItemSecKey alloc], v21);
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      uint64_t v5 = (id *)*(id *)(v4 + 88);
      if (v5)
      {
        id v6 = v5;
        objc_storeStrong(v5 + 1, v3);
      }
    }

    id v7 = [[*(id *)(a1 + 40) subdataWithRange:32, 32];
    id v8 = *(id **)(a1 + 32);
    if (v8)
    {
      uint64_t v9 = (id **)v8[11];
      id v10 = v9;
      if (v9) {
        id v8 = v9[4];
      }
      else {
        id v8 = 0;
      }
    }
    else
    {
      id v10 = 0;
    }
    uint64_t v11 = v8;
    id v12 = sub_10013AB14((uint64_t)v11, v7);
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      id v14 = (id *)*(id *)(v13 + 88);
      if (v14)
      {
        int v15 = v14;
        objc_storeStrong(v14 + 3, v12);
      }
    }

    sub_10013F548(*(id **)(a1 + 32), 5006, @"ClassA");
    uint64_t v16 = self;
    sub_10013C9FC(v16, 0);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v17 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v19 = sub_100135DDC();
      _NRLogWithArgs();
    }
    id v20 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v20();
  }
}

void sub_1001488B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v10 = self;
  uint64_t v11 = sub_10015BD9C();
  dispatch_assert_queue_V2(v11);

  if (!v7)
  {
    id v20 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_10;
    }
LABEL_16:
    id v26 = sub_100135DDC();
    _NRLogWithArgs();

    goto LABEL_10;
  }
  if (!v8)
  {
    id v22 = sub_100135DDC();
    int v23 = _NRLogIsLevelEnabled();

    if (!v23) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
  if (!v9)
  {
    id v24 = sub_100135DDC();
    int v25 = _NRLogIsLevelEnabled();

    if (!v25) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
  id v12 = (id *)sub_10013DD58(v10, v8, 0);
  if (!v12)
  {
    id v27 = sub_100135DDC();
    int v28 = _NRLogIsLevelEnabled();

    if (v28)
    {
      id v29 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_22;
  }
  uint64_t v13 = v12;
  id v14 = v12[5];
  if (!v14)
  {
    id v30 = sub_100135DDC();
    int v31 = _NRLogIsLevelEnabled();

    uint64_t v9 = "+[NRDLocalDevice ingestRemoteClassDKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
    if (v31)
    {
      id v32 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_22:
    id v7 = (id)_os_log_pack_size();
    id v8 = (char *)v34 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    __error();
    uint64_t v33 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v33 = 136446210;
    *(void *)(v33 + 4) = "+[NRDLocalDevice ingestRemoteClassDKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
    goto LABEL_23;
  }
  uint64_t v4 = v14;
  sub_10013F3BC((uint64_t)v13);

  self;
  if (qword_1001F4AB8 != -1) {
LABEL_23:
  }
    dispatch_once(&qword_1001F4AB8, &stru_1001C76D0);
  int v15 = (dispatch_queue_t *)(id)qword_1001F4AB0;
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  void v34[2] = sub_100148D80;
  v34[3] = &unk_1001C87B0;
  uint64_t v37 = v10;
  id v35 = v8;
  id v36 = v9;
  id v16 = v7;
  id v17 = v4;
  id v18 = v34;
  if (v15)
  {
    dispatch_assert_queue_V2(v15[2]);
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    void v38[2] = sub_1000FE960;
    v38[3] = &unk_1001C7798;
    v38[4] = v15;
    id v39 = v16;
    id v19 = v17;
    id v40 = v19;
    id v41 = v18;
    sub_1000FDE68((uint64_t)v15, v19, 4u, v38);
  }
LABEL_10:
}

void sub_100148D80(uint64_t a1, void *a2)
{
}

void sub_100148D90(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = self;
  uint64_t v10 = sub_10015BD9C();
  dispatch_assert_queue_V2(v10);

  if (!v6)
  {
    id v17 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_7;
    }
LABEL_13:
    id v23 = sub_100135DDC();
    _NRLogWithArgs();

    goto LABEL_7;
  }
  if (!v7)
  {
    id v19 = sub_100135DDC();
    int v20 = _NRLogIsLevelEnabled();

    if (!v20) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  if (!v8)
  {
    id v21 = sub_100135DDC();
    int v22 = _NRLogIsLevelEnabled();

    if (!v22) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  uint64_t v11 = (id *)sub_10013DD58(v9, v7, 0);
  if (!v11)
  {
    id v24 = sub_100135DDC();
    int v25 = _NRLogIsLevelEnabled();

    if (v25)
    {
      id v26 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_19:
    _os_log_pack_size();
    __error();
    uint64_t v30 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v30 = 136446210;
    *(void *)(v30 + 4) = "+[NRDLocalDevice ingestRemoteClassCKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  id v12 = v11;
  id v13 = v11[5];
  if (!v13)
  {
    id v27 = sub_100135DDC();
    int v28 = _NRLogIsLevelEnabled();

    if (v28)
    {
      id v29 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_19;
  }
  id v14 = v13;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100149158;
  v31[3] = &unk_1001C87D8;
  id v36 = v8;
  id v32 = v12;
  id v33 = v6;
  id v34 = v14;
  uint64_t v37 = v9;
  id v35 = v7;
  id v15 = v14;
  id v16 = v12;
  sub_10013F9DC(v16, v31);

LABEL_7:
}

void sub_100149158(uint64_t a1, char a2)
{
  if (a2)
  {
    self;
    if (qword_1001F4AB8 != -1) {
      dispatch_once(&qword_1001F4AB8, &stru_1001C76D0);
    }
    uint64_t v3 = (dispatch_queue_t *)(id)qword_1001F4AB0;
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void **)(a1 + 48);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100149430;
    v19[3] = &unk_1001C87B0;
    uint64_t v22 = *(void *)(a1 + 72);
    id v20 = *(id *)(a1 + 56);
    id v21 = *(id *)(a1 + 64);
    id v6 = v4;
    id v7 = v5;
    id v8 = v19;
    if (!v3) {
      goto LABEL_8;
    }
    dispatch_assert_queue_V2(v3[2]);
    if (v6)
    {
      if (v7)
      {
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        void v23[2] = sub_1000FEB68;
        v23[3] = &unk_1001C7798;
        void v23[4] = v3;
        id v24 = v6;
        id v9 = v7;
        id v25 = v9;
        id v26 = v8;
        sub_1000FDE68((uint64_t)v3, v9, 3u, v23);

LABEL_8:
        return;
      }
      id v16 = sub_1000FBE00();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_8;
      }
    }
    else
    {
      id v14 = sub_1000FBE00();
      int v15 = _NRLogIsLevelEnabled();

      if (!v15) {
        goto LABEL_8;
      }
    }
    id v18 = sub_1000FBE00();
    _NRLogWithArgs();

    goto LABEL_8;
  }
  id v10 = sub_100135DDC();
  int v11 = _NRLogIsLevelEnabled();

  if (v11)
  {
    id v12 = sub_100135DDC();
    _NRLogWithArgs();
  }
  id v13 = *(void (**)(void))(*(void *)(a1 + 64) + 16);

  v13();
}

void sub_100149430(uint64_t a1, void *a2)
{
}

void sub_100149440(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = self;
  id v10 = sub_10015BD9C();
  dispatch_assert_queue_V2(v10);

  if (!v6)
  {
    id v17 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (!IsLevelEnabled) {
      goto LABEL_7;
    }
LABEL_13:
    id v23 = sub_100135DDC();
    _NRLogWithArgs();

    goto LABEL_7;
  }
  if (!v7)
  {
    id v19 = sub_100135DDC();
    int v20 = _NRLogIsLevelEnabled();

    if (!v20) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  if (!v8)
  {
    id v21 = sub_100135DDC();
    int v22 = _NRLogIsLevelEnabled();

    if (!v22) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
  int v11 = (id *)sub_10013DD58(v9, v7, 0);
  if (!v11)
  {
    id v24 = sub_100135DDC();
    int v25 = _NRLogIsLevelEnabled();

    if (v25)
    {
      id v26 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_19:
    _os_log_pack_size();
    __error();
    uint64_t v30 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v30 = 136446210;
    *(void *)(v30 + 4) = "+[NRDLocalDevice ingestRemoteClassAKeysEncryptedWithIDS:nrUUID:deviceCompletionBlock:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  id v12 = v11;
  id v13 = v11[5];
  if (!v13)
  {
    id v27 = sub_100135DDC();
    int v28 = _NRLogIsLevelEnabled();

    if (v28)
    {
      id v29 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_19;
  }
  id v14 = v13;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100149808;
  v31[3] = &unk_1001C87D8;
  id v36 = v8;
  id v32 = v12;
  id v33 = v6;
  id v34 = v14;
  uint64_t v37 = v9;
  id v35 = v7;
  id v15 = v14;
  id v16 = v12;
  sub_10013FDA0((uint64_t)v16, v31);

LABEL_7:
}

void sub_100149808(uint64_t a1, char a2)
{
  if (a2)
  {
    self;
    if (qword_1001F4AB8 != -1) {
      dispatch_once(&qword_1001F4AB8, &stru_1001C76D0);
    }
    uint64_t v3 = (dispatch_queue_t *)(id)qword_1001F4AB0;
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void **)(a1 + 48);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100149AE0;
    v19[3] = &unk_1001C87B0;
    uint64_t v22 = *(void *)(a1 + 72);
    id v20 = *(id *)(a1 + 56);
    id v21 = *(id *)(a1 + 64);
    id v6 = v4;
    id v7 = v5;
    id v8 = v19;
    if (!v3) {
      goto LABEL_8;
    }
    dispatch_assert_queue_V2(v3[2]);
    if (v6)
    {
      if (v7)
      {
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        void v23[2] = sub_1000FED70;
        v23[3] = &unk_1001C7798;
        void v23[4] = v3;
        id v24 = v6;
        id v9 = v7;
        id v25 = v9;
        id v26 = v8;
        sub_1000FDE68((uint64_t)v3, v9, 1u, v23);

LABEL_8:
        return;
      }
      id v16 = sub_1000FBE00();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_8;
      }
    }
    else
    {
      id v14 = sub_1000FBE00();
      int v15 = _NRLogIsLevelEnabled();

      if (!v15) {
        goto LABEL_8;
      }
    }
    id v18 = sub_1000FBE00();
    _NRLogWithArgs();

    goto LABEL_8;
  }
  id v10 = sub_100135DDC();
  int v11 = _NRLogIsLevelEnabled();

  if (v11)
  {
    id v12 = sub_100135DDC();
    _NRLogWithArgs();
  }
  id v13 = *(void (**)(void))(*(void *)(a1 + 64) + 16);

  v13();
}

void sub_100149AE0(uint64_t a1, void *a2)
{
}

void sub_100149AF0(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  uint64_t v4 = a3;
  uint64_t v5 = self;
  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  if (v22)
  {
    if (v4)
    {
      id v7 = sub_10013DD58(v5, v22, 0);
      if (!v7)
      {
        id v18 = sub_100135DDC();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v20 = sub_100135DDC();
          _NRLogWithArgs();
        }
        _os_log_pack_size();
        __error();
        uint64_t v21 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v21 = 136446210;
        *(void *)(v21 + 4) = "+[NRDLocalDevice queryIDSDeviceIDForNRUUID:completionBlock:]";
        sub_100135DDC();
        _NRLogAbortWithPack();
      }
      id v8 = v7;
      if (*((void *)v7 + 6))
      {
        v4[2](v4, v7);
      }
      else
      {
        id v9 = (void *)qword_1001F4D90;
        if (!qword_1001F4D90)
        {
          id v10 = objc_alloc_init((Class)NSMutableDictionary);
          int v11 = (void *)qword_1001F4D90;
          qword_1001F4D90 = (uint64_t)v10;

          id v9 = (void *)qword_1001F4D90;
        }
        [v9 objectForKeyedSubscript:v22];
        id v12 = (id)objc_claimAutoreleasedReturnValue();
        if (!v12) {
          id v12 = objc_alloc_init((Class)NSMutableArray);
        }
        id v13 = objc_retainBlock(v4);
        [v12 addObject:v13];

        [(id)qword_1001F4D90 setObject:v12 forKeyedSubscript:v22];
      }
      goto LABEL_11;
    }
    id v16 = sub_100135DDC();
    int v17 = _NRLogIsLevelEnabled();

    if (v17)
    {
LABEL_18:
      id v8 = sub_100135DDC();
      _NRLogWithArgs();
LABEL_11:
    }
  }
  else
  {
    id v14 = sub_100135DDC();
    int v15 = _NRLogIsLevelEnabled();

    if (v15) {
      goto LABEL_18;
    }
  }
}

void sub_100149D9C(uint64_t a1, char *a2, void *a3)
{
  id v16 = a3;
  uint64_t v4 = self;
  uint64_t v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  if (v16)
  {
    id v6 = sub_10013DC5C(v4, v16);
    if (v6)
    {
      id v7 = v6;
      if (*((unsigned __int16 *)v6 + 14) == a2)
      {
LABEL_4:

        goto LABEL_5;
      }
    }
    else
    {
      id v11 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v13 = sub_100135DDC();
        _NRLogWithArgs();
      }
      id v7 = (void *)_os_log_pack_size();
      a2 = (char *)&v16 - (((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136446210;
      *(void *)(v14 + 4) = "+[NRDLocalDevice updateLastSeenInnerLinkVersionHBO:nrUUID:]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    [v7 setLastSeenInnerLinkVersionHBO:a2 v16];
    uint64_t v15 = self;
    sub_10013C9FC(v15, 0);
    goto LABEL_4;
  }
  id v9 = sub_100135DDC();
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    id v7 = sub_100135DDC();
    _NRLogWithArgs();
    goto LABEL_4;
  }
LABEL_5:
  id v8 = v16;
}

void sub_100149F80(uint64_t a1, char *a2, void *a3)
{
  id v16 = a3;
  uint64_t v4 = self;
  uint64_t v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  if (v16)
  {
    id v6 = sub_10013DC5C(v4, v16);
    if (v6)
    {
      id v7 = v6;
      if (v6[18] == a2)
      {
LABEL_4:

        goto LABEL_5;
      }
    }
    else
    {
      id v11 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v13 = sub_100135DDC();
        _NRLogWithArgs();
      }
      id v7 = (void *)_os_log_pack_size();
      a2 = (char *)&v16 - (((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136446210;
      *(void *)(v14 + 4) = "+[NRDLocalDevice updateDeviceEndpointType:nrUUID:]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    [v7 setDeviceType:a2, v16];
    uint64_t v15 = self;
    sub_10013C9FC(v15, 0);
    goto LABEL_4;
  }
  id v9 = sub_100135DDC();
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    id v7 = sub_100135DDC();
    _NRLogWithArgs();
    goto LABEL_4;
  }
LABEL_5:
  id v8 = v16;
}

void sub_10014A164(uint64_t a1, void *a2, void *a3)
{
  id v20 = a2;
  id v4 = a3;
  uint64_t v5 = self;
  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  if (v20)
  {
    if (v4)
    {
      id v7 = sub_10013DC5C(v5, v4);
      if (v7)
      {
        id v8 = v7;
        if ([v20 isEqual:*((void *)v7 + 14)])
        {
LABEL_5:

          goto LABEL_6;
        }
      }
      else
      {
        id v14 = sub_100135DDC();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v16 = sub_100135DDC();
          _NRLogWithArgs();
        }
        id v4 = (id)_os_log_pack_size();
        id v8 = (char *)&v20 - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v17 = 136446210;
        *(void *)(v17 + 4) = "+[NRDLocalDevice updateLastSeenName:nrUUID:]";
        sub_100135DDC();
        _NRLogAbortWithPack();
      }
      id v18 = [v20 copy:v20];
      [v8 setLastSeenName:v18];

      uint64_t v19 = self;
      sub_10013C9FC(v19, 0);
      goto LABEL_5;
    }
    id v12 = sub_100135DDC();
    int v13 = _NRLogIsLevelEnabled();

    if (v13)
    {
LABEL_12:
      id v8 = (char *)sub_100135DDC();
      _NRLogWithArgs();
      goto LABEL_5;
    }
  }
  else
  {
    id v10 = sub_100135DDC();
    int v11 = _NRLogIsLevelEnabled();

    if (v11) {
      goto LABEL_12;
    }
  }
LABEL_6:

  id v9 = v20;
}

void sub_10014A3AC(uint64_t a1, void *a2, void *a3)
{
  id v20 = a2;
  id v4 = a3;
  uint64_t v5 = self;
  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  if (v20)
  {
    if (v4)
    {
      id v7 = sub_10013DC5C(v5, v4);
      if (v7)
      {
        id v8 = v7;
        if ([v20 isEqual:*((void *)v7 + 15)])
        {
LABEL_5:

          goto LABEL_6;
        }
      }
      else
      {
        id v14 = sub_100135DDC();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v16 = sub_100135DDC();
          _NRLogWithArgs();
        }
        id v4 = (id)_os_log_pack_size();
        id v8 = (char *)&v20 - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v17 = 136446210;
        *(void *)(v17 + 4) = "+[NRDLocalDevice updateLastSeenBuildVersion:nrUUID:]";
        sub_100135DDC();
        _NRLogAbortWithPack();
      }
      id v18 = [v20 copy];
      [v8 setLastSeenBuildVersion:v18];

      uint64_t v19 = self;
      sub_10013C9FC(v19, 0);
      goto LABEL_5;
    }
    id v12 = sub_100135DDC();
    int v13 = _NRLogIsLevelEnabled();

    if (v13)
    {
LABEL_12:
      id v8 = (char *)sub_100135DDC();
      _NRLogWithArgs();
      goto LABEL_5;
    }
  }
  else
  {
    id v10 = sub_100135DDC();
    int v11 = _NRLogIsLevelEnabled();

    if (v11) {
      goto LABEL_12;
    }
  }
LABEL_6:

  id v9 = v20;
}

void sub_10014A5F4(uint64_t a1, char *a2, void *a3)
{
  id v16 = a3;
  uint64_t v4 = self;
  uint64_t v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  if (v16)
  {
    id v6 = sub_10013DC5C(v4, v16);
    if (v6)
    {
      id v7 = v6;
      if ((v6[17] != 0) == a2)
      {
LABEL_4:

        goto LABEL_5;
      }
    }
    else
    {
      id v11 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v13 = sub_100135DDC();
        _NRLogWithArgs();
      }
      id v7 = (void *)_os_log_pack_size();
      a2 = (char *)&v16 - (((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136446210;
      *(void *)(v14 + 4) = "+[NRDLocalDevice updateLastSeenAlwaysOnWiFiSupported:nrUUID:]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    [v7 setLastSeenAlwaysOnWiFiSupported:a2 v16];
    uint64_t v15 = self;
    sub_10013C9FC(v15, 0);
    goto LABEL_4;
  }
  id v9 = sub_100135DDC();
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    id v7 = sub_100135DDC();
    _NRLogWithArgs();
    goto LABEL_4;
  }
LABEL_5:
  id v8 = v16;
}

void sub_10014A7E0(uint64_t a1, void *a2, void *a3)
{
  id v25 = a2;
  id v4 = a3;
  uint64_t v5 = self;
  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  if (v25)
  {
    if (v4)
    {
      id v7 = (id *)sub_10013DC5C(v5, v4);
      if (v7)
      {
        id v8 = v7;
        if ([v25 isEqual:v7[12]])
        {
LABEL_5:

          goto LABEL_6;
        }
      }
      else
      {
        id v14 = sub_100135DDC();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v16 = sub_100135DDC();
          _NRLogWithArgs();
        }
        id v4 = (id)_os_log_pack_size();
        id v8 = (id *)((char *)&v25 - (((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF0));
        __error();
        uint64_t v17 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v17 = 136446210;
        *(void *)(v17 + 4) = "+[NRDLocalDevice updateReceivedProxyNotifyPayload:nrUUID:]";
        sub_100135DDC();
        _NRLogAbortWithPack();
      }
      id v18 = [v25 copy:v25];
      [v8 setReceivedProxyNotifyPayload:v18];

      if ([v8[16] proxyCapability] == (id)2)
      {
        id v19 = sub_10011E9E4(v25);
        [v8[16] setProxyProviderCriteria:v19];

        if ([v8[16] hasPoliciesForProxyCriteria])
        {
          id v20 = sub_100135DDC();
          int v21 = _NRLogIsLevelEnabled();

          if (v21)
          {
            id v22 = sub_100135DDC();
            id v24 = [v8[16] proxyProviderCriteria];
            _NRLogWithArgs();
          }
        }
      }
      uint64_t v23 = self;
      sub_10013C9FC(v23, 0);
      goto LABEL_5;
    }
    id v12 = sub_100135DDC();
    int v13 = _NRLogIsLevelEnabled();

    if (v13)
    {
LABEL_12:
      id v8 = (id *)sub_100135DDC();
      _NRLogWithArgs();
      goto LABEL_5;
    }
  }
  else
  {
    id v10 = sub_100135DDC();
    int v11 = _NRLogIsLevelEnabled();

    if (v11) {
      goto LABEL_12;
    }
  }
LABEL_6:

  id v9 = v25;
}

void sub_10014AAE4(uint64_t a1, void *a2)
{
  id v13 = a2;
  uint64_t v2 = self;
  uint64_t v3 = sub_10015BD9C();
  dispatch_assert_queue_V2(v3);

  if (v13)
  {
    id v4 = sub_10013DC5C(v2, v13);
    if (v4)
    {
      uint64_t v5 = v4;
      if (v4[11])
      {
LABEL_4:

        goto LABEL_5;
      }
    }
    else
    {
      id v8 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v10 = sub_100135DDC();
        _NRLogWithArgs();
      }
      uint64_t v5 = (void *)_os_log_pack_size();
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 136446210;
      *(void *)(v11 + 4) = "+[NRDLocalDevice updateHasAuthenticatedWithIdentityForNRUUID:]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    [v5 setHasAuthenticatedWithIdentity:1, v13];
    uint64_t v12 = self;
    sub_10013C9FC(v12, 0);
    goto LABEL_4;
  }
  id v6 = sub_100135DDC();
  int v7 = _NRLogIsLevelEnabled();

  if (v7)
  {
    uint64_t v5 = sub_100135DDC();
    _NRLogWithArgs();
    goto LABEL_4;
  }
LABEL_5:
}

void sub_10014ACC0(uint64_t a1, char *a2, void *a3)
{
  id v16 = a3;
  uint64_t v4 = self;
  uint64_t v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  if (v16)
  {
    id v6 = sub_10013DC5C(v4, v16);
    if (v6)
    {
      int v7 = v6;
      if (*((char **)v6 + 18) == a2)
      {
LABEL_4:

        goto LABEL_5;
      }
    }
    else
    {
      id v11 = sub_100135DDC();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v13 = sub_100135DDC();
        _NRLogWithArgs();
      }
      int v7 = (void *)_os_log_pack_size();
      a2 = (char *)&v16 - (((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF0);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136446210;
      *(void *)(v14 + 4) = "+[NRDLocalDevice updateRemoteDeviceFlags:nrUUID:]";
      sub_100135DDC();
      _NRLogAbortWithPack();
    }
    [v7 setRemoteFlags:a2, v16];
    uint64_t v15 = self;
    sub_10013C9FC(v15, 0);
    goto LABEL_4;
  }
  id v9 = sub_100135DDC();
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    int v7 = sub_100135DDC();
    _NRLogWithArgs();
    goto LABEL_4;
  }
LABEL_5:
  id v8 = v16;
}

double sub_10014AEA4(void *a1, _OWORD *a2)
{
  uint64_t v4 = sub_10015BD9C();
  dispatch_assert_queue_V2(v4);

  if (!a2)
  {
    id v9 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v12 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v12 = 136446210;
    *(void *)(v12 + 4) = "-[NRDLocalDevice writeLocalClassCInnerAddressBytes:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  uint64_t v13 = 0;
  long long v14 = 0uLL;
  int v15 = 0;
  uint64_t v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  int v7 = (void *)sub_1001416EC(a1, @"0");
  sub_100141EA0((uint64_t)NRDLocalDevice, &v13, v7);

  double result = *(double *)&v14;
  *a2 = v14;
  return result;
}

double sub_10014B038(void *a1, _OWORD *a2)
{
  uint64_t v4 = sub_10015BD9C();
  dispatch_assert_queue_V2(v4);

  if (!a2)
  {
    id v9 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v11 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v12 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v12 = 136446210;
    *(void *)(v12 + 4) = "-[NRDLocalDevice writeRemoteClassCInnerAddressBytes:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  uint64_t v13 = 0;
  long long v14 = 0uLL;
  int v15 = 0;
  uint64_t v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  int v7 = sub_1001418A8(a1, @"0");
  sub_100141EA0((uint64_t)NRDLocalDevice, &v13, v7);

  double result = *(double *)&v14;
  *a2 = v14;
  return result;
}

void sub_10014B1CC(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v2 = self;
  uint64_t v3 = sub_10013DD58(v2, v9, 0);
  if (!v3)
  {
    id v5 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v7 = sub_100135DDC();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136446210;
    *(void *)(v8 + 4) = "+[NRDLocalDevice updateSelfManagedBluetoothPairing:nrUUID:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  uint64_t v4 = v3;
  [v3 setSelfManagedBluetoothPairing:1];
}

void sub_10014B328(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v4 = a3;
  self;
  id v5 = (void *)qword_1001F4D70;
  if (!qword_1001F4D70)
  {
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    id v7 = (void *)qword_1001F4D70;
    qword_1001F4D70 = (uint64_t)v6;

    id v5 = (void *)qword_1001F4D70;
  }
  [v5 setObject:v8 forKeyedSubscript:v4];
}

void *sub_10014B3B8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  if (qword_1001F4D60)
  {
    id v7 = [(id)qword_1001F4D60 objectForKeyedSubscript:v4];

    if (v7)
    {
      id v8 = [(id)qword_1001F4D60 objectForKeyedSubscript:v4];
      id v7 = [v8 objectForKeyedSubscript:v5];
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

uint64_t sub_10014B46C(void *a1)
{
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  uint64_t v3 = sub_10015BD9C();
  dispatch_assert_queue_V2(v3);

  id v4 = sub_100140FAC(a1, @"0");
  uint64_t v5 = [v4 hostname];

  return v5;
}

uint64_t sub_10014B4D4(void *a1)
{
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  uint64_t v3 = sub_10015BD9C();
  dispatch_assert_queue_V2(v3);

  id v4 = (void *)sub_1001416EC(a1, @"0");
  uint64_t v5 = [v4 hostname];

  return v5;
}

uint64_t sub_10014B53C(void *a1)
{
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  uint64_t v3 = sub_10015BD9C();
  dispatch_assert_queue_V2(v3);

  id v4 = sub_1001414DC(a1, @"0");
  uint64_t v5 = [v4 hostname];

  return v5;
}

uint64_t sub_10014B5A4(void *a1)
{
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  uint64_t v3 = sub_10015BD9C();
  dispatch_assert_queue_V2(v3);

  id v4 = sub_1001418A8(a1, @"0");
  uint64_t v5 = [v4 hostname];

  return v5;
}

void *sub_10014B60C(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = sub_10015BD9C();
    dispatch_assert_queue_V2(v2);

    uint64_t v3 = sub_10015BD9C();
    dispatch_assert_queue_V2(v3);

    id v4 = sub_10015BD9C();
    dispatch_assert_queue_V2(v4);

    uint64_t v5 = sub_1001414DC(v1, @"0");
    id v6 = [v5 hostname];

    v12[0] = v6;
    id v7 = sub_10015BD9C();
    dispatch_assert_queue_V2(v7);

    id v8 = sub_10015BD9C();
    dispatch_assert_queue_V2(v8);

    id v9 = sub_1001418A8(v1, @"0");
    int v10 = [v9 hostname];

    v12[1] = v10;
    id v1 = +[NSArray arrayWithObjects:v12 count:2];
  }
  return v1;
}

uint64_t sub_10014B734(void *a1)
{
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  long long v7 = 0uLL;
  int v9 = 0;
  uint64_t v8 = 0;
  uint64_t v3 = sub_10015BD9C();
  dispatch_assert_queue_V2(v3);

  id v4 = sub_10015BD9C();
  dispatch_assert_queue_V2(v4);

  uint64_t v5 = sub_100140FAC(a1, @"0");
  sub_100141EA0((uint64_t)NRDLocalDevice, &v7, v5);

  WORD4(v7) = -32514;
  *(_DWORD *)((char *)&v7 + 10) = 0;
  HIWORD(v7) = 0;
  +[NWAddressEndpoint endpointWithAddress:&v7];
  return objc_claimAutoreleasedReturnValue();
}

uint64_t sub_10014B7F4(void *a1)
{
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  uint64_t v3 = (void *)sub_10014B734(a1);
  uint64_t v4 = [v3 hostname];

  return v4;
}

uint64_t sub_10014B844(void *a1)
{
  uint64_t v2 = sub_10015BD9C();
  dispatch_assert_queue_V2(v2);

  uint64_t v3 = sub_10015BD9C();
  dispatch_assert_queue_V2(v3);

  uint64_t v4 = sub_100140FAC(a1, @"0");
  v11[0] = v4;
  uint64_t v5 = sub_10015BD9C();
  dispatch_assert_queue_V2(v5);

  id v6 = (void *)sub_1001416EC(a1, @"0");
  v11[1] = v6;
  long long v7 = (void *)sub_10014B734(a1);
  v11[2] = v7;
  uint64_t v8 = +[NWAddressEndpoint endpointWithHostname:@"192.0.0.6" port:@"0"];
  v11[3] = v8;
  uint64_t v9 = +[NSArray arrayWithObjects:v11 count:4];

  return v9;
}

uint64_t sub_10014B96C(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = self;
  uint64_t v8 = sub_10015BD9C();
  dispatch_assert_queue_V2(v8);

  if (!a2)
  {
    id v16 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v18 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_20;
  }
  if (!v6)
  {
    id v19 = sub_100135DDC();
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
      id v21 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_20;
  }
  uint64_t v9 = sub_10013DD58(v7, v6, 0);
  if (!v9)
  {
    id v22 = sub_100135DDC();
    int v23 = _NRLogIsLevelEnabled();

    if (v23)
    {
      id v24 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_20:
    id v6 = (id)_os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v25 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v25 = 136446210;
    *(void *)(v25 + 4) = "+[NRDLocalDevice updateLocalClassDInnerAddressBytes:nrUUID:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
LABEL_21:
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    goto LABEL_6;
  }
  uint64_t v8 = v9;
  id v3 = [objc_alloc((Class)NSData) initWithBytes:a2 length:16];
  int v10 = [v8 localInnerIPv6AddressBytesClassD];
  LODWORD(a2) = [v3 isEqual:v10];

  if (a2) {
    goto LABEL_11;
  }
  uint64_t v4 = &unk_1001F4000;
  if (qword_1001F4DA0 != -1) {
    goto LABEL_21;
  }
LABEL_6:
  if (_NRLogIsLevelEnabled())
  {
    if (v4[436] != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    id v11 = (id)qword_1001F4D98;
    uint64_t v12 = [v8 localInnerIPv6AddressBytesClassD];
    IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
    id v26 = (void *)createIPv6AddrStringFromData();
    _NRLogWithArgs();
  }
  [v8 setLocalInnerIPv6AddressBytesClassD:v3];
  uint64_t v14 = self;
  sub_10013C9FC(v14, 0);
LABEL_11:

  return a2 ^ 1;
}

uint64_t sub_10014BDA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = self;
  uint64_t v8 = sub_10015BD9C();
  dispatch_assert_queue_V2(v8);

  if (!a2)
  {
    id v16 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v18 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_20;
  }
  if (!v6)
  {
    id v19 = sub_100135DDC();
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
      id v21 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_20;
  }
  uint64_t v9 = sub_10013DD58(v7, v6, 0);
  if (!v9)
  {
    id v22 = sub_100135DDC();
    int v23 = _NRLogIsLevelEnabled();

    if (v23)
    {
      id v24 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_20:
    id v6 = (id)_os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v25 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v25 = 136446210;
    *(void *)(v25 + 4) = "+[NRDLocalDevice updateLocalClassCInnerAddressBytes:nrUUID:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
LABEL_21:
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    goto LABEL_6;
  }
  uint64_t v8 = v9;
  id v3 = [objc_alloc((Class)NSData) initWithBytes:a2 length:16];
  int v10 = [v8 localInnerIPv6AddressBytesClassC];
  LODWORD(a2) = [v3 isEqual:v10];

  if (a2) {
    goto LABEL_11;
  }
  uint64_t v4 = &unk_1001F4000;
  if (qword_1001F4DA0 != -1) {
    goto LABEL_21;
  }
LABEL_6:
  if (_NRLogIsLevelEnabled())
  {
    if (v4[436] != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    id v11 = (id)qword_1001F4D98;
    uint64_t v12 = [v8 localInnerIPv6AddressBytesClassC];
    IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
    id v26 = (void *)createIPv6AddrStringFromData();
    _NRLogWithArgs();
  }
  [v8 setLocalInnerIPv6AddressBytesClassC:v3];
  uint64_t v14 = self;
  sub_10013C9FC(v14, 0);
LABEL_11:

  return a2 ^ 1;
}

uint64_t sub_10014C1DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = self;
  uint64_t v8 = sub_10015BD9C();
  dispatch_assert_queue_V2(v8);

  if (!a2)
  {
    id v16 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v18 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_20;
  }
  if (!v6)
  {
    id v19 = sub_100135DDC();
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
      id v21 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_20;
  }
  uint64_t v9 = sub_10013DD58(v7, v6, 0);
  if (!v9)
  {
    id v22 = sub_100135DDC();
    int v23 = _NRLogIsLevelEnabled();

    if (v23)
    {
      id v24 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_20:
    id v6 = (id)_os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v25 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v25 = 136446210;
    *(void *)(v25 + 4) = "+[NRDLocalDevice updateRemoteClassDInnerAddressBytes:nrUUID:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
LABEL_21:
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    goto LABEL_6;
  }
  uint64_t v8 = v9;
  id v3 = [objc_alloc((Class)NSData) initWithBytes:a2 length:16];
  int v10 = [v8 remoteInnerIPv6AddressBytesClassD];
  LODWORD(a2) = [v3 isEqual:v10];

  if (a2) {
    goto LABEL_11;
  }
  uint64_t v4 = &unk_1001F4000;
  if (qword_1001F4DA0 != -1) {
    goto LABEL_21;
  }
LABEL_6:
  if (_NRLogIsLevelEnabled())
  {
    if (v4[436] != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    id v11 = (id)qword_1001F4D98;
    uint64_t v12 = [v8 remoteInnerIPv6AddressBytesClassD];
    IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
    id v26 = (void *)createIPv6AddrStringFromData();
    _NRLogWithArgs();
  }
  [v8 setRemoteInnerIPv6AddressBytesClassD:v3];
  uint64_t v14 = self;
  sub_10013C9FC(v14, 0);
LABEL_11:

  return a2 ^ 1;
}

uint64_t sub_10014C614(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = self;
  uint64_t v8 = sub_10015BD9C();
  dispatch_assert_queue_V2(v8);

  if (!a2)
  {
    id v16 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v18 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_20;
  }
  if (!v6)
  {
    id v19 = sub_100135DDC();
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
      id v21 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_20;
  }
  uint64_t v9 = sub_10013DD58(v7, v6, 0);
  if (!v9)
  {
    id v22 = sub_100135DDC();
    int v23 = _NRLogIsLevelEnabled();

    if (v23)
    {
      id v24 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_20:
    id v6 = (id)_os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v25 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v25 = 136446210;
    *(void *)(v25 + 4) = "+[NRDLocalDevice updateRemoteClassCInnerAddressBytes:nrUUID:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
LABEL_21:
    dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    goto LABEL_6;
  }
  uint64_t v8 = v9;
  id v3 = [objc_alloc((Class)NSData) initWithBytes:a2 length:16];
  int v10 = [v8 remoteInnerIPv6AddressBytesClassC];
  LODWORD(a2) = [v3 isEqual:v10];

  if (a2) {
    goto LABEL_11;
  }
  uint64_t v4 = &unk_1001F4000;
  if (qword_1001F4DA0 != -1) {
    goto LABEL_21;
  }
LABEL_6:
  if (_NRLogIsLevelEnabled())
  {
    if (v4[436] != -1) {
      dispatch_once(&qword_1001F4DA0, &stru_1001C87F8);
    }
    id v11 = (id)qword_1001F4D98;
    uint64_t v12 = [v8 remoteInnerIPv6AddressBytesClassC];
    IPv6AddrStringFromData = (void *)createIPv6AddrStringFromData();
    id v26 = (void *)createIPv6AddrStringFromData();
    _NRLogWithArgs();
  }
  [v8 setRemoteInnerIPv6AddressBytesClassC:v3];
  uint64_t v14 = self;
  sub_10013C9FC(v14, 0);
LABEL_11:

  return a2 ^ 1;
}

void sub_10014CA4C(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v4 = a3;
  uint64_t v5 = self;
  id v6 = sub_10015BD9C();
  dispatch_assert_queue_V2(v6);

  if (!v4)
  {
    id v10 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_14:
    _os_log_pack_size();
    __error();
    uint64_t v16 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v16 = 136446210;
    *(void *)(v16 + 4) = "+[NRDLocalDevice updateBluetoothUUID:nrUUID:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  uint64_t v7 = sub_10013DD58(v5, v4, 0);
  if (!v7)
  {
    id v13 = sub_100135DDC();
    int v14 = _NRLogIsLevelEnabled();

    if (v14)
    {
      id v15 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_14;
  }
  uint64_t v8 = v7;
  if (![*((id *)v7 + 5) isEqual:v17] || (v17 != 0) != (v8[10] != 0))
  {
    [v8 setBluetoothUUID:];
    [v8 setHasCompletedBluetoothPairing:v17 != 0];
    uint64_t v9 = self;
    sub_10013C9FC(v9, 0);
  }
}

void sub_10014CCE4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = self;
  uint64_t v7 = sub_10015BD9C();
  dispatch_assert_queue_V2(v7);

  if (!v5)
  {
    id v17 = sub_100135DDC();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v19 = sub_100135DDC();
      _NRLogWithArgs();
    }
LABEL_20:
    _os_log_pack_size();
    __error();
    uint64_t v23 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v23 = 136446210;
    *(void *)(v23 + 4) = "+[NRDLocalDevice updateIDSDeviceID:nrUUID:]";
    sub_100135DDC();
    _NRLogAbortWithPack();
  }
  uint64_t v8 = (id *)sub_10013DD58(v6, v5, 0);
  if (!v8)
  {
    id v20 = sub_100135DDC();
    int v21 = _NRLogIsLevelEnabled();

    if (v21)
    {
      id v22 = sub_100135DDC();
      _NRLogWithArgs();
    }
    goto LABEL_20;
  }
  uint64_t v9 = v8;
  if (([v8[6] isEqualToString:v4] & 1) == 0)
  {
    [v9 setIdsDeviceID:v4];
    uint64_t v10 = self;
    sub_10013C9FC(v10, 0);
    if (qword_1001F4D90)
    {
      id v11 = [(id)qword_1001F4D90 objectForKeyedSubscript:v5];

      if (v11)
      {
        id v12 = [(id)qword_1001F4D90 objectForKeyedSubscript:v5];
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        id v13 = [v12 countByEnumeratingWithState:&v24 objects:v28 count:16];
        if (v13)
        {
          id v14 = v13;
          uint64_t v15 = *(void *)v25;
          do
          {
            for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v25 != v15) {
                objc_enumerationMutation(v12);
              }
              (*(void (**)(void))(*(void *)(*((void *)&v24 + 1) + 8 * i) + 16))();
            }
            id v14 = [v12 countByEnumeratingWithState:&v24 objects:v28 count:16];
          }
          while (v14);
        }
        [(id)qword_1001F4D90 setObject:0 forKeyedSubscript:v5];
      }
    }
  }
}

void sub_10014D43C(uint64_t a1)
{
  if (a1 && sub_1000215D0(*(void *)(a1 + 112)) && *(void *)(a1 + 64))
  {
    self;
    if (qword_1001F4A20 != -1) {
      dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
    }
    uint64_t v2 = (id)qword_1001F4A18;
    if (v2 && (unsigned int v3 = v2[5], v2, v3 >= 0x1E))
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        _NRLogWithArgs();
      }
    }
    else
    {
      id v6 = sub_100145E28();
      sub_10014D60C((id *)a1, v6);
      if (*(unsigned char *)(a1 + 39))
      {
        id v4 = sub_100145898();
        sub_10014D60C((id *)a1, v4);
      }
      id v5 = sub_100145B78();
      if ([v5 count]) {
        sub_10014D60C((id *)a1, v5);
      }
    }
  }
}

void sub_10014D60C(id *a1, void *a2)
{
  id v3 = a2;
  if (sub_1000215D0((uint64_t)a1[14]) && a1[8])
  {
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id v42 = v3;
    id obj = v3;
    id v45 = [obj countByEnumeratingWithState:&v50 objects:v55 count:16];
    if (v45)
    {
      uint64_t v44 = *(void *)v51;
      do
      {
        for (uint64_t i = 0; i != v45; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v51 != v44) {
            objc_enumerationMutation(obj);
          }
          id v5 = *(void **)(*((void *)&v50 + 1) + 8 * i);
          long long v46 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          id v6 = a1[19];
          id v7 = [v6 countByEnumeratingWithState:&v46 objects:v54 count:16];
          if (v7)
          {
            id v8 = v7;
            uint64_t v9 = *(void *)v47;
LABEL_15:
            uint64_t v10 = 0;
            while (1)
            {
              if (*(void *)v47 != v9) {
                objc_enumerationMutation(v6);
              }
              id v11 = *(void **)(*((void *)&v46 + 1) + 8 * v10);
              if (objc_msgSend(v11, "subtype", v37, v38, v39, v40, v41) == 102)
              {
                id v12 = [v11 nrUUID];
                unsigned __int8 v13 = [v12 isEqual:v5];

                if (v13) {
                  break;
                }
              }
              if (v8 == (id)++v10)
              {
                id v8 = [v6 countByEnumeratingWithState:&v46 objects:v54 count:16];
                if (!v8) {
                  goto LABEL_22;
                }
                goto LABEL_15;
              }
            }
          }
          else
          {
LABEL_22:

            id v14 = a1[14];
            uint64_t v15 = v14;
            if (v14) {
              uint64_t v16 = (void *)*((void *)v14 + 9);
            }
            else {
              uint64_t v16 = 0;
            }
            id v17 = v16;
            id v18 = [v17 objectForKeyedSubscript:v5];

            id v6 = [v18 firstObject];

            if (v6)
            {
              id v19 = [v6 addressFamily];
              if (v19 == [a1[8] addressFamily])
              {
                id v20 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, v5);
                int v21 = v20;
                if (v20)
                {
                  id v22 = v20[16];
                  uint64_t v23 = [v22 allowedLinkTypes];
                  if ([v23 containsObject:&off_1001D4C30])
                  {
                    id v24 = v21[16];
                    long long v25 = [v24 allowedLinkSubtypes];
                    unsigned __int8 v26 = [v25 containsObject:&off_1001D4C78];

                    if (v26)
                    {
                      id WeakRetained = objc_loadWeakRetained(a1 + 2);
                      unsigned int v28 = [WeakRetained perpetualStandaloneMeadowEnabledForNRUUID:v5];

                      if (v28)
                      {
                        if (qword_1001F4DC0 != -1) {
                          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                        }
                        if (_NRLogIsLevelEnabled())
                        {
                          if (qword_1001F4DC0 != -1) {
                            dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                          }
                          uint64_t v39 = 1417;
                          id v40 = v21;
                          uint64_t v37 = "";
                          id v38 = "-[NRLinkManagerWiFi createAWDLLinkForNRUUIDs:]";
                          _NRLogWithArgs();
                        }
                      }
                      else
                      {
                        int v31 = [NRLinkAWDL alloc];
                        id v32 = a1[3];
                        id v33 = a1[14];
                        if (v33) {
                          id v33 = (void *)v33[3];
                        }
                        id v34 = v33;
                        id v35 = a1[8];
                        uint64_t v37 = [v35 port];
                        id v36 = -[NRLinkAWDL initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:](v31, "initLinkWithQueue:linkDelegate:nrUUID:wifiInterfaceName:localOuterEndpoint:remoteOuterEndpoint:listenerPortString:", v32, a1, v5, v34, v35, v6);

                        if (!v36) {
                          [a1 reportEvent:3201];
                        }
                      }
LABEL_8:

                      goto LABEL_9;
                    }
                  }
                  else
                  {
                  }
                }
                if (qword_1001F4DC0 != -1) {
                  dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4DC0 != -1) {
                    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                  }
                  uint64_t v39 = 1411;
                  id v40 = v21;
                  uint64_t v37 = "";
                  id v38 = "-[NRLinkManagerWiFi createAWDLLinkForNRUUIDs:]";
                  _NRLogWithArgs();
                }
                goto LABEL_8;
              }
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4DC0 != -1) {
                  dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                }
                id v29 = (id *)a1[8];
                id v30 = (id)qword_1001F4DB8;
                id v40 = v29;
                id v41 = v6;
                uint64_t v39 = 1399;
                uint64_t v37 = "";
                id v38 = "-[NRLinkManagerWiFi createAWDLLinkForNRUUIDs:]";
                _NRLogWithArgs();
              }
            }
            else
            {
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4DC0 != -1) {
                  dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                }
                uint64_t v39 = 1403;
                uint64_t v37 = "";
                id v38 = "-[NRLinkManagerWiFi createAWDLLinkForNRUUIDs:]";
                _NRLogWithArgs();
                id v6 = 0;
              }
              else
              {
                id v6 = 0;
              }
            }
          }
LABEL_9:
        }
        id v45 = [obj countByEnumeratingWithState:&v50 objects:v55 count:16];
      }
      while (v45);
    }

    id v3 = v42;
  }
}

void sub_10014DCA0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4DB8;
  qword_1001F4DB8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10014DE9C(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  id v4 = WeakRetained;
  [WeakRetained linkDidReceiveData:a1[5] data:a1[6]];
}

id sub_10014E0F0()
{
  if (qword_1001F4DC0 != -1) {
    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
  }
  uint64_t v0 = (void *)qword_1001F4DB8;

  return v0;
}

void sub_10014E144(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
  }
  else {
    id WeakRetained = 0;
  }
  [WeakRetained linkIsUnavailable:*(void *)(a1 + 40)];

  if ([*(id *)(a1 + 40) subtype] == 101
    && (uint64_t v4 = *(void *)(a1 + 32)) != 0
    && sub_1000215D0(*(void *)(v4 + 104)))
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      _NRLogWithArgs();
    }
    uint64_t v5 = *(void *)(a1 + 32);
    sub_10014E44C(v5);
  }
  else if ([*(id *)(a1 + 40) subtype] == 102 {
         && (uint64_t v6 = *(void *)(a1 + 32)) != 0
  }
         && sub_1000215D0(*(void *)(v6 + 112)))
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      _NRLogWithArgs();
    }
    uint64_t v7 = *(void *)(a1 + 32);
    sub_10014D43C(v7);
  }
  else if ([*(id *)(a1 + 40) subtype] == 104)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8)
    {
      if (sub_1000215D0(*(void *)(v8 + 128)))
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DC0 != -1) {
            dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
          }
          _NRLogWithArgs();
        }
        uint64_t v9 = *(void *)(a1 + 32);
        sub_10014EBE4(v9);
      }
    }
  }
}

void sub_10014E44C(uint64_t a1)
{
  if (!a1 || !sub_1000215D0(*(void *)(a1 + 104)) || !*(void *)(a1 + 56)) {
    return;
  }
  id v38 = sub_100145E28();
  if ([v38 count])
  {
    id v2 = v38;
    id v3 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v3);

    if (!*(void *)(a1 + 216))
    {
      self;
      if (sub_1000215D0(*(void *)(a1 + 104)))
      {
        if (*(void *)(a1 + 56))
        {
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          id v37 = v2;
          id v4 = v2;
          id v5 = [v4 countByEnumeratingWithState:&v39 objects:v43 count:16];
          if (v5)
          {
            id v6 = v5;
            uint64_t v7 = *(void *)v40;
LABEL_13:
            uint64_t v8 = 0;
            while (1)
            {
              if (*(void *)v40 != v7) {
                objc_enumerationMutation(v4);
              }
              uint64_t v9 = sub_10013DC5C((uint64_t)NRDLocalDevice, *(void **)(*((void *)&v39 + 1) + 8 * v8));
              uint64_t v10 = v9;
              id v11 = v9 ? (void *)*((void *)v9 + 16) : 0;
              id v12 = v11;

              if (v12)
              {
                unsigned __int8 v13 = v10 ? (void *)v10[16] : 0;
                id v14 = v13;
                unsigned int v15 = [v14 allowsDirectToCloud];

                if (v15) {
                  break;
                }
              }

              if (v6 == (id)++v8)
              {
                id v6 = [v4 countByEnumeratingWithState:&v39 objects:v43 count:16];
                if (!v6) {
                  goto LABEL_46;
                }
                goto LABEL_13;
              }
            }

            uint64_t v16 = *(void *)(a1 + 216);
            id v2 = v37;
            if (!v16)
            {
              id v17 = [NRDirectToCloudAgent alloc];
              id v18 = *(id *)(a1 + 24);
              id v19 = sub_10006FD70((id *)&v17->super.isa, v18);
              id v20 = *(void **)(a1 + 216);
              *(void *)(a1 + 216) = v19;

              [(id)a1 reportEvent:14001];
              uint64_t v16 = *(void *)(a1 + 216);
              if (!v16) {
                goto LABEL_80;
              }
            }
            dispatch_assert_queue_V2(*(dispatch_queue_t *)(v16 + 32));
            if (*(unsigned char *)(v16 + 14))
            {
LABEL_63:
              if (*(void *)(a1 + 216) && *(_DWORD *)(a1 + 44) == -1)
              {
                if (notify_register_check((const char *)[@"AvoidCompanionSupported" UTF8String], (int *)(a1 + 44))|| *(_DWORD *)(a1 + 44) == -1)
                {
                  if (qword_1001F4DC0 != -1) {
                    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4DC0 != -1) {
                      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                    }
                    _NRLogWithArgs();
                  }
                }
                else
                {
                  sub_10015055C(a1, 1);
                }
              }
              goto LABEL_65;
            }
            if (qword_1001F49C0 != -1) {
              dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F49C0 != -1) {
                dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
              }
              id v21 = (id)qword_1001F49B8;
              id v36 = [(id)v16 agentDescription];
              _NRLogWithArgs();
            }
            id v22 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
            uint64_t v23 = *(void **)(v16 + 40);
            *(void *)(v16 + 40) = v22;

            if (*(void *)(v16 + 40))
            {
              self;
              if (qword_1001F4A20 != -1) {
                dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
              }
              id v24 = (id *)(id)qword_1001F4A18;
              long long v25 = v24;
              if (v24)
              {
                unsigned __int8 v26 = v24[6];
                long long v27 = v26;
                if (v26)
                {
                  unsigned int v28 = (void *)v26[13];
                  if (v28) {
                    unsigned int v28 = (void *)v28[3];
                  }
                  unsigned __int8 v26 = v28;
                }
              }
              else
              {
                long long v27 = 0;
                unsigned __int8 v26 = 0;
              }
              id v29 = *(void **)(v16 + 48);
              *(void *)(v16 + 48) = v26;

              if (*(void *)(v16 + 48))
              {
                if ([*(id *)(v16 + 40) registerNetworkAgent:v16])
                {
                  *(unsigned char *)(v16 + 14) = 1;
                  [(id)v16 setActive:1];
                  uint64_t v30 = *(void *)(v16 + 48);
                  id v31 = *(id *)(v16 + 40);
                  [v31 addNetworkAgentToInterfaceNamed:v30];

                  [*(id *)(v16 + 40) updateNetworkAgent:v16];
                  sub_10012F648(0, 14002, 0, 0);
                  goto LABEL_62;
                }
                if (qword_1001F49C0 != -1) {
                  dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F49C0 == -1)
                  {
LABEL_61:
                    _NRLogWithArgs();
                    goto LABEL_62;
                  }
LABEL_87:
                  dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
                  goto LABEL_61;
                }
              }
              else
              {
                if (qword_1001F49C0 != -1) {
                  dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F49C0 == -1) {
                    goto LABEL_61;
                  }
                  goto LABEL_87;
                }
              }
            }
            else
            {
              if (qword_1001F49C0 != -1) {
                dispatch_once(&qword_1001F49C0, &stru_1001C6B40);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F49C0 == -1) {
                  goto LABEL_61;
                }
                goto LABEL_87;
              }
            }
LABEL_62:
            if (!*(unsigned char *)(v16 + 14))
            {
              id v33 = *(void **)(v16 + 40);
              if (!v33
                || ([v33 unregisterNetworkAgent],
                    id v34 = *(void **)(v16 + 40),
                    *(void *)(v16 + 40) = 0,
                    v34,
                    !*(unsigned char *)(v16 + 14)))
              {
LABEL_80:
                if (qword_1001F4DC0 != -1) {
                  dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                }
                if (_NRLogIsLevelEnabled())
                {
                  id v35 = sub_10014E0F0();
                  _NRLogWithArgs();
                }
                sub_10014F76C(a1);
                goto LABEL_65;
              }
            }
            goto LABEL_63;
          }
LABEL_46:

          sub_10014F76C(a1);
          id v2 = v37;
        }
      }
    }
LABEL_65:

    goto LABEL_66;
  }
  sub_10014F76C(a1);
LABEL_66:
  sub_10014F818((id *)a1, v38);
  id v32 = sub_100145B78();
  if ([v32 count]) {
    sub_10014F818((id *)a1, v32);
  }
}

void sub_10014EBE4(uint64_t a1)
{
  if (a1 && sub_1000215D0(*(void *)(a1 + 128)))
  {
    id v3 = sub_100145E28();
    sub_10014EC88(a1, v3);
    id v2 = sub_100145B78();
    if ([v2 count]) {
      sub_10014EC88(a1, v2);
    }
  }
}

void sub_10014EC88(uint64_t a1, void *a2)
{
  id v63 = a2;
  id v3 = &OBJC_IVAR___NRDiscoveryClient__deviceFoundBlock;
  if (sub_1000215D0(*(void *)(a1 + 128)))
  {
    id v64 = objc_alloc_init((Class)NSMutableArray);
    id v4 = *(void **)(a1 + 128);
    uint64_t v75 = a1;
    if (v4) {
      id v4 = (void *)v4[7];
    }
    id v5 = v4;
    id v6 = [v5 count];

    if (v6)
    {
      uint64_t v7 = *(void **)(v75 + 128);
      if (v7) {
        uint64_t v7 = (void *)v7[7];
      }
      uint64_t v8 = v7;
      [v64 addObjectsFromArray:v8];
    }
    uint64_t v9 = *(void **)(v75 + 128);
    if (v9) {
      uint64_t v9 = (void *)v9[8];
    }
    uint64_t v10 = v9;
    id v11 = [v10 count];

    if (v11)
    {
      id v12 = *(void **)(v75 + 128);
      if (v12) {
        id v12 = (void *)v12[8];
      }
      unsigned __int8 v13 = v12;
      [v64 addObjectsFromArray:v13];
    }
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    id obj = v63;
    id v67 = [obj countByEnumeratingWithState:&v93 objects:v100 count:16];
    if (v67)
    {
      p_cache = (void **)(&OBJC_METACLASS___NRDiscoveryManager + 16);
      uint64_t v66 = *(void *)v94;
      do
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v94 != v66) {
            objc_enumerationMutation(obj);
          }
          id v80 = *(void **)(*((void *)&v93 + 1) + 8 * v15);
          uint64_t v16 = sub_10013DC5C((uint64_t)(p_cache + 373), v80);
          uint64_t v68 = v15;
          uint64_t v69 = v16;
          if (v16) {
            id v17 = (void *)*((void *)v16 + 16);
          }
          else {
            id v17 = 0;
          }
          id v18 = v17;
          id v19 = [v18 allowedLinkSubtypes];
          unsigned int v20 = [v19 containsObject:&off_1001D4C60];

          if (v20)
          {
            BOOL v21 = sub_100118D5C(v69) == 1;
            char v22 = sub_100145D70((BOOL)v69);
            id v23 = *(id *)(v75 + v3[204]);
            id v24 = v23;
            if (v23) {
              long long v25 = (void *)*((void *)v23 + 9);
            }
            else {
              long long v25 = 0;
            }
            id v26 = v25;
            long long v27 = [v26 objectForKeyedSubscript:v80];

            uint64_t v73 = v27;
            if ([v27 count])
            {
              char v28 = v21 & ~v22;
              if (v28)
              {
                char v29 = 0;
                uint64_t v30 = (void *)v75;
              }
              else
              {
                long long v91 = 0u;
                long long v92 = 0u;
                long long v89 = 0u;
                long long v90 = 0u;
                uint64_t v30 = (void *)v75;
                id v31 = *(id *)(v75 + 152);
                id v32 = [v31 countByEnumeratingWithState:&v89 objects:v99 count:16];
                if (v32)
                {
                  id v33 = v32;
                  uint64_t v34 = *(void *)v90;
                  while (2)
                  {
                    for (uint64_t i = 0; i != v33; uint64_t i = (char *)i + 1)
                    {
                      if (*(void *)v90 != v34) {
                        objc_enumerationMutation(v31);
                      }
                      id v36 = *(void **)(*((void *)&v89 + 1) + 8 * i);
                      if ([v36 subtype] == 104)
                      {
                        id v37 = [v36 nrUUID];
                        unsigned int v38 = [v37 isEqual:v80];

                        if (v38)
                        {
                          if ([v36 state] != 255)
                          {
                            char v29 = 1;
                            goto LABEL_42;
                          }
                        }
                      }
                    }
                    id v33 = [v31 countByEnumeratingWithState:&v89 objects:v99 count:16];
                    if (v33) {
                      continue;
                    }
                    break;
                  }
                  char v29 = 0;
LABEL_42:
                  uint64_t v30 = (void *)v75;
                  id v3 = &OBJC_IVAR___NRDiscoveryClient__deviceFoundBlock;
                }
                else
                {
                  char v29 = 0;
                }
              }
              long long v39 = &objc_sync_exit_ptr;
              long long v87 = 0u;
              long long v88 = 0u;
              long long v85 = 0u;
              long long v86 = 0u;
              id v70 = v64;
              id v72 = [v70 countByEnumeratingWithState:&v85 objects:v98 count:16];
              if (v72)
              {
                uint64_t v71 = *(void *)v86;
                char v76 = v28;
LABEL_47:
                uint64_t v40 = 0;
                while (1)
                {
                  if (*(void *)v86 != v71) {
                    objc_enumerationMutation(v70);
                  }
                  if (!(v28 & 1 | ((v29 & 1) == 0))) {
                    break;
                  }
                  uint64_t v74 = v40;
                  long long v41 = [v39[227] endpointWithHostname:*(void *)(*((void *)&v85 + 1) + 8 * v40) port:@"0"];
                  long long v81 = 0u;
                  long long v82 = 0u;
                  long long v83 = 0u;
                  long long v84 = 0u;
                  id v79 = v73;
                  id v42 = [v79 countByEnumeratingWithState:&v81 objects:v97 count:16];
                  if (v42)
                  {
                    id v43 = v42;
                    uint64_t v44 = *(void *)v82;
                    uint64_t v77 = *(void *)v82;
LABEL_54:
                    uint64_t v45 = 0;
                    id v78 = v43;
                    while (1)
                    {
                      if (*(void *)v82 != v44) {
                        objc_enumerationMutation(v79);
                      }
                      if (!(v28 & 1 | ((v29 & 1) == 0))) {
                        break;
                      }
                      long long v47 = *(void **)(*((void *)&v81 + 1) + 8 * v45);
                      if ([v30 endpointsAreCompatible:v41 remoteEndpoint:v47])
                      {
                        long long v48 = v39[227];
                        long long v49 = [v47 hostname];
                        self;
                        if (qword_1001F47E8 != -1) {
                          dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
                        }
                        id v50 = (id)qword_1001F47E0;
                        long long v51 = @"62743";
                        if (!v50) {
                          long long v51 = 0;
                        }
                        long long v52 = v51;
                        long long v53 = [v48 endpointWithHostname:v49 port:v52];

                        objc_opt_class();
                        id v54 = sub_10014F3CC((uint64_t)v30, v80, v41, v53);
                        if (v54)
                        {
                          id v46 = v54;
                        }
                        else
                        {
                          id v55 = [NRLinkInfraRelay alloc];
                          if (v30) {
                            id v56 = (void *)v30[3];
                          }
                          else {
                            id v56 = 0;
                          }
                          id v57 = v56;
                          id v58 = *(void **)((char *)v30 + v3[204]);
                          if (v58) {
                            id v58 = (void *)v58[3];
                          }
                          id v59 = v58;
                          self;
                          if (qword_1001F47E8 != -1) {
                            dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
                          }
                          id v60 = (id)qword_1001F47E0;
                          id v61 = @"62743";
                          if (!v60) {
                            id v61 = 0;
                          }
                          id v62 = v61;
                          id v46 = [(NRLinkInfraRelay *)v55 initLinkWithQueue:v57 linkDelegate:v75 nrUUID:v80 wifiInterfaceName:v59 localOuterEndpoint:v41 remoteOuterEndpoint:v53 listenerPortString:v62];

                          if (v46) {
                            char v29 = 1;
                          }
                          else {
                            [(id)v75 reportEvent:3200];
                          }
                          uint64_t v30 = (void *)v75;
                          id v3 = &OBJC_IVAR___NRDiscoveryClient__deviceFoundBlock;
                          long long v39 = &objc_sync_exit_ptr;
                        }
                        char v28 = v76;

                        uint64_t v44 = v77;
                        id v43 = v78;
                      }
                      if (v43 == (id)++v45)
                      {
                        id v43 = [v79 countByEnumeratingWithState:&v81 objects:v97 count:16];
                        if (v43) {
                          goto LABEL_54;
                        }
                        break;
                      }
                    }
                  }

                  uint64_t v40 = v74 + 1;
                  if ((id)(v74 + 1) == v72)
                  {
                    id v72 = [v70 countByEnumeratingWithState:&v85 objects:v98 count:16];
                    if (v72) {
                      goto LABEL_47;
                    }
                    break;
                  }
                }
              }
            }
            p_cache = &OBJC_METACLASS___NRDiscoveryManager.cache;
          }

          uint64_t v15 = v68 + 1;
        }
        while ((id)(v68 + 1) != v67);
        id v67 = [obj countByEnumeratingWithState:&v93 objects:v100 count:16];
      }
      while (v67);
    }
  }
}

id sub_10014F3CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v39 = a2;
  id v7 = a3;
  id v8 = a4;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  id v9 = *(id *)(a1 + 152);
  id v10 = [v9 countByEnumeratingWithState:&v40 objects:v44 count:16];
  id v37 = v8;
  unsigned int v38 = v7;
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v41;
    if (v7)
    {
LABEL_6:
      uint64_t v13 = 0;
      while (1)
      {
        if (*(void *)v41 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v40 + 1) + 8 * v13);
        if (objc_opt_isKindOfClass())
        {
          uint64_t v15 = [v14 nrUUID];
          unsigned int v16 = [v15 isEqual:v39];

          if (v16)
          {
            id v17 = [v14 localOuterEndpoint];
            id v18 = [v17 hostname];
            id v19 = [v38 hostname];
            unsigned int v20 = [v18 isEqualToString:v19];

            if (v20)
            {
              if (!v37) {
                break;
              }
              BOOL v21 = [v14 remoteOuterEndpoint];
              char v22 = [v21 hostname];
              id v23 = [v37 hostname];
              unsigned int v24 = [v22 isEqualToString:v23];

              if (v24) {
                break;
              }
            }
          }
        }
        if (v11 == (id)++v13)
        {
          id v11 = [v9 countByEnumeratingWithState:&v40 objects:v44 count:16];
          if (!v11) {
            goto LABEL_25;
          }
          goto LABEL_6;
        }
      }
    }
    else if (v8)
    {
LABEL_17:
      uint64_t v26 = 0;
      while (1)
      {
        if (*(void *)v41 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v40 + 1) + 8 * v26);
        if (objc_opt_isKindOfClass())
        {
          long long v27 = [v14 nrUUID];
          unsigned int v28 = [v27 isEqual:v39];

          if (v28)
          {
            char v29 = [v14 remoteOuterEndpoint];
            uint64_t v30 = [v29 hostname];
            id v31 = [v37 hostname];
            unsigned __int8 v32 = [v30 isEqualToString:v31];

            if (v32) {
              break;
            }
          }
        }
        if (v11 == (id)++v26)
        {
          id v11 = [v9 countByEnumeratingWithState:&v40 objects:v44 count:16];
          id v25 = 0;
          if (!v11) {
            goto LABEL_34;
          }
          goto LABEL_17;
        }
      }
    }
    else
    {
LABEL_27:
      uint64_t v33 = 0;
      while (1)
      {
        if (*(void *)v41 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v40 + 1) + 8 * v33);
        if (objc_opt_isKindOfClass())
        {
          uint64_t v34 = [v14 nrUUID];
          unsigned __int8 v35 = [v34 isEqual:v39];

          if (v35) {
            break;
          }
        }
        if (v11 == (id)++v33)
        {
          id v11 = [v9 countByEnumeratingWithState:&v40 objects:v44 count:16];
          id v25 = 0;
          if (!v11) {
            goto LABEL_34;
          }
          goto LABEL_27;
        }
      }
    }
    id v25 = v14;
  }
  else
  {
LABEL_25:
    id v25 = 0;
  }
LABEL_34:

  return v25;
}

void sub_10014F76C(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v2);

    uint64_t v3 = *(void *)(a1 + 216);
    if (v3)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v3 + 32));
      sub_10006FA08(v3);
      id v4 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = 0;

      if (*(_DWORD *)(a1 + 44) != -1)
      {
        sub_10015055C(a1, 0);
        notify_cancel(*(_DWORD *)(a1 + 44));
        *(_DWORD *)(a1 + 44) = -1;
      }
    }
  }
}

void sub_10014F818(id *a1, void *a2)
{
  id v73 = a2;
  uint64_t v3 = &OBJC_IVAR___NRDiscoveryClient__deviceFoundBlock;
  if (sub_1000215D0((uint64_t)a1[13]) && a1[7])
  {
    long long v105 = 0u;
    long long v106 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    id v4 = v73;
    id v77 = [v4 countByEnumeratingWithState:&v103 objects:v110 count:16];
    if (v77)
    {
      id v5 = a1 + 2;
      id v75 = v4;
      uint64_t v76 = *(void *)v104;
      uint64_t v86 = (uint64_t)a1;
      uint64_t v74 = a1 + 2;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v104 != v76)
          {
            uint64_t v7 = v6;
            objc_enumerationMutation(v4);
            uint64_t v6 = v7;
          }
          uint64_t v79 = v6;
          long long v87 = *(void **)(*((void *)&v103 + 1) + 8 * v6);
          id v8 = (id *)sub_10013DC5C((uint64_t)NRDLocalDevice, v87);
          id v9 = v8;
          if (v8)
          {
            if (*((unsigned char *)v8 + 9))
            {
              if (a1) {
                id WeakRetained = objc_loadWeakRetained(v5);
              }
              else {
                id WeakRetained = 0;
              }
              unsigned int v11 = [WeakRetained perpetualStandaloneMeadowEnabledForNRUUID:v87, v69, v70, v71, v72];

              if (v11)
              {
                if (qword_1001F4DC0 != -1) {
                  dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                }
                if (_NRLogIsLevelEnabled())
                {
                  if (qword_1001F4DC0 != -1) {
                    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                  }
                  uint64_t v71 = 821;
                  id v72 = v9;
                  uint64_t v69 = "";
                  id v70 = "-[NRLinkManagerWiFi createLinkForNRUUIDs:]";
                  _NRLogWithArgs();
                }
                goto LABEL_8;
              }
              id v12 = v9[16];
              if (v12)
              {
                uint64_t v13 = v12;
                id v14 = v9[16];
                uint64_t v15 = [v14 allowedLinkSubtypes];
                if (v15)
                {
                  unsigned int v16 = (void *)v15;
                  id v17 = v9[16];
                  [v17 allowedLinkTypes];
                  v19 = id v18 = v9;
                  if (![v19 containsObject:&off_1001D4C30])
                  {

                    a1 = (id *)v86;
                    id v9 = v18;
LABEL_69:
                    if (qword_1001F4DC0 != -1) {
                      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                    }
                    if (_NRLogIsLevelEnabled())
                    {
                      if (qword_1001F4DC0 != -1) {
                        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                      }
                      uint64_t v71 = 830;
                      id v72 = v9;
                      uint64_t v69 = "";
                      id v70 = "-[NRLinkManagerWiFi createLinkForNRUUIDs:]";
                      _NRLogWithArgs();
                    }
                    goto LABEL_8;
                  }
                  unsigned int v20 = v5;
                  BOOL v21 = v3;
                  id v22 = v18[16];
                  id v23 = [v22 allowedLinkSubtypes];
                  unsigned __int8 v88 = [v23 containsObject:&off_1001D4C48];

                  uint64_t v3 = v21;
                  id v5 = v20;
                  id v4 = v75;

                  a1 = (id *)v86;
                  id v9 = v18;
                  if ((v88 & 1) == 0) {
                    goto LABEL_69;
                  }
                }
                else
                {
                }
              }
              int v81 = sub_100118D5C(v9);
              int v24 = sub_100145D70((BOOL)v9);
              id v25 = *(id *)((char *)a1 + v3[201]);
              uint64_t v26 = v25;
              if (v25) {
                long long v27 = (void *)*((void *)v25 + 9);
              }
              else {
                long long v27 = 0;
              }
              id v28 = v27;
              long long v84 = [v28 objectForKeyedSubscript:v87];

              id v29 = objc_alloc_init((Class)NSMutableArray);
              uint64_t v30 = *(id *)((char *)a1 + v3[201]);
              if (v30) {
                uint64_t v30 = (void *)v30[7];
              }
              id v31 = v30;
              id v32 = [v31 count];

              if (v32)
              {
                uint64_t v33 = *(void **)(v86 + v3[201]);
                if (v33) {
                  uint64_t v33 = (void *)v33[7];
                }
                uint64_t v34 = v33;
                [v29 addObjectsFromArray:v34];
              }
              unsigned __int8 v35 = *(void **)(v86 + v3[201]);
              if (v35) {
                unsigned __int8 v35 = (void *)v35[8];
              }
              id v36 = v35;
              id v37 = [v36 count];

              if (v37)
              {
                unsigned int v38 = *(void **)(v86 + v3[201]);
                if (v38) {
                  unsigned int v38 = (void *)v38[8];
                }
                id v39 = v38;
                [v29 addObjectsFromArray:v39];
              }
              uint64_t v40 = (v81 == 1) & ~v24;
              if (((v81 == 1) & ~v24) != 0)
              {
                char v41 = 0;
                a1 = (id *)v86;
              }
              else
              {
                long long v101 = 0u;
                long long v102 = 0u;
                long long v99 = 0u;
                long long v100 = 0u;
                a1 = (id *)v86;
                id v42 = *(id *)(v86 + 152);
                id v43 = [v42 countByEnumeratingWithState:&v99 objects:v109 count:16];
                if (v43)
                {
                  id v44 = v43;
                  unsigned int v89 = (v81 == 1) & ~v24;
                  uint64_t v45 = v9;
                  uint64_t v46 = *(void *)v100;
                  while (2)
                  {
                    for (uint64_t i = 0; i != v44; uint64_t i = (char *)i + 1)
                    {
                      if (*(void *)v100 != v46) {
                        objc_enumerationMutation(v42);
                      }
                      long long v48 = *(void **)(*((void *)&v99 + 1) + 8 * i);
                      if ([v48 subtype] == 101)
                      {
                        long long v49 = [v48 nrUUID];
                        unsigned int v50 = [v49 isEqual:v87];

                        if (v50)
                        {
                          if ([v48 state] != 255)
                          {
                            char v41 = 1;
                            goto LABEL_67;
                          }
                        }
                      }
                    }
                    id v44 = [v42 countByEnumeratingWithState:&v99 objects:v109 count:16];
                    if (v44) {
                      continue;
                    }
                    break;
                  }
                  char v41 = 0;
LABEL_67:
                  a1 = (id *)v86;
                  id v9 = v45;
                  uint64_t v40 = v89;
                }
                else
                {
                  char v41 = 0;
                }
              }
              long long v97 = 0u;
              long long v98 = 0u;
              long long v95 = 0u;
              long long v96 = 0u;
              id obj = v29;
              long long v51 = v87;
              id v83 = [obj countByEnumeratingWithState:&v95 objects:v108 count:16];
              if (v83)
              {
                uint64_t v82 = *(void *)v96;
                BOOL v80 = (BOOL)v9;
LABEL_79:
                id v52 = 0;
                while (1)
                {
                  if (*(void *)v96 != v82) {
                    objc_enumerationMutation(obj);
                  }
                  if (!(v40 & 1 | ((v41 & 1) == 0))) {
                    break;
                  }
                  long long v85 = (char *)v52;
                  id v54 = +[NWAddressEndpoint endpointWithHostname:*(void *)(*((void *)&v95 + 1) + 8 * (void)v52) port:@"0"];
                  long long v91 = 0u;
                  long long v92 = 0u;
                  long long v93 = 0u;
                  long long v94 = 0u;
                  id v90 = v84;
                  id v55 = [v90 countByEnumeratingWithState:&v91 objects:v107 count:16];
                  if (v55)
                  {
                    id v56 = v55;
                    uint64_t v57 = *(void *)v92;
LABEL_87:
                    uint64_t v58 = 0;
                    while (1)
                    {
                      if (*(void *)v92 != v57) {
                        objc_enumerationMutation(v90);
                      }
                      if (!(v40 & 1 | ((v41 & 1) == 0))) {
                        break;
                      }
                      id v60 = *(void **)(*((void *)&v91 + 1) + 8 * v58);
                      if ([a1 endpointsAreCompatible:v54 remoteEndpoint:v60])
                      {
                        uint64_t v61 = v40;
                        id v62 = [v60 hostname];
                        self;
                        if (qword_1001F47E8 != -1) {
                          dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
                        }
                        id v63 = (id)qword_1001F47E0;
                        id v64 = @"62743";
                        if (!v63) {
                          id v64 = 0;
                        }
                        int v65 = v64;
                        uint64_t v66 = +[NWAddressEndpoint endpointWithHostname:v62 port:v65];

                        objc_opt_class();
                        a1 = (id *)v86;
                        long long v51 = v87;
                        id v59 = sub_10014F3CC(v86, v87, v54, v66);
                        if (!v59)
                        {
                          id v59 = sub_100150268((void *)v86, v87, v54, v66);
                          if (v59)
                          {
                            char v41 = 1;
                          }
                          else
                          {
                            [(id)v86 reportEvent:3200];
                            id v59 = 0;
                          }
                        }

                        uint64_t v40 = v61;
                      }
                      if (v56 == (id)++v58)
                      {
                        id v56 = [v90 countByEnumeratingWithState:&v91 objects:v107 count:16];
                        if (v56) {
                          goto LABEL_87;
                        }
                        break;
                      }
                    }
                  }

                  id v9 = (id *)v80;
                  BOOL v67 = sub_100145D70(v80);
                  if (v81 == 1)
                  {
                    long long v53 = v85;
                    if (v67 && ![v90 count])
                    {
                      uint64_t v68 = sub_100150268(a1, v51, v54, 0);
                      if (v68) {
                        char v41 = 1;
                      }
                      else {
                        [a1 reportEvent:3200];
                      }
                    }
                  }
                  else
                  {
                    long long v53 = v85;
                  }

                  id v52 = v53 + 1;
                  if (v52 == v83)
                  {
                    id v83 = [obj countByEnumeratingWithState:&v95 objects:v108 count:16];
                    if (v83) {
                      goto LABEL_79;
                    }
                    break;
                  }
                }
              }

              uint64_t v3 = &OBJC_IVAR___NRDiscoveryClient__deviceFoundBlock;
              id v5 = v74;
              id v4 = v75;
            }
            else
            {
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4DC0 != -1) {
                  dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                }
                uint64_t v71 = 815;
                id v72 = (id *)v87;
                uint64_t v69 = "";
                id v70 = "-[NRLinkManagerWiFi createLinkForNRUUIDs:]";
                _NRLogWithArgs();
              }
            }
          }
          else
          {
            if (qword_1001F4DC0 != -1) {
              dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              uint64_t v71 = 810;
              id v72 = (id *)v87;
              uint64_t v69 = "";
              id v70 = "-[NRLinkManagerWiFi createLinkForNRUUIDs:]";
              _NRLogWithArgs();
            }
          }
LABEL_8:

          uint64_t v6 = v79 + 1;
        }
        while ((id)(v79 + 1) != v77);
        id v77 = [v4 countByEnumeratingWithState:&v103 objects:v110 count:16];
      }
      while (v77);
    }
  }
}

id sub_100150268(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1) {
    id v10 = (void *)a1[3];
  }
  else {
    id v10 = 0;
  }
  unsigned int v11 = v10;
  dispatch_assert_queue_V2(v11);

  if (v7)
  {
    if (v8)
    {
      if ([a1 shouldCreateLinkForNRUUID:v7])
      {
        if (v9)
        {
          id v12 = [v9 hostname];
          self;
          if (qword_1001F47E8 != -1) {
            dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
          }
          id v13 = (id)qword_1001F47E0;
          if (v13) {
            id v14 = @"62743";
          }
          else {
            id v14 = 0;
          }
          uint64_t v15 = v14;
          uint64_t v16 = +[NWAddressEndpoint endpointWithHostname:v12 port:v15];

          id v9 = (id)v16;
        }
        id v17 = [NRLinkWiFi alloc];
        if (a1) {
          id v18 = (void *)a1[3];
        }
        else {
          id v18 = 0;
        }
        id StringFromNRLinkType = v18;
        unsigned int v20 = (void *)a1[13];
        if (v20) {
          unsigned int v20 = (void *)v20[3];
        }
        BOOL v21 = v20;
        self;
        if (qword_1001F47E8 != -1) {
          dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
        }
        id v22 = (id)qword_1001F47E0;
        id v23 = @"62743";
        if (!v22) {
          id v23 = 0;
        }
        int v24 = v23;
        id v25 = [(NRLinkWiFi *)v17 initLinkWithQueue:StringFromNRLinkType linkDelegate:a1 nrUUID:v7 wifiInterfaceName:v21 localOuterEndpoint:v8 remoteOuterEndpoint:v9 listenerPortString:v24];

        goto LABEL_24;
      }
      id StringFromNRLinkType = (id)createStringFromNRLinkType();
      [a1 reportEvent:3200, @"unsupported link type: %@", StringFromNRLinkType detailsFormat];
LABEL_23:
      id v25 = 0;
LABEL_24:

      goto LABEL_25;
    }
    id v29 = sub_10014E0F0();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
LABEL_31:
      id StringFromNRLinkType = sub_10014E0F0();
      _NRLogWithArgs();
      goto LABEL_23;
    }
  }
  else
  {
    id v27 = sub_10014E0F0();
    int v28 = _NRLogIsLevelEnabled();

    if (v28) {
      goto LABEL_31;
    }
  }
  id v25 = 0;
LABEL_25:

  return v25;
}

id sub_10015055C(uint64_t a1, char a2)
{
  id result = self;
  if ((a2 & 1) != 0 || !*(unsigned char *)(a1 + 35))
  {
    notify_set_state(*(_DWORD *)(a1 + 44), 1uLL);
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      uint64_t v6 = *(unsigned int *)(a1 + 44);
      uint64_t v7 = 1;
      uint64_t v5 = 704;
      _NRLogWithArgs();
    }
    id result = [(id)a1 reportEvent:1031, @"token: %d, supported: %d", *(unsigned int *)(a1 + 44), 1, v5, v6, v7 detailsFormat];
    *(unsigned char *)(a1 + 35) = 1;
  }
  return result;
}

void sub_100150868(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 9)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsSuspended:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100150B5C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 8)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsReady:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_100150E70(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == 1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2) {
      id WeakRetained = objc_loadWeakRetained((id *)(v2 + 16));
    }
    else {
      id WeakRetained = 0;
    }
    id v4 = WeakRetained;
    [WeakRetained linkIsAvailable:*(void *)(a1 + 32)];
  }
  else
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      _NRLogWithArgs();
    }
  }
}

id sub_100151724(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

uint64_t sub_10015172C(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    id v4 = *(id *)(result + 24);
    dispatch_assert_queue_V2(v4);

    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    id result = _NRLogIsLevelEnabled();
    if (result)
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id result = _NRLogWithArgs();
    }
    *(_DWORD *)(v3 + 40) = a2;
  }
  return result;
}

void sub_10015182C(id a1)
{
  os_log_t v1 = _NRCopySerialQueueAttr();
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_USER_INITIATED, 0);

  if (!v2)
  {
    id v7 = sub_10014E0F0();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = sub_10014E0F0();
      _NRLogWithArgs();
    }
    uint64_t v3 = (const char *)_os_log_pack_size();
    __chkstk_darwin(v3);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 136446466;
    *(void *)(v10 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v10 + 12) = 1024;
    *(_DWORD *)(v10 + 14) = 25;
    sub_10014E0F0();
    _NRLogAbortWithPack();
LABEL_9:
    id v11 = sub_10014E0F0();
    int v12 = _NRLogIsLevelEnabled();

    if (v12)
    {
      id v13 = sub_10014E0F0();
      _NRLogWithArgs();
    }
    uint64_t v14 = _os_log_pack_size();
    __chkstk_darwin(v14);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)(v15 + 4) = "nr_dispatch_queue_create_with_qos";
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v15 + 14) = v3;
    sub_10014E0F0();
    _NRLogAbortWithPack();
  }
  uint64_t v3 = "terminusd.CoreWiFi";
  dispatch_queue_t v4 = dispatch_queue_create("terminusd.CoreWiFi", v2);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = (uint64_t)v4;

  uint64_t v6 = (void *)qword_1001F4DD0;
  qword_1001F4DD0 = v5;
}

id sub_100151CE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) activate];
}

BOOL sub_100151CF0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = dispatch_group_create();
  if (qword_1001F4DC8 != -1) {
    dispatch_once(&qword_1001F4DC8, &stru_1001C8A10);
  }
  dispatch_group_async(v3, (dispatch_queue_t)qword_1001F4DD0, v2);

  dispatch_time_t v4 = dispatch_time(0x8000000000000000, 3000000000);
  intptr_t v8 = dispatch_group_wait(v3, v4);
  if (v8) {
    sub_100115AB0(@"NRLinkManagerWiFi", @"SemaphoreTimeout", @"PerformBlockSync", 0, 0, v5, v6, v7, v10);
  }

  return v8 != 0;
}

uint64_t sub_100151DC4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100151DD4(uint64_t a1)
{
}

uint64_t sub_100151DDC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) interfaceName];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_100151E28(uint64_t a1)
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  uint64_t v2 = (id)qword_1001F4A18;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    if (v2) {
      BOOL v4 = v2[8] != 0;
    }
    else {
      BOOL v4 = 0;
    }
    *(unsigned char *)(v3 + 39) = v4;
  }

  uint64_t v5 = *(void *)(a1 + 32);

  sub_100151ECC(v5);
}

void sub_100151ECC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_10015216C((void *)a1);
    id v3 = objc_alloc_init((Class)NSMutableArray);
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v4 = v2;
    id v5 = [v4 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v28;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v7) {
            objc_enumerationMutation(v4);
          }
          id v11 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          if (v11) {
            int v12 = (void *)v11[6];
          }
          else {
            int v12 = 0;
          }
          id v13 = v12;

          if (v13)
          {
            if (v11) {
              uint64_t v14 = (void *)v11[6];
            }
            else {
              uint64_t v14 = 0;
            }
            id v15 = v14;
            [v3 addObject:v15];
          }
          if (v11) {
            uint64_t v16 = (void *)v11[4];
          }
          else {
            uint64_t v16 = 0;
          }
          id v17 = v16;

          if (v17)
          {
            if (v11) {
              id v18 = (void *)v11[4];
            }
            else {
              id v18 = 0;
            }
            id v19 = v18;
            [v3 addObject:v19];
          }
          if (v11) {
            unsigned int v20 = (void *)v11[5];
          }
          else {
            unsigned int v20 = 0;
          }
          id v21 = v20;

          if (v21)
          {
            if (v11) {
              id v9 = (void *)v11[5];
            }
            else {
              id v9 = 0;
            }
            id v10 = v9;
            [v3 addObject:v10];
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v27 objects:v31 count:16];
      }
      while (v6);
    }

    if (*(void *)(a1 + 136)) {
      [v3 addObject:];
    }
    if (SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 96), (CFArrayRef)v3, 0))
    {
      id v22 = (id)a1;
      id v23 = v22;
      if (*((_DWORD *)v22 + 3) != 1004) {
        sub_100152200((uint64_t)v22, v3);
      }
    }
    else
    {
      id v24 = sub_10014E0F0();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (!IsLevelEnabled) {
        goto LABEL_39;
      }
      id v23 = sub_10014E0F0();
      CFErrorRef Error = SCCopyLastError();
      _NRLogWithArgs();
    }
LABEL_39:
  }
}

void *sub_10015216C(void *a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v3 = v2;
  if (a1[13]) {
    [v2 addObject:];
  }
  if (a1[14]) {
    [v3 addObject:];
  }
  if (a1[15]) {
    [v3 addObject:];
  }
  if (a1[16]) {
    [v3 addObject:];
  }
  return v3;
}

void sub_100152200(uint64_t a1, void *a2)
{
  CFArrayRef keys = a2;
  if (a1) {
    id v3 = *(void **)(a1 + 24);
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  dispatch_assert_queue_V2(v4);

  CFDictionaryRef v5 = SCDynamicStoreCopyMultiple(*(SCDynamicStoreRef *)(a1 + 96), keys, 0);
  if (qword_1001F4DC0 != -1) {
    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
  }
  id v6 = (id)qword_1001F4DB8;
  int IsLevelEnabled = _NRLogIsLevelEnabled();

  if (IsLevelEnabled)
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    id v8 = (id)qword_1001F4DB8;
    uint64_t v162 = 2285;
    CFDictionaryRef v163 = v5;
    id v160 = "";
    id v161 = "-[NRLinkManagerWiFi processSCDUpdate:]";
    _NRLogWithArgs();
  }
  CFDictionaryRef v169 = v5;
  long long v203 = 0u;
  long long v204 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  id obj = sub_10015216C((void *)a1);
  id v9 = [obj countByEnumeratingWithState:&v203 objects:v215 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v204;
    do
    {
      for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v204 != v10) {
          objc_enumerationMutation(obj);
        }
        int v12 = *(void **)(*((void *)&v203 + 1) + 8 * i);
        if (v12) {
          id v13 = (void *)v12[4];
        }
        else {
          id v13 = 0;
        }
        id v14 = v13;
        unsigned int v15 = [(__CFArray *)keys containsObject:v14];

        if (v15)
        {
          if (v12) {
            uint64_t v16 = (void *)v12[7];
          }
          else {
            uint64_t v16 = 0;
          }
          id v17 = v16;
          [v17 removeAllObjects];
        }
        if (v12) {
          id v18 = (void *)v12[5];
        }
        else {
          id v18 = 0;
        }
        id v19 = v18;
        unsigned int v20 = [(__CFArray *)keys containsObject:v19];

        if (v20)
        {
          if (v12) {
            id v21 = (void *)v12[8];
          }
          else {
            id v21 = 0;
          }
          id v22 = v21;
          [v22 removeAllObjects];
        }
      }
      id v9 = [obj countByEnumeratingWithState:&v203 objects:v215 count:16];
    }
    while (v9);
  }

  id v165 = objc_alloc_init((Class)NSMutableArray);
  if (v169 && [(__CFDictionary *)v169 count])
  {
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    id v167 = obj;
    id v171 = [v167 countByEnumeratingWithState:&v199 objects:v214 count:16];
    if (v171)
    {
      char v168 = 0;
      uint64_t v23 = 0;
      uint64_t v166 = *(void *)v200;
      for (uint64_t j = *(void *)v200; ; uint64_t j = *(void *)v200)
      {
        if (j != v166)
        {
          uint64_t v25 = v23;
          objc_enumerationMutation(v167);
          uint64_t v23 = v25;
        }
        id v26 = *(id *)(*((void *)&v199 + 1) + 8 * v23);
        uint64_t v170 = v23;
        if (v26) {
          long long v27 = (void *)*((void *)v26 + 4);
        }
        else {
          long long v27 = 0;
        }
        id v28 = v27;
        unsigned int v177 = [(__CFArray *)keys containsObject:v28];

        if (v177)
        {
          if (v26)
          {
            id v29 = *((id *)v26 + 7);
            [v29 removeAllObjects];

            long long v30 = (void *)*((void *)v26 + 4);
          }
          else
          {
            [0 removeAllObjects];
            long long v30 = 0;
          }
          id v31 = v30;
          id v174 = [(__CFDictionary *)v169 objectForKeyedSubscript:v31];

          id v32 = [v174 objectForKeyedSubscript:kSCPropNetIPv4Addresses];
          long long v197 = 0u;
          long long v198 = 0u;
          long long v195 = 0u;
          long long v196 = 0u;
          id v33 = v32;
          id v34 = [v33 countByEnumeratingWithState:&v195 objects:v213 count:16];
          if (v34)
          {
            uint64_t v35 = 0;
            uint64_t v36 = *(void *)v196;
            for (uint64_t k = *(void *)v196; ; uint64_t k = *(void *)v196)
            {
              if (k != v36) {
                objc_enumerationMutation(v33);
              }
              CFDictionaryRef v38 = *(const __CFDictionary **)(*((void *)&v195 + 1) + 8 * v35);
              id location = 0;
              uint64_t v217 = 0;
              if (inet_pton(2, (const char *)[(__CFDictionary *)v38 UTF8String], (char *)&location + 4) == 1)
              {
                unsigned int v39 = bswap32(HIDWORD(location));
                if ((v39 & 0xFF000000) == 0
                  || (v39 & 0xFF000000) == 2130706432
                  || v39 >> 28 == 14
                  || HIDWORD(location) == -1
                  || (v39 & 0xFFFFFFF8) == -1073741824)
                {
                  if (qword_1001F4DC0 != -1) {
                    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                  }
                  id v44 = (id)qword_1001F4DB8;
                  int v45 = _NRLogIsLevelEnabled();

                  if (v45)
                  {
                    if (qword_1001F4DC0 != -1) {
                      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                    }
                    id v46 = (id)qword_1001F4DB8;
                    uint64_t v162 = 2323;
                    CFDictionaryRef v163 = v38;
                    id v160 = "";
                    id v161 = "-[NRLinkManagerWiFi processSCDUpdate:]";
                    _NRLogWithArgs();
                    goto LABEL_71;
                  }
                }
                else
                {
                  if (HIWORD(v39) != 43518)
                  {
                    if (v26) {
LABEL_85:
                    }
                      long long v49 = (void *)*((void *)v26 + 7);
                    else {
                      long long v49 = 0;
                    }
                    id v46 = v49;
                    [v46 addObject:v38];
LABEL_71:

                    goto LABEL_72;
                  }
                  if (v26 && *((unsigned char *)v26 + 8)) {
                    goto LABEL_85;
                  }
                  if (qword_1001F4DC0 != -1) {
                    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                  }
                  id v47 = (id)qword_1001F4DB8;
                  int v48 = _NRLogIsLevelEnabled();

                  if (v48)
                  {
                    if (qword_1001F4DC0 != -1) {
                      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                    }
                    id v46 = (id)qword_1001F4DB8;
                    uint64_t v162 = 2329;
                    CFDictionaryRef v163 = v38;
                    id v160 = "";
                    id v161 = "-[NRLinkManagerWiFi processSCDUpdate:]";
                    _NRLogWithArgs();
                    goto LABEL_71;
                  }
                }
              }
LABEL_72:
              if (++v35 >= (unint64_t)v34)
              {
                id v34 = [v33 countByEnumeratingWithState:&v195 objects:v213 count:16];
                if (!v34) {
                  break;
                }
                uint64_t v35 = 0;
              }
            }
          }
        }
        if (v26) {
          unsigned int v50 = (void *)*((void *)v26 + 5);
        }
        else {
          unsigned int v50 = 0;
        }
        id v51 = v50;
        unsigned int v52 = [(__CFArray *)keys containsObject:v51];

        if (v52)
        {
          if (v26)
          {
            id v53 = *((id *)v26 + 8);
            [v53 removeAllObjects];

            id v54 = (void *)*((void *)v26 + 5);
          }
          else
          {
            [0 removeAllObjects];
            id v54 = 0;
          }
          id v55 = v54;
          id v56 = [(__CFDictionary *)v169 objectForKeyedSubscript:v55];

          id v178 = [v56 objectForKeyedSubscript:kSCPropNetIPv6Addresses];
          id v175 = [v56 objectForKeyedSubscript:kSCPropNetIPv6Flags];
          id v57 = [v178 count];
          if (v57 != [v175 count])
          {
            if (qword_1001F4DC0 != -1) {
              dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
            }
            id v77 = (id)qword_1001F4DB8;
            int v78 = _NRLogIsLevelEnabled();

            if (v78)
            {
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              id v79 = (id)qword_1001F4DB8;
              id v160 = (const char *)v178;
              id v161 = (char *)v175;
              _NRLogWithArgs();
            }
            goto LABEL_162;
          }
          id v172 = [v178 count];
          if (v172)
          {
            uint64_t v58 = 0;
            while (1)
            {
              id v59 = [v175 objectAtIndexedSubscript:v58, v160, v161, v162, v163, v164];
              CFDictionaryRef v60 = [v178 objectAtIndexedSubscript:v58];
              id v61 = [v59 unsignedIntValue];
              if (((unsigned __int16)v61 & 0x101F) != 0)
              {
                if (qword_1001F4DC0 != -1) {
                  dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                }
                id v62 = (id)qword_1001F4DB8;
                int v63 = _NRLogIsLevelEnabled();

                if (v63)
                {
                  if (qword_1001F4DC0 != -1) {
                    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                  }
                  id v64 = (id)qword_1001F4DB8;
                  CFDictionaryRef v163 = v60;
                  id v164 = v61;
                  uint64_t v162 = 2357;
                  id v160 = "";
                  id v161 = "-[NRLinkManagerWiFi processSCDUpdate:]";
                  _NRLogWithArgs();
                }
                goto LABEL_127;
              }
              id location = 0;
              uint64_t v217 = 0;
              LODWORD(v219) = 0;
              int v218 = 0;
              if (inet_pton(30, (const char *)[(__CFDictionary *)v60 UTF8String], &v217) == 1) {
                break;
              }
LABEL_127:

              if (v172 == (id)++v58) {
                goto LABEL_143;
              }
            }
            int v65 = v217 | HIDWORD(v217) | v218;
            if (!v65 && !HIDWORD(v218)
              || (HIDWORD(v218) == 0x1000000 ? (BOOL v69 = v65 == 0) : (BOOL v69 = 0), v69 || v217 == 255))
            {
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              id v66 = (id)qword_1001F4DB8;
              int v67 = _NRLogIsLevelEnabled();

              if (!v67) {
                goto LABEL_127;
              }
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              id v68 = (id)qword_1001F4DB8;
              uint64_t v162 = 2368;
              CFDictionaryRef v163 = v60;
              id v160 = "";
              id v161 = "-[NRLinkManagerWiFi processSCDUpdate:]";
              _NRLogWithArgs();
            }
            else if ((v217 & 0xC0FF) == 0x80FE)
            {
              if (v26 && *((unsigned char *)v26 + 8))
              {
                id v70 = *((id *)v26 + 3);
                unsigned __int8 v71 = [(__CFDictionary *)v60 containsString:v70];

                if ((v71 & 1) == 0)
                {
                  id v72 = objc_alloc((Class)NSString);
                  id v160 = (const char *)v60;
                  id v161 = (char *)*((id *)v26 + 3);
                  CFDictionaryRef v73 = (const __CFDictionary *)[v72 initWithFormat:@"%@%%%@"];

                  CFDictionaryRef v60 = v73;
                }
LABEL_124:
                uint64_t v74 = (void *)*((void *)v26 + 8);
                goto LABEL_125;
              }
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              id v75 = (id)qword_1001F4DB8;
              int v76 = _NRLogIsLevelEnabled();

              if (!v76) {
                goto LABEL_127;
              }
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              id v68 = (id)qword_1001F4DB8;
              uint64_t v162 = 2374;
              CFDictionaryRef v163 = v60;
              id v160 = "";
              id v161 = "-[NRLinkManagerWiFi processSCDUpdate:]";
              _NRLogWithArgs();
            }
            else
            {
              if (v26) {
                goto LABEL_124;
              }
              uint64_t v74 = 0;
LABEL_125:
              id v68 = v74;
              [v68 addObject:v60];
            }

            goto LABEL_127;
          }
LABEL_143:

          unsigned int v177 = 1;
        }
        if (v26) {
          BOOL v80 = (void *)*((void *)v26 + 6);
        }
        else {
          BOOL v80 = 0;
        }
        id v81 = v80;
        unsigned int v82 = [(__CFArray *)keys containsObject:v81];

        if (v82)
        {
          if (v26) {
            id v83 = (void *)*((void *)v26 + 6);
          }
          else {
            id v83 = 0;
          }
          id v84 = v83;
          long long v85 = [(__CFDictionary *)v169 objectForKeyedSubscript:v84];

          if (v85)
          {
            uint64_t v86 = [v85 objectForKeyedSubscript:kSCPropNetLinkActive];
            unsigned int v87 = [v86 BOOLValue];
            if (v26)
            {
              *((unsigned char *)v26 + 9) = v87;
              if (v87) {
                sub_100021498((uint64_t)v26);
              }
            }
          }
          else if (v26)
          {
            *((unsigned char *)v26 + 9) = 0;
          }
        }
        else if (!v177)
        {
          goto LABEL_162;
        }
        id v88 = *(id *)(a1 + 128);
        BOOL v89 = v26 == v88;

        if (v26) {
          ++*((_DWORD *)v26 + 4);
        }
        [v165 addObject:v26, v160, v161];
        v168 |= v89;
LABEL_162:
        uint64_t v23 = v170 + 1;
        if (v170 + 1 >= (unint64_t)v171)
        {
          id v171 = [v167 countByEnumeratingWithState:&v199 objects:v214 count:16];
          if (!v171) {
            goto LABEL_173;
          }
          uint64_t v23 = 0;
        }
      }
    }
    char v168 = 0;
LABEL_173:

    id v90 = *(id *)(a1 + 136);
    unsigned int v91 = [(__CFArray *)keys containsObject:v90];

    if (v91)
    {
      *(unsigned char *)(a1 + 32) = 0;
      id v92 = *(id *)(a1 + 136);
      long long v93 = [(__CFDictionary *)v169 objectForKeyedSubscript:v92];

      if (v93)
      {
        long long v94 = [v93 objectForKeyedSubscript:@"InternalInterfaces"];
        if ([v94 count])
        {
          long long v95 = [v93 objectForKeyedSubscript:@"Hosts"];
          long long v96 = [v95 objectForKeyedSubscript:@"Current"];
          if ([v96 unsignedIntValue])
          {
            if (qword_1001F4DC0 != -1) {
              dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
            }
            id v97 = (id)qword_1001F4DB8;
            int v98 = _NRLogIsLevelEnabled();

            if (v98)
            {
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              id v99 = (id)qword_1001F4DB8;
              uint64_t v162 = 2417;
              id v160 = "";
              id v161 = "-[NRLinkManagerWiFi processSCDUpdate:]";
              _NRLogWithArgs();
            }
            *(unsigned char *)(a1 + 32) = 1;
          }
        }
      }
    }
  }
  else
  {
    char v168 = 0;
  }
  long long v193 = 0u;
  long long v194 = 0u;
  long long v191 = 0u;
  long long v192 = 0u;
  id v179 = v165;
  id v100 = [v179 countByEnumeratingWithState:&v191 objects:v212 count:16];
  if (!v100) {
    goto LABEL_256;
  }
  uint64_t v101 = *(void *)v192;
  do
  {
    for (m = 0; m != v100; m = (char *)m + 1)
    {
      if (*(void *)v192 != v101) {
        objc_enumerationMutation(v179);
      }
      CFDictionaryRef v103 = *(const __CFDictionary **)(*((void *)&v191 + 1) + 8 * (void)m);
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v104 = (id)qword_1001F4DB8;
      int v105 = _NRLogIsLevelEnabled();

      if (v105)
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        id v106 = (id)qword_1001F4DB8;
        uint64_t v162 = 2436;
        CFDictionaryRef v163 = v103;
        id v160 = "";
        id v161 = "-[NRLinkManagerWiFi processSCDUpdate:]";
        _NRLogWithArgs();
      }
      if (sub_1000215D0((uint64_t)v103))
      {
        if (v103) {
          long long v107 = (void *)*((void *)v103 + 7);
        }
        else {
          long long v107 = 0;
        }
        id v108 = v107;
        BOOL v109 = [v108 count] == 0;

        if (v109)
        {
          if (v103) {
            id v132 = (void *)*((unsigned int *)v103 + 4);
          }
          else {
            id v132 = 0;
          }
          objc_initWeak(&location, (id)a1);
          dispatch_time_t v133 = dispatch_time(0x8000000000000000, 3000000000);
          if (a1) {
            id v134 = *(void **)(a1 + 24);
          }
          else {
            id v134 = 0;
          }
          id v135 = v134;
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_10015498C;
          block[3] = &unk_1001C89A8;
          objc_copyWeak(v190, &location);
          v190[1] = v132;
          void block[4] = v103;
          void block[5] = a1;
          dispatch_after(v133, v135, block);

          objc_destroyWeak(v190);
          objc_destroyWeak(&location);
        }
        else
        {
          CFDictionaryRef v110 = (const __CFDictionary *)*(id *)(a1 + 104);
          BOOL v111 = v103 == v110;

          if (v111)
          {
            sub_100153BE8(a1);
          }
          else
          {
            CFDictionaryRef v112 = (const __CFDictionary *)*(id *)(a1 + 112);
            BOOL v113 = v103 == v112;

            if (v113)
            {
              sub_100154078((id *)a1);
            }
            else
            {
              CFDictionaryRef v114 = (const __CFDictionary *)*(id *)(a1 + 128);
              BOOL v115 = v103 == v114;

              if (v115) {
                sub_100154580(a1);
              }
            }
          }
        }
      }
      else
      {
        CFDictionaryRef v116 = (const __CFDictionary *)*(id *)(a1 + 104);
        BOOL v117 = v103 == v116;

        if (v117)
        {
          id v122 = *(id *)(a1 + 24);
          dispatch_assert_queue_V2(v122);

          if (!*(void *)(a1 + 56)) {
            continue;
          }
          if (qword_1001F4DC0 != -1) {
            dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DC0 != -1) {
              dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
            }
            uint64_t v162 = 975;
            id v160 = "";
            id v161 = "-[NRLinkManagerWiFi interfaceUnavailable]";
            _NRLogWithArgs();
          }
          id v123 = *(id *)(a1 + 24);
          dispatch_assert_queue_V2(v123);

          id v124 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = 0;

          id v125 = *(void **)(a1 + 80);
          *(void *)(a1 + 80) = 0;

          [(id)a1 reportEvent:11003 details:@"<nil>"];
          sub_10014F76C(a1);
          id v126 = [*(id *)(a1 + 152) copy];
          long long v209 = 0u;
          long long v210 = 0u;
          long long v207 = 0u;
          long long v208 = 0u;
          id v127 = v126;
          id v128 = [v127 countByEnumeratingWithState:&v207 objects:&location count:16];
          if (v128)
          {
            uint64_t v129 = *(void *)v208;
            do
            {
              for (n = 0; n != v128; n = (char *)n + 1)
              {
                if (*(void *)v208 != v129) {
                  objc_enumerationMutation(v127);
                }
                id v131 = *(void **)(*((void *)&v207 + 1) + 8 * (void)n);
                if (objc_msgSend(v131, "subtype", v160, v161, v162, v163) == 101)
                {
                  [v131 setNoTransport:1];
                  [v131 cancelWithReason:@"Interface went away"];
                }
              }
              id v128 = [v127 countByEnumeratingWithState:&v207 objects:&location count:16];
            }
            while (v128);
          }
          goto LABEL_228;
        }
        CFDictionaryRef v118 = (const __CFDictionary *)*(id *)(a1 + 112);
        BOOL v119 = v103 == v118;

        if (v119)
        {
          id v136 = *(id *)(a1 + 24);
          dispatch_assert_queue_V2(v136);

          if (*(void *)(a1 + 64))
          {
            if (qword_1001F4DC0 != -1) {
              dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
            }
            if (_NRLogIsLevelEnabled())
            {
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              uint64_t v162 = 1363;
              id v160 = "";
              id v161 = "-[NRLinkManagerWiFi awdlUnavailable]";
              _NRLogWithArgs();
            }
            id v137 = *(id *)(a1 + 24);
            dispatch_assert_queue_V2(v137);

            id v138 = *(void **)(a1 + 64);
            *(void *)(a1 + 64) = 0;

            [(id)a1 reportEvent:11005 details:@"<nil>"];
            id WeakRetained = objc_loadWeakRetained((id *)(a1 + 160));
            [WeakRetained localAWDLEndpointChanged:0];

            id v140 = [*(id *)(a1 + 152) copy];
            long long v209 = 0u;
            long long v210 = 0u;
            long long v207 = 0u;
            long long v208 = 0u;
            id v127 = v140;
            id v141 = [v127 countByEnumeratingWithState:&v207 objects:&location count:16];
            if (v141)
            {
              uint64_t v142 = *(void *)v208;
              do
              {
                for (iuint64_t i = 0; ii != v141; iuint64_t i = (char *)ii + 1)
                {
                  if (*(void *)v208 != v142) {
                    objc_enumerationMutation(v127);
                  }
                  id v144 = *(void **)(*((void *)&v207 + 1) + 8 * (void)ii);
                  if (objc_msgSend(v144, "subtype", v160, v161) == 102)
                  {
                    [v144 setNoTransport:1];
                    [v144 cancelWithReason:@"Interface went away"];
                  }
                }
                id v141 = [v127 countByEnumeratingWithState:&v207 objects:&location count:16];
              }
              while (v141);
            }
LABEL_228:

            continue;
          }
        }
        else
        {
          CFDictionaryRef v120 = (const __CFDictionary *)*(id *)(a1 + 128);
          BOOL v121 = v103 == v120;

          if (v121) {
            sub_100154B9C(a1);
          }
        }
      }
    }
    id v100 = [v179 countByEnumeratingWithState:&v191 objects:v212 count:16];
  }
  while (v100);
LABEL_256:

  ++*(void *)(a1 + 144);
  *(void *)&long long v207 = 0;
  *((void *)&v207 + 1) = &v207;
  *(void *)&long long v208 = 0x2020000000;
  BYTE8(v208) = 0;
  id v145 = *(id *)(a1 + 176);
  id location = _NSConcreteStackBlock;
  uint64_t v217 = 3221225472;
  int v218 = sub_100154FAC;
  id v219 = &unk_1001C8908;
  id v146 = v145;
  id v220 = v146;
  id v221 = &v207;
  sub_100151CF0((uint64_t)NRLinkManagerWiFi, &location);
  int v147 = *(unsigned __int8 *)(*((void *)&v207 + 1) + 24);

  _Block_object_dispose(&v207, 8);
  if (v147)
  {
    id v148 = *(id *)(a1 + 104);
    if (sub_1000215D0((uint64_t)v148))
    {
      BOOL v149 = 1;
      goto LABEL_263;
    }
    if (sub_100154E58(a1))
    {
      BOOL v149 = *(unsigned char *)(a1 + 32) != 0;
LABEL_263:
      BOOL v176 = v149;
    }
    else
    {
      BOOL v176 = 0;
    }
  }
  else
  {
    BOOL v176 = sub_100154E58(a1) && *(unsigned char *)(a1 + 32) != 0;
  }
  id v150 = *(id *)(a1 + 128);
  int v173 = sub_1000215D0((uint64_t)v150);

  if (qword_1001F4DC0 != -1) {
    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
  }
  id v151 = (id)qword_1001F4DB8;
  int v152 = _NRLogIsLevelEnabled();

  if (v152)
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    id v153 = (id)qword_1001F4DB8;
    _NRLogWithArgs();
  }
  if (((v176 ^ (*(unsigned char *)(a1 + 37) != 0)) & 1) != 0 || (v168 & 1) != 0 && v173 != (*(unsigned char *)(a1 + 38) != 0))
  {
    *(unsigned char *)(a1 + 37) = v176;
    *(unsigned char *)(a1 + 38) = v173;
    long long v185 = 0u;
    long long v186 = 0u;
    long long v187 = 0u;
    long long v188 = 0u;
    id v154 = *(id *)(a1 + 264);
    id v155 = [v154 countByEnumeratingWithState:&v185 objects:v211 count:16];
    if (v155)
    {
      uint64_t v156 = *(void *)v186;
      do
      {
        for (juint64_t j = 0; jj != v155; juint64_t j = (char *)jj + 1)
        {
          if (*(void *)v186 != v156) {
            objc_enumerationMutation(v154);
          }
          uint64_t v158 = *(void *)(*((void *)&v185 + 1) + 8 * (void)jj);
          if (objc_opt_respondsToSelector())
          {
            id v159 = sub_10015BD9C();
            v182[0] = _NSConcreteStackBlock;
            v182[1] = 3221225472;
            v182[2] = sub_100154F60;
            v182[3] = &unk_1001C89D0;
            v182[4] = v158;
            BOOL v183 = v176;
            char v184 = v173;
            dispatch_async(v159, v182);
          }
        }
        id v155 = [v154 countByEnumeratingWithState:&v185 objects:v211 count:16];
      }
      while (v155);
    }
  }
}

void sub_100153BCC(_Unwind_Exception *a1)
{
}

void sub_100153BE8(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v2);

    id v3 = *(void **)(a1 + 104);
    if (v3) {
      id v3 = (void *)v3[7];
    }
    id v4 = v3;
    id v5 = [v4 count];

    if (v5)
    {
      id v6 = *(void **)(a1 + 104);
      if (v6) {
        id v6 = (void *)v6[7];
      }
    }
    else
    {
      uint64_t v7 = *(void **)(a1 + 104);
      if (v7) {
        uint64_t v7 = (void *)v7[8];
      }
      id v8 = v7;
      id v9 = [v8 count];

      if (!v9) {
        goto LABEL_15;
      }
      id v6 = *(void **)(a1 + 104);
      if (v6) {
        id v6 = (void *)v6[8];
      }
    }
    uint64_t v10 = v6;
    id v11 = [v10 firstObject];
    int v12 = +[NWAddressEndpoint endpointWithHostname:v11 port:@"0"];

    if (v12)
    {
      if ([*(id *)(a1 + 56) isEqual:v12])
      {
        id v13 = v12;
      }
      else
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DC0 != -1) {
            dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
          }
          uint64_t v30 = 947;
          id v28 = "";
          id v29 = "-[NRLinkManagerWiFi interfaceAvailable]";
          _NRLogWithArgs();
        }
        id v17 = [*(id *)(a1 + 152) copy:v28, v29, v30];
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        id v18 = v17;
        id v19 = [v18 countByEnumeratingWithState:&v31 objects:v35 count:16];
        if (v19)
        {
          id v20 = v19;
          uint64_t v21 = *(void *)v32;
          do
          {
            for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v32 != v21) {
                objc_enumerationMutation(v18);
              }
              uint64_t v23 = *(void **)(*((void *)&v31 + 1) + 8 * i);
              if ([v23 subtype] == 101)
              {
                id v24 = [v23 localOuterEndpoint];
                unsigned __int8 v25 = [v24 isEqual:v12];

                if ((v25 & 1) == 0)
                {
                  [v23 setNoTransport:1];
                  [v23 cancelWithReason:@"Local endpoint changed"];
                }
              }
            }
            id v20 = [v18 countByEnumeratingWithState:&v31 objects:v35 count:16];
          }
          while (v20);
        }

        id v13 = v12;
        id v26 = *(id *)(a1 + 24);
        dispatch_assert_queue_V2(v26);

        objc_storeStrong((id *)(a1 + 56), v12);
        [(id)a1 reportEvent:11003, @"%@", *(void *)(a1 + 56) detailsFormat];
        if (nwi_state_copy())
        {
          [v13 addressFamily];
          uint64_t first_ifstate = nwi_state_get_first_ifstate();
          if ((sub_100155008((void *)a1, first_ifstate) & 1) == 0)
          {
            do
            {
              if (!first_ifstate) {
                break;
              }
              uint64_t first_ifstate = nwi_ifstate_get_next();
            }
            while (!sub_100155008((void *)a1, first_ifstate));
          }
          nwi_state_release();
        }

        sub_10014E44C(a1);
      }
LABEL_44:

      return;
    }
LABEL_15:
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      _NRLogWithArgs();
    }
    id v14 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v14);

    unsigned int v15 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;

    uint64_t v16 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = 0;

    [(id)a1 reportEvent:11003 details:@"<nil>"];
    id v13 = 0;
    goto LABEL_44;
  }
}

void sub_100154078(id *a1)
{
  if (a1)
  {
    id v2 = a1[3];
    dispatch_assert_queue_V2(v2);

    id v3 = a1[14];
    if (v3) {
      id v3 = (void *)v3[8];
    }
    id v4 = v3;
    id v5 = [v4 count];

    if (!v5) {
      goto LABEL_37;
    }
    id v6 = a1[14];
    uint64_t v7 = v6;
    if (v6) {
      id v8 = (void *)*((void *)v6 + 8);
    }
    else {
      id v8 = 0;
    }
    id v9 = v8;
    uint64_t v10 = [v9 firstObject];
    self;
    if (qword_1001F47E8 != -1) {
      dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
    }
    id v11 = (id)qword_1001F47E0;
    int v12 = @"62743";
    if (!v11) {
      int v12 = 0;
    }
    id v13 = v12;
    id v14 = +[NWAddressEndpoint endpointWithHostname:v10 port:v13];

    if (v14)
    {
      if (([a1[8] isEqual:v14] & 1) == 0)
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DC0 != -1) {
            dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
          }
          uint64_t v34 = 1328;
          long long v31 = "";
          long long v33 = "-[NRLinkManagerWiFi awdlAvailable]";
          _NRLogWithArgs();
        }
        uint64_t v35 = (uint64_t)a1;
        id v15 = [[a1[19] copy:v31, v33, v34];
        long long v36 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        id v16 = v15;
        id v17 = [v16 countByEnumeratingWithState:&v36 objects:v40 count:16];
        if (v17)
        {
          id v18 = v17;
          uint64_t v19 = *(void *)v37;
          do
          {
            for (uint64_t i = 0; i != v18; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v37 != v19) {
                objc_enumerationMutation(v16);
              }
              uint64_t v21 = *(void **)(*((void *)&v36 + 1) + 8 * i);
              if (objc_msgSend(v21, "subtype", v32) == 102)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  id v22 = v21;
                  uint64_t v23 = [v22 localOuterEndpoint];
                  unsigned __int8 v24 = [v23 isEqual:v14];

                  if ((v24 & 1) == 0)
                  {
                    [v22 setNoTransport:1];
                    [v22 cancelWithReason:@"Local endpoint changed"];
                  }
                }
                else
                {
                  if (qword_1001F4DC0 != -1) {
                    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                  }
                  if (_NRLogIsLevelEnabled())
                  {
                    if (qword_1001F4DC0 != -1) {
                      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                    }
                    long long v32 = v21;
                    _NRLogWithArgs();
                  }
                }
              }
            }
            id v18 = [v16 countByEnumeratingWithState:&v36 objects:v40 count:16];
          }
          while (v18);
        }

        id v27 = v14;
        id v28 = *(id *)(v35 + 24);
        dispatch_assert_queue_V2(v28);

        id v29 = *(void **)(v35 + 64);
        *(void *)(v35 + 64) = v27;
        id v14 = v27;

        [(id)v35 reportEvent:11005, @"%@", *(void *)(v35 + 64) detailsFormat];
        id WeakRetained = objc_loadWeakRetained((id *)(v35 + 160));
        [WeakRetained localAWDLEndpointChanged:v14];

        sub_10014D43C(v35);
      }
    }
    else
    {
LABEL_37:
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        _NRLogWithArgs();
      }
      unsigned __int8 v25 = a1[3];
      dispatch_assert_queue_V2(v25);

      id v26 = a1[8];
      a1[8] = 0;

      [a1 reportEvent:11005 details:@"<nil>"];
      id v14 = 0;
    }
  }
}

void sub_100154580(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    id v2 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v2);

    if (sub_1000215D0(*(void *)(v1 + 128)))
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        uint64_t v30 = 1134;
        id v27 = "";
        id v29 = "-[NRLinkManagerWiFi irAvailable]";
        _NRLogWithArgs();
      }
      id v3 = [[*(id *)(v1 + 152) copy:v27, v29, v30];
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v4 = v3;
      id v5 = [v4 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v33;
        uint64_t v31 = v1;
        do
        {
          for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v33 != v7) {
              objc_enumerationMutation(v4);
            }
            id v9 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            if (objc_msgSend(v9, "subtype", v28) == 104 && objc_msgSend(v9, "state") != 255)
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                id v10 = v9;
                id v11 = [v10 localOuterEndpoint];
                if ([v11 addressFamily] != (id)2)
                {

                  goto LABEL_33;
                }
                id v12 = *(id *)(v1 + 128);
                id v13 = v12;
                if (v12) {
                  id v14 = (void *)*((void *)v12 + 7);
                }
                else {
                  id v14 = 0;
                }
                id v15 = v14;
                id v16 = [v10 localOuterEndpoint];

                id v17 = [v16 hostname];
                unsigned __int8 v18 = [v15 containsObject:v17];

                uint64_t v1 = v31;
                if ((v18 & 1) == 0) {
                  goto LABEL_13;
                }
LABEL_33:
                uint64_t v19 = [v10 localOuterEndpoint];
                if ([v19 addressFamily] == (id)30)
                {
                  id v20 = *(id *)(v1 + 128);
                  uint64_t v21 = v20;
                  if (v20) {
                    id v22 = (void *)*((void *)v20 + 8);
                  }
                  else {
                    id v22 = 0;
                  }
                  id v23 = v22;
                  unsigned __int8 v24 = [v10 localOuterEndpoint];

                  unsigned __int8 v25 = [v24 hostname];
                  unsigned __int8 v26 = [v23 containsObject:v25];

                  uint64_t v1 = v31;
                  if (v26) {
                    goto LABEL_14;
                  }
LABEL_13:
                  [v10 setNoTransport:1];
                  [v10 cancelWithReason:@"Local endpoint changed"];
                }
                else
                {
                }
LABEL_14:

                continue;
              }
              if (qword_1001F4DC0 != -1) {
                dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
              }
              if (_NRLogIsLevelEnabled())
              {
                if (qword_1001F4DC0 != -1) {
                  dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
                }
                id v28 = v9;
                _NRLogWithArgs();
              }
            }
          }
          id v6 = [v4 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v6);
      }

      sub_10014EBE4(v1);
    }
  }
}

uint64_t sub_10015498C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (!WeakRetained || WeakRetained[3] == 1004) {
    goto LABEL_21;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    uint64_t v5 = *(unsigned int *)(v4 + 16);
  }
  else {
    uint64_t v5 = 0;
  }
  id v8 = v3;
  if (*(void *)(a1 + 56) == v5)
  {
    if (sub_1000215D0(v4))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6 == v8[13])
      {
        sub_100153BE8(*(void *)(a1 + 40));
      }
      else if (v6 == v8[14])
      {
        sub_100154078(*(id **)(a1 + 40));
      }
      else if (v6 == v8[16])
      {
        sub_100154580(*(void *)(a1 + 40));
      }
      goto LABEL_21;
    }
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 == -1)
      {
LABEL_20:
        _NRLogWithArgs();
        goto LABEL_21;
      }
LABEL_26:
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 == -1) {
        goto LABEL_20;
      }
      goto LABEL_26;
    }
  }
LABEL_21:

  return _objc_release_x1();
}

void sub_100154B9C(uint64_t a1)
{
  if (a1) {
    id v2 = *(void **)(a1 + 24);
  }
  else {
    id v2 = 0;
  }
  id v3 = v2;
  dispatch_assert_queue_V2(v3);

  if ((sub_1000215D0(*(void *)(a1 + 128)) & 1) == 0)
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      uint64_t v20 = 1285;
      unsigned __int8 v18 = "";
      uint64_t v19 = "-[NRLinkManagerWiFi irUnavailable]";
      _NRLogWithArgs();
    }
  }
  id v4 = [[*(id *)(a1 + 152) copy:v18, v19, v20];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        if ([v10 subtype] == 104 && objc_msgSend(v10, "state") != 255)
        {
          if ((sub_1000215D0(*(void *)(a1 + 128)) & 1) == 0)
          {
            [v10 setNoTransport:1];
            [v10 cancelWithReason:@"Interface went away"];
          }
          id v11 = *(id *)(a1 + 128);
          id v12 = v11;
          if (v11) {
            id v13 = (void *)*((void *)v11 + 9);
          }
          else {
            id v13 = 0;
          }
          id v14 = v13;
          uint64_t v15 = [v10 nrUUID];

          id v16 = [v14 objectForKeyedSubscript:v15];

          id v17 = [v10 remoteOuterEndpoint];
          LOBYTE(v15) = [v16 containsObject:v17];

          if ((v15 & 1) == 0) {
            [v10 cancelWithReason:@"peer went away"];
          }
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v7);
  }
}

BOOL sub_100154E58(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 0;
  id v1 = *(id *)(a1 + 176);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100154F74;
  v5[3] = &unk_1001C8908;
  id v2 = v1;
  id v6 = v2;
  id v7 = &v8;
  sub_100151CF0((uint64_t)NRLinkManagerWiFi, v5);
  BOOL v3 = *((unsigned char *)v9 + 24) != 0;

  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_100154F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100154F60(uint64_t a1)
{
  return [*(id *)(a1 + 32) didUpdatePHSState:*(unsigned __int8 *)(a1 + 40) llphsActive:*(unsigned __int8 *)(a1 + 41)];
}

id sub_100154F74(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) opMode];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (result & 8) != 0;
  return result;
}

void sub_100154FAC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) currentKnownNetworkProfile];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 isPersonalHotspot];
}

uint64_t sub_100155008(void *a1, uint64_t a2)
{
  if (a1) {
    id v4 = (void *)a1[3];
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  dispatch_assert_queue_V2(v5);

  if (!a2) {
    return 0;
  }
  uint64_t ifname = nwi_ifstate_get_ifname();
  id v7 = (void *)a1[13];
  if (v7) {
    id v7 = (void *)v7[3];
  }
  uint64_t v8 = v7;
  id v9 = [objc_alloc((Class)NSString) initWithUTF8String:ifname];
  unsigned int v10 = [v8 isEqualToString:v9];

  if (!v10) {
    return 0;
  }
  uint64_t signature = nwi_ifstate_get_signature();
  if (signature)
  {
    id v12 = [objc_alloc((Class)NSData) initWithBytes:signature length:0];
    id v13 = (void *)a1[10];
    a1[10] = v12;
  }
  else
  {
    id v13 = (void *)a1[10];
    a1[10] = 0;
  }

  return 1;
}

void sub_100155130(uint64_t a1, uint64_t a2)
{
  if (a2 && *(_DWORD *)(a2 + 12) != 1004)
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      _NRLogWithArgs();
    }
  }
}

void sub_1001551F4(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    id v4 = a3;
    if (v4[3] != 1004)
    {
      id v5 = v4;
      sub_100152200((uint64_t)v4, a2);
      id v4 = v5;
    }
  }
}

void sub_100155254(id a1)
{
  if (MGGetBoolAnswer())
  {
    if (objc_opt_class()) {
      byte_1001F4DA8 = 1;
    }
  }
}

uint64_t sub_100155294(uint64_t result)
{
  if (result) {
    return sub_1000215D0(*(void *)(result + 128));
  }
  return result;
}

void sub_1001552AC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (a1)
  {
    id v4 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v4);

    if (([*(id *)(a1 + 88) isEqual:v5] & 1) == 0)
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        _NRLogWithArgs();
      }
      objc_storeStrong((id *)(a1 + 88), a2);
    }
  }
}

uint64_t sub_1001553E4(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = [a1 hostname];
  self;
  if (qword_1001F47E8 != -1) {
    dispatch_once(&qword_1001F47E8, &stru_1001C5EF8);
  }
  id v3 = (id)qword_1001F47E0;
  id v4 = @"62743";
  if (!v3) {
    id v4 = 0;
  }
  id v5 = v4;
  uint64_t v1 = +[NWAddressEndpoint endpointWithHostname:v2 port:v5];

  return v1;
}

void sub_1001554AC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = a1[3];
    dispatch_assert_queue_V2(v7);

    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v51 objects:v56 count:16];
    if (v9)
    {
      id v10 = v9;
      id v11 = 0;
      uint64_t v12 = *(void *)v52;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v52 != v12) {
            objc_enumerationMutation(v8);
          }
          id v14 = (void *)sub_1001553E4(*(void **)(*((void *)&v51 + 1) + 8 * i));
          if (v14)
          {
            if (!v11) {
              id v11 = objc_alloc_init((Class)NSMutableArray);
            }
            [v11 addObject:v14];
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v51 objects:v56 count:16];
      }
      while (v10);
    }
    else
    {
      id v11 = 0;
    }

    uint64_t v15 = a1[13];
    if (v15) {
      uint64_t v15 = (void *)v15[9];
    }
    id v16 = v15;
    id v17 = [v16 objectForKeyedSubscript:v6];

    if (!v17
      || (id v18 = [objc_alloc((Class)NSSet) initWithArray:v11],
          id v19 = [objc_alloc((Class)NSSet) initWithArray:v17],
          unsigned __int8 v20 = [v18 isEqualToSet:v19],
          v19,
          v18,
          (v20 & 1) == 0))
    {
      long long v21 = sub_10013DC5C((uint64_t)NRDLocalDevice, v6);
      id v46 = v17;
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        id v41 = v11;
        id v42 = v21;
        uint64_t v39 = 600;
        uint64_t v40 = v17;
        long long v37 = "";
        long long v38 = "-[NRLinkManagerWiFi setPeerWiFiEndpoints:forNRUUID:]";
        _NRLogWithArgs();
      }
      id v22 = a1[13];
      long long v23 = v22;
      id v45 = v5;
      id v43 = v21;
      if (v22) {
        long long v24 = (void *)*((void *)v22 + 9);
      }
      else {
        long long v24 = 0;
      }
      id v25 = v24;
      [v25 setObject:v11 forKeyedSubscript:v6];

      uint64_t v44 = (uint64_t)a1;
      id v26 = [a1[19] copy];
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      id v27 = v26;
      id v28 = [v27 countByEnumeratingWithState:&v47 objects:v55 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v48;
        do
        {
          for (uint64_t j = 0; j != v29; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v48 != v30) {
              objc_enumerationMutation(v27);
            }
            long long v32 = *(void **)(*((void *)&v47 + 1) + 8 * (void)j);
            if (objc_msgSend(v32, "subtype", v37, v38, v39, v40, v41, v42, v43) == 101)
            {
              long long v33 = [v32 remoteOuterEndpoint];
              unsigned __int8 v34 = [v11 containsObject:v33];

              if ((v34 & 1) == 0)
              {
                long long v35 = [v32 nrUUID];
                unsigned int v36 = [v35 isEqual:v6];

                if (v36) {
                  [v32 cancelWithReason:@"Peer Wi-Fi endpoint changed"];
                }
              }
            }
          }
          id v29 = [v27 countByEnumeratingWithState:&v47 objects:v55 count:16];
        }
        while (v29);
      }

      sub_10014E44C(v44);
      id v5 = v45;
      id v17 = v46;
    }
  }
}

id sub_1001558C0(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v4);

    id v5 = *(void **)(a1 + 104);
    if (v5) {
      id v5 = (void *)v5[9];
    }
    id v6 = v5;
    id v7 = [v6 objectForKeyedSubscript:v3];

    id v8 = [v7 firstObject];
  }
  else
  {
    id v8 = 0;
  }

  return v8;
}

void sub_10015596C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = a1[3];
    dispatch_assert_queue_V2(v7);

    id v8 = (void *)sub_1001553E4(v5);
    id v9 = a1[14];
    if (v9) {
      id v9 = (void *)v9[9];
    }
    id v10 = v9;
    id v11 = [v10 objectForKeyedSubscript:v6];
    uint64_t v12 = [v11 firstObject];

    if (!v12 || ([v12 isEqual:v8] & 1) == 0)
    {
      uint64_t v39 = v12;
      id v13 = sub_10013DC5C((uint64_t)NRDLocalDevice, v6);
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DC0 != -1) {
          dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
        }
        id v14 = (void *)qword_1001F4DB8;
        uint64_t v15 = a1[14];
        id v16 = v14;
        id v17 = v8;
        if (v15) {
          id v18 = (void *)v15[9];
        }
        else {
          id v18 = 0;
        }
        id v19 = v18;
        [v19 objectForKeyedSubscript:v6];
        unsigned int v36 = v17;
        long long v37 = v13;
        v35 = uint64_t v34 = 1054;
        long long v32 = "";
        long long v33 = "-[NRLinkManagerWiFi setPeerAWDLEndpoint:nrUUID:]";
        _NRLogWithArgs();

        id v8 = v17;
      }
      if (v8)
      {
        id v46 = v8;
        unsigned __int8 v20 = +[NSArray arrayWithObjects:&v46 count:1];
      }
      else
      {
        unsigned __int8 v20 = 0;
      }
      long long v21 = a1[14];
      if (v21) {
        long long v21 = (void *)v21[9];
      }
      long long v38 = v13;
      id v22 = v21;
      [v22 setObject:v20 forKeyedSubscript:v6];

      uint64_t v40 = v8;
      if (v8) {

      }
      id v23 = [a1[19] copy:v32, v33, v34, v35, v36, v37];
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      id v24 = v23;
      id v25 = [v24 countByEnumeratingWithState:&v41 objects:v45 count:16];
      if (v25)
      {
        id v26 = v25;
        uint64_t v27 = *(void *)v42;
        do
        {
          for (uint64_t i = 0; i != v26; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v42 != v27) {
              objc_enumerationMutation(v24);
            }
            id v29 = *(void **)(*((void *)&v41 + 1) + 8 * i);
            if ([v29 subtype] == 102)
            {
              uint64_t v30 = [v29 nrUUID];
              unsigned int v31 = [v30 isEqual:v6];

              if (v31) {
                [v29 cancelWithReason:@"Peer AWDL endpoint changed"];
              }
            }
          }
          id v26 = [v24 countByEnumeratingWithState:&v41 objects:v45 count:16];
        }
        while (v26);
      }

      sub_10014D43C((uint64_t)a1);
      uint64_t v12 = v39;
      id v8 = v40;
    }
  }
  else
  {
    id v8 = v5;
  }
}

void sub_100155CF0(uint64_t a1, int a2, void *a3)
{
  id v7 = a3;
  if (a1)
  {
    id v5 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v5);

    if (*(_DWORD *)(a1 + 12) == 1003)
    {
      unsigned int v6 = [*(id *)(a1 + 208) containsObject:v7];
      if (a2)
      {
        if (v6) {
          goto LABEL_9;
        }
        [*(id *)(a1 + 208) addObject:v7];
        goto LABEL_8;
      }
      if (v6)
      {
        [*(id *)(a1 + 208) removeObject:v7];
        if (![*(id *)(a1 + 208) count]) {
LABEL_8:
        }
          sub_100155DC0(a1);
      }
    }
  }
LABEL_9:
}

void sub_100155DC0(uint64_t a1)
{
  if (a1) {
    id v2 = *(void **)(a1 + 24);
  }
  else {
    id v2 = 0;
  }
  id v3 = v2;
  dispatch_assert_queue_V2(v3);

  if (qword_1001F4DC0 != -1) {
    dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    uint64_t v50 = 1766;
    long long v48 = "";
    long long v49 = "-[NRLinkManagerWiFi updateWiFiState]";
    _NRLogWithArgs();
  }
  id v4 = [*(id *)(a1 + 208) count:v48 v49:v50];
  id v5 = *(void **)(a1 + 192);
  if (v4)
  {
    if (v5) {
      goto LABEL_19;
    }
    unsigned int v6 = +[CWFActivity activityWithType:1 reason:@"Terminus Background"];
    objc_storeStrong((id *)(a1 + 192), v6);
    id v7 = *(id *)(a1 + 176);
    id v8 = *(id *)(a1 + 24);
    objc_initWeak(&location, (id)a1);
    if (qword_1001F4DC8 != -1) {
      dispatch_once(&qword_1001F4DC8, &stru_1001C8A10);
    }
    id v9 = (void *)qword_1001F4DD0;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001566AC;
    block[3] = &unk_1001C88E0;
    id v10 = v7;
    id v71 = v10;
    id v11 = v6;
    id v72 = v11;
    id v12 = v8;
    id v73 = v12;
    id v13 = v9;
    objc_copyWeak(&v74, &location);
    dispatch_async(v13, block);

    [(id)a1 reportEvent:11001 details:@"Background"];
    objc_destroyWeak(&v74);

    objc_destroyWeak(&location);
  }
  else
  {
    if (!v5) {
      goto LABEL_19;
    }
    id v14 = v5;
    uint64_t v15 = *(void **)(a1 + 192);
    *(void *)(a1 + 192) = 0;

    id v16 = *(id *)(a1 + 176);
    if (qword_1001F4DC8 != -1) {
      dispatch_once(&qword_1001F4DC8, &stru_1001C8A10);
    }
    id v17 = qword_1001F4DD0;
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v67[2] = sub_1001567DC;
    v67[3] = &unk_1001C8840;
    id v68 = v16;
    id v69 = v14;
    id v11 = v14;
    id v10 = v16;
    dispatch_async(v17, v67);
    [(id)a1 reportEvent:11002 details:@"Background"];

    id v12 = v68;
  }

LABEL_19:
  id v18 = *(void **)(a1 + 200);
  if (*(unsigned char *)(a1 + 34))
  {
    if (v18) {
      goto LABEL_29;
    }
    id v19 = +[CWFActivity activityWithType:3 reason:@"Terminus Direct-to-Cloud"];
    objc_storeStrong((id *)(a1 + 200), v19);
    id v20 = *(id *)(a1 + 176);
    id v21 = *(id *)(a1 + 24);
    objc_initWeak(&location, (id)a1);
    if (qword_1001F4DC8 != -1) {
      dispatch_once(&qword_1001F4DC8, &stru_1001C8A10);
    }
    id v22 = (void *)qword_1001F4DD0;
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472;
    void v62[2] = sub_1001567E8;
    v62[3] = &unk_1001C88E0;
    id v23 = v20;
    id v63 = v23;
    id v24 = v19;
    id v64 = v24;
    id v25 = v21;
    id v65 = v25;
    id v26 = v22;
    objc_copyWeak(&v66, &location);
    dispatch_async(v26, v62);

    [(id)a1 reportEvent:11001 details:@"Direct-to-Cloud"];
    objc_destroyWeak(&v66);

    objc_destroyWeak(&location);
  }
  else
  {
    if (!v18) {
      goto LABEL_29;
    }
    id v27 = v18;
    id v28 = *(void **)(a1 + 200);
    *(void *)(a1 + 200) = 0;

    id v29 = *(id *)(a1 + 176);
    if (qword_1001F4DC8 != -1) {
      dispatch_once(&qword_1001F4DC8, &stru_1001C8A10);
    }
    uint64_t v30 = qword_1001F4DD0;
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472;
    v59[2] = sub_100156918;
    v59[3] = &unk_1001C8840;
    id v60 = v29;
    id v61 = v27;
    id v24 = v27;
    id v23 = v29;
    dispatch_async(v30, v59);
    [(id)a1 reportEvent:11002 details:@"Direct-to-Cloud"];

    id v25 = v60;
  }

LABEL_29:
  unsigned int v31 = *(id *)(a1 + 24);
  dispatch_assert_queue_V2(v31);

  if (*(void *)(a1 + 192))
  {
    if (*(void *)(a1 + 248) != 1)
    {
      uint64_t v32 = 1;
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v33 = *(void *)(a1 + 200);
    if (v33) {
      uint64_t v34 = 3;
    }
    else {
      uint64_t v34 = 0;
    }
    if (v34 != *(void *)(a1 + 248))
    {
      if (!v33)
      {
        long long v43 = *(void **)(a1 + 184);
        if (!v43)
        {
          uint64_t v32 = 0;
          goto LABEL_47;
        }
        id v44 = v43;
        id v45 = *(void **)(a1 + 184);
        *(void *)(a1 + 184) = 0;

        id v46 = *(id *)(a1 + 176);
        if (qword_1001F4DC8 != -1) {
          dispatch_once(&qword_1001F4DC8, &stru_1001C8A10);
        }
        long long v47 = qword_1001F4DD0;
        v56[0] = _NSConcreteStackBlock;
        v56[1] = 3221225472;
        v56[2] = sub_100156924;
        v56[3] = &unk_1001C8840;
        id v57 = v46;
        id v58 = v44;
        id v40 = v44;
        id v39 = v46;
        dispatch_async(v47, v56);
        [(id)a1 reportEvent:11002 details:@"WoW"];

        uint64_t v32 = 0;
        id v41 = v57;
        goto LABEL_46;
      }
      uint64_t v32 = 3;
LABEL_38:
      if (*(void *)(a1 + 184))
      {
LABEL_47:
        *(void *)(a1 + 24_Block_object_dispose(&STACK[0x260], 8) = v32;
        goto LABEL_48;
      }
      long long v35 = +[CWFActivity activityWithType:4 reason:@"Terminus WoW"];
      objc_storeStrong((id *)(a1 + 184), v35);
      id v36 = *(id *)(a1 + 176);
      id v37 = *(id *)(a1 + 24);
      objc_initWeak(&location, (id)a1);
      if (qword_1001F4DC8 != -1) {
        dispatch_once(&qword_1001F4DC8, &stru_1001C8A10);
      }
      long long v38 = (void *)qword_1001F4DD0;
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472;
      v51[2] = sub_100156930;
      void v51[3] = &unk_1001C88E0;
      id v39 = v36;
      id v52 = v39;
      id v40 = v35;
      id v53 = v40;
      id v41 = v37;
      id v54 = v41;
      long long v42 = v38;
      objc_copyWeak(&v55, &location);
      dispatch_async(v42, v51);

      [(id)a1 reportEvent:11001 details:@"WoW"];
      objc_destroyWeak(&v55);

      objc_destroyWeak(&location);
LABEL_46:

      goto LABEL_47;
    }
  }
LABEL_48:
  sub_100156A60((id)a1);
}

void sub_100156688(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1001566AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v12 = 0;
  unsigned __int8 v4 = [v2 beginActivity:v3 error:&v12];
  id v5 = v12;
  if ((v4 & 1) == 0)
  {
    unsigned int v6 = *(NSObject **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10015727C;
    block[3] = &unk_1001C88B8;
    objc_copyWeak(&v11, (id *)(a1 + 56));
    id v10 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
    id v7 = sub_10014E0F0();
    LOBYTE(v6) = _NRLogIsLevelEnabled();

    if (v6)
    {
      id v8 = sub_10014E0F0();
      _NRLogWithArgs();
    }
    objc_destroyWeak(&v11);
  }
}

void sub_1001567C8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1001567DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) endActivity:*(void *)(a1 + 40)];
}

void sub_1001567E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v12 = 0;
  unsigned __int8 v4 = [v2 beginActivity:v3 error:&v12];
  id v5 = v12;
  if ((v4 & 1) == 0)
  {
    unsigned int v6 = *(NSObject **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100157210;
    block[3] = &unk_1001C88B8;
    objc_copyWeak(&v11, (id *)(a1 + 56));
    id v10 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
    id v7 = sub_10014E0F0();
    LOBYTE(v6) = _NRLogIsLevelEnabled();

    if (v6)
    {
      id v8 = sub_10014E0F0();
      _NRLogWithArgs();
    }
    objc_destroyWeak(&v11);
  }
}

void sub_100156904(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_100156918(uint64_t a1)
{
  return [*(id *)(a1 + 32) endActivity:*(void *)(a1 + 40)];
}

id sub_100156924(uint64_t a1)
{
  return [*(id *)(a1 + 32) endActivity:*(void *)(a1 + 40)];
}

void sub_100156930(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v12 = 0;
  unsigned __int8 v4 = [v2 beginActivity:v3 error:&v12];
  id v5 = v12;
  if ((v4 & 1) == 0)
  {
    unsigned int v6 = *(NSObject **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001571A4;
    block[3] = &unk_1001C88B8;
    objc_copyWeak(&v11, (id *)(a1 + 56));
    id v10 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
    id v7 = sub_10014E0F0();
    LOBYTE(v6) = _NRLogIsLevelEnabled();

    if (v6)
    {
      id v8 = sub_10014E0F0();
      _NRLogWithArgs();
    }
    objc_destroyWeak(&v11);
  }
}

void sub_100156A4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100156A60(id val)
{
  uint64_t v2 = (void *)(*((void *)val + 32) + 1);
  *((void *)val + 32) = v2;
  objc_initWeak(&location, val);
  dispatch_time_t v3 = dispatch_time(0, 500000000);
  unsigned __int8 v4 = *((id *)val + 3);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100156B4C;
  block[3] = &unk_1001C8890;
  objc_copyWeak(v6, &location);
  v6[1] = v2;
  dispatch_after(v3, v4, block);

  objc_destroyWeak(v6);
  objc_destroyWeak(&location);
}

void sub_100156B4C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  dispatch_time_t v3 = WeakRetained;
  if (WeakRetained && *((_DWORD *)WeakRetained + 3) == 1003 && WeakRetained[32] == *(id *)(a1 + 40))
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    unsigned __int8 v4 = [WeakRetained[28] allValues];
    id v5 = [v4 countByEnumeratingWithState:&v44 objects:v49 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v45 != v8) {
            objc_enumerationMutation(v4);
          }
          v7 |= (unint64_t)[*(id *)(*((void *)&v44 + 1) + 8 * i) unsignedLongLongValue];
        }
        id v6 = [v4 countByEnumeratingWithState:&v44 objects:v49 count:16];
      }
      while (v6);
    }
    else
    {
      uint64_t v7 = 0;
    }

    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (!_NRLogIsLevelEnabled())
    {
LABEL_47:
      id v19 = objc_alloc_init((Class)NSMutableSet);
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id v20 = [v3[29] allValues];
      id v21 = [v20 countByEnumeratingWithState:&v40 objects:v48 count:16];
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v41;
        do
        {
          for (uint64_t j = 0; j != v22; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v41 != v23) {
              objc_enumerationMutation(v20);
            }
            [v19 addObjectsFromArray:*(void *)(*((void *)&v40 + 1) + 8 * (void)j), v35, v37, v38, v39];
          }
          id v22 = [v20 countByEnumeratingWithState:&v40 objects:v48 count:16];
        }
        while (v22);
      }

      id v25 = v3[31];
      if (v7)
      {
        if (!v25)
        {
LABEL_62:

          goto LABEL_63;
        }
      }
      else if (v25)
      {
        id v26 = objc_alloc((Class)NSString);
        uint64_t v36 = (uint64_t)v3[31];
        id v27 = [v26 initWithFormat:@"Reporting WiFi client type %zd with no reason"];
        sub_100115AB0(@"NRLinkManagerWiFi", @"PowerLog", v27, 0, 0, v28, v29, v30, v36);
      }
      id v31 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v32 = +[NSNumber numberWithInteger:v3[31]];
      [v31 setObject:v32 forKeyedSubscript:@"WiFiClientType"];

      uint64_t v33 = +[NSNumber numberWithBool:v3[23] != 0];
      [v31 setObject:v33 forKeyedSubscript:@"WiFiWoWState"];

      uint64_t v34 = +[NSNumber numberWithUnsignedLongLong:v7];
      [v31 setObject:v34 forKeyedSubscript:@"WiFiAssertionReason"];

      [v31 setObject:v19 forKeyedSubscript:@"WiFiAssertionClients"];
      if (([v3[30] isEqualToDictionary:v31] & 1) == 0)
      {
        sub_100114390(@"NetworkRelay Wi-Fi Assertion", v31);
        objc_storeStrong(v3 + 30, v31);
      }

      goto LABEL_62;
    }
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    id v10 = (id)qword_1001F4DB8;
    id v11 = objc_alloc_init((Class)NSMutableString);
    if ((v7 & 2) != 0)
    {
      id v12 = [objc_alloc((Class)NSString) initWithUTF8String:"RangeExtension"];
      if ([v11 length]) {
        [v11 appendString:@", "];
      }
      [v11 appendString:v12];

      if ((v7 & 4) == 0)
      {
LABEL_19:
        if ((v7 & 8) == 0) {
          goto LABEL_20;
        }
        goto LABEL_31;
      }
    }
    else if ((v7 & 4) == 0)
    {
      goto LABEL_19;
    }
    id v13 = [objc_alloc((Class)NSString) initWithUTF8String:"PreferWiFi"];
    if ([v11 length]) {
      [v11 appendString:@", "];
    }
    [v11 appendString:v13];

    if ((v7 & 8) == 0)
    {
LABEL_20:
      if ((v7 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_34;
    }
LABEL_31:
    id v14 = [objc_alloc((Class)NSString) initWithUTF8String:"LinkRecommendation"];
    if ([v11 length]) {
      [v11 appendString:@", "];
    }
    [v11 appendString:v14];

    if ((v7 & 0x10) == 0)
    {
LABEL_21:
      if ((v7 & 0x20) == 0) {
        goto LABEL_22;
      }
      goto LABEL_37;
    }
LABEL_34:
    id v15 = [objc_alloc((Class)NSString) initWithUTF8String:"ForcedWoW"];
    if ([v11 length]) {
      [v11 appendString:@", "];
    }
    [v11 appendString:v15];

    if ((v7 & 0x20) == 0)
    {
LABEL_22:
      if ((v7 & 0x40) == 0) {
        goto LABEL_23;
      }
      goto LABEL_40;
    }
LABEL_37:
    id v16 = [objc_alloc((Class)NSString) initWithUTF8String:"PrimaryLink"];
    if ([v11 length]) {
      [v11 appendString:@", "];
    }
    [v11 appendString:v16];

    if ((v7 & 0x40) == 0)
    {
LABEL_23:
      if ((v7 & 0x80) == 0)
      {
LABEL_46:
        uint64_t v38 = 1505;
        id v39 = v11;
        long long v35 = "";
        id v37 = "-[NRLinkManagerWiFi reportToPowerlog]_block_invoke";
        _NRLogWithArgs();

        goto LABEL_47;
      }
LABEL_43:
      id v18 = [objc_alloc((Class)NSString) initWithUTF8String:"AutoLinkUpgrade"];
      if ([v11 length]) {
        [v11 appendString:@", "];
      }
      [v11 appendString:v18];

      goto LABEL_46;
    }
LABEL_40:
    id v17 = [objc_alloc((Class)NSString) initWithUTF8String:"DirectToCloud"];
    if ([v11 length]) {
      [v11 appendString:@", "];
    }
    [v11 appendString:v17];

    if ((v7 & 0x80) == 0) {
      goto LABEL_46;
    }
    goto LABEL_43;
  }
LABEL_63:
}

void sub_1001571A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    dispatch_time_t v3 = (void *)WeakRetained[23];
    if (v3 == *(void **)(a1 + 32))
    {
      WeakRetained[23] = 0;
      unsigned __int8 v4 = WeakRetained;

      id WeakRetained = v4;
    }
  }
}

void sub_100157210(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    dispatch_time_t v3 = (void *)WeakRetained[25];
    if (v3 == *(void **)(a1 + 32))
    {
      WeakRetained[25] = 0;
      unsigned __int8 v4 = WeakRetained;

      id WeakRetained = v4;
    }
  }
}

void sub_10015727C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    dispatch_time_t v3 = (void *)WeakRetained[24];
    if (v3 == *(void **)(a1 + 32))
    {
      WeakRetained[24] = 0;
      unsigned __int8 v4 = WeakRetained;

      id WeakRetained = v4;
    }
  }
}

void sub_1001572E8(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v9 = v3;
    if (v3)
    {
      unsigned __int8 v4 = (void *)a1[28];
      if (v4) {
        [v4 setObject:0 forKeyedSubscript:v9];
      }
      id v5 = (void *)a1[29];
      if (v5) {
        [v5 setObject:0 forKeyedSubscript:v9];
      }
      sub_100156A60(a1);
      goto LABEL_8;
    }
    id v6 = sub_10014E0F0();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    id v3 = 0;
    if (IsLevelEnabled)
    {
      id v8 = sub_10014E0F0();
      _NRLogWithArgs();

LABEL_8:
      id v3 = v9;
    }
  }
}

void sub_1001573C0(id *a1, uint64_t a2, void *a3, void *a4)
{
  id v18 = a3;
  id v7 = a4;
  if (a1)
  {
    id v8 = v18;
    if (v18)
    {
      if (!a1[28])
      {
        id v9 = objc_alloc_init((Class)NSMutableDictionary);
        id v10 = a1[28];
        a1[28] = v9;

        id v8 = v18;
      }
      if (a1[29])
      {
        if (a2)
        {
LABEL_7:
          id v11 = +[NSNumber numberWithUnsignedLongLong:a2];
          [a1[28] setObject:v11 forKeyedSubscript:v18];

          id v12 = v7;
LABEL_10:
          [a1[29] setObject:v12 forKeyedSubscript:v18];
          sub_100156A60(a1);
          goto LABEL_11;
        }
      }
      else
      {
        id v13 = objc_alloc_init((Class)NSMutableDictionary);
        id v14 = a1[29];
        a1[29] = v13;

        id v8 = v18;
        if (a2) {
          goto LABEL_7;
        }
      }
      [a1[28] setObject:0 forKeyedSubscript:v8];
      id v12 = 0;
      goto LABEL_10;
    }
    id v15 = sub_10014E0F0();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v17 = sub_10014E0F0();
      _NRLogWithArgs();
    }
  }
LABEL_11:
}

void sub_10015754C(uint64_t a1, char a2)
{
  if (a1)
  {
    unsigned __int8 v4 = *(id *)(a1 + 24);
    dispatch_assert_queue_V2(v4);

    if (*(void *)(a1 + 216))
    {
      *(unsigned char *)(a1 + 34) = a2;
      sub_100155DC0(a1);
    }
  }
}

BOOL sub_1001575D0(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(id *)(result + 24);
    dispatch_assert_queue_V2(v2);

    return *(_DWORD *)(v1 + 40) > 0;
  }
  return result;
}

uint64_t sub_100157620(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(id *)(result + 24);
    dispatch_assert_queue_V2(v2);

    *(_DWORD *)(v1 + 48) += *(_DWORD *)(v1 + 40);
    sub_10015172C(v1, 0);
    *(unsigned char *)(v1 + 33) = 0;
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    id result = _NRLogIsLevelEnabled();
    if (result)
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      return _NRLogWithArgs();
    }
  }
  return result;
}

BOOL sub_10015774C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(id *)(a1 + 24);
  dispatch_assert_queue_V2(v2);

  uint64_t v16 = 0;
  id v17 = &v16;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  id v3 = *(id *)(a1 + 176);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _OWORD v13[2] = sub_1001579A4;
  v13[3] = &unk_1001C8908;
  id v15 = &v16;
  id v4 = v3;
  id v14 = v4;
  if (sub_100151CF0((uint64_t)NRLinkManagerWiFi, v13))
  {
    id v10 = sub_10014E0F0();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v12 = sub_10014E0F0();
      _NRLogWithArgs();
    }
    BOOL v8 = 0;
  }
  else
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    id v5 = (id)qword_1001F4DB8;
    char v6 = _NRLogIsLevelEnabled();

    if (v6)
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v7 = (id)qword_1001F4DB8;
      _NRLogWithArgs();
    }
    BOOL v8 = *((unsigned char *)v17 + 24) != 0;
  }

  _Block_object_dispose(&v16, 8);
  return v8;
}

void sub_10015798C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001579A4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) powerOn];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1001579D8(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v2 = [*(id *)(a1 + 32) interfaceNames];
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      char v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        if ([*(id *)(*((void *)&v10 + 1) + 8 * (void)v6) isEqualToString:*(void *)(a1 + 40)])
        {
          uint64_t v7 = [*(id *)(a1 + 32) SSID];
          uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
          id v9 = *(void **)(v8 + 40);
          *(void *)(v8 + 40) = v7;
        }
        char v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_100157B00(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) countryCode];
  id v3 = v2;
  if (v2 && [v2 compare:@"XZ" options:1])
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
  else
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    id obj = *(id *)(v6 + 40);
    unsigned __int8 v7 = [v4 setCompanionCountryCode:v5 error:&obj];
    objc_storeStrong((id *)(v6 + 40), obj);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v7;
  }
}

uint64_t sub_100157BAC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) countryCode];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

id sub_100157BF8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    BOOL v4 = *(unsigned char *)(v3 + 37) != 0;
    BOOL v5 = *(unsigned __int8 *)(v3 + 38) != 0;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
  }
  return [v2 didUpdatePHSState:v4 llphsActive:v5];
}

void sub_100157C40(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) NANData];
  uint64_t v2 = [v5 interfaceName];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  BOOL v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100157CA8(uint64_t a1)
{
  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v2 = (id)qword_1001F4A18;
  uint64_t v3 = v2;
  if (v2) {
    BOOL v4 = (void *)*((void *)v2 + 12);
  }
  else {
    BOOL v4 = 0;
  }
  id v5 = v4;
  int v6 = sub_10006760C((uint64_t)v5, 0);

  if (v6 != (*(unsigned char *)(a1 + 33) != 0))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 160));
    unsigned int v8 = [WeakRetained preferWiFiP2PRequestUpdated];

    if (v8) {
      *(unsigned char *)(a1 + 33) = v6;
    }
  }
}

void sub_100157D90(uint64_t a1, uint64_t a2)
{
  [(id)a1 reportEvent:2014];
  id location = 0;
  p_id location = &location;
  uint64_t v35 = 0x3032000000;
  uint64_t v36 = sub_100151DC4;
  id v37 = sub_100151DD4;
  id v38 = 0;
  [@"awdl0" UTF8String];
  BOOL v4 = (void *)nw_interface_create_with_name();
  if (v4 && nw_interface_get_subtype() == 1002)
  {
    id v5 = p_location[5];
    p_location[5] = @"awdl0";
  }
  else
  {
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    id v6 = (id)qword_1001F4DB8;
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v8 = (id)qword_1001F4DB8;
      uint64_t v26 = 2229;
      _NRLogWithArgs();
    }
    id v9 = *(id *)(a1 + 176);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    void v30[2] = sub_10015831C;
    v30[3] = &unk_1001C8908;
    uint64_t v32 = &location;
    id v5 = v9;
    id v31 = v5;
    if (sub_100151CF0((uint64_t)NRLinkManagerWiFi, v30))
    {
      id v17 = sub_10014E0F0();
      char v18 = _NRLogIsLevelEnabled();

      if (v18)
      {
        id v19 = sub_10014E0F0();
        uint64_t v26 = 2236;
        _NRLogWithArgs();
      }
      goto LABEL_29;
    }
  }
  if (p_location[5])
  {
    long long v10 = [NRSCDInterfaceConfig alloc];
    long long v11 = sub_10002100C((id *)&v10->super.isa, p_location[5], 1);
    long long v12 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = v11;

    long long v13 = *(id *)(a1 + 112);
    if (v13)
    {
      int v14 = v13[3];

      if (v14)
      {
        sub_100151ECC(a1);

        _Block_object_dispose(&location, 8);
        [(id)a1 reportEvent:2016];
        return;
      }
    }
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    id v20 = (id)qword_1001F4DB8;
    int v21 = _NRLogIsLevelEnabled();

    if (v21)
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      id v5 = (id)qword_1001F4DB8;
      _NRLogWithArgs();
      goto LABEL_29;
    }
  }
  else
  {
    id v15 = sub_10014E0F0();
    int v16 = _NRLogIsLevelEnabled();

    if (v16)
    {
      id v5 = sub_10014E0F0();
      uint64_t v26 = 2242;
      _NRLogWithArgs();
LABEL_29:
    }
  }

  _Block_object_dispose(&location, 8);
  sub_1001582A4(a1);
  if ((2 * a2) >= 0x12C) {
    uint64_t v22 = 300;
  }
  else {
    uint64_t v22 = (2 * a2);
  }
  [a1 reportEvent:2015 detailsFormat:@"Retry in %us (attempt: %u)", v22, a2, v26];
  objc_initWeak(&location, (id)a1);
  dispatch_time_t v23 = dispatch_time(0, 1000000000 * v22);
  if (a1) {
    id v24 = *(void **)(a1 + 24);
  }
  else {
    id v24 = 0;
  }
  id v25 = v24;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001582B8;
  block[3] = &unk_1001C8980;
  objc_copyWeak(&v28, &location);
  int v29 = a2;
  dispatch_after(v23, v25, block);

  objc_destroyWeak(&v28);
  objc_destroyWeak(&location);
}

void sub_100158288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001582A4(uint64_t a1)
{
}

void sub_1001582B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && WeakRetained[3] != 1004)
  {
    id v2 = WeakRetained;
    sub_100157D90();
    id WeakRetained = v2;
  }
}

void sub_10015831C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) AWDL];
  uint64_t v2 = [v5 interfaceName];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  BOOL v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100158384(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[9];
    if (v3)
    {
      BOOL v4 = v3;
      id v5 = v2[9];
      id v6 = [v5 count];

      if (v6)
      {
        id v7 = v2[9];
        id v8 = [v7 allKeys];
        id v9 = [v8 copy];

        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        id v10 = v9;
        id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v20;
          do
          {
            for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v20 != v13) {
                objc_enumerationMutation(v10);
              }
              int v16 = *(void **)(*((void *)&v19 + 1) + 8 * i);
              id v17 = sub_10013DD58((uint64_t)NRDLocalDevice, v16, 0);
              char v18 = v17;
              if (!v17 || !v17[9])
              {
                id v15 = v2[9];
                [v15 setObject:0 forKeyedSubscript:v16];
              }
            }
            id v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
          }
          while (v12);
        }
      }
    }
  }
}

void sub_100158534(id *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[3];
    dispatch_assert_queue_V2(v2);

    id v15 = a1;
    id v3 = [a1[19] copy];
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id obj = v3;
    id v4 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v6) {
            objc_enumerationMutation(obj);
          }
          id v9 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          id v10 = [v9 nrUUID];
          id v11 = sub_10013DC5C((uint64_t)NRDLocalDevice, v10);

          if (!v11 || !v11[9])
          {
            CFStringRef v8 = @"Device has been disabled %@";
LABEL_7:
            [v9 cancelWithReason:v8, v11];
            goto LABEL_8;
          }
          id WeakRetained = objc_loadWeakRetained(v15 + 2);
          uint64_t v13 = [v9 nrUUID];
          unsigned int v14 = [WeakRetained perpetualStandaloneMeadowEnabledForNRUUID:v13];

          CFStringRef v8 = @"Perpetual standalone Meadow mode enabled for %@";
          if (v14) {
            goto LABEL_7;
          }
LABEL_8:
        }
        id v5 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
      }
      while (v5);
    }

    if ((sub_10014575C() & 1) == 0) {
      sub_100157620((uint64_t)v15);
    }
    sub_100158384(v15[13]);
    sub_100158384(v15[14]);
    sub_100158384(v15[15]);
    sub_100158384(v15[16]);
    if (qword_1001F4DC0 != -1) {
      dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DC0 != -1) {
        dispatch_once(&qword_1001F4DC0, &stru_1001C89F0);
      }
      _NRLogWithArgs();
    }
    sub_10014E44C((uint64_t)v15);
    sub_10014D43C((uint64_t)v15);
    sub_10014EBE4((uint64_t)v15);
  }
}

void *sub_100158870(void *a1)
{
  if (!a1) {
    return 0;
  }
  v10.receiver = a1;
  v10.super_class = (Class)NRDKeyManager;
  uint64_t v1 = [super init];
  if (!v1)
  {
    id v6 = sub_1001589D8();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v8 = sub_1001589D8();
      _NRLogWithArgs();
    }
    _os_log_pack_size();
    __error();
    uint64_t v9 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v9 = 136446210;
    *(void *)(v9 + 4) = "-[NRDKeyManager initInternal]";
    sub_1001589D8();
    _NRLogAbortWithPack();
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = sub_10015BD9C();
  id v4 = (void *)v2[2];
  v2[2] = v3;

  *((_DWORD *)v2 + 3) = -1;
  *((unsigned char *)v2 + _Block_object_dispose(&STACK[0x260], 8) = 4;
  return v2;
}

id sub_1001589D8()
{
  if (qword_1001F4DF0 != -1) {
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
  }
  uint64_t v0 = (void *)qword_1001F4DE8;

  return v0;
}

void sub_100158A2C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4DE8;
  qword_1001F4DE8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100158A70()
{
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  uint64_t v0 = (void *)qword_1001F4DD8;

  return v0;
}

void sub_100158AC8(id a1)
{
  os_log_t v1 = sub_100158870([NRDKeyManager alloc]);
  uint64_t v2 = qword_1001F4DD8;
  qword_1001F4DD8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100158B08(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (*(_DWORD *)(a1 + 12) == -1)
  {
    objc_initWeak(&location, (id)a1);
    uint64_t v2 = *(NSObject **)(a1 + 16);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100158D50;
    handler[3] = &unk_1001C8A58;
    objc_copyWeak(&v9, &location);
    if (notify_register_dispatch("com.apple.mobile.keybagd.lock_status", (int *)(a1 + 12), v2, handler))
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      id v3 = (id)qword_1001F4DE8;
      char IsLevelEnabled = _NRLogIsLevelEnabled();

      if ((IsLevelEnabled & 1) == 0) {
        goto LABEL_13;
      }
      if (qword_1001F4DF0 == -1)
      {
LABEL_12:
        id v7 = (id)qword_1001F4DE8;
        _NRLogWithArgs();

LABEL_13:
        sub_100158D90(a1);
        objc_destroyWeak(&v9);
        objc_destroyWeak(&location);
        return;
      }
    }
    else
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      id v5 = (id)qword_1001F4DE8;
      int v6 = _NRLogIsLevelEnabled();

      if (!v6) {
        goto LABEL_13;
      }
      if (qword_1001F4DF0 == -1) {
        goto LABEL_12;
      }
    }
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    goto LABEL_12;
  }
}

void sub_100158D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100158D50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_100158D90((uint64_t)WeakRetained);
}

void sub_100158D90(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    unsigned __int8 v2 = 1;
    *(unsigned char *)(a1 + 10) = 1;
    uint64_t v3 = MKBGetDeviceLockState();
    if (v3)
    {
      sub_100158FD0(a1);
      if (*(unsigned char *)(a1 + 9)) {
        unsigned __int8 v2 = 3;
      }
      else {
        unsigned __int8 v2 = 4;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 9) = 1;
    }
    if (*(unsigned __int8 *)(a1 + 8) == v2)
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        id v15 = (id)qword_1001F4DE8;
        id String = (void *)NRDataProtectionClassCreateString();
        if (v3 >= 8) {
          id v5 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown[%d]", v3];
        }
        else {
          id v5 = *(&off_1001C8AC0 + v3);
        }
        _NRLogWithArgs();
      }
    }
    else
    {
      int v6 = (void *)NRDataProtectionClassCreateString();
      id v7 = (id)NRDataProtectionClassCreateString();
      uint64_t v13 = v7;
      if (v3 >= 8)
      {
        id v7 = [objc_alloc((Class)NSString) initWithFormat:@"Unknown[%d]", v3];
        unsigned int v14 = v7;
      }
      else
      {
        unsigned int v14 = *(&off_1001C8AC0 + v3);
      }
      sub_1001591C8((uint64_t)v7, 5400, @"%@ -> %@ (%@)", v8, v9, v10, v11, v12, (uint64_t)v6);

      *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v2;
      sub_100159248(a1);
    }
  }
}

void sub_100158FD0(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!*(unsigned char *)(a1 + 9))
  {
    int v2 = MKBDeviceUnlockedSinceBoot();
    if (v2)
    {
      if (v2 == 1)
      {
        *(unsigned char *)(a1 + 9) = 1;
      }
      else
      {
        uint64_t v3 = __error();
        if (*v3 == 3)
        {
          if (strerror_r(3, __strerrbuf, 0x80uLL)) {
            __strerrbuf[0] = 0;
          }
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            id v4 = (id)qword_1001F4DE8;
            _NRLogWithArgs();
          }
        }
        else
        {
          if (strerror_r(*v3, __strerrbuf, 0x80uLL)) {
            __strerrbuf[0] = 0;
          }
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            _NRLogWithArgs();
          }
        }
      }
    }
  }
}

void sub_1001591C8(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10 = a3;
  id v11 = [objc_alloc((Class)NSString) initWithFormat:v10 arguments:&a9];

  sub_10012F648(0, a2, &stru_1001C9648, v11);
}

void sub_100159248(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  uint64_t v2 = *(unsigned __int8 *)(a1 + 8);
  if ((v2 | 2) != 3 || (uint64_t v3 = *(void *)(a1 + 32)) == 0)
  {
    int v5 = 0;
    uint64_t v6 = *(void *)(a1 + 24);
    if (!v6) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  (*(void (**)(void))(v3 + 16))();
  id v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  uint64_t v2 = *(unsigned __int8 *)(a1 + 8);
  int v5 = 1;
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, v2);
    LODWORD(v2) = *(unsigned __int8 *)(a1 + 8);
  }
LABEL_7:
  if ((v2 | 2) == 3)
  {
    id v7 = *(void **)(a1 + 40);
    if (v7)
    {
      id v8 = [v7 count];
      sub_1001591C8((uint64_t)v8, 5401, @"(%llu clients)", v9, v10, v11, v12, v13, (uint64_t)v8);
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v14 = *(id *)(a1 + 40);
      id v15 = [v14 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v15)
      {
        id v16 = v15;
        uint64_t v17 = *(void *)v27;
        do
        {
          for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v27 != v17) {
              objc_enumerationMutation(v14);
            }
            (*(void (**)(void))(*(void *)(*((void *)&v26 + 1) + 8 * i) + 16))();
          }
          id v16 = [v14 countByEnumeratingWithState:&v26 objects:v30 count:16];
        }
        while (v16);
      }

      [*(id *)(a1 + 40) removeAllObjects];
      long long v19 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0;

      LODWORD(v2) = *(unsigned __int8 *)(a1 + 8);
      int v5 = 1;
    }
    if (v2 == 1 && (long long v20 = *(void **)(a1 + 48)) != 0)
    {
      unint64_t v21 = 0;
      if ([v20 count])
      {
        do
        {
          if (MKBGetDeviceLockState()) {
            break;
          }
          long long v22 = [*(id *)(a1 + 48) objectAtIndexedSubscript:v21];
          v22[2]();

          ++v21;
        }
        while (v21 < (unint64_t)[*(id *)(a1 + 48) count]);
      }
      id v23 = [*(id *)(a1 + 48) count];
      id v24 = *(void **)(a1 + 48);
      if ((id)v21 == v23)
      {
        [v24 removeAllObjects];
        id v25 = *(void **)(a1 + 48);
        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = 0;
      }
      else
      {
        [v24 removeObjectsInRange:0, v21];
        if ((v5 & 1) == 0) {
          return;
        }
      }
    }
    else if (!v5)
    {
      return;
    }
  }
  else if ((v5 & 1) == 0)
  {
    return;
  }
  if (!*(void *)(a1 + 24) && !*(void *)(a1 + 40) && !*(void *)(a1 + 48)) {
    sub_1001594C8(a1);
  }
}

uint64_t sub_1001594C8(uint64_t a1)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  uint64_t result = *(unsigned int *)(a1 + 12);
  if (result != -1)
  {
    uint32_t v3 = notify_cancel(result);
    *(_DWORD *)(a1 + 12) = -1;
    if (v3)
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      uint64_t result = _NRLogIsLevelEnabled();
      if (result)
      {
        if (qword_1001F4DF0 == -1) {
          return _NRLogWithArgs();
        }
        goto LABEL_14;
      }
    }
    else
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      uint64_t result = _NRLogIsLevelEnabled();
      if (result)
      {
        if (qword_1001F4DF0 == -1) {
          return _NRLogWithArgs();
        }
LABEL_14:
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        return _NRLogWithArgs();
      }
    }
  }
  return result;
}

BOOL sub_100159620(BOOL result)
{
  if (result)
  {
    os_log_t v1 = (unsigned char *)result;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(result + 16));
    if (!v1[10])
    {
      v1[10] = 1;
      if (v1[8] == 4)
      {
        sub_100158FD0((uint64_t)v1);
        if (v1[9])
        {
          v1[8] = 3;
          sub_100159248((uint64_t)v1);
        }
      }
    }
    return (v1[8] & 0xFD) == 1;
  }
  return result;
}

void sub_10015969C(uint64_t a1, void *a2)
{
  id v15 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    if (v15)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
      if (!*(unsigned char *)(a1 + 10))
      {
        *(unsigned char *)(a1 + 10) = 1;
        if (*(unsigned char *)(a1 + 8) == 4)
        {
          sub_100158FD0(a1);
          if (*(unsigned char *)(a1 + 9))
          {
            *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 3;
            sub_100159248(a1);
          }
        }
      }
      uint32_t v3 = v15;
      if ((*(unsigned char *)(a1 + 8) & 0xFD) == 1)
      {
        v15[2]();
      }
      else
      {
        id v4 = *(void **)(a1 + 40);
        if (!v4)
        {
          id v5 = objc_alloc_init((Class)NSMutableArray);
          uint64_t v6 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v5;

          uint32_t v3 = v15;
          id v4 = *(void **)(a1 + 40);
          if (!v4)
          {
            id v11 = sub_1001589D8();
            int IsLevelEnabled = _NRLogIsLevelEnabled();

            if (IsLevelEnabled)
            {
              id v13 = sub_1001589D8();
              _NRLogWithArgs();
            }
            _os_log_pack_size();
            __error();
            uint64_t v14 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v14 = 136446210;
            *(void *)(v14 + 4) = "-[NRDKeyManager runAfterClassCUnlock:]";
            sub_1001589D8();
            _NRLogAbortWithPack();
          }
        }
        id v7 = objc_retainBlock(v3);
        [v4 addObject:v7];

        sub_100158B08(a1);
      }
    }
    else
    {
      id v8 = sub_1001589D8();
      int v9 = _NRLogIsLevelEnabled();

      if (v9)
      {
        id v10 = sub_1001589D8();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_1001598E4(uint64_t a1, void *a2)
{
  uint32_t v3 = a2;
  if (!a1)
  {
LABEL_12:

    return;
  }
  id v15 = v3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!v15)
  {
    id v6 = sub_1001589D8();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    uint32_t v3 = 0;
    if (!IsLevelEnabled) {
      goto LABEL_12;
    }
    id v8 = sub_1001589D8();
    _NRLogWithArgs();

    goto LABEL_11;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!*(unsigned char *)(a1 + 10))
  {
    *(unsigned char *)(a1 + 10) = 1;
    if (*(unsigned char *)(a1 + 8) == 4)
    {
      sub_100158FD0(a1);
      if (*(unsigned char *)(a1 + 9))
      {
        *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 3;
        sub_100159248(a1);
      }
    }
  }
  if ((*(unsigned char *)(a1 + 8) & 0xFD) == 1)
  {
    v15[2]();
LABEL_11:
    uint32_t v3 = v15;
    goto LABEL_12;
  }
  if (!*(void *)(a1 + 32))
  {
    id v4 = objc_retainBlock(v15);
    id v5 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v4;

    goto LABEL_11;
  }
  id v9 = sub_1001589D8();
  int v10 = _NRLogIsLevelEnabled();

  if (v10)
  {
    id v11 = sub_1001589D8();
    _NRLogWithArgs();
  }
  _os_log_pack_size();
  __error();
  uint64_t v12 = _os_log_pack_fill();
  *(_DWORD *)uint64_t v12 = 136446210;
  *(void *)(v12 + 4) = "-[NRDKeyManager runForLocalDeviceAfterClassCUnlock:]";
  sub_1001589D8();
  uint64_t v13 = _NRLogAbortWithPack();
  sub_100159AFC(v13, v14);
}

void sub_100159AFC(uint64_t a1, void *a2)
{
  id v15 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    uint32_t v3 = v15;
    if (v15)
    {
      id v4 = *(void **)(a1 + 48);
      if (!v4)
      {
        id v5 = objc_alloc_init((Class)NSMutableArray);
        id v6 = *(void **)(a1 + 48);
        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = v5;

        uint32_t v3 = v15;
        id v4 = *(void **)(a1 + 48);
        if (!v4)
        {
          id v11 = sub_1001589D8();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v13 = sub_1001589D8();
            _NRLogWithArgs();
          }
          _os_log_pack_size();
          __error();
          uint64_t v14 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v14 = 136446210;
          *(void *)(v14 + 4) = "-[NRDKeyManager runAfterNextClassAUnlock:]";
          sub_1001589D8();
          _NRLogAbortWithPack();
        }
      }
      id v7 = objc_retainBlock(v3);
      [v4 addObject:v7];

      sub_100158B08(a1);
    }
    else
    {
      id v8 = sub_1001589D8();
      int v9 = _NRLogIsLevelEnabled();

      if (v9)
      {
        id v10 = sub_1001589D8();
        _NRLogWithArgs();
      }
    }
  }
}

void sub_100159CDC(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      uint64_t v5 = 415;
      CFStringRef v6 = @"local-identity";
      uint32_t v3 = "";
      id v4 = "-[NRDKeyManager deleteEphemeralLocalIdentityFromKeychain]";
      _NRLogWithArgs();
    }
    v7[0] = kSecClass;
    v7[1] = kSecAttrLabel;
    v8[0] = kSecClassIdentity;
    v8[1] = @"local-identity";
    v7[2] = kSecAttrAccessGroup;
    v7[3] = kSecAttrAccessible;
    void v8[2] = @"com.apple.terminusd.local-identity";
    v8[3] = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 4, v3, v4, v5, v6);
    CFDictionaryRef v1 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    OSStatus v2 = SecItemDelete(v1);
    if (v2 == -25308)
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_31;
      }
      if (qword_1001F4DF0 == -1) {
        goto LABEL_30;
      }
    }
    else if (v2 == -25300)
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_31;
      }
      if (qword_1001F4DF0 == -1) {
        goto LABEL_30;
      }
    }
    else if (v2)
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_31;
      }
      if (qword_1001F4DF0 == -1) {
        goto LABEL_30;
      }
    }
    else
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_31;
      }
      if (qword_1001F4DF0 == -1)
      {
LABEL_30:
        _NRLogWithArgs();
LABEL_31:

        return;
      }
    }
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    goto LABEL_30;
  }
}

uint64_t sub_10015A088(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!a1) {
    goto LABEL_55;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!v7)
  {
    id v23 = sub_1001589D8();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v25 = sub_1001589D8();
      _NRLogWithArgs();

      uint64_t v21 = 0;
      goto LABEL_52;
    }
LABEL_55:
    uint64_t v21 = 0;
    goto LABEL_52;
  }
  if (a4 == 3)
  {
    int v9 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  }
  else
  {
    if (a4 != 4)
    {
      id String = (void *)NRDataProtectionClassCreateString();
      goto LABEL_11;
    }
    int v9 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  }
  CFStringRef v10 = *v9;
  id String = (void *)NRDataProtectionClassCreateString();
  if (!v10)
  {
LABEL_11:
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    id v14 = (id)qword_1001F4DE8;
    int v15 = _NRLogIsLevelEnabled();

    if (v15)
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      id v16 = (id)qword_1001F4DE8;
      _NRLogWithArgs();
    }
    unsigned __int8 v33 = 0;
    goto LABEL_51;
  }
  id v12 = objc_alloc((Class)NSString);
  if (v8) {
    id v13 = [v12 initWithFormat:@"%@/%@/%@/%@", @"com.apple.terminusd", v8, String, v7];
  }
  else {
    id v13 = [v12 initWithFormat:@"%@/%@", @"com.apple.terminusd", v7, v28, v30];
  }
  uint64_t v17 = v13;
  if (qword_1001F4DF0 != -1) {
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    id v31 = String;
    uint64_t v32 = v17;
    uint64_t v29 = 596;
    long long v26 = "";
    long long v27 = "-[NRDKeyManager deleteKeyfromKeychainWithName:nrUUID:dataProtectionClass:]";
    _NRLogWithArgs();
  }
  long long v18 = [v17 dataUsingEncoding:4, v26, v27, v29, v31, v32];
  v34[0] = kSecClass;
  v34[1] = kSecAttrApplicationTag;
  v35[0] = kSecClassKey;
  v35[1] = v18;
  void v34[2] = kSecAttrAccessGroup;
  v35[2] = @"com.apple.terminusd";
  CFDictionaryRef v19 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:3];
  OSStatus v20 = SecItemDelete(v19);
  if (v20 == -25308)
  {
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_49;
    }
    if (qword_1001F4DF0 == -1) {
      goto LABEL_48;
    }
    goto LABEL_57;
  }
  if (v20 == -25300)
  {
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_43;
    }
    if (qword_1001F4DF0 == -1) {
      goto LABEL_42;
    }
    goto LABEL_56;
  }
  if (v20)
  {
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    if (!_NRLogIsLevelEnabled()) {
      goto LABEL_49;
    }
    if (qword_1001F4DF0 == -1)
    {
LABEL_48:
      _NRLogWithArgs();
LABEL_49:
      unsigned __int8 v33 = 0;
      goto LABEL_50;
    }
LABEL_57:
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    goto LABEL_48;
  }
  if (qword_1001F4DF0 != -1) {
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
  }
  if (!_NRLogIsLevelEnabled()) {
    goto LABEL_43;
  }
  if (qword_1001F4DF0 != -1) {
LABEL_56:
  }
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
LABEL_42:
  _NRLogWithArgs();
LABEL_43:
  unsigned __int8 v33 = 1;
LABEL_50:

LABEL_51:
  uint64_t v21 = v33;
LABEL_52:

  return v21;
}

BOOL sub_10015A600(uint64_t a1, void *a2, void *a3, void *a4, int a5, unsigned char *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  if (!a1) {
    goto LABEL_85;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!v11)
  {
    id v37 = sub_1001589D8();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_84;
    }
    goto LABEL_85;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v39 = sub_1001589D8();
    int v40 = _NRLogIsLevelEnabled();

    if (v40)
    {
LABEL_84:
      id v41 = sub_1001589D8();
      _NRLogWithArgs();

      BOOL v35 = 0;
      goto LABEL_80;
    }
LABEL_85:
    BOOL v35 = 0;
    goto LABEL_80;
  }
  if (a6) {
    *a6 = 0;
  }
  if (a5 == 3)
  {
    id v14 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
  }
  else
  {
    if (a5 != 4)
    {
      id String = (void *)NRDataProtectionClassCreateString();
      goto LABEL_30;
    }
    id v14 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  }
  CFStringRef v15 = *v14;
  id String = (void *)NRDataProtectionClassCreateString();
  CFStringRef v56 = v15;
  if (!v15)
  {
LABEL_30:
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    id v26 = (id)qword_1001F4DE8;
    int v27 = _NRLogIsLevelEnabled();

    if (v27)
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      id v28 = (id)qword_1001F4DE8;
      _NRLogWithArgs();
    }
    BOOL v58 = 0;
    goto LABEL_79;
  }
  id v54 = a6;
  id v17 = v12;
  if (v13)
  {
    id v18 = [objc_alloc((Class)NSString) initWithFormat:@"%@/%@/%@", v13, String, v17];

    id v17 = v18;
  }
  if (qword_1001F4DF0 != -1) {
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    id v19 = (id)qword_1001F4DE8;
    id v50 = v17;
    id v52 = [v11 length];
    uint64_t v46 = 650;
    long long v48 = String;
    long long v42 = "";
    long long v44 = "-[NRDKeyManager saveData:toKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]";
    _NRLogWithArgs();
  }
  v63[0] = kSecClass;
  v63[1] = kSecAttrService;
  v64[0] = kSecClassGenericPassword;
  v64[1] = @"com.apple.terminusd";
  v63[2] = kSecAttrAccount;
  void v63[3] = kSecAttrAccessGroup;
  v64[2] = v17;
  void v64[3] = @"com.apple.terminusd";
  uint64_t v20 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v64, v63, 4, v42, v44, v46, v48, v50, v52);
  v61[0] = kSecAttrAccessible;
  v61[1] = kSecValueData;
  v62[0] = v15;
  v62[1] = v11;
  id v57 = v11;
  CFDictionaryRef v21 = +[NSDictionary dictionaryWithObjects:v62 forKeys:v61 count:2];
  id v55 = (void *)v20;
  CFDictionaryRef v22 = (const __CFDictionary *)v20;
  CFDictionaryRef v23 = v21;
  OSStatus v24 = SecItemUpdate(v22, v21);
  if (v24 != -25308)
  {
    if (v24 != -25300)
    {
      if (!v24)
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        id v25 = v55;
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          _NRLogWithArgs();
        }
        BOOL v58 = 1;
        goto LABEL_78;
      }
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      id v25 = v55;
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_64;
      }
      if (qword_1001F4DF0 == -1) {
        goto LABEL_63;
      }
      goto LABEL_86;
    }
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      id v29 = (id)qword_1001F4DE8;
      id v51 = v17;
      id v53 = [v11 length];
      uint64_t v47 = 687;
      long long v49 = String;
      long long v43 = "";
      long long v45 = "-[NRDKeyManager saveData:toKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]";
      _NRLogWithArgs();
    }
    v59[0] = kSecClass;
    v59[1] = kSecAttrService;
    v60[0] = kSecClassGenericPassword;
    v60[1] = @"com.apple.terminusd";
    v59[2] = kSecAttrAccount;
    v59[3] = kSecAttrAccessGroup;
    v60[2] = v17;
    v60[3] = @"com.apple.terminusd";
    void v59[4] = kSecAttrAccessible;
    v59[5] = kSecValueData;
    v60[4] = v56;
    v60[5] = v11;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v60, v59, 6, v43, v45, v47, v49, v51, v53);
    CFDictionaryRef v30 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    OSStatus v31 = SecItemAdd(v30, 0);
    OSStatus v32 = v31;
    if (!v31)
    {
      id v25 = v55;
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (_NRLogIsLevelEnabled())
      {
        CFDictionaryRef v33 = v23;
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        id v34 = (id)qword_1001F4DE8;
        [v57 length];
        _NRLogWithArgs();

        CFDictionaryRef v23 = v33;
      }
      goto LABEL_76;
    }
    id v25 = v55;
    if (v31 == -25308)
    {
      if (v54) {
        unsigned char *v54 = 1;
      }
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_76;
      }
      if (qword_1001F4DF0 == -1)
      {
LABEL_75:
        _NRLogWithArgs();
LABEL_76:
        BOOL v58 = v32 == 0;

        goto LABEL_77;
      }
    }
    else
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_76;
      }
      if (qword_1001F4DF0 == -1) {
        goto LABEL_75;
      }
    }
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    goto LABEL_75;
  }
  if (v54) {
    unsigned char *v54 = 1;
  }
  if (qword_1001F4DF0 != -1) {
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
  }
  id v25 = v55;
  if (!_NRLogIsLevelEnabled()) {
    goto LABEL_64;
  }
  if (qword_1001F4DF0 != -1) {
LABEL_86:
  }
    dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
LABEL_63:
  _NRLogWithArgs();
LABEL_64:
  BOOL v58 = 0;
LABEL_77:
  id v11 = v57;
LABEL_78:

LABEL_79:
  BOOL v35 = v58;
LABEL_80:

  return v35;
}

id sub_10015AF68(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    if (a4 == 3)
    {
      int v9 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
    }
    else
    {
      if (a4 != 4)
      {
        id String = (void *)NRDataProtectionClassCreateString();
        goto LABEL_36;
      }
      int v9 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }
    CFStringRef v10 = *v9;
    id String = (void *)NRDataProtectionClassCreateString();
    if (v10)
    {
      id v12 = v7;
      if (v8)
      {
        id v13 = [objc_alloc((Class)NSString) initWithFormat:@"%@/%@/%@", v8, String, v12];

        id v12 = v13;
      }
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        OSStatus v31 = String;
        id v32 = v12;
        uint64_t v29 = 738;
        int v27 = "";
        id v28 = "-[NRDKeyManager readDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]";
        _NRLogWithArgs();
      }
      v34[0] = kSecClass;
      v34[1] = kSecAttrService;
      v35[0] = kSecClassGenericPassword;
      v35[1] = @"com.apple.terminusd";
      void v34[2] = kSecAttrAccount;
      void v34[3] = kSecAttrAccessGroup;
      v35[2] = v12;
      void v35[3] = @"com.apple.terminusd";
      void v34[4] = kSecReturnData;
      v35[4] = &__kCFBooleanTrue;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v35, v34, 5, v27, v28, v29, v31, v32);
      CFDictionaryRef v14 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      CFTypeRef result = 0;
      OSStatus v15 = SecItemCopyMatching(v14, &result);
      id v16 = (void *)result;
      if (!v15 && result)
      {
        CFTypeRef result = 0;
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          if (_NRLogIsLevelEnabled())
          {
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            id v17 = (id)qword_1001F4DE8;
            [v16 length];
            _NRLogWithArgs();
          }
          id v18 = v16;
        }
        else
        {
          id v23 = sub_1001589D8();
          int IsLevelEnabled = _NRLogIsLevelEnabled();

          if (IsLevelEnabled)
          {
            id v25 = sub_1001589D8();
            id v26 = (objc_class *)objc_opt_class();
            CFDictionaryRef v30 = NSStringFromClass(v26);
            _NRLogWithArgs();
          }
          id v18 = 0;
        }

        goto LABEL_54;
      }
      if (result)
      {
        CFRelease(result);
        CFTypeRef result = 0;
      }
      if (v15 == -25308)
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_53;
        }
        if (qword_1001F4DF0 == -1) {
          goto LABEL_52;
        }
      }
      else if (v15 == -25300)
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_53;
        }
        if (qword_1001F4DF0 == -1)
        {
LABEL_52:
          _NRLogWithArgs();
LABEL_53:
          id v18 = 0;
LABEL_54:

LABEL_55:
          goto LABEL_56;
        }
      }
      else
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        if (!_NRLogIsLevelEnabled()) {
          goto LABEL_53;
        }
        if (qword_1001F4DF0 == -1) {
          goto LABEL_52;
        }
      }
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      goto LABEL_52;
    }
LABEL_36:
    if (qword_1001F4DF0 != -1) {
      dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
    }
    id v19 = (id)qword_1001F4DE8;
    int v20 = _NRLogIsLevelEnabled();

    if (v20)
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      id v21 = (id)qword_1001F4DE8;
      _NRLogWithArgs();
    }
    id v18 = 0;
    goto LABEL_55;
  }
  id v18 = 0;
LABEL_56:

  return v18;
}

uint64_t sub_10015B57C(uint64_t a1, void *a2, void *a3, int a4, unsigned char *a5)
{
  id v9 = a2;
  id v10 = a3;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    if (v9)
    {
      if (a5) {
        *a5 = 0;
      }
      switch(a4)
      {
        case 1:
          id v11 = &kSecAttrAccessibleWhenUnlockedThisDeviceOnly;
          break;
        case 3:
          id v11 = &kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly;
          break;
        case 4:
          id v11 = (const CFStringRef *)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
          break;
        default:
          id String = (void *)NRDataProtectionClassCreateString();
          goto LABEL_29;
      }
      CFStringRef v12 = *v11;
      id String = (void *)NRDataProtectionClassCreateString();
      if (v12)
      {
        id v14 = v9;
        if (v10)
        {
          id v15 = [objc_alloc((Class)NSString) initWithFormat:@"%@/%@/%@", v10, String, v14];

          id v14 = v15;
        }
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        if (_NRLogIsLevelEnabled())
        {
          if (qword_1001F4DF0 != -1) {
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
          }
          id v16 = (id)qword_1001F4DE8;
          uint64_t v29 = (void *)NRDataProtectionClassCreateString();
          id v30 = v14;
          uint64_t v28 = 802;
          id v26 = "";
          int v27 = "-[NRDKeyManager deleteDataFromKeychainWithName:nrUUID:dataProtectionClass:keychainLocked:]";
          _NRLogWithArgs();
        }
        v32[0] = kSecClass;
        v32[1] = kSecAttrService;
        v33[0] = kSecClassGenericPassword;
        v33[1] = @"com.apple.terminusd";
        v32[2] = kSecAttrAccount;
        v32[3] = kSecAttrAccessGroup;
        _OWORD v33[2] = v14;
        v33[3] = @"com.apple.terminusd";
        +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v33, v32, 4, v26, v27, v28, v29, v30);
        CFDictionaryRef v17 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        OSStatus v18 = SecItemDelete(v17);
        switch(v18)
        {
          case -25308:
            if (a5) {
              *a5 = 1;
            }
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            if (!_NRLogIsLevelEnabled()) {
              goto LABEL_54;
            }
            if (qword_1001F4DF0 == -1) {
              goto LABEL_53;
            }
            break;
          case -25300:
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            if (!_NRLogIsLevelEnabled()) {
              goto LABEL_48;
            }
            if (qword_1001F4DF0 == -1) {
              goto LABEL_47;
            }
            goto LABEL_62;
          case 0:
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            if (!_NRLogIsLevelEnabled()) {
              goto LABEL_48;
            }
            if (qword_1001F4DF0 == -1)
            {
LABEL_47:
              _NRLogWithArgs();
LABEL_48:
              unsigned __int8 v31 = 1;
LABEL_55:

LABEL_56:
              a1 = v31;
              goto LABEL_57;
            }
LABEL_62:
            dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            goto LABEL_47;
          default:
            if (qword_1001F4DF0 != -1) {
              dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
            }
            if (!_NRLogIsLevelEnabled())
            {
LABEL_54:
              unsigned __int8 v31 = 0;
              goto LABEL_55;
            }
            if (qword_1001F4DF0 == -1)
            {
LABEL_53:
              _NRLogWithArgs();
              goto LABEL_54;
            }
            break;
        }
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        goto LABEL_53;
      }
LABEL_29:
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      id v19 = (id)qword_1001F4DE8;
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        id v21 = (id)qword_1001F4DE8;
        _NRLogWithArgs();
      }
      unsigned __int8 v31 = 0;
      goto LABEL_56;
    }
    id v23 = sub_1001589D8();
    int v24 = _NRLogIsLevelEnabled();

    if (v24)
    {
      id v25 = sub_1001589D8();
      _NRLogWithArgs();
    }
    a1 = 0;
  }
LABEL_57:

  return a1;
}

id sub_10015BB3C(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v7 = a3;
  if (!a1) {
    goto LABEL_25;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!a2)
  {
    id v15 = sub_1001589D8();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  if (!v7)
  {
    id v17 = sub_1001589D8();
    int v18 = _NRLogIsLevelEnabled();

    if (v18)
    {
LABEL_24:
      id v19 = sub_1001589D8();
      _NRLogWithArgs();

      id v12 = 0;
      goto LABEL_18;
    }
LABEL_25:
    id v12 = 0;
    goto LABEL_18;
  }
  id v8 = sub_10015AF68(a1, v7, 0, a4);
  if (v8)
  {
    id v21 = 0;
    id v9 = +[NSKeyedUnarchiver unarchivedDictionaryWithKeysOfClass:objc_opt_class() objectsOfClass:a2 fromData:v8 error:&v21];
    id v10 = v21;
    id v11 = v10;
    if (!v9 || v10)
    {
      if (qword_1001F4DF0 != -1) {
        dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4DF0 != -1) {
          dispatch_once(&qword_1001F4DF0, &stru_1001C8AA0);
        }
        id v13 = (id)qword_1001F4DE8;
        id String = (void *)NRDataProtectionClassCreateString();
        _NRLogWithArgs();
      }
      id v12 = 0;
    }
    else
    {
      id v12 = [objc_alloc((Class)NSMutableDictionary) initWithDictionary:v9];
    }
  }
  else
  {
    id v12 = 0;
  }

LABEL_18:

  return v12;
}

id sub_10015BD9C()
{
  uint64_t v0 = &unk_1001F4000;
  CFDictionaryRef v1 = (void *)qword_1001F4E00;
  if (!qword_1001F4E00)
  {
    CFDictionaryRef v1 = (void *)qword_1001F4E08;
    if (!qword_1001F4E08)
    {
      memset(&v10, 0, sizeof(v10));
      pthread_attr_init(&v10);
      sched_param v9 = 0;
      pthread_attr_getschedparam(&v10, &v9);
      v9.sched_priority = 37;
      pthread_attr_setschedparam(&v10, &v9);
      pthread_attr_setschedpolicy(&v10, 4);
      uint64_t v2 = dispatch_pthread_root_queue_create();
      uint32_t v3 = (void *)qword_1001F4E08;
      qword_1001F4E08 = v2;

      if (qword_1001F4E08)
      {
        if (qword_1001F4DF8 == -1)
        {
LABEL_5:
          CFDictionaryRef v1 = (void *)v0[448];
          goto LABEL_6;
        }
      }
      else
      {
        id v5 = sub_10015BF88();
        int IsLevelEnabled = _NRLogIsLevelEnabled();

        if (IsLevelEnabled)
        {
          id v7 = sub_10015BF88();
          _NRLogWithArgs();
        }
        uint64_t v0 = (void *)_os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v8 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v8 = 136446210;
        *(void *)(v8 + 4) = "NRCopyTerminusdQueue";
        sub_10015BF88();
        _NRLogAbortWithPack();
      }
      dispatch_once(&qword_1001F4DF8, &stru_1001C8B20);
      goto LABEL_5;
    }
  }
LABEL_6:

  return v1;
}

id sub_10015BF88()
{
  if (qword_1001F4E18 != -1) {
    dispatch_once(&qword_1001F4E18, &stru_1001C8B80);
  }
  uint64_t v0 = (void *)qword_1001F4E10;

  return v0;
}

void sub_10015BFDC(id a1)
{
  CFDictionaryRef v1 = (id)qword_1001F4E08;
  if (!v1)
  {
    id v7 = sub_10015BF88();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v9 = sub_10015BF88();
      _NRLogWithArgs();
    }
    id v4 = (const char *)_os_log_pack_size();
    __chkstk_darwin(v4);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 136446210;
    *(void *)(v10 + 4) = "nr_dispatch_queue_create_with_target";
    sub_10015BF88();
    _NRLogAbortWithPack();
LABEL_9:
    id v11 = sub_10015BF88();
    int v12 = _NRLogIsLevelEnabled();

    if (v12)
    {
      id v13 = sub_10015BF88();
      _NRLogWithArgs();
    }
    uint64_t v14 = _os_log_pack_size();
    __chkstk_darwin(v14);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 136446466;
    *(void *)(v15 + 4) = "nr_dispatch_queue_create_with_target";
    *(_WORD *)(v15 + 12) = 2080;
    *(void *)(v15 + 14) = v4;
    sub_10015BF88();
    _NRLogAbortWithPack();
  }
  uint64_t v2 = v1;
  uint32_t v3 = _NRCopySerialQueueAttr();
  id v4 = "terminusd.main.root";
  dispatch_queue_t v5 = dispatch_queue_create_with_target_V2("terminusd.main.root", v3, v2);

  if (!v5) {
    goto LABEL_9;
  }

  CFStringRef v6 = (void *)qword_1001F4E00;
  qword_1001F4E00 = (uint64_t)v5;
}

void sub_10015C258(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4E10;
  qword_1001F4E10 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_10015C29C(id a1)
{
  thread_act_t v1 = mach_thread_self();
  policy_mach_timebase_info info = 0;
  thread_policy_set(v1, 1u, &policy_info, 1u);
  if (proc_setthread_cpupercent())
  {
    policy_mach_timebase_info info = 1;
    thread_policy_set(v1, 1u, &policy_info, 1u);
  }
  mach_port_deallocate(mach_task_self_, v1);
}

void start()
{
  if (qword_1001F4E18 != -1) {
    dispatch_once(&qword_1001F4E18, &stru_1001C8B80);
  }
  uint64_t v0 = (id *)&unk_1001F4000;
  if (!_NRLogIsLevelEnabled()) {
    goto LABEL_8;
  }
  if (qword_1001F4E18 != -1) {
    goto LABEL_13;
  }
  while (1)
  {
    id v1 = v0[450];
    if (qword_1001F4A00 != -1) {
      dispatch_once(&qword_1001F4A00, &stru_1001C6E70);
    }
    id v8 = (id)qword_1001F49F8;
    _NRLogWithArgs();

LABEL_8:
    uint64_t v2 = sub_10015BD9C();
    if (v2)
    {
      dispatch_async(v2, &stru_1001C8B40);
      dispatch_main();
    }
    id v3 = sub_10015BF88();
    int IsLevelEnabled = _NRLogIsLevelEnabled();

    if (IsLevelEnabled)
    {
      id v5 = sub_10015BF88();
      _NRLogWithArgs();
    }
    uint64_t v6 = _os_log_pack_size();
    uint64_t v0 = (id *)((char *)&v9 - ((__chkstk_darwin(v6) + 15) & 0xFFFFFFFFFFFFFFF0));
    __error();
    uint64_t v7 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v7 = 136446210;
    *(void *)(v7 + 4) = "main";
    sub_10015BF88();
    _NRLogAbortWithPack();
LABEL_13:
    dispatch_once(&qword_1001F4E18, &stru_1001C8B80);
  }
}

void sub_10015C510(id a1)
{
  rlimit v49 = (rlimit)xmmword_10016C970;
  if (setrlimit(8, &v49))
  {
    id v1 = __error();
    uint64_t v2 = *v1;
    if (strerror_r(*v1, __strerrbuf, 0x80uLL)) {
      __strerrbuf[0] = 0;
    }
    if (qword_1001F4E18 != -1) {
      dispatch_once(&qword_1001F4E18, &stru_1001C8B80);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4E18 != -1) {
        dispatch_once(&qword_1001F4E18, &stru_1001C8B80);
      }
      uint64_t v35 = v2;
      int v40 = __strerrbuf;
      uint64_t v31 = 1024;
      _NRLogWithArgs();
    }
  }
  LOBYTE(v49.rlim_cur) = 0;
  id v3 = +[NSFileManager defaultManager];
  unsigned int v4 = [v3 fileExistsAtPath:@"/var/mobile/Library/terminus" isDirectory:&v49];

  if (v4) {
    BOOL v5 = LOBYTE(v49.rlim_cur) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = @"/var/mobile/Library/terminus";
    if (![@"/var/mobile/Library/terminus" length])
    {
      id v28 = sub_1001135C4();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v30 = sub_1001135C4();
        id v32 = "NRDCreateDirectoryPath";
        _NRLogWithArgs();
      }
      goto LABEL_41;
    }
    if (([@"/var/mobile/Library/terminus" containsString:@".."] & 1) != 0
      || ([@"/var/mobile/Library/terminus" hasPrefix:@"/"] & 1) == 0)
    {
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_41;
      }
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      id v32 = @"/var/mobile/Library/terminus";
    }
    else
    {
      if ((mkdir((const char *)[@"/var/mobile/Library/terminus" UTF8String], 0x1EDu) & 0x80000000) == 0
        || *__error() == 17)
      {
        goto LABEL_41;
      }
      uint64_t v7 = __error();
      id v8 = (const char *)*v7;
      if (strerror_r(*v7, __strerrbuf, 0x80uLL)) {
        __strerrbuf[0] = 0;
      }
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_41;
      }
      if (qword_1001F4C20 != -1) {
        dispatch_once(&qword_1001F4C20, &stru_1001C7E08);
      }
      uint64_t v36 = v8;
      uint64_t v41 = (uint64_t)__strerrbuf;
      id v32 = @"/var/mobile/Library/terminus";
    }
    _NRLogWithArgs();
LABEL_41:

    goto LABEL_42;
  }
  if (qword_1001F4E18 != -1) {
    dispatch_once(&qword_1001F4E18, &stru_1001C8B80);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4E18 != -1) {
      dispatch_once(&qword_1001F4E18, &stru_1001C8B80);
    }
    uint64_t v41 = 130;
    id v32 = "";
    uint64_t v36 = "main_block_invoke";
    _NRLogWithArgs();
  }
LABEL_42:
  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v9 = (id)qword_1001F4DD8;
  sub_10015969C((uint64_t)v9, &stru_1001C8B60);

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1001F49F0);
  id v10 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:@"/var/mobile/Library/terminus/com.apple.terminus.plist"];
  if (!v10)
  {
    id v27 = [objc_alloc((Class)NSMutableDictionary) initWithContentsOfFile:@"/Library/Preferences/com.apple.terminus.plist"];
    if (!v27)
    {
      id v10 = objc_alloc_init((Class)NSMutableDictionary);
      goto LABEL_45;
    }
    id v10 = v27;
    if (sub_100113D08(@"/var/mobile/Library/terminus/com.apple.terminus.plist", v27, 0))
    {
      if (qword_1001F4A10 != -1) {
        dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_45;
      }
      if (qword_1001F4A10 != -1) {
        dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
      }
      uint64_t v36 = "terminusdSettingsInit";
      uint64_t v41 = 73;
      id v32 = "";
    }
    else
    {
      if (qword_1001F4A10 != -1) {
        dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
      }
      if (!_NRLogIsLevelEnabled()) {
        goto LABEL_45;
      }
      if (qword_1001F4A10 != -1) {
        dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
      }
      uint64_t v36 = "terminusdSettingsInit";
      uint64_t v41 = 75;
      id v32 = "";
    }
    _NRLogWithArgs();
  }
LABEL_45:
  if (qword_1001F4A10 != -1) {
    dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    uint64_t v41 = 79;
    id v45 = v10;
    id v32 = "";
    uint64_t v36 = "terminusdSettingsInit";
    _NRLogWithArgs();
  }
  id v11 = [v10 objectForKeyedSubscript:@"PacketLogging" v32, v36, v41, v45];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned __int8 v12 = [v11 BOOLValue];
  }
  else {
    unsigned __int8 v12 = 0;
  }
  gNRPacketLoggingEnabled = v12;
  id v13 = [v10 objectForKeyedSubscript:@"MPKLLogging"];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned __int8 v14 = [v13 BOOLValue];
  }
  else {
    unsigned __int8 v14 = 0;
  }
  gNRMPKLLoggingEnabled = v14;
  uint64_t v15 = [v10 objectForKeyedSubscript:@"IPsecIfRingSize"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v15 unsignedIntValue])
  {
    dword_1001F43D8 = [v15 unsignedIntValue];
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A10 != -1) {
        dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
      }
      uint64_t v42 = 97;
      uint64_t v46 = dword_1001F43D8;
      CFDictionaryRef v33 = "";
      id v37 = "terminusdSettingsInit";
      _NRLogWithArgs();
    }
  }
  id v16 = [v10 objectForKeyedSubscript:@"IPsecKPipeTxRingSize" v33, v37, v42, v46];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v16 unsignedIntValue])
  {
    dword_1001F43DC = [v16 unsignedIntValue];
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A10 != -1) {
        dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
      }
      uint64_t v43 = 102;
      uint64_t v47 = dword_1001F43DC;
      id v34 = "";
      id v38 = "terminusdSettingsInit";
      _NRLogWithArgs();
    }
  }
  id v17 = [v10 objectForKeyedSubscript:@"IPsecKPipeRxRingSize" v34, v38, v43, v47];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v17 unsignedIntValue])
  {
    dword_1001F43E0 = [v17 unsignedIntValue];
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (_NRLogIsLevelEnabled())
    {
      if (qword_1001F4A10 != -1) {
        dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
      }
      uint64_t v44 = 107;
      long long v48 = (const char *)dword_1001F43E0;
      id v39 = "terminusdSettingsInit";
      _NRLogWithArgs();
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1001F49F0);
  if (qword_1001F4A10 != -1) {
    dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4A10 != -1) {
      dispatch_once(&qword_1001F4A10, &stru_1001C6E90);
    }
    if (gNRPacketLoggingEnabled) {
      int v18 = "en";
    }
    else {
      int v18 = "dis";
    }
    uint64_t v44 = 111;
    long long v48 = v18;
    id v39 = "terminusdSettingsInit";
    _NRLogWithArgs();
  }
  id v19 = sub_10015BD9C();
  dispatch_async(v19, &stru_1001C6A58);

  self;
  if (qword_1001F4DE0 != -1) {
    dispatch_once(&qword_1001F4DE0, &stru_1001C8A30);
  }
  id v20 = (id)qword_1001F4DD8;
  sub_10015969C((uint64_t)v20, &stru_1001C6E50);

  id v21 = objc_alloc((Class)NSString);
  if (sub_1000A7EEC()) {
    CFDictionaryRef v22 = "en";
  }
  else {
    CFDictionaryRef v22 = "dis";
  }
  id v23 = [v21 initWithFormat:@"(when the daemon started, the companion link was %sabled on this device)", v22, v39, v44, v48];
  sub_10012F648(0, 9000, &stru_1001C9648, v23);
  int v24 = sub_10015BD9C();
  dispatch_assert_queue_V2(v24);

  self;
  if (qword_1001F4A20 != -1) {
    dispatch_once(&qword_1001F4A20, &stru_1001C6EC8);
  }
  id v25 = (char *)(id)qword_1001F4A18;
  if (v25)
  {
    id v26 = sub_10015BD9C();
    dispatch_assert_queue_V2(v26);

    if (sub_1000A7EEC()) {
      sub_1000AB838(v25);
    }
    else {
      sub_1000ACD70((uint64_t)v25);
    }
  }

  self;
  if (qword_1001F4910 != -1) {
    dispatch_once(&qword_1001F4910, &stru_1001C6780);
  }
}

void sub_10015D08C(id a1)
{
}

id sub_10015D208(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && (int v2 = *(_DWORD *)(v1 + 16)) != 0)
  {
    *(_DWORD *)(v1 + 16) = v2 - 1;
    if (qword_1001F4E28 != -1) {
      dispatch_once(&qword_1001F4E28, &stru_1001C8BE8);
    }
    id result = (id)_NRLogIsLevelEnabled();
    if (result)
    {
      if (qword_1001F4E28 != -1) {
        dispatch_once(&qword_1001F4E28, &stru_1001C8BE8);
      }
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5) {
        uint64_t v5 = *(unsigned int *)(v5 + 16);
      }
      uint64_t v12 = 181;
      uint64_t v13 = v5;
      id v10 = "";
      id v11 = "-[NRPhoneCallRelayAgent unassertAgentWithOptions:]_block_invoke";
      id result = (id)_NRLogWithArgs();
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      if (*(_DWORD *)(v6 + 16)) {
        return result;
      }
      id WeakRetained = objc_loadWeakRetained((id *)(v6 + 56));
    }
    else
    {
      id WeakRetained = 0;
    }
    [WeakRetained deviceHasPhoneCallRelayRequest:0 v10, v11, v12, v13];

    id result = [*(id *)(a1 + 32) isActive];
    if (result)
    {
      [*(id *)(a1 + 32) setActive:0];
      uint64_t v8 = *(void *)(a1 + 32);
      if (v8) {
        id v9 = *(void **)(v8 + 48);
      }
      else {
        id v9 = 0;
      }
      return [v9 updateNetworkAgent:];
    }
  }
  else
  {
    if (qword_1001F4E28 != -1) {
      dispatch_once(&qword_1001F4E28, &stru_1001C8BE8);
    }
    id result = (id)_NRLogIsLevelEnabled();
    if (result)
    {
      if (qword_1001F4E28 != -1) {
        dispatch_once(&qword_1001F4E28, &stru_1001C8BE8);
      }
      return (id)_NRLogWithArgs();
    }
  }
  return result;
}

void sub_10015D404(id a1)
{
  os_log_t v1 = os_log_create("com.apple.networkrelay", "");
  uint64_t v2 = qword_1001F4E20;
  qword_1001F4E20 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10015D4CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 16);
    BOOL v4 = v3 == 0;
    *(_DWORD *)(v2 + 16) = v3 + 1;
  }
  else
  {
    BOOL v4 = 1;
  }
  if (qword_1001F4E28 != -1) {
    dispatch_once(&qword_1001F4E28, &stru_1001C8BE8);
  }
  if (_NRLogIsLevelEnabled())
  {
    if (qword_1001F4E28 != -1) {
      dispatch_once(&qword_1001F4E28, &stru_1001C8BE8);
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      uint64_t v5 = *(unsigned int *)(v5 + 16);
    }
    uint64_t v13 = 157;
    uint64_t v14 = v5;
    id v11 = "";
    uint64_t v12 = "-[NRPhoneCallRelayAgent assertAgentWithOptions:]_block_invoke";
    _NRLogWithArgs();
  }
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      id WeakRetained = objc_loadWeakRetained((id *)(v6 + 56));
    }
    else {
      id WeakRetained = 0;
    }
    [WeakRetained deviceHasPhoneCallRelayRequest:1, v11, v12, v13, v14];
  }
  id result = [*(id *)(a1 + 32) isActive:v11, v12, v13, v14];
  if ((result & 1) == 0)
  {
    [*(id *)(a1 + 32) setActive:1];
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      id v10 = *(void **)(v9 + 48);
    }
    else {
      id v10 = 0;
    }
    return [v10 updateNetworkAgent:];
  }
  return result;
}

void sub_10015D694(uint64_t a1)
{
  if (a1 && *(unsigned char *)(a1 + 14))
  {
    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v2 = (id)qword_1001F4D20;
    sub_10013502C((uint64_t)v2, *(void **)(a1 + 64));

    self;
    if (qword_1001F4D28 != -1) {
      dispatch_once(&qword_1001F4D28, &stru_1001C8658);
    }
    id v3 = (id)qword_1001F4D20;
    BOOL v4 = (id *)v3;
    if (v3)
    {
      dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 1));
      if (([v4[2] apply] & 1) == 0) {
        sub_100115AB0(@"NRPolicySessionManager", @"ApplyPolicy Failed", 0, 1, @"Failed to apply policies", v5, v6, v7, v10);
      }
    }

    if (([*(id *)(a1 + 48) unregisterNetworkAgent] & 1) == 0)
    {
      if (qword_1001F4E28 != -1) {
        dispatch_once(&qword_1001F4E28, &stru_1001C8BE8);
      }
      if (_NRLogIsLevelEnabled())
      {
        if (qword_1001F4E28 != -1) {
          dispatch_once(&qword_1001F4E28, &stru_1001C8BE8);
        }
        _NRLogWithArgs();
      }
    }
    uint64_t v8 = *(void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = 0;

    *(unsigned char *)(a1 + 14) = 0;
    id v11 = [(id)a1 agentUUID];
    uint64_t v9 = [v11 UUIDString];
    sub_10012F648(0, 16003, 0, v9);
  }
}

id *sub_10015D938(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v22.receiver = a1;
    v22.super_class = (Class)NRPhoneCallRelayAgent;
    uint64_t v8 = (id *)[super init];
    if (!v8)
    {
      id v18 = sub_10015DB8C();
      int IsLevelEnabled = _NRLogIsLevelEnabled();

      if (IsLevelEnabled)
      {
        id v20 = sub_10015DB8C();
        _NRLogWithArgs();
      }
      _os_log_pack_size();
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 136446210;
      *(void *)(v21 + 4) = "-[NRPhoneCallRelayAgent initWithQueue:delegate:]";
      sub_10015DB8C();
      _NRLogAbortWithPack();
    }
    a1 = v8;
    objc_storeStrong(v8 + 5, a2);
    uint64_t v9 = +[NSUUID UUID];
    [a1 setAgentUUID:v9];

    [a1 setUserActivated:1];
    [a1 setAgentDescription:@"Phone call relay netagent"];
    objc_storeWeak(a1 + 7, v7);
    id v10 = objc_alloc((Class)NSString);
    id v11 = [a1 agentUUID];
    uint64_t v12 = [v11 UUIDString];
    id v13 = [v10 initWithFormat:@"NRPhoneCallRelayAgent-%@", v12];
    id v14 = a1[8];
    a1[8] = v13;

    uint64_t v15 = [a1 agentUUID];
    id v16 = [v15 UUIDString];
    sub_10012F648(0, 16001, 0, v16);
  }
  return a1;
}

id sub_10015DB8C()
{
  if (qword_1001F4E28 != -1) {
    dispatch_once(&qword_1001F4E28, &stru_1001C8BE8);
  }
  uint64_t v0 = (void *)qword_1001F4E20;

  return v0;
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

uint64_t CCDeriveKey()
{
  return _CCDeriveKey();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

uint64_t CCKDFParametersCreateHkdf()
{
  return _CCKDFParametersCreateHkdf();
}

uint64_t CCKDFParametersDestroy()
{
  return _CCKDFParametersDestroy();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return _CFCopyTypeIDDescription(type_id);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppIntegerValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

DNSServiceErrorType DNSServiceBrowse(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *regtype, const char *domain, DNSServiceBrowseReply callBack, void *context)
{
  return _DNSServiceBrowse(sdRef, flags, interfaceIndex, regtype, domain, callBack, context);
}

void DNSServiceRefDeallocate(DNSServiceRef sdRef)
{
}

DNSServiceErrorType DNSServiceRegister(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *name, const char *regtype, const char *domain, const char *host, uint16_t port, uint16_t txtLen, const void *txtRecord, DNSServiceRegisterReply callBack, void *context)
{
  return _DNSServiceRegister(sdRef, flags, interfaceIndex, name, regtype, domain, host, port, txtLen, txtRecord, callBack, context);
}

DNSServiceErrorType DNSServiceResolve(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *name, const char *regtype, const char *domain, DNSServiceResolveReply callBack, void *context)
{
  return _DNSServiceResolve(sdRef, flags, interfaceIndex, name, regtype, domain, callBack, context);
}

DNSServiceErrorType DNSServiceSetDispatchQueue(DNSServiceRef service, dispatch_queue_t queue)
{
  return _DNSServiceSetDispatchQueue(service, queue);
}

uint64_t IDSCopyLocalDeviceUniqueID()
{
  return _IDSCopyLocalDeviceUniqueID();
}

uint64_t IDSLocalPairingGetPairingRecordsWithCompletionBlock()
{
  return _IDSLocalPairingGetPairingRecordsWithCompletionBlock();
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithName(AssertionType, AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return _IOPMAssertionRelease(AssertionID);
}

uint64_t IOPSGetPercentRemaining()
{
  return _IOPSGetPercentRemaining();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

uint64_t NEHelperCacheCopyAppUUIDMapping()
{
  return _NEHelperCacheCopyAppUUIDMapping();
}

uint64_t NEIKEv2CreateSessionStateString()
{
  return _NEIKEv2CreateSessionStateString();
}

uint64_t NEPolicyGetStringForLegacyNECPLevel()
{
  return _NEPolicyGetStringForLegacyNECPLevel();
}

uint64_t NEVirtualInterfaceAddAddress()
{
  return _NEVirtualInterfaceAddAddress();
}

uint64_t NEVirtualInterfaceAddIPv6Route()
{
  return _NEVirtualInterfaceAddIPv6Route();
}

uint64_t NEVirtualInterfaceCopyAddresses()
{
  return _NEVirtualInterfaceCopyAddresses();
}

uint64_t NEVirtualInterfaceCopyName()
{
  return _NEVirtualInterfaceCopyName();
}

uint64_t NEVirtualInterfaceCreateNexus()
{
  return _NEVirtualInterfaceCreateNexus();
}

uint64_t NEVirtualInterfaceDisableChannel()
{
  return _NEVirtualInterfaceDisableChannel();
}

uint64_t NEVirtualInterfaceGetIndex()
{
  return _NEVirtualInterfaceGetIndex();
}

uint64_t NEVirtualInterfaceInvalidate()
{
  return _NEVirtualInterfaceInvalidate();
}

uint64_t NEVirtualInterfaceRemoveAllRoutes()
{
  return _NEVirtualInterfaceRemoveAllRoutes();
}

uint64_t NEVirtualInterfaceSetDNSPort()
{
  return _NEVirtualInterfaceSetDNSPort();
}

uint64_t NEVirtualInterfaceSetDNSServers()
{
  return _NEVirtualInterfaceSetDNSServers();
}

uint64_t NEVirtualInterfaceSetDelegateInterface()
{
  return _NEVirtualInterfaceSetDelegateInterface();
}

uint64_t NEVirtualInterfaceSetIPv6Router()
{
  return _NEVirtualInterfaceSetIPv6Router();
}

uint64_t NEVirtualInterfaceSetMTU()
{
  return _NEVirtualInterfaceSetMTU();
}

uint64_t NEVirtualInterfaceSetRankLast()
{
  return _NEVirtualInterfaceSetRankLast();
}

uint64_t NEVirtualInterfaceSetRankNever()
{
  return _NEVirtualInterfaceSetRankNever();
}

uint64_t NEVirtualInterfaceSetRankPrimaryEligible()
{
  return _NEVirtualInterfaceSetRankPrimaryEligible();
}

uint64_t NEVirtualInterfaceUpdateAdHocService()
{
  return _NEVirtualInterfaceUpdateAdHocService();
}

uint64_t NRDataProtectionClassCreateString()
{
  return _NRDataProtectionClassCreateString();
}

uint64_t NRTLVAdd()
{
  return _NRTLVAdd();
}

uint64_t NRTLVAddData()
{
  return _NRTLVAddData();
}

uint64_t NRTLVParse()
{
  return _NRTLVParse();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t PBDataWriterWriteDataField()
{
  return _PBDataWriterWriteDataField();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBReaderReadData()
{
  return _PBReaderReadData();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

uint64_t PLShouldLogRegisteredEvent()
{
  return _PLShouldLogRegisteredEvent();
}

CFErrorRef SCCopyLastError(void)
{
  return _SCCopyLastError();
}

CFDictionaryRef SCDynamicStoreCopyMultiple(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return _SCDynamicStoreCopyMultiple(store, keys, patterns);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return _SCDynamicStoreCreate(allocator, name, callout, context);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkInterfaceEntity(allocator, domain, ifname, entity);
}

uint64_t SCDynamicStoreSetDisconnectCallBack()
{
  return _SCDynamicStoreSetDisconnectCallBack();
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return _SCDynamicStoreSetDispatchQueue(store, queue);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return _SCDynamicStoreSetNotificationKeys(store, keys, patterns);
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return _SecAccessControlCreateWithFlags(allocator, protection, flags, error);
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return _SecCertificateCopyData(certificate);
}

CFTypeID SecCertificateGetTypeID(void)
{
  return _SecCertificateGetTypeID();
}

uint64_t SecCertificateIsValid()
{
  return _SecCertificateIsValid();
}

uint64_t SecGenerateSelfSignedCertificate()
{
  return _SecGenerateSelfSignedCertificate();
}

uint64_t SecIdentityCreate()
{
  return _SecIdentityCreate();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return _SecItemUpdate(query, attributesToUpdate);
}

CFDataRef SecKeyCopyKeyExchangeResult(SecKeyRef privateKey, SecKeyAlgorithm algorithm, SecKeyRef publicKey, CFDictionaryRef parameters, CFErrorRef *error)
{
  return _SecKeyCopyKeyExchangeResult(privateKey, algorithm, publicKey, parameters, error);
}

uint64_t SecKeyCopyPublicBytes()
{
  return _SecKeyCopyPublicBytes();
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return _SecKeyCopyPublicKey(key);
}

uint64_t SecKeyCopySubjectPublicKeyInfo()
{
  return _SecKeyCopySubjectPublicKeyInfo();
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return _SecKeyCreateRandomKey(parameters, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return _SecKeyCreateWithData(keyData, attributes, error);
}

CFTypeID SecKeyGetTypeID(void)
{
  return _SecKeyGetTypeID();
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return _SecRandomCopyBytes(rnd, count, bytes);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return __CFXPCCreateCFObjectFromXPCObject();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return __CFXPCCreateXPCObjectFromCFObject();
}

uint64_t _IDSCopyIDForPushTokenAndIdentitiesWithService()
{
  return __IDSCopyIDForPushTokenAndIdentitiesWithService();
}

uint64_t _NRCopyEventLogObjectForNRUUID()
{
  return __NRCopyEventLogObjectForNRUUID();
}

uint64_t _NRCopyLogObjectForNRUUID()
{
  return __NRCopyLogObjectForNRUUID();
}

uint64_t _NRCopyPolicyTrafficClassifiersDescription()
{
  return __NRCopyPolicyTrafficClassifiersDescription();
}

uint64_t _NRCopySerialQueueAttr()
{
  return __NRCopySerialQueueAttr();
}

uint64_t _NRCopyTimeString()
{
  return __NRCopyTimeString();
}

uint64_t _NRCopyTimeStringForDate()
{
  return __NRCopyTimeStringForDate();
}

uint64_t _NRCreateDataString()
{
  return __NRCreateDataString();
}

uint64_t _NRCreateDataStringTruncated()
{
  return __NRCreateDataStringTruncated();
}

uint64_t _NRCreateMACAddressString()
{
  return __NRCreateMACAddressString();
}

uint64_t _NRIsAppleInternal()
{
  return __NRIsAppleInternal();
}

uint64_t _NRIsUUIDNonZero()
{
  return __NRIsUUIDNonZero();
}

uint64_t _NRKeyCreateLogString()
{
  return __NRKeyCreateLogString();
}

uint64_t _NRLogAbortWithPack()
{
  return __NRLogAbortWithPack();
}

uint64_t _NRLogIsLevelEnabled()
{
  return __NRLogIsLevelEnabled();
}

uint64_t _NRLogWithArgs()
{
  return __NRLogWithArgs();
}

uint64_t _NRShouldDebugAutoRelease()
{
  return __NRShouldDebugAutoRelease();
}

uint64_t _NRUpdateNRUUIDsEligibleForLogObjects()
{
  return __NRUpdateNRUUIDsEligibleForLogObjects();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return ___error();
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_pack_fill()
{
  return __os_log_pack_fill();
}

uint64_t _os_log_pack_size()
{
  return __os_log_pack_size();
}

uint64_t advertising_proxy_enable_with_interfaces()
{
  return _advertising_proxy_enable_with_interfaces();
}

uint64_t advertising_proxy_ref_dealloc()
{
  return _advertising_proxy_ref_dealloc();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return _bind(a1, a2, a3);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cc_clear()
{
  return _cc_clear();
}

uint64_t cc_cmp_safe()
{
  return _cc_cmp_safe();
}

uint64_t ccpbkdf2_hmac()
{
  return _ccpbkdf2_hmac();
}

uint64_t ccsha256_di()
{
  return _ccsha256_di();
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return _class_copyPropertyList(cls, outCount);
}

int close(int a1)
{
  return _close(a1);
}

uint64_t createIKEv2PacketString()
{
  return _createIKEv2PacketString();
}

uint64_t createIOVecString()
{
  return _createIOVecString();
}

uint64_t createIOVecStringWithContents()
{
  return _createIOVecStringWithContents();
}

uint64_t createIPv6AddrString()
{
  return _createIPv6AddrString();
}

uint64_t createIPv6AddrStringFromData()
{
  return _createIPv6AddrStringFromData();
}

uint64_t createShortStringFromNRLinkSubtype()
{
  return _createShortStringFromNRLinkSubtype();
}

uint64_t createShortStringFromNRLinkType()
{
  return _createShortStringFromNRLinkType();
}

uint64_t createStringFromNRDeviceEndpointType()
{
  return _createStringFromNRDeviceEndpointType();
}

uint64_t createStringFromNRLinkSubtype()
{
  return _createStringFromNRLinkSubtype();
}

uint64_t createStringFromNRLinkType()
{
  return _createStringFromNRLinkType();
}

uint64_t createStringFromNRTLVType()
{
  return _createStringFromNRTLVType();
}

uint64_t createStringFromNRXPCType()
{
  return _createStringFromNRXPCType();
}

uint64_t createStringFromThermalPressureLevel()
{
  return _createStringFromThermalPressureLevel();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return _dispatch_data_create(buffer, size, queue, destructor);
}

uint64_t dispatch_data_create_with_transform()
{
  return _dispatch_data_create_with_transform();
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return _dispatch_data_get_size(data);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_main(void)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

uint64_t dispatch_pthread_root_queue_create()
{
  return _dispatch_pthread_root_queue_create();
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return _dispatch_queue_create_with_target_V2(label, attr, target);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return _dispatch_walltime(when, delta);
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

void free(void *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int fstat(int a1, stat *a2)
{
  return _fstat(a1, a2);
}

uint64_t getDSCPFromPacket()
{
  return _getDSCPFromPacket();
}

uint64_t getESPSPIFromPacket()
{
  return _getESPSPIFromPacket();
}

uint64_t getESPSequenceNumberFromPacket()
{
  return _getESPSequenceNumberFromPacket();
}

int getifaddrs(ifaddrs **a1)
{
  return _getifaddrs(a1);
}

pid_t getpid(void)
{
  return _getpid();
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return _if_indextoname(a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return _if_nametoindex(a1);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return _inet_ntop(a1, a2, a3, a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return _inet_pton(a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return _ioctl(a1, a2);
}

uint64_t isPacketValidIPv6()
{
  return _isPacketValidIPv6();
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

uint64_t mach_boottime_usec()
{
  return _mach_boottime_usec();
}

uint64_t mach_continuous_time(void)
{
  return _mach_continuous_time();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return _mach_port_deallocate(task, name);
}

mach_port_t mach_thread_self(void)
{
  return _mach_thread_self();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_posix_memalign(memptr, alignment, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return _mkdir(a1, a2);
}

uint64_t mrc_discovery_proxy_activate()
{
  return _mrc_discovery_proxy_activate();
}

uint64_t mrc_discovery_proxy_create()
{
  return _mrc_discovery_proxy_create();
}

uint64_t mrc_discovery_proxy_invalidate()
{
  return _mrc_discovery_proxy_invalidate();
}

uint64_t mrc_discovery_proxy_parameters_add_match_domain()
{
  return _mrc_discovery_proxy_parameters_add_match_domain();
}

uint64_t mrc_discovery_proxy_parameters_add_server_certificate()
{
  return _mrc_discovery_proxy_parameters_add_server_certificate();
}

uint64_t mrc_discovery_proxy_parameters_add_server_ipv4_address()
{
  return _mrc_discovery_proxy_parameters_add_server_ipv4_address();
}

uint64_t mrc_discovery_proxy_parameters_add_server_ipv6_address()
{
  return _mrc_discovery_proxy_parameters_add_server_ipv6_address();
}

uint64_t mrc_discovery_proxy_parameters_create()
{
  return _mrc_discovery_proxy_parameters_create();
}

uint64_t mrc_discovery_proxy_parameters_set_interface()
{
  return _mrc_discovery_proxy_parameters_set_interface();
}

uint64_t mrc_discovery_proxy_set_event_handler()
{
  return _mrc_discovery_proxy_set_event_handler();
}

uint64_t mrc_discovery_proxy_set_queue()
{
  return _mrc_discovery_proxy_set_queue();
}

uint64_t mrc_dns_proxy_activate()
{
  return _mrc_dns_proxy_activate();
}

uint64_t mrc_dns_proxy_create()
{
  return _mrc_dns_proxy_create();
}

uint64_t mrc_dns_proxy_invalidate()
{
  return _mrc_dns_proxy_invalidate();
}

uint64_t mrc_dns_proxy_parameters_add_input_interface()
{
  return _mrc_dns_proxy_parameters_add_input_interface();
}

uint64_t mrc_dns_proxy_parameters_create()
{
  return _mrc_dns_proxy_parameters_create();
}

uint64_t mrc_dns_proxy_parameters_set_output_interface()
{
  return _mrc_dns_proxy_parameters_set_output_interface();
}

uint64_t mrc_dns_proxy_set_event_handler()
{
  return _mrc_dns_proxy_set_event_handler();
}

uint64_t mrc_dns_proxy_set_queue()
{
  return _mrc_dns_proxy_set_queue();
}

uint64_t ne_session_add_necp_drop_dest_from_dest_list()
{
  return _ne_session_add_necp_drop_dest_from_dest_list();
}

uint64_t ne_session_add_necp_drop_dest_from_path()
{
  return _ne_session_add_necp_drop_dest_from_path();
}

uint64_t ne_session_clear_caches()
{
  return _ne_session_clear_caches();
}

uint64_t ne_session_is_always_on_vpn_enabled()
{
  return _ne_session_is_always_on_vpn_enabled();
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

uint64_t nrCopyAccountIdentifierForNRUUID()
{
  return _nrCopyAccountIdentifierForNRUUID();
}

uint64_t nrMaxPacketLengthForTLV()
{
  return _nrMaxPacketLengthForTLV();
}

uint64_t nrMaxTLVLengthForPacket()
{
  return _nrMaxTLVLengthForPacket();
}

uint64_t nrPacketToTLV()
{
  return _nrPacketToTLV();
}

uint64_t nrSupportsPHSProxy()
{
  return _nrSupportsPHSProxy();
}

uint64_t nrTLVToPacket()
{
  return _nrTLVToPacket();
}

nw_advertise_descriptor_t nw_advertise_descriptor_create_bonjour_service(const char *name, const char *type, const char *domain)
{
  return _nw_advertise_descriptor_create_bonjour_service(name, type, domain);
}

const char *__cdecl nw_advertise_descriptor_get_application_service_name(nw_advertise_descriptor_t advertise_descriptor)
{
  return _nw_advertise_descriptor_get_application_service_name(advertise_descriptor);
}

void nw_advertise_descriptor_set_no_auto_rename(nw_advertise_descriptor_t advertise_descriptor, BOOL no_auto_rename)
{
}

void nw_advertise_descriptor_set_txt_record_object(nw_advertise_descriptor_t advertise_descriptor, nw_txt_record_t txt_record)
{
}

uint64_t nw_agent_add_resolve_handlers()
{
  return _nw_agent_add_resolve_handlers();
}

uint64_t nw_agent_add_to_interface()
{
  return _nw_agent_add_to_interface();
}

uint64_t nw_agent_add_token()
{
  return _nw_agent_add_token();
}

uint64_t nw_agent_change_state()
{
  return _nw_agent_change_state();
}

uint64_t nw_agent_client_copy_advertise_descriptor()
{
  return _nw_agent_client_copy_advertise_descriptor();
}

uint64_t nw_agent_client_copy_browse_descriptor()
{
  return _nw_agent_client_copy_browse_descriptor();
}

uint64_t nw_agent_client_copy_endpoint()
{
  return _nw_agent_client_copy_endpoint();
}

uint64_t nw_agent_client_copy_parameters()
{
  return _nw_agent_client_copy_parameters();
}

uint64_t nw_agent_client_copy_path()
{
  return _nw_agent_client_copy_path();
}

uint64_t nw_agent_create()
{
  return _nw_agent_create();
}

uint64_t nw_agent_create_with_path_override_info()
{
  return _nw_agent_create_with_path_override_info();
}

uint64_t nw_agent_get_uuid()
{
  return _nw_agent_get_uuid();
}

uint64_t nw_agent_remove_from_interface()
{
  return _nw_agent_remove_from_interface();
}

uint64_t nw_agent_set_browse_handlers()
{
  return _nw_agent_set_browse_handlers();
}

uint64_t nw_agent_set_error_handler()
{
  return _nw_agent_set_error_handler();
}

uint64_t nw_agent_set_token_low_water_mark()
{
  return _nw_agent_set_token_low_water_mark();
}

uint64_t nw_array_append()
{
  return _nw_array_append();
}

uint64_t nw_array_apply()
{
  return _nw_array_apply();
}

uint64_t nw_array_create()
{
  return _nw_array_create();
}

uint64_t nw_array_get_count()
{
  return _nw_array_get_count();
}

uint64_t nw_array_remove_object()
{
  return _nw_array_remove_object();
}

nw_browse_descriptor_t nw_browse_descriptor_create_bonjour_service(const char *type, const char *domain)
{
  return _nw_browse_descriptor_create_bonjour_service(type, domain);
}

const char *__cdecl nw_browse_descriptor_get_application_service_name(nw_browse_descriptor_t descriptor)
{
  return _nw_browse_descriptor_get_application_service_name(descriptor);
}

void nw_browse_descriptor_set_include_txt_record(nw_browse_descriptor_t descriptor, BOOL include_txt_record)
{
}

nw_endpoint_t nw_browse_result_copy_endpoint(nw_browse_result_t result)
{
  return _nw_browse_result_copy_endpoint(result);
}

nw_txt_record_t nw_browse_result_copy_txt_record_object(nw_browse_result_t result)
{
  return _nw_browse_result_copy_txt_record_object(result);
}

void nw_browse_result_enumerate_interfaces(nw_browse_result_t result, nw_browse_result_enumerate_interface_t enumerator)
{
}

nw_browse_result_change_t nw_browse_result_get_changes(nw_browse_result_t old_result, nw_browse_result_t new_result)
{
  return _nw_browse_result_get_changes(old_result, new_result);
}

void nw_browser_cancel(nw_browser_t browser)
{
}

nw_browser_t nw_browser_create(nw_browse_descriptor_t descriptor, nw_parameters_t parameters)
{
  return _nw_browser_create(descriptor, parameters);
}

void nw_browser_set_browse_results_changed_handler(nw_browser_t browser, nw_browser_browse_results_changed_handler_t handler)
{
}

void nw_browser_set_queue(nw_browser_t browser, dispatch_queue_t queue)
{
}

void nw_browser_set_state_changed_handler(nw_browser_t browser, nw_browser_state_changed_handler_t state_changed_handler)
{
}

void nw_browser_start(nw_browser_t browser)
{
}

void nw_connection_cancel(nw_connection_t connection)
{
}

nw_path_t nw_connection_copy_current_path(nw_connection_t connection)
{
  return _nw_connection_copy_current_path(connection);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return _nw_connection_create(endpoint, parameters);
}

nw_parameters_t nw_connection_group_copy_parameters(nw_connection_group_t group)
{
  return _nw_connection_group_copy_parameters(group);
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
}

uint64_t nw_connection_reset_traffic_class()
{
  return _nw_connection_reset_traffic_class();
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
}

uint64_t nw_connection_set_event_handler()
{
  return _nw_connection_set_event_handler();
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

uint64_t nw_connection_set_read_close_handler()
{
  return _nw_connection_set_read_close_handler();
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

uint64_t nw_connection_state_to_string()
{
  return _nw_connection_state_to_string();
}

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  return _nw_endpoint_copy_address_string(endpoint);
}

uint64_t nw_endpoint_copy_interface()
{
  return _nw_endpoint_copy_interface();
}

uint64_t nw_endpoint_copy_public_keys()
{
  return _nw_endpoint_copy_public_keys();
}

nw_endpoint_t nw_endpoint_create_address(const sockaddr *address)
{
  return _nw_endpoint_create_address(address);
}

uint64_t nw_endpoint_create_application_service()
{
  return _nw_endpoint_create_application_service();
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return _nw_endpoint_create_host(hostname, port);
}

uint64_t nw_endpoint_create_host_with_numeric_port()
{
  return _nw_endpoint_create_host_with_numeric_port();
}

uint64_t nw_endpoint_get_application_service_name()
{
  return _nw_endpoint_get_application_service_name();
}

const char *__cdecl nw_endpoint_get_bonjour_service_name(nw_endpoint_t endpoint)
{
  return _nw_endpoint_get_bonjour_service_name(endpoint);
}

nw_endpoint_type_t nw_endpoint_get_type(nw_endpoint_t endpoint)
{
  return _nw_endpoint_get_type(endpoint);
}

uint64_t nw_endpoint_set_agent_identifier()
{
  return _nw_endpoint_set_agent_identifier();
}

uint64_t nw_endpoint_set_device_id()
{
  return _nw_endpoint_set_device_id();
}

uint64_t nw_endpoint_set_device_model()
{
  return _nw_endpoint_set_device_model();
}

uint64_t nw_endpoint_set_device_name()
{
  return _nw_endpoint_set_device_name();
}

uint64_t nw_endpoint_set_interface()
{
  return _nw_endpoint_set_interface();
}

uint64_t nw_endpoint_set_public_keys()
{
  return _nw_endpoint_set_public_keys();
}

int nw_error_get_error_code(nw_error_t error)
{
  return _nw_error_get_error_code(error);
}

nw_error_domain_t nw_error_get_error_domain(nw_error_t error)
{
  return _nw_error_get_error_domain(error);
}

uint64_t nw_http_fields_access_value_by_name()
{
  return _nw_http_fields_access_value_by_name();
}

uint64_t nw_interface_copy_dictionary()
{
  return _nw_interface_copy_dictionary();
}

uint64_t nw_interface_copy_local_address_for_remote_address()
{
  return _nw_interface_copy_local_address_for_remote_address();
}

uint64_t nw_interface_create_with_index()
{
  return _nw_interface_create_with_index();
}

uint64_t nw_interface_create_with_name()
{
  return _nw_interface_create_with_name();
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return _nw_interface_get_name(interface);
}

uint64_t nw_interface_get_subtype()
{
  return _nw_interface_get_subtype();
}

nw_interface_type_t nw_interface_get_type(nw_interface_t interface)
{
  return _nw_interface_get_type(interface);
}

void nw_listener_cancel(nw_listener_t listener)
{
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return _nw_listener_create(parameters);
}

void nw_listener_set_advertise_descriptor(nw_listener_t listener, nw_advertise_descriptor_t advertise_descriptor)
{
}

uint64_t nw_listener_set_event_handler()
{
  return _nw_listener_set_event_handler();
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
}

void nw_listener_start(nw_listener_t listener)
{
}

uint64_t nw_masque_server_cancel()
{
  return _nw_masque_server_cancel();
}

uint64_t nw_masque_server_copy_connection_group_with_identifier()
{
  return _nw_masque_server_copy_connection_group_with_identifier();
}

uint64_t nw_masque_server_create()
{
  return _nw_masque_server_create();
}

uint64_t nw_masque_server_get_port()
{
  return _nw_masque_server_get_port();
}

uint64_t nw_masque_server_set_outer_connection_handler()
{
  return _nw_masque_server_set_outer_connection_handler();
}

uint64_t nw_masque_server_set_proxy_client_connection_event_handler()
{
  return _nw_masque_server_set_proxy_client_connection_event_handler();
}

uint64_t nw_masque_server_set_state_changed_handler()
{
  return _nw_masque_server_set_state_changed_handler();
}

uint64_t nw_masque_server_start()
{
  return _nw_masque_server_start();
}

uint64_t nw_parameters_copy_avoided_netagent_types()
{
  return _nw_parameters_copy_avoided_netagent_types();
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return _nw_parameters_copy_default_protocol_stack(parameters);
}

uint64_t nw_parameters_copy_prohibited_interfaces()
{
  return _nw_parameters_copy_prohibited_interfaces();
}

uint64_t nw_parameters_copy_protocol_options_for_definition()
{
  return _nw_parameters_copy_protocol_options_for_definition();
}

nw_interface_t nw_parameters_copy_required_interface(nw_parameters_t parameters)
{
  return _nw_parameters_copy_required_interface(parameters);
}

nw_parameters_t nw_parameters_create(void)
{
  return _nw_parameters_create();
}

uint64_t nw_parameters_create_data()
{
  return _nw_parameters_create_data();
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return _nw_parameters_create_secure_tcp(configure_tls, configure_tcp);
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return _nw_parameters_create_secure_udp(configure_dtls, configure_udp);
}

uint64_t nw_parameters_get_account_id()
{
  return _nw_parameters_get_account_id();
}

uint64_t nw_parameters_get_pid()
{
  return _nw_parameters_get_pid();
}

uint64_t nw_parameters_get_traffic_class()
{
  return _nw_parameters_get_traffic_class();
}

uint64_t nw_parameters_get_use_p2p()
{
  return _nw_parameters_get_use_p2p();
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
}

uint64_t nw_parameters_set_account_id()
{
  return _nw_parameters_set_account_id();
}

uint64_t nw_parameters_set_always_open_listener_socket()
{
  return _nw_parameters_set_always_open_listener_socket();
}

uint64_t nw_parameters_set_local_address()
{
  return _nw_parameters_set_local_address();
}

uint64_t nw_parameters_set_no_proxy()
{
  return _nw_parameters_set_no_proxy();
}

uint64_t nw_parameters_set_preferred_netagent_uuids()
{
  return _nw_parameters_set_preferred_netagent_uuids();
}

uint64_t nw_parameters_set_prohibited_interface_subtypes()
{
  return _nw_parameters_set_prohibited_interface_subtypes();
}

uint64_t nw_parameters_set_prohibited_interface_types()
{
  return _nw_parameters_set_prohibited_interface_types();
}

uint64_t nw_parameters_set_prohibited_interfaces()
{
  return _nw_parameters_set_prohibited_interfaces();
}

uint64_t nw_parameters_set_required_interface_subtype()
{
  return _nw_parameters_set_required_interface_subtype();
}

void nw_parameters_set_required_interface_type(nw_parameters_t parameters, nw_interface_type_t interface_type)
{
}

uint64_t nw_parameters_set_source_application_by_external_bundle_id()
{
  return _nw_parameters_set_source_application_by_external_bundle_id();
}

uint64_t nw_parameters_set_use_awdl()
{
  return _nw_parameters_set_use_awdl();
}

nw_endpoint_t nw_path_copy_effective_local_endpoint(nw_path_t path)
{
  return _nw_path_copy_effective_local_endpoint(path);
}

uint64_t nw_path_copy_interface()
{
  return _nw_path_copy_interface();
}

uint64_t nw_path_copy_netagent_dictionary()
{
  return _nw_path_copy_netagent_dictionary();
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return _nw_path_create_evaluator_for_endpoint();
}

uint64_t nw_path_enumerate_resolver_configs()
{
  return _nw_path_enumerate_resolver_configs();
}

uint64_t nw_path_evaluator_cancel()
{
  return _nw_path_evaluator_cancel();
}

uint64_t nw_path_evaluator_copy_path()
{
  return _nw_path_evaluator_copy_path();
}

uint64_t nw_path_evaluator_set_queue()
{
  return _nw_path_evaluator_set_queue();
}

uint64_t nw_path_evaluator_set_update_handler()
{
  return _nw_path_evaluator_set_update_handler();
}

uint64_t nw_path_evaluator_start()
{
  return _nw_path_evaluator_start();
}

uint64_t nw_path_get_client_id()
{
  return _nw_path_get_client_id();
}

uint64_t nw_path_get_estimated_download_throughput()
{
  return _nw_path_get_estimated_download_throughput();
}

uint64_t nw_path_get_estimated_upload_throughput()
{
  return _nw_path_get_estimated_upload_throughput();
}

uint64_t nw_path_get_interface_index()
{
  return _nw_path_get_interface_index();
}

uint64_t nw_path_get_mtu()
{
  return _nw_path_get_mtu();
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return _nw_path_get_status(path);
}

BOOL nw_path_has_dns(nw_path_t path)
{
  return _nw_path_has_dns(path);
}

BOOL nw_path_has_ipv4(nw_path_t path)
{
  return _nw_path_has_ipv4(path);
}

BOOL nw_path_has_ipv6(nw_path_t path)
{
  return _nw_path_has_ipv6(path);
}

BOOL nw_path_is_constrained(nw_path_t path)
{
  return _nw_path_is_constrained(path);
}

BOOL nw_path_is_expensive(nw_path_t path)
{
  return _nw_path_is_expensive(path);
}

uint64_t nw_path_is_roaming()
{
  return _nw_path_is_roaming();
}

uint64_t nw_path_override_info_add_resolver_config()
{
  return _nw_path_override_info_add_resolver_config();
}

uint64_t nw_path_override_info_copy_data()
{
  return _nw_path_override_info_copy_data();
}

uint64_t nw_path_override_info_create()
{
  return _nw_path_override_info_create();
}

uint64_t nw_path_override_info_set_constrained()
{
  return _nw_path_override_info_set_constrained();
}

uint64_t nw_path_override_info_set_expensive()
{
  return _nw_path_override_info_set_expensive();
}

uint64_t nw_path_override_info_set_roaming()
{
  return _nw_path_override_info_set_roaming();
}

uint64_t nw_path_override_info_set_uses_cellular()
{
  return _nw_path_override_info_set_uses_cellular();
}

uint64_t nw_path_override_info_set_uses_wifi()
{
  return _nw_path_override_info_set_uses_wifi();
}

uint64_t nw_protocol_copy_quic_stream_definition()
{
  return _nw_protocol_copy_quic_stream_definition();
}

BOOL nw_protocol_options_is_quic(nw_protocol_options_t options)
{
  return _nw_protocol_options_is_quic(options);
}

void nw_protocol_stack_iterate_application_protocols(nw_protocol_stack_t stack, nw_protocol_stack_iterate_protocols_block_t iterate_block)
{
}

void nw_proxy_config_add_excluded_domain(nw_proxy_config_t config, const char *excluded_domain)
{
}

uint64_t nw_proxy_config_create_default_privacy_proxy()
{
  return _nw_proxy_config_create_default_privacy_proxy();
}

uint64_t nw_proxy_config_publish()
{
  return _nw_proxy_config_publish();
}

uint64_t nw_proxy_config_set_identifier()
{
  return _nw_proxy_config_set_identifier();
}

uint64_t nw_proxy_config_set_is_companion_proxy()
{
  return _nw_proxy_config_set_is_companion_proxy();
}

uint64_t nw_proxy_config_set_is_privacy_proxy()
{
  return _nw_proxy_config_set_is_privacy_proxy();
}

uint64_t nw_proxy_config_unpublish()
{
  return _nw_proxy_config_unpublish();
}

uint64_t nw_proxy_hop_add_extra_header()
{
  return _nw_proxy_hop_add_extra_header();
}

uint64_t nw_proxy_hop_add_token_header_with_agent_type()
{
  return _nw_proxy_hop_add_token_header_with_agent_type();
}

uint64_t nw_proxy_hop_create_masque()
{
  return _nw_proxy_hop_create_masque();
}

uint64_t nw_proxy_hop_set_client_identity_is_raw_public_key()
{
  return _nw_proxy_hop_set_client_identity_is_raw_public_key();
}

uint64_t nw_proxy_hop_set_client_identity_reference()
{
  return _nw_proxy_hop_set_client_identity_reference();
}

uint64_t nw_proxy_hop_set_enable_demux()
{
  return _nw_proxy_hop_set_enable_demux();
}

uint64_t nw_proxy_hop_set_masque_version()
{
  return _nw_proxy_hop_set_masque_version();
}

uint64_t nw_proxy_hop_set_server_raw_public_key()
{
  return _nw_proxy_hop_set_server_raw_public_key();
}

uint64_t nw_proxy_hop_set_supports_l4s()
{
  return _nw_proxy_hop_set_supports_l4s();
}

uint64_t nw_proxy_hop_set_supports_raw_ip()
{
  return _nw_proxy_hop_set_supports_raw_ip();
}

uint64_t nw_proxy_hop_set_supports_udp_listen()
{
  return _nw_proxy_hop_set_supports_udp_listen();
}

uint64_t nw_quic_connection_set_sec_protocol_options()
{
  return _nw_quic_connection_set_sec_protocol_options();
}

sec_protocol_options_t nw_quic_copy_sec_protocol_options(nw_protocol_options_t options)
{
  return _nw_quic_copy_sec_protocol_options(options);
}

uint64_t nw_quic_options_copy_local_public_key()
{
  return _nw_quic_options_copy_local_public_key();
}

uint64_t nw_quic_stream_copy_shared_connection_options()
{
  return _nw_quic_stream_copy_shared_connection_options();
}

uint64_t nw_resolver_cancel()
{
  return _nw_resolver_cancel();
}

uint64_t nw_resolver_config_add_name_server()
{
  return _nw_resolver_config_add_name_server();
}

uint64_t nw_resolver_config_add_search_domain()
{
  return _nw_resolver_config_add_search_domain();
}

uint64_t nw_resolver_config_create()
{
  return _nw_resolver_config_create();
}

uint64_t nw_resolver_config_enumerate_name_servers()
{
  return _nw_resolver_config_enumerate_name_servers();
}

uint64_t nw_resolver_config_enumerate_search_domains()
{
  return _nw_resolver_config_enumerate_search_domains();
}

uint64_t nw_resolver_config_get_class()
{
  return _nw_resolver_config_get_class();
}

uint64_t nw_resolver_config_set_class()
{
  return _nw_resolver_config_set_class();
}

uint64_t nw_resolver_create_with_endpoint()
{
  return _nw_resolver_create_with_endpoint();
}

uint64_t nw_resolver_set_update_handler()
{
  return _nw_resolver_set_update_handler();
}

uint64_t nw_service_connector_cancel_active_connection()
{
  return _nw_service_connector_cancel_active_connection();
}

uint64_t nw_service_connector_create()
{
  return _nw_service_connector_create();
}

uint64_t nw_service_connector_set_service_available_block()
{
  return _nw_service_connector_set_service_available_block();
}

uint64_t nw_service_connector_start()
{
  return _nw_service_connector_start();
}

uint64_t nw_service_connector_start_request()
{
  return _nw_service_connector_start_request();
}

uint64_t nw_shoes_server_cancel()
{
  return _nw_shoes_server_cancel();
}

uint64_t nw_shoes_server_create()
{
  return _nw_shoes_server_create();
}

uint64_t nw_shoes_server_fillout_statistics()
{
  return _nw_shoes_server_fillout_statistics();
}

uint64_t nw_socks5_server_set_state_changed_handler()
{
  return _nw_socks5_server_set_state_changed_handler();
}

uint64_t nw_socks5_server_start()
{
  return _nw_socks5_server_start();
}

sec_protocol_options_t nw_tls_copy_sec_protocol_options(nw_protocol_options_t options)
{
  return _nw_tls_copy_sec_protocol_options(options);
}

nw_protocol_options_t nw_tls_create_options(void)
{
  return _nw_tls_create_options();
}

BOOL nw_txt_record_access_key(nw_txt_record_t txt_record, const char *key, nw_txt_record_access_key_t access_value)
{
  return _nw_txt_record_access_key(txt_record, key, access_value);
}

nw_txt_record_t nw_txt_record_create_dictionary(void)
{
  return _nw_txt_record_create_dictionary();
}

BOOL nw_txt_record_set_key(nw_txt_record_t txt_record, const char *key, const uint8_t *value, size_t value_len)
{
  return _nw_txt_record_set_key(txt_record, key, value, value_len);
}

uint64_t nwi_ifstate_get_ifname()
{
  return _nwi_ifstate_get_ifname();
}

uint64_t nwi_ifstate_get_next()
{
  return _nwi_ifstate_get_next();
}

uint64_t nwi_ifstate_get_signature()
{
  return _nwi_ifstate_get_signature();
}

uint64_t nwi_state_copy()
{
  return _nwi_state_copy();
}

uint64_t nwi_state_get_first_ifstate()
{
  return _nwi_state_get_first_ifstate();
}

uint64_t nwi_state_release()
{
  return _nwi_state_release();
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return _open_dprotected_np(a1, a2, a3, a4);
}

uint64_t os_buflet_get_data_length()
{
  return _os_buflet_get_data_length();
}

uint64_t os_buflet_get_data_limit()
{
  return _os_buflet_get_data_limit();
}

uint64_t os_buflet_get_data_offset()
{
  return _os_buflet_get_data_offset();
}

uint64_t os_buflet_get_object_address()
{
  return _os_buflet_get_object_address();
}

uint64_t os_buflet_set_data_length()
{
  return _os_buflet_set_data_length();
}

uint64_t os_channel_advance_slot()
{
  return _os_channel_advance_slot();
}

uint64_t os_channel_attr_create()
{
  return _os_channel_attr_create();
}

uint64_t os_channel_attr_destroy()
{
  return _os_channel_attr_destroy();
}

uint64_t os_channel_attr_get()
{
  return _os_channel_attr_get();
}

uint64_t os_channel_attr_set()
{
  return _os_channel_attr_set();
}

uint64_t os_channel_create_extended()
{
  return _os_channel_create_extended();
}

uint64_t os_channel_destroy()
{
  return _os_channel_destroy();
}

uint64_t os_channel_get_fd()
{
  return _os_channel_get_fd();
}

uint64_t os_channel_get_next_slot()
{
  return _os_channel_get_next_slot();
}

uint64_t os_channel_read_attr()
{
  return _os_channel_read_attr();
}

uint64_t os_channel_ring_id()
{
  return _os_channel_ring_id();
}

uint64_t os_channel_rx_ring()
{
  return _os_channel_rx_ring();
}

uint64_t os_channel_set_slot_properties()
{
  return _os_channel_set_slot_properties();
}

uint64_t os_channel_slot_get_packet()
{
  return _os_channel_slot_get_packet();
}

uint64_t os_channel_sync()
{
  return _os_channel_sync();
}

uint64_t os_channel_tx_ring()
{
  return _os_channel_tx_ring();
}

uint64_t os_channel_write_attr()
{
  return _os_channel_write_attr();
}

uint64_t os_inet_checksum()
{
  return _os_inet_checksum();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_packet_clear_flow_uuid()
{
  return _os_packet_clear_flow_uuid();
}

uint64_t os_packet_finalize()
{
  return _os_packet_finalize();
}

uint64_t os_packet_get_flow_uuid()
{
  return _os_packet_get_flow_uuid();
}

uint64_t os_packet_get_next_buflet()
{
  return _os_packet_get_next_buflet();
}

uint64_t os_packet_set_flow_uuid()
{
  return _os_packet_set_flow_uuid();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return _proc_pidinfo(pid, flavor, arg, buffer, buffersize);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_pidpath(pid, buffer, buffersize);
}

uint64_t proc_setthread_cpupercent()
{
  return _proc_setthread_cpupercent();
}

const char *__cdecl property_getName(objc_property_t property)
{
  return _property_getName(property);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return _pthread_attr_getschedparam(a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return _pthread_attr_init(a1);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return _pthread_attr_setschedparam(a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return _pthread_attr_setschedpolicy(a1, a2);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return _reallocf(__ptr, __size);
}

ssize_t recvmsg(int a1, msghdr *a2, int a3)
{
  return _recvmsg(a1, a2, a3);
}

uint64_t sandbox_extension_consume()
{
  return _sandbox_extension_consume();
}

uint64_t sandbox_extension_release()
{
  return _sandbox_extension_release();
}

SecIdentityRef sec_identity_copy_ref(sec_identity_t identity)
{
  return _sec_identity_copy_ref(identity);
}

sec_identity_t sec_identity_create_with_certificates(SecIdentityRef identity, CFArrayRef certificates)
{
  return _sec_identity_create_with_certificates(identity, certificates);
}

void sec_protocol_options_add_pre_shared_key(sec_protocol_options_t options, dispatch_data_t psk, dispatch_data_t psk_identity)
{
}

uint64_t sec_protocol_options_add_server_raw_public_key_certificate()
{
  return _sec_protocol_options_add_server_raw_public_key_certificate();
}

void sec_protocol_options_append_tls_ciphersuite(sec_protocol_options_t options, tls_ciphersuite_t ciphersuite)
{
}

uint64_t sec_protocol_options_set_client_raw_public_key_certificates()
{
  return _sec_protocol_options_set_client_raw_public_key_certificates();
}

void sec_protocol_options_set_local_identity(sec_protocol_options_t options, sec_identity_t identity)
{
}

void sec_protocol_options_set_peer_authentication_required(sec_protocol_options_t options, BOOL peer_authentication_required)
{
}

void sec_protocol_options_set_tls_server_name(sec_protocol_options_t options, const char *server_name)
{
}

void sec_protocol_options_set_verify_block(sec_protocol_options_t options, sec_protocol_verify_t verify_block, dispatch_queue_t verify_block_queue)
{
}

ssize_t sendmsg(int a1, const msghdr *a2, int a3)
{
  return _sendmsg(a1, a2, a3);
}

int setrlimit(int a1, const rlimit *a2)
{
  return _setrlimit(a1, a2);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return _setsockopt(a1, a2, a3, a4, a5);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return _socket(a1, a2, a3);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return _strdup(__s1);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return _strerror_r(__errnum, __strerrbuf, __buflen);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

uint64_t symptom_framework_init()
{
  return _symptom_framework_init();
}

uint64_t symptom_new()
{
  return _symptom_new();
}

uint64_t symptom_send()
{
  return _symptom_send();
}

uint64_t symptom_set_additional_qualifier()
{
  return _symptom_set_additional_qualifier();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

int system(const char *a1)
{
  return _system(a1);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return _thread_policy_set(thread, flavor, policy_info, policy_infoCnt);
}

int uuid_is_null(const uuid_t uu)
{
  return _uuid_is_null(uu);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return _xpc_array_apply(xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return _xpc_array_create(objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return _xpc_array_get_count(xarray);
}

void xpc_array_set_uint64(xpc_object_t xarray, size_t index, uint64_t value)
{
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return _xpc_BOOL_get_value(xBOOL);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return _xpc_connection_copy_entitlement_value();
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

void *__cdecl xpc_connection_get_context(xpc_connection_t connection)
{
  return _xpc_connection_get_context(connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return _xpc_connection_get_pid(connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_set_context(xpc_connection_t connection, void *context)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_finalizer_f(xpc_connection_t connection, xpc_finalizer_t finalizer)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return _xpc_copy_description(object);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return _xpc_data_get_bytes_ptr(xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return _xpc_data_get_length(xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return _xpc_dictionary_apply(xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return _xpc_dictionary_create_reply(original);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_dup_fd(xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return _xpc_dictionary_get_data(xdict, key, length);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_dictionary(xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_int64(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uint64(xdict, key);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uuid(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

uint64_t xpc_dictionary_send_reply()
{
  return _xpc_dictionary_send_reply();
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

xpc_object_t xpc_string_create(const char *string)
{
  return _xpc_string_create(string);
}

xpc_object_t xpc_string_create_with_format(const char *fmt, ...)
{
  return _xpc_string_create_with_format(fmt);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return _xpc_uint64_create(value);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return _xpc_uint64_get_value(xuint);
}

xpc_object_t xpc_uuid_create(const unsigned __int8 *uuid)
{
  return _xpc_uuid_create(uuid);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return _xpc_uuid_get_bytes(xuuid);
}

id objc_msgSend_AWDL(void *a1, const char *a2, ...)
{
  return [a1 AWDL];
}

id objc_msgSend_NANData(void *a1, const char *a2, ...)
{
  return [a1 NANData];
}

id objc_msgSend_SSID(void *a1, const char *a2, ...)
{
  return [a1 SSID];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return [a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return [a1 UUIDString];
}

id objc_msgSend__createDispatchData(void *a1, const char *a2, ...)
{
  return [a1 _createDispatchData];
}

id objc_msgSend_acceptInvitation(void *a1, const char *a2, ...)
{
  return [a1 acceptInvitation];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return [a1 accounts];
}

id objc_msgSend_activeDevices(void *a1, const char *a2, ...)
{
  return [a1 activeDevices];
}

id objc_msgSend_activeOperationalScope(void *a1, const char *a2, ...)
{
  return [a1 activeOperationalScope];
}

id objc_msgSend_activePairer(void *a1, const char *a2, ...)
{
  return [a1 activePairer];
}

id objc_msgSend_addrStr(void *a1, const char *a2, ...)
{
  return [a1 addrStr];
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return [a1 address];
}

id objc_msgSend_addressData(void *a1, const char *a2, ...)
{
  return [a1 addressData];
}

id objc_msgSend_addressFamily(void *a1, const char *a2, ...)
{
  return [a1 addressFamily];
}

id objc_msgSend_agentDescription(void *a1, const char *a2, ...)
{
  return [a1 agentDescription];
}

id objc_msgSend_agentDomain(void *a1, const char *a2, ...)
{
  return [a1 agentDomain];
}

id objc_msgSend_agentType(void *a1, const char *a2, ...)
{
  return [a1 agentType];
}

id objc_msgSend_agentUUID(void *a1, const char *a2, ...)
{
  return [a1 agentUUID];
}

id objc_msgSend_aggregateStatsTimerSource(void *a1, const char *a2, ...)
{
  return [a1 aggregateStatsTimerSource];
}

id objc_msgSend_allInterfaces(void *a1, const char *a2, ...)
{
  return [a1 allInterfaces];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return [a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return [a1 allObjects];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return [a1 allValues];
}

id objc_msgSend_allowedLinkSubtypes(void *a1, const char *a2, ...)
{
  return [a1 allowedLinkSubtypes];
}

id objc_msgSend_allowedLinkTypes(void *a1, const char *a2, ...)
{
  return [a1 allowedLinkTypes];
}

id objc_msgSend_allowedPeerDeviceType(void *a1, const char *a2, ...)
{
  return [a1 allowedPeerDeviceType];
}

id objc_msgSend_allowsDeadPeerDetection(void *a1, const char *a2, ...)
{
  return [a1 allowsDeadPeerDetection];
}

id objc_msgSend_allowsDemuxForwarding(void *a1, const char *a2, ...)
{
  return [a1 allowsDemuxForwarding];
}

id objc_msgSend_allowsDeviceDiscovery(void *a1, const char *a2, ...)
{
  return [a1 allowsDeviceDiscovery];
}

id objc_msgSend_allowsDirectToCloud(void *a1, const char *a2, ...)
{
  return [a1 allowsDirectToCloud];
}

id objc_msgSend_allowsListenerClients(void *a1, const char *a2, ...)
{
  return [a1 allowsListenerClients];
}

id objc_msgSend_allowsUnsafeSocketAccess(void *a1, const char *a2, ...)
{
  return [a1 allowsUnsafeSocketAccess];
}

id objc_msgSend_appSvcPolicyIDs(void *a1, const char *a2, ...)
{
  return [a1 appSvcPolicyIDs];
}

id objc_msgSend_appVPN(void *a1, const char *a2, ...)
{
  return [a1 appVPN];
}

id objc_msgSend_apply(void *a1, const char *a2, ...)
{
  return [a1 apply];
}

id objc_msgSend_applyUsingSystem(void *a1, const char *a2, ...)
{
  return [a1 applyUsingSystem];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return [a1 array];
}

id objc_msgSend_authData(void *a1, const char *a2, ...)
{
  return [a1 authData];
}

id objc_msgSend_authMethod(void *a1, const char *a2, ...)
{
  return [a1 authMethod];
}

id objc_msgSend_availability(void *a1, const char *a2, ...)
{
  return [a1 availability];
}

id objc_msgSend_bPrefix(void *a1, const char *a2, ...)
{
  return [a1 bPrefix];
}

id objc_msgSend_babelInterface(void *a1, const char *a2, ...)
{
  return [a1 babelInterface];
}

id objc_msgSend_blob(void *a1, const char *a2, ...)
{
  return [a1 blob];
}

id objc_msgSend_bluetoothEndpointType(void *a1, const char *a2, ...)
{
  return [a1 bluetoothEndpointType];
}

id objc_msgSend_bluetoothRole(void *a1, const char *a2, ...)
{
  return [a1 bluetoothRole];
}

id objc_msgSend_bluetoothUUID(void *a1, const char *a2, ...)
{
  return [a1 bluetoothUUID];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLValue];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return [a1 bundleIdentifier];
}

id objc_msgSend_busy(void *a1, const char *a2, ...)
{
  return [a1 busy];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return [a1 bytes];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return [a1 cancel];
}

id objc_msgSend_cancelIfRouteUnselected(void *a1, const char *a2, ...)
{
  return [a1 cancelIfRouteUnselected];
}

id objc_msgSend_cancelInvitation(void *a1, const char *a2, ...)
{
  return [a1 cancelInvitation];
}

id objc_msgSend_cancelTimer(void *a1, const char *a2, ...)
{
  return [a1 cancelTimer];
}

id objc_msgSend_cancelled(void *a1, const char *a2, ...)
{
  return [a1 cancelled];
}

id objc_msgSend_candidate(void *a1, const char *a2, ...)
{
  return [a1 candidate];
}

id objc_msgSend_cbUUID(void *a1, const char *a2, ...)
{
  return [a1 cbUUID];
}

id objc_msgSend_centralManager(void *a1, const char *a2, ...)
{
  return [a1 centralManager];
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return [a1 channel];
}

id objc_msgSend_charValue(void *a1, const char *a2, ...)
{
  return [a1 charValue];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return [a1 code];
}

id objc_msgSend_companionProxyAgent(void *a1, const char *a2, ...)
{
  return [a1 companionProxyAgent];
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return [a1 completionBlock];
}

id objc_msgSend_completionQueue(void *a1, const char *a2, ...)
{
  return [a1 completionQueue];
}

id objc_msgSend_connect(void *a1, const char *a2, ...)
{
  return [a1 connect];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return [a1 connection];
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return [a1 connectionState];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return [a1 copy];
}

id objc_msgSend_copyAllIPv4(void *a1, const char *a2, ...)
{
  return [a1 copyAllIPv4];
}

id objc_msgSend_copyAllIPv6(void *a1, const char *a2, ...)
{
  return [a1 copyAllIPv6];
}

id objc_msgSend_copyAppRuleIDs(void *a1, const char *a2, ...)
{
  return [a1 copyAppRuleIDs];
}

id objc_msgSend_copyCEndpoint(void *a1, const char *a2, ...)
{
  return [a1 copyCEndpoint];
}

id objc_msgSend_copyCParameters(void *a1, const char *a2, ...)
{
  return [a1 copyCParameters];
}

id objc_msgSend_copyCriteriaForCellularSlicing(void *a1, const char *a2, ...)
{
  return [a1 copyCriteriaForCellularSlicing];
}

id objc_msgSend_copyDescription(void *a1, const char *a2, ...)
{
  return [a1 copyDescription];
}

id objc_msgSend_copyDescriptionInner(void *a1, const char *a2, ...)
{
  return [a1 copyDescriptionInner];
}

id objc_msgSend_copyExcludedBundleIdentifiers(void *a1, const char *a2, ...)
{
  return [a1 copyExcludedBundleIdentifiers];
}

id objc_msgSend_copyKeyList(void *a1, const char *a2, ...)
{
  return [a1 copyKeyList];
}

id objc_msgSend_copyMatchTokens(void *a1, const char *a2, ...)
{
  return [a1 copyMatchTokens];
}

id objc_msgSend_copyName(void *a1, const char *a2, ...)
{
  return [a1 copyName];
}

id objc_msgSend_copyPropertiesForDefaultPairedPhone(void *a1, const char *a2, ...)
{
  return [a1 copyPropertiesForDefaultPairedPhone];
}

id objc_msgSend_copyProviderMachOUUIDs(void *a1, const char *a2, ...)
{
  return [a1 copyProviderMachOUUIDs];
}

id objc_msgSend_copySendData(void *a1, const char *a2, ...)
{
  return [a1 copySendData];
}

id objc_msgSend_copySharedManager(void *a1, const char *a2, ...)
{
  return [a1 copySharedManager];
}

id objc_msgSend_copyShortDescription(void *a1, const char *a2, ...)
{
  return [a1 copyShortDescription];
}

id objc_msgSend_copyShortDescriptionInner(void *a1, const char *a2, ...)
{
  return [a1 copyShortDescriptionInner];
}

id objc_msgSend_copyStatusString(void *a1, const char *a2, ...)
{
  return [a1 copyStatusString];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return [a1 count];
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return [a1 countryCode];
}

id objc_msgSend_createIHUTLV(void *a1, const char *a2, ...)
{
  return [a1 createIHUTLV];
}

id objc_msgSend_createPersonalHelloTLV(void *a1, const char *a2, ...)
{
  return [a1 createPersonalHelloTLV];
}

id objc_msgSend_createTLV(void *a1, const char *a2, ...)
{
  return [a1 createTLV];
}

id objc_msgSend_createUpdateTLVs(void *a1, const char *a2, ...)
{
  return [a1 createUpdateTLVs];
}

id objc_msgSend_currentKnownNetworkProfile(void *a1, const char *a2, ...)
{
  return [a1 currentKnownNetworkProfile];
}

id objc_msgSend_customIKEAuthPrivateNotifies(void *a1, const char *a2, ...)
{
  return [a1 customIKEAuthPrivateNotifies];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return [a1 data];
}

id objc_msgSend_datapathID(void *a1, const char *a2, ...)
{
  return [a1 datapathID];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return [a1 date];
}

id objc_msgSend_dateCreated(void *a1, const char *a2, ...)
{
  return [a1 dateCreated];
}

id objc_msgSend_dateEnabled(void *a1, const char *a2, ...)
{
  return [a1 dateEnabled];
}

id objc_msgSend_dateRegistered(void *a1, const char *a2, ...)
{
  return [a1 dateRegistered];
}

id objc_msgSend_declineInvitation(void *a1, const char *a2, ...)
{
  return [a1 declineInvitation];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return [a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return [a1 defaultManager];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return [a1 delegate];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return [a1 description];
}

id objc_msgSend_descriptionWithoutPlen(void *a1, const char *a2, ...)
{
  return [a1 descriptionWithoutPlen];
}

id objc_msgSend_destination(void *a1, const char *a2, ...)
{
  return [a1 destination];
}

id objc_msgSend_destroy(void *a1, const char *a2, ...)
{
  return [a1 destroy];
}

id objc_msgSend_deviceIRKData(void *a1, const char *a2, ...)
{
  return [a1 deviceIRKData];
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return [a1 deviceType];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return [a1 devices];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return [a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return [a1 dictionaryRepresentation];
}

id objc_msgSend_directToCloudRequestAvailable(void *a1, const char *a2, ...)
{
  return [a1 directToCloudRequestAvailable];
}

id objc_msgSend_directToCloudRequestUnavailable(void *a1, const char *a2, ...)
{
  return [a1 directToCloudRequestUnavailable];
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return [a1 disconnect];
}

id objc_msgSend_disconnectFromPeripherals(void *a1, const char *a2, ...)
{
  return [a1 disconnectFromPeripherals];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return [a1 domain];
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return [a1 drop];
}

id objc_msgSend_dtlsEnabled(void *a1, const char *a2, ...)
{
  return [a1 dtlsEnabled];
}

id objc_msgSend_dtlsReady(void *a1, const char *a2, ...)
{
  return [a1 dtlsReady];
}

id objc_msgSend_dtlsStack(void *a1, const char *a2, ...)
{
  return [a1 dtlsStack];
}

id objc_msgSend_effectiveRemoteEndpoint(void *a1, const char *a2, ...)
{
  return [a1 effectiveRemoteEndpoint];
}

id objc_msgSend_endSession(void *a1, const char *a2, ...)
{
  return [a1 endSession];
}

id objc_msgSend_enqueueNextIHU(void *a1, const char *a2, ...)
{
  return [a1 enqueueNextIHU];
}

id objc_msgSend_enqueueNextUpdate(void *a1, const char *a2, ...)
{
  return [a1 enqueueNextUpdate];
}

id objc_msgSend_enqueuedPairers(void *a1, const char *a2, ...)
{
  return [a1 enqueuedPairers];
}

id objc_msgSend_entitlements(void *a1, const char *a2, ...)
{
  return [a1 entitlements];
}

id objc_msgSend_excludeClientApplication(void *a1, const char *a2, ...)
{
  return [a1 excludeClientApplication];
}

id objc_msgSend_excludeLegacyClients(void *a1, const char *a2, ...)
{
  return [a1 excludeLegacyClients];
}

id objc_msgSend_excludeNonMatchingLegacyClients(void *a1, const char *a2, ...)
{
  return [a1 excludeNonMatchingLegacyClients];
}

id objc_msgSend_excludeVPNClients(void *a1, const char *a2, ...)
{
  return [a1 excludeVPNClients];
}

id objc_msgSend_fakeInterfaces(void *a1, const char *a2, ...)
{
  return [a1 fakeInterfaces];
}

id objc_msgSend_fakeLinkIndex(void *a1, const char *a2, ...)
{
  return [a1 fakeLinkIndex];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return [a1 firstObject];
}

id objc_msgSend_forwardNonMatchingTraffic(void *a1, const char *a2, ...)
{
  return [a1 forwardNonMatchingTraffic];
}

id objc_msgSend_fullDescription(void *a1, const char *a2, ...)
{
  return [a1 fullDescription];
}

id objc_msgSend_fullIdentity(void *a1, const char *a2, ...)
{
  return [a1 fullIdentity];
}

id objc_msgSend_handleThermalStateUpdate(void *a1, const char *a2, ...)
{
  return [a1 handleThermalStateUpdate];
}

id objc_msgSend_handlesLinkRecommendations(void *a1, const char *a2, ...)
{
  return [a1 handlesLinkRecommendations];
}

id objc_msgSend_hasActiveDataSession(void *a1, const char *a2, ...)
{
  return [a1 hasActiveDataSession];
}

id objc_msgSend_hasClassCPolicies(void *a1, const char *a2, ...)
{
  return [a1 hasClassCPolicies];
}

id objc_msgSend_hasClassDPolicies(void *a1, const char *a2, ...)
{
  return [a1 hasClassDPolicies];
}

id objc_msgSend_hasCompanionDatapath(void *a1, const char *a2, ...)
{
  return [a1 hasCompanionDatapath];
}

id objc_msgSend_hasPoliciesForProxyCriteria(void *a1, const char *a2, ...)
{
  return [a1 hasPoliciesForProxyCriteria];
}

id objc_msgSend_hasProxyCriteriaAssigningTokens(void *a1, const char *a2, ...)
{
  return [a1 hasProxyCriteriaAssigningTokens];
}

id objc_msgSend_hasReportedUpgradeStatusToSymptoms(void *a1, const char *a2, ...)
{
  return [a1 hasReportedUpgradeStatusToSymptoms];
}

id objc_msgSend_hasRouteRulePolicy(void *a1, const char *a2, ...)
{
  return [a1 hasRouteRulePolicy];
}

id objc_msgSend_hasSavedClassCKeysInKeychain(void *a1, const char *a2, ...)
{
  return [a1 hasSavedClassCKeysInKeychain];
}

id objc_msgSend_hasScheduledSendingLocalClassCUnlock(void *a1, const char *a2, ...)
{
  return [a1 hasScheduledSendingLocalClassCUnlock];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return [a1 hash];
}

id objc_msgSend_hostState(void *a1, const char *a2, ...)
{
  return [a1 hostState];
}

id objc_msgSend_hostname(void *a1, const char *a2, ...)
{
  return [a1 hostname];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return [a1 identifier];
}

id objc_msgSend_identifierData(void *a1, const char *a2, ...)
{
  return [a1 identifierData];
}

id objc_msgSend_identifierType(void *a1, const char *a2, ...)
{
  return [a1 identifierType];
}

id objc_msgSend_identities(void *a1, const char *a2, ...)
{
  return [a1 identities];
}

id objc_msgSend_idsDeviceID(void *a1, const char *a2, ...)
{
  return [a1 idsDeviceID];
}

id objc_msgSend_idsDeviceIdentifier(void *a1, const char *a2, ...)
{
  return [a1 idsDeviceIdentifier];
}

id objc_msgSend_ifIndex(void *a1, const char *a2, ...)
{
  return [a1 ifIndex];
}

id objc_msgSend_ifName(void *a1, const char *a2, ...)
{
  return [a1 ifName];
}

id objc_msgSend_ikeClassCEstablished(void *a1, const char *a2, ...)
{
  return [a1 ikeClassCEstablished];
}

id objc_msgSend_ikeClassDEstablished(void *a1, const char *a2, ...)
{
  return [a1 ikeClassDEstablished];
}

id objc_msgSend_ikeInterfaceName(void *a1, const char *a2, ...)
{
  return [a1 ikeInterfaceName];
}

id objc_msgSend_ikeListener(void *a1, const char *a2, ...)
{
  return [a1 ikeListener];
}

id objc_msgSend_ikeSessionClassC(void *a1, const char *a2, ...)
{
  return [a1 ikeSessionClassC];
}

id objc_msgSend_ikeSessionClassD(void *a1, const char *a2, ...)
{
  return [a1 ikeSessionClassD];
}

id objc_msgSend_ikev2Role(void *a1, const char *a2, ...)
{
  return [a1 ikev2Role];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return [a1 init];
}

id objc_msgSend_initInternal(void *a1, const char *a2, ...)
{
  return [a1 initInternal];
}

id objc_msgSend_initiateConnection(void *a1, const char *a2, ...)
{
  return [a1 initiateConnection];
}

id objc_msgSend_initiatePairing(void *a1, const char *a2, ...)
{
  return [a1 initiatePairing];
}

id objc_msgSend_initiatorDataAddress(void *a1, const char *a2, ...)
{
  return [a1 initiatorDataAddress];
}

id objc_msgSend_initiatorDataSession(void *a1, const char *a2, ...)
{
  return [a1 initiatorDataSession];
}

id objc_msgSend_initiatorDiscoveryResult(void *a1, const char *a2, ...)
{
  return [a1 initiatorDiscoveryResult];
}

id objc_msgSend_inputBytesPerSecond(void *a1, const char *a2, ...)
{
  return [a1 inputBytesPerSecond];
}

id objc_msgSend_instance(void *a1, const char *a2, ...)
{
  return [a1 instance];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return [a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return [a1 integerValue];
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return [a1 interfaceName];
}

id objc_msgSend_interfaceNames(void *a1, const char *a2, ...)
{
  return [a1 interfaceNames];
}

id objc_msgSend_interfaceToPeerAddressDictionary(void *a1, const char *a2, ...)
{
  return [a1 interfaceToPeerAddressDictionary];
}

id objc_msgSend_interfaces(void *a1, const char *a2, ...)
{
  return [a1 interfaces];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return [a1 invalidate];
}

id objc_msgSend_invalidateAggregateStatsTimerSource(void *a1, const char *a2, ...)
{
  return [a1 invalidateAggregateStatsTimerSource];
}

id objc_msgSend_invalidateIKESessionClassC(void *a1, const char *a2, ...)
{
  return [a1 invalidateIKESessionClassC];
}

id objc_msgSend_invalidateIKESessionClassD(void *a1, const char *a2, ...)
{
  return [a1 invalidateIKESessionClassD];
}

id objc_msgSend_invalidateLink(void *a1, const char *a2, ...)
{
  return [a1 invalidateLink];
}

id objc_msgSend_invalidateManager(void *a1, const char *a2, ...)
{
  return [a1 invalidateManager];
}

id objc_msgSend_invalidateVirtualInterface(void *a1, const char *a2, ...)
{
  return [a1 invalidateVirtualInterface];
}

id objc_msgSend_ipv6LinkLocalAddress(void *a1, const char *a2, ...)
{
  return [a1 ipv6LinkLocalAddress];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return [a1 isActive];
}

id objc_msgSend_isCompanionLink(void *a1, const char *a2, ...)
{
  return [a1 isCompanionLink];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return [a1 isConnected];
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return [a1 isDefaultPairedDevice];
}

id objc_msgSend_isEmptyPairing(void *a1, const char *a2, ...)
{
  return [a1 isEmptyPairing];
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return [a1 isEnabled];
}

id objc_msgSend_isIKEResponder(void *a1, const char *a2, ...)
{
  return [a1 isIKEResponder];
}

id objc_msgSend_isInitiator(void *a1, const char *a2, ...)
{
  return [a1 isInitiator];
}

id objc_msgSend_isNotEmpty(void *a1, const char *a2, ...)
{
  return [a1 isNotEmpty];
}

id objc_msgSend_isPairing(void *a1, const char *a2, ...)
{
  return [a1 isPairing];
}

id objc_msgSend_isPeripheralRole(void *a1, const char *a2, ...)
{
  return [a1 isPeripheralRole];
}

id objc_msgSend_isPersonalHotspot(void *a1, const char *a2, ...)
{
  return [a1 isPersonalHotspot];
}

id objc_msgSend_isPrimary(void *a1, const char *a2, ...)
{
  return [a1 isPrimary];
}

id objc_msgSend_isReachableOverWiFi(void *a1, const char *a2, ...)
{
  return [a1 isReachableOverWiFi];
}

id objc_msgSend_isUnpairRequest(void *a1, const char *a2, ...)
{
  return [a1 isUnpairRequest];
}

id objc_msgSend_isUnpairing(void *a1, const char *a2, ...)
{
  return [a1 isUnpairing];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return [a1 lastObject];
}

id objc_msgSend_lastReceivedAdvice(void *a1, const char *a2, ...)
{
  return [a1 lastReceivedAdvice];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return [a1 length];
}

id objc_msgSend_linkDelegate(void *a1, const char *a2, ...)
{
  return [a1 linkDelegate];
}

id objc_msgSend_linkTotalReadyTimeInSec(void *a1, const char *a2, ...)
{
  return [a1 linkTotalReadyTimeInSec];
}

id objc_msgSend_linkType(void *a1, const char *a2, ...)
{
  return [a1 linkType];
}

id objc_msgSend_localAddress(void *a1, const char *a2, ...)
{
  return [a1 localAddress];
}

id objc_msgSend_localEndpoint(void *a1, const char *a2, ...)
{
  return [a1 localEndpoint];
}

id objc_msgSend_localIdentifier(void *a1, const char *a2, ...)
{
  return [a1 localIdentifier];
}

id objc_msgSend_localInnerIPv6AddressBytesClassC(void *a1, const char *a2, ...)
{
  return [a1 localInnerIPv6AddressBytesClassC];
}

id objc_msgSend_localInnerIPv6AddressBytesClassD(void *a1, const char *a2, ...)
{
  return [a1 localInnerIPv6AddressBytesClassD];
}

id objc_msgSend_localInterfaceIndex(void *a1, const char *a2, ...)
{
  return [a1 localInterfaceIndex];
}

id objc_msgSend_localInterfaceName(void *a1, const char *a2, ...)
{
  return [a1 localInterfaceName];
}

id objc_msgSend_localOuterEndpoint(void *a1, const char *a2, ...)
{
  return [a1 localOuterEndpoint];
}

id objc_msgSend_localToken(void *a1, const char *a2, ...)
{
  return [a1 localToken];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return [a1 localizedDescription];
}

id objc_msgSend_lockSessionToCurrentProcess(void *a1, const char *a2, ...)
{
  return [a1 lockSessionToCurrentProcess];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return [a1 lowercaseString];
}

id objc_msgSend_machOUUIDs(void *a1, const char *a2, ...)
{
  return [a1 machOUUIDs];
}

id objc_msgSend_matchResultAccountID(void *a1, const char *a2, ...)
{
  return [a1 matchResultAccountID];
}

id objc_msgSend_matchResultBundleID(void *a1, const char *a2, ...)
{
  return [a1 matchResultBundleID];
}

id objc_msgSend_maxTime(void *a1, const char *a2, ...)
{
  return [a1 maxTime];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return [a1 metadata];
}

id objc_msgSend_metric(void *a1, const char *a2, ...)
{
  return [a1 metric];
}

id objc_msgSend_minTime(void *a1, const char *a2, ...)
{
  return [a1 minTime];
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return [a1 model];
}

id objc_msgSend_mtu(void *a1, const char *a2, ...)
{
  return [a1 mtu];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return [a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return [a1 name];
}

id objc_msgSend_neighbor(void *a1, const char *a2, ...)
{
  return [a1 neighbor];
}

id objc_msgSend_neighbors(void *a1, const char *a2, ...)
{
  return [a1 neighbors];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return [a1 nextObject];
}

id objc_msgSend_nexusInstances(void *a1, const char *a2, ...)
{
  return [a1 nexusInstances];
}

id objc_msgSend_nodeSeqno(void *a1, const char *a2, ...)
{
  return [a1 nodeSeqno];
}

id objc_msgSend_notifyData(void *a1, const char *a2, ...)
{
  return [a1 notifyData];
}

id objc_msgSend_notifyStatus(void *a1, const char *a2, ...)
{
  return [a1 notifyStatus];
}

id objc_msgSend_nrUUID(void *a1, const char *a2, ...)
{
  return [a1 nrUUID];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return [a1 null];
}

id objc_msgSend_numExpiryTimerFires(void *a1, const char *a2, ...)
{
  return [a1 numExpiryTimerFires];
}

id objc_msgSend_onlyAllowClassC(void *a1, const char *a2, ...)
{
  return [a1 onlyAllowClassC];
}

id objc_msgSend_opMode(void *a1, const char *a2, ...)
{
  return [a1 opMode];
}

id objc_msgSend_operationalProperties(void *a1, const char *a2, ...)
{
  return [a1 operationalProperties];
}

id objc_msgSend_operationalScope(void *a1, const char *a2, ...)
{
  return [a1 operationalScope];
}

id objc_msgSend_outgoingInterfaceName(void *a1, const char *a2, ...)
{
  return [a1 outgoingInterfaceName];
}

id objc_msgSend_outputBytesPerSecond(void *a1, const char *a2, ...)
{
  return [a1 outputBytesPerSecond];
}

id objc_msgSend_packetsPerSecond(void *a1, const char *a2, ...)
{
  return [a1 packetsPerSecond];
}

id objc_msgSend_pair(void *a1, const char *a2, ...)
{
  return [a1 pair];
}

id objc_msgSend_pairedPeerBluetoothUUID(void *a1, const char *a2, ...)
{
  return [a1 pairedPeerBluetoothUUID];
}

id objc_msgSend_pairingClient(void *a1, const char *a2, ...)
{
  return [a1 pairingClient];
}

id objc_msgSend_pairingCriteria(void *a1, const char *a2, ...)
{
  return [a1 pairingCriteria];
}

id objc_msgSend_pairingProtocolVersion(void *a1, const char *a2, ...)
{
  return [a1 pairingProtocolVersion];
}

id objc_msgSend_pairingTransport(void *a1, const char *a2, ...)
{
  return [a1 pairingTransport];
}

id objc_msgSend_pairingType(void *a1, const char *a2, ...)
{
  return [a1 pairingType];
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return [a1 parameters];
}

id objc_msgSend_pathEvaluator(void *a1, const char *a2, ...)
{
  return [a1 pathEvaluator];
}

id objc_msgSend_peer(void *a1, const char *a2, ...)
{
  return [a1 peer];
}

id objc_msgSend_peerAvailabilityCheckInProgress(void *a1, const char *a2, ...)
{
  return [a1 peerAvailabilityCheckInProgress];
}

id objc_msgSend_peerEndpoint(void *a1, const char *a2, ...)
{
  return [a1 peerEndpoint];
}

id objc_msgSend_peerInstanceID(void *a1, const char *a2, ...)
{
  return [a1 peerInstanceID];
}

id objc_msgSend_peerToken(void *a1, const char *a2, ...)
{
  return [a1 peerToken];
}

id objc_msgSend_peripheralManager(void *a1, const char *a2, ...)
{
  return [a1 peripheralManager];
}

id objc_msgSend_peripheralReconnectCounter(void *a1, const char *a2, ...)
{
  return [a1 peripheralReconnectCounter];
}

id objc_msgSend_peripherals(void *a1, const char *a2, ...)
{
  return [a1 peripherals];
}

id objc_msgSend_platformBinary(void *a1, const char *a2, ...)
{
  return [a1 platformBinary];
}

id objc_msgSend_plen(void *a1, const char *a2, ...)
{
  return [a1 plen];
}

id objc_msgSend_policyIDs(void *a1, const char *a2, ...)
{
  return [a1 policyIDs];
}

id objc_msgSend_policyIdentifierString(void *a1, const char *a2, ...)
{
  return [a1 policyIdentifierString];
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return [a1 port];
}

id objc_msgSend_posrs(void *a1, const char *a2, ...)
{
  return [a1 posrs];
}

id objc_msgSend_powerOn(void *a1, const char *a2, ...)
{
  return [a1 powerOn];
}

id objc_msgSend_preferWiFiP2PRequestUpdated(void *a1, const char *a2, ...)
{
  return [a1 preferWiFiP2PRequestUpdated];
}

id objc_msgSend_preferWiFiRequestAvailable(void *a1, const char *a2, ...)
{
  return [a1 preferWiFiRequestAvailable];
}

id objc_msgSend_preferWiFiRequestUnavailable(void *a1, const char *a2, ...)
{
  return [a1 preferWiFiRequestUnavailable];
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return [a1 priority];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return [a1 processInfo];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return [a1 processName];
}

id objc_msgSend_processPendingOutgoingPackets(void *a1, const char *a2, ...)
{
  return [a1 processPendingOutgoingPackets];
}

id objc_msgSend_proposals(void *a1, const char *a2, ...)
{
  return [a1 proposals];
}

id objc_msgSend_providesPhoneCallRelaySupport(void *a1, const char *a2, ...)
{
  return [a1 providesPhoneCallRelaySupport];
}

id objc_msgSend_proxyAgentRegistration(void *a1, const char *a2, ...)
{
  return [a1 proxyAgentRegistration];
}

id objc_msgSend_proxyAgentUUID(void *a1, const char *a2, ...)
{
  return [a1 proxyAgentUUID];
}

id objc_msgSend_proxyCapability(void *a1, const char *a2, ...)
{
  return [a1 proxyCapability];
}

id objc_msgSend_proxyProviderCriteria(void *a1, const char *a2, ...)
{
  return [a1 proxyProviderCriteria];
}

id objc_msgSend_proxyProviderRequiresWiFi(void *a1, const char *a2, ...)
{
  return [a1 proxyProviderRequiresWiFi];
}

id objc_msgSend_proxyUsageRules(void *a1, const char *a2, ...)
{
  return [a1 proxyUsageRules];
}

id objc_msgSend_publicIdentity(void *a1, const char *a2, ...)
{
  return [a1 publicIdentity];
}

id objc_msgSend_publishID(void *a1, const char *a2, ...)
{
  return [a1 publishID];
}

id objc_msgSend_publishedMasqueProxyConfig(void *a1, const char *a2, ...)
{
  return [a1 publishedMasqueProxyConfig];
}

id objc_msgSend_publisherAddress(void *a1, const char *a2, ...)
{
  return [a1 publisherAddress];
}

id objc_msgSend_pushToken(void *a1, const char *a2, ...)
{
  return [a1 pushToken];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return [a1 queue];
}

id objc_msgSend_readPackets(void *a1, const char *a2, ...)
{
  return [a1 readPackets];
}

id objc_msgSend_receiveWindowPacketCount(void *a1, const char *a2, ...)
{
  return [a1 receiveWindowPacketCount];
}

id objc_msgSend_receivedMetric(void *a1, const char *a2, ...)
{
  return [a1 receivedMetric];
}

id objc_msgSend_refreshCompanionProxyAgent(void *a1, const char *a2, ...)
{
  return [a1 refreshCompanionProxyAgent];
}

id objc_msgSend_remoteClassCUnlocked(void *a1, const char *a2, ...)
{
  return [a1 remoteClassCUnlocked];
}

id objc_msgSend_remoteIDSDeviceID(void *a1, const char *a2, ...)
{
  return [a1 remoteIDSDeviceID];
}

id objc_msgSend_remoteIdentifier(void *a1, const char *a2, ...)
{
  return [a1 remoteIdentifier];
}

id objc_msgSend_remoteInnerIPv6AddressBytesClassC(void *a1, const char *a2, ...)
{
  return [a1 remoteInnerIPv6AddressBytesClassC];
}

id objc_msgSend_remoteInnerIPv6AddressBytesClassD(void *a1, const char *a2, ...)
{
  return [a1 remoteInnerIPv6AddressBytesClassD];
}

id objc_msgSend_remoteOuterEndpoint(void *a1, const char *a2, ...)
{
  return [a1 remoteOuterEndpoint];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return [a1 removeAllObjects];
}

id objc_msgSend_removeFirstObject(void *a1, const char *a2, ...)
{
  return [a1 removeFirstObject];
}

id objc_msgSend_removePolicies(void *a1, const char *a2, ...)
{
  return [a1 removePolicies];
}

id objc_msgSend_reportedToABC(void *a1, const char *a2, ...)
{
  return [a1 reportedToABC];
}

id objc_msgSend_representsIHU(void *a1, const char *a2, ...)
{
  return [a1 representsIHU];
}

id objc_msgSend_representsUpdate(void *a1, const char *a2, ...)
{
  return [a1 representsUpdate];
}

id objc_msgSend_requiresReachability(void *a1, const char *a2, ...)
{
  return [a1 requiresReachability];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return [a1 reset];
}

id objc_msgSend_resetExpiryTimer(void *a1, const char *a2, ...)
{
  return [a1 resetExpiryTimer];
}

id objc_msgSend_resetGCTimer(void *a1, const char *a2, ...)
{
  return [a1 resetGCTimer];
}

id objc_msgSend_responderDataSession(void *a1, const char *a2, ...)
{
  return [a1 responderDataSession];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return [a1 resume];
}

id objc_msgSend_resumeUnpairing(void *a1, const char *a2, ...)
{
  return [a1 resumeUnpairing];
}

id objc_msgSend_retrievePairedPeers(void *a1, const char *a2, ...)
{
  return [a1 retrievePairedPeers];
}

id objc_msgSend_route(void *a1, const char *a2, ...)
{
  return [a1 route];
}

id objc_msgSend_routerID(void *a1, const char *a2, ...)
{
  return [a1 routerID];
}

id objc_msgSend_routes(void *a1, const char *a2, ...)
{
  return [a1 routes];
}

id objc_msgSend_rssi(void *a1, const char *a2, ...)
{
  return [a1 rssi];
}

id objc_msgSend_selected(void *a1, const char *a2, ...)
{
  return [a1 selected];
}

id objc_msgSend_sendClassCUnlockedNotify(void *a1, const char *a2, ...)
{
  return [a1 sendClassCUnlockedNotify];
}

id objc_msgSend_sendImmediateRouteUpdateToAllNeighbors(void *a1, const char *a2, ...)
{
  return [a1 sendImmediateRouteUpdateToAllNeighbors];
}

id objc_msgSend_sendInvitation(void *a1, const char *a2, ...)
{
  return [a1 sendInvitation];
}

id objc_msgSend_sendSeqnoReq(void *a1, const char *a2, ...)
{
  return [a1 sendSeqnoReq];
}

id objc_msgSend_sentLocalClassCUnlockNotify(void *a1, const char *a2, ...)
{
  return [a1 sentLocalClassCUnlockNotify];
}

id objc_msgSend_seqno(void *a1, const char *a2, ...)
{
  return [a1 seqno];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return [a1 service];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return [a1 serviceName];
}

id objc_msgSend_serviceSpecificInfo(void *a1, const char *a2, ...)
{
  return [a1 serviceSpecificInfo];
}

id objc_msgSend_sessionID(void *a1, const char *a2, ...)
{
  return [a1 sessionID];
}

id objc_msgSend_setInterfaceAvailability(void *a1, const char *a2, ...)
{
  return [a1 setInterfaceAvailability];
}

id objc_msgSend_setInterfaceRank(void *a1, const char *a2, ...)
{
  return [a1 setInterfaceRank];
}

id objc_msgSend_setInterfaceSubfamily(void *a1, const char *a2, ...)
{
  return [a1 setInterfaceSubfamily];
}

id objc_msgSend_setNoACKPrioritization(void *a1, const char *a2, ...)
{
  return [a1 setNoACKPrioritization];
}

id objc_msgSend_setupGCTimer(void *a1, const char *a2, ...)
{
  return [a1 setupGCTimer];
}

id objc_msgSend_setupIPsecRetryCounter(void *a1, const char *a2, ...)
{
  return [a1 setupIPsecRetryCounter];
}

id objc_msgSend_setupInterfaces(void *a1, const char *a2, ...)
{
  return [a1 setupInterfaces];
}

id objc_msgSend_setupLocalAddress(void *a1, const char *a2, ...)
{
  return [a1 setupLocalAddress];
}

id objc_msgSend_setupVirtualInterface(void *a1, const char *a2, ...)
{
  return [a1 setupVirtualInterface];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return [a1 sharedInstance];
}

id objc_msgSend_sharedManagerForAllUsers(void *a1, const char *a2, ...)
{
  return [a1 sharedManagerForAllUsers];
}

id objc_msgSend_sharedPairingAgent(void *a1, const char *a2, ...)
{
  return [a1 sharedPairingAgent];
}

id objc_msgSend_sharedSecret(void *a1, const char *a2, ...)
{
  return [a1 sharedSecret];
}

id objc_msgSend_shouldCreateCompanionProxyAgent(void *a1, const char *a2, ...)
{
  return [a1 shouldCreateCompanionProxyAgent];
}

id objc_msgSend_sources(void *a1, const char *a2, ...)
{
  return [a1 sources];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return [a1 start];
}

id objc_msgSend_startNextPairer(void *a1, const char *a2, ...)
{
  return [a1 startNextPairer];
}

id objc_msgSend_startRequested(void *a1, const char *a2, ...)
{
  return [a1 startRequested];
}

id objc_msgSend_startTime(void *a1, const char *a2, ...)
{
  return [a1 startTime];
}

id objc_msgSend_started(void *a1, const char *a2, ...)
{
  return [a1 started];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return [a1 state];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return [a1 stop];
}

id objc_msgSend_stopAdvertising(void *a1, const char *a2, ...)
{
  return [a1 stopAdvertising];
}

id objc_msgSend_stopScan(void *a1, const char *a2, ...)
{
  return [a1 stopScan];
}

id objc_msgSend_submit(void *a1, const char *a2, ...)
{
  return [a1 submit];
}

id objc_msgSend_subtype(void *a1, const char *a2, ...)
{
  return [a1 subtype];
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return [a1 suspend];
}

id objc_msgSend_suspendWhenReady(void *a1, const char *a2, ...)
{
  return [a1 suspendWhenReady];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_tlvs(void *a1, const char *a2, ...)
{
  return [a1 tlvs];
}

id objc_msgSend_totalCountForBTClassicAdvice(void *a1, const char *a2, ...)
{
  return [a1 totalCountForBTClassicAdvice];
}

id objc_msgSend_totalCountForNonDefaultAdvice(void *a1, const char *a2, ...)
{
  return [a1 totalCountForNonDefaultAdvice];
}

id objc_msgSend_totalCountForWiFiAdvice(void *a1, const char *a2, ...)
{
  return [a1 totalCountForWiFiAdvice];
}

id objc_msgSend_totalDurationForBTClassicAdvice(void *a1, const char *a2, ...)
{
  return [a1 totalDurationForBTClassicAdvice];
}

id objc_msgSend_totalDurationForWiFiAdvice(void *a1, const char *a2, ...)
{
  return [a1 totalDurationForWiFiAdvice];
}

id objc_msgSend_totalIntervalForNonDefaultAdvice(void *a1, const char *a2, ...)
{
  return [a1 totalIntervalForNonDefaultAdvice];
}

id objc_msgSend_totalReceivedUpdates(void *a1, const char *a2, ...)
{
  return [a1 totalReceivedUpdates];
}

id objc_msgSend_trafficClass(void *a1, const char *a2, ...)
{
  return [a1 trafficClass];
}

id objc_msgSend_transportProtocol(void *a1, const char *a2, ...)
{
  return [a1 transportProtocol];
}

id objc_msgSend_txcost(void *a1, const char *a2, ...)
{
  return [a1 txcost];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return [a1 type];
}

id objc_msgSend_unpair(void *a1, const char *a2, ...)
{
  return [a1 unpair];
}

id objc_msgSend_unregisterNetworkAgent(void *a1, const char *a2, ...)
{
  return [a1 unregisterNetworkAgent];
}

id objc_msgSend_unregisterProxyAgent(void *a1, const char *a2, ...)
{
  return [a1 unregisterProxyAgent];
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedShortValue];
}

id objc_msgSend_updateRoutes(void *a1, const char *a2, ...)
{
  return [a1 updateRoutes];
}

id objc_msgSend_upgradeSessionsIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 upgradeSessionsIfNeeded];
}

id objc_msgSend_usesModernNetworkAPI(void *a1, const char *a2, ...)
{
  return [a1 usesModernNetworkAPI];
}

id objc_msgSend_usesTLS(void *a1, const char *a2, ...)
{
  return [a1 usesTLS];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return [a1 uuid];
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return [a1 version];
}

id objc_msgSend_viable(void *a1, const char *a2, ...)
{
  return [a1 viable];
}

id objc_msgSend_virtualInterface(void *a1, const char *a2, ...)
{
  return [a1 virtualInterface];
}

id objc_msgSend_watchSetupData(void *a1, const char *a2, ...)
{
  return [a1 watchSetupData];
}

id objc_msgSend_wifiAdviceMonitorTimerSource(void *a1, const char *a2, ...)
{
  return [a1 wifiAdviceMonitorTimerSource];
}

id objc_msgSend_writeToAE_plen_prefix_(void *a1, const char *a2, ...)
{
  return [a1 writeToAE:x0 plen:x1 prefix:x2];
}