void sub_100004468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 168), 8);
  _Unwind_Resume(a1);
}

void sub_10000449C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (v5)
  {
    v6 = [v5 domain];
    v7 = [*(id *)(a1 + 32) errorDomain];

    if (v6 == v7) {
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v8 code];
    }
    else {
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 174001;
    }
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100005954(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000059F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100005A04(uint64_t a1)
{
}

id sub_100005A0C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) evaluateWithObject:a2];
}

void sub_100005A18(id a1, BPSCompletion *a2)
{
}

BOOL sub_100005A20(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableDictionary);
  if (*(_DWORD *)(*(void *)(a1 + 64) + 168))
  {
    uint64_t v5 = 0;
    while (1)
    {
      v6 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v5];
      uint64_t v7 = +[NSNull null];
      if (v6 == (void *)v7) {
        break;
      }
      id v8 = (void *)v7;
      v9 = [*(id *)(a1 + 40) objectAtIndexedSubscript:v5];
      v10 = +[NSNull null];

      if (v9 != v10)
      {
        v11 = [*(id *)(a1 + 40) objectAtIndexedSubscript:v5];
        v6 = [v11 expressionValueWithObject:v3 context:0];
        if (v6)
        {
          v12 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v5];
          [v4 setObject:v6 forKeyedSubscript:v12];
        }
        goto LABEL_8;
      }
LABEL_9:
      if (++v5 >= (unint64_t)*(unsigned int *)(*(void *)(a1 + 64) + 168)) {
        goto LABEL_10;
      }
    }
    v11 = v6;
LABEL_8:

    goto LABEL_9;
  }
LABEL_10:
  int v13 = *(unsigned __int8 *)(a1 + 72);
  v14 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  v15 = +[NSDictionary dictionaryWithDictionary:v4];
  if (v13) {
    [v14 insertObject:v15 atIndex:0];
  }
  else {
    [v14 addObject:v15];
  }

  uint64_t v16 = *(void *)(a1 + 64);
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  unsigned int v17 = *(_DWORD *)(v16 + 12);
  if (v17) {
    BOOL v18 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) < v17;
  }
  else {
    BOOL v18 = 1;
  }

  return v18;
}

void sub_1000062B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000062E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000062F4(uint64_t a1)
{
}

void sub_1000062FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id v9 = v5;
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    id v7 = &__NSArray0__struct;
  }
  else {
    id v7 = v5;
  }
  id v8 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v7;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100006418(uint64_t a1)
{
  if (!a1) {
    return 4294940294;
  }
  id v2 = [objc_alloc((Class)MAAssetQuery) initWithType:@"com.apple.MobileAsset.CoreAS"];
  [v2 setDoNotBlockBeforeFirstUnlock:1];
  if ([v2 queryMetaDataSync])
  {
    uint64_t v3 = 4294967284;
  }
  else
  {
    id v17 = v2;
    uint64_t v18 = a1;
    id v4 = [v2 results];
    id v5 = malloc_type_malloc(8 * (void)[v4 count], 0x10040436913F5uLL);
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v6 = v4;
    id v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v7)
    {
      id v8 = v7;
      int v9 = 0;
      uint64_t v10 = *(void *)v20;
      uint64_t v3 = 4294967284;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v6);
          }
          uint64_t v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          if ([v12 state] == (id)2)
          {
            uint64_t v13 = [v12 getLocalUrl];
            id v14 = [v13 path];
            v15 = (const char *)[v14 UTF8String];

            if (v15)
            {
              uint64_t v3 = 0;
              v5[v9++] = strdup(v15);
            }
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v8);
    }
    else
    {
      int v9 = 0;
      uint64_t v3 = 4294967284;
    }

    *(void *)uint64_t v18 = v5;
    *(_DWORD *)(v18 + 8) = v9;

    id v2 = v17;
  }

  return v3;
}

uint64_t sub_100006610(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(void **)a1;
    if (v2)
    {
      int v3 = *(_DWORD *)(a1 + 8);
      if ((v3 & 0x80000000) == 0)
      {
        if (v3)
        {
          uint64_t v4 = 0;
          do
          {
            free(*(void **)(*(void *)a1 + 8 * v4));
            *(void *)(*(void *)a1 + 8 * v4++) = 0;
          }
          while (v4 < *(int *)(a1 + 8));
          id v2 = *(void **)a1;
        }
        free(v2);
      }
    }
  }
  return 0;
}

void sub_100006680()
{
  if (qword_1006A5D10 != -1) {
    dispatch_once(&qword_1006A5D10, &stru_10065EA90);
  }
}

void sub_1000066A8(id a1)
{
  uint64_t v1 = dispatch_queue_create("com.apple.asd.maqueue", 0);
  dispatch_async(v1, &stru_10065EAB0);
}

void sub_1000066F8(id a1)
{
  id v1 = objc_alloc_init((Class)MADownloadOptions);
  [v1 setDiscretionary:1];
  [v1 setRequiresPowerPluggedIn:1];
  [v1 setAllowsExpensiveAccess:0];
  +[MAAsset startCatalogDownload:@"com.apple.MobileAsset.CoreAS" options:v1 then:&stru_10065EAF0];
}

void sub_100006778(id a1, int64_t a2)
{
  int v3 = qword_1006AD1A0;
  if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_INFO))
  {
    int v4 = 134349056;
    int64_t v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "MA catalog download return %{public}ld", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_10000681C(int a1, unsigned int a2, int a3)
{
  BOOL v5 = a3 == 2;
  if ((a2 & 4) != 0 && !a3) {
    BOOL v5 = MKBGetDeviceLockState() == 1;
  }
  if (a2) {
    int v6 = 1;
  }
  else {
    int v6 = a1 & (a2 >> 1);
  }
  if ((a2 & 8) != 0) {
    int v7 = 1;
  }
  else {
    int v7 = (a1 ^ 1) & (a2 >> 4);
  }
  if (v6 & v7) {
    return 3;
  }
  int v8 = v5 & (a2 >> 2);
  int v9 = v7 | v6 ^ 1;
  if ((v9 & 1) == 0 && v8 == 1) {
    return 3;
  }
  int v11 = v6 | v7 | v8;
  if (v9 | v8) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = 2;
  }
  if (v11 == 1) {
    return v12;
  }
  else {
    return 0;
  }
}

void sub_100007620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100007654(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100007664(uint64_t a1)
{
}

void sub_10000766C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a2 code];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
  id v8 = v5;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100007DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 232), 8);
  _Block_object_dispose((const void *)(v40 - 200), 8);
  _Unwind_Resume(a1);
}

void sub_100007E38(uint64_t a1, int a2)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100007ED8;
  block[3] = &unk_10065EB40;
  int v7 = a2;
  long long v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  long long v6 = v4;
  dispatch_async(v2, block);
}

void sub_100007ED8(uint64_t a1)
{
  *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (float)*(int *)(a1 + 48);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100007EF4(uint64_t a1, uint64_t a2, int a3)
{
  id v3 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100007F94;
  block[3] = &unk_10065EB40;
  int v8 = a3;
  long long v5 = *(_OWORD *)(a1 + 40);
  id v4 = (id)v5;
  long long v7 = v5;
  dispatch_async(v3, block);
}

void sub_100007F94(uint64_t a1)
{
  *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (float)*(int *)(a1 + 48);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100007FB0(uint64_t a1, uint64_t a2, int a3)
{
  *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (float)a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100007FC8(uint64_t a1, int a2)
{
  *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (float)a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100008344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000836C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000837C(uint64_t a1)
{
}

void sub_100008384(uint64_t a1, void *a2)
{
}

id sub_100009A98(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = *(void **)(a1 + 32);

  return _[v2 f9MGfLOgnHPuKTrU:&__NSDictionary0__struct HY6FXG20397zwmVg:&stru_10065EBF8];
}

int64_t sub_100009AF0(id a1)
{
  return 0;
}

uint64_t sub_100009AF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100009B0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100009B20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100009B34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100009E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    +[QwDGuEabMS2vnWkj errorFromUnderlyingError:](QwDGuEabMS2vnWkj, "errorFromUnderlyingError:");
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v3 + 16))(v3, 0, v6);
  }
  else
  {
    id v4 = *(void (**)(uint64_t))(v3 + 16);
    uint64_t v5 = *(void *)(a1 + 32);
    v4(v5);
  }
}

void sub_10000A0F8(id a1)
{
  qword_1006A5D18 = objc_opt_new();

  _objc_release_x1();
}

void sub_10000A3CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 80));
  _Unwind_Resume(a1);
}

void sub_10000A404(uint64_t a1)
{
  id v2 = (void *)qword_1006AD1A0;
  if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = v2;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v5 = WeakRetained;
    int v6 = 134349312;
    id v7 = WeakRetained;
    __int16 v8 = 1026;
    unsigned int v9 = [v5 processIdentifier];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "asd (%{public}p:%{public}d): connection invalidated", (uint8_t *)&v6, 0x12u);
  }
}

void sub_10000A4EC(uint64_t a1)
{
  id v2 = (void *)qword_1006AD1A0;
  if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = v2;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    id v5 = WeakRetained;
    int v6 = 134349312;
    id v7 = WeakRetained;
    __int16 v8 = 1026;
    unsigned int v9 = [v5 processIdentifier];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "asd (%{public}p:%{public}d): connection interrupted", (uint8_t *)&v6, 0x12u);
  }
}

void sub_10000AC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000AC6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000AC7C(uint64_t a1)
{
}

void sub_10000AC84(uint64_t a1, void *a2)
{
}

uint64_t sub_10000B39C(void **a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5, int *a6)
{
  os_signpost_id_t v10 = os_signpost_id_generate((os_log_t)qword_1006AD1B0);
  int v11 = (id)qword_1006AD1B0;
  unsigned int v12 = v11;
  unint64_t v60 = v10 - 1;
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_BEGIN, v10, "psla", "enableTelemetry=YES", buf, 2u);
  }
  os_signpost_id_t spid = v10;

  qsort(a1[1], *(unsigned int *)a1, 0x1B8uLL, (int (__cdecl *)(const void *, const void *))sub_10000B980);
  uint64_t v13 = [[eTBtehykeBvfpeTP alloc] initWithdEyUJuqYjUufZYGN:a2 CYjHC6NGGdOD33W9:a3 g8citQiyynNCr9c4:a1];
  os_signpost_id_t v14 = os_signpost_id_generate((os_log_t)qword_1006AD1B0);
  v15 = (id)qword_1006AD1B0;
  uint64_t v16 = v15;
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_INTERVAL_BEGIN, v14, "lcpwf", "enableTelemetry=YES", buf, 2u);
  }

  unint64_t v17 = *(unsigned int *)a1;
  if (v17)
  {
    unint64_t v18 = 0;
    uint64_t v19 = 8;
    do
    {
      if (*(_DWORD *)((char *)a1[1] + v19) == 4)
      {
        +[XxyDq1mpwtvCuJnm x7PkBasAKbApbiZS:](XxyDq1mpwtvCuJnm, "x7PkBasAKbApbiZS:");
        unint64_t v17 = *(unsigned int *)a1;
      }
      ++v18;
      v19 += 440;
    }
    while (v18 < v17);
  }
  long long v20 = (id)qword_1006AD1B0;
  long long v21 = v20;
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
  {
    int v22 = *a6;
    *(_DWORD *)buf = 67240448;
    int v65 = v22;
    __int16 v66 = 1026;
    int v67 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_INTERVAL_END, v14, "lcpwf", "p=%{public,signpost.telemetry:number1}d, i=%{public,signpost.telemetry:number2}d", buf, 0xEu);
  }

  uint64_t v23 = *((unsigned int *)a1 + 4);
  *a5 = v23;
  v24 = (char *)malloc_type_malloc(24 * v23, 0x10000400CE834B2uLL);
  *a4 = v24;
  if (*a5)
  {
    unint64_t v25 = 0;
    v26 = v24 + 16;
    do
    {
      _DWORD *v26 = 132;
      *((void *)v26 - 2) = 1111638594;
      ++v25;
      v26 += 6;
    }
    while (v25 < *a5);
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    while (1)
    {
      unint64_t v29 = *(unsigned int *)((char *)a1[1] + v27);
      v30 = [(eTBtehykeBvfpeTP *)v13 i4KDOQicW9Xd5WBz];
      id v31 = [v30 count];

      if ((unint64_t)v31 <= v29) {
        break;
      }
      a6[1] = *(_DWORD *)((char *)a1[1] + v27);
      v32 = +[NSDate date];
      v33 = (char *)a1[1] + v27;
      int v35 = *((_DWORD *)v33 + 2);
      v34 = v33 + 8;
      if (v35 == 4 || *(uint64_t *)((char *)a1[1] + v27 + 24) <= 0)
      {
        uint64_t v36 = [(eTBtehykeBvfpeTP *)v13 PLMCCRRqEw4moT9R:v34 UtPlzRffoEpw7Ue1:a6 SFkZRA5Ek9YzhDRs:*((unsigned int *)a1 + 12) TWWnmIjkBlMfHmma:&__NSArray0__struct];
      }
      else
      {
        uint64_t v36 = [(eTBtehykeBvfpeTP *)v13 yVPDC4E5nNW5DSMa:v34 UtPlzRffoEpw7Ue1:a6 SFkZRA5Ek9YzhDRs:*((unsigned int *)a1 + 12) TWWnmIjkBlMfHmma:&__NSArray0__struct];
      }
      v37 = (void *)v36;
      [v32 timeIntervalSinceNow];
      double v39 = v38;
      uint64_t v40 = [(eTBtehykeBvfpeTP *)v13 i4KDOQicW9Xd5WBz];
      v41 = v40;
      if (v37)
      {
        [v40 insertObject:v37 atIndex:*(unsigned int *)((char *)a1[1] + v27)];
      }
      else
      {
        v42 = +[kjAS9HuCdR1m5txL cR9LfsxC1Nz4IZKu];
        [v41 insertObject:v42 atIndex:*(unsigned int *)((char *)a1[1] + v27)];
      }
      v43 = [(eTBtehykeBvfpeTP *)v13 i4KDOQicW9Xd5WBz];
      v44 = [v43 objectAtIndexedSubscript:*(unsigned int *)((char *)a1[1] + v27)];

      [v44 setYOtBxuHAYKqZrNQN:(uint64_t)(v39 * -1000.0)];
      ++v28;
      v27 += 440;
      if (v28 >= *(unsigned int *)a1) {
        goto LABEL_29;
      }
    }
    uint64_t v54 = 4294939489;
  }
  else
  {
LABEL_29:
    if (*a5)
    {
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      while (1)
      {
        v47 = (unsigned int *)((char *)a1[3] + v45);
        uint64_t v48 = *v47;
        if (v48 >= *((_DWORD *)a1 + 4)) {
          break;
        }
        v49 = [(eTBtehykeBvfpeTP *)v13 i4KDOQicW9Xd5WBz];
        [(eTBtehykeBvfpeTP *)v13 KKbGrSwDukIWFRjI:v47 i4KDOQicW9Xd5WBz:v49 TWWnmIjkBlMfHmma:&__NSArray0__struct];

        v50 = [(eTBtehykeBvfpeTP *)v13 Uh5ScKFVtUOjeURk];
        v51 = [v50 objectAtIndexedSubscript:v48];
        *(void *)(*a4 + 24 * v48) = [v51 longLongValue];

        v52 = [(eTBtehykeBvfpeTP *)v13 qnmnskUkG0QuvlrL];
        v53 = [v52 objectAtIndexedSubscript:v48];
        *(_DWORD *)(*a4 + 24 * v48 + 16) = [v53 intValue];

        ++v46;
        v45 += 160;
        if (v46 >= *a5) {
          goto LABEL_33;
        }
      }
      uint64_t v54 = 4294939491;
    }
    else
    {
LABEL_33:
      uint64_t v54 = 0;
    }
  }
  v55 = (id)qword_1006AD1B0;
  v56 = v55;
  if (v60 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v55))
  {
    int v57 = *a6;
    *(_DWORD *)buf = 67240448;
    int v65 = v57;
    __int16 v66 = 1026;
    int v67 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v56, OS_SIGNPOST_INTERVAL_END, spid, "psla", "p=%{public,signpost.telemetry:number1}d, i=%{public,signpost.telemetry:number2}d", buf, 0xEu);
  }

  return v54;
}

uint64_t sub_10000B980(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

uint64_t sub_10000C548(uint64_t a1)
{
  qword_1006A5D28 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

void sub_10000C6FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000D6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000D724(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) L2S3goqpYnHiXTRg:[a2 code]];
  uint64_t v3 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v3);
}

void sub_10000EBD0()
{
  objc_end_catch();
  JUMPOUT(0x10000ED90);
}

void sub_10000EBE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
}

void sub_10000EC9C()
{
  JUMPOUT(0x10000EE38);
}

void sub_10000ECA8()
{
}

void sub_10000ECB4()
{
  if (v0) {
    objc_end_catch();
  }

  JUMPOUT(0x10000ED90);
}

void sub_10000ED10()
{
  JUMPOUT(0x10000ED90);
}

void sub_10000ED1C()
{
  JUMPOUT(0x10000EE24);
}

void sub_10000ED2C()
{
  JUMPOUT(0x10000ED90);
}

void sub_10000ED3C()
{
}

void sub_10000ED44()
{
  JUMPOUT(0x10000ED90);
}

void sub_10000ED58()
{
  if (v0) {
    objc_end_catch();
  }

  JUMPOUT(0x10000ED90);
}

void sub_10000EDD0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  _Unwind_Resume(a1);
}

void sub_10000EDD8()
{
}

void sub_10000EE04()
{
}

void sub_10000EE14()
{
}

void sub_10000F250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_10000F4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000F620(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v9 = a2;
  id v10 = a3;
  int v11 = v10;
  if (a6)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    uint64_t v23 = 0;
    v24 = 0;
    id v12 = v10;
    sub_1004DE7D0([v12 bytes], [v12 length], &v24);
    int v14 = v13;
    id v15 = v9;
    sub_1004DE7D0([v15 bytes], [v15 length], &v23);
    if (!(v14 | v16) && v24 && v23)
    {
      id v17 = objc_alloc((Class)NSData);
      id v18 = [v17 initWithBytes:v24 length:[v12 length]];
      id v19 = objc_alloc((Class)NSData);
      id v20 = [v19 initWithBytes:v23 length:[v15 length]];
      long long v21 = 0;
    }
    else
    {
      int v22 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_100697608, v23);
      long long v21 = +[NSError errorWithDomain:v22 code:-27827 userInfo:0];

      id v20 = 0;
      id v18 = 0;
    }
    free(v24);
    free(v23);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_10000FC60(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000FC94(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000FCA4(uint64_t a1)
{
}

void sub_10000FCAC(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v6 = a3;
  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  }
  else
  {
    id v7 = [v6 domain];
    __int16 v8 = [*(id *)(a1 + 32) errorDomain];

    if (v7 == v8) {
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v6 code];
    }
    else {
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 174001;
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10001014C(id a1, int64_t a2, NSError *a3)
{
  uint64_t v3 = a3;
  if (v3 && os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
    sub_10055C4A8();
  }
}

void sub_100010358(id a1, int64_t a2, NSError *a3)
{
  uint64_t v3 = a3;
  if (v3)
  {
    id v4 = (void *)qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055C51C(v4);
    }
  }
}

void sub_10001061C(id a1, int64_t a2, NSError *a3)
{
  uint64_t v3 = a3;
  if (v3)
  {
    id v4 = (void *)qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055C5AC(v4);
    }
  }
}

void sub_1000108B4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_1000108E0()
{
  return v0;
}

void sub_100011564(void *a1, int a2)
{
  if (a2 == 1)
  {
    id v9 = objc_begin_catch(a1);
    uint64_t v10 = qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_FAULT)) {
      sub_10055C6CC((uint64_t)v9, v10);
    }
    *(void *)(v6 - 136) = 170001;

    objc_end_catch();
    JUMPOUT(0x1000113BCLL);
  }

  _Block_object_dispose(v13, 8);
  JUMPOUT(0x100011614);
}

uint64_t sub_10001161C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001162C(uint64_t a1)
{
}

void sub_100011634(uint64_t a1, void *a2)
{
}

void sub_1000117F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100011950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100011978(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(a1 + 16))(a1, &unk_100583BA8, 18213);
}

uint64_t sub_100011A30(uint64_t a1)
{
  qword_1006A5D38 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

void sub_100011B38(uint64_t a1)
{
  id v10 = +[NSDate date];
  id v2 = +[XxyDq1mpwtvCuJnm sharedInstance];
  *(CLLocationAccuracy *)int v11 = kCLLocationAccuracyBestForNavigation;
  *(CLLocationAccuracy *)&v11[1] = kCLLocationAccuracyBest;
  *(CLLocationAccuracy *)&v11[2] = kCLLocationAccuracyNearestTenMeters;
  *(CLLocationAccuracy *)&v11[3] = kCLLocationAccuracyHundredMeters;
  *(CLLocationAccuracy *)&v11[4] = kCLLocationAccuracyKilometer;
  *(CLLocationAccuracy *)&v11[5] = kCLLocationAccuracyThreeKilometers;
  uint64_t v3 = *(void *)(a1 + 32);
  if ((*(_DWORD *)(v3 + 4) & 0xFFFFFFFE) == 4)
  {
    id v4 = +[eTBtehykeBvfpeTP rsNB9HkZVEH0l6fT:*(void *)(v3 + 24) gsx0MJUoOpcxcozG:*(unsigned int *)(v3 + 32)];
    [v2 initLocationManager:v4 dko5Pwm7el1Ulopu:*(double *)&v11[*(unsigned int *)(*(void *)(a1 + 32) + 36)]];
    do
    {
      id v5 = +[NSRunLoop currentRunLoop];
      uint64_t v6 = +[NSDate dateWithTimeIntervalSinceNow:0.03];
      [v5 runUntilDate:v6];

      [v10 timeIntervalSinceNow];
      double v8 = v7;
    }
    while (([v2 LjU00AjDrcTJbVJD] & 1) == 0 && v8 > -0.8);
    if ((int)[v2 YGGzx6XAo42A7s6x] >= 3)
    {
      id v9 = [v2 N8Azi3NI6QrNPsLP];
      [v9 requestLocation];
    }
    id v2 = 0;
  }
}

void sub_100011DA8(id a1)
{
  qword_1006A5D48 = objc_opt_new();

  _objc_release_x1();
}

id sub_100012880(uint64_t a1)
{
  return [*(id *)(a1 + 32) initLocationManager:*(void *)(a1 + 40) dko5Pwm7el1Ulopu:*(double *)(a1 + 48)];
}

uint64_t sub_100013214(uint64_t a1)
{
  qword_1006A5D50 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

intptr_t sub_100013DDC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = *(NSObject **)(a1 + 32);

  return dispatch_semaphore_signal(v2);
}

void sub_100013EB8(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 serialNumber];
  id v4 = +[NFHardwareManager sharedHardwareManager];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100013F90;
  v8[3] = &unk_10065EF88;
  id v5 = *(id *)(a1 + 32);
  id v9 = v3;
  id v10 = v5;
  id v6 = v3;
  id v7 = [v4 startSecureElementManagerSessionWithPriority:v8];
}

void sub_100013F90(uint64_t a1, void *a2, id a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3)
  {
    a3 = 0;
    id v7 = 0;
  }
  else
  {
    id v12 = 0;
    id v13 = 0;
    unsigned int v8 = [v5 getCryptogram:&v13 challengeResponse:&v12];
    id v9 = v13;
    id v10 = v12;
    int v11 = v10;
    id v7 = 0;
    if (v8)
    {
      a3 = v10;
      id v7 = v9;
    }
  }
  [v6 endSessionWithCompletion:&stru_10065EF60];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10001479C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000147B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000147C8(uint64_t a1)
{
}

void sub_1000147D0(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100014C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100014C70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100014C80(uint64_t a1)
{
}

void sub_100014C88(uint64_t a1, void *a2)
{
}

void sub_100014F0C(id a1)
{
  qword_1006A5D60 = [[ASCoreDataManager alloc] initWithStore:@"Model56902430i"];

  _objc_release_x1();
}

void sub_1000157B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_1000159B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (v4)
  {
    if ([v4 code] == (id)259 || objc_msgSend(v5, "code") == (id)26)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      id v6 = qword_1006AD1A0;
      if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
        sub_10055CB28(v6, v7, v8, v9, v10, v11, v12, v13);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055CAC0();
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_100015A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100015CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100015FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_100016310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001640C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016500(uint64_t a1)
{
  dispatch_time_t v2 = dispatch_time(0, 15000000000);
  uint64_t v3 = dispatch_get_global_queue(9, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000165E0;
  block[3] = &unk_10065F048;
  id v4 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v6 = v4;
  id v7 = *(id *)(a1 + 48);
  dispatch_after(v2, v3, block);
}

void sub_1000165E0(void *a1)
{
  dispatch_time_t v2 = +[NSFileManager defaultManager];
  uint64_t v3 = *(void *)(a1[4] + 24);
  id v21 = 0;
  id v4 = [v2 contentsOfDirectoryAtURL:v3 includingPropertiesForKeys:0 options:4 error:&v21];
  id v15 = v21;
  if (v15)
  {
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_FAULT)) {
      sub_10055CC90();
    }
  }
  else
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v5 = v4;
    id v6 = [v5 countByEnumeratingWithState:&v17 objects:v24 count:16];
    int v14 = v4;
    id v7 = 0;
    if (v6)
    {
      uint64_t v8 = *(void *)v18;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          uint64_t v11 = [v10 lastPathComponent:v14];
          if ([v11 containsString:a1[5]]
            && ([v11 containsString:a1[6]] & 1) == 0)
          {
            id v16 = v7;
            [v2 removeItemAtURL:v10 error:&v16];
            id v12 = v16;

            if (v12)
            {
              uint64_t v13 = qword_1006AD1A0;
              if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                id v23 = v12;
                _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to delete old persistent store: %@", buf, 0xCu);
              }
              id v7 = v12;
            }
            else
            {
              id v7 = 0;
            }
          }
        }
        id v6 = [v5 countByEnumeratingWithState:&v17 objects:v24 count:16];
      }
      while (v6);
    }

    id v4 = v14;
  }
}

void sub_100016830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016A00(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    if (!*(void *)(a19 + 40))
    {
      v30 = +[NSString stringWithFormat:@"Error cleaning up cache: %@"];
      *(void *)(v27 - 88) = NSLocalizedDescriptionKey;
      *(void *)(v27 - 80) = v30;
      id v31 = +[NSDictionary dictionaryWithObjects:v27 - 80 forKeys:v27 - 88 count:1];
      v32 = +[NSString stringWithUTF8String:off_100697600];
      id v33 = [v31 copy];
      *unint64_t v25 = +[NSError errorWithDomain:v32 code:-27109 userInfo:v33];

      JUMPOUT(0x1000169ACLL);
    }
    JUMPOUT(0x1000169A4);
  }
  _Block_object_dispose(&a18, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100016B6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100016B7C(uint64_t a1)
{
}

void sub_100016B84(void *a1)
{
  id v2 = [objc_alloc((Class)NSFetchRequest) initWithEntityName:a1[4]];
  [v2 setPredicate:a1[5]];
  id v3 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v2];
  [v3 setResultType:2];
  id v4 = (void *)a1[6];
  uint64_t v5 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v5 + 40);
  id v6 = [v4 executeRequest:v3 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  id v7 = qword_1006AD1A0;
  if (*(void *)(*(void *)(a1[7] + 8) + 40))
  {
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[ASCoreDataManager] Executed batch delete request for entity successfully", buf, 2u);
    }
  }
  else
  {
    uint64_t v8 = (id)qword_1006AD1A0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a1[4];
      uint64_t v10 = [*(id *)(*(void *)(a1[7] + 8) + 40) localizedDescription];
      sub_10055CD04(v9, v10, buf, v8);
    }
  }
}

void sub_100016D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016E00(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100016E1C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t start()
{
  uint64_t v0 = qword_1006AD1A0;
  if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Starting", v18, 2u);
  }
  os_log_t v2 = os_log_create("com.apple.asd.telemetry", "api");
  id v3 = (void *)qword_1006AD1A8;
  qword_1006AD1A8 = (uint64_t)v2;

  os_log_t v4 = os_log_create("com.apple.asd.telemetry", "dframe");
  uint64_t v5 = (void *)qword_1006AD1B0;
  qword_1006AD1B0 = (uint64_t)v4;

  os_log_t v6 = os_log_create("com.apple.asd", "daemon");
  id v7 = (void *)qword_1006AD1A0;
  qword_1006AD1A0 = (uint64_t)v6;

  uint64_t v8 = +[ASDConfigurationManager shared];
  [v8 pushInitialCoreODIConfig];

  if ((_set_user_dir_suffix() & 1) == 0)
  {
    uint64_t v9 = qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055CDB0(v9);
    }
  }
  uint64_t v10 = +[EvuyxgzfZZU4un3X sharedInstance];
  id v11 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.asd.scoring"];
  [v11 setDelegate:v10];
  [v11 resume];
  id v12 = +[ASXPCActivityManager shared];
  [v12 registerWithActivity:0];

  uint64_t v13 = +[ASXPCActivityManager shared];
  [v13 registerWithActivity:1];

  int v14 = +[RavioliManagerObjC shared];

  if (!v14)
  {
    id v15 = qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055CD6C(v15);
    }
  }
  +[PushCoordinator configurePush];
  id v16 = +[BindingsChangeObserver shared];
  [v16 registerObservers];

  CFRunLoopRun();

  return 1;
}

void sub_10001789C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_100017958(id a1)
{
  qword_1006A5D78 = objc_opt_new();

  _objc_release_x1();
}

void sub_100017C20(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x100017B10);
  }

  _Unwind_Resume(exc_buf);
}

void sub_100018258()
{
  objc_end_catch();
  JUMPOUT(0x100018270);
}

void sub_10001827C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100018288()
{
}

void sub_100018290()
{
}

void sub_100018298()
{
}

void sub_100018318(id a1)
{
  v3[0] = PHAssetPropertySetLocalDate;
  v3[1] = PHAssetPropertySetOriginalMetadata;
  v3[2] = PHAssetPropertySetPhotosOneUp;
  v3[3] = PHAssetPropertySetPhotosInfoPanelExtended;
  v3[4] = PHAssetPropertySetPhotoIris;
  v3[5] = PHAssetPropertySetDescription;
  v3[6] = PHAssetPropertySetComments;
  v3[7] = PHAssetPropertySetSceneAnalysis;
  v3[8] = PHAssetPropertySetAnalysisState;
  v3[9] = PHAssetPropertySetUserActivity;
  v3[10] = PHAssetPropertySetAdjustment;
  v3[11] = PHAssetPropertySetCuration;
  v3[12] = PHAssetPropertySetAesthetic;
  v3[13] = PHAssetPropertySetMediaAnalysis;
  v3[14] = PHAssetPropertySetImport;
  v3[15] = PHAssetPropertySetSceneprint;
  v3[16] = PHAssetPropertySetDestinationAssetCopy;
  v3[17] = PHAssetPropertySetGridMetadata;
  v3[18] = PHAssetPropertySetCoarseLocation;
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:19];
  os_log_t v2 = (void *)qword_1006A5D88;
  qword_1006A5D88 = v1;
}

void sub_1000186B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1000189EC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();

    JUMPOUT(0x10001897CLL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_100018D48(void *a1, int a2)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    if (*(void *)(v3 + 16)) {
      id v8 = v5;
    }
    objc_end_catch();
    JUMPOUT(0x100018CCCLL);
  }

  objc_end_catch();
  JUMPOUT(0x100018CD8);
}

void sub_100018DB4()
{
  JUMPOUT(0x100018DC8);
}

void sub_1000190B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100019220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000193C4(void *a1, int a2)
{
  uint64_t v5 = v4;

  objc_begin_catch(a1);
  if (a2 == 2)
  {
    *os_log_t v2 = 134;
    objc_end_catch();
    JUMPOUT(0x10001939CLL);
  }

  objc_exception_rethrow();
}

void sub_100019414(_Unwind_Exception *a1)
{
  objc_end_catch();

  _Unwind_Resume(a1);
}

void sub_10001984C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  objc_begin_catch(a1);
  if (a2 == 2)
  {
    void *v11 = 134;
    objc_end_catch();

    JUMPOUT(0x1000197D0);
  }

  objc_exception_rethrow();
}

void sub_100019910()
{
  objc_end_catch();

  JUMPOUT(0x1000198B4);
}

void sub_100019928()
{
}

void sub_100019A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100019C70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100019C80(uint64_t a1)
{
}

void sub_100019C88(void *a1)
{
  uint64_t v3 = (uint64_t)(a1 + 7);
  uint64_t v2 = a1[7];
  os_log_t v4 = (void *)a1[4];
  uint64_t v5 = *(void *)(v3 - 16);
  uint64_t v6 = *(void *)(v2 + 8);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = [v4 executeRequest:v5 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v8 = *(void *)(*(void *)(v3 - 8) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  uint64_t v10 = *(void **)(*(void *)(*(void *)(v3 - 8) + 8) + 40);
  if (v10)
  {
    uint64_t v11 = [v10 finalResult];
    id v12 = [v11 firstObject];

    if (v12)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v13 = [v12 ravioli];
        uint64_t v14 = *(void *)(a1[8] + 8);
        uint64_t v15 = *(void **)(v14 + 40);
        *(void *)(v14 + 40) = v13;
      }
      else
      {
        uint64_t v18 = qword_1006AD1A0;
        if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
          sub_10055CFD4(v18);
        }
      }
    }
    else
    {
      uint64_t v17 = qword_1006AD1A0;
      if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
        sub_10055CF90(v17);
      }
    }
  }
  else
  {
    uint64_t v16 = (void *)qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055CEAC(v3, v16);
    }
  }
}

void sub_100019EE4(id a1)
{
  qword_1006A5D98 = objc_opt_new();

  _objc_release_x1();
}

void sub_10001A60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A638(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001A648(uint64_t a1)
{
}

void sub_10001A650(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055D090(v7, v6);
    }
  }
  else
  {
    id v8 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v9 = [v5 authenticationCertificateSignatures];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10001A784;
    v14[3] = &unk_10065F120;
    id v10 = v8;
    id v15 = v10;
    [v9 enumerateObjectsUsingBlock:v14];

    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
    id v13 = v10;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10001A784(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 serverVerifiableEncoding];
  os_log_t v4 = [v3 dataUsingEncoding:4];

  if (v4)
  {
    [*(id *)(a1 + 32) addObject:v4];
    id v5 = qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "adding IDS data", v6, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR))
  {
    sub_10055D138();
  }
}

id sub_10001AF1C(uint64_t a1)
{
  v4[0] = @"errorCode";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  v4[1] = @"type";
  v5[0] = v1;
  v5[1] = &off_100688298;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

void sub_10001B808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

void sub_10001B864(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1[4] + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v7;
  id v17 = v7;

  uint64_t v12 = *(void *)(a1[5] + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v8;
  id v14 = v8;

  uint64_t v15 = *(void *)(a1[6] + 8);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v9;
}

id sub_10001B920(uint64_t a1)
{
  v4[0] = @"errorCode";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  v4[1] = @"type";
  v5[0] = v1;
  v5[1] = &off_1006882B0;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

void sub_10001C65C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C6C8(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1[4] + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v7;
  id v17 = v7;

  uint64_t v12 = *(void *)(a1[5] + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v8;
  id v14 = v8;

  uint64_t v15 = *(void *)(a1[6] + 8);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v9;
}

void sub_10001C788(uint64_t a1)
{
  id v2 = +[PrecomputationManager shared];
  [v2 captureWithBindings:*(void *)(a1 + 32)];
}

id sub_10001C7E0(uint64_t a1)
{
  v4[0] = @"errorCode";
  uint64_t v1 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 32)];
  v4[1] = @"type";
  v5[0] = v1;
  v5[1] = &off_1006882C8;
  id v2 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

void sub_10001D2A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_10001D5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *exc_buf, uint64_t a11, uint64_t a12)
{
  if (a2)
  {

    objc_begin_catch(a1);
    if (a2 == 2)
    {
      objc_end_catch();
      JUMPOUT(0x10001D498);
    }

    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_10001D768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001D860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001DBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001DC18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001DC28(uint64_t a1)
{
}

void sub_10001DC30(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  if (!*(void *)(v6 + 24))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  }
  *(void *)(v6 + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10001E4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_10001E4E8(uint64_t a1, uint64_t a2, int a3)
{
  *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (float)a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10001E500(uint64_t a1, int a2)
{
  *(float *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (float)a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10001E7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001E80C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001E81C(uint64_t a1)
{
}

void sub_10001E824(uint64_t a1, void *a2)
{
}

uint64_t sub_10001E9D8(uint64_t a1)
{
  qword_1006A5DA8 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

void sub_10001F018(id a1)
{
  qword_1006A5DB8 = objc_opt_new();

  _objc_release_x1();
}

void sub_10001F634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001F658(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001F668(uint64_t a1)
{
}

void sub_10001F670(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = objc_alloc_init((Class)NSMutableDictionary);
  if (a3)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 173001;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v24 = v5;
    id obj = v5;
    id v7 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v27;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v27 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          uint64_t v12 = [v11 protocolConfiguration:v24];
          id v13 = [v12 type];

          uint64_t v14 = [v11 connection];
          id v15 = [v14 status];

          id v16 = [v11 isFromMDM];
          uint64_t v17 = +[NSNumber numberWithInteger:v13];
          [v6 setObject:v17 forKeyedSubscript:@"p"];

          uint64_t v18 = +[NSNumber numberWithInteger:v15];
          [v6 setObject:v18 forKeyedSubscript:@"s"];

          uint64_t v19 = +[NSNumber numberWithBool:v16];
          [v6 setObject:v19 forKeyedSubscript:@"m"];

          if (v15 == (id)3)
          {
            long long v20 = [v11 connection];
            id v21 = [v20 connectedDate];

            if (v21) {
              [v6 setObject:v21 forKeyedSubscript:@"t"];
            }
          }
          else
          {
            [v6 removeObjectForKey:@"t"];
          }
          int v22 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          id v23 = +[NSDictionary dictionaryWithDictionary:v6];
          [v22 addObject:v23];
        }
        id v8 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
      }
      while (v8);
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    id v5 = v24;
  }
}

void sub_10001F9E8(id a1)
{
  qword_1006A5DC8 = objc_alloc_init(PJXBDBF1h0EU80dy);

  _objc_release_x1();
}

void sub_10001FA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001FAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001FB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001FE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_10001FF28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001FF38(uint64_t a1)
{
}

void sub_10001FF40(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void **)(a1[4] + 16);
  uint64_t v4 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v3 executeRequest:v2 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1000200DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_100020108(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:*(void *)(a1 + 32)];
  [v2 setResultType:2];
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v3 = a1 + 48;
  uint64_t v5 = *(void **)(*(void *)(v3 - 8) + 16);
  uint64_t v6 = *(void *)(v4 + 8);
  id obj = *(id *)(v6 + 40);
  id v7 = [v5 executeRequest:v2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  id v8 = qword_1006AD1A0;
  if (*(void *)(*(void *)(*(void *)v3 + 8) + 40))
  {
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Executed batch delete request for JSONBag entity successfully.", v15, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR))
  {
    sub_10055D5A0(v3, v8, v9, v10, v11, v12, v13, v14);
  }
}

void sub_100020208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000203F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v4 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100020440(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v2 = *(id *)(a1 + 32);
    id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v13;
LABEL_4:
      uint64_t v5 = 0;
      while (1)
      {
        if (*(void *)v13 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v12 + 1) + 8 * v5);
        if (objc_msgSend(v6, "PJ7tY2vmxQ3CBhNO", (void)v12))
        {
          id v7 = [v6 dfVal];
          uint64_t v8 = +[kjAS9HuCdR1m5txL Xw2iAzNBHudJx7Ph:v7];
          uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v10 = *(void **)(v9 + 40);
          *(void *)(v9 + 40) = v8;

          if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) qfSDGTGvqd3Hruzg] == (id)149) {
            [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setQfSDGTGvqd3Hruzg:163000];
          }
          uint64_t v11 = [v6 presentTime];
          [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setWgZJLy8f4tn41Pge:v11];
        }
        if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
          break;
        }
        if (v3 == (id)++v5)
        {
          id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
          if (v3) {
            goto LABEL_4;
          }
          break;
        }
      }
    }
  }
}

void sub_100020600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020638(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v2 = *(id *)(a1 + 32);
    id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v13;
LABEL_4:
      uint64_t v5 = 0;
      while (1)
      {
        if (*(void *)v13 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v12 + 1) + 8 * v5);
        if (objc_msgSend(v6, "PJ7tY2vmxQ3CBhNO", (void)v12))
        {
          id v7 = [v6 dfVal];
          uint64_t v8 = +[kjAS9HuCdR1m5txL Xw2iAzNBHudJx7Ph:v7];
          uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v10 = *(void **)(v9 + 40);
          *(void *)(v9 + 40) = v8;

          if ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) qfSDGTGvqd3Hruzg] == (id)149) {
            [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setQfSDGTGvqd3Hruzg:163000];
          }
          uint64_t v11 = [v6 presentTime];
          [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setWgZJLy8f4tn41Pge:v11];
        }
        if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
          break;
        }
        if (v3 == (id)++v5)
        {
          id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
          if (v3) {
            goto LABEL_4;
          }
          break;
        }
      }
    }
  }
}

void sub_1000207F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000209C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000209E8(uint64_t a1)
{
  id v2 = +[NSEntityDescription entityForName:@"DB_C56902430" inManagedObjectContext:*(void *)(*(void *)(a1 + 32) + 16)];
  if (v2)
  {
    id v3 = [*(id *)(a1 + 40) lL9A0cjB5y6UgZsI];
    if (v3)
    {
      uint64_t v4 = [[ASCacheEntry alloc] initWithEntity:v2 insertIntoManagedObjectContext:*(void *)(*(void *)(a1 + 32) + 16)];
      uint64_t v5 = +[NSDate date];
      [(ASCacheEntry *)v4 setPresentTime:v5];

      [(ASCacheEntry *)v4 setDf_ttl:*(void *)(*(void *)(a1 + 48) + 32)];
      uint64_t v6 = [v3 base64EncodedStringWithOptions:2];
      [(ASCacheEntry *)v4 setDfVal:v6];

      [(ASCacheEntry *)v4 setProfID:*(unsigned int *)(a1 + 56)];
      -[ASCacheEntry setQueryKey:](v4, "setQueryKey:", [*(id *)(a1 + 40) JmiV9VW8P3Gxz1H7]);
      id v7 = [(ASCacheEntry *)v4 nC4QvxwoXaT2I88i];
      [(ASCacheEntry *)v4 setMacVal:v7];

      [*(id *)(a1 + 32) cZK3HwMuoGcCgDQI];
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR))
  {
    sub_10055D6FC();
  }
}

void sub_100020B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100020C70(uint64_t a1)
{
  id v2 = +[NSEntityDescription entityForName:@"DB_R101288420" inManagedObjectContext:*(void *)(*(void *)(a1 + 32) + 16)];
  if (v2)
  {
    id v3 = [*(id *)(a1 + 40) lL9A0cjB5y6UgZsI];
    if (v3)
    {
      uint64_t v4 = [[ASClass101288420 alloc] initWithEntity:v2 insertIntoManagedObjectContext:*(void *)(*(void *)(a1 + 32) + 16)];
      [(ASClass101288420 *)v4 setVersion:2];
      uint64_t v5 = +[NSDate date];
      [(ASClass101288420 *)v4 setPresentTime:v5];

      [(ASClass101288420 *)v4 setDfMaxAge:*(void *)(*(void *)(a1 + 48) + 32)];
      uint64_t v6 = [v3 base64EncodedStringWithOptions:2];
      [(ASClass101288420 *)v4 setDfVal:v6];

      [(ASClass101288420 *)v4 setProfID:*(unsigned int *)(a1 + 56)];
      -[ASClass101288420 setQueryKey:](v4, "setQueryKey:", [*(id *)(a1 + 40) JmiV9VW8P3Gxz1H7]);
      id v7 = [(ASClass101288420 *)v4 nC4QvxwoXaT2I88i];
      [(ASClass101288420 *)v4 setMacVal:v7];

      [*(id *)(a1 + 32) cZK3HwMuoGcCgDQI];
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR))
  {
    sub_10055D730();
  }
}

void sub_100020DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020F04(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  unint64_t v25 = v18;
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    id v21 = [objc_alloc((Class)NSString) initWithFormat:@"Error cleaning up device data fields cache: %@"];
    *(void *)(v19 - 72) = NSLocalizedDescriptionKey;
    *(void *)(v19 - 64) = v21;
    int v22 = +[NSDictionary dictionaryWithObjects:v19 - 64 forKeys:v19 - 72 count:1];
    id v23 = +[NSString stringWithUTF8String:off_100697600];
    id v24 = [v22 copy];
    *unint64_t v25 = +[NSError errorWithDomain:v23 code:-27109 userInfo:v24];

    JUMPOUT(0x100020EB8);
  }
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(exc_buf);
}

void sub_100021030(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) YKIcrg8ijyspX6ho:0 forVersion:1 entityName:@"DB_R103115069"];
  id v3 = [v2 finalResult];
  uint64_t v4 = v3;
  if (v3)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v10;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v5);
          }
          [*(id *)(*(void *)(a1 + 32) + 16) deleteObject:*(void *)(*((void *)&v9 + 1) + 8 * (void)v8), (void)v9];
          ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          uint64_t v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v5 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }

    [*(id *)(a1 + 32) cZK3HwMuoGcCgDQI];
  }
}

void sub_100021180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100021630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v44 - 208), 8);

  _Block_object_dispose((const void *)(v44 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100021764(uint64_t a1)
{
  long long v13 = [*(id *)(a1 + 32) YKIcrg8ijyspX6ho:0 forVersion:1];
  long long v12 = [v13 finalResult];
  if (v12)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id obj = [objc_alloc((Class)NSMutableArray) initWithArray:v12];
    id v2 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v16;
      do
      {
        uint64_t v4 = 0;
        do
        {
          if (*(void *)v16 != v3) {
            objc_enumerationMutation(obj);
          }
          id v5 = *(void **)(*((void *)&v15 + 1) + 8 * (void)v4);
          id v6 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 queryKey]);
          uint64_t v7 = [*(id *)(a1 + 40) objectForKeyedSubscript:v6];
          if (v7)
          {
            uint64_t v8 = [v5 presentTime];
            long long v9 = [v7 presentTime];
            BOOL v10 = [v8 compare:v9] == (id)1;
          }
          else
          {
            BOOL v10 = 0;
          }
          if (*(unsigned char *)(a1 + 56) || ([v5 PJ7tY2vmxQ3CBhNO] ^ 1 | v10) == 1)
          {
            [*(id *)(*(void *)(a1 + 32) + 16) deleteObject:v5];
            ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
          }
          else
          {
            [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v6];
          }

          uint64_t v4 = (char *)v4 + 1;
        }
        while (v2 != v4);
        id v11 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
        id v2 = v11;
      }
      while (v11);
    }

    [*(id *)(a1 + 32) cZK3HwMuoGcCgDQI];
  }
}

void sub_1000219A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100021A2C(uint64_t a1)
{
  id v2 = objc_alloc((Class)NSDate);
  uint64_t v3 = +[ASDConfigurationManager shared];
  [v3 cacheV2MaxAge];
  id v5 = [v2 initWithTimeIntervalSinceNow:-v4];

  id v6 = +[NSFetchRequest fetchRequestWithEntityName:@"DB_R101288420"];
  if (!*(unsigned char *)(a1 + 56))
  {
    uint64_t v7 = +[NSPredicate predicateWithFormat:@"presentTime < %@", v5];
    [v6 setPredicate:v7];
  }
  id v8 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v6];
  [v8 setResultType:2];
  long long v9 = *(void **)(*(void *)(a1 + 32) + 16);
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v10 + 40);
  id v11 = [v9 executeRequest:v8 error:&obj];
  objc_storeStrong((id *)(v10 + 40), obj);
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)
    || ([v11 result],
        long long v12 = objc_claimAutoreleasedReturnValue(),
        self,
        long long v13 = objc_claimAutoreleasedReturnValue(),
        char isKindOfClass = objc_opt_isKindOfClass(),
        v13,
        v12,
        (isKindOfClass & 1) == 0))
  {
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055D764();
    }
  }
  else
  {
    long long v15 = [v11 result];
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += [v15 integerValue];
  }
}

void sub_100021C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100021C70(void *a1)
{
  id v23 = +[NSFetchRequest fetchRequestWithEntityName:@"DB_R101288420"];
  [v23 setPropertiesToFetch:&off_1006885F8];
  [v23 setPropertiesToGroupBy:&off_100688610];
  [v23 setResultType:2];
  id v2 = *(void **)(a1[4] + 16);
  uint64_t v3 = *(void *)(a1[5] + 8);
  id obj = *(id *)(v3 + 40);
  id v24 = [v2 executeFetchRequest:v23 error:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  double v4 = v24;
  if (*(void *)(*(void *)(a1[5] + 8) + 40)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v24 == 0;
  }
  if (!v5)
  {
    id v6 = +[NSFetchRequest fetchRequestWithEntityName:@"DB_R101288420"];
    uint64_t v7 = +[NSSortDescriptor sortDescriptorWithKey:@"presentTime" ascending:0];
    int v35 = v7;
    id v8 = +[NSArray arrayWithObjects:&v35 count:1];
    [v6 setSortDescriptors:v8];

    [v6 setFetchOffset:1];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v25 = v24;
    id v9 = [v25 countByEnumeratingWithState:&v29 objects:v34 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v30;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v30 != v10) {
            objc_enumerationMutation(v25);
          }
          long long v12 = [*(id *)(*((void *)&v29 + 1) + 8 * i) objectForKeyedSubscript:@"queryKey"];
          long long v13 = +[NSPredicate predicateWithFormat:@"queryKey == %@", v12];
          [v6 setPredicate:v13];

          id v14 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v6];
          [v14 setResultType:2];
          long long v15 = *(void **)(a1[4] + 16);
          uint64_t v16 = *(void *)(a1[5] + 8);
          id v28 = *(id *)(v16 + 40);
          long long v17 = [v15 executeRequest:v14 error:&v28];
          objc_storeStrong((id *)(v16 + 40), v28);
          if (*(void *)(*(void *)(a1[5] + 8) + 40)
            || ([v17 result],
                long long v18 = objc_claimAutoreleasedReturnValue(),
                self,
                uint64_t v19 = objc_claimAutoreleasedReturnValue(),
                char isKindOfClass = objc_opt_isKindOfClass(),
                v19,
                v18,
                (isKindOfClass & 1) == 0))
          {
            int v22 = qword_1006AD1A0;
            if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
              sub_10055D798(&buf, v27, v22);
            }
          }
          else
          {
            id v21 = [v17 result];
            *(void *)(*(void *)(a1[6] + 8) + 24) += [v21 integerValue];
          }
        }
        id v9 = [v25 countByEnumeratingWithState:&v29 objects:v34 count:16];
      }
      while (v9);
    }

    double v4 = v24;
  }
}

void sub_100021FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10002219C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002234C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) bag];

  return _objc_release_x1();
}

void sub_1000224C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022518()
{
}

void sub_100022520()
{
}

void sub_100022528()
{
}

void sub_100022530()
{
}

void sub_100022770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

id sub_1000227E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v3 executeRequest:v2 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return [*(id *)(a1 + 32) cZK3HwMuoGcCgDQI];
}

void sub_100022AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_100022B6C(uint64_t a1)
{
  uint64_t v2 = +[NSEntityDescription entityForName:@"DB_GeoCodeCache" inManagedObjectContext:*(void *)(a1 + 32)];
  for (unint64_t i = 0; (unint64_t)[*(id *)(a1 + 40) count] > i; ++i)
  {
    uint64_t v4 = [[ASGeoCodeCacheEntry alloc] initWithEntity:v2 insertIntoManagedObjectContext:*(void *)(a1 + 32)];
    uint64_t v5 = [*(id *)(a1 + 48) objectAtIndexedSubscript:i];
    uint64_t v6 = self;
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass) {
      goto LABEL_6;
    }
    id v8 = self;
    char v9 = objc_opt_isKindOfClass();

    if (v9)
    {

      uint64_t v5 = 0;
LABEL_6:
      [(ASGeoCodeCacheEntry *)v4 setLocation:v5];
      uint64_t v10 = [*(id *)(a1 + 40) objectAtIndexedSubscript:i];
      [(ASGeoCodeCacheEntry *)v4 setAddress:v10];

      id v11 = *(void **)(a1 + 56);
      long long v12 = [*(id *)(a1 + 40) objectAtIndexedSubscript:i];
      long long v13 = [v11 canonicalStringForAddress:v12];
      [(ASGeoCodeCacheEntry *)v4 setAddressForLookup:v13];

      [(ASGeoCodeCacheEntry *)v4 setUpdatedAt:*(void *)(a1 + 64)];
      [(ASGeoCodeCacheEntry *)v4 setLastAccessed:*(void *)(a1 + 64)];
      goto LABEL_7;
    }
    id v14 = qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055D820(&buf, v38, v14);
    }
LABEL_7:
  }
  [*(id *)(a1 + 56) cZK3HwMuoGcCgDQI];
  long long v15 = +[ASGeoCodeCacheEntry fetchRequest];
  uint64_t v16 = *(void **)(a1 + 32);
  id v36 = 0;
  long long v17 = (char *)[v16 countForFetchRequest:v15 error:&v36];
  id v18 = v36;
  if (v18)
  {
    id v19 = v18;
    long long v20 = (id)qword_1006AD1A0;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      id v21 = [v19 localizedDescription];
      sub_10055D8B8(v21, v41, v20);
    }
    goto LABEL_26;
  }
  if ((unint64_t)v17 >= 0x3D)
  {
    [v15 setFetchLimit:v17 - 50];
    id v22 = [objc_alloc((Class)NSSortDescriptor) initWithKey:@"lastAccessed" ascending:1];
    id v40 = v22;
    id v23 = +[NSArray arrayWithObjects:&v40 count:1];
    [v15 setSortDescriptors:v23];

    [v15 setReturnsObjectsAsFaults:1];
    id v24 = *(void **)(a1 + 32);
    id v35 = 0;
    long long v20 = [v24 executeFetchRequest:v15 error:&v35];
    id v19 = v35;
    if (v19)
    {
      id v25 = (id)qword_1006AD1A0;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        long long v26 = [v19 localizedDescription];
        sub_10055D860(v26, v41, v25);
      }
    }
    else
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v27 = v20;
      id v28 = [v27 countByEnumeratingWithState:&v31 objects:v39 count:16];
      if (v28)
      {
        uint64_t v29 = *(void *)v32;
        do
        {
          for (j = 0; j != v28; j = (char *)j + 1)
          {
            if (*(void *)v32 != v29) {
              objc_enumerationMutation(v27);
            }
            [*(id *)(a1 + 32) deleteObject:*(void *)(*((void *)&v31 + 1) + 8 * (void)j)];
          }
          id v28 = [v27 countByEnumeratingWithState:&v31 objects:v39 count:16];
        }
        while (v28);
      }

      [*(id *)(a1 + 56) cZK3HwMuoGcCgDQI];
      long long v20 = v27;
    }
LABEL_26:
  }
}

void sub_100022F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100023240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_10002329C(uint64_t a1)
{
  uint64_t v2 = +[ASGeoCodeCacheEntry fetchRequest];
  [v2 setFetchLimit:1];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
  id v4 = 0;
  if (v3)
  {
    uint64_t v22 = *(void *)v26;
    do
    {
      id v23 = v3;
      uint64_t v5 = 0;
      uint64_t v6 = v4;
      do
      {
        if (*(void *)v26 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v25 + 1) + 8 * (void)v5);
        id v8 = [*(id *)(a1 + 40) canonicalStringForAddress:v7];
        char v9 = +[NSPredicate predicateWithFormat:@"addressForLookup == %@", v8];
        [v2 setPredicate:v9];

        uint64_t v10 = *(void **)(a1 + 48);
        id v24 = v6;
        id v11 = [v10 executeFetchRequest:v2 error:&v24];
        id v4 = v24;

        long long v12 = [v11 firstObject];

        if (v12)
        {
          long long v13 = self;
          if (objc_opt_isKindOfClass())
          {
            id v14 = [v12 updatedAt];
            BOOL v15 = v14 == 0;

            if (!v15)
            {
              uint64_t v16 = *(void **)(a1 + 56);
              id v17 = objc_alloc(*(Class *)(a1 + 72));
              id v18 = [v12 location];
              id v19 = [v12 updatedAt];
              id v20 = [v17 initWithAddress:v7 location:v18 updated:v19];
              [v16 addObject:v20];

              [v12 setLastAccessed:*(void *)(a1 + 64)];
            }
          }
          else
          {
          }
        }

        uint64_t v5 = (char *)v5 + 1;
        uint64_t v6 = v4;
      }
      while (v23 != v5);
      id v3 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
    }
    while (v3);
  }
}

void sub_100023520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_1000235C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) cZK3HwMuoGcCgDQI];
}

void sub_100023694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000236B0(uint64_t a1)
{
  uint64_t v16 = +[ASBindingKeyVal fetchRequest];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  id v21 = 0;
  id v3 = [v2 executeFetchRequest:v16 error:&v21];
  id v15 = v21;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v17 objects:v22 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v18;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        char v9 = [v8 val:v15];

        if (v9)
        {
          uint64_t v10 = [BindingRecord alloc];
          id v11 = [v8 key];
          long long v12 = [v8 updated];
          long long v13 = [v8 val];
          id v14 = [(BindingRecord *)v10 initWithKey:v11 updatedDate:v12 value:v13];

          [*(id *)(a1 + 40) addObject:v14];
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v17 objects:v22 count:16];
    }
    while (v5);
  }
}

void sub_100023888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100023B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a23, 8);

  _Unwind_Resume(a1);
}

id sub_100023B80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 16);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v3 executeRequest:v2 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return [*(id *)(a1 + 32) cZK3HwMuoGcCgDQI];
}

void sub_100023CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_100023CC0(uint64_t a1)
{
  uint64_t v2 = +[NSEntityDescription entityForName:@"DB_R100605578" inManagedObjectContext:*(void *)(*(void *)(a1 + 32) + 16)];
  if (v2)
  {
    if (*(unsigned char *)(a1 + 48))
    {
      id v3 = +[ASBindingKeyVal fetchRequest];
      id v4 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v3];
      [v4 setResultType:1];
      uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 16);
      id v31 = 0;
      uint64_t v6 = [v5 executeRequest:v4 error:&v31];
      id v7 = v31;
      if (v7)
      {
        id v8 = (id)qword_1006AD1A0;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          [v7 localizedDescription];
          objc_claimAutoreleasedReturnValue();
          [v7 userInfo];
          objc_claimAutoreleasedReturnValue();
          sub_10055D944();
        }
      }
    }
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v9 = *(id *)(a1 + 40);
    id v10 = [v9 countByEnumeratingWithState:&v27 objects:v32 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v28;
      do
      {
        for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v11) {
            objc_enumerationMutation(v9);
          }
          long long v13 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          id v14 = [ASBindingKeyVal alloc];
          id v15 = -[ASBindingKeyVal initWithEntity:insertIntoManagedObjectContext:](v14, "initWithEntity:insertIntoManagedObjectContext:", v2, *(void *)(*(void *)(a1 + 32) + 16), (void)v27);
          uint64_t v16 = [v13 key];
          [(ASBindingKeyVal *)v15 setKey:v16];

          long long v17 = [v13 value];
          [(ASBindingKeyVal *)v15 setVal:v17];

          long long v18 = [v13 updated];
          [(ASBindingKeyVal *)v15 setUpdated:v18];
        }
        id v10 = [v9 countByEnumeratingWithState:&v27 objects:v32 count:16];
      }
      while (v10);
    }

    [*(id *)(a1 + 32) cZK3HwMuoGcCgDQI];
  }
  else
  {
    long long v19 = qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055D98C(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
}

void sub_100023F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000240E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100024118(uint64_t a1)
{
  +[NSPredicate predicateWithFormat:@"workflowID == %@", *(void *)(a1 + 32)];
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [*(id *)(a1 + 40) YKIcrg8ijyspX6ho:forVersion:entityName:];
  id v3 = [v2 finalResult];
  if ([v3 count])
  {
    id v4 = [v3 objectAtIndex:0];
  }
  else
  {
    id v4 = +[DB_R103115069 insertNewObjectInManagedObjectContext:*(void *)(a1 + 56)];
    [v4 setWorkflowID:*(void *)(a1 + 32)];
  }
  [v4 setFields:*(void *)(a1 + 48)];
  uint64_t v5 = +[NSDate now];
  [v4 setUpdatedAt:v5];

  [*(id *)(a1 + 40) cZK3HwMuoGcCgDQI];
}

void sub_100024260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100024428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_100024468(void *a1)
{
  uint64_t v2 = +[DB_R103115069 fetchRequest];
  [v2 setFetchLimit:1];
  [v2 setResultType:0];
  id v3 = +[NSPredicate predicateWithFormat:@"workflowID = %@", a1[4]];
  [v2 setPredicate:v3];
  id v4 = *(void **)(a1[5] + 16);
  id v12 = 0;
  uint64_t v5 = [v4 executeFetchRequest:v2 error:&v12];
  id v6 = v12;
  id v7 = v12;
  if (v7) {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v6);
  }
  if ([v5 count] == (id)1)
  {
    id v8 = [v5 firstObject];
    uint64_t v9 = [v8 fields];
    uint64_t v10 = *(void *)(a1[7] + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
}

void sub_10002458C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000246F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100024724(uint64_t a1)
{
  id v3 = (uint64_t *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = *(void **)(a1 + 32);
  id v12 = 0;
  uint64_t v5 = [v4 f9CcEr7NPHjNuSLf:v2 error:&v12];
  id v6 = v12;
  if (v6)
  {
    id v7 = qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055DA44(v3, (uint64_t)v6, v7);
    }
  }
  else
  {
    if (v5)
    {
      id v8 = qword_1006AD1A0;
      if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *v3;
        *(_DWORD *)uint8_t buf = 138412290;
        uint64_t v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Updating existing bag with id: %@", buf, 0xCu);
      }
      [v5 setBag:*(void *)(a1 + 48)];
      uint64_t v10 = +[NSDate now];
      [v5 setUpdated:v10];
    }
    else
    {
      uint64_t v10 = +[DB_R115061196 insertNewObjectInManagedObjectContext:*(void *)(a1 + 56)];
      [v10 setId:*v3];
      [v10 setBag:*(void *)(a1 + 48)];
      uint64_t v11 = +[NSDate now];
      [v10 setUpdated:v11];
    }
    [*(id *)(a1 + 32) cZK3HwMuoGcCgDQI];
  }
}

void sub_1000248D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100024A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_100024AC8(void *a1)
{
  uint64_t v2 = +[DB_R115061196 fetchRequest];
  [v2 setFetchLimit:1];
  [v2 setResultType:0];
  id v3 = a1 + 4;
  id v4 = +[NSPredicate predicateWithFormat:@"id = %@", a1[4]];
  [v2 setPredicate:v4];
  uint64_t v5 = *(void **)(a1[5] + 16);
  id v24 = 0;
  id v6 = [v5 executeFetchRequest:v2 error:&v24];
  id v7 = v24;
  id v8 = v24;
  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v7);
    uint64_t v9 = (id)qword_1006AD1A0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = a1[4];
      uint64_t v11 = [*(id *)(*(void *)(a1[6] + 8) + 40) localizedDescription];
      sub_10055DB40(v10, v11, (uint64_t)v27);
    }
  }
  if (![v6 count])
  {
    id v12 = qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *v3;
      *(_DWORD *)uint8_t buf = 138412290;
      uint64_t v26 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "JSON Bag with ID %@ doesn't exist currently.", buf, 0xCu);
    }
  }
  if ([v6 count] == (id)1)
  {
    uint64_t v14 = [v6 firstObject];
    uint64_t v15 = *(void *)(a1[7] + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;
  }
  if ((unint64_t)[v6 count] >= 2)
  {
    long long v17 = qword_1006AD1A0;
    if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
      sub_10055DAD0((uint64_t)v3, v17, v18, v19, v20, v21, v22, v23);
    }
  }
}

void sub_100024CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100024DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100024FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);

  _Block_object_dispose((const void *)(v33 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100025064(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v2 executeRequest:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  id v8 = *(void **)(*(void *)(a1[6] + 8) + 40);
  if (v8)
  {
    uint64_t v9 = [v8 finalResult];
    uint64_t v10 = [v9 firstObject];

    if (v10)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v11 = [v10 ravioli];
        uint64_t v12 = *(void *)(a1[8] + 8);
        uint64_t v13 = *(void **)(v12 + 40);
        *(void *)(v12 + 40) = v11;
      }
      else if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR))
      {
        sub_10055DC08();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR))
    {
      sub_10055DBD4();
    }
  }
  else
  {
    uint64_t v10 = (id)qword_1006AD1A0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      [*(id *)(*(void *)(a1[7] + 8) + 40) localizedDescription];
      objc_claimAutoreleasedReturnValue();
      [*(id *)(*(void *)(a1[7] + 8) + 40) userInfo];
      objc_claimAutoreleasedReturnValue();
      sub_10055DB8C();
    }
  }
}

void sub_100025230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000252C4(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_1000252F0(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

uint64_t sub_100025CB0(const uint64_t *a1, _WORD *a2)
{
  *(void *)mainPort = 0;
  io_connect_t connect = 0;
  uint64_t MatchingServices = IOMainPort(0, &mainPort[1]);
  if (!MatchingServices)
  {
    CFDictionaryRef v6 = IOServiceMatching("ASIOKit");
    if (v6)
    {
      uint64_t MatchingServices = IOServiceGetMatchingServices(mainPort[1], v6, mainPort);
      if (!MatchingServices)
      {
        io_service_t v7 = IOIteratorNext(mainPort[0]);
        if (v7)
        {
          io_object_t v8 = v7;
          uint64_t MatchingServices = IOServiceOpen(v7, mach_task_self_, 0, &connect);
          IOObjectRelease(v8);
          if (!MatchingServices)
          {
            __int16 outputStruct = 0;
            size_t v11 = 2;
            uint64_t MatchingServices = IOConnectCallMethod(connect, 4u, a1, 8u, 0, 0, 0, 0, &outputStruct, &v11);
            if (!MatchingServices) {
              *a2 = outputStruct;
            }
          }
        }
        else
        {
          uint64_t MatchingServices = 5;
        }
        IOObjectRelease(mainPort[0]);
        if (connect) {
          IOServiceClose(connect);
        }
      }
    }
    else
    {
      return 5;
    }
  }
  return MatchingServices;
}

void sub_100026BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_100026C1C(id a1)
{
  qword_1006A5DE0 = (uint64_t)dispatch_queue_create("com.apple.asd.dfe", (dispatch_queue_attr_t)&_dispatch_queue_attr_concurrent);

  _objc_release_x1();
}

uint64_t sub_100026C60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100026C70(uint64_t a1)
{
}

intptr_t sub_100026C78(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 16) PLMCCRRqEw4moT9R:*(void *)(*(void *)(a1 + 32) + 8) UtPlzRffoEpw7Ue1:*(void *)(*(void *)(a1 + 64) + 8) + 32 SFkZRA5Ek9YzhDRs:*(unsigned int *)(a1 + 80) TWWnmIjkBlMfHmma:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
  uint64_t v5 = *(NSObject **)(a1 + 48);

  return dispatch_semaphore_signal(v5);
}

void sub_100027B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100027BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100027C40(int a1)
{
  uint64_t v2 = qword_1006AD1A0;
  if (os_log_type_enabled((os_log_t)qword_1006AD1A0, OS_LOG_TYPE_ERROR)) {
    sub_10055DD80(a1, v2);
  }
  return AnalyticsSendEventLazy();
}

id sub_100027CEC(uint64_t a1)
{
  v4[0] = @"errorCode";
  uint64_t v1 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 32)];
  v4[1] = @"type";
  v5[0] = v1;
  v5[1] = &off_100688388;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];

  return v2;
}

void sub_100027E08(id a1)
{
  qword_1006A5DE8 = objc_opt_new();

  _objc_release_x1();
}

void sub_10002805C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000282D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000286EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100028A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v18 = v15;

  _Unwind_Resume(a1);
}

void sub_100028D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_100028E00(uint64_t a1, void *a2)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = a2;
  uint64_t v4 = (char *)[v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v8;
    do
    {
      CFDictionaryRef v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v3);
        }
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32));
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = (char *)[v3 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_100028F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100028F28(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void **)(a1 + 40);

  free(v2);
}

void sub_100029130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000291A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  **(void **)(a1 + 48) = [*(id *)(a1 + 32) foundItemCount];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10002920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000294D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100029568(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100029578(uint64_t a1)
{
}

void sub_100029580(uint64_t a1, void *a2)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id obj = a2;
  id v19 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v19)
  {
    uint64_t v18 = *(void *)v25;
    *(void *)&long long v3 = 138412290;
    long long v16 = v3;
LABEL_3:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v25 != v18) {
        objc_enumerationMutation(obj);
      }
      uint64_t v5 = *(void **)(*((void *)&v24 + 1) + 8 * v4);
      id v6 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
      long long v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v9 = *(id *)(a1 + 32);
      id v10 = [v9 countByEnumeratingWithState:&v20 objects:v28 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v21;
        do
        {
          uint64_t v12 = 0;
          do
          {
            if (*(void *)v21 != v11) {
              objc_enumerationMutation(v9);
            }
            uint64_t v13 = *(void *)(*((void *)&v20 + 1) + 8 * (void)v12);
            uint64_t v14 = [v5 attributeSet];
            uint64_t v15 = [v14 attributeForKey:v13];

            if (v15) {
              [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v15 forKey:v13];
            }

            uint64_t v12 = (char *)v12 + 1;
          }
          while (v10 != v12);
          id v10 = [v9 countByEnumeratingWithState:&v20 objects:v28 count:16];
        }
        while (v10);
      }

      [*(id *)(a1 + 40) addObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
      if (*(_DWORD *)(a1 + 56))
      {
        if ((unint64_t)[*(id *)(a1 + 40) count] >= *(unsigned int *)(a1 + 56)) {
          break;
        }
      }
      if ((id)++v4 == v19)
      {
        id v19 = [obj countByEnumeratingWithState:&v24 objects:v29 count:16];
        if (v19) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

void sub_10002988C()
{
  objc_end_catch();
  JUMPOUT(0x1000298C0);
}

void sub_10002989C()
{
}

uint64_t sub_1000298C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2, *(void *)(a1 + 32));
}

void sub_100029B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100029BA8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result = [*(id *)(a1 + 32) LygrmXh7W0Hs2O8n:a4];
  if (result != (id)2)
  {
    if (result != (id)1) {
      return result;
    }
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_100029BF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100029E60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100029ED8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result = [*(id *)(a1 + 32) LygrmXh7W0Hs2O8n:a4];
  if (result != (id)2)
  {
    if (result != (id)1) {
      return result;
    }
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_100029F24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002A0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_10002A128(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result = [*(id *)(a1 + 32) LygrmXh7W0Hs2O8n:a4];
  if (result != (id)2)
  {
    if (result != (id)1) {
      return result;
    }
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_10002A174(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002A330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_10002A378(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result = [*(id *)(a1 + 32) LygrmXh7W0Hs2O8n:a4];
  if (result != (id)2)
  {
    if (result != (id)1) {
      return result;
    }
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_10002A3C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002A580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_10002A5C8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result = [*(id *)(a1 + 32) N2XtGIRzgUKLkZMS:a4];
  if (result != (id)2)
  {
    if (result != (id)1) {
      return result;
    }
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_10002A614(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002A7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_10002A818(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  id result = [*(id *)(a1 + 32) N2XtGIRzgUKLkZMS:a4];
  if (result != (id)2)
  {
    if (result != (id)1) {
      return result;
    }
    ++a2;
  }
  ++*a2;
  return result;
}

uint64_t sub_10002A864(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002AD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_10002B0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10002B150(id a1, int *a2, unsigned int a3, CSSearchableItem *a4)
{
}

uint64_t sub_10002B160(uint64_t a1, _DWORD *a2)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2 != 0);
}

void sub_10002B2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10002B328(id a1, int *a2, unsigned int a3, CSSearchableItem *a4)
{
}

uint64_t sub_10002B338(uint64_t a1, _DWORD *a2)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2 > 0);
}

void sub_10002B3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002B6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_10002BC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10002C2E4(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002C39C;
  block[3] = &unk_10065F700;
  id v6 = *(id *)(a1 + 40);
  int v8 = a2;
  id v7 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
}

void sub_10002C39C(uint64_t a1)
{
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:&off_1006883D0];

  long long v3 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v3);
}

void sub_10002C400(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002C4B8;
  block[3] = &unk_10065F700;
  id v7 = *(id *)(a1 + 40);
  int v9 = a3;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v5, block);
}

void sub_10002C4B8(uint64_t a1)
{
  uint64_t v2 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:&off_1006883E8];

  long long v3 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v3);
}

uint64_t sub_10002C6C4(uint64_t a1)
{
  qword_1006A5DF8 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

id sub_10002C9D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) f5FVXJrOBjzaLi8u:*(void *)(a1 + 40)];
}

void sub_10002D380(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002D3D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002D3E0(uint64_t a1)
{
}

void sub_10002D3E8(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = 176004;
LABEL_3:
    *(void *)(v6 + 24) = v7;
    goto LABEL_4;
  }
  if (!v13)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = 176001;
    goto LABEL_3;
  }
  if ([v13 status])
  {
    id v8 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    int v9 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v13 status]);
    [v8 setObject:v9 forKey:@"ms"];
  }
  id v10 = [v13 sessionStart];

  if (v10)
  {
    uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v12 = [v13 sessionStart];
    [v11 setObject:v12 forKey:@"md"];
  }
LABEL_4:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10002D524(uint64_t a1)
{
  if ([*(id *)(a1 + 32) hasActiveCalls:*(void *)(*(void *)(a1 + 32) + 24)])
  {
    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10002D61C;
    v7[3] = &unk_10065F7C8;
    long long v3 = *(void **)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    id v4 = v3;
    uint64_t v5 = *(void *)(a1 + 32);
    id v8 = v4;
    uint64_t v9 = v5;
    long long v11 = *(_OWORD *)(a1 + 56);
    [v2 fetchAnonymousXPCEndpoint:v7];
  }
  else
  {
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:&off_100688400 forKey:@"rs"];
    uint64_t v6 = *(NSObject **)(a1 + 40);
    dispatch_group_leave(v6);
  }
}

void sub_10002D61C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 176005;
  }
  else
  {
    if (v5)
    {
      id v7 = [objc_alloc((Class)TUUIXPCClientConnection) initWithListenerEndpoint:v5 callCenter:*(void *)(*(void *)(a1 + 40) + 24)];
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void **)(v8 + 32);
      *(void *)(v8 + 32) = v7;

      uint64_t v10 = *(void **)(*(void *)(a1 + 40) + 32);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10002D75C;
      v11[3] = &unk_10065F7A0;
      long long v13 = *(_OWORD *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 64);
      id v12 = *(id *)(a1 + 32);
      [v10 fetchRemoteControlStatus:v11];

      goto LABEL_6;
    }
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:&off_100688400 forKey:@"rs"];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
LABEL_6:
}

void sub_10002D75C(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  if (v9)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = 176006;
LABEL_3:
    *(void *)(v5 + 24) = v6;
    goto LABEL_6;
  }
  if (!a2)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v6 = 176001;
    goto LABEL_3;
  }
  id v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  uint64_t v8 = +[NSNumber numberWithInteger:a2];
  [v7 setObject:v8 forKey:@"rs"];

LABEL_6:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

BOOL sub_10002D854(id a1, TUCall *a2)
{
  uint64_t v2 = a2;
  if ([(TUCall *)v2 status] == 1) {
    unsigned __int8 v3 = [(TUCall *)v2 isConversation];
  }
  else {
    unsigned __int8 v3 = 0;
  }

  return v3;
}

void sub_10002DDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002DDE8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002DDF8(uint64_t a1)
{
}

uint64_t sub_10002DE00(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [a2 GyF0atX3JpCKc9pK];

  return _objc_release_x1();
}

uint64_t sub_10002DE4C(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = [a2 GyF0atX3JpCKc9pK];

  return _objc_release_x1();
}

uint64_t sub_10002E174()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_10002E1B4()
{
  sub_10002E174();

  return _swift_deallocClassInstance(v0, 72, 7);
}

void sub_10002E288(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (a2)
  {
    id v4 = a2;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      v15[0] = swift_slowAlloc();
      *(_DWORD *)id v7 = 136315138;
      if (!sub_10002EBEC(v4))
      {
LABEL_14:

        __break(1u);
        return;
      }
      uint64_t v8 = Dictionary.description.getter();
      unint64_t v10 = v9;
      swift_bridgeObjectRelease();
      sub_100032B48(v8, v10, v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received push with payload: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10002EA7C(v3 + OBJC_IVAR____TtCC3asd18PushServiceManager12PushDelegate_pushDispatchManager, (uint64_t)v15);
    sub_10002EAE0(v15, v15[3]);
    id v13 = v4;
    if (sub_10002EB24(v13))
    {
      sub_10007B41C();
      swift_bridgeObjectRelease();

      sub_10002EB9C((uint64_t)v15);
      return;
    }
    __break(1u);
    goto LABEL_14;
  }
  oslog = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Push received with no message", v12, 2u);
    swift_slowDealloc();
  }
}

void sub_10002E5A0()
{
}

id sub_10002E5E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PushServiceManager.PushDelegate();
  return [super dealloc];
}

id variable initialization expression of ASFinanceStoreHelper.errorDomain()
{
  return sub_100034B20();
}

unint64_t sub_10002E6DC()
{
  unint64_t result = qword_1006979B0;
  if (!qword_1006979B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1006979B0);
  }
  return result;
}

uint64_t variable initialization expression of PrecomputationManager.analyticsManager@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ASAnalyticsManager();
  uint64_t result = swift_allocObject();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_100661050;
  *a1 = result;
  return result;
}

uint64_t sub_10002E768(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_10002E7AC()
{
  unint64_t result = qword_1006979C0;
  if (!qword_1006979C0)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006979C0);
  }
  return result;
}

uint64_t variable initialization expression of RavioliManager.monitoringTask()
{
  return 0;
}

uint64_t _s3asd14RavioliManagerC17currentFetchTasks33_B5E58E12329358626A8B49370FDD58A1LLSDy10Foundation4UUIDVScTyyts5NeverOGGvpfi_0()
{
  type metadata accessor for UUID();
  sub_10002E768(&qword_1006979B8);
  sub_10002E7AC();

  return Dictionary.init(dictionaryLiteral:)();
}

id variable initialization expression of ASDConfigurationManager.notificationCenter()
{
  id v0 = [self defaultCenter];

  return v0;
}

uint64_t variable initialization expression of ASScreenContinuityServicesHelper.manager()
{
  return CompanionDeviceManager.__allocating_init()();
}

uint64_t variable initialization expression of AssessmentPayloadStore.assessmentPayloadFilter()
{
  return Logger.init(subsystem:category:)();
}

uint64_t variable initialization expression of CoordRange.spansAntimeridian()
{
  return 0;
}

uint64_t type metadata accessor for PushServiceManager()
{
  return self;
}

uint64_t sub_10002E944()
{
  return type metadata accessor for PushServiceManager.PushDelegate();
}

uint64_t type metadata accessor for PushServiceManager.PushDelegate()
{
  uint64_t result = qword_100697B20;
  if (!qword_100697B20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002E994()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void type metadata accessor for PDSPushEnvironment()
{
  if (!qword_100697C50)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_100697C50);
    }
  }
}

uint64_t sub_10002EA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_10002EAE0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10002EB24(void *a1)
{
  id v2 = [a1 userInfo];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10002EB9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10002EBEC(void *a1)
{
  id v1 = [a1 userInfo];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10002EC58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10002EC6C(a1, a2);
  }
  return a1;
}

uint64_t sub_10002EC6C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t _s3asd10CoordRangeV9westLimitSdSgvpfi_0()
{
  return 0;
}

void type metadata accessor for DefaultsKeys()
{
}

void type metadata accessor for DefaultsKeys.ConfigData()
{
}

uint64_t sub_10002ECE8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_1006AD1B8);
  sub_100031284(v0, (uint64_t)qword_1006AD1B8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10002ED68(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, void))(*(void *)(a3 + 8) + 16))(a2, *(void *)(a3 + 8));
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [a1 dataForKey:v4];

  if (!v5)
  {
    sub_100031864();
    __asm { BRAA            X3, X16 }
  }
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  swift_getAssociatedTypeWitness();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  sub_100031864();
  return sub_10002EC6C(v8, v9);
}

void sub_10002F0A8(uint64_t a1, uint64_t a2)
{
  id v4 = [self standardUserDefaults];
  sub_10002ED68(v4, a1, a2);
}

uint64_t sub_10002F138(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v7 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v8 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v10 = v9;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(a3, v7);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a2 setObject:isa forKey:v12];

  return sub_10002EC6C(v8, v10);
}

uint64_t sub_10002F35C()
{
  uint64_t v0 = sub_10002E768(&qword_100697DB0);
  __chkstk_darwin(v0 - 8);
  id v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  sub_100031220(v3, qword_1006AD1D0);
  uint64_t v4 = sub_100031284(v3, (uint64_t)qword_1006AD1D0);
  URL.init(string:)();
  uint64_t result = sub_1000312BC((uint64_t)v2, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v3 - 8) + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002F468()
{
  uint64_t result = sub_10002F494(32123, 0xE200000000000000);
  qword_1006AD1E8 = result;
  unk_1006AD1F0 = v1;
  return result;
}

uint64_t sub_10002F494(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  *(void *)&long long v37 = a1;
  *((void *)&v37 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_10002E768(&qword_100697DA0);
  if (swift_dynamicCast())
  {
    sub_1000311A4(v35, (uint64_t)&v38);
    sub_10002EAE0(&v38, v40);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v35[0] = v37;
    sub_10002EB9C((uint64_t)&v38);
    return *(void *)&v35[0];
  }
  uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  sub_10002FC54((uint64_t)v35);
  uint64_t v2 = v34;
  if ((v34 & 0x1000000000000000) != 0)
  {
LABEL_61:
    uint64_t v3 = 0;
    unint64_t v5 = 0xF000000000000000;
    if ((v2 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    if ((v34 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = v33;
      uint64_t v39 = v34 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((v33 & 0x1000000000000000) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }
    uint64_t v3 = Data._Representation.init(_:)();
    unint64_t v5 = v4;
    if (v4 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v35[0] = v3;
      *((void *)&v35[0] + 1) = v5;
      return *(void *)&v35[0];
    }
    if ((v34 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  String.UTF8View._foreignCount()();
LABEL_10:
  *(void *)&v35[0] = Data._Representation.init(count:)();
  *((void *)&v35[0] + 1) = v6;
  __chkstk_darwin(*(void *)&v35[0]);
  v28[2] = &v33;
  unint64_t v7 = (unint64_t)sub_10003090C((void *(*)(uint64_t *__return_ptr, char *, char *))sub_100031188, (uint64_t)v28);
  uint64_t v10 = *((void *)&v35[0] + 1) >> 62;
  uint64_t v11 = v7;
  unint64_t v13 = v12;
  unint64_t v14 = v8;
  uint64_t v2 = BYTE14(v35[0]);
  switch(*((void *)&v35[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v15) = DWORD1(v35[0]) - LODWORD(v35[0]);
      if (__OFSUB__(DWORD1(v35[0]), v35[0])) {
        goto LABEL_65;
      }
      uint64_t v15 = (int)v15;
LABEL_16:
      if (v9 != v15)
      {
        if (v10)
        {
          if (v10 == 1) {
            uint64_t v2 = *(uint64_t *)&v35[0] >> 32;
          }
          else {
            uint64_t v2 = *(void *)(*(void *)&v35[0] + 24);
          }
        }
LABEL_53:
        if (v2 < v9)
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_55:
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
LABEL_22:
      if ((v13 & 0x2000000000000000) != 0) {
        unint64_t v19 = HIBYTE(v13) & 0xF;
      }
      else {
        unint64_t v19 = v7 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v37 + 7) = 0;
      *(void *)&long long v37 = 0;
      if (4 * v19 == v8 >> 14) {
        goto LABEL_51;
      }
      unint64_t v29 = v5;
      LOBYTE(v20) = 0;
      uint64_t v21 = (v7 >> 59) & 1;
      if ((v13 & 0x1000000000000000) == 0) {
        LOBYTE(v21) = 1;
      }
      uint64_t v22 = 4 << v21;
      uint64_t v32 = v13 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v30 = v3;
      uint64_t v31 = (v13 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v17 = *(void *)(*(void *)&v35[0] + 16);
      uint64_t v16 = *(void *)(*(void *)&v35[0] + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_16;
      }
      goto LABEL_66;
    case 3:
      if (!v9) {
        goto LABEL_22;
      }
      uint64_t v2 = 0;
      goto LABEL_53;
    default:
      uint64_t v15 = BYTE14(v35[0]);
      goto LABEL_16;
  }
  do
  {
    unint64_t v23 = v14;
    if ((v14 & 0xC) == v22) {
      unint64_t v23 = sub_100030858(v14, v11, v13);
    }
    unint64_t v24 = v23 >> 16;
    if (v23 >> 16 >= v19)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if ((v13 & 0x1000000000000000) != 0)
    {
      char v26 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v13 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = v11;
      uint64_t v39 = v32;
      char v26 = *((unsigned char *)&v38 + v24);
    }
    else
    {
      uint64_t v25 = v31;
      if ((v11 & 0x1000000000000000) == 0) {
        uint64_t v25 = _StringObject.sharedUTF8.getter();
      }
      char v26 = *(unsigned char *)(v25 + v24);
    }
    if ((v14 & 0xC) == v22)
    {
      unint64_t v14 = sub_100030858(v14, v11, v13);
      if ((v13 & 0x1000000000000000) == 0)
      {
LABEL_40:
        unint64_t v14 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_45;
      }
    }
    else if ((v13 & 0x1000000000000000) == 0)
    {
      goto LABEL_40;
    }
    if (v19 <= v14 >> 16) {
      goto LABEL_60;
    }
    unint64_t v14 = String.UTF8View._foreignIndex(after:)();
LABEL_45:
    *((unsigned char *)&v37 + v20) = v26;
    unsigned int v20 = v20 + 1;
    if ((v20 >> 8)) {
      goto LABEL_59;
    }
    BYTE14(v37) = v20;
    if (v20 == 14)
    {
      sub_100031814();
      Data._Representation.append(contentsOf:)();
      LOBYTE(v20) = 0;
      BYTE14(v37) = 0;
    }
  }
  while (4 * v19 != v14 >> 14);
  uint64_t v3 = v30;
  unint64_t v5 = v29;
  if ((_BYTE)v20)
  {
    sub_100031814();
    Data._Representation.append(contentsOf:)();
    sub_10002EC58(v3, v5);
    goto LABEL_55;
  }
LABEL_51:
  swift_bridgeObjectRelease();
  sub_10002EC58(v3, v5);
LABEL_56:
  swift_bridgeObjectRelease();
  return *(void *)&v35[0];
}

uint64_t sub_10002F980(uint64_t a1)
{
  uint64_t v8 = sub_10002E768(&qword_100697DD8);
  uint64_t v9 = sub_1000316D0(&qword_100697DE0, &qword_100697DD8);
  v7[0] = a1;
  uint64_t v2 = sub_10002EAE0(v7, v8);
  uint64_t v3 = *v2 + 32;
  uint64_t v4 = v3 + *(void *)(*v2 + 16);
  swift_bridgeObjectRetain();
  sub_100030BB8(v3, v4, &v6);
  swift_bridgeObjectRelease();
  sub_10002EB9C((uint64_t)v7);
  return sub_100031880();
}

uint64_t sub_10002FA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10002E768(&qword_100697DB8);
  v11[3] = v8;
  void v11[4] = sub_1000312E4();
  uint64_t v9 = (void *)swift_allocObject();
  v11[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  sub_10002EAE0(v11, v8);
  sub_1000316D0(&qword_100697DC8, &qword_100697DD0);
  Slice<>.withUnsafeBytes<A>(_:)();
  sub_10002EB9C((uint64_t)v11);
  return sub_100031880();
}

uint64_t *sub_10002FB48()
{
  if (qword_1006978C0 != -1) {
    swift_once();
  }
  return &qword_1006AD1E8;
}

uint64_t sub_10002FB94()
{
  return 0x69666E6F43647361;
}

uint64_t sub_10002FBB8@<X0>(void *a1@<X8>)
{
  sub_10002FB48();
  uint64_t v2 = qword_1006AD1E8;
  unint64_t v3 = unk_1006AD1F0;
  *a1 = qword_1006AD1E8;
  a1[1] = v3;

  return sub_10002FBFC(v2, v3);
}

uint64_t sub_10002FBFC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10002FC54(uint64_t a1)
{
  uint64_t v2 = sub_10002E768(&qword_100697DA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10002FCB4()
{
  qword_1006AD1F8 = (uint64_t)&_swiftEmptyDictionarySingleton;
}

uint64_t *sub_10002FCC8()
{
  if (qword_1006978C8 != -1) {
    swift_once();
  }
  return &qword_1006AD1F8;
}

unint64_t sub_10002FD14()
{
  return sub_10003176C(21);
}

uint64_t sub_10002FD2C@<X0>(void *a1@<X8>)
{
  sub_10002FCC8();
  *a1 = qword_1006AD1F8;

  return swift_bridgeObjectRetain();
}

uint64_t sub_10002FD6C()
{
  uint64_t v0 = type metadata accessor for Date();
  sub_100031220(v0, qword_1006AD200);
  sub_100031284(v0, (uint64_t)qword_1006AD200);
  return static Date.distantPast.getter();
}

uint64_t sub_10002FDB8()
{
  type metadata accessor for Date();
  sub_100031714();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  qword_1006AD220 = result;
  return result;
}

void sub_10002FE08(void *a1)
{
  if (!sub_100065E0C(a1) || ((v2 = sub_100065EC4(a1), v2 >= 0.0) ? (BOOL v3 = v2 < 1000.0) : (BOOL v3 = 0), !v3))
  {
    sub_10007E0CC(0.0, 1000.0);
    sub_100094EE0(a1);
  }
}

void sub_10002FE7C()
{
  qword_1006AD230 = (uint64_t)&_swiftEmptyArrayStorage;
}

void sub_10002FE90(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PushPayload();
  uint64_t v3 = sub_100031774(v2);
  uint64_t v5 = v4;
  __chkstk_darwin(v3);
  unint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = self;
  id v9 = [v8 standardUserDefaults];
  uint64_t v10 = sub_100067464(v9);

  unint64_t v19 = (void *)v10;
  uint64_t v18 = a1;
  uint64_t v11 = &v19;
  uint64_t v12 = sub_100030E1C((uint64_t (*)(unint64_t))sub_10003164C);
  uint64_t v13 = v19[2];
  if (v13 < v12)
  {
    __break(1u);
  }
  else
  {
    sub_100031494(v12, v13);
    sub_1000313D4(a1, (uint64_t)v7);
    uint64_t v11 = v19;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = (void *)sub_10003B0D4(0, v11[2] + 1, 1, (uint64_t)v11);
LABEL_3:
  unint64_t v15 = v11[2];
  unint64_t v14 = v11[3];
  if (v15 >= v14 >> 1) {
    uint64_t v11 = (void *)sub_10003B0D4(v14 > 1, v15 + 1, 1, (uint64_t)v11);
  }
  v11[2] = v15 + 1;
  sub_10003166C((uint64_t)v7, (uint64_t)v11+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v15);
  id v16 = [v8 standardUserDefaults];
  sub_100067A64((uint64_t)v11, v16);
  swift_bridgeObjectRelease();
}

uint64_t sub_100030054(unsigned __int8 *a1, unsigned char *a2)
{
  unint64_t v2 = 0xEF67614273736572;
  uint64_t v3 = 0x6464416863746566;
  uint64_t v4 = *a1;
  uint64_t v5 = 0x6464416863746566;
  unint64_t v6 = 0xEF67614273736572;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6361437261656C63;
      uint64_t v7 = 7562600;
      goto LABEL_4;
    case 2:
      uint64_t v5 = 0x6E6F436863746566;
      uint64_t v7 = 6777190;
LABEL_4:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    case 3:
      uint64_t v5 = 0x6F72506863746566;
      unint64_t v6 = 0xED000073656C6966;
      break;
    case 4:
      uint64_t v5 = 0x7265536863746566;
      unint64_t v6 = 0xEE00676142726576;
      break;
    default:
      break;
  }
  switch(*a2)
  {
    case 1:
      uint64_t v3 = 0x6361437261656C63;
      uint64_t v8 = 7562600;
      goto LABEL_10;
    case 2:
      uint64_t v3 = 0x6E6F436863746566;
      uint64_t v8 = 6777190;
LABEL_10:
      unint64_t v2 = v8 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    case 3:
      uint64_t v3 = 0x6F72506863746566;
      unint64_t v2 = 0xED000073656C6966;
      break;
    case 4:
      uint64_t v3 = 0x7265536863746566;
      unint64_t v2 = 0xEE00676142726576;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

void sub_100030274(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PushPayload();
  uint64_t v3 = sub_100031774(v2);
  uint64_t v5 = v4;
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v52 = (uint64_t)&v47 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v47 - v12;
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v47 - v14;
  id v16 = self;
  unint64_t v17 = (unint64_t)[v16 standardUserDefaults];
  uint64_t v18 = sub_100067464((void *)v17);

  uint64_t v54 = v18;
  uint64_t v19 = *(void *)(v18 + 16);
  if (!v19)
  {
    uint64_t v29 = 0;
    goto LABEL_28;
  }
  uint64_t v48 = v8;
  v50 = v16;
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v53 = *(void *)(v5 + 72);
  swift_bridgeObjectRetain();
  unint64_t v21 = 0;
  uint64_t v49 = a1;
  uint64_t v22 = a1;
  unint64_t v51 = v20;
  while (1)
  {
    sub_1000313D4(v18 + v20, (uint64_t)v15);
    unint64_t v23 = 0xEF67614273736572;
    switch(*v15)
    {
      case 1:
        sub_1000318C8();
        uint64_t v24 = 7562600;
        goto LABEL_6;
      case 2:
        sub_10003188C();
        uint64_t v24 = 6777190;
LABEL_6:
        unint64_t v23 = v24 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        break;
      case 3:
        sub_1000318A0();
        unint64_t v23 = 0xED000073656C6966;
        break;
      case 4:
        sub_1000318B4();
        unint64_t v23 = 0xEE00676142726576;
        break;
      default:
        break;
    }
    sub_1000317D4();
    switch(v22)
    {
      case 1:
        sub_1000317F8();
        goto LABEL_12;
      case 2:
        sub_100031830();
LABEL_12:
        unint64_t v17 = v17 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        break;
      case 3:
        sub_10003178C();
        break;
      case 4:
        sub_1000317B0();
        break;
      default:
        break;
    }
    if (v25 == v26 && v23 == v17) {
      break;
    }
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100031438((uint64_t)v15);
    if (v28) {
      goto LABEL_24;
    }
    ++v21;
    v20 += v53;
    if (v19 == v21)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v18 + 16);
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRelease_n();
  sub_100031438((uint64_t)v15);
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t v29 = v21 + 1;
  if (__OFADD__(v21, 1))
  {
LABEL_73:
    __break(1u);
    JUMPOUT(0x100030808);
  }
  unint64_t v30 = *(void *)(v18 + 16);
  if (v29 != v30)
  {
    uint64_t v34 = v53 + v20;
    unint64_t v35 = v21 + 1;
    uint64_t v36 = v49;
    uint64_t v37 = (uint64_t)v48;
    while (v35 < v30)
    {
      sub_1000313D4(v18 + v34, (uint64_t)v13);
      unint64_t v38 = 0xEF67614273736572;
      switch(*v13)
      {
        case 1:
          sub_1000318C8();
          uint64_t v39 = 7562600;
          goto LABEL_34;
        case 2:
          sub_10003188C();
          uint64_t v39 = 6777190;
LABEL_34:
          unint64_t v38 = v39 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        case 3:
          sub_1000318A0();
          unint64_t v38 = 0xED000073656C6966;
          break;
        case 4:
          sub_1000318B4();
          unint64_t v38 = 0xEE00676142726576;
          break;
        default:
          break;
      }
      sub_1000317D4();
      switch(v36)
      {
        case 1:
          sub_1000317F8();
          goto LABEL_40;
        case 2:
          sub_100031830();
LABEL_40:
          unint64_t v17 = v17 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        case 3:
          sub_10003178C();
          break;
        case 4:
          sub_1000317B0();
          break;
        default:
          break;
      }
      if (v40 == v41 && v38 == v17)
      {
        swift_bridgeObjectRelease_n();
        sub_100031438((uint64_t)v13);
      }
      else
      {
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100031438((uint64_t)v13);
        if ((v43 & 1) == 0)
        {
          if (v35 != v21)
          {
            if ((v21 & 0x8000000000000000) != 0) {
              goto LABEL_68;
            }
            uint64_t v44 = v54;
            unint64_t v45 = *(void *)(v54 + 16);
            if (v21 >= v45) {
              goto LABEL_69;
            }
            unint64_t v17 = v21 * v53;
            sub_1000313D4(v54 + v51 + v21 * v53, v52);
            if (v35 >= v45) {
              goto LABEL_70;
            }
            sub_1000313D4(v44 + v34, v37);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              uint64_t v44 = sub_1000AB2A0(v44);
              uint64_t v54 = v44;
            }
            if (v21 >= *(void *)(v44 + 16)) {
              goto LABEL_71;
            }
            sub_1000315E8(v37, v44 + v51 + v17);
            if (v35 >= *(void *)(v54 + 16)) {
              goto LABEL_72;
            }
            sub_1000315E8(v52, v54 + v34);
          }
          if (__OFADD__(v21++, 1)) {
            goto LABEL_66;
          }
        }
      }
      uint64_t v29 = v35 + 1;
      if (__OFADD__(v35, 1)) {
        goto LABEL_65;
      }
      uint64_t v18 = v54;
      unint64_t v30 = *(void *)(v54 + 16);
      ++v35;
      v34 += v53;
      if (v29 == v30) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
LABEL_26:
  uint64_t v19 = v21;
LABEL_27:
  id v16 = v50;
  if (v29 < v19) {
    goto LABEL_67;
  }
LABEL_28:
  sub_100031494(v19, v29);
  id v31 = [v16 standardUserDefaults];
  uint64_t v32 = sub_100031880();
  sub_100067A64(v32, v33);
  swift_bridgeObjectRelease();
}

uint64_t sub_100030858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    sub_10003184C(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = String.UTF8View._foreignIndex(_:offsetBy:)();
    sub_10003184C(v3);
    return v4 | 8;
  }
}

void *sub_1000308B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  void v5[2] = v6;
  return sub_100030CB4((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100031200, (uint64_t)v5, a1, a2);
}

void *sub_10003090C(void *(*a1)(uint64_t *__return_ptr, char *, char *), uint64_t a2)
{
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  uint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v2 = xmmword_10058CBC0;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v11 < (int)v4) {
        goto LABEL_16;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_17;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_11:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t result = sub_100030D1C((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      *uint64_t v5 = v4;
LABEL_13:
      v5[1] = v12;
      return result;
    case 2uLL:
      *(void *)&long long v14 = *v2;
      *((void *)&v14 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_100030D1C(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = *((void *)&v14 + 1) | 0x8000000000000000;
      *uint64_t v2 = v14;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v14 + 7) = 0;
      *(void *)&long long v14 = 0;
      return sub_100030DD0((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, 0);
    default:
      *(void *)&long long v14 = *v2;
      WORD4(v14) = v3;
      BYTE10(v14) = BYTE2(v3);
      BYTE11(v14) = BYTE3(v3);
      BYTE12(v14) = BYTE4(v3);
      BYTE13(v14) = BYTE5(v3);
      BYTE14(v14) = BYTE6(v3);
      uint64_t result = sub_100030DD0((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, BYTE6(v3));
      unint64_t v8 = DWORD2(v14) | ((unint64_t)BYTE12(v14) << 32) | ((unint64_t)BYTE13(v14) << 40) | ((unint64_t)BYTE14(v14) << 48);
      *uint64_t v2 = v14;
      v2[1] = v8;
      return result;
  }
}

uint64_t sub_100030BB8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_100030C30(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v1 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100030CB4(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_100030D1C(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_100030DD0(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_100030E1C(uint64_t (*a1)(unint64_t))
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for PushPayload() - 8;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v34 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v33 = (uint64_t)&v30 - v9;
  __chkstk_darwin(v8);
  uint64_t v35 = (uint64_t)&v30 - v11;
  uint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 16);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  unint64_t v31 = v14;
  while (1)
  {
    char v17 = a1(v12 + v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if (v17) {
      break;
    }
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    unint64_t v19 = *(void *)(v12 + 16);
    if (v16 + 1 == v19) {
      return v16;
    }
    uint64_t v20 = v15 + v14;
    unint64_t v21 = v16 + 1;
    unint64_t v30 = v1;
    uint64_t v32 = v15;
    while (v21 < v19)
    {
      uint64_t v22 = v3;
      uint64_t v36 = v20;
      uint64_t v23 = v35;
      sub_1000313D4(v12 + v20, v35);
      char v24 = a1(v23);
      uint64_t result = sub_100031438(v23);
      if (v24)
      {
        uint64_t v3 = v22;
        uint64_t v25 = v32;
      }
      else
      {
        uint64_t v3 = v22;
        uint64_t v25 = v32;
        if (v21 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(*v3 + 16);
          if (v16 >= v27) {
            goto LABEL_33;
          }
          uint64_t result = sub_1000313D4(v26 + v31 + v16 * v32, v33);
          if (v21 >= v27) {
            goto LABEL_34;
          }
          sub_1000313D4(v26 + v36, v34);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v3 = v30;
          uint64_t *v30 = v26;
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1000AB2A0(v26);
            uint64_t v26 = result;
            *uint64_t v3 = result;
          }
          if (v16 >= *(void *)(v26 + 16)) {
            goto LABEL_35;
          }
          uint64_t result = sub_1000315E8(v34, v26 + v31 + v16 * v25);
          if (v21 >= *(void *)(*v3 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = sub_1000315E8(v33, *v3 + v36);
        }
        if (__OFADD__(v16++, 1)) {
          goto LABEL_31;
        }
      }
      unint64_t v29 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_30;
      }
      uint64_t v12 = *v3;
      unint64_t v19 = *(void *)(*v3 + 16);
      ++v21;
      uint64_t v20 = v36 + v25;
      if (v29 == v19) {
        return v16;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100031150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_1000308B4(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

void *sub_100031188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_100031150(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1000311A4(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000311BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100030C30(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100031200@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000311BC(a1, a2);
}

uint64_t *sub_100031220(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100031284(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1000312BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

unint64_t sub_1000312E4()
{
  unint64_t result = qword_100697DC0;
  if (!qword_100697DC0)
  {
    sub_10003137C(&qword_100697DB8);
    sub_1000316D0(&qword_100697DC8, &qword_100697DD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100697DC0);
  }
  return result;
}

uint64_t sub_10003137C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000313C4()
{
  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000313D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PushPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031438(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PushPayload();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100031494(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v6 = result;
  uint64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      uint64_t v11 = v5 + v8;
    }
    else {
      uint64_t v11 = v5;
    }
    uint64_t v4 = sub_10003B0D4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(type metadata accessor for PushPayload() - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  unint64_t v15 = v13 + v14 * v6;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v4 + 16);
  if (__OFSUB__(v16, a2)) {
    goto LABEL_22;
  }
  uint64_t result = sub_10003CD68(v13 + v14 * a2, v16 - a2, v15);
  uint64_t v17 = *(void *)(v4 + 16);
  BOOL v18 = __OFADD__(v17, v8);
  uint64_t v19 = v17 - v7;
  if (!v18)
  {
    *(void *)(v4 + 16) = v19;
LABEL_16:
    *uint64_t v2 = v4;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000315E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PushPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003164C(unsigned __int8 *a1)
{
  return sub_100030054(a1, *(unsigned char **)(v1 + 16)) & 1;
}

uint64_t sub_10003166C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PushPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000316D0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10003137C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100031714()
{
  unint64_t result = qword_100697DE8;
  if (!qword_100697DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100697DE8);
  }
  return result;
}

void type metadata accessor for DefaultsKeys.ServerJSONRetryStatus()
{
}

unint64_t sub_10003176C(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_100031774(uint64_t a1)
{
  return a1 - 8;
}

double sub_100031814()
{
  __int16 v1 = *(_WORD *)(v0 - 148);
  double result = *(double *)(v0 - 160);
  *(double *)(v0 - 136) = result;
  *(_DWORD *)(v0 - 128) = *(_DWORD *)(v0 - 152);
  *(_WORD *)(v0 - 124) = v1;
  return result;
}

unint64_t sub_10003184C(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_100031880()
{
  return v0;
}

uint64_t sub_10003188C()
{
  return 0x6E6F436863746566;
}

uint64_t sub_1000318A0()
{
  return 0x6F72506863746566;
}

uint64_t sub_1000318B4()
{
  return 0x7265536863746566;
}

uint64_t sub_1000318C8()
{
  return 0x6361437261656C63;
}

BOOL ASBackgroundDeferralStatus.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

BOOL sub_100031904(uint64_t *a1, uint64_t *a2)
{
  return sub_100036458(*a1, *a2);
}

uint64_t sub_100031910()
{
  return sub_1000A245C(*v0);
}

void sub_100031918(int a1)
{
  sub_1000A2548(a1, *v1);
}

uint64_t sub_100031920(uint64_t a1)
{
  return sub_1000A2848(a1, *v1);
}

BOOL sub_100031928@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = ASBackgroundDeferralStatus.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_10003195C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100031968()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_100697E10);
  sub_100031284(v0, (uint64_t)qword_100697E10);
  return Logger.init(subsystem:category:)();
}

uint64_t ASBackgroundActivityManager.registerActivity(identifier:activity:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1006978E8 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100031284(v8, (uint64_t)qword_100697E10);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)sub_100033734();
    aBlock[0] = sub_10003371C();
    *(_DWORD *)uint64_t v11 = 136446210;
    swift_bridgeObjectRetain();
    sub_100032B48(a1, a2, aBlock);
    sub_10003374C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Registering background activity: %{public}s.", v11, 0xCu);
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  v12[5] = a4;
  aBlock[4] = (uint64_t)sub_1000323A8;
  aBlock[5] = (uint64_t)v12;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100031C6C;
  aBlock[3] = (uint64_t)&unk_10065FDC0;
  unint64_t v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v14 = String.utf8CString.getter();
  xpc_activity_register((const char *)(v14 + 32), XPC_ACTIVITY_CHECK_IN, v13);
  swift_release();
  _Block_release(v13);
  return swift_release();
}

uint64_t sub_100031C6C(uint64_t a1)
{
  char v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall ASBackgroundActivityManager.unregisterActivity(identifier:)(Swift::String identifier)
{
  object = identifier._object;
  uint64_t countAndFlagsBits = identifier._countAndFlagsBits;
  if (qword_1006978E8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100031284(v3, (uint64_t)qword_100697E10);
  swift_bridgeObjectRetain_n();
  char v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)sub_100033734();
    uint64_t v8 = sub_10003371C();
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_bridgeObjectRetain();
    sub_100032B48(countAndFlagsBits, (unint64_t)object, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unregistering background activity: %{public}s.", v6, 0xCu);
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v7 = String.utf8CString.getter();
  xpc_activity_unregister((const char *)(v7 + 32));
  swift_release();
}

void sub_100031E74(_xpc_activity_s *a1, NSObject *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  xpc_activity_state_t state = xpc_activity_get_state(a1);
  if (state == 3)
  {
    if (qword_1006978E8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100031284(v19, (uint64_t)qword_100697E10);
    os_log_t v34 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v20, "Background activity is being deferred.", v21, 2u);
      swift_slowDealloc();
    }
    os_log_t v22 = v34;
  }
  else if (state == 2)
  {
    os_log_t v34 = a2;
    if (qword_1006978E8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100031284(v14, (uint64_t)qword_100697E10);
    swift_bridgeObjectRetain_n();
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v32 = a4;
    uint64_t v33 = a5;
    if (v17)
    {
      BOOL v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)BOOL v18 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v35 = sub_100032B48((uint64_t)v34, a3, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Running background activity: %{public}s.", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    xpc_activity_set_state(a1, 4);
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446210;
      swift_bridgeObjectRetain();
      os_log_t v26 = v34;
      uint64_t v35 = sub_100032B48((uint64_t)v34, a3, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Background activity %{public}s is continuing.", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      os_log_t v26 = v34;
    }
    uint64_t v27 = v32;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = a1;
    uint64_t v29 = type metadata accessor for TaskPriority();
    sub_10003349C((uint64_t)v12, 1, 1, v29);
    unint64_t v30 = (void *)swift_allocObject();
    v30[2] = 0;
    v30[3] = 0;
    v30[4] = v27;
    v30[5] = v33;
    v30[6] = sub_10003347C;
    v30[7] = v28;
    v30[8] = a1;
    v30[9] = v26;
    v30[10] = a3;
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10004964C((uint64_t)v12, (uint64_t)&unk_100697ED8, (uint64_t)v30);
    swift_release();
  }
}

uint64_t sub_100032368()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000323A8(_xpc_activity_s *a1)
{
  sub_100031E74(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000323B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000323C4()
{
  return swift_release();
}

uint64_t sub_1000323CC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = v15;
  v8[8] = v16;
  v8[6] = a8;
  unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  uint64_t v11 = (void *)swift_task_alloc();
  v8[9] = v11;
  void *v11 = v8;
  v11[1] = sub_1000324C4;
  return v13(a6, a7);
}

uint64_t sub_1000324C4()
{
  sub_1000336EC();
  *(void *)(v1 + 80) = v0;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000325A0, 0, 0);
}

uint64_t sub_1000325A0()
{
  uint64_t v26 = v0;
  uint64_t v1 = *(void *)(v0 + 80);
  p_ivar_base_size = &PushDispatchManager.ivar_base_size;
  if (v1 == 1)
  {
    xpc_activity_set_state(*(xpc_activity_t *)(v0 + 48), 5);
    if (qword_1006978E8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100031284(v10, (uint64_t)qword_100697E10);
    swift_bridgeObjectRetain_n();
    char v4 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    BOOL v12 = os_log_type_enabled(v4, v11);
    unint64_t v13 = *(void *)(v0 + 64);
    if (v12)
    {
      uint64_t v14 = *(void *)(v0 + 56);
      uint64_t v15 = (uint8_t *)sub_100033734();
      uint64_t v25 = sub_10003371C();
      *(_DWORD *)uint64_t v15 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 32) = sub_100032B48(v14, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v4, v11, "Background activity %{public}s finished running.", v15, 0xCu);
      swift_arrayDestroy();
      p_ivar_base_size = (_DWORD *)(&PushDispatchManager + 8);
      sub_100033704();
      goto LABEL_11;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  if (!v1)
  {
    xpc_activity_set_state(*(xpc_activity_t *)(v0 + 48), 3);
    if (qword_1006978E8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100031284(v3, (uint64_t)qword_100697E10);
    swift_bridgeObjectRetain_n();
    char v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    unint64_t v7 = *(void *)(v0 + 64);
    if (v6)
    {
      uint64_t v8 = *(void *)(v0 + 56);
      uint64_t v9 = (uint8_t *)sub_100033734();
      uint64_t v25 = sub_10003371C();
      *(_DWORD *)uint64_t v9 = 136446210;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = sub_100032B48(v8, v7, &v25);
      p_ivar_base_size = (_DWORD *)(&PushDispatchManager + 8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Background activity %{public}s was deferred", v9, 0xCu);
      swift_arrayDestroy();
      sub_100033704();
LABEL_11:
      sub_100033704();
LABEL_16:

      if (*((void *)p_ivar_base_size + 285) != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100031284(v17, (uint64_t)qword_100697E10);
      swift_bridgeObjectRetain_n();
      BOOL v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      BOOL v20 = os_log_type_enabled(v18, v19);
      unint64_t v21 = *(void *)(v0 + 64);
      if (v20)
      {
        uint64_t v22 = *(void *)(v0 + 56);
        uint64_t v23 = (uint8_t *)sub_100033734();
        uint64_t v25 = sub_10003371C();
        *(_DWORD *)uint64_t v23 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 24) = sub_100032B48(v22, v21, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Background activity %{public}s is exiting.", v23, 0xCu);
        swift_arrayDestroy();
        sub_100033704();
        sub_100033704();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      os_log_type_t v24 = *(uint64_t (**)(void))(v0 + 8);
      return v24();
    }
    goto LABEL_15;
  }
  *(void *)(v0 + 16) = v1;
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

id ASScreenContinuityServicesHelper.ScreenMirroringStatus.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id ASBackgroundActivityManager.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super init];
}

id ASScreenContinuityServicesHelper.ScreenMirroringStatus.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_100032B48(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100032C1C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000333E4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000333E4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10002EB9C((uint64_t)v12);
  return v7;
}

uint64_t sub_100032C1C(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100032D74((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_100032E4C(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *sub_100032D74(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_100032E4C(uint64_t a1, unint64_t a2)
{
  objc_super v2 = sub_100032EE4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    objc_super v2 = sub_1000330C0(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    objc_super v2 = sub_1000330C0((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *sub_100032EE4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_100033058(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100033058(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10002E768(&qword_100697E60);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  void v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_1000330C0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002E768(&qword_100697E60);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  BOOL v12 = v10 + 32;
  unint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100033270(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100033198(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100033198(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_100033270(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

unint64_t sub_100033304()
{
  unint64_t result = qword_100697E28;
  if (!qword_100697E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100697E28);
  }
  return result;
}

unint64_t sub_100033354()
{
  unint64_t result = qword_100697E30;
  if (!qword_100697E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100697E30);
  }
  return result;
}

ValueMetadata *type metadata accessor for ASBackgroundDeferralStatus()
{
  return &type metadata for ASBackgroundDeferralStatus;
}

ValueMetadata *type metadata accessor for ASBackgroundActivityCompletionStatus()
{
  return &type metadata for ASBackgroundActivityCompletionStatus;
}

uint64_t type metadata accessor for ASBackgroundActivityManager()
{
  return self;
}

uint64_t sub_1000333E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100033444()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_10003347C()
{
  return xpc_activity_should_defer(*(xpc_activity_t *)(v0 + 16));
}

uint64_t sub_10003349C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1000334C4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10003351C(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  char v5 = (int *)v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100033610;
  return sub_1000323CC(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100033610()
{
  sub_1000336EC();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100033704()
{
  return swift_slowDealloc();
}

uint64_t sub_10003371C()
{
  return swift_slowAlloc();
}

uint64_t sub_100033734()
{
  return swift_slowAlloc();
}

uint64_t PKPass.arrivalAirportLat.getter()
{
  return sub_100033CE0((uint64_t (*)(void))sub_1000337D0, (uint64_t (*)(uint64_t))sub_1000338FC);
}

unint64_t sub_1000337D0()
{
  if ([v0 style] != (id)4 || objc_msgSend(v0, "transitType") != (id)1) {
    return 0;
  }
  unint64_t result = sub_100035FA0(v0, (SEL *)&selRef_primaryFields, &qword_100697F28);
  if (result)
  {
    unint64_t result = sub_100033D94(1, result);
    if (v3 == v4 >> 1)
    {
      swift_unknownObjectRelease();
      return 0;
    }
    if (v3 < (uint64_t)(v4 >> 1))
    {
      id v6 = *(id *)(v2 + 8 * v3);
      swift_unknownObjectRelease();
      id v5 = [v6 value];

      if (v5)
      {
        id v7 = [v5 uppercaseString];

        id v5 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      return (unint64_t)v5;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_1000338FC()
{
  unint64_t v0 = sub_100035390();
  if ((v0 & 0x10000) != 0) {
    return 0;
  }
  unsigned __int16 v1 = v0;
  if (qword_100697990 != -1) {
    swift_once();
  }
  unint64_t v2 = sub_100067E68(v1, qword_10069A848);
  if ((v2 & 0x100000000) != 0) {
    return 0;
  }
  _H0 = v2;
  __asm { FCVT            S8, H0 }
  id v9 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v10) = _S8;
  return [v9 initWithFloat:v10];
}

uint64_t PKPass.arrivalAirportLong.getter()
{
  return sub_100033CE0((uint64_t (*)(void))sub_1000337D0, (uint64_t (*)(uint64_t))sub_100033A0C);
}

id sub_100033A0C()
{
  unint64_t v0 = sub_100035390();
  if ((v0 & 0x10000) != 0) {
    return 0;
  }
  unsigned __int16 v1 = v0;
  if (qword_100697990 != -1) {
    swift_once();
  }
  unint64_t v2 = sub_100067E68(v1, qword_10069A848);
  if ((v2 & 0x100000000) != 0) {
    return 0;
  }
  _H0 = WORD1(v2);
  __asm { FCVT            S8, H0 }
  id v9 = objc_allocWithZone((Class)NSNumber);
  LODWORD(v10) = _S8;
  return [v9 initWithFloat:v10];
}

uint64_t PKPass.departureAirportLat.getter()
{
  return sub_100033CE0((uint64_t (*)(void))sub_100033B20, (uint64_t (*)(uint64_t))sub_1000338FC);
}

unint64_t sub_100033B20()
{
  if ([v0 style] != (id)4 || objc_msgSend(v0, "transitType") != (id)1) {
    return 0;
  }
  unint64_t result = sub_100035FA0(v0, (SEL *)&selRef_primaryFields, &qword_100697F28);
  if (!result) {
    goto LABEL_17;
  }
  unint64_t v2 = result;
  uint64_t v3 = result & 0xFFFFFFFFFFFFFF8;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
  unint64_t result = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!result)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_6:
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
    id v5 = v4;
    swift_bridgeObjectRelease();
    id v6 = [v5 value];

    if (v6)
    {
      id v7 = [v6 uppercaseString];

      id v6 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    return (unint64_t)v6;
  }
  if (*(void *)(v3 + 16))
  {
    id v4 = *(id *)(v2 + 32);
    goto LABEL_9;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t PKPass.departureAirportLong.getter()
{
  return sub_100033CE0((uint64_t (*)(void))sub_100033B20, (uint64_t (*)(uint64_t))sub_100033A0C);
}

uint64_t sub_100033CE0(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t))
{
  swift_getObjectType();
  uint64_t v4 = a1();
  if (!v5) {
    return 0;
  }
  uint64_t v6 = a2(v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_100033D4C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t sub_100033D94(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t result = sub_100065744(0, v3, v5, v2);
  if (v7) {
    Swift::Int v8 = v5;
  }
  else {
    Swift::Int v8 = result;
  }
  if (v5 < v8)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v9 < v8) {
    goto LABEL_29;
  }
  if (v8 < 0)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v5) {
    goto LABEL_31;
  }
  if ((v2 & 0xC000000000000001) != 0 && v8 != v5)
  {
    if (v8 < (unint64_t)v5)
    {
      sub_1000362B0(0, &qword_100697F28);
      Swift::Int v11 = v8;
      do
      {
        Swift::Int v12 = v11 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v11);
        Swift::Int v11 = v12;
      }
      while (v5 != v12);
      goto LABEL_22;
    }
LABEL_32:
    __break(1u);
    return result;
  }
LABEL_22:
  if (!v4) {
    return v2 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.subscript.getter();
  swift_bridgeObjectRelease_n();
  return v13;
}

uint64_t sub_100033F74(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_100065744(0, result, *(void *)(a2 + 16), a2);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result;
  }
  if (v3 < v5) {
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000) == 0) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100033FE0()
{
  if ([v1 style] != (id)4) {
    return 0;
  }
  if ([v1 transitType] != (id)1) {
    return 0;
  }
  uint64_t v2 = sub_100035F3C(v1);
  if (!v2) {
    return 0;
  }
  sub_100033F74(2, v2);
  if (v4 == v5 >> 1)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  if (v4 >= (uint64_t)(v5 >> 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v0 = *(void *)(v3 + 8 * v4);
    swift_bridgeObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
    if (!(v0 >> 62))
    {
      if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_9;
      }
LABEL_17:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_17;
  }
LABEL_9:
  if ((v0 & 0xC000000000000001) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_12;
  }
  if (*(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v7 = *(id *)(v0 + 32);
LABEL_12:
    Swift::Int v8 = v7;
    swift_bridgeObjectRelease();
    id v9 = [v8 value];
    if (v9)
    {
      uint64_t countAndFlagsBits = String.init(_:)(v9)._countAndFlagsBits;

      return countAndFlagsBits;
    }

    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_100034154()
{
  id v1 = [v0 organizationName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  String.lowercased()();
  swift_bridgeObjectRelease();
  sub_100036264();
  uint64_t v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  return v2;
}

Class PKPass.anyDate.getter()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_10002E768(&qword_100697EE0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v38 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v39 = (char *)&v36 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v36 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  BOOL v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v36 - v21;
  if (![v2 relevantDate])
  {
    sub_1000363A0((uint64_t)v15);
LABEL_5:
    if ([v2 expirationDate])
    {
      sub_100036408();

      id v1 = (void *)(v17 + 32);
      uint64_t v25 = *(void (**)(void))(v17 + 32);
      sub_100036370();
      v25();
      sub_1000363BC((uint64_t)v13);
      sub_100036380((uint64_t)v13);
      if (!v24)
      {
        sub_100036370();
        v25();
LABEL_25:
        sub_1000346F4((uint64_t)v15);
        goto LABEL_26;
      }
    }
    else
    {
      sub_1000363A0((uint64_t)v13);
    }
    if ([v2 modifiedDate])
    {
      sub_100036408();

      id v1 = (void *)(v17 + 32);
      uint64_t v26 = *(void (**)(void))(v17 + 32);
      sub_100036370();
      v26();
      sub_10003349C((uint64_t)v10, 0, 1, v16);
      sub_100036380((uint64_t)v10);
      if (!v24)
      {
        sub_100036370();
        v26();
LABEL_24:
        sub_1000346F4((uint64_t)v13);
        goto LABEL_25;
      }
    }
    else
    {
      sub_1000363A0((uint64_t)v10);
    }
    if ([v2 ingestedDate])
    {
      sub_100036408();

      uint64_t v27 = v10;
      uint64_t v28 = (uint64_t)v39;
      uint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
      v37((uint64_t)v39, v20, v16);
      sub_10003349C(v28, 0, 1, v16);
      uint64_t v29 = v28;
      uint64_t v10 = v27;
      sub_100036380(v29);
      if (!v24)
      {
        v37((uint64_t)v22, v39, v16);
LABEL_23:
        sub_1000346F4((uint64_t)v10);
        goto LABEL_24;
      }
    }
    else
    {
      sub_1000363A0((uint64_t)v39);
    }
    id v30 = [v2 signingDate];
    if (v30)
    {
      uint64_t v31 = v30;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
      uint64_t v33 = v38;
      v32(v38, v20, v16);
      sub_1000363BC(v33);
      sub_100036380(v33);
      if (!v24)
      {
        v32((uint64_t)v22, (char *)v33, v16);
LABEL_22:
        sub_1000346F4((uint64_t)v39);
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v33 = v38;
      sub_1000363A0(v38);
    }
    static Date.distantPast.getter();
    sub_1000346F4(v33);
    goto LABEL_22;
  }
  sub_100036408();

  id v1 = (void *)(v17 + 32);
  uint64_t v23 = *(void (**)(void))(v17 + 32);
  sub_100036370();
  v23();
  sub_1000363BC((uint64_t)v15);
  sub_100036380((uint64_t)v15);
  if (v24) {
    goto LABEL_5;
  }
  sub_100036370();
  v23();
LABEL_26:
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
  return isa;
}

uint64_t sub_1000346F4(uint64_t a1)
{
  uint64_t v2 = sub_10002E768(&qword_100697EE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100034754()
{
  if (qword_100697968 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v0 = (id)static ASDConfigurationManager.shared;
  sub_1000950DC(v11);

  sub_1000360A8((uint64_t)v11, (uint64_t)__src, &qword_100697F08);
  if (__src[5] == 1) {
    return 0;
  }
  memcpy(__dst, __src, sizeof(__dst));
  sub_1000360A8((uint64_t)&__dst[40], (uint64_t)v14, &qword_100697F10);
  sub_10003610C((uint64_t)v14);
  sub_100036138(v11);
  sub_1000360A8((uint64_t)v14, (uint64_t)&v15, &qword_100697F10);
  uint64_t v1 = v15;
  if (!v15) {
    return 0;
  }
  uint64_t v2 = sub_100034154();
  uint64_t v4 = sub_100067EC4(v2, v3, v1);
  unint64_t v6 = v5;
  sub_100036238((uint64_t)v14);
  swift_bridgeObjectRelease();
  if (!v6) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_100033D4C(v4, v6);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease_n();
  if (v9) {
    return v7;
  }
  else {
    return 0;
  }
}

id PKPass.boardingPassFirstName.getter()
{
  sub_100033FE0();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = sub_100034754();
  id v5 = v4;
  if (v4)
  {
    if (v3)
    {
      uint64_t v9 = sub_1000363FC(v2);
      __chkstk_darwin(v9);
      uint64_t v10 = sub_100036330();
      sub_100036308(v10, v11, sub_1000362EC);
      sub_100036440();
      swift_bridgeObjectRelease();
      sub_100034ABC(v0);
      sub_1000363D8();
      goto LABEL_8;
    }
    uint64_t v6 = sub_1000363FC(v2);
    __chkstk_darwin(v6);
    uint64_t v7 = sub_100036330();
    sub_100036308(v7, v8, sub_100036040);
    sub_100036440();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
LABEL_8:
      swift_bridgeObjectRetain();
      sub_100036420();
      swift_bridgeObjectRelease();
      id v12 = objc_allocWithZone((Class)NSString);
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v5 = [v12 initWithString:v13];
      swift_bridgeObjectRelease();

      return v5;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100034ABC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32 * v1);
  swift_bridgeObjectRetain();
  return v2;
}

id sub_100034B20()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithString:v1];

  return v2;
}

id PKPass.boardingPassLastName.getter()
{
  sub_100033FE0();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = sub_100034754();
  id v5 = v4;
  if (v4)
  {
    if ((v3 & 1) == 0)
    {
      uint64_t v6 = sub_1000363FC(v2);
      __chkstk_darwin(v6);
      uint64_t v7 = sub_100036330();
      sub_100036308(v7, v8, sub_1000362EC);
      sub_100036440();
      swift_bridgeObjectRelease();
      sub_100034ABC(v0);
      sub_1000363D8();
LABEL_7:
      swift_bridgeObjectRetain();
      sub_100036420();
      swift_bridgeObjectRelease();
      sub_1000362B0(0, (unint64_t *)&qword_1006979B0);
      id v5 = sub_100034B20();
      goto LABEL_8;
    }
    uint64_t v9 = sub_1000363FC(v2);
    __chkstk_darwin(v9);
    uint64_t v10 = sub_100036330();
    sub_100036308(v10, v11, sub_1000362EC);
    sub_100036440();
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t PKPass.evaluate(attribute:expression:)@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_1000362B0(0, (unint64_t *)&qword_1006979B0);
  NSString.init(stringLiteral:)();
  char v8 = sub_100036358();

  if (v8)
  {
    id v9 = [v4 style];
LABEL_3:
    id v10 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v9];
LABEL_4:
    id v11 = v10;
    id v12 = (unint64_t *)&qword_100697EF8;
LABEL_7:
    unint64_t result = sub_1000362B0(0, v12);
    *(void *)(a2 + 24) = result;
    *(void *)a2 = v11;
    return result;
  }
  NSString.init(stringLiteral:)();
  char v13 = sub_100036358();

  if (v13)
  {
    id v11 = [v4 anyDate];
    id v12 = (unint64_t *)&unk_100697F00;
    goto LABEL_7;
  }
  NSString.init(stringLiteral:)();
  char v15 = sub_100036358();

  if (v15)
  {
    id v9 = [v4 transitType];
    goto LABEL_3;
  }
  NSString.init(stringLiteral:)();
  char v16 = sub_100036358();

  if (v16)
  {
    unint64_t result = (unint64_t)[v4 organizationName];
    if (result)
    {
LABEL_12:
      *(void *)(a2 + 24) = v7;
      *(void *)a2 = result;
      return result;
    }
    goto LABEL_47;
  }
  NSString.init(stringLiteral:)();
  char v17 = sub_100036358();

  if (v17)
  {
    id v18 = [v4 arrivalAirportLat];
    goto LABEL_21;
  }
  NSString.init(stringLiteral:)();
  char v19 = sub_100036358();

  if (v19)
  {
    id v18 = [v4 arrivalAirportLong];
    goto LABEL_21;
  }
  NSString.init(stringLiteral:)();
  char v20 = sub_100036358();

  if (v20)
  {
    id v18 = [v4 departureAirportLat];
    goto LABEL_21;
  }
  NSString.init(stringLiteral:)();
  char v21 = sub_100036358();

  if (v21)
  {
    id v18 = [v4 departureAirportLong];
LABEL_21:
    unint64_t result = (unint64_t)v18;
    if (result)
    {
      id v11 = (id)result;
      id v12 = (unint64_t *)&qword_100697EF8;
      goto LABEL_7;
    }
    goto LABEL_28;
  }
  NSString.init(stringLiteral:)();
  char v22 = sub_100036358();

  if (v22)
  {
    id v23 = [v4 boardingPassFirstName];
    goto LABEL_27;
  }
  NSString.init(stringLiteral:)();
  char v24 = sub_100036358();

  if (v24)
  {
    id v23 = [v4 boardingPassLastName];
LABEL_27:
    unint64_t result = (unint64_t)v23;
    if (result) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
  NSString.init(stringLiteral:)();
  char v25 = sub_100036358();

  if (v25)
  {
    id v10 = [objc_allocWithZone((Class)NSNumber) initWithBool:[v4 hasLocationRelevancyInfo]];
    goto LABEL_4;
  }
  NSString.init(stringLiteral:)();
  char v26 = sub_100036358();

  if (v26)
  {
    unint64_t result = sub_100035FA0(v4, (SEL *)&selRef_embeddedLocationsArray, &qword_100697EF0);
    if (!result)
    {
LABEL_48:
      __break(1u);
      return result;
    }
    unint64_t v27 = result;
    uint64_t v28 = result & 0xFFFFFFFFFFFFFF8;
    if (result >> 62)
    {
      unint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (result)
      {
LABEL_35:
        if ((v27 & 0xC000000000000001) != 0)
        {
          id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)(v28 + 16))
          {
            __break(1u);
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
          id v29 = *(id *)(v27 + 32);
        }
        id v30 = v29;
        swift_bridgeObjectRelease();
        unint64_t result = sub_1000362B0(0, &qword_100697EF0);
        *(void *)(a2 + 24) = result;
        *(void *)a2 = v30;
        return result;
      }
    }
    else
    {
      unint64_t result = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (result) {
        goto LABEL_35;
      }
    }
    unint64_t result = swift_bridgeObjectRelease();
LABEL_28:
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  if ([a1 expressionValueWithObject:v4 context:0])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v31, 0, sizeof(v31));
  }
  return sub_1000360A8((uint64_t)v31, a2, &qword_100697EE8);
}

unint64_t sub_100035390()
{
  if (String.count.getter() != 3)
  {
LABEL_40:
    int v20 = 0;
    int v19 = 1;
    return v20 | (v19 << 16);
  }
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    unint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    char v3 = (char *)&_swiftEmptyArrayStorage;
    while (1)
    {
      BOOL v4 = countAndFlagsBits == 2573 && object == (void *)0xE200000000000000;
      if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      if (Character._isSingleScalar.getter())
      {
        unint64_t result = sub_100035C30(countAndFlagsBits, (unint64_t)object);
        if ((result & 0x100000000) != 0) {
          goto LABEL_45;
        }
        if ((result & 0xFFFFFF80) == 0)
        {
          unint64_t result = sub_100035C30(countAndFlagsBits, (unint64_t)object);
          if ((result & 0x100000000) != 0) {
            goto LABEL_46;
          }
          int v6 = result;
          unint64_t result = swift_bridgeObjectRelease();
          if ((v6 & 0xFFFFFF00) != 0) {
            goto LABEL_44;
          }
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_15;
          }
LABEL_22:
          sub_10003B11C();
          char v3 = v9;
LABEL_15:
          unint64_t v7 = *((void *)v3 + 2);
          if (v7 >= *((void *)v3 + 3) >> 1)
          {
            sub_10003B11C();
            char v3 = v10;
          }
          *((void *)v3 + 2) = v7 + 1;
          v3[v7 + 32] = v6;
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
LABEL_19:
      Swift::String_optional v8 = String.Iterator.next()();
      unint64_t countAndFlagsBits = v8.value._countAndFlagsBits;
      object = v8.value._object;
      if (!v8.value._object) {
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease();
    LOBYTE(v6) = 10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  char v3 = (char *)&_swiftEmptyArrayStorage;
LABEL_24:
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)v3 + 2);
  if (v11)
  {
    id v12 = (unsigned __int8 *)(v3 + 32);
    do
    {
      int v14 = *v12++;
      char v13 = v14;
      if ((v14 - 91) > 0xFFFFFFE5)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000A5288();
        }
        unint64_t v15 = *((void *)&_swiftEmptyArrayStorage + 2);
        if (v15 >= *((void *)&_swiftEmptyArrayStorage + 3) >> 1) {
          sub_1000A5288();
        }
        *((void *)&_swiftEmptyArrayStorage + 2) = v15 + 1;
        *((unsigned char *)&_swiftEmptyArrayStorage + v15 + 32) = v13;
      }
      --v11;
    }
    while (v11);
  }
  unint64_t result = swift_bridgeObjectRelease();
  if (*((void *)&_swiftEmptyArrayStorage + 2) != 3)
  {
    swift_release();
    goto LABEL_40;
  }
  LOWORD(v16) = 0;
  uint64_t v17 = 32;
  while (1)
  {
    int v18 = *((unsigned __int8 *)&_swiftEmptyArrayStorage + v17) - 65;
    if ((v18 & 0xFFFFFF00) != 0) {
      break;
    }
    int v16 = 32 * (v16 & 0x7FF) + v18;
    if ((v16 & 0x10000) != 0) {
      goto LABEL_43;
    }
    if (++v17 == 35)
    {
      swift_release();
      int v19 = 0;
      int v20 = (unsigned __int16)v16;
      return v20 | (v19 << 16);
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

unint64_t sub_100035670(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100035694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_1000356D8(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_38;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v42 = v10 + 16;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_100035B28(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    char v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_36;
  }
  uint64_t v41 = a1;
  unint64_t v48 = 4 * v12;
  char v13 = &_swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      unint64_t v14 = String.index(after:)();
      goto LABEL_21;
    }
    int v20 = (v15 >> 14 == v14 >> 14) & a2;
    if (v20 != 1)
    {
      if (v14 >> 14 < v15 >> 14) {
        goto LABEL_38;
      }
      uint64_t v21 = String.subscript.getter();
      uint64_t v43 = v23;
      uint64_t v44 = v22;
      uint64_t v45 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10003B128();
        char v13 = v28;
      }
      unint64_t v25 = v13[2];
      if (v25 >= v13[3] >> 1)
      {
        sub_10003B128();
        char v13 = v29;
      }
      v13[2] = v25 + 1;
      char v26 = &v13[4 * v25];
      v26[4] = v21;
      v26[5] = v45;
      v26[6] = v44;
      v26[7] = v43;
      *(void *)uint64_t v42 = v13;
    }
    uint64_t v27 = String.index(after:)();
    unint64_t v14 = v27;
    *(void *)(v47 + 16) = v27;
    if ((v20 & 1) == 0 && v13[2] == v41) {
      break;
    }
    unint64_t v15 = v27;
    unint64_t v16 = v27;
LABEL_21:
    if (v48 == v14 >> 14) {
      goto LABEL_30;
    }
  }
  unint64_t v16 = v27;
  unint64_t v15 = v27;
LABEL_30:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  if (v48 < v16 >> 14)
  {
LABEL_38:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v31 = String.subscript.getter();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  sub_100050AB0();
  uint64_t v38 = *(void *)(*(void *)v42 + 16);
  sub_100050B24(v38);
  char v13 = *(void **)v42;
  v13[2] = v38 + 1;
  uint64_t v39 = &v13[4 * v38];
  v39[4] = v31;
  v39[5] = v33;
  v39[6] = v35;
  v39[7] = v37;
  *(void *)uint64_t v42 = v13;
LABEL_35:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_36:
  swift_release();
  return (uint64_t)v13;
}

uint64_t sub_100035B28(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    sub_100050AB0();
    uint64_t v14 = *(void *)(*(void *)(a4 + 16) + 16);
    sub_100050B24(v14);
    uint64_t v15 = *(void *)(a4 + 16);
    *(void *)(v15 + 16) = v14 + 1;
    unint64_t v16 = (void *)(v15 + 32 * v14);
    v16[4] = v7;
    v16[5] = v9;
    v16[6] = v11;
    v16[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100035C30(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_100035D10(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t sub_100035D10(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = sub_100035DB0(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_100035E20(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_100035DB0(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    uint64_t result = sub_100030858(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_100035E20(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v8 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v8 << 16;
        }
      }
      else
      {
        if ((a2 & 0x1000000000000000) != 0)
        {
          uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
        }
        else
        {
          unint64_t v12 = result >> 16;
          uint64_t v6 = _StringObject.sharedUTF8.getter();
          unint64_t v5 = v12;
        }
        if (v5 != v7 && (*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v8 = v5 - 1;
            int v9 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
          }
          while (v9 == 128);
          return v8 << 16;
        }
      }
      unint64_t v8 = v5;
      return v8 << 16;
    }
    uint64_t v10 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v10)
    {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }
  return result;
}

uint64_t sub_100035F3C(void *a1)
{
  id v1 = [a1 frontFieldBuckets];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  sub_10002E768(&qword_100697F20);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100035FA0(void *a1, SEL *a2, unint64_t *a3)
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v4;
  sub_1000362B0(0, a3);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t sub_100036014(uint64_t *a1, uint64_t *a2)
{
  return sub_100035694(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t sub_100036040(uint64_t *a1)
{
  return sub_100036014(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_100036060()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100036098()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000360A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10002E768(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10003610C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_100036138(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10003618C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a6 != 1)
  {
    swift_bridgeObjectRelease();
    sub_1000361F8(a7);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000361F8(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100036238(uint64_t a1)
{
  return a1;
}

unint64_t sub_100036264()
{
  unint64_t result = qword_100697F18;
  if (!qword_100697F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100697F18);
  }
  return result;
}

uint64_t sub_1000362B0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000362EC(uint64_t *a1)
{
  return sub_100036040(a1) & 1;
}

uint64_t sub_100036308(uint64_t a1, uint64_t a2, uint64_t (*a3)(void *))
{
  return sub_1000356D8(0x7FFFFFFFFFFFFFFFLL, 1u, a3, v5, v4, v3);
}

uint64_t sub_100036330()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100036358()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_100036380(uint64_t a1)
{
  return sub_1000312BC(a1, 1, v1);
}

uint64_t sub_1000363A0(uint64_t a1)
{
  return sub_10003349C(a1, 1, 1, v1);
}

uint64_t sub_1000363BC(uint64_t a1)
{
  return sub_10003349C(a1, 0, 1, v1);
}

uint64_t sub_1000363D8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000363FC(uint64_t result)
{
  *(void *)(v2 - 64) = result;
  *(void *)(v2 - 56) = v1;
  return result;
}

uint64_t sub_100036408()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100036420()
{
  return Substring.lowercased()()._countAndFlagsBits;
}

uint64_t sub_100036440()
{
  return swift_bridgeObjectRelease();
}

BOOL sub_100036458(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_100036464(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000006449;
  unint64_t v3 = 0x776F6C666B726F77;
  uint64_t v4 = a1;
  unint64_t v5 = 0x776F6C666B726F77;
  unint64_t v6 = 0xEA00000000006449;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0x8000000100568E60;
      unint64_t v5 = 0xD000000000000016;
      break;
    case 2:
      unint64_t v5 = 0x636E657571657266;
      unint64_t v6 = 0xE900000000000079;
      break;
    case 3:
      unint64_t v5 = 0x53676E69646E6962;
      uint64_t v7 = 0x656372756FLL;
      goto LABEL_6;
    case 4:
      unint64_t v5 = 0x69646E6F63657270;
      uint64_t v7 = 0x736E6F6974;
LABEL_6:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0x8000000100568E60;
      unint64_t v3 = 0xD000000000000016;
      break;
    case 2:
      unint64_t v3 = 0x636E657571657266;
      unint64_t v2 = 0xE900000000000079;
      break;
    case 3:
      unint64_t v3 = 0x53676E69646E6962;
      uint64_t v8 = 0x656372756FLL;
      goto LABEL_12;
    case 4:
      unint64_t v3 = 0x69646E6F63657270;
      uint64_t v8 = 0x736E6F6974;
LABEL_12:
      unint64_t v2 = v8 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

BOOL sub_100036650(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_100036660(char a1, char a2)
{
  unint64_t v3 = sub_10005458C(a1);
  uint64_t v5 = v4;
  if (v3 == sub_10005458C(a2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

BOOL sub_1000366E8(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1000366F8()
{
  unint64_t v0 = 0xEF67614273736572;
  sub_10003F368();
  uint64_t v3 = v2 | 0x6464416800000000;
  uint64_t v5 = v4;
  uint64_t v6 = 0x6464416863746566;
  unint64_t v7 = 0xEF67614273736572;
  switch(v5)
  {
    case 1:
      uint64_t v6 = 0x6361437261656C63;
      uint64_t v8 = 7562600;
      goto LABEL_4;
    case 2:
      uint64_t v6 = 0x6E6F436863746566;
      uint64_t v8 = 6777190;
LABEL_4:
      unint64_t v7 = v8 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    case 3:
      uint64_t v6 = 0x6F72506863746566;
      unint64_t v7 = 0xED000073656C6966;
      break;
    case 4:
      uint64_t v6 = 0x7265536863746566;
      unint64_t v7 = 0xEE00676142726576;
      break;
    default:
      break;
  }
  switch(v1)
  {
    case 1:
      uint64_t v3 = 0x6361437261656C63;
      uint64_t v9 = 7562600;
      goto LABEL_10;
    case 2:
      sub_10003F368();
      uint64_t v3 = v10 | 0x6E6F436800000000;
      uint64_t v9 = 6777190;
LABEL_10:
      unint64_t v0 = v9 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    case 3:
      sub_10003F368();
      uint64_t v3 = v11 | 0x6F72506800000000;
      unint64_t v0 = 0xED000073656C6966;
      break;
    case 4:
      sub_10003F368();
      uint64_t v3 = v12 | 0x7265536800000000;
      unint64_t v0 = 0xEE00676142726576;
      break;
    default:
      break;
  }
  if (v6 == v3 && v7 == v0) {
    char v14 = 1;
  }
  else {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14 & 1;
}

uint64_t sub_1000368FC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    sub_1000362B0(0, &qword_100698060);
    swift_bridgeObjectRetain();
    v8._unint64_t countAndFlagsBits = a6;
    v8._object = (void *)0xE600000000000000;
    String.append(_:)(v8);
    sub_10002E768(&qword_100698068);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_10058CEC0;
    *(void *)(v9 + 56) = &type metadata for Double;
    *(void *)(v9 + 64) = &protocol witness table for Double;
    *(void *)(v9 + 32) = a1;
    uint64_t v10 = NSPredicate.init(format:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v10;
}

id ASFinanceStoreHelper.errorDomain.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC3asd20ASFinanceStoreHelper_errorDomain);
}

id ASFinanceStoreHelper.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC3asd20ASFinanceStoreHelper_errorDomain;
  sub_1000362B0(0, (unint64_t *)&qword_1006979B0);
  unsigned int v2 = v0;
  *(void *)&v0[v1] = sub_100034B20();
  type metadata accessor for FinanceStore();
  *(void *)&v2[OBJC_IVAR____TtC3asd20ASFinanceStoreHelper_store] = static FinanceStore.shared.getter();

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for ASFinanceStoreHelper();
  return [super init];
}

uint64_t type metadata accessor for ASFinanceStoreHelper()
{
  return self;
}

id sub_100036B40()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  id v3 = objc_allocWithZone((Class)NSError);
  return sub_10003ADFC(v0, v2, 174002, 0);
}

Class sub_100036BA0(char a1)
{
  uint64_t v58 = Dictionary.init(dictionaryLiteral:)();
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v12 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
    if (*(unsigned char *)(v1 + *(int *)(v12 + 24) + 16))
    {
      long long v56 = 0u;
      long long v57 = 0u;
    }
    else
    {
      *(void *)&long long v56 = 0;
      *((void *)&v56 + 1) = 0xE000000000000000;
      Double.write<A>(to:)();
      v20._unint64_t countAndFlagsBits = 44;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      uint64_t v12 = Double.write<A>(to:)();
      *((void *)&v57 + 1) = &type metadata for String;
    }
    uint64_t v21 = sub_10003F228(v12, v13, v14, v15, v16, v17, v18, v19, v56);
    sub_100052EA0((uint64_t)v21, 108, 0xE100000000000000);
    if ((a1 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  *((void *)&v57 + 1) = type metadata accessor for Date();
  sub_10003EB78((uint64_t *)&v56);
  uint64_t v3 = InternalTransaction.transactionDate.getter();
  unsigned int v11 = sub_10003F228(v3, v4, v5, v6, v7, v8, v9, v10, v56);
  sub_100052EA0((uint64_t)v11, 25716, 0xE200000000000000);
  if ((a1 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((a1 & 4) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v22 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
  uint64_t v30 = v1 + *(int *)(v22 + 20);
  if ((*(unsigned char *)(v30 + 8) & 1) == 0)
  {
    uint64_t v31 = *(void *)v30;
    *((void *)&v57 + 1) = &type metadata for Int;
    uint64_t v32 = sub_10003F228(v22, v23, v24, v25, v26, v27, v28, v29, v31);
    sub_100052EA0((uint64_t)v32, 100, 0xE100000000000000);
  }
LABEL_12:
  if ((a1 & 8) != 0)
  {
    uint64_t v33 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
    uint64_t v41 = (uint64_t *)(v1 + *(int *)(v33 + 32));
    if (v41[1])
    {
      long long v56 = 0u;
      long long v57 = 0u;
    }
    else
    {
      uint64_t v42 = *v41;
      *((void *)&v57 + 1) = &type metadata for UInt64;
      *(void *)&long long v56 = v42;
    }
    uint64_t v43 = sub_10003F228(v33, v34, v35, v36, v37, v38, v39, v40, v56);
    sub_100052EA0((uint64_t)v43, 29556, 0xE200000000000000);
  }
  if ((a1 & 0x10) != 0)
  {
    uint64_t v44 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
    char v45 = *(unsigned char *)(v1 + *(int *)(v44 + 28));
    *((void *)&v57 + 1) = &type metadata for UInt8;
    LOBYTE(v56) = v45;
    uint64_t v53 = sub_10003F228(v44, v46, v47, v48, v49, v50, v51, v52, v56);
    sub_100052EA0((uint64_t)v53, 29804, 0xE200000000000000);
  }
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t sub_100036DE0()
{
  sub_10003F0F4();
  v1[3] = v2;
  v1[4] = v0;
  v1[2] = v3;
  sub_10002E768(&qword_100698110);
  v1[5] = sub_10003F24C();
  v1[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for MapsInsight();
  v1[7] = v4;
  sub_100031774(v4);
  v1[8] = v5;
  v1[9] = sub_10003F13C();
  sub_10002E768(&qword_100698118);
  v1[10] = sub_10003F13C();
  uint64_t v6 = type metadata accessor for ApplePayTransactionInsight.Location();
  v1[11] = v6;
  sub_100031774(v6);
  v1[12] = v7;
  v1[13] = sub_10003F13C();
  uint64_t v8 = type metadata accessor for TransactionType();
  v1[14] = v8;
  sub_100031774(v8);
  v1[15] = v9;
  v1[16] = sub_10003F24C();
  v1[17] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ApplePayTransactionInsight();
  v1[18] = v10;
  sub_100031774(v10);
  v1[19] = v11;
  v1[20] = sub_10003F13C();
  uint64_t v12 = type metadata accessor for Transaction.Insight();
  v1[21] = v12;
  sub_100031774(v12);
  v1[22] = v13;
  v1[23] = sub_10003F13C();
  uint64_t v14 = type metadata accessor for UUID();
  v1[24] = v14;
  sub_100031774(v14);
  v1[25] = v15;
  v1[26] = sub_10003F13C();
  sub_10003F160();
  return _swift_task_switch(v16, v17, v18);
}

uint64_t sub_100036FC8()
{
  sub_10003F0F4();
  InternalTransaction.id.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003706C;
  uint64_t v2 = *(void *)(v0 + 208);
  return FinanceStore.insights(transactionID:)(v2);
}

uint64_t sub_10003706C()
{
  sub_10003F444();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10003F0B8();
  *uint64_t v5 = v4;
  *(void *)(v7 + 224) = v6;
  *(void *)(v7 + 232) = v0;
  swift_task_dealloc();
  uint64_t v8 = sub_10003F3BC();
  v9(v8);
  sub_10003F160();
  return _swift_task_switch(v10, v11, v12);
}

void sub_1000371A4()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    sub_10003F16C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v53 = *(void (**)(void))(v0 + 8);
    v53();
    return;
  }
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v3 += 16;
  v88 = v5;
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 64));
  v87 = (uint64_t (**)(uint64_t, uint64_t))(v3 + 72);
  int v86 = enum case for Transaction.Insight.maps(_:);
  int v83 = enum case for Transaction.Insight.bank(_:);
  int v81 = enum case for Transaction.Insight.applePay(_:);
  v84 = (void (**)(uint64_t, void))(v3 + 80);
  unsigned int v77 = enum case for TransactionType.pointOfSale(_:);
  v75 = (void (**)(uint64_t, uint64_t))(v4 + 8);
  v76 = (void (**)(uint64_t, void, uint64_t))(v4 + 104);
  v82 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 64) + 32);
  uint64_t v85 = *(void *)(v3 + 56);
  while (1)
  {
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v8 = *(void *)(v0 + 168);
    v88(v7, v6, v8);
    int v9 = (*v87)(v7, v8);
    if (v9 != v86) {
      break;
    }
    uint64_t v10 = *(void *)(v0 + 184);
    uint64_t v11 = *(void *)(v0 + 72);
    uint64_t v13 = *(void *)(v0 + 48);
    uint64_t v12 = *(void *)(v0 + 56);
    (*v84)(v10, *(void *)(v0 + 168));
    (*v82)(v11, v10, v12);
    MapsInsight.merchant.getter();
    uint64_t v14 = type metadata accessor for MapsMerchant();
    if (sub_1000312BC(v13, 1, v14) == 1)
    {
      sub_10003EC2C(*(void *)(v0 + 48), &qword_100698110);
LABEL_11:
      sub_10003F450();
LABEL_18:
      sub_10003F240();
      v36();
      goto LABEL_25;
    }
    uint64_t v17 = MapsMerchant.locationLatitude.getter();
    char v19 = v18;
    uint64_t v20 = *(void (**)(uint64_t))(*(void *)(v14 - 8) + 8);
    uint64_t v21 = sub_10003F3C8();
    v20(v21);
    if (v19) {
      goto LABEL_11;
    }
    uint64_t v22 = *(void *)(v0 + 40);
    MapsInsight.merchant.getter();
    if (sub_1000312BC(v22, 1, v14) == 1)
    {
      sub_10003EC2C(*(void *)(v0 + 40), &qword_100698110);
LABEL_24:
      uint64_t v51 = sub_10003F450();
      v52(v51);
      goto LABEL_25;
    }
    uint64_t v37 = MapsMerchant.locationLongitude.getter();
    char v39 = v38;
    uint64_t v40 = sub_10003F3C8();
    v20(v40);
    if (v39) {
      goto LABEL_24;
    }
    uint64_t v41 = *(void *)(v0 + 32);
    uint64_t v42 = *(void **)(v0 + 16);
    uint64_t v43 = (int *)type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
    uint64_t v44 = v41 + v43[6];
    *(void *)uint64_t v44 = v17;
    *(void *)(v44 + 8) = v37;
    *(unsigned char *)(v44 + 16) = 0;
    id v45 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:*(double *)&v17 longitude:*(double *)&v37];
    [v42 distanceFromLocation:v45];
    double v47 = v46;

    if ((~*(void *)&v47 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v47 <= -9.22337204e18) {
      goto LABEL_41;
    }
    if (v47 >= 9.22337204e18) {
      goto LABEL_42;
    }
    uint64_t v48 = *(void *)(v0 + 32);
    uint64_t v49 = v48 + v43[5];
    *(void *)uint64_t v49 = (uint64_t)v47;
    *(unsigned char *)(v49 + 8) = 0;
    sub_10003F240();
    v50();
    *(unsigned char *)(v48 + v43[7]) = 0;
LABEL_25:
    v6 += v85;
    if (!--v2) {
      goto LABEL_26;
    }
  }
  if (v9 == v83)
  {
    uint64_t v15 = *(void *)(v0 + 32);
    uint64_t v16 = v15 + *(int *)(type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction() + 32);
    *(void *)uint64_t v16 = 4;
    *(unsigned char *)(v16 + 8) = 0;
    goto LABEL_18;
  }
  if (v9 != v81) {
    goto LABEL_18;
  }
  uint64_t v23 = *(void *)(v0 + 136);
  uint64_t v24 = *(void *)(v0 + 128);
  uint64_t v25 = *(void *)(v0 + 112);
  uint64_t v80 = *(void *)(v0 + 88);
  uint64_t v79 = *(void *)(v0 + 80);
  uint64_t v78 = *(void *)(v0 + 32);
  (*v84)(*(void *)(v0 + 184), *(void *)(v0 + 168));
  uint64_t v26 = sub_10003F3BC();
  v27(v26);
  InternalTransaction.transactionType.getter();
  (*v76)(v24, v77, v25);
  sub_10003EBDC();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v28 = *(unsigned __int16 *)(v0 + 240);
  int v29 = *(unsigned __int16 *)(v0 + 242);
  uint64_t v30 = *v75;
  (*v75)(v24, v25);
  v30(v23, v25);
  if (v28 == v29) {
    uint64_t v31 = 1;
  }
  else {
    uint64_t v31 = 2;
  }
  uint64_t v32 = (int *)type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
  uint64_t v33 = v78 + v32[8];
  *(void *)uint64_t v33 = v31;
  *(unsigned char *)(v33 + 8) = 0;
  ApplePayTransactionInsight.location.getter();
  if (sub_1000312BC(v79, 1, v80) == 1)
  {
    uint64_t v34 = *(void *)(v0 + 80);
    sub_10003F240();
    v35();
    sub_10003EC2C(v34, &qword_100698118);
    goto LABEL_25;
  }
  uint64_t v55 = *(void *)(v0 + 96);
  uint64_t v54 = *(void *)(v0 + 104);
  uint64_t v56 = *(void *)(v0 + 80);
  uint64_t v57 = *(void *)(v0 + 88);
  uint64_t v58 = *(void *)(v0 + 32);
  v59 = *(void **)(v0 + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v54, v56, v57);
  ApplePayTransactionInsight.Location.latitude.getter();
  uint64_t v61 = v60;
  ApplePayTransactionInsight.Location.longitude.getter();
  uint64_t v62 = v58 + v32[6];
  *(void *)uint64_t v62 = v61;
  *(void *)(v62 + 8) = v63;
  *(unsigned char *)(v62 + 16) = 0;
  char v64 = ApplePayTransactionInsight.isCoarseLocation.getter();
  if (v64) {
    char v65 = 1;
  }
  else {
    char v65 = 2;
  }
  if (v64 == 2) {
    char v66 = 0;
  }
  else {
    char v66 = v65;
  }
  *(unsigned char *)(v58 + v32[7]) = v66;
  ApplePayTransactionInsight.Location.latitude.getter();
  double v68 = v67;
  ApplePayTransactionInsight.Location.longitude.getter();
  id v70 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v68 longitude:v69];
  [v59 distanceFromLocation:v70];
  double v72 = v71;

  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v57);
  sub_10003F3BC();
  sub_10003F240();
  v73();
  if ((~*(void *)&v72 & 0x7FF0000000000000) == 0) {
    goto LABEL_43;
  }
  if (v72 <= -9.22337204e18)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v72 < 9.22337204e18)
  {
    uint64_t v74 = *(void *)(v0 + 32) + v32[5];
    *(void *)uint64_t v74 = (uint64_t)v72;
    *(unsigned char *)(v74 + 8) = 0;
    goto LABEL_27;
  }
LABEL_45:
  __break(1u);
}

uint64_t sub_100037900()
{
  sub_10003F16C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v0();
}

uint64_t ASFinanceStoreHelper.queryTransactions(startDateOffset:endDateOffset:transactionSources:locationType:locationFilterDistance:lat:lon:maxCount:sortOrder:sortByAttributes:attributes:)()
{
  sub_10003F0F4();
  *(void *)(v1 + 120) = v21;
  *(void *)(v1 + 128) = v0;
  *(_OWORD *)(v1 + 104) = v20;
  *(_OWORD *)(v1 + 88) = v19;
  *(void *)(v1 + 72) = v2;
  *(void *)(v1 + 80) = v3;
  *(void *)(v1 + 56) = v4;
  *(void *)(v1 + 64) = v5;
  *(void *)(v1 + 40) = v6;
  *(void *)(v1 + 48) = v7;
  *(void *)(v1 + 24) = v8;
  *(void *)(v1 + 32) = v9;
  uint64_t v10 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
  *(void *)(v1 + 136) = v10;
  sub_100031774(v10);
  *(void *)(v1 + 144) = v11;
  *(void *)(v1 + 152) = sub_10003F24C();
  *(void *)(v1 + 160) = swift_task_alloc();
  *(void *)(v1 + 168) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for InternalTransactionResult();
  *(void *)(v1 + 176) = v12;
  sub_100031774(v12);
  *(void *)(v1 + 184) = v13;
  *(void *)(v1 + 192) = sub_10003F13C();
  sub_10003F160();
  return _swift_task_switch(v14, v15, v16);
}

uint64_t sub_100037ABC()
{
  sub_100039A78(v0[8], v0[9], v0[10], v0[11]);
  v0[25] = v1;
  v0[26] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[27] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100037C14;
  double v12 = sub_10003F3A8();
  return sub_100039CD0(v4, v5, v6, v7, v12, v13, v8, v9, v10, v11);
}

uint64_t sub_100037C14()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10003F0B8();
  *uint64_t v5 = v4;
  *(void *)(v6 + 224) = v0;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100037CF0()
{
  id v1 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:*(double *)(v0 + 200) longitude:*(double *)(v0 + 208)];
  *(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 232) = v1;
  uint64_t v2 = InternalTransactionResult.transactions.getter();
  *(void *)(v0 + 240) = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 248) = v3;
  if (v3)
  {
    *(void *)(v0 + 256) = OBJC_IVAR____TtC3asd20ASFinanceStoreHelper_store;
    uint64_t v4 = type metadata accessor for InternalTransaction();
    uint64_t v5 = 0;
    *(void *)(v0 + 264) = v4;
    uint64_t v6 = *(void *)(v4 - 8);
    *(void *)(v0 + 272) = v6;
    int v7 = *(_DWORD *)(v6 + 80);
    *(_DWORD *)(v0 + 328) = v7;
    uint64_t v8 = *(void *)(v6 + 72);
    *(void *)(v0 + 280) = v8;
    uint64_t v9 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    *(void *)(v0 + 288) = v9;
    uint64_t v10 = _swiftEmptyArrayStorage;
    while (1)
    {
      *(void *)(v0 + 296) = v10;
      *(void *)(v0 + 304) = v5;
      uint64_t v11 = *(void *)(v0 + 168);
      double v12 = *(int **)(v0 + 136);
      uint64_t v13 = *(void *)(v0 + 112);
      uint64_t v14 = *(void *)(v0 + 120);
      v9(v11, v2 + ((v7 + 32) & ~(unint64_t)v7) + v5 * v8, v4);
      uint64_t v15 = v11 + v12[5];
      *(void *)uint64_t v15 = 0;
      *(unsigned char *)(v15 + 8) = 1;
      uint64_t v16 = v11 + v12[6];
      *(void *)uint64_t v16 = 0;
      *(void *)(v16 + 8) = 0;
      *(unsigned char *)(v16 + 16) = 1;
      *(unsigned char *)(v11 + v12[7]) = 0;
      uint64_t v17 = v11 + v12[8];
      *(void *)uint64_t v17 = 0;
      *(unsigned char *)(v17 + 8) = 1;
      if (v13 == 1 || (v14 & 0xE) != 0) {
        break;
      }
      sub_10003AF74(*(void *)(v0 + 168), *(void *)(v0 + 160));
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v10 = *(void **)(v0 + 296);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v10 = (void *)sub_10003B230(0, v10[2] + 1, 1, *(void *)(v0 + 296), &qword_100698108, (uint64_t (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction, (uint64_t (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
      }
      unint64_t v20 = v10[2];
      unint64_t v19 = v10[3];
      if (v20 >= v19 >> 1) {
        uint64_t v10 = (void *)sub_10003B230(v19 > 1, v20 + 1, 1, (uint64_t)v10, &qword_100698108, (uint64_t (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction, (uint64_t (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
      }
      uint64_t v21 = *(void *)(v0 + 248);
      uint64_t v22 = *(void *)(v0 + 160);
      uint64_t v23 = *(void *)(v0 + 168);
      uint64_t v24 = *(void *)(v0 + 144);
      uint64_t v25 = *(void *)(v0 + 304) + 1;
      v10[2] = v20 + 1;
      sub_10003B420(v22, (uint64_t)v10+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v20);
      *(void *)(v0 + 16) = v10;
      sub_10003AF18(v23);
      if (v25 == v21)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      uint64_t v5 = *(void *)(v0 + 304) + 1;
      uint64_t v8 = *(void *)(v0 + 280);
      uint64_t v9 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 288);
      LOBYTE(v7) = *(unsigned char *)(v0 + 328);
      uint64_t v4 = *(void *)(v0 + 264);
      uint64_t v2 = *(void *)(v0 + 240);
    }
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v26;
    void *v26 = v0;
    v26[1] = sub_100038228;
    sub_10003F284();
    return sub_100036DE0();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
LABEL_16:
    if (*(void *)(v0 + 112) == 1)
    {
      if (*(void *)(v0 + 104)) {
        int v28 = (uint64_t (*)(uint64_t, uint64_t))sub_1000388D8;
      }
      else {
        int v28 = (uint64_t (*)(uint64_t, uint64_t))sub_100038870;
      }
      sub_100038940(v28, 0);
      uint64_t v10 = *(void **)(v0 + 16);
    }
    uint64_t v29 = v10[2];
    if (v29)
    {
      uint64_t v30 = *(void *)(v0 + 144);
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      sub_10003F234();
      uint64_t v32 = (uint64_t)v10 + v31;
      uint64_t v33 = *(void *)(v30 + 72);
      do
      {
        uint64_t v34 = *(void *)(v0 + 152);
        uint64_t v35 = *(void *)(v0 + 120);
        sub_10003AF74(v32, v34);
        sub_100036BA0(v35);
        sub_10003AF18(v34);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        sub_10003F388();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v32 += v33;
        --v29;
      }
      while (v29);
      uint64_t v36 = *(void **)(v0 + 232);
      swift_bridgeObjectRelease();
    }
    else
    {
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = sub_10003F3BC();
    v38(v37);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = sub_10003F430();
    return v40(v39);
  }
}

uint64_t sub_100038228()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v3 = v2;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_10003F0B8();
  void *v6 = v5;
  *(void *)(v3 + 320) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100038318()
{
  do
  {
    sub_10003AF74(*(void *)(v0 + 168), *(void *)(v0 + 160));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v2 = *(void *)(v0 + 296);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v2 = sub_10003B230(0, *(void *)(v2 + 16) + 1, 1, *(void *)(v0 + 296), &qword_100698108, (uint64_t (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction, (uint64_t (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
    }
    unint64_t v4 = *(void *)(v2 + 16);
    unint64_t v3 = *(void *)(v2 + 24);
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_10003B230(v3 > 1, v4 + 1, 1, v2, &qword_100698108, (uint64_t (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction, (uint64_t (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
    }
    uint64_t v5 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 304) + 1;
    *(void *)(v2 + 16) = v4 + 1;
    sub_10003B420(v6, v2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v4);
    *(void *)(v0 + 16) = v2;
    sub_10003AF18(v7);
    if (v9 == v5)
    {
      swift_bridgeObjectRelease();
      if (*(void *)(v0 + 112) == 1)
      {
        if (*(void *)(v0 + 104)) {
          uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))sub_1000388D8;
        }
        else {
          uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))sub_100038870;
        }
        sub_100038940(v18, 0);
        uint64_t v2 = *(void *)(v0 + 16);
      }
      uint64_t v19 = *(void *)(v2 + 16);
      if (v19)
      {
        uint64_t v20 = *(void *)(v0 + 144);
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        sub_10003F234();
        uint64_t v22 = v2 + v21;
        uint64_t v23 = *(void *)(v20 + 72);
        do
        {
          uint64_t v24 = *(void *)(v0 + 152);
          uint64_t v25 = *(void *)(v0 + 120);
          sub_10003AF74(v22, v24);
          sub_100036BA0(v25);
          sub_10003AF18(v24);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          sub_10003F388();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v22 += v23;
          --v19;
        }
        while (v19);
        uint64_t v26 = *(void **)(v0 + 232);
        swift_bridgeObjectRelease();
      }
      else
      {
      }
      uint64_t v31 = *(void *)(v0 + 184);
      uint64_t v30 = *(void *)(v0 + 192);
      uint64_t v32 = *(void *)(v0 + 176);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10003F430();
      sub_10003F29C();
      __asm { BRAA            X2, X16 }
    }
    uint64_t v10 = *(void *)(v0 + 304) + 1;
    *(void *)(v0 + 296) = v2;
    *(void *)(v0 + 304) = v10;
    uint64_t v11 = *(void *)(v0 + 168);
    double v12 = *(int **)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 120);
    (*(void (**)(uint64_t, unint64_t, void))(v0 + 288))(v11, *(void *)(v0 + 240)+ ((*(unsigned __int8 *)(v0 + 328) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 328))+ *(void *)(v0 + 280) * v10, *(void *)(v0 + 264));
    uint64_t v15 = v11 + v12[5];
    *(void *)uint64_t v15 = 0;
    *(unsigned char *)(v15 + 8) = 1;
    uint64_t v16 = v11 + v12[6];
    *(void *)uint64_t v16 = 0;
    *(void *)(v16 + 8) = 0;
    *(unsigned char *)(v16 + 16) = 1;
    *(unsigned char *)(v11 + v12[7]) = 0;
    uint64_t v17 = v11 + v12[8];
    *(void *)uint64_t v17 = 0;
    *(unsigned char *)(v17 + 8) = 1;
  }
  while (v14 != 1 && (v13 & 0xE) == 0);
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 312) = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_100038228;
  sub_10003F284();
  sub_10003F29C();
  return sub_100036DE0();
}

uint64_t sub_10003872C()
{
  sub_10003F444();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v0();
}

uint64_t sub_1000387B0()
{
  sub_10003F444();
  uint64_t v1 = *(void *)(v0 + 168);

  sub_10003AF18(v1);
  uint64_t v2 = sub_10003F300();
  v3(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v4();
}

BOOL sub_100038854(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_100038860(unsigned __int8 a1, unsigned __int8 a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_100038870(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction() + 20);
  uint64_t v5 = (void *)(a1 + v4);
  if (*(unsigned char *)(a1 + v4 + 8)) {
    return 0;
  }
  uint64_t v7 = a2 + v4;
  return (*(unsigned char *)(v7 + 8) & 1) != 0 || *v5 < *(void *)v7;
}

BOOL sub_1000388D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction() + 20);
  uint64_t v5 = (void *)(a1 + v4);
  if (*(unsigned char *)(a1 + v4 + 8)) {
    return 0;
  }
  uint64_t v7 = a2 + v4;
  return (*(unsigned char *)(v7 + 8) & 1) != 0 || *(void *)v7 < *v5;
}

uint64_t sub_100038940(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = sub_1000AB2B4(v5);
  }
  uint64_t result = sub_10003D80C(a1, a2);
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_100038AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, void *a13)
{
  v13[2] = a13;
  v13[3] = _Block_copy(a12);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  void v13[4] = v14;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13[5] = v15;
  a13;
  uint64_t v16 = (void *)swift_task_alloc();
  v13[6] = v16;
  *uint64_t v16 = v13;
  v16[1] = sub_100038C38;
  return ASFinanceStoreHelper.queryTransactions(startDateOffset:endDateOffset:transactionSources:locationType:locationFilterDistance:lat:lon:maxCount:sortOrder:sortByAttributes:attributes:)();
}

uint64_t sub_100038C38()
{
  uint64_t v2 = v0;
  sub_1000336EC();
  uint64_t v4 = v3;
  sub_10003F0E8();
  *uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v6 + 16);
  uint64_t v8 = *v1;
  sub_10003F0B8();
  void *v9 = v8;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v10 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    double v12 = (void *)v10;
  }
  else
  {
    sub_1000362B0(0, &qword_100698090);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
    double v12 = isa;
  }
  uint64_t v13 = *(void (***)(void, void, void))(v4 + 24);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  sub_10003F1AC();
  return v14();
}

uint64_t type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction()
{
  uint64_t result = qword_100697FE0;
  if (!qword_100697FE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100038E30(unsigned int a1, int a2)
{
  return a2 & a1;
}

uint64_t sub_100038E38(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

BOOL sub_100038E40(unsigned __int8 *a1, unsigned __int8 a2)
{
  int v3 = (*v2 & a2);
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

BOOL sub_100038E70(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_100038E9C(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_100038EAC(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_100038EBC(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t sub_100038ECC(uint64_t result)
{
  *v1 &= result;
  return result;
}

BOOL sub_100038EDC(char a1, unsigned __int8 a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_100038EEC(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_100038EF8(unsigned __int8 a1, char a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_100038F08(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_100038F14(char a1)
{
  return a1 == 0;
}

BOOL sub_100038F20(uint64_t a1)
{
  return a1 == 0;
}

unsigned char *sub_100038F2C@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100038F38@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = variable initialization expression of CoordRange.spansAntimeridian();
  *a1 = result;
  return result;
}

uint64_t sub_100038F60@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100094748(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100038F90@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100038E30(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100038FC0@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100094758(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100038FF0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100038E40(a1, *a2);
}

uint64_t sub_100038FF8@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100094768(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_10003902C@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000947B4(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_100039060(unsigned __int8 *a1)
{
  return sub_100038E9C(*a1);
}

uint64_t sub_100039068(unsigned __int8 *a1)
{
  return sub_100038EBC(*a1);
}

uint64_t sub_100039070(unsigned __int8 *a1)
{
  return sub_1000947EC(*a1);
}

uint64_t sub_100039078@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10009480C(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1000390A8(char *a1)
{
  return sub_100038EDC(*a1, *v1);
}

BOOL sub_1000390B4(unsigned __int8 *a1)
{
  return sub_100038860(*a1, *v1);
}

BOOL sub_1000390C0(unsigned __int8 *a1)
{
  return sub_100038EF8(*a1, *v1);
}

BOOL sub_1000390CC()
{
  return sub_100038F14(*v0);
}

uint64_t sub_1000390D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_1000390EC(unsigned __int8 *a1)
{
  return sub_10009481C(*a1);
}

unsigned __int8 *sub_1000390F4@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100039104(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100039110(char *a1, char *a2)
{
  return sub_100036650(*a1, *a2);
}

uint64_t sub_10003911C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10009469C(a1);
  *a2 = result;
  return result;
}

void *sub_100039144@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100039150@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___s3asd14RavioliManagerC14monitoringTask33_B5E58E12329358626A8B49370FDD58A1LLScTyyts5NeverOGSgvpfi();
  *a1 = result;
  return result;
}

uint64_t sub_100039178@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100094750(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1000391A8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100038E38(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_1000391D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100094760(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100039208(void *a1, uint64_t *a2)
{
  return sub_100038E70(a1, *a2);
}

uint64_t sub_100039210@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100094790(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100039244@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000947D4(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_100039278(uint64_t *a1)
{
  return sub_100038EAC(*a1);
}

uint64_t sub_100039280(uint64_t *a1)
{
  return sub_100038ECC(*a1);
}

uint64_t sub_100039288(uint64_t *a1)
{
  return sub_1000947FC(*a1);
}

uint64_t sub_100039290@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100094814(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_1000392C0(uint64_t *a1)
{
  return sub_100038EEC(*a1, *v1);
}

BOOL sub_1000392CC(uint64_t *a1)
{
  return sub_100038854(*a1, *v1);
}

BOOL sub_1000392D8(uint64_t *a1)
{
  return sub_100038F08(*a1, *v1);
}

BOOL sub_1000392E4()
{
  return sub_100038F20(*v0);
}

uint64_t sub_1000392EC(uint64_t *a1)
{
  return sub_10009482C(*a1);
}

void *sub_1000392F4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_100039304@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000946F0();
  *a1 = result;
  return result;
}

uint64_t ASFinanceStoreHelper.countTransactions(startDateOffset:endDateOffset:transactionSources:locationType:locationFilterDistance:lat:lon:maxCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10003F0F4();
  v11[11] = a10;
  uint64_t v11[12] = v10;
  v11[9] = v12;
  v11[10] = a9;
  v11[7] = v13;
  v11[8] = v14;
  void v11[5] = v15;
  void v11[6] = v16;
  v11[3] = v17;
  void v11[4] = v18;
  v11[2] = v19;
  uint64_t v20 = type metadata accessor for InternalTransactionResult();
  v11[13] = v20;
  sub_100031774(v20);
  v11[14] = v21;
  v11[15] = sub_10003F13C();
  sub_10003F160();
  return sub_10003F408();
}

uint64_t sub_1000393C4()
{
  sub_100039A78(v0[7], v0[8], v0[9], v0[10]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000394EC;
  double v9 = sub_10003F3A8();
  return sub_100039CD0(v2, v3, v4, v5, v9, v10, v6, v7, v8, 0);
}

uint64_t sub_1000394EC()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10003F0B8();
  *uint64_t v5 = v4;
  *(void *)(v6 + 136) = v0;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000395C8()
{
  sub_10003F444();
  uint64_t v1 = *(void *)(InternalTransactionResult.transactions.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_10003F300();
  v3(v2);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v1);
}

uint64_t sub_100039650()
{
  sub_10003F0F4();
  swift_task_dealloc();
  sub_10003F1AC();
  return v0();
}

uint64_t sub_100039780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, void *a10)
{
  v10[2] = a10;
  v10[3] = _Block_copy(a9);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  v10[4] = v15;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;
  v10[5] = v18;
  a10;
  uint64_t v20 = (void *)swift_task_alloc();
  v10[6] = v20;
  *uint64_t v20 = v10;
  v20[1] = sub_1000398B4;
  return ASFinanceStoreHelper.countTransactions(startDateOffset:endDateOffset:transactionSources:locationType:locationFilterDistance:lat:lon:maxCount:)(a1, a2, a3, a4, a5, v14, v16, v17, v19, a8);
}

uint64_t sub_1000398B4(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  sub_10003F0B8();
  uint64_t *v7 = v6;
  uint64_t v8 = *(void **)(v5 + 16);
  uint64_t v9 = *v2;
  uint64_t *v7 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t))(v10 + 16))(v10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v10 + 16))(v10, a1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v12 = *(uint64_t (**)(void))(v9 + 8);
  return v12();
}

uint64_t sub_100039A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_100039B40(a1, a2);
  if ((v9 & 1) != 0
    || (double v10 = *(double *)&v8,
        swift_bridgeObjectRetain(),
        *(double *)&uint64_t result = COERCE_DOUBLE(sub_100039B40(a3, a4)),
        (v12 & 1) != 0)
    || v10 < -90.0
    || v10 > 90.0
    || *(double *)&result < -180.0
    || *(double *)&result > 180.0)
  {
    sub_100036B40();
    *(double *)&uint64_t result = COERCE_DOUBLE(swift_willThrow());
  }
  return result;
}

uint64_t sub_100039B40(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    __chkstk_darwin(a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = sub_10003EB18(v4, v5, (void (*)(uint64_t *__return_ptr))sub_10003ED00);
      swift_bridgeObjectRelease();
    }
  }
  if (v6) {
    return 0;
  }
  else {
    return 0;
  }
}

uint64_t sub_100039CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v11 + 80) = a10;
  *(void *)(v11 + 88) = v10;
  *(void *)(v11 + 72) = a9;
  *(double *)(v11 + 56) = a5;
  *(double *)(v11 + 64) = a6;
  *(void *)(v11 + 40) = a4;
  *(void *)(v11 + 48) = a8;
  *(void *)(v11 + 24) = a2;
  *(void *)(v11 + 32) = a3;
  *(void *)(v11 + 16) = a1;
  sub_10003F160();
  return sub_10003F408();
}

uint64_t sub_100039D08()
{
  uint64_t v19 = v0[5];
  unint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  sub_10002E768(&qword_100699D10);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10058CED0;
  sub_1000362B0(0, &qword_100698060);
  sub_10002E768(&qword_100698068);
  uint64_t v4 = sub_10003F3F0();
  *(_OWORD *)(v4 + 16) = xmmword_10058CEC0;
  id v5 = [objc_allocWithZone((Class)NSDate) initWithTimeIntervalSinceNow:-(double)v1];
  uint64_t v6 = sub_1000362B0(0, &qword_100697F00);
  *(void *)(v4 + 56) = v6;
  unint64_t v7 = sub_10003EC84();
  *(void *)(v4 + 64) = v7;
  *(void *)(v4 + 32) = v5;
  sub_10003F41C();
  *(void *)(v3 + 32) = NSPredicate.init(format:_:)();
  uint64_t v8 = sub_10003F3F0();
  *(_OWORD *)(v8 + 16) = xmmword_10058CEC0;
  id v9 = [objc_allocWithZone((Class)NSDate) initWithTimeIntervalSinceNow:-(double)v2];
  *(void *)(v8 + 56) = v6;
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 32) = v9;
  sub_10003F41C();
  *(void *)(v3 + 40) = NSPredicate.init(format:_:)();
  id v10 = sub_10003A610(v19);
  uint64_t v11 = v0[10];
  *(void *)(v3 + 48) = v10;
  specialized Array._endMutation()();
  sub_1000362B0(0, &qword_100698058);
  id v12 = sub_10003A838(v3, (SEL *)&selRef_andPredicateWithSubpredicates_);
  v0[12] = v12;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_10058CEE0;
  id v14 = objc_allocWithZone((Class)NSSortDescriptor);
  *(void *)(v13 + 32) = sub_10003AEAC(0x746361736E617274, 0xEF657461446E6F69, v11 == 0);
  specialized Array._endMutation()();
  v0[13] = v13;
  id v15 = v12;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[14] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_10003A068;
  sub_10003F2D8();
  return FinanceStore.internalTransactions(with:sortDescriptors:limit:offset:)();
}

uint64_t sub_10003A068()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v3 = v2;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_10003F0B8();
  void *v6 = v5;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    unint64_t v7 = *(void **)(v3 + 96);
    swift_bridgeObjectRelease();
  }
  sub_10003F160();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10003A150()
{
  sub_10003F0F4();

  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10003A1B0()
{
  sub_10003F0F4();
  unint64_t v1 = *(void **)(v0 + 96);

  swift_bridgeObjectRelease();
  sub_10003F1AC();
  return v2();
}

id sub_10003A218(Swift::Double a1, Swift::Double a2, Swift::Double a3)
{
  sub_10002E768(&qword_100699D10);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10058CEF0;
  sub_1000362B0(0, &qword_100698060);
  uint64_t v8 = NSPredicate.init(format:_:)();
  *(void *)(v7 + 32) = v8;
  sub_10003A8BC(0xD000000000000045, 0x8000000100569CE0, 0xD000000000000046, (void *)0x8000000100569D30, a1, a2, a3);
  if (v3)
  {

    *(void *)(v7 + 16) = 0;
    return (id)swift_release();
  }
  else
  {
    uint64_t v11 = v9;
    sub_1000362B0(0, &qword_100698058);
    *(void *)(v7 + 40) = v11;
    specialized Array._endMutation()();
    return sub_10003A838(v7, (SEL *)&selRef_andPredicateWithSubpredicates_);
  }
}

id sub_10003A384(char a1)
{
  uint64_t v2 = type metadata accessor for TransactionType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for TransactionType.pointOfSale(_:), v2);
  __int16 v6 = TransactionType.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (a1)
  {
    sub_1000362B0(0, &qword_100698060);
    if ((a1 & 2) == 0)
    {
      sub_10002E768(&qword_100698068);
      uint64_t v9 = sub_10003F3F0();
      *(_OWORD *)(v9 + 16) = xmmword_10058CEC0;
      *(void *)(v9 + 56) = &type metadata for Int16;
      *(void *)(v9 + 64) = &protocol witness table for Int16;
      *(_WORD *)(v9 + 32) = v6;
    }
    return (id)NSPredicate.init(format:_:)();
  }
  if ((a1 & 2) != 0)
  {
    sub_1000362B0(0, &qword_100698060);
    sub_10002E768(&qword_100698068);
    uint64_t v10 = sub_10003F3F0();
    *(_OWORD *)(v10 + 16) = xmmword_10058CEC0;
    *(void *)(v10 + 56) = &type metadata for Int16;
    *(void *)(v10 + 64) = &protocol witness table for Int16;
    *(_WORD *)(v10 + 32) = v6;
    return (id)NSPredicate.init(format:_:)();
  }
  id v7 = [self predicateWithValue:0];

  return v7;
}

void sub_10003A5C4(Swift::Double a1, Swift::Double a2, Swift::Double a3)
{
}

id sub_10003A610(char a1)
{
  if ((a1 & 3) != 0)
  {
    sub_10002E768(&qword_100699D10);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_10058CEF0;
    *(void *)(v3 + 32) = sub_10003A384(a1);
    double v4 = sub_10003F318();
    sub_10003A5C4(v4, v5, v6);
    if (v1)
    {
      swift_bridgeObjectRelease();

      *(void *)(v3 + 16) = 0;
      return (id)swift_release();
    }
    uint64_t v9 = v7;
    sub_1000362B0(0, &qword_100698058);
    *(void *)(v3 + 40) = v9;
    specialized Array._endMutation()();
    sub_10003A838(v3, (SEL *)&selRef_andPredicateWithSubpredicates_);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if ((a1 & 4) != 0)
  {
    double v10 = sub_10003F318();
    sub_10003A218(v10, v11, v12);
    if (v1) {
      return (id)swift_bridgeObjectRelease();
    }
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  sub_1000362B0(0, &qword_100698058);
  return sub_10003A838((uint64_t)_swiftEmptyArrayStorage, (SEL *)&selRef_orPredicateWithSubpredicates_);
}

id sub_10003A82C(uint64_t a1)
{
  return sub_10003A838(a1, (SEL *)&selRef_orPredicateWithSubpredicates_);
}

id sub_10003A838(uint64_t a1, SEL *a2)
{
  sub_1000362B0(0, &qword_100698060);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [swift_getObjCClassFromMetadata() a2:isa];

  return v4;
}

void sub_10003A8BC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, Swift::Double a5, Swift::Double a6, Swift::Double a7)
{
  if (a7 >= 0.0)
  {
    GlobalLocationHelper.boundingRectAround(lat:lon:radiusMetres:)(&v13, a5, a6, a7);
    if (!v12) {
      sub_10003A970((uint64_t)&v13, a1, a2, a3, a4);
    }
  }
  else
  {
    id v7 = [self predicateWithValue:1];
  }
}

id sub_10003A970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)sub_1000368FC(v10, v11, a2, a3, (uint64_t)v58, 0x6625203D3C20);
  uint64_t v13 = *(void *)a1;
  char v14 = *(unsigned char *)(a1 + 8);
  swift_bridgeObjectRetain();
  id v15 = (void *)sub_1000368FC(v13, v14, a2, a3, (uint64_t)v57, 0x6625203D3E20);
  sub_10003D46C(a1 + 48, (uint64_t)v60);
  sub_10003D46C(a1 + 32, (uint64_t)v59);
  sub_10003D46C((uint64_t)v60, (uint64_t)&v61);
  if (v62)
  {
    sub_10003D46C((uint64_t)v59, (uint64_t)&v54);
    if (v55)
    {
      id v16 = 0;
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  uint64_t v17 = v61;
  sub_10003D46C((uint64_t)v59, (uint64_t)&v63);
  if (v64)
  {
LABEL_5:
    id v16 = [self predicateWithValue:0];
    goto LABEL_10;
  }
  uint64_t v18 = v63;
  char v19 = *(unsigned char *)(a1 + 57);
  sub_1000362B0(0, &qword_100698060);
  if (v19)
  {
    _StringGuts.grow(_:)(25);
    int v30 = swift_bridgeObjectRelease();
    sub_10003F200(v30, v31, v32, v33, v34, v35, v36, v37, 0, 0xE000000000000000);
    uint64_t v28 = sub_10003F1E4();
    unint64_t v29 = 0xEC0000002820524FLL;
  }
  else
  {
    _StringGuts.grow(_:)(26);
    int v20 = swift_bridgeObjectRelease();
    sub_10003F200(v20, v21, v22, v23, v24, v25, v26, v27, 0, 0xE000000000000000);
    uint64_t v28 = sub_10003F1E4();
    unint64_t v29 = 0xED00002820444E41;
  }
  String.append(_:)(*(Swift::String *)&v28);
  v38._unint64_t countAndFlagsBits = a4;
  v38._object = a5;
  String.append(_:)(v38);
  v39._unint64_t countAndFlagsBits = 0x20296625203D3C20;
  v39._object = (void *)0xE800000000000000;
  String.append(_:)(v39);
  sub_10002E768(&qword_100698068);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_10058CF00;
  *(void *)(v40 + 56) = &type metadata for Double;
  *(void *)(v40 + 64) = &protocol witness table for Double;
  *(void *)(v40 + 32) = v17;
  *(void *)(v40 + 96) = &type metadata for Double;
  *(void *)(v40 + 104) = &protocol witness table for Double;
  *(void *)(v40 + 72) = v18;
  id v16 = (id)NSPredicate.init(format:_:)();
  swift_bridgeObjectRelease();
LABEL_10:
  uint64_t v56 = _swiftEmptyArrayStorage;
  if (!v12)
  {
    id v45 = v16;
    id v46 = v15;
    if (!v15) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  id v41 = v16;
  id v42 = v12;
  id v43 = v15;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_10003F198();
  if (v44) {
    sub_10003F100();
  }
  sub_10003F268();
  specialized Array._endMutation()();
  if (v15)
  {
LABEL_16:
    id v47 = v15;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    sub_10003F198();
    if (v44) {
      sub_10003F100();
    }
    sub_10003F268();
    specialized Array._endMutation()();
  }
LABEL_19:
  if (v16)
  {
    id v48 = v16;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    sub_10003F198();
    if (v44) {
      sub_10003F100();
    }
    sub_10003F268();
    specialized Array._endMutation()();
  }
  unint64_t v49 = (unint64_t)v56;

  if (v49 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v51) {
      goto LABEL_25;
    }
LABEL_27:
    id v52 = v16;
    swift_bridgeObjectRelease();
    id v50 = [self predicateWithValue:1];
    id v16 = v12;
    uint64_t v12 = v52;
    goto LABEL_28;
  }
  if (!*(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_27;
  }
LABEL_25:
  sub_1000362B0(0, &qword_100698058);
  id v50 = sub_10003A838(v49, (SEL *)&selRef_andPredicateWithSubpredicates_);
LABEL_28:

  return v50;
}

id ASFinanceStoreHelper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASFinanceStoreHelper();
  return [super dealloc];
}

id sub_10003ADFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }
  id v9 = [v4 initWithDomain:v7 code:a3 userInfo:v8.super.isa];

  return v9;
}

id sub_10003AEAC(uint64_t a1, uint64_t a2, char a3)
{
  if (a2)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  id v6 = [v3 initWithKey:v5 ascending:a3 & 1];

  return v6;
}

uint64_t sub_10003AF18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003AF74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003AFD8(uint64_t a1)
{
  return sub_10003AFF0(a1, (void (*)(void))type metadata accessor for BindingsStore.Binding);
}

uint64_t sub_10003AFF0(uint64_t a1, void (*a2)(void))
{
  if (a1 < 0)
  {
    sub_10003F064();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      a2(0);
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      void v4[2] = a1;
    }
    else
    {
      uint64_t v4 = &_swiftEmptyArrayStorage;
    }
    a2(0);
    sub_10003F234();
    return (uint64_t)v4;
  }
  return result;
}

uint64_t sub_10003B0D4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10003B230(a1, a2, a3, a4, &qword_100698048, (uint64_t (*)(void))type metadata accessor for PushPayload, (uint64_t (*)(void))type metadata accessor for PushPayload, (void (*)(void))type metadata accessor for PushPayload);
}

void sub_10003B11C()
{
}

void sub_10003B128()
{
  sub_10003F464();
  if (v4)
  {
    sub_10003F0D8();
    if (v5 != v6)
    {
      sub_10003F154();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  sub_10003F2C8();
  if (v3)
  {
    sub_10002E768(&qword_100698130);
    NSString v7 = (char *)swift_allocObject();
    size_t v8 = j__malloc_size(v7);
    *((void *)v7 + 2) = v2;
    *((void *)v7 + 3) = 2 * ((uint64_t)(v8 - 32) / 32);
  }
  else
  {
    NSString v7 = (char *)&_swiftEmptyArrayStorage;
  }
  if (v1)
  {
    sub_10003CD84((char *)(v0 + 32), v2, v7 + 32);
    sub_10003F124();
  }
  else
  {
    uint64_t v9 = sub_10003F1B8();
    sub_10003C2B0(v9, v10, v11, v12);
  }
}

uint64_t sub_10003B1E8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10003B230(a1, a2, a3, a4, &qword_100698108, (uint64_t (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction, (uint64_t (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
}

uint64_t sub_10003B230(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), void (*a8)(void))
{
  if (a3)
  {
    sub_10003F0D8();
    if (v14 != v15)
    {
      sub_10003F154();
      if (v14)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_10003F0C8();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    int v23 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_10002E768(a5);
  uint64_t v18 = a6(0);
  sub_100031774(v18);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  int v23 = (void *)swift_allocObject();
  size_t v24 = j__malloc_size(v23);
  if (!v20 || (v24 - v22 == 0x8000000000000000 ? (BOOL v25 = v20 == -1) : (BOOL v25 = 0), v25))
  {
LABEL_23:
    sub_10003F064();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v23[2] = v16;
  v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  a6(0);
  sub_10003F234();
  unint64_t v27 = (unint64_t)v23 + v26;
  if (a1)
  {
    sub_10003D2B0(a4 + v26, v16, v27, a8);
    sub_10003F124();
  }
  else
  {
    sub_10003C9E4(0, v16, v27, a4, a7);
  }
  return (uint64_t)v23;
}

uint64_t sub_10003B420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_10003B484(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for InternalTransaction();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    unint64_t v11 = (char *)a2 + v8;
    *(void *)uint64_t v10 = *(void *)v11;
    v10[8] = v11[8];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    uint64_t v14 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    char v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *(void *)char v15 = *(void *)v16;
    uint8_t v15[8] = v16[8];
  }
  return a1;
}

uint64_t sub_10003B59C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for InternalTransaction();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_10003B600(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for InternalTransaction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t sub_10003B6C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for InternalTransaction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  LOBYTE(v10) = *(unsigned char *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = *v16;
  *(unsigned char *)(v15 + 8) = *((unsigned char *)v16 + 8);
  *(void *)uint64_t v15 = v17;
  return a1;
}

uint64_t sub_10003B798(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for InternalTransaction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t sub_10003B860(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for InternalTransaction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  uint64_t v13 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

uint64_t sub_10003B928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003B93C);
}

uint64_t sub_10003B93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InternalTransaction();

  return sub_1000312BC(a1, a2, v4);
}

uint64_t sub_10003B984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003B998);
}

uint64_t sub_10003B998(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InternalTransaction();

  return sub_10003349C(a1, a2, a2, v4);
}

uint64_t sub_10003B9E4()
{
  uint64_t result = type metadata accessor for InternalTransaction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_10003BA94()
{
  sub_10003F464();
  if (v4)
  {
    sub_10003F0D8();
    if (v5 != v6)
    {
      sub_10003F154();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  sub_10003F2C8();
  if (v3)
  {
    sub_10002E768(&qword_1006980C8);
    uint64_t v7 = (char *)swift_allocObject();
    size_t v8 = j__malloc_size(v7);
    *((void *)v7 + 2) = v2;
    *((void *)v7 + 3) = 2 * ((uint64_t)(v8 - 32) / 104);
  }
  else
  {
    uint64_t v7 = (char *)_swiftEmptyArrayStorage;
  }
  if (v1)
  {
    sub_10003CE18((char *)(v0 + 32), v2, v7 + 32);
    sub_10003F124();
  }
  else
  {
    uint64_t v9 = sub_10003F1B8();
    sub_10003C3A8(v9, v10, v11, v12);
  }
}

void sub_10003BB5C()
{
}

uint64_t sub_10003BB90()
{
  sub_10003F464();
  if (v3)
  {
    sub_10003F0D8();
    if (v5 != v6)
    {
      sub_10003F154();
      if (v5)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_10003F0C8();
    }
  }
  else
  {
    uint64_t v4 = v2;
  }
  uint64_t v7 = *(void *)(v0 + 16);
  if (v4 <= v7) {
    uint64_t v8 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v8 = v4;
  }
  if (!v8)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_10002E768(&qword_1006980F8);
  uint64_t v9 = sub_10002E768(&qword_100698100);
  sub_100031774(v9);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  size_t v15 = j__malloc_size(v14);
  if (!v11 || (v15 - v13 == 0x8000000000000000 ? (BOOL v16 = v11 == -1) : (BOOL v16 = 0), v16))
  {
LABEL_23:
    sub_10003F064();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v14[2] = v7;
  v14[3] = 2 * ((uint64_t)(v15 - v13) / v11);
LABEL_18:
  sub_10002E768(&qword_100698100);
  sub_10003F234();
  if (v1)
  {
    sub_10003CF74(v0 + v17, v7, (unint64_t)v14 + v17);
    sub_10003F124();
  }
  else
  {
    uint64_t v18 = sub_10003F1B8();
    sub_10003C5C8(v18, v19, v20, v21);
  }
  return (uint64_t)v14;
}

uint64_t sub_10003BD5C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10003B230(a1, a2, a3, a4, &qword_100699140, type metadata accessor for BindingsStore.Binding, type metadata accessor for BindingsStore.Binding, (void (*)(void))type metadata accessor for BindingsStore.Binding);
}

void sub_10003BDA4(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10003BDB8(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10003BDCC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    sub_10003F0D8();
    if (v10 != v11)
    {
      sub_10003F154();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    sub_10002E768(a5);
    uint64_t v14 = (char *)swift_allocObject();
    size_t v15 = j__malloc_size(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 8);
  }
  else
  {
    uint64_t v14 = (char *)_swiftEmptyArrayStorage;
  }
  BOOL v16 = v14 + 32;
  if (a1)
  {
    sub_10003D3B4((char *)(a4 + 32), v12, v16);
    sub_10003F124();
  }
  else
  {
    sub_10003CB20(0, v12, (unint64_t)v16, a4, a6);
  }
}

void sub_10003BEAC()
{
}

void sub_10003BEE0()
{
}

void sub_10003BF14()
{
  sub_10003F374();
  if (v6)
  {
    sub_10003F0D8();
    if (v8 != v9)
    {
      sub_10003F154();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_10002E768(v5);
    uint64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    v12[2] = v10;
    void v12[3] = 2 * ((uint64_t)(v13 - 32) / 16);
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = v12 + 4;
  if (v3)
  {
    v2(v0 + 32, v10, v14);
    sub_10003F124();
  }
  else
  {
    v1(0, v10, v14, v0);
  }
}

uint64_t sub_10003BFF0(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10003B230(a1, a2, a3, a4, &qword_100698040, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID, (void (*)(void))&type metadata accessor for UUID);
}

void sub_10003C038()
{
}

void sub_10003C044()
{
  sub_10003F464();
  if (v4)
  {
    sub_10003F0D8();
    if (v5 != v6)
    {
      sub_10003F154();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  sub_10003F2C8();
  if (v3)
  {
    sub_10002E768(v7);
    char v8 = (char *)swift_allocObject();
    size_t v9 = j__malloc_size(v8);
    *((void *)v8 + 2) = v2;
    *((void *)v8 + 3) = 2 * v9 - 64;
  }
  else
  {
    char v8 = (char *)&_swiftEmptyArrayStorage;
  }
  if (v1)
  {
    sub_10003CD0C((char *)(v0 + 32), v2, v8 + 32);
    sub_10003F124();
  }
  else
  {
    uint64_t v10 = sub_10003F1B8();
    sub_10003C91C(v10, v11, v12, v13);
  }
}

uint64_t sub_10003C0F4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10003B230(a1, a2, a3, a4, &qword_1006980C0, (uint64_t (*)(void))type metadata accessor for LocalFeatureToggle, (uint64_t (*)(void))type metadata accessor for LocalFeatureToggle, (void (*)(void))type metadata accessor for LocalFeatureToggle);
}

uint64_t sub_10003C13C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_10003B230(a1, a2, a3, a4, &qword_100698028, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (void (*)(void))&type metadata accessor for URLQueryItem);
}

void sub_10003C184(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10003C198()
{
}

void sub_10003C1CC()
{
  sub_10003F374();
  if (v6)
  {
    sub_10003F0D8();
    if (v8 != v9)
    {
      sub_10003F154();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_10002E768(v5);
    uint64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    v12[2] = v10;
    void v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = v12 + 4;
  if (v3)
  {
    v2(v0 + 32, v10, v14);
    sub_10003F124();
  }
  else
  {
    v1(0, v10, v14, v0);
  }
}

uint64_t sub_10003C2B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003C3A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 104 * a1 + 32;
    unint64_t v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003C4A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10002E768(&qword_1006980B8);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003C5C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_10002E768(&qword_100698100) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003C72C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003C824(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10003C91C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    sub_10003F064();
    sub_10003F340();
    goto LABEL_11;
  }
  unint64_t v5 = (char *)(a4 + a1 + 32);
  unint64_t v6 = &__dst[v4];
  if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
  {
    memcpy(__dst, v5, v4);
    swift_bridgeObjectRelease();
    return v6;
  }
  sub_10003F064();
  sub_10003F330();
LABEL_11:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003C9E4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_10003F064();
    sub_10003F340();
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(a5(0) - 8);
  uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = v10 + v11 * a1;
  unint64_t v13 = a3 + v11 * v5;
  if (v12 >= v13 || v12 + v11 * v5 <= a3)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v13;
  }
  sub_10003F064();
  sub_10003F330();
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003CB20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_10003F064();
    sub_10003F340();
    goto LABEL_11;
  }
  unint64_t v6 = a4 + 8 * a1 + 32;
  unint64_t v7 = a3 + 8 * v5;
  if (v6 >= v7 || v6 + 8 * v5 <= a3)
  {
    sub_10002E768(a5);
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v7;
  }
  sub_10003F064();
  sub_10003F330();
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003CC0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10003CD0C(char *result, size_t a2, char *a3)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    sub_10003F064();
    uint64_t result = (char *)sub_10003F078();
    __break(1u);
  }
  else if (a3 != result || &result[a2] <= a3)
  {
    return (char *)sub_10003F350(a3, result, a2);
  }
  return result;
}

uint64_t sub_10003CD68(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10003D2B0(a1, a2, a3, (void (*)(void))type metadata accessor for PushPayload);
}

char *sub_10003CD84(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

char *sub_10003CE18(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003F064();
    uint64_t result = (char *)sub_10003F078();
    __break(1u);
  }
  else if (a3 != result || &result[104 * a2] <= a3)
  {
    return (char *)sub_10003F09C(a3, result);
  }
  return result;
}

char *sub_10003CE7C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

char *sub_10003CF18(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003F064();
    uint64_t result = (char *)sub_10003F078();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_10003F09C(a3, result);
  }
  return result;
}

uint64_t sub_10003CF74(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a3 < a1 {
         || (uint64_t result = sub_10002E768(&qword_100698100), a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  }
  {
    sub_10002E768(&qword_100698100);
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_10003D0AC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10003D2B0(a1, a2, a3, (void (*)(void))type metadata accessor for BindingsStore.Binding);
}

char *sub_10003D0C4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003F064();
    uint64_t result = (char *)sub_10003F078();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_10003F09C(a3, result);
  }
  return result;
}

char *sub_10003D12C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

char *sub_10003D1C0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003F064();
    uint64_t result = (char *)sub_10003F078();
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)sub_10003F09C(a3, result);
  }
  return result;
}

char *sub_10003D224(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003F064();
    uint64_t result = (char *)sub_10003F078();
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)sub_10003F09C(a3, result);
  }
  return result;
}

uint64_t sub_10003D280(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10003D2B0(a1, a2, a3, (void (*)(void))type metadata accessor for LocalFeatureToggle);
}

uint64_t sub_10003D298(unint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10003D2B0(a1, a2, a3, (void (*)(void))type metadata accessor for AssessmentPayload);
}

uint64_t sub_10003D2B0(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_10003F064();
    uint64_t result = sub_10003F078();
    __break(1u);
  }
  else if (a3 < a1 {
         || (uint64_t result = ((uint64_t (*)(void))a4)(0),
  }
             a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    a4(0);
    sub_10003F3DC();
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    sub_10003F3DC();
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_10003D3B4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003F064();
    uint64_t result = (char *)sub_10003F078();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_10003F09C(a3, result);
  }
  return result;
}

char *sub_10003D410(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_10003F064();
    uint64_t result = (char *)sub_10003F078();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_10003F09C(a3, result);
  }
  return result;
}

uint64_t sub_10003D46C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002E768(&qword_100698050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003D4D4()
{
  _Block_release(*(const void **)(v0 + 80));

  return _swift_deallocObject(v0, 96, 7);
}

void sub_10003D524()
{
  char v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *char v1 = v0;
  v1[1] = sub_10003D5FC;
  sub_10003F1C8();
  sub_10003F29C();
  __asm { BR              X8 }
}

uint64_t sub_10003D5FC()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *size_t v2 = v1;
  swift_task_dealloc();
  sub_10003F1AC();
  return v3();
}

uint64_t sub_10003D6BC()
{
  _Block_release(*(const void **)(v0 + 104));

  return _swift_deallocObject(v0, 120, 7);
}

void sub_10003D70C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003F060;
  sub_10003F1C8();
  __asm { BR              X8 }
}

uint64_t sub_10003D80C(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  Swift::Int v4 = v3;
  uint64_t v153 = a2;
  v152 = a1;
  uint64_t v142 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
  uint64_t v149 = *(void *)(v142 - 8);
  uint64_t v5 = __chkstk_darwin(v142);
  uint64_t v143 = (uint64_t)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v148 = (uint64_t)&v130 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v130 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v130 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v130 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = (char *)&v130 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  int v23 = (char *)&v130 - v22;
  __chkstk_darwin(v21);
  BOOL v25 = (char *)&v130 - v24;
  v151 = v2;
  Swift::Int v26 = v2[1];
  uint64_t result = _minimumMergeRunLength(_:)(v26);
  if (result >= v26)
  {
    if (v26 < 0) {
      goto LABEL_144;
    }
    if (v26) {
      return sub_10003E290(0, v26, 1, v152);
    }
    return result;
  }
  uint64_t v28 = result;
  uint64_t result = sub_10003AFF0(v26 / 2, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
  uint64_t v137 = result;
  uint64_t v138 = v26;
  unint64_t v150 = v29;
  if (v26 <= 0)
  {
    int v31 = &_swiftEmptyArrayStorage;
    unint64_t v61 = *((void *)&_swiftEmptyArrayStorage + 2);
LABEL_106:
    if (v61 < 2)
    {
LABEL_116:
      swift_bridgeObjectRelease();
      if (v138 >= -1) {
        goto LABEL_122;
      }
      __break(1u);
    }
    else
    {
      uint64_t v120 = *v151;
      if (!*v151) {
        goto LABEL_153;
      }
      uint64_t v121 = *(void *)(v149 + 72);
      while (1)
      {
        unint64_t v122 = v61 - 2;
        uint64_t v123 = (uint64_t)v31;
        uint64_t v124 = v31[2 * v61];
        uint64_t v125 = v31[2 * v61 + 2];
        uint64_t v126 = v31[2 * v61 + 3];
        uint64_t result = sub_10003E514(v120 + v121 * v124, v120 + v121 * v125, v120 + v121 * v126, v150, (uint64_t (*)(char *, uint64_t))v152, v153);
        if (v4) {
          break;
        }
        if (v126 < v124) {
          goto LABEL_139;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_100065468(v123);
          uint64_t v123 = result;
        }
        if (v122 >= *(void *)(v123 + 16)) {
          goto LABEL_140;
        }
        v127 = (void *)(v123 + 32 + 16 * v122);
        void *v127 = v124;
        v127[1] = v126;
        unint64_t v128 = *(void *)(v123 + 16);
        if (v61 > v128) {
          goto LABEL_141;
        }
        int v31 = (void *)v123;
        memmove((void *)(v123 + 32 + 16 * (v61 - 1)), (const void *)(v123 + 32 + 16 * v61), 16 * (v128 - v61));
        *(void *)(v123 + 16) = v128 - 1;
        unint64_t v61 = v128 - 1;
        if (v128 <= 2) {
          goto LABEL_116;
        }
      }
    }
LABEL_120:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v129 = v138;
    goto LABEL_121;
  }
  uint64_t v131 = v28;
  v133 = v25;
  v134 = v23;
  v139 = v20;
  v141 = v14;
  v144 = v11;
  uint64_t v30 = 0;
  int v31 = &_swiftEmptyArrayStorage;
  Swift::Int v32 = v26;
  v135 = v17;
  while (1)
  {
    uint64_t v33 = v30 + 1;
    if (v30 + 1 >= v32)
    {
      Swift::Int v41 = v30 + 1;
      goto LABEL_32;
    }
    Swift::Int v145 = v32;
    v136 = v31;
    uint64_t v34 = *v151;
    uint64_t v35 = *(void *)(v149 + 72);
    uint64_t v36 = (uint64_t)v133;
    sub_10003AF74(*v151 + v35 * v33, (uint64_t)v133);
    uint64_t v140 = v34;
    uint64_t v147 = v35;
    uint64_t v37 = v34 + v35 * v30;
    uint64_t v38 = (uint64_t)v134;
    sub_10003AF74(v37, (uint64_t)v134);
    int v39 = v152(v36, v38);
    if (v4)
    {
      sub_10003AF18(v38);
      sub_10003AF18(v36);
      goto LABEL_120;
    }
    int v40 = v39;
    sub_10003AF18(v38);
    uint64_t result = sub_10003AF18(v36);
    Swift::Int v41 = v30 + 2;
    Swift::Int v32 = v145;
    if (v30 + 2 >= v145) {
      goto LABEL_11;
    }
    uint64_t v132 = v30;
    uint64_t v146 = v147 * v33;
    uint64_t v42 = v140;
    uint64_t v43 = v30 + 2;
    uint64_t v44 = v147 * (v30 + 2);
    do
    {
      uint64_t v45 = (uint64_t)v139;
      sub_10003AF74(v42 + v44, (uint64_t)v139);
      sub_10003AF74(v42 + v146, (uint64_t)v17);
      int v46 = v152(v45, (uint64_t)v17);
      sub_10003AF18((uint64_t)v17);
      uint64_t result = sub_10003AF18(v45);
      if ((v40 ^ v46))
      {
        Swift::Int v41 = v43;
        uint64_t v30 = v132;
        Swift::Int v32 = v145;
        if (v40) {
          goto LABEL_12;
        }
LABEL_31:
        int v31 = v136;
LABEL_32:
        uint64_t v47 = (uint64_t)v144;
        goto LABEL_33;
      }
      v42 += v147;
      ++v43;
      Swift::Int v32 = v145;
    }
    while (v43 < v145);
    Swift::Int v41 = v145;
    uint64_t v30 = v132;
LABEL_11:
    if ((v40 & 1) == 0) {
      goto LABEL_31;
    }
LABEL_12:
    if (v41 < v30) {
      goto LABEL_149;
    }
    uint64_t v47 = (uint64_t)v144;
    if (v30 >= v41)
    {
      int v31 = v136;
    }
    else
    {
      uint64_t v48 = 0;
      uint64_t v49 = v147 * (v41 - 1);
      uint64_t v50 = v30;
      uint64_t v51 = v41 * v147;
      uint64_t v52 = v41;
      uint64_t v53 = v50;
      uint64_t v132 = v50;
      uint64_t v54 = v50 * v147;
      uint64_t v146 = v52;
      do
      {
        if (v53 != v52 + v48 - 1)
        {
          uint64_t v55 = v140;
          if (!v140) {
            goto LABEL_152;
          }
          unint64_t v56 = v140 + v54;
          sub_10003B420(v140 + v54, v143);
          if (v54 < v49 || v56 >= v55 + v51)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v54 != v49)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t result = sub_10003B420(v143, v55 + v49);
          uint64_t v47 = (uint64_t)v144;
        }
        ++v53;
        --v48;
        uint64_t v52 = v146;
        v49 -= v147;
        v51 -= v147;
        v54 += v147;
      }
      while (v53 < v146 + v48);
      int v31 = v136;
      Swift::Int v41 = v146;
      uint64_t v30 = v132;
      Swift::Int v32 = v145;
    }
LABEL_33:
    if (v41 < v32)
    {
      if (__OFSUB__(v41, v30)) {
        goto LABEL_146;
      }
      if (v41 - v30 < v131) {
        break;
      }
    }
LABEL_42:
    if (v41 < v30) {
      goto LABEL_143;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100065370(0, v31[2] + 1, 1, (char *)v31);
      int v31 = (void *)result;
    }
    unint64_t v60 = v31[2];
    unint64_t v59 = v31[3];
    unint64_t v61 = v60 + 1;
    if (v60 >= v59 >> 1)
    {
      uint64_t result = (uint64_t)sub_100065370((char *)(v59 > 1), v60 + 1, 1, (char *)v31);
      int v31 = (void *)result;
    }
    _OWORD v31[2] = v61;
    char v62 = (char *)(v31 + 4);
    uint64_t v63 = &v31[2 * v60 + 4];
    *uint64_t v63 = v30;
    v63[1] = v41;
    uint64_t v146 = v41;
    if (v60)
    {
      while (1)
      {
        unint64_t v64 = v61 - 1;
        if (v61 >= 4)
        {
          double v69 = &v62[16 * v61];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_129;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_130;
          }
          unint64_t v76 = v61 - 2;
          unsigned int v77 = &v62[16 * v61 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_131;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_133;
          }
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_142;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_79;
          }
        }
        else
        {
          if (v61 != 3)
          {
            uint64_t v93 = v31[4];
            uint64_t v94 = v31[5];
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_73;
          }
          uint64_t v66 = v31[4];
          uint64_t v65 = v31[5];
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }
        if (v68) {
          goto LABEL_132;
        }
        unint64_t v76 = v61 - 2;
        v82 = &v62[16 * v61 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_134;
        }
        v88 = &v62[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_136;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_138;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_79:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_81;
        }
LABEL_73:
        if (v87) {
          goto LABEL_135;
        }
        v95 = &v62[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_137;
        }
        if (v98 < v86) {
          goto LABEL_90;
        }
LABEL_81:
        unint64_t v103 = v64 - 1;
        if (v64 - 1 >= v61)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        if (!*v151) {
          goto LABEL_150;
        }
        v104 = v31;
        v105 = &v62[16 * v103];
        uint64_t v106 = *(void *)v105;
        v107 = &v62[16 * v64];
        uint64_t v108 = *((void *)v107 + 1);
        uint64_t result = sub_10003E514(*v151 + *(void *)(v149 + 72) * *(void *)v105, *v151 + *(void *)(v149 + 72) * *(void *)v107, *v151 + *(void *)(v149 + 72) * v108, v150, (uint64_t (*)(char *, uint64_t))v152, v153);
        if (v4) {
          goto LABEL_120;
        }
        if (v108 < v106) {
          goto LABEL_126;
        }
        if (v64 > v104[2]) {
          goto LABEL_127;
        }
        *(void *)v105 = v106;
        *(void *)&v62[16 * v103 + 8] = v108;
        unint64_t v109 = v104[2];
        if (v64 >= v109) {
          goto LABEL_128;
        }
        int v31 = v104;
        unint64_t v61 = v109 - 1;
        uint64_t result = (uint64_t)memmove(&v62[16 * v64], v107 + 16, 16 * (v109 - 1 - v64));
        _OWORD v31[2] = v109 - 1;
        if (v109 <= 2) {
          goto LABEL_90;
        }
      }
    }
    unint64_t v61 = 1;
LABEL_90:
    Swift::Int v32 = v151[1];
    uint64_t v30 = v146;
    uint64_t v17 = v135;
    if (v146 >= v32) {
      goto LABEL_106;
    }
  }
  if (__OFADD__(v30, v131)) {
    goto LABEL_147;
  }
  if (v30 + v131 >= v32) {
    Swift::Int v58 = v32;
  }
  else {
    Swift::Int v58 = v30 + v131;
  }
  if (v58 < v30)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return result;
  }
  if (v41 == v58) {
    goto LABEL_42;
  }
  v136 = v31;
  uint64_t v110 = *(void *)(v149 + 72);
  uint64_t v147 = v110 * (v41 - 1);
  uint64_t v140 = v110;
  Swift::Int v145 = v4;
  uint64_t v146 = v41 * v110;
  uint64_t v132 = v30;
  Swift::Int v130 = v58;
LABEL_93:
  uint64_t v111 = 0;
  while (1)
  {
    Swift::Int v112 = v41;
    uint64_t v113 = *v151;
    uint64_t v114 = (uint64_t)v141;
    sub_10003AF74(v146 + v111 + *v151, (uint64_t)v141);
    sub_10003AF74(v147 + v111 + v113, v47);
    Swift::Int v115 = v145;
    char v116 = v152(v114, v47);
    Swift::Int v145 = v115;
    if (v115) {
      break;
    }
    char v117 = v116;
    sub_10003AF18(v47);
    uint64_t result = sub_10003AF18(v114);
    if ((v117 & 1) == 0)
    {
      Swift::Int v41 = v112;
LABEL_100:
      ++v41;
      v147 += v140;
      v146 += v140;
      uint64_t v30 = v132;
      if (v41 == v130)
      {
        Swift::Int v41 = v130;
        int v31 = v136;
        Swift::Int v4 = v145;
        goto LABEL_42;
      }
      goto LABEL_93;
    }
    uint64_t v118 = *v151;
    if (!*v151) {
      goto LABEL_151;
    }
    Swift::Int v41 = v112;
    uint64_t v119 = v118 + v147 + v111;
    sub_10003B420(v118 + v146 + v111, v148);
    swift_arrayInitWithTakeFrontToBack();
    uint64_t result = sub_10003B420(v148, v119);
    v111 -= v140;
    ++v30;
    uint64_t v47 = (uint64_t)v144;
    if (v112 == v30) {
      goto LABEL_100;
    }
  }
  sub_10003AF18(v47);
  sub_10003AF18(v114);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v129 = v138;
LABEL_121:
  if (v129 < -1) {
    goto LABEL_145;
  }
LABEL_122:
  *(void *)(v137 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003E290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v36 = a4;
  uint64_t v31 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
  uint64_t v10 = __chkstk_darwin(v31);
  uint64_t v38 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v35 = (char *)&v28 - v13;
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v34 = (uint64_t)&v28 - v16;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v17 = *(void *)(v15 + 72);
    uint64_t v40 = v17 * (a3 - 1);
    uint64_t v32 = v17;
    uint64_t v39 = v17 * a3;
    uint64_t v29 = a1;
    uint64_t v18 = (uint64_t)v35;
LABEL_4:
    uint64_t v19 = 0;
    uint64_t v33 = a3;
    while (1)
    {
      uint64_t v37 = a1;
      unint64_t v20 = v6;
      uint64_t v21 = *v6;
      uint64_t v22 = v39 + v19 + *v6;
      uint64_t v23 = v34;
      sub_10003AF74(v22, v34);
      sub_10003AF74(v40 + v19 + v21, v18);
      char v24 = v36(v23, v18);
      sub_10003AF18(v18);
      uint64_t result = sub_10003AF18(v23);
      if (v5) {
        break;
      }
      if ((v24 & 1) == 0)
      {
        uint64_t v27 = v33;
        uint64_t v6 = v20;
LABEL_11:
        a3 = v27 + 1;
        v40 += v32;
        v39 += v32;
        a1 = v29;
        if (a3 != v30) {
          goto LABEL_4;
        }
        return result;
      }
      uint64_t v25 = *v20;
      if (!*v20)
      {
        __break(1u);
        return result;
      }
      uint64_t v26 = v25 + v40 + v19;
      sub_10003B420(v25 + v39 + v19, v38);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_10003B420(v38, v26);
      uint64_t v27 = v33;
      v19 -= v32;
      a1 = v37 + 1;
      uint64_t v6 = v20;
      if (v33 == v37 + 1) {
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t sub_10003E514(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(char *, uint64_t), uint64_t a6)
{
  uint64_t v67 = a6;
  char v68 = a5;
  uint64_t v66 = type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction();
  uint64_t v11 = __chkstk_darwin(v66);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v61 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v61 - v16;
  uint64_t result = __chkstk_darwin(v15);
  uint64_t v22 = *(void *)(v21 + 72);
  if (!v22)
  {
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  int64_t v23 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v22 == -1) {
    goto LABEL_86;
  }
  int64_t v25 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v22 == -1) {
    goto LABEL_87;
  }
  unint64_t v65 = a4;
  uint64_t v27 = v23 / v22;
  uint64_t v28 = v25 / v22;
  uint64_t v69 = v22;
  if (v23 / v22 >= v25 / v22)
  {
    uint64_t v64 = v20;
    unint64_t v33 = v65;
    uint64_t result = sub_10003D2B0(a2, v25 / v22, v65, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
    unint64_t v34 = v33 + v28 * v22;
    BOOL v35 = v28 * v22 < 1 || a1 >= a2;
    uint64_t v36 = v6;
    if (!v35)
    {
      uint64_t v45 = -v22;
      unint64_t v31 = v33 + v28 * v22;
      unint64_t v62 = a1;
      uint64_t v63 = v45;
      while (1)
      {
        uint64_t v46 = v36;
        unint64_t v71 = v31;
        v31 += v45;
        sub_10003AF74(v31, (uint64_t)v14);
        unint64_t v70 = a2;
        unint64_t v47 = a2 + v45;
        uint64_t v48 = a2 + v45;
        uint64_t v49 = v64;
        sub_10003AF74(v48, v64);
        char v50 = v68(v14, v49);
        if (v46) {
          break;
        }
        char v51 = v50;
        unint64_t v52 = a3 + v45;
        sub_10003AF18(v49);
        uint64_t result = sub_10003AF18((uint64_t)v14);
        if (v51)
        {
          if (a3 < v70 || v52 >= v70)
          {
            uint64_t result = swift_arrayInitWithTakeFrontToBack();
            unint64_t v70 = v47;
            unint64_t v29 = v65;
            unint64_t v31 = v71;
          }
          else
          {
            unint64_t v29 = v65;
            unint64_t v31 = v71;
            if (a3 != v70) {
              uint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v70 = v47;
          }
        }
        else if (a3 < v71 || v52 >= v71)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
          unint64_t v29 = v65;
        }
        else
        {
          unint64_t v29 = v65;
          if (a3 != v71) {
            uint64_t result = swift_arrayInitWithTakeBackToFront();
          }
        }
        uint64_t v36 = 0;
        uint64_t v45 = v63;
        if (v31 <= v29)
        {
          a2 = v70;
          goto LABEL_79;
        }
        a3 = v52;
        a2 = v70;
        if (v70 <= v62) {
          goto LABEL_79;
        }
      }
      sub_10003AF18(v49);
      sub_10003AF18((uint64_t)v14);
      uint64_t result = v65;
      uint64_t v57 = v71 - v65;
      if (v69 != -1 || v57 != 0x8000000000000000)
      {
        sub_10003D2B0(v65, v57 / v69, v70, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
        return 1;
      }
      goto LABEL_90;
    }
    unint64_t v29 = v33;
    unint64_t v31 = v34;
  }
  else
  {
    unint64_t v70 = (unint64_t)&v61 - v19;
    unint64_t v29 = v65;
    uint64_t result = sub_10003D2B0(a1, v23 / v22, v65, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
    uint64_t v30 = v27 * v22;
    unint64_t v31 = v29 + v27 * v22;
    if (v30 >= 1 && a2 < a3)
    {
      unint64_t v71 = v31;
      uint64_t v37 = v6;
      uint64_t v38 = v70;
      while (1)
      {
        sub_10003AF74(a2, v38);
        sub_10003AF74(v29, (uint64_t)v17);
        char v39 = v68((char *)v38, (uint64_t)v17);
        if (v37) {
          break;
        }
        char v40 = v39;
        sub_10003AF18((uint64_t)v17);
        uint64_t result = sub_10003AF18(v38);
        if (v40)
        {
          unint64_t v41 = a2 + v69;
          if (a1 < a2 || a1 >= v41)
          {
            uint64_t result = swift_arrayInitWithTakeFrontToBack();
          }
          else if (a1 != a2)
          {
            uint64_t result = swift_arrayInitWithTakeBackToFront();
          }
          a2 = v41;
        }
        else
        {
          unint64_t v43 = v29 + v69;
          if (a1 < v29 || a1 >= v43)
          {
            uint64_t result = swift_arrayInitWithTakeFrontToBack();
          }
          else if (a1 != v29)
          {
            uint64_t result = swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v29 = v43;
        }
        a1 += v69;
        uint64_t v37 = 0;
        if (v29 >= v71 || a2 >= a3)
        {
          a2 = a1;
          unint64_t v31 = v71;
          goto LABEL_79;
        }
      }
      sub_10003AF18((uint64_t)v17);
      uint64_t result = sub_10003AF18(v38);
      int64_t v55 = v71 - v29;
      if (v69 != -1 || v55 != 0x8000000000000000)
      {
        sub_10003D2B0(v29, v55 / v69, a1, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
        return 1;
      }
      goto LABEL_89;
    }
    a2 = a1;
  }
LABEL_79:
  int64_t v59 = v31 - v29;
  if (v69 != -1 || v59 != 0x8000000000000000)
  {
    sub_10003D2B0(v29, v59 / v69, a2, (void (*)(void))type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction);
    return 1;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
  return result;
}

unsigned char *sub_10003EAAC@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10003EB18(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

uint64_t *sub_10003EB78(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t sub_10003EBDC()
{
  unint64_t result = qword_100698120;
  if (!qword_100698120)
  {
    type metadata accessor for TransactionType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698120);
  }
  return result;
}

uint64_t sub_10003EC2C(uint64_t a1, uint64_t *a2)
{
  sub_10002E768(a2);
  sub_10003F240();
  v3();
  return a1;
}

unint64_t sub_10003EC84()
{
  unint64_t result = qword_100698128;
  if (!qword_100698128)
  {
    sub_1000362B0(255, &qword_100697F00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698128);
  }
  return result;
}

unsigned char *sub_10003ECE4@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_10003EAAC(a1, a2);
}

void *sub_10003ED00@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

void type metadata accessor for ASFinanceStoreHelper.TransactionSources()
{
}

void type metadata accessor for ASFinanceStoreHelper.LocationSource()
{
}

__n128 sub_10003ED5C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10003ED6C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10003ED8C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for ASFinanceStoreHelper.AugmentedTransaction.Location()
{
}

unint64_t sub_10003EDC4()
{
  unint64_t result = qword_100698138;
  if (!qword_100698138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698138);
  }
  return result;
}

unint64_t sub_10003EE14()
{
  unint64_t result = qword_100698140;
  if (!qword_100698140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698140);
  }
  return result;
}

unint64_t sub_10003EE64()
{
  unint64_t result = qword_100698148;
  if (!qword_100698148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698148);
  }
  return result;
}

unint64_t sub_10003EEB4()
{
  unint64_t result = qword_100698150;
  if (!qword_100698150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698150);
  }
  return result;
}

unint64_t sub_10003EF04()
{
  unint64_t result = qword_100698158;
  if (!qword_100698158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698158);
  }
  return result;
}

unint64_t sub_10003EF54()
{
  unint64_t result = qword_100698160;
  if (!qword_100698160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698160);
  }
  return result;
}

unint64_t sub_10003EFA4()
{
  unint64_t result = qword_100698168;
  if (!qword_100698168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698168);
  }
  return result;
}

unint64_t sub_10003EFF4()
{
  unint64_t result = qword_100698170;
  if (!qword_100698170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698170);
  }
  return result;
}

uint64_t sub_10003F078()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void *sub_10003F09C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_10003F100()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_10003F124()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10003F13C()
{
  return swift_task_alloc();
}

uint64_t sub_10003F16C()
{
  return swift_task_dealloc();
}

uint64_t sub_10003F1AC()
{
  return v0 + 8;
}

uint64_t sub_10003F1B8()
{
  return 0;
}

uint64_t sub_10003F1E4()
{
  return 0x20296625203D3E20;
}

void sub_10003F200(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = v11;
  uint64_t v14 = v10;
  String.append(_:)(*(Swift::String *)&v13);
}

uint64_t *sub_10003F228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t sub_10003F24C()
{
  return swift_task_alloc();
}

uint64_t sub_10003F268()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_10003F284()
{
  return *(void *)(v0 + 232);
}

uint64_t sub_10003F2B8()
{
  return v0 + 8;
}

uint64_t sub_10003F300()
{
  return v0;
}

double sub_10003F318()
{
  return v0;
}

void *sub_10003F350@<X0>(void *__dst@<X2>, const void *a2@<X1>, size_t a3@<X8>)
{
  return memmove(__dst, a2, a3);
}

uint64_t sub_10003F388()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

double sub_10003F3A8()
{
  return v0;
}

uint64_t sub_10003F3BC()
{
  return v0;
}

uint64_t sub_10003F3C8()
{
  return v0;
}

uint64_t sub_10003F3DC()
{
  return v0;
}

uint64_t sub_10003F3F0()
{
  return swift_allocObject();
}

uint64_t sub_10003F408()
{
  return ((uint64_t (*)(void))_swift_task_switch)();
}

unint64_t sub_10003F41C()
{
  return 0xD000000000000015;
}

uint64_t sub_10003F430()
{
  return v0;
}

uint64_t sub_10003F450()
{
  return *(void *)(v0 + 72);
}

uint64_t sub_10003F474()
{
  return swift_bridgeObjectRelease();
}

void *sub_10003F47C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10003F4B4(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 initializeWithTake for SendablePredicate(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *sub_10003F520(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for SendablePredicate(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SendablePredicate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.LastCompletionKey()
{
}

uint64_t sub_10003F5F0()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10003F62C(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10003F664(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10003F6C4(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10003F704(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10003F744(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration()
{
}

void *sub_10003F78C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = swift_bridgeObjectRetain() + 80;
  uint64_t v3 = _swiftEmptyArrayStorage;
  p_ivar_base_size = &PushDispatchManager.ivar_base_size;
  do
  {
    uint64_t v5 = *(void *)(v2 - 40);
    if (!v5 || (*(unsigned char *)(v2 - 24) & 1) != 0)
    {
      if (*((void *)p_ivar_base_size + 278) != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_100031284(v6, (uint64_t)qword_1006AD1B8);
      BOOL v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error in config - Workflow missing workflowId or frequency", v9, 2u);
        swift_slowDealloc();
      }

      goto LABEL_35;
    }
    uint64_t v28 = *(void *)(v2 - 32);
    uint64_t v29 = *(void *)(v2 - 48);
    char v27 = *(unsigned char *)(v2 - 23);
    long long v31 = *(_OWORD *)(v2 - 16);
    char v30 = *(unsigned char *)v2;
    uint64_t v10 = *(void **)(v2 + 8);
    uint64_t v11 = *(void *)(v2 + 24);
    uint64_t v32 = *(void *)(v2 + 32);
    uint64_t v33 = *(void *)(v2 + 16);
    uint64_t v12 = *(void *)(v2 + 40);
    if (v10 == (void *)1 || (unint64_t v13 = *(void *)(v2 + 56)) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unint64_t v13 = 0xE100000000000000;
      BOOL v15 = 1;
      uint64_t v14 = 67;
    }
    else
    {
      uint64_t v10 = v3;
      uint64_t v3 = *(void **)(v2 + 40);
      uint64_t v12 = *(void *)(v2 + 24);
      uint64_t v14 = *(void *)(v2 + 48);
      LODWORD(v11) = 0;
      BOOL v15 = v13 == 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v14 == 65 && v13 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = 1;
        sub_100046394();
LABEL_29:
        uint64_t v19 = v11 & 0x10101;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_30;
      }
      sub_100046394();
    }
    if (sub_10004627C())
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = 1;
    }
    else
    {
      BOOL v18 = v14 == 67 && v15;
      if (v18 || (sub_10004627C() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = 4;
      }
      else if (v14 == 17217 && v13 == 0xE200000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v17 = 5;
      }
      else
      {
        char v23 = sub_10004627C();
        swift_bridgeObjectRelease();
        if (v23) {
          uint64_t v17 = 5;
        }
        else {
          uint64_t v17 = 4;
        }
      }
    }
    if (v10 != (void *)1) {
      goto LABEL_29;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v19 = 0;
    uint64_t v12 = 0;
LABEL_30:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10003BA94();
      uint64_t v3 = v24;
    }
    unint64_t v20 = v3[2];
    if (v20 >= v3[3] >> 1)
    {
      sub_10003BA94();
      uint64_t v3 = v25;
    }
    v3[2] = v20 + 1;
    uint64_t v21 = &v3[13 * v20];
    v21[4] = v29;
    v21[5] = v5;
    v21[6] = v28;
    *((unsigned char *)v21 + 56) = v27 & 1;
    v21[8] = v17;
    *(_OWORD *)(v21 + 9) = v31;
    *((unsigned char *)v21 + 88) = v30;
    v21[12] = v10;
    v21[13] = v33;
    v21[14] = v19;
    v21[15] = v32;
    v21[16] = v12;
    p_ivar_base_size = (_DWORD *)(&PushDispatchManager + 8);
LABEL_35:
    v2 += 112;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

void *sub_10003FB28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v3 = a1 + 40;
    uint64_t v4 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v5 = *(objc_class **)v3;
      if (*(void *)v3 && (*(unsigned char *)(v3 + 40) & 1) == 0)
      {
        uint64_t v6 = *(objc_class **)(v3 - 8);
        swift_bridgeObjectRetain();
        v7.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003BB5C();
          uint64_t v4 = v10;
        }
        unint64_t v8 = v4[2];
        if (v8 >= v4[3] >> 1)
        {
          sub_10003BB5C();
          uint64_t v4 = v11;
        }
        void v4[2] = v8 + 1;
        uint64_t v9 = (NSNumber *)&v4[3 * v8];
        v9[4].super.super.Class isa = v6;
        v9[5].super.super.Class isa = v5;
        v9[6].super.super.Class isa = v7.super.super.isa;
      }
      v3 += 112;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  return sub_10003FC5C((uint64_t)v4);
}

void *sub_10003FC5C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002E768(&qword_100698218);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v6 = v3;
  sub_100043B3C(a1, 1, &v6);
  uint64_t v4 = v6;
  if (v1) {
    swift_release();
  }
  return v4;
}

uint64_t sub_10003FCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = &_swiftEmptyDictionarySingleton;
  p_ivar_base_size = &PushDispatchManager.ivar_base_size;
  uint64_t v49 = v7;
  while (v6)
  {
    unint64_t v11 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_20:
    uint64_t v16 = *(void *)(a2 + 56) + 32 * v12;
    if (*(unsigned char *)(v16 + 8))
    {
      if (*((void *)p_ivar_base_size + 278) != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100031284(v17, (uint64_t)qword_1006AD1B8);
      BOOL v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error in config - Permitted binding confing missing ttl", v20, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      uint64_t v21 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v12);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = *(void *)v16;
      LODWORD(v21) = *(unsigned __int8 *)(v16 + 24);
      uint64_t v25 = *(void *)(v16 + 16);
      if (v21) {
        uint64_t v26 = 1;
      }
      else {
        uint64_t v26 = v25;
      }
      uint64_t v51 = v26;
      uint64_t v52 = v24;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v53 = v9;
      uint64_t v50 = v23;
      unint64_t v28 = sub_100055F1C(v23, v22);
      uint64_t v30 = v9[2];
      BOOL v31 = (v29 & 1) == 0;
      Swift::Int v32 = v30 + v31;
      if (__OFADD__(v30, v31)) {
        goto LABEL_41;
      }
      unint64_t v33 = v28;
      char v34 = v29;
      sub_10002E768(&qword_100698210);
      uint64_t v35 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32);
      int64_t v7 = v49;
      if (v35)
      {
        uint64_t v35 = sub_100055F1C(v50, v22);
        if ((v34 & 1) != (v36 & 1)) {
          goto LABEL_43;
        }
        unint64_t v33 = v35;
      }
      uint64_t v9 = v53;
      if (v34)
      {
        sub_1000462D4(v35, v36, v37, v38, v39, v40, v41, v42, v48, v49, v50, v51, v52);
      }
      else
      {
        v53[(v33 >> 6) + 8] |= 1 << v33;
        unint64_t v43 = (uint64_t *)(v53[6] + 16 * v33);
        uint64_t *v43 = v50;
        v43[1] = v22;
        sub_1000462D4(v35, v36, v37, v38, v39, v40, v41, v42, v48, v49, v50, v51, v52);
        uint64_t v44 = v53[2];
        BOOL v45 = __OFADD__(v44, 1);
        uint64_t v46 = v44 + 1;
        if (v45) {
          goto LABEL_42;
        }
        v53[2] = v46;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      p_ivar_base_size = (_DWORD *)(&PushDispatchManager + 8);
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v13 >= v7) {
    goto LABEL_38;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v13);
  ++v8;
  if (v14) {
    goto LABEL_19;
  }
  int64_t v8 = v13 + 1;
  if (v13 + 1 >= v7) {
    goto LABEL_38;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v8);
  if (v14) {
    goto LABEL_19;
  }
  int64_t v8 = v13 + 2;
  if (v13 + 2 >= v7) {
    goto LABEL_38;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v8);
  if (v14)
  {
LABEL_19:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_20;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v7)
  {
LABEL_38:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v14 = *(void *)(v3 + 8 * v15);
  if (v14)
  {
    int64_t v8 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_38;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t sub_10004004C(Swift::String string)
{
  object = string._object;
  v2._unint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10065F8E8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

unint64_t sub_10004009C()
{
  unint64_t result = sub_100046494();
  switch(v1)
  {
    case 1:
      unint64_t result = sub_100046250();
      break;
    case 2:
      unint64_t result = sub_1000461A0();
      break;
    case 3:
      unint64_t result = sub_100046088();
      break;
    case 4:
      unint64_t result = sub_10004641C();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100040100()
{
  unint64_t result = sub_100046494();
  switch(v1)
  {
    case 1:
      unint64_t result = sub_100046250();
      break;
    case 2:
      unint64_t result = sub_1000461A0();
      break;
    case 3:
      unint64_t result = sub_100046088();
      break;
    case 4:
      unint64_t result = sub_10004641C();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100040164(unsigned __int8 *a1, char *a2)
{
  return sub_100036464(*a1, *a2);
}

Swift::Int sub_100040170()
{
  return sub_1000A2460(*v0);
}

uint64_t sub_100040178()
{
  return sub_1000A2570();
}

Swift::Int sub_100040180(uint64_t a1)
{
  return sub_1000A284C(a1, *v1);
}

unint64_t sub_100040188@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10004004C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000401B8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10004009C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_1000401E4()
{
  return sub_100040100();
}

uint64_t sub_1000401EC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100040098(a1);
  *a2 = result;
  return result;
}

void sub_100040214(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100040220(uint64_t a1)
{
  unint64_t v2 = sub_100044F50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004025C(uint64_t a1)
{
  unint64_t v2 = sub_100044F50();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100040298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v4)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *(void *)a1 == *(void *)a2 && v4 == v5;
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    char v9 = *(unsigned char *)(a2 + 24);
    if (*(unsigned char *)(a1 + 24))
    {
      if (!*(unsigned char *)(a2 + 24)) {
        return 0;
      }
    }
    else
    {
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
        char v9 = 1;
      }
      if (v9) {
        return 0;
      }
    }
    int v10 = *(unsigned __int8 *)(a1 + 25);
    int v11 = *(unsigned __int8 *)(a2 + 25);
    if (v10 == 2)
    {
      if (v11 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL result = 0;
      if (v11 == 2 || ((v11 ^ v10) & 1) != 0) {
        return result;
      }
    }
    if (*(unsigned char *)(a1 + 48))
    {
      if ((*(unsigned char *)(a2 + 48) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (*(unsigned char *)(a2 + 48)) {
        return 0;
      }
      if (*(void *)(a1 + 32) != *(void *)(a2 + 32) || *(void *)(a1 + 40) != *(void *)(a2 + 40)) {
        return 0;
      }
    }
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    uint64_t v16 = *(void *)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v18 = *(void *)(a1 + 88);
    uint64_t v17 = *(void *)(a1 + 96);
    uint64_t v19 = *(void *)(a1 + 104);
    uint64_t v21 = *(void *)(a2 + 56);
    uint64_t v20 = *(void *)(a2 + 64);
    uint64_t v22 = *(void *)(a2 + 72);
    uint64_t v23 = *(void *)(a2 + 80);
    uint64_t v25 = *(void *)(a2 + 88);
    uint64_t v24 = *(void *)(a2 + 96);
    uint64_t v26 = *(void *)(a2 + 104);
    if (v14 == 1)
    {
      if (v21 == 1) {
        return 1;
      }
      goto LABEL_34;
    }
    if (v21 == 1)
    {
LABEL_34:
      sub_100045080(v14);
      sub_1000462BC();
      sub_100045080(v27);
      sub_1000450F4(v14);
      sub_1000462BC();
      sub_1000450F4(v28);
      return 0;
    }
    v29[0] = v14;
    v29[1] = v13;
    __int16 v30 = v16;
    char v31 = BYTE2(v16);
    uint64_t v32 = v15;
    uint64_t v33 = v18;
    uint64_t v34 = v17;
    uint64_t v35 = v19;
    v36[0] = v21;
    v36[1] = v20;
    __int16 v37 = v22;
    char v38 = BYTE2(v22);
    uint64_t v39 = v23;
    uint64_t v40 = v25;
    uint64_t v41 = v24;
    uint64_t v42 = v26;
    return (sub_10004163C((uint64_t)v29, (uint64_t)v36) & 1) != 0;
  }
  return result;
}

uint64_t sub_1000404B4(void *a1)
{
  uint64_t v3 = v1;
  sub_10002E768(&qword_100698290);
  sub_100045FF4();
  __chkstk_darwin(v5);
  sub_100046184(a1);
  sub_100044F50();
  sub_100046440();
  v8[0] = 0;
  sub_100046408();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    sub_1000360A8(v3 + 32, (uint64_t)v12, &qword_100698298);
    sub_1000360A8((uint64_t)v12, (uint64_t)v8, &qword_100698298);
    char v9 = 1;
    sub_1000451B0();
    sub_1000460D0();
    v8[0] = 2;
    sub_100046408();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000360A8(v3 + 25, (uint64_t)&v11, &qword_1006982A8);
    sub_1000360A8((uint64_t)&v11, (uint64_t)v8, &qword_1006982A8);
    char v9 = 3;
    sub_1000451FC();
    sub_1000460D0();
    sub_1000360A8(v3 + 56, (uint64_t)v10, &qword_1006982B8);
    sub_1000360A8((uint64_t)v10, (uint64_t)v8, &qword_1006982B8);
    char v9 = 4;
    sub_100045248();
    sub_1000460D0();
  }
  sub_1000462F8();
  return v6();
}

void sub_1000406A0()
{
  sub_100046054();
  sub_1000462EC();
  uint64_t v3 = v2;
  sub_10002E768(&qword_100698258);
  sub_100045FF4();
  __chkstk_darwin(v4);
  sub_100046338();
  sub_10002EAE0(v0, v0[3]);
  sub_100044F50();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10002EB9C((uint64_t)v0);
  }
  else
  {
    LOBYTE(v15) = 0;
    sub_1000463A8();
    uint64_t v5 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v7 = v6;
    sub_100044F9C();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v14 = v15;
    LOBYTE(v15) = 2;
    sub_1000463A8();
    uint64_t v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v12 = v9;
    uint64_t v13 = v8;
    sub_100044FE8();
    sub_10004621C();
    sub_100045034();
    sub_10004621C();
    uint64_t v10 = sub_1000461BC();
    v11(v10);
    swift_bridgeObjectRetain();
    sub_100045080(v15);
    swift_bridgeObjectRelease();
    sub_10002EB9C((uint64_t)v0);
    swift_bridgeObjectRelease();
    sub_1000450F4(v15);
    *(void *)uint64_t v3 = v5;
    *(void *)(v3 + 8) = v7;
    *(void *)(v3 + 16) = v13;
    *(unsigned char *)(v3 + 24) = v12 & 1;
    *(unsigned char *)(v3 + 25) = 2;
    *(void *)(v3 + 32) = v14;
    *(void *)(v3 + 40) = v16;
    *(unsigned char *)(v3 + 48) = v17;
    *(void *)(v3 + 56) = v15;
    *(void *)(v3 + 64) = v16;
    *(void *)(v3 + 72) = v17;
    *(void *)(v3 + 80) = v18;
    *(void *)(v3 + 88) = v19;
    *(void *)(v3 + 96) = v20;
    *(void *)(v3 + 104) = v21;
  }
  sub_10004603C();
}

void sub_100040984(void *a1@<X8>)
{
  sub_1000406A0();
  if (!v1) {
    memcpy(a1, v3, 0x70uLL);
  }
}

uint64_t sub_1000409D0(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_1000404B4(a1);
}

BOOL sub_100040A28()
{
  sub_1000462EC();
  sub_10002EAE0(v3, v3[3]);
  sub_1000463E8();
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    sub_10002EB9C(v0);
  }
  else
  {
    sub_10002EAE0(v6, v6[3]);
    sub_1000463E8();
    uint64_t v4 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    sub_10002EB9C((uint64_t)v6);
    BOOL v1 = v4 == 2;
    sub_10002EB9C(v0);
  }
  return v1;
}

uint64_t sub_100040AD0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x63656C6C6F636572 && a2 == 0xEC0000006E6F6974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7373657567 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100040BD0(char a1)
{
  if (a1) {
    return 0x7373657567;
  }
  else {
    return 0x63656C6C6F636572;
  }
}

uint64_t sub_100040C0C()
{
  return 1;
}

uint64_t sub_100040C2C()
{
  return 1;
}

uint64_t sub_100040C34()
{
  return 0;
}

void sub_100040C40()
{
  sub_100046054();
  char v21 = v2;
  uint64_t v4 = v3;
  sub_10002E768(&qword_100698388);
  sub_100045FF4();
  uint64_t v19 = v6;
  uint64_t v20 = v5;
  __chkstk_darwin(v5);
  sub_100046348();
  uint64_t v18 = sub_10002E768(&qword_100698390);
  sub_100045FF4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100046338();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = sub_10002E768(&qword_100698398);
  sub_100045FF4();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_100046360();
  sub_100046184(v4);
  sub_100045AFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = (void (**)(uint64_t, uint64_t))(v15 + 8);
  if (v21)
  {
    sub_100045B48();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v0, v20);
  }
  else
  {
    sub_100045B94();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v18);
  }
  (*v17)(v1, v13);
  sub_10004603C();
}

uint64_t sub_100040E3C()
{
  return sub_100040BD0(*v0);
}

uint64_t sub_100040E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100040AD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100040E6C(uint64_t a1)
{
  unint64_t v2 = sub_100045AFC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100040EA8(uint64_t a1)
{
  unint64_t v2 = sub_100045AFC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100040EE8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100040C0C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100040F14()
{
  return _s3asd10CoordRangeV9westLimitSdSgvpfi_0();
}

uint64_t sub_100040F30@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100040C2C();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100040F5C(uint64_t a1)
{
  unint64_t v2 = sub_100045B48();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100040F98(uint64_t a1)
{
  unint64_t v2 = sub_100045B48();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100040FD4(uint64_t a1)
{
  unint64_t v2 = sub_100045B94();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100041010(uint64_t a1)
{
  unint64_t v2 = sub_100045B94();

  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10004104C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000366E8(*a1, *a2);
}

BOOL sub_100041058@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = sub_100040A28();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

void sub_100041088()
{
}

void sub_1000410A4()
{
  sub_100046054();
  unint64_t v2 = v1;
  sub_10002E768(&qword_1006982D0);
  sub_100045FF4();
  __chkstk_darwin(v3);
  sub_100046184(v2);
  sub_100045294();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_10002EB9C((uint64_t)v2);
  }
  else
  {
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v4 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    if (v5) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 65;
    }
    if (v5) {
      unint64_t v7 = v5;
    }
    else {
      unint64_t v7 = 0xE100000000000000;
    }
    BOOL v8 = v6 == 65 && v7 == 0xE100000000000000;
    if (v8
      || (sub_100046378() & 1) != 0
      || (v6 == 67 ? (BOOL v10 = v7 == 0xE100000000000000) : (BOOL v10 = 0),
          v10 || (sub_100046378() & 1) != 0 || (v6 == 17217 ? (BOOL v11 = v7 == 0xE200000000000000) : (BOOL v11 = 0), v11)))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100046378();
      swift_bridgeObjectRelease();
    }
    sub_1000462F8();
    v9();
    sub_10002EB9C((uint64_t)v2);
  }
  sub_10004603C();
}

BOOL sub_1000412D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t sub_1000412E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107700 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xED00007373616C43)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000413E8(char a1)
{
  if (a1) {
    return 0x6465726975716572;
  }
  else {
    return 7107700;
  }
}

void sub_100041424()
{
  sub_100046054();
  sub_100046480();
  sub_10002E768(&qword_1006982E0);
  sub_100045FF4();
  __chkstk_darwin(v2);
  sub_10002EAE0(v0, v0[3]);
  sub_100045294();
  sub_100046460();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    sub_1000437B8();
    sub_100046314();
  }
  sub_100046244();
  v3();
  sub_10004603C();
}

uint64_t sub_100041538()
{
  return sub_1000413E8(*v0);
}

uint64_t sub_100041540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000412E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100041568(uint64_t a1)
{
  unint64_t v2 = sub_100045294();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000415A4(uint64_t a1)
{
  unint64_t v2 = sub_100045294();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000415E0(void *a1@<X8>)
{
  sub_1000410A4();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
  }
}

void sub_10004160C()
{
}

BOOL sub_100041628(uint64_t *a1, uint64_t *a2)
{
  return sub_1000412D4(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_10004163C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = *(void **)a2;
  if (v4)
  {
    if (!v5 || (sub_100043A6C(v4, v5) & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v6 = *(void **)(a1 + 8);
  char v7 = *(void **)(a2 + 8);
  if (v6)
  {
    if (!v7 || (sub_100043A6C(v6, v7) & 1) == 0) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 16) == 2)
  {
    if (*(unsigned char *)(a2 + 16) != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_100046304();
    if (v9 == 2 || ((v10 ^ v9) & 1) == 0) {
      return result;
    }
  }
  if (*(unsigned char *)(a1 + 17) == 2)
  {
    if (*(unsigned char *)(a2 + 17) != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t result = sub_100046304();
    if (v11 == 2 || ((v12 ^ v11) & 1) == 0) {
      return result;
    }
  }
  if (*(unsigned char *)(a1 + 18) == 2)
  {
    if (*(unsigned char *)(a2 + 18) != 2) {
      return 0;
    }
    goto LABEL_26;
  }
  uint64_t result = sub_100046304();
  if (v13 != 2 && ((v14 ^ v13) & 1) != 0)
  {
LABEL_26:
    uint64_t v15 = *(void **)(a1 + 24);
    uint64_t v16 = *(void **)(a2 + 24);
    if (v15)
    {
      if (!v16 || (sub_100043A6C(v15, v16) & 1) == 0) {
        return 0;
      }
    }
    else if (v16)
    {
      return 0;
    }
    uint64_t v17 = *(void **)(a1 + 32);
    uint64_t v18 = *(void **)(a2 + 32);
    if (v17)
    {
      if (!v18 || (sub_100043A6C(v17, v18) & 1) == 0) {
        return 0;
      }
    }
    else if (v18)
    {
      return 0;
    }
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v20 = *(void *)(a2 + 48);
    if (v19)
    {
      if (!v20) {
        return 0;
      }
      BOOL v21 = *(void *)(a1 + 40) == *(void *)(a2 + 40) && v19 == v20;
      return v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
    }
    return !v20;
  }
  return result;
}

void sub_1000417B0(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_1000417D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73694C776F6C6C61 && a2 == 0xEF736F6547646574;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7473694C796E6564 && a2 == 0xEE00736F65476465;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000015 && a2 == 0x8000000100569DE0 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000017 && a2 == 0x8000000100569E00 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      BOOL v7 = a1 == 0x7269757165526D67 && a2 == 0xEA00000000006465;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else if (a1 == 0xD000000000000017 && a2 == 0x8000000100569E20 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      else if (a1 == 0xD000000000000019 && a2 == 0x8000000100569E40 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else if (a1 == 0x6465726975716572 && a2 == 0xED00007373616C43)
      {
        swift_bridgeObjectRelease();
        return 7;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 7;
        }
        else {
          return 8;
        }
      }
    }
  }
}

uint64_t sub_100041B68()
{
  return 8;
}

Swift::Int sub_100041B70(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t sub_100041BB8(char a1)
{
  unint64_t result = 0x73694C776F6C6C61;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7473694C796E6564;
      break;
    case 2:
      unint64_t result = 0xD000000000000015;
      break;
    case 3:
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0x7269757165526D67;
      break;
    case 6:
      unint64_t result = 0xD000000000000019;
      break;
    case 7:
      unint64_t result = 0x6465726975716572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100041CE4(void *a1)
{
  uint64_t v3 = v1;
  sub_10002E768(&qword_100698308);
  sub_100045FF4();
  __chkstk_darwin(v5);
  sub_100046184(a1);
  sub_1000452E0();
  sub_100046440();
  sub_1000360A8(v3, (uint64_t)v11, &qword_100698310);
  sub_1000463D0((uint64_t)v11);
  sub_10002E768(&qword_1006982F8);
  sub_10004532C(&qword_100698318);
  sub_100046010();
  if (!v2)
  {
    sub_1000360A8(v3 + 8, (uint64_t)v10, &qword_100698310);
    sub_1000463D0((uint64_t)v10);
    sub_100046010();
    sub_1000460AC(2);
    sub_1000460AC(3);
    sub_1000460AC(4);
    sub_1000360A8(v3 + 24, (uint64_t)v9, &qword_100698310);
    sub_1000463D0((uint64_t)v9);
    sub_100046010();
    sub_1000360A8(v3 + 32, (uint64_t)v8, &qword_100698310);
    sub_1000463D0((uint64_t)v8);
    sub_100046010();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  sub_1000462F8();
  return v6();
}

void sub_100041F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100046054();
  sub_1000462EC();
  uint64_t v13 = v12;
  sub_10002E768(&qword_1006982E8);
  sub_100045FF4();
  __chkstk_darwin(v14);
  sub_100046360();
  sub_10002EAE0(v10, v10[3]);
  sub_1000452E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
  {
    sub_10002EB9C((uint64_t)v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10002E768(&qword_1006982F8);
    sub_10004532C(&qword_100698300);
    sub_100046124();
    uint64_t v15 = a10;
    sub_1000463FC();
    swift_bridgeObjectRetain();
    sub_100046124();
    uint64_t v16 = a10;
    swift_bridgeObjectRetain();
    char v23 = sub_1000461D0();
    char v22 = sub_1000461D0();
    LOBYTE(a10) = 4;
    char v21 = sub_1000461D0();
    sub_1000460F4();
    swift_bridgeObjectRetain();
    sub_1000460F4();
    swift_bridgeObjectRetain();
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v18 = v17;
    uint64_t v19 = sub_10004606C();
    v20(v19);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_10002EB9C((uint64_t)v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v13 = v15;
    *(void *)(v13 + 8) = v16;
    *(unsigned char *)(v13 + 16) = v23;
    *(unsigned char *)(v13 + 17) = v22;
    *(unsigned char *)(v13 + 18) = v21;
    *(void *)(v13 + 24) = a10;
    *(void *)(v13 + 32) = a10;
    *(void *)(v13 + 40) = v24;
    *(void *)(v13 + 48) = v18;
  }
  sub_10004603C();
}

Swift::Int sub_10004229C()
{
  return sub_100041B70(*v0);
}

void sub_1000422A4(uint64_t a1)
{
  sub_1000417B0(a1, *v1);
}

Swift::Int sub_1000422AC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_1000422F0()
{
  return sub_100041BB8(*v0);
}

uint64_t sub_1000422F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000417D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100042320()
{
  return _s3asd10CoordRangeV9westLimitSdSgvpfi_0();
}

uint64_t sub_100042340@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100041B68();
  *a1 = result;
  return result;
}

uint64_t sub_100042368(uint64_t a1)
{
  unint64_t v2 = sub_1000452E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000423A4(uint64_t a1)
{
  unint64_t v2 = sub_1000452E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000423E0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  sub_100041F20(a1, a2, a3, a4, a5, a6, a7, a8, v12, v13);
  if (!v9)
  {
    *(_OWORD *)a9 = v13;
    *(_OWORD *)(a9 + 16) = v14;
    double result = *(double *)&v15;
    *(_OWORD *)(a9 + 32) = v15;
    *(void *)(a9 + 48) = v16;
  }
  return result;
}

uint64_t sub_100042430(void *a1)
{
  return sub_100041CE4(a1);
}

void sub_100042478(uint64_t a1, char a2)
{
}

uint64_t sub_1000424A0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7107700 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F7473694878616DLL && a2 == 0xEA00000000007972)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10004258C()
{
  return 2;
}

uint64_t sub_100042594(char a1)
{
  if (a1) {
    return 0x6F7473694878616DLL;
  }
  else {
    return 7107700;
  }
}

void sub_1000425C8()
{
  sub_100046054();
  uint64_t v3 = v2;
  uint64_t v4 = sub_10002E768(&qword_1006982C8);
  sub_100045FF4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100046348();
  sub_10002EAE0(v3, v3[3]);
  sub_100045164();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v0) {
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_10004603C();
}

void sub_100042700()
{
  sub_100046054();
  sub_1000462EC();
  sub_10002E768(&qword_100698280);
  sub_100045FF4();
  __chkstk_darwin(v2);
  sub_100046184(v0);
  sub_100045164();
  sub_100046298();
  if (!v1)
  {
    sub_100046264();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_100046244();
    v3();
  }
  sub_10002EB9C((uint64_t)v0);
  sub_10004603C();
}

Swift::Int sub_100042858()
{
  return sub_100043038(*v0);
}

void sub_100042874(uint64_t a1)
{
  sub_100042478(a1, *v1);
}

uint64_t sub_10004287C()
{
  return sub_100042594(*v0);
}

uint64_t sub_100042884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000424A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000428AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10004258C();
  *a1 = result;
  return result;
}

uint64_t sub_1000428D4(uint64_t a1)
{
  unint64_t v2 = sub_100045164();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100042910(uint64_t a1)
{
  unint64_t v2 = sub_100045164();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10004294C(uint64_t a1@<X8>)
{
  sub_100042700();
  if (!v1)
  {
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) = v4 & 1;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v6 & 1;
  }
}

void sub_10004298C()
{
}

BOOL sub_1000429C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a4 && a2 == a5) {
    return a3 == a6;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v9) {
    return a3 == a6;
  }
  return result;
}

void sub_100042A18(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
}

uint64_t sub_100042A78(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x776F6C666B726F77 && a2 == 0xEA00000000004449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xED00007373616C43)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100042B98(char a1)
{
  if (a1) {
    return 0x6465726975716572;
  }
  else {
    return 0x776F6C666B726F77;
  }
}

void sub_100042BE0()
{
  sub_100046054();
  v10[0] = v1;
  uint64_t v3 = v2;
  uint64_t v4 = sub_10002E768(&qword_100698198);
  sub_100045FF4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  char v9 = (char *)v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EAE0(v3, v3[3]);
  sub_100043720();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    v10[1] = v10[0];
    sub_1000437B8();
    sub_100046314();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  sub_10004603C();
}

Swift::Int sub_100042D20(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  return Hasher._finalize()();
}

uint64_t sub_100042D98()
{
  sub_1000462EC();
  sub_10002E768(&qword_100698180);
  sub_100045FF4();
  __chkstk_darwin(v2);
  uint64_t v3 = v0[4];
  sub_100046184(v0);
  sub_100043720();
  sub_100046298();
  if (v1)
  {
    sub_10002EB9C((uint64_t)v0);
  }
  else
  {
    sub_100046264();
    uint64_t v3 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_1000463FC();
    sub_10004376C();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1000462F8();
    v5();
    sub_10002EB9C((uint64_t)v0);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_100042F3C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x776F6C666B726F77 && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100569DC0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int sub_100043038(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100043080(char a1)
{
  if (a1) {
    return 0xD000000000000011;
  }
  else {
    return 0x776F6C666B726F77;
  }
}

void sub_1000430C0()
{
  sub_100046054();
  sub_100046480();
  sub_10002E768(&qword_1006981E8);
  sub_100045FF4();
  __chkstk_darwin(v2);
  sub_10002EAE0(v0, v0[3]);
  sub_100043804();
  sub_100046460();
  sub_10002E768(&qword_1006981B8);
  sub_1000438E8(&qword_1006981F0, (void (*)(void))sub_100043958);
  sub_1000461F0();
  if (!v1)
  {
    sub_1000463FC();
    sub_10002E768(&qword_1006981D0);
    sub_1000439A4(&qword_100698200, (void (*)(void))sub_100043A20);
    sub_1000461F0();
  }
  sub_100046244();
  v3();
  sub_10004603C();
}

void sub_100043240()
{
  sub_100046054();
  uint64_t v2 = v1;
  sub_10002E768(&qword_1006981A8);
  sub_100045FF4();
  __chkstk_darwin(v3);
  sub_100046338();
  Dictionary.init(dictionaryLiteral:)();
  sub_10002EAE0(v2, v2[3]);
  sub_100043804();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_10002EB9C((uint64_t)v2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10002E768(&qword_1006981B8);
    sub_1000438E8(&qword_1006981C0, (void (*)(void))sub_100043850);
    sub_100046154();
    sub_10002E768(&qword_1006981D0);
    sub_1000463FC();
    sub_1000439A4(&qword_1006981D8, (void (*)(void))sub_10004389C);
    sub_100046154();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1000463BC();
    v5(v4);
    sub_10002EB9C((uint64_t)v2);
  }
  sub_10004603C();
}

uint64_t sub_100043444()
{
  return sub_100042B98(*v0);
}

uint64_t sub_10004344C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100042A78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100043474(uint64_t a1)
{
  unint64_t v2 = sub_100043720();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000434B0(uint64_t a1)
{
  unint64_t v2 = sub_100043720();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000434EC()
{
  return sub_100042D20(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

void sub_1000434F8(uint64_t a1)
{
  sub_100042A18(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

Swift::Int sub_100043504()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100043574@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100042D98();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
    a1[2] = v5;
  }
  return result;
}

void sub_1000435A4()
{
}

BOOL sub_1000435C4(uint64_t *a1, uint64_t *a2)
{
  return sub_1000429C4(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t sub_1000435E0()
{
  return sub_100043080(*v0);
}

uint64_t sub_1000435E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100042F3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100043610(uint64_t a1)
{
  unint64_t v2 = sub_100043804();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004364C(uint64_t a1)
{
  unint64_t v2 = sub_100043804();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100043688(void *a1@<X8>)
{
  sub_100043240();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
  }
}

void sub_1000436B4()
{
}

unint64_t sub_1000436D4()
{
  unint64_t result = qword_100698178;
  if (!qword_100698178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698178);
  }
  return result;
}

unint64_t sub_100043720()
{
  unint64_t result = qword_100698188;
  if (!qword_100698188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698188);
  }
  return result;
}

unint64_t sub_10004376C()
{
  unint64_t result = qword_100698190;
  if (!qword_100698190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698190);
  }
  return result;
}

unint64_t sub_1000437B8()
{
  unint64_t result = qword_1006981A0;
  if (!qword_1006981A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006981A0);
  }
  return result;
}

unint64_t sub_100043804()
{
  unint64_t result = qword_1006981B0;
  if (!qword_1006981B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006981B0);
  }
  return result;
}

unint64_t sub_100043850()
{
  unint64_t result = qword_1006981C8;
  if (!qword_1006981C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006981C8);
  }
  return result;
}

unint64_t sub_10004389C()
{
  unint64_t result = qword_1006981E0;
  if (!qword_1006981E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006981E0);
  }
  return result;
}

uint64_t sub_1000438E8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10003137C(&qword_1006981B8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100043958()
{
  unint64_t result = qword_1006981F8;
  if (!qword_1006981F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006981F8);
  }
  return result;
}

uint64_t sub_1000439A4(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10003137C(&qword_1006981D0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100043A20()
{
  unint64_t result = qword_100698208;
  if (!qword_100698208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698208);
  }
  return result;
}

uint64_t sub_100043A6C(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v7 & 1) == 0) {
      return result;
    }
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v8 = a1 + 7;
  char v9 = a2 + 7;
  unint64_t v10 = 1;
  while (v10 < v2)
  {
    uint64_t result = *(v8 - 1);
    if (result != *(v9 - 1) || *v8 != *v9)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        return 0;
      }
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10) {
      return 1;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100043B3C(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  for (unint64_t i = (void **)(a1 + 48); ; i += 3)
  {
    uint64_t v8 = (uint64_t)*(i - 2);
    uint64_t v7 = (uint64_t)*(i - 1);
    char v9 = *i;
    unint64_t v10 = (void *)*a3;
    swift_bridgeObjectRetain();
    id v11 = v9;
    unint64_t v13 = sub_100055F1C(v8, v7);
    uint64_t v14 = v10[2];
    BOOL v15 = (v12 & 1) == 0;
    if (__OFADD__(v14, v15)) {
      break;
    }
    char v16 = v12;
    if (v10[3] >= v14 + v15)
    {
      if ((a2 & 1) == 0)
      {
        sub_10002E768(&qword_100698220);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      sub_100063A88();
      unint64_t v17 = sub_100055F1C(v8, v7);
      if ((v16 & 1) != (v18 & 1)) {
        goto LABEL_18;
      }
      unint64_t v13 = v17;
    }
    uint64_t v19 = (void *)*a3;
    if (v16)
    {
      id v20 = *(id *)(v19[7] + 8 * v13);
      swift_bridgeObjectRelease();

      uint64_t v21 = v19[7];
      *(void *)(v21 + 8 * v13) = v20;
    }
    else
    {
      v19[(v13 >> 6) + 8] |= 1 << v13;
      char v22 = (uint64_t *)(v19[6] + 16 * v13);
      *char v22 = v8;
      v22[1] = v7;
      *(void *)(v19[7] + 8 * v13) = v11;
      uint64_t v23 = v19[2];
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_17;
      }
      v19[2] = v25;
    }
    a2 = 1;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.AssessmentPayloadCache()
{
}

uint64_t sub_100043D1C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 64);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100043D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = a2 + 64;
  uint64_t v5 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    long long v7 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 80) = v7;
    *(void *)(a1 + 96) = *(void *)(v6 + 32);
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v5;
    *(void *)(a1 + 72) = v8;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    *(_WORD *)(a1 + 81) = *(_WORD *)(a2 + 81);
    uint64_t v10 = *(void *)(a2 + 88);
    uint64_t v9 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = v10;
    *(void *)(a1 + 96) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100043E58(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  uint64_t v8 = (long long *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 64);
  if (v5 == 1)
  {
    if (v7 == 1)
    {
      long long v9 = *v8;
      long long v10 = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *uint64_t v4 = v9;
      *(_OWORD *)(a1 + 80) = v10;
    }
    else
    {
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
      *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v7 == 1)
  {
    sub_100043FF4(a1 + 64);
    uint64_t v11 = *(void *)(a2 + 96);
    long long v12 = *(_OWORD *)(a2 + 80);
    *uint64_t v4 = *v8;
    *(_OWORD *)(a1 + 80) = v12;
    *(void *)(a1 + 96) = v11;
  }
  else
  {
    *(void *)(a1 + 64) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
    *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_100043FF4(uint64_t a1)
{
  return a1;
}

void *sub_100044024(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t sub_10004402C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a1 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  if (v6 != 1)
  {
    if (v5 != 1)
    {
      *(void *)(a1 + 64) = v5;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
      *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_100043FF4(a1 + 64);
  }
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t sub_100044120(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100044160(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.ValidatedWorkflow()
{
}

uint64_t sub_1000441C4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100044210(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100044278(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ASAnalyticsEvent.PushAnalytic(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100044334(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000443A4(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 40))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000443F8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.ValidatedWorkflow.ValidatedPreconditions()
{
}

void type metadata accessor for ASPrecomputationConfiguration.ValidatedBindingConfiguration()
{
}

unsigned char *initializeBufferWithCopyOfBuffer for ASPrecomputationConfiguration.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.CodingKeys;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.LastCompletionKey.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for DeviceContextProvider.ServiceArea(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_1000444D4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000444E8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100044508(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.BindingConfiguration()
{
}

uint64_t sub_100044544(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 56);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000445B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = a2 + 56;
  uint64_t v5 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v5 == 1)
  {
    long long v7 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 72) = v7;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v6 + 32);
    *(void *)(a1 + 104) = *(void *)(v6 + 48);
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v5;
    *(void *)(a1 + 64) = v8;
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
    uint64_t v9 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v9;
    uint64_t v10 = *(void *)(a2 + 96);
    uint64_t v11 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v10;
    *(void *)(a1 + 104) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100044698(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = (_OWORD *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 56);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  long long v7 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v9 = (long long *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 56);
  if (v6 == 1)
  {
    if (v8 == 1)
    {
      long long v10 = *v9;
      long long v11 = *(_OWORD *)(a2 + 72);
      long long v12 = *(_OWORD *)(a2 + 88);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v11;
      *(_OWORD *)(a1 + 88) = v12;
      *uint64_t v5 = v10;
    }
    else
    {
      *(void *)(a1 + 56) = v8;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
      *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    sub_10004487C(a1 + 56);
    long long v14 = *(_OWORD *)(a2 + 72);
    long long v13 = *(_OWORD *)(a2 + 88);
    long long v15 = *v9;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v14;
    *(_OWORD *)(a1 + 88) = v13;
    *uint64_t v5 = v15;
  }
  else
  {
    *(void *)(a1 + 56) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
    *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_10004487C(uint64_t a1)
{
  return a1;
}

void *sub_1000448AC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t sub_1000448B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  if (v6 != 1)
  {
    if (v5 != 1)
    {
      *(void *)(a1 + 56) = v5;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v8;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10004487C(a1 + 56);
  }
  long long v7 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t sub_1000449B0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100044A04(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.Workflow()
{
}

uint64_t sub_100044A80()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100044AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100044B54(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for RavioliVerifier.ResponseDTO(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100044C38(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100044CB0(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 56))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100044D04(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.PreconditionsObject()
{
}

unint64_t sub_100044D74()
{
  unint64_t result = qword_100698228;
  if (!qword_100698228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698228);
  }
  return result;
}

unint64_t sub_100044DC4()
{
  unint64_t result = qword_100698230;
  if (!qword_100698230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698230);
  }
  return result;
}

unint64_t sub_100044E14()
{
  unint64_t result = qword_100698238;
  if (!qword_100698238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698238);
  }
  return result;
}

unint64_t sub_100044E64()
{
  unint64_t result = qword_100698240;
  if (!qword_100698240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698240);
  }
  return result;
}

unint64_t sub_100044EB4()
{
  unint64_t result = qword_100698248;
  if (!qword_100698248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698248);
  }
  return result;
}

unint64_t sub_100044F04()
{
  unint64_t result = qword_100698250;
  if (!qword_100698250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698250);
  }
  return result;
}

unint64_t sub_100044F50()
{
  unint64_t result = qword_100698260;
  if (!qword_100698260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698260);
  }
  return result;
}

unint64_t sub_100044F9C()
{
  unint64_t result = qword_100698268;
  if (!qword_100698268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698268);
  }
  return result;
}

unint64_t sub_100044FE8()
{
  unint64_t result = qword_100698270;
  if (!qword_100698270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698270);
  }
  return result;
}

unint64_t sub_100045034()
{
  unint64_t result = qword_100698278;
  if (!qword_100698278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698278);
  }
  return result;
}

uint64_t sub_100045080(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000450F4(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100045164()
{
  unint64_t result = qword_100698288;
  if (!qword_100698288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698288);
  }
  return result;
}

unint64_t sub_1000451B0()
{
  unint64_t result = qword_1006982A0;
  if (!qword_1006982A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006982A0);
  }
  return result;
}

unint64_t sub_1000451FC()
{
  unint64_t result = qword_1006982B0;
  if (!qword_1006982B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006982B0);
  }
  return result;
}

unint64_t sub_100045248()
{
  unint64_t result = qword_1006982C0;
  if (!qword_1006982C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006982C0);
  }
  return result;
}

unint64_t sub_100045294()
{
  unint64_t result = qword_1006982D8;
  if (!qword_1006982D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006982D8);
  }
  return result;
}

unint64_t sub_1000452E0()
{
  unint64_t result = qword_1006982F0;
  if (!qword_1006982F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006982F0);
  }
  return result;
}

uint64_t sub_10004532C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10003137C(&qword_1006982F8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000454E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_10004550C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100045514(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.PreconditionsObject.CodingKeys;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.AssessmentPayloadCache.CodingKeys;
}

unsigned char *sub_10004553C(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.BindingConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Channel(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_1000455E0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000456ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for ASPrecomputationConfiguration.Workflow.CodingKeys()
{
}

void type metadata accessor for ASPrecomputationConfiguration.BindingSource()
{
}

unint64_t sub_1000456F0()
{
  unint64_t result = qword_100698320;
  if (!qword_100698320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698320);
  }
  return result;
}

unint64_t sub_100045740()
{
  unint64_t result = qword_100698328;
  if (!qword_100698328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698328);
  }
  return result;
}

unint64_t sub_100045790()
{
  unint64_t result = qword_100698330;
  if (!qword_100698330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698330);
  }
  return result;
}

unint64_t sub_1000457E0()
{
  unint64_t result = qword_100698338;
  if (!qword_100698338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698338);
  }
  return result;
}

unint64_t sub_100045830()
{
  unint64_t result = qword_100698340;
  if (!qword_100698340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698340);
  }
  return result;
}

unint64_t sub_100045880()
{
  unint64_t result = qword_100698348;
  if (!qword_100698348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698348);
  }
  return result;
}

unint64_t sub_1000458D0()
{
  unint64_t result = qword_100698350;
  if (!qword_100698350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698350);
  }
  return result;
}

unint64_t sub_100045920()
{
  unint64_t result = qword_100698358;
  if (!qword_100698358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698358);
  }
  return result;
}

unint64_t sub_100045970()
{
  unint64_t result = qword_100698360;
  if (!qword_100698360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698360);
  }
  return result;
}

unint64_t sub_1000459C0()
{
  unint64_t result = qword_100698368;
  if (!qword_100698368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698368);
  }
  return result;
}

unint64_t sub_100045A10()
{
  unint64_t result = qword_100698370;
  if (!qword_100698370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698370);
  }
  return result;
}

unint64_t sub_100045A60()
{
  unint64_t result = qword_100698378;
  if (!qword_100698378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698378);
  }
  return result;
}

unint64_t sub_100045AB0()
{
  unint64_t result = qword_100698380;
  if (!qword_100698380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698380);
  }
  return result;
}

unint64_t sub_100045AFC()
{
  unint64_t result = qword_1006983A0;
  if (!qword_1006983A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006983A0);
  }
  return result;
}

unint64_t sub_100045B48()
{
  unint64_t result = qword_1006983A8;
  if (!qword_1006983A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006983A8);
  }
  return result;
}

unint64_t sub_100045B94()
{
  unint64_t result = qword_1006983B0;
  if (!qword_1006983B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006983B0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PushEnvironment(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s3asd29ASPrecomputationConfigurationV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100045D34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.BindingSource.CodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.BindingSource.CodingKeys;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.BindingSource.RecollectionCodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.BindingSource.RecollectionCodingKeys;
}

ValueMetadata *type metadata accessor for ASPrecomputationConfiguration.BindingSource.GuessCodingKeys()
{
  return &type metadata for ASPrecomputationConfiguration.BindingSource.GuessCodingKeys;
}

unint64_t sub_100045D90()
{
  unint64_t result = qword_1006983B8;
  if (!qword_1006983B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006983B8);
  }
  return result;
}

unint64_t sub_100045DE0()
{
  unint64_t result = qword_1006983C0;
  if (!qword_1006983C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006983C0);
  }
  return result;
}

unint64_t sub_100045E30()
{
  unint64_t result = qword_1006983C8;
  if (!qword_1006983C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006983C8);
  }
  return result;
}

unint64_t sub_100045E80()
{
  unint64_t result = qword_1006983D0;
  if (!qword_1006983D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006983D0);
  }
  return result;
}

unint64_t sub_100045ED0()
{
  unint64_t result = qword_1006983D8;
  if (!qword_1006983D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006983D8);
  }
  return result;
}

unint64_t sub_100045F20()
{
  unint64_t result = qword_1006983E0;
  if (!qword_1006983E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006983E0);
  }
  return result;
}

unint64_t sub_100045F70()
{
  unint64_t result = qword_1006983E8;
  if (!qword_1006983E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1006983E8);
  }
  return result;
}

uint64_t sub_100046010()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_10004606C()
{
  return v0;
}

uint64_t sub_100046088()
{
  return 0x53676E69646E6962;
}

uint64_t sub_1000460AC@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 104) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1000460D0()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1000460F4()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100046124()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100046154()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

void *sub_100046184(void *a1)
{
  return sub_10002EAE0(a1, v1);
}

uint64_t sub_1000461A0()
{
  return 0x636E657571657266;
}

uint64_t sub_1000461BC()
{
  return v0;
}

uint64_t sub_1000461D0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1000461F0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_10004621C()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

unint64_t sub_100046250()
{
  return 0xD000000000000016;
}

uint64_t sub_100046264()
{
  *(unsigned char *)(v0 - 65) = 0;
  return v0 - 65;
}

uint64_t sub_10004627C()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100046298()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

void sub_1000462D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  long long v15 = (void *)(*(void *)(v14 + 56) + 16 * v13);
  void *v15 = a13;
  v15[1] = a12;
}

uint64_t sub_100046304()
{
  return 0;
}

uint64_t sub_100046314()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_100046378()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000463A8()
{
  return v0 - 136;
}

uint64_t sub_1000463BC()
{
  return v0;
}

uint64_t sub_1000463D0(uint64_t a1)
{
  return sub_1000360A8(a1, v2 - 104, v1);
}

uint64_t sub_1000463E8()
{
  return v0;
}

void sub_1000463FC()
{
  *(unsigned char *)(v0 - 81) = 1;
}

uint64_t sub_10004641C()
{
  return 0x69646E6F63657270;
}

uint64_t sub_100046440()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_100046460()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_100046494()
{
  return 0x776F6C666B726F77;
}

uint64_t sub_1000464B8()
{
  *(void *)(v1 + 128) = v0;
  sub_10003F160();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_1000464DC()
{
  sub_100048FA0();
  sub_100048E64();
  if (*(unsigned char *)(v0[16] + 17))
  {
    id v10 = [objc_allocWithZone((Class)ACAccountStore) init];
    v0[17] = v10;
    sub_10002E768(&qword_100698030);
    uint64_t v11 = sub_100048E70();
    *(_OWORD *)(v11 + 16) = xmmword_10058CEC0;
    *(void *)(v11 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v11 + 40) = v12;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    v0[18] = isa;
    swift_bridgeObjectRelease();
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100046688;
    uint64_t v14 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100046944;
    v0[13] = &unk_100660C58;
    v0[14] = v14;
    [v10 accountsWithAccountTypeIdentifiers:isa completion:v0 + 10];
    sub_100048F08();
    return _swift_continuation_await(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    sub_100049018();
    sub_100048F08();
    return v3(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

uint64_t sub_100046688()
{
  sub_10003F0F4();
  sub_1000336EC();
  *(void *)(v1 + 152) = *(void *)(v0 + 48);
  sub_10003F160();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10004676C()
{
  unint64_t v1 = *(void *)(v0 + 120);

  if (v1)
  {
    if (v1 >> 62) {
      goto LABEL_18;
    }
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v3 = 0;
      while (1)
      {
        id v4 = (v1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v1 + 8 * v3 + 32);
        uint64_t v5 = v4;
        uint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          break;
        }
        unsigned int v7 = [v4 isActive];

        if (!v7)
        {
          ++v3;
          if (v6 != v2) {
            continue;
          }
        }
        goto LABEL_13;
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
    }
LABEL_13:
    uint64_t v8 = *(void **)(v0 + 136);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 136);
  }

  uint64_t v9 = sub_100048F6C();
  return v10(v9);
}

uint64_t sub_1000468C0()
{
  sub_100048E64();
  unint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void **)(v0 + 136);
  swift_willThrow();

  swift_errorRelease();
  sub_100049018();
  return v3(0);
}

uint64_t sub_100046944(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_1000ABEBC(v3, v4);
  }
  else
  {
    if (a2)
    {
      sub_1000362B0(0, &qword_1006984C8);
      uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v6 = 0;
    }
    return sub_1000ABEC0(v3, v6);
  }
}

char *sub_1000469DC()
{
  unint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = NSNotificationCenter_ptr;
  id v4 = &selRef_registerWithActivity_;
  uint64_t v5 = &selRef_registerWithActivity_;
  if (!v2 || !*(void *)(v2 + 16))
  {
    uint64_t v12 = 0;
    goto LABEL_18;
  }
  id v6 = objc_allocWithZone((Class)PKPassLibrary);
  swift_bridgeObjectRetain();
  id v7 = [v6 init];
  id v8 = [v7 passes];

  sub_1000362B0(0, &qword_1006984B8);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_5;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v12 = _swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10) {
    goto LABEL_16;
  }
LABEL_5:
  sub_1000A52D8(0, v10 & ~(v10 >> 63), 0);
  if (v10 < 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v42 = v1;
  uint64_t v11 = 0;
  uint64_t v12 = _swiftEmptyArrayStorage;
  do
  {
    if ((v9 & 0xC000000000000001) != 0) {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v13 = *(id *)(v9 + 8 * v11 + 32);
    }
    uint64_t v14 = v13;
    id v15 = [v13 passTypeIdentifier:v42];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    unint64_t v20 = _swiftEmptyArrayStorage[2];
    unint64_t v19 = _swiftEmptyArrayStorage[3];
    if (v20 >= v19 >> 1) {
      sub_100048F7C(v19);
    }
    ++v11;
    _swiftEmptyArrayStorage[2] = v20 + 1;
    uint64_t v21 = &_swiftEmptyArrayStorage[2 * v20];
    v21[4] = v16;
    v21[5] = v18;
  }
  while (v10 != v11);
  swift_bridgeObjectRelease();
  uint64_t v1 = v42;
  uint64_t v5 = &selRef_registerWithActivity_;
  id v4 = &selRef_registerWithActivity_;
  uint64_t v3 = NSNotificationCenter_ptr;
LABEL_17:
  uint64_t v22 = sub_10007F3CC(v2);
  char v23 = sub_1000485F8((uint64_t)_swiftEmptyArrayStorage, v22);
  swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
  {
    char v25 = 0;
    goto LABEL_39;
  }
LABEL_18:
  if (!v1 || !*(void *)(v1 + 16))
  {
    char v25 = 1;
LABEL_39:
    swift_bridgeObjectRelease();
    return (char *)(v25 & 1);
  }
  if (v12)
  {
    swift_bridgeObjectRetain();
    BOOL v24 = v12;
LABEL_38:
    uint64_t v41 = sub_10007F3CC(v1);
    char v25 = sub_10007E208((uint64_t)v24, v41);
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  id v26 = objc_allocWithZone((Class)v3[34]);
  swift_bridgeObjectRetain();
  id v27 = [v26 v4[306]];
  id v28 = [v27 v5[339]];

  sub_1000362B0(0, &qword_1006984B8);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v29 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v29) {
      goto LABEL_26;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    BOOL v24 = _swiftEmptyArrayStorage;
    goto LABEL_38;
  }
LABEL_36:
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v29) {
    goto LABEL_37;
  }
LABEL_26:
  uint64_t v43 = v1;
  unint64_t result = sub_1000A52D8(0, v29 & ~(v29 >> 63), 0);
  if ((v29 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = 0;
    BOOL v24 = _swiftEmptyArrayStorage;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v32 = *(id *)(v2 + 8 * v31 + 32);
      }
      uint64_t v33 = v32;
      id v34 = [v32 passTypeIdentifier:v43];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;

      unint64_t v39 = _swiftEmptyArrayStorage[2];
      unint64_t v38 = _swiftEmptyArrayStorage[3];
      if (v39 >= v38 >> 1) {
        sub_100048F7C(v38);
      }
      ++v31;
      _swiftEmptyArrayStorage[2] = v39 + 1;
      uint64_t v40 = &_swiftEmptyArrayStorage[2 * v39];
      v40[4] = v35;
      v40[5] = v37;
    }
    while (v29 != v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = v43;
    goto LABEL_38;
  }
  __break(1u);
  return result;
}

uint64_t sub_100046DF4()
{
  sub_10003F0F4();
  v0[3] = v1;
  v0[4] = v2;
  v0[2] = v3;
  uint64_t v4 = sub_10002E768(&qword_1006983F8);
  v0[5] = v4;
  v0[6] = *(void *)(v4 - 8);
  v0[7] = swift_task_alloc();
  sub_10002E768(&qword_100697E68);
  v0[8] = swift_task_alloc();
  sub_10003F160();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100046EE4()
{
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[4];
  type metadata accessor for TaskPriority();
  sub_100048E30();
  uint64_t v5 = sub_100048EDC();
  sub_100048E50(v5);
  uint64_t v6 = sub_100048E70();
  uint64_t v7 = sub_100048F1C(v6);
  *(void *)(v7 + 32) = &unk_100698408;
  *(void *)(v7 + 40) = v5;
  id v8 = (void *)sub_100048E70();
  v8[2] = 0;
  v8[3] = 0;
  void v8[4] = &unk_100698418;
  v8[5] = v1;
  sub_100047BDC(v4);
  sub_100047A08(v3, (uint64_t)&unk_100698428, (uint64_t)v8);
  sub_100048EB8();
  sub_100048E30();
  uint64_t v9 = sub_100048EDC();
  sub_100048E50(v9);
  uint64_t v10 = sub_100048E70();
  uint64_t v11 = sub_100049024(v10);
  *(void *)(v11 + 32) = &unk_100698438;
  *(void *)(v11 + 40) = v9;
  uint64_t v12 = sub_100048E70();
  uint64_t v13 = sub_100048F1C(v12);
  *(void *)(v13 + 32) = &unk_100698440;
  *(void *)(v13 + 40) = v2;
  uint64_t v14 = sub_100047BDC(v4);
  sub_100048FD4(v14, (uint64_t)&unk_100698448);
  sub_100048EB8();
  sub_100048E30();
  uint64_t v15 = sub_100048EDC();
  sub_100048E50(v15);
  uint64_t v16 = sub_100048E70();
  uint64_t v17 = sub_100049024(v16);
  *(void *)(v17 + 32) = &unk_100698458;
  *(void *)(v17 + 40) = v15;
  uint64_t v18 = sub_100048E70();
  uint64_t v19 = sub_100048F1C(v18);
  *(void *)(v19 + 32) = &unk_100698460;
  *(void *)(v19 + 40) = v2;
  uint64_t v20 = sub_100047BDC(v4);
  sub_100048FD4(v20, (uint64_t)&unk_100698468);
  sub_100048EB8();
  sub_100048E30();
  uint64_t v21 = sub_100048EDC();
  sub_100048E50(v21);
  uint64_t v22 = sub_100048E70();
  uint64_t v23 = sub_100049024(v22);
  *(void *)(v23 + 32) = &unk_100698478;
  *(void *)(v23 + 40) = v21;
  uint64_t v24 = sub_100048E70();
  uint64_t v25 = sub_100048F1C(v24);
  *(void *)(v25 + 32) = &unk_100698480;
  *(void *)(v25 + 40) = v2;
  uint64_t v26 = sub_100047BDC(v4);
  sub_100048FD4(v26, (uint64_t)&unk_100698488);
  sub_100048EB8();
  sub_100048E30();
  uint64_t v27 = sub_100048EDC();
  sub_100048E50(v27);
  uint64_t v28 = sub_100048E70();
  uint64_t v29 = sub_100049024(v28);
  *(void *)(v29 + 32) = sub_100048408;
  *(void *)(v29 + 40) = v27;
  uint64_t v30 = sub_100048E70();
  uint64_t v31 = sub_100048F1C(v30);
  *(void *)(v31 + 32) = &unk_100698498;
  *(void *)(v31 + 40) = v2;
  uint64_t v32 = sub_100047BDC(v4);
  sub_100048FD4(v32, (uint64_t)&unk_1006984A0);
  sub_100048EB8();
  sub_100048E30();
  uint64_t v33 = sub_100048EDC();
  sub_100048E50(v33);
  uint64_t v34 = sub_100048E70();
  uint64_t v35 = sub_100048F1C(v34);
  *(void *)(v35 + 32) = sub_100048588;
  *(void *)(v35 + 40) = v33;
  uint64_t v36 = (void *)sub_100048E70();
  void v36[2] = 0;
  v36[3] = 0;
  v36[4] = &unk_1006984A8;
  v36[5] = v27;
  sub_100047BDC(v4);
  sub_100047A08(v3, (uint64_t)&unk_1006984B0, (uint64_t)v36);
  sub_100048EB8();
  TaskGroup.makeAsyncIterator()();
  uint64_t v37 = (void *)swift_task_alloc();
  v0[9] = v37;
  void *v37 = v0;
  v37[1] = sub_100047310;
  sub_10003F160();
  return TaskGroup.Iterator.next(isolation:)();
}

uint64_t sub_100047310()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000473D8()
{
  int v1 = *(unsigned __int8 *)(v0 + 80);
  if (v1 == 2)
  {
    char v2 = 1;
LABEL_5:
    uint64_t v3 = *(char **)(v0 + 16);
    (*(void (**)(void, void))(*(void *)(v0 + 48) + 8))(*(void *)(v0 + 56), *(void *)(v0 + 40));
    *uint64_t v3 = v2;
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10003F1AC();
    return v4();
  }
  if ((v1 & 1) == 0)
  {
    TaskGroup.cancelAll()();
    char v2 = 0;
    goto LABEL_5;
  }
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v6;
  void *v6 = v0;
  v6[1] = sub_100047310;
  sub_10003F160();
  return TaskGroup.Iterator.next(isolation:)();
}

uint64_t sub_10004751C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10004753C, 0, 0);
}

uint64_t sub_10004753C()
{
  sub_10003F0F4();
  if (*(unsigned char *)(*(void *)(v0 + 16) + 16))
  {
    id v1 = [objc_allocWithZone((Class)ACAccountStore) init];
    [v1 aa_isUsingiCloud];
  }
  uint64_t v2 = sub_100048F6C();
  return v3(v2);
}

uint64_t sub_1000475D4()
{
  sub_10003F0F4();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_100048E24(v0);
  *id v1 = v2;
  v1[1] = sub_100048DDC;
  uint64_t v3 = sub_100048FC8();
  return sub_10004751C(v3);
}

uint64_t sub_10004765C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100048DDC;
  return v6();
}

uint64_t sub_10004772C()
{
  sub_100048F28();
  sub_100048E64();
  sub_100048ED0();
  uint64_t v0 = swift_task_alloc();
  id v1 = (void *)sub_100048E24(v0);
  *id v1 = v2;
  v1[1] = sub_100048DDC;
  sub_100048E04();
  sub_100048EF4();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000477C0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100047890;
  return v7();
}

uint64_t sub_100047890()
{
  sub_10003F0F4();
  char v2 = v1;
  sub_1000336EC();
  uint64_t v4 = *(unsigned char **)(v3 + 16);
  uint64_t v5 = *v0;
  sub_10003F0B8();
  void *v6 = v5;
  swift_task_dealloc();
  *uint64_t v4 = v2;
  sub_10003F1AC();
  return v7();
}

uint64_t sub_100047970()
{
  sub_100048FA0();
  sub_100048E64();
  sub_100048E88();
  uint64_t v0 = swift_task_alloc();
  char v1 = (void *)sub_100048E24(v0);
  *char v1 = v2;
  v1[1] = sub_10003F060;
  sub_100048DE0();
  sub_100048F08();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100047A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100048AC8(a1, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for TaskPriority();
  if (sub_1000312BC((uint64_t)v10, 1, v11) == 1)
  {
    sub_100048A6C((uint64_t)v10, &qword_100697E68);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v14 = v13;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v15 = *v4;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  uint64_t v17 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v17 = v20;
    v20[2] = v12;
    v20[3] = v14;
  }
  v19[1] = 1;
  v19[2] = v17;
  v19[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t sub_100047BDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100047C2C(uint64_t a1)
{
  v1[9] = a1;
  uint64_t v2 = type metadata accessor for Locale();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  sub_10002E768(&qword_1006984D0);
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_100047D1C, 0, 0);
}

uint64_t sub_100047D1C()
{
  sub_100048F28();
  sub_100048E64();
  sub_100048E98();
  sub_100048A04((uint64_t)(v2 + 3), v0);
  sub_100048A04(v0, v1);
  uint64_t v3 = (void *)v2[7];
  if (v3 && v3[2])
  {
    uint64_t v4 = v2[12];
    uint64_t v5 = v2[13];
    uint64_t v6 = v2[11];
    static Locale.current.getter();
    Locale.region.getter();
    uint64_t v7 = sub_100048F54();
    v8(v7);
    uint64_t v9 = type metadata accessor for Locale.Region();
    sub_100048FEC(v9);
    if (v10)
    {
      sub_100048A6C(v4, &qword_1006984D0);
    }
    else
    {
      Locale.Region.identifier.getter();
      sub_100048F3C();
      uint64_t v11 = sub_100048FB4();
      v12(v11);
      sub_100079800(v5, v6, v3);
      swift_bridgeObjectRelease();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100049018();
  sub_100048EF4();
  return v15(v13, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_100047E40()
{
  sub_10003F0F4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100047EC8;
  uint64_t v3 = sub_100048FC8();
  return sub_100047C2C(v3);
}

uint64_t sub_100047EC8()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = sub_100048F6C();
  return v4(v3);
}

uint64_t sub_100047F94()
{
  sub_100048FA0();
  sub_100048E64();
  sub_100048E88();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003D5FC;
  sub_100048DE0();
  sub_100048F08();
  return v8(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10004802C(uint64_t a1)
{
  v1[9] = a1;
  uint64_t v2 = type metadata accessor for Locale();
  v1[10] = v2;
  v1[11] = *(void *)(v2 - 8);
  v1[12] = swift_task_alloc();
  sub_10002E768(&qword_1006984D0);
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_10004811C, 0, 0);
}

uint64_t sub_10004811C()
{
  sub_100048F28();
  sub_100048E64();
  sub_100048E98();
  sub_100048A04(v3, v0);
  sub_100048A04(v0, v1);
  uint64_t v4 = (void *)v2[7];
  if (v4 && v4[2])
  {
    uint64_t v5 = v2[12];
    uint64_t v6 = v2[13];
    uint64_t v7 = v2[11];
    static Locale.current.getter();
    Locale.region.getter();
    uint64_t v8 = sub_100048F54();
    v9(v8);
    uint64_t v10 = type metadata accessor for Locale.Region();
    sub_100048FEC(v10);
    if (v11)
    {
      sub_100048A6C(v5, &qword_1006984D0);
    }
    else
    {
      Locale.Region.identifier.getter();
      sub_100048F3C();
      uint64_t v12 = sub_100048FB4();
      v13(v12);
      sub_100079800(v6, v7, v4);
      swift_bridgeObjectRelease();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100049018();
  sub_100048EF4();
  return v16(v14, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_10004823C()
{
  sub_10003F0F4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100048DDC;
  uint64_t v3 = sub_100048FC8();
  return sub_10004802C(v3);
}

uint64_t sub_1000482CC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100048DDC;
  return sub_1000464B8();
}

uint64_t sub_100048360()
{
  sub_10003F0F4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100048DDC;
  sub_100048FC8();
  return sub_1000482CC();
}

BOOL sub_1000483F0(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 18) & 1) == 0 || sub_1000A7B50();
}

BOOL sub_100048408()
{
  return sub_1000483F0(v0 + 16);
}

uint64_t sub_100048410(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3() & 1;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return sub_1000489F4(v5, v3, v4);
}

uint64_t sub_10004849C()
{
  sub_100048F28();
  sub_100048E64();
  sub_100048ED0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_100048DDC;
  sub_100048E04();
  sub_100048EF4();
  return v7(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100048538()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

unint64_t sub_100048588()
{
  return (unint64_t)sub_1000469DC() & 1;
}

uint64_t sub_1000485B8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000485F8(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v6 = (uint64_t *)((char *)&v10 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100081270(0, v5, v6);
    char v7 = sub_10004877C((uint64_t)v6, v5, v3, a2);
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    sub_100081270(0, v5, v8);
    char v7 = sub_10004877C((uint64_t)v8, v5, v3, a2);
    swift_slowDealloc();
  }
  return v7 & 1;
}

uint64_t sub_10004877C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = a4;
  uint64_t v33 = a4 + 56;
  uint64_t v31 = a3 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  char v28 = 0;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v30 = v4;
  while (v8 < v4)
  {
    uint64_t v32 = v7;
    uint64_t v9 = (uint64_t *)(v31 + 16 * v8);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    ++v8;
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v12 = Hasher._finalize()();
    uint64_t v13 = v5;
    uint64_t v14 = -1 << *(unsigned char *)(v5 + 32);
    unint64_t v15 = v12 & ~v14;
    unint64_t v16 = v15 >> 6;
    uint64_t v17 = 1 << v15;
    if (((1 << v15) & *(void *)(v33 + 8 * (v15 >> 6))) != 0)
    {
      uint64_t v18 = *(void *)(v13 + 48);
      uint64_t v19 = (void *)(v18 + 16 * v15);
      BOOL v20 = *v19 == v11 && v19[1] == v10;
      if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v22 = ~v14;
        for (unint64_t i = v15 + 1; ; unint64_t i = v24 + 1)
        {
          unint64_t v24 = i & v22;
          if (((*(void *)(v33 + (((i & v22) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v22)) & 1) == 0) {
            break;
          }
          uint64_t v25 = (void *)(v18 + 16 * v24);
          BOOL v26 = *v25 == v11 && v25[1] == v10;
          if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v16 = v24 >> 6;
            uint64_t v17 = 1 << v24;
            goto LABEL_11;
          }
        }
        goto LABEL_25;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_11:
      uint64_t v5 = v13;
      unint64_t v4 = v30;
      uint64_t v7 = v32;
      uint64_t v21 = *(void *)(a1 + 8 * v16);
      *(void *)(a1 + 8 * v16) = v17 | v21;
      if ((v17 & v21) != 0) {
        goto LABEL_14;
      }
      uint64_t v7 = v32 + 1;
      if (__OFADD__(v32, 1)) {
        goto LABEL_39;
      }
      if (v7 != *(void *)(v13 + 16)) {
        goto LABEL_14;
      }
      if (v28)
      {
LABEL_37:
        uint64_t v27 = 1;
        goto LABEL_34;
      }
      char v28 = 0;
      uint64_t v27 = 0;
      if (v8 == v30) {
        goto LABEL_34;
      }
    }
    else
    {
LABEL_25:
      uint64_t result = swift_bridgeObjectRelease();
      if (v28)
      {
        char v28 = 1;
        unint64_t v4 = v30;
        uint64_t v5 = v13;
        uint64_t v7 = v32;
        if (v8 == v30)
        {
LABEL_33:
          uint64_t v27 = 0;
LABEL_34:
          swift_bridgeObjectRelease();
          return v27;
        }
      }
      else
      {
        uint64_t v7 = v32;
        unint64_t v4 = v30;
        if (v32 == *(void *)(v13 + 16)) {
          goto LABEL_37;
        }
        uint64_t v5 = v13;
        char v28 = 1;
LABEL_14:
        if (v8 == v4) {
          goto LABEL_33;
        }
      }
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1000489F4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_100048A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002E768(&qword_100698310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048A6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10002E768(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100048AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002E768(&qword_100697E68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048B30(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100048C10;
  return v5(v2 + 32);
}

uint64_t sub_100048C10()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v2 = v1;
  uint64_t v4 = *(unsigned char **)(v3 + 16);
  uint64_t v5 = *v0;
  sub_10003F0B8();
  void *v6 = v5;
  swift_task_dealloc();
  *uint64_t v4 = *(unsigned char *)(v2 + 32);
  sub_10003F1AC();
  return v7();
}

uint64_t sub_100048CF0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100048D28(uint64_t a1)
{
  uint64_t v3 = *(int **)(v1 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100048E24(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_10003D5FC;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1006984D8 + dword_1006984D8);
  return v7(a1, v3);
}

uint64_t sub_100048DE0()
{
  return v0;
}

uint64_t sub_100048E04()
{
  return v0;
}

uint64_t sub_100048E24(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100048E30()
{
  return sub_10003349C(v0, 1, 1, v1);
}

__n128 sub_100048E50(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  __n128 result = *(__n128 *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v1;
  *(__n128 *)(a1 + 32) = result;
  *(void *)(a1 + 48) = v2;
  return result;
}

uint64_t sub_100048E70()
{
  return swift_allocObject();
}

__n128 sub_100048E98()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v1 + 32);
  __n128 result = *(__n128 *)(v1 + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v1;
  *(__n128 *)(v0 + 32) = result;
  *(void *)(v0 + 48) = v2;
  return result;
}

uint64_t sub_100048EB8()
{
  return sub_100048A6C(v0, v1);
}

uint64_t sub_100048EDC()
{
  return swift_allocObject();
}

uint64_t sub_100048F1C(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_100048F54()
{
  return v0;
}

uint64_t sub_100048F6C()
{
  return v0;
}

char *sub_100048F7C@<X0>(unint64_t a1@<X8>)
{
  return sub_1000A52D8((char *)(a1 > 1), v1, 1);
}

uint64_t sub_100048FB4()
{
  return v0;
}

uint64_t sub_100048FC8()
{
  return v0;
}

uint64_t sub_100048FD4(uint64_t a1, uint64_t a2)
{
  return sub_100047A08(v2, a2, v3);
}

uint64_t sub_100048FEC(uint64_t a1)
{
  return sub_1000312BC(v1, 1, a1);
}

uint64_t sub_100049024(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

uint64_t sub_100049030()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_100051880((uint64_t)v10, (uint64_t)v11, &qword_100697EE8);
  if (v11[3])
  {
    if (swift_dynamicCast())
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      sub_10002E768(&qword_100698790);
      sub_100051928();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      sub_10002EC6C(v8, v9);
      swift_release();
      return v11[0];
    }
  }
  else
  {
    sub_1000518D8((uint64_t)v11, &qword_100697EE8);
  }
  if (qword_1006978B0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100031284(v3, (uint64_t)qword_1006AD1B8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v11[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)&v10[0] = sub_100032B48(0xD00000000000001ELL, 0x8000000100569280, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Invalid Array in defaults for key: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (qword_1006978D8 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_100049350(uint64_t a1, void *a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10002E768(&qword_100698790);
  sub_100051090();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v7 = String._bridgeToObjectiveC()();
  [a2 setObject:isa forKey:v7];

  return sub_10002EC6C(v3, v5);
}

uint64_t sub_10004964C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_1000312BC(a1, 1, v6) == 1)
  {
    sub_1000518D8(a1, &qword_100697E68);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10003F240();
    v7();
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000497B8(uint64_t a1)
{
  swift_defaultActor_initialize();
  *(void *)(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount) = 0;
  *(void *)(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_resumptionContinuations) = _swiftEmptyArrayStorage;
  uint64_t v3 = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions;
  id v4 = [self standardUserDefaults];
  uint64_t v5 = sub_100049030();

  *(void *)(v1 + v3) = v5;
  *(void *)(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState__bindingStore) = 0;
  uint64_t v6 = v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_logger;
  type metadata accessor for Logger();
  sub_100051B88();
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, a1);
  return v1;
}

void sub_10004989C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount);
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount) = v3;
    swift_retain();
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)sub_100033734();
      *(_DWORD *)uint64_t v5 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "PrecomputationState.pause() called - count now %ld", v5, 0xCu);
      sub_100033704();
    }
    else
    {
      swift_release();
    }
  }
}

void sub_1000499CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002E768(&qword_100698100);
  sub_100045FF4();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount;
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount);
  BOOL v10 = __OFSUB__(v9, 1);
  uint64_t v11 = v9 - 1;
  if (v10)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount) = v11;
    swift_retain();
    Swift::Int v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    uint64_t v14 = &unk_10058C000;
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v15 = (uint8_t *)sub_100033734();
      *(_DWORD *)unint64_t v15 = 134217984;
      sub_100051FB4(*(void *)(v0 + v8));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "PrecomputationState.resume() called - count now %ld", v15, 0xCu);
      uint64_t v14 = (void *)&unk_10058C000;
      sub_100033704();
    }
    else
    {
      swift_release();
    }

    if (!*(void *)(v0 + v8))
    {
      swift_retain();
      unint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      uint64_t v18 = &unk_100698000;
      if (sub_100051AD4(v17))
      {
        uint64_t v19 = (uint8_t *)sub_100033734();
        *(_DWORD *)uint64_t v19 = v14[328];
        BOOL v20 = (uint64_t *)(v1 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_resumptionContinuations);
        sub_100051F9C();
        uint64_t v21 = *v20;
        uint64_t v18 = (void *)&unk_100698000;
        sub_100051FB4(*(void *)(v21 + 16));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v12, "PrecomputationState.resume resuming %ld precomputations", v19, 0xCu);
        sub_100033704();
      }
      else
      {
        swift_release();
      }

      uint64_t v22 = (uint64_t *)(v1 + v18[189]);
      swift_beginAccess();
      uint64_t v23 = *v22;
      uint64_t v24 = *(void *)(*v22 + 16);
      if (v24)
      {
        uint64_t v31 = v22;
        uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
        uint64_t v26 = v4 + 16;
        uint64_t v25 = v27;
        uint64_t v28 = v23 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
        uint64_t v29 = *(void *)(v26 + 56);
        swift_bridgeObjectRetain();
        do
        {
          v25(v7, v28, v2);
          CheckedContinuation.resume(returning:)();
          (*(void (**)(char *, uint64_t))(v26 - 8))(v7, v2);
          v28 += v29;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease();
        uint64_t v22 = v31;
      }
      *uint64_t v22 = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_100049CA4()
{
  *(void *)(v1 + 16) = v0;
  return sub_100051A38((uint64_t)sub_100049CC0, v0);
}

uint64_t sub_100049CC0()
{
  sub_10003F444();
  if (*(uint64_t *)(v0[2] + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_pauseCount) < 1)
  {
    sub_10003F1AC();
    return v6();
  }
  else
  {
    v0[3] = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_logger;
    uint64_t v1 = (void *)Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.info.getter();
    if (sub_100051E9C(v2))
    {
      *(_WORD *)sub_100051AA0() = 0;
      sub_100051C8C((void *)&_mh_execute_header, v3, v4, "Precomputation pausing due to live computations");
      sub_100033704();
    }

    sub_100051188(&qword_100698848, (void (*)(uint64_t))type metadata accessor for PrecomputationManager.PrecomputationState);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[4] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100049E70;
    sub_100051F50();
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
}

uint64_t sub_100049E70()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *os_log_type_t v2 = v1;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100049F4C()
{
  sub_10003F444();
  uint64_t v0 = (void *)Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (sub_100051E9C(v1))
  {
    *(_WORD *)sub_100051AA0() = 0;
    sub_100051C8C((void *)&_mh_execute_header, v2, v3, "Precomputation resuming after live computations");
    sub_100033704();
  }

  sub_10003F1AC();
  return v4();
}

uint64_t sub_100049FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a2 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_resumptionContinuations);
  swift_beginAccess();
  sub_100050AC8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003BB90);
  uint64_t v4 = *(void *)(*v3 + 16);
  sub_100050B3C(v4, (uint64_t (*)(BOOL))sub_10003BB90);
  uint64_t v5 = *v3;
  *(void *)(v5 + 16) = v4 + 1;
  uint64_t v6 = sub_10002E768(&qword_100698100);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(v5+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v4, a1, v6);
  return swift_endAccess();
}

void sub_10004A0D4(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  uint64_t v6 = sub_10002E768(&qword_100697EE0);
  uint64_t v7 = sub_100051D98(v6);
  __chkstk_darwin(v7);
  sub_100046338();
  uint64_t v10 = v9 - v8;
  swift_bridgeObjectRetain();
  static Date.now.getter();
  uint64_t v11 = type metadata accessor for Date();
  sub_10003349C(v10, 0, 1, v11);
  sub_100051E3C();
  sub_100052F34(v10, a1, a2, a3);
  swift_endAccess();
  Swift::Int v12 = self;
  swift_bridgeObjectRetain();
  sub_100051ED8([v12 standardUserDefaults]);
  swift_bridgeObjectRelease();
}

void sub_10004A1E8()
{
  uint64_t v0 = sub_10002E768(&qword_100697EE0);
  uint64_t v1 = sub_100051D98(v0);
  __chkstk_darwin(v1);
  sub_100046338();
  uint64_t v4 = v3 - v2;
  sub_100051E3C();
  sub_1000566F0();
  sub_1000518D8(v4, &qword_100697EE0);
  swift_endAccess();
  uint64_t v5 = self;
  swift_bridgeObjectRetain();
  sub_100051ED8([v5 standardUserDefaults]);
  swift_bridgeObjectRelease();
}

void sub_10004A2E0()
{
  type metadata accessor for Date();
  sub_100031714();
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions);
  swift_beginAccess();
  *uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  uint64_t v3 = self;
  swift_bridgeObjectRetain();
  sub_100051ED8([v3 standardUserDefaults]);
  swift_bridgeObjectRelease();
}

uint64_t sub_10004A3A4()
{
  uint64_t v1 = sub_10002E768(&qword_100697EE0);
  uint64_t v2 = sub_100051D98(v1);
  __chkstk_darwin(v2);
  sub_100046338();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_10002E768(&qword_100698770);
  uint64_t v7 = sub_100051D98(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::Int v12 = (int64_t *)((char *)&v77 - v11);
  uint64_t v13 = type metadata accessor for Date();
  sub_100045FF4();
  uint64_t v15 = v14;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v91 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v77 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v77 - v22;
  Date.init(timeIntervalSinceNow:)();
  unint64_t v90 = v0;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v86 = v23;
  uint64_t v81 = v24;
  uint64_t v82 = v15 + 16;
  v24(v21, (uint64_t)v23, v13);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v88 = v15;
  uint64_t v84 = v12;
  if (v27)
  {
    uint64_t v28 = v5;
    uint64_t v29 = (uint8_t *)sub_100033734();
    v94[0] = sub_10003371C();
    *(_DWORD *)uint64_t v29 = 136315138;
    int64_t v89 = (int64_t)(v29 + 4);
    sub_100051188((unint64_t *)&qword_100698788, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v93 = sub_100032B48(v30, v31, v94);
    uint64_t v15 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v32 = sub_100051E04();
    v33(v32);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "PrecomputationState.cleanupWorkflowCompletions removing completions before %s", v29, 0xCu);
    swift_arrayDestroy();
    sub_100033704();
    uint64_t v5 = v28;
    Swift::Int v12 = v84;
    sub_100033704();
  }
  else
  {

    uint64_t v34 = sub_100051E04();
    v35(v34);
  }
  uint64_t v36 = (uint64_t *)(v90 + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions);
  sub_100051F9C();
  uint64_t v37 = *v36;
  uint64_t v38 = *(void *)(*v36 + 64);
  uint64_t v78 = *v36 + 64;
  uint64_t v39 = 1 << *(unsigned char *)(v37 + 32);
  uint64_t v40 = -1;
  if (v39 < 64) {
    uint64_t v40 = ~(-1 << v39);
  }
  unint64_t v41 = v40 & v38;
  char v87 = (void (**)(char *, char *, uint64_t))(v15 + 32);
  int64_t v80 = (unint64_t)(v39 + 63) >> 6;
  int64_t v77 = v80 - 1;
  uint64_t v83 = v37;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v89 = 0;
  if (!v41) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v43 = __clz(__rbit64(v41));
  uint64_t v44 = (v41 - 1) & v41;
  unint64_t v45 = v43 | (v89 << 6);
  while (2)
  {
    uint64_t v46 = *(void *)(v83 + 56);
    unint64_t v47 = (uint64_t *)(*(void *)(v83 + 48) + 24 * v45);
    uint64_t v48 = *v47;
    uint64_t v49 = v47[1];
    uint64_t v50 = v47[2];
    *(void *)uint64_t v10 = v48;
    *((void *)v10 + 1) = v49;
    *((void *)v10 + 2) = v50;
    uint64_t v51 = v46 + *(void *)(v15 + 72) * v45;
    uint64_t v52 = sub_10002E768(&qword_100698778);
    v81(&v10[*(int *)(v52 + 48)], v51, v13);
    sub_10003349C((uint64_t)v10, 0, 1, v52);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100051880((uint64_t)v10, (uint64_t)v12, &qword_100698770);
      uint64_t v57 = sub_10002E768(&qword_100698778);
      if (sub_1000312BC((uint64_t)v12, 1, v57) == 1)
      {
        swift_release();
        uint64_t v74 = *v36;
        BOOL v75 = self;
        swift_bridgeObjectRetain();
        id v76 = [v75 standardUserDefaults];
        sub_100049350(v74, v76);
        swift_bridgeObjectRelease();

        return v85(v86, v13);
      }
      unint64_t v90 = v44;
      Swift::Int v58 = v36;
      uint64_t v59 = *v12;
      uint64_t v60 = v12[1];
      Swift::UInt v61 = v12[2];
      unint64_t v62 = (char *)v12 + *(int *)(v57 + 48);
      uint64_t v63 = *v87;
      (*v87)(v91, v62, v13);
      if (static Date.< infix(_:_:)())
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        unint64_t v64 = sub_100055F94(v59, v60, v61);
        char v66 = v65;
        swift_bridgeObjectRelease();
        if (v66)
        {
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v92 = *v58;
          uint64_t v67 = v92;
          *Swift::Int v58 = 0x8000000000000000;
          uint64_t v68 = v13;
          uint64_t v69 = v5;
          Swift::Int v70 = *(void *)(v67 + 24);
          sub_10002E768(&qword_100698780);
          Swift::Int v71 = v70;
          uint64_t v5 = v69;
          uint64_t v13 = v68;
          _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v71);
          uint64_t v72 = v92;
          swift_bridgeObjectRelease();
          v63((char *)v5, (char *)(*(void *)(v72 + 56) + *(void *)(v88 + 72) * v64), v68);
          sub_100031714();
          _NativeDictionary._delete(at:)();
          *Swift::Int v58 = v72;
          swift_bridgeObjectRelease();
          uint64_t v73 = 0;
        }
        else
        {
          uint64_t v73 = 1;
        }
        sub_10003349C(v5, v73, 1, v13);
        sub_1000518D8(v5, &qword_100697EE0);
        swift_endAccess();
      }
      v85(v91, v13);
      uint64_t result = swift_bridgeObjectRelease();
      Swift::Int v12 = v84;
      uint64_t v15 = v88;
      uint64_t v36 = v58;
      unint64_t v41 = v90;
      if (v90) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v53 = v89 + 1;
      if (__OFADD__(v89, 1))
      {
        __break(1u);
        goto LABEL_37;
      }
      if (v53 < v80)
      {
        unint64_t v54 = *(void *)(v78 + 8 * v53);
        if (v54) {
          goto LABEL_12;
        }
        int64_t v55 = v89 + 2;
        ++v89;
        if (v53 + 1 < v80)
        {
          unint64_t v54 = *(void *)(v78 + 8 * v55);
          if (v54) {
            goto LABEL_15;
          }
          int64_t v89 = v53 + 1;
          if (v53 + 2 < v80)
          {
            unint64_t v54 = *(void *)(v78 + 8 * (v53 + 2));
            if (v54)
            {
              v53 += 2;
              goto LABEL_12;
            }
            int64_t v55 = v53 + 3;
            int64_t v89 = v53 + 2;
            if (v53 + 3 < v80) {
              break;
            }
          }
        }
      }
LABEL_26:
      uint64_t v56 = sub_10002E768(&qword_100698778);
      sub_10003349C((uint64_t)v10, 1, 1, v56);
      uint64_t v44 = 0;
    }
    unint64_t v54 = *(void *)(v78 + 8 * v55);
    if (v54)
    {
LABEL_15:
      int64_t v53 = v55;
LABEL_12:
      uint64_t v44 = (v54 - 1) & v54;
      unint64_t v45 = __clz(__rbit64(v54)) + (v53 << 6);
      int64_t v89 = v53;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v53 = v55 + 1;
    if (__OFADD__(v55, 1)) {
      break;
    }
    if (v53 >= v80)
    {
      int64_t v89 = v77;
      goto LABEL_26;
    }
    unint64_t v54 = *(void *)(v78 + 8 * v53);
    ++v55;
    if (v54) {
      goto LABEL_12;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10004AB4C()
{
  *(void *)(v1 + 56) = v0;
  return sub_100051A38((uint64_t)sub_10004AB68, v0);
}

uint64_t sub_10004AB68()
{
  sub_10003F444();
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState__bindingStore;
  *(void *)(v0 + 64) = OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState__bindingStore;
  uint64_t v3 = *(void *)(v1 + v2);
  *(void *)(v0 + 72) = v3;
  if (v3)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v4 = swift_retain();
    return v7(v4);
  }
  else
  {
    type metadata accessor for BindingsStore(0);
    *(_OWORD *)(v0 + 32) = 0u;
    *(void *)(v0 + 48) = 0;
    *(_OWORD *)(v0 + 16) = 0u;
    swift_allocObject();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v6;
    void *v6 = v0;
    v6[1] = sub_10004AC84;
    return sub_10005F508(v0 + 16);
  }
}

uint64_t sub_10004AC84()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  *(void *)(v6 + 88) = v5;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10004AD64()
{
  sub_10003F444();
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = *(void *)(v2 + v1);
  if (v3)
  {
    swift_retain();
    swift_release();
  }
  else
  {
    *(void *)(v2 + v1) = v0[11];
    swift_retain();
    uint64_t v3 = v0[11];
  }
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  swift_retain();
  return v5(v3);
}

uint64_t sub_10004AE08()
{
  type metadata accessor for Logger();
  sub_100051B88();
  sub_10003F240();
  v1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10004AE98()
{
  sub_10004AE08();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t RavioliManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_10004AED0()
{
  return RavioliManager.unownedExecutor.getter();
}

id sub_10004AEEC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for PrecomputationManager(0)) init];
  static PrecomputationManager.shared = (uint64_t)result;
  return result;
}

uint64_t *PrecomputationManager.shared.unsafeMutableAddressor()
{
  if (qword_1006978F0 != -1) {
    swift_once();
  }
  return &static PrecomputationManager.shared;
}

id static PrecomputationManager.shared.getter()
{
  if (qword_1006978F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static PrecomputationManager.shared;

  return v0;
}

uint64_t sub_10004AFF0()
{
  sub_10002EAE0((void *)(v0 + OBJC_IVAR____TtC3asd21PrecomputationManager_configurationManager), *(void *)(v0 + OBJC_IVAR____TtC3asd21PrecomputationManager_configurationManager + 24));
  sub_1000950DC(v3);
  sub_100051880((uint64_t)v3, (uint64_t)v4, &qword_100697F08);
  if (v5 == 1) {
    return 0;
  }
  uint64_t v1 = v6;
  sub_1000516DC(v6);
  sub_100036138((uint64_t *)v3);
  return v1;
}

id PrecomputationManager.init()()
{
  uint64_t v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for Logger();
  sub_100045FF4();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100046338();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = (uint64_t *)&v1[OBJC_IVAR____TtC3asd21PrecomputationManager_analyticsManager];
  uint64_t v11 = type metadata accessor for ASAnalyticsManager();
  uint64_t v12 = swift_allocObject();
  v10[3] = v11;
  v10[4] = (uint64_t)&off_100661050;
  uint64_t *v10 = v12;
  uint64_t v13 = v1;
  Logger.init(subsystem:category:)();
  uint64_t v14 = &v13[OBJC_IVAR____TtC3asd21PrecomputationManager_logger];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(&v13[OBJC_IVAR____TtC3asd21PrecomputationManager_logger], v9, v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v9, v14, v3);
  type metadata accessor for PrecomputationManager.PrecomputationState(0);
  uint64_t v15 = swift_allocObject();
  sub_1000497B8(v9);
  *(void *)&v13[OBJC_IVAR____TtC3asd21PrecomputationManager_state] = v15;
  if (qword_100697968 != -1) {
    swift_once();
  }
  sub_100051F9C();
  uint64_t v16 = (void *)static ASDConfigurationManager.shared;
  uint64_t v17 = &v13[OBJC_IVAR____TtC3asd21PrecomputationManager_configurationManager];
  *((void *)v17 + 3) = type metadata accessor for ASDConfigurationManager();
  *((void *)v17 + 4) = &off_100661E68;
  *(void *)uint64_t v17 = v16;
  id v18 = v16;

  v20.receiver = v13;
  v20.super_class = ObjectType;
  return [super init];
}

uint64_t type metadata accessor for PrecomputationManager.PrecomputationState(uint64_t a1)
{
  return sub_100050EE4(a1, qword_100698620);
}

uint64_t sub_10004B2DC(uint64_t a1)
{
  v2[141] = v1;
  v2[135] = a1;
  v2[147] = swift_getObjectType();
  return _swift_task_switch(sub_10004B350, 0, 0);
}

uint64_t sub_10004B350()
{
  sub_10003F444();
  uint64_t v1 = (void *)v0[141];
  uint64_t v2 = swift_allocObject();
  v0[148] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = v1;
  swift_retain();
  swift_asyncLet_begin();
  uint64_t v4 = OBJC_IVAR____TtC3asd21PrecomputationManager_configurationManager;
  v0[149] = OBJC_IVAR____TtC3asd21PrecomputationManager_configurationManager;
  sub_10002EAE0(&v3[v4], *(void *)&v3[v4 + 24]);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[150] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10004B464;
  return sub_10009BA70();
}

uint64_t sub_10004B464()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10003F0B8();
  *uint64_t v5 = v4;
  *(void *)(v6 + 1208) = v0;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10004B540()
{
  sub_100048E64();
  uint64_t v1 = (void *)(*(void *)(v0 + 1128) + *(void *)(v0 + 1192));
  sub_10002EAE0(v1, v1[3]);
  sub_1000950DC((_OWORD *)(v0 + 696));
  sub_100051880(v0 + 696, v0 + 888, &qword_100697F08);
  if (*(void *)(v0 + 928) != 1)
  {
    memcpy((void *)(v0 + 792), (const void *)(v0 + 888), 0x60uLL);
    sub_100051880(v0 + 840, v0 + 1048, &qword_100698860);
    sub_100051850((uint64_t *)(v0 + 1048));
    sub_100036138((uint64_t *)(v0 + 696));
    sub_100051880(v0 + 1048, v0 + 1064, &qword_100698860);
    if (*(void *)(v0 + 1064))
    {
      uint64_t v2 = sub_10003F78C(*(void *)(v0 + 1064));
      *(void *)(v0 + 1216) = v2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v2[2])
      {
        sub_100048EF4();
        return _swift_asyncLet_get();
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v4 = (void *)Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (sub_100051A84(v5))
  {
    uint64_t v6 = (_WORD *)sub_100051AA0();
    sub_100051BE8(v6);
    sub_100051A64((void *)&_mh_execute_header, v7, v8, "No workflows configured - No precompute to do");
    sub_100033704();
  }

  sub_100048EF4();
  return _swift_asyncLet_finish(v9);
}

uint64_t sub_10004B70C()
{
  sub_10003F444();
  uint64_t v1 = (void *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (sub_100051E9C(v2))
  {
    *(_WORD *)sub_100051AA0() = 0;
    sub_100051C8C((void *)&_mh_execute_header, v3, v4, "Error updating config - likely no network available");
    sub_100033704();
  }

  swift_errorRelease();
  return _swift_asyncLet_finish(v0 + 16);
}

uint64_t sub_10004B7D4()
{
  return sub_100051A38((uint64_t)sub_10004B7EC, 0);
}

uint64_t sub_10004B7EC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 1128) + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(void *)(v0 + 1224) = v1;
  return sub_100051A38((uint64_t)sub_10004B814, v1);
}

uint64_t sub_10004B814()
{
  sub_10003F0F4();
  uint64_t v1 = (void *)(*(void *)(v0 + 1224)
                + OBJC_IVAR____TtCC3asd21PrecomputationManager19PrecomputationState_lastCompletions);
  sub_100051F9C();
  *(void *)(v0 + 1232) = *v1;
  swift_bridgeObjectRetain();
  sub_10003F160();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_10004B898()
{
  sub_10003F444();
  *(void *)(v0 + 1240) = sub_10004BAE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_asyncLet_finish(v0 + 16);
}

uint64_t sub_10004B930()
{
  return sub_100051A38((uint64_t)sub_10004B948, 0);
}

uint64_t sub_10004B948()
{
  sub_10003F0F4();
  uint64_t v1 = *(void *)(v0 + 1240);
  swift_release_n();
  sub_100049018();
  return v2(v1);
}

uint64_t sub_10004B9AC()
{
  return sub_100051A38((uint64_t)sub_10004B9C4, 0);
}

uint64_t sub_10004B9C4()
{
  sub_10003F0F4();
  swift_release_n();
  sub_100049018();
  return v0(_swiftEmptyArrayStorage);
}

uint64_t sub_10004BA28()
{
  return sub_100051A38((uint64_t)sub_100051A24, 0);
}

uint64_t sub_10004BA40(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  return _swift_task_switch(sub_10004BA60, 0, 0);
}

uint64_t sub_10004BA60()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(void *)(v0 + 24) = v1;
  return sub_100051A38((uint64_t)sub_10004BA88, v1);
}

uint64_t sub_10004BA88()
{
  sub_10003F0F4();
  sub_10004A3A4();
  sub_100051E70();
  return v0();
}

uint64_t sub_10004BAE0()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100051F50();
  sub_10004BB44(v0, v1, v2);
  uint64_t v5 = v3;
  sub_1000BFF88();
  return v5;
}

void sub_10004BB44(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  Swift::UInt v50 = a3;
  uint64_t v59 = a2;
  uint64_t v5 = sub_10002E768(&qword_100697EE0);
  __chkstk_darwin(v5 - 8);
  uint64_t v53 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v49 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v40 = v3;
  if (v11)
  {
    uint64_t v51 = v8;
    unint64_t v12 = 0;
    uint64_t v44 = v9 + 16;
    uint64_t v45 = v9;
    unint64_t v47 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
    uint64_t v46 = v11;
    uint64_t v41 = v11 - 1;
    uint64_t v42 = a1 + 64;
    unint64_t v43 = _swiftEmptyArrayStorage;
    uint64_t v52 = a1;
    do
    {
      uint64_t v13 = (long long *)(v42 + 104 * v12);
      unint64_t v14 = v12;
      while (1)
      {
        if (v14 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v15 = *((void *)v13 - 4);
        uint64_t v16 = *((void *)v13 - 3);
        uint64_t v17 = *((void *)v13 - 2);
        int v56 = *((unsigned __int8 *)v13 - 8);
        long long v58 = *v13;
        uint64_t v55 = *((void *)v13 + 2);
        int v54 = *((unsigned __int8 *)v13 + 24);
        uint64_t v18 = *((void *)v13 + 4);
        uint64_t v19 = *((void *)v13 + 5);
        uint64_t v21 = *((void *)v13 + 6);
        uint64_t v20 = *((void *)v13 + 7);
        uint64_t v22 = v59;
        uint64_t v23 = *(void *)(v59 + 16);
        uint64_t v60 = *((void *)v13 + 8);
        uint64_t v61 = v20;
        uint64_t v62 = v17;
        uint64_t v57 = v15;
        if (!v23) {
          break;
        }
        swift_bridgeObjectRetain();
        sub_1000507F0(v18);
        swift_bridgeObjectRetain();
        unint64_t v24 = sub_100055F94(v15, v16, v50);
        if (v25)
        {
          uint64_t v26 = v53;
          uint64_t v27 = v51;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v45 + 16))(v53, *(void *)(v22 + 56) + *(void *)(v45 + 72) * v24, v51);
          uint64_t v28 = 0;
        }
        else
        {
          uint64_t v28 = 1;
          uint64_t v26 = v53;
          uint64_t v27 = v51;
        }
        sub_10003349C(v26, v28, 1, v27);
        swift_bridgeObjectRelease();
        if (sub_1000312BC(v26, 1, v27) == 1) {
          goto LABEL_14;
        }
        uint64_t v29 = v49;
        (*v48)(v49, v26, v27);
        Date.timeIntervalSinceNow.getter();
        double v31 = v30;
        (*v47)(v29, v27);
        uint64_t v32 = v62;
        if ((double)v62 < -v31) {
          goto LABEL_15;
        }
        ++v14;
        swift_bridgeObjectRelease();
        sub_1000508B8(v18);
        uint64_t v13 = (long long *)((char *)v13 + 104);
        a1 = v52;
        if (v46 == v14) {
          goto LABEL_22;
        }
      }
      uint64_t v26 = v53;
      sub_10003349C(v53, 1, 1, v51);
      swift_bridgeObjectRetain();
      sub_1000507F0(v18);
LABEL_14:
      sub_1000518D8(v26, &qword_100697EE0);
      uint64_t v32 = v62;
LABEL_15:
      uint64_t v33 = v43;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v63 = v33;
      uint64_t v35 = v61;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000A53AC(0, v33[2] + 1, 1);
        uint64_t v32 = v62;
        uint64_t v33 = v63;
      }
      unint64_t v37 = v33[2];
      unint64_t v36 = v33[3];
      unint64_t v38 = v37 + 1;
      if (v37 >= v36 >> 1)
      {
        sub_1000A53AC(v36 > 1, v37 + 1, 1);
        unint64_t v38 = v37 + 1;
        uint64_t v32 = v62;
        uint64_t v33 = v63;
      }
      unint64_t v12 = v14 + 1;
      v33[2] = v38;
      unint64_t v43 = v33;
      uint64_t v39 = &v33[13 * v37];
      v39[4] = v57;
      v39[5] = v16;
      v39[6] = v32;
      *((unsigned char *)v39 + 56) = v56;
      *((_OWORD *)v39 + 4) = v58;
      v39[10] = v55;
      *((unsigned char *)v39 + 88) = v54;
      v39[12] = v18;
      v39[13] = v19;
      v39[14] = v21;
      v39[15] = v35;
      v39[16] = v60;
      a1 = v52;
    }
    while (v41 != v14);
  }
  else
  {
    unint64_t v43 = _swiftEmptyArrayStorage;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_10004BFD0(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  v3[17] = type metadata accessor for ASAnalyticsEvent();
  v3[18] = swift_task_alloc();
  return _swift_task_switch(sub_10004C068, 0, 0);
}

uint64_t sub_10004C068()
{
  uint64_t v15 = v0;
  uint64_t v1 = (uint64_t *)v0[14];
  v0[19] = os_transaction_create();
  uint64_t v2 = *v1;
  v0[20] = *v1;
  unint64_t v3 = v1[1];
  uint64_t v4 = OBJC_IVAR____TtC3asd21PrecomputationManager_logger;
  v0[21] = v3;
  v0[22] = v4;
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)sub_100033734();
    sub_10003371C();
    sub_100051E90();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[13] = sub_100032B48(v2, v3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Starting precomputation flow %s", v7, 0xCu);
    sub_100051BCC();
    sub_100033704();
    sub_100033704();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (uint64_t *)v0[18];
  uint64_t v9 = v0[16];
  uint64_t v10 = OBJC_IVAR____TtC3asd21PrecomputationManager_analyticsManager;
  v0[23] = OBJC_IVAR____TtC3asd21PrecomputationManager_analyticsManager;
  sub_10002EAE0((void *)(v9 + v10), *(void *)(v9 + v10 + 24));
  *uint64_t v8 = v2;
  v8[1] = v3;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  sub_1000AE9B8((uint64_t)v8);
  sub_10005171C((uint64_t)v8);
  v0[24] = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  uint64_t v11 = *(void *)(v9 + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  v0[25] = v11;
  v0[5] = type metadata accessor for PrecomputationManager.PrecomputationState(0);
  v0[6] = &off_100660D10;
  v0[2] = v11;
  swift_retain();
  unint64_t v12 = (void *)swift_task_alloc();
  v0[26] = v12;
  void *v12 = v0;
  v12[1] = sub_10004C2DC;
  return sub_1000AF3DC();
}

uint64_t sub_10004C2DC()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v3 = v2;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_10003F0B8();
  void *v6 = v5;
  *(void *)(v3 + 216) = v0;
  swift_task_dealloc();
  if (!v0) {
    sub_10002EB9C(v3 + 16);
  }
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10004C3C0()
{
  sub_10003F444();
  *(void *)(v0 + 224) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  swift_bridgeObjectRetain();
  sub_100051C80();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10004C440()
{
  sub_10003F0F4();
  sub_10004A0D4(*(void *)(v0 + 160), *(void *)(v0 + 168), *(void *)(v0 + 120));
  swift_bridgeObjectRelease();
  sub_10003F160();
  return _swift_task_switch(v1, v2, v3);
}

void sub_10004C4B4()
{
  uint64_t v18 = v0;
  swift_bridgeObjectRetain_n();
  uint64_t v1 = (void *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (sub_100051A84(v2))
  {
    uint64_t v4 = v0[20];
    unint64_t v3 = v0[21];
    sub_100033734();
    uint64_t v17 = sub_10003371C();
    sub_100051F5C(4.8149e-34);
    v0[12] = sub_100032B48(v4, v3, &v17);
    sub_100052048();
    swift_bridgeObjectRelease_n();
    sub_100051F7C((void *)&_mh_execute_header, v5, v6, "Completed precomputation flow %s");
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v7 = v0[28];
  unint64_t v8 = v0[24];
  BOOL v9 = v7 >= v8;
  unint64_t v10 = v7 - v8;
  if (v9)
  {
    uint64_t v12 = v0[20];
    uint64_t v11 = v0[21];
    uint64_t v13 = (void *)v0[18];
    uint64_t v14 = (void *)(v0[16] + v0[23]);
    unint64_t v15 = v10 / 0xF4240;
    sub_10002EAE0(v14, v14[3]);
    *uint64_t v13 = v12;
    v13[1] = v11;
    v13[2] = v15;
    swift_storeEnumTagMultiPayload();
    sub_1000AE9B8((uint64_t)v13);
    swift_unknownObjectRelease();
    sub_10005171C(v0[18]);
    swift_task_dealloc();
    sub_10003F1AC();
    v16();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10004C678()
{
  uint64_t v16 = v0;
  sub_10002EB9C((uint64_t)(v0 + 2));
  swift_bridgeObjectRetain_n();
  uint64_t v1 = (void *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (sub_100051A84(v2))
  {
    uint64_t v4 = v0[20];
    unint64_t v3 = v0[21];
    sub_100033734();
    uint64_t v15 = sub_10003371C();
    sub_100051F5C(4.8149e-34);
    v0[11] = sub_100032B48(v4, v3, &v15);
    sub_100052048();
    swift_bridgeObjectRelease_n();
    sub_100051F7C((void *)&_mh_execute_header, v5, v6, "Error from workflow %s - not marking as complete");
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v8 = v0[20];
  uint64_t v7 = v0[21];
  BOOL v9 = (void *)v0[18];
  unint64_t v10 = (void *)(v0[16] + v0[23]);
  sub_10002EAE0(v10, v10[3]);
  swift_getErrorValue();
  uint64_t v11 = Error.localizedDescription.getter();
  void *v9 = v8;
  v9[1] = v7;
  v9[2] = v11;
  v9[3] = v12;
  swift_storeEnumTagMultiPayload();
  sub_1000AE9B8((uint64_t)v9);
  swift_unknownObjectRelease();
  swift_errorRelease();
  sub_10005171C(v0[18]);
  swift_task_dealloc();
  sub_10003F1AC();
  return v13();
}

uint64_t sub_10004C858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[21] = a2;
  v3[22] = a3;
  v3[20] = a1;
  uint64_t v5 = (void *)swift_task_alloc();
  v3[23] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10004C8F8;
  return sub_10004B2DC(a1);
}

uint64_t sub_10004C8F8()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *os_log_type_t v2 = v1;
  *os_log_type_t v2 = *v0;
  *(void *)(v1 + 192) = v3;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10004C9C8()
{
  sub_10003F444();
  uint64_t v1 = v0[24];
  uint64_t v2 = *(void *)(v1 + 16);
  v0[25] = v2;
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = (void *)Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    BOOL v13 = sub_100051A84(v12);
    uint64_t v8 = (const void *)v0[22];
    if (v13)
    {
      uint64_t v14 = (_WORD *)sub_100051AA0();
      sub_100051BE8(v14);
      sub_100051A64((void *)&_mh_execute_header, v15, v16, "Due precomputations complete");
      sub_100033704();
    }
    goto LABEL_8;
  }
  uint64_t v3 = v0[22];
  uint64_t v4 = OBJC_IVAR____TtC3asd21PrecomputationManager_logger;
  v0[26] = OBJC_IVAR____TtC3asd21PrecomputationManager_state;
  v0[27] = v4;
  v0[28] = 0;
  memcpy(v0 + 2, (const void *)(v1 + 32), 0x68uLL);
  sub_100050790((uint64_t)(v0 + 2));
  if ((*(uint64_t (**)(uint64_t))(v3 + 16))(v3) == 1)
  {
    swift_bridgeObjectRelease();
    sub_100050858((uint64_t)(v0 + 2));
    uint64_t v5 = (void *)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = sub_100051A84(v6);
    uint64_t v8 = (const void *)v0[22];
    if (v7)
    {
      BOOL v9 = (_WORD *)sub_100051AA0();
      sub_100051BE8(v9);
      sub_100051A64((void *)&_mh_execute_header, v10, v11, "Due precomputations stopping as requested to defer");
      sub_100033704();
    }
LABEL_8:

    _Block_release(v8);
    sub_100049018();
    return v17();
  }
  sub_100051E80();
  uint64_t v19 = swift_task_alloc();
  uint64_t v20 = (void *)sub_100051F04(v19);
  *uint64_t v20 = v21;
  v20[1] = sub_10004CBB4;
  return sub_100049CA4();
}

uint64_t sub_10004CBB4()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10004CC7C()
{
  sub_100051FE0();
  if ((*(uint64_t (**)(void))(v0[22] + 16))() == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[2];
  uint64_t v12 = v0[3];
  v0[30] = v10;
  v0[31] = v11;
  v0[32] = v12;
  if (v10 == 1)
  {
    sub_100051CBC();
    if (v13)
    {
      sub_100051C60();
      char v25 = (void *)Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (sub_100051AD4(v26))
      {
        uint64_t v28 = v0[31];
        unint64_t v27 = v0[32];
        sub_100033734();
        uint64_t v45 = sub_100051B2C();
        sub_100051D80(4.8149e-34);
        uint64_t v29 = sub_100032B48(v28, v27, &v45);
        sub_100051D68(v29);
        sub_100050858((uint64_t)(v0 + 2));
        sub_100050858((uint64_t)(v0 + 2));
        sub_100051B48((void *)&_mh_execute_header, v30, v31, "Data Protection Class mismatch for %s - skipping");
        sub_100051BCC();
        sub_100033704();
        sub_100033704();
      }
      else
      {

        sub_100050858((uint64_t)(v0 + 2));
        sub_100050858((uint64_t)(v0 + 2));
      }
      sub_100051C24();
      if (v13)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = (void *)Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.default.getter();
        BOOL v34 = sub_100051A84(v33);
        uint64_t v4 = (const void *)v0[22];
        if (v34)
        {
          uint64_t v35 = (_WORD *)sub_100051AA0();
          sub_100051BE8(v35);
          sub_100051A64((void *)&_mh_execute_header, v36, v37, "Due precomputations complete");
          sub_100033704();
        }
LABEL_5:

        _Block_release(v4);
        sub_100049018();
        sub_100051BF4();
        __asm { BRAA            X2, X16 }
      }
      v0[28] = v32;
      sub_100051A40(v32);
      sub_100050790((uint64_t)(v0 + 2));
      uint64_t v38 = sub_100051EF4();
      if (v39(v38) == 1)
      {
        swift_bridgeObjectRelease();
LABEL_3:
        sub_100050858((uint64_t)(v0 + 2));
        uint64_t v1 = (void *)Logger.logObject.getter();
        os_log_type_t v2 = static os_log_type_t.default.getter();
        BOOL v3 = sub_100051A84(v2);
        uint64_t v4 = (const void *)v0[22];
        if (v3)
        {
          uint64_t v5 = (_WORD *)sub_100051AA0();
          sub_100051BE8(v5);
          sub_100051A64((void *)&_mh_execute_header, v6, v7, "Due precomputations stopping as requested to defer");
          sub_100033704();
        }
        goto LABEL_5;
      }
      uint64_t v40 = swift_task_alloc();
      uint64_t v41 = (void *)sub_100051F04(v40);
      void *v41 = v42;
      v41[1] = sub_10004CBB4;
      sub_100051BF4();
      return sub_100049CA4();
    }
    else
    {
      uint64_t v14 = (void *)swift_task_alloc();
      v0[39] = v14;
      void *v14 = v0;
      v14[1] = sub_10004D4E0;
      sub_100051D18();
      sub_100051BF4();
      return sub_10004BFD0(v15, v16);
    }
  }
  else
  {
    uint64_t v19 = v0[13];
    v0[33] = v0[14];
    v0[34] = v19;
    uint64_t v21 = v0[11];
    uint64_t v20 = v0[12];
    v0[35] = v20;
    v0[36] = v21;
    sub_100051B98(v10, v20);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v22 = swift_task_alloc();
    v0[37] = v22;
    *(void *)(v22 + 16) = v0 + 15;
    uint64_t v23 = (void *)swift_task_alloc();
    v0[38] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_10004D0A8;
    uint64_t v24 = sub_100051CF8();
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v24);
  }
}

uint64_t sub_10004D0A8()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *os_log_type_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10004D18C()
{
  sub_100051FE0();
  sub_100051AF0();
  sub_100051AF0();
  if (*(unsigned char *)(v0 + 320))
  {
    sub_100051CBC();
    if (!v1)
    {
      os_log_type_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 312) = v2;
      *os_log_type_t v2 = v0;
      v2[1] = sub_10004D4E0;
      sub_100051D18();
      sub_100051C0C();
      return sub_10004BFD0(v3, v4);
    }
    sub_100051C60();
    uint64_t v7 = (void *)Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (sub_100051AD4(v21))
    {
      sub_100033734();
      sub_100051B2C();
      sub_100051E90();
      uint64_t v22 = sub_100051D80(4.8149e-34);
      uint64_t v30 = sub_100051CCC(v22, v23, v24, v25, v26, v27, v28, v29, v52);
      sub_100051D68(v30);
      sub_100050858(v0 + 16);
      sub_100050858(v0 + 16);
      uint64_t v20 = "Data Protection Class mismatch for %s - skipping";
      goto LABEL_10;
    }
  }
  else
  {
    sub_100051C60();
    uint64_t v7 = (void *)Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (sub_100051AD4(v8))
    {
      sub_100033734();
      sub_100051B2C();
      sub_100051E90();
      uint64_t v9 = sub_100051D80(4.8149e-34);
      uint64_t v17 = sub_100051CCC(v9, v10, v11, v12, v13, v14, v15, v16, v52);
      sub_100051D68(v17);
      sub_100050858(v0 + 16);
      sub_100050858(v0 + 16);
      uint64_t v20 = "Preconditions not met for %s - skipping";
LABEL_10:
      sub_100051B48((void *)&_mh_execute_header, v18, v19, v20);
      sub_100051BCC();
      sub_100033704();
      sub_100033704();

      goto LABEL_12;
    }
  }

  sub_100050858(v0 + 16);
  sub_100050858(v0 + 16);
LABEL_12:
  sub_100051C24();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = (void *)Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = sub_100051A84(v33);
    uint64_t v35 = *(const void **)(v0 + 176);
    if (v34)
    {
      uint64_t v36 = (_WORD *)sub_100051AA0();
      sub_100051BE8(v36);
      sub_100051A64((void *)&_mh_execute_header, v37, v38, "Due precomputations complete");
      sub_100033704();
    }
LABEL_20:

    _Block_release(v35);
    sub_100049018();
    sub_100051C0C();
    __asm { BRAA            X2, X16 }
  }
  *(void *)(v0 + 224) = v31;
  sub_100051A40(v31);
  sub_100050790(v0 + 16);
  uint64_t v39 = sub_100051EF4();
  if (v40(v39) == 1)
  {
    swift_bridgeObjectRelease();
    sub_100051FC8();
    uint64_t v32 = (void *)Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    BOOL v42 = sub_100051A84(v41);
    uint64_t v35 = *(const void **)(v0 + 176);
    if (v42)
    {
      uint64_t v43 = (_WORD *)sub_100051AA0();
      sub_100051BE8(v43);
      sub_100051A64((void *)&_mh_execute_header, v44, v45, "Due precomputations stopping as requested to defer");
      sub_100033704();
    }
    goto LABEL_20;
  }
  sub_100051E80();
  uint64_t v48 = swift_task_alloc();
  uint64_t v49 = (void *)sub_100051F04(v48);
  void *v49 = v50;
  v49[1] = sub_10004CBB4;
  sub_100051C0C();
  return sub_100049CA4();
}

uint64_t sub_10004D4E0()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  sub_100051C30();
  uint64_t v4 = *v1;
  sub_10003F0B8();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100050858(v0);
  sub_10003F160();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10004D5A8()
{
  sub_10003F444();
  sub_100051C24();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (void *)Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    BOOL v5 = sub_100051A84(v4);
    uint64_t v6 = (const void *)v0[22];
    if (v5)
    {
      uint64_t v7 = (_WORD *)sub_100051AA0();
      sub_100051BE8(v7);
      sub_100051A64((void *)&_mh_execute_header, v8, v9, "Due precomputations complete");
      sub_100033704();
    }
    goto LABEL_9;
  }
  v0[28] = v1;
  uint64_t v10 = v0[22];
  memcpy(v0 + 2, (const void *)(v0[24] + 104 * v1 + 32), 0x68uLL);
  sub_100050790((uint64_t)(v0 + 2));
  if ((*(uint64_t (**)(uint64_t))(v10 + 16))(v10) == 1)
  {
    swift_bridgeObjectRelease();
    sub_100050858((uint64_t)(v0 + 2));
    uint64_t v3 = (void *)Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = sub_100051A84(v11);
    uint64_t v6 = (const void *)v0[22];
    if (v12)
    {
      uint64_t v13 = (_WORD *)sub_100051AA0();
      sub_100051BE8(v13);
      sub_100051A64((void *)&_mh_execute_header, v14, v15, "Due precomputations stopping as requested to defer");
      sub_100033704();
    }
LABEL_9:

    _Block_release(v6);
    sub_100049018();
    return v16();
  }
  sub_100051E80();
  uint64_t v18 = swift_task_alloc();
  uint64_t v19 = (void *)sub_100051F04(v18);
  *uint64_t v19 = v20;
  v19[1] = sub_10004CBB4;
  return sub_100049CA4();
}

uint64_t PrecomputationManager.triggerDuePrecomputations(dataProtectionClass:shouldDefer:)()
{
  sub_10003F0F4();
  v1[22] = v2;
  v1[23] = v0;
  v1[20] = v3;
  v1[21] = v4;
  BOOL v5 = (void *)swift_task_alloc();
  v1[24] = v5;
  *BOOL v5 = v1;
  v5[1] = sub_10004D824;
  uint64_t v6 = sub_100051D18();
  return sub_10004B2DC(v6);
}

uint64_t sub_10004D824()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 200) = v3;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10004D8F4()
{
  sub_100048E64();
  uint64_t v1 = v0[25];
  uint64_t v2 = *(void *)(v1 + 16);
  v0[26] = v2;
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (!sub_100051AB8(v8)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v3 = OBJC_IVAR____TtC3asd21PrecomputationManager_logger;
  v0[27] = OBJC_IVAR____TtC3asd21PrecomputationManager_state;
  v0[28] = v3;
  v0[29] = 0;
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[21];
  memcpy(v0 + 2, (const void *)(v1 + 32), 0x68uLL);
  uint64_t v5 = sub_100050790((uint64_t)(v0 + 2));
  if (v4(v5) == 1)
  {
    sub_100051D24();
    sub_100051FC8();
    uint64_t v6 = (void *)Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (!sub_100051AB8(v7)) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v9 = (_WORD *)sub_100051AA0();
    sub_100051CAC(v9);
    sub_100051B68((void *)&_mh_execute_header, v10, v11);
    sub_100033704();
LABEL_7:

    sub_100051CE8();
    sub_100048EF4();
    __asm { BRAA            X2, X16 }
  }
  sub_100051E60();
  uint64_t v14 = swift_task_alloc();
  uint64_t v15 = (void *)sub_100051F10(v14);
  void *v15 = v16;
  v15[1] = sub_10004DA90;
  sub_100048EF4();
  return sub_100049CA4();
}

uint64_t sub_10004DA90()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10004DB58()
{
  sub_100051FE0();
  if ((*(uint64_t (**)(void))(v0 + 168))() == 1)
  {
    sub_100051D24();
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v10 = *(void *)(v0 + 24);
  *(void *)(v0 + 248) = v8;
  *(void *)(v0 + 256) = v9;
  *(void *)(v0 + 264) = v10;
  if (v8 == 1)
  {
    sub_100051CBC();
    if (v11)
    {
      sub_100051C40();
      uint64_t v23 = (void *)Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (sub_100051AD4(v24))
      {
        uint64_t v26 = *(void *)(v0 + 256);
        unint64_t v25 = *(void *)(v0 + 264);
        sub_100033734();
        uint64_t v39 = sub_100051B2C();
        sub_100051D80(4.8149e-34);
        uint64_t v27 = sub_100032B48(v26, v25, &v39);
        sub_100051D68(v27);
        sub_100050858(v0 + 16);
        sub_100050858(v0 + 16);
        sub_100051B48((void *)&_mh_execute_header, v28, v29, "Data Protection Class mismatch for %s - skipping");
        sub_100051BCC();
        sub_100033704();
        sub_100033704();
      }
      else
      {

        sub_100050858(v0 + 16);
        sub_100050858(v0 + 16);
      }
      sub_100051C24();
      if (v11)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = (void *)Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.default.getter();
        if (!sub_100051AB8(v31))
        {
LABEL_5:

          sub_100051CE8();
          sub_100051BF4();
          __asm { BRAA            X2, X16 }
        }
LABEL_4:
        uint64_t v3 = (_WORD *)sub_100051AA0();
        sub_100051CAC(v3);
        sub_100051B68((void *)&_mh_execute_header, v4, v5);
        sub_100033704();
        goto LABEL_5;
      }
      *(void *)(v0 + 232) = v30;
      uint64_t v32 = *(uint64_t (**)(uint64_t))(v0 + 168);
      sub_100051A40(v30);
      uint64_t v33 = sub_100050790(v0 + 16);
      if (v32(v33) == 1)
      {
        swift_bridgeObjectRelease();
LABEL_3:
        sub_100050858(v0 + 16);
        uint64_t v1 = (void *)Logger.logObject.getter();
        os_log_type_t v2 = static os_log_type_t.default.getter();
        if (!sub_100051AB8(v2)) {
          goto LABEL_5;
        }
        goto LABEL_4;
      }
      uint64_t v34 = swift_task_alloc();
      uint64_t v35 = (void *)sub_100051F10(v34);
      *uint64_t v35 = v36;
      v35[1] = sub_10004DA90;
      sub_100051BF4();
      return sub_100049CA4();
    }
    else
    {
      BOOL v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 320) = v12;
      void *v12 = v0;
      v12[1] = sub_10004E338;
      sub_100051D18();
      sub_100051BF4();
      return sub_10004BFD0(v13, v14);
    }
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 104);
    *(void *)(v0 + 272) = *(void *)(v0 + 112);
    *(void *)(v0 + 280) = v17;
    uint64_t v19 = *(void *)(v0 + 88);
    uint64_t v18 = *(void *)(v0 + 96);
    *(void *)(v0 + 288) = v18;
    *(void *)(v0 + 296) = v19;
    sub_100051B98(v8, v18);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v20 = swift_task_alloc();
    *(void *)(v0 + 304) = v20;
    *(void *)(v20 + 16) = v0 + 120;
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_10004DF40;
    uint64_t v22 = sub_100051CF8();
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v22);
  }
}

uint64_t sub_10004DF40()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *os_log_type_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10004E024()
{
  sub_100051FE0();
  sub_100051AF0();
  sub_100051AF0();
  if (*(unsigned char *)(v0 + 328))
  {
    sub_100051CBC();
    if (!v1)
    {
      os_log_type_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 320) = v2;
      *os_log_type_t v2 = v0;
      v2[1] = sub_10004E338;
      sub_100051D18();
      sub_100051C0C();
      return sub_10004BFD0(v3, v4);
    }
    sub_100051C40();
    uint64_t v7 = (void *)Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (sub_100051AD4(v21))
    {
      sub_100033734();
      sub_100051B2C();
      sub_100051E90();
      uint64_t v22 = sub_100051D80(4.8149e-34);
      uint64_t v30 = sub_100051CCC(v22, v23, v24, v25, v26, v27, v28, v29, v46);
      sub_100051D68(v30);
      sub_100050858(v0 + 16);
      sub_100050858(v0 + 16);
      uint64_t v20 = "Data Protection Class mismatch for %s - skipping";
      goto LABEL_10;
    }
  }
  else
  {
    sub_100051C40();
    uint64_t v7 = (void *)Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (sub_100051AD4(v8))
    {
      sub_100033734();
      sub_100051B2C();
      sub_100051E90();
      uint64_t v9 = sub_100051D80(4.8149e-34);
      uint64_t v17 = sub_100051CCC(v9, v10, v11, v12, v13, v14, v15, v16, v46);
      sub_100051D68(v17);
      sub_100050858(v0 + 16);
      sub_100050858(v0 + 16);
      uint64_t v20 = "Preconditions not met for %s - skipping";
LABEL_10:
      sub_100051B48((void *)&_mh_execute_header, v18, v19, v20);
      sub_100051BCC();
      sub_100033704();
      sub_100033704();

      goto LABEL_12;
    }
  }

  sub_100050858(v0 + 16);
  sub_100050858(v0 + 16);
LABEL_12:
  sub_100051C24();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = (void *)Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (!sub_100051AB8(v33)) {
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v37 = (_WORD *)sub_100051AA0();
    sub_100051CAC(v37);
    sub_100051B68((void *)&_mh_execute_header, v38, v39);
    sub_100033704();
LABEL_19:

    sub_100051CE8();
    sub_100051C0C();
    __asm { BRAA            X2, X16 }
  }
  *(void *)(v0 + 232) = v31;
  uint64_t v34 = *(uint64_t (**)(uint64_t))(v0 + 168);
  sub_100051A40(v31);
  uint64_t v35 = sub_100050790(v0 + 16);
  if (v34(v35) == 1)
  {
    sub_100051D24();
    sub_100051FC8();
    uint64_t v32 = (void *)Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (!sub_100051AB8(v36)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  sub_100051E60();
  uint64_t v42 = swift_task_alloc();
  uint64_t v43 = (void *)sub_100051F10(v42);
  void *v43 = v44;
  v43[1] = sub_10004DA90;
  sub_100051C0C();
  return sub_100049CA4();
}

uint64_t sub_10004E338()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  sub_100051C30();
  uint64_t v4 = *v1;
  sub_10003F0B8();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100050858(v0);
  sub_10003F160();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10004E400()
{
  sub_100048E64();
  sub_100051C24();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (void *)Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (!sub_100051AB8(v4)) {
      goto LABEL_8;
    }
LABEL_7:
    uint64_t v8 = (_WORD *)sub_100051AA0();
    sub_100051CAC(v8);
    sub_100051B68((void *)&_mh_execute_header, v9, v10);
    sub_100033704();
LABEL_8:

    sub_100051CE8();
    sub_100048EF4();
    __asm { BRAA            X2, X16 }
  }
  *(void *)(v0 + 232) = v1;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 168);
  sub_100051A40(v1);
  uint64_t v6 = sub_100050790(v0 + 16);
  if (v5(v6) == 1)
  {
    sub_100051D24();
    sub_100051FC8();
    uint64_t v3 = (void *)Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (!sub_100051AB8(v7)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  sub_100051E60();
  uint64_t v13 = swift_task_alloc();
  uint64_t v14 = (void *)sub_100051F10(v13);
  void *v14 = v15;
  v14[1] = sub_10004DA90;
  sub_100048EF4();
  return sub_100049CA4();
}

uint64_t sub_10004E620(uint64_t a1, void *aBlock, const void *a3, void *a4)
{
  void v4[2] = a4;
  uint64_t v8 = _Block_copy(aBlock);
  v4[3] = v8;
  v4[4] = _Block_copy(a3);
  _Block_copy(v8);
  uint64_t v12 = (uint64_t (*)(uint64_t, id, void *))((char *)&dword_100698820 + dword_100698820);
  id v9 = a4;
  os_log_type_t v10 = (void *)swift_task_alloc();
  v4[5] = v10;
  void *v10 = v4;
  v10[1] = sub_10004E718;
  return v12(a1, v9, v8);
}

uint64_t sub_10004E718()
{
  sub_10003F444();
  sub_1000336EC();
  char v2 = (const void *)v1[4];
  uint64_t v3 = (const void *)v1[3];
  os_log_type_t v4 = (void *)v1[2];
  uint64_t v5 = *v0;
  sub_10003F0B8();
  void *v6 = v5;
  swift_task_dealloc();
  _Block_release(v3);

  uint64_t v7 = sub_100031880();
  v8(v7);
  _Block_release(v2);
  sub_10003F1AC();
  return v9();
}

uint64_t sub_10004E844()
{
  *(void *)(v1 + 120) = v0;
  return sub_100051A38((uint64_t)sub_10004E860, 0);
}

uint64_t sub_10004E860()
{
  uint64_t v1 = sub_10004AFF0();
  if (!v1)
  {
LABEL_17:
    sub_10003F1AC();
    sub_100051E20();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v27 = v0;
  sub_10003F78C(v1);
  sub_100052028();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = v0[2];
  if (v2)
  {
    uint64_t v3 = v0 + 8;
    do
    {
      if ((v3[3] & 1) == 0)
      {
        uint64_t v4 = *(v3 - 3);
        uint64_t v30 = *(v3 - 2);
        uint64_t v31 = *(v3 - 4);
        char v29 = *((unsigned char *)v3 - 8);
        long long v32 = *(_OWORD *)v3;
        uint64_t v28 = v3[2];
        uint64_t v5 = v3[4];
        uint64_t v6 = v3[5];
        uint64_t v7 = v3[6];
        uint64_t v8 = v3[7];
        uint64_t v9 = v3[8];
        swift_bridgeObjectRetain();
        uint64_t v33 = v5;
        sub_1000507F0(v5);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000A53AC(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v11 = _swiftEmptyArrayStorage[2];
        unint64_t v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1) {
          sub_1000A53AC(v10 > 1, v11 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v11 + 1;
        uint64_t v12 = &_swiftEmptyArrayStorage[13 * v11];
        v12[4] = v31;
        v12[5] = v4;
        v12[6] = v30;
        *((unsigned char *)v12 + 56) = v29;
        *((_OWORD *)v12 + 4) = v32;
        v12[10] = v28;
        *((unsigned char *)v12 + 88) = 0;
        v12[12] = v33;
        v12[13] = v6;
        v12[14] = v7;
        v12[15] = v8;
        v12[16] = v9;
      }
      v3 += 13;
      --v2;
    }
    while (v2);
  }
  v27[16] = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v13 = _swiftEmptyArrayStorage[2];
  v27[17] = v13;
  if (!v13)
  {
    swift_release();
    goto LABEL_17;
  }
  uint64_t v14 = type metadata accessor for ODIDeviceInfo();
  uint64_t v15 = OBJC_IVAR____TtC3asd21PrecomputationManager_state;
  v27[18] = v14;
  v27[19] = v15;
  v27[20] = 0;
  sub_100051F30();
  sub_100050790((uint64_t)(v27 + 2));
  if (static ODIDeviceInfo.isDeviceLocked()())
  {
    sub_100051D40();
    sub_100050858((uint64_t)(v27 + 2));
    sub_100051C80();
    sub_100051E20();
    return _swift_task_switch(v16, v17, v18);
  }
  else
  {
    uint64_t v22 = (void *)swift_task_alloc();
    unsigned char v27[24] = v22;
    *uint64_t v22 = v27;
    v22[1] = sub_10004ECC8;
    sub_100052000();
    sub_100051E20();
    return sub_10004BFD0(v23, v24);
  }
}

uint64_t sub_10004EB24()
{
  sub_10003F0F4();
  sub_10004A1E8();
  swift_bridgeObjectRelease();
  sub_10003F160();
  return _swift_task_switch(v0, v1, v2);
}

uint64_t sub_10004EB98()
{
  sub_10003F0F4();
  sub_100051C24();
  if (v2)
  {
    swift_release();
    sub_10003F1AC();
    return v3();
  }
  else
  {
    *(void *)(v0 + 160) = v1;
    sub_100051A40(v1);
    sub_100050790(v0 + 16);
    char v5 = static ODIDeviceInfo.isDeviceLocked()();
    if (v5)
    {
      sub_100051D40();
      sub_100050858(v0 + 16);
      sub_100051C80();
      return _swift_task_switch(v6, v7, v8);
    }
    else
    {
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v9;
      void *v9 = v0;
      v9[1] = sub_10004ECC8;
      uint64_t v10 = sub_100052000();
      return sub_10004BFD0(v10, v11);
    }
  }
}

uint64_t sub_10004ECC8()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  sub_100051C30();
  uint64_t v4 = *v1;
  sub_10003F0B8();
  *char v5 = v4;
  swift_task_dealloc();
  sub_100050858(v0);
  sub_10003F160();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t PrecomputationManager.triggerAllPrecomputations()()
{
  *(void *)(v1 + 120) = v0;
  return sub_100051A38((uint64_t)sub_10004EDAC, 0);
}

uint64_t sub_10004EDAC()
{
  sub_10003F444();
  uint64_t v1 = sub_10004AFF0();
  if (v1)
  {
    uint64_t v2 = sub_10003F78C(v1);
    v0[16] = v2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = v2[2];
    v0[17] = v3;
    if (v3)
    {
      v0[18] = 0;
      sub_100051F30();
      sub_100050790((uint64_t)(v0 + 2));
      uint64_t v4 = (void *)swift_task_alloc();
      v0[19] = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_10004EEC4;
      uint64_t v5 = sub_100051FEC();
      return sub_10004BFD0(v5, v6);
    }
    swift_bridgeObjectRelease();
  }
  sub_10003F1AC();
  return v8();
}

uint64_t sub_10004EEC4()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  sub_100051C30();
  uint64_t v4 = *v1;
  sub_10003F0B8();
  *uint64_t v5 = v4;
  swift_task_dealloc();
  sub_100050858(v0);
  sub_10003F160();
  return _swift_task_switch(v6, v7, v8);
}

uint64_t sub_10004EF8C()
{
  sub_10003F0F4();
  sub_100051C24();
  if (v2)
  {
    swift_bridgeObjectRelease();
    sub_10003F1AC();
    return v3();
  }
  else
  {
    *(void *)(v0 + 144) = v1;
    sub_100051A40(v1);
    sub_100050790(v0 + 16);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10004EEC4;
    uint64_t v6 = sub_100051FEC();
    return sub_10004BFD0(v6, v7);
  }
}

uint64_t sub_10004F08C(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100051A20;
  return PrecomputationManager.triggerAllPrecomputations()();
}

uint64_t PrecomputationManager.triggerPrecomputation(workflowID:)(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return sub_100051A38((uint64_t)sub_10004F154, 0);
}

uint64_t sub_10004F154()
{
  sub_10003F444();
  sub_100052034();
  *(unsigned char *)(v0 + 40) = 0;
  *(void *)(v0 + 56) = 0;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 48) = 4;
  *(unsigned char *)(v0 + 72) = 1;
  sub_100052014(1);
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004F214;
  uint64_t v2 = sub_100052028();
  return sub_10004BFD0(v2, 4);
}

uint64_t sub_10004F214()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10003F160();
  sub_1000508B8(v3);
  sub_100051E70();
  return v4();
}

uint64_t sub_10004F324(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_10004F3F8;
  return PrecomputationManager.triggerPrecomputation(workflowID:)(v5, v7);
}

uint64_t sub_10004F3F8()
{
  sub_100048E64();
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  sub_10003F0B8();
  *uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v3 + 16);
  uint64_t v7 = *v1;
  *uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v3 + 24);
  if (v2)
  {
    _convertErrorToNSError(_:)();
    sub_100051D18();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t *))(v8 + 16))(v8, v1);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v7 + 8);
  return v9();
}

uint64_t PrecomputationManager.triggerPregeneration(workflowID:)(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  return sub_100051A38((uint64_t)sub_10004F5A8, 0);
}

uint64_t sub_10004F5A8()
{
  sub_10003F444();
  sub_100052034();
  *(unsigned char *)(v0 + 40) = 1;
  *(_OWORD *)(v0 + 48) = xmmword_10058E0C0;
  *(void *)(v0 + 64) = 1;
  *(unsigned char *)(v0 + 72) = 0;
  sub_100052014(1);
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100051A34;
  uint64_t v2 = sub_100052028();
  return sub_10004BFD0(v2, 1);
}

uint64_t sub_10004F68C(void *a1, int a2, void *a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  sub_100051EB8();
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  void v7[3] = v6;
  void v7[4] = a1;
  id v8 = a3;
  id v9 = a1;
  uint64_t v10 = sub_100031880();

  return sub_1000B14E8(v10, v11);
}

uint64_t sub_10004F704(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  v3[4] = v6;
  a3;
  id v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_100051A30;
  return PrecomputationManager.triggerPregeneration(workflowID:)(v5, v7);
}

uint64_t PrecomputationManager.notifyCachesWereRemoved()()
{
  *(void *)(v1 + 16) = v0;
  return sub_100051A38((uint64_t)sub_10004F7F4, 0);
}

uint64_t sub_10004F7F4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(void *)(v0 + 24) = v1;
  return sub_100051A38((uint64_t)sub_10004F81C, v1);
}

uint64_t sub_10004F81C()
{
  sub_10003F0F4();
  sub_10004A2E0();
  sub_10003F1AC();
  return v0();
}

uint64_t sub_10004F894(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100051A20;
  return PrecomputationManager.notifyCachesWereRemoved()();
}

uint64_t PrecomputationManager.pausePrecomputations()()
{
  *(void *)(v1 + 16) = v0;
  return sub_100051A38((uint64_t)sub_10004F958, 0);
}

uint64_t sub_10004F958()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(void *)(v0 + 24) = v1;
  return sub_100051A38((uint64_t)sub_10004F980, v1);
}

uint64_t sub_10004F980()
{
  sub_10003F0F4();
  sub_10004989C();
  sub_10003F1AC();
  return v0();
}

uint64_t sub_10004F9F8(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10004FAA0;
  return PrecomputationManager.pausePrecomputations()();
}

uint64_t sub_10004FAA0()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v2 = *(const void **)(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *v0;
  sub_10003F0B8();
  *uint64_t v5 = v4;
  swift_task_dealloc();

  uint64_t v6 = sub_100051EF4();
  v7(v6);
  _Block_release(v2);
  sub_10003F1AC();
  return v8();
}

uint64_t PrecomputationManager.resumePrecomputations()()
{
  *(void *)(v1 + 16) = v0;
  return sub_100051A38((uint64_t)sub_10004FBB8, 0);
}

uint64_t sub_10004FBB8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC3asd21PrecomputationManager_state);
  *(void *)(v0 + 24) = v1;
  return sub_100051A38((uint64_t)sub_10004FBE0, v1);
}

uint64_t sub_10004FBE0()
{
  sub_10003F0F4();
  sub_1000499CC();
  sub_10003F1AC();
  return v0();
}

uint64_t sub_10004FC58(void *a1, int a2, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  sub_100051EC8();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = a1;
  id v6 = a1;
  uint64_t v7 = sub_100031880();

  return sub_1000B14E8(v7, v8);
}

uint64_t sub_10004FCBC(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100051A20;
  return PrecomputationManager.resumePrecomputations()();
}

uint64_t PrecomputationManager.clearAllBindings()()
{
  *(void *)(v1 + 16) = v0;
  return sub_100051A38((uint64_t)sub_10004FD80, 0);
}

uint64_t sub_10004FD80()
{
  sub_10003F0F4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10004FE18;
  return sub_10004AB4C();
}

uint64_t sub_10004FE18()
{
  sub_10003F0F4();
  uint64_t v2 = v1;
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v4 = v3;
  uint64_t v5 = *v0;
  sub_10003F0B8();
  void *v6 = v5;
  *(void *)(v7 + 32) = v2;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10004FEE4()
{
  sub_10003F0F4();
  sub_100061500();
  swift_release();
  sub_10003F1AC();
  return v0();
}

Swift::Void __swiftcall PrecomputationManager.clearAllBindings()()
{
  uint64_t v3 = sub_10002E768(&qword_100697E68);
  uint64_t v4 = sub_100051D98(v3);
  __chkstk_darwin(v4);
  sub_100051DC0();
  uint64_t v5 = sub_100052028();
  sub_10003349C(v5, 1, 1, v2);
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = 0;
  v6[3] = 0;
  void v6[4] = v0;
  int v7 = sub_1000312BC(v1, 1, v2);
  id v8 = v0;
  if (v7 == 1)
  {
    sub_1000518D8(v1, &qword_100697E68);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10003F240();
    v9();
    if (v6[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      dispatch thunk of Actor.unownedExecutor.getter();
      swift_unknownObjectRelease();
    }
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &unk_100698578;
  *(void *)(v10 + 24) = v6;
  swift_task_create();
  swift_release();
}

uint64_t sub_100050124()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003F060;
  return PrecomputationManager.clearAllBindings()();
}

uint64_t sub_1000501FC(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100051A38((uint64_t)sub_100050218, 0);
}

uint64_t sub_100050218()
{
  sub_10003F0F4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000502B0;
  return sub_10004AB4C();
}

uint64_t sub_1000502B0()
{
  sub_10003F0F4();
  uint64_t v2 = v1;
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v4 = v3;
  uint64_t v5 = *v0;
  sub_10003F0B8();
  void *v6 = v5;
  *(void *)(v7 + 40) = v2;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v8, v9, v10);
}

uint64_t sub_10005037C()
{
  sub_10003F0F4();
  sub_100060218();
  swift_release();
  sub_10003F1AC();
  return v0();
}

Swift::Void __swiftcall PrecomputationManager.capture(bindings:)(Swift::OpaquePointer bindings)
{
  uint64_t v4 = sub_10002E768(&qword_100697E68);
  uint64_t v5 = sub_100051D98(v4);
  __chkstk_darwin(v5);
  uint64_t v6 = sub_100051DC0();
  sub_10003349C(v2, 1, 1, v6);
  uint64_t v7 = (Swift::OpaquePointer *)swift_allocObject();
  v7[2]._rawValue = 0;
  v7[3]._rawValue = 0;
  v7[4]._rawValue = bindings._rawValue;
  v7[5]._rawValue = v1;
  swift_bridgeObjectRetain();
  id v8 = v1;
  sub_10004964C(v2, (uint64_t)&unk_100698598, (uint64_t)v7);
  swift_release();
}

uint64_t sub_1000504A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_1000504C4, 0, 0);
}

uint64_t sub_1000504C4()
{
  sub_10003F0F4();
  unint64_t v1 = sub_10005331C(v0[2]);
  v0[4] = v1;
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[5] = (uint64_t)v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100050590;
    uint64_t v3 = sub_100051D18();
    return sub_1000501FC(v3);
  }
  else
  {
    sub_10003F1AC();
    return v5();
  }
}

uint64_t sub_100050590()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10003F1AC();
  return v3();
}

uint64_t sub_100050790(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  swift_bridgeObjectRetain();
  sub_1000507F0(v2);
  return a1;
}

uint64_t sub_1000507F0(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100050858(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  swift_bridgeObjectRelease();
  sub_1000508B8(v2);
  return a1;
}

uint64_t sub_1000508B8(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10005091C()
{
  sub_10003F444();
  uint64_t v1 = v0;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_100048E24(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_1000509F0;
  return v7(v1);
}

uint64_t sub_1000509F0()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100051E70();
  return v3();
}

uint64_t sub_100050AB0()
{
  return sub_100050AC8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10003B128);
}

uint64_t sub_100050AC8(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t sub_100050B24(uint64_t a1)
{
  return sub_100050B3C(a1, (uint64_t (*)(BOOL))sub_10003B128);
}

uint64_t sub_100050B3C(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t sub_100050B84()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003F060;
  sub_100051F50();
  return sub_100046DF4();
}

uint64_t sub_100050C28()
{
  swift_unknownObjectRelease();

  uint64_t v1 = sub_100051EB8();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100050C60()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003F060;
  sub_100051F1C();
  return sub_100050124();
}

uint64_t sub_100050D00()
{
  swift_release();
  uint64_t v0 = sub_100051EC8();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100050D30()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003F060;
  uint64_t v3 = sub_100051DE8();
  return v4(v3);
}

uint64_t sub_100050DCC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100050E14()
{
  sub_100048E64();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003F060;
  sub_100051F1C();
  sub_100048EF4();
  return sub_1000504A4(v3, v4, v5, v6, v7);
}

uint64_t sub_100050EBC()
{
  return type metadata accessor for PrecomputationManager(0);
}

uint64_t type metadata accessor for PrecomputationManager(uint64_t a1)
{
  return sub_100050EE4(a1, (uint64_t *)&unk_1006985C8);
}

uint64_t sub_100050EE4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100050F18()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100050FC4()
{
  return type metadata accessor for PrecomputationManager.PrecomputationState(0);
}

uint64_t sub_100050FCC()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100051090()
{
  unint64_t result = qword_100698798;
  if (!qword_100698798)
  {
    sub_10003137C(&qword_100698790);
    sub_10005113C();
    sub_100051188(&qword_1006987A8, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698798);
  }
  return result;
}

unint64_t sub_10005113C()
{
  unint64_t result = qword_1006987A0;
  if (!qword_1006987A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006987A0);
  }
  return result;
}

uint64_t sub_100051188(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000511D4()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_100048E24(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10003F060;
  uint64_t v3 = sub_100051B14();
  return v4(v3);
}

uint64_t sub_10005126C()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_100048E24(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10003F060;
  uint64_t v3 = sub_100051B14();
  return v4(v3);
}

uint64_t sub_100051304()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_100048E24(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10003F060;
  uint64_t v3 = sub_100051B14();
  return v4(v3);
}

uint64_t sub_10005139C()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_100048E24(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10003F060;
  uint64_t v3 = sub_100051DA4();
  return v4(v3);
}

uint64_t sub_100051438()
{
  _Block_release(*(const void **)(v0 + 24));
  uint64_t v1 = sub_100051EB8();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100051478()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003D5FC;
  uint64_t v3 = sub_100051DA4();
  return v4(v3);
}

uint64_t sub_100051514()
{
  _Block_release(*(const void **)(v0 + 16));

  uint64_t v1 = sub_100051EC8();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10005154C()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003F060;
  uint64_t v3 = sub_100051B14();
  return v4(v3);
}

uint64_t sub_1000515E0()
{
  _Block_release(*(const void **)(v0 + 24));
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100051628()
{
  sub_100048E64();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100048E24(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003F060;
  sub_100048EF4();
  __asm { BR              X4 }
}

uint64_t sub_1000516DC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10005171C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ASAnalyticsEvent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100051778(uint64_t a1)
{
  return sub_100049FEC(a1, v1);
}

uint64_t sub_100051780()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000517B8()
{
  sub_10003F0F4();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100048E24(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_10003D5FC;
  return sub_10004BA40(v2, v3);
}

uint64_t *sub_100051850(uint64_t *a1)
{
  return a1;
}

uint64_t sub_100051880(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002E768(a3);
  sub_100051B88();
  uint64_t v4 = sub_100031880();
  v5(v4);
  return a2;
}

uint64_t sub_1000518D8(uint64_t a1, uint64_t *a2)
{
  sub_10002E768(a2);
  sub_100051B88();
  sub_10003F240();
  v3();
  return a1;
}

unint64_t sub_100051928()
{
  unint64_t result = qword_100698868;
  if (!qword_100698868)
  {
    sub_10003137C(&qword_100698790);
    sub_1000519D4();
    sub_100051188(&qword_100698878, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698868);
  }
  return result;
}

unint64_t sub_1000519D4()
{
  unint64_t result = qword_100698870;
  if (!qword_100698870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698870);
  }
  return result;
}

uint64_t sub_100051A38(uint64_t a1, uint64_t a2)
{
  return _swift_task_switch(a1, a2, 0);
}

void *sub_100051A40@<X0>(uint64_t a1@<X8>)
{
  return memcpy(v2, (const void *)(v1 + 104 * a1 + 32), 0x68uLL);
}

void sub_100051A64(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

BOOL sub_100051A84(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100051AA0()
{
  return swift_slowAlloc();
}

BOOL sub_100051AB8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL sub_100051AD4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100051AF0()
{
  return sub_1000508B8(v0);
}

uint64_t sub_100051B14()
{
  return v0;
}

uint64_t sub_100051B2C()
{
  return swift_slowAlloc();
}

void sub_100051B48(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_100051B68(void *a1, uint64_t a2, os_log_type_t a3)
{
  _os_log_impl(a1, v3, a3, v4, v5, 2u);
}

uint64_t sub_100051B98@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(void *)(v4 + 120) = a1;
  *(void *)(v4 + 128) = v5;
  *(unsigned char *)(v4 + 136) = a2 & 1;
  *(unsigned char *)(v4 + 137) = BYTE1(a2) & 1;
  *(unsigned char *)(v4 + 138) = BYTE2(a2) & 1;
  *(void *)(v4 + 144) = v3;
  *(void *)(v4 + 152) = v2;
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_100051BCC()
{
  return swift_arrayDestroy();
}

_WORD *sub_100051BE8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_100051C40()
{
  return sub_100050790(v0);
}

uint64_t sub_100051C60()
{
  return sub_100050790(v0);
}

void sub_100051C8C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

_WORD *sub_100051CAC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_100051CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100032B48(v10, v9, &a9);
}

uint64_t sub_100051CE8()
{
  return v0;
}

uint64_t sub_100051CF8()
{
  return v0;
}

uint64_t sub_100051D18()
{
  return v0;
}

uint64_t sub_100051D24()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100051D40()
{
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[3];
  v0[21] = v0[2];
  v0[22] = v4;
  v0[23] = *(void *)(v3 + v2);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100051D68(uint64_t a1)
{
  *(void *)(v1 + 4) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100051D80(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100051D98(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100051DA4()
{
  return v0;
}

uint64_t sub_100051DC0()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_100051DE8()
{
  return v0;
}

uint64_t sub_100051E04()
{
  uint64_t result = v1;
  *(void *)(v2 - 208) = *(void *)(v0 + 8);
  *(void *)(v2 - 200) = v0 + 8;
  return result;
}

uint64_t sub_100051E3C()
{
  return swift_beginAccess();
}

uint64_t sub_100051E70()
{
  return v0 + 8;
}

BOOL sub_100051E9C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100051EB8()
{
  return v0;
}

uint64_t sub_100051EC8()
{
  return v0;
}

uint64_t sub_100051ED8(void *a1)
{
  return sub_100049350(v1, a1);
}

uint64_t sub_100051EF4()
{
  return v0;
}

uint64_t sub_100051F04(uint64_t result)
{
  *(void *)(v1 + 232) = result;
  return result;
}

uint64_t sub_100051F10(uint64_t result)
{
  *(void *)(v1 + 240) = result;
  return result;
}

uint64_t sub_100051F1C()
{
  return v0;
}

void *sub_100051F30()
{
  uint64_t v3 = (const void *)(*(void *)(v1 + 128) + 32);
  return memcpy(v0, v3, 0x68uLL);
}

uint64_t sub_100051F5C(float a1)
{
  *uint64_t v1 = a1;
  return swift_bridgeObjectRetain();
}

void sub_100051F7C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

uint64_t sub_100051F9C()
{
  return swift_beginAccess();
}

uint64_t sub_100051FB4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_100051FC8()
{
  return sub_100050858(v0);
}

uint64_t sub_100051FEC()
{
  return v0;
}

uint64_t sub_100052000()
{
  return v0;
}

double sub_100052014@<D0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 80) = a1;
  double result = 0.0;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  return result;
}

uint64_t sub_100052028()
{
  return v0;
}

uint64_t sub_100052034()
{
  uint64_t result = v0[16];
  v0[2] = v0[15];
  v0[3] = result;
  v0[4] = 0;
  return result;
}

uint64_t sub_100052048()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void *sub_100052068(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v57 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v57 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (void *)((char *)v4 + v13);
    uint64_t v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (void *)((char *)v4 + v14);
    uint64_t v19 = (void *)((char *)a2 + v14);
    uint64_t v61 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v61;
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = (void *)((char *)v4 + v20);
    uint64_t v23 = (void *)((char *)a2 + v20);
    uint64_t v59 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v59;
    uint64_t v24 = (void *)((char *)v4 + v21);
    uint64_t v25 = (void *)((char *)a2 + v21);
    uint64_t v60 = v25[1];
    void *v24 = *v25;
    v24[1] = v60;
    uint64_t v26 = a3[10];
    uint64_t v27 = a3[11];
    uint64_t v28 = (void *)((char *)v4 + v26);
    char v29 = (void *)((char *)a2 + v26);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = (void *)((char *)v4 + v27);
    long long v32 = (void *)((char *)a2 + v27);
    uint64_t v33 = v32[1];
    *uint64_t v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = a3[12];
    uint64_t v35 = a3[13];
    os_log_type_t v36 = (void *)((char *)v4 + v34);
    uint64_t v37 = (void *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    *os_log_type_t v36 = *v37;
    v36[1] = v38;
    *(_DWORD *)((char *)v4 + v35) = *(_DWORD *)((char *)a2 + v35);
    uint64_t v39 = a3[15];
    *(void *)((char *)v4 + a3[14]) = *(void *)((char *)a2 + a3[14]);
    *(void *)((char *)v4 + v39) = *(void *)((char *)a2 + v39);
    uint64_t v40 = a3[17];
    *(_DWORD *)((char *)v4 + a3[16]) = *(_DWORD *)((char *)a2 + a3[16]);
    uint64_t v41 = (void *)((char *)v4 + v40);
    uint64_t v42 = (void *)((char *)a2 + v40);
    uint64_t v43 = v42[1];
    void *v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = a3[18];
    uint64_t v45 = a3[19];
    uint64_t v46 = (void *)((char *)v4 + v44);
    uint64_t v47 = (void *)((char *)a2 + v44);
    uint64_t v48 = v47[1];
    *uint64_t v46 = *v47;
    v46[1] = v48;
    *((unsigned char *)v4 + v45) = *((unsigned char *)a2 + v45);
    uint64_t v49 = a3[20];
    uint64_t v50 = a3[21];
    uint64_t v51 = (void *)((char *)v4 + v49);
    uint64_t v52 = (void *)((char *)a2 + v49);
    uint64_t v53 = v52[1];
    void *v51 = *v52;
    v51[1] = v53;
    int v54 = (void *)((char *)v4 + v50);
    uint64_t v55 = (void *)((char *)a2 + v50);
    uint64_t v56 = v55[1];
    *int v54 = *v55;
    v54[1] = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000522D0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100052418(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  uint64_t v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)((char *)a1 + v13);
  uint64_t v18 = (void *)((char *)a2 + v13);
  uint64_t v59 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v59;
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (void *)((char *)a1 + v19);
  uint64_t v22 = (void *)((char *)a2 + v19);
  uint64_t v57 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v57;
  uint64_t v23 = (void *)((char *)a1 + v20);
  uint64_t v24 = (void *)((char *)a2 + v20);
  uint64_t v58 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v58;
  uint64_t v25 = a3[10];
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)((char *)a1 + v25);
  uint64_t v28 = (void *)((char *)a2 + v25);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = (void *)((char *)a1 + v26);
  uint64_t v31 = (void *)((char *)a2 + v26);
  uint64_t v32 = v31[1];
  void *v30 = *v31;
  v30[1] = v32;
  uint64_t v33 = a3[12];
  uint64_t v34 = a3[13];
  uint64_t v35 = (void *)((char *)a1 + v33);
  os_log_type_t v36 = (void *)((char *)a2 + v33);
  uint64_t v37 = v36[1];
  *uint64_t v35 = *v36;
  v35[1] = v37;
  *(_DWORD *)((char *)a1 + v34) = *(_DWORD *)((char *)a2 + v34);
  uint64_t v38 = a3[15];
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  *(void *)((char *)a1 + v38) = *(void *)((char *)a2 + v38);
  uint64_t v39 = a3[17];
  *(_DWORD *)((char *)a1 + a3[16]) = *(_DWORD *)((char *)a2 + a3[16]);
  uint64_t v40 = (void *)((char *)a1 + v39);
  uint64_t v41 = (void *)((char *)a2 + v39);
  uint64_t v42 = v41[1];
  *uint64_t v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = a3[18];
  uint64_t v44 = a3[19];
  uint64_t v45 = (void *)((char *)a1 + v43);
  uint64_t v46 = (void *)((char *)a2 + v43);
  uint64_t v47 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v47;
  *((unsigned char *)a1 + v44) = *((unsigned char *)a2 + v44);
  uint64_t v48 = a3[20];
  uint64_t v49 = a3[21];
  uint64_t v50 = (void *)((char *)a1 + v48);
  uint64_t v51 = (void *)((char *)a2 + v48);
  uint64_t v52 = v51[1];
  void *v50 = *v51;
  v50[1] = v52;
  uint64_t v53 = (void *)((char *)a1 + v49);
  int v54 = (void *)((char *)a2 + v49);
  uint64_t v55 = v54[1];
  void *v53 = *v54;
  v53[1] = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100052630(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  void *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[10];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  void *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = a3[12];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)((char *)a1 + a3[13]) = *(_DWORD *)((char *)a2 + a3[13]);
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)((char *)a1 + a3[16]) = *(_DWORD *)((char *)a2 + a3[16]);
  uint64_t v31 = a3[17];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  void *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[18];
  uint64_t v35 = (void *)((char *)a1 + v34);
  os_log_type_t v36 = (void *)((char *)a2 + v34);
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  uint64_t v37 = a3[20];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[21];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  void *v41 = *v42;
  v41[1] = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100052914(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  uint64_t v13 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_DWORD *)((char *)a1 + v13) = *(_DWORD *)((char *)a2 + v13);
  uint64_t v14 = a3[15];
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v15 = a3[17];
  *(_DWORD *)((char *)a1 + a3[16]) = *(_DWORD *)((char *)a2 + a3[16]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  uint64_t v16 = a3[19];
  *(_OWORD *)((char *)a1 + a3[18]) = *(_OWORD *)((char *)a2 + a3[18]);
  *((unsigned char *)a1 + v16) = *((unsigned char *)a2 + v16);
  uint64_t v17 = a3[21];
  *(_OWORD *)((char *)a1 + a3[20]) = *(_OWORD *)((char *)a2 + a3[20]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  return a1;
}

void *sub_100052A40(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  void *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[8];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[9];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *uint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[10];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[11];
  uint64_t v37 = (void *)((char *)a1 + v36);
  uint64_t v38 = (void *)((char *)a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  void *v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[12];
  uint64_t v42 = (void *)((char *)a1 + v41);
  uint64_t v43 = (void *)((char *)a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  void *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[14];
  *(_DWORD *)((char *)a1 + a3[13]) = *(_DWORD *)((char *)a2 + a3[13]);
  *(void *)((char *)a1 + v46) = *(void *)((char *)a2 + v46);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[17];
  *(_DWORD *)((char *)a1 + a3[16]) = *(_DWORD *)((char *)a2 + a3[16]);
  uint64_t v48 = (void *)((char *)a1 + v47);
  uint64_t v49 = (void *)((char *)a2 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  *uint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = a3[18];
  uint64_t v53 = (void *)((char *)a1 + v52);
  int v54 = (void *)((char *)a2 + v52);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  void *v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[20];
  *((unsigned char *)a1 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  uint64_t v58 = (void *)((char *)a1 + v57);
  uint64_t v59 = (void *)((char *)a2 + v57);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  *uint64_t v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = a3[21];
  uint64_t v63 = (void *)((char *)a1 + v62);
  unint64_t v64 = (void *)((char *)a2 + v62);
  uint64_t v66 = *v64;
  uint64_t v65 = v64[1];
  *uint64_t v63 = v66;
  v63[1] = v65;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100052C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100052C5C);
}

uint64_t sub_100052C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_1000312BC(v9, a2, v8);
  }
}

uint64_t sub_100052CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100052CF8);
}

uint64_t sub_100052CF8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return sub_10003349C(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AssessmentPayload()
{
  uint64_t result = qword_1006988D8;
  if (!qword_1006988D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100052DC0()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100052EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_100057638((_OWORD *)a1, v6);
    sub_100056EC0(v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000518D8(a1, &qword_100697EE8);
    sub_1000565B8(a2, a3, v6);
    swift_bridgeObjectRelease();
    return sub_1000518D8((uint64_t)v6, &qword_100697EE8);
  }
}

uint64_t sub_100052F34(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  uint64_t v8 = sub_10002E768(&qword_100697EE0);
  __chkstk_darwin(v8 - 8);
  sub_100046338();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for Date();
  sub_100045FF4();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100046338();
  uint64_t v18 = v17 - v16;
  if (sub_1000312BC(a1, 1, v12) == 1)
  {
    sub_1000518D8(a1, &qword_100697EE0);
    sub_1000566F0();
    swift_bridgeObjectRelease();
    return sub_1000518D8(v11, &qword_100697EE0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v18, a1, v12);
    sub_100056F0C(v18, a2, a3, a4);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10005309C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000311A4((long long *)a1, (uint64_t)v6);
    sub_100056FF0(v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000518D8(a1, &qword_100698998);
    sub_100056864(a2, a3, (uint64_t)v6);
    swift_bridgeObjectRelease();
    return sub_1000518D8((uint64_t)v6, &qword_100698998);
  }
}

uint64_t sub_100053130(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10002E768(&qword_1006989C8);
  __chkstk_darwin(v5 - 8);
  sub_100046338();
  uint64_t v8 = v7 - v6;
  type metadata accessor for ServerJSONFetchRetryState();
  sub_100051B88();
  __chkstk_darwin(v9);
  sub_10005873C();
  if (sub_1000312BC(a1, 1, v10) == 1)
  {
    sub_1000518D8(a1, &qword_1006989C8);
    sub_100056A98(a2, v8);
    type metadata accessor for UUID();
    sub_100051B88();
    sub_10003F240();
    v11();
    return sub_1000518D8(v8, &qword_1006989C8);
  }
  else
  {
    sub_100057DBC(a1, v2);
    sub_10005703C(v2, a2);
    type metadata accessor for UUID();
    sub_100051B88();
    return (*(uint64_t (**)(uint64_t))(v13 + 8))(a2);
  }
}

uint64_t sub_100053294(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    sub_100057638((_OWORD *)a1, v4);
    sub_100057134(v4, a2);
    return sub_100058074(a2);
  }
  else
  {
    sub_1000518D8(a1, &qword_100697EE8);
    sub_100056D90(a2, v4);
    sub_100058074(a2);
    return sub_1000518D8((uint64_t)v4, &qword_100697EE8);
  }
}

unint64_t sub_10005331C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002E768((uint64_t *)&unk_100699210);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  sub_100058148(a1, v54);
  uint64_t v43 = v54[0];
  int64_t v3 = v56;
  uint64_t v38 = v55;
  unint64_t v4 = v57;
  int64_t v40 = (unint64_t)(v55 + 64) >> 6;
  uint64_t v41 = v54[1];
  uint64_t v39 = (uint64_t)(v2 + 8);
  unint64_t result = swift_bridgeObjectRetain();
  uint64_t v42 = (char *)&type metadata for Any + 8;
  if (!v4) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v13 = (v4 - 1) & v4;
  unint64_t v14 = __clz(__rbit64(v4)) | (v3 << 6);
  for (i = v3; ; unint64_t v14 = __clz(__rbit64(v17)) + (i << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(v43 + 48) + 16 * v14);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_1000333E4(*(void *)(v43 + 56) + 32 * v14, (uint64_t)v53);
    v52[0] = v20;
    v52[1] = v21;
    sub_1000333E4((uint64_t)v53, (uint64_t)v46);
    swift_bridgeObjectRetain_n();
    sub_1000518D8((uint64_t)v52, &qword_1006989F8);
    sub_10002E768(&qword_100698958);
    if (!swift_dynamicCast())
    {
      uint64_t v45 = 0;
      memset(v44, 0, sizeof(v44));
      swift_bridgeObjectRelease();
      uint64_t v30 = sub_1000518D8((uint64_t)v44, &qword_100698998);
      sub_1000587B0(v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, (uint64_t)v42, v43);
      sub_1000581E4();
      swift_release();
      return 0;
    }
    sub_1000311A4(v44, (uint64_t)v47);
    sub_1000311A4(v47, (uint64_t)v48);
    *(void *)&long long v49 = v20;
    *((void *)&v49 + 1) = v21;
    sub_1000311A4(v48, (uint64_t)v50);
    long long v22 = v49;
    sub_1000311A4(v50, (uint64_t)v51);
    sub_1000311A4(v51, (uint64_t)&v49);
    unint64_t result = sub_100055F1C(v22, *((uint64_t *)&v22 + 1));
    unint64_t v23 = result;
    if (v24)
    {
      uint64_t v25 = (long long *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v25 = v22;
      uint64_t v26 = v2[7] + 40 * v23;
      sub_10002EB9C(v26);
      unint64_t result = sub_1000311A4(&v49, v26);
      goto LABEL_28;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)(v39 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v22;
    unint64_t result = sub_1000311A4(&v49, v2[7] + 40 * result);
    uint64_t v27 = v2[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_34;
    }
    v2[2] = v29;
LABEL_28:
    int64_t v3 = i;
    unint64_t v4 = v13;
    if (v13) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v16 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_35;
    }
    if (v16 >= v40) {
      goto LABEL_31;
    }
    unint64_t v17 = *(void *)(v41 + 8 * v16);
    int64_t i = v3 + 1;
    if (!v17)
    {
      int64_t i = v3 + 2;
      if (v3 + 2 >= v40) {
        goto LABEL_31;
      }
      unint64_t v17 = *(void *)(v41 + 8 * i);
      if (!v17)
      {
        int64_t i = v3 + 3;
        if (v3 + 3 >= v40) {
          goto LABEL_31;
        }
        unint64_t v17 = *(void *)(v41 + 8 * i);
        if (!v17)
        {
          int64_t i = v3 + 4;
          if (v3 + 4 >= v40) {
            goto LABEL_31;
          }
          unint64_t v17 = *(void *)(v41 + 8 * i);
          if (!v17)
          {
            int64_t i = v3 + 5;
            if (v3 + 5 >= v40) {
              goto LABEL_31;
            }
            unint64_t v17 = *(void *)(v41 + 8 * i);
            if (!v17)
            {
              int64_t v18 = v3 + 6;
              while (v18 < v40)
              {
                unint64_t v17 = *(void *)(v41 + 8 * v18++);
                if (v17)
                {
                  int64_t i = v18 - 1;
                  goto LABEL_21;
                }
              }
LABEL_31:
              sub_1000587B0(result, v6, v7, v8, v9, v10, v11, v12, v38, v39, v40, v41, (uint64_t)v42, v43);
              sub_1000581E4();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v13 = (v17 - 1) & v17;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

unint64_t sub_1000536B0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002E768((uint64_t *)&unk_100699210);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  sub_100058148(a1, v34);
  uint64_t v3 = v34[0];
  int64_t v4 = v34[3];
  int64_t v22 = (unint64_t)(v34[2] + 64) >> 6;
  uint64_t v23 = v34[1];
  unint64_t v5 = v34[4];
  unint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v7 = (v5 - 1) & v5;
  unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
  for (i = v4; ; unint64_t v8 = __clz(__rbit64(v11)) + (i << 6))
  {
    sub_100058018(*(void *)(v3 + 48) + 40 * v8, (uint64_t)__src);
    sub_1000333E4(*(void *)(v3 + 56) + 32 * v8, (uint64_t)&__src[40]);
    memcpy(__dst, __src, sizeof(__dst));
    sub_100058018((uint64_t)__dst, (uint64_t)v27);
    if (!swift_dynamicCast())
    {
      v24[0] = 0uLL;
      sub_1000518D8((uint64_t)__dst, &qword_1006989E8);
      swift_bridgeObjectRelease();
LABEL_33:
      sub_1000581E4();
      swift_release();
      return 0;
    }
    long long v13 = v24[0];
    sub_1000333E4((uint64_t)&__dst[40], (uint64_t)v26);
    sub_1000518D8((uint64_t)__dst, &qword_1006989E8);
    sub_10002E768(&qword_100698958);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v25 = 0;
      memset(v24, 0, sizeof(v24));
      swift_bridgeObjectRelease();
      sub_1000518D8((uint64_t)v24, &qword_100698998);
      goto LABEL_33;
    }
    sub_1000311A4(v24, (uint64_t)v27);
    sub_1000311A4(v27, (uint64_t)v28);
    long long v29 = v13;
    sub_1000311A4(v28, (uint64_t)v30);
    long long v14 = v29;
    sub_1000311A4(v30, (uint64_t)v31);
    sub_1000311A4(v31, (uint64_t)&v29);
    unint64_t result = sub_100055F1C(v14, *((uint64_t *)&v14 + 1));
    unint64_t v15 = result;
    if (v16)
    {
      unint64_t v17 = (long long *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *unint64_t v17 = v14;
      uint64_t v18 = v2[7] + 40 * v15;
      sub_10002EB9C(v18);
      unint64_t result = sub_1000311A4(&v29, v18);
      goto LABEL_29;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v14;
    unint64_t result = sub_1000311A4(&v29, v2[7] + 40 * result);
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_37;
    }
    v2[2] = v21;
LABEL_29:
    int64_t v4 = i;
    unint64_t v5 = v7;
    if (v7) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_38;
    }
    if (v10 >= v22) {
      goto LABEL_34;
    }
    unint64_t v11 = *(void *)(v23 + 8 * v10);
    int64_t i = v4 + 1;
    if (!v11)
    {
      int64_t i = v4 + 2;
      if (v4 + 2 >= v22) {
        goto LABEL_34;
      }
      unint64_t v11 = *(void *)(v23 + 8 * i);
      if (!v11)
      {
        int64_t i = v4 + 3;
        if (v4 + 3 >= v22) {
          goto LABEL_34;
        }
        unint64_t v11 = *(void *)(v23 + 8 * i);
        if (!v11)
        {
          int64_t i = v4 + 4;
          if (v4 + 4 >= v22) {
            goto LABEL_34;
          }
          unint64_t v11 = *(void *)(v23 + 8 * i);
          if (!v11)
          {
            int64_t i = v4 + 5;
            if (v4 + 5 >= v22) {
              goto LABEL_34;
            }
            unint64_t v11 = *(void *)(v23 + 8 * i);
            if (!v11)
            {
              int64_t v12 = v4 + 6;
              while (v12 < v22)
              {
                unint64_t v11 = *(void *)(v23 + 8 * v12++);
                if (v11)
                {
                  int64_t i = v12 - 1;
                  goto LABEL_21;
                }
              }
LABEL_34:
              sub_1000581E4();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v7 = (v11 - 1) & v11;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100053AC0()
{
  sub_10002E768(&qword_1006989B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10058E180;
  *(void *)(inited + 32) = 0x776F6C666B726F77;
  *(void *)(inited + 40) = 0xEA00000000004449;
  uint64_t v2 = v0[1];
  *(void *)(inited + 48) = *v0;
  *(void *)(inited + 56) = v2;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x4164657461657263;
  *(void *)(inited + 88) = 0xE900000000000074;
  uint64_t v3 = (int *)type metadata accessor for AssessmentPayload();
  int64_t v4 = (char *)v0 + v3[5];
  uint64_t v5 = type metadata accessor for Date();
  *(void *)(inited + 120) = v5;
  uint64_t v6 = sub_10003EB78((uint64_t *)(inited + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v5 - 8) + 16))(v6, v4, v5);
  *(void *)(inited + 128) = 0x656D737365737361;
  *(void *)(inited + 136) = 0xEA0000000000746ELL;
  uint64_t v7 = (void *)((char *)v0 + v3[6]);
  uint64_t v38 = v7[1];
  *(void *)(inited + 144) = *v7;
  *(void *)(inited + 152) = v38;
  *(void *)(inited + 168) = &type metadata for String;
  strcpy((char *)(inited + 176), "trainingData");
  *(unsigned char *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  unint64_t v8 = (void *)((char *)v0 + v3[7]);
  uint64_t v9 = v8[1];
  *(void *)(inited + 192) = *v8;
  *(void *)(inited + 200) = v9;
  *(void *)(inited + 216) = &type metadata for String;
  strcpy((char *)(inited + 224), "assessmentGUID");
  *(unsigned char *)(inited + 239) = -18;
  int64_t v10 = (void *)((char *)v0 + v3[8]);
  uint64_t v11 = v10[1];
  *(void *)(inited + 240) = *v10;
  *(void *)(inited + 248) = v11;
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 272) = 0xD000000000000013;
  *(void *)(inited + 280) = 0x8000000100568F10;
  int64_t v12 = (void *)((char *)v0 + v3[9]);
  uint64_t v13 = v12[1];
  *(void *)(inited + 288) = *v12;
  *(void *)(inited + 296) = v13;
  *(void *)(inited + 312) = &type metadata for String;
  strcpy((char *)(inited + 320), "trainingGUID");
  *(unsigned char *)(inited + 333) = 0;
  *(_WORD *)(inited + 334) = -5120;
  long long v14 = (void *)((char *)v0 + v3[10]);
  uint64_t v15 = v14[1];
  *(void *)(inited + 336) = *v14;
  *(void *)(inited + 344) = v15;
  *(void *)(inited + 360) = &type metadata for String;
  *(void *)(inited + 368) = 0xD000000000000011;
  *(void *)(inited + 376) = 0x8000000100568F40;
  char v16 = (void *)((char *)v0 + v3[11]);
  uint64_t v17 = v16[1];
  *(void *)(inited + 384) = *v16;
  *(void *)(inited + 392) = v17;
  *(void *)(inited + 408) = &type metadata for String;
  *(void *)(inited + 416) = 0xD000000000000010;
  *(void *)(inited + 424) = 0x8000000100568F60;
  uint64_t v18 = (void *)((char *)v0 + v3[12]);
  uint64_t v19 = v18[1];
  *(void *)(inited + 432) = *v18;
  *(void *)(inited + 440) = v19;
  *(void *)(inited + 456) = &type metadata for String;
  *(void *)(inited + 464) = 0x6E49747365676964;
  *(void *)(inited + 472) = 0xEB00000000786564;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Class isa = Int32._bridgeToObjectiveC()().super.super.isa;
  uint64_t v21 = sub_1000362B0(0, (unint64_t *)&qword_100697EF8);
  *(void *)(inited + 480) = isa;
  *(void *)(inited + 504) = v21;
  *(void *)(inited + 512) = 0x73676E69646E6962;
  *(void *)(inited + 520) = 0xE800000000000000;
  uint64_t v22 = *(void *)((char *)v0 + v3[14]);
  *(void *)(inited + 552) = sub_10002E768(&qword_1006980E0);
  *(void *)(inited + 528) = v22;
  *(void *)(inited + 560) = 0xD000000000000011;
  *(void *)(inited + 568) = 0x8000000100568F90;
  uint64_t v23 = *(void *)((char *)v0 + v3[15]);
  *(void *)(inited + 600) = sub_10002E768(&qword_1006982F8);
  *(void *)(inited + 576) = v23;
  *(void *)(inited + 608) = 0x5468736572666572;
  *(void *)(inited + 616) = 0xEA00000000006C74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24.super.super.Class isa = Int32._bridgeToObjectiveC()().super.super.isa;
  *(void *)(inited + 648) = v21;
  *(NSNumber *)(inited + 624) = v24;
  strcpy((char *)(inited + 656), "encryptedTSID");
  *(_WORD *)(inited + 670) = -4864;
  uint64_t v25 = (void *)((char *)v0 + v3[17]);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *(void *)(inited + 696) = &type metadata for String;
  *(void *)(inited + 672) = v27;
  *(void *)(inited + 680) = v26;
  strcpy((char *)(inited + 704), "encryptedAGUID");
  *(unsigned char *)(inited + 719) = -18;
  BOOL v28 = (void *)((char *)v0 + v3[18]);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  *(void *)(inited + 744) = &type metadata for String;
  *(void *)(inited + 720) = v29;
  *(void *)(inited + 728) = v30;
  strcpy((char *)(inited + 752), "shouldSendOTD");
  *(_WORD *)(inited + 766) = -4864;
  LOBYTE(v28) = *((unsigned char *)v0 + v3[19]);
  *(void *)(inited + 792) = &type metadata for Bool;
  *(unsigned char *)(inited + 768) = (_BYTE)v28;
  *(void *)(inited + 800) = 0x49656C69666F7270;
  *(void *)(inited + 808) = 0xE900000000000044;
  uint64_t v31 = (void *)((char *)v0 + v3[21]);
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  *(void *)(inited + 840) = &type metadata for String;
  *(void *)(inited + 816) = v32;
  *(void *)(inited + 824) = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  uint64_t v40 = result;
  uint64_t v35 = (void *)((char *)v0 + v3[20]);
  uint64_t v36 = v35[1];
  if (v36)
  {
    uint64_t v37 = *v35;
    v39[3] = &type metadata for String;
    v39[0] = v37;
    v39[1] = v36;
    swift_bridgeObjectRetain();
    sub_100052EA0((uint64_t)v39, 0xD000000000000012, 0x8000000100568FE0);
    return v40;
  }
  return result;
}

void sub_100053FE4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 workflowID];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *a2 = v5;
  a2[1] = v7;
  id v8 = [a1 createdAt];
  uint64_t v9 = (int *)type metadata accessor for AssessmentPayload();
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v10 = [a1 assessment];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000585A0();
  sub_1000585B8(v9[6]);
  id v11 = [a1 trainingData];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000585A0();
  sub_1000585B8(v9[7]);
  id v12 = [a1 assessmentGUID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000585A0();
  sub_1000585B8(v9[8]);
  id v13 = [a1 assessmentGUIDSeeds];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000585A0();
  sub_1000585B8(v9[9]);
  id v14 = [a1 trainingGUID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000585A0();
  sub_1000585B8(v9[10]);
  id v15 = [a1 trainingGUIDSeeds];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000585A0();
  sub_1000585B8(v9[11]);
  id v16 = [a1 trainingSignalID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000585A0();
  sub_1000585B8(v9[12]);
  id v17 = [a1 digestIndex];
  uint64_t v18 = (uint64_t)[v17 integerValue];

  if (v18 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v18 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    return;
  }
  *(_DWORD *)((char *)a2 + v9[13]) = v18;
  id v19 = [a1 bindingsRecords];
  uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v21 = sub_1000536B0(v20);
  swift_bridgeObjectRelease();
  if (!v21)
  {
    sub_10002E768(&qword_100698958);
    unint64_t v21 = Dictionary.init(dictionaryLiteral:)();
  }
  *(uint64_t *)((char *)a2 + v9[14]) = v21;
  id v22 = [a1 bindingsToCompare];
  uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  NSNumber v24 = sub_1000543EC(v23);
  swift_bridgeObjectRelease();
  uint64_t v25 = &off_10065F980;
  if (v24) {
    uint64_t v25 = (_UNKNOWN **)v24;
  }
  *(uint64_t *)((char *)a2 + v9[15]) = (uint64_t)v25;
  id v26 = [a1 refreshTTL];
  if (v26)
  {
    uint64_t v27 = v26;
    unsigned int v28 = [v26 intValue];
  }
  else
  {
    unsigned int v28 = 0;
  }
  *(_DWORD *)((char *)a2 + v9[16]) = v28;
  id v29 = [a1 encryptedTSID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000585A0();
  sub_1000585B8(v9[17]);
  id v30 = [a1 encryptedAGUID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000585A0();
  sub_1000585B8(v9[18]);
  *((unsigned char *)a2 + v9[19]) = [a1 shouldSendOTD];
  uint64_t v31 = sub_100058180(a1);
  sub_100058670(v31, v32, v9[20]);
  id v33 = [a1 profileID];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000585A0();

  sub_1000585B8(v9[21]);
}

void *sub_1000543EC(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  id v12 = _swiftEmptyArrayStorage;
  sub_1000A52D8(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_1000333E4(i, (uint64_t)v11);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000A52D8(0, v3[2] + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_1000A52D8((char *)(v5 > 1), v6 + 1, 1);
        uint64_t v3 = v12;
      }
      v3[2] = v6 + 1;
      uint64_t v7 = &v3[2 * v6];
      void v7[4] = v9;
      v7[5] = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_100054534()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12) {
    return 18;
  }
  else {
    return v0;
  }
}

unint64_t sub_10005458C(char a1)
{
  unint64_t result = 0x776F6C666B726F77;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4164657461657263;
      break;
    case 2:
      unint64_t result = 0x656D737365737361;
      break;
    case 3:
      unint64_t result = 0x676E696E69617274;
      break;
    case 4:
      unint64_t result = 0x656D737365737361;
      break;
    case 5:
      unint64_t result = 0xD000000000000013;
      break;
    case 6:
      unint64_t result = 0x676E696E69617274;
      break;
    case 7:
    case 11:
      unint64_t result = 0xD000000000000011;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0x6E49747365676964;
      break;
    case 10:
      unint64_t result = 0x73676E69646E6962;
      break;
    case 12:
      unint64_t result = 0x5468736572666572;
      break;
    case 13:
    case 14:
      unint64_t result = 0x6574707972636E65;
      break;
    case 15:
      unint64_t result = 0x4F646E6553657375;
      break;
    case 16:
      unint64_t result = 0xD000000000000012;
      break;
    case 17:
      unint64_t result = 0x49656C69666F7270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000547F0(char *a1, char *a2)
{
  return sub_100036660(*a1, *a2);
}

Swift::Int sub_1000547FC()
{
  return sub_1000A2478(*v0);
}

uint64_t sub_100054804(uint64_t a1)
{
  return sub_1000A2678(a1, *v1);
}

Swift::Int sub_10005480C(uint64_t a1)
{
  return sub_1000A2830(a1, *v1);
}

uint64_t sub_100054814@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100054534();
  *a1 = result;
  return result;
}

unint64_t sub_100054844@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10005458C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100054870()
{
  return sub_1000547EC(*v0);
}

uint64_t sub_100054878@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100054588();
  *a1 = result;
  return result;
}

void sub_1000548A0(unsigned char *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_1000548AC(uint64_t a1)
{
  unint64_t v2 = sub_100055C44();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000548E8(uint64_t a1)
{
  unint64_t v2 = sub_100055C44();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100054924@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Date();
  sub_100045FF4();
  uint64_t v59 = v6;
  uint64_t v60 = v5;
  __chkstk_darwin(v5);
  sub_100046338();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_10002E768(&qword_100698980);
  sub_100045FF4();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100046338();
  uint64_t v16 = v15 - v14;
  uint64_t v63 = (int *)type metadata accessor for AssessmentPayload();
  sub_100051B88();
  __chkstk_darwin(v17);
  sub_100046338();
  uint64_t v62 = (uint64_t *)(v19 - v18);
  uint64_t v61 = (uint64_t)a1;
  sub_10002EAE0(a1, a1[3]);
  sub_100055C44();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    unsigned int v20 = 0;
  }
  else
  {
    *uint64_t v62 = KeyedDecodingContainer.decode(_:forKey:)();
    v62[1] = v23;
    LOBYTE(v65) = 1;
    sub_100055CDC(&qword_100698878, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))((char *)v62 + v63[5], v9, v60);
    LOBYTE(v65) = 2;
    uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_100058670(v24, v25, v63[6]);
    uint64_t v26 = sub_100058578(3);
    sub_100058670(v26, v27, v63[7]);
    uint64_t v28 = sub_100058578(4);
    sub_100058670(v28, v29, v63[8]);
    uint64_t v30 = sub_100058578(5);
    sub_100058670(v30, v31, v63[9]);
    uint64_t v32 = sub_100058578(6);
    sub_100058670(v32, v33, v63[10]);
    uint64_t v34 = sub_100058578(7);
    sub_100058670(v34, v35, v63[11]);
    uint64_t v36 = sub_100058578(8);
    sub_100058670(v36, v37, v63[12]);
    LOBYTE(v65) = 9;
    *(_DWORD *)((char *)v62 + v63[13]) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v64) = 10;
    sub_100055D24();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v38 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v64 = 0;
    id v40 = [v38 JSONObjectWithData:isa options:0 error:&v64];

    id v41 = v64;
    if (v40)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      *(uint64_t *)((char *)v62 + v63[14]) = sub_1000551EC((uint64_t)&v65);
      sub_10002E768(&qword_1006982F8);
      sub_100055D70(&qword_100698300, &qword_1006982F8);
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      *(uint64_t *)((char *)v62 + v63[15]) = (uint64_t)v64;
      sub_100058610(12);
      *(_DWORD *)((char *)v62 + v63[16]) = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v43 = sub_100058628(13);
      uint64_t v44 = (uint64_t *)((char *)v62 + v63[17]);
      uint64_t *v44 = v43;
      v44[1] = v45;
      uint64_t v46 = sub_100058628(14);
      uint64_t v47 = (uint64_t *)((char *)v62 + v63[18]);
      uint64_t *v47 = v46;
      v47[1] = v48;
      sub_100058610(15);
      char v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      *((unsigned char *)v62 + v63[19]) = (v49 == 2) | v49 & 1;
      sub_100058610(16);
      uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v51 = (uint64_t *)((char *)v62 + v63[20]);
      uint64_t *v51 = v50;
      v51[1] = v52;
      uint64_t v53 = sub_100058628(17);
      uint64_t v55 = v54;
      sub_1000586A0();
      uint64_t v56 = sub_10005848C();
      v57(v56);
      uint64_t v58 = (uint64_t *)((char *)v62 + v63[21]);
      *uint64_t v58 = v53;
      v58[1] = v55;
      sub_100055DD0((uint64_t)v62, a2);
      sub_10002EB9C(v61);
      return sub_100055E34((uint64_t)v62);
    }
    uint64_t v42 = v41;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1000586A0();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
    unsigned int v20 = 511;
  }
  uint64_t result = sub_10002EB9C(v61);
  if (v20)
  {
    uint64_t result = swift_bridgeObjectRelease();
    if (((v20 >> 1) & 1) == 0)
    {
LABEL_6:
      if ((v20 >> 2)) {
        goto LABEL_7;
      }
      goto LABEL_16;
    }
  }
  else if ((v20 & 2) == 0)
  {
    goto LABEL_6;
  }
  sub_10003F240();
  uint64_t result = v22();
  if ((v20 >> 2))
  {
LABEL_7:
    uint64_t result = sub_1000585C4();
    if (((v20 >> 3) & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  if (((v20 >> 3) & 1) == 0)
  {
LABEL_8:
    if ((v20 >> 4)) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = sub_1000585C4();
  if ((v20 >> 4))
  {
LABEL_9:
    uint64_t result = sub_1000585C4();
    if (((v20 >> 5) & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  if (((v20 >> 5) & 1) == 0)
  {
LABEL_10:
    if ((v20 >> 6)) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = sub_1000585C4();
  if ((v20 >> 6))
  {
LABEL_11:
    uint64_t result = sub_1000585C4();
    if (((v20 >> 7) & 1) == 0) {
      goto LABEL_12;
    }
LABEL_21:
    uint64_t result = sub_1000585C4();
    if ((v20 >> 8)) {
      return sub_1000585C4();
    }
    return result;
  }
LABEL_20:
  if ((v20 >> 7)) {
    goto LABEL_21;
  }
LABEL_12:
  if ((v20 >> 8)) {
    return sub_1000585C4();
  }
  return result;
}

uint64_t sub_1000551EC(uint64_t a1)
{
  sub_1000333E4(a1, (uint64_t)&v46);
  sub_10002E768(&qword_1006980A8);
  if (!swift_dynamicCast())
  {
    sub_10002E768(&qword_100698958);
    return Dictionary.init(dictionaryLiteral:)();
  }
  int64_t v1 = 0;
  uint64_t v2 = &type metadata for String;
  uint64_t v35 = v44 + 64;
  uint64_t v37 = v44;
  uint64_t v3 = 1 << *(unsigned char *)(v44 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v44 + 64);
  int64_t v36 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v6 = _swiftEmptyDictionarySingleton;
  while (v5)
  {
    unint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v8 = v7 | (v1 << 6);
LABEL_7:
    uint64_t v9 = *(void *)(v37 + 56);
    uint64_t v10 = (void *)(*(void *)(v37 + 48) + 16 * v8);
    uint64_t v11 = v10[1];
    *(void *)&long long v44 = *v10;
    *((void *)&v44 + 1) = v11;
    sub_1000333E4(v9 + 32 * v8, (uint64_t)v45);
    swift_bridgeObjectRetain();
LABEL_26:
    sub_1000575D0((uint64_t)&v44, (uint64_t)&v46);
    uint64_t v15 = v47;
    if (!v47)
    {
      swift_release();
      return (uint64_t)v6;
    }
    uint64_t v16 = v46;
    sub_100057638(&v48, v43);
    sub_1000333E4((uint64_t)v43, (uint64_t)v39);
    uint64_t v17 = sub_1000362B0(0, (unint64_t *)&qword_100697EF8);
    if (swift_dynamicCast())
    {
      *((void *)&v41 + 1) = v17;
      uint64_t v42 = (void *)sub_100057D14();
      *(void *)&long long v40 = v38;
    }
    else if (swift_dynamicCast())
    {
      *((void *)&v41 + 1) = v2;
      uint64_t v42 = &protocol witness table for String;
      long long v40 = v38;
    }
    else
    {
      long long v40 = 0u;
      long long v41 = 0u;
      uint64_t v42 = 0;
    }
    sub_10002EB9C((uint64_t)v39);
    if (*((void *)&v41 + 1))
    {
      uint64_t v18 = v2;
      sub_1000311A4(&v40, (uint64_t)&v44);
      sub_10002EA7C((uint64_t)&v44, (uint64_t)&v40);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v39[0] = v6;
      unint64_t v20 = sub_100055F1C(v16, v15);
      uint64_t v22 = v6[2];
      BOOL v23 = (v21 & 1) == 0;
      Swift::Int v24 = v22 + v23;
      if (__OFADD__(v22, v23))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
      unint64_t v25 = v20;
      char v26 = v21;
      sub_10002E768((uint64_t *)&unk_100699120);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v24))
      {
        unint64_t v27 = sub_100055F1C(v16, v15);
        if ((v26 & 1) != (v28 & 1)) {
          goto LABEL_50;
        }
        unint64_t v25 = v27;
      }
      uint64_t v6 = (void *)v39[0];
      if (v26)
      {
        uint64_t v29 = *(void *)(v39[0] + 56) + 40 * v25;
        sub_10002EB9C(v29);
        sub_1000311A4(&v40, v29);
      }
      else
      {
        *(void *)(v39[0] + 8 * (v25 >> 6) + 64) |= 1 << v25;
        uint64_t v30 = (uint64_t *)(v6[6] + 16 * v25);
        uint64_t *v30 = v16;
        v30[1] = v15;
        sub_1000311A4(&v40, v6[7] + 40 * v25);
        uint64_t v31 = v6[2];
        BOOL v32 = __OFADD__(v31, 1);
        uint64_t v33 = v31 + 1;
        if (v32) {
          goto LABEL_48;
        }
        _OWORD v6[2] = v33;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002EB9C((uint64_t)&v44);
      sub_10002EB9C((uint64_t)v43);
      uint64_t v2 = v18;
    }
    else
    {
      sub_10002EB9C((uint64_t)v43);
      swift_bridgeObjectRelease();
      sub_1000518D8((uint64_t)&v40, &qword_100698998);
    }
  }
  int64_t v12 = v1 + 1;
  if (__OFADD__(v1, 1)) {
    goto LABEL_47;
  }
  if (v12 >= v36)
  {
LABEL_25:
    unint64_t v5 = 0;
    memset(v45, 0, sizeof(v45));
    long long v44 = 0u;
    goto LABEL_26;
  }
  unint64_t v13 = *(void *)(v35 + 8 * v12);
  if (v13)
  {
LABEL_11:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v8 = __clz(__rbit64(v13)) + (v12 << 6);
    int64_t v1 = v12;
    goto LABEL_7;
  }
  int64_t v14 = v1 + 2;
  ++v1;
  if (v12 + 1 >= v36) {
    goto LABEL_25;
  }
  unint64_t v13 = *(void *)(v35 + 8 * v14);
  if (v13) {
    goto LABEL_14;
  }
  int64_t v1 = v12 + 1;
  if (v12 + 2 >= v36) {
    goto LABEL_25;
  }
  unint64_t v13 = *(void *)(v35 + 8 * (v12 + 2));
  if (v13)
  {
    v12 += 2;
    goto LABEL_11;
  }
  int64_t v14 = v12 + 3;
  int64_t v1 = v12 + 2;
  if (v12 + 3 >= v36) {
    goto LABEL_25;
  }
  unint64_t v13 = *(void *)(v35 + 8 * v14);
  if (v13)
  {
LABEL_14:
    int64_t v12 = v14;
    goto LABEL_11;
  }
  while (1)
  {
    int64_t v12 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v12 >= v36)
    {
      int64_t v1 = v36 - 1;
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v12);
    ++v14;
    if (v13) {
      goto LABEL_11;
    }
  }
LABEL_49:
  __break(1u);
LABEL_50:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000556A8(void *a1)
{
  uint64_t v3 = v1;
  sub_10002E768(&qword_100698950);
  sub_100045FF4();
  __chkstk_darwin(v5);
  sub_10005873C();
  uint64_t v6 = self;
  uint64_t v7 = type metadata accessor for AssessmentPayload();
  sub_10002E768(&qword_100698958);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v25 = 0;
  id v9 = [v6 dataWithJSONObject:isa options:0 error:&v25];

  id v10 = v25;
  if (v9)
  {
    Swift::Int v24 = (int *)v7;
    uint64_t v11 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    sub_10002EAE0(a1, a1[3]);
    sub_100055C44();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    LOBYTE(v25) = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v2)
    {
      uint64_t v14 = sub_100058504();
      v15(v14);
      uint64_t v16 = (uint64_t)v11;
    }
    else
    {
      uint64_t v19 = (uint64_t)v11;
      LOBYTE(v25) = 1;
      type metadata accessor for Date();
      sub_100055CDC(&qword_1006987A8, (void (*)(uint64_t))&type metadata accessor for Date);
      sub_1000586B8();
      sub_100058594(v24[6]);
      sub_100058468(2);
      sub_100058594(v24[7]);
      sub_100058468(3);
      sub_100058594(v24[8]);
      sub_100058468(4);
      sub_100058594(v24[9]);
      sub_100058468(5);
      sub_100058594(v24[10]);
      sub_100058468(6);
      sub_100058594(v24[11]);
      sub_100058468(7);
      sub_100058594(v24[12]);
      sub_100058468(8);
      sub_100058754(*(unsigned int *)(v3 + v24[13]), 9);
      id v25 = v11;
      unint64_t v26 = v13;
      sub_100055C90();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      id v25 = *(id *)(v3 + v24[15]);
      swift_bridgeObjectRetain();
      sub_10002E768(&qword_1006982F8);
      sub_100055D70(&qword_100698318, &qword_1006982F8);
      sub_1000586B8();
      swift_bridgeObjectRelease();
      sub_100058754(*(unsigned int *)(v3 + v24[16]), 12);
      sub_100058594(v24[17]);
      sub_100058468(13);
      sub_100058594(v24[18]);
      sub_100058468(14);
      LOBYTE(v25) = 15;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v22 = v3 + v24[20];
      unint64_t v23 = *(void *)(v22 + 8);
      id v25 = *(id *)v22;
      unint64_t v26 = v23;
      swift_bridgeObjectRetain();
      sub_10002E768(&qword_100698970);
      sub_100055D70(&qword_100698978, &qword_100698970);
      sub_1000586B8();
      swift_bridgeObjectRelease();
      sub_100058594(v24[21]);
      sub_100058468(17);
      uint64_t v20 = sub_100058504();
      v21(v20);
      uint64_t v16 = v19;
    }
    return sub_10002EC6C(v16, v13);
  }
  else
  {
    uint64_t v17 = v10;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t sub_100055C14@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100054924(a1, a2);
}

uint64_t sub_100055C2C(void *a1)
{
  return sub_1000556A8(a1);
}

unint64_t sub_100055C44()
{
  unint64_t result = qword_100698960;
  if (!qword_100698960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698960);
  }
  return result;
}

unint64_t sub_100055C90()
{
  unint64_t result = qword_100698968;
  if (!qword_100698968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698968);
  }
  return result;
}

uint64_t sub_100055CDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100055D24()
{
  unint64_t result = qword_100698988;
  if (!qword_100698988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698988);
  }
  return result;
}

uint64_t sub_100055D70(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10003137C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100055DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssessmentPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055E34(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AssessmentPayload();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100055E90(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000560D0(a1, v4);
}

unint64_t sub_100055ED4(unsigned __int16 a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_100056198(a1, v2);
}

unint64_t sub_100055F1C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100056238(a1, a2, v4);
}

unint64_t sub_100055F94(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3);
  Swift::Int v6 = Hasher._finalize()();

  return sub_10005631C(a1, a2, a3, v6);
}

unint64_t sub_100056038(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_100055CDC((unint64_t *)&qword_1006979C0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_1000563F8(a1, v2);
}

unint64_t sub_1000560D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100058018(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100058074((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100056198(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100056238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10005631C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      unint64_t v13 = (void *)(v12 + 24 * v7);
      uint64_t v14 = v13[2];
      BOOL v15 = *v13 == a1 && v13[1] == a2;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && v14 == a3) {
        break;
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_1000563F8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    unint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100055CDC(&qword_1006989D8, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

double sub_1000565B8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100055F1C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v4;
    uint64_t v11 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_10002E768(&qword_1006989C0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    sub_100057638((_OWORD *)(*(void *)(v14 + 56) + 32 * v8), a3);
    _NativeDictionary._delete(at:)();
    *uint64_t v4 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1000566F0()
{
  sub_10005879C();
  uint64_t v1 = v0;
  Swift::UInt v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_100055F94(v7, v5, v3);
  LOBYTE(v3) = v11;
  swift_bridgeObjectRelease();
  if (v3)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *v1;
    uint64_t v13 = *v1;
    *uint64_t v1 = 0x8000000000000000;
    Swift::Int v14 = *(void *)(v13 + 24);
    sub_10002E768(&qword_100698780);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(v24 + 56);
    uint64_t v16 = type metadata accessor for Date();
    sub_100051B88();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 32))(v9, v15 + *(void *)(v17 + 72) * v10, v16);
    sub_100031714();
    _NativeDictionary._delete(at:)();
    *uint64_t v1 = v24;
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for Date();
  }
  sub_100058788();
  return sub_10003349C(v18, v19, v20, v21);
}

double sub_100056864@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100055F1C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v4;
    uint64_t v11 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_10002E768((uint64_t *)&unk_100699120);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    sub_1000311A4((long long *)(*(void *)(v14 + 56) + 40 * v8), a3);
    sub_10002E768(&qword_100698958);
    _NativeDictionary._delete(at:)();
    *uint64_t v4 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

#error "100056A14: call analysis failed (funcsize=57)"

uint64_t sub_100056A98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Swift::UInt v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100056038(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v3;
    uint64_t v9 = *v3;
    *Swift::UInt v3 = 0x8000000000000000;
    Swift::Int v10 = *(void *)(v9 + 24);
    sub_10002E768(&qword_1006989D0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    uint64_t v11 = *(void *)(v19 + 48);
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11 + *(void *)(*(void *)(v12 - 8) + 72) * v6, v12);
    uint64_t v13 = *(void *)(v19 + 56);
    uint64_t v14 = type metadata accessor for ServerJSONFetchRetryState();
    sub_100057DBC(v13 + *(void *)(*(void *)(v14 - 8) + 72) * v6, a2);
    sub_100055CDC((unint64_t *)&qword_1006979C0, (void (*)(uint64_t))&type metadata accessor for UUID);
    _NativeDictionary._delete(at:)();
    *Swift::UInt v3 = v19;
    swift_bridgeObjectRelease();
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v14;
  }
  else
  {
    uint64_t v17 = type metadata accessor for ServerJSONFetchRetryState();
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return sub_10003349C(v15, v16, 1, v17);
}

#error "100056CC0: call analysis failed (funcsize=74)"

double sub_100056D90@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  Swift::UInt v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100055E90(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v3;
    uint64_t v9 = *v3;
    *Swift::UInt v3 = 0x8000000000000000;
    Swift::Int v10 = *(void *)(v9 + 24);
    sub_10002E768(&qword_1006989F0);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
    sub_100058074(*(void *)(v12 + 48) + 40 * v6);
    sub_100057638((_OWORD *)(*(void *)(v12 + 56) + 32 * v6), a2);
    _NativeDictionary._delete(at:)();
    *Swift::UInt v3 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

#error "100056EE4: call analysis failed (funcsize=19)"

uint64_t sub_100056F0C(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  sub_1000572A4(a1, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  *uint64_t v4 = v11;

  return swift_bridgeObjectRelease();
}

#error "100056FC8: call analysis failed (funcsize=19)"

#error "100057014: call analysis failed (funcsize=19)"

uint64_t sub_10005703C(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  *Swift::UInt v2 = 0x8000000000000000;
  sub_10005770C(a1, a2, isUniquelyReferenced_nonNull_native);
  *Swift::UInt v2 = v7;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000570BC(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v2;
  *Swift::UInt v2 = 0x8000000000000000;
  uint64_t v6 = sub_1000578E0(a1, a2, isUniquelyReferenced_nonNull_native);
  sub_10005867C(v6, v7, v8, v9, v10, v11, v12, v13, v15, v16);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100057134(_OWORD *a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  *Swift::UInt v2 = 0x8000000000000000;
  sub_100057A70(a1, a2, isUniquelyReferenced_nonNull_native);
  *Swift::UInt v2 = v7;

  return swift_bridgeObjectRelease();
}

_OWORD *sub_1000571B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000584D4(a1, a2, a3);
  sub_1000585DC();
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_10002E768(&qword_1006989C0);
  if (!sub_1000585F0()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_1000586D8();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_13:
    double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v6;
  if (v11)
  {
    sub_10002EB9C(*(void *)(v14 + 56) + 32 * v10);
    sub_100058710();
    return sub_100057638(v15, v16);
  }
  else
  {
    sub_100057BA8(v10, v5, v4, v3, v14);
    sub_100058710();
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000572A4(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, char a5)
{
  uint64_t v6 = (void **)v5;
  unint64_t v12 = (void *)*v5;
  unint64_t v13 = sub_100055F94(a2, a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_10002E768(&qword_100698780);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a5 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100055F94(a2, a3, a4);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v6;
  if (v19)
  {
    uint64_t v23 = v22[7];
    uint64_t v24 = type metadata accessor for Date();
    uint64_t v25 = *(void *)(v24 - 8);
    unint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 40);
    uint64_t v27 = v24;
    uint64_t v28 = v23 + *(void *)(v25 + 72) * v18;
    return v26(v28, a1, v27);
  }
  else
  {
    sub_100057BEC(v18, a2, a3, a4, a1, v22);
    return swift_bridgeObjectRetain();
  }
}

void sub_10005742C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000584D4(a1, a2, a3);
  sub_1000585DC();
  if (v7)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v8 = v5;
  char v9 = v6;
  sub_10002E768(&qword_100699130);
  if (sub_1000585F0())
  {
    sub_1000586D8();
    sub_100058778();
    if (!v11) {
      goto LABEL_12;
    }
    uint64_t v8 = v10;
  }
  if (v9)
  {
    uint64_t v12 = *(void *)(*(void *)v4 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v12 + 8 * v8) = v3;
    sub_100058710();
  }
  else
  {
    unint64_t v13 = sub_10005868C();
    sub_100057CA4(v13, v14, v15, v16, v17);
    sub_100058710();
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000574F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000584D4(a1, a2, a3);
  sub_1000585DC();
  if (v6)
  {
    __break(1u);
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v7 = v4;
  char v8 = v5;
  sub_10002E768((uint64_t *)&unk_100699120);
  if (sub_1000585F0())
  {
    sub_1000586D8();
    sub_100058778();
    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v7 = v9;
  }
  if (v8)
  {
    sub_10002EB9C(*(void *)(*(void *)v3 + 56) + 40 * v7);
    sub_100058710();
    return sub_1000311A4(v11, v12);
  }
  else
  {
    unint64_t v15 = sub_10005868C();
    sub_100057CCC(v15, v16, v17, v18, v19);
    sub_100058710();
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1000575D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002E768(&qword_100698990);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_100057638(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_100057648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000584D4(a1, a2, a3);
  sub_1000585DC();
  if (v7)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  uint64_t v8 = v5;
  char v9 = v6;
  sub_10002E768(&qword_1006989A8);
  if (sub_1000585F0())
  {
    sub_1000586D8();
    sub_100058778();
    if (!v11) {
      goto LABEL_12;
    }
    uint64_t v8 = v10;
  }
  if (v9)
  {
    uint64_t v12 = *(void *)(*(void *)v4 + 56);

    *(void *)(v12 + 8 * v8) = v3;
    sub_100058710();
  }
  else
  {
    unint64_t v13 = sub_10005868C();
    sub_100057D74(v13, v14, v15, v16, v17);
    sub_100058710();
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_10005770C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v13 = sub_100056038(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_10002E768(&qword_1006989D0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100056038(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];
    uint64_t v24 = v23 + *(void *)(*(void *)(type metadata accessor for ServerJSONFetchRetryState() - 8) + 72) * v18;
    return sub_100057EFC(a1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_100057E20(v18, (uint64_t)v11, a1, v22);
  }
}

uint64_t sub_1000578E0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v13 = sub_100056038(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_10002E768(&qword_1006989E0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100056038(a2);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];
    uint64_t result = swift_release();
    *(void *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_100057F60(v18, (uint64_t)v11, a1, v22);
  }
  return result;
}

_OWORD *sub_100057A70(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_100055E90(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_10002E768(&qword_1006989F0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100055E90(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  unint64_t v18 = *v4;
  if (v15)
  {
    char v19 = (_OWORD *)(v18[7] + 32 * v14);
    sub_10002EB9C((uint64_t)v19);
    return sub_100057638(a1, v19);
  }
  else
  {
    sub_100058018(a2, (uint64_t)v21);
    return sub_1000580C8(v14, (uint64_t)v21, a1, v18);
  }
}

_OWORD *sub_100057BA8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = sub_100058520(a1, a2, a3, a4, a5);
  uint64_t result = sub_100057638(v8, (_OWORD *)(v7 + 32 * v6));
  uint64_t v10 = *(void *)(a5 + 16);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v12;
  }
  return result;
}

uint64_t sub_100057BEC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v9 = (void *)(a6[6] + 24 * a1);
  void *v9 = a2;
  v9[1] = a3;
  v9[2] = a4;
  uint64_t v10 = a6[7];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a5, v11);
  uint64_t v13 = a6[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a6[2] = v15;
  }
  return result;
}

unint64_t sub_100057CA4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_100058520(a1, a2, a3, a4, a5);
  *(void *)(v8 + 8 * result) = v7;
  uint64_t v9 = *(void *)(v6 + 16);
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v11;
  }
  return result;
}

uint64_t sub_100057CCC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = sub_100058520(a1, a2, a3, a4, a5);
  uint64_t result = sub_1000311A4(v8, v7 + 40 * v6);
  uint64_t v10 = *(void *)(a5 + 16);
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v12;
  }
  return result;
}

unint64_t sub_100057D14()
{
  unint64_t result = qword_1006989A0;
  if (!qword_1006989A0)
  {
    sub_1000362B0(255, (unint64_t *)&qword_100697EF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006989A0);
  }
  return result;
}

unint64_t sub_100057D74(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_100057DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServerJSONFetchRetryState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057E20(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for ServerJSONFetchRetryState();
  uint64_t result = sub_100057DBC(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_100057EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServerJSONFetchRetryState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057F60(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_100058018(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100058074(uint64_t a1)
{
  return a1;
}

_OWORD *sub_1000580C8(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100057638(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_100058148@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_100058180(void *a1)
{
  id v1 = [a1 otdDestinationHost];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000581E4()
{
  return swift_release();
}

uint64_t getEnumTagSinglePayload for AssessmentPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEF)
  {
    if (a2 + 17 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 17) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 18;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v5 = v6 - 18;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for AssessmentPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100058340);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AssessmentPayload.CodingKeys()
{
  return &type metadata for AssessmentPayload.CodingKeys;
}

unint64_t sub_10005837C()
{
  unint64_t result = qword_100698A00;
  if (!qword_100698A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698A00);
  }
  return result;
}

unint64_t sub_1000583CC()
{
  unint64_t result = qword_100698A08;
  if (!qword_100698A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698A08);
  }
  return result;
}

unint64_t sub_10005841C()
{
  unint64_t result = qword_100698A10;
  if (!qword_100698A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698A10);
  }
  return result;
}

uint64_t sub_100058468@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 104) = a1;
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_10005848C()
{
  sub_10002EB9C(v1 - 120);
  return v0;
}

uint64_t sub_1000584B8()
{
  *(void *)(v2 - 160) = v1;
  return v0;
}

unint64_t sub_1000584D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100055F1C(a2, a3);
}

uint64_t sub_100058504()
{
  return v0;
}

unint64_t sub_100058520(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_100058550()
{
  void *v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_100058578@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 120) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_100058594@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

void sub_1000585A0()
{
}

void sub_1000585B8(uint64_t a1@<X8>)
{
  unsigned int v4 = (void *)(v1 + a1);
  *unsigned int v4 = v2;
  v4[1] = v3;
}

uint64_t sub_1000585C4()
{
  return swift_bridgeObjectRelease();
}

BOOL sub_1000585F0()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_100058610@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t sub_100058628@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 128) = a1;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10005864C()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100058670@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = (void *)(v3 + a3);
  *unsigned int v4 = result;
  v4[1] = a2;
  return result;
}

uint64_t sub_10005867C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  uint64_t *v10 = a10;
  return result;
}

uint64_t sub_10005868C()
{
  return v0;
}

uint64_t sub_1000586A0()
{
  return sub_10002EC6C(v1, v0);
}

uint64_t sub_1000586B8()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

unint64_t sub_1000586D8()
{
  return sub_100055F1C(v1, v0);
}

void sub_1000586F4()
{
  void *v0 = 0x8000000000000000;
}

uint64_t sub_100058724()
{
  return v0;
}

uint64_t sub_100058754@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(unsigned char *)(v3 - 104) = a2;
  return KeyedEncodingContainer.encode(_:forKey:)(a1, v3 - 104, v2);
}

uint64_t sub_1000587B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return a14;
}

BOOL sub_1000587C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_1000587E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = result;
  uint64_t v26 = *(void *)(result + 16);
  if (!v26)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v22;
  }
  unint64_t v6 = 0;
  uint64_t v25 = result + 32;
  uint64_t v22 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v6 >= *(void *)(v4 + 16))
    {
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v7 = v25 + (v6 << 6);
    long long v29 = *(_OWORD *)(v7 + 24);
    uint64_t v8 = *(void **)(v7 + 48);
    uint64_t v27 = *(void *)(v7 + 40);
    uint64_t v28 = *(void *)(v7 + 8);
    int v9 = *(unsigned __int8 *)(v7 + 56);
    uint64_t v10 = v8[2];
    uint64_t v23 = *(void *)(v7 + 16);
    uint64_t v24 = *(void *)v7;
    if (v10) {
      break;
    }
    char v12 = 0;
LABEL_28:
    ++v6;
    if (v9 != 2) {
      v12 ^= v9;
    }
    if (v12)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v18 = v22;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000A540C(0, v22[2] + 1, 1);
        unint64_t v18 = v22;
      }
      uint64_t v3 = a3;
      unint64_t v20 = v18[2];
      unint64_t v19 = v18[3];
      if (v20 >= v19 >> 1)
      {
        uint64_t result = (uint64_t)sub_1000A540C((char *)(v19 > 1), v20 + 1, 1);
        uint64_t v3 = a3;
        unint64_t v18 = v22;
      }
      v18[2] = v20 + 1;
      uint64_t v22 = v18;
      char v21 = &v18[8 * v20];
      v21[4] = v24;
      v21[5] = v28;
      v21[6] = v23;
      *(_OWORD *)(v21 + 7) = v29;
      v21[9] = v27;
      v21[10] = v8;
      *((unsigned char *)v21 + 88) = v9;
    }
    if (v6 == v26) {
      goto LABEL_39;
    }
  }
  uint64_t result = v8[4];
  BOOL v11 = result == a2 && v8[5] == v3;
  if (v11)
  {
    char v12 = 1;
    goto LABEL_28;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result)
  {
    char v12 = 1;
LABEL_27:
    uint64_t v3 = a3;
    goto LABEL_28;
  }
  if (v10 == 1)
  {
    char v12 = 0;
    goto LABEL_27;
  }
  uint64_t v13 = v8 + 7;
  uint64_t v14 = 1;
  uint64_t v3 = a3;
  while (1)
  {
    uint64_t v15 = v4;
    uint64_t v16 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    uint64_t result = *(v13 - 1);
    if (result == a2 && *v13 == v3)
    {
      char v12 = 1;
      uint64_t v4 = v15;
      goto LABEL_28;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result)
    {
      char v12 = 1;
      uint64_t v4 = v15;
      goto LABEL_27;
    }
    char v12 = 0;
    v13 += 2;
    ++v14;
    BOOL v11 = v16 == v10;
    uint64_t v4 = v15;
    uint64_t v3 = a3;
    if (v11) {
      goto LABEL_28;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100058A70()
{
  *(void *)(v1 + 56) = v0;
  return sub_10005A038((uint64_t)sub_100058A88);
}

uint64_t sub_100058A88()
{
  uint64_t v1 = *(void **)(v0 + 56);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  sub_10002EAE0(v1 + 2, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100058B40;
  return dispatch thunk of ODIAccountManagerProtocol.primaryAppleAccount()(v2, v3);
}

uint64_t sub_100058B40()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 72) = v4;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_100058C24()
{
  uint64_t v1 = *(void **)(v0 + 72);
  if (v1)
  {
    sub_100059DA0(*(void **)(v0 + 72), (SEL *)&selRef_aa_personID);
    uint64_t v3 = v2;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    if (v3)
    {
      if (v6)
      {
        uint64_t v7 = (uint8_t *)sub_100051AA0();
        sub_10005A074(v7);
        _os_log_impl((void *)&_mh_execute_header, v4, v8, "returning iCloud dsid", v7, 2u);
        sub_100033704();
      }
    }
    else if (v6)
    {
      uint64_t v10 = (_WORD *)sub_100051AA0();
      sub_10005A074(v10);
      sub_10005A05C((void *)&_mh_execute_header, v4, v11, "unable to get person ID");
      sub_100033704();
    }
  }
  else
  {
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, (os_log_type_t)v9))
    {
      *(_WORD *)sub_100051AA0() = 0;
      sub_10005A05C((void *)&_mh_execute_header, v4, (os_log_type_t)v9, "user is not logged into iTunes");
      sub_100033704();
    }
  }

  uint64_t v12 = sub_10005A080();
  return v13(v12);
}

uint64_t sub_100058DB8()
{
  uint64_t v10 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v9 = v4;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_100032B48(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error getting DSID %s", v3, 0xCu);
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void, void))(v0 + 8);
  return v7(0, 0);
}

uint64_t sub_100058FA0()
{
  *(void *)(v1 + 16) = v0;
  return sub_10005A038((uint64_t)sub_100058FB8);
}

uint64_t sub_100058FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  long long v29 = (void *)v28[2];
  uint64_t v30 = v29[5];
  uint64_t v31 = v29[6];
  sub_10002EAE0(v29 + 2, v30);
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;
  v28[3] = v33;
  uint64_t v35 = (void *)swift_task_alloc();
  v28[4] = v35;
  *uint64_t v35 = v28;
  v35[1] = sub_10005909C;
  return dispatch thunk of ODIAccountManagerProtocol.getAccount(with:)(v32, v34, v30, v31, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

uint64_t sub_10005909C()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *os_log_type_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  *(void *)(v6 + 40) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100059188()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1)
  {
    sub_100059DA0(*(void **)(v0 + 40), (SEL *)&selRef_normalizedDSID);
    uint64_t v3 = v2;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    BOOL v6 = os_log_type_enabled(v4, v5);
    if (v3)
    {
      if (v6)
      {
        uint64_t v7 = (uint8_t *)sub_100051AA0();
        sub_10005A074(v7);
        _os_log_impl((void *)&_mh_execute_header, v4, v8, "returning iTunes dsid", v7, 2u);
        sub_100033704();
      }
    }
    else if (v6)
    {
      uint64_t v10 = (_WORD *)sub_100051AA0();
      sub_10005A074(v10);
      sub_10005A05C((void *)&_mh_execute_header, v4, v11, "unable to get person ID");
      sub_100033704();
    }
  }
  else
  {
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, (os_log_type_t)v9))
    {
      *(_WORD *)sub_100051AA0() = 0;
      sub_10005A05C((void *)&_mh_execute_header, v4, (os_log_type_t)v9, "user is not logged into iTunes");
      sub_100033704();
    }
  }

  uint64_t v12 = sub_10005A080();
  return v13(v12);
}

uint64_t sub_10005931C()
{
  sub_10003F0F4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000593A4;
  return sub_100058A70();
}

uint64_t sub_1000593A4()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  *(void *)(v6 + 24) = v5;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100059470()
{
  sub_10003F0F4();
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1) {
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v2(v1 != 0);
}

uint64_t sub_1000594DC()
{
  sub_10003F0F4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100059564;
  return sub_100058FA0();
}

uint64_t sub_100059564()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  *(void *)(v6 + 24) = v5;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100059630()
{
  uint64_t v1 = type metadata accessor for Locale();
  sub_100045FF4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10005A044();
  uint64_t v5 = sub_10002E768(&qword_1006984D0);
  __chkstk_darwin(v5 - 8);
  sub_100046338();
  uint64_t v8 = v7 - v6;
  static Locale.current.getter();
  Locale.region.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  uint64_t v9 = type metadata accessor for Locale.Region();
  if (sub_1000312BC(v8, 1, v9) == 1)
  {
    sub_100059D40(v8);
    return 0;
  }
  else
  {
    uint64_t v10 = Locale.Region.identifier.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  return v10;
}

void *sub_100059780()
{
  uint64_t v1 = type metadata accessor for Locale();
  sub_100045FF4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10005A044();
  uint64_t v5 = sub_10002E768(&qword_1006984D0);
  __chkstk_darwin(v5 - 8);
  sub_100046338();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for Locale.Region();
  sub_100045FF4();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100046338();
  uint64_t v15 = v14 - v13;
  static Locale.current.getter();
  Locale.region.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  if (sub_1000312BC(v8, 1, v9) == 1)
  {
    sub_100059D40(v8);
    return _swiftEmptyArrayStorage;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v15, v8, v9);
    uint64_t v16 = sub_100059924();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v15, v9);
  }
  return v16;
}

void *sub_100059924()
{
  uint64_t v1 = Locale.Region.identifier.getter();
  uint64_t v3 = v2;
  sub_10002EAE0((void *)(v0 + 56), *(void *)(v0 + 80));
  sub_1000950DC(v17);
  sub_1000360A8((uint64_t)v17, (uint64_t)__src, &qword_100697F08);
  if (__src[5] != 1)
  {
    memcpy(__dst, __src, sizeof(__dst));
    sub_1000360A8((uint64_t)&__dst[88], (uint64_t)v20, &qword_100698B48);
    sub_10003610C((uint64_t)v20);
    sub_100036138(v17);
    sub_1000360A8((uint64_t)v20, (uint64_t)&v21, &qword_100698B48);
    if (v21)
    {
      uint64_t v4 = sub_1000587E4(v21, v1, v3);
      int64_t v5 = *(void *)(v4 + 16);
      if (v5)
      {
        sub_1000A53EC(0, v5, 0);
        uint64_t v6 = (uint64_t *)(v4 + 72);
        do
        {
          uint64_t v8 = *(v6 - 5);
          uint64_t v7 = *(v6 - 4);
          uint64_t v9 = *(v6 - 2);
          uint64_t v10 = *v6;
          uint64_t v15 = *(v6 - 1);
          uint64_t v16 = *(v6 - 3);
          unint64_t v11 = _swiftEmptyArrayStorage[2];
          unint64_t v12 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v11 >= v12 >> 1) {
            sub_1000A53EC((char *)(v12 > 1), v11 + 1, 1);
          }
          v6 += 8;
          _swiftEmptyArrayStorage[2] = v11 + 1;
          uint64_t v13 = &_swiftEmptyArrayStorage[6 * v11];
          void v13[4] = v8;
          v13[5] = v7;
          v13[6] = v16;
          v13[7] = v9;
          v13[8] = v15;
          v13[9] = v10;
          --v5;
        }
        while (v5);
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

BOOL sub_100059AFC()
{
  uint64_t v0 = self;
  id v1 = [v0 standardUserDefaults];
  sub_10002FE08(v1);

  id v2 = [v0 standardUserDefaults];
  float v3 = sub_100065EC4(v2);

  return v3 < 10.0;
}

uint64_t sub_100059B88()
{
  sub_10002EB9C(v0 + 16);
  sub_10002EB9C(v0 + 56);
  uint64_t v1 = v0 + OBJC_IVAR____TtC3asd21DeviceContextProvider_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_100059BFC()
{
  sub_100059B88();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100059C54()
{
  return type metadata accessor for DeviceContextProvider();
}

uint64_t type metadata accessor for DeviceContextProvider()
{
  uint64_t result = qword_100698A40;
  if (!qword_100698A40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100059CA4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100059D40(uint64_t a1)
{
  uint64_t v2 = sub_10002E768(&qword_1006984D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100059DA0(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  float v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t destroy for DeviceContextProvider.ServiceArea()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DeviceContextProvider.ServiceArea(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DeviceContextProvider.ServiceArea(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for DeviceContextProvider.ServiceArea(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void *assignWithTake for DeviceContextProvider.ServiceArea(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceContextProvider.ServiceArea(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceContextProvider.ServiceArea(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceContextProvider.ServiceArea()
{
  return &type metadata for DeviceContextProvider.ServiceArea;
}

uint64_t sub_10005A038(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

void sub_10005A05C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

_WORD *sub_10005A074(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t sub_10005A080()
{
  return v0;
}

uint64_t sub_10005A094()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_100698B50);
  sub_100031284(v0, (uint64_t)qword_100698B50);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10005A120()
{
  uint64_t v0 = type metadata accessor for DistributedNotificationsAsyncSequence();
  __chkstk_darwin(v0);
  DistributedNotificationsAsyncSequence.init()();
  sub_10005A904();
  swift_retain();
  return AsyncCompactMapSequence.init(_:transform:)();
}

uint64_t sub_10005A1F0(uint64_t a1, void *a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = *a2;
  return _swift_task_switch(sub_10005A218, a3, 0);
}

uint64_t sub_10005A218()
{
  *(unsigned char *)(v0 + 40) = sub_10005A2B0(*(void **)(v0 + 32));
  return _swift_task_switch(sub_10005A288, 0, 0);
}

uint64_t sub_10005A288()
{
  **(unsigned char **)(v0 + 16) = (*(unsigned char *)(v0 + 40) & 1) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_10005A2B0(void *a1)
{
  sub_10002E768(&qword_100698030);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10058CEC0;
  *(void *)(inited + 32) = 0xD000000000000023;
  *(void *)(inited + 40) = 0x800000010056A0E0;
  if (xpc_dictionary_get_string(a1, "XPCEventName"))
  {
    uint64_t v3 = String.init(cString:)();
    char v5 = sub_100079800(v3, v4, (void *)inited);
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1000B4450();
    if (v5)
    {
      xpc_object_t v6 = xpc_dictionary_get_dictionary(a1, "UserInfo");
      if (v6)
      {
        if (xpc_dictionary_get_string(v6, "PKPassLibraryUniqueIDUserInfo"))
        {
          uint64_t v7 = String.init(cString:)();
          uint64_t v9 = v8;
          id v10 = [objc_allocWithZone((Class)PKPassLibrary) init];
          id v11 = sub_10005A700(v7, v9, v10);
          if (v11)
          {
            unint64_t v12 = v11;
            id v13 = [v11 passType];

            BOOL v14 = v13 == (id)1;
          }
          else
          {
            BOOL v14 = 0;
          }
          if (qword_1006978F8 != -1) {
            swift_once();
          }
          uint64_t v20 = type metadata accessor for Logger();
          sub_100031284(v20, (uint64_t)qword_100698B50);
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v23 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v23 = 67109120;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "Tomato in notification is Fruit: %{BOOL}d", v23, 8u);
            swift_slowDealloc();
          }

          swift_unknownObjectRelease();
          return v14;
        }
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    swift_setDeallocating();
    sub_1000B4450();
  }
  if (qword_1006978F8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100031284(v15, (uint64_t)qword_100698B50);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Notification not recognised as calzone event", v18, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_10005A5C4()
{
  uint64_t v1 = v0;
  swift_defaultActor_initialize();
  if (qword_1006978F8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100031284(v2, (uint64_t)qword_100698B50);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CalzoneMonitor.init", v5, 2u);
    swift_slowDealloc();
  }

  return v1;
}

uint64_t sub_10005A6AC()
{
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for WalletMonitor()
{
  return self;
}

id sub_10005A700(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [a3 passWithUniqueID:v4];

  return v5;
}

uint64_t sub_10005A764(uint64_t a1, void *a2)
{
  xpc_object_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  void *v6 = v3;
  v6[1] = sub_10005A810;
  return sub_10005A1F0(a1, a2, v2);
}

uint64_t sub_10005A810()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_10005A904()
{
  unint64_t result = qword_100698C28;
  if (!qword_100698C28)
  {
    type metadata accessor for DistributedNotificationsAsyncSequence();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698C28);
  }
  return result;
}

uint64_t sub_10005A954()
{
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v21 = (char *)v19 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v19[0]);
  v19[1] = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for XPCStreamListener();
  uint64_t v4 = __chkstk_darwin(v3);
  xpc_object_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (void *)((char *)v19 - v7);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100697908 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_100031284(v9, (uint64_t)qword_100698C30);
  BOOL v14 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v14(v12, v13, v9);
  id v15 = [objc_allocWithZone((Class)CNContactStore) init];
  type metadata accessor for ContactsManager();
  swift_allocObject();
  sub_10008B6A8(v15, (uint64_t)v12);
  v14((char *)v8 + *(int *)(v3 + 20), v13, v9);
  sub_10005B550();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_10005B590();
  sub_10002E768(&qword_100698C98);
  sub_10005B5E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v20 + 104))(v21, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
  *uint64_t v8 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_10005B634((uint64_t)v8, (uint64_t)v6);
  uint64_t v16 = swift_retain();
  id v17 = sub_10005B770(v16, (uint64_t)v6);
  sub_10005B948((uint64_t)v8);
  uint64_t result = swift_release();
  static BindingsChangeObserver.shared = (uint64_t)v17;
  return result;
}

uint64_t *BindingsChangeObserver.shared.unsafeMutableAddressor()
{
  if (qword_100697900 != -1) {
    swift_once();
  }
  return &static BindingsChangeObserver.shared;
}

id static BindingsChangeObserver.shared.getter()
{
  if (qword_100697900 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static BindingsChangeObserver.shared;

  return v0;
}

uint64_t sub_10005AE10()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_100698C30);
  sub_100031284(v0, (uint64_t)qword_100698C30);
  return Logger.init(subsystem:category:)();
}

Swift::Void __swiftcall BindingsChangeObserver.registerObservers()()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC3asd22BindingsChangeObserver_xpcStreamListener];
  sub_10002EAE0(&v0[OBJC_IVAR____TtC3asd22BindingsChangeObserver_contactsManager], *(void *)&v0[OBJC_IVAR____TtC3asd22BindingsChangeObserver_contactsManager + 24]);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = v0;
  sub_10008B978((uint64_t)sub_10005BA5C, v2);
  swift_release();
  sub_10002EAE0(v1, *((void *)v1 + 3));
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = v3;
  sub_1000C1010((uint64_t)sub_10005B398, v4);

  swift_release();
}

uint64_t sub_10005AF94()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005AFCC()
{
  uint64_t v0 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  sub_10003349C((uint64_t)v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  if (sub_1000312BC((uint64_t)v2, 1, v3) == 1)
  {
    sub_10005B4B8((uint64_t)v2);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
    if (*(void *)(v4 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v7;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &unk_100698C88;
  *(void *)(v8 + 24) = v4;
  if (v6 | v5)
  {
    v10[0] = 0;
    v10[1] = 0;
    _OWORD v10[2] = v5;
    v10[3] = v6;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_10005B204()
{
  return _swift_task_switch(sub_10005B220, 0, 0);
}

uint64_t sub_10005B220()
{
  if (qword_1006978F0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10005BA60;
  return sub_10004E844();
}

void BindingsChangeObserver.init()()
{
}

void sub_10005B374()
{
}

uint64_t sub_10005B398()
{
  return sub_10005AFCC();
}

uint64_t type metadata accessor for BindingsChangeObserver()
{
  return self;
}

uint64_t sub_10005B3E0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005B418()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033610;
  sub_10005BA64();
  return sub_10005B204();
}

uint64_t sub_10005B4B8(uint64_t a1)
{
  uint64_t v2 = sub_10002E768(&qword_100697E68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005B518()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10005B550()
{
  unint64_t result = qword_10069A360;
  if (!qword_10069A360)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10069A360);
  }
  return result;
}

unint64_t sub_10005B590()
{
  unint64_t result = qword_100698C90;
  if (!qword_100698C90)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698C90);
  }
  return result;
}

unint64_t sub_10005B5E0()
{
  unint64_t result = qword_100698CA0;
  if (!qword_100698CA0)
  {
    sub_10003137C(&qword_100698C98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100698CA0);
  }
  return result;
}

uint64_t sub_10005B634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCStreamListener();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_10005B698(uint64_t a1, uint64_t a2, void *a3)
{
  ObjectType = (objc_class *)swift_getObjectType();
  void v12[3] = type metadata accessor for ContactsManager();
  v12[4] = &off_100661C90;
  v12[0] = a1;
  v11[3] = type metadata accessor for XPCStreamListener();
  uint64_t v11[4] = (uint64_t)&off_100663370;
  uint64_t v7 = sub_10003EB78(v11);
  sub_10005B9A4(a2, (uint64_t)v7);
  sub_10002EA7C((uint64_t)v12, (uint64_t)a3 + OBJC_IVAR____TtC3asd22BindingsChangeObserver_contactsManager);
  sub_10002EA7C((uint64_t)v11, (uint64_t)a3 + OBJC_IVAR____TtC3asd22BindingsChangeObserver_xpcStreamListener);
  v10.receiver = a3;
  v10.super_class = ObjectType;
  id v8 = [super init];
  sub_10002EB9C((uint64_t)v11);
  sub_10002EB9C((uint64_t)v12);
  return v8;
}

id sub_10005B770(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = type metadata accessor for ContactsManager();
  uint64_t v21 = &off_100661C90;
  v19[0] = a1;
  uint64_t v17 = type metadata accessor for XPCStreamListener();
  unint64_t v18 = &off_100663370;
  uint64_t v4 = sub_10003EB78(v16);
  sub_10005B9A4(a2, (uint64_t)v4);
  id v5 = objc_allocWithZone((Class)type metadata accessor for BindingsChangeObserver());
  uint64_t v6 = sub_10005BA08((uint64_t)v19, v20);
  __chkstk_darwin(v6);
  id v8 = (uint64_t *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  uint64_t v10 = sub_10005BA08((uint64_t)v16, v17);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  id v14 = sub_10005B698(*v8, (uint64_t)v12, v5);
  sub_10002EB9C((uint64_t)v16);
  sub_10002EB9C((uint64_t)v19);
  return v14;
}

uint64_t sub_10005B948(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCStreamListener();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005B9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for XPCStreamListener();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005BA08(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10005BA64()
{
  return v0;
}

uint64_t sub_10005BA78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for URLRequest();
  v4[6] = v5;
  sub_100031774(v5);
  v4[7] = v6;
  v4[8] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL();
  v4[9] = v7;
  sub_100031774(v7);
  v4[10] = v8;
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_10005BB60, 0, 0);
}

uint64_t sub_10005BB60()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void (**)(void, uint64_t, void))(v0[10] + 16);
  v2(v0[12], v1, v0[9]);
  uint64_t v3 = type metadata accessor for RavioliRequestFactory();
  v0[13] = v3;
  if (*(void *)(v1 + *(int *)(v3 + 28) + 8))
  {
    sub_10002E768(&qword_100698028);
    uint64_t v4 = type metadata accessor for URLQueryItem();
    sub_100031774(v4);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_10058CEC0;
    URLQueryItem.init(name:value:)();
    URL.append(queryItems:)((Swift::OpaquePointer)v5);
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (void *)v0[4];
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[3];
  v2(v0[11], v0[12], v0[9]);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  v9._unint64_t countAndFlagsBits = v8;
  v9._object = v6;
  v10._unint64_t countAndFlagsBits = 0x692D656C646E7562;
  v10._object = (void *)0xE900000000000064;
  URLRequest.addValue(_:forHTTPHeaderField:)(v9, v10);
  uint64_t v11 = (void *)(v7 + *(int *)(v3 + 20));
  uint64_t v12 = v11[3];
  uint64_t v13 = v11[4];
  sub_10002EAE0(v11, v12);
  id v14 = (void *)swift_task_alloc();
  v0[14] = v14;
  void *v14 = v0;
  v14[1] = sub_10005BD70;
  return dispatch thunk of DeviceInformationProvider.clientInfoHeader()(v12, v13);
}

uint64_t sub_10005BD70()
{
  sub_1000336EC();
  *(void *)(v2 + 120) = v0;
  *(void *)(v2 + 128) = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10005BE4C, 0, 0);
}

uint64_t sub_10005BE4C()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 40);
  v3._object = (void *)0x800000010056A220;
  v3._unint64_t countAndFlagsBits = 0xD000000000000013;
  URLRequest.addValue(_:forHTTPHeaderField:)(*(Swift::String *)(v0 + 120), v3);
  swift_bridgeObjectRelease();
  int v4 = *(unsigned __int8 *)(v2 + *(int *)(v1 + 32) + 26);
  if (v4 != 2 && (v4 & 1) == 0)
  {
    uint64_t v13 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 48);
    uint64_t v15 = *(void *)(v0 + 16);
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v15, v12, v14);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    uint64_t v6 = (void *)(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 104) + 24));
    uint64_t v7 = v6[3];
    uint64_t v8 = v6[4];
    sub_10002EAE0(v6, v7);
    Swift::String v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v9;
    void *v9 = v0;
    v9[1] = sub_10005C000;
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 16);
    return dispatch thunk of AccountRequestHeaderProvider.applyAuthorisationHeaders(toRequest:)(v11, v10, v7, v8);
  }
}

uint64_t sub_10005C000()
{
  sub_1000336EC();
  *(void *)(v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10005C1A8;
  }
  else {
    uint64_t v2 = sub_10005C0F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005C0F0()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10005C1A8()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t type metadata accessor for RavioliRequestFactory()
{
  uint64_t result = qword_100698D08;
  if (!qword_100698D08) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_10005C2B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    uint64_t v10 = a3[6];
    long long v11 = *(_OWORD *)((char *)a2 + v10 + 24);
    *(_OWORD *)((char *)a1 + v10 + 24) = v11;
    (**(void (***)(void))(v11 - 8))();
    uint64_t v12 = a3[7];
    uint64_t v13 = a3[8];
    uint64_t v14 = (uint64_t *)((char *)a1 + v12);
    uint64_t v15 = (uint64_t *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = (char *)a1 + v13;
    uint64_t v18 = (char *)a2 + v13;
    uint64_t v19 = *((void *)v18 + 1);
    *(void *)uint64_t v17 = *(void *)v18;
    *((void *)v17 + 1) = v19;
    *((void *)v17 + 2) = *((void *)v18 + 2);
    *((_DWORD *)v17 + 6) = *((_DWORD *)v18 + 6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10005C458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_10002EB9C(a1 + *(int *)(a2 + 20));
  sub_10002EB9C(a1 + *(int *)(a2 + 24));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10005C4F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  long long v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  uint64_t v9 = a3[6];
  long long v10 = *(_OWORD *)(a2 + v9 + 24);
  *(_OWORD *)(a1 + v9 + 24) = v10;
  (**(void (***)(void))(v10 - 8))();
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = a1 + v12;
  uint64_t v17 = a2 + v12;
  uint64_t v18 = *(void *)(v17 + 8);
  *(void *)uint64_t v16 = *(void *)v17;
  *(void *)(v16 + 8) = v18;
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  *(_DWORD *)(v16 + 24) = *(_DWORD *)(v17 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10005C650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  sub_10005C760((uint64_t *)(a1 + a3[5]), (uint64_t *)(a2 + a3[5]));
  sub_10005C760((uint64_t *)(a1 + a3[6]), (uint64_t *)(a2 + a3[6]));
  uint64_t v7 = a3[7];
  long long v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *long long v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v12 + 16);
  *(unsigned char *)(v11 + 24) = *(unsigned char *)(v12 + 24);
  *(void *)(v11 + 16) = v13;
  *(unsigned char *)(v11 + 25) = *(unsigned char *)(v12 + 25);
  *(unsigned char *)(v11 + 26) = *(unsigned char *)(v12 + 26);
  *(unsigned char *)(v11 + 27) = *(unsigned char *)(v12 + 27);
  return a1;
}

uint64_t *sub_10005C760(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_10005C990(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  long long v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  uint64_t v15 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v16 = (_OWORD *)(a1 + v15);
  uint64_t v17 = (_OWORD *)(a2 + v15);
  *uint64_t v16 = *v17;
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)v17 + 12);
  return a1;
}

uint64_t sub_10005CA58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_10002EB9C(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  sub_10002EB9C(a1 + v11);
  long long v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = *(void *)(v22 + 8);
  *(void *)uint64_t v21 = *(void *)v22;
  *(void *)(v21 + 8) = v23;
  swift_bridgeObjectRelease();
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  *(_DWORD *)(v21 + 24) = *(_DWORD *)(v22 + 24);
  return a1;
}

uint64_t sub_10005CB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005CB74);
}

uint64_t sub_10005CB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for URL();
  sub_10005CD50();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_1000312BC(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_10005CC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005CC18);
}

void sub_10005CC18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for URL();
  sub_10005CD50();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_10003349C(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
}

uint64_t sub_10005CCA4()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10005CD68(void *a1)
{
  return sub_1000A66F8();
}

uint64_t sub_10005CD94()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ASAnalyticsManager()
{
  return self;
}

uint64_t sub_10005CDC8()
{
  type metadata accessor for ASAnalyticsManager();
  swift_allocObject();
  uint64_t v0 = (uint64_t *)swift_retain();
  id v1 = sub_10005D99C(v0);
  uint64_t result = swift_release();
  static ASXPCActivityManager.shared = (uint64_t)v1;
  return result;
}

uint64_t *ASXPCActivityManager.shared.unsafeMutableAddressor()
{
  if (qword_100697910 != -1) {
    swift_once();
  }
  return &static ASXPCActivityManager.shared;
}

id static ASXPCActivityManager.shared.getter()
{
  if (qword_100697910 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static ASXPCActivityManager.shared;

  return v0;
}

uint64_t sub_10005CEE8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_100698DE8);
  sub_100031284(v0, (uint64_t)qword_100698DE8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10005CF74(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ASXPCActivityManager();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10005DAF8;
  return sub_10005D024(a1, a2);
}

uint64_t sub_10005D024(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  v2[4] = type metadata accessor for ASAnalyticsEvent();
  v2[5] = swift_task_alloc();
  return _swift_task_switch(sub_10005D0B8, 0, 0);
}

uint64_t sub_10005D0B8()
{
  if (qword_100697910 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10005DB18(static ASXPCActivityManager.shared);
  sub_1000AE9B8(v1);
  sub_10005171C(v1);
  if (qword_100697918 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100031284(v2, (uint64_t)qword_100698DE8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_100051C8C((void *)&_mh_execute_header, v5, v6, "Triggering due pregenerate tasks");
    swift_slowDealloc();
  }

  if (qword_1006978F0 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  void *v7 = v0;
  v7[1] = sub_10005D294;
  return PrecomputationManager.triggerDuePrecomputations(dataProtectionClass:shouldDefer:)();
}

uint64_t sub_10005D294()
{
  sub_10005DAFC();
  uint64_t v4 = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v4 + 8);
  return v2(v0);
}

uint64_t sub_10005D384(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ASXPCActivityManager();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10005D434;
  return sub_10005D508(a1, a2);
}

uint64_t sub_10005D434()
{
  sub_10005DAFC();
  uint64_t v4 = *v1;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v4 + 8);
  return v2(v0);
}

uint64_t sub_10005D508(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  v2[4] = type metadata accessor for ASAnalyticsEvent();
  v2[5] = swift_task_alloc();
  return _swift_task_switch(sub_10005D59C, 0, 0);
}

uint64_t sub_10005D59C()
{
  if (qword_100697910 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 40);
  sub_10005DB18(static ASXPCActivityManager.shared);
  sub_1000AE9B8(v1);
  sub_10005171C(v1);
  if (qword_100697918 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100031284(v2, (uint64_t)qword_100698DE8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_100051C8C((void *)&_mh_execute_header, v5, v6, "Triggering due precomputation tasks");
    swift_slowDealloc();
  }

  if (qword_1006978F0 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  void *v7 = v0;
  v7[1] = sub_10005DAF4;
  return PrecomputationManager.triggerDuePrecomputations(dataProtectionClass:shouldDefer:)();
}

void ASXPCActivityManager.register(activity:)(uint64_t a1)
{
  uint64_t v2 = 0xD000000000000011;
  id v3 = [objc_allocWithZone((Class)type metadata accessor for ASBackgroundActivityManager()) init];
  os_log_type_t v4 = &unk_100698E08;
  if (a1)
  {
    if (a1 != 1)
    {
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return;
    }
    unint64_t v5 = 0x800000010056A260;
    os_log_type_t v4 = &unk_100698E00;
  }
  else
  {
    uint64_t v2 = 0xD000000000000013;
    unint64_t v5 = 0x800000010056A280;
  }
  id v6 = v3;
  ASBackgroundActivityManager.registerActivity(identifier:activity:)(v2, v5, (uint64_t)v4, 0);
  swift_bridgeObjectRelease();
}

void ASXPCActivityManager.init()()
{
}

unint64_t sub_10005D90C()
{
  unint64_t result = qword_100698E10;
  if (!qword_100698E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698E10);
  }
  return result;
}

uint64_t type metadata accessor for ASXPCActivityManager()
{
  return self;
}

ValueMetadata *type metadata accessor for ASXPCActivityManager.Activity()
{
  return &type metadata for ASXPCActivityManager.Activity;
}

id sub_10005D99C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  v13[3] = v1;
  void v13[4] = &off_100661050;
  v13[0] = a1;
  uint64_t v2 = (objc_class *)type metadata accessor for ASXPCActivityManager();
  id v3 = objc_allocWithZone(v2);
  uint64_t v4 = sub_10005BA08((uint64_t)v13, v1);
  __chkstk_darwin(v4);
  id v6 = (uint64_t *)((char *)&v11 - v5);
  (*(void (**)(char *))(v7 + 16))((char *)&v11 - v5);
  uint64_t v8 = *v6;
  void v12[3] = v1;
  v12[4] = &off_100661050;
  v12[0] = v8;
  sub_10002EA7C((uint64_t)v12, (uint64_t)v3 + OBJC_IVAR____TtC3asd20ASXPCActivityManager_analyticsManager);
  v11.receiver = v3;
  v11.super_class = v2;
  id v9 = [super init];
  sub_10002EB9C((uint64_t)v12);
  sub_10002EB9C((uint64_t)v13);
  return v9;
}

uint64_t sub_10005DB18@<X0>(uint64_t a1@<X8>)
{
  sub_10002EAE0((void *)(a1 + v1), *(void *)(a1 + v1 + 24));
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_10005DB54@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v98 = a2;
  uint64_t v4 = sub_10002E768(&qword_100698E58);
  __chkstk_darwin(v4 - 8);
  sub_10005EDC4();
  uint64_t v94 = v5;
  __chkstk_darwin(v6);
  unint64_t v90 = (char *)&v84 - v7;
  type metadata accessor for DsidType();
  sub_100045FF4();
  uint64_t v92 = v9;
  uint64_t v93 = v8;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  long long v14 = (char *)&v84 - v13;
  uint64_t v15 = type metadata accessor for AssessmentConfig();
  sub_100045FF4();
  uint64_t v95 = v16;
  __chkstk_darwin(v17);
  sub_10005EDC4();
  uint64_t v91 = v18;
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v84 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v84 - v23;
  AugmentedProfile.profile.getter();
  uint64_t v97 = Data.init(base64Encoded:options:)();
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  unint64_t v96 = v26;
  if (v26 >> 60 == 15) {
    goto LABEL_5;
  }
  uint64_t v89 = v15;
  uint64_t v27 = a1;
  AugmentedProfile.profileInfo.getter();
  if (!v28 || (uint64_t v29 = Data.init(base64Encoded:options:)(), v31 = v30, swift_bridgeObjectRelease(), v31 >> 60 == 15))
  {
    sub_10002EC58(v97, v96);
    a1 = v27;
LABEL_5:
    sub_10005E2E0();
    swift_allocError();
    unsigned char *v32 = 0;
    swift_willThrow();
LABEL_6:
    type metadata accessor for AugmentedProfile();
    sub_10005EDB8();
    return (*(uint64_t (**)(uint64_t))(v33 + 8))(a1);
  }
  uint64_t v87 = v29;
  unint64_t v88 = v31;
  uint64_t v86 = v2;
  sub_10005E32C();
  unint64_t v36 = v96;
  uint64_t v35 = v97;
  sub_10002FBFC(v97, v96);
  id v37 = sub_10005E36C(v35, v36);
  if (!v37)
  {
    sub_10005E2E0();
    swift_allocError();
    unsigned char *v47 = 2;
    swift_willThrow();
    sub_10002EC58(v87, v88);
    sub_10002EC58(v35, v36);
    a1 = v27;
    goto LABEL_6;
  }
  uint64_t v38 = v98;
  uint64_t v39 = v87;
  unint64_t v40 = v88;
  *uint64_t v98 = v37;
  v38[1] = v39;
  v38[2] = v40;
  id v41 = v37;
  sub_10005E3E4(v39, v40);
  uint64_t v42 = v27;
  uint64_t v43 = AugmentedProfile.assessmentConfig.getter();
  id v85 = v41;
  if (v43)
  {
    sub_10005EDA0();
    swift_release();
    long long v44 = (void *)AssessmentConfig.bindingsToCompare.getter();
    uint64_t v45 = v95;
    uint64_t v46 = v89;
    (*(void (**)(char *, uint64_t))(v95 + 8))(v24, v89);
  }
  else
  {
    long long v44 = _swiftEmptyArrayStorage;
    uint64_t v46 = v89;
    uint64_t v45 = v95;
  }
  v98[3] = v44;
  uint64_t v48 = AugmentedProfile.assessmentConfig.getter();
  if (v48)
  {
    JWSSignedJSON.payload.getter();
    swift_release();
    uint64_t v48 = AssessmentConfig.refreshTtl.getter();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v24, v46);
  }
  v98[4] = v48;
  if (AugmentedProfile.assessmentConfig.getter())
  {
    sub_10005EDA0();
    swift_release();
    uint64_t v49 = AssessmentConfig.bindingsDictSource.getter();
    uint64_t v50 = sub_10005ED84();
    v51(v50);
  }
  else
  {
    sub_10002E768(&qword_100698E70);
    uint64_t v49 = Dictionary.init(dictionaryLiteral:)();
  }
  v98[5] = v49;
  if (AugmentedProfile.assessmentConfig.getter())
  {
    sub_10005EDA0();
    swift_release();
    AssessmentConfig.primaryDSID.getter();
    uint64_t v52 = sub_10005ED84();
    v53(v52);
    uint64_t v55 = v92;
    uint64_t v54 = v93;
    (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v14, v12, v93);
  }
  else
  {
    uint64_t v55 = v92;
    uint64_t v54 = v93;
    (*(void (**)(char *, void, uint64_t))(v92 + 104))(v14, enum case for DsidType.iCloud(_:), v93);
  }
  uint64_t v56 = (int *)type metadata accessor for ProfileContent();
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))((char *)v98 + v56[9], v14, v54);
  uint64_t v57 = AugmentedProfile.assessmentConfig.getter();
  if (v57)
  {
    JWSSignedJSON.payload.getter();
    swift_release();
    uint64_t v58 = (uint64_t)v90;
    AssessmentConfig.destinations.getter();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v89);
    uint64_t v59 = type metadata accessor for AssessmentServerDestinations();
    if (sub_1000312BC(v58, 1, v59) == 1)
    {
      sub_10005E440(v58);
      uint64_t v57 = 0;
      uint64_t v60 = 0;
    }
    else
    {
      uint64_t v57 = AssessmentServerDestinations.tsidEncryptionCert.getter();
      uint64_t v60 = v63;
      sub_10005EDB8();
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v58, v59);
    }
    uint64_t v61 = v97;
    uint64_t v62 = v89;
    uint64_t v45 = v95;
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v61 = v97;
    uint64_t v62 = v89;
  }
  uint64_t v65 = (void *)((char *)v98 + v56[10]);
  *uint64_t v65 = v57;
  v65[1] = v60;
  if (AugmentedProfile.assessmentConfig.getter())
  {
    sub_10005EDA0();
    swift_release();
    char v66 = AssessmentConfig.useSendOTD.getter();
    uint64_t v67 = sub_10005ED84();
    v68(v67);
  }
  else
  {
    char v66 = 1;
  }
  uint64_t v69 = v94;
  unint64_t v70 = v96;
  *((unsigned char *)v98 + v56[11]) = v66 & 1;
  uint64_t v71 = AugmentedProfile.assessmentConfig.getter();
  if (v71)
  {
    uint64_t v72 = v91;
    JWSSignedJSON.payload.getter();
    swift_release();
    AssessmentConfig.destinations.getter();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v72, v62);
    uint64_t v73 = type metadata accessor for AssessmentServerDestinations();
    if (sub_1000312BC(v69, 1, v73) == 1)
    {
      sub_10005E440(v69);
      uint64_t v71 = 0;
      uint64_t v74 = 0;
    }
    else
    {
      uint64_t v71 = AssessmentServerDestinations.otd.getter();
      uint64_t v74 = v75;
      sub_10005EDB8();
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v69, v73);
    }
    uint64_t v61 = v97;
  }
  else
  {
    uint64_t v74 = 0;
  }
  int64_t v77 = v98;
  uint64_t v78 = (void *)((char *)v98 + v56[12]);
  *uint64_t v78 = v71;
  v78[1] = v74;
  uint64_t v79 = AugmentedProfile.profileID.getter();
  uint64_t v81 = v80;
  sub_10002EC58(v87, v88);

  sub_10002EC58(v61, v70);
  type metadata accessor for AugmentedProfile();
  sub_10005EDB8();
  uint64_t result = (*(uint64_t (**)(uint64_t))(v82 + 8))(v42);
  uint64_t v83 = (void *)((char *)v77 + v56[13]);
  *uint64_t v83 = v79;
  v83[1] = v81;
  return result;
}

unint64_t sub_10005E2E0()
{
  unint64_t result = qword_100698E60;
  if (!qword_100698E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698E60);
  }
  return result;
}

unint64_t sub_10005E32C()
{
  unint64_t result = qword_100698E68;
  if (!qword_100698E68)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100698E68);
  }
  return result;
}

id sub_10005E36C(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 initWithData:isa];
  sub_10002EC6C(a1, a2);

  return v6;
}

uint64_t sub_10005E3E4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10002FBFC(a1, a2);
  }
  return a1;
}

uint64_t type metadata accessor for ProfileContent()
{
  uint64_t result = qword_100698ED0;
  if (!qword_100698ED0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10005E440(uint64_t a1)
{
  uint64_t v2 = sub_10002E768(&qword_100698E58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10005E4A0(char *a1, char **a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v8 = (uint64_t)a2[1];
    unint64_t v9 = (unint64_t)a2[2];
    uint64_t v10 = v5;
    sub_10002FBFC(v8, v9);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v9;
    uint64_t v11 = a2[4];
    *((void *)a1 + 3) = a2[3];
    *((void *)a1 + 4) = v11;
    *((void *)a1 + 5) = a2[5];
    uint64_t v12 = a3[9];
    uint64_t v13 = &a1[v12];
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for DsidType();
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    uint64_t v17 = a3[10];
    uint64_t v18 = a3[11];
    uint64_t v19 = &a1[v17];
    uint64_t v20 = (char **)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    *(void *)uint64_t v19 = *v20;
    *((void *)v19 + 1) = v21;
    a1[v18] = *((unsigned char *)a2 + v18);
    uint64_t v22 = a3[12];
    uint64_t v23 = a3[13];
    uint64_t v24 = &a1[v22];
    unint64_t v25 = (char **)((char *)a2 + v22);
    uint64_t v26 = v25[1];
    *(void *)uint64_t v24 = *v25;
    *((void *)v24 + 1) = v26;
    uint64_t v27 = &a1[v23];
    uint64_t v28 = (char **)((char *)a2 + v23);
    uint64_t v29 = v28[1];
    *(void *)uint64_t v27 = *v28;
    *((void *)v27 + 1) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10005E614(uint64_t a1, uint64_t a2)
{
  sub_10002EC6C(*(void *)(a1 + 8), *(void *)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for DsidType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10005E6DC(void *a1, uint64_t a2, int *a3)
{
  id v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  unint64_t v8 = *(void *)(a2 + 16);
  id v9 = v6;
  sub_10002FBFC(v7, v8);
  a1[1] = v7;
  a1[2] = v8;
  uint64_t v10 = *(void *)(a2 + 32);
  a1[3] = *(void *)(a2 + 24);
  a1[4] = v10;
  a1[5] = *(void *)(a2 + 40);
  uint64_t v11 = a3[9];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DsidType();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  uint64_t v16 = a3[10];
  uint64_t v17 = a3[11];
  uint64_t v18 = (void *)((char *)a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  *((unsigned char *)a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v21 = a3[12];
  uint64_t v22 = a3[13];
  uint64_t v23 = (void *)((char *)a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = (void *)((char *)a1 + v22);
  uint64_t v27 = (void *)(a2 + v22);
  uint64_t v28 = v27[1];
  void *v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10005E808(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(a2 + 8);
  unint64_t v10 = *(void *)(a2 + 16);
  sub_10002FBFC(v9, v10);
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v10;
  sub_10002EC6C(v11, v12);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for DsidType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v20 = a3[12];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[13];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  void *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10005E984(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DsidType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_10005EA50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10002EC6C(v7, v8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for DsidType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[10];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  void *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[13];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10005EB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005EB84);
}

uint64_t sub_10005EB84(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DsidType();
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 36);
    return sub_1000312BC(v9, a2, v8);
  }
}

uint64_t sub_10005EC0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005EC20);
}

void *sub_10005EC20(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DsidType();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 36);
    return (void *)sub_10003349C(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_10005ECA0()
{
  uint64_t result = type metadata accessor for DsidType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10005ED84()
{
  return v0;
}

uint64_t sub_10005EDA0()
{
  return JWSSignedJSON.payload.getter();
}

uint64_t sub_10005EDD8(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BindingsStore.Binding(0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100065794(v3);
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v7[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v7[1] = v5;
  uint64_t result = sub_10006433C(v7);
  *a1 = v3;
  return result;
}

void sub_10005EE80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000A52F8();
    uint64_t v3 = sub_1000657D4(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(a1 + 32))
      {
        int v6 = v4;
        uint64_t v7 = a1 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v8 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
          uint64_t v9 = v8[1];
          uint64_t v14 = v1;
          uint64_t v15 = *v8;
          uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 16 * v5);
          unint64_t v11 = _swiftEmptyArrayStorage[2];
          unint64_t v10 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain();
          if (v11 >= v10 >> 1) {
            sub_1000A52F8();
          }
          _swiftEmptyArrayStorage[2] = v11 + 1;
          uint64_t v12 = &_swiftEmptyArrayStorage[3 * v11];
          v12[4] = v15;
          void v12[5] = v9;
          v12[6] = v16;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_19;
          }
          uint64_t v7 = a1 + 64;
          if ((*(void *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v13 = _HashTable.occupiedBucket(after:)();
          uint64_t v1 = v14 - 1;
          if (v14 == 1) {
            return;
          }
          unint64_t v5 = v13;
          if ((v13 & 0x8000000000000000) == 0)
          {
            int v6 = *(_DWORD *)(a1 + 36);
            if (v13 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

void sub_10005F054(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000A52F8();
    uint64_t v3 = sub_1000657D4(a1);
    if ((v3 & 0x8000000000000000) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1 << *(unsigned char *)(a1 + 32))
      {
        int v6 = v4;
        uint64_t v7 = a1 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v8 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
          uint64_t v9 = v8[1];
          uint64_t v14 = v1;
          uint64_t v15 = *v8;
          uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 16 * v5 + 8);
          unint64_t v11 = _swiftEmptyArrayStorage[2];
          unint64_t v10 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain();
          if (v11 >= v10 >> 1) {
            sub_1000A52F8();
          }
          _swiftEmptyArrayStorage[2] = v11 + 1;
          uint64_t v12 = &_swiftEmptyArrayStorage[3 * v11];
          v12[4] = v15;
          void v12[5] = v9;
          v12[6] = v16;
          if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
            goto LABEL_19;
          }
          uint64_t v7 = a1 + 64;
          if ((*(void *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
            goto LABEL_20;
          }
          if (v6 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v13 = _HashTable.occupiedBucket(after:)();
          uint64_t v1 = v14 - 1;
          if (v14 == 1) {
            return;
          }
          unint64_t v5 = v13;
          if ((v13 & 0x8000000000000000) == 0)
          {
            int v6 = *(_DWORD *)(a1 + 36);
            if (v13 < 1 << *(unsigned char *)(a1 + 32)) {
              continue;
            }
          }
          goto LABEL_22;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }
LABEL_22:
    __break(1u);
  }
}

uint64_t sub_10005F228(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for BindingsStore.Binding(0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v22 = *(void *)(a3 + 16);
  if (v22)
  {
    unint64_t v14 = 0;
    uint64_t v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    uint64_t v21 = a3;
    v20[0] = a1;
    while (v14 < *(void *)(a3 + 16))
    {
      unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      uint64_t v13 = *(void **)(v24 + 72);
      sub_1000641F8(a3 + v16 + (void)v13 * v14, (uint64_t)v12);
      char v17 = a1(v12);
      if (v3)
      {
        sub_1000642C0((uint64_t)v12);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }
      if (v17)
      {
        sub_10006425C((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000A5348(0, v15[2] + 1, 1);
        }
        uint64_t v15 = v25;
        unint64_t v19 = v25[2];
        unint64_t v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000A5348(v18 > 1, v19 + 1, 1);
          uint64_t v15 = v25;
        }
        v15[2] = v19 + 1;
        uint64_t result = sub_10006425C(v23, (uint64_t)v15 + v16 + v19 * (void)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        uint64_t result = sub_1000642C0((uint64_t)v12);
      }
      if (v22 == ++v14)
      {
        uint64_t v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  return result;
}

void *sub_10005F45C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002E768(&qword_100699150);
    uint64_t v1 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v1 = &_swiftEmptyDictionarySingleton;
  }
  int v4 = v1;
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_10006547C(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10005F508(uint64_t a1)
{
  uint64_t v3 = v1;
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  sub_100065BA0();
  swift_defaultActor_initialize();
  Logger.init(subsystem:category:)();
  uint64_t v5 = OBJC_IVAR____TtC3asd13BindingsStore_persister;
  *(void *)(v1 + v5) = [self sharedInstance];
  sub_100065A20(a1, v2 + 56, &qword_1006991F8);
  if (*(void *)(v2 + 80))
  {
    sub_1000311A4((long long *)(v2 + 56), v2 + 16);
  }
  else
  {
    *(void *)(v2 + 40) = &type metadata for BindingsConfigResolver;
    *(void *)(v2 + 48) = &off_1006610C0;
    sub_1000518D8(v2 + 56, &qword_1006991F8);
  }
  sub_1000311A4((long long *)(v2 + 16), v1 + 120);
  id v6 = [*(id *)(v1 + OBJC_IVAR____TtC3asd13BindingsStore_persister) fetchAllBindings];
  sub_1000362B0(0, &qword_100699180);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10005F754();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  *(void *)(v3 + 112) = v8;
  return _swift_task_switch(sub_10005F6E0, v3, 0);
}

uint64_t sub_10005F6E0()
{
  uint64_t v1 = v0[12];
  sub_10006240C();
  sub_1000518D8(v1, &qword_1006991F8);
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v3 = v0[13];
  return v2(v3);
}

void sub_10005F754()
{
  sub_100065B08();
  uint64_t v1 = v0;
  unint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Logger();
  sub_100045FF4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100046338();
  uint64_t isUniquelyReferenced_nonNull_native = v9 - v8;
  type metadata accessor for BindingsStore.Binding(0);
  sub_100045FF4();
  uint64_t v81 = v12;
  uint64_t v82 = v11;
  __chkstk_darwin(v11);
  sub_10005EDC4();
  uint64_t v78 = v13;
  sub_100065DA4();
  __chkstk_darwin(v14);
  unint64_t v90 = (void *)((char *)v76 - v15);
  uint64_t v16 = sub_10002E768(&qword_100699200);
  __chkstk_darwin(v16 - 8);
  sub_100046338();
  uint64_t v83 = v4;
  uint64_t v84 = v18 - v17;
  sub_10003349C(v18 - v17, 1, 1, v4);
  unint64_t v89 = v3;
  if (v3 >> 62)
  {
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19) {
      goto LABEL_3;
    }
LABEL_36:
    swift_bridgeObjectRelease();
    sub_1000518D8(v84, &qword_100699200);
    sub_100065AF0();
    return;
  }
  uint64_t v19 = *(void *)((v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v19) {
    goto LABEL_36;
  }
LABEL_3:
  unint64_t v88 = v89 & 0xC000000000000001;
  uint64_t v80 = v6 + 8;
  uint64_t v20 = &_swiftEmptyDictionarySingleton;
  uint64_t v21 = 4;
  *((void *)&v22 + 1) = 2;
  long long v79 = xmmword_10058CEC0;
  *(void *)&long long v22 = 136315394;
  long long v77 = v22;
  v76[1] = (char *)&type metadata for Any + 8;
  uint64_t v85 = v1;
  uint64_t v86 = isUniquelyReferenced_nonNull_native;
  uint64_t v87 = v19;
  while (1)
  {
    uint64_t v6 = v21 - 4;
    if (v88) {
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v23 = *(id *)(v89 + 8 * v21);
    }
    uint64_t v24 = v23;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v91 = v21 - 3;
    uint64_t v92 = v21;
    id v25 = [v23 value];
    uint64_t v26 = sub_1000362B0(0, &qword_1006989B0);
    v93[3] = v26;
    v93[0] = (uint64_t)v25;
    id v27 = v25;
    char v28 = sub_100060070((uint64_t)v93);
    sub_10002EB9C((uint64_t)v93);
    if ((v28 & 1) == 0)
    {
      sub_10005FE9C(v84, isUniquelyReferenced_nonNull_native);
      id v41 = v27;
      id v42 = v24;
      id v43 = v41;
      id v44 = v42;
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = swift_slowAlloc();
        v93[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v47 = v77;
        id v48 = [v44 key];
        uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v51 = v50;

        *(void *)(v47 + 4) = sub_100032B48(v49, v51, v93);
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2080;
        id v52 = [(id)swift_getObjCClassFromObject() description];
        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v55 = v54;

        uint64_t v56 = v53;
        uint64_t v1 = v85;
        *(void *)(v47 + 14) = sub_100032B48(v56, v55, v93);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Skipping binding due to value of unexpected type. key: %s type: %s", (uint8_t *)v47, 0x16u);
        swift_arrayDestroy();
        sub_100033704();
        uint64_t isUniquelyReferenced_nonNull_native = v86;
        sub_100033704();
      }
      else
      {
      }
      sub_10003F240();
      v71();
      goto LABEL_30;
    }
    uint64_t v29 = v90;
    v90[3] = v26;
    v29[4] = sub_1000659C0();
    *uint64_t v29 = v27;
    id v30 = v27;
    id v31 = [v24 updated];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v32 = [v24 key];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    if (v20[2] && (unint64_t v36 = sub_100055F1C(v33, v35), (v37 & 1) != 0))
    {
      uint64_t v38 = *(void *)(v20[7] + 8 * v36);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1000641F8((uint64_t)v90, v78);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v38 = sub_100065C6C();
      }
      unint64_t v40 = *(void *)(v38 + 16);
      unint64_t v39 = *(void *)(v38 + 24);
      if (v40 >= v39 >> 1) {
        uint64_t v38 = sub_10003BD5C(v39 > 1, v40 + 1, 1, v38);
      }
      *(void *)(v38 + 16) = v40 + 1;
      sub_10006425C(v78, v38+ ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80))+ *(void *)(v81 + 72) * v40);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10002E768(&qword_100699140);
      unint64_t v57 = (*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = v79;
      sub_1000641F8((uint64_t)v90, v38 + v57);
    }
    id v58 = [v24 key];
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v60 = v59;

    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v93[0] = (uint64_t)v20;
    unint64_t v61 = sub_100055F1C(v6, v60);
    uint64_t v63 = v20[2];
    BOOL v64 = (v62 & 1) == 0;
    Swift::Int v65 = v63 + v64;
    if (__OFADD__(v63, v64)) {
      goto LABEL_33;
    }
    unint64_t v66 = v61;
    uint64_t v1 = v62;
    sub_10002E768(&qword_100699130);
    Swift::Bool v67 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v65);
    uint64_t isUniquelyReferenced_nonNull_native = v86;
    if (v67) {
      break;
    }
LABEL_23:
    uint64_t v20 = (void *)v93[0];
    if (v1)
    {
      uint64_t v70 = *(void *)(v93[0] + 56);
      swift_bridgeObjectRelease();
      *(void *)(v70 + 8 * v66) = v38;
    }
    else
    {
      *(void *)(v93[0] + 8 * (v66 >> 6) + 64) |= 1 << v66;
      uint64_t v72 = (uint64_t *)(v20[6] + 16 * v66);
      *uint64_t v72 = v6;
      v72[1] = v60;
      *(void *)(v20[7] + 8 * v66) = v38;
      uint64_t v73 = v20[2];
      BOOL v74 = __OFADD__(v73, 1);
      uint64_t v75 = v73 + 1;
      if (v74) {
        goto LABEL_34;
      }
      void v20[2] = v75;
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000642C0((uint64_t)v90);
    uint64_t v1 = v85;
LABEL_30:
    uint64_t v21 = v92 + 1;
    if (v91 == v87) {
      goto LABEL_36;
    }
  }
  unint64_t v68 = sub_100055F1C(v6, v60);
  if ((v1 & 1) == (v69 & 1))
  {
    unint64_t v66 = v68;
    goto LABEL_23;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_10005FE9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10002E768(&qword_100699200);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v12 - v8;
  sub_100065A20(a1, (uint64_t)&v12 - v8, &qword_100699200);
  uint64_t v10 = type metadata accessor for Logger();
  if (sub_1000312BC((uint64_t)v9, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a2, v9, v10);
  }
  sub_1000518D8((uint64_t)v9, &qword_100699200);
  Logger.init(subsystem:category:)();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v7, a2, v10);
  sub_10003349C((uint64_t)v7, 0, 1, v10);
  swift_beginAccess();
  return sub_100065A78((uint64_t)v7, a1);
}

uint64_t sub_100060070(uint64_t a1)
{
  sub_1000333E4(a1, (uint64_t)v7);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    sub_1000333E4(a1, (uint64_t)v7);
    sub_10002EB9C((uint64_t)v7);
LABEL_4:
    sub_1000333E4(a1, (uint64_t)v6);
    sub_10002EB9C((uint64_t)v6);
LABEL_5:
    sub_1000333E4(a1, (uint64_t)v5);
    sub_10002EB9C((uint64_t)v5);
    goto LABEL_6;
  }
  sub_1000333E4(a1, (uint64_t)v7);
  sub_100057638(v7, v6);
  if (swift_dynamicCast()) {
    goto LABEL_4;
  }
  sub_1000333E4(a1, (uint64_t)v6);
  sub_100057638(v6, v5);
  if (swift_dynamicCast()) {
    goto LABEL_5;
  }
  sub_1000333E4(a1, (uint64_t)v5);
  sub_100057638(v5, v4);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_1000333E4(a1, (uint64_t)v4);
    sub_100057638(v4, &v3);
    return swift_dynamicCast();
  }
LABEL_6:
  sub_1000333E4(a1, (uint64_t)v4);
  sub_10002EB9C((uint64_t)v4);
  return 1;
}

void sub_100060218()
{
  sub_100065B08();
  uint64_t v1 = v0;
  type metadata accessor for Date();
  sub_100045FF4();
  __chkstk_darwin(v2);
  sub_100065B8C();
  if (qword_100697968 == -1) {
    goto LABEL_2;
  }
LABEL_42:
  swift_once();
LABEL_2:
  sub_100051F9C();
  id v3 = (id)static ASDConfigurationManager.shared;
  sub_1000950DC(v47);

  sub_100065884((uint64_t)v47, (uint64_t)v52, &qword_100697F08);
  if (v52[5] == 1 || (v4 = v53, uint64_t v5 = v54, sub_1000516DC((uint64_t)v53), sub_100036138((uint64_t *)v47), !v4))
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v6 = sub_100065B6C();
    sub_100065B6C();
    swift_bridgeObjectRelease();
    sub_1000361F8(0);
  }
  else
  {
    uint64_t v6 = v5;
  }
  uint64_t v7 = sub_10003FCEC((uint64_t)v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005EE80(v7);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  sub_10005F45C(v9);
  id v10 = (id)static ASDConfigurationManager.shared;
  sub_1000950DC(v48);

  sub_100065884((uint64_t)v48, (uint64_t)v49, &qword_100697F08);
  if (v49[5] == 1 || (v11 = v50, uint64_t v12 = v51, sub_1000516DC((uint64_t)v50), sub_100036138((uint64_t *)v48), !v11))
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
    uint64_t v13 = sub_100065B6C();
    sub_100065B6C();
    swift_bridgeObjectRelease();
    sub_1000361F8(0);
  }
  else
  {
    uint64_t v13 = v12;
  }
  uint64_t v14 = sub_10003FCEC((uint64_t)v11, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005F054(v14);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  sub_10005F45C(v16);
  static Date.now.getter();
  uint64_t v40 = v1 + 64;
  sub_100065B20();
  unint64_t v19 = v18 & v17;
  int64_t v41 = (unint64_t)(v20 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v21 = 0;
  if (v19)
  {
LABEL_11:
    unint64_t v22 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v23 = v22 | (v21 << 6);
LABEL_12:
    uint64_t v24 = *(void *)(v1 + 56);
    id v25 = (void *)(*(void *)(v1 + 48) + 16 * v23);
    uint64_t v26 = v25[1];
    *(void *)&long long v43 = *v25;
    *((void *)&v43 + 1) = v26;
    sub_10002EA7C(v24 + 40 * v23, (uint64_t)v44);
    swift_bridgeObjectRetain();
    goto LABEL_31;
  }
  while (1)
  {
    int64_t v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v27 < v41)
    {
      unint64_t v28 = *(void *)(v40 + 8 * v27);
      if (v28) {
        goto LABEL_16;
      }
      int64_t v29 = v21 + 2;
      ++v21;
      if (v27 + 1 < v41)
      {
        unint64_t v28 = *(void *)(v40 + 8 * v29);
        if (v28) {
          goto LABEL_19;
        }
        int64_t v21 = v27 + 1;
        if (v27 + 2 < v41)
        {
          unint64_t v28 = *(void *)(v40 + 8 * (v27 + 2));
          if (v28)
          {
            v27 += 2;
            goto LABEL_16;
          }
          int64_t v29 = v27 + 3;
          int64_t v21 = v27 + 2;
          if (v27 + 3 < v41) {
            break;
          }
        }
      }
    }
LABEL_30:
    unint64_t v19 = 0;
    memset(v44, 0, 40);
    long long v43 = 0u;
LABEL_31:
    sub_100065884((uint64_t)&v43, (uint64_t)v45, &qword_100699188);
    if (!v45[1])
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      sub_100062CDC();
      swift_bridgeObjectRetain();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        v45[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136315138;
        swift_bridgeObjectRetain();
        sub_10002E768(&qword_100698958);
        uint64_t v36 = Dictionary.Keys.description.getter();
        unint64_t v38 = v37;
        swift_bridgeObjectRelease();
        *(void *)&long long v43 = sub_100032B48(v36, v38, v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "InVal keys for BS: %s", v35, 0xCu);
        swift_arrayDestroy();
        sub_100033704();
        sub_100033704();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_100061578();
      sub_10003F240();
      v39();
      sub_100065AF0();
      return;
    }
    sub_1000311A4(v46, (uint64_t)&v43);
    uint64_t v30 = v44[1];
    sub_10002EAE0(&v43, v44[1]);
    v42[3] = v30;
    sub_10003EB78(v42);
    sub_100065C48();
    v31();
    LOBYTE(v30) = sub_100060070((uint64_t)v42);
    sub_10002EB9C((uint64_t)v42);
    if (v30)
    {
      sub_1000608C0();
      if (v32) {
        sub_100061A78();
      }
    }
    swift_bridgeObjectRelease();
    sub_10002EB9C((uint64_t)&v43);
    if (v19) {
      goto LABEL_11;
    }
  }
  unint64_t v28 = *(void *)(v40 + 8 * v29);
  if (v28)
  {
LABEL_19:
    int64_t v27 = v29;
LABEL_16:
    unint64_t v19 = (v28 - 1) & v28;
    unint64_t v23 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v21 = v27;
    goto LABEL_12;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v41)
    {
      int64_t v21 = v41 - 1;
      goto LABEL_30;
    }
    unint64_t v28 = *(void *)(v40 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_16;
    }
  }
  __break(1u);
}

void sub_1000608C0()
{
  sub_100065B08();
  uint64_t v1 = sub_10002E768(&qword_100699190);
  __chkstk_darwin(v1 - 8);
  sub_100046338();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_10002E768(&qword_100699198);
  sub_100045FF4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100065C54();
  sub_1000316D0(&qword_1006991A0, &qword_100699198);
  Regex.init<A>(_:)();
  sub_1000658E0();
  BidirectionalCollection<>.firstMatch<A, B>(of:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
  uint64_t v9 = sub_10002E768(&qword_1006991B0);
  sub_1000312BC(v4, 1, v9);
  sub_1000518D8(v4, &qword_100699190);
  sub_100065AF0();
}

uint64_t sub_100060A60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v1 = type metadata accessor for Anchor();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v47 = v1;
  uint64_t v48 = v2;
  uint64_t v3 = __chkstk_darwin(v1);
  id v44 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v45 = (char *)&v42 - v5;
  uint64_t v6 = sub_10002E768(&qword_100699198);
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v50 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v46 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v10 = (char *)&v42 - v9;
  uint64_t v43 = type metadata accessor for _RegexFactory();
  uint64_t v11 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002E768(&qword_1006991B8);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CharacterClass();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10002E768(&qword_1006991C0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v52 = v21;
  uint64_t v53 = v22;
  uint64_t v23 = __chkstk_darwin(v21);
  id v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  int64_t v27 = (char *)&v42 - v26;
  uint64_t v54 = 35;
  unint64_t v55 = 0xE100000000000000;
  unint64_t v42 = sub_10006592C();
  static RegexComponentBuilder.buildExpression<A>(_:)();
  static RegexComponent<>.digit.getter();
  uint64_t v28 = type metadata accessor for RegexRepetitionBehavior();
  sub_10003349C((uint64_t)v16, 1, 1, v28);
  makeFactory()();
  sub_100065978(&qword_1006991D0, (void (*)(uint64_t))&type metadata accessor for CharacterClass);
  _RegexFactory.oneOrMore<A, B>(_:_:)();
  sub_1000518D8((uint64_t)v16, &qword_1006991B8);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v43);
  OneOrMore.init(_:)();
  sub_1000316D0(&qword_1006991D8, &qword_1006991C0);
  uint64_t v29 = v52;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v53 + 8);
  v53 += 8;
  v30(v25, v29);
  id v31 = v44;
  static Anchor.endOfLine.getter();
  sub_100065978((unint64_t *)&unk_1006991E0, (void (*)(uint64_t))&type metadata accessor for Anchor);
  char v32 = v45;
  uint64_t v33 = v47;
  static RegexComponentBuilder.buildExpression<A>(_:)();
  os_log_type_t v34 = *(void (**)(char *, uint64_t))(v48 + 8);
  uint64_t v35 = v31;
  uint64_t v36 = v33;
  v34(v35, v33);
  uint64_t v54 = v56;
  unint64_t v55 = v57;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)();
  swift_bridgeObjectRelease();
  uint64_t v37 = v46;
  sub_100061034((uint64_t)v27, v46);
  sub_100061294(v51);
  unint64_t v38 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  uint64_t v39 = v37;
  uint64_t v40 = v50;
  v38(v39, v50);
  v38((uint64_t)v10, v40);
  v34(v32, v36);
  return ((uint64_t (*)(char *, uint64_t))v30)(v27, v52);
}

uint64_t sub_100061034@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v15[0] = a1;
  v15[1] = a2;
  uint64_t v2 = sub_10002E768(&qword_100699198);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - v7;
  uint64_t v9 = type metadata accessor for _RegexFactory();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  makeFactory()();
  sub_1000316D0(&qword_1006991A0, &qword_100699198);
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  sub_10002E768(&qword_1006991C0);
  sub_1000316D0(&qword_1006991D8, &qword_1006991C0);
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  _RegexFactory.accumulate<A, B, C>(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  v13(v8, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100061294@<X0>(uint64_t a1@<X8>)
{
  v14[1] = a1;
  uint64_t v1 = sub_10002E768(&qword_100699198);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)v14 - v6;
  uint64_t v8 = type metadata accessor for _RegexFactory();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  makeFactory()();
  sub_1000316D0(&qword_1006991A0, &qword_100699198);
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  type metadata accessor for Anchor();
  sub_100065978((unint64_t *)&unk_1006991E0, (void (*)(uint64_t))&type metadata accessor for Anchor);
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)();
  _RegexFactory.accumulate<A, B, C>(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(v5, v1);
  v12(v7, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void sub_100061500()
{
  sub_10002E768(&qword_100699138);
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  swift_beginAccess();
  *(void *)(v0 + 112) = v1;
  swift_bridgeObjectRelease();
  sub_100061578();
}

void sub_100061578()
{
  sub_100065BA0();
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC3asd13BindingsStore_persister);
  sub_100051F9C();
  swift_bridgeObjectRetain();
  sub_100061630();
  swift_bridgeObjectRelease();
  sub_1000362B0(0, &qword_100699180);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 commitWithBindings:isa clearingExistingBindings:1];
}

void sub_100061630()
{
  sub_100065B08();
  uint64_t v1 = v0;
  type metadata accessor for Date();
  sub_100045FF4();
  __chkstk_darwin(v2);
  sub_100065B8C();
  uint64_t v36 = v3;
  type metadata accessor for BindingsStore.Binding(0);
  sub_100045FF4();
  uint64_t v30 = v4;
  __chkstk_darwin(v5);
  sub_100046338();
  uint64_t v8 = v7 - v6;
  uint64_t v32 = v1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  int64_t v33 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v31 = v1;
  while (v11)
  {
    unint64_t v13 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_20:
    uint64_t v18 = *(void *)(*(void *)(v1 + 56) + 8 * v14);
    uint64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      unint64_t v34 = v11;
      int64_t v35 = v12;
      uint64_t v20 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v14);
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      uint64_t v23 = v18 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = *(void *)(v30 + 72);
      do
      {
        sub_1000641F8(v23, v8);
        uint64_t v25 = sub_100061988(v8);
        if (v25)
        {
          uint64_t v26 = (void *)v25;
          sub_100065C48();
          v27();
          id v28 = objc_allocWithZone((Class)BindingRecord);
          swift_bridgeObjectRetain();
          id v29 = v26;
          sub_1000639CC(v21, v22, v36, v29);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        sub_1000642C0(v8);
        v23 += v24;
        --v19;
      }
      while (v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v1 = v31;
      unint64_t v11 = v34;
      int64_t v12 = v35;
    }
  }
  int64_t v15 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v15 >= v33) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v32 + 8 * v15);
  ++v12;
  if (v16) {
    goto LABEL_19;
  }
  int64_t v12 = v15 + 1;
  if (v15 + 1 >= v33) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v32 + 8 * v12);
  if (v16) {
    goto LABEL_19;
  }
  int64_t v12 = v15 + 2;
  if (v15 + 2 >= v33) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v32 + 8 * v12);
  if (v16)
  {
LABEL_19:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
    goto LABEL_20;
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v33)
  {
LABEL_28:
    swift_release();
    sub_100065AF0();
    return;
  }
  unint64_t v16 = *(void *)(v32 + 8 * v17);
  if (v16)
  {
    int64_t v12 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v33) {
      goto LABEL_28;
    }
    unint64_t v16 = *(void *)(v32 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_100061988(uint64_t a1)
{
  sub_10002EA7C(a1, (uint64_t)v7);
  sub_10002E768(&qword_100698958);
  sub_1000362B0(0, (unint64_t *)&qword_100697EF8);
  int v2 = swift_dynamicCast();
  uint64_t v3 = v6[0];
  sub_10002EA7C(a1, (uint64_t)v7);
  if (v2 && v6[0])
  {
    sub_10002EB9C((uint64_t)v7);
  }
  else
  {
    sub_1000311A4(v7, (uint64_t)v6);
    sub_1000362B0(0, (unint64_t *)&qword_1006979B0);
    if (swift_dynamicCast()) {
      return v5;
    }
    else {
      return 0;
    }
  }
  return v3;
}

void sub_100061A78()
{
  sub_100065B08();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *v1;
  uint64_t v13 = type metadata accessor for BindingsStore.Binding(0);
  sub_100045FF4();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_100046338();
  uint64_t v19 = v18 - v17;
  if (!*(void *)(v3 + 16)) {
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_100055F1C(v9, v7);
  if (v21)
  {
    uint64_t v22 = *(void *)(*(void *)(v3 + 56) + 8 * v20);
    swift_bridgeObjectRelease();
    if (v22 <= 0)
    {
LABEL_22:
      sub_100065AF0();
      return;
    }
    uint64_t v46 = v22;
    uint64_t v47 = v5;
    if (v22 == 1) {
      goto LABEL_15;
    }
    uint64_t v45[2] = v1 + 14;
    sub_100051F9C();
    uint64_t v23 = v1[14];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_100067F30(v9, v7, v23);
    swift_bridgeObjectRelease();
    uint64_t v25 = swift_bridgeObjectRelease();
    if (!v24)
    {
LABEL_15:
      sub_10002E768(&qword_100699140);
      unint64_t v34 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_10058CEC0;
      sub_10002EA7C(v11, v35 + v34);
      type metadata accessor for Date();
      sub_100051B88();
      sub_100065C48();
      v36();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v37 = v35;
      uint64_t v38 = v9;
      uint64_t v39 = v7;
LABEL_21:
      sub_100056FA4(v37, v38, v39);
      swift_endAccess();
      swift_bridgeObjectRelease();
      sub_1000620CC(v9, v7, v46);
      goto LABEL_22;
    }
    v45[1] = v45;
    __chkstk_darwin(v25);
    v45[-2] = v11;
    v45[-1] = v12;
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_100061FD4(sub_100065854, (uint64_t)&v45[-4], v24);
    char v28 = v27;
    swift_bridgeObjectRelease();
    if (v28)
    {
      sub_10002EA7C(v11, v19);
      type metadata accessor for Date();
      sub_100051B88();
      sub_100065C48();
      v40();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_17:
        unint64_t v42 = *(void *)(v24 + 16);
        unint64_t v41 = *(void *)(v24 + 24);
        if (v42 >= v41 >> 1) {
          uint64_t v24 = sub_10003BD5C(v41 > 1, v42 + 1, 1, v24);
        }
        *(void *)(v24 + 16) = v42 + 1;
        sub_100065C9C();
        sub_10006425C(v19, v43 + v44 * v42);
        goto LABEL_20;
      }
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v24 = sub_1000AB2C8(v24);
      }
      uint64_t v19 = v47;
      if ((v26 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v26 < *(void *)(v24 + 16))
      {
        sub_100065C9C();
        unint64_t v31 = v29 + v30 * v26 + *(int *)(v13 + 20);
        type metadata accessor for Date();
        sub_100051B88();
        (*(void (**)(unint64_t, uint64_t))(v32 + 24))(v31, v19);
LABEL_20:
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v37 = v24;
        uint64_t v38 = v9;
        uint64_t v39 = v7;
        goto LABEL_21;
      }
      __break(1u);
    }
    uint64_t v24 = sub_100065C6C();
    goto LABEL_17;
  }
  sub_100065AF0();
  swift_bridgeObjectRelease();
}

uint64_t sub_100061E8C(uint64_t a1, uint64_t a2)
{
  sub_10002EA7C(a1, (uint64_t)v8);
  sub_10002EA7C(a2, (uint64_t)v9);
  sub_10002E768(&qword_100698958);
  sub_1000362B0(0, (unint64_t *)&qword_1006979B0);
  if (!sub_100065BD4())
  {
LABEL_4:
    sub_1000362B0(0, (unint64_t *)&qword_100697EF8);
    if (sub_100065BD4())
    {
      uint64_t v3 = v7;
      if (sub_100065BD4()) {
        goto LABEL_6;
      }
    }
    sub_1000518D8((uint64_t)v8, (uint64_t *)&unk_100699170);
    char v4 = 0;
    return v4 & 1;
  }
  uint64_t v3 = v7;
  if (!sub_100065BD4())
  {

    goto LABEL_4;
  }
LABEL_6:
  sub_1000362B0(0, &qword_1006989B0);
  char v4 = static NSObject.== infix(_:_:)();

  sub_10002EB9C((uint64_t)v9);
  sub_10002EB9C((uint64_t)v8);
  return v4 & 1;
}

uint64_t sub_100061FD4(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(type metadata accessor for BindingsStore.Binding(0) - 8);
  uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v10 = *(void *)(v8 + 72);
  while (1)
  {
    char v11 = a1(v9);
    if (v3 || (v11 & 1) != 0) {
      break;
    }
    ++v7;
    v9 += v10;
    if (v4 == v7) {
      return 0;
    }
  }
  return v7;
}

uint64_t sub_1000620CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100051F9C();
  uint64_t v8 = *(void *)(v3 + 112);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_100055F1C(a1, a2);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17[0] = v11;
      swift_bridgeObjectRetain();
      sub_10005EDD8(v17);
      swift_bridgeObjectRelease();
      uint64_t v12 = sub_100062204(a3, v17[0]);
      uint64_t v16 = sub_100062324(v12, v13, v14, v15);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_100056FA4(v16, a1, a2);
      swift_endAccess();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100062204(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_100065748(0, result, v3);
  if (v4) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5)
  {
    type metadata accessor for BindingsStore.Binding(0);
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000622B4(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_100065748(0, result, v3);
  if (v4) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

void *sub_100062324(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  char v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    char v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v11 = v10[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    sub_100064C24(a1, a2, a3, a4);
    unint64_t v9 = v8;
    goto LABEL_9;
  }
  unint64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    unint64_t v9 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v9;
}

void sub_10006240C()
{
  sub_100065B08();
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = qword_100697968;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  sub_100051F9C();
  id v3 = (id)static ASDConfigurationManager.shared;
  sub_1000950DC(v19);

  sub_100065884((uint64_t)v19, (uint64_t)v25, &qword_100697F08);
  if (v25[5] == 1 || (v4 = v26, uint64_t v5 = v27, sub_1000516DC((uint64_t)v26), sub_100036138(v19), !v4))
  {
    char v4 = _swiftEmptyArrayStorage;
    uint64_t v6 = sub_100065D48();
    sub_100065D48();
    swift_bridgeObjectRelease();
    sub_1000361F8(0);
  }
  else
  {
    uint64_t v6 = v5;
  }
  uint64_t v7 = sub_10003FCEC((uint64_t)v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005EE80(v7);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  sub_10005F45C(v9);
  id v10 = (id)static ASDConfigurationManager.shared;
  sub_1000950DC(v20);

  sub_100065884((uint64_t)v20, (uint64_t)v21, &qword_100697F08);
  if (v22 == 1 || (v11 = v23, uint64_t v12 = v24, sub_1000516DC((uint64_t)v23), sub_100036138(v20), !v11))
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
    uint64_t v13 = sub_100065D28();
    sub_100065D28();
    swift_bridgeObjectRelease();
    sub_1000361F8(0);
  }
  else
  {
    uint64_t v13 = v12;
  }
  uint64_t v14 = sub_10003FCEC((uint64_t)v11, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005F054(v14);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  sub_10005F45C(v16);
  sub_1000626B0();
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = v18;
  swift_bridgeObjectRelease();
  sub_100061578();
  sub_100065AF0();
}

void sub_1000626B0()
{
  sub_100065B08();
  uint64_t v63 = v0;
  uint64_t v2 = v1;
  char v4 = v3;
  uint64_t v61 = type metadata accessor for Date();
  sub_100045FF4();
  __chkstk_darwin(v5);
  sub_100065B8C();
  uint64_t v62 = v6;
  BOOL v64 = v4 + 8;
  sub_100065B20();
  unint64_t v9 = v8 & v7;
  int64_t v65 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v60 = v11 + 8;
  swift_bridgeObjectRetain_n();
  int64_t v12 = 0;
  uint64_t v59 = 0;
  uint64_t v13 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    BOOL v16 = __OFADD__(v12++, 1);
    if (v16)
    {
      __break(1u);
      goto LABEL_62;
    }
    if (v12 >= v65) {
      goto LABEL_60;
    }
    unint64_t v17 = v64[v12];
    if (!v17) {
      break;
    }
LABEL_23:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    unint64_t v20 = (uint64_t *)(v4[6] + 16 * v15);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = *(void *)(v2 + 16);
    swift_bridgeObjectRetain();
    if (v23 && (unint64_t v24 = sub_100055F1C(v21, v22), (v25 & 1) != 0) && *(void *)(v63 + 16))
    {
      uint64_t v26 = *(void *)(*(void *)(v2 + 56) + 8 * v24);
      swift_bridgeObjectRetain();
      uint64_t v27 = v63;
      unint64_t v28 = sub_100055F1C(v21, v22);
      if ((v29 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_38;
      }
      uint64_t v30 = *(void *)(*(void *)(v27 + 56) + 8 * v28);
      swift_bridgeObjectRelease();
      if (v30 <= 0) {
        goto LABEL_38;
      }
      if (__OFSUB__(0, v26)) {
        goto LABEL_63;
      }
      Date.init(timeIntervalSinceNow:)();
      if (v13[2])
      {
        swift_bridgeObjectRetain();
        unint64_t v31 = sub_100065C2C();
        if (v32)
        {
          uint64_t v33 = *(void *)(v13[7] + 8 * v31);
          swift_bridgeObjectRetain();
          uint64_t v34 = swift_bridgeObjectRelease();
          id v58 = v55;
          __chkstk_darwin(v34);
          v55[-2] = v62;
          uint64_t v35 = v59;
          unint64_t v66 = (void *)sub_10005F228((uint64_t (*)(char *))sub_10006431C, (uint64_t)&v55[-4], v33);
          swift_bridgeObjectRetain();
          sub_10005EDD8((uint64_t *)&v66);
          uint64_t v59 = v35;
          if (v35) {
            goto LABEL_65;
          }
          swift_bridgeObjectRelease();
          uint64_t v37 = sub_100062204(v30, (uint64_t)v66);
          uint64_t v57 = v38;
          id v58 = (void *)v39;
          if (v39 != v36 >> 1)
          {
            unint64_t v40 = v36;
            if ((v36 & 1) == 0)
            {
              swift_unknownObjectRetain_n();
              goto LABEL_36;
            }
            uint64_t v51 = type metadata accessor for __ContiguousArrayStorageBase();
            swift_unknownObjectRetain_n();
            v55[1] = v51;
            uint64_t v52 = (void *)swift_dynamicCastClass();
            if (!v52)
            {
              swift_unknownObjectRelease();
              uint64_t v52 = _swiftEmptyArrayStorage;
            }
            unint64_t v56 = v40 >> 1;
            uint64_t v53 = v52[2];
            swift_release();
            if (__OFSUB__(v56, v58)) {
              goto LABEL_64;
            }
            if (v53 == v56 - (void)v58)
            {
              unint64_t v42 = (void *)swift_dynamicCastClass();
              swift_unknownObjectRelease();
              if (!v42)
              {
                unint64_t v42 = _swiftEmptyArrayStorage;
                goto LABEL_55;
              }
            }
            else
            {
              swift_unknownObjectRelease();
LABEL_36:
              sub_100064C24(v37, v57, (uint64_t)v58, v40);
              unint64_t v42 = v41;
LABEL_55:
              swift_unknownObjectRelease();
            }
            swift_isUniquelyReferenced_nonNull_native();
            unint64_t v66 = v13;
            sub_10005742C((uint64_t)v42, v21, v22);
            uint64_t v13 = v66;
            swift_unknownObjectRelease_n();
            goto LABEL_57;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRetain();
      sub_100065C2C();
      char v48 = v47;
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0)
      {
        swift_unknownObjectRelease();
        goto LABEL_58;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v66 = v13;
      Swift::Int v50 = v13[3];
      sub_10002E768(&qword_100699130);
      _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v50);
      uint64_t v13 = v66;
      swift_bridgeObjectRelease();
      sub_10002E768(&qword_100699138);
      _NativeDictionary._delete(at:)();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
LABEL_57:
      swift_bridgeObjectRelease();
LABEL_58:
      swift_bridgeObjectRelease();
      sub_10003F240();
      v54();
    }
    else
    {
LABEL_38:
      swift_bridgeObjectRetain();
      sub_100065C2C();
      char v44 = v43;
      swift_bridgeObjectRelease();
      if (v44)
      {
        char v45 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v66 = v13;
        Swift::Int v46 = v13[3];
        sub_10002E768(&qword_100699130);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(v45, v46);
        uint64_t v13 = v66;
        swift_bridgeObjectRelease();
        sub_10002E768(&qword_100699138);
        _NativeDictionary._delete(at:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
  }
  sub_100065CB4();
  if (v18 == v16) {
    goto LABEL_60;
  }
  sub_100065C90();
  if (v17) {
    goto LABEL_22;
  }
  sub_100065CB4();
  if (v18 == v16) {
    goto LABEL_60;
  }
  sub_100065C90();
  if (v17) {
    goto LABEL_22;
  }
  sub_100065CB4();
  if (v18 == v16) {
    goto LABEL_60;
  }
  sub_100065C90();
  if (v17) {
    goto LABEL_22;
  }
  sub_100065CB4();
  if (v18 == v16) {
    goto LABEL_60;
  }
  sub_100065C90();
  if (v17) {
    goto LABEL_22;
  }
  sub_100065CB4();
  if (v18 == v16)
  {
LABEL_60:
    swift_release();
    sub_100065AF0();
    return;
  }
  sub_100065C90();
  if (v17)
  {
LABEL_22:
    int64_t v12 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v12 >= v65) {
      goto LABEL_60;
    }
    unint64_t v17 = v64[v12];
    ++v19;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  swift_release();
  __break(1u);
}

uint64_t sub_100062C8C()
{
  return static Date.> infix(_:_:)() & 1;
}

uint64_t sub_100062CDC()
{
  sub_100051F9C();
  swift_bridgeObjectRetain();
  sub_100062D2C();
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  return v1;
}

void sub_100062D2C()
{
  sub_100065B08();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for BindingsStore.Binding(0);
  uint64_t v62 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  sub_100065C54();
  uint64_t v4 = sub_10002E768(&qword_100699110);
  sub_100051B88();
  __chkstk_darwin(v5);
  sub_100065B8C();
  uint64_t v61 = v6;
  uint64_t v7 = sub_10002E768(&qword_100699118);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (unint64_t *)((char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  int64_t v12 = (uint64_t *)((char *)&v56 - v11);
  uint64_t v56 = v2 + 64;
  sub_100065B20();
  uint64_t v60 = v14 & v13;
  int64_t v57 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v58 = v2;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  unint64_t v17 = _swiftEmptyDictionarySingleton;
  BOOL v64 = v10;
  uint64_t v65 = v4;
LABEL_2:
  unint64_t v18 = v60;
  if (v60)
  {
    int64_t v59 = v16;
    v60 &= v60 - 1;
    unint64_t v19 = __clz(__rbit64(v18)) | (v16 << 6);
    goto LABEL_18;
  }
  int64_t v20 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v20 < v57)
    {
      unint64_t v21 = *(void *)(v56 + 8 * v20);
      int64_t v22 = v16 + 1;
      if (v21) {
        goto LABEL_17;
      }
      int64_t v22 = v16 + 2;
      if (v16 + 2 >= v57) {
        goto LABEL_38;
      }
      unint64_t v21 = *(void *)(v56 + 8 * v22);
      if (v21) {
        goto LABEL_17;
      }
      int64_t v22 = v16 + 3;
      if (v16 + 3 >= v57) {
        goto LABEL_38;
      }
      unint64_t v21 = *(void *)(v56 + 8 * v22);
      if (v21)
      {
LABEL_17:
        int64_t v59 = v22;
        uint64_t v60 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_18:
        uint64_t v24 = *(void *)(v58 + 56);
        char v25 = (void *)(*(void *)(v58 + 48) + 16 * v19);
        uint64_t v26 = v25[1];
        *(void *)&long long v67 = *v25;
        *((void *)&v67 + 1) = v26;
        uint64_t v27 = *(void *)(v24 + 8 * v19);
        unint64_t v28 = *(void *)(v27 + 16);
        swift_bridgeObjectRetain();
        uint64_t v63 = v27;
        swift_bridgeObjectRetain();
        unint64_t v29 = 0;
        for (i = v28; ; unint64_t v28 = i)
        {
          if (v29 == v28)
          {
            uint64_t v30 = 1;
            unint64_t v29 = v28;
          }
          else
          {
            if (v29 >= *(void *)(v63 + 16)) {
              goto LABEL_41;
            }
            uint64_t v31 = v61 + *(int *)(v4 + 48);
            sub_1000641F8(v63+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(void *)(v62 + 72) * v29, v31);
            uint64_t v32 = (uint64_t)v10 + *(int *)(v4 + 48);
            unint64_t *v10 = v29;
            sub_10006425C(v31, v32);
            uint64_t v30 = 0;
            ++v29;
          }
          sub_10003349C((uint64_t)v10, v30, 1, v4);
          sub_100065884((uint64_t)v10, (uint64_t)v12, &qword_100699118);
          if (sub_1000312BC((uint64_t)v12, 1, v4) == 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            int64_t v16 = v59;
            goto LABEL_2;
          }
          uint64_t v33 = *v12;
          sub_10006425C((uint64_t)v12 + *(int *)(v4 + 48), v0);
          if (v33)
          {
            *(void *)&v68[0] = 35;
            *((void *)&v68[0] + 1) = 0xE100000000000000;
            if (__OFADD__(v33, 1)) {
              goto LABEL_40;
            }
            char v69 = (void *)(v33 + 1);
            v34._unint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v34);
            swift_bridgeObjectRelease();
            unint64_t v36 = (void *)*((void *)&v68[0] + 1);
            uint64_t v35 = *(void *)&v68[0];
            v68[0] = v67;
            swift_bridgeObjectRetain();
            v37._unint64_t countAndFlagsBits = v35;
            v37._object = v36;
            String.append(_:)(v37);
            swift_bridgeObjectRelease();
            uint64_t v39 = *((void *)&v68[0] + 1);
            uint64_t v38 = *(void *)&v68[0];
          }
          else
          {
            uint64_t v39 = *((void *)&v67 + 1);
            swift_bridgeObjectRetain();
            uint64_t v38 = v67;
          }
          uint64_t v40 = v0;
          sub_10002EA7C(v0, (uint64_t)v68);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          char v69 = v17;
          unint64_t v42 = sub_100055F1C(v38, v39);
          uint64_t v44 = v17[2];
          BOOL v45 = (v43 & 1) == 0;
          Swift::Int v46 = v44 + v45;
          if (__OFADD__(v44, v45)) {
            break;
          }
          unint64_t v47 = v42;
          char v48 = v43;
          sub_10002E768((uint64_t *)&unk_100699120);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v46))
          {
            unint64_t v49 = sub_100055F1C(v38, v39);
            if ((v48 & 1) != (v50 & 1)) {
              goto LABEL_45;
            }
            unint64_t v47 = v49;
          }
          unint64_t v17 = v69;
          if (v48)
          {
            uint64_t v51 = v69[7] + 40 * v47;
            sub_10002EB9C(v51);
            sub_1000311A4(v68, v51);
          }
          else
          {
            v69[(v47 >> 6) + 8] |= 1 << v47;
            uint64_t v52 = (uint64_t *)(v17[6] + 16 * v47);
            uint64_t *v52 = v38;
            v52[1] = v39;
            sub_1000311A4(v68, v17[7] + 40 * v47);
            uint64_t v53 = v17[2];
            BOOL v54 = __OFADD__(v53, 1);
            uint64_t v55 = v53 + 1;
            if (v54) {
              goto LABEL_42;
            }
            v17[2] = v55;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v0 = v40;
          sub_1000642C0(v40);
          uint64_t v10 = v64;
          uint64_t v4 = v65;
        }
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      uint64_t v23 = v16 + 4;
      if (v16 + 4 < v57)
      {
        unint64_t v21 = *(void *)(v56 + 8 * v23);
        if (!v21)
        {
          while (1)
          {
            int64_t v22 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_44;
            }
            if (v22 >= v57) {
              goto LABEL_38;
            }
            unint64_t v21 = *(void *)(v56 + 8 * v22);
            ++v23;
            if (v21) {
              goto LABEL_17;
            }
          }
        }
        int64_t v22 = v16 + 4;
        goto LABEL_17;
      }
    }
LABEL_38:
    swift_release();
    sub_100065AF0();
    return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_100063294()
{
  swift_bridgeObjectRelease();
  sub_10002EB9C(v0 + 120);
  type metadata accessor for Logger();
  sub_100051B88();
  sub_10003F240();
  v1();
  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100063314()
{
  sub_100063294();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100063340()
{
  return type metadata accessor for BindingsStore(0);
}

uint64_t type metadata accessor for BindingsStore(uint64_t a1)
{
  return sub_100050EE4(a1, qword_100698F68);
}

uint64_t sub_100063368()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *sub_100063424(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return v4;
}

uint64_t sub_10006352C(uint64_t a1, uint64_t a2)
{
  sub_10002EB9C(a1);
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_1000635A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t *sub_100063650(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  sub_10005C760(a1, a2);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_1000636D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_100063754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10002EB9C(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1000637E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000637F8);
}

uint64_t sub_1000637F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_1000312BC(v9, a2, v8);
  }
}

uint64_t sub_100063880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100063894);
}

uint64_t sub_100063894(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = v5 + *(int *)(a4 + 20);
    return sub_10003349C(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for BindingsStore.Binding(uint64_t a1)
{
  return sub_100050EE4(a1, qword_1006990D8);
}

uint64_t sub_100063934()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

id sub_1000639CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v10 = [v5 initWithKey:v8 updatedDate:isa value:a4];

  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a3, v11);
  return v10;
}

void sub_100063A88()
{
  sub_100065C10();
  sub_10002E768(&qword_100698218);
  char v30 = v2;
  uint64_t v4 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v1 + 16)) {
    goto LABEL_36;
  }
  sub_100065CC0();
  unint64_t v29 = v5;
  sub_100065BF0();
  uint64_t v27 = v0;
  uint64_t v28 = v6;
  swift_retain();
  uint64_t v7 = 0;
  if (!v3) {
    goto LABEL_4;
  }
LABEL_3:
  sub_100065DE4();
  for (uint64_t i = v8 | (v7 << 6); ; uint64_t i = v13 + (v7 << 6))
  {
    uint64_t v14 = *(void **)(*(void *)(v1 + 56) + 8 * i);
    if ((v30 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v15 = v14;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Hasher._finalize()();
    sub_100065BB4();
    if (v16)
    {
      sub_100065D7C();
      while (++v19 != v20 || (v18 & 1) == 0)
      {
        BOOL v21 = v19 == v20;
        if (v19 == v20) {
          uint64_t v19 = 0;
        }
        v18 |= v21;
        if (*(void *)(v4 + 64 + 8 * v19) != -1)
        {
          sub_100065D68();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    sub_100065D90();
LABEL_27:
    sub_100065B3C(v17);
    *(void *)(v23 + 8 * v22) = v14;
    ++*(void *)(v4 + 16);
    if (v3) {
      goto LABEL_3;
    }
LABEL_4:
    uint64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_38;
    }
    if (v10 >= v28)
    {
      swift_release();
      uint64_t v0 = v27;
      uint64_t v11 = v29;
      goto LABEL_31;
    }
    uint64_t v11 = v29;
    ++v7;
    if (!v29[v10])
    {
      uint64_t v7 = v10 + 1;
      if (v10 + 1 >= v28) {
        goto LABEL_29;
      }
      if (!v29[v7]) {
        break;
      }
    }
LABEL_15:
    sub_100065DD0();
  }
  uint64_t v12 = v10 + 2;
  if (v12 < v28)
  {
    if (!v29[v12])
    {
      while (1)
      {
        uint64_t v7 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_39;
        }
        if (v7 >= v28) {
          goto LABEL_29;
        }
        ++v12;
        if (v29[v7]) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v7 = v12;
    goto LABEL_15;
  }
LABEL_29:
  swift_release();
  uint64_t v0 = v27;
LABEL_31:
  if (v30)
  {
    sub_100065DF8();
    if (v25 != v26) {
      void *v11 = -1 << v24;
    }
    else {
      sub_100065DB0(v24);
    }
    *(void *)(v1 + 16) = 0;
  }
LABEL_36:
  swift_release();
  uint64_t *v0 = v4;
}

uint64_t sub_100063CB4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002E768(&qword_100699150);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  Swift::String v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
    void *v32 = v22;
    v32[1] = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v35)
    {
      swift_release();
      uint64_t v3 = v34;
      unint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    unint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v36 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v35) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v36 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v35)
  {
    unint64_t v18 = *(void *)(v36 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v35) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v36 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
  uint64_t v3 = v34;
LABEL_34:
  if (v37)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      sub_100081270(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *unint64_t v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void sub_100063FB0()
{
  sub_100065C10();
  sub_10002E768((uint64_t *)&unk_100699210);
  char v29 = v2;
  uint64_t v4 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(void *)(v1 + 16)) {
    goto LABEL_37;
  }
  sub_100065CC0();
  char v28 = v5;
  sub_100065BF0();
  unint64_t v26 = v0;
  uint64_t v27 = v6;
  swift_retain();
  uint64_t v7 = 0;
  if (!v3) {
    goto LABEL_4;
  }
LABEL_3:
  sub_100065DE4();
  for (uint64_t i = v8 | (v7 << 6); ; uint64_t i = v13 + (v7 << 6))
  {
    unint64_t v14 = (long long *)(*(void *)(v1 + 56) + 40 * i);
    if (v29)
    {
      sub_1000311A4(v14, (uint64_t)v30);
    }
    else
    {
      sub_10002EA7C((uint64_t)v14, (uint64_t)v30);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Hasher._finalize()();
    sub_100065BB4();
    if (v15)
    {
      sub_100065D7C();
      while (++v18 != v19 || (v17 & 1) == 0)
      {
        BOOL v20 = v18 == v19;
        if (v18 == v19) {
          uint64_t v18 = 0;
        }
        v17 |= v20;
        if (*(void *)(v4 + 64 + 8 * v18) != -1)
        {
          sub_100065D68();
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return;
    }
    sub_100065D90();
LABEL_28:
    sub_100065B3C(v16);
    sub_1000311A4(v30, v22 + 40 * v21);
    ++*(void *)(v4 + 16);
    if (v3) {
      goto LABEL_3;
    }
LABEL_4:
    uint64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_39;
    }
    if (v10 >= v27)
    {
      swift_release();
      uint64_t v0 = v26;
      uint64_t v11 = v28;
      goto LABEL_32;
    }
    uint64_t v11 = v28;
    ++v7;
    if (!v28[v10])
    {
      uint64_t v7 = v10 + 1;
      if (v10 + 1 >= v27) {
        goto LABEL_30;
      }
      if (!v28[v7]) {
        break;
      }
    }
LABEL_15:
    sub_100065DD0();
  }
  uint64_t v12 = v10 + 2;
  if (v12 < v27)
  {
    if (!v28[v12])
    {
      while (1)
      {
        uint64_t v7 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_40;
        }
        if (v7 >= v27) {
          goto LABEL_30;
        }
        ++v12;
        if (v28[v7]) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v7 = v12;
    goto LABEL_15;
  }
LABEL_30:
  swift_release();
  uint64_t v0 = v26;
LABEL_32:
  if (v29)
  {
    sub_100065DF8();
    if (v24 != v25) {
      void *v11 = -1 << v23;
    }
    else {
      sub_100065DB0(v23);
    }
    *(void *)(v1 + 16) = 0;
  }
LABEL_37:
  swift_release();
  uint64_t *v0 = v4;
}

uint64_t sub_1000641F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BindingsStore.Binding(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006425C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BindingsStore.Binding(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000642C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BindingsStore.Binding(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006431C()
{
  return sub_100062C8C() & 1;
}

uint64_t sub_10006433C(uint64_t *a1)
{
  uint64_t v141 = type metadata accessor for BindingsStore.Binding(0);
  sub_100045FF4();
  uint64_t v134 = v3;
  __chkstk_darwin(v4);
  sub_10005EDC4();
  uint64_t v131 = v5;
  sub_100065DA4();
  __chkstk_darwin(v6);
  uint64_t v142 = (uint64_t)&v125 - v7;
  sub_100065DA4();
  __chkstk_darwin(v8);
  uint64_t v139 = (uint64_t)&v125 - v9;
  sub_100065DA4();
  __chkstk_darwin(v10);
  uint64_t v138 = (uint64_t)&v125 - v11;
  Swift::Int v12 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if ((v12 & 0x8000000000000000) == 0)
    {
      if (v12) {
        return sub_100064DB0(0, v12, 1, a1);
      }
      return result;
    }
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }
  uint64_t v14 = result;
  uint64_t v135 = v1;
  uint64_t v140 = a1;
  uint64_t result = sub_10003AFD8(v12 / 2);
  uint64_t v128 = result;
  unint64_t v133 = v15;
  if (v12 > 0)
  {
    uint64_t v127 = v14;
    Swift::Int v16 = 0;
    char v17 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v18 = v12;
    Swift::Int v129 = v12;
    while (1)
    {
      Swift::Int v19 = v16;
      Swift::Int v20 = v16 + 1;
      if (v16 + 1 >= v18)
      {
        ++v16;
      }
      else
      {
        uint64_t v21 = *v140;
        uint64_t v22 = *(void *)(v134 + 72);
        uint64_t v23 = v138;
        sub_1000641F8(*v140 + v22 * v20, v138);
        uint64_t v24 = v21 + v22 * v16;
        uint64_t v25 = v139;
        sub_1000641F8(v24, v139);
        LODWORD(v137) = static Date.> infix(_:_:)();
        sub_1000642C0(v25);
        uint64_t result = sub_1000642C0(v23);
        Swift::Int v16 = v19 + 2;
        uint64_t v136 = v21;
        uint64_t v143 = v22;
        if (v19 + 2 < v18)
        {
          Swift::Int v26 = v18;
          uint64_t v132 = v19;
          uint64_t v27 = v22 * v20;
          uint64_t v28 = v21;
          uint64_t v29 = v22 * v16;
          while (1)
          {
            Swift::Int v30 = v16;
            uint64_t v31 = v138;
            sub_1000641F8(v28 + v29, v138);
            uint64_t v32 = v139;
            sub_1000641F8(v28 + v27, v139);
            int v33 = static Date.> infix(_:_:)();
            sub_1000642C0(v32);
            uint64_t result = sub_1000642C0(v31);
            if ((v137 ^ v33)) {
              break;
            }
            Swift::Int v16 = v30 + 1;
            v28 += v143;
            if (v30 + 1 >= v26)
            {
              Swift::Int v18 = v26;
              Swift::Int v16 = v26;
              Swift::Int v19 = v132;
              goto LABEL_12;
            }
          }
          Swift::Int v16 = v30;
          Swift::Int v19 = v132;
          Swift::Int v18 = v26;
        }
LABEL_12:
        if (v137)
        {
          if (v16 < v19) {
            goto LABEL_142;
          }
          if (v19 < v16)
          {
            Swift::Int v137 = v18;
            uint64_t v126 = v17;
            uint64_t v34 = 0;
            Swift::Int v35 = v19;
            uint64_t v36 = v143;
            uint64_t v37 = v143 * (v16 - 1);
            Swift::Int v38 = v16 * v143;
            Swift::Int v39 = v35;
            uint64_t v132 = v35;
            uint64_t v40 = v35 * v143;
            unint64_t v41 = v140;
            do
            {
              if (v39 != v16 + v34 - 1)
              {
                uint64_t v42 = v136;
                if (!v136) {
                  goto LABEL_148;
                }
                Swift::Int v43 = v16;
                unint64_t v44 = v136 + v40;
                uint64_t v45 = v136 + v37;
                sub_10006425C(v136 + v40, v131);
                if (v40 < v37 || v44 >= v42 + v38)
                {
                  sub_100065D08();
                  uint64_t v36 = v143;
                }
                else
                {
                  uint64_t v36 = v143;
                  if (v40 != v37) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                uint64_t result = sub_10006425C(v131, v45);
                unint64_t v41 = v140;
                Swift::Int v16 = v43;
              }
              ++v39;
              --v34;
              v37 -= v36;
              v38 -= v36;
              v40 += v36;
            }
            while (v39 < v16 + v34);
            char v17 = v126;
            Swift::Int v19 = v132;
            Swift::Int v18 = v137;
            goto LABEL_30;
          }
        }
      }
      unint64_t v41 = v140;
LABEL_30:
      if (v16 < v18)
      {
        if (__OFSUB__(v16, v19)) {
          goto LABEL_139;
        }
        if (v16 - v19 < v127)
        {
          if (__OFADD__(v19, v127)) {
            goto LABEL_143;
          }
          if (v19 + v127 >= v18) {
            Swift::Int v47 = v18;
          }
          else {
            Swift::Int v47 = v19 + v127;
          }
          if (v47 < v19)
          {
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
            return result;
          }
          if (v16 != v47)
          {
            uint64_t v132 = v19;
            uint64_t v126 = v17;
            uint64_t v48 = *(void *)(v134 + 72);
            uint64_t v49 = v48 * (v16 - 1);
            uint64_t v136 = v48;
            Swift::Int v50 = v16 * v48;
            Swift::Int v130 = v47;
            do
            {
              uint64_t v51 = 0;
              uint64_t v52 = v132;
              Swift::Int v137 = v16;
              while (1)
              {
                uint64_t v143 = v52;
                uint64_t v53 = *v41;
                Swift::Int v54 = v50;
                uint64_t v55 = v50 + v51 + *v41;
                uint64_t v56 = v138;
                int64_t v57 = v41;
                sub_1000641F8(v55, v138);
                uint64_t v58 = v49;
                uint64_t v59 = v49 + v51 + v53;
                uint64_t v60 = v139;
                sub_1000641F8(v59, v139);
                LOBYTE(v53) = static Date.> infix(_:_:)();
                sub_1000642C0(v60);
                uint64_t result = sub_1000642C0(v56);
                if ((v53 & 1) == 0) {
                  break;
                }
                uint64_t v61 = *v57;
                if (!*v57) {
                  goto LABEL_146;
                }
                Swift::Int v50 = v54;
                uint64_t v49 = v58;
                uint64_t v62 = v61 + v58 + v51;
                sub_10006425C(v61 + v54 + v51, v142);
                sub_100065D08();
                uint64_t result = sub_10006425C(v142, v62);
                Swift::Int v63 = v137;
                v51 -= v136;
                uint64_t v52 = v143 + 1;
                unint64_t v41 = v140;
                if (v137 == v143 + 1) {
                  goto LABEL_46;
                }
              }
              Swift::Int v63 = v137;
              uint64_t v49 = v58;
              Swift::Int v50 = v54;
              unint64_t v41 = v57;
LABEL_46:
              Swift::Int v16 = v63 + 1;
              v49 += v136;
              v50 += v136;
            }
            while (v16 != v130);
            Swift::Int v16 = v130;
            char v17 = v126;
            Swift::Int v19 = v132;
          }
        }
      }
      if (v16 < v19) {
        goto LABEL_138;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100065370(0, *((void *)v17 + 2) + 1, 1, v17);
        char v17 = (char *)result;
      }
      unint64_t v65 = *((void *)v17 + 2);
      unint64_t v64 = *((void *)v17 + 3);
      unint64_t v66 = v65 + 1;
      if (v65 >= v64 >> 1)
      {
        uint64_t result = (uint64_t)sub_100065370((char *)(v64 > 1), v65 + 1, 1, v17);
        char v17 = (char *)result;
      }
      *((void *)v17 + 2) = v66;
      long long v67 = v17 + 32;
      unint64_t v68 = &v17[16 * v65 + 32];
      *(void *)unint64_t v68 = v19;
      *((void *)v68 + 1) = v16;
      if (v65)
      {
        while (1)
        {
          unint64_t v69 = v66 - 1;
          if (v66 >= 4)
          {
            BOOL v74 = &v67[2 * v66];
            uint64_t v75 = *(v74 - 8);
            uint64_t v76 = *(v74 - 7);
            BOOL v80 = __OFSUB__(v76, v75);
            uint64_t v77 = v76 - v75;
            if (v80) {
              goto LABEL_123;
            }
            uint64_t v79 = *(v74 - 6);
            uint64_t v78 = *(v74 - 5);
            BOOL v80 = __OFSUB__(v78, v79);
            uint64_t v72 = v78 - v79;
            char v73 = v80;
            if (v80) {
              goto LABEL_124;
            }
            unint64_t v81 = v66 - 2;
            uint64_t v82 = &v67[2 * v66 - 4];
            uint64_t v84 = *v82;
            uint64_t v83 = v82[1];
            BOOL v80 = __OFSUB__(v83, v84);
            uint64_t v85 = v83 - v84;
            if (v80) {
              goto LABEL_125;
            }
            BOOL v80 = __OFADD__(v72, v85);
            uint64_t v86 = v72 + v85;
            if (v80) {
              goto LABEL_127;
            }
            if (v86 >= v77)
            {
              v104 = &v67[2 * v69];
              uint64_t v106 = *v104;
              uint64_t v105 = v104[1];
              BOOL v80 = __OFSUB__(v105, v106);
              uint64_t v107 = v105 - v106;
              if (v80) {
                goto LABEL_133;
              }
              BOOL v97 = v72 < v107;
              goto LABEL_85;
            }
          }
          else
          {
            if (v66 != 3)
            {
              uint64_t v98 = *((void *)v17 + 4);
              uint64_t v99 = *((void *)v17 + 5);
              BOOL v80 = __OFSUB__(v99, v98);
              uint64_t v91 = v99 - v98;
              char v92 = v80;
              goto LABEL_79;
            }
            uint64_t v71 = *((void *)v17 + 4);
            uint64_t v70 = *((void *)v17 + 5);
            BOOL v80 = __OFSUB__(v70, v71);
            uint64_t v72 = v70 - v71;
            char v73 = v80;
          }
          if (v73) {
            goto LABEL_126;
          }
          unint64_t v81 = v66 - 2;
          uint64_t v87 = &v67[2 * v66 - 4];
          uint64_t v89 = *v87;
          uint64_t v88 = v87[1];
          BOOL v90 = __OFSUB__(v88, v89);
          uint64_t v91 = v88 - v89;
          char v92 = v90;
          if (v90) {
            goto LABEL_128;
          }
          uint64_t v93 = &v67[2 * v69];
          uint64_t v95 = *v93;
          uint64_t v94 = v93[1];
          BOOL v80 = __OFSUB__(v94, v95);
          uint64_t v96 = v94 - v95;
          if (v80) {
            goto LABEL_130;
          }
          if (__OFADD__(v91, v96)) {
            goto LABEL_132;
          }
          if (v91 + v96 >= v72)
          {
            BOOL v97 = v72 < v96;
LABEL_85:
            if (v97) {
              unint64_t v69 = v81;
            }
            goto LABEL_87;
          }
LABEL_79:
          if (v92) {
            goto LABEL_129;
          }
          uint64_t v100 = &v67[2 * v69];
          uint64_t v102 = *v100;
          uint64_t v101 = v100[1];
          BOOL v80 = __OFSUB__(v101, v102);
          uint64_t v103 = v101 - v102;
          if (v80) {
            goto LABEL_131;
          }
          if (v103 < v91) {
            goto LABEL_96;
          }
LABEL_87:
          unint64_t v108 = v69 - 1;
          if (v69 - 1 >= v66)
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
            goto LABEL_134;
          }
          if (!*v140) {
            goto LABEL_147;
          }
          Swift::Int v109 = v16;
          uint64_t v110 = v17;
          uint64_t v111 = &v67[2 * v108];
          uint64_t v112 = *v111;
          uint64_t v113 = &v67[2 * v69];
          uint64_t v114 = v113[1];
          uint64_t v115 = v135;
          uint64_t result = sub_100064FF8(*v140 + *(void *)(v134 + 72) * *v111, *v140 + *(void *)(v134 + 72) * *v113, *v140 + *(void *)(v134 + 72) * v114, v133);
          uint64_t v135 = v115;
          if (v115)
          {
            Swift::Int v12 = v129;
LABEL_102:
            uint64_t result = swift_bridgeObjectRelease();
            if (v12 >= -1)
            {
              *(void *)(v128 + 16) = 0;
              return swift_bridgeObjectRelease();
            }
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
            goto LABEL_144;
          }
          if (v114 < v112) {
            goto LABEL_120;
          }
          if (v69 > *((void *)v110 + 2)) {
            goto LABEL_121;
          }
          *uint64_t v111 = v112;
          v67[2 * v108 + 1] = v114;
          unint64_t v116 = *((void *)v110 + 2);
          if (v69 >= v116) {
            goto LABEL_122;
          }
          char v17 = v110;
          unint64_t v66 = v116 - 1;
          uint64_t result = (uint64_t)memmove(&v67[2 * v69], v113 + 2, 16 * (v116 - 1 - v69));
          *((void *)v110 + 2) = v116 - 1;
          Swift::Int v16 = v109;
          if (v116 <= 2) {
            goto LABEL_96;
          }
        }
      }
      unint64_t v66 = 1;
LABEL_96:
      Swift::Int v18 = v140[1];
      Swift::Int v12 = v129;
      if (v16 >= v18) {
        goto LABEL_105;
      }
    }
  }
  char v17 = (char *)_swiftEmptyArrayStorage;
  unint64_t v66 = _swiftEmptyArrayStorage[2];
LABEL_105:
  if (v66 >= 2)
  {
    uint64_t v117 = *v140;
    while (1)
    {
      unint64_t v118 = v66 - 2;
      if (v66 < 2) {
        break;
      }
      if (!v117) {
        goto LABEL_149;
      }
      uint64_t v119 = v17;
      uint64_t v120 = *(void *)&v17[16 * v118 + 32];
      uint64_t v121 = *(void *)&v17[16 * v66 + 24];
      uint64_t v122 = v135;
      uint64_t result = sub_100064FF8(v117 + *(void *)(v134 + 72) * v120, v117 + *(void *)(v134 + 72) * *(void *)&v17[16 * v66 + 16], v117 + *(void *)(v134 + 72) * v121, v133);
      uint64_t v135 = v122;
      if (v122) {
        goto LABEL_102;
      }
      if (v121 < v120) {
        goto LABEL_135;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100065468((uint64_t)v17);
        uint64_t v119 = (char *)result;
      }
      if (v118 >= *((void *)v119 + 2)) {
        goto LABEL_136;
      }
      uint64_t v123 = &v119[16 * v118 + 32];
      *(void *)uint64_t v123 = v120;
      *((void *)v123 + 1) = v121;
      unint64_t v124 = *((void *)v119 + 2);
      if (v66 > v124) {
        goto LABEL_137;
      }
      uint64_t result = (uint64_t)memmove(&v119[16 * v66 + 16], &v119[16 * v66 + 32], 16 * (v124 - v66));
      *((void *)v119 + 2) = v124 - 1;
      unint64_t v66 = v124 - 1;
      char v17 = v119;
      if (v124 <= 2) {
        goto LABEL_116;
      }
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
LABEL_116:
  uint64_t result = swift_bridgeObjectRelease();
  if (v12 < -1) {
    goto LABEL_145;
  }
  *(void *)(v128 + 16) = 0;
  return swift_bridgeObjectRelease();
}

void sub_100064C24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
LABEL_12:
      if (v4 != a3)
      {
        uint64_t v14 = *(void *)(type metadata accessor for BindingsStore.Binding(0) - 8);
        sub_100080D0C(a2 + *(void *)(v14 + 72) * a3, v5, (unint64_t)v11+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)));
        return;
      }
      goto LABEL_17;
    }
    sub_10002E768(&qword_100699140);
    uint64_t v8 = *(void *)(type metadata accessor for BindingsStore.Binding(0) - 8);
    uint64_t v9 = *(void *)(v8 + 72);
    unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v11 = (void *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    if (v9)
    {
      if (v12 - v10 != 0x8000000000000000 || v9 != -1)
      {
        v11[2] = v5;
        v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
        goto LABEL_12;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      return;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
}

uint64_t sub_100064DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v24 = a1;
  uint64_t v27 = type metadata accessor for BindingsStore.Binding(0);
  uint64_t v7 = __chkstk_darwin(v27);
  uint64_t v28 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t result = __chkstk_darwin(v9);
  unint64_t v15 = (char *)&v22 - v14;
  uint64_t v26 = a3;
  uint64_t v23 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v30 = v16 * (v26 - 1);
    uint64_t v25 = v16;
    uint64_t v29 = v16 * v26;
    while (2)
    {
      uint64_t v17 = 0;
      uint64_t v18 = v24;
      do
      {
        uint64_t v19 = *a4;
        sub_1000641F8(v29 + v17 + *a4, (uint64_t)v15);
        sub_1000641F8(v30 + v17 + v19, (uint64_t)v11);
        LOBYTE(v19) = static Date.> infix(_:_:)();
        sub_1000642C0((uint64_t)v11);
        uint64_t result = sub_1000642C0((uint64_t)v15);
        if ((v19 & 1) == 0) {
          break;
        }
        uint64_t v20 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        uint64_t v21 = v20 + v30 + v17;
        sub_10006425C(v20 + v29 + v17, v28);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_10006425C(v28, v21);
        v17 -= v25;
        ++v18;
      }
      while (v26 != v18);
      v30 += v25;
      v29 += v25;
      if (++v26 != v23) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_100064FF8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v52 = type metadata accessor for BindingsStore.Binding(0);
  uint64_t v8 = __chkstk_darwin(v52);
  uint64_t v51 = (uint64_t)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v50 = (uint64_t)&v45 - v11;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  int64_t v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_75;
  }
  int64_t v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_76;
  }
  uint64_t v18 = v14 / v13;
  uint64_t v19 = v16 / v13;
  if (v14 / v13 >= v16 / v13)
  {
    uint64_t result = sub_10003D0AC(a2, v16 / v13, a4);
    uint64_t v29 = v19 * v13;
    unint64_t v20 = a4 + v19 * v13;
    if (v29 < 1 || a1 >= a2) {
      goto LABEL_69;
    }
    unint64_t v48 = a4;
    uint64_t v49 = -v13;
    uint64_t v46 = v13;
    unint64_t v47 = a1;
    while (1)
    {
      unint64_t v31 = a3;
      uint64_t v32 = v49;
      uint64_t v33 = v50;
      a3 += v49;
      unint64_t v34 = v20 + v49;
      sub_1000641F8(v20 + v49, v50);
      unint64_t v35 = a2 + v32;
      uint64_t v36 = a2 + v32;
      uint64_t v37 = v51;
      sub_1000641F8(v36, v51);
      char v38 = static Date.> infix(_:_:)();
      sub_1000642C0(v37);
      uint64_t result = sub_1000642C0(v33);
      if (v38)
      {
        if (v31 >= a2 && a3 < a2)
        {
          unint64_t v41 = v47;
          a4 = v48;
          if (v31 != a2) {
            uint64_t result = sub_100065CF0();
          }
          a2 = v35;
          uint64_t v13 = v46;
          goto LABEL_65;
        }
        uint64_t result = sub_100065CD8();
        a2 = v35;
      }
      else
      {
        if (v31 >= v20 && a3 < v20)
        {
          a4 = v48;
          if (v31 != v20) {
            uint64_t result = sub_100065CF0();
          }
          unint64_t v20 = v34;
          goto LABEL_64;
        }
        uint64_t result = sub_100065CD8();
        unint64_t v20 = v34;
      }
      a4 = v48;
LABEL_64:
      uint64_t v13 = v46;
      unint64_t v41 = v47;
LABEL_65:
      if (v20 <= a4 || a2 <= v41) {
        goto LABEL_69;
      }
    }
  }
  uint64_t result = sub_10003D0AC(a1, v14 / v13, a4);
  unint64_t v20 = a4 + v18 * v13;
  if (v18 * v13 >= 1 && a2 < a3)
  {
    do
    {
      uint64_t v22 = v50;
      sub_1000641F8(a2, v50);
      uint64_t v23 = v51;
      sub_1000641F8(a4, v51);
      char v24 = static Date.> infix(_:_:)();
      sub_1000642C0(v23);
      uint64_t result = sub_1000642C0(v22);
      if (v24)
      {
        unint64_t v25 = a2 + v13;
        if (a1 < a2 || a1 >= v25)
        {
          uint64_t result = sub_100065CD8();
        }
        else if (a1 != a2)
        {
          uint64_t result = sub_100065CF0();
        }
      }
      else
      {
        if (a1 < a4 || a1 >= a4 + v13)
        {
          uint64_t result = sub_100065CD8();
        }
        else if (a1 != a4)
        {
          uint64_t result = sub_100065CF0();
        }
        unint64_t v25 = a2;
        a4 += v13;
      }
      a1 += v13;
      BOOL v28 = a4 >= v20 || v25 >= a3;
      a2 = v25;
    }
    while (!v28);
  }
  a2 = a1;
LABEL_69:
  int64_t v43 = v20 - a4;
  if (v13 != -1 || v43 != 0x8000000000000000)
  {
    sub_10003D0AC(a4, v43 / v13, a2);
    return 1;
  }
LABEL_77:
  __break(1u);
  return result;
}

char *sub_100065370(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002E768(&qword_100699148);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_100065468(uint64_t a1)
{
  return sub_100065370(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_10006547C(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  char v5 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  while (1)
  {
    uint64_t v7 = *(v5 - 2);
    uint64_t v6 = *(v5 - 1);
    uint64_t v8 = *v5;
    uint64_t v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_100055F1C(v7, v6);
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v15 = v10;
    if (v9[3] < v14) {
      break;
    }
    if (a2)
    {
      if (v10) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_10002E768(&qword_100699158);
      _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v19 = (uint64_t *)(v18[6] + 16 * v11);
    *uint64_t v19 = v7;
    v19[1] = v6;
    *(void *)(v18[7] + 8 * v11) = v8;
    uint64_t v20 = v18[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    v5 += 3;
    v18[2] = v22;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_100063CB4(v14, a2 & 1);
  unint64_t v16 = sub_100055F1C(v7, v6);
  if ((v15 & 1) != (v17 & 1)) {
    goto LABEL_19;
  }
  unint64_t v11 = v16;
  if ((v15 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_10002E768((uint64_t *)&unk_100699160);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v24._object = (void *)0x800000010056A3B0;
  v24._unint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v24);
  _print_unlocked<A, B>(_:_:)();
  v25._unint64_t countAndFlagsBits = 39;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100065748(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

void sub_100065794(uint64_t a1)
{
}

void sub_1000657A8(uint64_t a1)
{
}

void sub_1000657BC(uint64_t a1)
{
}

uint64_t sub_1000657D4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_100065854(uint64_t a1)
{
  return sub_100061E8C(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100065884(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002E768(a3);
  sub_100051B88();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_1000658E0()
{
  unint64_t result = qword_1006991A8;
  if (!qword_1006991A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006991A8);
  }
  return result;
}

unint64_t sub_10006592C()
{
  unint64_t result = qword_1006991C8;
  if (!qword_1006991C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006991C8);
  }
  return result;
}

uint64_t sub_100065978(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000659C0()
{
  unint64_t result = qword_100699208;
  if (!qword_100699208)
  {
    sub_1000362B0(255, &qword_1006989B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699208);
  }
  return result;
}

uint64_t sub_100065A20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002E768(a3);
  sub_100051B88();
  sub_100065C48();
  v4();
  return a2;
}

uint64_t sub_100065A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002E768(&qword_100699200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for BindingsConfigResolver()
{
  return &type metadata for BindingsConfigResolver;
}

void sub_100065B3C(unint64_t a1@<X8>)
{
  *(void *)(v4 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  uint64_t v5 = (void *)(*(void *)(v1 + 48) + 16 * a1);
  *uint64_t v5 = v3;
  v5[1] = v2;
}

uint64_t sub_100065B6C()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100065BD4()
{
  return swift_dynamicCast();
}

unint64_t sub_100065C2C()
{
  return sub_100055F1C(v0, v1);
}

uint64_t sub_100065C6C()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  return sub_10003BD5C(0, v2, 1, v0);
}

uint64_t sub_100065CD8()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t sub_100065CF0()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t sub_100065D08()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t sub_100065D28()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100065D48()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100065DB0@<X0>(uint64_t a1@<X8>)
{
  return sub_100081270(0, (unint64_t)(a1 + 63) >> 6, v1);
}

BOOL sub_100065E0C(void *a1)
{
  return sub_100065E28(a1);
}

BOOL sub_100065E28(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 objectForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100077ED4((uint64_t)v5, &qword_100697EE8);
  return v3 != 0;
}

float sub_100065EC4(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 objectForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    uint64_t v4 = sub_100057638(&v26, v27);
    sub_100079690((uint64_t)v4, v5);
    if (swift_dynamicCast())
    {
      sub_10002EB9C((uint64_t)v27);
      return v25;
    }
    else
    {
      if (qword_1006978B0 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      uint64_t v9 = (void *)sub_100078994(v8, (uint64_t)qword_1006AD1B8);
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (sub_100079310(v10))
      {
        sub_100033734();
        *(void *)&long long v26 = sub_10003371C();
        sub_1000792D4(4.8149e-34);
        uint64_t v13 = sub_100032B48(0xD000000000000018, v11, v12);
        sub_1000792C4(v13, v14, v15, v16, v17, v18, v19, v20, v24, v13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100079630((void *)&_mh_execute_header, v21, v22, "Unexpected type value found in defaults for key: %s");
        swift_arrayDestroy();
        sub_100033704();
        sub_100033704();
      }

      sub_10007E0CC(0.0, 1000.0);
      float v6 = v23;
      sub_10002EB9C((uint64_t)v27);
    }
    return v6;
  }
  else
  {
    sub_10007E0CC(0.0, 1000.0);
  }
  return result;
}

uint64_t sub_1000660E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002FB94();
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a1 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    float v6 = sub_100057638(&v21, v22);
    sub_100079690((uint64_t)v6, v7);
    if (sub_100079670())
    {
      uint64_t result = sub_10002EB9C((uint64_t)v22);
      *(_OWORD *)a2 = v20;
    }
    else
    {
      if (qword_1006978B0 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      uint64_t v12 = sub_100078994(v11, (uint64_t)qword_1006AD1B8);
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (_DWORD *)sub_100033734();
        *(void *)&long long v21 = sub_10003371C();
        _DWORD *v14 = 136315138;
        uint64_t v15 = sub_10002FB94();
        sub_100032B48(v15, v16, v17);
        sub_100078EA0();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_1000790AC((void *)&_mh_execute_header, v12, v13, "Unexpected type value found in defaults for key: %s");
        swift_arrayDestroy();
        sub_100033704();
        sub_100033704();
      }

      if (qword_1006978C0 != -1) {
        swift_once();
      }
      uint64_t v18 = qword_1006AD1E8;
      unint64_t v19 = unk_1006AD1F0;
      *(void *)a2 = qword_1006AD1E8;
      *(void *)(a2 + 8) = v19;
      sub_10002FBFC(v18, v19);
      return sub_10002EB9C((uint64_t)v22);
    }
  }
  else
  {
    if (qword_1006978C0 != -1) {
      swift_once();
    }
    uint64_t v9 = qword_1006AD1E8;
    unint64_t v10 = unk_1006AD1F0;
    *(void *)a2 = qword_1006AD1E8;
    *(void *)(a2 + 8) = v10;
    return sub_10002FBFC(v9, v10);
  }
  return result;
}

double sub_100066348(void *a1)
{
  type metadata accessor for Date();
  sub_100078890();
  __chkstk_darwin(v2);
  sub_10007924C();
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [a1 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100057638(v17, v18);
    sub_1000333E4((uint64_t)v18, (uint64_t)v17);
    if (swift_dynamicCast())
    {
      sub_10002EB9C((uint64_t)v18);
      return v16;
    }
    else
    {
      if (qword_1006978B0 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      uint64_t v9 = sub_100078994(v8, (uint64_t)qword_1006AD1B8);
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)sub_100033734();
        *(void *)&v17[0] = sub_10003371C();
        *(_DWORD *)uint64_t v11 = 136315138;
        sub_100032B48(0xD000000000000017, 0x800000010056A580, (uint64_t *)v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unexpected type value found in defaults for key: %s", v11, 0xCu);
        swift_arrayDestroy();
        sub_100033704();
        sub_100033704();
      }

      static Date.distantPast.getter();
      Date.timeIntervalSinceNow.getter();
      double v5 = v12;
      sub_1000462F8();
      v14(v13);
      sub_10002EB9C((uint64_t)v18);
    }
  }
  else
  {
    static Date.distantPast.getter();
    Date.timeIntervalSinceNow.getter();
    double v5 = v6;
    sub_1000462F8();
    v7();
  }
  return v5;
}

uint64_t sub_1000665F8(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 objectForKey:v2];

  if (!v3) {
    return 0x725F4E4F53414552;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100057638(v11, v12);
  sub_1000333E4((uint64_t)v12, (uint64_t)v11);
  if (swift_dynamicCast())
  {
    sub_10002EB9C((uint64_t)v12);
    return v10;
  }
  else
  {
    if (qword_1006978B0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100031284(v5, (uint64_t)qword_1006AD1B8);
    double v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(void *)&v11[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      sub_100032B48(0xD00000000000001ALL, 0x80000001005691E0, (uint64_t *)v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unexpected type value found in defaults for key: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v4 = 0x725F4E4F53414552;
    sub_10002EB9C((uint64_t)v12);
  }
  return v4;
}

uint64_t sub_10006684C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10002E768(&qword_100697EE0);
  __chkstk_darwin(v4 - 8);
  double v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [a1 objectForKey:v7];

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100057638(v20, v21);
    sub_1000333E4((uint64_t)v21, (uint64_t)v20);
    uint64_t v9 = type metadata accessor for Date();
    if (swift_dynamicCast())
    {
      sub_10003349C((uint64_t)v6, 0, 1, v9);
      sub_10002EB9C((uint64_t)v21);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a2, v6, v9);
    }
    else
    {
      sub_10003349C((uint64_t)v6, 1, 1, v9);
      sub_100077ED4((uint64_t)v6, &qword_100697EE0);
      if (qword_1006978B0 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100031284(v14, (uint64_t)qword_1006AD1B8);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(void *)&v20[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        v19[1] = sub_100032B48(0xD000000000000016, 0x8000000100569200, (uint64_t *)v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unexpected type value found in defaults for key: %s", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      if (qword_1006978D0 != -1) {
        swift_once();
      }
      uint64_t v18 = sub_100031284(v9, (uint64_t)qword_1006AD200);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a2, v18, v9);
      return sub_10002EB9C((uint64_t)v21);
    }
  }
  else
  {
    if (qword_1006978D0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = sub_100031284(v11, (uint64_t)qword_1006AD200);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    return v13(a2, v12, v11);
  }
}

uint64_t sub_100066C4C(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 objectForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100057638(v10, v11);
    sub_1000333E4((uint64_t)v11, (uint64_t)v10);
    if (swift_dynamicCast())
    {
      sub_10002EB9C((uint64_t)v11);
      return v9;
    }
    if (qword_1006978B0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100031284(v5, (uint64_t)qword_1006AD1B8);
    double v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(void *)&v10[0] = swift_slowAlloc();
      *(_DWORD *)id v8 = 136315138;
      sub_100032B48(0xD000000000000011, 0x8000000100569220, (uint64_t *)v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unexpected type value found in defaults for key: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10002EB9C((uint64_t)v11);
  }
  return 0;
}

uint64_t sub_100066E74(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 objectForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100057638(v10, v11);
    sub_1000333E4((uint64_t)v11, (uint64_t)v10);
    if (swift_dynamicCast())
    {
      sub_10002EB9C((uint64_t)v11);
      return v9 & 1;
    }
    if (qword_1006978B0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100031284(v5, (uint64_t)qword_1006AD1B8);
    double v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(void *)&v10[0] = swift_slowAlloc();
      *(_DWORD *)id v8 = 136315138;
      sub_100032B48(0xD000000000000012, 0x8000000100569240, (uint64_t *)v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unexpected type value found in defaults for key: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_10002EB9C((uint64_t)v11);
  }
  return 0;
}

uint64_t sub_10006709C(void *a1)
{
  return sub_1000670C0(a1, 0xD00000000000001CLL, 0x8000000100569180, byte_1006AD228);
}

uint64_t sub_1000670C0(void *a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [a1 objectForKey:v8];

  if (!v9) {
    return *a4;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  uint64_t v10 = sub_100057638(v30, v31);
  sub_100079690((uint64_t)v10, v11);
  if (swift_dynamicCast())
  {
    sub_10002EB9C((uint64_t)v31);
    return v29 & 1;
  }
  else
  {
    if (qword_1006978B0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = (void *)sub_100078994(v13, (uint64_t)qword_1006AD1B8);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (sub_100079378(v15))
    {
      os_log_type_t v16 = (_DWORD *)sub_100033734();
      *(void *)&v30[0] = sub_10003371C();
      *os_log_type_t v16 = 136315138;
      uint64_t v17 = sub_100032B48(a2, a3, (uint64_t *)v30);
      sub_1000792C4(v17, v18, v19, v20, v21, v22, v23, v24, v28, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100079528((void *)&_mh_execute_header, v25, v26, "Unexpected type value found in defaults for key: %s");
      swift_arrayDestroy();
      sub_100033704();
      sub_100033704();
    }

    uint64_t v12 = *a4;
    sub_10002EB9C((uint64_t)v31);
  }
  return v12;
}

uint64_t sub_1000672A0(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 objectForKey:v2];

  if (!v3) {
    return 1685025392;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  uint64_t v4 = sub_100057638(&v16, v17);
  sub_100079690((uint64_t)v4, v5);
  if (sub_100079670())
  {
    sub_10002EB9C((uint64_t)v17);
    return v15;
  }
  else
  {
    if (qword_1006978B0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    NSString v8 = (void *)sub_100078994(v7, (uint64_t)qword_1006AD1B8);
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (sub_100079310(v9))
    {
      sub_100033734();
      *(void *)&long long v16 = sub_10003371C();
      sub_1000792D4(4.8149e-34);
      sub_100032B48(0xD000000000000014, v10, v11);
      sub_100078EA0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100079630((void *)&_mh_execute_header, v12, v13, "Unexpected type value found in defaults for key: %s");
      swift_arrayDestroy();
      sub_100033704();
      sub_100033704();
    }

    uint64_t v6 = 1685025392;
    sub_10002EB9C((uint64_t)v17);
  }
  return v6;
}

uint64_t sub_100067464(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 dataForKey:v2];

  if (v3)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_10002E768(&qword_100699448);
    sub_100077424(&qword_100699460, &qword_100699468);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    sub_10002EC6C(v4, v6);
    return v9;
  }
  else
  {
    if (qword_1006978E0 != -1) {
      swift_once();
    }
    uint64_t v7 = qword_1006AD230;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_100067738(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 dataForKey:v2];

  if (v3)
  {
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_10002E768(&qword_1006993C8);
    sub_1000771A0();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    sub_10002EC6C(v4, v6);
    return v9;
  }
  else
  {
    if (qword_1006978C8 != -1) {
      swift_once();
    }
    uint64_t v7 = qword_1006AD1F8;
    swift_bridgeObjectRetain();
  }
  return v7;
}

id sub_100067A24()
{
  id v0 = [self standardUserDefaults];

  return v0;
}

uint64_t sub_100067A64(uint64_t a1, void *a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10002E768(&qword_100699448);
  sub_100077424(&qword_100699450, &qword_100699458);
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v7 = String._bridgeToObjectiveC()();
  [a2 setObject:isa forKey:v7];

  return sub_10002EC6C(v3, v5);
}

uint64_t sub_100067C44(uint64_t a1, void *a2)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10002E768(&qword_1006993C8);
  sub_1000770C4();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v7 = String._bridgeToObjectiveC()();
  [a2 setObject:isa forKey:v7];

  return sub_10002EC6C(v3, v5);
}

double sub_100067E04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_100055E90(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    sub_1000333E4(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

unint64_t sub_100067E68(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    goto LABEL_5;
  }
  unint64_t v4 = sub_100055ED4(a1);
  if ((v5 & 1) == 0)
  {
    uint64_t v2 = 0;
LABEL_5:
    unsigned __int8 v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  unsigned __int8 v6 = 0;
  uint64_t v2 = *(unsigned int *)(*(void *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

uint64_t sub_100067EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_100055F1C(a1, a2);
    if (v3) {
      swift_bridgeObjectRetain();
    }
  }
  return sub_100031880();
}

uint64_t sub_100067F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_100055F1C(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_100067F74(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_100056038(a1), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_100067FB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_100056038(a1), (v6 & 1) != 0))
  {
    unint64_t v7 = v5;
    uint64_t v8 = *(void *)(a2 + 56);
    uint64_t v9 = type metadata accessor for ServerJSONFetchRetryState();
    sub_100077324(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v7, a3);
    uint64_t v10 = a3;
    uint64_t v11 = 0;
    uint64_t v12 = v9;
  }
  else
  {
    uint64_t v12 = type metadata accessor for ServerJSONFetchRetryState();
    uint64_t v10 = a3;
    uint64_t v11 = 1;
  }

  return sub_10003349C(v10, v11, 1, v12);
}

uint64_t sub_100068068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_100055F1C(a1, a2);
    if (v3) {
      swift_bridgeObjectRetain();
    }
  }
  return sub_100031880();
}

double sub_1000680F4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_100055F1C(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_1000333E4(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t sub_100068158()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_100699220);
  sub_100031284(v0, (uint64_t)qword_100699220);
  return Logger.init(subsystem:category:)();
}

id sub_1000681E4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for RavioliManagerObjC()) init];
  static RavioliManagerObjC.shared = (uint64_t)result;
  return result;
}

uint64_t *RavioliManagerObjC.shared.unsafeMutableAddressor()
{
  if (qword_100697928 != -1) {
    swift_once();
  }
  return &static RavioliManagerObjC.shared;
}

id static RavioliManagerObjC.shared.getter()
{
  if (qword_100697928 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static RavioliManagerObjC.shared;

  return v0;
}

id sub_1000682E4()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10002E768(&qword_100699490);
  __chkstk_darwin(v5 - 8);
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WalletMonitor();
  swift_allocObject();
  uint64_t v8 = v0;
  sub_10005A5C4();
  sub_10005A120();
  swift_release();
  sub_10002E768(&qword_1006993B0);
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = sub_100077758((uint64_t)v7, 10000000000, v9);
  *(void *)&v8[OBJC_IVAR____TtC3asd18RavioliManagerObjC_manager] = v10;
  swift_retain();

  v15.receiver = v8;
  v15.super_class = ObjectType;
  id v11 = [super init];
  uint64_t v12 = type metadata accessor for TaskPriority();
  sub_10003349C((uint64_t)v4, 1, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  void v13[4] = v10;
  sub_10004964C((uint64_t)v4, (uint64_t)&unk_1006994A0, (uint64_t)v13);
  swift_release();
  return v11;
}

uint64_t RavioliManager.__allocating_init(trigger:updateCoalesceTimeNanoSeconds:fetcher:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  RavioliManager.init(trigger:updateCoalesceTimeNanoSeconds:fetcher:)(a1, a2, a3);
  return v6;
}

uint64_t sub_100068508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10006859C;
  return sub_100072180();
}

uint64_t sub_10006859C()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100068678()
{
  sub_10003F0F4();
  sub_10006AC00();
  sub_10003F1AC();
  return v0();
}

void RavioliManagerObjC.fetchRavioliDataFromStore(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100065B08();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v26 = type metadata accessor for UUID();
  sub_100078890();
  uint64_t v28 = *(void *)(v27 + 64);
  __chkstk_darwin(v29);
  uint64_t v30 = sub_10002E768(&qword_100697E68);
  uint64_t v31 = sub_100051D98(v30);
  __chkstk_darwin(v31);
  sub_100046338();
  uint64_t v34 = v33 - v32;
  uint64_t v35 = type metadata accessor for TaskPriority();
  sub_10003349C(v34, 1, 1, v35);
  sub_1000789FC();
  v36();
  sub_1000791A4();
  uint64_t v37 = (void *)swift_allocObject();
  char v38 = sub_100079404(v37);
  v39(v38, (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v26);
  uint64_t v40 = (void *)((char *)v37 + v28);
  *uint64_t v40 = v25;
  v40[1] = v23;
  swift_retain();
  swift_retain();
  sub_10004964C(v34, (uint64_t)&unk_100699248, (uint64_t)v37);
  swift_release();
  sub_100065AF0();
}

uint64_t sub_100068878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[4] = a6;
  v7[5] = a7;
  long long v7[2] = a4;
  void v7[3] = a5;
  return _swift_task_switch(sub_10006889C, a4, 0);
}

uint64_t sub_10006889C()
{
  sub_10003F0F4();
  *(void *)(v0 + 48) = sub_10006D380();
  *(void *)(v0 + 56) = v1;
  sub_10003F160();
  return _swift_task_switch(v2, v3, v4);
}

uint64_t sub_100068900()
{
  sub_10003F444();
  uint64_t v0 = sub_100079508();
  v1(v0);
  uint64_t v2 = sub_100079508();
  sub_10002EC58(v2, v3);
  sub_10003F1AC();
  return v4();
}

#error "100068A68: call analysis failed (funcsize=74)"

void sub_100068AA8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v5 = isa;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

uint64_t sub_100068B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return sub_100051A38((uint64_t)sub_100068B34, 0);
}

uint64_t sub_100068B34()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC3asd18RavioliManagerObjC_manager);
  *(void *)(v0 + 48) = v1;
  return sub_100051A38((uint64_t)sub_100068B5C, v1);
}

uint64_t sub_100068B5C()
{
  sub_10003F0F4();
  sub_10006F928(v0[2], v0[3], v0[4]);
  sub_10003F1AC();
  return v1();
}

void RavioliManagerObjC.requestRavioliFetchWithProbabiliticThrottle(bagID:notificationId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100065B08();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v28 = type metadata accessor for UUID();
  sub_100078890();
  uint64_t v30 = v29;
  uint64_t v32 = *(void *)(v31 + 64);
  __chkstk_darwin(v33);
  uint64_t v34 = (char *)&a9 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10002E768(&qword_100697E68);
  uint64_t v36 = sub_100051D98(v35);
  __chkstk_darwin(v36);
  sub_10007905C();
  uint64_t v37 = type metadata accessor for TaskPriority();
  sub_10003349C(v21, 1, 1, v37);
  sub_100079440();
  sub_1000789FC();
  v38();
  unint64_t v39 = (v32 + ((*(unsigned __int8 *)(v30 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = (void *)swift_allocObject();
  unint64_t v41 = sub_100079404(v40);
  v42(v41, v34, v28);
  int64_t v43 = (void *)((char *)v40 + v39);
  void *v43 = v27;
  v43[1] = v25;
  id v44 = v20;
  swift_bridgeObjectRetain();
  sub_10004964C(v21, (uint64_t)&unk_100699258, (uint64_t)v40);
  swift_release();
  sub_100065AF0();
}

uint64_t sub_100068D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[43] = a6;
  v7[44] = a7;
  v7[41] = a4;
  v7[42] = a5;
  return _swift_task_switch(sub_100068D54, 0, 0);
}

uint64_t sub_100068D54()
{
  sub_100048E64();
  if (qword_100697968 != -1) {
    swift_once();
  }
  sub_100051F9C();
  id v1 = (id)static ASDConfigurationManager.shared;
  sub_1000950DC((_OWORD *)(v0 + 208));

  sub_100051880(v0 + 208, v0 + 112, &qword_100697F08);
  if (*(void *)(v0 + 152) == 1
    || (memcpy((void *)(v0 + 16), (const void *)(v0 + 112), 0x60uLL),
        sub_100036138((uint64_t *)(v0 + 208)),
        sub_100051880(v0 + 44, v0 + 376, &qword_100699518),
        sub_100051880(v0 + 376, v0 + 368, &qword_100699518),
        (*(unsigned char *)(v0 + 372) & 1) != 0)
    || (float v2 = *(float *)(v0 + 368), sub_10007E560(), v2 >= v3))
  {
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v12;
    void *v12 = v0;
    v12[1] = sub_100068F94;
    uint64_t v13 = sub_100078E08(*(void *)(v0 + 336));
    return sub_100068B14(v13, v14, v15);
  }
  else
  {
    if (qword_100697920 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    Class v5 = (void *)sub_100078994(v4, (uint64_t)qword_100699220);
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (sub_100051E9C(v6))
    {
      uint64_t v7 = (_WORD *)sub_100051AA0();
      sub_100078C08(v7);
      sub_100051C8C((void *)&_mh_execute_header, v8, v9, "Skipping Ravioli fetch on bag due to probabilitic throttling");
      sub_100033704();
    }

    sub_10003F1AC();
    return v10();
  }
}

uint64_t sub_100068F94()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *float v2 = v1;
  swift_task_dealloc();
  sub_10003F1AC();
  return v3();
}

#error "100069124: call analysis failed (funcsize=68)"

void RavioliManagerObjC.triggerRavioliFetch(bagID:notificationId:completion:)()
{
  sub_100065B08();
  uint64_t v29 = v2;
  uint64_t v30 = v3;
  uint64_t v5 = v4;
  uint64_t v28 = v6;
  uint64_t v7 = type metadata accessor for UUID();
  sub_100078890();
  uint64_t v9 = v8;
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v12);
  uint64_t v13 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002E768(&qword_100697E68);
  uint64_t v15 = sub_100051D98(v14);
  __chkstk_darwin(v15);
  sub_100046348();
  uint64_t v16 = *(void *)(v0 + OBJC_IVAR____TtC3asd18RavioliManagerObjC_manager);
  uint64_t v17 = type metadata accessor for TaskPriority();
  sub_100078E6C(v1, v18, v19, v17);
  sub_1000789FC();
  v20();
  unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = 0;
  *((void *)v23 + 3) = 0;
  *((void *)v23 + 4) = v16;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v23[v21], v13, v7);
  uint64_t v24 = &v23[v22];
  *(void *)uint64_t v24 = v28;
  *((void *)v24 + 1) = v5;
  uint64_t v25 = &v23[(v22 + 23) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v26 = v30;
  *(void *)uint64_t v25 = v29;
  *((void *)v25 + 1) = v26;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10004964C(v1, (uint64_t)&unk_100699268, (uint64_t)v23);
  swift_release();
  sub_100065AF0();
}

uint64_t sub_100069320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v10;
  void v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  return _swift_task_switch(sub_100069350, a4, 0);
}

uint64_t sub_100069350()
{
  sub_10003F0F4();
  sub_10006FBB0(v0[3], v0[4], v0[5], 1);
  sub_10003F160();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_1000693B8()
{
  sub_10003F0F4();
  (*(void (**)(void))(v0 + 48))();
  sub_10003F1AC();
  return v1();
}

void RavioliManagerObjC.triggerImmediateRavioliFetch(bagID:notificationId:completion:)()
{
  sub_100065B08();
  uint64_t v2 = v1;
  uint64_t v33 = v4;
  uint64_t v34 = v3;
  uint64_t v35 = v5;
  uint64_t v6 = type metadata accessor for UUID();
  sub_100078890();
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v11);
  uint64_t v12 = sub_10002E768(&qword_100697E68);
  uint64_t v13 = sub_100051D98(v12);
  __chkstk_darwin(v13);
  sub_100046338();
  uint64_t v16 = v15 - v14;
  id v17 = [self standardUserDefaults];
  char v18 = sub_1000670C0(v17, 0xD00000000000001FLL, 0x80000001005692A0, byte_1006AD218);

  if (v18)
  {
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v33;
    *(void *)(v19 + 24) = v2;
    swift_retain();
    RavioliManagerObjC.triggerRavioliFetch(bagID:notificationId:completion:)();
    sub_100065AF0();
    swift_release();
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + OBJC_IVAR____TtC3asd18RavioliManagerObjC_manager);
    uint64_t v22 = type metadata accessor for TaskPriority();
    sub_100078E6C(v16, v23, v24, v22);
    sub_1000789FC();
    v25();
    unint64_t v26 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    unint64_t v27 = (v10 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v28 = (char *)swift_allocObject();
    *((void *)v28 + 2) = 0;
    *((void *)v28 + 3) = 0;
    *((void *)v28 + 4) = v21;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v28[v26], (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    uint64_t v29 = &v28[v27];
    uint64_t v30 = v35;
    *(void *)uint64_t v29 = v34;
    *((void *)v29 + 1) = v30;
    uint64_t v31 = &v28[(v27 + 23) & 0xFFFFFFFFFFFFFFF8];
    *(void *)uint64_t v31 = v33;
    *((void *)v31 + 1) = v2;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10004964C(v16, (uint64_t)&unk_100699278, (uint64_t)v28);
    swift_release();
    sub_100065AF0();
  }
}

uint64_t sub_1000696D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[2] = a8;
  v8[3] = v15;
  uint64_t v12 = (void *)swift_task_alloc();
  void v8[4] = v12;
  void *v12 = v8;
  v12[1] = sub_100069794;
  return sub_10006DEAC(a5, a6, a7);
}

uint64_t sub_100069794()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10003F0B8();
  *uint64_t v5 = v4;
  *(void *)(v6 + 40) = v0;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100069870()
{
  sub_10003F0F4();
  (*(void (**)(void))(v0 + 16))(0);
  sub_10003F1AC();
  return v1();
}

uint64_t sub_1000698D0()
{
  sub_10003F444();
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 16);
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  sub_10003F1AC();
  return v3();
}

void sub_100069988()
{
  sub_100065B08();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for UUID();
  sub_100078890();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_10007921C();
  uint64_t v13 = _Block_copy(v6);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v13;
  id v18 = v8;
  v2(v0, v14, v16, v4, v17);

  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0, v9);
  sub_100065AF0();
}

void sub_100069AAC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_100069B24()
{
  uint64_t v1 = sub_10002E768(&qword_1006994C0);
  uint64_t v2 = sub_100051D98(v1);
  __chkstk_darwin(v2);
  sub_100079234();
  uint64_t v3 = type metadata accessor for UUID();
  sub_100031220(v3, static RavioliConstants.ravioliUUID);
  sub_100031284(v3, (uint64_t)static RavioliConstants.ravioliUUID);
  UUID.init(uuidString:)();
  uint64_t result = sub_100078B04(v0);
  if (v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = sub_100079508();
    return v7(v6);
  }
  return result;
}

uint64_t RavioliConstants.ravioliUUID.unsafeMutableAddressor()
{
  if (qword_100697930 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for UUID();

  return sub_100031284(v0, (uint64_t)static RavioliConstants.ravioliUUID);
}

uint64_t static RavioliConstants.ravioliUUID.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_100697930 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = sub_100031284(v2, (uint64_t)static RavioliConstants.ravioliUUID);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

id sub_100069E1C()
{
  uint64_t v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100031284(v3, (uint64_t)qword_100699220);
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DefinedRavioliNotificationIds should not be initialised", v6, 2u);
    swift_slowDealloc();
  }

  v8.receiver = v1;
  v8.super_class = ObjectType;
  return [super init];
}

void *DefinedRavioliNotificationIds.missingBag.unsafeMutableAddressor()
{
  return &static DefinedRavioliNotificationIds.missingBag;
}

unint64_t static DefinedRavioliNotificationIds.missingBag.getter()
{
  return 0xD000000000000011;
}

const char *DefinedRavioliNotificationIds.xpc.unsafeMutableAddressor()
{
  return "REASON_xpc";
}

uint64_t static DefinedRavioliNotificationIds.xpc.getter()
{
  return 0x785F4E4F53414552;
}

uint64_t sub_10006A04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return sub_100051A38((uint64_t)sub_10006A06C, 0);
}

uint64_t sub_10006A06C()
{
  sub_10003F444();
  uint64_t v1 = v0[4];
  id v2 = [self ephemeralSessionConfiguration];
  v0[5] = (uint64_t)v2;
  id v3 = [objc_allocWithZone((Class)AKAppleIDSession) init];
  [v2 set_appleIDContext:v3];

  id v4 = [self sessionWithConfiguration:v2];
  v0[6] = (uint64_t)v4;
  type metadata accessor for RavioliFetcher(0);
  os_log_type_t v5 = (void *)swift_task_alloc();
  v0[7] = (uint64_t)v5;
  *os_log_type_t v5 = v0;
  v5[1] = sub_10006A1C4;
  uint64_t v6 = sub_100078E08(v0[2]);
  return sub_1000B8BAC(v6, (uint64_t)v4, 0x6C7070612E6D6F63, 0xED00006473612E65, v7, v1);
}

uint64_t sub_10006A1C4()
{
  sub_100048E64();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1000336EC();
  uint64_t v7 = v6;
  sub_10003F0E8();
  *objc_super v8 = v7;
  uint64_t v9 = *v1;
  sub_10003F0B8();
  void *v10 = v9;
  v7[8] = v0;
  swift_task_dealloc();
  if (!v0)
  {
    v7[9] = v3;
    v7[10] = v5;
  }
  sub_10003F160();
  sub_100048EF4();
  return _swift_task_switch(v11, v12, v13);
}

uint64_t sub_10006A2BC()
{
  sub_10003F0F4();
  uint64_t v1 = *(void **)(v0 + 40);

  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  return v2(v3, v4);
}

uint64_t sub_10006A324()
{
  sub_10003F0F4();
  uint64_t v1 = *(void **)(v0 + 40);

  sub_10003F1AC();
  return v2();
}

uint64_t sub_10006A384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_10006A430;
  return sub_10006A04C(a1, a2, a3);
}

uint64_t sub_10006A430()
{
  sub_10003F444();
  sub_1000336EC();
  uint64_t v2 = *v1;
  sub_10003F0B8();
  *uint64_t v3 = v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v2 + 8);
  if (!v0) {
    uint64_t v4 = sub_100079508();
  }
  return v5(v4);
}

uint64_t RavioliManager.init(trigger:updateCoalesceTimeNanoSeconds:fetcher:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_defaultActor_initialize();
  sub_100078BFC();
  uint64_t v7 = *(void *)(v6 + 112);
  type metadata accessor for UUID();
  sub_10002E768(&qword_1006979B8);
  sub_1000785BC((unint64_t *)&qword_1006979C0, (void (*)(uint64_t))&type metadata accessor for UUID);
  *(void *)(v3 + v7) = sub_1000795F8();
  sub_100078BFC();
  *(void *)(v3 + *(void *)(v8 + 128)) = 0;
  sub_100078BFC();
  uint64_t v10 = *(void *)(v9 + 136);
  *(void *)(v3 + v10) = sub_1000795F8();
  sub_100078BFC();
  *(void *)(v3 + *(void *)(v11 + 144)) = a2;
  sub_100078BFC();
  sub_100078980();
  sub_1000789FC();
  v12();
  sub_10002EA7C(a3, v3 + *(void *)(*(void *)v3 + 152));
  uint64_t v16 = type metadata accessor for ASAnalyticsManager();
  uint64_t v17 = &off_100661050;
  *(void *)&long long v15 = swift_allocObject();
  sub_10002EB9C(a3);
  sub_100079160();
  v13();
  sub_1000311A4(&v15, v3 + *(void *)(*(void *)v3 + 160));
  return v3;
}

uint64_t sub_10006A6F0()
{
  return sub_100076EFC();
}

uint64_t sub_10006A708()
{
  sub_100078968();
  sub_100051FE0();
  uint64_t v0 = sub_100078FE0();
  sub_100031774(v0);
  sub_100078A90();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100078948(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10003F060;
  sub_100078924();
  sub_100051C0C();
  return sub_100068878(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10006A7C4()
{
  sub_10007932C();
  type metadata accessor for UUID();
  sub_100078890();
  sub_1000790D0();

  uint64_t v1 = sub_1000789BC();
  v2(v1);
  swift_bridgeObjectRelease();
  sub_100078D6C();
  sub_100058710();
  return _swift_deallocObject(v3, v4, v5);
}

uint64_t sub_10006A85C()
{
  sub_100078968();
  sub_100051FE0();
  uint64_t v0 = sub_100078FE0();
  sub_100031774(v0);
  sub_100078A90();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100078948(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10003F060;
  sub_100078924();
  sub_100051C0C();
  return sub_100068D30(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10006A91C()
{
  uint64_t v0 = sub_100078FE0();
  sub_100031774(v0);
  sub_100078C14();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100078948(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10003F060;
  uint64_t v4 = sub_100078CCC();
  return sub_100069320(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10006A9FC()
{
  sub_10007932C();
  type metadata accessor for UUID();
  sub_100078890();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v0 = sub_1000789BC();
  v1(v0);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100078D6C();
  sub_100058710();
  return _swift_deallocObject(v2, v3, v4);
}

uint64_t sub_10006AAC0()
{
  uint64_t v0 = sub_100078FE0();
  sub_100031774(v0);
  sub_100078C14();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100078948(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10003F060;
  uint64_t v4 = sub_100078CCC();
  return sub_1000696D4(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_10006AB9C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006ABD4()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

void sub_10006AC00()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002E768(&qword_100699490);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100031284(v8, (uint64_t)qword_100699220);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "start Calzone Monitor", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void *)(*(void *)v0 + 128);
  if (*(void *)(v0 + v12))
  {
    os_log_t v22 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v13, "Tried to start already running Calzone monitor - ignored", v14, 2u);
      swift_slowDealloc();
    }
    os_log_t v15 = v22;
  }
  else
  {
    uint64_t v16 = v0 + *(void *)(*(void *)v0 + 104);
    uint64_t v17 = type metadata accessor for TaskPriority();
    sub_10003349C((uint64_t)v7, 1, 1, v17);
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v16, v2);
    unint64_t v19 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = 0;
    *(void *)(v20 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v20 + v19, (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
    *(void *)(v20 + ((v4 + v19 + 7) & 0xFFFFFFFFFFFFFFF8)) = v18;
    *(void *)(v1 + v12) = sub_10004964C((uint64_t)v7, (uint64_t)&unk_1006994B8, v20);
    swift_release();
  }
}

Swift::Void __swiftcall RavioliManager.startWalletMonitor()()
{
  sub_100065B08();
  uint64_t v3 = v0;
  os_log_t v29 = *(os_log_t *)v0;
  Class isa = v29[10].isa;
  sub_100078890();
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = sub_10002E768(&qword_100697E68);
  uint64_t v13 = sub_100051D98(v12);
  __chkstk_darwin(v13);
  sub_100046348();
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  os_log_t v15 = sub_100078994(v14, (uint64_t)qword_100699220);
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v2 = (uint8_t *)sub_100051AA0();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "start Calzone Monitor", v2, 2u);
    sub_100033704();
  }

  uint64_t v17 = *(void *)(*(void *)v0 + 128);
  if (*(void *)(v0 + v17))
  {
    os_log_t v29 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v18))
    {
      unint64_t v19 = (uint8_t *)sub_100051AA0();
      *(_WORD *)unint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v18, "Tried to start already running Calzone monitor - ignored", v19, 2u);
      sub_100033704();
    }
    sub_100065AF0();
  }
  else
  {
    uint64_t v22 = type metadata accessor for TaskPriority();
    sub_100078E6C(v1, v23, v24, v22);
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    sub_100079440();
    sub_1000789FC();
    v26();
    sub_1000791A4();
    unint64_t v27 = swift_allocObject();
    v27[2].Class isa = 0;
    v27[3].Class isa = 0;
    v27[4].Class isa = isa;
    v27[5].Class isa = v29[11].isa;
    (*(void (**)(uint8_t *, char *, Class))(v6 + 32))(&v2[(void)v27], v11, isa);
    *(Class *)((char *)&v27->isa + v8) = (Class)v25;
    *(void *)(v3 + v17) = sub_10004964C(v1, (uint64_t)&unk_100699288, (uint64_t)v27);
    swift_release();
    sub_100065AF0();
  }
}

uint64_t sub_10006B2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[51] = a4;
  v5[52] = a5;
  sub_10002E768(&qword_1006994C0);
  v5[53] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v5[54] = v6;
  v5[55] = *(void *)(v6 - 8);
  v5[56] = swift_task_alloc();
  uint64_t v7 = sub_10002E768(&qword_100699490);
  v5[57] = v7;
  v5[58] = *(void *)(v7 - 8);
  v5[59] = swift_task_alloc();
  uint64_t v8 = sub_10002E768(&qword_1006994C8);
  v5[60] = v8;
  v5[61] = *(void *)(v8 - 8);
  v5[62] = swift_task_alloc();
  return _swift_task_switch(sub_10006B478, 0, 0);
}

uint64_t sub_10006B478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100048E64();
  sub_100079440();
  sub_1000789FC();
  v14();
  sub_1000316D0(&qword_1006994D0, &qword_100699490);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  sub_100051F9C();
  sub_1000316D0(&qword_1006994D8, &qword_1006994C8);
  uint64_t v15 = swift_task_alloc();
  os_log_type_t v16 = (void *)sub_100079340(v15);
  *os_log_type_t v16 = v17;
  v16[1] = sub_10006B5B4;
  sub_1000793A4();
  sub_100048F08();
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10006B5B4()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

#error "10006B9F4: call analysis failed (funcsize=360)"

uint64_t sub_10006BC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_100078AD0();
  a21 = v23;
  a22 = v24;
  sub_1000790A0();
  a20 = v22;
  if (!_getErrorEmbeddedNSError<A>(_:)()) {
    swift_allocError();
  }
  sub_100078958();
  v25();
  sub_1000796D0();
  if (!v26) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100031284(v27, (uint64_t)qword_100699220);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    a9 = v22 + 392;
    sub_100033734();
    sub_10003371C();
    sub_100078F10(4.8149e-34);
    uint64_t v30 = Error.localizedDescription.getter();
    uint64_t v32 = sub_100032B48(v30, v31, &a11);
    sub_100079120(v32);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100079744((void *)&_mh_execute_header, v33, v34, "Error in Calzone monitoring: %s");
    sub_100051BCC();
    sub_100033704();
    sub_100033704();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_1000796D0();
  if (!v26) {
    swift_once();
  }
  uint64_t v35 = (void *)sub_100078994(v27, (uint64_t)qword_100699220);
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (sub_100051E9C(v36))
  {
    uint64_t v37 = (_WORD *)sub_100051AA0();
    sub_100078C08(v37);
    sub_100051C8C((void *)&_mh_execute_header, v38, v39, "Error - Calzone monitoring stopped");
    sub_100033704();
  }

  sub_100079770();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  sub_10003F29C();
  return v41(v40, v41, v42, v43, v44, v45, v46, v47, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10006BEF4()
{
  sub_10003F0F4();
  sub_1000793BC();
  sub_10006FBB0(v0, v1, v2, v3);
  sub_10003F160();
  return _swift_task_switch(v4, v5, v6);
}

#error "10006C100: call analysis failed (funcsize=185)"

uint64_t sub_10006C254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[53] = a6;
  v7[54] = a7;
  v7[51] = a4;
  v7[52] = a5;
  sub_10002E768(&qword_1006994C0);
  v7[55] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v7[56] = v9;
  v7[57] = *(void *)(v9 - 8);
  v7[58] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[59] = AssociatedTypeWitness;
  v7[60] = *(void *)(AssociatedTypeWitness - 8);
  v7[61] = swift_task_alloc();
  v7[62] = swift_task_alloc();
  v7[63] = *(void *)(a6 - 8);
  v7[64] = swift_task_alloc();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  v7[65] = v11;
  v7[66] = *(void *)(v11 - 8);
  v7[67] = swift_task_alloc();
  return _swift_task_switch(sub_10006C4A4, 0, 0);
}

uint64_t sub_10006C4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  sub_100078968();
  sub_100051FE0();
  sub_100079440();
  sub_1000789FC();
  v15();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  sub_100051F9C();
  *(void *)(v14 + 544) = swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_task_alloc();
  uint64_t v17 = (void *)sub_100079350(v16);
  *uint64_t v17 = v18;
  v17[1] = sub_10006C5B0;
  sub_1000793A4();
  sub_100051C0C();
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v19, v20, v21, v22, v23, v24, v25, v26, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_10006C5B0()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

#error "10006C9F8: call analysis failed (funcsize=368)"

uint64_t sub_10006CCA4()
{
  sub_10003F0F4();
  sub_1000793BC();
  sub_1000700A8();
  sub_10003F160();
  return _swift_task_switch(v0, v1, v2);
}

#error "10006CEB0: call analysis failed (funcsize=186)"

uint64_t sub_10006D000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  sub_100078AD0();
  a21 = v23;
  a22 = v24;
  sub_1000790A0();
  a20 = v22;
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22[60] + 32);
  v25(v22[61], v22[62], v22[59]);
  sub_1000790C4();
  swift_getAssociatedConformanceWitness();
  uint64_t v26 = _getErrorEmbeddedNSError<A>(_:)();
  uint64_t v27 = v22[61];
  if (v26)
  {
    (*(void (**)(void, void))(v22[60] + 8))(v22[61], v22[59]);
  }
  else
  {
    uint64_t v28 = v22[59];
    swift_allocError();
    v25(v29, v27, v28);
  }
  sub_100078958();
  v30();
  sub_1000796D0();
  if (!v31) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_100031284(v32, (uint64_t)qword_100699220);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    a9 = v22 + 49;
    sub_100033734();
    sub_10003371C();
    sub_100078F10(4.8149e-34);
    uint64_t v35 = Error.localizedDescription.getter();
    uint64_t v37 = sub_100032B48(v35, v36, &a11);
    sub_100079120(v37);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_100079744((void *)&_mh_execute_header, v38, v39, "Error in Calzone monitoring: %s");
    sub_100051BCC();
    sub_100033704();
    sub_100033704();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_1000796D0();
  if (!v31) {
    swift_once();
  }
  uint64_t v40 = (void *)sub_100078994(v32, (uint64_t)qword_100699220);
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (sub_100051E9C(v41))
  {
    uint64_t v42 = (_WORD *)sub_100051AA0();
    sub_100078C08(v42);
    sub_100051C8C((void *)&_mh_execute_header, v43, v44, "Error - Calzone monitoring stopped");
    sub_100033704();
  }

  sub_1000792EC();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  sub_10003F29C();
  return v46(v45, v46, v47, v48, v49, v50, v51, v52, a9, a10, a11, a12, a13, a14);
}

Swift::Void __swiftcall RavioliManager.stopWalletMonitor()()
{
  sub_100078BFC();
  uint64_t v2 = *(void *)(v1 + 128);
  if (*(void *)(v0 + v2))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  *(void *)(v0 + v2) = 0;

  swift_release();
}

uint64_t sub_10006D380()
{
  uint64_t v0 = sub_10006D7D4();
  unint64_t v2 = v1;
  if (v1 >> 60 != 15)
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_10007727C();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    if (v21[6] == 1
      && (swift_bridgeObjectRetain(),
          uint64_t v3 = Data.init(base64Encoded:options:)(),
          unint64_t v5 = v4,
          swift_bridgeObjectRelease(),
          v5 >> 60 != 15))
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = Data.init(base64Encoded:options:)();
      unint64_t v15 = v14;
      swift_bridgeObjectRelease();
      if (v15 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v19 = Data.init(base64Encoded:options:)();
        unint64_t v17 = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17 >> 60 != 15)
        {
          uint64_t v18 = sub_1000AAF50(v19, v17, v3, v5, v20, v15);
          sub_10002EC58(v19, v17);
          sub_10002EC58(v20, v15);
          sub_10002EC58(v3, v5);
          sub_10002EC58(v0, v2);
          return v18;
        }
        sub_10002EC58(v20, v15);
      }
      sub_10002EC58(v3, v5);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1000772C8();
    swift_allocError();
    unsigned char *v6 = 3;
    swift_willThrow();
    if (qword_100697920 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100031284(v7, (uint64_t)qword_100699220);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_getErrorValue();
      uint64_t v11 = Error.localizedDescription.getter();
      sub_100032B48(v11, v12, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error verifying stored Ravioli: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10002EC58(v0, v2);

      swift_errorRelease();
    }
    else
    {
      sub_10002EC58(v0, v2);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return 0;
  }
  return v0;
}

uint64_t sub_10006D7D4()
{
  id v0 = [self sharedInstance];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 f55HW2T4cquHq2nn:isa];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10006D87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_10006D8A0, v3, 0);
}

uint64_t sub_10006D8A0()
{
  sub_100048E64();
  v0[6] = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  uint64_t v1 = swift_allocObject();
  v0[7] = v1;
  *(unsigned char *)(v1 + 16) = 0;
  sub_100078BFC();
  sub_100079294(*(void *)(v2 + 152));
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10006D9B0;
  uint64_t v4 = sub_100078F84();
  return v5(v4);
}

uint64_t sub_10006D9B0()
{
  sub_100048E64();
  sub_100078C48();
  unint64_t v5 = v4;
  sub_10003F0B8();
  void *v6 = v5;
  void *v6 = *v2;
  v5[9] = v1;
  swift_task_dealloc();
  if (!v1)
  {
    v5[10] = v0;
    v5[11] = v3;
  }
  sub_100048F08();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10006DAB4()
{
  sub_10003F0F4();
  unint64_t v0 = sub_100079264();
  sub_10006DBA4(v0, v1, v2);
  swift_release();
  uint64_t v3 = sub_10007948C();
  return v4(v3);
}

uint64_t sub_10006DB14()
{
  sub_10003F0F4();
  sub_10006DBA4(v0[6], v0[5], v0[7]);
  swift_release();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10006DB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return sub_100051A38((uint64_t)sub_10006D8A0, v3);
}

void sub_10006DBA4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for ASAnalyticsEvent();
  __chkstk_darwin(v7);
  uint64_t v9 = (double *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __uint64_t v10 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
  if (v10 < a1)
  {
    __break(1u);
  }
  else
  {
    double v3 = (double)(v10 - a1) / 1000000000.0;
    sub_10002EAE0((void *)(a2 + *(void *)(*(void *)a2 + 160)), *(void *)(a2 + *(void *)(*(void *)a2 + 160) + 24));
    swift_beginAccess();
    *(unsigned char *)uint64_t v9 = *(unsigned char *)(a3 + 16);
    v9[1] = v3;
    swift_storeEnumTagMultiPayload();
    sub_1000AE9B8((uint64_t)v9);
    sub_100077C00((uint64_t)v9, (void (*)(void))type metadata accessor for ASAnalyticsEvent);
    if (qword_100697920 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v11 = type metadata accessor for Logger();
  sub_100031284(v11, (uint64_t)qword_100699220);
  swift_retain_n();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315394;
    swift_beginAccess();
    if (*(unsigned char *)(a3 + 16)) {
      uint64_t v15 = 0x6564656563637573;
    }
    else {
      uint64_t v15 = 0x44454C494146;
    }
    if (*(unsigned char *)(a3 + 16)) {
      unint64_t v16 = 0xE900000000000064;
    }
    else {
      unint64_t v16 = 0xE600000000000000;
    }
    uint64_t v17 = sub_100032B48(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2048;
    uint64_t v17 = *(void *)&v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Ravioli request %s taking %f seconds", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_10006DEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_10006DED0, v3, 0);
}

uint64_t sub_10006DED0()
{
  sub_10003F444();
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = (void *)sub_100078994(v1, (uint64_t)qword_100699220);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (sub_100051E9C(v3))
  {
    uint64_t v4 = (_WORD *)sub_100051AA0();
    sub_100078C08(v4);
    sub_100051C8C((void *)&_mh_execute_header, v5, v6, "Performing Ravioli fetch");
    sub_100033704();
  }

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  void *v7 = v0;
  v7[1] = sub_10006DFE4;
  uint64_t v8 = sub_100078E08(*(void *)(v0 + 16));
  return sub_10006D87C(v8, v9, v10);
}

uint64_t sub_10006DFE4()
{
  sub_100048E64();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1000336EC();
  uint64_t v7 = v6;
  sub_10003F0E8();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_10003F0B8();
  void *v10 = v9;
  v7[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100048EF4();
    __asm { BRAA            X1, X16 }
  }
  v7[8] = v3;
  v7[9] = v5;
  sub_100048EF4();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_10006E108()
{
  sub_100048E64();
  unint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  sub_10006E47C(v1, v2, v0[2]);
  sub_10002EC6C(v1, v2);
  sub_10003F1AC();
  return v3();
}

uint64_t sub_10006E1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return sub_100051A38((uint64_t)sub_10006E1C0, v3);
}

uint64_t sub_10006E1C0()
{
  sub_10003F444();
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  unint64_t v2 = (void *)sub_100078994(v1, (uint64_t)qword_100699220);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (sub_100051E9C(v3))
  {
    uint64_t v4 = (_WORD *)sub_100051AA0();
    sub_100078C08(v4);
    sub_100051C8C((void *)&_mh_execute_header, v5, v6, "Performing Ravioli fetch");
    sub_100033704();
  }

  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v7;
  void *v7 = v0;
  v7[1] = sub_10006E2D4;
  uint64_t v8 = sub_100078E08(*(void *)(v0 + 16));
  return sub_10006DB84(v8, v9, v10);
}

uint64_t sub_10006E2D4()
{
  sub_100048E64();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1000336EC();
  uint64_t v7 = v6;
  sub_10003F0E8();
  *uint64_t v8 = v7;
  uint64_t v9 = *v1;
  sub_10003F0B8();
  void *v10 = v9;
  v7[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100048EF4();
    __asm { BRAA            X1, X16 }
  }
  v7[8] = v3;
  v7[9] = v5;
  sub_100048EF4();
  return _swift_task_switch(v13, v14, v15);
}

uint64_t sub_10006E3F8()
{
  sub_10003F444();
  uint64_t v0 = sub_1000790C4();
  sub_10006EF4C(v0, v1);
  uint64_t v2 = sub_1000790C4();
  sub_10002EC6C(v2, v3);
  sub_10003F1AC();
  return v4();
}

void sub_10006E47C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10007727C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v3)
  {
    swift_release();
LABEL_14:
    if (qword_100697920 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100031284(v22, (uint64_t)qword_100699220);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v73 = a2;
      uint64_t v26 = (uint8_t *)v25;
      uint64_t v27 = swift_slowAlloc();
      BOOL v74 = v9;
      v77[0] = v27;
      uint64_t v75 = a1;
      *(_DWORD *)uint64_t v26 = 136315138;
      swift_getErrorValue();
      uint64_t v28 = Error.localizedDescription.getter();
      uint64_t v76 = sub_100032B48(v28, v29, v77);
      a1 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error verifying or storing Ravioli: %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v73;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10002FBFC(a1, a2);
    sub_10002FBFC(a1, a2);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      v77[0] = v75;
      *(_DWORD *)uint64_t v32 = 136315138;
      static String.Encoding.utf8.getter();
      uint64_t v33 = String.init(data:encoding:)();
      if (v34)
      {
        unint64_t v35 = v34;
      }
      else
      {
        uint64_t v33 = 0x3866747520746F4ELL;
        unint64_t v35 = 0xE800000000000000;
      }
      uint64_t v76 = sub_100032B48(v33, v35, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002EC6C(a1, a2);
      sub_10002EC6C(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Ravioli data was: %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10002EC6C(a1, a2);
      sub_10002EC6C(a1, a2);
    }

    swift_willThrow();
    return;
  }
  uint64_t v72 = v11;
  uint64_t v73 = a3;
  uint64_t v75 = a1;
  swift_release();
  if (v77[6] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v75;
LABEL_13:
    sub_1000772C8();
    swift_allocError();
    *uint64_t v21 = 3;
    swift_willThrow();
    goto LABEL_14;
  }
  BOOL v74 = v9;
  uint64_t v69 = v77[0];
  swift_bridgeObjectRetain();
  os_log_t v70 = (os_log_t)Data.init(base64Encoded:options:)();
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  unint64_t v71 = v15;
  if (v15 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_12:
    uint64_t v9 = v74;
    a1 = v75;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = Data.init(base64Encoded:options:)();
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (v18 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_11:
    sub_10002EC58((uint64_t)v70, v71);
    goto LABEL_12;
  }
  uint64_t v68 = v16;
  uint64_t v69 = Data.init(base64Encoded:options:)();
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20 >> 60 == 15)
  {
    sub_10002EC58(v68, v18);
    goto LABEL_11;
  }
  os_log_t v36 = v70;
  unint64_t v37 = v71;
  uint64_t v38 = v68;
  BOOL v74 = (char *)sub_1000AAF50(v69, v20, (uint64_t)v70, v71, v68, v18);
  uint64_t v39 = v69;
  uint64_t v69 = v40;
  sub_10002EC58(v39, v20);
  sub_10002EC58(v38, v18);
  sub_10002EC58((uint64_t)v36, v37);
  sub_10002EC6C((uint64_t)v74, v69);
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  uint64_t v42 = sub_100031284(v41, (uint64_t)qword_100699220);
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Verified response", v45, 2u);
    swift_slowDealloc();
  }

  id v46 = [self sharedInstance];
  uint64_t v47 = v73;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v49 = Data._bridgeToObjectiveC()().super.isa;
  v77[0] = 0;
  [v46 c94QZ147F1UWY71l:isa jkjlhN0UgO78kW6q:v49 error:v77];

  uint64_t v50 = (char *)v77[0];
  if (v77[0])
  {
    uint64_t v51 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v13, v47, v10);
    uint64_t v52 = v50;
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    int v55 = v54;
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v56 = swift_slowAlloc();
      LODWORD(v71) = v55;
      uint64_t v57 = v56;
      uint64_t v73 = swift_slowAlloc();
      v77[0] = v73;
      *(_DWORD *)uint64_t v57 = 136315394;
      uint64_t v75 = v42;
      sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v70 = v53;
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v76 = sub_100032B48(v58, v59, v77);
      BOOL v74 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v10);
      *(_WORD *)(v57 + 12) = 2080;
      id v60 = [v52 localizedDescription];
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v63 = v62;

      uint64_t v76 = sub_100032B48(v61, v63, v77);
      uint64_t v50 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v64 = v70;
      _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v71, "Error storing Ravioli data for bag: %s. Error: %s ", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v10);
    }
  }
  unint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    long long v67 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v67 = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Stored Ravioli", v67, 2u);
    swift_slowDealloc();
  }
}

void sub_10006EF4C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for String.Encoding();
  uint64_t v6 = sub_100051D98(v5);
  __chkstk_darwin(v6);
  sub_10007905C();
  type metadata accessor for UUID();
  sub_100078890();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100078C68();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_10007727C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v2)
  {
    swift_release();
LABEL_13:
    if (qword_100697920 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100031284(v18, (uint64_t)qword_100699220);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v65 = a2;
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v67[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_getErrorValue();
      uint64_t v22 = Error.localizedDescription.getter();
      uint64_t v24 = sub_100032B48(v22, v23, v67);
      sub_100079418(v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error verifying or storing Ravioli: %s", v21, 0xCu);
      swift_arrayDestroy();
      sub_100033704();
      a2 = v65;
      sub_100033704();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10002FBFC(a1, a2);
    sub_10002FBFC(a1, a2);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      v67[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      static String.Encoding.utf8.getter();
      uint64_t v28 = String.init(data:encoding:)();
      if (v29)
      {
        unint64_t v30 = v29;
      }
      else
      {
        uint64_t v28 = 0x3866747520746F4ELL;
        unint64_t v30 = 0xE800000000000000;
      }
      uint64_t v31 = sub_100032B48(v28, v30, v67);
      sub_100079418(v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002EC6C(a1, a2);
      sub_10002EC6C(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Ravioli data was: %s", v27, 0xCu);
      swift_arrayDestroy();
      sub_100033704();
      sub_100033704();
    }
    else
    {
      sub_10002EC6C(a1, a2);
      sub_10002EC6C(a1, a2);
    }

    swift_willThrow();
    return;
  }
  uint64_t v64 = v8;
  swift_release();
  if (v67[6] != 1
    || (swift_bridgeObjectRetain(),
        sub_100051C80(),
        uint64_t v61 = Data.init(base64Encoded:options:)(),
        unint64_t v11 = v10,
        swift_bridgeObjectRelease(),
        unint64_t v62 = v11,
        v11 >> 60 == 15))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_12:
    sub_1000772C8();
    swift_allocError();
    *unint64_t v17 = 3;
    swift_willThrow();
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = Data.init(base64Encoded:options:)();
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (v14 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_11:
    sub_10002EC58(v61, v62);
    goto LABEL_12;
  }
  uint64_t v58 = v12;
  uint64_t v59 = Data.init(base64Encoded:options:)();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16 >> 60 == 15)
  {
    sub_10002EC58(v58, v14);
    goto LABEL_11;
  }
  uint64_t v66 = sub_1000AAF50(v59, v16, v61, v62, v58, v14);
  uint64_t v32 = v59;
  unint64_t v60 = v33;
  sub_1000791C8(v32);
  sub_10002EC6C(v66, v60);
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_100031284(v34, (uint64_t)qword_100699220);
  unint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    unint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Verified response", v37, 2u);
    sub_100033704();
  }

  id v38 = [self sharedInstance];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v40 = Data._bridgeToObjectiveC()().super.isa;
  v67[0] = 0;
  [v38 c94QZ147F1UWY71l:isa jkjlhN0UgO78kW6q:v40 error:v67];

  uint64_t v41 = (void *)v67[0];
  if (v67[0])
  {
    sub_1000789FC();
    v42();
    id v43 = v41;
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      os_log_type_t v63 = v45;
      uint64_t v46 = swift_slowAlloc();
      v67[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136315394;
      sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_100032B48(v47, v48, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100078B84();
      v49();
      *(_WORD *)(v46 + 12) = 2080;
      id v50 = [v43 localizedDescription];
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v53 = v52;

      sub_100032B48(v51, v53, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      unint64_t v14 = (unint64_t)v44;
      _os_log_impl((void *)&_mh_execute_header, v44, v63, "Error storing Ravioli data for bag: %s. Error: %s ", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy();
      sub_100033704();
      sub_100033704();
    }
    else
    {

      unint64_t v14 = v64 + 8;
      sub_100078B84();
      v54();
    }
  }
  int v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (_WORD *)swift_slowAlloc();
    sub_100051BE8(v57);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Stored Ravioli", (uint8_t *)v14, 2u);
    sub_100033704();
  }
}

void sub_10006F928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 != 0xD000000000000011 || a3 != 0x800000010056A3D0)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    goto LABEL_16;
  }
  if (qword_100697968 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v6 = (id)static ASDConfigurationManager.shared;
  sub_1000950DC(v18);

  sub_100051880((uint64_t)v18, (uint64_t)__src, &qword_100697F08);
  if (__src[5] == 1) {
    goto LABEL_16;
  }
  memcpy(__dst, __src, sizeof(__dst));
  sub_100051880((uint64_t)&__dst[80], (uint64_t)v21, &qword_1006993A0);
  sub_10003610C((uint64_t)v21);
  sub_100036138(v18);
  sub_100051880((uint64_t)v21, (uint64_t)&v22, &qword_1006993A0);
  uint64_t v7 = v22;
  if (!v22) {
    goto LABEL_16;
  }
  uint64_t v8 = UUID.uuidString.getter();
  sub_100068068(v8, v9, v7);
  uint64_t v11 = v10;
  __int16 v13 = v12;
  sub_100036238((uint64_t)v21);
  swift_bridgeObjectRelease();
  if (v11 && (swift_bridgeObjectRelease(), (v13 & 0xFF00) != 0x200) && (v13 & 0x100) == 0)
  {
    if (qword_100697920 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100031284(v14, (uint64_t)qword_100699220);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Lazy fetch is disabled.", v17, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
LABEL_16:
    sub_10006FBB0(a1, a2, a3, 1);
  }
}

uint64_t sub_10006FBB0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v8 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v8 - 8);
  uint64_t v43 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v40 = v13;
  uint64_t v41 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v39 - v14;
  os_log_type_t v16 = (uint64_t *)(v4 + *(void *)(*(void *)v4 + 112));
  swift_beginAccess();
  uint64_t v17 = *v16;
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_100067F74(a1, v17);
  swift_bridgeObjectRelease();
  if (v18)
  {
    if (qword_100697920 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100031284(v19, (uint64_t)qword_100699220);
    os_log_type_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = v10;
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Cancelling running Ravioli fetch", v22, 2u);
      uint64_t v10 = v42;
      swift_slowDealloc();
    }

    Task.cancel()();
    swift_beginAccess();
    sub_100056C5C(a1);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  if (a4) {
    sub_1000735A0(a1, v45, v44);
  }
  uint64_t v42 = (uint64_t)v16;
  unint64_t v23 = (uint64_t *)(v5 + *(void *)(*(void *)v5 + 136));
  swift_beginAccess();
  uint64_t v24 = *v23;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_100067F74(a1, v24);
  swift_bridgeObjectRelease();
  if (v25)
  {
    Task.cancel()();
    swift_release();
  }
  swift_beginAccess();
  sub_100056C5C(a1);
  swift_endAccess();
  swift_release();
  os_log_type_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26(v15, a1, v10);
  uint64_t v27 = type metadata accessor for TaskPriority();
  uint64_t v28 = (uint64_t)v15;
  uint64_t v29 = v43;
  sub_10003349C(v43, 1, 1, v27);
  unint64_t v30 = v41;
  v26(v41, a1, v10);
  uint64_t v31 = sub_1000316D0(&qword_1006993A8, &qword_1006993B0);
  unint64_t v32 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v33 = (v40 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = (char *)swift_allocObject();
  *((void *)v34 + 2) = v5;
  *((void *)v34 + 3) = v31;
  *((void *)v34 + 4) = v5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v34[v32], v30, v10);
  unint64_t v35 = &v34[v33];
  uint64_t v36 = v44;
  *(void *)unint64_t v35 = v45;
  *((void *)v35 + 1) = v36;
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_10004964C(v29, (uint64_t)&unk_1006993C0, (uint64_t)v34);
  swift_beginAccess();
  sub_1000570BC(v37, v28);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v28, v10);
  return swift_endAccess();
}

void sub_1000700A8()
{
  sub_100065B08();
  uint64_t v2 = v0;
  char v4 = v3;
  uint64_t v51 = v5;
  uint64_t v52 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = *v0;
  uint64_t v49 = v9;
  uint64_t v10 = sub_10002E768(&qword_100697E68);
  uint64_t v11 = sub_100051D98(v10);
  __chkstk_darwin(v11);
  sub_100065B8C();
  uint64_t v55 = v12;
  uint64_t v48 = type metadata accessor for UUID();
  sub_100078890();
  uint64_t v14 = v13;
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v18 = __chkstk_darwin(v17);
  id v50 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v54 = (uint64_t)&v47 - v19;
  os_log_type_t v20 = (void *)((char *)v2 + *(void *)(v9 + 112));
  sub_100051F9C();
  unint64_t v53 = v20;
  uint64_t v21 = *v20;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_100067F74(v8, v21);
  swift_bridgeObjectRelease();
  if (v22)
  {
    if (qword_100697920 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v24 = sub_100078994(v23, (uint64_t)qword_100699220);
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (sub_100079378(v25))
    {
      os_log_type_t v26 = (uint8_t *)sub_100051AA0();
      *(_WORD *)os_log_type_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v1, "Cancelling running Ravioli fetch", v26, 2u);
      sub_100033704();
    }

    Task.cancel()();
    sub_10007927C();
    sub_100056C5C(v8);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  if (v4) {
    sub_100073790();
  }
  uint64_t v27 = v2;
  uint64_t v28 = (void *)((char *)v2 + *(void *)(*v2 + 136));
  sub_100051F9C();
  uint64_t v29 = *v28;
  swift_bridgeObjectRetain();
  uint64_t v30 = sub_100067F74(v8, v29);
  swift_bridgeObjectRelease();
  if (v30)
  {
    Task.cancel()();
    swift_release();
  }
  sub_10007927C();
  sub_100056C5C(v8);
  swift_endAccess();
  swift_release();
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v32 = v48;
  v31(v54, v8, v48);
  uint64_t v33 = type metadata accessor for TaskPriority();
  sub_100078E6C(v55, v34, v35, v33);
  v31((uint64_t)v50, v8, v32);
  uint64_t v36 = *(void *)(v49 + 80);
  uint64_t v37 = *(void *)(v49 + 88);
  type metadata accessor for RavioliManager();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v39 = (v16 + ((*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = v27;
  v40[3] = WitnessTable;
  v40[4] = v36;
  v40[5] = v37;
  v40[6] = v27;
  sub_1000791BC();
  v41();
  uint64_t v42 = (void *)((char *)v40 + v39);
  uint64_t v43 = v52;
  void *v42 = v51;
  v42[1] = v43;
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v44 = sub_10004964C(v55, (uint64_t)&unk_100699488, (uint64_t)v40);
  sub_10007927C();
  uint64_t v45 = v44;
  uint64_t v46 = v54;
  sub_1000570BC(v45, v54);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v46, v32);
  swift_endAccess();
  sub_100065AF0();
}

uint64_t sub_10007052C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  uint64_t v9 = type metadata accessor for UUID();
  v7[15] = v9;
  v7[16] = *(void *)(v9 - 8);
  v7[17] = swift_task_alloc();
  v7[18] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CancellationError();
  v7[19] = v10;
  v7[20] = *(void *)(v10 - 8);
  v7[21] = swift_task_alloc();
  return _swift_task_switch(sub_100070660, a4, 0);
}

uint64_t sub_100070660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100078968();
  sub_100051FE0();
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = sub_100031284(v11, (uint64_t)qword_100699220);
  v10[22] = v12;
  swift_retain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  BOOL v15 = sub_100051A84(v14);
  uint64_t v16 = v10[11];
  if (v15)
  {
    uint64_t v17 = (float *)sub_100033734();
    sub_100079458(v17, 3.852e-34);
    sub_10007946C((double)*(unint64_t *)(v16 + *(void *)(v18 + 144)), 1000000000.0);
    swift_release();
    sub_100078EE4((void *)&_mh_execute_header, v13, (os_log_type_t)v12, "Ravioli fetch requested - sleeping %f");
    sub_100033704();
  }
  else
  {
    swift_release();
  }

  uint64_t v19 = (void *)swift_task_alloc();
  v10[23] = v19;
  *uint64_t v19 = v10;
  v19[1] = sub_100070804;
  sub_100048FC8();
  sub_100051C0C();
  return static Task<>.sleep(nanoseconds:)(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10);
}

uint64_t sub_100070804()
{
  sub_10003F0F4();
  sub_1000336EC();
  char v3 = v2;
  sub_10003F0E8();
  *char v4 = v3;
  uint64_t v5 = *v1;
  sub_10003F0B8();
  void *v6 = v5;
  v3[24] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[11];
    return _swift_task_switch(sub_100070A38, v7, 0);
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v3[25] = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_100070940;
    uint64_t v9 = sub_100078E08(v3[12]);
    return sub_10006DEAC(v9, v10, v11);
  }
}

uint64_t sub_100070940()
{
  sub_10003F444();
  sub_1000788A8();
  sub_10003F0E8();
  *char v3 = v2;
  *char v3 = *v1;
  *(void *)(v2 + 208) = v0;
  swift_task_dealloc();
  sub_100079198();
  sub_10007917C();
  return _swift_task_switch(v4, v5, v6);
}

#error "100070C2C: call analysis failed (funcsize=165)"

uint64_t sub_100070CE8()
{
  sub_10003F0F4();
  sub_10007393C(*(void *)(v0 + 96));
  sub_100079148();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v1();
}

#error "100070F48: call analysis failed (funcsize=165)"

uint64_t sub_100071004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  uint64_t v9 = type metadata accessor for UUID();
  v7[15] = v9;
  v7[16] = *(void *)(v9 - 8);
  v7[17] = swift_task_alloc();
  v7[18] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CancellationError();
  v7[19] = v10;
  v7[20] = *(void *)(v10 - 8);
  v7[21] = swift_task_alloc();
  return _swift_task_switch(sub_100071138, a4, 0);
}

uint64_t sub_100071138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100078968();
  sub_100051FE0();
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = sub_100031284(v11, (uint64_t)qword_100699220);
  v10[22] = v12;
  swift_retain();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  BOOL v15 = sub_100051A84(v14);
  uint64_t v16 = v10[11];
  if (v15)
  {
    uint64_t v17 = (float *)sub_100033734();
    sub_100079458(v17, 3.852e-34);
    sub_10007946C((double)*(unint64_t *)(v16 + *(void *)(v18 + 144)), 1000000000.0);
    swift_release();
    sub_100078EE4((void *)&_mh_execute_header, v13, (os_log_type_t)v12, "Ravioli fetch requested - sleeping %f");
    sub_100033704();
  }
  else
  {
    swift_release();
  }

  uint64_t v19 = (void *)swift_task_alloc();
  v10[23] = v19;
  *uint64_t v19 = v10;
  v19[1] = sub_1000712DC;
  sub_100048FC8();
  sub_100051C0C();
  return static Task<>.sleep(nanoseconds:)(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10);
}

uint64_t sub_1000712DC()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v3 = v2;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_10003F0B8();
  void *v6 = v5;
  v3[24] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = v3[11];
    return _swift_task_switch(sub_10007157C, v7, 0);
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    v3[25] = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_100071418;
    uint64_t v9 = sub_100078E08(v3[12]);
    return sub_10006E1A0(v9, v10, v11);
  }
}

uint64_t sub_100071418()
{
  sub_10003F444();
  sub_1000788A8();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 208) = v0;
  swift_task_dealloc();
  sub_100079198();
  sub_10007917C();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100071510()
{
  sub_10003F0F4();
  sub_100073CF8();
  sub_100079148();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v0();
}

#error "100071770: call analysis failed (funcsize=165)"

#error "100071A20: call analysis failed (funcsize=165)"

void sub_100071ADC()
{
  uint64_t v0 = type metadata accessor for ServerJSONFetchRetryState();
  __chkstk_darwin(v0);
  uint64_t v2 = (uint64_t *)((char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = self;
  id v8 = [v7 standardUserDefaults];
  BOOL v9 = sub_100065E28(v8);

  if (v9)
  {
    id v10 = [v7 standardUserDefaults];
    char v11 = sub_100066E74(v10);

    if (v11)
    {
      id v12 = [v7 standardUserDefaults];
      uint64_t v13 = sub_100066C4C(v12);

      id v14 = [v7 standardUserDefaults];
      sub_10006684C(v14, (uint64_t)v6);

      id v15 = [v7 standardUserDefaults];
      uint64_t v16 = sub_1000665F8(v15);
      uint64_t v18 = v17;

      (*(void (**)(char *, char *, uint64_t))(v4 + 16))((char *)v2 + *(int *)(v0 + 20), v6, v3);
      *uint64_t v2 = v13;
      uint64_t v19 = (uint64_t *)((char *)v2 + *(int *)(v0 + 24));
      *uint64_t v19 = v16;
      v19[1] = v18;
      sub_10002E768(&qword_100699508);
      uint64_t v20 = (int *)(sub_10002E768(&qword_100699510) - 8);
      unint64_t v21 = (*(unsigned __int8 *)(*(void *)v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v20 + 80);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_10058CEC0;
      unint64_t v23 = v22 + v21;
      uint64_t v24 = v23 + v20[14];
      if (qword_100697930 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for UUID();
      uint64_t v26 = sub_100031284(v25, (uint64_t)static RavioliConstants.ravioliUUID);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v26, v25);
      sub_100077324((uint64_t)v2, v24);
      sub_1000785BC((unint64_t *)&qword_1006979C0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
      id v28 = [v7 standardUserDefaults];
      sub_100067C44(v27, v28);
      swift_bridgeObjectRelease();

      sub_100077C00((uint64_t)v2, (void (*)(void))type metadata accessor for ServerJSONFetchRetryState);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      sub_100071FEC();
    }
    else
    {
      sub_100071FEC();
    }
  }
  else
  {
    if (qword_100697920 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100031284(v29, (uint64_t)qword_100699220);
    os_log_t v34 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v30, "No Ravioli cleanup required.", v31, 2u);
      swift_slowDealloc();
    }
    os_log_t v32 = v34;
  }
}

void sub_100071FEC()
{
  uint64_t v0 = self;
  id v1 = [v0 standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 removeObjectForKey:v2];

  id v3 = [v0 standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 removeObjectForKey:v4];

  id v5 = [v0 standardUserDefaults];
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 removeObjectForKey:v6];

  id v7 = [v0 standardUserDefaults];
  id v8 = String._bridgeToObjectiveC()();
  [v7 removeObjectForKey:v8];
}

uint64_t sub_100072180()
{
  v1[2] = v0;
  v1[3] = *(void *)(type metadata accessor for ServerJSONFetchRetryState() - 8);
  v1[4] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  sub_10002E768(&qword_1006994E0);
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000722D8, v0, 0);
}

uint64_t sub_1000722D8()
{
  sub_100048E64();
  sub_100071ADC();
  id v2 = [self standardUserDefaults];
  uint64_t v3 = sub_100067738(v2);
  *(void *)(v0 + 80) = v3;

  char v4 = *(unsigned char *)(v3 + 32);
  *(unsigned char *)(v0 + 112) = v4;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << v4;
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  uint64_t v7 = v5 & *(void *)(v3 + 64);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v1 = (v7 - 1) & v7;
LABEL_5:
    sub_1000789FC();
    v9();
    uint64_t v10 = sub_10002E768(&qword_1006994E8);
    sub_100079568(v10);
    sub_1000795A0();
    goto LABEL_12;
  }
  unint64_t v11 = 63 - v6;
  if ((unint64_t)(63 - v6) <= 0x7F)
  {
    uint64_t v8 = 0;
  }
  else
  {
    id v12 = *(void **)(v0 + 80);
    if (v12[9])
    {
      uint64_t v8 = 1;
LABEL_9:
      sub_100079650();
      goto LABEL_5;
    }
    if (v11 < 0xC0)
    {
      uint64_t v8 = 1;
    }
    else
    {
      if (v12[10])
      {
        uint64_t v8 = 2;
        goto LABEL_9;
      }
      if (v11 < 0x100)
      {
        uint64_t v8 = 2;
      }
      else
      {
        if (v12[11])
        {
          uint64_t v8 = 3;
          goto LABEL_9;
        }
        if (v11 < 0x140)
        {
          uint64_t v8 = 3;
        }
        else
        {
          if (v12[12])
          {
            uint64_t v8 = 4;
            goto LABEL_9;
          }
          if (v11 < 0x180)
          {
            uint64_t v8 = 4;
          }
          else
          {
            if (v12[13])
            {
              uint64_t v8 = 5;
              goto LABEL_9;
            }
            unint64_t v27 = v11 >> 6;
            uint64_t v28 = 14;
            while (v28 - 8 < v27)
            {
              if (v12[v28++])
              {
                uint64_t v8 = v28 - 9;
                goto LABEL_9;
              }
            }
            uint64_t v8 = v27 - 1;
          }
        }
      }
    }
  }
  uint64_t v13 = *(void *)(v0 + 64);
  uint64_t v14 = sub_10002E768(&qword_1006994E8);
  sub_10003349C(v13, 1, 1, v14);
  uint64_t v1 = 0;
LABEL_12:
  *(void *)(v0 + 88) = v8;
  *(void *)(v0 + 96) = v1;
  uint64_t v15 = *(void *)(v0 + 72);
  sub_100051880(*(void *)(v0 + 64), v15, &qword_1006994E0);
  sub_10002E768(&qword_1006994E8);
  sub_100078B04(v15);
  if (v16)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10003F1AC();
    sub_100048F08();
    __asm { BRAA            X1, X16 }
  }
  sub_1000791BC();
  v19();
  uint64_t v20 = sub_1000790C4();
  sub_100057DBC(v20, v21);
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_100072608;
  sub_100078E08(*(void *)(v0 + 56));
  sub_100048F08();
  return sub_1000729FC(v23, v24);
}

uint64_t sub_100072608()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *id v2 = v1;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000726E4()
{
  sub_100048E64();
  sub_100077C00(*(void *)(v0 + 32), (void (*)(void))type metadata accessor for ServerJSONFetchRetryState);
  uint64_t v2 = sub_1000790C4();
  uint64_t result = v3(v2);
  int64_t v5 = *(void *)(v0 + 88);
  if (!*(void *)(v0 + 96))
  {
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
    }
    else
    {
      unint64_t v9 = (1 << *(unsigned char *)(v0 + 112)) + 63;
      if (v8 >= (uint64_t)(v9 >> 6)) {
        goto LABEL_24;
      }
      uint64_t v10 = *(void *)(v0 + 80) + 64;
      uint64_t v11 = *(void *)(v10 + 8 * v8);
      if (v11)
      {
LABEL_7:
        uint64_t v1 = (v11 - 1) & v11;
        int64_t v5 = v8;
        goto LABEL_3;
      }
      int64_t v12 = v9 >> 6;
      int64_t v13 = v5 + 2;
      ++v5;
      if (v8 + 1 >= v12) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v10 + 8 * v13);
      if (v11)
      {
LABEL_10:
        int64_t v8 = v13;
        goto LABEL_7;
      }
      int64_t v5 = v8 + 1;
      if (v8 + 2 >= v12) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v10 + 8 * (v8 + 2));
      if (v11)
      {
        v8 += 2;
        goto LABEL_7;
      }
      int64_t v5 = v8 + 2;
      if (v8 + 3 >= v12) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v10 + 8 * (v8 + 3));
      if (v11)
      {
        v8 += 3;
        goto LABEL_7;
      }
      int64_t v13 = v8 + 4;
      int64_t v5 = v8 + 3;
      if (v8 + 4 >= v12)
      {
LABEL_24:
        uint64_t v14 = *(void *)(v0 + 64);
        uint64_t v15 = sub_10002E768(&qword_1006994E8);
        sub_10003349C(v14, 1, 1, v15);
        uint64_t v1 = 0;
        goto LABEL_25;
      }
      uint64_t v11 = *(void *)(v10 + 8 * v13);
      if (v11) {
        goto LABEL_10;
      }
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v8 >= v12)
        {
          int64_t v5 = v12 - 1;
          goto LABEL_24;
        }
        uint64_t v11 = *(void *)(v10 + 8 * v8);
        ++v13;
        if (v11) {
          goto LABEL_7;
        }
      }
    }
    __break(1u);
    return result;
  }
  sub_100079650();
LABEL_3:
  sub_1000789FC();
  v6();
  uint64_t v7 = sub_10002E768(&qword_1006994E8);
  sub_100079568(v7);
  sub_1000795A0();
LABEL_25:
  *(void *)(v0 + 88) = v5;
  *(void *)(v0 + 96) = v1;
  uint64_t v16 = *(void *)(v0 + 72);
  sub_100051880(*(void *)(v0 + 64), v16, &qword_1006994E0);
  uint64_t v17 = sub_10002E768(&qword_1006994E8);
  if (sub_1000312BC(v16, 1, v17) == 1)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10003F1AC();
    sub_100048F08();
    __asm { BRAA            X1, X16 }
  }
  sub_1000791BC();
  v20();
  uint64_t v21 = sub_100031880();
  sub_100057DBC(v21, v22);
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_100072608;
  sub_100078E08(*(void *)(v0 + 56));
  sub_100048F08();
  return sub_1000729FC(v24, v25);
}

uint64_t sub_1000729FC(uint64_t a1, uint64_t a2)
{
  v3[54] = a2;
  v3[55] = v2;
  v3[53] = a1;
  uint64_t v4 = type metadata accessor for ServerJSONFetchRetryState();
  v3[56] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[57] = v5;
  v3[58] = *(void *)(v5 + 64);
  v3[59] = swift_task_alloc();
  sub_10002E768(&qword_100697E68);
  v3[60] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v3[61] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[62] = v7;
  v3[63] = *(void *)(v7 + 64);
  v3[64] = swift_task_alloc();
  v3[65] = swift_task_alloc();
  v3[66] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  v3[67] = v8;
  v3[68] = *(void *)(v8 - 8);
  v3[69] = swift_task_alloc();
  v3[70] = swift_task_alloc();
  return _swift_task_switch(sub_100072BE4, v2, 0);
}

uint64_t sub_100072BE4()
{
  uint64_t v59 = v0;
  if (qword_100697968 != -1) {
    swift_once();
  }
  sub_100051F9C();
  id v1 = (id)static ASDConfigurationManager.shared;
  sub_1000950DC((_OWORD *)(v0 + 112));

  sub_100051880(v0 + 112, v0 + 16, &qword_100697F08);
  if (*(void *)(v0 + 56) != 1)
  {
    memcpy((void *)(v0 + 208), (const void *)(v0 + 16), 0x60uLL);
    sub_100036138((uint64_t *)(v0 + 112));
    sub_100051880(v0 + 208, v0 + 368, &qword_100699428);
    sub_100051880(v0 + 368, v0 + 400, &qword_100699428);
    if ((*(unsigned char *)(v0 + 408) & 1) == 0)
    {
      uint64_t v2 = *(void *)(v0 + 400);
      sub_100051880(v0 + 224, v0 + 352, &qword_100698050);
      uint64_t v3 = sub_1000790C4();
      sub_100051880(v3, v4, &qword_100698050);
      if ((*(unsigned char *)(v0 + 392) & 1) == 0)
      {
        uint64_t v13 = **(void **)(v0 + 432);
        sub_1000789FC();
        v14();
        if (v13 >= v2)
        {
          if (qword_100697920 == -1)
          {
LABEL_21:
            uint64_t v35 = *(void *)(v0 + 528);
            uint64_t v36 = *(void *)(v0 + 488);
            uint64_t v37 = *(void *)(v0 + 496);
            uint64_t v38 = *(void *)(v0 + 424);
            uint64_t v39 = type metadata accessor for Logger();
            sub_100031284(v39, (uint64_t)qword_100699220);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v35, v38, v36);
            uint64_t v40 = Logger.logObject.getter();
            os_log_type_t v41 = static os_log_type_t.info.getter();
            if (sub_100079310(v41))
            {
              uint64_t v42 = (uint8_t *)sub_100033734();
              uint64_t v58 = sub_10003371C();
              *(_DWORD *)uint64_t v42 = 136315138;
              sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
              *(void *)(v0 + 416) = sub_100032B48(v43, v44, &v58);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              uint64_t v45 = sub_1000796A8();
              v46(v45);
              _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v38, "Ravioli retry limit reached for %s", v42, 0xCu);
              swift_arrayDestroy();
              sub_100033704();
              sub_100033704();
            }
            else
            {
              uint64_t v47 = sub_1000796A8();
              v48(v47);
            }

            sub_10007393C(*(void *)(v0 + 424));
            sub_100078B84();
            v49();
            goto LABEL_11;
          }
LABEL_28:
          swift_once();
          goto LABEL_21;
        }
        uint64_t v15 = *(void *)(v0 + 544);
        Date.addingTimeInterval(_:)();
        Date.timeIntervalSinceNow.getter();
        uint64_t v16 = *(void (**)(void))(v15 + 8);
        sub_100078B84();
        v16();
        sub_100079188();
        if (v18)
        {
          __break(1u);
        }
        else if (v17 > -1.0)
        {
          uint64_t v57 = v16;
          sub_10007916C();
          if (v20)
          {
            uint64_t v56 = *(void *)(v0 + 560);
            uint64_t v55 = *(void *)(v0 + 536);
            uint64_t v21 = *(void *)(v0 + 496);
            uint64_t v22 = *(void *)(v0 + 480);
            uint64_t v54 = *(void *)(v0 + 520);
            uint64_t v52 = *(void *)(v0 + 504);
            uint64_t v50 = *(void *)(v0 + 472);
            uint64_t v51 = *(void *)(v0 + 456);
            uint64_t v24 = *(void *)(v0 + 432);
            uint64_t v23 = *(void *)(v0 + 440);
            unint64_t v53 = (unint64_t)v19;
            uint64_t v25 = *(void (**)(void))(v21 + 16);
            sub_100079730();
            v25();
            uint64_t v26 = type metadata accessor for TaskPriority();
            sub_100078E6C(v22, v27, v28, v26);
            sub_100079730();
            v25();
            sub_100077324(v24, v50);
            uint64_t v29 = sub_1000316D0(&qword_1006993A8, &qword_1006993B0);
            unint64_t v30 = (v52
                 + *(unsigned __int8 *)(v51 + 80)
                 + ((*(unsigned __int8 *)(v21 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
            uint64_t v31 = (void *)swift_allocObject();
            _OWORD v31[2] = v23;
            v31[3] = v29;
            v31[4] = v53;
            v31[5] = v23;
            sub_1000791BC();
            v32();
            sub_100057DBC(v50, (uint64_t)v31 + v30);
            swift_retain_n();
            uint64_t v33 = sub_10004964C(v22, (uint64_t)&unk_100699500, (uint64_t)v31);
            sub_100078BFC();
            sub_10007927C();
            sub_1000570BC(v33, v54);
            sub_100079160();
            v34();
            swift_endAccess();
            ((void (*)(uint64_t, uint64_t))v57)(v56, v55);
            goto LABEL_11;
          }
          goto LABEL_27;
        }
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
  }
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = (void *)sub_100078994(v5, (uint64_t)qword_100699220);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (sub_100051E9C(v7))
  {
    uint64_t v8 = (_WORD *)sub_100051AA0();
    sub_100078C08(v8);
    sub_100051C8C((void *)&_mh_execute_header, v9, v10, "Config for Ravioli retry is unavailable");
    sub_100033704();
  }

LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v11();
}

uint64_t sub_100073284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[4] = a6;
  v7[5] = a7;
  long long v7[2] = a4;
  void v7[3] = a5;
  return _swift_task_switch(sub_1000732A8, a5, 0);
}

uint64_t sub_1000732A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10003F0F4();
  sub_100078EFC();
  if (v19)
  {
    char v20 = (void *)swift_task_alloc();
    *(void *)(v10 + 48) = v20;
    *char v20 = v10;
    v20[1] = sub_100073348;
    uint64_t v11 = sub_100048FC8();
  }
  else
  {
    __break(1u);
  }
  return static Task<>.sleep(nanoseconds:)(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

uint64_t sub_100073348()
{
  sub_10003F444();
  sub_1000788A8();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  sub_100079198();
  sub_10007917C();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100073440()
{
  sub_10003F444();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = type metadata accessor for ServerJSONFetchRetryState();
  sub_10006FBB0(v1, *(void *)(v2 + *(int *)(v3 + 24)), *(void *)(v2 + *(int *)(v3 + 24) + 8), 0);
  sub_10003F1AC();
  return v4();
}

uint64_t sub_1000734C0()
{
  sub_10003F444();
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)sub_100078994(v0, (uint64_t)qword_100699220);
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (sub_100051A84(v2))
  {
    uint64_t v3 = (_WORD *)sub_100051AA0();
    sub_100051BE8(v3);
    sub_100051A64((void *)&_mh_execute_header, v4, v5, "Ravioli retry task cancelled");
    sub_100033704();
  }
  swift_errorRelease();

  sub_10003F1AC();
  return v6();
}

void sub_1000735A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002E768(&qword_1006989C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = self;
  id v14 = [v13 standardUserDefaults];
  uint64_t v15 = sub_100067738(v14);

  uint64_t v21 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  uint64_t v16 = type metadata accessor for ServerJSONFetchRetryState();
  static Date.now.getter();
  *uint64_t v8 = 0;
  uint64_t v17 = (void *)((char *)v8 + *(int *)(v16 + 24));
  *uint64_t v17 = a2;
  v17[1] = a3;
  sub_10003349C((uint64_t)v8, 0, 1, v16);
  swift_bridgeObjectRetain();
  sub_100053130((uint64_t)v8, (uint64_t)v12);
  uint64_t v18 = v21;
  id v19 = [v13 standardUserDefaults];
  sub_100067C44(v18, v19);
  swift_bridgeObjectRelease();
}

void sub_100073790()
{
  sub_100065B08();
  uint64_t v2 = v1;
  uint64_t v18 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10002E768(&qword_1006989C8);
  uint64_t v7 = sub_100051D98(v6);
  __chkstk_darwin(v7);
  sub_10007924C();
  uint64_t v8 = type metadata accessor for UUID();
  sub_100078890();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100046338();
  uint64_t v14 = v13 - v12;
  sub_1000771A0();
  sub_1000770C4();
  sub_10002F0A8((uint64_t)&unk_10065FD78, (uint64_t)&off_10065FD88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v14, v5, v8);
  uint64_t v15 = type metadata accessor for ServerJSONFetchRetryState();
  static Date.now.getter();
  void *v0 = 0;
  uint64_t v16 = (void *)((char *)v0 + *(int *)(v15 + 24));
  *uint64_t v16 = v18;
  v16[1] = v2;
  sub_10003349C((uint64_t)v0, 0, 1, v15);
  swift_bridgeObjectRetain();
  sub_100053130((uint64_t)v0, v14);
  v19[0] = v19[1];
  id v17 = sub_100067A24();
  sub_10002F138((uint64_t)v19, v17, (uint64_t)&unk_10065FD78, (uint64_t)&off_10065FD88);
  swift_bridgeObjectRelease();

  sub_100065AF0();
}

void sub_10007393C(uint64_t a1)
{
  uint64_t v2 = sub_10002E768(&qword_1006989C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v28 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v25 - v9;
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100031284(v11, (uint64_t)qword_100699220);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v29 = a1;
  uint64_t v27 = v12;
  v12(v10, a1, v5);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v26 = v4;
    *(_DWORD *)uint64_t v15 = 136315138;
    v25[1] = v15 + 4;
    sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v30 = sub_100032B48(v16, v17, &v31);
    uint64_t v4 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Clearing Ravioli Retry for %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  uint64_t v18 = self;
  id v19 = [v18 standardUserDefaults];
  uint64_t v20 = sub_100067738(v19);

  uint64_t v31 = v20;
  uint64_t v21 = (uint64_t)v28;
  v27(v28, v29, v5);
  uint64_t v22 = type metadata accessor for ServerJSONFetchRetryState();
  sub_10003349C((uint64_t)v4, 1, 1, v22);
  sub_100053130((uint64_t)v4, v21);
  uint64_t v23 = v31;
  id v24 = [v18 standardUserDefaults];
  sub_100067C44(v23, v24);
  swift_bridgeObjectRelease();
}

void sub_100073CF8()
{
  sub_100065B08();
  uint64_t v2 = v1;
  uint64_t v3 = sub_10002E768(&qword_1006989C8);
  uint64_t v4 = sub_100051D98(v3);
  __chkstk_darwin(v4);
  sub_100078C68();
  uint64_t v5 = type metadata accessor for UUID();
  sub_100078890();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10005EDC4();
  uint64_t v32 = v9;
  sub_100065DA4();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v29 - v11;
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100031284(v13, (uint64_t)qword_100699220);
  os_log_type_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v33 = v2;
  uint64_t v31 = v14;
  v14((uint64_t)v12, v2, v5);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (_DWORD *)sub_100033734();
    uint64_t v35 = sub_10003371C();
    uint64_t v30 = v0;
    *unint64_t v17 = 136315138;
    v29[1] = v17 + 1;
    sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v34 = sub_100032B48(v18, v19, &v35);
    uint64_t v0 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_1000794D0();
    v21(v20);
    sub_1000790AC((void *)&_mh_execute_header, v15, v16, "Clearing Ravioli Retry for %s");
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
  }
  else
  {
    uint64_t v22 = sub_1000794D0();
    v23(v22);
  }

  sub_1000771A0();
  sub_1000770C4();
  sub_10002F0A8((uint64_t)&unk_10065FD78, (uint64_t)&off_10065FD88);
  uint64_t v24 = v32;
  v31(v32, v33, v5);
  uint64_t v25 = type metadata accessor for ServerJSONFetchRetryState();
  sub_100078E6C(v0, v26, v27, v25);
  sub_100053130(v0, v24);
  uint64_t v34 = v35;
  id v28 = sub_100067A24();
  sub_10002F138((uint64_t)&v34, v28, (uint64_t)&unk_10065FD78, (uint64_t)&off_10065FD88);
  swift_bridgeObjectRelease();

  sub_100065AF0();
}

uint64_t sub_10007401C(uint64_t a1)
{
  uint64_t v3 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v3 - 8);
  uint64_t v96 = (uint64_t *)((char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v93 = *(void *)(v5 - 8);
  uint64_t v94 = (uint64_t *)v5;
  __chkstk_darwin(v5);
  BOOL v90 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = (void (*)(uint64_t, uint64_t))type metadata accessor for ASAnalyticsEvent();
  __chkstk_darwin(v91);
  char v92 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v100 - 8);
  uint64_t v9 = __chkstk_darwin(v100);
  uint64_t v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v95 = (void (*)(char *, uint64_t, uint64_t))((char *)&v83 - v13);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v87 = (char *)&v83 - v15;
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v83 - v16;
  uint64_t v18 = sub_10002E768(&qword_1006989C8);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v89 = (uint64_t)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v83 - v21;
  id v88 = self;
  id v23 = [v88 standardUserDefaults];
  uint64_t v24 = sub_100067738(v23);

  uint64_t v104 = v24;
  uint64_t v25 = type metadata accessor for ServerJSONFetchRetryState();
  uint64_t v26 = swift_allocBox();
  id v28 = v27;
  uint64_t v99 = a1;
  sub_100067FB8(a1, v24, (uint64_t)v22);
  if (sub_1000312BC((uint64_t)v22, 1, v25) != 1)
  {
    uint64_t v97 = v26;
    sub_100057DBC((uint64_t)v22, (uint64_t)v28);
    if (qword_100697968 != -1) {
      swift_once();
    }
    swift_beginAccess();
    id v31 = (id)static ASDConfigurationManager.shared;
    sub_1000950DC(v105);

    sub_100051880((uint64_t)v105, (uint64_t)v106, &qword_100697F08);
    uint64_t v30 = v8;
    if (v106[5] == 1
      || (memcpy(v107, v106, sizeof(v107)),
          sub_100036138((uint64_t *)v105),
          sub_100051880((uint64_t)v107, (uint64_t)v108, &qword_100699428),
          sub_100051880((uint64_t)v108, (uint64_t)&v112, &qword_100699428),
          (v113 & 1) != 0)
      || (uint64_t v32 = v112,
          sub_100051880((uint64_t)&v107[16], (uint64_t)v109, &qword_100698050),
          sub_100051880((uint64_t)v109, (uint64_t)&v110, &qword_100698050),
          (v111 & 1) != 0))
    {
      swift_release();
      uint64_t v29 = v100;
      goto LABEL_9;
    }
    uint64_t v40 = *v28 + 1;
    uint64_t v41 = v100;
    if (__OFADD__(*v28, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v1 = v110;
      *id v28 = v40;
      if (v40 >= (uint64_t)v32)
      {
        uint64_t v94 = v32;
        uint64_t v96 = v28;
        if (qword_100697920 != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        sub_100031284(v55, (uint64_t)qword_100699220);
        uint64_t v95 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
        v95(v17, v99, v41);
        swift_retain_n();
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = swift_slowAlloc();
          uint64_t v93 = swift_slowAlloc();
          v103[0] = v93;
          *(_DWORD *)uint64_t v58 = 136315650;
          sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v102 = sub_100032B48(v59, v60, v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v100);
          *(_WORD *)(v58 + 12) = 2048;
          uint64_t v61 = v96;
          swift_beginAccess();
          unint64_t v62 = (uint64_t *)*v61;
          swift_release();
          uint64_t v101 = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          *(_WORD *)(v58 + 22) = 2048;
          uint64_t v101 = v94;
          uint64_t v41 = v100;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Reached ravioli retry limit for %s - Tried %ld times limit %ld", (uint8_t *)v58, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release();
          (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v41);
          swift_release();

          uint64_t v61 = v96;
        }
        uint64_t v78 = v98;
        uint64_t v79 = v99;
        sub_10007393C(v99);
        sub_10002EAE0((void *)(v78 + *(void *)(*(void *)v78 + 160)), *(void *)(v78 + *(void *)(*(void *)v78 + 160) + 24));
        uint64_t v80 = sub_10002E768(&qword_100699430);
        unint64_t v81 = (uint64_t *)v92;
        uint64_t v82 = &v92[*(int *)(v80 + 48)];
        swift_beginAccess();
        *unint64_t v81 = *v61;
        v95(v82, v79, v41);
        swift_storeEnumTagMultiPayload();
        sub_1000AE9B8((uint64_t)v81);
        sub_100077C00((uint64_t)v81, (void (*)(void))type metadata accessor for ASAnalyticsEvent);
        goto LABEL_29;
      }
      uint64_t v32 = v28;
      if (qword_100697920 == -1)
      {
LABEL_19:
        uint64_t v42 = type metadata accessor for Logger();
        sub_100031284(v42, (uint64_t)qword_100699220);
        uint64_t v43 = v87;
        char v92 = *(char **)(v8 + 16);
        ((void (*)(char *, uint64_t, uint64_t))v92)(v87, v99, v41);
        uint64_t v44 = v97;
        swift_retain_n();
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.debug.getter();
        int v47 = v46;
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v48 = swift_slowAlloc();
          int v84 = v47;
          uint64_t v49 = v48;
          uint64_t v85 = swift_slowAlloc();
          v103[0] = v85;
          *(_DWORD *)uint64_t v49 = 136315394;
          uint64_t v91 = (void (*)(uint64_t, uint64_t))(v49 + 4);
          sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
          os_log_t v83 = v45;
          uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v102 = sub_100032B48(v50, v51, v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
          uint64_t v86 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          uint64_t v91 = v52;
          v52((uint64_t)v43, v100);
          *(_WORD *)(v49 + 12) = 2048;
          swift_beginAccess();
          uint64_t v53 = *v32;
          swift_release();
          uint64_t v102 = v53;
          uint64_t v41 = v100;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          os_log_t v54 = v83;
          _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v84, "Ravioli request failed for %s. Attempts made: %ld", (uint8_t *)v49, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release();
          os_log_type_t v63 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
          uint64_t v86 = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          uint64_t v91 = v63;
          v63((uint64_t)v43, v41);
          swift_release();
        }
        uint64_t v64 = v90;
        static Date.now.getter();
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t *))(v93 + 40))((char *)v32 + *(int *)(v25 + 20), v64, v94);
        uint64_t v65 = (uint64_t)v95;
        uint64_t v66 = v99;
        long long v67 = (void (*)(uint64_t, uint64_t, uint64_t))v92;
        ((void (*)(void, uint64_t, uint64_t))v92)(v95, v99, v41);
        uint64_t v68 = (uint64_t)v32;
        uint64_t v69 = v89;
        sub_100077324(v68, v89);
        sub_10003349C(v69, 0, 1, v25);
        sub_100053130(v69, v65);
        uint64_t v70 = v104;
        swift_bridgeObjectRetain();
        id v71 = [v88 standardUserDefaults];
        sub_100067C44(v70, v71);

        swift_bridgeObjectRelease();
        v67(v65, v66, v41);
        uint64_t v72 = type metadata accessor for TaskPriority();
        uint64_t v73 = (uint64_t)v96;
        sub_10003349C((uint64_t)v96, 1, 1, v72);
        uint64_t v74 = sub_1000316D0(&qword_1006993A8, &qword_1006993B0);
        uint64_t v75 = (void *)swift_allocObject();
        uint64_t v76 = v98;
        v75[2] = v98;
        v75[3] = v74;
        v75[4] = v1;
        v75[5] = v76;
        v75[6] = v44;
        swift_retain_n();
        swift_retain();
        uint64_t v77 = sub_10004964C(v73, (uint64_t)&unk_100699440, (uint64_t)v75);
        swift_beginAccess();
        sub_1000570BC(v77, v65);
        v91(v65, v41);
        swift_endAccess();
LABEL_29:
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    swift_once();
    goto LABEL_19;
  }
  sub_100077ED4((uint64_t)v22, &qword_1006989C8);
  swift_deallocBox();
  uint64_t v29 = v100;
  uint64_t v30 = v8;
LABEL_9:
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_100031284(v33, (uint64_t)qword_100699220);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v11, v99, v29);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    v103[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v100 = (uint64_t)(v36 + 4);
    sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v102 = sub_100032B48(v37, v38, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v29);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "No retry state or no max retries for %s", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v29);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100074E4C(uint64_t a1)
{
  uint64_t v115 = *v1;
  uint64_t v4 = sub_10002E768(&qword_100697E68);
  uint64_t v5 = sub_100051D98(v4);
  __chkstk_darwin(v5);
  sub_100065B8C();
  unint64_t v116 = (void (*)(char *, _DWORD *, uint64_t))v6;
  type metadata accessor for Date();
  sub_100078890();
  uint64_t v112 = v8;
  os_log_t v113 = v7;
  __chkstk_darwin(v7);
  sub_100065B8C();
  uint64_t v109 = v9;
  uint64_t v110 = (void (*)(void, void, void))type metadata accessor for ASAnalyticsEvent();
  sub_100051B88();
  __chkstk_darwin(v10);
  sub_100065B8C();
  char v111 = v11;
  uint64_t v119 = type metadata accessor for UUID();
  sub_100078890();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_10005EDC4();
  uint64_t v16 = v15;
  sub_100065DA4();
  __chkstk_darwin(v17);
  uint64_t v114 = (char *)&v100 - v18;
  sub_100065DA4();
  uint64_t v20 = __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v100 - v21;
  uint64_t v23 = sub_10002E768(&qword_1006989C8);
  uint64_t v24 = sub_100051D98(v23);
  __chkstk_darwin(v24);
  sub_10005EDC4();
  uint64_t v106 = v25;
  sub_100065DA4();
  __chkstk_darwin(v26);
  id v28 = (char *)&v100 - v27;
  unint64_t v29 = sub_1000771A0();
  unint64_t v107 = sub_1000770C4();
  unint64_t v108 = v29;
  sub_10002F0A8((uint64_t)&unk_10065FD78, (uint64_t)&off_10065FD88);
  uint64_t v30 = type metadata accessor for ServerJSONFetchRetryState();
  uint64_t v31 = swift_allocBox();
  uint64_t v33 = v32;
  uint64_t v120 = (_DWORD *)a1;
  sub_100067FB8(a1, v124, (uint64_t)v28);
  if (sub_1000312BC((uint64_t)v28, 1, v30) != 1)
  {
    uint64_t v117 = v31;
    sub_100057DBC((uint64_t)v28, (uint64_t)v33);
    if (qword_100697968 != -1) {
      swift_once();
    }
    sub_100051F9C();
    id v34 = (id)static ASDConfigurationManager.shared;
    sub_1000950DC(v125);

    sub_100051880((uint64_t)v125, (uint64_t)v126, &qword_100697F08);
    if (v126[5] == 1
      || (memcpy(v127, v126, sizeof(v127)),
          sub_100036138((uint64_t *)v125),
          sub_100051880((uint64_t)v127, (uint64_t)v128, &qword_100699428),
          sub_100051880((uint64_t)v128, (uint64_t)&v132, &qword_100699428),
          v133 == 1)
      || (uint64_t v35 = v132,
          sub_100051880((uint64_t)&v127[16], (uint64_t)v129, &qword_100698050),
          sub_100051880((uint64_t)v129, (uint64_t)&v130, &qword_100698050),
          v131 == 1))
    {
      swift_release();
      goto LABEL_9;
    }
    uint64_t v47 = *v33 + 1;
    if (__OFADD__(*v33, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v2 = v130;
      uint64_t *v33 = v47;
      if (v47 >= v35)
      {
        uint64_t v105 = v33;
        if (qword_100697920 != -1) {
          swift_once();
        }
        uint64_t v61 = type metadata accessor for Logger();
        sub_100031284(v61, (uint64_t)qword_100699220);
        uint64_t v62 = v119;
        unint64_t v116 = *(void (**)(char *, _DWORD *, uint64_t))(v13 + 16);
        v116(v22, v120, v119);
        swift_retain_n();
        os_log_type_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.debug.getter();
        int v65 = v64;
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v66 = sub_10003371C();
          LODWORD(v114) = v65;
          uint64_t v67 = v66;
          uint64_t v115 = sub_10003371C();
          v123[0] = v115;
          *(_DWORD *)uint64_t v67 = 136315650;
          sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
          os_log_t v113 = v63;
          uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v70 = sub_100032B48(v68, v69, v123);
          sub_10007942C(v70);
          uint64_t v62 = v119;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v71 = sub_100079204();
          v72(v71);
          *(_WORD *)(v67 + 12) = 2048;
          uint64_t v73 = v105;
          sub_100051F9C();
          uint64_t v74 = *v73;
          swift_release();
          uint64_t v121 = v74;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          *(_WORD *)(v67 + 22) = 2048;
          uint64_t v121 = v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          os_log_t v75 = v113;
          _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v114, "Reached ravioli retry limit for %s - Tried %ld times limit %ld", (uint8_t *)v67, 0x20u);
          swift_arrayDestroy();
          sub_100033704();
          sub_100033704();
        }
        else
        {
          swift_release();
          uint64_t v94 = sub_100079204();
          v95(v94);
          swift_release();

          uint64_t v73 = v105;
        }
        uint64_t v96 = v120;
        sub_100073CF8();
        sub_10002EAE0((void *)(v118 + *(void *)(*(void *)v118 + 160)), *(void *)(v118 + *(void *)(*(void *)v118 + 160) + 24));
        uint64_t v97 = sub_10002E768(&qword_100699430);
        uint64_t v98 = v111;
        uint64_t v99 = (char *)v111 + *(int *)(v97 + 48);
        sub_100051F9C();
        *uint64_t v98 = *v73;
        v116(v99, v96, v62);
        swift_storeEnumTagMultiPayload();
        sub_1000AE9B8((uint64_t)v98);
        sub_100077C00((uint64_t)v98, (void (*)(void))type metadata accessor for ASAnalyticsEvent);
        goto LABEL_29;
      }
      if (qword_100697920 == -1)
      {
LABEL_19:
        uint64_t v48 = type metadata accessor for Logger();
        sub_100031284(v48, (uint64_t)qword_100699220);
        uint64_t v110 = *(void (**)(void, void, void))(v13 + 16);
        char v111 = (uint64_t *)(v13 + 16);
        sub_1000789FC();
        v49();
        swift_retain_n();
        uint64_t v50 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.debug.getter();
        int v52 = v51;
        if (os_log_type_enabled(v50, v51))
        {
          uint64_t v53 = swift_slowAlloc();
          uint64_t v105 = v33;
          uint64_t v54 = v53;
          uint64_t v103 = sub_10003371C();
          v123[0] = v103;
          *(_DWORD *)uint64_t v54 = 136315394;
          uint64_t v16 = v54 + 4;
          sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
          int v102 = v52;
          uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
          v122[0] = sub_100032B48(v55, v56, v123);
          os_log_t v101 = v50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v57 = sub_100078D7C();
          v58(v57);
          *(_WORD *)(v54 + 12) = 2048;
          sub_100051F9C();
          uint64_t v59 = *v105;
          swift_release();
          v122[0] = v59;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          os_log_t v60 = v101;
          _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v102, "Ravioli request failed for %s. Attempts made: %ld", (uint8_t *)v54, 0x16u);
          swift_arrayDestroy();
          sub_100033704();
          uint64_t v33 = v105;
          sub_100033704();
        }
        else
        {
          swift_release();
          uint64_t v76 = sub_100078D7C();
          v77(v76);
          swift_release();
        }
        uint64_t v78 = v109;
        static Date.now.getter();
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, os_log_t))(v112 + 40))((char *)v33 + *(int *)(v30 + 20), v78, v113);
        uint64_t v79 = (uint64_t)v114;
        uint64_t v80 = v120;
        unint64_t v81 = (void (*)(uint64_t, _DWORD *, uint64_t))v110;
        v110(v114, v120, v16);
        uint64_t v82 = v106;
        sub_100077324((uint64_t)v33, v106);
        sub_10003349C(v82, 0, 1, v30);
        sub_100053130(v82, v79);
        v122[0] = v124;
        swift_bridgeObjectRetain();
        id v83 = sub_100067A24();
        sub_10002F138((uint64_t)v122, v83, (uint64_t)&unk_10065FD78, (uint64_t)&off_10065FD88);

        swift_bridgeObjectRelease();
        uint64_t v84 = v119;
        v81(v79, v80, v119);
        uint64_t v85 = type metadata accessor for TaskPriority();
        uint64_t v86 = (void (*)(void, void, void))v116;
        sub_100078E6C((uint64_t)v116, v87, v88, v85);
        type metadata accessor for RavioliManager();
        uint64_t WitnessTable = swift_getWitnessTable();
        BOOL v90 = (void *)swift_allocObject();
        uint64_t v92 = v117;
        uint64_t v91 = v118;
        v90[2] = v118;
        v90[3] = WitnessTable;
        v90[4] = v2;
        v90[5] = v91;
        v90[6] = v92;
        swift_retain_n();
        swift_retain();
        uint64_t v93 = sub_10004964C((uint64_t)v86, (uint64_t)&unk_100699478, (uint64_t)v90);
        sub_10007927C();
        sub_1000570BC(v93, v79);
        v104(v79, v84);
        swift_endAccess();
LABEL_29:
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    swift_once();
    goto LABEL_19;
  }
  sub_100077ED4((uint64_t)v28, &qword_1006989C8);
  swift_deallocBox();
LABEL_9:
  uint64_t v36 = v119;
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_100031284(v37, (uint64_t)qword_100699220);
  sub_1000789FC();
  v38();
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (_DWORD *)sub_100033734();
    v123[0] = sub_10003371C();
    _DWORD *v41 = 136315138;
    uint64_t v120 = v41 + 1;
    sub_1000785BC(&qword_100699400, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v44 = sub_100032B48(v42, v43, v123);
    sub_10007942C(v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100078B84();
    v45();
    sub_100078EE4((void *)&_mh_execute_header, v39, v40, "No retry state or no max retries for %s");
    sub_100051BCC();
    sub_100033704();
    sub_100033704();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v36);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100075AEC(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 48) = a5;
  *(double *)(v5 + 40) = a1;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v5 + 56) = v7;
  *(void *)(v5 + 64) = *(void *)(v7 - 8);
  *(void *)(v5 + 72) = swift_task_alloc();
  *(void *)(v5 + 80) = type metadata accessor for ServerJSONFetchRetryState();
  *(void *)(v5 + 88) = swift_projectBox();
  return _swift_task_switch(sub_100075BD0, a5, 0);
}

uint64_t sub_100075BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10003F0F4();
  sub_100079188();
  if (v20)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v19 <= -1.0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
  }
  sub_10007916C();
  if (!v21) {
    goto LABEL_12;
  }
  sub_100078EFC();
  if (!v20) {
    goto LABEL_13;
  }
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v10 + 96) = v22;
  *uint64_t v22 = v10;
  v22[1] = sub_100075C9C;
  uint64_t v11 = sub_100048FC8();
  return static Task<>.sleep(nanoseconds:)(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

uint64_t sub_100075C9C()
{
  sub_10003F444();
  sub_1000788A8();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  sub_100079198();
  sub_10007917C();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100075D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100078968();
  sub_100051FE0();
  if (qword_100697930 != -1) {
    swift_once();
  }
  sub_10007971C();
  sub_100031284(v10, (uint64_t)static RavioliConstants.ravioliUUID);
  sub_1000789FC();
  v11();
  sub_100051F9C();
  sub_1000796DC();
  uint64_t v12 = sub_100079514();
  sub_10006FBB0(v12, v13, v14, v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_100079360();
  v17(v16);
  swift_task_dealloc();
  sub_10003F1AC();
  sub_100051C0C();
  return v19(v18, v19, v20, v21, v22, v23, v24, v25, a9, a10);
}

uint64_t sub_100075E7C(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 48) = a5;
  *(double *)(v5 + 40) = a1;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v5 + 56) = v7;
  *(void *)(v5 + 64) = *(void *)(v7 - 8);
  *(void *)(v5 + 72) = swift_task_alloc();
  *(void *)(v5 + 80) = type metadata accessor for ServerJSONFetchRetryState();
  *(void *)(v5 + 88) = swift_projectBox();
  return _swift_task_switch(sub_100075F60, a5, 0);
}

uint64_t sub_100075F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10003F0F4();
  sub_100079188();
  if (v20)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v19 <= -1.0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
  }
  sub_10007916C();
  if (!v21) {
    goto LABEL_12;
  }
  sub_100078EFC();
  if (!v20) {
    goto LABEL_13;
  }
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v10 + 96) = v22;
  *uint64_t v22 = v10;
  v22[1] = sub_10007602C;
  uint64_t v11 = sub_100048FC8();
  return static Task<>.sleep(nanoseconds:)(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

uint64_t sub_10007602C()
{
  sub_10003F444();
  sub_1000788A8();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(void *)(v2 + 104) = v0;
  swift_task_dealloc();
  sub_100079198();
  sub_10007917C();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100076124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100078968();
  sub_100051FE0();
  if (qword_100697930 != -1) {
    swift_once();
  }
  sub_10007971C();
  sub_100031284(v10, (uint64_t)static RavioliConstants.ravioliUUID);
  sub_1000789FC();
  v11();
  sub_100051F9C();
  sub_1000796DC();
  sub_100079514();
  sub_1000700A8();
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_100079360();
  v13(v12);
  swift_task_dealloc();
  sub_10003F1AC();
  sub_100051C0C();
  return v15(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10);
}

uint64_t sub_10007620C()
{
  sub_10003F444();
  if (qword_100697920 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = (void *)sub_100078994(v0, (uint64_t)qword_100699220);
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (sub_100051A84(v2))
  {
    uint64_t v3 = (_WORD *)sub_100051AA0();
    sub_100051BE8(v3);
    sub_100051A64((void *)&_mh_execute_header, v4, v5, "Retry task cancelled");
    sub_100033704();
  }
  swift_errorRelease();

  swift_task_dealloc();
  sub_10003F1AC();
  return v6();
}

uint64_t RavioliManager.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 104));
  swift_bridgeObjectRelease();
  sub_100078BFC();
  swift_release();
  sub_100078BFC();
  swift_bridgeObjectRelease();
  sub_100078BFC();
  sub_10002EB9C(v0 + *(void *)(v1 + 152));
  sub_100078BFC();
  sub_10002EB9C(v0 + *(void *)(v2 + 160));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t RavioliManager.__deallocating_deinit()
{
  RavioliManager.deinit();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_100076414(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x756F437972746572 && a2 == 0xEA0000000000746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x757165527473616CLL && a2 == 0xEB00000000747365;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6163696669746F6ELL && a2 == 0xEE0064496E6F6974)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1000765AC()
{
  return 3;
}

uint64_t sub_1000765B4(char a1)
{
  if (!a1) {
    return 0x756F437972746572;
  }
  if (a1 == 1) {
    return 0x757165527473616CLL;
  }
  return 0x6163696669746F6ELL;
}

uint64_t sub_100076624(void *a1)
{
  sub_10002E768(&qword_1006995C0);
  sub_100078890();
  __chkstk_darwin(v3);
  sub_10007921C();
  sub_10002EAE0(a1, a1[3]);
  sub_100078570();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ServerJSONFetchRetryState();
    type metadata accessor for Date();
    sub_1000785BC(&qword_1006987A8, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  sub_1000462F8();
  return v4();
}

uint64_t sub_1000767D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Date();
  sub_100078890();
  __chkstk_darwin(v5);
  sub_100079234();
  sub_10002E768(&qword_1006995D0);
  sub_100078890();
  __chkstk_darwin(v6);
  sub_100078C68();
  uint64_t v7 = type metadata accessor for ServerJSONFetchRetryState();
  sub_100051B88();
  __chkstk_darwin(v8);
  sub_100046348();
  sub_10002EAE0(a1, a1[3]);
  sub_100078570();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10002EB9C((uint64_t)a1);
  }
  *uint64_t v3 = KeyedDecodingContainer.decode(_:forKey:)();
  sub_1000785BC(&qword_100698878, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_1000791BC();
  v9();
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = (uint64_t)v3;
  uint64_t v13 = v12;
  sub_100078B84();
  v14();
  uint64_t v15 = (uint64_t *)(v11 + *(int *)(v7 + 24));
  uint64_t *v15 = v10;
  v15[1] = v13;
  sub_100077324(v11, a2);
  sub_10002EB9C((uint64_t)a1);
  return sub_100077C00(v11, (void (*)(void))type metadata accessor for ServerJSONFetchRetryState);
}

uint64_t sub_100076AD0()
{
  return sub_1000765B4(*v0);
}

uint64_t sub_100076AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100076414(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100076B00@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1000765AC();
  *a1 = result;
  return result;
}

uint64_t sub_100076B28(uint64_t a1)
{
  unint64_t v2 = sub_100078570();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100076B64(uint64_t a1)
{
  unint64_t v2 = sub_100078570();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100076BA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000767D8(a1, a2);
}

uint64_t sub_100076BB8(void *a1)
{
  return sub_100076624(a1);
}

uint64_t sub_100076BD0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100076C08()
{
  sub_10007932C();
  sub_100078890();
  sub_1000790F8();
  uint64_t v0 = sub_1000789BC();
  v1(v0);
  swift_release();
  sub_100078D6C();
  sub_100058710();
  return _swift_deallocObject(v2, v3, v4);
}

uint64_t sub_100076C8C()
{
  sub_100078968();
  sub_100051FE0();
  sub_100078890();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100078948(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003F060;
  sub_100051C0C();
  return sub_10006C254(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t type metadata accessor for RavioliManagerObjC()
{
  return self;
}

uint64_t type metadata accessor for RavioliConstants()
{
  return self;
}

uint64_t type metadata accessor for DefinedRavioliNotificationIds()
{
  return self;
}

uint64_t sub_100076DEC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for RavioliManager()
{
  return sub_100077F20();
}

uint64_t sub_100076EE4()
{
  return sub_100076EFC();
}

uint64_t sub_100076EFC()
{
  sub_10007932C();
  sub_100078FE0();
  sub_100078890();
  unint64_t v4 = (*(void *)(v3 + 64)
      + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  sub_100079160();
  v5();
  v0(*(void *)(v1 + v4 + 8));
  sub_100058710();
  return _swift_deallocObject(v6, v7, v8);
}

uint64_t sub_100076FC0()
{
  sub_100078968();
  sub_100051FE0();
  uint64_t v0 = sub_100078FE0();
  sub_100031774(v0);
  sub_100078A90();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100078948(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10003F060;
  sub_100078924();
  sub_100051C0C();
  return sub_10007052C(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t type metadata accessor for ServerJSONFetchRetryState()
{
  uint64_t result = qword_100699578;
  if (!qword_100699578) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1000770C4()
{
  unint64_t result = qword_1006993D0;
  if (!qword_1006993D0)
  {
    sub_10003137C(&qword_1006993C8);
    sub_1000785BC(&qword_1006993D8, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1000785BC(&qword_1006993E0, (void (*)(uint64_t))type metadata accessor for ServerJSONFetchRetryState);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006993D0);
  }
  return result;
}

unint64_t sub_1000771A0()
{
  unint64_t result = qword_1006993E8;
  if (!qword_1006993E8)
  {
    sub_10003137C(&qword_1006993C8);
    sub_1000785BC(&qword_1006993F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1000785BC(&qword_1006993F8, (void (*)(uint64_t))type metadata accessor for ServerJSONFetchRetryState);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006993E8);
  }
  return result;
}

unint64_t sub_10007727C()
{
  unint64_t result = qword_100699418;
  if (!qword_100699418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699418);
  }
  return result;
}

unint64_t sub_1000772C8()
{
  unint64_t result = qword_100699420;
  if (!qword_100699420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699420);
  }
  return result;
}

uint64_t sub_100077314()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100077324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ServerJSONFetchRetryState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007738C()
{
  sub_100048E64();
  sub_10007979C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100078948(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003F060;
  double v7 = sub_100078FC0();
  return sub_100075AEC(v7, v3, v4, v5, v6);
}

uint64_t sub_100077424(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10003137C(&qword_100699448);
    sub_1000785BC(a2, (void (*)(uint64_t))type metadata accessor for PushPayload);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000774BC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100077504()
{
  sub_100048E64();
  sub_10007979C();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100078948(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003F060;
  double v7 = sub_100078FC0();
  return sub_100075E7C(v7, v3, v4, v5, v6);
}

uint64_t sub_10007759C()
{
  sub_10007932C();
  type metadata accessor for UUID();
  sub_100078890();
  sub_1000790D0();
  swift_release();
  uint64_t v0 = sub_1000789BC();
  v1(v0);
  swift_bridgeObjectRelease();
  sub_100078D6C();
  sub_100058710();
  return _swift_deallocObject(v2, v3, v4);
}

uint64_t sub_100077634()
{
  sub_100078968();
  sub_100051FE0();
  uint64_t v0 = sub_100078FE0();
  sub_100031774(v0);
  sub_1000796BC();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100078948(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10003D5FC;
  sub_100078924();
  sub_100051C0C();
  return sub_100071004(v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100077700()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100077738(uint64_t a1)
{
  sub_100069AAC(a1, *(void *)(v1 + 16));
}

uint64_t sub_100077740()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void sub_100077750(uint64_t a1, unint64_t a2)
{
  sub_100068AA8(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100077758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = &type metadata for RavioliFetcherImpl;
  uint64_t v17 = &off_1006614F0;
  swift_defaultActor_initialize();
  uint64_t v6 = *(void *)(*(void *)a3 + 112);
  type metadata accessor for UUID();
  sub_10002E768(&qword_1006979B8);
  sub_1000785BC((unint64_t *)&qword_1006979C0, (void (*)(uint64_t))&type metadata accessor for UUID);
  *(void *)(a3 + v6) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(a3 + *(void *)(*(void *)a3 + 128)) = 0;
  uint64_t v7 = *(void *)(*(void *)a3 + 136);
  *(void *)(a3 + v7) = Dictionary.init(dictionaryLiteral:)();
  *(void *)(a3 + *(void *)(*(void *)a3 + 144)) = a2;
  uint64_t v8 = a3 + *(void *)(*(void *)a3 + 104);
  uint64_t v9 = sub_10002E768(&qword_100699490);
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  sub_10002EA7C((uint64_t)v15, a3 + *(void *)(*(void *)a3 + 152));
  uint64_t v13 = type metadata accessor for ASAnalyticsManager();
  uint64_t v14 = &off_100661050;
  *(void *)&long long v12 = swift_allocObject();
  sub_10002EB9C((uint64_t)v15);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  sub_1000311A4(&v12, a3 + *(void *)(*(void *)a3 + 160));
  return a3;
}

uint64_t sub_1000779A0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000779E0()
{
  sub_10003F444();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_100078948(v6);
  void *v7 = v8;
  v7[1] = sub_10003F060;
  return sub_100068508(v2, v3, v4, v5);
}

uint64_t sub_100077A88()
{
  sub_10007932C();
  sub_10002E768(&qword_100699490);
  sub_100078890();
  sub_1000790F8();
  uint64_t v0 = sub_1000789BC();
  v1(v0);
  swift_release();
  sub_100078D6C();
  sub_100058710();
  return _swift_deallocObject(v2, v3, v4);
}

uint64_t sub_100077B18()
{
  sub_100048E64();
  uint64_t v0 = sub_10002E768(&qword_100699490);
  sub_100031774(v0);
  sub_1000796BC();
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100078948(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10003F060;
  sub_100048EF4();
  return sub_10006B2C8(v4, v5, v6, v7, v8);
}

uint64_t sub_100077C00(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_100051B88();
  uint64_t v3 = sub_100079394();
  v4(v3);
  return a1;
}

uint64_t sub_100077C50()
{
  sub_10007932C();
  type metadata accessor for UUID();
  sub_100078890();
  type metadata accessor for ServerJSONFetchRetryState();
  swift_unknownObjectRelease();
  swift_release();
  sub_100079160();
  v0();
  type metadata accessor for Date();
  sub_100051B88();
  uint64_t v1 = sub_100079394();
  v2(v1);
  swift_bridgeObjectRelease();
  sub_100058710();
  return _swift_deallocObject(v3, v4, v5);
}

uint64_t sub_100077DA0()
{
  sub_100078968();
  sub_100051FE0();
  uint64_t v1 = type metadata accessor for UUID();
  sub_100031774(v1);
  type metadata accessor for ServerJSONFetchRetryState();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10003F060;
  sub_100051C0C();
  return sub_100073284(v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100077ED4(uint64_t a1, uint64_t *a2)
{
  sub_10002E768(a2);
  sub_100051B88();
  uint64_t v3 = sub_100079394();
  v4(v3);
  return a1;
}

uint64_t sub_100077F20()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for RavioliFetcherImpl()
{
  return &type metadata for RavioliFetcherImpl;
}

uint64_t *sub_100077F60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    long long v12 = (uint64_t *)((char *)v4 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    void *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100078054(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_bridgeObjectRelease();
}

void *sub_1000780DC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  long long v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = v12[1];
  void *v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100078180(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  long long v12 = (void *)((char *)a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100078238(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1000782D0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  long long v12 = (void *)((char *)a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  void *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100078378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007838C);
}

uint64_t sub_10007838C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Date();
  sub_100078980();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_1000312BC(v9, a2, v8);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100078424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100078438);
}

void sub_100078438(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Date();
  sub_100078980();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    sub_10003349C(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
}

uint64_t sub_1000784CC()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100078570()
{
  unint64_t result = qword_1006995C8;
  if (!qword_1006995C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006995C8);
  }
  return result;
}

uint64_t sub_1000785BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ServerJSONFetchRetryState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ServerJSONFetchRetryState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100078758);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerJSONFetchRetryState.CodingKeys()
{
  return &type metadata for ServerJSONFetchRetryState.CodingKeys;
}

unint64_t sub_100078794()
{
  unint64_t result = qword_1006995E0;
  if (!qword_1006995E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006995E0);
  }
  return result;
}

unint64_t sub_1000787E4()
{
  unint64_t result = qword_1006995E8;
  if (!qword_1006995E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006995E8);
  }
  return result;
}

unint64_t sub_100078834()
{
  unint64_t result = qword_1006995F0;
  if (!qword_1006995F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006995F0);
  }
  return result;
}

uint64_t sub_1000788C0()
{
  return v0;
}

uint64_t sub_1000788DC()
{
  return v0;
}

uint64_t sub_1000788F4()
{
  return swift_slowAlloc();
}

uint64_t sub_100078924()
{
  return v0;
}

uint64_t sub_100078948(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100078994(uint64_t a1, uint64_t a2)
{
  sub_100031284(a1, a2);
  return Logger.logObject.getter();
}

uint64_t sub_1000789BC()
{
  return v0 + v1;
}

uint64_t sub_1000789D4()
{
  *(void *)(v1 + 56) = v0;
  return swift_errorRetain();
}

uint64_t sub_100078A08()
{
  *(_WORD *)(v0 + 12) = 2080;
  return swift_getErrorValue();
}

uint64_t sub_100078A30()
{
  return v0;
}

uint64_t sub_100078A4C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100078A74(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return sub_100032B48(v3, v2, (uint64_t *)va);
}

BOOL sub_100078AB4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100078B04(uint64_t a1)
{
  return sub_1000312BC(a1, 1, v1);
}

uint64_t sub_100078B24()
{
  return v0;
}

uint64_t sub_100078B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  _DWORD *v9 = a9;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100078B60()
{
  return swift_dynamicCast();
}

uint64_t sub_100078B90(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100078BB4(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100078BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  _DWORD *v9 = a9;
  return swift_bridgeObjectRetain();
}

_WORD *sub_100078C08(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_100078C68()
{
  return 0;
}

uint64_t sub_100078C98()
{
  return v0;
}

uint64_t sub_100078CAC()
{
  return swift_arrayDestroy();
}

uint64_t sub_100078CCC()
{
  *(void *)(v2 + 16) = v1;
  return v0;
}

void sub_100078CF8(float a1)
{
  *uint64_t v1 = a1;
}

void sub_100078D0C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, os_log_type_t type)
{
  _os_log_impl(a1, v11, type, a4, v12, 0x16u);
}

void sub_100078D2C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100078D4C(uint64_t a1)
{
  *(void *)(v1 + 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100078D6C()
{
  return v0;
}

uint64_t sub_100078D7C()
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v0 + 32) = (v1 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  *(void *)(v0 + 40) = v3;
  return v2;
}

uint64_t sub_100078DF0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100078E08@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

BOOL sub_100078E50(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100078E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003349C(a1, 1, 1, a4);
}

uint64_t sub_100078E84()
{
  return swift_arrayDestroy();
}

uint64_t sub_100078EB4()
{
  return v0;
}

BOOL sub_100078EC8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_100078EE4(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_100078F10(float a1)
{
  *uint64_t v1 = a1;
  return swift_getErrorValue();
}

uint64_t sub_100078F3C()
{
  return swift_arrayDestroy();
}

uint64_t sub_100078F58()
{
  return swift_slowAlloc();
}

void sub_100078F74(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_100078F84()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100078FA4()
{
  return UUID.init(uuidString:)();
}

double sub_100078FC0()
{
  return v0;
}

uint64_t sub_100078FE0()
{
  return type metadata accessor for UUID();
}

uint64_t sub_100078FF8()
{
  return swift_errorRelease();
}

uint64_t sub_10007905C()
{
  return 0;
}

void *sub_100079078()
{
  return memcpy((void *)(v0 + 208), v1, 0x60uLL);
}

void sub_1000790AC(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000790C4()
{
  return v0;
}

uint64_t sub_1000790D0()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_1000790F8()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_100079120(uint64_t a1)
{
  *(void *)(v1 + 392) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100079148()
{
  return swift_task_dealloc();
}

uint64_t sub_1000791C8(uint64_t a1)
{
  sub_10002EC58(a1, v3);
  sub_10002EC58(v4, v2);
  return sub_10002EC58(v5, v1);
}

uint64_t sub_100079204()
{
  return v0;
}

uint64_t sub_100079264()
{
  uint64_t result = *(void *)(v0 + 48);
  *(unsigned char *)(*(void *)(v0 + 56) + 16) = 1;
  return result;
}

uint64_t sub_10007927C()
{
  return swift_beginAccess();
}

uint64_t sub_100079294@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + a1 + 32);
  sub_10002EAE0((void *)(v1 + a1), *(void *)(v1 + a1 + 24));
  return v2 + 8;
}

char *sub_1000792C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

void sub_1000792D4(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t sub_1000792EC()
{
  return swift_task_dealloc();
}

BOOL sub_100079310(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100079340(uint64_t result)
{
  *(void *)(v1 + 504) = result;
  return result;
}

uint64_t sub_100079350(uint64_t result)
{
  *(void *)(v1 + 552) = result;
  return result;
}

uint64_t sub_100079360()
{
  return v0;
}

BOOL sub_100079378(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100079394()
{
  return v0;
}

uint64_t sub_1000793A4()
{
  return v0;
}

char *sub_100079404(void *a1)
{
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = v1;
  return (char *)a1 + v2;
}

uint64_t sub_100079418(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return v1 - 160;
}

uint64_t sub_10007942C(uint64_t a1)
{
  *(void *)(v1 + 200) = a1;
  return v1 + 200;
}

uint64_t sub_100079440()
{
  return v0;
}

float *sub_100079458(float *result, float a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_10007946C(double a1, double a2)
{
  *uint64_t v2 = a1 / a2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10007948C()
{
  return *(void *)(v0 + 88);
}

uint64_t sub_1000794A0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000794B8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000794D0()
{
  return v0;
}

uint64_t sub_1000794E4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  return sub_100032B48(a1, a2, (uint64_t *)va);
}

uint64_t sub_100079508()
{
  return v0;
}

uint64_t sub_100079514()
{
  return v0;
}

void sub_100079528(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void sub_100079548(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t sub_100079568(uint64_t a1)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  return sub_100077324(v1, v4);
}

uint64_t sub_100079588()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000795A0()
{
  return sub_10003349C(v0, 0, 1, v1);
}

uint64_t sub_1000795C0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  return sub_100032B48(a1, a2, (uint64_t *)va);
}

uint64_t sub_1000795D8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000795F8()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100079618(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  return sub_100032B48(a1, a2, (uint64_t *)va);
}

void sub_100079630(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_100079670()
{
  return swift_dynamicCast();
}

uint64_t sub_100079690(uint64_t a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  return sub_1000333E4((uint64_t)va1, (uint64_t)va);
}

uint64_t sub_1000796A8()
{
  return v0;
}

uint64_t sub_1000796DC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000796FC()
{
  return swift_bridgeObjectRelease();
}

void sub_100079744(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_100079770()
{
  return swift_task_dealloc();
}

uint64_t sub_1000797D0()
{
  return Error.localizedDescription.getter();
}

uint64_t sub_1000797E8()
{
  return swift_errorRelease();
}

uint64_t sub_100079800(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000798C8()
{
  sub_10003F0F4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003F060;
  return sub_100079954();
}

uint64_t sub_100079954()
{
  sub_10003F0F4();
  v1[2] = v0;
  uint64_t v2 = sub_10002E768(&qword_100697EE0);
  sub_100051D98(v2);
  v1[3] = sub_10003F13C();
  uint64_t v3 = type metadata accessor for Date();
  v1[4] = v3;
  sub_100031774(v3);
  v1[5] = v4;
  v1[6] = sub_10007ED4C();
  v1[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PushPayload();
  v1[8] = v5;
  sub_100031774(v5);
  v1[9] = v6;
  v1[10] = sub_10003F13C();
  sub_100051C80();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_100079A40()
{
  sub_100048E64();
  id v1 = [self standardUserDefaults];
  uint64_t v2 = sub_100067464(v1);
  *(void *)(v0 + 88) = v2;

  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 96) = v3;
  if (!v3)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10003F1AC();
    sub_100048EF4();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(v0 + 72);
  int v6 = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 144) = v6;
  uint64_t v7 = *(void *)(v5 + 72);
  *(void *)(v0 + 104) = v7;
  while (1)
  {
    *(void *)(v0 + 112) = v4;
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v9 = *(void *)(v0 + 64);
    uint64_t v10 = *(void *)(v0 + 24);
    sub_1000313D4(*(void *)(v0 + 88) + ((v6 + 32) & ~(unint64_t)v6) + v4 * v7, v8);
    sub_10007EB58(v8 + *(int *)(v9 + 52), v10);
    sub_10007ED68();
    if (v11)
    {
      uint64_t v12 = *(void *)(v0 + 24);
      static Date.distantPast.getter();
      sub_10007E9CC(v12, &qword_100697EE0);
    }
    else
    {
      sub_10007EDFC();
      v13();
    }
    uint64_t v14 = *(void *)(v0 + 56);
    static Date.now.getter();
    static Date.< infix(_:_:)();
    uint64_t v15 = sub_10007EC54();
    v16(v15);
    if (v14) {
      break;
    }
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v18 = *(void *)(v0 + 16);
    Date.timeIntervalSinceNow.getter();
    sub_10007A780(v17, v19);
    uint64_t v20 = sub_10007ECB8();
    v21(v20);
    sub_100031438(v18);
    if (v18 == v17) {
      goto LABEL_13;
    }
    uint64_t v7 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 112) + 1;
    LOBYTE(v6) = *(unsigned char *)(v0 + 144);
  }
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_100079C7C;
  sub_100078E08(*(void *)(v0 + 80));
  sub_100048EF4();
  return sub_10007ABD8();
}

uint64_t sub_100079C7C()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100079D58()
{
  sub_100048E64();
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 112) + 1;
  (*(void (**)(void, void))(v0 + 120))(*(void *)(v0 + 56), *(void *)(v0 + 32));
  sub_100031438(v2);
  if (v3 == v1)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10003F1AC();
    sub_100048EF4();
    __asm { BRAA            X1, X16 }
  }
  while (1)
  {
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v5 = *(void *)(v0 + 112) + 1;
    *(void *)(v0 + 112) = v5;
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 24);
    sub_1000313D4(*(void *)(v0 + 88)+ ((*(unsigned __int8 *)(v0 + 144) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 144))+ v4 * v5, v6);
    sub_10007EB58(v6 + *(int *)(v7 + 52), v8);
    sub_10007ED68();
    if (v9)
    {
      uint64_t v10 = *(void *)(v0 + 24);
      static Date.distantPast.getter();
      sub_10007E9CC(v10, &qword_100697EE0);
    }
    else
    {
      sub_10007EDFC();
      v11();
    }
    uint64_t v12 = *(void *)(v0 + 56);
    static Date.now.getter();
    static Date.< infix(_:_:)();
    uint64_t v13 = sub_10007EC54();
    v14(v13);
    if (v12) {
      break;
    }
    uint64_t v15 = *(void *)(v0 + 80);
    uint64_t v16 = *(void *)(v0 + 16);
    Date.timeIntervalSinceNow.getter();
    sub_10007A780(v15, v17);
    uint64_t v18 = sub_10007ECB8();
    v19(v18);
    sub_100031438(v16);
    if (v16 == v15) {
      goto LABEL_7;
    }
  }
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_100079C7C;
  sub_100078E08(*(void *)(v0 + 80));
  sub_100048EF4();
  return sub_10007ABD8();
}

void sub_100079F5C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PushPayload();
  uint64_t v3 = sub_100051D98(v2);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  char v9 = (char *)&v30 - v8;
  __chkstk_darwin(v7);
  char v11 = (char *)&v30 - v10;
  char v12 = *(unsigned char *)(a1 + 40);
  sub_1000313D4(a1, (uint64_t)&v30 - v10);
  if ((v12 & 1) == 0)
  {
    sub_100031438((uint64_t)v11);
LABEL_5:
    if ((*(unsigned char *)(a1 + 56) & 1) != 0
      || (*(unsigned char *)(a1 + 72) & 1) != 0
      || (double v14 = *(double *)(a1 + 48), sub_10007E5C4(0.0, 1.0), v15 >= v14))
    {
      sub_1000313D4(a1, (uint64_t)v6);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)sub_100033734();
        uint64_t v31 = sub_10003371C();
        *(_DWORD *)uint64_t v23 = 136315138;
        if (v6[40])
        {
          unint64_t v24 = 0xE300000000000000;
          uint64_t v25 = 7104878;
        }
        else
        {
          uint64_t v30 = *((void *)v6 + 4);
          sub_10007EB0C();
          uint64_t v25 = BinaryInteger.description.getter();
          unint64_t v24 = v27;
        }
        uint64_t v30 = sub_100032B48(v25, v24, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100031438((uint64_t)v6);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Push notification normal period - max delay: %s", v23, 0xCu);
        sub_10007EC7C();
        sub_100033704();
        sub_100033704();
      }
      else
      {

        sub_100031438((uint64_t)v6);
      }
      double v28 = (double)*(unint64_t *)(a1 + 64);
      double v29 = 0.0;
      if (*(unsigned char *)(a1 + 72)) {
        double v28 = 0.0;
      }
      if (!*(unsigned char *)(a1 + 40)) {
        double v29 = (double)*(unint64_t *)(a1 + 32);
      }
      if (v28 > v28 + v29) {
        __break(1u);
      }
    }
    else
    {
      uint64_t v16 = (void *)Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.info.getter();
      if (sub_10007ECF4(v17))
      {
        uint64_t v18 = (_WORD *)sub_100051AA0();
        sub_100078C08(v18);
        sub_10007EE10((void *)&_mh_execute_header, v19, v20, "Push notification selected for slow start period");
        sub_100033704();
      }
    }
    return;
  }
  char v13 = v11[56];
  sub_10003166C((uint64_t)v11, (uint64_t)v9);
  if (v13)
  {
    sub_100031438((uint64_t)v9);
    return;
  }
  char v26 = v9[72];
  sub_100031438((uint64_t)v9);
  if ((v26 & 1) == 0) {
    goto LABEL_5;
  }
}

double sub_10007A26C(uint64_t a1)
{
  sub_100079F5C(a1);
  double v3 = 0.0;
  if ((v4 & 1) == 0)
  {
    if (*(double *)&v1 == v2)
    {
      return *(double *)&v1;
    }
    else
    {
      sub_10007E15C(v1, *(double *)&v1, v2);
      double v3 = v5;
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = swift_slowAlloc();
        uint64_t v12 = sub_10003371C();
        *(_DWORD *)uint64_t v8 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v8 + 12) = 2080;
        uint64_t v9 = sub_10007EA74();
        sub_100032B48(v9, v10, &v12);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Calculated delay for push %f out of delay range %s including slow start if requested", (uint8_t *)v8, 0x16u);
        swift_arrayDestroy();
        sub_100033704();
        sub_100033704();
      }
    }
  }
  return v3;
}

uint64_t sub_10007A3F8(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v37 = a1;
  uint64_t v5 = type metadata accessor for PushPayload();
  sub_10005EDB8();
  __chkstk_darwin(v6);
  sub_100046338();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  double v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  __chkstk_darwin(v15);
  os_log_type_t v17 = (char *)&v30 - v16;
  static Date.now.getter();
  static Date.+ infix(_:_:)();
  uint64_t v36 = *(void (**)(void))(v11 + 8);
  sub_100079160();
  v18();
  int v19 = v2 + OBJC_IVAR____TtC3asd19PushDispatchManager_logger;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v35(v14, v17, v10);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (sub_10007ECF4(v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v33 = v5;
    uint64_t v23 = v22;
    uint64_t v32 = sub_10003371C();
    uint64_t v39 = v32;
    *(_DWORD *)uint64_t v23 = 134218242;
    uint64_t v38 = *(void *)&a2;
    uint64_t v34 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2080;
    uint64_t v30 = v23 + 14;
    sub_10007EA24();
    int v31 = v19;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = sub_100032B48(v24, v25, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    char v26 = v36;
    sub_100079160();
    v26();
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v31, "Scheduling operation from push in %f at %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    sub_100033704();
    uint64_t v5 = v33;
    sub_100033704();
  }
  else
  {

    unint64_t v27 = v14;
    char v26 = v36;
    ((void (*)(char *, uint64_t))v36)(v27, v10);
  }
  sub_1000313D4(v37, v9);
  *(void *)(v9 + 32) = 0;
  *(unsigned char *)(v9 + 40) = 1;
  uint64_t v28 = v9 + *(int *)(v5 + 52);
  sub_10007E9CC(v28, &qword_100697EE0);
  v35((char *)v28, v17, v10);
  sub_10003349C(v28, 0, 1, v10);
  sub_10002FE90(v9);
  sub_10007A780(v9, a2);
  sub_100079160();
  v26();
  return sub_100031438(v9);
}

uint64_t sub_10007A780(uint64_t a1, double a2)
{
  uint64_t v5 = type metadata accessor for PushPayload();
  uint64_t v6 = sub_100031774(v5);
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v6);
  uint64_t v11 = sub_10002E768(&qword_100697E68);
  uint64_t v12 = sub_100051D98(v11);
  __chkstk_darwin(v12);
  sub_100046338();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for TaskPriority();
  sub_10003349C(v15, 1, 1, v16);
  sub_1000313D4(a1, (uint64_t)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v17 = (*(unsigned __int8 *)(v8 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  *(double *)(v18 + 32) = a2;
  *(void *)(v18 + 40) = v2;
  sub_10003166C((uint64_t)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  swift_retain();
  sub_100095420();
  return swift_release();
}

uint64_t sub_10007A8D8(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 24) = a5;
  *(void *)(v6 + 32) = a6;
  *(double *)(v6 + 16) = a1;
  return _swift_task_switch(sub_10007A8FC, 0, 0);
}

uint64_t sub_10007A8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10003F0F4();
  double v19 = *(double *)(v10 + 16) * 1000000000.0;
  if ((~*(void *)&v19 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v19 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v19 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
  }
  unint64_t v20 = (unint64_t)v19;
  os_log_type_t v21 = (void *)swift_task_alloc();
  *(void *)(v10 + 40) = v21;
  *os_log_type_t v21 = v10;
  v21[1] = sub_10007A9D8;
  unint64_t v11 = v20;
  return static Task<>.sleep(nanoseconds:)(v11, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

uint64_t sub_10007A9D8()
{
  sub_10003F444();
  sub_1000336EC();
  uint64_t v3 = v2;
  sub_10003F0E8();
  *char v4 = v3;
  uint64_t v5 = *v1;
  sub_10003F0B8();
  void *v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7();
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v3 + 48) = v9;
    void *v9 = v5;
    v9[1] = sub_10007AB14;
    sub_100078E08(*(void *)(v3 + 32));
    return sub_10007ABD8();
  }
}

uint64_t sub_10007AB14()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F1AC();
  return v3();
}

uint64_t sub_10007ABD8()
{
  sub_10003F0F4();
  v1[3] = v2;
  v1[4] = v0;
  uint64_t v3 = type metadata accessor for PushPayload();
  sub_100051D98(v3);
  v1[5] = sub_10003F13C();
  sub_100051C80();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10007AC54()
{
  unint64_t v11 = v0;
  sub_1000313D4(v0[3], v0[5]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[5];
    uint64_t v4 = (uint8_t *)sub_100033734();
    uint64_t v10 = sub_10003371C();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v5 = sub_10008358C();
    v0[2] = sub_100032B48(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100031438(v3);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Peforming delayed operation with command: %s", v4, 0xCu);
    sub_10007EC7C();
    sub_100033704();
    sub_100033704();
  }
  else
  {
    uint64_t v7 = v0[5];

    sub_100031438(v7);
  }
  sub_100030274(*(unsigned __int8 *)v0[3]);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[6] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_10007AE10;
  sub_100078E08(v0[3]);
  return sub_10007C3C0();
}

uint64_t sub_10007AE10()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *os_log_type_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v3();
}

uint64_t sub_10007AEEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = a1 + 24;
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)a1 & 1;
  char v8 = *(unsigned char *)(a1 + 1) & 1;
  sub_10002EAE0((void *)(v1 + OBJC_IVAR____TtC3asd19PushDispatchManager_analyticsManager), *(void *)(v1 + OBJC_IVAR____TtC3asd19PushDispatchManager_analyticsManager + 24));
  uint64_t v13 = type metadata accessor for ASAnalyticsEvent();
  uint64_t v14 = &off_100662930;
  uint64_t v9 = sub_10003EB78(v12);
  *(unsigned char *)uint64_t v9 = v7;
  *((unsigned char *)v9 + 1) = v8;
  v9[1] = v2;
  *((unsigned char *)v9 + 16) = v3 & 1;
  v9[3] = v6;
  v9[4] = v4;
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = sub_10002EAE0(v12, v13);
  sub_10007E760(v5, (uint64_t)v15);
  sub_10007E7C8((uint64_t)v15);
  sub_1000AE9B8((uint64_t)v10);
  return sub_10002EB9C((uint64_t)v12);
}

uint64_t sub_10007AFEC(uint64_t a1)
{
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = v1;
  return sub_100051A38((uint64_t)sub_10007B008, v1);
}

uint64_t sub_10007B008()
{
  sub_10003F0F4();
  uint64_t v1 = *(char **)(v0 + 96);
  *(void *)(v0 + 112) = sub_1000836C0(*v1);
  *(void *)(v0 + 120) = v2;
  *(double *)(v0 + 128) = sub_10007A26C((uint64_t)v1);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v3;
  *char v3 = v0;
  v3[1] = sub_10007B0B0;
  uint64_t v4 = sub_100078E08(*(void *)(v0 + 96));
  return sub_10007B914(v4);
}

uint64_t sub_10007B0B0()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  *(unsigned char *)(v6 + 152) = v5;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007B190()
{
  sub_10003F444();
  double v1 = *(double *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  if (*(unsigned char *)(v0 + 152))
  {
    *(_WORD *)(v0 + 56) = 256;
    *(double *)(v0 + 64) = v1;
    *(unsigned char *)(v0 + 72) = 0;
    *(void *)(v0 + 80) = v2;
    *(void *)(v0 + 88) = v3;
    swift_bridgeObjectRetain();
    sub_10007AEEC(v0 + 56);
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    sub_10003F1AC();
    return v4();
  }
  *(_WORD *)(v0 + 16) = 0;
  *(double *)(v0 + 24) = v1;
  *(unsigned char *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = v2;
  *(void *)(v0 + 48) = v3;
  swift_bridgeObjectRetain();
  sub_10007AEEC(v0 + 16);
  swift_bridgeObjectRelease();
  if (v1 > 0.0)
  {
    sub_10007A3F8(*(void *)(v0 + 96), *(double *)(v0 + 128));
    goto LABEL_5;
  }
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v6;
  void *v6 = v0;
  v6[1] = sub_10007B2E8;
  sub_100078E08(*(void *)(v0 + 96));
  return sub_10007C3C0();
}

uint64_t sub_10007B2E8()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10007B3C4()
{
  sub_10003F0F4();
  swift_bridgeObjectRelease();
  sub_10003F1AC();
  return v0();
}

uint64_t sub_10007B41C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002E768(&qword_100697E68);
  uint64_t v3 = sub_100051D98(v2);
  __chkstk_darwin(v3);
  sub_100046338();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for PushPayload();
  uint64_t v8 = sub_100031774(v7);
  uint64_t v10 = v9;
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v8);
  uint64_t v14 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = swift_bridgeObjectRetain();
  sub_1000837A4(v17, (uint64_t)v16);
  uint64_t v18 = type metadata accessor for TaskPriority();
  sub_10003349C(v6, 1, 1, v18);
  sub_1000313D4((uint64_t)v16, (uint64_t)v14);
  unint64_t v19 = (*(unsigned __int8 *)(v10 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v20 = (void *)swift_allocObject();
  _OWORD v20[2] = 0;
  v20[3] = 0;
  void v20[4] = v1;
  sub_10003166C((uint64_t)v14, (uint64_t)v20 + v19);
  swift_retain();
  sub_10004964C(v6, (uint64_t)&unk_1006997B0, (uint64_t)v20);
  swift_release();
  return sub_100031438((uint64_t)v16);
}

uint64_t sub_10007B878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  void *v7 = v5;
  v7[1] = sub_10003F060;
  return sub_10007AFEC(a5);
}

uint64_t sub_10007B914(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100051A38((uint64_t)sub_10007B930, v1);
}

uint64_t sub_10007B930()
{
  sub_10003F0F4();
  uint64_t v1 = v0[2];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for PushPayload() + 56));
  uint64_t v3 = *v2;
  v0[4] = *v2;
  if (v3 == 1)
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4(0);
  }
  else
  {
    v0[5] = v2[1];
    uint64_t v6 = (void *)swift_task_alloc();
    v0[6] = v6;
    void *v6 = v0;
    v6[1] = sub_10007BA20;
    return sub_10007BE38(v3);
  }
}

uint64_t sub_10007BA20()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  *(unsigned char *)(v6 + 56) = v5;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007BB00()
{
  sub_10003F0F4();
  int v1 = *(unsigned __int8 *)(v0 + 56);
  int v3 = sub_10007BB70(v2, *(void **)(v0 + 40));
  uint64_t v4 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v5 = (v3 & v1 & 1) == 0;
  return v4(v5);
}

uint64_t sub_10007BB70(uint64_t a1, void *a2)
{
  if (!a2) {
    goto LABEL_5;
  }
  uint64_t v3 = sub_100059630();
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t v6 = v4;
    if (sub_100079800(v3, v4, a2))
    {
      swift_bridgeObjectRelease();
LABEL_5:
      char v7 = 1;
      return v7 & 1;
    }
    uint64_t v28 = v5;
    uint64_t v13 = sub_100059780();
    int64_t v14 = v13[2];
    if (v14)
    {
      unint64_t v29 = v6;
      uint64_t v30 = _swiftEmptyArrayStorage;
      sub_1000A52D8(0, v14, 0);
      uint64_t v15 = _swiftEmptyArrayStorage;
      uint64_t v16 = v13 + 5;
      do
      {
        uint64_t v17 = *(v16 - 1);
        uint64_t v18 = *v16;
        uint64_t v30 = v15;
        unint64_t v20 = v15[2];
        unint64_t v19 = v15[3];
        swift_bridgeObjectRetain();
        if (v20 >= v19 >> 1)
        {
          sub_1000A52D8((char *)(v19 > 1), v20 + 1, 1);
          uint64_t v15 = v30;
        }
        v16 += 6;
        void v15[2] = v20 + 1;
        os_log_type_t v21 = &v15[2 * v20];
        v21[4] = v17;
        v21[5] = v18;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      unint64_t v6 = v29;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = _swiftEmptyArrayStorage;
    }
    uint64_t v22 = sub_10007F3CC((uint64_t)v15);
    char v23 = sub_10007E208((uint64_t)a2, v22);
    swift_bridgeObjectRelease();
    if (v23)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        char v26 = (uint8_t *)sub_100033734();
        uint64_t v30 = (void *)sub_10003371C();
        *(_DWORD *)char v26 = 136315138;
        swift_bridgeObjectRetain();
        sub_100032B48(v28, v6, (uint64_t *)&v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Push filtered - Current region (%s) not in areas.", v26, 0xCu);
        sub_10007EC7C();
        sub_100033704();
        sub_100033704();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    char v7 = v23 ^ 1;
  }
  else
  {
    uint64_t v8 = (void *)Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (sub_10007ECF4(v9))
    {
      uint64_t v10 = (_WORD *)sub_100051AA0();
      sub_100078C08(v10);
      sub_10007EE10((void *)&_mh_execute_header, v11, v12, "Push filtered - No current region found.");
      sub_100033704();
    }

    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_10007BE38(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_100051A38((uint64_t)sub_10007BE54, v1);
}

uint64_t sub_10007BE54()
{
  sub_10003F444();
  uint64_t v1 = v0[2];
  if (v1)
  {
    if (sub_100079800(0x64756F6C4369, 0xE600000000000000, (void *)v0[2]))
    {
      uint64_t v2 = (void *)swift_task_alloc();
      v0[4] = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_10007C01C;
      return sub_10005931C();
    }
    if (sub_10007ED10())
    {
      uint64_t v4 = (void *)swift_task_alloc();
      v0[5] = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_10007C22C;
      return sub_1000594DC();
    }
    uint64_t v5 = (void *)Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (sub_100051A84(v6))
    {
      char v7 = (_WORD *)sub_100051AA0();
      sub_100051BE8(v7);
      sub_100051A64((void *)&_mh_execute_header, v8, v9, "Push filtered - Not logged into a required account type.");
      sub_100033704();
    }
  }
  uint64_t v10 = (uint64_t (*)(BOOL))v0[1];
  return v10(v1 == 0);
}

uint64_t sub_10007C01C()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  *(unsigned char *)(v6 + 48) = v5;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007C0FC()
{
  sub_10003F444();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 48);
  if ((v1 & 1) == 0)
  {
    if (sub_10007ED10())
    {
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 40) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_10007C22C;
      return sub_1000594DC();
    }
    uint64_t v4 = (void *)Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (sub_100051A84(v5))
    {
      uint64_t v6 = (_WORD *)sub_100051AA0();
      sub_100051BE8(v6);
      sub_100051A64((void *)&_mh_execute_header, v7, v8, "Push filtered - Not logged into a required account type.");
      sub_100033704();
    }
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v9(v1);
}

uint64_t sub_10007C22C()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  *(unsigned char *)(v6 + 49) = v5;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007C30C()
{
  sub_10003F444();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 49);
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = (void *)Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (sub_100051A84(v3))
    {
      uint64_t v4 = (_WORD *)sub_100051AA0();
      sub_100051BE8(v4);
      sub_100051A64((void *)&_mh_execute_header, v5, v6, "Push filtered - Not logged into a required account type.");
      sub_100033704();
    }
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v7(v1);
}

uint64_t sub_10007C3C0()
{
  sub_10003F0F4();
  v1[3] = v2;
  v1[4] = v0;
  uint64_t v3 = type metadata accessor for PushPayload();
  sub_100051D98(v3);
  v1[5] = sub_10003F13C();
  sub_100051C80();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_10007C43C()
{
  uint64_t v17 = v0;
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[5];
  v0[6] = OBJC_IVAR____TtC3asd19PushDispatchManager_logger;
  sub_1000313D4(v1, v2);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = v0[5];
  if (v5)
  {
    uint64_t v7 = (uint8_t *)sub_100033734();
    uint64_t v16 = sub_10003371C();
    *(_DWORD *)uint64_t v7 = 136315138;
    unint64_t v8 = *(void *)(v6 + 24);
    uint64_t v9 = v0[5];
    if (v8)
    {
      uint64_t v10 = *(void *)(v9 + 16);
      unint64_t v11 = v8;
    }
    else
    {
      unint64_t v11 = 0xE300000000000000;
      uint64_t v10 = 7104878;
    }
    swift_bridgeObjectRetain();
    v0[2] = sub_100032B48(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100031438(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Processing notification with id: %s", v7, 0xCu);
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
  }
  else
  {

    sub_100031438(v6);
  }
  uint64_t v12 = (void *)swift_task_alloc();
  v0[7] = v12;
  void *v12 = v0;
  v12[1] = sub_10007C614;
  sub_100078E08(v0[3]);
  sub_10003F29C();
  return sub_10007B914(v13);
}

uint64_t sub_10007C614()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *os_log_type_t v4 = v3;
  *(unsigned char *)(v6 + 72) = v5;
  swift_task_dealloc();
  sub_100051C80();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007C6F4()
{
  sub_10003F444();
  if (*(unsigned char *)(v0 + 72))
  {
    uint64_t v1 = (void *)Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.info.getter();
    if (sub_100051E9C(v2))
    {
      uint64_t v3 = (_WORD *)sub_100051AA0();
      sub_100078C08(v3);
      sub_100051C8C((void *)&_mh_execute_header, v4, v5, "Push ignored due to filters");
      sub_100033704();
    }

    swift_task_dealloc();
    sub_10003F1AC();
    return v6();
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_10007C810;
    sub_100078E08(*(void *)(v0 + 24));
    return sub_10007C914();
  }
}

uint64_t sub_10007C810()
{
  sub_10003F0F4();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *os_log_type_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_10007C914()
{
  sub_10003F0F4();
  v1[13] = v2;
  v1[14] = v0;
  uint64_t v3 = sub_10002E768(&qword_1006994C0);
  sub_100051D98(v3);
  v1[15] = sub_10007ED4C();
  v1[16] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PushPayload();
  sub_100051D98(v4);
  v1[17] = sub_10003F13C();
  uint64_t v5 = type metadata accessor for UUID();
  v1[18] = v5;
  sub_100031774(v5);
  v1[19] = v6;
  v1[20] = sub_10007ED4C();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  sub_100051C80();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007CA14()
{
  uint64_t v1 = *(void *)(v0 + 104);
  switch(*(unsigned char *)v1)
  {
    case 1:
      uint64_t v16 = (void *)Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.info.getter();
      if (sub_100051E9C(v17))
      {
        uint64_t v18 = (_WORD *)sub_100051AA0();
        sub_100078C08(v18);
        sub_100051C8C((void *)&_mh_execute_header, v19, v20, "Clearing caches");
        sub_100033704();
      }
      uint64_t v22 = *(void *)(v0 + 104);
      uint64_t v21 = *(void *)(v0 + 112);

      if (*(void *)(v22 + 8)) {
        char v23 = *(void **)(v22 + 8);
      }
      else {
        char v23 = _swiftEmptyArrayStorage;
      }
      uint64_t v24 = *(void **)(v21 + 152);
      uint64_t v25 = v23[2];
      if (v25)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = v26 + 1;
          Int._bridgeToObjectiveC()();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v26 = v27;
        }
        while (v25 != v27);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      sub_10007E08C();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v70 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v24 gCEWuNTdkAWg8Jj5WithStMYeuN4F4F4tdlz:isa workflows:v70];

      goto LABEL_66;
    case 2:
      *(void *)(v0 + 208) = OBJC_IVAR____TtC3asd19PushDispatchManager_logger;
      uint64_t v28 = (void *)Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      if (sub_100051E9C(v29))
      {
        uint64_t v30 = (_WORD *)sub_100051AA0();
        sub_100078C08(v30);
        sub_100051C8C((void *)&_mh_execute_header, v31, v32, "Fetch config initiated");
        sub_100033704();
      }
      uint64_t v33 = *(void *)(v0 + 112);

      sub_10002EAE0((void *)(v33 + 160), *(void *)(v33 + 184));
      uint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v34;
      void *v34 = v0;
      v34[1] = sub_10007D4E4;
      sub_10003F29C();
      return sub_10009B900();
    case 3:
      uint64_t v37 = *(void *)(v1 + 80);
      *(void *)(v0 + 232) = v37;
      if (v37 && *(void *)(v37 + 16))
      {
        sub_10003F29C();
        return _swift_task_switch(v38, v39, v40);
      }
      uint64_t v58 = (void *)Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.fault.getter();
      if (!sub_100051E9C(v59)) {
        goto LABEL_65;
      }
      os_log_t v60 = (_WORD *)sub_100051AA0();
      sub_100078C08(v60);
      os_log_type_t v63 = "Missing workflowIds in push payload for fetchProfile";
      goto LABEL_64;
    case 4:
      uint64_t v42 = *(void *)(v1 + 88);
      if (!v42) {
        goto LABEL_62;
      }
      uint64_t v43 = *(void *)(v42 + 16);
      if (v43)
      {
        uint64_t v44 = *(void *)(v0 + 152);
        uint64_t v45 = (void (**)(char *, char *, uint64_t))(v44 + 32);
        uint64_t v46 = swift_bridgeObjectRetain() + 40;
        uint64_t v47 = (char *)_swiftEmptyArrayStorage;
        do
        {
          uint64_t v48 = *(void *)(v0 + 144);
          uint64_t v49 = *(void *)(v0 + 128);
          swift_bridgeObjectRetain();
          UUID.init(uuidString:)();
          swift_bridgeObjectRelease();
          if (sub_1000312BC(v49, 1, v48) == 1)
          {
            sub_10007E9CC(*(void *)(v0 + 128), &qword_1006994C0);
          }
          else
          {
            os_log_type_t v51 = *(char **)(v0 + 168);
            uint64_t v50 = *(char **)(v0 + 176);
            uint64_t v52 = *(void *)(v0 + 144);
            uint64_t v53 = *v45;
            (*v45)(v50, *(char **)(v0 + 128), v52);
            v53(v51, v50, v52);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v47 = (char *)sub_10003BFF0(0, *((void *)v47 + 2) + 1, 1, (uint64_t)v47);
            }
            unint64_t v55 = *((void *)v47 + 2);
            unint64_t v54 = *((void *)v47 + 3);
            if (v55 >= v54 >> 1) {
              uint64_t v47 = (char *)sub_10003BFF0(v54 > 1, v55 + 1, 1, (uint64_t)v47);
            }
            unint64_t v56 = *(char **)(v0 + 168);
            uint64_t v57 = *(void *)(v0 + 144);
            *((void *)v47 + 2) = v55 + 1;
            v53(&v47[((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(void *)(v44 + 72) * v55], v56, v57);
          }
          v46 += 16;
          --v43;
        }
        while (v43);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v47 = (char *)_swiftEmptyArrayStorage;
      }
      *(void *)(v0 + 256) = v47;
      uint64_t v71 = *((void *)v47 + 2);
      *(void *)(v0 + 264) = v71;
      if (!v71)
      {
        swift_bridgeObjectRelease();
LABEL_62:
        uint64_t v58 = (void *)Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.fault.getter();
        if (sub_100051E9C(v82))
        {
          id v83 = (_WORD *)sub_100051AA0();
          sub_100078C08(v83);
          os_log_type_t v63 = "Missing UIDs in push payload for fetch server bag";
LABEL_64:
          sub_100051C8C((void *)&_mh_execute_header, v61, v62, v63);
          sub_100033704();
        }
LABEL_65:

LABEL_66:
        sub_10007EBC0();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_10003F1AC();
        sub_10003F29C();
        __asm { BRAA            X1, X16 }
      }
      uint64_t v72 = (void *)Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.info.getter();
      if (sub_100051E9C(v73))
      {
        uint64_t v74 = (_WORD *)sub_100051AA0();
        sub_100078C08(v74);
        sub_100051C8C((void *)&_mh_execute_header, v75, v76, "Fetch server bag initiated");
        sub_100033704();
      }

      if (qword_100697928 != -1) {
        swift_once();
      }
      *(void *)(v0 + 272) = static RavioliManagerObjC.shared;
      uint64_t v77 = *(void *)(v0 + 144);
      uint64_t v78 = *(void *)(v0 + 152);
      uint64_t v79 = *(void (**)(void, unint64_t, uint64_t))(v78 + 16);
      v78 += 16;
      int v80 = *(_DWORD *)(v78 + 64);
      *(_DWORD *)(v0 + 320) = v80;
      *(void *)(v0 + 280) = *(void *)(v78 + 56);
      *(void *)(v0 + 288) = v79;
      v79(*(void *)(v0 + 120), *(void *)(v0 + 256) + ((v80 + 32) & ~(unint64_t)v80), v77);
      *(void *)(v0 + 296) = 1;
      sub_10007EC14();
      if (v81)
      {
        swift_bridgeObjectRelease();
        goto LABEL_66;
      }
      uint64_t v86 = sub_10007EC98();
      v87(v86);
      if (v72[3]) {
        unint64_t v88 = v72[3];
      }
      else {
        unint64_t v88 = 0x800000010056A650;
      }
      *(void *)(v0 + 304) = v88;
      swift_bridgeObjectRetain();
      uint64_t v89 = (void *)swift_task_alloc();
      *(void *)(v0 + 312) = v89;
      *uint64_t v89 = v0;
      v89[1] = sub_10007DB30;
      sub_10007ECD8();
LABEL_47:
      sub_10003F29C();
      return sub_100068B14(v65, v66, v67);
    default:
      uint64_t v2 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v2, v3))
      {
        uint64_t v4 = (uint8_t *)sub_100051AA0();
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, v3, "Ravioli Fetch Initiated", v4, 2u);
        sub_100033704();
      }
      uint64_t v5 = *(void *)(v0 + 104);

      if (!*(void *)(v5 + 24))
      {
        uint64_t v6 = (void *)Logger.logObject.getter();
        os_log_type_t v7 = static os_log_type_t.fault.getter();
        if (sub_100051A84(v7))
        {
          uint64_t v8 = (_WORD *)sub_100051AA0();
          sub_100051BE8(v8);
          sub_100051A64((void *)&_mh_execute_header, v9, v10, "Missing notificationId is push payload for fetch");
          sub_100033704();
        }
      }
      sub_10002EA7C(*(void *)(v0 + 112) + 112, v0 + 16);
      sub_10002EAE0((void *)(v0 + 16), *(void *)(v0 + 40));
      if (qword_100697930 != -1) {
        swift_once();
      }
      uint64_t v11 = *(void *)(v0 + 184);
      uint64_t v12 = *(void *)(v0 + 144);
      uint64_t v13 = *(void *)(v0 + 152);
      uint64_t v14 = sub_100031284(v12, (uint64_t)static RavioliConstants.ravioliUUID);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v14, v12);
      if (*(void *)(v5 + 24)) {
        unint64_t v15 = *(void *)(v5 + 24);
      }
      else {
        unint64_t v15 = 0x800000010056A650;
      }
      *(void *)(v0 + 192) = v15;
      swift_bridgeObjectRetain();
      os_log_type_t v64 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v64;
      *os_log_type_t v64 = v0;
      v64[1] = sub_10007D2F4;
      sub_100078E08(*(void *)(v0 + 184));
      goto LABEL_47;
  }
}

uint64_t sub_10007D2F4()
{
  sub_100048E64();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100079160();
  v3();
  sub_100048EF4();
  return _swift_task_switch(v4, v5, v6);
}

void sub_10007D44C()
{
  sub_100048E64();
  sub_10002EB9C(v0 + 16);
  sub_10007EBC0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  sub_100048F08();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10007D4E4()
{
  sub_100048E64();
  sub_1000336EC();
  uint64_t v3 = v2;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_10003F0B8();
  void *v6 = v5;
  *(void *)(v3 + 224) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10003F1AC();
    sub_100048F08();
    __asm { BRAA            X1, X16 }
  }
  sub_100048F08();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10007D634()
{
  uint64_t v14 = v0;
  sub_1000313D4(v0[13], v0[17]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v12 = v0[17];
    uint64_t v3 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315394;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[11] = sub_100032B48(v4, v5, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v3 + 12) = 2080;
    uint64_t v6 = v0[17];
    if (*(void *)(v12 + 24))
    {
      uint64_t v7 = *(void *)(v6 + 16);
      unint64_t v8 = *(void *)(v12 + 24);
    }
    else
    {
      unint64_t v8 = 0xE300000000000000;
      uint64_t v7 = 7104878;
    }
    swift_bridgeObjectRetain();
    v0[12] = sub_100032B48(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100031438(v6);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Config update failed with error (%s for notification %s", (uint8_t *)v3, 0x16u);
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
    swift_errorRelease();
  }
  else
  {
    uint64_t v9 = v0[17];
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
    sub_100031438(v9);
  }
  sub_10007EBC0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v10();
}

uint64_t sub_10007D8D8()
{
  sub_10003F0F4();
  uint64_t v1 = v0[29];
  uint64_t v2 = swift_task_alloc();
  v0[30] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[31] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10007D9B8;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v3);
}

uint64_t sub_10007D9B8()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10007DAA0, 0, 0);
}

void sub_10007DAA0()
{
  sub_100048E64();
  sub_10007EBC0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  sub_100048F08();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_10007DB30()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v2 = *(void *)(v1 + 112);
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10007DC2C, v2, 0);
}

uint64_t sub_10007DC2C()
{
  sub_100048E64();
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 264);
  (*(void (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 144));
  if (v1 == v2)
  {
    sub_10003349C(*(void *)(v0 + 120), 1, 1, *(void *)(v0 + 144));
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t result = (*(uint64_t (**)(void, unint64_t, void))(v0 + 288))(*(void *)(v0 + 120), *(void *)(v0 + 256)+ ((*(unsigned __int8 *)(v0 + 320) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 320))+ *(void *)(v0 + 280) * v3, *(void *)(v0 + 144));
  *(void *)(v0 + 296) = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    sub_10007EC14();
    if (v5)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      sub_10007EBC0();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      sub_10003F1AC();
      sub_100048F08();
      __asm { BRAA            X1, X16 }
    }
    uint64_t v8 = sub_10007EC98();
    v9(v8);
    if (*(void *)(v3 + 24)) {
      unint64_t v10 = *(void *)(v3 + 24);
    }
    else {
      unint64_t v10 = 0x800000010056A650;
    }
    *(void *)(v0 + 304) = v10;
    swift_bridgeObjectRetain();
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 312) = v11;
    void *v11 = v0;
    v11[1] = sub_10007DB30;
    sub_10007ECD8();
    sub_100048F08();
    return sub_100068B14(v12, v13, v14);
  }
  return result;
}

uint64_t sub_10007DE08()
{
  sub_10002EB9C(v0 + 112);

  sub_10002EB9C(v0 + 160);
  uint64_t v1 = v0 + OBJC_IVAR____TtC3asd19PushDispatchManager_logger;
  type metadata accessor for Logger();
  sub_10005EDB8();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  swift_release();
  sub_10002EB9C(v0 + OBJC_IVAR____TtC3asd19PushDispatchManager_analyticsManager);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10007DEA8()
{
  sub_10007DE08();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10007DED4()
{
  return type metadata accessor for PushDispatchManager();
}

uint64_t type metadata accessor for PushDispatchManager()
{
  uint64_t result = qword_100699638;
  if (!qword_100699638) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10007DF24()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10007DFE8()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  unint64_t v1 = (void *)sub_100078948(v0);
  *unint64_t v1 = v2;
  v1[1] = sub_10003D5FC;
  return sub_1000C5714();
}

unint64_t sub_10007E08C()
{
  unint64_t result = qword_100697EF8;
  if (!qword_100697EF8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100697EF8);
  }
  return result;
}

void sub_10007E0CC(float a1, float a2)
{
  if (a1 == a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  sub_10007EDB4();
  if (v5)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v6 = v4;
  swift_stdlib_random();
  if (sub_10007ED34((float)0) == a2) {
    sub_10007E0CC(v6, a1, a2);
  }
}

uint64_t sub_10007E15C(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  unint64_t result = swift_stdlib_random();
  if (v5 * ((double)0 * 1.11022302e-16) + a2 == a3) {
    return sub_10007E15C(v6, a2, a3);
  }
  return result;
}

uint64_t sub_10007E208(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v22 = a1 + 32;
  uint64_t v4 = a2 + 56;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (!*(void *)(a2 + 16))
  {
LABEL_20:
    if (++v5 == v2)
    {
      uint64_t v20 = 1;
      goto LABEL_24;
    }
  }
  uint64_t v6 = (uint64_t *)(v22 + 16 * v5);
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = (void *)(v12 + 16 * v11);
  BOOL v14 = *v13 == v8 && v13[1] == v7;
  if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v10;
    for (unint64_t i = v11 + 1; ; unint64_t i = v17 + 1)
    {
      uint64_t v17 = i & v15;
      if (((*(void *)(v4 + (((i & v15) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v15)) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v12 + 16 * v17);
      BOOL v19 = *v18 == v8 && v18[1] == v7;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_23;
      }
    }
    goto LABEL_19;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v20 = 0;
LABEL_24:
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_10007E394()
{
  type metadata accessor for PushPayload();
  sub_10007EBE0();
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v7 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v1 + v5 + *(int *)(v0 + 52);
  uint64_t v9 = type metadata accessor for Date();
  if (!sub_10007EDC8(v9))
  {
    sub_10005EDB8();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v2);
  }
  sub_10007EDE8();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v1, v5 + v7, v4 | 7);
}

uint64_t sub_10007E4A0()
{
  sub_100048E64();
  uint64_t v0 = type metadata accessor for PushPayload();
  sub_10007EC00(v0);
  uint64_t v1 = swift_task_alloc();
  uint64_t v2 = (void *)sub_100078948(v1);
  *uint64_t v2 = v3;
  v2[1] = sub_10003F060;
  sub_100051F1C();
  sub_100048EF4();
  return sub_10007B878(v4, v5, v6, v7, v8);
}

void sub_10007E560()
{
  sub_10007EDB4();
  if (v0)
  {
    __break(1u);
  }
  else
  {
    unsigned int v1 = sub_10007E644(16777217);
    sub_10007ED34((float)v1);
  }
}

void sub_10007E5C4(double a1, double a2)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000) != 0) {
    sub_10007E6D4(0x20000000000001uLL);
  }
  else {
    __break(1u);
  }
}

uint64_t sub_10007E644(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = result;
    swift_stdlib_random();
    unint64_t result = 0;
    if (-v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10007E6D4(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    unint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007E760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002E768(&qword_100698970);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007E7C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007E7F4()
{
  type metadata accessor for PushPayload();
  sub_10007EBE0();
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 48) & ~v4;
  uint64_t v7 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v1 + v5 + *(int *)(v0 + 52);
  uint64_t v9 = type metadata accessor for Date();
  if (!sub_10007EDC8(v9))
  {
    sub_10005EDB8();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v2);
  }
  sub_10007EDE8();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v1, v5 + v7, v4 | 7);
}

uint64_t sub_10007E900()
{
  sub_100048E64();
  uint64_t v1 = type metadata accessor for PushPayload();
  sub_10007EC00(v1);
  double v3 = *(double *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = swift_task_alloc();
  uint64_t v7 = (void *)sub_100078948(v6);
  void *v7 = v8;
  v7[1] = sub_10003D5FC;
  uint64_t v9 = sub_100051F1C();
  return sub_10007A8D8(v3, v9, v10, v11, v4, v5);
}

uint64_t sub_10007E9CC(uint64_t a1, uint64_t *a2)
{
  sub_10002E768(a2);
  sub_10005EDB8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t sub_10007EA24()
{
  unint64_t result = qword_100698788;
  if (!qword_100698788)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100698788);
  }
  return result;
}

uint64_t sub_10007EA74()
{
  _print_unlocked<A, B>(_:_:)();
  v0._unint64_t countAndFlagsBits = 3943982;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

unint64_t sub_10007EB0C()
{
  unint64_t result = qword_1006997C8;
  if (!qword_1006997C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1006997C8);
  }
  return result;
}

uint64_t sub_10007EB58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002E768(&qword_100697EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007EBC0()
{
  return swift_task_dealloc();
}

uint64_t sub_10007EC00(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_10007EC14()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 120);
  sub_10003349C(v2, 0, 1, v1);
  return sub_1000312BC(v2, 1, v1);
}

uint64_t sub_10007EC54()
{
  *(void *)(v1 + 120) = *(void *)(v2 + 8);
  *(void *)(v1 + 128) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  return v0;
}

uint64_t sub_10007EC7C()
{
  return swift_arrayDestroy();
}

uint64_t sub_10007EC98()
{
  return *(void *)(v0 + 160);
}

uint64_t sub_10007ECB8()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_10007ECD8()
{
  return *(void *)(v0 + 160);
}

BOOL sub_10007ECF4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_10007ED10()
{
  uint64_t v2 = *(void **)(v0 + 16);
  return sub_100079800(0x73656E755469, 0xE600000000000000, v2);
}

float sub_10007ED34(float a1)
{
  return (float)(v2 * (float)(a1 * 0.000000059605)) + v1;
}

uint64_t sub_10007ED4C()
{
  return swift_task_alloc();
}

uint64_t sub_10007ED68()
{
  sub_1000312BC(v2, 1, v0);
  return *(void *)(v1 + 56);
}

void sub_10007ED94(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_10007EDC8(uint64_t a1)
{
  return sub_1000312BC(v1, 1, a1);
}

uint64_t sub_10007EDE8()
{
  return *(void *)(v1 + *(int *)(v0 + 56));
}

void sub_10007EE10(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void *sub_10007EE30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(a2 + 136);
    uint64_t v4 = swift_bridgeObjectRetain() + 72;
    os_log_type_t v5 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v6 = (uint64_t *)(v4 - 8);
      if (v3)
      {
        uint64_t v6 = (uint64_t *)(v4 - 24);
        uint64_t v7 = (uint64_t *)(v4 - 16);
      }
      else
      {
        uint64_t v7 = (uint64_t *)v4;
      }
      uint64_t v8 = *v7;
      if (*v7)
      {
        uint64_t v9 = *v6;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003BEAC();
          os_log_type_t v5 = v12;
        }
        unint64_t v10 = v5[2];
        if (v10 >= v5[3] >> 1)
        {
          sub_10003BEAC();
          os_log_type_t v5 = v13;
        }
        _OWORD v5[2] = v10 + 1;
        uint64_t v11 = &v5[2 * v10];
        uint64_t v11[4] = v9;
        uint64_t v11[5] = v8;
      }
      v4 += 48;
      --v2;
    }
    while (v2);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return v5;
}

void *sub_10007EF74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    char v4 = *(unsigned char *)(a2 + 136);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = _swiftEmptyArrayStorage;
    do
    {
      if (v4)
      {
        unint64_t v7 = 0x800000010056A7A0;
        switch(*(unsigned char *)(a1 + v5 + 32))
        {
          case 1:
            uint64_t v8 = "Tk9WMTRAaWNaUS1ScGRYag==";
            goto LABEL_14;
          case 2:
            uint64_t v8 = "Tk9WMDZAZVJFVi1XWG5NTA==";
            goto LABEL_14;
          case 3:
            uint64_t v8 = "Tk9WMTRAeGtQQi1nbFNaSA==";
            goto LABEL_14;
          case 4:
            uint64_t v8 = "updateObservationToken";
            goto LABEL_14;
          default:
            break;
        }
      }
      else
      {
        unint64_t v7 = 0x800000010056A840;
        switch(*(unsigned char *)(a1 + v5 + 32))
        {
          case 1:
            uint64_t v8 = "TUFSMDZfTkJjWS1TRndDcw==";
            goto LABEL_14;
          case 2:
            uint64_t v8 = "TUFSMDZfbGV2Yy14Vm5FUg==";
            goto LABEL_14;
          case 3:
            uint64_t v8 = "TUFSMDYtVkxSby10YmRwRA==";
            goto LABEL_14;
          case 4:
            uint64_t v8 = "Tk9WMDZAVEhIUy1rU2hCaA==";
LABEL_14:
            unint64_t v7 = (unint64_t)v8 | 0x8000000000000000;
            break;
          default:
            break;
        }
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10003BEAC();
        uint64_t v6 = v11;
      }
      unint64_t v9 = v6[2];
      if (v9 >= v6[3] >> 1)
      {
        sub_10003BEAC();
        uint64_t v6 = v12;
      }
      ++v5;
      _OWORD v6[2] = v9 + 1;
      unint64_t v10 = &v6[2 * v9];
      void v10[4] = 0xD000000000000018;
      v10[5] = v7;
    }
    while (v2 != v5);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return v6;
}

void *sub_10007F1DC(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  unint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    BOOL v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    objc_allocWithZone((Class)PKPublicChannel);
    swift_bridgeObjectRetain();
    unint64_t result = sub_100080AB0(v15, v16);
    if (result)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t result = (void *)specialized Array._endMutation()();
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10007F3CC(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10008128C(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

void *sub_10007F480(unint64_t a1, uint64_t a2)
{
  if (!(a1 >> 62))
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
LABEL_17:
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3) {
    goto LABEL_18;
  }
LABEL_3:
  unint64_t v4 = 0;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v4 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      id v5 = *(id *)(a1 + 8 * v4 + 32);
    }
    Swift::Int v6 = v5;
    unint64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_16;
    }
    unint64_t result = (void *)sub_100082F68(v5);
    if (!v9) {
      break;
    }
    sub_100080720((uint64_t)result, v9, a2);
    char v11 = v10;
    swift_bridgeObjectRelease();
    if (v11)
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v4;
    if (v7 == v3) {
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10007F5F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_1006997D0);
  sub_100031284(v0, (uint64_t)qword_1006997D0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10007F67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_10007F69C, a4, 0);
}

uint64_t sub_10007F69C()
{
  sub_10007F6F8();
  sub_10003F1AC();
  return v0();
}

uint64_t sub_10007F6F8()
{
  id v1 = [self defaultCenter];
  if (qword_100697950 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1006AD288;
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  void v7[4] = sub_100083170;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  long long v7[2] = sub_1000AC1D4;
  void v7[3] = &unk_100661668;
  uint64_t v4 = _Block_copy(v7);
  swift_release();
  id v5 = [v1 addObserverForName:v2 object:0 queue:0 usingBlock:v4];
  _Block_release(v4);

  *(void *)(v0 + 200) = v5;
  return swift_unknownObjectRelease();
}

uint64_t sub_10007F854()
{
  uint64_t v0 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = type metadata accessor for TaskPriority();
    sub_10003349C((uint64_t)v2, 1, 1, v5);
    Swift::Int v6 = (void *)swift_allocObject();
    _OWORD v6[2] = 0;
    v6[3] = 0;
    void v6[4] = v4;
    sub_10004964C((uint64_t)v2, (uint64_t)&unk_100699940, (uint64_t)v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_10007F948()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000834B8;
  return sub_10007F9D8();
}

uint64_t sub_10007F9D8()
{
  v1[6] = v0;
  v1[7] = type metadata accessor for ASAnalyticsEvent();
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_10007FA6C, v0, 0);
}

uint64_t sub_10007FA6C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  unint64_t v2 = sub_100082CE4();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  uint64_t v4 = sub_10002E768(&qword_100699910);
  *uint64_t v3 = v0;
  v3[1] = sub_10007FB64;
  uint64_t v5 = *(void *)(v0 + 48);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, v1, v2, 0xD000000000000010, 0x800000010056A860, sub_100082D30, v5, v4);
}

uint64_t sub_10007FB64()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0) {
    uint64_t v4 = sub_10008016C;
  }
  else {
    uint64_t v4 = sub_10007FC90;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10007FC90()
{
  uint64_t v39 = v0;
  unint64_t v1 = v0[2];
  if (v1 >> 62)
  {
    sub_10008356C();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v5 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_17;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v4 = 0;
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v1 + 8 * v4 + 32);
    }
    uint64_t v7 = v6;
    uint64_t v8 = sub_100082F68(v6);
    uint64_t v10 = v9;

    if (v10)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10003BEAC();
        uint64_t v5 = v13;
      }
      unint64_t v11 = v5[2];
      if (v11 >= v5[3] >> 1)
      {
        sub_10003BEAC();
        uint64_t v5 = v14;
      }
      _OWORD v5[2] = v11 + 1;
      unint64_t v12 = &v5[2 * v11];
      v12[4] = v8;
      void v12[5] = v10;
    }
    ++v4;
  }
  while (v2 != v4);
LABEL_18:
  unint64_t v15 = v0[10];
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_10007F3CC((uint64_t)v5);
  uint64_t v17 = sub_100080830();
  uint64_t v18 = sub_10007F3CC((uint64_t)v17);
  swift_bridgeObjectRetain();
  BOOL v19 = sub_1000806BC(v16, v18);
  unint64_t v20 = (unint64_t)sub_10007F1DC((uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v21 = (unint64_t)sub_10007F480(v1, v18);
  if (qword_100697938 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100031284(v22, (uint64_t)qword_1006997D0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  uint64_t v25 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    unint64_t v37 = v21;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    v38[0] = v36;
    *(_DWORD *)uint64_t v26 = 136315394;
    os_log_type_t type = v25;
    swift_bridgeObjectRetain();
    uint64_t v27 = Set.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    v0[4] = sub_100032B48(v27, v29, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v30 = Set.description.getter();
    unint64_t v15 = v31;
    swift_bridgeObjectRelease();
    v0[5] = sub_100032B48(v30, v15, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v23, type, "Initial channels: %s, required channels: %s", (uint8_t *)v26, 0x16u);
    uint64_t v25 = v36;
    swift_arrayDestroy();
    sub_100033704();
    unint64_t v21 = v37;
    sub_100033704();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  if (!(v20 >> 62))
  {
    uint64_t v32 = *(void **)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v32) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v32)
  {
LABEL_25:
    sub_10008354C();
    sub_100082E64(v20, v15, v25, v32, (SEL *)&selRef_subscribeToChannels_forTopic_);
  }
LABEL_26:
  swift_bridgeObjectRelease();
  if (v21 >> 62)
  {
    sub_10008356C();
    uint64_t v33 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v33) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  uint64_t v33 = *(void **)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v33)
  {
LABEL_28:
    sub_10008354C();
    sub_100082E64(v21, v15, v25, v33, (SEL *)&selRef_unsubscribeFromChannels_forTopic_);
  }
LABEL_29:
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_10003F1AC();
  return v34();
}

uint64_t sub_10008016C()
{
  if (qword_100697938 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100031284(v1, (uint64_t)qword_1006997D0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error getting channels: %@", v4, 0xCu);
    sub_10002E768(&qword_100699918);
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[8];
  uint64_t v8 = v0[6];

  sub_10002EAE0((void *)(v8 + 152), *(void *)(v8 + 176));
  uint64_t v9 = 1685025392;
  if (*(unsigned char *)(v8 + 136)) {
    uint64_t v9 = 0x786F62646E6173;
  }
  unint64_t v10 = 0xE400000000000000;
  if (*(unsigned char *)(v8 + 136)) {
    unint64_t v10 = 0xE700000000000000;
  }
  *(unsigned char *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 11;
  *(void *)(v7 + 16) = v9;
  *(void *)(v7 + 24) = v10;
  swift_storeEnumTagMultiPayload();
  sub_1000AE9B8(v7);
  swift_errorRelease();
  sub_10005171C(v7);
  swift_task_dealloc();
  sub_10003F1AC();
  return v11();
}

void sub_1000803D8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10002E768(&qword_100699930);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)a2[14];
  uint64_t v8 = a2[15];
  uint64_t v9 = a2[16];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1000830A0;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100080628;
  aBlock[3] = &unk_100661618;
  unint64_t v12 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  sub_100082F08(v8, v9, (uint64_t)v12, v7);
  swift_bridgeObjectRelease();
  _Block_release(v12);
}

uint64_t sub_1000805A4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    sub_10002E768(&qword_100699930);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10002E768(&qword_100699930);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_100080628(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_100082FCC();
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

unint64_t *sub_1000806BC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) <= *(void *)(a2 + 16) >> 3)
  {
    sub_100081D14(a1);
    return (unint64_t *)a2;
  }
  else
  {
    return sub_100081EC0(a1, a2);
  }
}

void sub_100080720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_100083508();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_1000834F4();
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != v4 || v11[1] != v3) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        sub_1000834F4();
        if (v15)
        {
          do
          {
            uint64_t v16 = (void *)(v10 + 16 * v14);
            if (*v16 == v4 && v16[1] == v3) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            sub_1000834F4();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

void *sub_100080830()
{
  uint64_t v1 = v0;
  sub_10002E768(&qword_100698038);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10058CEC0;
  *(unsigned char *)(inited + 32) = 0;
  if (sub_100059AFC()) {
    char v3 = 3;
  }
  else {
    char v3 = 4;
  }
  sub_10003C038();
  uint64_t v5 = v4;
  *(void *)(v4 + 16) = 2;
  *(unsigned char *)(v4 + 33) = v3;
  if (os_variant_allows_internal_security_policies())
  {
    unint64_t v6 = *(void *)(v5 + 16);
    if (v6 >= *(void *)(v5 + 24) >> 1)
    {
      sub_100083514();
      uint64_t v5 = v15;
    }
    *(void *)(v5 + 16) = v6 + 1;
    *(unsigned char *)(v5 + v6 + 32) = 2;
  }
  id v7 = [self standardUserDefaults];
  char v8 = sub_10006709C(v7);

  if (v8)
  {
    unint64_t v9 = *(void *)(v5 + 16);
    if (v9 >= *(void *)(v5 + 24) >> 1)
    {
      sub_100083514();
      uint64_t v5 = v16;
    }
    *(void *)(v5 + 16) = v9 + 1;
    *(unsigned char *)(v5 + v9 + 32) = 1;
  }
  uint64_t v10 = sub_100059780();
  swift_retain();
  uint64_t v11 = sub_10007EE30((uint64_t)v10, v1);
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = sub_10007EF74(v12, v1);
  swift_bridgeObjectRelease_n();
  sub_100082C08((uint64_t)v11);
  return v13;
}

uint64_t sub_1000809F8()
{
  if (*(void *)(v0 + 200)) {
    [*(id *)(v0 + 192) removeObserver:];
  }

  swift_bridgeObjectRelease();
  swift_release();
  sub_10002EB9C(v0 + 152);

  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100080A60()
{
  sub_1000809F8();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PushCloudChannelsManager()
{
  return self;
}

id sub_100080AB0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithChannelID:v3];

  return v4;
}

void *sub_100080B14()
{
  sub_1000834D4();
  if (v0 < 0)
  {
    sub_10003F064();
    sub_10003F340();
LABEL_11:
    uint64_t result = (void *)sub_1000834BC();
    __break(1u);
    return result;
  }
  sub_100083538();
  if (!v6 & v5) {
    BOOL v7 = v4 > (unint64_t)v3;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_10003F064();
    sub_10003F330();
    goto LABEL_11;
  }

  return memcpy(v3, v1, v2);
}

uint64_t sub_100080BAC()
{
  sub_1000834D4();
  if (v3 < 0)
  {
    sub_10003F064();
    sub_10003F340();
LABEL_11:
    uint64_t result = sub_1000834BC();
    __break(1u);
    return result;
  }
  if (v2 + 104 * v1 > v0 && v0 + 104 * v1 > v2)
  {
    sub_10003F064();
    sub_10003F330();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_100080C60()
{
  sub_1000834D4();
  if (v3 < 0)
  {
    sub_10003F064();
    sub_10003F340();
LABEL_11:
    uint64_t result = sub_1000834BC();
    __break(1u);
    return result;
  }
  if (v2 + 16 * v1 > v0 && v0 + 16 * v1 > v2)
  {
    sub_10003F064();
    sub_10003F330();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_100080D0C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100081034(a1, a2, a3);
}

uint64_t sub_100080D24(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10003F064();
    sub_10003F340();
LABEL_11:
    uint64_t result = sub_1000834BC();
    __break(1u);
    return result;
  }
  sub_100083508();
  if (v4 + 24 * v3 > v2 && v2 + 24 * v3 > v4)
  {
    sub_10003F064();
    sub_10003F330();
    goto LABEL_11;
  }
  sub_10002E768(&qword_100699948);
  sub_1000834E0();

  return swift_arrayInitWithCopy();
}

uint64_t sub_100080DE8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_10003F064();
    sub_10003F340();
LABEL_11:
    uint64_t result = sub_1000834BC();
    __break(1u);
    return result;
  }
  sub_100083508();
  if (v4 + 8 * v3 > v2 && v2 + 8 * v3 > v4)
  {
    sub_10003F064();
    sub_10003F330();
    goto LABEL_11;
  }
  sub_10002E768(&qword_1006980E0);
  sub_1000834E0();

  return swift_arrayInitWithCopy();
}

uint64_t sub_100080EA8()
{
  sub_1000834D4();
  if (v3 < 0)
  {
    sub_10003F064();
    sub_10003F340();
LABEL_11:
    uint64_t result = sub_1000834BC();
    __break(1u);
    return result;
  }
  if (v2 + 48 * v1 > v0 && v0 + 48 * v1 > v2)
  {
    sub_10003F064();
    sub_10003F330();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_100080F58()
{
  sub_1000834D4();
  if (v3 < 0)
  {
    sub_10003F064();
    sub_10003F340();
LABEL_11:
    uint64_t result = sub_1000834BC();
    __break(1u);
    return result;
  }
  if (v2 + (v1 << 6) > v0 && v0 + (v1 << 6) > v2)
  {
    sub_10003F064();
    sub_10003F330();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_100081004(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100081034(a1, a2, a3);
}

uint64_t sub_10008101C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100081034(a1, a2, a3);
}

uint64_t sub_100081034(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_10003F064();
    sub_10003F340();
LABEL_11:
    uint64_t result = sub_1000834BC();
    __break(1u);
    return result;
  }
  sub_100083508();
  uint64_t v7 = *(void *)(*(void *)(v6(0) - 8) + 72) * v3;
  unint64_t v8 = a3 + v7;
  unint64_t v9 = v4 + v7;
  if (v8 > v4 && v9 > a3)
  {
    sub_10003F064();
    sub_10003F330();
    goto LABEL_11;
  }
  sub_1000834E0();

  return swift_arrayInitWithCopy();
}

uint64_t sub_100081110()
{
  sub_1000834D4();
  if (v3 < 0)
  {
    sub_10003F064();
    sub_10003F340();
LABEL_11:
    uint64_t result = sub_1000834BC();
    __break(1u);
    return result;
  }
  if (v2 + 32 * v1 > v0 && v0 + 32 * v1 > v2)
  {
    sub_10003F064();
    sub_10003F330();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_1000811C0()
{
  sub_1000834D4();
  if (v3 < 0)
  {
    sub_10003F064();
    sub_10003F340();
LABEL_11:
    uint64_t result = sub_1000834BC();
    __break(1u);
    return result;
  }
  if (v2 + 24 * v1 > v0 && v0 + 24 * v1 > v2)
  {
    sub_10003F064();
    sub_10003F330();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_100081270(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t sub_10008128C(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      char v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100081718(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10008143C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002E768(&qword_100699928);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      unint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *unint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_100081270(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                void *v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_100081718(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10008143C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_1000818B4();
      goto LABEL_22;
    }
    sub_100081A68();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_1000818B4()
{
  uint64_t v1 = v0;
  sub_10002E768(&qword_100699928);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100081A68()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002E768(&qword_100699928);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *unint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100081D14(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    int64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_100082338(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_21;
  }
LABEL_24:

  return swift_release();
}

unint64_t *sub_100081EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v36) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v37 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v36) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v36) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v36) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v36)
              {
LABEL_48:
                sub_1000581E4();
                return (unint64_t *)v2;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    break;
                  }
                  if (v14 >= v36) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v37 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }
LABEL_50:
                __break(1u);
              }
              int64_t v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      unint64_t v7 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      int64_t v9 = v14;
    }
    uint64_t v22 = *(void *)(v2 + 48);
    unint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_37;
        }
        BOOL v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_1000824C8((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_1000581E4();
    }
    else
    {
      uint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_1000824C8((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_1000581E4();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_100082338(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000818B4();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_100082A4C(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t *sub_1000824C8(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v39 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_46;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_46;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_14;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_46;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v36 = v9 + 6;
                while (v36 < v14)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_14;
                  }
                }
                int64_t v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return (unint64_t *)sub_1000827BC(v39, a2, v38, a3);
              }
              goto LABEL_14;
            }
          }
          int64_t v13 = v18;
        }
LABEL_14:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_15:
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        unint64_t v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          uint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_22;
          }
        }
LABEL_32:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_22:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_48:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_1000827BC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10002E768(&qword_100699928);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    *unint64_t v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_100082A4C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            unint64_t v15 = (_OWORD *)(v14 + 16 * v2);
            uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              _OWORD *v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_100082C08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    sub_10003BEAC();
    uint64_t v3 = v6;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_100080C60();
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

unint64_t sub_100082CE4()
{
  unint64_t result = qword_100699908;
  if (!qword_100699908)
  {
    type metadata accessor for PushCloudChannelsManager();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699908);
  }
  return result;
}

void sub_100082D30(uint64_t a1)
{
  sub_1000803D8(a1, v1);
}

uint64_t sub_100082D38(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  unint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v7 = v4 + v2;
    }
    else {
      uint64_t v7 = v4;
    }
    unint64_t result = sub_10003C0F4(result, v7, 1, v3);
    uint64_t v3 = result;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = type metadata accessor for LocalFeatureToggle();
  uint64_t v12 = *(void *)(v10 - 8);
  unint64_t result = v10 - 8;
  uint64_t v11 = v12;
  if (v9 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t result = sub_100081034(v6 + v13, v2, v3 + v13 + *(void *)(v11 + 72) * v8);
  if (!v2)
  {
LABEL_14:
    unint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v14 = *(void *)(v3 + 16);
  BOOL v15 = __OFADD__(v14, v2);
  uint64_t v16 = v14 + v2;
  if (!v15)
  {
    *(void *)(v3 + 16) = v16;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

void sub_100082E64(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  sub_100082FCC();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = String._bridgeToObjectiveC()();
  [a4 *a5 isa:v8];
}

void sub_100082F08(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = String._bridgeToObjectiveC()();
  [a4 getRegisteredChannelsForTopic:v6 withCompletion:a3];
}

uint64_t sub_100082F68(void *a1)
{
  id v1 = [a1 channelID];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_100082FCC()
{
  unint64_t result = qword_100699920;
  if (!qword_100699920)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100699920);
  }
  return result;
}

uint64_t sub_10008300C()
{
  uint64_t v1 = sub_10002E768(&qword_100699930);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000830A0()
{
  sub_100083508();
  sub_10002E768(&qword_100699930);

  return sub_1000805A4(v1, v0);
}

uint64_t sub_100083120(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100083130()
{
  return swift_release();
}

uint64_t sub_100083138()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100083170()
{
  return sub_10007F854();
}

uint64_t sub_100083178()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000831B8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10008326C;
  return sub_10007F948();
}

uint64_t sub_10008326C()
{
  swift_task_dealloc();
  sub_10003F1AC();
  return v0();
}

unsigned char *storeEnumTagSinglePayload for Channel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100083428);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Channel()
{
  return &type metadata for Channel;
}

unint64_t sub_100083464()
{
  unint64_t result = qword_100699950;
  if (!qword_100699950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699950);
  }
  return result;
}

uint64_t sub_1000834BC()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_1000834E0()
{
  return v0;
}

void sub_100083514()
{
  sub_10003C038();
}

uint64_t sub_10008354C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10008356C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10008358C()
{
  if (*(void *)(v0 + 80))
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v1._unint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._unint64_t countAndFlagsBits = 0x6F6C666B726F7720;
    v2._object = (void *)0xEF203A7364695F77;
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(v0 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 16);
    String.append(_:)(*(Swift::String *)(&v3 - 1));
    v5._unint64_t countAndFlagsBits = 540697705;
    v5._object = (void *)0xE400000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = sub_1000836C0(*(unsigned char *)v0);
  swift_bridgeObjectRetain();
  v6._unint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000836C0(char a1)
{
  uint64_t result = 0x6464416863746566;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6361437261656C63;
      break;
    case 2:
      uint64_t result = 0x6E6F436863746566;
      break;
    case 3:
      uint64_t result = 0x6F72506863746566;
      break;
    case 4:
      uint64_t result = 0x7265536863746566;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000837A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v5 = a2 + 8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t v6 = type metadata accessor for PushPayload();
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  uint64_t v7 = a2 + *(int *)(v6 + 52);
  uint64_t v8 = type metadata accessor for Date();
  sub_10003349C(v7, 1, 1, v8);
  uint64_t v9 = (uint64_t *)(a2 + *(int *)(v6 + 56));
  *(_OWORD *)uint64_t v9 = xmmword_10058E0C0;
  if (!*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    sub_1000840B4();
    sub_100088208();
    char v22 = 3;
LABEL_31:
    *unint64_t v21 = v22;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100048A6C(v7, &qword_100697EE0);
    return sub_100084100(*v9);
  }
  strcpy((char *)&v197, "command");
  *((void *)&v197 + 1) = 0xE700000000000000;
  uint64_t v10 = sub_1000880E4();
  sub_100088028(v10, v11, v12, v13, v14, v15, v16, v17, v126, v136, v145, v155, v165, v174, v185, (char)v192, v193, v194, v195,
    v196,
    v197);
  sub_100058074((uint64_t)&v192);
  if (v198)
  {
    int v18 = sub_100088220();
    uint64_t v19 = v175;
    if (!v18) {
      uint64_t v19 = 0;
    }
    uint64_t v199 = v19;
    if (v18) {
      uint64_t v20 = (void *)v186;
    }
    else {
      uint64_t v20 = 0;
    }
  }
  else
  {
    sub_100048A6C((uint64_t)&v197, &qword_100697EE8);
    uint64_t v199 = 0;
    uint64_t v20 = 0;
  }
  *(void *)&long long v197 = 0x6163696669746F6ELL;
  *((void *)&v197 + 1) = 0xEF64695F6E6F6974;
  uint64_t v23 = sub_1000880E4();
  sub_100088028(v23, v24, v25, v26, v27, v28, v29, v30, v127, v137, v146, v5, v166, v175, v186, (char)v192, v193, v194, v195,
    v196,
    v197);
  sub_100058074((uint64_t)&v192);
  if (v198)
  {
    int v31 = sub_100088220();
    uint64_t v32 = v176;
    if (!v31) {
      uint64_t v32 = 0;
    }
    uint64_t v147 = v32;
    if (v31) {
      uint64_t v33 = v187;
    }
    else {
      uint64_t v33 = 0;
    }
  }
  else
  {
    sub_100048A6C((uint64_t)&v197, &qword_100697EE8);
    uint64_t v147 = 0;
    uint64_t v33 = 0;
  }
  *(void *)&long long v197 = 0xD000000000000014;
  *((void *)&v197 + 1) = 0x800000010056A8C0;
  uint64_t v34 = sub_1000880E4();
  sub_100088028(v34, v35, v36, v37, v38, v39, v40, v41, v128, v138, v147, v156, v2, v176, v187, (char)v192, v193, v194, v195,
    v196,
    v197);
  sub_100058074((uint64_t)&v192);
  if (v198)
  {
    int v42 = sub_100088008();
    if (v42) {
      uint64_t v43 = v177;
    }
    else {
      uint64_t v43 = 0;
    }
    int v44 = v42 ^ 1;
  }
  else
  {
    sub_100048A6C((uint64_t)&v197, &qword_100697EE8);
    uint64_t v43 = 0;
    int v44 = 1;
  }
  uint64_t v45 = AnyHashable.init<A>(_:)();
  sub_100088028(v45, v46, v47, v48, v49, v50, v51, v52, v129, v139, v148, v157, v167, 0x6E6F6973726576, 0xE700000000000000, (char)v192, v193, v194, v195,
    v196,
    v197);
  sub_100058074((uint64_t)&v192);
  if (!v198)
  {
    sub_100048A6C((uint64_t)&v197, &qword_100697EE8);
    if (v20) {
      goto LABEL_29;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000840B4();
    sub_100088208();
    char v22 = 2;
    goto LABEL_31;
  }
  char v53 = sub_100088008();
  if (!v20) {
    goto LABEL_30;
  }
  if ((v53 & 1) == 0)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v200._unint64_t countAndFlagsBits = v199;
  v200._object = v20;
  char v54 = sub_100084810(v200);
  if (v54 == 5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000840B4();
    sub_100088208();
    char v22 = 0;
    goto LABEL_31;
  }
  if (v178 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000840B4();
    sub_100088208();
    char v22 = 1;
    goto LABEL_31;
  }
  *(unsigned char *)a2 = v54;
  swift_bridgeObjectRelease();
  *(void *)(a2 + 16) = v149;
  *(void *)(a2 + 24) = v33;
  if (v43 < 0) {
    int v56 = 1;
  }
  else {
    int v56 = v44;
  }
  if (v56) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = v43;
  }
  *(void *)(a2 + 32) = v57;
  *(unsigned char *)(a2 + 40) = v56;
  uint64_t v58 = AnyHashable.init<A>(_:)();
  sub_100088028(v58, v59, v60, v61, v62, v63, v64, v65, v130, (uint64_t)v9, v149, v158, v168, 0xD000000000000013, 0x800000010056A8E0, (char)v192, v193, v194, v195,
    v196,
    v197);
  sub_100058074((uint64_t)&v192);
  uint64_t v66 = (uint64_t *)v140;
  if (v198)
  {
    uint64_t v67 = (void *)v159;
    if (sub_100088008())
    {
      uint64_t v68 = v179;
      if (v179 > 0)
      {
        char v69 = 0;
        goto LABEL_46;
      }
    }
  }
  else
  {
    sub_100048A6C((uint64_t)&v197, &qword_100697EE8);
    uint64_t v67 = (void *)v159;
  }
  uint64_t v68 = 0;
  char v69 = 1;
LABEL_46:
  *(void *)(a2 + 64) = v68;
  *(unsigned char *)(a2 + 72) = v69;
  *(void *)&long long v197 = 0x7364697575;
  *((void *)&v197 + 1) = 0xE500000000000000;
  uint64_t v70 = sub_1000880E4();
  sub_100088028(v70, v71, v72, v73, v74, v75, v76, v77, v131, v140, v150, v159, v169, v179, v188, (char)v192, v193, v194, v195,
    v196,
    v197);
  sub_100058074((uint64_t)&v192);
  if (v198)
  {
    sub_10002E768(&qword_1006982F8);
    if (sub_100088008()) {
      uint64_t v78 = v180;
    }
    else {
      uint64_t v78 = 0;
    }
  }
  else
  {
    sub_100048A6C((uint64_t)&v197, &qword_100697EE8);
    uint64_t v78 = 0;
  }
  swift_bridgeObjectRelease();
  *(void *)(a2 + 88) = v78;
  *(void *)&long long v197 = 0xD000000000000016;
  *((void *)&v197 + 1) = 0x800000010056A900;
  uint64_t v79 = sub_1000880E4();
  sub_100088028(v79, v80, v81, v82, v83, v84, v85, v86, v132, v141, v151, v160, v170, v180, v189, (char)v192, v193, v194, v195,
    v196,
    v197);
  sub_100058074((uint64_t)&v192);
  if (v198)
  {
    int v87 = sub_100088008();
    uint64_t v88 = v181;
    if (!v87) {
      uint64_t v88 = 0;
    }
    char v89 = v87 ^ 1;
  }
  else
  {
    sub_100048A6C((uint64_t)&v197, &qword_100697EE8);
    uint64_t v88 = 0;
    char v89 = 1;
  }
  *(void *)(a2 + 48) = v88;
  *(unsigned char *)(a2 + 56) = v89;
  *(void *)(a2 + 96) = 1;
  strcpy((char *)&v197, "workflow_ids");
  BYTE13(v197) = 0;
  HIWORD(v197) = -5120;
  uint64_t v90 = sub_1000880E4();
  sub_100088028(v90, v91, v92, v93, v94, v95, v96, v97, v133, v142, v152, v161, v171, v181, v190, (char)v192, v193, v194, v195,
    v196,
    v197);
  sub_100058074((uint64_t)&v192);
  if (v198)
  {
    sub_10002E768(&qword_1006982F8);
    if (sub_100088008()) {
      uint64_t v98 = v182;
    }
    else {
      uint64_t v98 = 0;
    }
  }
  else
  {
    sub_100048A6C((uint64_t)&v197, &qword_100697EE8);
    uint64_t v98 = 0;
  }
  swift_bridgeObjectRelease();
  *(void *)(a2 + 80) = v98;
  uint64_t v99 = AnyHashable.init<A>(_:)();
  sub_100088028(v99, v100, v101, v102, v103, v104, v105, v106, v134, v143, v153, v162, v172, 0x737265746C6966, 0xE700000000000000, (char)v192, v193, v194, v195,
    v196,
    v197);
  sub_100058074((uint64_t)&v192);
  if (v198)
  {
    sub_10002E768(&qword_100699960);
    if (sub_100088008())
    {
      uint64_t v107 = sub_100084BE0(v183);
      uint64_t v108 = sub_100084144(v107);
      uint64_t v110 = v109;
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
  }
  else
  {
    sub_100048A6C((uint64_t)&v197, &qword_100697EE8);
  }
  uint64_t v110 = 0;
  uint64_t v108 = 1;
LABEL_66:
  sub_100084100(*v66);
  *uint64_t v66 = v108;
  v66[1] = v110;
  strcpy((char *)&v197, "options");
  *((void *)&v197 + 1) = 0xE700000000000000;
  uint64_t v111 = sub_1000880E4();
  sub_100088028(v111, v112, v113, v114, v115, v116, v117, v118, v135, v144, v154, v163, v173, v183, v191, (char)v192, v193, v194, v195,
    v196,
    v197);
  swift_bridgeObjectRelease();
  sub_100058074((uint64_t)&v192);
  if (!v198)
  {
    sub_100048A6C((uint64_t)&v197, &qword_100697EE8);
    goto LABEL_70;
  }
  sub_10002E768(&qword_1006982F8);
  if (!sub_100088008())
  {
LABEL_70:
    uint64_t v119 = &_swiftEmptyArrayStorage;
    goto LABEL_71;
  }
  uint64_t v119 = v184;
LABEL_71:
  uint64_t v120 = v119[2];
  if (v120)
  {
    v192 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_1000A5238();
    uint64_t v121 = v192;
    uint64_t v122 = v119 + 5;
    do
    {
      if (*(v122 - 1) == 6383472 && *v122 == 0xE300000000000000) {
        char v124 = 1;
      }
      else {
        char v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      v192 = v121;
      unint64_t v125 = v121[2];
      if (v125 >= v121[3] >> 1)
      {
        sub_1000A5238();
        uint64_t v121 = v192;
      }
      v122 += 2;
      v121[2] = v125 + 1;
      *((unsigned char *)v121 + v125 + 32) = v124 & 1;
      --v120;
    }
    while (v120);
    swift_bridgeObjectRelease();
    uint64_t v67 = v164;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v121 = (unint64_t *)&_swiftEmptyArrayStorage;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v67 = v121;
  return result;
}

uint64_t sub_100084064(char a1)
{
  return a1 & 1;
}

uint64_t type metadata accessor for PushPayload()
{
  uint64_t result = qword_1006999C8;
  if (!qword_1006999C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1000840B4()
{
  unint64_t result = qword_100699958;
  if (!qword_100699958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699958);
  }
  return result;
}

uint64_t sub_100084100(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100084144(uint64_t a1)
{
  sub_1000881A8();
  *(void *)&long long v9 = v3;
  *((void *)&v9 + 1) = v2 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000;
  AnyHashable.init<A>(_:)();
  sub_100067E04((uint64_t)v8, a1, &v9);
  sub_100058074((uint64_t)v8);
  if (v10)
  {
    sub_10002E768(&qword_1006982F8);
    if (sub_100088184()) {
      uint64_t v4 = v7;
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    sub_100048A6C((uint64_t)&v9, &qword_100697EE8);
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  sub_100067E04((uint64_t)v8, a1, &v9);
  swift_bridgeObjectRelease();
  sub_100058074((uint64_t)v8);
  if (v10)
  {
    sub_10002E768(&qword_1006982F8);
    if (sub_100088184()) {
      uint64_t v5 = 0x7361657261;
    }
    else {
      uint64_t v5 = 0;
    }
    if (!v4)
    {
      if (v5) {
        return v4;
      }
      return 1;
    }
  }
  else
  {
    sub_100048A6C((uint64_t)&v9, &qword_100697EE8);
    if (!v4) {
      return 1;
    }
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000842B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = 0xE000000000000000;
  if (a1)
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    sub_1000881A8();
    uint64_t v16 = v5;
    unint64_t v17 = v4 | 0xEE005B203A200000;
    v6._unint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._unint64_t countAndFlagsBits = 93;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    a1 = v16;
    unint64_t v3 = v17;
  }
  unint64_t v8 = v3;
  String.append(_:)(*(Swift::String *)&a1);
  swift_bridgeObjectRelease();
  if (a2)
  {
    v9._unint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._unint64_t countAndFlagsBits = 93;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    uint64_t v11 = 0x203A736165726120;
    unint64_t v12 = 0xE90000000000005BLL;
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
  }
  unint64_t v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v14._unint64_t countAndFlagsBits = 125;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 0x20737265746C6946;
}

uint64_t sub_100084414(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7079546E69676F6CLL && a2 == 0xEA00000000007365;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7361657261 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100084508(char a1)
{
  if (a1) {
    return 0x7361657261;
  }
  else {
    return 0x7079546E69676F6CLL;
  }
}

uint64_t sub_100084540(void *a1)
{
  uint64_t v4 = sub_10002E768(&qword_100699AB8);
  sub_100045FF4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10007921C();
  sub_10002EAE0(a1, a1[3]);
  sub_1000879A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10002E768(&qword_1006982F8);
  sub_10004532C(&qword_100698318);
  sub_10008808C();
  if (!v1) {
    sub_10008808C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t sub_100084690(void *a1)
{
  sub_10002E768(&qword_100699AA8);
  sub_100045FF4();
  __chkstk_darwin(v3);
  sub_100046348();
  sub_10002EAE0(a1, a1[3]);
  sub_1000879A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    uint64_t v5 = 0;
    sub_10002EB9C((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10002E768(&qword_1006982F8);
    sub_10004532C(&qword_100698300);
    sub_10008805C();
    uint64_t v5 = v8;
    sub_10008805C();
    uint64_t v6 = sub_100088240();
    v7(v6);
    sub_10002EB9C((uint64_t)a1);
  }
  return v5;
}

unint64_t sub_100084810(Swift::String string)
{
  object = string._object;
  v2._unint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10065F850, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

Swift::Int sub_10008485C()
{
  return sub_100043038(*v0);
}

uint64_t sub_100084864()
{
  return sub_100084508(*v0);
}

uint64_t sub_10008486C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100084414(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100084894(uint64_t a1)
{
  unint64_t v2 = sub_1000879A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000848D0(uint64_t a1)
{
  unint64_t v2 = sub_1000879A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008490C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100084690(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100084938(void *a1)
{
  return sub_100084540(a1);
}

uint64_t sub_100084954()
{
  return sub_1000842B4(*v0, v0[1]);
}

uint64_t sub_10008495C()
{
  return sub_1000366F8();
}

Swift::Int sub_100084968()
{
  return sub_1000A2490(*v0);
}

uint64_t sub_100084970()
{
  return sub_1000A26CC();
}

Swift::Int sub_100084978(uint64_t a1)
{
  return sub_1000A27D4(a1, *v1);
}

unint64_t sub_100084980@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100084810(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000849B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000836C0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000849DC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100084A3C()
{
  return RawRepresentable<>.encode(to:)();
}

Swift::Int sub_100084A8C()
{
  return sub_100041B70(*v0);
}

uint64_t sub_100084AB8(uint64_t a1)
{
  if (a1 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

Swift::Int sub_100084AD0(uint64_t a1)
{
  return sub_1000A27EC(a1, *v1);
}

uint64_t sub_100084AD8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100084AB8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100084B04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100084064(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_100084B30()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100084B90()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100084BE0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002E768(&qword_100699968);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v26 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    Swift::String v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    sub_100058018(*(void *)(a1 + 56) + 40 * i, (uint64_t)v45);
    uint64_t v43 = v16;
    uint64_t v44 = v15;
    long long v40 = v45[0];
    long long v41 = v45[1];
    uint64_t v42 = v46;
    uint64_t v30 = v16;
    uint64_t v31 = v15;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v28[0] = v40;
    v28[1] = v41;
    uint64_t v29 = v42;
    swift_dynamicCast();
    long long v36 = v32;
    long long v37 = v33;
    uint64_t v38 = v34;
    sub_100057638(&v35, v39);
    long long v32 = v36;
    long long v33 = v37;
    uint64_t v34 = v38;
    sub_100057638(v39, v28);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)&v6[8 * (v18 >> 6)]) == 0)
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        BOOL v23 = v19 == v22;
        if (v19 == v22) {
          unint64_t v19 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)&v6[8 * v19];
        if (v24 != -1)
        {
          unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)&v6[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_31:
    *(void *)&v6[(v20 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v20;
    uint64_t v25 = v2[6] + 40 * v20;
    *(_OWORD *)uint64_t v25 = v32;
    *(_OWORD *)(v25 + 16) = v33;
    *(void *)(v25 + 32) = v34;
    uint64_t result = (uint64_t)sub_100057638(v28, (_OWORD *)(v2[7] + 32 * v20));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_35;
    }
    if (v11 >= v27) {
      goto LABEL_33;
    }
    unint64_t v12 = *(void *)(v26 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v27) {
        goto LABEL_33;
      }
      unint64_t v12 = *(void *)(v26 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v27) {
          goto LABEL_33;
        }
        unint64_t v12 = *(void *)(v26 + 8 * v8);
        if (!v12)
        {
          int64_t v13 = v11 + 3;
          if (v13 >= v27)
          {
LABEL_33:
            swift_release();
            swift_release();
            return (uint64_t)v2;
          }
          unint64_t v12 = *(void *)(v26 + 8 * v13);
          int64_t v8 = v13;
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v27) {
      goto LABEL_33;
    }
    unint64_t v12 = *(void *)(v26 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

void sub_100084F74(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002E768((uint64_t *)&unk_100699210);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain();
  int64_t v29 = 0;
  uint64_t v6 = &type metadata for String;
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        unint64_t v7 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        unint64_t v8 = v7 | (v29 << 6);
      }
      else
      {
        int64_t v9 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          goto LABEL_38;
        }
        if (v9 >= v27)
        {
LABEL_35:
          sub_1000581E4();
          return;
        }
        unint64_t v10 = *(void *)(v28 + 8 * v9);
        int64_t v11 = v29 + 1;
        if (!v10)
        {
          sub_1000881D8();
          if (v12 == v13) {
            goto LABEL_35;
          }
          sub_1000881C0();
          if (!v10)
          {
            sub_1000881D8();
            if (v12 == v13) {
              goto LABEL_35;
            }
            sub_1000881C0();
            if (!v10)
            {
              sub_1000881D8();
              if (v12 == v13) {
                goto LABEL_35;
              }
              sub_1000881C0();
              if (!v10)
              {
                int64_t v15 = v14 + 4;
                if (v15 >= v27) {
                  goto LABEL_35;
                }
                unint64_t v10 = *(void *)(v28 + 8 * v15);
                if (!v10)
                {
                  while (!__OFADD__(v15, 1))
                  {
                    sub_1000881D8();
                    if (v12 == v13) {
                      goto LABEL_35;
                    }
                    sub_1000881C0();
                    int64_t v15 = v16 + 1;
                    if (v10) {
                      goto LABEL_29;
                    }
                  }
                  goto LABEL_39;
                }
                int64_t v11 = v15;
              }
            }
          }
        }
LABEL_29:
        unint64_t v5 = (v10 - 1) & v10;
        unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
        int64_t v29 = v11;
      }
      uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
      uint64_t v30 = *v17;
      uint64_t v31 = v17[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10002E768(&qword_100698958);
      swift_dynamicCast();
      sub_1000311A4(&v32, (uint64_t)v34);
      sub_1000311A4(v34, (uint64_t)v35);
      sub_1000311A4(v35, (uint64_t)&v33);
      unint64_t v18 = sub_100055F1C(v30, v31);
      unint64_t v19 = v18;
      if ((v20 & 1) == 0) {
        break;
      }
      char v21 = v6;
      unint64_t v22 = (uint64_t *)(v2[6] + 16 * v18);
      swift_bridgeObjectRelease();
      *unint64_t v22 = v30;
      v22[1] = v31;
      uint64_t v6 = v21;
      uint64_t v23 = v2[7] + 40 * v19;
      sub_10002EB9C(v23);
      sub_1000311A4(&v33, v23);
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v18;
    uint64_t v24 = (uint64_t *)(v2[6] + 16 * v18);
    uint64_t *v24 = v30;
    v24[1] = v31;
    sub_1000311A4(&v33, v2[7] + 40 * v18);
    uint64_t v25 = v2[2];
    BOOL v13 = __OFADD__(v25, 1);
    uint64_t v26 = v25 + 1;
    if (v13) {
      goto LABEL_37;
    }
    v2[2] = v26;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

void sub_100085288(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002E768(&qword_100699968);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  swift_retain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v7 << 6);
  while (1)
  {
    unint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_10002EA7C(*(void *)(a1 + 56) + 40 * v9, (uint64_t)v47);
    *(void *)&long long v46 = v20;
    *((void *)&v46 + 1) = v19;
    *(_OWORD *)&v43[5] = v46;
    v44[0] = v47[0];
    v44[1] = v47[1];
    uint64_t v45 = v48;
    uint64_t v34 = v20;
    uint64_t v35 = v19;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000311A4(v44, (uint64_t)v33);
    sub_10002E768(&qword_100698958);
    swift_dynamicCast();
    long long v40 = v36;
    long long v41 = v37;
    uint64_t v42 = v38;
    sub_100057638(&v39, v43);
    long long v36 = v40;
    long long v37 = v41;
    uint64_t v38 = v42;
    sub_100057638(v43, v33);
    sub_100057638(v33, &v40);
    Swift::Int v21 = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v22 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~v6[v23 >> 6]) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = v6[v24];
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    unint64_t v25 = __clz(__rbit64((-1 << v23) & ~v6[v23 >> 6])) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_38:
    *(void *)((char *)v6 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = v2[6] + 40 * v25;
    *(_OWORD *)uint64_t v30 = v36;
    *(_OWORD *)(v30 + 16) = v37;
    *(void *)(v30 + 32) = v38;
    sub_100057638(&v40, (_OWORD *)(v2[7] + 32 * v25));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_42;
    }
    if (v10 >= v31) {
      goto LABEL_40;
    }
    unint64_t v11 = *(void *)(v32 + 8 * v10);
    int64_t v12 = v7 + 1;
    if (!v11)
    {
      sub_1000881E4();
      if (v13 == v14) {
        goto LABEL_40;
      }
      sub_1000881CC();
      if (!v11)
      {
        sub_1000881E4();
        if (v13 == v14) {
          goto LABEL_40;
        }
        sub_1000881CC();
        if (!v11)
        {
          sub_1000881E4();
          if (v13 == v14) {
            goto LABEL_40;
          }
          sub_1000881CC();
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_28:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v7 = v12;
  }
  int64_t v16 = v15 + 4;
  if (v16 >= v31)
  {
LABEL_40:
    swift_release();
    sub_1000581E4();
    return;
  }
  unint64_t v11 = *(void *)(v32 + 8 * v16);
  if (v11)
  {
    int64_t v12 = v16;
    goto LABEL_28;
  }
  while (!__OFADD__(v16, 1))
  {
    sub_1000881E4();
    if (v13 == v14) {
      goto LABEL_40;
    }
    sub_1000881CC();
    int64_t v16 = v17 + 1;
    if (v11) {
      goto LABEL_28;
    }
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_10008566C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646E616D6D6F63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6163696669746F6ELL && a2 == 0xEE0064496E6F6974;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000012 && a2 == 0x800000010056A920 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0xD000000000000014 && a2 == 0x800000010056A940 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else if (a1 == 0xD000000000000011 && a2 == 0x800000010056A960 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      else
      {
        BOOL v8 = a1 == 0x776F6C666B726F77 && a2 == 0xEB00000000736449;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 6;
        }
        else
        {
          BOOL v9 = a1 == 0x7364697575 && a2 == 0xE500000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 7;
          }
          else
          {
            BOOL v10 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else
            {
              BOOL v11 = a1 == 0x656C756465686373 && a2 == 0xED0000656D695464;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 9;
              }
              else if (a1 == 0x737265746C6966 && a2 == 0xE700000000000000)
              {
                swift_bridgeObjectRelease();
                return 10;
              }
              else
              {
                char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v13) {
                  return 10;
                }
                else {
                  return 11;
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100085B08()
{
  return 11;
}

unint64_t sub_100085B10(char a1)
{
  unint64_t result = 0x646E616D6D6F63;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x736E6F6974706FLL;
      break;
    case 2:
      unint64_t result = 0x6163696669746F6ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x776F6C666B726F77;
      break;
    case 7:
      unint64_t result = 0x7364697575;
      break;
    case 8:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 9:
      unint64_t result = 0x656C756465686373;
      break;
    case 10:
      unint64_t result = 0x737265746C6966;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100085C84(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_10002E768(&qword_100699A40);
  sub_100045FF4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_10007921C();
  sub_10002EAE0(a1, a1[3]);
  sub_10008762C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100087678();
  sub_1000880FC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    sub_10002E768(&qword_100699A58);
    sub_1000877A8(&qword_100699A60, (void (*)(void))sub_1000876C4);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100088148(2);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100088160(*(void *)(v4 + 32), *(unsigned __int8 *)(v4 + 40), 3);
    sub_100088148(4);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100088160(*(void *)(v4 + 64), *(unsigned __int8 *)(v4 + 72), 5);
    sub_10002E768(&qword_1006982F8);
    sub_10004532C(&qword_100698318);
    sub_1000880B8();
    sub_1000880B8();
    sub_1000880FC();
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for PushPayload();
    type metadata accessor for Date();
    sub_100087864(&qword_1006987A8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100087710();
    sub_1000880FC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
}

uint64_t sub_100085FB4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v4 = sub_10002E768(&qword_100697EE0);
  __chkstk_darwin(v4 - 8);
  uint64_t v32 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_10002E768(&qword_100699A78);
  sub_100045FF4();
  uint64_t v33 = v6;
  __chkstk_darwin(v7);
  sub_100046348();
  uint64_t v8 = type metadata accessor for PushPayload();
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  BOOL v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v11[40] = 1;
  *((void *)v11 + 6) = 0;
  v11[56] = 1;
  *((void *)v11 + 8) = 0;
  v11[72] = 1;
  *((void *)v11 + 10) = 0;
  *((void *)v11 + 11) = 0;
  uint64_t v12 = (uint64_t)&v11[*(int *)(v9 + 60)];
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v39 = v12;
  sub_10003349C(v12, 1, 1, v13);
  char v14 = (uint64_t *)&v11[*(int *)(v9 + 64)];
  long long v36 = a1;
  long long v37 = v14;
  *(_OWORD *)char v14 = xmmword_10058E0C0;
  sub_10002EAE0(a1, a1[3]);
  sub_10008762C();
  uint64_t v34 = v2;
  uint64_t v15 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    uint64_t v17 = v37;
    sub_10002EB9C((uint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100048A6C(v39, &qword_100697EE0);
    return sub_100084100(*v17);
  }
  else
  {
    uint64_t v16 = v33;
    char v42 = 0;
    sub_10008775C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char *v11 = v40;
    sub_10002E768(&qword_100699A58);
    char v42 = 1;
    sub_1000877A8(&qword_100699A88, (void (*)(void))sub_100087818);
    sub_10008810C();
    sub_1000881F0();
    *((void *)v11 + 1) = v40;
    sub_100088044(2);
    *((void *)v11 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *((void *)v11 + 3) = v18;
    *((void *)v11 + 4) = sub_100088124(3);
    v11[40] = v19 & 1;
    sub_100088044(4);
    *((void *)v11 + 6) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v11[56] = v20 & 1;
    *((void *)v11 + 8) = sub_100088124(5);
    v11[72] = v21 & 1;
    uint64_t v22 = sub_10002E768(&qword_1006982F8);
    char v42 = 6;
    sub_10004532C(&qword_100698300);
    sub_10008810C();
    uint64_t v38 = v22;
    uint64_t v30 = v23;
    sub_1000881F0();
    *((void *)v11 + 10) = v40;
    char v42 = 7;
    sub_1000881F0();
    *((void *)v11 + 11) = v40;
    sub_100088044(8);
    *((void *)v11 + 12) = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v40) = 9;
    sub_100087864(&qword_100698878);
    sub_1000881F0();
    sub_1000878A8(v32, v39);
    char v42 = 10;
    sub_100087910();
    uint64_t v25 = v34;
    uint64_t v24 = v35;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v25, v24);
    uint64_t v26 = v40;
    uint64_t v27 = v41;
    BOOL v28 = v37;
    sub_100084100(*v37);
    *BOOL v28 = v26;
    v28[1] = v27;
    sub_1000313D4((uint64_t)v11, v31);
    sub_10002EB9C((uint64_t)v36);
    return sub_100031438((uint64_t)v11);
  }
}

unint64_t sub_1000864D4()
{
  return sub_100085B10(*v0);
}

uint64_t sub_1000864DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008566C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100086504@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100085B08();
  *a1 = result;
  return result;
}

uint64_t sub_10008652C(uint64_t a1)
{
  unint64_t v2 = sub_10008762C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100086568(uint64_t a1)
{
  unint64_t v2 = sub_10008762C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000865A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100085FB4(a1, a2);
}

uint64_t sub_1000865BC(void *a1)
{
  return sub_100085C84(a1);
}

void type metadata accessor for PushPayload.Options()
{
}

uint64_t getEnumTagSinglePayload for RavioliVerifier.CCVerificationError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_10008666C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100086738);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void type metadata accessor for PushPayload.PushPayloadErrors()
{
}

void *sub_10008676C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v7;
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v9 = a2[8];
    *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
    *(void *)(a1 + 64) = v9;
    uint64_t v10 = a2[10];
    uint64_t v11 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v11;
    uint64_t v12 = *(int *)(a3 + 52);
    uint64_t v13 = (void *)(a1 + v12);
    char v14 = (char *)a2 + v12;
    *(void *)(a1 + 80) = v10;
    uint64_t v15 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_1000312BC((uint64_t)v14, 1, v15))
    {
      uint64_t v16 = sub_10002E768(&qword_100697EE0);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      sub_10003349C((uint64_t)v13, 0, 1, v15);
    }
    uint64_t v18 = *(int *)(a3 + 56);
    char v19 = (char *)v4 + v18;
    uint64_t v20 = (uint64_t)a2 + v18;
    if (*(void *)v20 == 1)
    {
      *(_OWORD *)char v19 = *(_OWORD *)v20;
    }
    else
    {
      uint64_t v21 = *(void *)(v20 + 8);
      *(void *)char v19 = *(void *)v20;
      *((void *)v19 + 1) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v4;
}

uint64_t sub_100086954(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 52);
  uint64_t v5 = type metadata accessor for Date();
  if (!sub_1000312BC(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  uint64_t result = *(void *)(a1 + *(int *)(a2 + 56));
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100086A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = *(void *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  uint64_t v11 = *(int *)(a3 + 52);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  *(void *)(a1 + 80) = v9;
  uint64_t v14 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_1000312BC((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = sub_10002E768(&qword_100697EE0);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    sub_10003349C((uint64_t)v12, 0, 1, v14);
  }
  uint64_t v16 = *(int *)(a3 + 56);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  if (*(void *)v18 == 1)
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }
  else
  {
    uint64_t v19 = *(void *)(v18 + 8);
    *(void *)uint64_t v17 = *(void *)v18;
    *(void *)(v17 + 8) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100086BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v9 = *(int *)(a3 + 52);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date();
  int v13 = sub_1000312BC((uint64_t)v10, 1, v12);
  int v14 = sub_1000312BC((uint64_t)v11, 1, v12);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      sub_10003349C((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    uint64_t v16 = sub_10002E768(&qword_100697EE0);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 56);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = a2 + v17;
  uint64_t v20 = *(void *)(a2 + v17);
  if (*(void *)(a1 + v17) != 1)
  {
    if (v20 != 1)
    {
      *uint64_t v18 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v18[1] = *(void *)(v19 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_100086E60(a1 + v17);
    goto LABEL_12;
  }
  if (v20 == 1)
  {
LABEL_12:
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    return a1;
  }
  *uint64_t v18 = v20;
  v18[1] = *(void *)(v19 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100086E60(uint64_t a1)
{
  return a1;
}

uint64_t sub_100086E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v7 = *(int *)(a3 + 52);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 80) = v6;
  uint64_t v10 = type metadata accessor for Date();
  if (sub_1000312BC((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_10002E768(&qword_100697EE0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    sub_10003349C((uint64_t)v8, 0, 1, v10);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 56)) = *(_OWORD *)(a2 + *(int *)(a3 + 56));
  return a1;
}

uint64_t sub_100086FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v7 = *(int *)(a3 + 52);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  int v11 = sub_1000312BC((uint64_t)v8, 1, v10);
  int v12 = sub_1000312BC((uint64_t)v9, 1, v10);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      sub_10003349C((uint64_t)v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v10 - 8);
  if (v12)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
LABEL_6:
    uint64_t v14 = sub_10002E768(&qword_100697EE0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 56);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  if (*(void *)(a1 + v15) != 1)
  {
    if (*v17 != 1)
    {
      *uint64_t v16 = *v17;
      swift_bridgeObjectRelease();
      v16[1] = v17[1];
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_100086E60((uint64_t)v16);
  }
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  return a1;
}

uint64_t sub_10008720C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100087220);
}

uint64_t sub_100087220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_10002E768(&qword_100697EE0);
    uint64_t v10 = a1 + *(int *)(a3 + 52);
    return sub_1000312BC(v10, a2, v9);
  }
}

uint64_t sub_1000872B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000872CC);
}

uint64_t sub_1000872CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_10002E768(&qword_100697EE0);
    uint64_t v8 = v5 + *(int *)(a4 + 52);
    return sub_10003349C(v8, a2, a2, v7);
  }
  return result;
}

void sub_100087350()
{
  sub_100087424();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100087424()
{
  if (!qword_1006999D8)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1006999D8);
    }
  }
}

void *sub_10008747C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000874DC(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100087530(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

void type metadata accessor for PushPayload.Filters()
{
}

unint64_t sub_100087590()
{
  unint64_t result = qword_100699A30;
  if (!qword_100699A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699A30);
  }
  return result;
}

unint64_t sub_1000875E0()
{
  unint64_t result = qword_100699A38;
  if (!qword_100699A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699A38);
  }
  return result;
}

unint64_t sub_10008762C()
{
  unint64_t result = qword_100699A48;
  if (!qword_100699A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699A48);
  }
  return result;
}

unint64_t sub_100087678()
{
  unint64_t result = qword_100699A50;
  if (!qword_100699A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699A50);
  }
  return result;
}

unint64_t sub_1000876C4()
{
  unint64_t result = qword_100699A68;
  if (!qword_100699A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699A68);
  }
  return result;
}

unint64_t sub_100087710()
{
  unint64_t result = qword_100699A70;
  if (!qword_100699A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699A70);
  }
  return result;
}

unint64_t sub_10008775C()
{
  unint64_t result = qword_100699A80;
  if (!qword_100699A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699A80);
  }
  return result;
}

uint64_t sub_1000877A8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10003137C(&qword_100699A58);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100087818()
{
  unint64_t result = qword_100699A90;
  if (!qword_100699A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699A90);
  }
  return result;
}

uint64_t sub_100087864(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000878A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002E768(&qword_100697EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100087910()
{
  unint64_t result = qword_100699A98;
  if (!qword_100699A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699A98);
  }
  return result;
}

unint64_t sub_10008795C()
{
  unint64_t result = qword_100699AA0;
  if (!qword_100699AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699AA0);
  }
  return result;
}

unint64_t sub_1000879A8()
{
  unint64_t result = qword_100699AB0;
  if (!qword_100699AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699AB0);
  }
  return result;
}

unsigned char *_s3asd11PushPayloadV7FiltersV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087AC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PushPayload.Filters.CodingKeys()
{
  return &type metadata for PushPayload.Filters.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PushPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PushPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087C4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PushPayload.CodingKeys()
{
  return &type metadata for PushPayload.CodingKeys;
}

unsigned char *sub_100087C84(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087D50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for PushPayload.Command()
{
}

unint64_t sub_100087D88()
{
  unint64_t result = qword_100699AC0;
  if (!qword_100699AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699AC0);
  }
  return result;
}

unint64_t sub_100087DD8()
{
  unint64_t result = qword_100699AC8;
  if (!qword_100699AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699AC8);
  }
  return result;
}

unint64_t sub_100087E28()
{
  unint64_t result = qword_100699AD0;
  if (!qword_100699AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699AD0);
  }
  return result;
}

unint64_t sub_100087E78()
{
  unint64_t result = qword_100699AD8;
  if (!qword_100699AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699AD8);
  }
  return result;
}

unint64_t sub_100087EC8()
{
  unint64_t result = qword_100699AE0;
  if (!qword_100699AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699AE0);
  }
  return result;
}

unint64_t sub_100087F18()
{
  unint64_t result = qword_100699AE8;
  if (!qword_100699AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699AE8);
  }
  return result;
}

unint64_t sub_100087F68()
{
  unint64_t result = qword_100699AF0;
  if (!qword_100699AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699AF0);
  }
  return result;
}

unint64_t sub_100087FB4()
{
  unint64_t result = qword_100699AF8;
  if (!qword_100699AF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699AF8);
  }
  return result;
}

uint64_t sub_100088008()
{
  return swift_dynamicCast();
}

double sub_100088028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long a21)
{
  return sub_100067E04((uint64_t)&a16, v21, &a21);
}

uint64_t sub_100088044@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_10008805C()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_10008808C()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1000880B8()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1000880E4()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_10008810C()
{
  return v0;
}

uint64_t sub_100088124@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v2 - 96) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 96, v1);
}

void sub_100088148(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
}

uint64_t sub_100088160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(unsigned char *)(v4 - 96) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 96, v3);
}

uint64_t sub_100088184()
{
  return swift_dynamicCast();
}

uint64_t sub_1000881F0()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100088208()
{
  return swift_allocError();
}

uint64_t sub_100088220()
{
  return swift_dynamicCast();
}

uint64_t sub_100088240()
{
  return v0;
}

uint64_t sub_100088254(uint64_t a1, unint64_t a2)
{
  BOOL v2 = a1 == 1685025392 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  BOOL v6 = a1 == 0x786F62646E6173 && a2 == 0xE700000000000000;
  if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (qword_100697940 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100031284(v7, (uint64_t)qword_100699B00);
    swift_bridgeObjectRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_bridgeObjectRetain();
      sub_100032B48(a1, a2, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unexpected push environment name: %s setting to prod", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_1000884A8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_100699B00);
  sub_100031284(v0, (uint64_t)qword_100699B00);
  return Logger.init(subsystem:category:)();
}

id sub_10008852C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for PushCoordinator()) init];
  static PushCoordinator.shared = (uint64_t)result;
  return result;
}

uint64_t *PushCoordinator.shared.unsafeMutableAddressor()
{
  if (qword_100697948 != -1) {
    swift_once();
  }
  return &static PushCoordinator.shared;
}

id static PushCoordinator.shared.getter()
{
  if (qword_100697948 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static PushCoordinator.shared;

  return v0;
}

uint64_t static PushCoordinator.configurePush()()
{
  if (qword_100697948 != -1) {
    return swift_once();
  }
  return result;
}

id sub_100088674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v4[OBJC_IVAR____TtC3asd15PushCoordinator_pushServiceManager] = a1;
  *(void *)&v4[OBJC_IVAR____TtC3asd15PushCoordinator_pdsManager] = a2;
  *(void *)&v4[OBJC_IVAR____TtC3asd15PushCoordinator_cloudChannelManager] = a3;
  v17.receiver = v4;
  v17.super_class = ObjectType;
  swift_retain();
  swift_retain();
  swift_retain();
  id v12 = [super init];
  type metadata accessor for TaskPriority();
  sub_10008B2B4();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  void v13[4] = a2;
  swift_retain();
  id v14 = v12;
  sub_10004964C((uint64_t)v11, (uint64_t)&unk_100699B90, (uint64_t)v13);
  swift_release();
  sub_10008B2B4();
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = 0;
  v15[3] = 0;
  v15[4] = a3;
  sub_10004964C((uint64_t)v11, (uint64_t)&unk_100699BA0, (uint64_t)v15);
  swift_release();

  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_10008882C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10008B288;
  return sub_1000AC810();
}

uint64_t sub_1000888BC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10008B288;
  return sub_10007F9D8();
}

id sub_10008894C()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v1 = self;
  id v31 = v0;
  id v2 = [v1 standardUserDefaults];
  uint64_t v3 = sub_1000672A0(v2);
  unint64_t v5 = v4;

  char v6 = sub_100088254(v3, v5);
  type metadata accessor for ODIAccountManager();
  static ODIAccountManager.shared.getter();
  if (qword_100697968 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = sub_10008A768(&v32, (uint64_t)(id)static ASDConfigurationManager.shared);
  id v8 = [objc_allocWithZone((Class)Vr3QrKl7Yn9l4CTz) init];
  id v9 = [self defaultCenter];
  if (qword_100697928 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)static RavioliManagerObjC.shared;
  uint64_t v11 = (void *)static ASDConfigurationManager.shared;
  type metadata accessor for ASAnalyticsManager();
  id v12 = (uint64_t *)swift_allocObject();
  id v13 = v10;
  id v14 = v11;
  id v29 = v8;
  swift_retain();
  uint64_t v15 = sub_10008A884((uint64_t)v13, v29, v7, (uint64_t)v14, v12);
  uint64_t v16 = sub_10008AB58(0xD000000000000012, 0x800000010056AA10, v15, v6);

  objc_super v17 = (void *)static ASDConfigurationManager.shared;
  uint64_t v18 = (uint64_t *)swift_allocObject();
  id v19 = v17;
  id v20 = v9;
  uint64_t v21 = sub_10008AC8C(0xD000000000000012, 0x800000010056AA10, v6, v19, v20, v18);
  uint64_t v22 = (void *)v16[3];
  uint64_t v23 = (uint64_t *)swift_allocObject();
  swift_retain();
  id v24 = v20;
  uint64_t v25 = sub_10008ADEC(v22, 0xD000000000000012, 0x800000010056AA10, v7, v6, v24, v23);
  id v26 = objc_allocWithZone(ObjectType);
  id v27 = sub_100088674((uint64_t)v16, v21, v25);

  swift_release();
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v27;
}

Swift::Void __swiftcall PushCoordinator.registerICloud()()
{
}

uint64_t sub_100088CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100088CE8, 0, 0);
}

uint64_t sub_100088CE8()
{
  sub_10003F0F4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10008B280;
  return sub_1000ACCC8();
}

uint64_t sub_100088D84()
{
  sub_10003F444();
  sub_10008B2A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100078948(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10008B288;
  uint64_t v3 = sub_10008B28C();
  return sub_100088CC8(v3, v4, v5, v6);
}

Swift::Void __swiftcall PushCoordinator.unregister()()
{
}

uint64_t sub_100088E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  sub_10003349C((uint64_t)v7, 1, 1, v8);
  id v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v3;
  int v10 = sub_1000312BC((uint64_t)v7, 1, v8);
  id v11 = v3;
  if (v10 == 1)
  {
    sub_10005B4B8((uint64_t)v7);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    if (v9[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v14;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = v9;
  if (v13 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    _OWORD v17[2] = v12;
    v17[3] = v13;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_10008908C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_1000890AC, 0, 0);
}

uint64_t sub_1000890AC()
{
  sub_10003F0F4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100089144;
  return sub_1000ADF2C();
}

uint64_t sub_100089144()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

id sub_1000892AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a2)
  {
    NSString v8 = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v9 = 0;
    goto LABEL_6;
  }
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v10 = [v5 initWithEnvironmentName:v8 namedDelegatePort:v9 queue:a5];

  return v10;
}

id sub_100089358()
{
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = 0;
  id v2 = [v0 initWithClientID:v1 error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t sub_100089428()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100089468()
{
  sub_10003F444();
  sub_10008B2A4();
  uint64_t v0 = swift_task_alloc();
  NSString v1 = (void *)sub_100078948(v0);
  *NSString v1 = v2;
  v1[1] = sub_10008B288;
  uint64_t v3 = sub_10008B28C();
  return sub_10008908C(v3, v4, v5, v6);
}

uint64_t sub_1000894F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100089530()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  NSString v1 = (void *)sub_100078948(v0);
  *NSString v1 = v2;
  v1[1] = sub_1000895C8;
  uint64_t v3 = sub_100051DE8();
  return v4(v3);
}

uint64_t sub_1000895C8()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t type metadata accessor for PushCoordinator()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for PushEnvironment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008977CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PushEnvironment()
{
  return &type metadata for PushEnvironment;
}

unint64_t sub_1000897B8()
{
  unint64_t result = qword_100699B80;
  if (!qword_100699B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100699B80);
  }
  return result;
}

void sub_100089804(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 _setOpportunisticTopics:isa];
}

id sub_100089870(uint64_t a1, void *a2)
{
  v8[3] = type metadata accessor for PushDispatchManager();
  void v8[4] = &off_100661590;
  v8[0] = a1;
  id v4 = a2;
  Logger.init(subsystem:category:)();
  sub_10002EA7C((uint64_t)v8, (uint64_t)v4 + OBJC_IVAR____TtCC3asd18PushServiceManager12PushDelegate_pushDispatchManager);

  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for PushServiceManager.PushDelegate();
  id v5 = [super init];
  sub_10002EB9C((uint64_t)v8);
  return v5;
}

id sub_10008994C(uint64_t a1)
{
  uint64_t v11 = type metadata accessor for PushDispatchManager();
  uint64_t v12 = &off_100661590;
  v10[0] = a1;
  id v2 = objc_allocWithZone((Class)type metadata accessor for PushServiceManager.PushDelegate());
  uint64_t v3 = sub_10005BA08((uint64_t)v10, v11);
  __chkstk_darwin(v3);
  id v5 = (void *)((char *)&v10[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v6 + 16))(v5);
  id v7 = sub_100089870(*v5, v2);
  sub_10002EB9C((uint64_t)v10);
  return v7;
}

void *sub_100089A58(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  int v34 = a4;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8);
  v36[3] = type metadata accessor for PushDispatchManager();
  v36[4] = &off_100661590;
  v36[0] = a3;
  sub_10005B550();
  static DispatchQoS.unspecified.getter();
  v35[0] = _swiftEmptyArrayStorage;
  sub_10005B590();
  sub_10002E768(&qword_100698C98);
  sub_10005B5E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v7);
  uint64_t v13 = v32;
  a5[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  a5[6] = 0xD000000000000019;
  a5[7] = 0x800000010056AA50;
  uint64_t v14 = v33;
  a5[4] = v13;
  a5[5] = v14;
  sub_10002EA7C((uint64_t)v36, (uint64_t)v35);
  uint64_t v15 = sub_10005BA08((uint64_t)v35, v35[3]);
  __chkstk_darwin(v15);
  objc_super v17 = (uint64_t *)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  uint64_t v19 = *v17;
  swift_bridgeObjectRetain();
  id v20 = sub_10008994C(v19);
  sub_10002EB9C((uint64_t)v35);
  a5[8] = v20;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;
  uint64_t v24 = a5[6];
  uint64_t v25 = a5[7];
  id v26 = (void *)a5[2];
  objc_allocWithZone((Class)APSConnection);
  swift_bridgeObjectRetain();
  id v27 = v26;
  unint64_t result = sub_1000892AC(v21, v23, v24, v25, v26);
  if (result)
  {
    id v29 = result;
    a5[3] = result;
    [result setDelegate:v20];
    sub_10002E768(&qword_100698030);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_10058CEC0;
    *(void *)(v30 + 32) = v13;
    *(void *)(v30 + 40) = v14;
    sub_100089804(v30, v29);
    sub_10002EB9C((uint64_t)v36);
    return a5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100089E30(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = type metadata accessor for ASDConfigurationManager();
  uint64_t v9 = &off_100661E68;
  *(void *)&long long v7 = a2;
  Logger.init(subsystem:category:)();
  sub_1000311A4(a1, a3 + 16);
  sub_1000311A4(&v7, a3 + 56);
  return a3;
}

uint64_t sub_100089EF0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v20[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[3] = type metadata accessor for RavioliManagerObjC();
  v22[4] = &off_100661200;
  v22[0] = a1;
  v21[3] = type metadata accessor for ASDConfigurationManager();
  v21[4] = &off_100661E80;
  v21[0] = a4;
  v20[3] = type metadata accessor for ASAnalyticsManager();
  void v20[4] = &off_100661050;
  v20[0] = a5;
  swift_defaultActor_initialize();
  Logger.init(subsystem:category:)();
  sub_10002EA7C((uint64_t)v22, a6 + 112);
  *(void *)(a6 + 152) = a2;
  sub_10002EA7C((uint64_t)v21, a6 + 160);
  *(void *)(a6 + OBJC_IVAR____TtC3asd19PushDispatchManager_contextProvider) = a3;
  sub_10002EA7C((uint64_t)v20, a6 + OBJC_IVAR____TtC3asd19PushDispatchManager_analyticsManager);
  uint64_t v15 = type metadata accessor for TaskPriority();
  sub_10003349C((uint64_t)v14, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  uint64_t v16[3] = 0;
  v16[4] = a6;
  id v17 = a2;
  swift_retain();
  swift_retain();
  sub_10004964C((uint64_t)v14, (uint64_t)&unk_100699BB8, (uint64_t)v16);

  swift_release();
  swift_release();
  sub_10002EB9C((uint64_t)v20);
  sub_10002EB9C((uint64_t)v21);
  sub_10002EB9C((uint64_t)v22);
  return a6;
}

uint64_t sub_10008A108(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, uint64_t a7, uint64_t a8)
{
  char v15 = a5 & 1;
  uint64_t v16 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v25[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[3] = type metadata accessor for ASAnalyticsManager();
  v25[4] = &off_100661050;
  v25[0] = a7;
  swift_defaultActor_initialize();
  *(void *)(a8 + 200) = 0;
  *(void *)(a8 + 112) = a1;
  *(void *)(a8 + 120) = a2;
  *(void *)(a8 + 128) = a3;
  *(unsigned char *)(a8 + 136) = v15;
  *(void *)(a8 + 144) = a4;
  sub_10002EA7C((uint64_t)v25, a8 + 152);
  *(void *)(a8 + 192) = a6;
  uint64_t v19 = type metadata accessor for TaskPriority();
  sub_10003349C((uint64_t)v18, 1, 1, v19);
  id v20 = (void *)swift_allocObject();
  _OWORD v20[2] = 0;
  v20[3] = 0;
  void v20[4] = a8;
  id v21 = a1;
  swift_retain();
  id v22 = a6;
  swift_retain();
  sub_10004964C((uint64_t)v18, (uint64_t)&unk_100699BA8, (uint64_t)v20);

  swift_release();
  swift_release();
  sub_10002EB9C((uint64_t)v25);
  return a8;
}

uint64_t sub_10008A29C(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  char v13 = a3 & 1;
  uint64_t v14 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = type metadata accessor for ASAnalyticsManager();
  v28[4] = &off_100661050;
  v28[0] = a6;
  swift_defaultActor_initialize();
  *(void *)(a7 + 200) = 0;
  *(unsigned char *)(a7 + 208) = 0;
  *(void *)(a7 + 120) = a1;
  *(void *)(a7 + 128) = a2;
  *(unsigned char *)(a7 + 136) = v13;
  *(void *)(a7 + 184) = a4;
  sub_10002EA7C((uint64_t)v28, a7 + 144);
  *(void *)(a7 + 192) = a5;
  objc_allocWithZone((Class)PDSRegistrar);
  id v17 = a4;
  id v18 = a5;
  *(void *)(a7 + 112) = sub_100089358();
  if (qword_100697980 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100031284(v19, (uint64_t)qword_10069A668);
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    id v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)id v22 = 136315138;
    v26[2] = sub_100032B48(0x6C7070612E6D6F63, 0xED00006473612E65, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "PDS Registrar configured for clientID: %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v23 = type metadata accessor for TaskPriority();
  sub_10003349C((uint64_t)v16, 1, 1, v23);
  uint64_t v24 = (void *)swift_allocObject();
  long long v24[2] = 0;
  v24[3] = 0;
  v24[4] = a7;
  swift_retain();
  sub_10004964C((uint64_t)v16, (uint64_t)&unk_100699BB0, (uint64_t)v24);

  swift_release();
  sub_10002EB9C((uint64_t)v28);
  return a7;
}

uint64_t sub_10008A768(long long *a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v14 = &off_100661E68;
  v12[0] = a2;
  type metadata accessor for DeviceContextProvider();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = sub_10005BA08((uint64_t)v12, ObjectType);
  __chkstk_darwin(v5);
  long long v7 = (void *)((char *)&v12[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v8 + 16))(v7);
  uint64_t v9 = sub_100089E30(a1, *v7, v4);
  sub_10002EB9C((uint64_t)v12);
  return v9;
}

uint64_t sub_10008A884(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = *a5;
  uint64_t v34 = type metadata accessor for RavioliManagerObjC();
  uint64_t v35 = &off_100661200;
  v33[0] = a1;
  uint64_t v31 = type metadata accessor for ASDConfigurationManager();
  uint64_t v32 = &off_100661E80;
  v30[0] = a4;
  uint64_t v28 = v10;
  id v29 = &off_100661050;
  v27[0] = a5;
  type metadata accessor for PushDispatchManager();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = sub_10005BA08((uint64_t)v33, v34);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)&v27[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v16 = sub_10005BA08((uint64_t)v30, v31);
  __chkstk_darwin(v16);
  id v18 = (void *)((char *)&v27[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  uint64_t v20 = sub_10005BA08((uint64_t)v27, v28);
  __chkstk_darwin(v20);
  id v22 = (void *)((char *)&v27[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  uint64_t v24 = sub_100089EF0(*v14, a2, a3, *v18, *v22, v11);
  sub_10002EB9C((uint64_t)v27);
  sub_10002EB9C((uint64_t)v30);
  sub_10002EB9C((uint64_t)v33);
  return v24;
}

void *sub_10008AB58(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v7 = a4 & 1;
  uint64_t v17 = type metadata accessor for PushDispatchManager();
  id v18 = &off_100661590;
  v16[0] = a3;
  type metadata accessor for PushServiceManager();
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = sub_10005BA08((uint64_t)v16, v17);
  __chkstk_darwin(v9);
  uint64_t v11 = (void *)((char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = sub_100089A58(a1, a2, *v11, v7, v8);
  sub_10002EB9C((uint64_t)v16);
  return v13;
}

uint64_t sub_10008AC8C(uint64_t a1, uint64_t a2, char a3, void *a4, void *a5, uint64_t *a6)
{
  char v10 = a3 & 1;
  uint64_t v20 = *a6;
  uint64_t v21 = &off_100661050;
  v19[0] = a6;
  type metadata accessor for PushManagerPDS();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = sub_10005BA08((uint64_t)v19, v20);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)&v19[-1] - v13);
  (*(void (**)(char *))(v15 + 16))((char *)&v19[-1] - v13);
  uint64_t v16 = sub_10008A29C(a1, a2, v10, a4, a5, *v14, v11);
  sub_10002EB9C((uint64_t)v19);
  return v16;
}

uint64_t sub_10008ADEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, uint64_t *a7)
{
  char v12 = a5 & 1;
  uint64_t v22 = *a7;
  uint64_t v23 = &off_100661050;
  v21[0] = a7;
  type metadata accessor for PushCloudChannelsManager();
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = sub_10005BA08((uint64_t)v21, v22);
  __chkstk_darwin(v14);
  uint64_t v16 = (void *)((char *)&v21[-1] - v15);
  (*(void (**)(char *))(v17 + 16))((char *)&v21[-1] - v15);
  uint64_t v18 = sub_10008A108(a1, a2, a3, a4, v12, a6, *v16, v13);
  sub_10002EB9C((uint64_t)v21);
  return v18;
}

uint64_t sub_10008AF60()
{
  sub_10003F444();
  sub_10008B2A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100078948(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10008B288;
  sub_10008B28C();
  return sub_10008882C();
}

uint64_t sub_10008AFF4()
{
  sub_10003F444();
  sub_10008B2A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100078948(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10008B288;
  sub_10008B28C();
  return sub_1000888BC();
}

uint64_t sub_10008B088()
{
  sub_10003F444();
  sub_10008B2A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100078948(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10008B288;
  uint64_t v3 = sub_10008B28C();
  return sub_10007F67C(v3, v4, v5, v6);
}

uint64_t sub_10008B11C()
{
  sub_10003F444();
  sub_10008B2A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100078948(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_1000895C8;
  uint64_t v3 = sub_10008B28C();
  return sub_1000AC400(v3, v4, v5, v6);
}

uint64_t sub_10008B1B0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008B1F0()
{
  sub_10003F444();
  sub_10008B2A4();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100078948(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10008B288;
  sub_10008B28C();
  return sub_1000798C8();
}

uint64_t sub_10008B28C()
{
  return v0;
}

uint64_t sub_10008B2B4()
{
  return sub_10003349C(v0, 1, 1, v1);
}

uint64_t sub_10008B2D4()
{
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC3asd15ContactsManager_accessQueue);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v8;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_10008C034;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_10008C04C;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A163C;
  aBlock[3] = &unk_100661D60;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

void sub_10008B440(id *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + OBJC_IVAR____TtC3asd15ContactsManager__contact);
  id v4 = *a1;
  *a1 = v2;
  id v3 = v2;
}

uint64_t sub_10008B48C(void *a1)
{
  uint64_t v4 = type metadata accessor for DispatchQoS();
  sub_100045FF4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100046338();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  sub_100045FF4();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_100046348();
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v1;
  *(void *)(v15 + 24) = a1;
  aBlock[4] = sub_10008BFDC;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A1664;
  aBlock[3] = &unk_100661CE8;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v11);
  return swift_release();
}

void sub_10008B660(uint64_t a1, void *a2)
{
  id v3 = *(id *)(a1 + OBJC_IVAR____TtC3asd15ContactsManager__contact);
  *(void *)(a1 + OBJC_IVAR____TtC3asd15ContactsManager__contact) = a2;
  id v2 = a2;
}

uint64_t sub_10008B6A8(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100045FF4();
  uint64_t v21 = v6;
  uint64_t v22 = v5;
  __chkstk_darwin(v5);
  sub_100046348();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  sub_100046338();
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8 - 8);
  sub_100046338();
  sub_10002E768(&qword_100699D10);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_10058F340;
  *(void *)(v9 + 32) = CNContactGivenNameKey;
  *(void *)(v9 + 40) = CNContactFamilyNameKey;
  *(void *)(v9 + 48) = CNContactPhoneNumbersKey;
  *(void *)(v9 + 56) = CNContactEmailAddressesKey;
  *(void *)(v9 + 64) = CNContactPostalAddressesKey;
  uint64_t v25 = v9;
  specialized Array._endMutation()();
  *(void *)(v2 + 24) = v25;
  uint64_t v20 = OBJC_IVAR____TtC3asd15ContactsManager_accessQueue;
  sub_1000362B0(0, (unint64_t *)&qword_10069A360);
  uint64_t v10 = CNContactGivenNameKey;
  uint64_t v11 = CNContactFamilyNameKey;
  uint64_t v12 = CNContactPhoneNumbersKey;
  uint64_t v13 = CNContactEmailAddressesKey;
  uint64_t v14 = CNContactPostalAddressesKey;
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
  *(void *)(v2 + v20) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v2 + OBJC_IVAR____TtC3asd15ContactsManager__contact) = 0;
  *(void *)(v2 + 16) = a1;
  uint64_t v15 = v2 + OBJC_IVAR____TtC3asd15ContactsManager_logger;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, a2, v16);
  id v18 = a1;
  sub_10008BC30();

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, v16);
  return v4;
}

void sub_10008B978(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Registering observer for MeCard change", v8, 2u);
    swift_slowDealloc();
  }

  id v9 = [self defaultCenter];
  uint64_t v10 = CNContactStoreMeContactDidChangeNotification;
  id v11 = [self mainQueue];
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = v3;
  void v12[3] = a1;
  v12[4] = a2;
  v15[4] = sub_10008C094;
  uint64_t v15[5] = v12;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  void v15[2] = sub_1000AC1D4;
  v15[3] = &unk_100661DB0;
  uint64_t v13 = _Block_copy(v15);
  swift_retain();
  swift_retain();
  swift_release();
  id v14 = [v9 addObserverForName:v10 object:0 queue:v11 usingBlock:v13];
  _Block_release(v13);
  swift_unknownObjectRelease();
}

uint64_t sub_10008BB6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = sub_10008BC30();
  if (result)
  {
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "MeContactDidChange notification received. Triggering handler.", v7, 2u);
      swift_slowDealloc();
    }

    return a3();
  }
  return result;
}

uint64_t sub_10008BC30()
{
  id v1 = *(id *)(v0 + 16);
  sub_10002E768(&qword_100699D00);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v13 = 0;
  id v3 = [v1 _crossPlatformUnifiedMeContactWithKeysToFetch:isa error:&v13];

  if (!v3)
  {
    id v10 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  id v4 = v13;
  id v5 = v3;
  uint64_t v6 = sub_10008B2D4();
  if (v6)
  {
    os_log_type_t v7 = (void *)v6;
    sub_1000362B0(0, &qword_100699D08);
    id v8 = v5;
    char v9 = static NSObject.== infix(_:_:)();

    if (v9)
    {

      return 0;
    }
  }
  else
  {
  }
  id v12 = v5;
  sub_10008B48C(v3);

  return 1;
}

uint64_t sub_10008BDA8()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC3asd15ContactsManager_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t sub_10008BE3C()
{
  sub_10008BDA8();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10008BE94()
{
  return type metadata accessor for ContactsManager();
}

uint64_t type metadata accessor for ContactsManager()
{
  uint64_t result = qword_100699C00;
  if (!qword_100699C00) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008BEE4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10008BF9C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10008BFDC()
{
  sub_10008B660(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10008BFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10008BFF4()
{
  return swift_release();
}

uint64_t sub_10008BFFC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10008C034()
{
  sub_10008B440(*(id **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10008C03C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C04C()
{
  return sub_1000A1614(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10008C054()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10008C094(uint64_t a1)
{
  return sub_10008BB6C(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t sub_10008C0B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!v3 & v2)
  {
    switch(a1)
    {
      case 428:
        id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpPreconditionRequired(_:);
        break;
      case 429:
        id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpTooManyRequests(_:);
        break;
      case 430:
      case 431:
      case 432:
        goto LABEL_11;
      case 433:
        id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpAuthKitReprovision(_:);
        break;
      case 434:
        id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpAuthKitResync(_:);
        break;
      default:
        switch(a1)
        {
          case 304:
            id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpNotModified(_:);
            break;
          case 301:
            id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpMovedPermanently(_:);
            break;
          case 200:
            id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpSuccess(_:);
            break;
          default:
LABEL_11:
            *a2 = a1;
            id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpUnknownStatus(_:);
            break;
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 500:
        id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpInternalServerError(_:);
        break;
      case 501:
        id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpNotImplemented(_:);
        break;
      case 502:
        id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpBadGateway(_:);
        break;
      case 503:
        id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpServiceUnavailable(_:);
        break;
      case 504:
        id v5 = (unsigned int *)&enum case for HTTPStatusCode.httpGatewayTimeout(_:);
        break;
      default:
        JUMPOUT(0);
    }
  }
  uint64_t v6 = *v5;
  uint64_t v7 = type metadata accessor for HTTPStatusCode();
  id v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104);

  return v8(a2, v6, v7);
}

uint64_t sub_10008C2C8(uint64_t a1, void *a2)
{
  sub_100058144(v28);
  uint64_t v3 = v28[0];
  uint64_t v4 = v28[1];
  int64_t v5 = v28[3];
  unint64_t v6 = v28[4];
  int64_t v7 = (unint64_t)(v28[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  id v29 = a2 + 7;
  int64_t v25 = v7;
  uint64_t v26 = v4;
  while (1)
  {
LABEL_2:
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v5 << 6);
    }
    else
    {
      int64_t v11 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_40;
      }
      if (v11 >= v7) {
        goto LABEL_38;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v11);
      int64_t v13 = v5 + 1;
      if (!v12)
      {
        int64_t v13 = v5 + 2;
        if (v5 + 2 >= v7) {
          goto LABEL_38;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v5 + 3;
          if (v5 + 3 >= v7) {
            goto LABEL_38;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v5 + 4;
            if (v5 + 4 >= v7) {
              goto LABEL_38;
            }
            unint64_t v12 = *(void *)(v4 + 8 * v13);
            if (!v12)
            {
              int64_t v13 = v5 + 5;
              if (v5 + 5 >= v7) {
                goto LABEL_38;
              }
              unint64_t v12 = *(void *)(v4 + 8 * v13);
              if (!v12)
              {
                int64_t v14 = v5 + 6;
                while (v14 < v7)
                {
                  unint64_t v12 = *(void *)(v4 + 8 * v14++);
                  if (v12)
                  {
                    int64_t v13 = v14 - 1;
                    goto LABEL_19;
                  }
                }
LABEL_38:
                swift_bridgeObjectRelease();
                swift_release();
                return 0;
              }
            }
          }
        }
      }
LABEL_19:
      unint64_t v6 = (v12 - 1) & v12;
      unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
      int64_t v5 = v13;
    }
    uint64_t v15 = a2[2];
    if (v15)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      BOOL v19 = a2[4] == *v16 && a2[5] == v18;
      if (v19 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_36:
        swift_release();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v15 != 1) {
        break;
      }
    }
  }
  uint64_t v27 = v5;
  uint64_t v20 = v3;
  uint64_t v21 = v29;
  uint64_t v22 = 1;
  while (1)
  {
    uint64_t v23 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (*(v21 - 1) == v17 && *v21 == v18) {
      goto LABEL_36;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_36;
    }
    v21 += 2;
    ++v22;
    if (v23 == v15)
    {
      uint64_t v3 = v20;
      int64_t v7 = v25;
      uint64_t v4 = v26;
      int64_t v5 = v27;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10008C4E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = swift_beginAccess();
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a1 + 40;
    uint64_t v17 = v2;
    uint64_t v15 = v2 - 1;
    uint64_t v16 = _swiftEmptyArrayStorage;
    do
    {
      unint64_t v6 = (uint64_t *)(v5 + 16 * v4);
      unint64_t v7 = v4;
      while (1)
      {
        if (v7 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return result;
        }
        uint64_t v8 = *(v6 - 1);
        uint64_t v9 = *v6;
        unint64_t v4 = v7 + 1;
        sub_100036264();
        swift_bridgeObjectRetain();
        if (!StringProtocol.caseInsensitiveCompare<A>(_:)()) {
          break;
        }
        uint64_t result = swift_bridgeObjectRelease();
        v6 += 2;
        ++v7;
        if (v17 == v4) {
          goto LABEL_15;
        }
      }
      unint64_t v10 = v16;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_1000A52D8(0, v16[2] + 1, 1);
        unint64_t v10 = v16;
      }
      unint64_t v12 = v10[2];
      unint64_t v11 = v10[3];
      unint64_t v13 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        uint64_t result = (uint64_t)sub_1000A52D8((char *)(v11 > 1), v12 + 1, 1);
        unint64_t v13 = v12 + 1;
        unint64_t v10 = v16;
      }
      _OWORD v10[2] = v13;
      uint64_t v16 = v10;
      int64_t v14 = &v10[2 * v12];
      void v14[4] = v8;
      v14[5] = v9;
      uint64_t v5 = a1 + 40;
    }
    while (v15 != v7);
  }
  else
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_10008C698()
{
  sub_10003F0F4();
  v1[21] = v2;
  v1[22] = v0;
  uint64_t v3 = type metadata accessor for AssessmentConfig.Sources();
  v1[23] = v3;
  sub_100031774(v3);
  v1[24] = v4;
  v1[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v1[26] = v5;
  sub_100031774(v5);
  v1[27] = v6;
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10008C7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, _DWORD *a19, uint64_t a20,uint64_t a21,NSObject *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_100094484();
  a34 = v36;
  a35 = v37;
  a33 = v35;
  uint64_t v38 = *(void *)(v35 + 168);
  if (!*(void *)(v38 + 16))
  {
    uint64_t v151 = *(void *)(v35 + 176);
    *(void *)(v35 + 160) = _swiftEmptyDictionarySingleton;
    uint64_t v152 = type metadata accessor for BindingsGuesser();
    sub_10002EAE0((void *)(v151 + *(int *)(v152 + 24)), *(void *)(v151 + *(int *)(v152 + 24) + 24));
    uint64_t v153 = (void *)swift_task_alloc();
    *(void *)(v35 + 656) = v153;
    *uint64_t v153 = v35;
    v153[1] = sub_10008FFD0;
LABEL_73:
    sub_100093E14();
    return BindingsHelpers.getStaticBindings(bindings:excludeAppleID:)(v154, v155, v156, v157, v158, v159, v160, v161, a9, a10, a11, a12, a13, a14, a15, a16, a17, *((void *)&a17 + 1), a18,
             a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27);
  }
  a12 = v35 + 96;
  char v39 = *(unsigned char *)(v38 + 32);
  a16 = v35 + 120;
  a10 = v35 + 136;
  *(unsigned char *)(v35 + 688) = v39;
  uint64_t v40 = 1 << v39;
  if (v40 < 64) {
    uint64_t v41 = ~(-1 << v40);
  }
  else {
    uint64_t v41 = -1;
  }
  uint64_t v42 = v41 & *(void *)(v38 + 64);
  *(_DWORD *)(v35 + 664) = enum case for AssessmentConfig.Sources.accountsiCloud(_:);
  *(_DWORD *)(v35 + 668) = enum case for AssessmentConfig.Sources.accountsiTunes(_:);
  *(_DWORD *)(v35 + 672) = enum case for AssessmentConfig.Sources.CoreTelephony(_:);
  *(_DWORD *)(v35 + 676) = enum case for AssessmentConfig.Sources.MeCard(_:);
  uint64_t v43 = ACAccountTypeIdentifierAppleAccount;
  *(void *)(v35 + 288) = ACAccountTypeIdentifieriTunesStore;
  *(void *)(v35 + 296) = v43;
  unint64_t v44 = swift_bridgeObjectRetain();
  a19 = 0;
  uint64_t v52 = 0;
  char v53 = _swiftEmptyDictionarySingleton;
  *(void *)&long long v54 = 136315138;
  a17 = v54;
  a11 = (char *)&type metadata for Any + 8;
  a13 = (void *)(v35 + 144);
  while (1)
  {
    *(void *)(v35 + 304) = v53;
    if (v42) {
      goto LABEL_17;
    }
    BOOL v55 = __OFADD__(v52++, 1);
    if (v55) {
      goto LABEL_94;
    }
    unint64_t v56 = (1 << *(unsigned char *)(v35 + 688)) + 63;
    unint64_t v44 = *(void *)(v35 + 168);
    if (v52 >= (uint64_t)(v56 >> 6)) {
      break;
    }
    unint64_t v57 = v44 + 64;
    if (!*(void *)(v44 + 64 + 8 * v52))
    {
      int64_t v58 = v56 >> 6;
      uint64_t v59 = v52 + 1;
      if (v52 + 1 >= v58) {
        break;
      }
      if (!*(void *)(v57 + 8 * v59))
      {
        uint64_t v59 = v52 + 2;
        if (v52 + 2 >= v58) {
          break;
        }
        if (!*(void *)(v57 + 8 * v59))
        {
          uint64_t v59 = v52 + 3;
          if (v52 + 3 >= v58) {
            break;
          }
          if (!*(void *)(v57 + 8 * v59))
          {
            while (1)
            {
              uint64_t v52 = v59 + 1;
              if (__OFADD__(v59, 1)) {
                goto LABEL_96;
              }
              if (v52 >= v58) {
                goto LABEL_84;
              }
              ++v59;
              if (*(void *)(v57 + 8 * v52)) {
                goto LABEL_17;
              }
            }
          }
        }
      }
      uint64_t v52 = v59;
    }
LABEL_17:
    sub_10009421C(v52);
    uint64_t v61 = *v60;
    *(void *)(v35 + 328) = *v60;
    unint64_t v62 = v60[1];
    *(void *)(v35 + 336) = v62;
    *(void *)(v35 + 344) = *(void *)(*(void *)(v63 + 56) + 8 * v64);
    uint64_t v66 = sub_100093F1C(v65);
    v67(v66);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    uint64_t v70 = (_DWORD *)v69;
    BOOL v71 = os_log_type_enabled(v68, v69);
    uint64_t v72 = *(void *)(v35 + 280);
    uint64_t v73 = *(void *)(v35 + 216);
    if (v71)
    {
      a22 = *(NSObject **)(v35 + 280);
      uint64_t v72 = sub_100033734();
      char v53 = (void *)sub_10003371C();
      a23 = v53;
      *(_DWORD *)uint64_t v72 = a17;
      swift_bridgeObjectRetain();
      *(void *)(v72 + 4) = sub_100032B48(v61, v62, (uint64_t *)&a23);
      swift_bridgeObjectRelease_n();
      sub_10009426C();
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v70, "handleFetchBindings guessing for key %s", (uint8_t *)v72, 0xCu);
      swift_arrayDestroy();
      sub_100033704();
      sub_100033704();

      sub_10009454C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_10009426C();

      uint64_t v68 = *(NSObject **)(v73 + 8);
    }
    sub_100094534();
    ((void (*)(void))v68)();
    sub_1000940F4();
    if (v74)
    {
      sub_1000944F0();
      sub_1000944C4();
      a22 = v68;
      a20 = (uint64_t)v68;
      a21 = (uint64_t)v68;
      uint64_t v77 = (void (*)(void))v68;
      uint64_t v78 = (void (*)(uint64_t))_swiftEmptyArrayStorage;
      while (1)
      {
        *(void *)(v35 + 416) = v76;
        *(void *)(v35 + 424) = v78;
        *(void *)(v35 + 400) = v75;
        *(void *)(v35 + 408) = v72;
        *(void *)(v35 + 384) = a19;
        *(void *)(v35 + 392) = v68;
        sub_100094188();
        if (v80)
        {
          __break(1u);
          goto LABEL_93;
        }
        sub_100093F88(v79);
        if (v81) {
          break;
        }
LABEL_45:
        uint64_t v122 = *(_DWORD **)(v35 + 384);
        uint64_t v123 = swift_bridgeObjectRetain();
        a19 = v122;
        uint64_t v68 = *(NSObject **)(sub_10008C4E0(v123) + 16);
        swift_bridgeObjectRelease();
        if (v68)
        {
          uint64_t v124 = sub_100093F3C();
          v125(v124);
          uint64_t v126 = (void *)Logger.logObject.getter();
          os_log_type_t v127 = static os_log_type_t.debug.getter();
          BOOL v128 = sub_100051E9C(v127);
          uint64_t v72 = *(void *)(v35 + 224);
          char v53 = *(void **)(v35 + 208);
          if (v128)
          {
            uint64_t v129 = (_DWORD *)sub_100033734();
            a23 = (void *)sub_10003371C();
            *uint64_t v129 = a17;
            uint64_t v72 = (uint64_t)(v129 + 3);
            uint64_t v70 = v129 + 1;
            uint64_t v131 = *(void *)(v35 + 120);
            unint64_t v130 = *(void *)(v35 + 128);
            swift_bridgeObjectRetain();
            *(void *)(v35 + 136) = sub_100032B48(v131, v130, (uint64_t *)&a23);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10009401C();
            sub_100078EE4(v132, v133, v134, "fetchBindings similar value already present, skipping %s");
            sub_100078E84();
            sub_100033704();
            sub_100033704();

            sub_10003F240();
            v135();
            uint64_t v68 = *(NSObject **)(v35 + 368);
          }
          else
          {
            uint64_t v139 = *(void (**)(void))(v35 + 392);

            sub_100093F10();
            v139();
            uint64_t v68 = *(NSObject **)(v35 + 392);
          }
          sub_1000944C4();
          uint64_t v78 = *(void (**)(uint64_t))(v35 + 424);
          a22 = v68;
          a20 = (uint64_t)v68;
          a21 = (uint64_t)v68;
          uint64_t v77 = (void (*)(void))v68;
        }
        else
        {
          sub_100094200();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v78 = *(void (**)(uint64_t))(v35 + 424);
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10009437C();
            uint64_t v78 = v140;
          }
          unint64_t v138 = *((void *)v78 + 2);
          unint64_t v137 = *((void *)v78 + 3);
          if (v138 >= v137 >> 1)
          {
            sub_1000945E4(v137);
            sub_10003BEAC();
            uint64_t v78 = v141;
          }
          *((void *)v78 + 2) = v138 + 1;
          sub_100094660((uint64_t)v78 + 16 * v138);
        }
        sub_1000940B8();
        if (v90)
        {
          swift_bridgeObjectRelease();
          goto LABEL_59;
        }
      }
      uint64_t v82 = *(void *)(v35 + 192);
      *(_DWORD *)(v35 + 680) = *(_DWORD *)(v82 + 80);
      *(void *)(v35 + 448) = *(void *)(v82 + 72);
      *(void *)(v35 + 456) = *(void *)(v82 + 16);
      swift_bridgeObjectRetain();
      uint64_t v83 = 0;
      a19 = v70;
      while (1)
      {
        *(void *)(v35 + 528) = v83;
        *(void *)(v35 + 520) = v77;
        *(void *)(v35 + 504) = v77;
        *(void *)(v35 + 512) = v77;
        *(void *)(v35 + 488) = a21;
        *(void *)(v35 + 496) = a20;
        *(void *)(v35 + 472) = v70;
        *(void *)(v35 + 480) = a22;
        *(void *)(v35 + 464) = v53;
        int v84 = *(_DWORD *)(v35 + 664);
        uint64_t v85 = *(void *)(v35 + 184);
        uint64_t v86 = *(void *)(v35 + 192);
        uint64_t v87 = *(void *)(v35 + 200);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v35 + 456))(v87, *(void *)(v35 + 432)+ ((*(unsigned __int8 *)(v35 + 680) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 680))+ *(void *)(v35 + 448) * v83, v85);
        char v89 = *(unsigned int (**)(uint64_t, uint64_t))(v86 + 88);
        uint64_t v88 = v86 + 88;
        if (v89(v87, v85) == v84)
        {
          sub_1000942B0();
          sub_100094238();
          uint64_t v162 = sub_100093EDC();
          sub_1000943DC(v162, v163);
          uint64_t v164 = swift_task_alloc();
          uint64_t v165 = (void *)sub_1000944A0(v164);
          *uint64_t v165 = v166;
          uint64_t v167 = sub_10008D3E8;
          goto LABEL_78;
        }
        sub_100094690();
        if (v90) {
          break;
        }
        sub_100094678();
        if (v90)
        {
          uint64_t v180 = type metadata accessor for ODIDeviceInfo();
          sub_10009460C(v180);
          uint64_t v181 = swift_task_alloc();
          uint64_t v182 = (void *)sub_1000944B8(v181);
          *uint64_t v182 = v183;
          v182[1] = sub_10008EED8;
          sub_100093E14();
          return static ODIDeviceInfo.shared.getter(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14, a15, a16, a17, *((void *)&a17 + 1), a18,
                   a19,
                   a20,
                   a21,
                   a22,
                   a23,
                   a24,
                   a25,
                   a26,
                   a27);
        }
        sub_10009466C();
        if (v90)
        {
          uint64_t v91 = sub_100094630();
          if (v92)
          {
            sub_100093EB0(v91, v92);
            uint64_t v93 = sub_100093F4C();
            v78(v93);
            uint64_t v94 = Logger.logObject.getter();
            os_log_type_t v95 = static os_log_type_t.debug.getter();
            BOOL v96 = sub_100079378(v95);
            uint64_t v97 = *(void *)(v35 + 248);
            uint64_t v98 = *(void *)(v35 + 208);
            uint64_t v88 = *(void *)(v35 + 216);
            if (v96)
            {
              a15 = v88 + 8;
              uint64_t v88 = sub_100033734();
              a23 = (void *)sub_10003371C();
              *(_DWORD *)uint64_t v88 = a17;
              a14 = v97;
              uint64_t v99 = v53;
              uint64_t v100 = *(void *)(v35 + 120);
              unint64_t v101 = *(void *)(v35 + 128);
              swift_bridgeObjectRetain();
              uint64_t v102 = v100;
              uint64_t v70 = a19;
              *(void *)(v88 + 4) = sub_100032B48(v102, v101, (uint64_t *)&a23);
              char v53 = v99;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v94, (os_log_type_t)v78, "fetchBindings found value from Me Card = %s", (uint8_t *)v88, 0xCu);
              swift_arrayDestroy();
              sub_100033704();
              sub_100033704();

              uint64_t v103 = a14;
            }
            else
            {

              uint64_t v103 = v97;
            }
            ((void (*)(uint64_t, uint64_t))v77)(v103, v98);
          }
        }
        else
        {
          uint64_t v104 = sub_100093F3C();
          v105(v104);
          uint64_t v106 = (void *)Logger.logObject.getter();
          os_log_type_t v107 = static os_log_type_t.debug.getter();
          if (sub_100051E9C(v107))
          {
            uint64_t v109 = (_WORD *)sub_100051AA0();
            sub_100078C08(v109);
            sub_10009401C();
            sub_10005A05C(v110, v111, v112, "fetchBindings no value found");
            sub_100033704();
          }
          uint64_t v88 = *(void *)(v35 + 200);
          uint64_t v78 = *(void (**)(uint64_t))(v35 + 184);

          sub_100093F10();
          v77();
          uint64_t v113 = sub_100094558();
          v114(v113);
          uint64_t v70 = a19;
        }
        sub_100093FC4();
        if (v115)
        {
          sub_100093FA0();
          uint64_t v116 = sub_100093F4C();
          v78(v116);
          Logger.logObject.getter();
          os_log_type_t v117 = static os_log_type_t.debug.getter();
          if (sub_100051E9C(v117))
          {
            uint64_t v118 = (_WORD *)sub_100051AA0();
            sub_100078C08(v118);
            sub_10009401C();
            sub_10005A05C(v119, v120, v121, "fetchBindings value found, skipping to next key");
            sub_100033704();
          }
          sub_1000941A8();
          sub_100093F10();
          ((void (*)(void))v88)();
          uint64_t v72 = *(void *)(v35 + 400);
          sub_100094310();
          a20 = v72;
          a21 = v72;
          uint64_t v77 = (void (*)(void))v72;
          goto LABEL_45;
        }
        sub_100094090();
        if (v90)
        {
          swift_bridgeObjectRelease();
          uint64_t v72 = *(void *)(v35 + 408);
          goto LABEL_45;
        }
      }
      sub_100094284();
      sub_100094238();
      uint64_t v168 = sub_100093EDC();
      sub_1000943EC(v168, v169);
      uint64_t v170 = swift_task_alloc();
      uint64_t v165 = (void *)sub_1000944AC(v170);
      *uint64_t v165 = v171;
      uint64_t v167 = sub_10008E140;
LABEL_78:
      v165[1] = v167;
      sub_100093F70();
      sub_100093E14();
      return dispatch thunk of ODIAccountManagerProtocol.getAccount(with:)(v172, v173, v174, v175, v176, v177, v178, v179, a9, a10, a11, a12, a13, a14, a15, a16, a17, *((void *)&a17 + 1), a18,
               a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26,
               a27);
    }
    swift_bridgeObjectRelease();
    uint64_t v78 = (void (*)(uint64_t))_swiftEmptyArrayStorage;
LABEL_59:
    char v142 = sub_100093FDC();
    sub_100093E90();
    sub_1000940A4();
    if (v55)
    {
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
      return static ODIDeviceInfo.shared.getter(v44, v45, v46, v47, v48, v49, v50, v51, a9, a10, a11, a12, a13, a14, a15, a16, a17, *((void *)&a17 + 1), a18,
               a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26,
               a27);
    }
    unint64_t v143 = v44;
    char v144 = v45;
    sub_10002E768(&qword_100699D20);
    unint64_t v44 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v142, (Swift::Int)v68);
    if (v44)
    {
      unint64_t v44 = sub_100094648();
      if ((v144 & 1) != (v45 & 1))
      {
        sub_100093E14();
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      unint64_t v143 = v44;
    }
    char v53 = (void *)*a13;
    if (v144)
    {
      uint64_t v145 = v53[7];
      swift_bridgeObjectRelease();
      *(void *)(v145 + 8 * v143) = v78;
    }
    else
    {
      uint64_t v147 = *(void *)(v35 + 328);
      uint64_t v146 = *(void *)(v35 + 336);
      v53[(v143 >> 6) + 8] |= 1 << v143;
      uint64_t v148 = (void *)(v53[6] + 16 * v143);
      *uint64_t v148 = v147;
      v148[1] = v146;
      *(void *)(v53[7] + 8 * v143) = v78;
      uint64_t v149 = v53[2];
      BOOL v55 = __OFADD__(v149, 1);
      uint64_t v150 = v149 + 1;
      if (v55) {
        goto LABEL_95;
      }
      v53[2] = v150;
      swift_bridgeObjectRetain();
    }
    sub_1000944D8();
    swift_bridgeObjectRelease();
    unint64_t v44 = swift_bridgeObjectRelease();
    uint64_t v52 = *(void *)(v35 + 312);
    uint64_t v42 = *(void *)(v35 + 320);
  }
LABEL_84:
  swift_release();
  uint64_t v184 = sub_100091F7C();
  swift_bridgeObjectRelease();
  uint64_t v185 = sub_1000B15EC(v184);
  sub_1000941E4((uint64_t)v185);
  sub_100094684();
  if (v186)
  {
    uint64_t v187 = sub_100094618();
    uint64_t v188 = (void *)sub_100094198(v187);
    sub_100093E30(v188, (uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain();
    uint64_t v189 = swift_task_alloc();
    uint64_t v190 = (void *)sub_100094304(v189);
    *uint64_t v190 = v191;
    v190[1] = sub_10008FCFC;
    sub_100093F5C();
    goto LABEL_73;
  }
  swift_bridgeObjectRelease();
  sub_100093FF8();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100049018();
  sub_100093E14();
  return v194(v192, v193, v194, v195, v196, v197, v198, v199, a9, a10, a11, a12, a13, a14, a15, a16, a17, *((void *)&a17 + 1), a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27);
}

uint64_t sub_10008D3E8()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_1000943FC();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  *(void *)(v6 + 552) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10008D4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(void), void (*a13)(void), void (*a14)(void), uint64_t a15, uint64_t a16, _DWORD *a17, uint8_t *a18, long long a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_100094484();
  a34 = v38;
  a35 = v39;
  a33 = v36;
  sub_1000943C4();
  uint64_t v213 = v36 + 144;
  uint64_t v41 = *(void **)(v36 + 552);
  v211 = (void *)v40;
  if (!v41)
  {
    sub_10002EB9C(v40);
LABEL_7:
    v214 = *(void (**)(void))(v36 + 520);
    char v53 = *(void (**)(void))(v36 + 504);
    v212 = *(void (**)(void))(v36 + 512);
    uint64_t v55 = *(void *)(v36 + 488);
    long long v54 = *(uint8_t **)(v36 + 496);
    unint64_t v57 = *(void (**)(void))(v36 + 472);
    unint64_t v56 = *(void (**)(void))(v36 + 480);
    uint64_t v52 = *(void (**)(void))(v36 + 464);
    goto LABEL_10;
  }
  id v42 = sub_100094564(v40);
  if (!v43)
  {

    goto LABEL_7;
  }
  uint64_t v45 = *(void (**)(uint64_t, void (*)(void), uint64_t))(v36 + 352);
  uint64_t v44 = *(void *)(v36 + 360);
  uint64_t v46 = *(void *)(v36 + 272);
  sub_1000943A0((uint64_t)v42, v43);
  v45(v46, v37, v35);
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  BOOL v49 = sub_100079378(v48);
  uint64_t v37 = *(void (**)(void))(v36 + 208);
  if (v49)
  {
    uint64_t v50 = sub_100033734();
    a23 = sub_10003371C();
    *(_DWORD *)uint64_t v50 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v50 + 4) = sub_100094418();
    swift_bridgeObjectRelease();
    sub_100078EE4((void *)&_mh_execute_header, v47, (os_log_type_t)v44, "fetchBindings found value from Accounts.iCloud = %s");
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();

    sub_100094540();
    sub_10003F240();
    v51();
    uint64_t v52 = *(void (**)(void))(v36 + 408);
  }
  else
  {
    int64_t v58 = *(void (**)(void))(v36 + 464);

    sub_100093F10();
    v58();
    uint64_t v52 = *(void (**)(void))(v36 + 464);
  }
  unint64_t v57 = v52;
  unint64_t v56 = v52;
  uint64_t v55 = (uint64_t)v52;
  long long v54 = (uint8_t *)v52;
  char v53 = v52;
  v212 = v52;
  v214 = v52;
LABEL_10:
  sub_100093FC4();
  if (v59)
  {
    sub_100093FA0();
    uint64_t v60 = sub_100093F4C();
    ((void (*)(uint64_t))v56)(v60);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (sub_100051E9C(v62))
    {
      uint64_t v63 = (_WORD *)sub_100051AA0();
      sub_100078C08(v63);
      sub_10005A05C((void *)&_mh_execute_header, v61, (os_log_type_t)v52, "fetchBindings value found, skipping to next key");
      sub_100033704();
    }
    sub_1000941A8();
    sub_100093F10();
    v37();
    uint64_t v37 = *(void (**)(void))(v36 + 400);
    uint64_t v52 = v37;
    a14 = v37;
    v212 = v37;
    unint64_t v56 = v37;
    uint64_t v55 = (uint64_t)v37;
    sub_100094310();
  }
  else
  {
    sub_100094090();
    if (!v65)
    {
      a13 = v52;
      uint64_t v52 = *(void (**)(void))(v36 + 448);
      uint64_t v37 = *(void (**)(void))(v36 + 456);
      sub_100094320();
      goto LABEL_67;
    }
    a14 = v57;
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(void))(v36 + 408);
  }
  uint64_t v66 = *(_DWORD **)(v36 + 384);
  *(void *)&long long v64 = 136315138;
  a19 = v64;
  a18 = (uint8_t *)&type metadata for Any + 8;
  while (1)
  {
    uint64_t v67 = swift_bridgeObjectRetain();
    a17 = v66;
    uint64_t v68 = *(void (**)(void))(sub_10008C4E0(v67) + 16);
    swift_bridgeObjectRelease();
    if (v68)
    {
      uint64_t v69 = sub_100093F3C();
      v70(v69);
      BOOL v71 = Logger.logObject.getter();
      os_log_type_t v72 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v214 = *(void (**)(void))(v36 + 368);
        long long v54 = (uint8_t *)sub_100033734();
        uint64_t v73 = sub_10003371C();
        sub_1000945BC(v73);
        *uint64_t v66 = a19;
        char v53 = (void (*)(void))(v54 + 4);
        uint64_t v55 = *(void *)(v36 + 120);
        unint64_t v74 = *(void *)(v36 + 128);
        swift_bridgeObjectRetain();
        *(void *)(v36 + 136) = sub_100032B48(v55, v74, &a23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "fetchBindings similar value already present, skipping %s", v54, 0xCu);
        swift_arrayDestroy();
        sub_100033704();
        sub_100033704();

        sub_10003F240();
        v75();
        uint64_t v68 = *(void (**)(void))(v36 + 368);
      }
      else
      {
        uint64_t v82 = *(void (**)(void))(v36 + 392);

        sub_100093F10();
        v82();
        uint64_t v68 = *(void (**)(void))(v36 + 392);
      }
      uint64_t v37 = v68;
      uint64_t v79 = *(void **)(v36 + 424);
      uint64_t v52 = v68;
      a14 = v68;
      v212 = v68;
      unint64_t v56 = v68;
      sub_10009407C();
    }
    else
    {
      a12 = v53;
      a13 = v52;
      uint64_t v76 = v54;
      uint64_t v77 = v55;
      sub_100094200();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v79 = *(void **)(v36 + 424);
      char v80 = v56;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100094348();
        uint64_t v79 = v141;
      }
      unint64_t v81 = v79[2];
      if (v81 >= v79[3] >> 1)
      {
        sub_10003BEAC();
        uint64_t v79 = v142;
      }
      v79[2] = v81 + 1;
      sub_100094660((uint64_t)&v79[2 * v81]);
      unint64_t v56 = v80;
      uint64_t v55 = v77;
      long long v54 = v76;
      char v53 = a12;
    }
    sub_1000940B8();
    if (v65) {
      break;
    }
LABEL_64:
    *(void *)(v36 + 416) = v84;
    *(void *)(v36 + 424) = v79;
    *(void *)(v36 + 400) = v83;
    *(void *)(v36 + 408) = v37;
    uint64_t v66 = a17;
    *(void *)(v36 + 384) = a17;
    *(void *)(v36 + 392) = v68;
    sub_100094188();
    if (v139)
    {
LABEL_102:
      __break(1u);
      return static ODIDeviceInfo.shared.getter(v94, v95, v96, v97, v98, v99, v100, v101, v211, a10, a11, a12, a13, a14, v212, a16, a17, a18, a19,
               *((void *)&a19 + 1),
               a20,
               v213,
               v214,
               a23,
               a24,
               a25,
               a26,
               a27);
    }
    sub_100093F88(v138);
    if (v140)
    {
      sub_100094158();
      uint64_t v143 = 0;
      unint64_t v57 = a14;
LABEL_67:
      sub_1000942A0(v143);
      *(void *)(v36 + 504) = v53;
      *(void *)(v36 + 512) = v212;
      *(void *)(v36 + 488) = v55;
      *(void *)(v36 + 496) = v54;
      *(void *)&a19 = v56;
      *(void *)(v36 + 472) = v57;
      *(void *)(v36 + 480) = v56;
      *(void *)(v36 + 464) = a13;
      int v144 = *(_DWORD *)(v36 + 664);
      uint64_t v145 = sub_100093E64();
      ((void (*)(uint64_t))v37)(v145);
      uint64_t v146 = sub_1000940DC();
      if (v147(v146) == v144) {
        goto LABEL_91;
      }
      sub_100094690();
      if (v65)
      {
        sub_100094284();
        sub_100094238();
        uint64_t v193 = sub_100093EDC();
        sub_1000943EC(v193, v194);
        uint64_t v195 = swift_task_alloc();
        uint64_t v196 = (void *)sub_1000944AC(v195);
        *uint64_t v196 = v197;
        v196[1] = sub_10008E140;
        sub_100093F70();
        goto LABEL_93;
      }
      sub_100094678();
      if (v65)
      {
        uint64_t v206 = type metadata accessor for ODIDeviceInfo();
        sub_10009460C(v206);
        uint64_t v207 = swift_task_alloc();
        v208 = (void *)sub_1000944B8(v207);
        void *v208 = v209;
        v208[1] = sub_10008EED8;
        sub_100093E14();
        return static ODIDeviceInfo.shared.getter(v94, v95, v96, v97, v98, v99, v100, v101, v211, a10, a11, a12, a13, a14, v212, a16, a17, a18, a19,
                 *((void *)&a19 + 1),
                 a20,
                 v213,
                 v214,
                 a23,
                 a24,
                 a25,
                 a26,
                 a27);
      }
      sub_10009466C();
      if (v65)
      {
        uint64_t v148 = sub_100094630();
        unint64_t v56 = (void (*)(void))a19;
        uint64_t v52 = a13;
        if (v149)
        {
          sub_100093EB0(v148, v149);
          uint64_t v150 = sub_100093F4C();
          ((void (*)(uint64_t))a19)(v150);
          uint64_t v151 = Logger.logObject.getter();
          os_log_type_t v152 = static os_log_type_t.debug.getter();
          BOOL v153 = sub_100079378(v152);
          uint64_t v37 = *(void (**)(void))(v36 + 208);
          if (v153)
          {
            a18 = v54;
            a14 = v57;
            uint64_t v154 = sub_100033734();
            a23 = sub_10003371C();
            *(_DWORD *)uint64_t v154 = 136315138;
            uint64_t v155 = *(void *)(v36 + 120);
            uint64_t v37 = *(void (**)(void))(v36 + 128);
            swift_bridgeObjectRetain();
            *(void *)(v154 + 4) = sub_100032B48(v155, (unint64_t)v37, &a23);
            swift_bridgeObjectRelease();
            sub_100078EE4((void *)&_mh_execute_header, v151, (os_log_type_t)a19, "fetchBindings found value from Me Card = %s");
            sub_100078E84();
            sub_100033704();
            unint64_t v57 = a14;
            sub_100033704();

            sub_100093F10();
            v53();
            v212 = v53;
            v214 = v53;
          }
          else
          {

            sub_100094540();
            sub_100093F10();
            v212();
            v214 = v212;
          }
          unint64_t v56 = (void (*)(void))a19;
          uint64_t v52 = a13;
        }
      }
      else
      {
        a14 = v57;
        uint64_t v156 = sub_100093F3C();
        v157(v156);
        uint64_t v158 = Logger.logObject.getter();
        os_log_type_t v159 = static os_log_type_t.debug.getter();
        if (sub_100051E9C(v159))
        {
          uint64_t v161 = (_WORD *)sub_100051AA0();
          sub_100078C08(v161);
          sub_10005A05C((void *)&_mh_execute_header, v158, (os_log_type_t)v52, "fetchBindings no value found");
          sub_100033704();
        }
        uint64_t v37 = *(void (**)(void))(v36 + 200);

        sub_100093F10();
        v162();
        sub_10009436C();
        v163();
        unint64_t v56 = (void (*)(void))a19;
        uint64_t v52 = a13;
      }
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  sub_100093FDC();
  sub_100093E90();
  sub_1000940A4();
  char v53 = (void (*)(void))(v36 + 144);
  if (v87)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    type metadata accessor for ODIAccountManager();
    static ODIAccountManager.shared.getter();
    sub_10002EAE0(v211, *(void *)(v36 + 80));
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v36 + 536) = v189;
    uint64_t v190 = swift_task_alloc();
    uint64_t v191 = (void *)sub_1000944A0(v190);
    *uint64_t v191 = v192;
    v191[1] = sub_10008D3E8;
    sub_1000942EC();
LABEL_93:
    sub_100093E14();
    return dispatch thunk of ODIAccountManagerProtocol.getAccount(with:)(v198, v199, v200, v201, v202, v203, v204, v205, v211, a10, a11, a12, a13, a14, v212, a16, a17, a18, a19,
             *((void *)&a19 + 1),
             a20,
             v213,
             v214,
             a23,
             a24,
             a25,
             a26,
             a27);
  }
  unint64_t v88 = v85;
  char v89 = v86;
  while (1)
  {
    sub_10002E768(&qword_100699D20);
    if (!sub_10009459C()) {
      goto LABEL_35;
    }
    unint64_t v90 = sub_100094648();
    if ((v89 & 1) != (v91 & 1)) {
      break;
    }
    unint64_t v88 = v90;
LABEL_35:
    uint64_t v92 = *(void *)v53;
    if (v89)
    {
      uint64_t v93 = *(void *)(v92 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v93 + 8 * v88) = v79;
    }
    else
    {
      sub_100094520();
      uint64_t v103 = (void *)(v102 + 16 * v88);
      *uint64_t v103 = v105;
      v103[1] = v104;
      *(void *)(*(void *)(v92 + 56) + 8 * v88) = v79;
      uint64_t v106 = *(void *)(v92 + 16);
      BOOL v87 = __OFADD__(v106, 1);
      uint64_t v107 = v106 + 1;
      if (v87)
      {
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
        goto LABEL_102;
      }
      *(void *)(v92 + 16) = v107;
      swift_bridgeObjectRetain();
    }
    sub_1000944D8();
    swift_bridgeObjectRelease();
    uint64_t v94 = swift_bridgeObjectRelease();
    uint64_t v108 = *(void *)(v36 + 312);
    uint64_t v109 = *(void *)(v36 + 320);
    *(void *)(v36 + 304) = v92;
    if (v109)
    {
      uint64_t v110 = sub_100094044();
    }
    else
    {
      if (__OFADD__(v108, 1)) {
        goto LABEL_100;
      }
      sub_100094028();
      if (v112 == v87)
      {
LABEL_80:
        swift_release();
        uint64_t v164 = sub_100091F7C();
        swift_bridgeObjectRelease();
        uint64_t v165 = sub_1000B15EC(v164);
        sub_1000941E4((uint64_t)v165);
        sub_100094684();
        if (v166)
        {
          uint64_t v167 = sub_100094618();
          uint64_t v168 = (void *)sub_100094198(v167);
          sub_100093E30(v168, (uint64_t)_swiftEmptyArrayStorage);
          swift_bridgeObjectRetain();
          uint64_t v169 = swift_task_alloc();
          uint64_t v170 = (void *)sub_100094304(v169);
          *uint64_t v170 = v171;
          v170[1] = sub_10008FCFC;
          sub_100093F5C();
          sub_100093E14();
          return BindingsHelpers.getStaticBindings(bindings:excludeAppleID:)(v172, v173, v174, v175, v176, v177, v178, v179, v211, a10, a11, a12, a13, a14, v212, a16, a17, a18, a19,
                   *((void *)&a19 + 1),
                   a20,
                   v213,
                   v214,
                   a23,
                   a24,
                   a25,
                   a26,
                   a27);
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_100093FF8();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          sub_100049018();
          sub_100093E14();
          return v183(v181, v182, v183, v184, v185, v186, v187, v188, v211, a10, a11, a12, a13, a14, v212, a16, a17, a18, a19,
                   *((void *)&a19 + 1),
                   a20,
                   v213,
                   v214,
                   a23,
                   a24,
                   a25,
                   a26,
                   a27);
        }
      }
      sub_1000942DC();
      if (!v113)
      {
        sub_1000942CC();
        if (v112 == v87) {
          goto LABEL_80;
        }
        if (!*(void *)(v115 + 8 * v114))
        {
          if (v117 + 2 >= v116) {
            goto LABEL_80;
          }
          if (!*(void *)(v115 + 8 * (v117 + 2)))
          {
            uint64_t v118 = v117 + 3;
            if (v118 >= v116) {
              goto LABEL_80;
            }
            if (!*(void *)(v115 + 8 * v118))
            {
              do
              {
                uint64_t v119 = v118 + 1;
                if (__OFADD__(v118, 1)) {
                  goto LABEL_101;
                }
                if (v119 >= v116) {
                  goto LABEL_80;
                }
                ++v118;
              }
              while (!*(void *)(v115 + 8 * v119));
            }
          }
        }
      }
      sub_10009410C();
    }
    uint64_t v120 = sub_100094134(v110, v111);
    uint64_t v37 = *(void (**)(void))(v121 + 8);
    *(void *)(v36 + 336) = v37;
    *(void *)(v36 + 344) = *(void *)(*(void *)(v120 + 56) + 8 * v122);
    uint64_t v124 = sub_100093F1C(v123);
    v125(v124);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v68 = (void (*)(void))Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.debug.getter();
    BOOL v127 = sub_100051E9C(v126);
    BOOL v128 = *(void (**)(void))(v36 + 280);
    uint64_t v55 = *(void *)(v36 + 208);
    uint64_t v129 = *(void *)(v36 + 216);
    if (v127)
    {
      uint64_t v130 = sub_100033734();
      v214 = v128;
      a23 = sub_10003371C();
      *(_DWORD *)uint64_t v130 = a19;
      swift_bridgeObjectRetain();
      *(void *)(v130 + 4) = sub_100032B48((uint64_t)v54, (unint64_t)v37, &a23);
      swift_bridgeObjectRelease_n();
      sub_10009426C();
      sub_10009401C();
      sub_100094508(v131, v132, v133, "handleFetchBindings guessing for key %s");
      swift_arrayDestroy();
      sub_100033704();
      char v53 = (void (*)(void))(v36 + 144);
      sub_100033704();

      sub_10009454C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_10009426C();

      uint64_t v68 = *(void (**)(void))(v129 + 8);
    }
    sub_100094534();
    v68();
    sub_1000940F4();
    if (v134)
    {
      sub_1000944F0();
      sub_100094330();
      unint64_t v56 = v68;
      sub_10009407C();
      uint64_t v79 = _swiftEmptyArrayStorage;
      goto LABEL_64;
    }
    swift_bridgeObjectRelease();
    sub_100093FDC();
    unint64_t v88 = sub_100093E90();
    char v89 = v135;
    sub_10009440C();
    uint64_t v79 = _swiftEmptyArrayStorage;
    if (__OFADD__(v136, v137)) {
      goto LABEL_90;
    }
  }
  sub_100093E14();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_10008E140()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_1000943FC();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  *(void *)(v6 + 576) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10003F160();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_10008E224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v215 = v29;
  uint64_t v31 = v29 + 16;
  uint64_t v32 = *(void **)(v29 + 576);
  uint64_t v33 = (void (*)(uint64_t))&unk_10058C000;
  if (!v32)
  {
    sub_10002EB9C(v31);
LABEL_7:
    os_log_type_t v48 = *(uint8_t **)(v29 + 504);
    v211 = *(void (**)(void))(v29 + 512);
    uint64_t v46 = *(void (**)(void))(v29 + 488);
    uint64_t v47 = *(void *)(v29 + 496);
    uint64_t v44 = *(uint8_t **)(v29 + 472);
    uint64_t v45 = *(void (**)(void))(v29 + 480);
    goto LABEL_9;
  }
  id v34 = sub_100094564(v31);
  if (!v35)
  {

    goto LABEL_7;
  }
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 352);
  uint64_t v36 = *(void *)(v29 + 360);
  uint64_t v38 = *(void *)(v29 + 264);
  sub_1000943A0((uint64_t)v34, v35);
  v37(v38, v30, v28);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (sub_100079378(v40))
  {
    uint64_t v41 = sub_100033734();
    uint64_t v214 = sub_10003371C();
    *(_DWORD *)uint64_t v41 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v41 + 4) = sub_100094418();
    swift_bridgeObjectRelease();
    os_log_type_t v42 = v36;
    uint64_t v33 = (void (*)(uint64_t))&unk_10058C000;
    sub_100078EE4((void *)&_mh_execute_header, v39, v42, "fetchBindings found value from Accounts.iTunes = %s");
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();

    sub_100094540();
    sub_10003F240();
    v43();
    uint64_t v44 = *(uint8_t **)(v29 + 472);
    uint64_t v45 = (void (*)(void))v44;
    uint64_t v46 = (void (*)(void))v44;
    uint64_t v47 = (uint64_t)v44;
    os_log_type_t v48 = v44;
    v211 = (void (*)(void))v44;
  }
  else
  {
    BOOL v49 = *(void (**)(void))(v29 + 480);

    sub_100093F10();
    v49();
    uint64_t v44 = *(uint8_t **)(v29 + 472);
    uint64_t v45 = *(void (**)(void))(v29 + 480);
    uint64_t v46 = v45;
    uint64_t v47 = (uint64_t)v45;
    os_log_type_t v48 = (uint8_t *)v45;
    v211 = v45;
    uint64_t v33 = (void (*)(uint64_t))&unk_10058C000;
  }
LABEL_9:
  uint64_t v50 = *(void (**)(void))(v29 + 464);
  int v213 = *((void *)v33 + 329);
LABEL_10:
  sub_100093FC4();
  if (v51)
  {
    sub_100093FA0();
    uint64_t v52 = sub_100093F4C();
    v33(v52);
    Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (sub_100051E9C(v53))
    {
      long long v54 = (_WORD *)sub_100051AA0();
      sub_100078C08(v54);
      sub_10009401C();
      sub_10005A05C(v55, v56, v57, "fetchBindings value found, skipping to next key");
      sub_100033704();
    }
    sub_1000941A8();
    sub_100093F10();
    v46();
    int64_t v58 = *(void (**)(void))(v29 + 400);
    v210 = v58;
    v211 = v58;
    uint64_t v44 = (uint8_t *)v58;
    uint64_t v45 = v58;
    uint64_t v46 = v58;
    uint64_t v47 = (uint64_t)v58;
    os_log_type_t v48 = (uint8_t *)v58;
  }
  else
  {
    sub_100094090();
    if (!v59)
    {
      uint64_t v209 = (void (*)(void))v48;
      uint64_t v33 = *(void (**)(uint64_t))(v29 + 456);
      sub_100094320();
      goto LABEL_67;
    }
    v210 = v50;
    swift_bridgeObjectRelease();
    int64_t v58 = *(void (**)(void))(v29 + 408);
  }
  uint64_t v60 = *(_DWORD **)(v29 + 384);
  while (1)
  {
    uint64_t v61 = swift_bridgeObjectRetain();
    v212 = v60;
    os_log_type_t v62 = *(void (**)(void))(sub_10008C4E0(v61) + 16);
    swift_bridgeObjectRelease();
    if (v62)
    {
      uint64_t v63 = sub_100093F3C();
      v64(v63);
      char v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.debug.getter();
      BOOL v67 = os_log_type_enabled(v65, v66);
      os_log_type_t v48 = *(uint8_t **)(v29 + 216);
      uint64_t v46 = *(void (**)(void))(v29 + 224);
      if (v67)
      {
        v211 = (void (*)(void))(v48 + 8);
        uint64_t v44 = (uint8_t *)sub_100033734();
        uint64_t v68 = sub_10003371C();
        sub_1000945BC(v68);
        *uint64_t v60 = v213;
        uint64_t v45 = (void (*)(void))(v44 + 4);
        v210 = v46;
        uint64_t v47 = *(void *)(v29 + 120);
        uint64_t v46 = *(void (**)(void))(v29 + 128);
        swift_bridgeObjectRetain();
        *(void *)(v29 + 136) = sub_100032B48(v47, (unint64_t)v46, &v214);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "fetchBindings similar value already present, skipping %s", v44, 0xCu);
        swift_arrayDestroy();
        sub_100033704();
        sub_100033704();

        sub_10003F240();
        v69();
        os_log_type_t v62 = *(void (**)(void))(v29 + 368);
      }
      else
      {
        uint64_t v76 = *(void (**)(void))(v29 + 392);

        sub_100093F10();
        v76();
        os_log_type_t v62 = *(void (**)(void))(v29 + 392);
      }
      int64_t v58 = v62;
      uint64_t v73 = *(void **)(v29 + 424);
      sub_1000941C4();
    }
    else
    {
      uint64_t v208 = v47;
      uint64_t v70 = v44;
      BOOL v71 = v45;
      sub_100094200();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v73 = *(void **)(v29 + 424);
      unint64_t v74 = v46;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100094348();
        uint64_t v73 = v134;
      }
      unint64_t v75 = v73[2];
      if (v75 >= v73[3] >> 1)
      {
        sub_10003BEAC();
        uint64_t v73 = v135;
      }
      v73[2] = v75 + 1;
      sub_100094660((uint64_t)&v73[2 * v75]);
      uint64_t v46 = v74;
      uint64_t v45 = v71;
      uint64_t v44 = v70;
      uint64_t v47 = v208;
    }
    sub_1000940B8();
    if (v59) {
      break;
    }
LABEL_64:
    *(void *)(v29 + 416) = v78;
    *(void *)(v29 + 424) = v73;
    *(void *)(v29 + 400) = v77;
    *(void *)(v29 + 408) = v58;
    uint64_t v60 = v212;
    *(void *)(v29 + 384) = v212;
    *(void *)(v29 + 392) = v62;
    sub_100094188();
    if (v132)
    {
LABEL_101:
      __break(1u);
      return static ODIDeviceInfo.shared.getter(v88, v89, v90, v91, v92, v93, v94, v95, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21,
               a22,
               a23,
               a24,
               a25,
               a26,
               a27,
               a28);
    }
    sub_100093F88(v131);
    if (v133)
    {
      uint64_t v209 = (void (*)(void))v48;
      uint64_t v137 = *(void *)(v29 + 192);
      *(_DWORD *)(v29 + 680) = *(_DWORD *)(v137 + 80);
      *(void *)(v29 + 448) = *(void *)(v137 + 72);
      uint64_t v33 = *(void (**)(uint64_t))(v137 + 16);
      *(void *)(v29 + 456) = v33;
      swift_bridgeObjectRetain();
      uint64_t v136 = 0;
      uint64_t v50 = v210;
LABEL_67:
      sub_1000942A0(v136);
      *(void *)(v29 + 504) = v209;
      *(void *)(v29 + 512) = v211;
      *(void *)(v29 + 488) = v46;
      *(void *)(v29 + 496) = v47;
      uint64_t v207 = v46;
      *(void *)(v29 + 472) = v44;
      *(void *)(v29 + 480) = v45;
      *(void *)(v29 + 464) = v50;
      int v138 = *(_DWORD *)(v29 + 664);
      uint64_t v139 = sub_100093E64();
      v33(v139);
      uint64_t v140 = sub_1000940DC();
      if (v141(v140) == v138) {
        goto LABEL_90;
      }
      sub_100094690();
      if (v59)
      {
        type metadata accessor for ODIAccountManager();
        static ODIAccountManager.shared.getter();
        sub_10002EAE0((void *)(v29 + 16), *(void *)(v29 + 40));
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v29 + 560) = v190;
        uint64_t v191 = swift_task_alloc();
        uint64_t v192 = (void *)sub_1000944AC(v191);
        void *v192 = v193;
        v192[1] = sub_10008E140;
        sub_1000942EC();
        goto LABEL_92;
      }
      sub_100094678();
      if (v59)
      {
        uint64_t v202 = type metadata accessor for ODIDeviceInfo();
        sub_10009460C(v202);
        uint64_t v203 = swift_task_alloc();
        uint64_t v204 = (void *)sub_1000944B8(v203);
        *uint64_t v204 = v205;
        v204[1] = sub_10008EED8;
        sub_100094060();
        return static ODIDeviceInfo.shared.getter(v88, v89, v90, v91, v92, v93, v94, v95, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22,
                 a23,
                 a24,
                 a25,
                 a26,
                 a27,
                 a28);
      }
      sub_10009466C();
      if (v59)
      {
        uint64_t v142 = sub_100094630();
        uint64_t v46 = v207;
        os_log_type_t v48 = (uint8_t *)v209;
        if (v143)
        {
          sub_100093EB0(v142, v143);
          uint64_t v144 = sub_100093F4C();
          v33(v144);
          uint64_t v145 = (void *)Logger.logObject.getter();
          os_log_type_t v146 = static os_log_type_t.debug.getter();
          BOOL v147 = sub_100051E9C(v146);
          uint64_t v33 = *(void (**)(uint64_t))(v29 + 208);
          if (v147)
          {
            uint64_t v148 = sub_100033734();
            uint64_t v214 = sub_10003371C();
            *(_DWORD *)uint64_t v148 = v213;
            uint64_t v33 = *(void (**)(uint64_t))(v29 + 128);
            swift_bridgeObjectRetain();
            uint64_t v149 = sub_100094558();
            *(void *)(v148 + 4) = sub_100032B48(v149, v150, v151);
            swift_bridgeObjectRelease();
            sub_10009401C();
            _os_log_impl(v152, v153, v154, "fetchBindings found value from Me Card = %s", (uint8_t *)v148, 0xCu);
            swift_arrayDestroy();
            sub_100033704();
            sub_100033704();

            os_log_type_t v48 = (uint8_t *)v209;
            sub_100093F10();
            v209();
            v211 = v209;
            uint64_t v46 = v207;
          }
          else
          {

            sub_100094558();
            sub_100093F10();
            v211();
            uint64_t v46 = v207;
            os_log_type_t v48 = (uint8_t *)v209;
          }
        }
      }
      else
      {
        uint64_t v155 = sub_100093F3C();
        v156(v155);
        uint64_t v157 = (void *)Logger.logObject.getter();
        os_log_type_t v158 = static os_log_type_t.debug.getter();
        if (sub_100051E9C(v158))
        {
          uint64_t v160 = (_WORD *)sub_100051AA0();
          sub_100078C08(v160);
          sub_10009401C();
          sub_10005A05C(v161, v162, v163, "fetchBindings no value found");
          sub_100033704();
        }
        uint64_t v33 = *(void (**)(uint64_t))(v29 + 184);

        sub_100093F10();
        v164();
        sub_10009436C();
        v165();
        uint64_t v46 = v207;
        os_log_type_t v48 = (uint8_t *)v209;
      }
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  sub_100093FDC();
  sub_100093E90();
  sub_1000940A4();
  uint64_t v45 = (void (*)(void))(v29 + 144);
  if (v81)
  {
LABEL_89:
    __break(1u);
LABEL_90:
    sub_1000942B0();
    sub_100094238();
    uint64_t v185 = sub_100093EDC();
    sub_1000943DC(v185, v186);
    uint64_t v187 = swift_task_alloc();
    uint64_t v188 = (void *)sub_1000944A0(v187);
    *uint64_t v188 = v189;
    v188[1] = sub_10008D3E8;
    sub_100093F70();
LABEL_92:
    sub_100094060();
    return dispatch thunk of ODIAccountManagerProtocol.getAccount(with:)(v194, v195, v196, v197, v198, v199, v200, v201, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28);
  }
  unint64_t v82 = v79;
  char v83 = v80;
  while (1)
  {
    sub_10002E768(&qword_100699D20);
    if (!sub_10009459C()) {
      goto LABEL_35;
    }
    unint64_t v84 = sub_100094648();
    if ((v83 & 1) != (v85 & 1)) {
      break;
    }
    unint64_t v82 = v84;
LABEL_35:
    uint64_t v86 = *(void *)v45;
    if (v83)
    {
      uint64_t v87 = *(void *)(v86 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v87 + 8 * v82) = v73;
    }
    else
    {
      sub_100094520();
      uint64_t v97 = (void *)(v96 + 16 * v82);
      *uint64_t v97 = v99;
      v97[1] = v98;
      *(void *)(*(void *)(v86 + 56) + 8 * v82) = v73;
      uint64_t v100 = *(void *)(v86 + 16);
      BOOL v81 = __OFADD__(v100, 1);
      uint64_t v101 = v100 + 1;
      if (v81)
      {
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }
      *(void *)(v86 + 16) = v101;
      swift_bridgeObjectRetain();
    }
    sub_1000944D8();
    swift_bridgeObjectRelease();
    uint64_t v88 = swift_bridgeObjectRelease();
    uint64_t v102 = *(void *)(v29 + 312);
    uint64_t v103 = *(void *)(v29 + 320);
    *(void *)(v29 + 304) = v86;
    if (v103)
    {
      uint64_t v104 = sub_100094044();
    }
    else
    {
      if (__OFADD__(v102, 1)) {
        goto LABEL_99;
      }
      sub_100094028();
      if (v106 == v81)
      {
LABEL_79:
        swift_release();
        uint64_t v166 = sub_100091F7C();
        swift_bridgeObjectRelease();
        uint64_t v167 = sub_1000B15EC(v166);
        sub_1000941E4((uint64_t)v167);
        sub_100094684();
        if (!v168)
        {
          swift_bridgeObjectRelease();
          sub_100093FF8();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          sub_100049018();
          sub_100094060();
          __asm { BRAA            X2, X16 }
        }
        uint64_t v169 = sub_100094618();
        uint64_t v170 = (void *)sub_100094198(v169);
        sub_100093E30(v170, (uint64_t)_swiftEmptyArrayStorage);
        swift_bridgeObjectRetain();
        uint64_t v171 = swift_task_alloc();
        uint64_t v172 = (void *)sub_100094304(v171);
        *uint64_t v172 = v173;
        v172[1] = sub_10008FCFC;
        sub_100093F5C();
        sub_100094060();
        return BindingsHelpers.getStaticBindings(bindings:excludeAppleID:)(v174, v175, v176, v177, v178, v179, v180, v181, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 a22,
                 a23,
                 a24,
                 a25,
                 a26,
                 a27,
                 a28);
      }
      sub_1000942DC();
      if (!v107)
      {
        sub_1000942CC();
        if (v106 == v81) {
          goto LABEL_79;
        }
        if (!*(void *)(v109 + 8 * v108))
        {
          if (v111 + 2 >= v110) {
            goto LABEL_79;
          }
          if (!*(void *)(v109 + 8 * (v111 + 2)))
          {
            uint64_t v112 = v111 + 3;
            if (v112 >= v110) {
              goto LABEL_79;
            }
            if (!*(void *)(v109 + 8 * v112))
            {
              do
              {
                uint64_t v113 = v112 + 1;
                if (__OFADD__(v112, 1)) {
                  goto LABEL_100;
                }
                if (v113 >= v110) {
                  goto LABEL_79;
                }
                ++v112;
              }
              while (!*(void *)(v109 + 8 * v113));
            }
          }
        }
      }
      sub_10009410C();
    }
    uint64_t v114 = sub_100094134(v104, v105);
    uint64_t v47 = *(void *)(v115 + 8);
    *(void *)(v29 + 336) = v47;
    *(void *)(v29 + 344) = *(void *)(*(void *)(v114 + 56) + 8 * v116);
    uint64_t v118 = sub_100093F1C(v117);
    v119(v118);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    os_log_type_t v62 = (void (*)(void))Logger.logObject.getter();
    os_log_type_t v120 = static os_log_type_t.debug.getter();
    BOOL v121 = sub_100051E9C(v120);
    uint64_t v46 = *(void (**)(void))(v29 + 208);
    uint64_t v122 = *(void *)(v29 + 216);
    if (v121)
    {
      uint64_t v123 = sub_100033734();
      uint64_t v214 = sub_10003371C();
      *(_DWORD *)uint64_t v123 = v213;
      swift_bridgeObjectRetain();
      *(void *)(v123 + 4) = sub_100094418();
      swift_bridgeObjectRelease_n();
      sub_10009426C();
      sub_10009401C();
      sub_100094508(v124, v125, v126, "handleFetchBindings guessing for key %s");
      swift_arrayDestroy();
      sub_100033704();
      uint64_t v45 = (void (*)(void))(v29 + 144);
      sub_100033704();

      sub_10009454C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_10009426C();

      os_log_type_t v62 = *(void (**)(void))(v122 + 8);
    }
    sub_100094534();
    v62();
    sub_1000940F4();
    if (v127)
    {
      sub_1000944F0();
      int64_t v58 = v62;
      sub_1000941C4();
      uint64_t v73 = _swiftEmptyArrayStorage;
      goto LABEL_64;
    }
    swift_bridgeObjectRelease();
    sub_100093FDC();
    unint64_t v82 = sub_100093E90();
    char v83 = v128;
    sub_10009440C();
    uint64_t v73 = _swiftEmptyArrayStorage;
    if (__OFADD__(v129, v130)) {
      goto LABEL_89;
    }
  }
  sub_100094060();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_10008EED8()
{
  sub_10003F0F4();
  uint64_t v2 = v1;
  sub_1000336EC();
  sub_1000943FC();
  *uint64_t v4 = v3;
  uint64_t v5 = *v0;
  sub_10003F0B8();
  void *v6 = v5;
  *(void *)(v7 + 600) = v2;
  swift_task_dealloc();
  sub_100092DD0();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_10008EFD0, v9, v8);
}

uint64_t sub_10008EFD0()
{
  sub_10003F0F4();
  *(void *)(v0 + 608) = dispatch thunk of ODIDeviceInfo.getCTPhoneNumber(useDefaultVoiceNumber:)();
  swift_release();
  sub_10003F160();
  return _swift_task_switch(v1, v2, v3);
}

uint64_t sub_10008F040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(void, void), unint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_100094484();
  a35 = v38;
  a36 = v39;
  a34 = v36;
  sub_1000943C4();
  uint64_t v41 = *(void **)(v36 + 608);
  os_log_type_t v42 = (void *)&unk_10058C000;
  if (!v41) {
    goto LABEL_6;
  }
  if (!v41[2])
  {
    swift_bridgeObjectRelease();
LABEL_6:
    v227 = *(void (**)(uint64_t))(v36 + 520);
    os_log_type_t v57 = *(void (**)(void))(v36 + 504);
    unint64_t v56 = *(void (**)(uint64_t))(v36 + 512);
    int64_t v58 = *(char **)(v36 + 496);
    goto LABEL_9;
  }
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 352);
  uint64_t v44 = *(void *)(v36 + 256);
  uint64_t v45 = *(void *)(v36 + 208);
  uint64_t v46 = *(void *)(v36 + 176);
  uint64_t v48 = v41[4];
  unint64_t v47 = v41[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43(v44, v46, v45);
  swift_bridgeObjectRetain_n();
  BOOL v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  BOOL v51 = os_log_type_enabled(v49, v50);
  uint64_t v37 = *(void *)(v36 + 256);
  uint64_t v52 = *(void *)(v36 + 208);
  if (v51)
  {
    os_log_type_t v53 = (char **)(v36 + 488);
    uint64_t v54 = sub_100033734();
    a24 = sub_10003371C();
    *(_DWORD *)uint64_t v54 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v54 + 4) = sub_100032B48(v48, v47, &a24);
    swift_bridgeObjectRelease_n();
    sub_100094508((void *)&_mh_execute_header, v49, v50, "fetchBindings found value from CT = %s");
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();

    sub_100094558();
    sub_10003F240();
    v55();
  }
  else
  {
    os_log_type_t v53 = (char **)(v36 + 496);
    char v59 = *(void (**)(uint64_t, uint64_t))(v36 + 496);
    swift_bridgeObjectRelease_n();

    v59(v37, v52);
  }
  int64_t v58 = *v53;
  *(void *)(v36 + 120) = v48;
  *(void *)(v36 + 128) = v47;
  swift_bridgeObjectRelease();
  os_log_type_t v57 = (void (*)(void))v58;
  unint64_t v56 = (void (*)(uint64_t))v58;
  v227 = (void (*)(uint64_t))v58;
  os_log_type_t v42 = &unk_10058C000;
LABEL_9:
  uint64_t v226 = v36 + 144;
  uint64_t v60 = *(void *)(v36 + 480);
  uint64_t v61 = *(void *)(v36 + 488);
  unint64_t v62 = *(void *)(v36 + 464);
  v224 = (char *)&type metadata for Any + 8;
  *(void *)&long long v40 = v42[329];
  long long v225 = v40;
LABEL_10:
  sub_100093FC4();
  if (v63)
  {
    sub_100093FA0();
    uint64_t v64 = sub_100093F4C();
    v56(v64);
    Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.debug.getter();
    if (sub_100051E9C(v65))
    {
      os_log_type_t v66 = (_WORD *)sub_100051AA0();
      sub_100078C08(v66);
      sub_10009401C();
      sub_10005A05C(v67, v68, v69, "fetchBindings value found, skipping to next key");
      sub_100033704();
    }
    sub_1000941A8();
    sub_100093F10();
    ((void (*)(void))v37)();
    uint64_t v37 = *(void *)(v36 + 400);
    unint64_t v62 = v37;
    v221 = (void (*)(uint64_t))v37;
    uint64_t v223 = v37;
    uint64_t v60 = v37;
    uint64_t v61 = v37;
    sub_100094310();
  }
  else
  {
    sub_100094090();
    if (!v71)
    {
      a13 = v62;
      uint64_t v37 = *(void *)(v36 + 456);
      sub_100094320();
      goto LABEL_67;
    }
    v221 = v56;
    uint64_t v223 = v70;
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void *)(v36 + 408);
  }
  uint64_t v72 = *(void *)(v36 + 384);
  while (1)
  {
    uint64_t v73 = swift_bridgeObjectRetain();
    a17 = v72;
    unint64_t v74 = *(NSObject **)(sub_10008C4E0(v73) + 16);
    swift_bridgeObjectRelease();
    if (v74)
    {
      uint64_t v75 = sub_100093F3C();
      v76(v75);
      uint64_t v77 = (void *)Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.debug.getter();
      if (sub_100051E9C(v78))
      {
        v227 = *(void (**)(uint64_t))(v36 + 368);
        os_log_type_t v57 = (void (*)(void))sub_100033734();
        a24 = sub_10003371C();
        *(_DWORD *)os_log_type_t v57 = v225;
        int64_t v58 = (char *)v57 + 4;
        uint64_t v61 = *(void *)(v36 + 120);
        unint64_t v79 = *(void *)(v36 + 128);
        swift_bridgeObjectRetain();
        *(void *)(v36 + 136) = sub_100032B48(v61, v79, &a24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10009401C();
        sub_100094508(v80, v81, v82, "fetchBindings similar value already present, skipping %s");
        sub_100078E84();
        sub_100033704();
        sub_100033704();

        sub_10003F240();
        v83();
        unint64_t v74 = *(NSObject **)(v36 + 368);
      }
      else
      {
        uint64_t v90 = *(void (**)(void))(v36 + 392);

        sub_100093F10();
        v90();
        unint64_t v74 = *(NSObject **)(v36 + 392);
      }
      uint64_t v37 = (uint64_t)v74;
      uint64_t v87 = *(void **)(v36 + 424);
      unint64_t v62 = (unint64_t)v74;
      v221 = (void (*)(uint64_t))v74;
      uint64_t v223 = (uint64_t)v74;
      uint64_t v60 = (uint64_t)v74;
      sub_10009407C();
    }
    else
    {
      a12 = (void (*)(void, void))v61;
      a13 = v62;
      unint64_t v84 = v58;
      uint64_t v85 = v60;
      sub_100094200();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v87 = *(void **)(v36 + 424);
      uint64_t v88 = v57;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009437C();
        uint64_t v87 = v144;
      }
      unint64_t v89 = v87[2];
      if (v89 >= v87[3] >> 1)
      {
        sub_10003BEAC();
        uint64_t v87 = v145;
      }
      v87[2] = v89 + 1;
      sub_100094660((uint64_t)&v87[2 * v89]);
      os_log_type_t v57 = v88;
      uint64_t v60 = v85;
      int64_t v58 = v84;
      uint64_t v61 = (uint64_t)a12;
    }
    sub_1000940B8();
    if (v71) {
      break;
    }
LABEL_64:
    *(void *)(v36 + 416) = v92;
    *(void *)(v36 + 424) = v87;
    *(void *)(v36 + 400) = v91;
    *(void *)(v36 + 408) = v37;
    uint64_t v72 = a17;
    *(void *)(v36 + 384) = a17;
    *(void *)(v36 + 392) = v74;
    sub_100094188();
    if (v142)
    {
LABEL_102:
      __break(1u);
      return static ODIDeviceInfo.shared.getter(v100, v101, v102, v103, v104, v105, v106, v107, a9, a10, a11, a12, a13, v221, v223, a16, a17, v224, v225,
               *((void *)&v225 + 1),
               a21,
               v226,
               v227,
               a24,
               a25,
               a26,
               a27,
               a28);
    }
    sub_100093F88(v141);
    if (v143)
    {
      sub_100094158();
      uint64_t v146 = 0;
      unint64_t v56 = v221;
LABEL_67:
      sub_1000942A0(v146);
      v221 = v56;
      uint64_t v223 = v147;
      *(void *)(v36 + 504) = v57;
      *(void *)(v36 + 512) = v56;
      *(void *)(v36 + 488) = v61;
      *(void *)(v36 + 496) = v58;
      *(void *)(v36 + 472) = v147;
      *(void *)(v36 + 480) = v60;
      *(void *)(v36 + 464) = a13;
      int v148 = *(_DWORD *)(v36 + 664);
      uint64_t v149 = sub_100093E64();
      ((void (*)(uint64_t))v37)(v149);
      uint64_t v150 = sub_1000940DC();
      if (v151(v150) == v148) {
        goto LABEL_91;
      }
      sub_100094690();
      if (v71)
      {
        sub_100094284();
        sub_100094238();
        uint64_t v204 = sub_100093EDC();
        sub_1000943EC(v204, v205);
        uint64_t v206 = swift_task_alloc();
        uint64_t v201 = (void *)sub_1000944AC(v206);
        *uint64_t v201 = v207;
        uint64_t v203 = sub_10008E140;
        goto LABEL_93;
      }
      sub_100094678();
      if (v71)
      {
        uint64_t v216 = type metadata accessor for ODIDeviceInfo();
        sub_10009460C(v216);
        uint64_t v217 = swift_task_alloc();
        v218 = (void *)sub_1000944B8(v217);
        void *v218 = v219;
        v218[1] = sub_10008EED8;
        sub_100093E14();
        return static ODIDeviceInfo.shared.getter(v100, v101, v102, v103, v104, v105, v106, v107, a9, a10, a11, a12, a13, v221, v223, a16, a17, v224, v225,
                 *((void *)&v225 + 1),
                 a21,
                 v226,
                 v227,
                 a24,
                 a25,
                 a26,
                 a27,
                 a28);
      }
      sub_10009466C();
      if (v71)
      {
        uint64_t v152 = sub_100094630();
        unint64_t v62 = a13;
        unint64_t v56 = v221;
        if (v153)
        {
          sub_100093EB0(v152, v153);
          uint64_t v154 = sub_100093F4C();
          v221(v154);
          uint64_t v155 = Logger.logObject.getter();
          os_log_type_t v156 = static os_log_type_t.debug.getter();
          BOOL v157 = sub_100079378(v156);
          uint64_t v37 = *(void *)(v36 + 208);
          if (v157)
          {
            a12 = (void (*)(void, void))v61;
            v222 = v58;
            a9 = v60;
            uint64_t v158 = *(void *)(v36 + 248);
            uint64_t v159 = sub_100033734();
            uint64_t v160 = v37;
            uint64_t v37 = sub_10003371C();
            *(_DWORD *)uint64_t v159 = v225;
            unint64_t v161 = *(void *)(v36 + 128);
            uint64_t v228 = *(void *)(v36 + 120);
            a24 = v37;
            swift_bridgeObjectRetain();
            *(void *)(v159 + 4) = sub_100032B48(v228, v161, &a24);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v155, (os_log_type_t)v56, "fetchBindings found value from Me Card = %s", (uint8_t *)v159, 0xCu);
            swift_arrayDestroy();
            sub_100033704();
            sub_100033704();

            ((void (*)(uint64_t, uint64_t))v57)(v158, v160);
            int64_t v58 = v222;
            uint64_t v61 = (uint64_t)a12;
            unint64_t v56 = v57;
            v227 = v57;
          }
          else
          {

            sub_100094540();
            unint64_t v56 = v221;
            sub_100093F10();
            ((void (*)(void))v221)();
            v227 = v221;
          }
          unint64_t v62 = a13;
        }
      }
      else
      {
        a12 = (void (*)(void, void))v57;
        uint64_t v162 = sub_100093F3C();
        v163(v162);
        uint64_t v164 = (void *)Logger.logObject.getter();
        os_log_type_t v165 = static os_log_type_t.debug.getter();
        if (sub_100051E9C(v165))
        {
          uint64_t v167 = (_WORD *)sub_100051AA0();
          sub_100078C08(v167);
          sub_10009401C();
          sub_10005A05C(v168, v169, v170, "fetchBindings no value found");
          sub_100033704();
        }
        uint64_t v37 = *(void *)(v36 + 200);

        sub_100093F10();
        v171();
        sub_10009436C();
        v172();
        unint64_t v62 = a13;
        unint64_t v56 = v221;
      }
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  char v93 = sub_100093FDC();
  sub_100093E90();
  sub_1000940A4();
  uint64_t v96 = (void *)(v36 + 144);
  if (v97)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    sub_1000942B0();
    sub_100094238();
    uint64_t v198 = sub_100093EDC();
    sub_1000943DC(v198, v199);
    uint64_t v200 = swift_task_alloc();
    uint64_t v201 = (void *)sub_1000944A0(v200);
    *uint64_t v201 = v202;
    uint64_t v203 = sub_10008D3E8;
LABEL_93:
    v201[1] = v203;
    sub_100093F70();
    sub_100093E14();
    return dispatch thunk of ODIAccountManagerProtocol.getAccount(with:)(v208, v209, v210, v211, v212, v213, v214, v215, a9, a10, a11, a12, a13, v221, v223, a16, a17, v224, v225,
             *((void *)&v225 + 1),
             a21,
             v226,
             v227,
             a24,
             a25,
             a26,
             a27,
             a28);
  }
  unint64_t v98 = v94;
  char v99 = v95;
  while (1)
  {
    sub_10002E768(&qword_100699D20);
    unint64_t v100 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v93 & 1, (Swift::Int)v74);
    if ((v100 & 1) == 0) {
      goto LABEL_35;
    }
    unint64_t v100 = sub_100094648();
    if ((v99 & 1) != (v101 & 1)) {
      break;
    }
    unint64_t v98 = v100;
LABEL_35:
    uint64_t v108 = (void *)*v96;
    if (v99)
    {
      uint64_t v109 = v108[7];
      swift_bridgeObjectRelease();
      *(void *)(v109 + 8 * v98) = v87;
    }
    else
    {
      uint64_t v111 = *(void *)(v36 + 328);
      uint64_t v110 = *(void *)(v36 + 336);
      v108[(v98 >> 6) + 8] |= 1 << v98;
      uint64_t v112 = (void *)(v108[6] + 16 * v98);
      *uint64_t v112 = v111;
      v112[1] = v110;
      *(void *)(v108[7] + 8 * v98) = v87;
      uint64_t v113 = v108[2];
      BOOL v97 = __OFADD__(v113, 1);
      uint64_t v114 = v113 + 1;
      if (v97)
      {
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
        goto LABEL_102;
      }
      v108[2] = v114;
      swift_bridgeObjectRetain();
    }
    sub_1000944D8();
    swift_bridgeObjectRelease();
    unint64_t v100 = swift_bridgeObjectRelease();
    uint64_t v115 = *(void *)(v36 + 312);
    uint64_t v116 = *(void *)(v36 + 320);
    *(void *)(v36 + 304) = v108;
    if (v116)
    {
      sub_100094044();
    }
    else
    {
      if (__OFADD__(v115, 1)) {
        goto LABEL_100;
      }
      sub_100094028();
      if (v118 == v97)
      {
LABEL_80:
        swift_release();
        uint64_t v173 = sub_100091F7C();
        swift_bridgeObjectRelease();
        uint64_t v174 = sub_1000B15EC(v173);
        sub_1000941E4((uint64_t)v174);
        sub_100094684();
        if (v175)
        {
          uint64_t v176 = sub_100094618();
          uint64_t v177 = (void *)sub_100094198(v176);
          sub_100093E30(v177, (uint64_t)_swiftEmptyArrayStorage);
          swift_bridgeObjectRetain();
          uint64_t v178 = swift_task_alloc();
          uint64_t v179 = (void *)sub_100094304(v178);
          *uint64_t v179 = v180;
          v179[1] = sub_10008FCFC;
          sub_100093F5C();
          sub_100093E14();
          return BindingsHelpers.getStaticBindings(bindings:excludeAppleID:)(v181, v182, v183, v184, v185, v186, v187, v188, a9, a10, a11, a12, a13, v221, v223, a16, a17, v224, v225,
                   *((void *)&v225 + 1),
                   a21,
                   v226,
                   v227,
                   a24,
                   a25,
                   a26,
                   a27,
                   a28);
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_100093FF8();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          sub_100049018();
          sub_100093E14();
          return v192(v190, v191, v192, v193, v194, v195, v196, v197, a9, a10, a11, a12, a13, v221, v223, a16, a17, v224, v225,
                   *((void *)&v225 + 1),
                   a21,
                   v226,
                   v227,
                   a24,
                   a25,
                   a26,
                   a27,
                   a28);
        }
      }
      sub_1000942DC();
      if (!v119)
      {
        sub_1000942CC();
        if (v118 == v97) {
          goto LABEL_80;
        }
        if (!*(void *)(v121 + 8 * v120))
        {
          if (v123 + 2 >= v122) {
            goto LABEL_80;
          }
          if (!*(void *)(v121 + 8 * (v123 + 2)))
          {
            uint64_t v124 = v123 + 3;
            if (v124 >= v122) {
              goto LABEL_80;
            }
            if (!*(void *)(v121 + 8 * v124))
            {
              do
              {
                uint64_t v125 = v124 + 1;
                if (__OFADD__(v124, 1)) {
                  goto LABEL_101;
                }
                if (v125 >= v122) {
                  goto LABEL_80;
                }
                ++v124;
              }
              while (!*(void *)(v121 + 8 * v125));
            }
          }
        }
      }
      sub_10009410C();
    }
    sub_10009421C(v117);
    os_log_type_t v57 = *(void (**)(void))v126;
    *(void *)(v36 + 328) = *(void *)v126;
    unint64_t v62 = *(void *)(v126 + 8);
    *(void *)(v36 + 336) = v62;
    uint64_t v37 = *(void *)(*(void *)(v127 + 56) + 8 * v128);
    *(void *)(v36 + 344) = v37;
    uint64_t v130 = sub_100093F1C(v129);
    v131(v130);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v74 = Logger.logObject.getter();
    os_log_type_t v132 = static os_log_type_t.debug.getter();
    uint64_t v61 = v132;
    BOOL v133 = os_log_type_enabled(v74, v132);
    uint64_t v134 = *(void (**)(uint64_t))(v36 + 280);
    int64_t v58 = *(char **)(v36 + 208);
    uint64_t v135 = *(void *)(v36 + 216);
    if (v133)
    {
      uint64_t v136 = sub_100033734();
      v227 = v134;
      a24 = sub_10003371C();
      *(_DWORD *)uint64_t v136 = v225;
      swift_bridgeObjectRetain();
      *(void *)(v136 + 4) = sub_100032B48((uint64_t)v57, v62, &a24);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      sub_100078EE4((void *)&_mh_execute_header, v74, (os_log_type_t)v61, "handleFetchBindings guessing for key %s");
      swift_arrayDestroy();
      sub_100033704();
      uint64_t v96 = (void *)(v36 + 144);
      sub_100033704();

      sub_10009454C();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      unint64_t v74 = *(NSObject **)(v135 + 8);
    }
    sub_100094534();
    ((void (*)(void))v74)();
    *(void *)(v36 + 368) = v74;
    *(void *)(v36 + 120) = 0;
    *(void *)(v36 + 128) = 0xE000000000000000;
    uint64_t v137 = *(void *)(v37 + 16);
    *(void *)(v36 + 376) = v137;
    if (v137)
    {
      sub_1000944F0();
      sub_100094330();
      uint64_t v60 = (uint64_t)v74;
      sub_10009407C();
      uint64_t v87 = _swiftEmptyArrayStorage;
      goto LABEL_64;
    }
    swift_bridgeObjectRelease();
    char v93 = sub_100093FDC();
    unint64_t v98 = sub_100093E90();
    char v99 = v138;
    sub_10009440C();
    uint64_t v87 = _swiftEmptyArrayStorage;
    unint64_t v74 = (v139 + v140);
    if (__OFADD__(v139, v140)) {
      goto LABEL_90;
    }
  }
  sub_100093E14();
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_10008FCFC()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10008FDC4()
{
  uint64_t v1 = sub_100092558(*(void *)(v0 + 152));
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v3 = *(void *)(v0 + 640);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_10003BDB8(0, *(void *)(v3 + 16) + 1, 1, *(void *)(v0 + 640));
    uint64_t v3 = v16;
  }
  unint64_t v5 = *(void *)(v3 + 16);
  unint64_t v4 = *(void *)(v3 + 24);
  if (v5 >= v4 >> 1)
  {
    sub_10003BDB8(v4 > 1, v5 + 1, 1, v3);
    uint64_t v3 = v17;
  }
  uint64_t v6 = *(void *)(v0 + 624);
  uint64_t v7 = *(void *)(v0 + 632) + 1;
  *(void *)(v3 + 16) = v5 + 1;
  *(void *)(v3 + 8 * v5 + 32) = v1;
  if (v7 == v6)
  {
    swift_bridgeObjectRelease();
    sub_100094450();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100094434();
    __asm { BRAA            X2, X16 }
  }
  uint64_t v10 = *(void *)(v0 + 632) + 1;
  *(void *)(v0 + 640) = v3;
  *(void *)(v0 + 632) = v10;
  uint64_t v11 = (void *)(*(void *)(v0 + 176) + *(int *)(v0 + 684));
  *(void *)(v0 + 152) = *(void *)(*(void *)(v0 + 616) + 8 * v10 + 32);
  sub_10002EAE0(v11, v11[3]);
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_task_alloc();
  unint64_t v13 = (void *)sub_100094304(v12);
  *unint64_t v13 = v14;
  v13[1] = sub_10008FCFC;
  sub_100093F5C();
  sub_100094434();
  return BindingsHelpers.getStaticBindings(bindings:excludeAppleID:)();
}

uint64_t sub_10008FFD0()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

void sub_100090098()
{
  sub_10002E768(&qword_1006980D8);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10058CEC0;
  *(void *)(v1 + 32) = *(void *)(v0 + 160);
  sub_100094450();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100094434();
  __asm { BRAA            X2, X16 }
}

id sub_10009017C(uint64_t a1, unint64_t a2, void *a3)
{
  id v59 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v56 = *(void *)(v5 - 8);
  uint64_t v57 = v5;
  __chkstk_darwin(v5);
  int64_t v58 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BindingsKeys();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = a1;
  unint64_t v64 = a2;
  unint64_t v60 = a2;
  uint64_t v11 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  v11(v10, enum case for BindingsKeys.firstName(_:), v7);
  uint64_t v12 = BindingsKeys.rawValue.getter();
  uint64_t v14 = v13;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  uint64_t v61 = v12;
  uint64_t v62 = v14;
  sub_100036264();
  uint64_t v16 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_9;
  }
  uint64_t v63 = a1;
  unint64_t v64 = v60;
  v11(v10, enum case for BindingsKeys.documentFirstName(_:), v7);
  uint64_t v17 = BindingsKeys.rawValue.getter();
  uint64_t v19 = v18;
  v15(v10, v7);
  uint64_t v61 = v17;
  uint64_t v62 = v19;
  uint64_t v20 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v20)
  {
LABEL_9:
    uint64_t v44 = &selRef_aa_firstName;
LABEL_11:
    id v45 = v59;
    return (id)sub_100059DA0(v45, (SEL *)v44);
  }
  uint64_t v63 = a1;
  unint64_t v64 = v60;
  v11(v10, enum case for BindingsKeys.lastName(_:), v7);
  uint64_t v21 = BindingsKeys.rawValue.getter();
  uint64_t v23 = v22;
  v15(v10, v7);
  uint64_t v61 = v21;
  uint64_t v62 = v23;
  uint64_t v24 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v24) {
    goto LABEL_10;
  }
  uint64_t v63 = a1;
  unint64_t v64 = v60;
  v11(v10, enum case for BindingsKeys.documentLastName(_:), v7);
  uint64_t v25 = BindingsKeys.rawValue.getter();
  uint64_t v27 = v26;
  v15(v10, v7);
  uint64_t v61 = v25;
  uint64_t v62 = v27;
  uint64_t v28 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v28)
  {
LABEL_10:
    uint64_t v44 = &selRef_aa_lastName;
    goto LABEL_11;
  }
  uint64_t v63 = a1;
  unint64_t v64 = v60;
  v11(v10, enum case for BindingsKeys.email(_:), v7);
  uint64_t v29 = BindingsKeys.rawValue.getter();
  uint64_t v31 = v30;
  v15(v10, v7);
  uint64_t v61 = v29;
  uint64_t v62 = v31;
  uint64_t v32 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v32) {
    goto LABEL_14;
  }
  uint64_t v63 = a1;
  unint64_t v64 = v60;
  v11(v10, enum case for BindingsKeys.documentEmail(_:), v7);
  uint64_t v33 = BindingsKeys.rawValue.getter();
  uint64_t v35 = v34;
  v15(v10, v7);
  uint64_t v61 = v33;
  uint64_t v62 = v35;
  uint64_t v36 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_14:
    id v47 = v59;
    id result = [v59 accountType];
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v48 = sub_1000933CC(result);
    uint64_t v50 = v49;
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v50)
    {
      if (v48 == v51 && v50 == v52)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_27:
        uint64_t v44 = &selRef_appleID;
        goto LABEL_28;
      }
      char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v54) {
        goto LABEL_27;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v44 = &selRef_aa_primaryEmail;
LABEL_28:
    id v45 = v47;
    return (id)sub_100059DA0(v45, (SEL *)v44);
  }
  uint64_t v37 = v56;
  uint64_t v39 = v57;
  uint64_t v38 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v58, v55, v57);
  swift_bridgeObjectRetain_n();
  long long v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v42 = 136446210;
    unint64_t v43 = v60;
    swift_bridgeObjectRetain();
    uint64_t v61 = sub_100032B48(a1, v43, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unhandled bindingsKey %{public}s for Accounts", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v37 + 8))(v58, v39);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);
  }
  return 0;
}

uint64_t sub_100090820(uint64_t a1, unint64_t a2)
{
  unint64_t v176 = a2;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v168 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v168 - v9;
  uint64_t v175 = type metadata accessor for BindingsKeys();
  uint64_t v11 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  uint64_t v13 = (char *)&v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DIPContactsManager();
  swift_allocObject();
  uint64_t v15 = sub_1000A1AD8();
  v181[3] = v14;
  v181[4] = &off_100662770;
  v181[0] = v15;
  sub_10002EAE0(v181, v14);
  uint64_t v16 = (void *)sub_1000A1728();
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, v4);
    uint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v115, v116))
    {
      uint64_t v117 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v117 = 0;
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "No MeContact available", v117, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    goto LABEL_30;
  }
  uint64_t v170 = v2;
  uint64_t v171 = v10;
  uint64_t v172 = v5;
  uint64_t v173 = v4;
  id v174 = v16;
  uint64_t v17 = v175;
  uint64_t v179 = a1;
  unint64_t v180 = v176;
  uint64_t v18 = *(void (**)(char *, void, uint64_t))(v11 + 104);
  v18(v13, enum case for BindingsKeys.firstName(_:), v175);
  uint64_t v19 = BindingsKeys.rawValue.getter();
  uint64_t v21 = v20;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v13, v17);
  uint64_t v177 = v19;
  uint64_t v178 = v21;
  sub_100036264();
  uint64_t v23 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_26;
  }
  uint64_t v179 = a1;
  unint64_t v180 = v176;
  v18(v13, enum case for BindingsKeys.documentFirstName(_:), v17);
  uint64_t v24 = BindingsKeys.rawValue.getter();
  uint64_t v26 = v25;
  v22(v13, v17);
  uint64_t v177 = v24;
  uint64_t v178 = v26;
  uint64_t v27 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v27)
  {
LABEL_26:
    id v113 = v174;
    id v114 = [v174 givenName];
LABEL_32:
    id v119 = v114;
    uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_33;
  }
  uint64_t v179 = a1;
  unint64_t v180 = v176;
  v18(v13, enum case for BindingsKeys.lastName(_:), v17);
  uint64_t v28 = BindingsKeys.rawValue.getter();
  uint64_t v30 = v29;
  v22(v13, v17);
  uint64_t v177 = v28;
  uint64_t v178 = v30;
  uint64_t v31 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v31) {
    goto LABEL_31;
  }
  uint64_t v179 = a1;
  unint64_t v180 = v176;
  v18(v13, enum case for BindingsKeys.documentLastName(_:), v17);
  uint64_t v32 = BindingsKeys.rawValue.getter();
  uint64_t v34 = v33;
  v22(v13, v17);
  uint64_t v177 = v32;
  uint64_t v178 = v34;
  uint64_t v35 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v35)
  {
LABEL_31:
    id v113 = v174;
    id v114 = [v174 familyName];
    goto LABEL_32;
  }
  uint64_t v179 = a1;
  unint64_t v180 = v176;
  v18(v13, enum case for BindingsKeys.email(_:), v17);
  uint64_t v36 = BindingsKeys.rawValue.getter();
  uint64_t v38 = v37;
  v22(v13, v17);
  uint64_t v177 = v36;
  uint64_t v178 = v38;
  uint64_t v39 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (v39)
  {
    uint64_t v179 = a1;
    unint64_t v180 = v176;
    v18(v13, enum case for BindingsKeys.documentEmail(_:), v17);
    uint64_t v40 = BindingsKeys.rawValue.getter();
    uint64_t v42 = v41;
    v22(v13, v17);
    uint64_t v177 = v40;
    uint64_t v178 = v42;
    uint64_t v43 = StringProtocol.caseInsensitiveCompare<A>(_:)();
    swift_bridgeObjectRelease();
    if (v43)
    {
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.phoneNumber(_:), v17);
      uint64_t v44 = BindingsKeys.rawValue.getter();
      uint64_t v46 = v45;
      v22(v13, v17);
      uint64_t v177 = v44;
      uint64_t v178 = v46;
      uint64_t v47 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v47) {
        goto LABEL_40;
      }
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.documentPhoneNumber(_:), v17);
      uint64_t v48 = BindingsKeys.rawValue.getter();
      uint64_t v50 = v49;
      v22(v13, v17);
      uint64_t v177 = v48;
      uint64_t v178 = v50;
      uint64_t v51 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v51)
      {
LABEL_40:
        id v121 = v174;
        id v127 = [v174 phoneNumbers];
        sub_10002E768(&qword_100699D40);
        unint64_t v128 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v128 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v161 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v161) {
            goto LABEL_87;
          }
        }
        else if (!*(void *)((v128 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_87;
        }
        sub_10003566C(0, (v128 & 0xC000000000000001) == 0, v128);
        if ((v128 & 0xC000000000000001) != 0) {
          id v129 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v129 = *(id *)(v128 + 32);
        }
        uint64_t v130 = v129;
        swift_bridgeObjectRelease();
        id v131 = [v130 value];

        id v132 = [v131 stringValue];
        goto LABEL_50;
      }
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.street(_:), v17);
      uint64_t v52 = BindingsKeys.rawValue.getter();
      uint64_t v54 = v53;
      v22(v13, v17);
      uint64_t v177 = v52;
      uint64_t v178 = v54;
      uint64_t v55 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v55) {
        goto LABEL_45;
      }
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.documentStreet(_:), v17);
      uint64_t v56 = BindingsKeys.rawValue.getter();
      uint64_t v58 = v57;
      v22(v13, v17);
      uint64_t v177 = v56;
      uint64_t v178 = v58;
      uint64_t v59 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v59) {
        goto LABEL_45;
      }
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.street1(_:), v17);
      uint64_t v60 = BindingsKeys.rawValue.getter();
      uint64_t v62 = v61;
      v22(v13, v17);
      uint64_t v177 = v60;
      uint64_t v178 = v62;
      uint64_t v63 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v63) {
        goto LABEL_45;
      }
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.documentStreet1(_:), v17);
      uint64_t v64 = BindingsKeys.rawValue.getter();
      uint64_t v66 = v65;
      v22(v13, v17);
      uint64_t v177 = v64;
      uint64_t v178 = v66;
      uint64_t v67 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v67)
      {
LABEL_45:
        id v121 = v174;
        id v133 = [v174 postalAddresses];
        sub_10002E768(&qword_100699D40);
        unint64_t v134 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v134 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v162 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v162) {
            goto LABEL_87;
          }
        }
        else if (!*(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_87;
        }
        sub_10003566C(0, (v134 & 0xC000000000000001) == 0, v134);
        if ((v134 & 0xC000000000000001) != 0) {
          id v135 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v135 = *(id *)(v134 + 32);
        }
        uint64_t v136 = v135;
        swift_bridgeObjectRelease();
        id v131 = [v136 value];

        id v132 = [v131 street];
        goto LABEL_50;
      }
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.city(_:), v17);
      uint64_t v68 = BindingsKeys.rawValue.getter();
      uint64_t v70 = v69;
      v22(v13, v17);
      uint64_t v177 = v68;
      uint64_t v178 = v70;
      uint64_t v71 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v71) {
        goto LABEL_52;
      }
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.documentCity(_:), v17);
      uint64_t v72 = BindingsKeys.rawValue.getter();
      uint64_t v74 = v73;
      v22(v13, v17);
      uint64_t v177 = v72;
      uint64_t v178 = v74;
      uint64_t v75 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v75)
      {
LABEL_52:
        id v121 = v174;
        id v137 = [v174 postalAddresses];
        sub_10002E768(&qword_100699D40);
        unint64_t v138 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v138 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v163 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v163) {
            goto LABEL_87;
          }
        }
        else if (!*(void *)((v138 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_87;
        }
        sub_10003566C(0, (v138 & 0xC000000000000001) == 0, v138);
        if ((v138 & 0xC000000000000001) != 0) {
          id v139 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v139 = *(id *)(v138 + 32);
        }
        uint64_t v140 = v139;
        swift_bridgeObjectRelease();
        id v131 = [v140 value];

        id v132 = [v131 city];
        goto LABEL_50;
      }
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.state(_:), v17);
      uint64_t v76 = BindingsKeys.rawValue.getter();
      uint64_t v78 = v77;
      v22(v13, v17);
      uint64_t v177 = v76;
      uint64_t v178 = v78;
      uint64_t v79 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v79) {
        goto LABEL_57;
      }
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.documentState(_:), v17);
      uint64_t v80 = BindingsKeys.rawValue.getter();
      uint64_t v82 = v81;
      v22(v13, v17);
      uint64_t v177 = v80;
      uint64_t v178 = v82;
      uint64_t v83 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (!v83)
      {
LABEL_57:
        id v121 = v174;
        id v141 = [v174 postalAddresses];
        sub_10002E768(&qword_100699D40);
        unint64_t v142 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v142 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v164 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v164) {
            goto LABEL_87;
          }
        }
        else if (!*(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_87;
        }
        sub_10003566C(0, (v142 & 0xC000000000000001) == 0, v142);
        if ((v142 & 0xC000000000000001) != 0) {
          id v143 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v143 = *(id *)(v142 + 32);
        }
        uint64_t v144 = v143;
        swift_bridgeObjectRelease();
        id v131 = [v144 value];

        id v132 = [v131 state];
        goto LABEL_50;
      }
      uint64_t v179 = a1;
      unint64_t v180 = v176;
      v18(v13, enum case for BindingsKeys.postalCode(_:), v17);
      uint64_t v84 = BindingsKeys.rawValue.getter();
      uint64_t v86 = v85;
      v22(v13, v17);
      uint64_t v177 = v84;
      uint64_t v178 = v86;
      uint64_t v87 = StringProtocol.caseInsensitiveCompare<A>(_:)();
      swift_bridgeObjectRelease();
      if (v87)
      {
        uint64_t v179 = a1;
        unint64_t v180 = v176;
        v18(v13, enum case for BindingsKeys.documentPostalCode(_:), v17);
        uint64_t v88 = BindingsKeys.rawValue.getter();
        uint64_t v90 = v89;
        v22(v13, v17);
        uint64_t v177 = v88;
        uint64_t v178 = v90;
        uint64_t v91 = StringProtocol.caseInsensitiveCompare<A>(_:)();
        swift_bridgeObjectRelease();
        if (v91)
        {
          uint64_t v179 = a1;
          unint64_t v180 = v176;
          v18(v13, enum case for BindingsKeys.country(_:), v17);
          uint64_t v92 = BindingsKeys.rawValue.getter();
          uint64_t v94 = v93;
          v22(v13, v17);
          uint64_t v177 = v92;
          uint64_t v178 = v94;
          uint64_t v95 = StringProtocol.caseInsensitiveCompare<A>(_:)();
          swift_bridgeObjectRelease();
          if (v95)
          {
            uint64_t v179 = a1;
            unint64_t v180 = v176;
            v18(v13, enum case for BindingsKeys.documentCountry(_:), v17);
            uint64_t v96 = BindingsKeys.rawValue.getter();
            uint64_t v98 = v97;
            v22(v13, v17);
            uint64_t v177 = v96;
            uint64_t v178 = v98;
            uint64_t v99 = StringProtocol.caseInsensitiveCompare<A>(_:)();
            swift_bridgeObjectRelease();
            if (v99)
            {
              uint64_t v169 = a1;
              uint64_t v179 = a1;
              unint64_t v180 = v176;
              v18(v13, enum case for BindingsKeys.isoCountryCode(_:), v17);
              uint64_t v100 = BindingsKeys.rawValue.getter();
              uint64_t v102 = v101;
              v22(v13, v17);
              uint64_t v177 = v100;
              uint64_t v178 = v102;
              uint64_t v103 = StringProtocol.caseInsensitiveCompare<A>(_:)();
              swift_bridgeObjectRelease();
              if (v103)
              {
                uint64_t v104 = v175;
                uint64_t v179 = v169;
                unint64_t v180 = v176;
                v18(v13, enum case for BindingsKeys.documentIsoCountryCode(_:), v175);
                uint64_t v105 = BindingsKeys.rawValue.getter();
                uint64_t v107 = v106;
                v22(v13, v104);
                uint64_t v177 = v105;
                uint64_t v178 = v107;
                uint64_t v108 = StringProtocol.caseInsensitiveCompare<A>(_:)();
                swift_bridgeObjectRelease();
                if (v108)
                {
                  (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v171, v170, v173);
                  swift_bridgeObjectRetain_n();
                  uint64_t v109 = Logger.logObject.getter();
                  os_log_type_t v110 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v109, v110))
                  {
                    uint64_t v111 = (uint8_t *)swift_slowAlloc();
                    uint64_t v179 = swift_slowAlloc();
                    *(_DWORD *)uint64_t v111 = 136446210;
                    unint64_t v112 = v176;
                    swift_bridgeObjectRetain();
                    uint64_t v177 = sub_100032B48(v169, v112, &v179);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    _os_log_impl((void *)&_mh_execute_header, v109, v110, "Unhandled bindingsKey %{public}s for Me Card", v111, 0xCu);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                  }

                  (*(void (**)(char *, uint64_t))(v172 + 8))(v171, v173);
                  goto LABEL_30;
                }
              }
              id v155 = [v174 postalAddresses];
              sub_10002E768(&qword_100699D40);
              unint64_t v156 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v156 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v167 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (v167) {
                  goto LABEL_74;
                }
              }
              else if (*(void *)((v156 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_74:
                sub_10003566C(0, (v156 & 0xC000000000000001) == 0, v156);
                if ((v156 & 0xC000000000000001) != 0) {
                  id v157 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v157 = *(id *)(v156 + 32);
                }
                uint64_t v158 = v157;
                swift_bridgeObjectRelease();
                id v153 = [v158 value];

                id v154 = [v153 ISOCountryCode];
LABEL_77:
                id v159 = v154;

                uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                goto LABEL_33;
              }
              goto LABEL_103;
            }
          }
          id v149 = [v174 postalAddresses];
          sub_10002E768(&qword_100699D40);
          unint64_t v150 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v150 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v166 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v166) {
              goto LABEL_69;
            }
          }
          else if (*(void *)((v150 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_69:
            sub_10003566C(0, (v150 & 0xC000000000000001) == 0, v150);
            if ((v150 & 0xC000000000000001) != 0) {
              id v151 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v151 = *(id *)(v150 + 32);
            }
            uint64_t v152 = v151;
            swift_bridgeObjectRelease();
            id v153 = [v152 value];

            id v154 = [v153 country];
            goto LABEL_77;
          }
LABEL_103:

          goto LABEL_88;
        }
      }
      id v121 = v174;
      id v145 = [v174 postalAddresses];
      sub_10002E768(&qword_100699D40);
      unint64_t v146 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v146 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v165 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v165) {
          goto LABEL_64;
        }
      }
      else if (*(void *)((v146 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_64:
        sub_10003566C(0, (v146 & 0xC000000000000001) == 0, v146);
        if ((v146 & 0xC000000000000001) != 0) {
          id v147 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v147 = *(id *)(v146 + 32);
        }
        int v148 = v147;
        swift_bridgeObjectRelease();
        id v131 = [v148 value];

        id v132 = [v131 postalCode];
LABEL_50:
        id v126 = v132;

LABEL_51:
        uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        goto LABEL_33;
      }
LABEL_87:

LABEL_88:
      swift_bridgeObjectRelease();
      uint64_t v118 = 0;
      goto LABEL_33;
    }
  }
  id v121 = v174;
  id v122 = [v174 emailAddresses];
  sub_10002E768(&qword_100699D40);
  unint64_t v123 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v123 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v160 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v160) {
      goto LABEL_87;
    }
  }
  else if (!*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_87;
  }
  sub_10003566C(0, (v123 & 0xC000000000000001) == 0, v123);
  if ((v123 & 0xC000000000000001) != 0) {
    id v124 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v124 = *(id *)(v123 + 32);
  }
  uint64_t v125 = v124;
  swift_bridgeObjectRelease();
  id v126 = [v125 value];

  if (v126) {
    goto LABEL_51;
  }

LABEL_30:
  uint64_t v118 = 0;
LABEL_33:
  sub_10002EB9C((uint64_t)v181);
  return v118;
}

uint64_t sub_100091F7C()
{
  type metadata accessor for Logger();
  sub_100045FF4();
  uint64_t v57 = v1;
  uint64_t v58 = v0;
  __chkstk_darwin(v0);
  uint64_t v56 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1000930A4(v3);
  swift_bridgeObjectRelease();
  sub_10003BDA4(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = v5;
  unint64_t v8 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  unint64_t v9 = v8 + 1;
  if (v8 < v7 >> 1) {
    goto LABEL_2;
  }
LABEL_52:
  char v51 = sub_1000945E4(v7);
  sub_10003BDA4(v51, v52, v53, v6);
  uint64_t v6 = v54;
LABEL_2:
  int64_t v10 = 0;
  *(void *)(v6 + 16) = v9;
  *(void *)(v6 + 8 * v8 + 32) = _swiftEmptyDictionarySingleton;
  uint64_t v72 = (unint64_t *)v6;
  unint64_t v11 = v4[8];
  uint64_t v59 = v4;
  uint64_t v60 = v4 + 8;
  uint64_t v12 = 1 << *((unsigned char *)v4 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v9 = v13 & v11;
  int64_t v61 = (unint64_t)(v12 + 63) >> 6;
  if ((v13 & v11) != 0)
  {
LABEL_5:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v15 = v14 | (v10 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    unint64_t v7 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if ((uint64_t)v7 >= v61) {
      goto LABEL_46;
    }
    unint64_t v16 = v60[v7];
    ++v10;
    if (!v16)
    {
      int64_t v10 = v7 + 1;
      if ((uint64_t)(v7 + 1) >= v61) {
        goto LABEL_46;
      }
      unint64_t v16 = v60[v10];
      if (!v16)
      {
        int64_t v10 = v7 + 2;
        if ((uint64_t)(v7 + 2) >= v61) {
          goto LABEL_46;
        }
        unint64_t v16 = v60[v10];
        if (!v16)
        {
          int64_t v17 = v7 + 3;
          if (v17 >= v61) {
            goto LABEL_46;
          }
          unint64_t v16 = v60[v17];
          if (!v16)
          {
            while (1)
            {
              int64_t v10 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                break;
              }
              if (v10 >= v61) {
                goto LABEL_46;
              }
              unint64_t v16 = v60[v10];
              ++v17;
              if (v16) {
                goto LABEL_19;
              }
            }
            __break(1u);
LABEL_54:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          int64_t v10 = v17;
        }
      }
    }
LABEL_19:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v15 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_20:
    unint64_t v8 = *(void *)(v4[7] + 8 * v15);
    uint64_t v66 = *(void *)(v8 + 16);
    if (v66) {
      break;
    }
    uint64_t v20 = _swiftEmptyArrayStorage;
LABEL_42:
    swift_bridgeObjectRelease();
    uint64_t v72 = v20;
    uint64_t v6 = (uint64_t)v20;
    if (v9) {
      goto LABEL_5;
    }
  }
  unint64_t v62 = v9;
  int64_t v63 = v10;
  uint64_t v18 = (uint64_t *)(v4[6] + 16 * v15);
  uint64_t v6 = v18[1];
  uint64_t v70 = *v18;
  unint64_t v65 = v8 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v19 = 0;
  uint64_t v20 = _swiftEmptyArrayStorage;
  unint64_t v64 = v8;
  while (1)
  {
    unint64_t v7 = *(void *)(v8 + 16);
    if (v19 >= v7)
    {
      __break(1u);
      goto LABEL_51;
    }
    uint64_t v4 = v72;
    unint64_t v69 = v72[2];
    if (v69) {
      break;
    }
LABEL_39:
    if (++v19 == v66)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = v59;
      unint64_t v9 = v62;
      int64_t v10 = v63;
      goto LABEL_42;
    }
  }
  unint64_t v67 = v19;
  uint64_t v21 = (uint64_t *)(v65 + 16 * v19);
  unint64_t v9 = v21[1];
  uint64_t v68 = *v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  while (1)
  {
    uint64_t v23 = v4;
    unint64_t v24 = v4[v22 + 4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v71 = (void *)v24;
    sub_100055F1C(v70, v6);
    sub_10009440C();
    Swift::Int v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      break;
    }
    unint64_t v31 = v26;
    char v32 = v27;
    sub_10002E768(&qword_100699D38);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v30))
    {
      unint64_t v33 = sub_100055F1C(v70, v6);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_54;
      }
      unint64_t v31 = v33;
    }
    uint64_t v35 = v71;
    if (v32)
    {
      uint64_t v36 = (void *)(v71[7] + 16 * v31);
      swift_bridgeObjectRelease();
      *uint64_t v36 = v68;
      v36[1] = v9;
    }
    else
    {
      v71[(v31 >> 6) + 8] |= 1 << v31;
      uint64_t v37 = (void *)(v35[6] + 16 * v31);
      void *v37 = v70;
      v37[1] = v6;
      uint64_t v38 = (void *)(v35[7] + 16 * v31);
      *uint64_t v38 = v68;
      v38[1] = v9;
      uint64_t v39 = v35[2];
      BOOL v40 = __OFADD__(v39, 1);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_45;
      }
      long long v35[2] = v41;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10003BDA4(0, v20[2] + 1, 1, (uint64_t)v20);
      uint64_t v20 = v44;
    }
    unint64_t v43 = v20[2];
    unint64_t v42 = v20[3];
    if (v43 >= v42 >> 1)
    {
      sub_10003BDA4(v42 > 1, v43 + 1, 1, (uint64_t)v20);
      uint64_t v20 = v45;
    }
    ++v22;
    _OWORD v20[2] = v43 + 1;
    v20[v43 + 4] = (unint64_t)v35;
    uint64_t v4 = v23;
    if (v69 == v22)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v8 = v64;
      unint64_t v19 = v67;
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v55, v58);
  swift_bridgeObjectRetain();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)sub_100033734();
    *(_DWORD *)uint64_t v48 = 134349056;
    uint64_t v71 = *(void **)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Created %{public}ld permutations", v48, 0xCu);
    sub_100033704();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  sub_10003F240();
  v49();
  swift_beginAccess();
  return (uint64_t)v72;
}

uint64_t sub_100092558(uint64_t a1)
{
  uint64_t v88 = a1;
  uint64_t v1 = type metadata accessor for BindingsKeys();
  sub_100045FF4();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  uint64_t v87 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100065DA4();
  __chkstk_darwin(v6);
  uint64_t v86 = (char *)&v78 - v7;
  sub_100065DA4();
  __chkstk_darwin(v8);
  uint64_t v85 = (char *)&v78 - v9;
  sub_100065DA4();
  __chkstk_darwin(v10);
  uint64_t v91 = (char *)&v78 - v11;
  sub_100065DA4();
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v78 - v13;
  uint64_t v89 = (char *)&v78 - v13;
  uint64_t v90 = sub_10002E768(&qword_100698030);
  uint64_t inited = swift_initStackObject();
  long long v81 = xmmword_10058F3C0;
  *(_OWORD *)(inited + 16) = xmmword_10058F3C0;
  uint64_t v17 = v3 + 104;
  unint64_t v16 = *(void (**)(void))(v3 + 104);
  sub_100094474();
  v16();
  uint64_t v18 = BindingsKeys.rawValue.getter();
  uint64_t v20 = v19;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v3 + 8);
  v21(v14, v1);
  uint64_t v22 = v3 + 8;
  *(void *)(inited + 32) = v18;
  *(void *)(inited + 40) = v20;
  uint64_t v23 = v91;
  sub_100094474();
  v16();
  uint64_t v24 = BindingsKeys.rawValue.getter();
  uint64_t v26 = v25;
  v21(v23, v1);
  *(void *)(inited + 48) = v24;
  *(void *)(inited + 56) = v26;
  char v27 = v85;
  sub_100094474();
  v16();
  uint64_t v28 = v17;
  BindingsKeys.rawValue.getter();
  uint64_t v29 = sub_100094250();
  ((void (*)(uint64_t))v21)(v29);
  *(void *)(inited + 64) = v27;
  *(void *)(inited + 72) = v26;
  Swift::Int v30 = v86;
  sub_100094124();
  v16();
  unint64_t v31 = v30;
  BindingsKeys.rawValue.getter();
  uint64_t v32 = sub_100094250();
  ((void (*)(uint64_t))v21)(v32);
  uint64_t v33 = v22;
  uint64_t v79 = (void (*)(void))v21;
  *(void *)(inited + 80) = v31;
  *(void *)(inited + 88) = v26;
  char v34 = v87;
  sub_100094124();
  v16();
  uint64_t v35 = BindingsKeys.rawValue.getter();
  uint64_t v37 = v36;
  v21(v34, v1);
  *(void *)(inited + 96) = v35;
  *(void *)(inited + 104) = v37;
  uint64_t v38 = swift_initStackObject();
  long long v80 = xmmword_10058CF00;
  *(_OWORD *)(v38 + 16) = xmmword_10058CF00;
  uint64_t v39 = v89;
  sub_100094124();
  v16();
  uint64_t v84 = v28;
  BOOL v40 = v39;
  uint64_t v41 = BindingsKeys.rawValue.getter();
  uint64_t v43 = v42;
  uint64_t v83 = v33;
  uint64_t v44 = v79;
  ((void (*)(char *, uint64_t))v79)(v40, v1);
  *(void *)(v38 + 32) = v41;
  *(void *)(v38 + 40) = v43;
  uint64_t v45 = v91;
  ((void (*)(char *, void, uint64_t))v16)(v91, enum case for BindingsKeys.addressLon(_:), v1);
  uint64_t v46 = v16;
  BindingsKeys.rawValue.getter();
  uint64_t v47 = sub_1000945F8();
  ((void (*)(uint64_t))v44)(v47);
  *(void *)(v38 + 48) = v45;
  *(void *)(v38 + 56) = v43;
  uint64_t v82 = sub_100092B38(v88, (void *)inited, v38);
  swift_setDeallocating();
  sub_1000B4450();
  swift_setDeallocating();
  sub_1000B4450();
  uint64_t v48 = swift_initStackObject();
  *(_OWORD *)(v48 + 16) = v81;
  uint64_t v49 = v89;
  ((void (*)(char *, void, uint64_t))v46)(v89, enum case for BindingsKeys.documentStreet1(_:), v1);
  BindingsKeys.rawValue.getter();
  uint64_t v50 = sub_1000945F8();
  ((void (*)(uint64_t))v44)(v50);
  *(void *)(v48 + 32) = v49;
  *(void *)(v48 + 40) = v43;
  sub_100094124();
  v46();
  uint64_t v51 = BindingsKeys.rawValue.getter();
  uint64_t v53 = v52;
  sub_1000940CC();
  v44();
  *(void *)(v48 + 48) = v51;
  *(void *)(v48 + 56) = v53;
  sub_100094124();
  v46();
  uint64_t v54 = BindingsKeys.rawValue.getter();
  uint64_t v56 = v55;
  sub_1000940CC();
  v44();
  uint64_t v57 = v44;
  *(void *)(v48 + 64) = v54;
  *(void *)(v48 + 72) = v56;
  uint64_t v58 = v86;
  ((void (*)(char *, void, uint64_t))v46)(v86, enum case for BindingsKeys.documentState(_:), v1);
  uint64_t v59 = BindingsKeys.rawValue.getter();
  uint64_t v61 = v60;
  ((void (*)(char *, uint64_t))v57)(v58, v1);
  *(void *)(v48 + 80) = v59;
  *(void *)(v48 + 88) = v61;
  uint64_t v62 = sub_1000945D0();
  ((void (*)(uint64_t))v46)(v62);
  uint64_t v63 = BindingsKeys.rawValue.getter();
  uint64_t v65 = v64;
  sub_1000940CC();
  v57();
  *(void *)(v48 + 96) = v63;
  *(void *)(v48 + 104) = v65;
  uint64_t v66 = swift_initStackObject();
  *(_OWORD *)(v66 + 16) = v80;
  uint64_t v67 = sub_1000945D0();
  ((void (*)(uint64_t))v46)(v67);
  uint64_t v68 = BindingsKeys.rawValue.getter();
  uint64_t v70 = v69;
  sub_1000940CC();
  v57();
  *(void *)(v66 + 32) = v68;
  *(void *)(v66 + 40) = v70;
  ((void (*)(char *, void, uint64_t))v46)(v91, enum case for BindingsKeys.documentAddressLon(_:), v1);
  uint64_t v71 = BindingsKeys.rawValue.getter();
  uint64_t v73 = v72;
  sub_1000940CC();
  v57();
  *(void *)(v66 + 48) = v71;
  *(void *)(v66 + 56) = v73;
  uint64_t v74 = v88;
  uint64_t v75 = sub_100092B38(v88, (void *)v48, v66);
  swift_setDeallocating();
  sub_1000B4450();
  swift_setDeallocating();
  sub_1000B4450();
  swift_bridgeObjectRetain();
  uint64_t v76 = sub_100092D44((uint64_t)v82, v74);
  return sub_100092D44((uint64_t)v75, v76);
}

void *sub_100092B38(uint64_t a1, void *a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  LOBYTE(a2) = sub_10008C2C8(v5, a2);
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return _swiftEmptyDictionarySingleton;
  }
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (uint64_t *)(a3 + 40);
    while (1)
    {
      uint64_t v9 = *(v7 - 1);
      uint64_t v8 = *v7;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v11 = sub_100055F1C(v9, v8);
      uint64_t v13 = _swiftEmptyDictionarySingleton[2];
      BOOL v14 = (v12 & 1) == 0;
      Swift::Int v15 = v13 + v14;
      if (__OFADD__(v13, v14)) {
        break;
      }
      unint64_t v16 = v11;
      char v17 = v12;
      sub_10002E768(&qword_100699D38);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15))
      {
        unint64_t v18 = sub_100055F1C(v9, v8);
        if ((v17 & 1) != (v19 & 1)) {
          goto LABEL_18;
        }
        unint64_t v16 = v18;
      }
      if (v17)
      {
        uint64_t v20 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v16);
        swift_bridgeObjectRelease();
        *uint64_t v20 = 0;
        v20[1] = 0xE000000000000000;
      }
      else
      {
        _swiftEmptyDictionarySingleton[(v16 >> 6) + 8] |= 1 << v16;
        uint64_t v21 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v16);
        *uint64_t v21 = v9;
        v21[1] = v8;
        uint64_t v22 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v16);
        *uint64_t v22 = 0;
        v22[1] = 0xE000000000000000;
        uint64_t v23 = _swiftEmptyDictionarySingleton[2];
        BOOL v24 = __OFADD__(v23, 1);
        uint64_t v25 = v23 + 1;
        if (v24) {
          goto LABEL_17;
        }
        _swiftEmptyDictionarySingleton[2] = v25;
        swift_bridgeObjectRetain();
      }
      v7 += 2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_15:
    sub_100084F74((uint64_t)_swiftEmptyDictionarySingleton);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    return (void *)v28;
  }
  return result;
}

uint64_t sub_100092D44(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  sub_100092E68(a1, (uint64_t)sub_100093394, 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

unint64_t sub_100092DD0()
{
  unint64_t result = qword_100699D28;
  if (!qword_100699D28)
  {
    type metadata accessor for ODIDeviceInfo();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699D28);
  }
  return result;
}

uint64_t type metadata accessor for BindingsGuesser()
{
  uint64_t result = qword_100699DA0;
  if (!qword_100699DA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100092E68(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  sub_10009343C(a1, a2, a3, &v31);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100093478((uint64_t)&v28);
  uint64_t v7 = v29;
  if (!v29)
  {
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000581E4();
    return swift_release();
  }
  while (1)
  {
    uint64_t v8 = v28;
    sub_1000311A4(&v30, (uint64_t)v27);
    uint64_t v9 = *a5;
    unint64_t v10 = sub_100055F1C(v8, v7);
    sub_10009440C();
    if (__OFADD__(v12, v13)) {
      break;
    }
    char v14 = v11;
    if (*(void *)(v9 + 24) >= v12 + v13)
    {
      if (a4)
      {
        if (v11) {
          goto LABEL_9;
        }
      }
      else
      {
        sub_10002E768((uint64_t *)&unk_100699120);
        _NativeDictionary.copy()();
        if (v14) {
          goto LABEL_9;
        }
      }
    }
    else
    {
      sub_100063FB0();
      unint64_t v15 = sub_100055F1C(v8, v7);
      if ((v14 & 1) != (v16 & 1)) {
        goto LABEL_17;
      }
      unint64_t v10 = v15;
      if (v14)
      {
LABEL_9:
        uint64_t v17 = 5 * v10;
        sub_10002EA7C(*(void *)(*a5 + 56) + 8 * v17, (uint64_t)v25);
        sub_10002EA7C((uint64_t)v25, (uint64_t)v26);
        sub_10002EB9C((uint64_t)v25);
        sub_10002EB9C((uint64_t)v27);
        swift_bridgeObjectRelease();
        uint64_t v18 = *(void *)(*a5 + 56) + 8 * v17;
        sub_10002EB9C(v18);
        sub_1000311A4(v26, v18);
        goto LABEL_13;
      }
    }
    char v19 = (void *)*a5;
    *(void *)(*a5 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    uint64_t v20 = (uint64_t *)(v19[6] + 16 * v10);
    *uint64_t v20 = v8;
    v20[1] = v7;
    sub_1000311A4(v27, v19[7] + 40 * v10);
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_16;
    }
    void v19[2] = v23;
LABEL_13:
    sub_100093478((uint64_t)&v28);
    uint64_t v7 = v29;
    a4 = 1;
    if (!v29) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t *sub_1000930A4(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (unint64_t *)isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v5 = (unint64_t *)((char *)&v9 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_100081270(0, v4, v5);
    uint64_t v6 = sub_100093208(v5, v4, (uint64_t)v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (unint64_t *)swift_slowAlloc();
    sub_100081270(0, v4, v7);
    uint64_t v2 = sub_100093208(v7, v4, (uint64_t)v2);
    swift_slowDealloc();
  }
  return v2;
}

unint64_t *sub_100093208(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10) {
      return (unint64_t *)sub_1000B834C(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)sub_1000B834C(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)sub_1000B834C(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    if (*(void *)(*(void *)(*(void *)(a3 + 56) + 8 * v12) + 16))
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1000B834C(result, a2, v4, a3);
      }
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)sub_1000B834C(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)sub_1000B834C(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100093354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2;
}

uint64_t sub_100093394@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100093354((uint64_t)(a2 + 2), *a1, a1[1], (uint64_t)(a1 + 2));
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1000933CC(void *a1)
{
  id v2 = [a1 identifier];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10009343C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_100093478@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    unint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_10002EA7C(*(void *)(v3 + 56) + 40 * v10, (uint64_t)v26);
    *(void *)&long long v25 = v13;
    *((void *)&v25 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v18 < v15)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  long long v25 = 0u;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  char v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_10009366C((uint64_t)&v25, (uint64_t)v23);
  if (*((void *)&v23[0] + 1))
  {
    v21[0] = v23[0];
    v21[1] = v23[1];
    _OWORD v21[2] = v23[2];
    uint64_t v22 = v24;
    v19(v21);
    return sub_1000936D4((uint64_t)v21);
  }
  else
  {
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_10009366C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002E768(&qword_100699188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000936D4(uint64_t a1)
{
  uint64_t v2 = sub_10002E768(&qword_100699D30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for BindingsGuesserSourceFactory()
{
  return &type metadata for BindingsGuesserSourceFactory;
}

uint64_t *sub_100093744(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
    uint64_t v10 = *(int *)(a3 + 24);
    long long v11 = *(_OWORD *)((char *)a2 + v10 + 24);
    *(_OWORD *)((char *)a1 + v10 + 24) = v11;
    (**(void (***)(void))(v11 - 8))();
  }
  return a1;
}

uint64_t sub_1000938AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_10002EB9C(a1 + *(int *)(a2 + 20));
  uint64_t v5 = a1 + *(int *)(a2 + 24);

  return sub_10002EB9C(v5);
}

uint64_t sub_10009392C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  long long v8 = *(_OWORD *)(a2 + v7 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v8;
  (**(void (***)(void))(v8 - 8))();
  uint64_t v9 = *(int *)(a3 + 24);
  long long v10 = *(_OWORD *)(a2 + v9 + 24);
  *(_OWORD *)(a1 + v9 + 24) = v10;
  (**(void (***)(void))(v10 - 8))();
  return a1;
}

uint64_t sub_100093A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  sub_10005C760((uint64_t *)(a1 + *(int *)(a3 + 20)), (uint64_t *)(a2 + *(int *)(a3 + 20)));
  sub_10005C760((uint64_t *)(a1 + *(int *)(a3 + 24)), (uint64_t *)(a2 + *(int *)(a3 + 24)));
  return a1;
}

uint64_t sub_100093AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  uint64_t v12 = a1 + v8;
  uint64_t v13 = a2 + v8;
  long long v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  return a1;
}

uint64_t sub_100093B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  sub_10002EB9C(a1 + v7);
  long long v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  sub_10002EB9C(a1 + v11);
  long long v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  return a1;
}

uint64_t sub_100093C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100093C4C);
}

uint64_t sub_100093C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Logger();
  sub_10005CD50();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_1000312BC(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_100093CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100093CF0);
}

void sub_100093CF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Logger();
  sub_10005CD50();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_10003349C(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  }
}

uint64_t sub_100093D7C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100093E30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v2[80] = a2;
  v2[79] = 0;
  v2[19] = *(void *)(v2[77] + 32);
  return sub_10002EAE0(a1, a1[3]);
}

uint64_t sub_100093E64()
{
  return *(void *)(v0 + 200);
}

unint64_t sub_100093E90()
{
  *(void *)(v3 + 144) = v2;
  return sub_100055F1C(v0, v1);
}

uint64_t sub_100093EB0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100093EDC()
{
  sub_10002EAE0(v0, v1);
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100093F1C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 352) = *(void *)(a1 + 16);
  *(void *)(v2 + 360) = (a1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  return v1;
}

uint64_t sub_100093F3C()
{
  return v0;
}

uint64_t sub_100093F4C()
{
  return v0;
}

uint64_t sub_100093F5C()
{
  return v0;
}

uint64_t sub_100093F70()
{
  return v0;
}

uint64_t sub_100093F88@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = *(void *)(a1 + 8 * v1 + 32);
  *(void *)(v2 + 432) = result;
  *(void *)(v2 + 440) = *(void *)(result + 16);
  return result;
}

uint64_t sub_100093FA0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100093FDC()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_100093FF8()
{
  return swift_task_dealloc();
}

uint64_t sub_100094028()
{
  return *(void *)(v0 + 168);
}

uint64_t sub_100094044()
{
  return *(void *)(v0 + 168);
}

void sub_10009407C()
{
  *(void *)(v1 - 96) = v0;
}

uint64_t sub_1000940DC()
{
  return v0;
}

void sub_1000940F4()
{
  v1[46] = v0;
  v1[15] = 0;
  v1[16] = 0xE000000000000000;
  v1[47] = *(void *)(v2 + 16);
}

uint64_t sub_100094134@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  v4[39] = a2;
  unsigned char v4[40] = v3;
  v4[41] = *(void *)(*(void *)(result + 48) + 16 * v2);
  return result;
}

uint64_t sub_100094158()
{
  uint64_t v2 = *(void *)(v0 + 192);
  *(_DWORD *)(v0 + 680) = *(_DWORD *)(v2 + 80);
  *(void *)(v0 + 448) = *(void *)(v2 + 72);
  *(void *)(v0 + 456) = *(void *)(v2 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100094198(uint64_t a1)
{
  uint64_t v3 = *(int *)(a1 + 24);
  *(_DWORD *)(v2 + 684) = v3;
  return v1 + v3;
}

void sub_1000941A8()
{
}

void sub_1000941C4()
{
  *(void *)(v1 - 96) = v0;
}

uint64_t sub_1000941E4(uint64_t a1)
{
  *(void *)(v1 + 616) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100094200()
{
  return swift_bridgeObjectRetain();
}

void sub_10009421C(uint64_t a1@<X8>)
{
  *(void *)(v2 + 312) = a1;
  *(void *)(v2 + 320) = v1;
}

uint64_t sub_100094238()
{
  return static ODIAccountManager.shared.getter();
}

uint64_t sub_100094250()
{
  return v0;
}

uint64_t sub_10009426C()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100094284()
{
  return type metadata accessor for ODIAccountManager();
}

void sub_1000942A0(uint64_t a1@<X8>)
{
  *(void *)(v1 + 528) = a1;
  *(void *)(v1 + 520) = *(void *)(v2 - 96);
}

uint64_t sub_1000942B0()
{
  return type metadata accessor for ODIAccountManager();
}

uint64_t sub_1000942EC()
{
  return v0;
}

uint64_t sub_100094304(uint64_t result)
{
  *(void *)(v1 + 648) = result;
  return result;
}

void sub_100094310()
{
  *(void *)(v1 - 96) = v0;
}

uint64_t sub_100094320()
{
  return *(void *)(v0 + 432);
}

void sub_100094348()
{
  sub_10003BEAC();
}

void sub_10009437C()
{
  sub_10003BEAC();
}

uint64_t sub_1000943A0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return swift_bridgeObjectRelease();
}

void sub_1000943DC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 536) = a2;
}

void sub_1000943EC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 560) = a2;
}

uint64_t sub_100094418()
{
  return sub_100032B48(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_100094450()
{
  return swift_task_dealloc();
}

uint64_t sub_1000944A0(uint64_t result)
{
  *(void *)(v1 + 544) = result;
  return result;
}

uint64_t sub_1000944AC(uint64_t result)
{
  *(void *)(v1 + 568) = result;
  return result;
}

uint64_t sub_1000944B8(uint64_t result)
{
  *(void *)(v1 + 592) = result;
  return result;
}

uint64_t sub_1000944D8()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000944F0()
{
  return swift_beginAccess();
}

void sub_100094508(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

void sub_100094520()
{
  *(void *)(v0 + 64) |= v1;
}

uint64_t sub_100094540()
{
  return v0;
}

uint64_t sub_10009454C()
{
  return *(void *)(v0 - 96);
}

uint64_t sub_100094558()
{
  return v0;
}

id sub_100094564(uint64_t a1)
{
  uint64_t v3 = *(void *)(v2 + 328);
  unint64_t v4 = *(void *)(v2 + 336);
  sub_10002EB9C(a1);
  return sub_10009017C(v3, v4, v1);
}

BOOL sub_10009459C()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_1000945BC(uint64_t result)
{
  *(void *)(v1 - 88) = result;
  return result;
}

uint64_t sub_1000945D0()
{
  return v0;
}

BOOL sub_1000945E4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000945F8()
{
  return v0;
}

uint64_t sub_10009460C(uint64_t result)
{
  *(void *)(v1 + 584) = result;
  return result;
}

uint64_t sub_100094618()
{
  return type metadata accessor for BindingsGuesser();
}

uint64_t sub_100094630()
{
  uint64_t v2 = *(void *)(v0 + 328);
  unint64_t v3 = *(void *)(v0 + 336);
  return sub_100090820(v2, v3);
}

unint64_t sub_100094648()
{
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 336);
  return sub_100055F1C(v2, v3);
}

void sub_100094660(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v1;
}

void sub_100094684()
{
  *(void *)(v1 + 624) = *(void *)(v0 + 16);
}

uint64_t sub_10009469C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    LODWORD(v2) = 0;
    uint64_t v3 = (unsigned __int8 *)(a1 + 32);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if ((v5 & ~v2) == 0) {
        int v4 = 0;
      }
      uint64_t v2 = v4 | v2;
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1000946F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v4 = v5;
      if ((v5 & ~v2) == 0) {
        uint64_t v4 = 0;
      }
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100094748(unsigned int a1, int a2)
{
  return a2 | a1;
}

uint64_t sub_100094750(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_100094758(unsigned int a1, int a2)
{
  return a2 ^ a1;
}

uint64_t sub_100094760(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

uint64_t sub_100094768(unsigned __int8 a1)
{
  char v2 = *v1;
  if ((*v1 & a1) != 0) {
    *uint64_t v1 = v2 & ~a1;
  }
  return sub_100094B10((v2 & a1));
}

uint64_t sub_100094790(uint64_t a1)
{
  uint64_t result = *v1 & a1;
  if (result) {
    *v1 &= ~a1;
  }
  return result;
}

uint64_t sub_1000947B4(char a1)
{
  char v2 = *v1;
  *v1 |= a1;
  return sub_100094B10((v2 & a1));
}

uint64_t sub_1000947D4(uint64_t a1)
{
  uint64_t v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

uint64_t sub_1000947EC(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t sub_1000947FC(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t sub_10009480C(int a1, int a2)
{
  return a2 & ~a1;
}

uint64_t sub_100094814(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

uint64_t sub_10009481C(uint64_t result)
{
  *v1 &= ~(_BYTE)result;
  return result;
}

uint64_t sub_10009482C(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

uint64_t sub_10009483C(void *a1)
{
  sub_10002EAE0(a1, a1[3]);
  sub_1000463E8();
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    sub_10002EB9C((uint64_t)a1);
  }
  else
  {
    sub_10002EAE0(v5, v5[3]);
    sub_1000463E8();
    uint64_t v1 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    sub_10002EB9C((uint64_t)v5);
    sub_10002EB9C((uint64_t)a1);
  }
  return v1;
}

uint64_t sub_1000948E0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10009483C(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10009490C()
{
  return RawRepresentable<>.encode(to:)();
}

BOOL sub_10009495C(uint64_t *a1)
{
  return sub_10003F048(*a1, *v1);
}

BOOL sub_100094968(void *a1, uint64_t *a2)
{
  return sub_10003F040(a1, *a2);
}

uint64_t sub_100094970(uint64_t *a1)
{
  return sub_10003F054(*a1);
}

uint64_t sub_100094978(uint64_t *a1)
{
  return sub_10003F044(*a1);
}

BOOL sub_100094980(uint64_t *a1)
{
  return sub_10003F050(*a1, *v1);
}

BOOL sub_10009498C(uint64_t *a1)
{
  return sub_10003F04C(*a1, *v1);
}

ValueMetadata *type metadata accessor for DataProtectionClassOptions()
{
  return &type metadata for DataProtectionClassOptions;
}

uint64_t sub_1000949A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000946F4(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1000949D4()
{
  unint64_t result = qword_100699DE0;
  if (!qword_100699DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699DE0);
  }
  return result;
}

unint64_t sub_100094A24()
{
  unint64_t result = qword_100699DE8;
  if (!qword_100699DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699DE8);
  }
  return result;
}

unint64_t sub_100094A74()
{
  unint64_t result = qword_100699DF0;
  if (!qword_100699DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699DF0);
  }
  return result;
}

unint64_t sub_100094AC4()
{
  unint64_t result = qword_100699DF8;
  if (!qword_100699DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699DF8);
  }
  return result;
}

uint64_t sub_100094B10@<X0>(int a1@<W8>)
{
  return a1 | (v1 << 8);
}

uint64_t sub_100094B1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10002E768(&qword_100697DB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [a1 stringForKey:v7];

  if (v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = type metadata accessor for URL();
    if (sub_1000312BC((uint64_t)v6, 1, v9) == 1)
    {
      sub_10007E9CC((uint64_t)v6, &qword_100697DB0);
      if (qword_1006978B0 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100031284(v10, (uint64_t)qword_1006AD1B8);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315138;
        uint64_t v19 = sub_100032B48(0xD000000000000014, 0x8000000100569140, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Invalid URL in defaults for key: %s", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      if (qword_1006978B8 != -1) {
        swift_once();
      }
      uint64_t v14 = sub_100031284(v9, (uint64_t)qword_1006AD1D0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a2, v14, v9);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a2, v6, v9);
    }
  }
  else
  {
    if (qword_1006978B8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for URL();
    uint64_t v17 = sub_100031284(v16, (uint64_t)qword_1006AD1D0);
    int64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    return v18(a2, v17, v16);
  }
}

void sub_100094EE0(void *a1)
{
  uint64_t v2 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  NSString v3 = String._bridgeToObjectiveC()();
  [a1 setObject:v2 forKey:v3];
  swift_unknownObjectRelease();
}

void sub_100094F6C(uint64_t a1, unint64_t a2, void *a3)
{
  sub_10002FBFC(a1, a2);
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  NSString v5 = String._bridgeToObjectiveC()();
  [a3 setObject:v4 forKey:v5];
  swift_unknownObjectRelease();
}

void sub_100095004(void *a1)
{
  uint64_t v2 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  NSString v3 = String._bridgeToObjectiveC()();
  [a1 setObject:v2 forKey:v3];
  swift_unknownObjectRelease();
}

uint64_t *ASDConfigurationManager.shared.unsafeMutableAddressor()
{
  if (qword_100697968 != -1) {
    swift_once();
  }
  return &static ASDConfigurationManager.shared;
}

uint64_t sub_1000950DC@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  id v2 = [self standardUserDefaults];
  sub_1000660E0(v2, (uint64_t)v11);

  uint64_t v3 = v11[0];
  unint64_t v4 = v11[1];
  sub_10009EEBC();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_10002EC6C(v3, v4);
  uint64_t result = swift_release();
  long long v6 = v13;
  long long v7 = v14;
  long long v8 = v15;
  long long v9 = v16;
  long long v10 = v17;
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  return result;
}

BOOL sub_100095290(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = (int)a1;
      uint64_t v2 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v2 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      return v3 == v2;
    default:
      uint64_t v3 = 0;
      uint64_t v2 = BYTE6(a2);
      break;
  }
  return v3 == v2;
}

uint64_t sub_1000952F4()
{
  uint64_t v2 = sub_1000A15D4();
  if (sub_1000312BC(v1, 1, v2) == 1)
  {
    sub_10007E9CC(v1, &qword_100697E68);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10005EDB8();
    uint64_t v3 = sub_1000A158C();
    v4(v3);
  }
  if (*(void *)(v0 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  sub_10002E768(&qword_10069A0A0);
  return swift_task_create();
}

uint64_t sub_100095420()
{
  uint64_t v2 = sub_1000A15D4();
  if (sub_1000312BC(v1, 1, v2) == 1)
  {
    sub_10007E9CC(v1, &qword_100697E68);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10005EDB8();
    uint64_t v3 = sub_1000A158C();
    v4(v3);
  }
  if (*(void *)(v0 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

NSString sub_100095548()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1006AD288 = (uint64_t)result;
  return result;
}

uint64_t sub_100095580()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_100699E00);
  sub_100031284(v0, (uint64_t)qword_100699E00);
  return Logger.init(subsystem:category:)();
}

void sub_100095604()
{
}

uint64_t sub_10009562C(uint64_t a1, uint64_t a2)
{
  if (a1 == 6583137 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1000956A4()
{
  return 6583137;
}

uint64_t sub_1000956B4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10002E768(&qword_10069A1C8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002EAE0(a1, a1[3]);
  sub_1000A09FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10009E988(v2, (uint64_t)v10, &qword_100697F08);
  sub_10009E988((uint64_t)v10, (uint64_t)v9, &qword_100697F08);
  sub_1000A0A94();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100095824@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10002E768(&qword_10069A1B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EAE0(a1, a1[3]);
  sub_1000A09FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10002EB9C((uint64_t)a1);
  }
  sub_1000A0A48();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v17 = v20;
  long long v18 = v19;
  long long v15 = v22;
  long long v16 = v21;
  long long v14 = v23;
  uint64_t v9 = v24;
  uint64_t v10 = v25;
  uint64_t result = sub_10002EB9C((uint64_t)a1);
  long long v12 = v17;
  *(_OWORD *)a2 = v18;
  *(_OWORD *)(a2 + 16) = v12;
  long long v13 = v15;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 64) = v14;
  *(void *)(a2 + 80) = v9;
  *(void *)(a2 + 88) = v10;
  return result;
}

Swift::Int sub_1000959E8()
{
  return sub_100095FA4();
}

uint64_t sub_100095A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10009562C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100095A38(uint64_t a1)
{
  unint64_t v2 = sub_1000A09FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100095A74(uint64_t a1)
{
  unint64_t v2 = sub_1000A09FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100095AB0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_100095824(a1, (uint64_t)v5);
  if (!v2) {
    return memcpy(a2, v5, 0x60uLL);
  }
  return result;
}

uint64_t sub_100095AFC(void *a1)
{
  memcpy(v4, v1, sizeof(v4));
  return sub_1000956B4(a1);
}

uint64_t sub_100095B50(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7366003 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7759218 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100095C28(char a1)
{
  if (a1) {
    return 7759218;
  }
  else {
    return 7366003;
  }
}

void sub_100095C48()
{
  sub_100046054();
  char v3 = v2;
  uint64_t v4 = sub_10002E768(&qword_10069A190);
  sub_100045FF4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10005873C();
  sub_10002EAE0(v3, v3[3]);
  sub_1000A086C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0) {
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v4);
  sub_10004603C();
}

uint64_t sub_100095D70(void *a1)
{
  sub_10002E768(&qword_10069A150);
  sub_100045FF4();
  __chkstk_darwin(v3);
  sub_100046348();
  uint64_t v4 = a1[4];
  sub_10002EAE0(a1, a1[3]);
  sub_1000A086C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10002EB9C((uint64_t)a1);
  }
  else
  {
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_1000A140C();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_1000462F8();
    v6();
    sub_10002EB9C((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t sub_100095F10(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6C62617369447369 && a2 == 0xEA00000000006465)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_100095FA4()
{
  return Hasher._finalize()();
}

uint64_t sub_100095FE8()
{
  return 0x6C62617369447369;
}

uint64_t sub_100096004()
{
  sub_10002E768(&qword_10069A198);
  sub_100045FF4();
  __chkstk_darwin(v0);
  sub_100046348();
  sub_1000A13D0();
  sub_1000A08B8();
  sub_1000A1440();
  KeyedEncodingContainer.encode(_:forKey:)();
  sub_1000462F8();
  return v1();
}

uint64_t sub_1000960D8(void *a1)
{
  sub_10002E768(&qword_10069A160);
  sub_100045FF4();
  __chkstk_darwin(v3);
  sub_10005873C();
  unsigned __int8 v4 = sub_10002EAE0(a1, a1[3]);
  sub_1000A08B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    unsigned __int8 v4 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_1000462F8();
    v5();
  }
  sub_10002EB9C((uint64_t)a1);
  return v4 & 1;
}

uint64_t sub_1000961EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5255656372756F73 && a2 == 0xE90000000000004CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7246657461647075 && a2 == 0xEF79636E65757165;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x800000010056AD90 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000015 && a2 == 0x8000000100569DE0 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else if (a1 == 0xD000000000000025 && a2 == 0x800000010056ADB0)
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 4;
      }
      else {
        return 5;
      }
    }
  }
}

unint64_t sub_100096420(char a1)
{
  unint64_t result = 0x5255656372756F73;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7246657461647075;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000025;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000964F0()
{
  sub_100046054();
  int v12 = v1;
  uint64_t v11 = v2;
  unsigned __int8 v4 = v3;
  uint64_t v5 = sub_10002E768(&qword_10069A1A0);
  sub_100045FF4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EAE0(v4, v4[3]);
  sub_1000A0904();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000A1558();
    sub_1000A1388();
    sub_1000A1388();
    sub_1000A1388();
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
  sub_10004603C();
}

void sub_100096688()
{
  sub_100046054();
  uint64_t v2 = v1;
  sub_10002E768(&qword_10069A170);
  sub_100045FF4();
  __chkstk_darwin(v3);
  sub_10002EAE0(v2, v2[3]);
  sub_1000A0904();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_10002EB9C((uint64_t)v2);
  }
  else
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_1000A140C();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_1000A1558();
    sub_1000A14D4();
    sub_1000A14D4();
    sub_1000A14D4();
    sub_100046244();
    v4();
    sub_10002EB9C((uint64_t)v2);
    swift_bridgeObjectRelease();
  }
  sub_10004603C();
}

uint64_t sub_1000968A4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x43786F62646E6173 && a2 == 0xEE006C656E6E6168;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x800000010056ADE0 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      BOOL v7 = a1 == 1936680295 && a2 == 0xE400000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0x6F6973756C637865 && a2 == 0xED000065646F4D6ELL)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 4;
        }
        else {
          return 5;
        }
      }
    }
  }
}

uint64_t sub_100096AF4()
{
  return 5;
}

unint64_t sub_100096AFC(char a1)
{
  unint64_t result = 0x696669746E656469;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x43786F62646E6173;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 1936680295;
      break;
    case 4:
      unint64_t result = 0x6F6973756C637865;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100096BC4()
{
  sub_10002E768(&qword_10069A1A8);
  sub_100045FF4();
  __chkstk_darwin(v1);
  sub_1000A13D0();
  sub_1000A0950();
  sub_1000A1440();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_1000A1558();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10002E768(&qword_1006982F8);
    sub_1000A099C((uint64_t)&qword_100698318);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1000A1388();
  }
  sub_1000462F8();
  return v2();
}

void sub_100096D8C()
{
  sub_100046054();
  BOOL v2 = v1;
  uint64_t v4 = v3;
  sub_10002E768(&qword_10069A180);
  sub_100045FF4();
  __chkstk_darwin(v5);
  sub_1000A1498();
  sub_10002EAE0(v2, v2[3]);
  sub_1000A0950();
  sub_1000A15AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    sub_10002EB9C((uint64_t)v2);
  }
  else
  {
    sub_1000A13F4();
    uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v8 = v7;
    uint64_t v21 = v6;
    sub_1000A140C();
    sub_1000A13F4();
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v22 = v10;
    uint64_t v20 = v9;
    sub_1000A1558();
    swift_bridgeObjectRetain();
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v12 = v11;
    sub_10002E768(&qword_1006982F8);
    unint64_t v13 = sub_1000A099C((uint64_t)&qword_100698300);
    swift_bridgeObjectRetain();
    sub_1000A13F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    if (v13)
    {
      uint64_t v14 = sub_1000A1304();
      v15(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002EB9C((uint64_t)v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1000A13F4();
      char v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      uint64_t v17 = sub_1000A1304();
      v18(v17);
      sub_10002EB9C((uint64_t)v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v4 = v21;
      *(void *)(v4 + 8) = v8;
      *(void *)(v4 + 16) = v20;
      *(void *)(v4 + 24) = v22;
      *(void *)(v4 + 32) = v19;
      *(void *)(v4 + 40) = v12;
      *(void *)(v4 + 48) = v23;
      *(unsigned char *)(v4 + 56) = v16;
    }
  }
  sub_10004603C();
}

uint64_t sub_1000970E4()
{
  return sub_100095C28(*v0);
}

uint64_t sub_1000970EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100095B50(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100097114(uint64_t a1)
{
  unint64_t v2 = sub_1000A086C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100097150(uint64_t a1)
{
  unint64_t v2 = sub_1000A086C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009718C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100095D70(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

void sub_1000971BC()
{
}

Swift::Int sub_1000971DC()
{
  return Hasher._finalize()();
}

uint64_t sub_100097220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100095F10(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10009724C(uint64_t a1)
{
  unint64_t v2 = sub_1000A08B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100097288(uint64_t a1)
{
  unint64_t v2 = sub_1000A08B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000972C4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000960D8(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_1000972F4()
{
  return sub_100096004();
}

unint64_t sub_100097310()
{
  return sub_100096420(*v0);
}

uint64_t sub_100097318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000961EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100097340(uint64_t a1)
{
  unint64_t v2 = sub_1000A0904();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009737C(uint64_t a1)
{
  unint64_t v2 = sub_1000A0904();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000973B8(uint64_t a1@<X8>)
{
  sub_100096688();
  if (!v1)
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v6 & 1;
    *(unsigned char *)(a1 + 25) = BYTE1(v6);
    *(unsigned char *)(a1 + 26) = BYTE2(v6);
    *(unsigned char *)(a1 + 27) = HIBYTE(v6);
  }
}

void sub_100097408()
{
}

unint64_t sub_100097450()
{
  return sub_100096AFC(*v0);
}

uint64_t sub_100097458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000968A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100097480@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100096AF4();
  *a1 = result;
  return result;
}

uint64_t sub_1000974A8(uint64_t a1)
{
  unint64_t v2 = sub_1000A0950();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000974E4(uint64_t a1)
{
  unint64_t v2 = sub_1000A0950();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100097520@<D0>(_OWORD *a1@<X8>)
{
  sub_100096D8C();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    a1[2] = *(_OWORD *)v6;
    double result = *(double *)&v6[9];
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)&v6[9];
  }
  return result;
}

uint64_t sub_10009756C()
{
  return sub_100096BC4();
}

uint64_t sub_100097584(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000010056ACA0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x800000010056ACC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000020 && a2 == 0x800000010056ACE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010056AD10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000010056AD30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    BOOL v5 = a1 == 0x4D32566568636163 && a2 == 0xED00006567417861;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x800000010056AD50 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 6;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x800000010056AD70 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 7;
    }
    else if (a1 == 0x4165636976726573 && a2 == 0xEC00000073616572)
    {
      swift_bridgeObjectRelease();
      return 8;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 8;
      }
      else {
        return 9;
      }
    }
  }
}

uint64_t sub_100097920()
{
  return 9;
}

unint64_t sub_100097928(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 2:
      unint64_t result = 0xD000000000000020;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0x4D32566568636163;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0x4165636976726573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100097A34()
{
  sub_10002E768(&qword_100699F60);
  sub_100045FF4();
  __chkstk_darwin(v2);
  sub_1000A13D0();
  sub_10009E598();
  sub_1000A1440();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    sub_1000A14B0(1);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10009E988(v0 + 40, (uint64_t)v9, &qword_100697F10);
    sub_1000A1480((uint64_t)v9);
    sub_10002E768(&qword_100699F08);
    sub_10009E7DC((uint64_t)&unk_100699F68);
    sub_1000A13A4();
    sub_10009E988(v0 + 48, (uint64_t)v8, &qword_100698860);
    sub_1000A1480((uint64_t)v8);
    sub_10009E8A4();
    sub_1000A145C();
    sub_1000A14B0(5);
    sub_10009E988(v0 + 73, (uint64_t)&v7, &qword_100699F80);
    sub_1000A1480((uint64_t)&v7);
    sub_10009E8F0();
    sub_1000A145C();
    sub_10009E988(v0 + 80, (uint64_t)v6, &qword_1006993A0);
    sub_1000A1480((uint64_t)v6);
    sub_10002E768(&qword_100699F30);
    sub_10009E7DC((uint64_t)&unk_100699F90);
    sub_1000A13A4();
    sub_10009E988(v0 + 88, (uint64_t)v5, &qword_100698B48);
    sub_1000A1480((uint64_t)v5);
    sub_10002E768(&qword_100699F48);
    sub_10009EF08((uint64_t)&unk_100699FA0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  sub_1000462F8();
  return v3();
}

void sub_100097D8C()
{
  sub_100046054();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_10002E768(&qword_100699EF8);
  sub_100045FF4();
  __chkstk_darwin(v5);
  sub_1000A1498();
  sub_10002EAE0(v2, v2[3]);
  sub_10009E598();
  sub_1000A15AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0) {
    goto LABEL_3;
  }
  sub_1000A13F4();
  uint64_t v6 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v8 = v7;
  uint64_t v9 = sub_1000A15F4();
  char v31 = v10;
  uint64_t v28 = v9;
  LOBYTE(v29) = 2;
  sub_1000A13F4();
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v27 = v8;
  sub_10002E768(&qword_100699F08);
  sub_10009E6C8((uint64_t)&unk_100699F10);
  sub_1000A1540();
  uint64_t v13 = v29;
  unint64_t v14 = sub_10009E630();
  swift_bridgeObjectRetain();
  sub_1000A15C0();
  sub_1000A1540();
  if (v14)
  {
    uint64_t v15 = sub_1000A1354();
    v16(v15);
    swift_bridgeObjectRelease();
LABEL_3:
    int v11 = 0;
    int v12 = 0;
    goto LABEL_4;
  }
  uint64_t v17 = v29;
  LOBYTE(v29) = 5;
  uint64_t v25 = v17;
  sub_1000516DC(v17);
  uint64_t v18 = sub_1000A15F4();
  char v23 = v19;
  uint64_t v24 = v18;
  sub_10009E67C();
  sub_1000A15C0();
  sub_1000A1540();
  sub_10002E768(&qword_100699F30);
  sub_10009E6C8((uint64_t)&unk_100699F38);
  sub_1000A1540();
  sub_10002E768(&qword_100699F48);
  unint64_t v20 = sub_10009EF08((uint64_t)&unk_100699F50);
  swift_bridgeObjectRetain();
  sub_1000A1540();
  uint64_t v21 = sub_1000A1354();
  v22(v21);
  if (!v20)
  {
    swift_bridgeObjectRetain();
    sub_1000516DC(v25);
    swift_bridgeObjectRetain();
    sub_1000A1428();
    swift_bridgeObjectRelease();
    sub_10002EB9C((uint64_t)v2);
    swift_bridgeObjectRelease();
    sub_1000A1428();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)uint64_t v4 = v6;
    *(unsigned char *)(v4 + 8) = v27 & 1;
    *(void *)(v4 + 16) = v28;
    *(unsigned char *)(v4 + 24) = v31 & 1;
    *(_DWORD *)(v4 + 28) = v26;
    *(unsigned char *)(v4 + 32) = BYTE4(v26) & 1;
    *(void *)(v4 + 40) = v13;
    *(void *)(v4 + 48) = v25;
    *(void *)(v4 + 56) = v30;
    *(void *)(v4 + 64) = v24;
    *(unsigned char *)(v4 + 72) = v23 & 1;
    *(unsigned char *)(v4 + 73) = 5;
    *(void *)(v4 + 80) = v29;
    *(void *)(v4 + 88) = v29;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  sub_1000A1428();
  swift_bridgeObjectRelease();
  int v11 = 1;
  int v12 = 1;
LABEL_4:
  sub_10002EB9C((uint64_t)v2);
  swift_bridgeObjectRelease();
  if (v11) {
    sub_1000A1428();
  }
  if (v12) {
    swift_bridgeObjectRelease();
  }
LABEL_8:
  sub_10004603C();
}

unint64_t sub_1000981F8()
{
  return sub_100097928(*v0);
}

uint64_t sub_100098200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100097584(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100098228@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100097920();
  *a1 = result;
  return result;
}

uint64_t sub_100098250(uint64_t a1)
{
  unint64_t v2 = sub_10009E598();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009828C(uint64_t a1)
{
  unint64_t v2 = sub_10009E598();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000982C8(void *a1@<X8>)
{
  sub_100097D8C();
  if (!v1) {
    memcpy(a1, v3, 0x60uLL);
  }
}

uint64_t sub_100098314()
{
  memcpy(v2, v0, sizeof(v2));
  return sub_100097A34();
}

void sub_100098368()
{
  qword_1006AD290 = 0x40F5180000000000;
}

Class ASDConfigurationManager.configDictionaryForCoreODI.getter()
{
  sub_100098414();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t sub_100098414()
{
  sub_10002E768(&qword_10069A068);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10058CEC0;
  strcpy((char *)v25, "daemonVersion");
  HIWORD(v25[1]) = -4864;
  AnyHashable.init<A>(_:)();
  id v1 = [self daemonVersion];
  *(void *)(inited + 96) = sub_1000362B0(0, (unint64_t *)&qword_1006979B0);
  *(void *)(inited + 72) = v1;
  uint64_t v22 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v2 = sub_100098B60();
  *(void *)&long long v23 = 0x49444F65726F63;
  *((void *)&v23 + 1) = 0xE700000000000000;
  AnyHashable.init<A>(_:)();
  sub_100067E04((uint64_t)v25, v2, &v23);
  sub_100058074((uint64_t)v25);
  if (v24)
  {
    sub_100057638(&v23, &v26);
    uint64_t v3 = self;
    sub_10002EAE0(&v26, (uint64_t)v27);
    uint64_t v4 = _bridgeAnythingToObjectiveC<A>(_:)();
    v25[0] = 0;
    id v5 = [v3 dataWithJSONObject:v4 options:0 error:v25];
    swift_unknownObjectRelease();
    id v6 = (id)v25[0];
    if (v5)
    {
      uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;

      *(void *)&long long v23 = 0x49444F65726F63;
      *((void *)&v23 + 1) = 0xE700000000000000;
      AnyHashable.init<A>(_:)();
      uint64_t v24 = &type metadata for Data;
      *(void *)&long long v23 = v7;
      *((void *)&v23 + 1) = v9;
      sub_100053294((uint64_t)&v23, (uint64_t)v25);
    }
    else
    {
      int v12 = v6;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100697958 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100031284(v13, (uint64_t)qword_100699E00);
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        char v16 = (uint8_t *)swift_slowAlloc();
        v25[0] = swift_slowAlloc();
        *(_DWORD *)char v16 = 136315138;
        swift_getErrorValue();
        uint64_t v17 = Error.localizedDescription.getter();
        *(void *)&long long v23 = sub_100032B48(v17, v18, v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error encoding coreODIConfig data: %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      *(void *)&long long v23 = 0x49444F65726F63;
      *((void *)&v23 + 1) = 0xE700000000000000;
      AnyHashable.init<A>(_:)();
      uint64_t v19 = sub_10002F494(32123, 0xE200000000000000);
      uint64_t v24 = &type metadata for Data;
      *(void *)&long long v23 = v19;
      *((void *)&v23 + 1) = v20;
      sub_100053294((uint64_t)&v23, (uint64_t)v25);
      swift_errorRelease();
    }
    sub_10002EB9C((uint64_t)&v26);
  }
  else
  {
    sub_10007E9CC((uint64_t)&v23, &qword_100697EE8);
    *(void *)&long long v26 = 0x49444F65726F63;
    *((void *)&v26 + 1) = 0xE700000000000000;
    AnyHashable.init<A>(_:)();
    uint64_t v10 = sub_10002F494(32123, 0xE200000000000000);
    char v27 = &type metadata for Data;
    *(void *)&long long v26 = v10;
    *((void *)&v26 + 1) = v11;
    sub_100053294((uint64_t)&v26, (uint64_t)v25);
  }
  sub_100098BEC((uint64_t)&v22, v2);
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t *ASDConfigurationManager.cacheV2MaxAge.getter()
{
  sub_1000950DC(v1);
  uint64_t result = (uint64_t *)sub_10009E988((uint64_t)v1, (uint64_t)v2, &qword_100697F08);
  if (v3 != 1) {
    return sub_100036138((uint64_t *)v1);
  }
  return result;
}

uint64_t ASDConfigurationManager.payloadWorkflowTTLs.getter()
{
  sub_1000950DC(v2);
  sub_10009E988((uint64_t)v2, (uint64_t)__src, &qword_100697F08);
  if (__src[5] == 1
    || (memcpy(__dst, __src, sizeof(__dst)),
        sub_10009E988((uint64_t)&__dst[48], (uint64_t)v5, &qword_100698860),
        sub_100051850(v5),
        sub_100036138((uint64_t *)v2),
        sub_10009E988((uint64_t)v5, (uint64_t)&v6, &qword_100698860),
        !v6))
  {
    sub_1000362B0(0, (unint64_t *)&qword_100697EF8);
    return Dictionary.init(dictionaryLiteral:)();
  }
  else
  {
    uint64_t v0 = sub_10003FB28(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return (uint64_t)v0;
}

uint64_t sub_100098B60()
{
  swift_getObjectType();
  id v0 = [self standardUserDefaults];
  sub_1000660E0(v0, (uint64_t)&v5);

  uint64_t v1 = v5;
  unint64_t v2 = v6;
  uint64_t v3 = sub_100099BE0(v5, v6);
  sub_10002EC6C(v1, v2);
  return v3;
}

void sub_100098BEC(uint64_t a1, uint64_t a2)
{
  *(void *)&long long v23 = 0x7365727574616566;
  *((void *)&v23 + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  sub_100067E04((uint64_t)v25, a2, &v23);
  sub_100058074((uint64_t)v25);
  if (v24)
  {
    sub_100057638(&v23, &v26);
    uint64_t v3 = self;
    sub_10002EAE0(&v26, v27);
    uint64_t v4 = _bridgeAnythingToObjectiveC<A>(_:)();
    v25[0] = 0;
    id v5 = [v3 dataWithJSONObject:v4 options:0 error:v25];
    swift_unknownObjectRelease();
    id v6 = v25[0];
    if (v5)
    {
      uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v9 = v8;

      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      sub_10002E768(&qword_10069A070);
      sub_10009EF08((uint64_t)&unk_10069A078);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      id v19 = v25[0];
      id v20 = [self standardUserDefaults];
      v25[4] = (id)sub_1000362B0(0, &qword_10069A088);
      uint64_t v25[5] = &off_100663380;
      v25[0] = v19;
      v25[1] = v20;
      uint64_t v21 = sub_1000C2480();
      v22[1] = 0xE800000000000000;
      AnyHashable.init<A>(_:)();
      v22[3] = sub_10002E768(&qword_10069A090);
      v22[0] = v21;
      sub_100053294((uint64_t)v22, (uint64_t)&v23);
      sub_10002EC6C(v7, v9);
      sub_10009EFBC((uint64_t)v25);
    }
    else
    {
      unint64_t v14 = v6;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      if (qword_100697958 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_100031284(v15, (uint64_t)qword_100699E00);
      char v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v16, v17))
      {
        unint64_t v18 = (uint8_t *)swift_slowAlloc();
        v25[0] = (id)swift_slowAlloc();
        *(_DWORD *)unint64_t v18 = 136315138;
        *(void *)&long long v23 = sub_100032B48(0x7365727574616566, 0xE800000000000000, (uint64_t *)v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Could not parse values of object '%s'.", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
    }
    sub_10002EB9C((uint64_t)&v26);
  }
  else
  {
    sub_10007E9CC((uint64_t)&v23, &qword_100697EE8);
    if (qword_100697958 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100031284(v10, (uint64_t)qword_100699E00);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      v25[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)&long long v23 = sub_100032B48(0x7365727574616566, 0xE800000000000000, (uint64_t *)v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Config data does not contain '%s' key.", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

Swift::Void __swiftcall ASDConfigurationManager.pushInitialCoreODIConfig()()
{
  uint64_t v2 = type metadata accessor for DispatchTime();
  sub_100045FF4();
  uint64_t v4 = v3;
  uint64_t v6 = __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v11 - 8);
  sub_100046348();
  dispatch_semaphore_t v12 = dispatch_semaphore_create(0);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v14 = type metadata accessor for TaskPriority();
  sub_10003349C(v1, 1, 1, v14);
  uint64_t v15 = (CFAbsoluteTime *)swift_allocObject();
  void v15[2] = 0.0;
  v15[3] = 0.0;
  *((void *)v15 + 4) = v0;
  *((void *)v15 + 5) = v12;
  void v15[6] = Current;
  id v16 = v0;
  dispatch_semaphore_t v17 = v12;
  sub_10004964C(v1, (uint64_t)&unk_100699E20, (uint64_t)v15);
  swift_release();
  static DispatchTime.now()();
  + infix(_:_:)();
  unint64_t v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v8, v2);
  OS_dispatch_semaphore.wait(timeout:)();
  v18(v10, v2);
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) == 0)
  {
    if (qword_100697958 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    id v20 = sub_100078994(v19, (uint64_t)qword_100699E00);
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)sub_100051AA0();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to set the config into CoreODI in expected time. Continuing despite risk of errors", v22, 2u);
      sub_100033704();
      long long v23 = v17;
      dispatch_semaphore_t v17 = v20;
    }
    else
    {
      long long v23 = v20;
    }
  }
}

uint64_t sub_1000993E4(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(double *)(v6 + 40) = a1;
  *(void *)(v6 + 32) = a6;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 48) = v7;
  void *v7 = v6;
  v7[1] = sub_10009947C;
  return ASDConfigurationManager.updateCoreODI()();
}

uint64_t sub_10009947C()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100099544()
{
  double v1 = v0[5];
  OS_dispatch_semaphore.signal()();
  double v2 = CFAbsoluteTimeGetCurrent() - v1;
  if (v2 <= 0.75)
  {
    if (qword_100697958 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v4 = sub_100078994(v8, (uint64_t)qword_100699E00);
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)sub_100033734();
      *(_DWORD *)uint64_t v6 = 134217984;
      v0[2] = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v7 = "Updated CoreODI config in: %f";
      goto LABEL_10;
    }
  }
  else
  {
    if (qword_100697958 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    uint64_t v4 = sub_100078994(v3, (uint64_t)qword_100699E00);
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)sub_100033734();
      *(_DWORD *)uint64_t v6 = 134217984;
      v0[3] = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v7 = "Longer than expected update time for CoreODI config: %f";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 0xCu);
      sub_100033704();
    }
  }

  sub_10003F1AC();
  return v9();
}

uint64_t ASDConfigurationManager.updateCoreODI()()
{
  *(void *)(v1 + 16) = v0;
  return sub_10005A038((uint64_t)sub_10009974C);
}

uint64_t sub_10009974C()
{
  sub_10003F444();
  type metadata accessor for ConfigManager();
  *(void *)(v0 + 24) = static ConfigManager.shared.getter();
  *(void *)(v0 + 32) = sub_100098414();
  sub_10009EE38((uint64_t)&unk_100699E30);
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100099828, v2, v1);
}

uint64_t sub_100099828()
{
  sub_10003F0F4();
  dispatch thunk of ConfigManager.setConfiguration(configDict:)();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10003F1AC();
  return v0();
}

id sub_1000998DC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for ASDConfigurationManager()) init];
  static ASDConfigurationManager.shared = (uint64_t)result;
  return result;
}

uint64_t sub_10009990C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100099954()
{
  uint64_t v1 = *(void *)(v0 + 40);
  double v2 = *(double *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_100078948(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_10003D5FC;
  uint64_t v6 = sub_1000A1528();
  return sub_1000993E4(v2, v6, v7, v8, v9, v1);
}

id static ASDConfigurationManager.shared.getter()
{
  if (qword_100697968 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = (void *)static ASDConfigurationManager.shared;

  return v0;
}

void static ASDConfigurationManager.shared.setter(uint64_t a1)
{
  if (qword_100697968 != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v2 = (void *)static ASDConfigurationManager.shared;
  static ASDConfigurationManager.shared = a1;
}

uint64_t (*static ASDConfigurationManager.shared.modify())()
{
  if (qword_100697968 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_100099BE0(uint64_t a1, unint64_t a2)
{
  if (sub_100095290(a1, a2))
  {
    if (qword_100697958 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100031284(v2, (uint64_t)qword_100699E00);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No stored config found.", v5, 2u);
      swift_slowDealloc();
    }

    return Dictionary.init(dictionaryLiteral:)();
  }
  else
  {
    uint64_t v7 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    v24[0] = 0;
    id v9 = [v7 JSONObjectWithData:isa options:0 error:v24];

    id v10 = v24[0];
    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000333E4((uint64_t)v25, (uint64_t)v24);
      sub_10002E768(&qword_10069A098);
      if (swift_dynamicCast())
      {
        uint64_t v11 = v23;
      }
      else
      {
        if (qword_100697958 != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for Logger();
        sub_100031284(v19, (uint64_t)qword_100699E00);
        id v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unexpected config data received", v22, 2u);
          swift_slowDealloc();
        }

        uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
      }
      sub_10002EB9C((uint64_t)v25);
    }
    else
    {
      dispatch_semaphore_t v12 = v10;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100697958 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100031284(v13, (uint64_t)qword_100699E00);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        id v16 = (uint8_t *)swift_slowAlloc();
        dispatch_semaphore_t v17 = (void *)swift_slowAlloc();
        *(_DWORD *)id v16 = 138412290;
        swift_errorRetain();
        uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
        v25[0] = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *dispatch_semaphore_t v17 = v18;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Config data could not be parsed. Is it a valid JSON? %@", v16, 0xCu);
        sub_10002E768(&qword_100699918);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
      swift_errorRelease();
    }
    return v11;
  }
}

id sub_10009A0C8()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v2 - 8);
  os_log_type_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR____TtC3asd23ASDConfigurationManager_notificationCenter;
  uint64_t v6 = self;
  uint64_t v7 = v0;
  *(void *)&v0[v5] = [v6 defaultCenter];
  if (qword_100697960 != -1) {
    swift_once();
  }
  double v8 = *(double *)&qword_1006AD290;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = ObjectType;
  sub_10002E768(&qword_100699FC0);
  swift_allocObject();
  uint64_t v10 = sub_10009C130(0, 0xC000000000000000, (uint64_t)sub_10009A3D8, 0, (uint64_t)&unk_100699FB8, v9, v8);
  *(void *)&v7[OBJC_IVAR____TtC3asd23ASDConfigurationManager_fetcher] = v10;
  swift_retain();
  id v11 = [v6 defaultCenter];
  if (qword_100697950 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_1006AD288;
  aBlock[4] = sub_10009AE8C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AC1D4;
  aBlock[3] = &unk_100662010;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = [v11 addObserverForName:v12 object:0 queue:0 usingBlock:v13];
  _Block_release(v13);

  *(void *)&v7[OBJC_IVAR____TtC3asd23ASDConfigurationManager_updateObservationToken] = v14;
  v19.receiver = v7;
  v19.super_class = ObjectType;
  id v15 = [super init];
  uint64_t v16 = type metadata accessor for TaskPriority();
  sub_10003349C((uint64_t)v4, 1, 1, v16);
  dispatch_semaphore_t v17 = (void *)swift_allocObject();
  _OWORD v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v10;
  v17[5] = ObjectType;
  sub_100095420();
  swift_release();
  return v15;
}

id sub_10009A3D8()
{
  id v0 = [self ephemeralSessionConfiguration];
  id v1 = [self sessionWithConfiguration:v0];

  return v1;
}

uint64_t sub_10009A448(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  _OWORD v2[6] = a2;
  uint64_t v3 = type metadata accessor for Locale();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URLComponents();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  sub_10002E768(&qword_100697DB0);
  v2[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLQueryItem();
  v2[14] = v5;
  v2[15] = *(void *)(v5 - 8);
  v2[16] = swift_task_alloc();
  sub_10002E768(&qword_10069A028);
  v2[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v2[18] = v6;
  v2[19] = *(void *)(v6 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_10009A698, 0, 0);
}

uint64_t sub_10009A698()
{
  sub_10003F444();
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[10];
  id v4 = [self standardUserDefaults];
  sub_100094B1C(v4, v1);

  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if (sub_1000312BC(v2, 1, v3) || (uint64_t v5 = (void *)URLComponents.queryItems.getter()) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  v0[23] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[24] = v6;
  void *v6 = v0;
  v6[1] = sub_10009A7AC;
  return sub_10009ACC0();
}

uint64_t sub_10009A7AC()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  v1[2] = v0;
  v1[3] = v3;
  v1[4] = v4;
  uint64_t v5 = *v0;
  sub_10003F0B8();
  void *v6 = v5;
  *(void *)(v8 + 200) = v7;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v9, v10, v11);
}

uint64_t sub_10009A87C()
{
  if (v0[25])
  {
    URLQueryItem.init(name:value:)();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v2 = v0[23];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v2 = sub_10003C13C(0, *(void *)(v2 + 16) + 1, 1, v0[23]);
    }
    unint64_t v4 = *(void *)(v2 + 16);
    unint64_t v3 = *(void *)(v2 + 24);
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_10003C13C(v3 > 1, v4 + 1, 1, v2);
    }
    uint64_t v6 = v0[15];
    uint64_t v5 = v0[16];
    uint64_t v7 = v0[14];
    *(void *)(v2 + 16) = v4 + 1;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v2+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v4, v5, v7);
  }
  if (sub_1000312BC(v0[17], 1, v0[10])) {
    swift_bridgeObjectRelease();
  }
  else {
    URLComponents.queryItems.setter();
  }
  uint64_t v8 = v0[17];
  uint64_t v9 = v0[10];
  if (sub_1000312BC(v8, 1, v9))
  {
    sub_10003349C(v0[13], 1, 1, v0[18]);
  }
  else
  {
    uint64_t v10 = v0[12];
    uint64_t v11 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v8, v9);
    URLComponents.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v9);
  }
  uint64_t v12 = v0[18];
  uint64_t v13 = v0[13];
  (*(void (**)(void, void, uint64_t))(v0[19] + 16))(v0[20], v0[22], v12);
  int v14 = sub_1000312BC(v13, 1, v12);
  uint64_t v15 = v0[21];
  uint64_t v16 = v0[18];
  uint64_t v17 = v0[19];
  uint64_t v18 = v0[13];
  if (v14 == 1)
  {
    (*(void (**)(void, void, void))(v17 + 32))(v0[21], v0[20], v0[18]);
    sub_10007E9CC(v18, &qword_100697DB0);
  }
  else
  {
    sub_100093F10();
    v19();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v15, v18, v16);
  }
  uint64_t v20 = v0[22];
  uint64_t v21 = v0[19];
  uint64_t v40 = v0[17];
  uint64_t v23 = v0[8];
  uint64_t v22 = v0[9];
  uint64_t v38 = v0[7];
  uint64_t v39 = v0[18];
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  id v24 = [self daemonVersion];
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  v28._unint64_t countAndFlagsBits = v25;
  v28._object = v27;
  v29._unint64_t countAndFlagsBits = 0x6973726556647361;
  v29._object = (void *)0xEA00000000006E6FLL;
  URLRequest.addValue(_:forHTTPHeaderField:)(v28, v29);
  swift_bridgeObjectRelease();
  id v30 = [self currentLocale];
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v31 = Locale.identifier.getter();
  uint64_t v33 = v32;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v38);
  v34._unint64_t countAndFlagsBits = v31;
  v34._object = v33;
  v35._unint64_t countAndFlagsBits = 0x656C61636F6CLL;
  v35._object = (void *)0xE600000000000000;
  URLRequest.addValue(_:forHTTPHeaderField:)(v34, v35);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v39);
  sub_10007E9CC(v40, &qword_10069A028);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v36();
}

uint64_t sub_10009ACC0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = sub_10002E768(&qword_100698970);
  *uint64_t v1 = v0;
  v1[1] = sub_10009ADAC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x56746375646F7270, 0xEE006E6F69737265, sub_10009BB20, 0, v2);
}

uint64_t sub_10009ADAC()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10009AE74()
{
  return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10009AE8C()
{
  uint64_t v0 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  sub_10003349C((uint64_t)v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  if (sub_1000312BC((uint64_t)v2, 1, v3) == 1)
  {
    sub_10007E9CC((uint64_t)v2, &qword_100697E68);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
    if (*(void *)(v4 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v6 = v7;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &unk_10069A020;
  *(void *)(v8 + 24) = v4;
  if (v6 | v5)
  {
    v10[0] = 0;
    v10[1] = 0;
    _OWORD v10[2] = v5;
    void v10[3] = v6;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_10009B084()
{
  return _swift_task_switch(sub_10009B0A0, 0, 0);
}

uint64_t sub_10009B0A0()
{
  sub_10003F0F4();
  if (qword_100697968 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = (void *)static ASDConfigurationManager.shared;
  *(void *)(v0 + 40) = static ASDConfigurationManager.shared;
  v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10009B18C;
  return ASDConfigurationManager.updateCoreODI()();
}

uint64_t sub_10009B18C()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v2 = *(void **)(v1 + 40);
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  swift_task_dealloc();

  sub_10003F1AC();
  return v5();
}

uint64_t sub_10009B264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 64) = a4;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v10 + 72) = v11;
  void *v11 = v10;
  v11[1] = sub_10009B304;
  return static Task<>.sleep(nanoseconds:)(15000000000, v12, v13, v14, v15, v16, v17, v18, a9, a10);
}

uint64_t sub_10009B304()
{
  sub_10003F444();
  sub_1000336EC();
  uint64_t v3 = v2;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_10003F0B8();
  void *v6 = v5;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v7 = *(uint64_t (**)(void))(v5 + 8);
    return v7();
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v3 + 80) = v9;
    void *v9 = v5;
    v9[1] = sub_10009B440;
    return sub_10009C2F4();
  }
}

uint64_t sub_10009B440()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v3 = v2;
  *uint64_t v3 = *v1;
  *(unsigned char *)(v2 + 96) = v4;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  sub_10003F160();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_10009B528()
{
  uint64_t v12 = v0;
  if (qword_100697958 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = sub_100078994(v1, (uint64_t)qword_100699E00);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(unsigned __int8 *)(v0 + 96);
    uint64_t v5 = (uint8_t *)sub_100033734();
    uint64_t v6 = sub_10003371C();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v11 = v6;
    if (v4) {
      uint64_t v7 = 1163219540;
    }
    else {
      uint64_t v7 = 0x45534C4146;
    }
    if (v4) {
      unint64_t v8 = 0xE400000000000000;
    }
    else {
      unint64_t v8 = 0xE500000000000000;
    }
    *(void *)(v0 + 56) = sub_100032B48(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Needed config update: %s", v5, 0xCu);
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
  }

  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_10009B6DC()
{
  uint64_t v10 = v0;
  if (qword_100697958 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100031284(v1, (uint64_t)qword_100699E00);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = (uint8_t *)sub_100033734();
    uint64_t v9 = sub_10003371C();
    *(_DWORD *)int v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 48) = sub_100032B48(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to update config: %s", v4, 0xCu);
    sub_10007EC7C();
    sub_100033704();
    sub_100033704();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10009B900()
{
  *(void *)(v1 + 16) = v0;
  return sub_10005A038((uint64_t)sub_10009B918);
}

uint64_t sub_10009B918()
{
  sub_10003F0F4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009B9B0;
  return sub_10009C7F8();
}

uint64_t sub_10009B9B0()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F1AC();
  return v3();
}

uint64_t sub_10009BA70()
{
  *(void *)(v1 + 16) = v0;
  return sub_10005A038((uint64_t)sub_10009BA88);
}

uint64_t sub_10009BA88()
{
  sub_10003F0F4();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009B9B0;
  return sub_10009C2F4();
}

uint64_t sub_10009BB20(uint64_t a1)
{
  uint64_t v21 = a1;
  uint64_t v22 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002E768(&qword_10069A038);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000362B0(0, (unint64_t *)&qword_10069A360);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  uint64_t v20 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v21, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v14 + v13, (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_10009EDD4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A1664;
  aBlock[3] = &unk_1006620D8;
  uint64_t v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  long long v26 = _swiftEmptyArrayStorage;
  sub_10009EE38((uint64_t)&unk_10069A040);
  sub_10002E768(&qword_10069A048);
  sub_10009EE7C((uint64_t)&unk_10069A050);
  uint64_t v16 = v22;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v17 = (void *)v20;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v2, v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v24);
  return swift_release();
}

uint64_t sub_10009BF7C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  uint64_t v1 = MGCopyAnswer();

  if (v1) {
    swift_dynamicCast();
  }
  sub_10002E768(&qword_10069A038);
  return CheckedContinuation.resume(returning:)();
}

id ASDConfigurationManager.__deallocating_deinit()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  [*(id *)&v0[OBJC_IVAR____TtC3asd23ASDConfigurationManager_notificationCenter] removeObserver:*(void *)&v0[OBJC_IVAR____TtC3asd23ASDConfigurationManager_updateObservationToken]];
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return [super dealloc];
}

uint64_t sub_10009C130(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  swift_defaultActor_initialize();
  *(void *)(v7 + 152) = [self defaultCenter];
  *(unsigned char *)(v7 + 160) = 0;
  id v13 = [self standardUserDefaults];
  *(void *)(v7 + 168) = v13;
  sub_10002E768(&qword_1006989B8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10058CEC0;
  strcpy((char *)(inited + 32), "asdConfigData");
  *(_WORD *)(inited + 46) = -4864;
  *(void *)(inited + 72) = &type metadata for Data;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  sub_10002FBFC(a1, a2);
  sub_10002FBFC(a1, a2);
  Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 registerDefaults:isa];

  sub_10002EC6C(a1, a2);
  sub_10002EC6C(a1, a2);
  *(void *)(v7 + 120) = a5;
  *(void *)(v7 + 128) = a6;
  *(double *)(v7 + 112) = a7;
  *(void *)(v7 + 136) = a3;
  *(void *)(v7 + 144) = a4;
  return v7;
}

uint64_t sub_10009C2F4()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  _OWORD v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  return _swift_task_switch(sub_10009C3D0, v0, 0);
}

uint64_t sub_10009C3D0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 24);
  sub_100066348(*(void **)(*(void *)(v0 + 16) + 168));
  Date.init(timeIntervalSinceReferenceDate:)();
  static Date.+ infix(_:_:)();
  Date.init()();
  char v4 = static Date.< infix(_:_:)();
  *(unsigned char *)(v0 + 96) = v4 & 1;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 64) = v5;
  *(void *)(v0 + 72) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v1, v3);
  uint64_t v6 = sub_1000A15A0();
  ((void (*)(uint64_t))v5)(v6);
  if (v4)
  {
    if (qword_100697958 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = sub_100078994(v7, (uint64_t)qword_100699E00);
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      *(_WORD *)sub_100051AA0() = 0;
      sub_1000A150C((void *)&_mh_execute_header, v8, v10, "Config update required");
      sub_100033704();
    }

    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v11;
    void *v11 = v0;
    v11[1] = sub_10009C5D8;
    return sub_10009C7F8();
  }
  else
  {
    uint64_t v13 = sub_1000A133C();
    v14(v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = sub_1000A1564();
    return v16(v15);
  }
}

uint64_t sub_10009C5D8()
{
  sub_10003F444();
  uint64_t v2 = *v1;
  sub_10003F0E8();
  *char v4 = v3;
  *char v4 = *v1;
  *(void *)(v3 + 88) = v0;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v2 + 16);
  if (v0) {
    uint64_t v6 = sub_10009C774;
  }
  else {
    uint64_t v6 = sub_10009C6FC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_10009C6FC()
{
  sub_10003F444();
  uint64_t v0 = sub_1000A133C();
  v1(v0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = sub_1000A1564();
  return v3(v2);
}

uint64_t sub_10009C774()
{
  sub_10003F444();
  uint64_t v1 = sub_1000A133C();
  v2(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3(0);
}

uint64_t sub_10009C7F8()
{
  v1[19] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[20] = v2;
  v1[21] = *(void *)(v2 - 8);
  v1[22] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for HTTPStatusCode();
  v1[23] = v3;
  v1[24] = *(void *)(v3 - 8);
  v1[25] = swift_task_alloc();
  v1[26] = sub_10002E768(&qword_100699FE8);
  v1[27] = swift_task_alloc();
  sub_10002E768(&qword_100699FF0);
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URLRequest();
  v1[34] = v4;
  v1[35] = *(void *)(v4 - 8);
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  return _swift_task_switch(sub_10009CA58, v0, 0);
}

uint64_t sub_10009CA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_1000A14F0();
  uint64_t v17 = *(void *)(v16 + 152);
  if (*(unsigned char *)(v17 + 160) == 1)
  {
    if (qword_100697958 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = sub_100078994(v18, (uint64_t)qword_100699E00);
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      *(_WORD *)sub_100051AA0() = 0;
      sub_1000A150C((void *)&_mh_execute_header, v19, v21, "Config update already in progress - skipping requested update");
      sub_100033704();
    }

    sub_10002E768(&qword_100699FF8);
    sub_10009EE7C((uint64_t)&unk_10069A000);
    uint64_t v22 = sub_100088208();
    swift_storeEnumTagMultiPayload();
    a10 = v22;
    swift_willThrow();
    sub_1000A131C();
    uint64_t v34 = v23;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_1000A136C();
  }
  else
  {
    *(unsigned char *)(v17 + 160) = 1;
    uint64_t v34 = *(void *)(v17 + 120) + **(int **)(v17 + 120);
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v16 + 304) = v33;
    void *v33 = v16;
    v33[1] = sub_10009CD10;
    sub_1000A136C();
  }
  return v25(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, v34, a12, a13, a14, a15, a16);
}

uint64_t sub_10009CD10()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v2 = *(void *)(v1 + 152);
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_10009CE1C, v2, 0);
}

uint64_t sub_10009CE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint8_t *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_1000A14F0();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (qword_100697958 != -1) {
    swift_once();
  }
  uint64_t v27 = v24[36];
  uint64_t v28 = v24[37];
  uint64_t v29 = v24[34];
  uint64_t v30 = v24[35];
  uint64_t v31 = type metadata accessor for Logger();
  v24[39] = sub_100031284(v31, (uint64_t)qword_100699E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v27, v28, v29);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = v24[35];
  if (v34)
  {
    a11 = v24 + 18;
    uint64_t v36 = (uint8_t *)sub_100033734();
    a12 = sub_10003371C();
    *(_DWORD *)uint64_t v36 = 136315138;
    a10 = v36 + 4;
    sub_10009EE38((uint64_t)&unk_10069A010);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    v24[18] = sub_100032B48(v37, v38, &a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v39 = *(void (**)(void))(v35 + 8);
    sub_100046244();
    v39();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Requesting config with request: %s", v36, 0xCu);
    sub_10007EC7C();
    sub_100033704();
    sub_100033704();
  }
  else
  {
    uint64_t v39 = *(void (**)(void))(v35 + 8);
    ((void (*)(void, void))v39)(v24[36], v24[34]);
  }

  v24[40] = v39;
  v24[41] = (*(uint64_t (**)(void))(v24[19] + 136))();
  uint64_t v40 = (void *)swift_task_alloc();
  v24[42] = v40;
  *uint64_t v40 = v24;
  v40[1] = sub_10009D0B8;
  sub_1000A136C();
  return NSURLSession.data(for:delegate:)(v41, v42, v43, v44, v45, v46, v47, v48, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_10009D0B8()
{
  sub_10003F444();
  sub_1000336EC();
  uint64_t v3 = v2;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 344) = v5;
  *(void *)(v3 + 352) = v6;
  *(void *)(v3 + 360) = v7;
  *(void *)(v3 + 368) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v8 = *(void *)(v3 + 152);
    os_log_type_t v9 = sub_10009DCE0;
  }
  else
  {
    uint64_t v10 = *(void *)(v3 + 152);

    os_log_type_t v9 = sub_10009D204;
    uint64_t v8 = v10;
  }
  return _swift_task_switch(v9, v8, 0);
}

uint64_t sub_10009D204()
{
  uint64_t v91 = v0;
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    uint64_t v3 = (void *)v0[45];
    uint64_t v4 = (void *)v0[33];
    uint64_t v5 = v0[23];
    sub_10002FBFC(v0[43], v0[44]);
    id v6 = v3;
    sub_10008C0B0((uint64_t)[v2 statusCode], v4);

    sub_10003349C((uint64_t)v4, 0, 1, v5);
  }
  else
  {
    uint64_t v7 = v0[43];
    unint64_t v8 = v0[44];
    sub_10003349C(v0[33], 1, 1, v0[23]);
    sub_10002FBFC(v7, v8);
  }
  uint64_t v9 = v0[32];
  uint64_t v10 = v0[26];
  uint64_t v11 = v0[27];
  uint64_t v12 = v0[23];
  (*(void (**)(uint64_t, void, uint64_t))(v0[24] + 104))(v9, enum case for HTTPStatusCode.httpSuccess(_:), v12);
  sub_10003349C(v9, 0, 1, v12);
  uint64_t v13 = v11 + *(int *)(v10 + 48);
  uint64_t v14 = sub_1000A15A0();
  sub_10009EBD8(v14, v15);
  sub_10009EBD8(v9, v13);
  if (sub_1000312BC(v11, 1, v12) == 1)
  {
    uint64_t v16 = v0[23];
    sub_10007E9CC(v0[32], &qword_100699FF0);
    if (sub_1000312BC(v13, 1, v16) == 1)
    {
      uint64_t v17 = v0[33];
      uint64_t v18 = v0[30];
      sub_10007E9CC(v0[27], &qword_100699FF0);
      sub_10009EBD8(v17, v18);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v19 = v0[23];
    sub_10009EBD8(v0[27], v0[31]);
    if (sub_1000312BC(v13, 1, v19) != 1)
    {
      uint64_t v25 = v0[32];
      uint64_t v88 = v0[33];
      uint64_t v26 = v0[30];
      uint64_t v27 = v0[27];
      uint64_t v28 = v0[24];
      (*(void (**)(void, uint64_t, void))(v28 + 32))(v0[25], v13, v0[23]);
      sub_10009EE38((uint64_t)&unk_10069A008);
      char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v30 = *(void (**)(void))(v28 + 8);
      sub_100046244();
      v30();
      sub_10007E9CC(v25, &qword_100699FF0);
      sub_100046244();
      v30();
      sub_10007E9CC(v27, &qword_100699FF0);
      sub_10009EBD8(v88, v26);
      if (v29) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    uint64_t v20 = v0[31];
    uint64_t v21 = v0[23];
    uint64_t v22 = v0[24];
    sub_10007E9CC(v0[32], &qword_100699FF0);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  }
  uint64_t v23 = v0[33];
  uint64_t v24 = v0[30];
  sub_10007E9CC(v0[27], &qword_100699FE8);
  sub_10009EBD8(v23, v24);
LABEL_11:
  uint64_t v31 = v0[30];
  if (sub_1000312BC(v31, 1, v0[23]) != 1)
  {
    uint64_t v54 = v0[43];
    unint64_t v53 = v0[44];
    uint64_t v55 = v0[33];
    uint64_t v56 = v0[29];
    sub_10007E9CC(v31, &qword_100699FF0);
    sub_10002EC6C(v54, v53);
    sub_10009EBD8(v55, v56);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    BOOL v59 = os_log_type_enabled(v57, v58);
    unint64_t v60 = v0[29];
    if (v59)
    {
      uint64_t v61 = v0[28];
      uint64_t v62 = v0[23];
      uint64_t v63 = (uint8_t *)sub_100033734();
      v90[0] = sub_10003371C();
      *(_DWORD *)uint64_t v63 = 136315138;
      sub_10009EBD8(v60, v61);
      int v64 = sub_1000312BC(v61, 1, v62);
      uint64_t v65 = v0[28];
      if (v64 == 1)
      {
        sub_10007E9CC(v0[28], &qword_100699FF0);
        unint64_t v60 = 0xE300000000000000;
        uint64_t v66 = 7104878;
      }
      else
      {
        uint64_t v79 = v0[23];
        uint64_t v78 = v0[24];
        uint64_t v66 = HTTPStatusCode.description.getter();
        unint64_t v60 = v80;
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v65, v79);
      }
      uint64_t v81 = v0[29];
      v0[17] = sub_100032B48(v66, v60, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10007E9CC(v81, &qword_100699FF0);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Config update response not success: %s", v63, 0xCu);
      swift_arrayDestroy();
      sub_100033704();
      sub_100033704();
    }
    else
    {
      sub_10007E9CC(v0[29], &qword_100699FF0);
    }

    unint64_t v82 = v0[44];
    uint64_t v83 = (void *)v0[45];
    sub_1000A1578();
    uint64_t v84 = v0[33];
    uint64_t v89 = v0[19];
    sub_10002E768(&qword_100699FF8);
    sub_10009EE7C((uint64_t)&unk_10069A000);
    sub_100088208();
    sub_10009EBD8(v84, v85);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    sub_10002EC6C(v60, v82);
    sub_10007E9CC(v84, &qword_100699FF0);
    goto LABEL_27;
  }
LABEL_12:
  sub_10007E9CC(v0[30], &qword_100699FF0);
  uint64_t v32 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[12] = 0;
  id v34 = [v32 JSONObjectWithData:isa options:0 error:v0 + 12];

  uint64_t v35 = (void *)v0[12];
  uint64_t v37 = v0[43];
  unint64_t v36 = v0[44];
  uint64_t v38 = v0[39];
  if (!v34)
  {
    id v67 = v35;
    sub_10002EC6C(v37, v36);
    uint64_t v68 = _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)sub_100033734();
      v90[0] = sub_10003371C();
      *(_DWORD *)uint64_t v71 = 136315138;
      swift_getErrorValue();
      uint64_t v72 = Error.localizedDescription.getter();
      uint64_t v38 = v73;
      v0[15] = sub_100032B48(v72, v73, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Config decode error: %s", v71, 0xCu);
      sub_10007EC7C();
      sub_100033704();
      sub_100033704();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v74 = v0[44];
    uint64_t v75 = (void *)v0[45];
    sub_1000A1578();
    uint64_t v76 = v0[33];
    uint64_t v89 = v0[19];
    sub_10002E768(&qword_100699FF8);
    sub_10009EE7C((uint64_t)&unk_10069A000);
    sub_100088208();
    *uint64_t v77 = v68;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    swift_willThrow();

    sub_10002EC6C(v38, v74);
    swift_errorRelease();
    sub_10007E9CC(v76, &qword_100699FF0);
LABEL_27:
    sub_100093F10();
    v86();
    *(unsigned char *)(v89 + 160) = 0;
    sub_1000A131C();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v52 = (uint64_t (*)(void))v0[1];
    goto LABEL_28;
  }
  uint64_t v39 = v0[19];
  id v40 = v35;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10002EB9C((uint64_t)(v0 + 2));
  sub_100094F6C(v37, v36, *(void **)(v39 + 168));
  sub_10002EC6C(v37, v36);
  id v41 = [self standardUserDefaults];
  static Date.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  sub_100046244();
  v42();
  sub_100095004(v41);

  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    *(_WORD *)sub_100051AA0() = 0;
    sub_1000A150C((void *)&_mh_execute_header, v43, v45, "Config update completed");
    sub_100033704();
  }
  unint64_t v47 = v0[44];
  uint64_t v46 = (void *)v0[45];
  uint64_t v48 = v0[43];
  uint64_t v49 = v0[33];
  uint64_t v50 = v0[19];

  sub_10009DF98();
  sub_10002EC6C(v48, v47);
  sub_10007E9CC(v49, &qword_100699FF0);
  sub_1000A15A0();
  sub_100093F10();
  v51();
  *(unsigned char *)(v50 + 160) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v52 = (uint64_t (*)(void))v0[1];
LABEL_28:
  return v52();
}

uint64_t sub_10009DCE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_1000A14F0();
  a23 = v25;
  a24 = v26;
  a22 = v24;

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    char v29 = (uint8_t *)sub_100033734();
    a12 = sub_10003371C();
    *(_DWORD *)char v29 = 136315138;
    swift_getErrorValue();
    uint64_t v30 = Error.localizedDescription.getter();
    *(void *)(v24 + 128) = sub_100032B48(v30, v31, &a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Config update request failed: %s", v29, 0xCu);
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v32 = *(void *)(v24 + 368);
  os_log_type_t v33 = *(void (**)(void))(v24 + 320);
  uint64_t v34 = *(void *)(v24 + 152);
  sub_10002E768(&qword_100699FF8);
  sub_10009EE7C((uint64_t)&unk_10069A000);
  uint64_t v35 = sub_100088208();
  *unint64_t v36 = v32;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  sub_1000A15A0();
  sub_100093F10();
  v33();
  *(unsigned char *)(v34 + 160) = 0;
  sub_1000A131C();
  uint64_t v47 = v37;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_1000A136C();
  return v39(v38, v39, v40, v41, v42, v43, v44, v45, v35, v47, a11, a12, a13, a14, a15, a16);
}

id sub_10009DF98()
{
  uint64_t v1 = *(void **)(v0 + 152);
  if (qword_100697950 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1006AD288;

  return [v1 postNotificationName:v2 object:0];
}

uint64_t sub_10009E010()
{
  swift_release();
  swift_release();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10009E050()
{
  uint64_t v0 = sub_10009E010();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ASDConfigurationManager()
{
  return self;
}

uint64_t sub_10009E0A0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ConfigurationFetcher()
{
  return sub_100077F20();
}

uint64_t sub_10009E134(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10009E18C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *v5;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10009E250(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 7);
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_DWORD *)(a1 + 28) = v5;
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[6];
  if (!*(void *)(a1 + 48))
  {
    if (v6)
    {
      *(void *)(a1 + 48) = v6;
      *(void *)(a1 + 56) = a2[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    goto LABEL_8;
  }
  if (!v6)
  {
    sub_10009E38C(a1 + 48);
    goto LABEL_7;
  }
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v7 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
  *(void *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009E38C(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for OuterConfig(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t sub_10009E3E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48)) {
    goto LABEL_5;
  }
  if (!v4)
  {
    sub_10009E38C(a1 + 48);
LABEL_5:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_6;
  }
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10009E4CC(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 40);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10009E520(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

void type metadata accessor for ASDConfig()
{
}

unint64_t sub_10009E598()
{
  unint64_t result = qword_100699F00;
  if (!qword_100699F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699F00);
  }
  return result;
}

unint64_t sub_10009E5E4()
{
  unint64_t result = qword_100699F18;
  if (!qword_100699F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699F18);
  }
  return result;
}

unint64_t sub_10009E630()
{
  unint64_t result = qword_100699F20;
  if (!qword_100699F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699F20);
  }
  return result;
}

unint64_t sub_10009E67C()
{
  unint64_t result = qword_100699F28;
  if (!qword_100699F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699F28);
  }
  return result;
}

unint64_t sub_10009E6C8(uint64_t a1)
{
  unint64_t result = sub_1000A1400(a1);
  if (!result)
  {
    uint64_t v5 = v4;
    sub_10003137C(v3);
    v5();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10009E744()
{
  unint64_t result = qword_100699F40;
  if (!qword_100699F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699F40);
  }
  return result;
}

unint64_t sub_10009E790()
{
  unint64_t result = qword_100699F58;
  if (!qword_100699F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699F58);
  }
  return result;
}

unint64_t sub_10009E7DC(uint64_t a1)
{
  unint64_t result = sub_1000A1400(a1);
  if (!result)
  {
    uint64_t v5 = v4;
    sub_10003137C(v3);
    v5();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10009E858()
{
  unint64_t result = qword_100699F70;
  if (!qword_100699F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699F70);
  }
  return result;
}

unint64_t sub_10009E8A4()
{
  unint64_t result = qword_100699F78;
  if (!qword_100699F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699F78);
  }
  return result;
}

unint64_t sub_10009E8F0()
{
  unint64_t result = qword_100699F88;
  if (!qword_100699F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699F88);
  }
  return result;
}

unint64_t sub_10009E93C()
{
  unint64_t result = qword_100699F98;
  if (!qword_100699F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100699F98);
  }
  return result;
}

uint64_t sub_10009E988(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002E768(a3);
  sub_10005EDB8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t sub_10009E9E8()
{
  unint64_t result = qword_100699FA8;
  if (!qword_100699FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100699FA8);
  }
  return result;
}

uint64_t sub_10009EA34()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009EA44()
{
  sub_10003F0F4();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_100078948(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_10003F060;
  return sub_10009A448(v2, v3);
}

uint64_t sub_10009EAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10009EAE8()
{
  return swift_release();
}

uint64_t sub_10009EAF0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10009EB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(void *)(v10 + 40);
  uint64_t v12 = swift_task_alloc();
  uint64_t v13 = (void *)sub_100078948(v12);
  *uint64_t v13 = v14;
  v13[1] = sub_10003D5FC;
  uint64_t v15 = sub_1000A1528();
  return sub_10009B264(v15, v16, v17, v18, v11, v19, v20, v21, a9, a10);
}

uint64_t sub_10009EBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002E768(&qword_100699FF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10009EC40()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009EC78()
{
  sub_10003F444();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_100078948(v0);
  *uint64_t v1 = v2;
  v1[1] = sub_10003F060;
  sub_10005BA64();
  return sub_10009B084();
}

uint64_t sub_10009ED0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009ED44()
{
  sub_10002E768(&qword_10069A038);
  sub_10005EDB8();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10009EDD4()
{
  sub_10002E768(&qword_10069A038);

  return sub_10009BF7C();
}

unint64_t sub_10009EE38(uint64_t a1)
{
  unint64_t result = sub_1000A1400(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10009EE7C(uint64_t a1)
{
  unint64_t result = sub_1000A1400(a1);
  if (!result)
  {
    sub_10003137C(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10009EEBC()
{
  unint64_t result = qword_10069A060;
  if (!qword_10069A060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A060);
  }
  return result;
}

unint64_t sub_10009EF08(uint64_t a1)
{
  unint64_t result = sub_1000A1400(a1);
  if (!result)
  {
    uint64_t v5 = v4;
    sub_10003137C(v3);
    v5();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_10009EF70()
{
  unint64_t result = qword_10069A080;
  if (!qword_10069A080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A080);
  }
  return result;
}

uint64_t sub_10009EFBC(uint64_t a1)
{
  return a1;
}

uint64_t destroy for OuterConfig(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 48))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for OuterConfig(void *__dst, void *__src)
{
  uint64_t v4 = __src[5];
  if (v4 == 1)
  {
    memcpy(__dst, __src, 0x60uLL);
  }
  else
  {
    *__dst = *__src;
    *((unsigned char *)__dst + 8) = *((unsigned char *)__src + 8);
    __dst[2] = __src[2];
    *((unsigned char *)__dst + 24) = *((unsigned char *)__src + 24);
    *((_DWORD *)__dst + 7) = *((_DWORD *)__src + 7);
    *((unsigned char *)__dst + 32) = *((unsigned char *)__src + 32);
    __dst[5] = v4;
    uint64_t v6 = __src + 6;
    uint64_t v5 = __src[6];
    swift_bridgeObjectRetain();
    if (v5)
    {
      uint64_t v7 = __src[7];
      __dst[6] = v5;
      __dst[7] = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)__dst + 3) = *v6;
    }
    __dst[8] = __src[8];
    *((_WORD *)__dst + 36) = *((_WORD *)__src + 36);
    uint64_t v8 = __src[10];
    uint64_t v9 = __src[11];
    __dst[10] = v8;
    __dst[11] = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return __dst;
}

unsigned char *assignWithCopy for OuterConfig(unsigned char *__dst, void *__src)
{
  uint64_t v4 = __src[5];
  if (*((void *)__dst + 5) != 1)
  {
    if (v4 == 1)
    {
      sub_10009F37C((uint64_t)__dst);
      goto LABEL_7;
    }
    uint64_t v9 = *__src;
    __dst[8] = *((unsigned char *)__src + 8);
    *(void *)__dst = v9;
    uint64_t v10 = __src[2];
    __dst[24] = *((unsigned char *)__src + 24);
    *((void *)__dst + 2) = v10;
    LODWORD(v10) = *((_DWORD *)__src + 7);
    __dst[32] = *((unsigned char *)__src + 32);
    *((_DWORD *)__dst + 7) = v10;
    *((void *)__dst + 5) = __src[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v11 = __src[6];
    if (*((void *)__dst + 6))
    {
      if (v11)
      {
        *((void *)__dst + 6) = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((void *)__dst + 7) = __src[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_17:
        uint64_t v13 = __src[8];
        unsigned char __dst[72] = *((unsigned char *)__src + 72);
        *((void *)__dst + 8) = v13;
        __dst[73] = *((unsigned char *)__src + 73);
        *((void *)__dst + 10) = __src[10];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((void *)__dst + 11) = __src[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return __dst;
      }
      sub_10009E38C((uint64_t)(__dst + 48));
    }
    else if (v11)
    {
      *((void *)__dst + 6) = v11;
      *((void *)__dst + 7) = __src[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_17;
    }
    *((_OWORD *)__dst + 3) = *((_OWORD *)__src + 3);
    goto LABEL_17;
  }
  if (v4 == 1)
  {
LABEL_7:
    memcpy(__dst, __src, 0x60uLL);
    return __dst;
  }
  uint64_t v5 = *__src;
  __dst[8] = *((unsigned char *)__src + 8);
  *(void *)__dst = v5;
  uint64_t v6 = __src[2];
  __dst[24] = *((unsigned char *)__src + 24);
  *((void *)__dst + 2) = v6;
  LODWORD(v6) = *((_DWORD *)__src + 7);
  __dst[32] = *((unsigned char *)__src + 32);
  *((_DWORD *)__dst + 7) = v6;
  *((void *)__dst + 5) = __src[5];
  uint64_t v8 = __src + 6;
  uint64_t v7 = __src[6];
  swift_bridgeObjectRetain();
  if (v7)
  {
    *((void *)__dst + 6) = v7;
    *((void *)__dst + 7) = __src[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)__dst + 3) = *v8;
  }
  uint64_t v12 = __src[8];
  unsigned char __dst[72] = *((unsigned char *)__src + 72);
  *((void *)__dst + 8) = v12;
  __dst[73] = *((unsigned char *)__src + 73);
  *((void *)__dst + 10) = __src[10];
  *((void *)__dst + 11) = __src[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return __dst;
}

uint64_t sub_10009F37C(uint64_t a1)
{
  return a1;
}

void *assignWithTake for OuterConfig(void *__dst, void *__src)
{
  if (__dst[5] == 1) {
    goto LABEL_4;
  }
  uint64_t v4 = __src[5];
  if (v4 != 1)
  {
    *__dst = *__src;
    *((unsigned char *)__dst + 8) = *((unsigned char *)__src + 8);
    __dst[2] = __src[2];
    *((unsigned char *)__dst + 24) = *((unsigned char *)__src + 24);
    *((_DWORD *)__dst + 7) = *((_DWORD *)__src + 7);
    *((unsigned char *)__dst + 32) = *((unsigned char *)__src + 32);
    __dst[5] = v4;
    swift_bridgeObjectRelease();
    uint64_t v5 = __src[6];
    if (__dst[6])
    {
      if (v5)
      {
        __dst[6] = v5;
        swift_bridgeObjectRelease();
        __dst[7] = __src[7];
        swift_bridgeObjectRelease();
LABEL_10:
        __dst[8] = __src[8];
        *((_WORD *)__dst + 36) = *((_WORD *)__src + 36);
        __dst[10] = __src[10];
        swift_bridgeObjectRelease();
        __dst[11] = __src[11];
        swift_bridgeObjectRelease();
        return __dst;
      }
      sub_10009E38C((uint64_t)(__dst + 6));
    }
    *((_OWORD *)__dst + 3) = *((_OWORD *)__src + 3);
    goto LABEL_10;
  }
  sub_10009F37C((uint64_t)__dst);
LABEL_4:
  memcpy(__dst, __src, 0x60uLL);
  return __dst;
}

uint64_t getEnumTagSinglePayload for OuterConfig(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 96))
    {
      int v2 = *(_DWORD *)a1 + 2147483645;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 40);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v4 = v3 - 1;
      if (v4 < 0) {
        int v4 = -1;
      }
      BOOL v5 = __OFSUB__(v4, 1);
      int v2 = v4 - 1;
      if (v2 < 0 != v5) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OuterConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OuterConfig()
{
  return &type metadata for OuterConfig;
}

uint64_t sub_10009F590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

void sub_10009F598()
{
  sub_10009FE54();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t *sub_10009F62C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        goto LABEL_5;
      case 1:
        uint64_t v10 = type metadata accessor for HTTPStatusCode();
        if (sub_1000312BC((uint64_t)a2, 1, v10))
        {
          uint64_t v11 = sub_10002E768(&qword_100699FF0);
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
          sub_10003349C((uint64_t)a1, 0, 1, v10);
        }
        goto LABEL_12;
      case 0:
LABEL_5:
        uint64_t v8 = *a2;
        swift_errorRetain();
        *a1 = v8;
LABEL_12:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t sub_10009F7D0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_4:
    return swift_errorRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_4;
  }
  uint64_t v3 = type metadata accessor for HTTPStatusCode();
  uint64_t result = sub_1000312BC(a1, 1, v3);
  if (!result)
  {
    int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_10009F890(void *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      uint64_t v8 = type metadata accessor for HTTPStatusCode();
      if (sub_1000312BC((uint64_t)a2, 1, v8))
      {
        uint64_t v9 = sub_10002E768(&qword_100699FF0);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        sub_10003349C((uint64_t)a1, 0, 1, v8);
      }
      goto LABEL_10;
    case 0:
LABEL_4:
      uint64_t v7 = *a2;
      swift_errorRetain();
      *a1 = v7;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t *sub_10009F9F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(uint64_t *, uint64_t))(v5 + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        goto LABEL_5;
      case 1:
        uint64_t v8 = type metadata accessor for HTTPStatusCode();
        if (sub_1000312BC((uint64_t)a2, 1, v8))
        {
          uint64_t v9 = sub_10002E768(&qword_100699FF0);
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
          sub_10003349C((uint64_t)a1, 0, 1, v8);
        }
        goto LABEL_11;
      case 0:
LABEL_5:
        uint64_t v7 = *a2;
        swift_errorRetain();
        *a1 = v7;
LABEL_11:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(v5 + 64));
  }
  return a1;
}

void *sub_10009FBA4(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for HTTPStatusCode();
    if (sub_1000312BC((uint64_t)a2, 1, v6))
    {
      uint64_t v7 = sub_10002E768(&qword_100699FF0);
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      sub_10003349C((uint64_t)a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10009FCB8(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 - 8);
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for HTTPStatusCode();
      if (sub_1000312BC((uint64_t)a2, 1, v6))
      {
        uint64_t v7 = sub_10002E768(&qword_100699FF0);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        sub_10003349C((uint64_t)a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t sub_10009FE2C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for ConfigurationFetcher.ConfigManagerError()
{
  return sub_100077F20();
}

void sub_10009FE54()
{
  if (!qword_10069A130)
  {
    type metadata accessor for HTTPStatusCode();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10069A130);
    }
  }
}

uint64_t getEnumTagSinglePayload for ASDConfig.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ASDConfig.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A0000);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASDConfig.CodingKeys()
{
  return &type metadata for ASDConfig.CodingKeys;
}

uint64_t sub_1000A0038()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A0084(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000A00F4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

__n128 sub_1000A01A4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000A01C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t sub_1000A0230(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000A0270(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ASDConfig.ServiceAreaConfig()
{
}

uint64_t sub_1000A02CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000A030C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  return a1;
}

__n128 sub_1000A0384(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000A0398(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t sub_1000A03E0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 28))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000A0420(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 28) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ASDConfig.ASServerJSONBagConfiguration()
{
}

uint64_t sub_1000A0470(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_1000A0508(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A05D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for ASDConfig.ASPushNotificationsConfiguration()
{
}

uint64_t sub_1000A060C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000A0644(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

__n128 sub_1000A069C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_1000A06B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t sub_1000A06F0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000A0730(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ASDConfig.AirlineNameFormat()
{
}

unint64_t sub_1000A0780()
{
  unint64_t result = qword_10069A138;
  if (!qword_10069A138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A138);
  }
  return result;
}

unint64_t sub_1000A07D0()
{
  unint64_t result = qword_10069A140;
  if (!qword_10069A140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A140);
  }
  return result;
}

unint64_t sub_1000A0820()
{
  unint64_t result = qword_10069A148;
  if (!qword_10069A148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A148);
  }
  return result;
}

unint64_t sub_1000A086C()
{
  unint64_t result = qword_10069A158;
  if (!qword_10069A158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A158);
  }
  return result;
}

unint64_t sub_1000A08B8()
{
  unint64_t result = qword_10069A168;
  if (!qword_10069A168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A168);
  }
  return result;
}

unint64_t sub_1000A0904()
{
  unint64_t result = qword_10069A178;
  if (!qword_10069A178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A178);
  }
  return result;
}

unint64_t sub_1000A0950()
{
  unint64_t result = qword_10069A188;
  if (!qword_10069A188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A188);
  }
  return result;
}

unint64_t sub_1000A099C(uint64_t a1)
{
  unint64_t result = sub_1000A1400(a1);
  if (!result)
  {
    sub_10003137C(&qword_1006982F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

unint64_t sub_1000A09FC()
{
  unint64_t result = qword_10069A1B8;
  if (!qword_10069A1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A1B8);
  }
  return result;
}

unint64_t sub_1000A0A48()
{
  unint64_t result = qword_10069A1C0;
  if (!qword_10069A1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A1C0);
  }
  return result;
}

unint64_t sub_1000A0A94()
{
  unint64_t result = qword_10069A1D0;
  if (!qword_10069A1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A1D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for OuterConfig.CodingKeys()
{
  return &type metadata for OuterConfig.CodingKeys;
}

ValueMetadata *type metadata accessor for ASDConfig.ServiceAreaConfig.CodingKeys()
{
  return &type metadata for ASDConfig.ServiceAreaConfig.CodingKeys;
}

unsigned char *_s3asd9ASDConfigV17ServiceAreaConfigV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A0BE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASDConfig.ASServerJSONBagConfiguration.CodingKeys()
{
  return &type metadata for ASDConfig.ASServerJSONBagConfiguration.CodingKeys;
}

uint64_t _s3asd11OuterConfigV10CodingKeysOwet_0(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s3asd11OuterConfigV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000A0D04);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASDConfig.ASPushNotificationsConfiguration.CodingKeys()
{
  return &type metadata for ASDConfig.ASPushNotificationsConfiguration.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ASDConfig.AirlineNameFormat.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A0E08);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASDConfig.AirlineNameFormat.CodingKeys()
{
  return &type metadata for ASDConfig.AirlineNameFormat.CodingKeys;
}

unint64_t sub_1000A0E44()
{
  unint64_t result = qword_10069A1D8;
  if (!qword_10069A1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A1D8);
  }
  return result;
}

unint64_t sub_1000A0E94()
{
  unint64_t result = qword_10069A1E0;
  if (!qword_10069A1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A1E0);
  }
  return result;
}

unint64_t sub_1000A0EE4()
{
  unint64_t result = qword_10069A1E8;
  if (!qword_10069A1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A1E8);
  }
  return result;
}

unint64_t sub_1000A0F34()
{
  unint64_t result = qword_10069A1F0;
  if (!qword_10069A1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A1F0);
  }
  return result;
}

unint64_t sub_1000A0F84()
{
  unint64_t result = qword_10069A1F8;
  if (!qword_10069A1F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A1F8);
  }
  return result;
}

unint64_t sub_1000A0FD4()
{
  unint64_t result = qword_10069A200;
  if (!qword_10069A200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A200);
  }
  return result;
}

unint64_t sub_1000A1024()
{
  unint64_t result = qword_10069A208;
  if (!qword_10069A208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A208);
  }
  return result;
}

unint64_t sub_1000A1074()
{
  unint64_t result = qword_10069A210;
  if (!qword_10069A210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A210);
  }
  return result;
}

unint64_t sub_1000A10C4()
{
  unint64_t result = qword_10069A218;
  if (!qword_10069A218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A218);
  }
  return result;
}

unint64_t sub_1000A1114()
{
  unint64_t result = qword_10069A220;
  if (!qword_10069A220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A220);
  }
  return result;
}

unint64_t sub_1000A1164()
{
  unint64_t result = qword_10069A228;
  if (!qword_10069A228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A228);
  }
  return result;
}

unint64_t sub_1000A11B4()
{
  unint64_t result = qword_10069A230;
  if (!qword_10069A230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A230);
  }
  return result;
}

unint64_t sub_1000A1204()
{
  unint64_t result = qword_10069A238;
  if (!qword_10069A238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A238);
  }
  return result;
}

unint64_t sub_1000A1254()
{
  unint64_t result = qword_10069A240;
  if (!qword_10069A240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A240);
  }
  return result;
}

unint64_t sub_1000A12A4()
{
  unint64_t result = qword_10069A248;
  if (!qword_10069A248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A248);
  }
  return result;
}

uint64_t sub_1000A1304()
{
  return v0;
}

uint64_t sub_1000A131C()
{
  return *(void *)(v0 + 296);
}

uint64_t sub_1000A133C()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_1000A1354()
{
  return v0;
}

uint64_t sub_1000A1388()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1000A13A4()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

void *sub_1000A13D0()
{
  return sub_10002EAE0(v0, v0[3]);
}

uint64_t sub_1000A1400(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_1000A140C()
{
  *(unsigned char *)(v0 - 66) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000A1428()
{
  return sub_1000361F8(v0);
}

uint64_t sub_1000A1440()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_1000A145C()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1000A1480(uint64_t a1)
{
  return sub_10009E988(a1, v2 - 136, v1);
}

uint64_t sub_1000A14B0@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 136) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1000A14D4()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

void sub_1000A150C(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t sub_1000A1528()
{
  return v0;
}

uint64_t sub_1000A1540()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

void sub_1000A1558()
{
  *(unsigned char *)(v0 - 67) = 2;
}

uint64_t sub_1000A1564()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t sub_1000A158C()
{
  return v0;
}

uint64_t sub_1000A15A0()
{
  return v0;
}

uint64_t sub_1000A15D4()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_1000A15F4()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1000A1614(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000A163C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000A1664(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1000A16A8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_10069A250);
  sub_100031284(v0, (uint64_t)qword_10069A250);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000A1728()
{
  uint64_t v8 = 0;
  uint64_t v1 = *(NSObject **)(v0 + 24);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v8;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000A23E8;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000A2400;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A163C;
  aBlock[3] = &unk_100662828;
  os_log_type_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v8;
    swift_release();
    return v6;
  }
  return result;
}

void sub_1000A188C(id *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 32);
  id v4 = *a1;
  *a1 = v2;
  id v3 = v2;
}

uint64_t sub_1000A18D0(void *a1)
{
  uint64_t v4 = type metadata accessor for DispatchQoS();
  sub_100045FF4();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_1000A2440();
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  sub_100045FF4();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100046338();
  uint64_t v14 = v13 - v12;
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v1;
  *(void *)(v15 + 24) = a1;
  aBlock[4] = sub_1000A2390;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A1664;
  aBlock[3] = &unk_1006627B0;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
  return swift_release();
}

void sub_1000A1A98(uint64_t a1, void *a2)
{
  id v3 = *(id *)(a1 + 32);
  *(void *)(a1 + 32) = a2;
  id v2 = a2;
}

void *sub_1000A1AD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100045FF4();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100046338();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  sub_1000A2440();
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10 - 8);
  sub_100046338();
  v1[2] = [objc_allocWithZone((Class)CNContactStore) init];
  sub_1000362B0(0, (unint64_t *)&qword_10069A360);
  static OS_dispatch_queue.Attributes.concurrent.getter();
  static DispatchQoS.unspecified.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[4] = 0;
  sub_1000A1F1C();
  id v11 = [self defaultCenter];
  uint64_t v12 = CNContactStoreMeContactDidChangeNotification;
  id v13 = [self mainQueue];
  aBlock[4] = sub_1000A2428;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AC1D4;
  aBlock[3] = &unk_100662850;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v15 = [v11 addObserverForName:v12 object:0 queue:v13 usingBlock:v14];
  _Block_release(v14);
  swift_unknownObjectRelease();

  return v1;
}

void sub_1000A1D88()
{
  if (qword_100697970 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031284(v0, (uint64_t)qword_10069A250);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Me Contact changed", v3, 2u);
    swift_slowDealloc();
  }

  if ((sub_1000A1F1C() & 1) == 0)
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Ignoring notification since values that we care about did not change", v5, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000A1F1C()
{
  sub_10002E768(&qword_100699D10);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10058F340;
  *(void *)(v1 + 32) = CNContactGivenNameKey;
  *(void *)(v1 + 40) = CNContactFamilyNameKey;
  *(void *)(v1 + 48) = CNContactPhoneNumbersKey;
  *(void *)(v1 + 56) = CNContactEmailAddressesKey;
  *(void *)(v1 + 64) = CNContactPostalAddressesKey;
  id v27 = (id)v1;
  specialized Array._endMutation()();
  os_log_type_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = CNContactGivenNameKey;
  os_log_type_t v4 = CNContactFamilyNameKey;
  uint64_t v5 = CNContactPhoneNumbersKey;
  uint64_t v6 = CNContactEmailAddressesKey;
  uint64_t v7 = CNContactPostalAddressesKey;
  sub_10002E768(&qword_100699D00);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v27 = 0;
  id v9 = [v2 _crossPlatformUnifiedMeContactWithKeysToFetch:isa error:&v27];

  id v10 = v27;
  if (!v9)
  {
    id v18 = v27;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100697970 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100031284(v19, (uint64_t)qword_10069A250);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      id v27 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_getErrorValue();
      uint64_t v23 = Error.localizedDescription.getter();
      sub_100032B48(v23, v24, (uint64_t *)&v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Ignoring error getting MeContact %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return 0;
  }
  id v11 = v9;
  id v12 = v10;
  id v13 = v11;
  uint64_t v14 = sub_1000A1728();
  if (!v14)
  {

    goto LABEL_10;
  }
  id v15 = (void *)v14;
  sub_1000362B0(0, &qword_100699D08);
  id v16 = v13;
  char v17 = static NSObject.== infix(_:_:)();

  if ((v17 & 1) == 0)
  {
LABEL_10:
    id v25 = v13;
    sub_1000A18D0(v9);

    return 1;
  }

  return 0;
}

id *sub_1000A22C8()
{
  return v0;
}

uint64_t sub_1000A22F8()
{
  sub_1000A22C8();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for DIPContactsManager()
{
  return self;
}

uint64_t sub_1000A2350()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000A2390()
{
  sub_1000A1A98(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000A2398(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000A23A8()
{
  return swift_release();
}

uint64_t sub_1000A23B0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000A23E8()
{
  sub_1000A188C(*(id **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000A23F0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A2400()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_1000A2428()
{
}

uint64_t sub_1000A2440()
{
  return 0;
}

Swift::Int sub_1000A2460(uint64_t a1)
{
  return sub_1000A24A8(a1, (void (*)(uint64_t))sub_10004009C);
}

Swift::Int sub_1000A2478(uint64_t a1)
{
  return sub_1000A24A8(a1, (void (*)(uint64_t))sub_10005458C);
}

Swift::Int sub_1000A2490(uint64_t a1)
{
  return sub_1000A24A8(a1, (void (*)(uint64_t))sub_1000836C0);
}

Swift::Int sub_1000A24A8(uint64_t a1, void (*a2)(uint64_t))
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A2500(Swift::UInt a1)
{
  return Hasher._finalize()();
}

void sub_1000A2548(int a1, Swift::UInt a2)
{
}

uint64_t sub_1000A2570()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A2678(uint64_t a1, char a2)
{
  sub_10005458C(a2);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A26CC()
{
  sub_1000A3E18();
  switch(v0)
  {
    case 2:
    case 3:
    case 4:
      sub_1000A3E18();
      break;
    default:
      break;
  }
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000A27D4(uint64_t a1, uint64_t a2)
{
  return sub_1000A2864(a1, a2, (void (*)(uint64_t))sub_1000836C0);
}

Swift::Int sub_1000A27EC(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A2830(uint64_t a1, uint64_t a2)
{
  return sub_1000A2864(a1, a2, (void (*)(uint64_t))sub_10005458C);
}

Swift::Int sub_1000A284C(uint64_t a1, uint64_t a2)
{
  return sub_1000A2864(a1, a2, (void (*)(uint64_t))sub_10004009C);
}

Swift::Int sub_1000A2864(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

Swift::Int sub_1000A28B8(uint64_t a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

uint64_t ASScreenContinuityServicesHelper.ScreenMirroringStatus.Status.init(rawValue:)(uint64_t result)
{
  if ((unint64_t)(result - 4) < 0xFFFFFFFFFFFFFFFDLL) {
    return 0;
  }
  return result;
}

Swift::Int sub_1000A2910()
{
  return sub_1000A2500(*v0);
}

Swift::Int sub_1000A292C(uint64_t a1)
{
  return sub_1000A28B8(a1, *v1);
}

uint64_t sub_1000A2948@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = ASScreenContinuityServicesHelper.ScreenMirroringStatus.Status.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t ASScreenContinuityServicesHelper.ScreenMirroringStatus.status.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtCC3asd32ASScreenContinuityServicesHelper21ScreenMirroringStatus_status);
}

void *ASScreenContinuityServicesHelper.ScreenMirroringStatus.sessionStart.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtCC3asd32ASScreenContinuityServicesHelper21ScreenMirroringStatus_sessionStart);
  id v2 = v1;
  return v1;
}

id ASScreenContinuityServicesHelper.ScreenMirroringStatus.__allocating_init(status:sessionStart:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return ASScreenContinuityServicesHelper.ScreenMirroringStatus.init(status:sessionStart:)(a1, a2);
}

id ASScreenContinuityServicesHelper.ScreenMirroringStatus.init(status:sessionStart:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR____TtCC3asd32ASScreenContinuityServicesHelper21ScreenMirroringStatus_status] = a1;
  *(void *)&v2[OBJC_IVAR____TtCC3asd32ASScreenContinuityServicesHelper21ScreenMirroringStatus_sessionStart] = a2;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  return [super init];
}

void ASScreenContinuityServicesHelper.ScreenMirroringStatus.init()()
{
}

uint64_t ASScreenContinuityServicesHelper.loadScreenMirroringStatus()()
{
  sub_10003F0F4();
  v1[3] = v0;
  uint64_t v2 = sub_10002E768(&qword_100697EE0);
  sub_100051D98(v2);
  v1[4] = sub_10003F24C();
  v1[5] = swift_task_alloc();
  _OWORD v1[6] = swift_task_alloc();
  uint64_t v3 = sub_10002E768(&qword_10069A388);
  sub_100051D98(v3);
  v1[7] = sub_10003F24C();
  v1[8] = swift_task_alloc();
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  uint64_t v4 = sub_10002E768(&qword_10069A390);
  sub_100051D98(v4);
  v1[11] = sub_10003F13C();
  uint64_t v5 = type metadata accessor for CompanionDevice();
  v1[12] = v5;
  sub_100031774(v5);
  v1[13] = v6;
  v1[14] = sub_10003F24C();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CompanionDeviceManager.Options();
  v1[17] = v7;
  sub_100031774(v7);
  v1[18] = v8;
  v1[19] = sub_10003F13C();
  uint64_t v9 = sub_10002E768(&qword_10069A398);
  v1[20] = v9;
  sub_100051D98(v9);
  v1[21] = sub_10003F13C();
  uint64_t v10 = sub_10002E768(&qword_10069A3A0);
  v1[22] = v10;
  sub_100031774(v10);
  v1[23] = v11;
  v1[24] = sub_10003F13C();
  return _swift_task_switch(sub_1000A2D30, 0, 0);
}

uint64_t sub_1000A2D30()
{
  sub_10003F0F4();
  *(void *)(v0 + 200) = *(void *)(*(void *)(v0 + 24)
                                    + OBJC_IVAR____TtC3asd32ASScreenContinuityServicesHelper_manager);
  static CompanionDeviceManager.Options.sessionInfo.getter();
  type metadata accessor for CompanionDeviceManager();
  sub_1000A3804();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_1000A2DCC, v2, v1);
}

uint64_t sub_1000A2DCC()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[17];
  dispatch thunk of CompanionDeviceManager.devices(with:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1000A2E64, 0, 0);
}

uint64_t sub_1000A2E64()
{
  swift_getOpaqueTypeConformance2();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000A2F7C;
  uint64_t v3 = *(void *)(v0 + 176);
  return dispatch thunk of AsyncIteratorProtocol.next()(v0 + 16, v3, AssociatedConformanceWitness);
}

uint64_t sub_1000A2F7C()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v2 = *v1;
  sub_10003F0B8();
  *uint64_t v3 = v2;
  *(void *)(v4 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v5 = sub_1000A36D0;
  }
  else {
    uint64_t v5 = sub_1000A3060;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A3060()
{
  uint64_t v1 = v0[2];
  if (!v1) {
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    Class isa = 0;
    uint64_t v23 = 1;
    goto LABEL_27;
  }
  uint64_t v3 = v0[13];
  uint64_t v56 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
  unint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = (void (**)(void))(v3 + 8);
  uint64_t v54 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  uint64_t v57 = v5;
  os_log_type_t v58 = v0;
  while (1)
  {
    uint64_t v59 = v2;
    uint64_t v7 = v0[14];
    uint64_t v6 = v0[15];
    uint64_t v8 = v0[12];
    uint64_t v9 = v0[10];
    v56(v6, v4, v8);
    CompanionDevice.latestSessionInfo.getter();
    uint64_t v10 = type metadata accessor for CompanionDevice.SessionInfo();
    int v11 = sub_1000312BC(v9, 1, v10);
    sub_1000A3878(v9, &qword_10069A388);
    v56(v7, v6, v8);
    uint64_t v0 = v58;
    if (v11 == 1)
    {
      id v12 = *v57;
      sub_100093F10();
      v12();
      uint64_t v13 = v10;
      goto LABEL_8;
    }
    uint64_t v14 = v58[9];
    CompanionDevice.latestSessionInfo.getter();
    int v15 = sub_1000312BC(v14, 1, v10);
    uint64_t v16 = v58[14];
    uint64_t v17 = v58[12];
    uint64_t v18 = v58[6];
    uint64_t v13 = v10;
    if (v15 == 1) {
      break;
    }
    CompanionDevice.SessionInfo.end.getter();
    sub_10005EDB8();
    sub_10003F240();
    v19();
    uint64_t v20 = type metadata accessor for Date();
    int v21 = sub_1000312BC(v18, 1, v20);
    sub_1000A3878(v18, &qword_100697EE0);
    id v12 = *v57;
    sub_100093F10();
    v12();
    if (v21 == 1) {
      goto LABEL_13;
    }
LABEL_8:
    ((void (*)(uint64_t, uint64_t))v12)(v58[15], v58[12]);
    v4 += v54;
    uint64_t v2 = v59 - 1;
    if (v59 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = 1;
      goto LABEL_14;
    }
  }
  sub_1000A3878(v58[9], &qword_10069A388);
  uint64_t v24 = type metadata accessor for Date();
  sub_10003349C(v18, 1, 1, v24);
  sub_1000A3878(v18, &qword_100697EE0);
  id v12 = *v57;
  ((void (*)(uint64_t, uint64_t))*v57)(v16, v17);
LABEL_13:
  uint64_t v25 = v58[15];
  uint64_t v27 = v58[12];
  uint64_t v26 = v58[13];
  uint64_t v28 = v58[11];
  swift_bridgeObjectRelease();
  uint64_t v0 = v58;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v28, v25, v27);
  uint64_t v22 = 0;
LABEL_14:
  uint64_t v30 = v0[11];
  uint64_t v29 = v0[12];
  sub_10003349C(v30, v22, 1, v29);
  swift_bridgeObjectRelease();
  if (sub_1000312BC(v30, 1, v29) == 1)
  {
    sub_1000A3878(v0[11], &qword_10069A390);
    Class isa = 0;
    uint64_t v23 = 2;
    goto LABEL_27;
  }
  uint64_t v31 = v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[13] + 32))(v0[16], v0[11], v0[12]);
  CompanionDevice.latestSessionInfo.getter();
  int v32 = sub_1000312BC(v31, 1, v13);
  uint64_t v33 = v0[5];
  if (v32 == 1)
  {
    sub_1000A3878(v0[8], &qword_10069A388);
    uint64_t v34 = type metadata accessor for Date();
    sub_1000A3DF8(v34);
    goto LABEL_19;
  }
  CompanionDevice.SessionInfo.end.getter();
  sub_10005EDB8();
  sub_10003F240();
  v35();
  uint64_t v36 = type metadata accessor for Date();
  if (sub_1000312BC(v33, 1, v36) == 1) {
LABEL_19:
  }
    uint64_t v37 = 3;
  else {
    uint64_t v37 = 1;
  }
  uint64_t v38 = v0[7];
  sub_1000A3878(v0[5], &qword_100697EE0);
  CompanionDevice.latestSessionInfo.getter();
  int v39 = sub_1000312BC(v38, 1, v13);
  uint64_t v40 = v0[7];
  uint64_t v41 = v0[4];
  if (v39 == 1)
  {
    sub_100093F10();
    v12();
    sub_1000A3878(v40, &qword_10069A388);
    uint64_t v42 = type metadata accessor for Date();
    sub_1000A3DF8(v42);
    goto LABEL_24;
  }
  CompanionDevice.SessionInfo.start.getter();
  sub_100093F10();
  v12();
  sub_10005EDB8();
  sub_10003F240();
  v43();
  uint64_t v44 = type metadata accessor for Date();
  sub_10003349C(v41, 0, 1, v44);
  if (sub_1000312BC(v41, 1, v44) == 1)
  {
LABEL_24:
    uint64_t v0 = v58;
    sub_1000A3878(v58[4], &qword_100697EE0);
    Class isa = 0;
  }
  else
  {
    uint64_t v0 = v58;
    uint64_t v45 = v58[4];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    sub_10005EDB8();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v44);
  }
  uint64_t v23 = v37;
LABEL_27:
  uint64_t v48 = v0[23];
  uint64_t v47 = v0[24];
  uint64_t v49 = v0[22];
  id v50 = objc_allocWithZone((Class)type metadata accessor for ASScreenContinuityServicesHelper.ScreenMirroringStatus());
  id v51 = ASScreenContinuityServicesHelper.ScreenMirroringStatus.init(status:sessionStart:)(v23, (uint64_t)isa);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v52 = (uint64_t (*)(id))v0[1];
  return v52(v51);
}

uint64_t sub_1000A36D0()
{
  sub_100093F10();
  v1();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

unint64_t sub_1000A3804()
{
  unint64_t result = qword_10069A3B0;
  if (!qword_10069A3B0)
  {
    type metadata accessor for CompanionDeviceManager();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A3B0);
  }
  return result;
}

uint64_t type metadata accessor for ASScreenContinuityServicesHelper.ScreenMirroringStatus()
{
  return self;
}

uint64_t sub_1000A3878(uint64_t a1, uint64_t *a2)
{
  sub_10002E768(a2);
  sub_10005EDB8();
  sub_10003F240();
  v3();
  return a1;
}

uint64_t sub_1000A3948(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000A39F0;
  return ASScreenContinuityServicesHelper.loadScreenMirroringStatus()();
}

uint64_t sub_1000A39F0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v7 = *v2;
  sub_10003F0B8();
  *uint64_t v8 = v7;
  swift_task_dealloc();

  uint64_t v9 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0);
    _Block_release(v9);
  }
  int v11 = *(uint64_t (**)(void))(v7 + 8);
  return v11();
}

id ASScreenContinuityServicesHelper.init()()
{
  uint64_t v1 = OBJC_IVAR____TtC3asd32ASScreenContinuityServicesHelper_manager;
  type metadata accessor for CompanionDeviceManager();
  uint64_t v2 = v0;
  *(void *)&v0[v1] = CompanionDeviceManager.__allocating_init()();

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for ASScreenContinuityServicesHelper();
  return [super init];
}

uint64_t type metadata accessor for ASScreenContinuityServicesHelper()
{
  return self;
}

id ASScreenContinuityServicesHelper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASScreenContinuityServicesHelper();
  return [super dealloc];
}

unint64_t sub_1000A3C78()
{
  unint64_t result = qword_10069A3B8;
  if (!qword_10069A3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A3B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ASScreenContinuityServicesHelper.ScreenMirroringStatus.Status()
{
  return &type metadata for ASScreenContinuityServicesHelper.ScreenMirroringStatus.Status;
}

uint64_t sub_1000A3CE4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A3D24()
{
  objc_super v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  objc_super v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *objc_super v4 = v1;
  v4[1] = sub_1000895C8;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_10069A410 + dword_10069A410);
  return v5(v2, v3);
}

uint64_t sub_1000A3DD4()
{
  return String.hash(into:)();
}

uint64_t sub_1000A3DF8(uint64_t a1)
{
  return sub_10003349C(v1, 1, 1, a1);
}

id sub_1000A3E24()
{
  uint64_t v0 = type metadata accessor for Logger();
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A6290();
  id v3 = [self sharedInstance];
  id v4 = objc_allocWithZone((Class)type metadata accessor for AssessmentPayloadStore());
  id result = sub_1000A3FAC((uint64_t)v2, v3);
  static AssessmentPayloadStore.shared = (uint64_t)result;
  return result;
}

uint64_t *AssessmentPayloadStore.shared.unsafeMutableAddressor()
{
  if (qword_100697978 != -1) {
    swift_once();
  }
  return &static AssessmentPayloadStore.shared;
}

id static AssessmentPayloadStore.shared.getter()
{
  if (qword_100697978 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static AssessmentPayloadStore.shared;

  return v0;
}

id sub_1000A3FAC(uint64_t a1, void *a2)
{
  uint64_t v5 = v2;
  sub_1000A6290();
  uint64_t v6 = &v5[OBJC_IVAR____TtC3asd22AssessmentPayloadStore_logger];
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  *(void *)&v5[OBJC_IVAR____TtC3asd22AssessmentPayloadStore_cacheManager] = a2;
  id v9 = a2;

  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for AssessmentPayloadStore();
  id v10 = [super init];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v10;
}

uint64_t sub_1000A40C0(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return _swift_task_switch(sub_1000A40E0, 0, 0);
}

uint64_t sub_1000A40E0()
{
  uint64_t v1 = *(void **)(v0[16] + OBJC_IVAR____TtC3asd22AssessmentPayloadStore_cacheManager);
  sub_100053AC0();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v0[17] = isa;
  swift_bridgeObjectRelease();
  v0[2] = v0;
  v0[3] = sub_1000A4228;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000A43D0;
  v0[13] = &unk_1006628F0;
  v0[14] = v3;
  [v1 eWV8dPJG0p0nc2lk:isa completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000A4228()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 144) = v4;
  if (v4) {
    uint64_t v5 = sub_1000A4368;
  }
  else {
    uint64_t v5 = sub_1000A430C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A430C()
{
  sub_10003F0F4();

  sub_10003F1AC();
  return v1();
}

uint64_t sub_1000A4368()
{
  sub_10003F444();
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  sub_10003F1AC();
  return v2();
}

uint64_t sub_1000A43D0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v3 = a2;
    return sub_1000A6018(v2, (uint64_t)v3);
  }
  else
  {
    return j__swift_continuation_throwingResume();
  }
}

uint64_t AssessmentPayloadStore.fetch(for:withBindings:)()
{
  sub_10003F0F4();
  v1[18] = v2;
  v1[19] = v0;
  v1[16] = v3;
  v1[17] = v4;
  type metadata accessor for AssessmentPayloadFilter();
  v1[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for AssessmentPayload();
  v1[21] = v5;
  sub_100031774(v5);
  v1[22] = v6;
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  return _swift_task_switch(sub_1000A4508, 0, 0);
}

uint64_t sub_1000A4508()
{
  uint64_t v1 = *(void **)(v0[19] + OBJC_IVAR____TtC3asd22AssessmentPayloadStore_cacheManager);
  NSString v2 = String._bridgeToObjectiveC()();
  v0[25] = v2;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = sub_1000A4630;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000A4D04;
  v0[13] = &unk_1006628C0;
  v0[14] = v3;
  [v1 naB577x5bWPDZyct:v2 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000A4630()
{
  sub_10003F0F4();
  sub_1000336EC();
  sub_10003F0E8();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v1 + 208) = v4;
  if (v4) {
    uint64_t v5 = sub_1000A4C08;
  }
  else {
    uint64_t v5 = sub_1000A4714;
  }
  return _swift_task_switch(v5, 0, 0);
}

void sub_1000A4714()
{
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  unint64_t v3 = *(void *)(v0 + 120);

  sub_1000A4D80(v2 + OBJC_IVAR____TtC3asd22AssessmentPayloadStore_assessmentPayloadFilter, v1);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      goto LABEL_13;
    }
  }
  sub_1000A5490(0, v4 & ~(v4 >> 63), 0);
  if (v4 < 0)
  {
    __break(1u);
    return;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(v0 + 176);
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v3 + 8 * v5 + 32);
    }
    sub_100053FE4(v7, *(uint64_t **)(v0 + 184));
    unint64_t v9 = _swiftEmptyArrayStorage[2];
    unint64_t v8 = _swiftEmptyArrayStorage[3];
    if (v9 >= v8 >> 1) {
      sub_1000A5490(v8 > 1, v9 + 1, 1);
    }
    uint64_t v10 = *(void *)(v0 + 184);
    ++v5;
    _swiftEmptyArrayStorage[2] = v9 + 1;
    sub_1000A54F4(v10, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v9);
  }
  while (v4 != v5);
LABEL_13:
  swift_bridgeObjectRelease();
  *(void *)(v0 + 216) = _swiftEmptyArrayStorage;
  int v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v11;
  void *v11 = v0;
  v11[1] = sub_1000A4920;
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 144);
  sub_1000B4F20(v12, (uint64_t)_swiftEmptyArrayStorage, v13);
}

uint64_t sub_1000A4920()
{
  sub_10003F444();
  uint64_t v2 = *v1;
  sub_10003F0E8();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 232) = v0;
  swift_task_dealloc();
  sub_1000A55A8(*(void *)(v2 + 160), (void (*)(void))type metadata accessor for AssessmentPayloadFilter);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v5 = sub_1000A4C8C;
  }
  else {
    uint64_t v5 = sub_1000A4A7C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1000A4A7C()
{
  uint64_t v1 = v0[29];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000A5558();
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v1)
  {
    sub_1000A55A8(v0[24], (void (*)(void))type metadata accessor for AssessmentPayload);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10003F1AC();
    return v4();
  }
  else
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    sub_1000A55A8(v0[24], (void (*)(void))type metadata accessor for AssessmentPayload);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v8(v6, v7);
  }
}

uint64_t sub_1000A4C08()
{
  sub_10003F444();
  uint64_t v1 = *(void **)(v0 + 200);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v2();
}

uint64_t sub_1000A4C8C()
{
  sub_10003F444();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_10003F1AC();
  return v0();
}

uint64_t sub_1000A4D04(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return sub_1000ABEBC(v3, v4);
  }
  else
  {
    sub_1000A6250();
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return sub_1000ABF1C(v3, v6);
  }
}

uint64_t sub_1000A4D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssessmentPayloadFilter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A4E7C(int a1, int a2, void *aBlock, void *a4)
{
  _OWORD v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v4[4] = v6;
  v4[5] = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  a4;
  uint64_t v7 = (void *)swift_task_alloc();
  v4[6] = v7;
  void *v7 = v4;
  v7[1] = sub_1000A4F8C;
  return AssessmentPayloadStore.fetch(for:withBindings:)();
}

uint64_t sub_1000A4F8C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = v2;
  sub_1000336EC();
  uint64_t v8 = v7;
  sub_10003F0E8();
  void *v9 = v8;
  int v11 = *(void **)(v10 + 16);
  uint64_t v12 = *v3;
  sub_10003F0E8();
  *uint64_t v13 = v12;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t v14 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v16 = (void *)v14;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10002EC6C(a1, a2);
    uint64_t v14 = 0;
    uint64_t v16 = isa;
  }
  uint64_t v17 = *(void (***)(void, void, void))(v8 + 24);
  ((void (**)(void, Class, uint64_t))v17)[2](v17, isa, v14);

  _Block_release(v17);
  sub_10003F1AC();
  return v18();
}

void AssessmentPayloadStore.init()()
{
}

id AssessmentPayloadStore.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AssessmentPayloadStore();
  return [super dealloc];
}

void sub_1000A5238()
{
  sub_1000A575C();
  void *v0 = v1;
}

void sub_1000A5288()
{
  sub_1000A575C();
  void *v0 = v1;
}

char *sub_1000A52D8(char *a1, int64_t a2, char a3)
{
  id result = sub_1000A5828(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1000A52F8()
{
  sub_1000A5F34();
  void *v0 = v1;
}

void sub_1000A5348(char a1, uint64_t a2, char a3)
{
  sub_1000A5CCC(a1, a2, a3, *v3, &qword_100699140, type metadata accessor for BindingsStore.Binding, (void (*)(uint64_t, uint64_t, char *))sub_10003D0AC, (void (*)(uint64_t, uint64_t, char *))sub_100080D0C);
  *uint64_t v3 = v4;
}

void sub_1000A53AC(char a1, uint64_t a2, char a3)
{
  sub_1000A5954(a1, a2, a3, *v3);
  *uint64_t v3 = v4;
}

void sub_1000A53CC(char a1, uint64_t a2, char a3)
{
  sub_1000A5A2C(a1, a2, a3, *v3);
  *uint64_t v3 = v4;
}

char *sub_1000A53EC(char *a1, int64_t a2, char a3)
{
  id result = sub_1000A5AFC(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

char *sub_1000A540C(char *a1, int64_t a2, char a3)
{
  id result = sub_1000A5BE8(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1000A542C(char a1, uint64_t a2, char a3)
{
  sub_1000A5CCC(a1, a2, a3, *v3, &qword_1006980C0, (uint64_t (*)(void))type metadata accessor for LocalFeatureToggle, (void (*)(uint64_t, uint64_t, char *))sub_10003D280, (void (*)(uint64_t, uint64_t, char *))sub_100081004);
  *uint64_t v3 = v4;
}

void sub_1000A5490(char a1, uint64_t a2, char a3)
{
  sub_1000A5CCC(a1, a2, a3, *v3, &qword_10069A4C0, (uint64_t (*)(void))type metadata accessor for AssessmentPayload, (void (*)(uint64_t, uint64_t, char *))sub_10003D298, (void (*)(uint64_t, uint64_t, char *))sub_10008101C);
  *uint64_t v3 = v4;
}

uint64_t sub_1000A54F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AssessmentPayload();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A5558()
{
  unint64_t result = qword_10069A438;
  if (!qword_10069A438)
  {
    type metadata accessor for AssessmentPayload();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A438);
  }
  return result;
}

uint64_t sub_1000A55A8(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_1000A62F4();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t type metadata accessor for AssessmentPayloadStore()
{
  uint64_t result = qword_10069A470;
  if (!qword_10069A470) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A5644()
{
  return type metadata accessor for AssessmentPayloadStore();
}

uint64_t sub_1000A564C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

char *sub_1000A56EC(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000A5E50(a1, a2, a3, *v3);
  *uint64_t v3 = (uint64_t)result;
  return result;
}

void sub_1000A570C()
{
  sub_1000A5F34();
  void *v0 = v1;
}

void sub_1000A575C()
{
  sub_1000A62E0();
  if (v6)
  {
    sub_10003F0D8();
    if (v8 != v9)
    {
      sub_10003F154();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_10002E768(v5);
    uint64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    _OWORD v12[2] = v10;
    void v12[3] = 2 * v13 - 64;
  }
  else
  {
    uint64_t v12 = &_swiftEmptyArrayStorage;
  }
  uint64_t v14 = v12 + 4;
  uint64_t v15 = v0 + 32;
  if (v3)
  {
    v2(v15, v10, v14);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  swift_release();
}

char *sub_1000A5828(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002E768(&qword_100698030);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_10003CF18((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100080C60();
  }
  swift_release();
  return v10;
}

void sub_1000A590C(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1000A5954(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_10003F0D8();
    if (v7 != v8)
    {
      sub_10003F154();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_10002E768(&qword_1006980C8);
    size_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    size_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_10003CE18((char *)(a4 + 32), v9, v11 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100080BAC();
  }
  swift_release();
}

void sub_1000A5A2C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_10003F0D8();
    if (v7 != v8)
    {
      sub_10003F154();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_10002E768(&qword_1006980D8);
    size_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 8);
  }
  else
  {
    size_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v13 = (char *)(a4 + 32);
  if (a1)
  {
    sub_10003D128(v13, v9, v11 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100080DE8((uint64_t)v13, v9);
  }
  swift_release();
}

char *sub_1000A5AFC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002E768(&qword_10069A4A8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_10003D1C0((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100080EA8();
  }
  swift_release();
  return v10;
}

char *sub_1000A5BE8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002E768(&qword_10069A4B0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 64);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_10003D224((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100080F58();
  }
  swift_release();
  return v10;
}

void sub_1000A5CCC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(uint64_t, uint64_t, char *), void (*a8)(uint64_t, uint64_t, char *))
{
  if (a3)
  {
    sub_10003F0D8();
    if (v14 != v15)
    {
      sub_10003F154();
      if (v14)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_10002E768(a5);
  uint64_t v18 = a6(0);
  sub_100031774(v18);
  uint64_t v20 = *(void *)(v19 + 72);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = (void *)swift_allocObject();
  size_t v24 = j__malloc_size(v23);
  if (!v20)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v24 - v22 == 0x8000000000000000 && v20 == -1) {
    goto LABEL_23;
  }
  v23[2] = v16;
  _OWORD v23[3] = 2 * ((uint64_t)(v24 - v22) / v20);
LABEL_18:
  uint64_t v26 = *(void *)(a6(0) - 8);
  unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = (char *)v23 + v27;
  uint64_t v29 = a4 + v27;
  if (a1)
  {
    a7(v29, v16, v28);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a8(v29, v16, v28);
  }
  swift_release();
}

char *sub_1000A5E50(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002E768(&qword_10069A4B8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_10003D410((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100081110();
  }
  swift_release();
  return v10;
}

void sub_1000A5F34()
{
  sub_1000A62E0();
  if (v6)
  {
    sub_10003F0D8();
    if (v8 != v9)
    {
      sub_10003F154();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_10003F0C8();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_10002E768(v5);
    size_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    _OWORD v12[2] = v10;
    void v12[3] = 2 * ((uint64_t)(v13 - 32) / 24);
  }
  else
  {
    size_t v12 = _swiftEmptyArrayStorage;
  }
  char v14 = v12 + 4;
  uint64_t v15 = v0 + 32;
  if (v3)
  {
    v2(v15, v10, v14);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  swift_release();
}

uint64_t sub_1000A6018(uint64_t a1, uint64_t a2)
{
  sub_10002E768((uint64_t *)&unk_100699160);
  uint64_t v4 = swift_allocError();
  *char v5 = a2;

  return _swift_continuation_throwingResumeWithError(a1, v4);
}

uint64_t sub_1000A607C()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000A60CC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  char v5 = (void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  char v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  void *v6 = v1;
  v6[1] = sub_1000A618C;
  uint64_t v7 = (uint64_t (*)(int, int, void *, void *))((char *)&dword_10069A488 + dword_10069A488);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1000A618C()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0E8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_10003F1AC();
  return v3();
}

unint64_t sub_1000A6250()
{
  unint64_t result = qword_10069A4C8;
  if (!qword_10069A4C8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10069A4C8);
  }
  return result;
}

uint64_t sub_1000A6290()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000A6308()
{
  uint64_t v1 = v0;
  sub_10002E768(&qword_10069A4D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10058CF00;
  *(void *)(inited + 32) = 0x724565646F636564;
  *(void *)(inited + 40) = 0xEB00000000726F72;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithBool:*(unsigned __int8 *)v1];
  strcpy((char *)(inited + 56), "filterIgnored");
  *(_WORD *)(inited + 70) = -4864;
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithBool:*((unsigned __int8 *)v1 + 1)];
  sub_1000362B0(0, &qword_1006989B0);
  uint64_t v3 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v9 = v3;
  if ((_BYTE)v1[2])
  {
  }
  else
  {
    uint64_t v4 = v3;
    id v5 = [objc_allocWithZone((Class)NSNumber) initWithDouble:v1[1]];
    swift_isUniquelyReferenced_nonNull_native();
    sub_100057648((uint64_t)v5, 0x79616C6564, 0xE500000000000000);
    uint64_t v9 = v4;
    swift_bridgeObjectRelease();
  }
  if (*((void *)v1 + 4))
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_isUniquelyReferenced_nonNull_native();
    sub_100057648((uint64_t)v6, 0x646E616D6D6F63, 0xE700000000000000);
    uint64_t v7 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {

    return v9;
  }
  return v7;
}

unint64_t sub_1000A6530()
{
  type metadata accessor for ASAnalyticsEvent();
  sub_100051B88();
  __chkstk_darwin();
  sub_100046338();
  uint64_t v3 = v2 - v1;
  sub_1000A6D98(v0, v2 - v1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t result = 0xD00000000000001DLL;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      sub_10005171C(v3);
      unint64_t result = 0xD000000000000023;
      break;
    case 2:
      sub_10005171C(v3);
      unint64_t result = 0xD000000000000022;
      break;
    case 3:
      sub_10005171C(v3);
      goto LABEL_7;
    case 4:
      uint64_t v6 = v3 + *(int *)(sub_10002E768(&qword_100699430) + 48);
      type metadata accessor for UUID();
      sub_100051B88();
      (*(void (**)(uint64_t))(v7 + 8))(v6);
LABEL_7:
      unint64_t result = 0xD000000000000015;
      break;
    case 5:
      unint64_t result = 0xD000000000000022;
      break;
    case 6:
      sub_10005171C(v3);
      unint64_t result = 0xD000000000000027;
      break;
    case 7:
      return result;
    default:
      sub_10005171C(v3);
      unint64_t result = 0xD000000000000019;
      break;
  }
  return result;
}

uint64_t sub_1000A66F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  sub_100046338();
  uint64_t v6 = v5 - v4;
  type metadata accessor for ASAnalyticsEvent();
  sub_100051B88();
  __chkstk_darwin();
  sub_100046338();
  uint64_t v9 = v8 - v7;
  sub_1000A6D98(v1, v8 - v7);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10002E768(&qword_10069A4D0);
      uint64_t inited = swift_initStackObject();
      NSString v13 = sub_1000A7B18((__n128 *)inited, (__n128)xmmword_10058CF00);
      swift_bridgeObjectRelease();
      *(void *)(inited + 48) = v13;
      *(void *)(inited + 56) = 0xD000000000000017;
      *(void *)(inited + 64) = 0x800000010056B0F0;
      *(NSNumber *)(inited + 72) = UInt64._bridgeToObjectiveC()();
      sub_1000362B0(0, &qword_1006989B0);
      return Dictionary.init(dictionaryLiteral:)();
    case 2u:
      sub_10002E768(&qword_10069A4D0);
      char v14 = (__n128 *)swift_initStackObject();
      NSString v15 = sub_1000A7B18(v14, (__n128)xmmword_10058CF00);
      swift_bridgeObjectRelease();
      v14[3].n128_u64[0] = (unint64_t)v15;
      v14[3].n128_u64[1] = 0xD000000000000010;
      v14[4].n128_u64[0] = 0x800000010056B110;
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v14[4].n128_u64[1] = (unint64_t)v16;
      sub_1000362B0(0, &qword_1006989B0);
      return Dictionary.init(dictionaryLiteral:)();
    case 3u:
      sub_10002E768(&qword_10069A4D0);
      uint64_t v17 = swift_initStackObject();
      *(_OWORD *)(v17 + 16) = xmmword_100590300;
      *(void *)(v17 + 32) = 1701869940;
      *(void *)(v17 + 40) = 0xE400000000000000;
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)(v17 + 48) = v18;
      *(void *)(v17 + 56) = 0x646F43726F727265;
      *(void *)(v17 + 64) = 0xE900000000000065;
      *(NSNumber *)(v17 + 72) = Int._bridgeToObjectiveC()();
      *(void *)(v17 + 80) = 7761509;
      *(void *)(v17 + 88) = 0xE300000000000000;
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)(v17 + 96) = v19;
      sub_1000362B0(0, &qword_1006989B0);
      return Dictionary.init(dictionaryLiteral:)();
    case 4u:
      uint64_t v20 = sub_10002E768(&qword_100699430);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v9 + *(int *)(v20 + 48), v2);
      sub_10002E768(&qword_10069A4D0);
      uint64_t v21 = swift_initStackObject();
      *(_OWORD *)(v21 + 16) = xmmword_10058CF00;
      *(void *)(v21 + 32) = 0x756F437972746572;
      *(void *)(v21 + 40) = 0xEA0000000000746ELL;
      *(NSNumber *)(v21 + 48) = Int._bridgeToObjectiveC()();
      *(void *)(v21 + 56) = 0x4449676162;
      *(void *)(v21 + 64) = 0xE500000000000000;
      UUID.uuidString.getter();
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)(v21 + 72) = v22;
      sub_1000362B0(0, &qword_1006989B0);
      uint64_t v23 = Dictionary.init(dictionaryLiteral:)();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
      return v23;
    case 5u:
      sub_10002E768(&qword_10069A4D0);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_10058CF00;
      *(void *)(v24 + 32) = 0x73736563637573;
      *(void *)(v24 + 40) = 0xE700000000000000;
      *(NSNumber *)(v24 + 48) = Bool._bridgeToObjectiveC()();
      *(void *)(v24 + 56) = 0x6E6F697461727564;
      *(void *)(v24 + 64) = 0xE800000000000000;
      *(NSNumber *)(v24 + 72) = Double._bridgeToObjectiveC()();
      goto LABEL_10;
    case 6u:
      long long v25 = *(_OWORD *)(v9 + 16);
      v28[0] = *(_OWORD *)v9;
      v28[1] = v25;
      uint64_t v29 = *(void *)(v9 + 32);
      uint64_t v23 = sub_1000A6308();
      sub_1000A6DFC((uint64_t)v28);
      return v23;
    case 7u:
      sub_10002E768(&qword_10069A4D0);
      uint64_t v26 = swift_initStackObject();
      *(_OWORD *)(v26 + 16) = xmmword_10058CEC0;
      *(void *)(v26 + 32) = 0xD00000000000001ELL;
      *(void *)(v26 + 40) = 0x800000010056B130;
      sub_1000362B0(0, (unint64_t *)&qword_100697EF8);
      *(NSNumber *)(v26 + 48) = NSNumber.init(BOOLeanLiteral:)(1);
LABEL_10:
      sub_1000362B0(0, &qword_1006989B0);
      break;
    default:
      sub_10002E768(&qword_10069A4D0);
      uint64_t v10 = (__n128 *)swift_initStackObject();
      NSString v11 = sub_1000A7B18(v10, (__n128)xmmword_10058CEC0);
      swift_bridgeObjectRelease();
      v10[3].n128_u64[0] = (unint64_t)v11;
      sub_1000362B0(0, &qword_1006989B0);
      break;
  }
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t type metadata accessor for ASAnalyticsEvent()
{
  uint64_t result = qword_10069A548;
  if (!qword_10069A548) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A6D98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ASAnalyticsEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A6DFC(uint64_t a1)
{
  return a1;
}

void *sub_1000A6E28(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 1u:
        uint64_t v9 = a2[1];
        *a1 = *a2;
        a1[1] = v9;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 2u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        uint64_t v11 = a2[2];
        uint64_t v12 = a2[3];
        a1[2] = v11;
        a1[3] = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 3u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 4u:
        *a1 = *a2;
        uint64_t v13 = *(int *)(sub_10002E768(&qword_100699430) + 48);
        char v14 = (char *)a1 + v13;
        NSString v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
        goto LABEL_11;
      case 6u:
        *(_WORD *)a1 = *(_WORD *)a2;
        a1[1] = a2[1];
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v17 = a2[4];
        a1[3] = a2[3];
        a1[4] = v17;
        swift_bridgeObjectRetain();
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000A7050(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
    case 3:
    case 6:
      goto LABEL_6;
    case 2:
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 4:
      uint64_t v3 = a1 + *(int *)(sub_10002E768(&qword_100699430) + 48);
      uint64_t v4 = type metadata accessor for UUID();
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
      uint64_t result = v5(v3, v4);
      break;
    default:
      return result;
  }
  return result;
}

void *sub_1000A7158(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 1u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 2u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[2];
      uint64_t v10 = a2[3];
      a1[2] = v9;
      a1[3] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 4u:
      *a1 = *a2;
      uint64_t v11 = *(int *)(sub_10002E768(&qword_100699430) + 48);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      goto LABEL_9;
    case 6u:
      *(_WORD *)a1 = *(_WORD *)a2;
      a1[1] = a2[1];
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v15 = a2[4];
      a1[3] = a2[3];
      a1[4] = v15;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_1000A733C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005171C((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 3u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 4u:
        *a1 = *a2;
        uint64_t v6 = *(int *)(sub_10002E768(&qword_100699430) + 48);
        uint64_t v7 = (char *)a1 + v6;
        uint64_t v8 = (char *)a2 + v6;
        uint64_t v9 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
        goto LABEL_10;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *((unsigned char *)a1 + 1) = *((unsigned char *)a2 + 1);
        uint64_t v10 = a2[1];
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        a1[1] = v10;
        a1[3] = a2[3];
        a1[4] = a2[4];
        swift_bridgeObjectRetain();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_1000A7568(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(sub_10002E768(&qword_100699430) + 48);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1000A7640(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10005171C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_10002E768(&qword_100699430) + 48);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000A7728()
{
  uint64_t v3 = &unk_100590338;
  uint64_t v4 = &unk_100590350;
  int v5 = &unk_100590368;
  uint64_t v6 = &unk_100590368;
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v7 = &v2;
    uint64_t v8 = &unk_100590380;
    uint64_t v9 = &unk_100590398;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t destroy for ASAnalyticsEvent.PushAnalytic()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ASAnalyticsEvent.PushAnalytic(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASAnalyticsEvent.PushAnalytic(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ASAnalyticsEvent.PushAnalytic(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASAnalyticsEvent.PushAnalytic(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 32);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASAnalyticsEvent.PushAnalytic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASAnalyticsEvent.PushAnalytic()
{
  return &type metadata for ASAnalyticsEvent.PushAnalytic;
}

unsigned char *storeEnumTagSinglePayload for ASAnalyticsEvent.PushRegistrationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A7A90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASAnalyticsEvent.PushRegistrationType()
{
  return &type metadata for ASAnalyticsEvent.PushRegistrationType;
}

unint64_t sub_1000A7ACC()
{
  unint64_t result = qword_10069A580;
  if (!qword_10069A580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A580);
  }
  return result;
}

NSString sub_1000A7B18(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x776F6C666B726F77;
  a1[2].n128_u64[1] = 0xEA00000000004449;
  return String._bridgeToObjectiveC()();
}

BOOL sub_1000A7B50()
{
  uint64_t v0 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo();
  sub_100045FF4();
  uint64_t v61 = v1;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v58 - v6;
  uint64_t v8 = type metadata accessor for GenerativeModelsAvailability.Availability();
  sub_100045FF4();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100046338();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for GenerativeModelsAvailability.Parameters();
  sub_100045FF4();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_100046338();
  uint64_t v21 = v20 - v19;
  type metadata accessor for GenerativeModelsAvailability();
  sub_100045FF4();
  uint64_t v62 = v23;
  uint64_t v63 = v22;
  __chkstk_darwin(v22);
  sub_100046338();
  GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)();
  static GenerativeModelsAvailability.current(parameters:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v21, v15);
  GenerativeModelsAvailability.availability.getter();
  int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v14, v8);
  if (v24 == enum case for GenerativeModelsAvailability.Availability.restricted(_:))
  {
    uint64_t v25 = sub_1000A8AFC();
    v26(v25);
LABEL_9:
    if (qword_1006978B0 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100031284(v38, (uint64_t)qword_1006AD1B8);
    int v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_1000A8B2C((void *)&_mh_execute_header, v41, v42, "GM state is available/restricted.");
      sub_100033704();
    }

    uint64_t v43 = sub_1000A8AE4();
    v44(v43);
    return 1;
  }
  if (v24 == enum case for GenerativeModelsAvailability.Availability.unavailable(_:))
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 96))(v14, v8);
    uint64_t v27 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v7, v14, v0);
    uint64_t v28 = GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter();
    BOOL v29 = sub_1000A8134(v28);
    swift_bridgeObjectRelease();
    if (qword_1006978B0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100031284(v30, (uint64_t)qword_1006AD1B8);
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v5, v7, v0);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    int v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      uint64_t v65 = v60;
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v58 = v34 + 4;
      sub_1000A8A8C(&qword_10069A588, (void (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo);
      int v59 = v33;
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v64 = sub_100032B48(v35, v36, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = sub_1000A8B14();
      ((void (*)(uint64_t))v27)(v37);
      *(_WORD *)(v34 + 12) = 1024;
      LODWORD(v64) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v59, "GM state is unavailable. Reason: %s. Resolution: %{BOOL}d", (uint8_t *)v34, 0x12u);
      swift_arrayDestroy();
      sub_100033704();
      sub_100033704();
    }
    else
    {

      uint64_t v45 = sub_1000A8B14();
      ((void (*)(uint64_t))v27)(v45);
    }
    ((void (*)(char *, uint64_t))v27)(v7, v0);
    uint64_t v46 = sub_1000A8AE4();
    v47(v46);
  }
  else
  {
    if (v24 == enum case for GenerativeModelsAvailability.Availability.available(_:)) {
      goto LABEL_9;
    }
    if (qword_1006978B0 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_100031284(v48, (uint64_t)qword_1006AD1B8);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_1000A8B2C((void *)&_mh_execute_header, v51, v52, "GM state is unknown.");
      sub_100033704();
    }

    uint64_t v53 = sub_1000A8AE4();
    v54(v53);
    uint64_t v55 = sub_1000A8AFC();
    v56(v55);
    return 0;
  }
  return v29;
}

BOOL sub_1000A8134(uint64_t a1)
{
  sub_10002E768(&qword_10069A590);
  type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
  sub_100045FF4();
  uint64_t v3 = v2;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100590450;
  uint64_t v5 = *(void (**)(void))(v3 + 104);
  sub_1000A8AD4();
  v5();
  sub_1000A8AD4();
  v5();
  sub_1000A8AD4();
  v5();
  sub_1000A8AD4();
  v5();
  sub_1000A8AD4();
  v5();
  sub_1000A8AD4();
  v5();
  sub_1000A8AD4();
  v5();
  uint64_t v6 = sub_1000A8740(v4);
  LOBYTE(a1) = sub_1000A82B8(v6, a1);
  swift_bridgeObjectRelease();
  return (a1 & 1) == 0;
}

uint64_t sub_1000A82B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v36 = a2 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a2 + 32);
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v11;
  int64_t v37 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v40 = a1 + 56;
  uint64_t v41 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v42 = v5 + 16;
  swift_bridgeObjectRetain_n();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v34 = v5;
  uint64_t v35 = a2;
  while (v14)
  {
    unint64_t v17 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v18 = v17 | (v16 << 6);
LABEL_25:
    uint64_t v22 = *(void *)(v5 + 72);
    uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v23(v10, *(void *)(a2 + 48) + v22 * v18, v4);
    if (*(void *)(a1 + 16))
    {
      unint64_t v38 = v14;
      int64_t v39 = v16;
      sub_1000A8A8C(&qword_10069A598, (void (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason);
      uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v25 = -1 << *(unsigned char *)(a1 + 32);
      uint64_t v26 = v10;
      unint64_t v27 = v24 & ~v25;
      if ((*(void *)(v40 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27))
      {
        uint64_t v28 = a1;
        uint64_t v29 = ~v25;
        while (1)
        {
          v23(v8, *(void *)(v28 + 48) + v27 * v22, v4);
          sub_1000A8A8C(&qword_10069A5A0, (void (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason);
          char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v31 = *v41;
          (*v41)(v8, v4);
          if (v30) {
            break;
          }
          unint64_t v27 = (v27 + 1) & v29;
          if (((*(void *)(v40 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
          {
            uint64_t v10 = v26;
            uint64_t result = v31(v26, v4);
            a1 = v28;
            uint64_t v5 = v34;
            a2 = v35;
            goto LABEL_33;
          }
        }
        v31(v26, v4);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v32 = 1;
        goto LABEL_35;
      }
      uint64_t result = (*v41)(v26, v4);
      uint64_t v10 = v26;
LABEL_33:
      unint64_t v14 = v38;
      int64_t v16 = v39;
    }
    else
    {
      uint64_t result = (*v41)(v10, v4);
    }
  }
  int64_t v19 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v19 >= v37) {
    goto LABEL_36;
  }
  unint64_t v20 = *(void *)(v36 + 8 * v19);
  ++v16;
  if (v20) {
    goto LABEL_24;
  }
  int64_t v16 = v19 + 1;
  if (v19 + 1 >= v37) {
    goto LABEL_36;
  }
  unint64_t v20 = *(void *)(v36 + 8 * v16);
  if (v20) {
    goto LABEL_24;
  }
  int64_t v16 = v19 + 2;
  if (v19 + 2 >= v37) {
    goto LABEL_36;
  }
  unint64_t v20 = *(void *)(v36 + 8 * v16);
  if (v20) {
    goto LABEL_24;
  }
  int64_t v16 = v19 + 3;
  if (v19 + 3 >= v37) {
    goto LABEL_36;
  }
  unint64_t v20 = *(void *)(v36 + 8 * v16);
  if (v20) {
    goto LABEL_24;
  }
  int64_t v16 = v19 + 4;
  if (v19 + 4 >= v37) {
    goto LABEL_36;
  }
  unint64_t v20 = *(void *)(v36 + 8 * v16);
  if (v20)
  {
LABEL_24:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
    goto LABEL_25;
  }
  int64_t v21 = v19 + 5;
  if (v21 >= v37)
  {
LABEL_36:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v32 = 0;
LABEL_35:
    swift_bridgeObjectRelease();
    return v32;
  }
  unint64_t v20 = *(void *)(v36 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v37) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v36 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_24;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000A8740(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
  uint64_t v31 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v35 = (char *)&v26 - v6;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  sub_10002E768(&qword_10069A5A8);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = *(void *)(a1 + 16);
  if (!v30)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  unint64_t v9 = 0;
  uint64_t v29 = a1 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  uint64_t v33 = v31 + 16;
  uint64_t v34 = result + 56;
  uint64_t v10 = (void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v27 = a1;
  uint64_t v28 = (uint64_t (**)(unint64_t, char *, uint64_t))(v31 + 32);
  while (v9 < *(void *)(a1 + 16))
  {
    uint64_t v11 = *(void *)(v31 + 72);
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
    v12(v35, v29 + v11 * v9, v2);
    sub_1000A8A8C(&qword_10069A598, (void (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason);
    uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v14 = -1 << v8[32];
    unint64_t v15 = v13 & ~v14;
    unint64_t v16 = v15 >> 6;
    uint64_t v17 = *(void *)(v34 + 8 * (v15 >> 6));
    uint64_t v18 = 1 << v15;
    if (((1 << v15) & v17) != 0)
    {
      unint64_t v32 = v9;
      uint64_t v19 = ~v14;
      while (1)
      {
        v12(v5, *((void *)v8 + 6) + v15 * v11, v2);
        sub_1000A8A8C(&qword_10069A5A0, (void (*)(uint64_t))&type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason);
        char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
        int64_t v21 = *v10;
        (*v10)(v5, v2);
        if (v20) {
          break;
        }
        unint64_t v15 = (v15 + 1) & v19;
        unint64_t v16 = v15 >> 6;
        uint64_t v17 = *(void *)(v34 + 8 * (v15 >> 6));
        uint64_t v18 = 1 << v15;
        if ((v17 & (1 << v15)) == 0)
        {
          a1 = v27;
          unint64_t v9 = v32;
          goto LABEL_10;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v21)(v35, v2);
      a1 = v27;
      unint64_t v9 = v32;
    }
    else
    {
LABEL_10:
      uint64_t v22 = v35;
      *(void *)(v34 + 8 * v16) = v18 | v17;
      uint64_t result = (*v28)(*((void *)v8 + 6) + v15 * v11, v22, v2);
      uint64_t v23 = *((void *)v8 + 2);
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_18;
      }
      *((void *)v8 + 2) = v25;
    }
    if (++v9 == v30) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000A8A8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A8AE4()
{
  return v0;
}

uint64_t sub_1000A8AFC()
{
  return v0;
}

uint64_t sub_1000A8B14()
{
  return v0;
}

void sub_1000A8B2C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GlobalLocationHelper.boundingRectAround(lat:lon:radiusMetres:)(asd::CoordRange *__return_ptr retstr, Swift::Double lat, Swift::Double lon, Swift::Double radiusMetres)
{
  if (radiusMetres >= 0.0 && lat >= -90.0 && lat <= 90.0 && lon >= -180.0 && lon <= 180.0)
  {
    double v8 = radiusMetres / (v4 * 6.28318531) * 360.0;
    double v9 = v8 + lat;
    double v10 = lat - v8;
    if (lat - v8 >= -90.0) {
      double v11 = lat - v8;
    }
    else {
      double v11 = 0.0;
    }
    if (v9 <= 90.0) {
      double v12 = v8 + lat;
    }
    else {
      double v12 = 0.0;
    }
    double v13 = 0.0;
    if (v9 > 90.0 || v10 < -90.0)
    {
      Swift::Bool v14 = 0;
      Swift::Bool v15 = 1;
      double v16 = 0.0;
LABEL_15:
      retstr->southLimit.value = v11;
      retstr->southLimit.is_nil = v10 < -90.0;
      retstr->northLimit.value = v12;
      retstr->northLimit.is_nil = v9 > 90.0;
      retstr->eastLimit.value = v13;
      retstr->eastLimit.is_nil = v15;
      retstr->westLimit.value = v16;
      retstr->westLimit.is_nil = v15;
      retstr->spansAntimeridian = v14;
      return;
    }
    double v18 = v8 + lat;
    double v17 = radiusMetres / (cos(lat * 3.14159265 / 180.0) * ((v4 + v4) * 3.14159265)) * 360.0;
    if (v17 >= 180.0)
    {
      Swift::Bool v14 = 0;
      Swift::Bool v15 = 1;
      double v16 = 0.0;
      double v9 = v18;
      double v13 = 0.0;
      goto LABEL_15;
    }
    double v13 = v17 + lon;
    double v16 = lon - v17;
    if (v13 <= 180.0)
    {
      double v9 = v18;
      if (v16 >= -180.0)
      {
        Swift::Bool v14 = 0;
        goto LABEL_26;
      }
    }
    else
    {
      double v13 = v13 + -360.0;
      if (v16 >= -180.0)
      {
        Swift::Bool v14 = 1;
        double v9 = v18;
        goto LABEL_26;
      }
      double v9 = v18;
    }
    double v16 = v16 + 360.0;
    Swift::Bool v14 = 1;
LABEL_26:
    Swift::Bool v15 = 0;
    goto LABEL_15;
  }
  sub_1000A8D5C();
  swift_allocError();
  swift_willThrow();
}

unint64_t sub_1000A8D5C()
{
  unint64_t result = qword_10069A5B0;
  if (!qword_10069A5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A5B0);
  }
  return result;
}

uint64_t CoordRange.southLimit.getter()
{
  return *(void *)v0;
}

uint64_t CoordRange.southLimit.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*CoordRange.southLimit.modify())()
{
  return ASBackgroundActivityCompletionStatus.rawValue.getter;
}

uint64_t CoordRange.northLimit.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t CoordRange.northLimit.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*CoordRange.northLimit.modify())()
{
  return ASBackgroundActivityCompletionStatus.rawValue.getter;
}

uint64_t CoordRange.eastLimit.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t CoordRange.eastLimit.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*CoordRange.eastLimit.modify())()
{
  return ASBackgroundActivityCompletionStatus.rawValue.getter;
}

uint64_t CoordRange.westLimit.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t CoordRange.westLimit.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 48) = result;
  *(unsigned char *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*CoordRange.westLimit.modify())()
{
  return ASBackgroundActivityCompletionStatus.rawValue.getter;
}

uint64_t CoordRange.spansAntimeridian.getter()
{
  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t CoordRange.spansAntimeridian.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 57) = result;
  return result;
}

uint64_t (*CoordRange.spansAntimeridian.modify())()
{
  return ASBackgroundActivityCompletionStatus.rawValue.getter;
}

void *GlobalLocationHelper.meanEarthRadiusMetres.unsafeMutableAddressor()
{
  return &static GlobalLocationHelper.meanEarthRadiusMetres;
}

double static GlobalLocationHelper.meanEarthRadiusMetres.getter()
{
  return 6371000.0;
}

__n128 initializeWithCopy for CoordRange(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CoordRange(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 58))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoordRange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 58) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 57) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for CoordRange()
{
}

void type metadata accessor for GlobalLocationHelper()
{
}

unsigned char *sub_1000A8FB4(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000A9050);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for GlobalLocationHelper.Error()
{
}

unint64_t sub_1000A9088()
{
  unint64_t result = qword_10069A5B8;
  if (!qword_10069A5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A5B8);
  }
  return result;
}

id sub_1000A90D8(int a1)
{
  uint64_t v1 = a1;
  id v2 = objc_allocWithZone((Class)NSError);
  return sub_10003ADFC(0xD000000000000010, 0x800000010056B370, v1, 0);
}

uint64_t ASBiomeMaterializedViewer.run(query:inputColNames:inputColTypes:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Configuration();
  __chkstk_darwin(v5 - 8);
  sub_100046338();
  uint64_t v6 = type metadata accessor for URL();
  sub_100045FF4();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100046338();
  uint64_t v12 = v11 - v10;
  type metadata accessor for SQLDatabase();
  sub_100045FF4();
  __chkstk_darwin(v13);
  sub_100046338();
  if (*(void *)(v15 + 16) == *(void *)(v14 + 16))
  {
    uint64_t v25 = v2;
    uint64_t v26 = v16;
    uint64_t v22 = a1;
    uint64_t v23 = v15;
    uint64_t v24 = v14;
    type metadata accessor for Library.Databases.ApplePay.Security.Features();
    sub_1000A9410();
    uint64_t result = static DatabaseResource.database(useCase:)();
    if (!object)
    {
      SQLDatabase.databasePath()();
      object = URL.path(percentEncoded:)(0)._object;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v6);
      Configuration.init()();
      type metadata accessor for DatabaseQueue();
      swift_allocObject();
      uint64_t v18 = DatabaseQueue.init(path:configuration:)();
      __chkstk_darwin(v18);
      *(&v22 - 6) = v22;
      *(&v22 - 5) = a2;
      uint64_t v19 = v24;
      *(&v22 - 4) = v23;
      *(&v22 - 3) = v19;
      *(&v22 - 2) = v25;
      sub_10002E768(&qword_10069A5C8);
      DatabaseQueue.read<A>(_:)();
      uint64_t v20 = sub_1000AA5A0();
      v21(v20);
      swift_release();
      return v28;
    }
  }
  else
  {
    sub_1000A90D8(137101);
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_1000A9410()
{
  unint64_t result = qword_10069A5C0;
  if (!qword_10069A5C0)
  {
    type metadata accessor for Library.Databases.ApplePay.Security.Features();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A5C0);
  }
  return result;
}

uint64_t sub_1000A9460@<X0>(uint64_t a1@<X3>, uint64_t a2@<X4>, void *a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v100 = a1;
  uint64_t v101 = a2;
  unint64_t v6 = type metadata accessor for StatementArguments();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Row();
  uint64_t v111 = 0;
  long long v109 = 0u;
  long long v110 = 0u;
  StatementArguments.init()();
  uint64_t v10 = static Row.fetchCursor(_:sql:arguments:adapter:)();
  if (v3)
  {
    (*(void (**)(char *, unint64_t))(v7 + 8))(v9, v6);
    return sub_1000AA360((uint64_t)&v109);
  }
  else
  {
    uint64_t v12 = v10;
    uint64_t v99 = a3;
    (*(void (**)(char *, unint64_t))(v7 + 8))(v9, v6);
    sub_1000AA360((uint64_t)&v109);
    uint64_t v13 = sub_1000AA0C8();
    uint64_t v98 = v12;
    uint64_t v102 = _swiftEmptyArrayStorage;
    uint64_t v14 = v100;
    uint64_t v15 = v101;
    uint64_t v104 = v101 + 32;
    uint64_t v97 = (uint64_t *)(v100 + 40);
    uint64_t v16 = v99;
    while (1)
    {
      uint64_t v107 = v13;
      if (!v13) {
        break;
      }
      unint64_t v103 = v4;
      uint64_t v106 = *(void *)(v14 + 16);
      if (v106)
      {
        unint64_t v17 = 0;
        uint64_t v105 = *(void *)(v15 + 16);
        uint64_t v18 = v97;
        uint64_t v19 = _swiftEmptyDictionarySingleton;
        uint64_t v20 = v107;
        while (v105 != v17)
        {
          uint64_t v21 = *(v18 - 1);
          uint64_t v22 = *v18;
          unint64_t v23 = v17 >> 31;
          switch(*(void *)(v104 + 8 * v17))
          {
            case 1:
              unint64_t v6 = (unint64_t)&type metadata for Double;
              *((void *)&v110 + 1) = &type metadata for Double;
              swift_bridgeObjectRetain();
              Row._checkIndex(_:file:line:)();
              uint64_t v24 = Row.sqliteStatement.getter();
              if (v24)
              {
                if (v23) {
                  goto LABEL_79;
                }
                v25._rawValue = (void *)v24;
                uint64_t v26 = (sqlite3_stmt *)__chkstk_darwin(v24);
                unint64_t v6 = (unint64_t)(&v96 - 4);
                *(&v96 - 2) = v20;
                *(&v96 - 1) = v17;
                sqlite3_int64 v27 = sqlite3_column_type(v26, v17);
                if (v27 == 5) {
                  goto LABEL_88;
                }
                *(void *)&v108[0] = Double.init(sqliteStatement:index:)(v25, v17);
              }
              else
              {
                unint64_t v64 = v103;
                Row.fastDecode<A>(_:atUncheckedIndex:)();
                unint64_t v103 = v64;
                if (v64) {
                  goto LABEL_93;
                }
              }
              *(void *)&long long v109 = *(void *)&v108[0];
              sub_100057638(&v109, v108);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v112 = v19;
              unint64_t v66 = sub_100055F1C(v21, v22);
              uint64_t v68 = v19[2];
              BOOL v69 = (v67 & 1) == 0;
              Swift::Int v70 = v68 + v69;
              if (__OFADD__(v68, v69)) {
                goto LABEL_77;
              }
              unint64_t v6 = v66;
              char v71 = v67;
              sub_10002E768(&qword_1006989C0);
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v70))
              {
                unint64_t v72 = sub_100055F1C(v21, v22);
                if ((v71 & 1) != (v73 & 1)) {
                  goto LABEL_87;
                }
                unint64_t v6 = v72;
              }
              uint64_t v19 = v112;
              if (v71) {
                goto LABEL_59;
              }
              v112[(v6 >> 6) + 8] |= 1 << v6;
              unint64_t v74 = (uint64_t *)(v19[6] + 16 * v6);
              *unint64_t v74 = v21;
              v74[1] = v22;
              sub_100057638(v108, (_OWORD *)(v19[7] + 32 * v6));
              uint64_t v75 = v19[2];
              BOOL v50 = __OFADD__(v75, 1);
              uint64_t v51 = v75 + 1;
              if (v50) {
                goto LABEL_86;
              }
              goto LABEL_61;
            case 2:
              unint64_t v6 = (unint64_t)&type metadata for Int32;
              *((void *)&v110 + 1) = &type metadata for Int32;
              swift_bridgeObjectRetain();
              Row._checkIndex(_:file:line:)();
              uint64_t v35 = Row.sqliteStatement.getter();
              if (v35)
              {
                if (v23) {
                  goto LABEL_81;
                }
                uint64_t v36 = (sqlite3_stmt *)v35;
                int64_t v37 = (sqlite3_stmt *)__chkstk_darwin(v35);
                unint64_t v6 = (unint64_t)(&v96 - 4);
                *(&v96 - 2) = v20;
                *(&v96 - 1) = v17;
                sqlite3_int64 v27 = sqlite3_column_type(v37, v17);
                if (v27 == 5) {
                  goto LABEL_88;
                }
                sqlite3_int64 v27 = sqlite3_column_int64(v36, v17);
                if (v27 != (int)v27) {
                  goto LABEL_88;
                }
                LODWORD(v108[0]) = v27;
              }
              else
              {
                unint64_t v76 = v103;
                Row.fastDecode<A>(_:atUncheckedIndex:)();
                unint64_t v103 = v76;
                if (v76) {
                  goto LABEL_93;
                }
              }
              LODWORD(v109) = v108[0];
              sub_100057638(&v109, v108);
              char v77 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v112 = v19;
              unint64_t v78 = sub_100055F1C(v21, v22);
              uint64_t v80 = v19[2];
              BOOL v81 = (v79 & 1) == 0;
              Swift::Int v82 = v80 + v81;
              if (__OFADD__(v80, v81)) {
                goto LABEL_78;
              }
              unint64_t v6 = v78;
              char v83 = v79;
              sub_10002E768(&qword_1006989C0);
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v77, v82))
              {
                unint64_t v84 = sub_100055F1C(v21, v22);
                if ((v83 & 1) != (v85 & 1)) {
                  goto LABEL_87;
                }
                unint64_t v6 = v84;
              }
              uint64_t v19 = v112;
              if (v83) {
                goto LABEL_59;
              }
              v112[(v6 >> 6) + 8] |= 1 << v6;
              uint64_t v87 = (uint64_t *)(v19[6] + 16 * v6);
              *uint64_t v87 = v21;
              v87[1] = v22;
              sub_100057638(v108, (_OWORD *)(v19[7] + 32 * v6));
              uint64_t v88 = v19[2];
              BOOL v50 = __OFADD__(v88, 1);
              uint64_t v51 = v88 + 1;
              if (v50) {
                goto LABEL_84;
              }
              goto LABEL_61;
            case 3:
              unint64_t v6 = (unint64_t)&type metadata for Int64;
              *((void *)&v110 + 1) = &type metadata for Int64;
              swift_bridgeObjectRetain();
              Row._checkIndex(_:file:line:)();
              uint64_t v28 = Row.sqliteStatement.getter();
              if (v28)
              {
                if (v23) {
                  goto LABEL_82;
                }
                v29._rawValue = (void *)v28;
                uint64_t v30 = (sqlite3_stmt *)__chkstk_darwin(v28);
                unint64_t v6 = (unint64_t)(&v96 - 4);
                *(&v96 - 2) = v20;
                *(&v96 - 1) = v17;
                sqlite3_int64 v27 = sqlite3_column_type(v30, v17);
                if (v27 == 5) {
                  goto LABEL_88;
                }
                *(void *)&v108[0] = Int64.init(sqliteStatement:index:)(v29, v17);
              }
              else
              {
                unint64_t v38 = v103;
                Row.fastDecode<A>(_:atUncheckedIndex:)();
                unint64_t v103 = v38;
                if (v38) {
                  goto LABEL_93;
                }
              }
              *(void *)&long long v109 = *(void *)&v108[0];
              sub_100057638(&v109, v108);
              char v39 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v112 = v19;
              unint64_t v40 = sub_100055F1C(v21, v22);
              uint64_t v42 = v19[2];
              BOOL v43 = (v41 & 1) == 0;
              Swift::Int v44 = v42 + v43;
              if (__OFADD__(v42, v43)) {
                goto LABEL_75;
              }
              unint64_t v6 = v40;
              char v45 = v41;
              sub_10002E768(&qword_1006989C0);
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v39, v44))
              {
                unint64_t v46 = sub_100055F1C(v21, v22);
                if ((v45 & 1) != (v47 & 1)) {
                  goto LABEL_87;
                }
                unint64_t v6 = v46;
              }
              uint64_t v19 = v112;
              if (v45) {
                goto LABEL_59;
              }
              v112[(v6 >> 6) + 8] |= 1 << v6;
              uint64_t v48 = (uint64_t *)(v19[6] + 16 * v6);
              *uint64_t v48 = v21;
              v48[1] = v22;
              sub_100057638(v108, (_OWORD *)(v19[7] + 32 * v6));
              uint64_t v49 = v19[2];
              BOOL v50 = __OFADD__(v49, 1);
              uint64_t v51 = v49 + 1;
              if (v50) {
                goto LABEL_83;
              }
              goto LABEL_61;
            case 4:
              unint64_t v6 = (unint64_t)&type metadata for String;
              *((void *)&v110 + 1) = &type metadata for String;
              swift_bridgeObjectRetain();
              Row._checkIndex(_:file:line:)();
              uint64_t v31 = Row.sqliteStatement.getter();
              if (v31)
              {
                if (v23) {
                  goto LABEL_80;
                }
                v32._rawValue = (void *)v31;
                uint64_t v33 = (sqlite3_stmt *)__chkstk_darwin(v31);
                unint64_t v6 = (unint64_t)(&v96 - 4);
                *(&v96 - 2) = v20;
                *(&v96 - 1) = v17;
                uint64_t v34 = sqlite3_column_type(v33, v17);
                if (v34 == 5)
                {
                  __chkstk_darwin(v34);
                  *(&v96 - 2) = (uint64_t)sub_1000AA4BC;
                  *(&v96 - 1) = v6;
                  goto LABEL_92;
                }
                v108[0] = String.init(sqliteStatement:index:)(v32, v17);
              }
              else
              {
                unint64_t v52 = v103;
                Row.fastDecode<A>(_:atUncheckedIndex:)();
                unint64_t v103 = v52;
                if (v52) {
                  goto LABEL_93;
                }
              }
              long long v109 = v108[0];
              sub_100057638(&v109, v108);
              char v53 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v112 = v19;
              unint64_t v54 = sub_100055F1C(v21, v22);
              uint64_t v56 = v19[2];
              BOOL v57 = (v55 & 1) == 0;
              Swift::Int v58 = v56 + v57;
              if (__OFADD__(v56, v57)) {
                goto LABEL_76;
              }
              unint64_t v6 = v54;
              char v59 = v55;
              sub_10002E768(&qword_1006989C0);
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v53, v58))
              {
                unint64_t v60 = sub_100055F1C(v21, v22);
                if ((v59 & 1) != (v61 & 1)) {
                  goto LABEL_87;
                }
                unint64_t v6 = v60;
              }
              uint64_t v19 = v112;
              if (v59)
              {
LABEL_59:
                uint64_t v86 = (_OWORD *)(v19[7] + 32 * v6);
                sub_10002EB9C((uint64_t)v86);
                sub_100057638(v108, v86);
              }
              else
              {
                v112[(v6 >> 6) + 8] |= 1 << v6;
                uint64_t v62 = (uint64_t *)(v19[6] + 16 * v6);
                *uint64_t v62 = v21;
                v62[1] = v22;
                sub_100057638(v108, (_OWORD *)(v19[7] + 32 * v6));
                uint64_t v63 = v19[2];
                BOOL v50 = __OFADD__(v63, 1);
                uint64_t v51 = v63 + 1;
                if (v50) {
                  goto LABEL_85;
                }
LABEL_61:
                void v19[2] = v51;
                swift_bridgeObjectRetain();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v20 = v107;
              ++v17;
              v18 += 2;
              if (v106 == v17) {
                goto LABEL_65;
              }
              break;
            default:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000A90D8(137102);
              swift_willThrow();
              swift_release();
              return swift_release();
          }
        }
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        sqlite3_int64 v27 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_88:
        __chkstk_darwin(v27);
        *(&v96 - 2) = (uint64_t)sub_1000AA598;
        *(&v96 - 1) = v6;
LABEL_92:
        unint64_t v95 = v103;
        static DatabaseValueConvertible<>._valueMismatch(fromStatement:atUncheckedIndex:context:)();
        unint64_t v103 = v95;
LABEL_93:
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x1000AA094);
      }
      uint64_t v19 = _swiftEmptyDictionarySingleton;
LABEL_65:
      uint64_t v89 = v102;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10003C184(0, v89[2] + 1, 1, (uint64_t)v89);
        uint64_t v89 = v93;
      }
      unint64_t v6 = v103;
      uint64_t v16 = v99;
      uint64_t v14 = v100;
      uint64_t v15 = v101;
      unint64_t v91 = v89[2];
      unint64_t v90 = v89[3];
      uint64_t v102 = v89;
      if (v91 >= v90 >> 1)
      {
        sub_10003C184(v90 > 1, v91 + 1, 1, (uint64_t)v102);
        uint64_t v102 = v94;
      }
      uint64_t v92 = v102;
      v102[2] = v91 + 1;
      v92[v91 + 4] = v19;
      swift_release();
      uint64_t v13 = sub_1000AA0C8();
      unint64_t v4 = v6;
      if (v6)
      {
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    uint64_t result = swift_release();
    *uint64_t v16 = v102;
  }
  return result;
}

uint64_t sub_1000AA0A4@<X0>(void *a1@<X8>)
{
  return sub_1000A9460(*(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_1000AA0C8()
{
  if (dispatch thunk of _DatabaseCursor._isDone.getter()) {
    return 0;
  }
  dispatch thunk of DatabaseCursor.statement.getter();
  type metadata accessor for Row();
  swift_retain();
  Statement.step<A>(_:)();
  swift_release();
  uint64_t result = swift_release();
  if (!v0)
  {
    uint64_t result = v2;
    if (!v2)
    {
      dispatch thunk of _DatabaseCursor._isDone.setter();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ASBiomeMaterializedViewer()
{
  return self;
}

uint64_t sub_1000AA360(uint64_t a1)
{
  uint64_t v2 = sub_10002E768(&qword_10069A5F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AA3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10002E768(&qword_10069A600);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v5 = a2;
  uint64_t v6 = enum case for RowKey.columnIndex(_:);
  uint64_t v7 = type metadata accessor for RowKey();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(v5, v6, v7);
  sub_10003349C((uint64_t)v5, 0, 1, v7);
  swift_retain();
  return RowDecodingContext.init(row:key:)();
}

uint64_t sub_1000AA4BC()
{
  return sub_1000AA3C0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000AA4C4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000AA4EC()
{
  uint64_t result = dispatch thunk of _DatabaseCursor._element(sqliteStatement:)();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_1000AA550@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000AA4EC();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000AA57C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000AA550(a1);
}

uint64_t sub_1000AA5A0()
{
  return v0;
}

ValueMetadata *type metadata accessor for RavioliVerifier()
{
  return &type metadata for RavioliVerifier;
}

uint64_t sub_1000AA5CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684366707 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x65646F4368747561 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_1000AA70C(char a1)
{
  if (!a1) {
    return 1684366707;
  }
  if (a1 == 1) {
    return 0x65646F4368747561;
  }
  return 0x6E6F6973726576;
}

uint64_t sub_1000AA75C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10002E768(&qword_10069A640);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EAE0(a1, a1[3]);
  sub_1000ABC64();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10002EB9C((uint64_t)a1);
  }
  char v24 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v21 = v9;
  char v23 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v19 = v12;
  char v22 = 2;
  swift_bridgeObjectRetain();
  uint64_t v20 = v14;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10002EB9C((uint64_t)a1);
  uint64_t v16 = v20;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v21;
  a2[1] = v11;
  a2[2] = v19;
  a2[3] = v16;
  a2[4] = v15;
  return result;
}

uint64_t sub_1000AA9E0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1635017060 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7469726765746E69 && a2 == 0xEE006B6365684379)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000AAAE4(char a1)
{
  if (a1) {
    return 0x7469726765746E69;
  }
  else {
    return 1635017060;
  }
}

uint64_t sub_1000AAB20@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10002E768(&qword_10069A610);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002EAE0(a1, a1[3]);
  sub_1000AB7F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10002EB9C((uint64_t)a1);
  }
  LOBYTE(v18) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v23 = 1;
  sub_1000AB840();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v13 = v18;
  uint64_t v12 = v19;
  uint64_t v15 = v20;
  uint64_t v14 = v21;
  uint64_t v17 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10002EB9C((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v13;
  a2[3] = v12;
  a2[4] = v15;
  a2[5] = v14;
  a2[6] = v17;
  return result;
}

uint64_t sub_1000AAD68()
{
  return sub_1000AA70C(*v0);
}

uint64_t sub_1000AAD70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000AA5CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000AAD98(uint64_t a1)
{
  unint64_t v2 = sub_1000ABC64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AADD4(uint64_t a1)
{
  unint64_t v2 = sub_1000ABC64();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000AAE10@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000AA75C(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1000AAE58()
{
  return sub_1000AAAE4(*v0);
}

uint64_t sub_1000AAE60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000AA9E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000AAE88(uint64_t a1)
{
  unint64_t v2 = sub_1000AB7F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000AAEC4(uint64_t a1)
{
  unint64_t v2 = sub_1000AB7F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000AAF00@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000AAB20(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1000AAF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  sub_10002FBFC(a5, a6);
  sub_1000AB2F0(a5, a6);
  sub_10002EC6C(a5, a6);
  uint64_t v8 = sub_1000ABEA4();
  sub_10002FBFC(v8, v9);
  uint64_t v10 = sub_1000ABEA4();
  sub_1000AB2F0(v10, v11);
  uint64_t v12 = sub_1000ABEA4();
  sub_10002EC6C(v12, v13);
  uint64_t v14 = sub_1000ABEB0();
  sub_10002FBFC(v14, v15);
  uint64_t v16 = sub_1000ABEB0();
  uint64_t v18 = sub_1000AB2F0(v16, v17);
  uint64_t v19 = sub_1000ABEB0();
  sub_10002EC6C(v19, v20);
  sub_1000ABEB0();
  uint64_t v21 = Data.count.getter();
  uint64_t v22 = (unsigned char *)swift_slowAlloc();
  unint64_t v23 = Data.count.getter();
  if ((v23 & 0x8000000000000000) != 0
    || HIDWORD(v23)
    || HIDWORD(v18[2])
    || (sub_1000ABEA4(), unint64_t v24 = Data.count.getter(), (v24 & 0x8000000000000000) != 0)
    || HIDWORD(v24))
  {
    sub_10003F064();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unsigned int v29 = noErr.getter();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000AB2DC();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000AB2DC();
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000AB2DC();
    }
    sub_1003581FC();
    uint64_t v25 = v29;
    if (v29 == noErr.getter())
    {
      if (v21)
      {
        if (*v22)
        {
          uint64_t v26 = 1;
          if (v21 != 1)
          {
            while (v22[v26])
            {
              if (v21 == ++v26)
              {
                uint64_t v26 = v21;
                goto LABEL_23;
              }
            }
            if (v26 < 0) {
              __break(1u);
            }
          }
        }
        else
        {
          uint64_t v26 = 0;
        }
      }
      else
      {
        uint64_t v26 = 0;
      }
LABEL_23:
      uint64_t v25 = sub_10002FA44(0, v26, (uint64_t)v22, v21);
      swift_slowDealloc();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000772C8();
      swift_allocError();
      *sqlite3_int64 v27 = 3;
      swift_willThrow();
      swift_slowDealloc();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v25;
  }
  return result;
}

uint64_t sub_1000AB2A0(uint64_t a1)
{
  return sub_10003B0D4(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1000AB2B4(uint64_t a1)
{
  return sub_10003B1E8(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1000AB2C8(uint64_t a1)
{
  return sub_10003BD5C(0, *(void *)(a1 + 16), 0, a1);
}

void sub_1000AB2DC()
{
}

void *sub_1000AB2F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          sub_10002E768(&qword_100697E60);
          uint64_t v8 = (void *)swift_allocObject();
          size_t v12 = j__malloc_size(v8);
          v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        sub_10002FBFC(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        sub_10002EC6C(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x1000AB49CLL);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

unsigned char *storeEnumTagSinglePayload for RavioliVerifier.CCVerificationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AB578);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RavioliVerifier.CCVerificationError()
{
  return &type metadata for RavioliVerifier.CCVerificationError;
}

void *initializeWithCopy for RavioliVerifier.ResponseDTO(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RavioliVerifier.ResponseDTO(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

void *assignWithTake for RavioliVerifier.ResponseDTO(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for RavioliVerifier.ResponseDTO(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RavioliVerifier.ResponseDTO(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RavioliVerifier.ResponseDTO()
{
  return &type metadata for RavioliVerifier.ResponseDTO;
}

unint64_t sub_1000AB7A8()
{
  unint64_t result = qword_10069A608;
  if (!qword_10069A608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A608);
  }
  return result;
}

unint64_t sub_1000AB7F4()
{
  unint64_t result = qword_10069A618;
  if (!qword_10069A618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A618);
  }
  return result;
}

unint64_t sub_1000AB840()
{
  unint64_t result = qword_10069A620;
  if (!qword_10069A620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A620);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RavioliVerifier.ResponseDTO.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AB958);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RavioliVerifier.ResponseDTO.CodingKeys()
{
  return &type metadata for RavioliVerifier.ResponseDTO.CodingKeys;
}

uint64_t destroy for RavioliVerifier.IntegrityCheckJSON()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RavioliVerifier.IntegrityCheckJSON(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RavioliVerifier.IntegrityCheckJSON(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

void *assignWithTake for RavioliVerifier.IntegrityCheckJSON(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for RavioliVerifier.IntegrityCheckJSON(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RavioliVerifier.IntegrityCheckJSON(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RavioliVerifier.IntegrityCheckJSON()
{
  return &type metadata for RavioliVerifier.IntegrityCheckJSON;
}

unint64_t sub_1000ABB78()
{
  unint64_t result = qword_10069A628;
  if (!qword_10069A628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A628);
  }
  return result;
}

unint64_t sub_1000ABBC8()
{
  unint64_t result = qword_10069A630;
  if (!qword_10069A630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A630);
  }
  return result;
}

unint64_t sub_1000ABC18()
{
  unint64_t result = qword_10069A638;
  if (!qword_10069A638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A638);
  }
  return result;
}

unint64_t sub_1000ABC64()
{
  unint64_t result = qword_10069A648;
  if (!qword_10069A648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A648);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RavioliVerifier.IntegrityCheckJSON.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000ABD7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RavioliVerifier.IntegrityCheckJSON.CodingKeys()
{
  return &type metadata for RavioliVerifier.IntegrityCheckJSON.CodingKeys;
}

unint64_t sub_1000ABDB8()
{
  unint64_t result = qword_10069A650;
  if (!qword_10069A650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A650);
  }
  return result;
}

unint64_t sub_1000ABE08()
{
  unint64_t result = qword_10069A658;
  if (!qword_10069A658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A658);
  }
  return result;
}

unint64_t sub_1000ABE58()
{
  unint64_t result = qword_10069A660;
  if (!qword_10069A660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10069A660);
  }
  return result;
}

uint64_t sub_1000ABEA4()
{
  return v0;
}

uint64_t sub_1000ABEB0()
{
  return v0;
}

uint64_t sub_1000ABEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  sub_1000360A8((uint64_t)&v3, *(void *)(*(void *)(a1 + 64) + 40), &qword_10069A828);
  return swift_continuation_throwingResume();
}

uint64_t sub_1000ABF20(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

uint64_t sub_1000ABF40(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 40);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_DWORD *)(v3 + 32) = v2;
  return swift_continuation_throwingResume();
}

void *sub_1000ABF6C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
        uint64_t v8 = v7;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_20;
        }
        id v10 = [v7 userID];
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        if (v11 == a2 && v13 == a3)
        {

          swift_bridgeObjectRelease();
        }
        else
        {
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v15)
          {
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        ++v6;
        if (v9 == v5) {
          goto LABEL_22;
        }
      }
      if (v6 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        goto LABEL_22;
      }
    }
    id v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_7;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

Class sub_1000AC138(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_1000362B0(0, &qword_1006989B0);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_1000AC1D4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1000AC2C8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100031220(v0, qword_10069A668);
  sub_100031284(v0, (uint64_t)qword_10069A668);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000AC34C()
{
  sub_1000950DC(v1);
  sub_1000360A8((uint64_t)v1, (uint64_t)__src, &qword_100697F08);
  if (__src[5] == 1) {
    return 0;
  }
  memcpy(__dst, __src, 0x60uLL);
  sub_100036138(v1);
  sub_1000360A8((uint64_t)&__dst[73], (uint64_t)&v4, &qword_100699F80);
  sub_1000360A8((uint64_t)&v4, (uint64_t)&v5, &qword_100699F80);
  if (v5 == 2) {
    return 0;
  }
  else {
    return v5 & 1;
  }
}

uint64_t sub_1000AC400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return sub_100051A38((uint64_t)sub_1000AC41C, a4);
}

uint64_t sub_1000AC41C()
{
  sub_10003F0F4();
  sub_1000AC474();
  sub_10003F1AC();
  return v0();
}

uint64_t sub_1000AC474()
{
  id v1 = [self defaultCenter];
  if (qword_100697950 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1006AD288;
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  void v7[4] = sub_1000AEB7C;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  long long v7[2] = sub_1000AC1D4;
  void v7[3] = &unk_100662F28;
  uint64_t v4 = _Block_copy(v7);
  swift_release();
  id v5 = [v1 addObserverForName:v2 object:0 queue:0 usingBlock:v4];
  _Block_release(v4);

  *(void *)(v0 + 200) = v5;
  return swift_unknownObjectRelease();
}

uint64_t sub_1000AC5D0()
{
  uint64_t v0 = sub_10002E768(&qword_100697E68);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = type metadata accessor for TaskPriority();
    sub_10003349C((uint64_t)v2, 1, 1, v5);
    unint64_t v6 = (void *)swift_allocObject();
    _OWORD v6[2] = 0;
    v6[3] = 0;
    void v6[4] = v4;
    sub_10004964C((uint64_t)v2, (uint64_t)&unk_10069A818, (uint64_t)v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000AC6C4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10003F060;
  return sub_1000AC810();
}

uint64_t sub_1000AC754()
{
  id v0 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v1 = [v0 aida_accountForPrimaryiCloudAccount];
  if (!v1)
  {

    return 0;
  }
  uint64_t v2 = v1;
  id v3 = [v1 aida_dsid];
  if (!v3)
  {

    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t sub_1000AC810()
{
  *(void *)(v1 + 16) = v0;
  return sub_100051A38((uint64_t)sub_1000AC82C, v0);
}

uint64_t sub_1000AC82C()
{
  sub_10003F444();
  if (*(unsigned char *)(v0[2] + 208))
  {
    sub_10003F1AC();
    return v1();
  }
  else
  {
    sub_1000AC754();
    uint64_t v4 = v3;
    v0[3] = v3;
    if ((sub_1000AC34C() & 1) != 0 || !v4)
    {
      unint64_t v6 = (void *)swift_task_alloc();
      v0[5] = v6;
      void *v6 = v0;
      v6[1] = sub_1000ACA60;
      sub_1000AED00();
      return sub_1000ADF2C();
    }
    else
    {
      uint64_t v5 = (void *)swift_task_alloc();
      v0[4] = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_1000AC984;
      sub_1000AED00();
      return sub_1000ACD74();
    }
  }
}

uint64_t sub_1000AC984()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *v0;
  sub_10003F0B8();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_10003F1AC();
  return v3();
}

uint64_t sub_1000ACA60()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *v0;
  sub_10003F0B8();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  return _swift_task_switch(sub_1000ACB40, v2, 0);
}

uint64_t sub_1000ACB40()
{
  sub_10003F444();
  if (*(void *)(v0 + 24))
  {
    swift_bridgeObjectRelease();
    if (qword_100697980 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    id v2 = (id)sub_100078994(v1, (uint64_t)qword_10069A668);
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (sub_100051E9C(v3))
    {
      uint64_t v4 = (_WORD *)sub_100051AA0();
      sub_100078C08(v4);
      sub_100051C8C((void *)&_mh_execute_header, v5, v6, "Push disabled - not registering with PDS");
      sub_100033704();
    }
  }
  else
  {
    if (qword_100697980 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = (void *)sub_100078994(v7, (uint64_t)qword_10069A668);
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (sub_100051E9C(v9))
    {
      id v10 = (_WORD *)sub_100051AA0();
      sub_100078C08(v10);
      sub_100051C8C((void *)&_mh_execute_header, v11, v12, "Couldn't find current user - not registering with PDS and removing Ravioli if present");
      sub_100033704();
    }

    id v2 = [objc_allocWithZone((Class)Vr3QrKl7Yn9l4CTz) init];
    [v2 hiMi2bftgysHNCmu];
  }

  sub_10003F1AC();
  return v13();
}

uint64_t sub_1000ACCC8()
{
  *(void *)(v1 + 16) = v0;
  return sub_100051A38((uint64_t)sub_1000ACCE4, v0);
}

uint64_t sub_1000ACCE4()
{
  sub_10003F0F4();
  *(unsigned char *)(*(void *)(v0 + 16) + 208) = 0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000AEC74;
  sub_1000AED00();
  return sub_1000AC810();
}

uint64_t sub_1000ACD74()
{
  sub_10003F444();
  v1[25] = v2;
  v1[26] = v0;
  v1[24] = v3;
  v1[27] = type metadata accessor for ASAnalyticsEvent();
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  v1[30] = swift_task_alloc();
  return _swift_task_switch(sub_1000ACE58, v0, 0);
}

uint64_t sub_1000ACE58()
{
  sub_10003F444();
  uint64_t v1 = *(void **)(v0[26] + 112);
  v0[31] = v1;
  if (v1)
  {
    v0[2] = v0;
    v0[7] = v0 + 20;
    v0[3] = sub_1000AD0D4;
    uint64_t v2 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1000ADDE0;
    v0[13] = &unk_100662E98;
    v0[14] = v2;
    [v1 activeUsersWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2, v3, v4, v5, v6, v7, v8, v9);
  }
  else
  {
    if (qword_100697980 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    uint64_t v11 = (void *)sub_100078994(v10, (uint64_t)qword_10069A668);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (sub_100051E9C(v12))
    {
      uint64_t v13 = (_WORD *)sub_100051AA0();
      sub_100078C08(v13);
      sub_100051C8C((void *)&_mh_execute_header, v14, v15, "PushManagerPDS has nil PDSRegistrar - Can't register dsid");
      sub_100033704();
    }
    uint64_t v16 = v0[26];

    sub_10002EAE0((void *)(v16 + 144), *(void *)(v16 + 168));
    if (*(unsigned char *)(v16 + 136))
    {
      if (*(unsigned char *)(v16 + 136) == 1) {
        sub_1000AEC94();
      }
      else {
        sub_1000AEC80();
      }
    }
    else
    {
      sub_1000AECC4();
    }
    uint64_t v18 = (unsigned char *)v0[30];
    *uint64_t v18 = 1;
    sub_1000AECE0(v17);
    sub_1000AE9B8((uint64_t)v18);
    sub_10005171C((uint64_t)v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_1000AD0D4()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v2 + 256) = v1;
  uint64_t v3 = *(void *)(v0 + 208);
  if (v1) {
    uint64_t v4 = sub_1000AD850;
  }
  else {
    uint64_t v4 = sub_1000AD1F8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000AD1F8()
{
  uint64_t v49 = v0;
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  unint64_t v3 = v0[20];
  swift_bridgeObjectRetain();
  unint64_t v4 = (unint64_t)sub_1000ABF6C(v3, v2, v1);
  unint64_t v5 = v4;
  if (!(v4 >> 62))
  {
    uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
LABEL_38:
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v7 = 0;
  while (1)
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v5 + 8 * v7 + 32);
    }
    uint64_t v9 = v8;
    uint64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v11 = (void *)v0[31];
    v0[23] = 0;
    unsigned int v12 = [v11 removeAllRegistrationsFromUser:v9 error:v0 + 23];
    uint64_t v13 = (void *)v0[23];
    if (!v12) {
      break;
    }
    id v14 = v13;

    ++v7;
    if (v10 == v6) {
      goto LABEL_10;
    }
  }
  id v15 = v13;
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_100697980 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = sub_100078994(v16, (uint64_t)qword_10069A668);
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)sub_100051AA0();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error getting or removing registrations for existing users.", v19, 2u);
    sub_100033704();
  }
  uint64_t v20 = v0[26];

  sub_10002EAE0((void *)(v20 + 144), *(void *)(v20 + 168));
  if (*(unsigned char *)(v20 + 136))
  {
    if (*(unsigned char *)(v20 + 136) == 1) {
      sub_1000AEC94();
    }
    else {
      sub_1000AEC80();
    }
  }
  else
  {
    sub_1000AECC4();
  }
  uint64_t v23 = v0[29];
  *(unsigned char *)uint64_t v23 = 1;
  *(void *)(v23 + 8) = 4;
  *(void *)(v23 + 16) = v22;
  *(void *)(v23 + 24) = v21;
  swift_storeEnumTagMultiPayload();
  sub_1000AE9B8(v23);
  swift_errorRelease();
  sub_10005171C(v23);
LABEL_21:
  unint64_t v24 = (void *)v0[31];
  uint64_t v25 = v0[26];
  sub_1000362B0(0, &qword_10069A800);
  swift_bridgeObjectRetain();
  id v26 = sub_1000ADE4C();
  sub_1000362B0(0, &qword_10069A808);
  uint64_t v28 = *(void *)(v25 + 120);
  unint64_t v27 = *(void *)(v25 + 128);
  int v29 = *(unsigned __int8 *)(v25 + 136);
  swift_bridgeObjectRetain();
  id v30 = sub_1000ADEB0(v28, v27, v29);
  v0[18] = 0;
  unsigned int v31 = [v24 ensureRegistrationPresent:v30 forUser:v26 error:v0 + 18];
  Swift::OpaquePointer v32 = (void *)v0[18];
  if (v31)
  {
    uint64_t v33 = (void *)v0[31];
    id v34 = v32;
  }
  else
  {
    id v35 = v32;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100697980 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100031284(v36, (uint64_t)qword_10069A668);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    swift_retain();
    int64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      id v47 = v26;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315394;
      swift_getErrorValue();
      uint64_t v40 = sub_1000AED0C();
      v0[21] = sub_100032B48(v40, v41, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v39 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[22] = sub_100032B48(v28, v27, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Error thrown ensuring registering Push user: %s for topic %s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      sub_100033704();
      id v26 = v47;
      sub_100033704();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_release_n();
    }
    sub_10002EAE0((void *)(v0[26] + 144), *(void *)(v0[26] + 168));
    if (v29)
    {
      if (v29 == 1) {
        sub_1000AEC94();
      }
      else {
        sub_1000AEC80();
      }
    }
    else
    {
      sub_1000AECA8();
    }
    BOOL v43 = (void *)v0[31];
    Swift::Int v44 = (unsigned char *)v0[28];
    unsigned char *v44 = 1;
    sub_1000AECE0(v42);
    sub_1000AE9B8((uint64_t)v44);

    swift_errorRelease();
    sub_10005171C((uint64_t)v44);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v45 = (uint64_t (*)(void))v0[1];
  return v45();
}

uint64_t sub_1000AD850()
{
  uint64_t v33 = v0;
  swift_willThrow();
  if (qword_100697980 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = sub_100078994(v1, (uint64_t)qword_10069A668);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)sub_100051AA0();
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error getting or removing registrations for existing users.", v4, 2u);
    sub_100033704();
  }
  uint64_t v5 = v0[26];

  sub_10002EAE0((void *)(v5 + 144), *(void *)(v5 + 168));
  if (*(unsigned char *)(v5 + 136))
  {
    if (*(unsigned char *)(v5 + 136) == 1) {
      sub_1000AEC94();
    }
    else {
      sub_1000AEC80();
    }
  }
  else
  {
    sub_1000AECA8();
  }
  uint64_t v8 = v0[29];
  *(unsigned char *)uint64_t v8 = 1;
  *(void *)(v8 + 8) = 4;
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  swift_storeEnumTagMultiPayload();
  sub_1000AE9B8(v8);
  swift_errorRelease();
  sub_10005171C(v8);
  uint64_t v9 = (void *)v0[31];
  uint64_t v10 = v0[26];
  sub_1000362B0(0, &qword_10069A800);
  swift_bridgeObjectRetain();
  id v11 = sub_1000ADE4C();
  sub_1000362B0(0, &qword_10069A808);
  uint64_t v13 = *(void *)(v10 + 120);
  unint64_t v12 = *(void *)(v10 + 128);
  int v14 = *(unsigned __int8 *)(v10 + 136);
  swift_bridgeObjectRetain();
  id v15 = sub_1000ADEB0(v13, v12, v14);
  v0[18] = 0;
  unsigned __int8 v16 = [v9 ensureRegistrationPresent:v15 forUser:v11 error:v0 + 18];
  uint64_t v17 = (void *)v0[18];
  if (v16)
  {
    os_log_type_t v18 = (void *)v0[31];
    id v19 = v17;
  }
  else
  {
    id v20 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100697980 != -1) {
      swift_once();
    }
    sub_100031284(v1, (uint64_t)qword_10069A668);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    swift_retain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      swift_getErrorValue();
      uint64_t v24 = sub_1000AED0C();
      v0[21] = sub_100032B48(v24, v25, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[22] = sub_100032B48(v13, v12, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error thrown ensuring registering Push user: %s for topic %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      sub_100033704();
      sub_100033704();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_release_n();
    }

    sub_10002EAE0((void *)(v0[26] + 144), *(void *)(v0[26] + 168));
    if (v14)
    {
      unint64_t v26 = 0xE700000000000000;
      if (v14 == 1) {
        uint64_t v27 = 0x786F62646E6173;
      }
      else {
        uint64_t v27 = 0x6E776F6E6B6E55;
      }
    }
    else
    {
      uint64_t v27 = 0x69746375646F7270;
      unint64_t v26 = 0xEA00000000006E6FLL;
    }
    uint64_t v28 = (void *)v0[31];
    uint64_t v29 = v0[28];
    *(unsigned char *)uint64_t v29 = 1;
    *(void *)(v29 + 8) = 3;
    *(void *)(v29 + 16) = v27;
    *(void *)(v29 + 24) = v26;
    swift_storeEnumTagMultiPayload();
    sub_1000AE9B8(v29);

    swift_errorRelease();
    sub_10005171C(v29);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_1000ADDE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    return sub_1000A6018(v3, (uint64_t)a3);
  }
  sub_1000362B0(0, &qword_10069A800);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  return sub_1000ABF20(v3, v5);
}

id sub_1000ADE4C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() userWithDSID:v0];

  return v1;
}

id sub_1000ADEB0(uint64_t a1, uint64_t a2, char a3)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithTopic:v5 pushEnvironment:a3];

  return v6;
}

uint64_t sub_1000ADF2C()
{
  *(void *)(v1 + 16) = v0;
  return sub_100051A38((uint64_t)sub_1000ADF48, v0);
}

uint64_t sub_1000ADF48()
{
  sub_10003F0F4();
  *(unsigned char *)(*(void *)(v0 + 16) + 208) = 1;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009B9B0;
  sub_1000AED00();
  return sub_1000ADFDC();
}

uint64_t sub_1000ADFDC()
{
  sub_10003F0F4();
  *(void *)(v1 + 160) = v0;
  return _swift_task_switch(sub_1000AE068, v0, 0);
}

uint64_t sub_1000AE068()
{
  sub_10003F444();
  uint64_t v1 = *(void **)(v0[20] + 112);
  v0[21] = v1;
  if (v1)
  {
    v0[2] = v0;
    v0[7] = v0 + 19;
    v0[3] = sub_1000AE260;
    uint64_t v2 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1000ADDE0;
    v0[13] = &unk_100662E80;
    v0[14] = v2;
    [v1 activeUsersWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2, v3, v4, v5, v6, v7, v8, v9);
  }
  else
  {
    if (qword_100697980 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    id v11 = (void *)sub_100078994(v10, (uint64_t)qword_10069A668);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (sub_100051E9C(v12))
    {
      uint64_t v13 = (_WORD *)sub_100051AA0();
      sub_100078C08(v13);
      sub_100051C8C((void *)&_mh_execute_header, v14, v15, "PushManagerPDS has nil PDSRegistrar - Can't unregister dsid");
      sub_100033704();
    }

    unsigned __int8 v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_1000AE260()
{
  sub_10003F0F4();
  sub_1000336EC();
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v2 + 176) = v1;
  uint64_t v3 = *(void *)(v0 + 160);
  if (v1) {
    uint64_t v4 = sub_1000AE6B8;
  }
  else {
    uint64_t v4 = sub_1000AE384;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000AE384()
{
  uint64_t v23 = v0;
  unint64_t v1 = *(void *)(v0 + 152);
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_10:
    id v11 = *(void **)(v0 + 168);
    swift_bridgeObjectRelease();

    goto LABEL_11;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v2) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v3 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v4 = *(id *)(v1 + 8 * v3 + 32);
    }
    uint64_t v5 = v4;
    uint64_t v6 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_20;
    }
    uint64_t v7 = *(void **)(v0 + 168);
    *(void *)(v0 + 80) = 0;
    unsigned int v8 = [v7 removeAllRegistrationsFromUser:v5 error:v0 + 80];
    uint64_t v9 = *(void **)(v0 + 80);
    if (!v8) {
      break;
    }
    id v10 = v9;

    ++v3;
    if (v6 == v2) {
      goto LABEL_10;
    }
  }
  id v14 = v9;
  swift_bridgeObjectRelease();
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_100697980 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100031284(v15, (uint64_t)qword_10069A668);
  swift_errorRetain();
  swift_errorRetain();
  unsigned __int8 v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v21 = *(void **)(v0 + 168);
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_getErrorValue();
    uint64_t v19 = sub_1000AED0C();
    *(void *)(v0 + 80) = sub_100032B48(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error thrown unregistering Push user: %s", v18, 0xCu);
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
LABEL_11:
  sub_10003F1AC();
  return v12();
}

uint64_t sub_1000AE6B8()
{
  uint64_t v11 = v0;
  swift_willThrow();
  if (qword_100697980 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100031284(v1, (uint64_t)qword_10069A668);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v9 = *(void **)(v0 + 168);
    id v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)id v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = sub_1000AED0C();
    *(void *)(v0 + 80) = sub_100032B48(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error thrown unregistering Push user: %s", v4, 0xCu);
    swift_arrayDestroy();
    sub_100033704();
    sub_100033704();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10003F1AC();
  return v7();
}

uint64_t sub_1000AE900()
{
  if (*(void *)(v0 + 200)) {
    [*(id *)(v0 + 192) removeObserver:];
  }

  swift_bridgeObjectRelease();
  sub_10002EB9C(v0 + 144);

  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1000AE968()
{
  sub_1000AE900();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PushManagerPDS()
{
  return self;
}

uint64_t sub_1000AE9B8(uint64_t a1)
{
  uint64_t v10 = type metadata accessor for ASAnalyticsEvent();
  uint64_t v11 = &off_100662930;
  uint64_t v2 = sub_10003EB78(v9);
  sub_1000A6D98(a1, (uint64_t)v2);
  sub_10002EAE0(v9, v10);
  sub_1000A6530();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10002EA7C((uint64_t)v9, (uint64_t)v8);
  uint64_t v4 = swift_allocObject();
  sub_1000311A4(v8, v4 + 16);
  void v7[4] = sub_1000AEB24;
  v7[5] = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  long long v7[2] = sub_1000AC138;
  void v7[3] = &unk_100662ED8;
  uint64_t v5 = _Block_copy(v7);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v5);

  return sub_10002EB9C((uint64_t)v9);
}